{"sha": "50f23ea3bc63621196091139a50562bc20c18f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZjIzZWEzYmM2MzYyMTE5NjA5MTEzOWE1MDU2MmJjMjBjMThmNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-25T07:28:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-25T07:28:31Z"}, "message": "Auto merge of #5090 - JohnTitor:split-up-match-same-arms, r=phansch\n\nSplit up `match_same_arms` ui test\n\nPart of #2038\n\nchangelog: none", "tree": {"sha": "c6a734c64078dd2d0ede55782c94c796c97843a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6a734c64078dd2d0ede55782c94c796c97843a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f23ea3bc63621196091139a50562bc20c18f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f23ea3bc63621196091139a50562bc20c18f55", "html_url": "https://github.com/rust-lang/rust/commit/50f23ea3bc63621196091139a50562bc20c18f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f23ea3bc63621196091139a50562bc20c18f55/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87597b5a42fab5a3080c8b824ffd6cc7c4544060", "url": "https://api.github.com/repos/rust-lang/rust/commits/87597b5a42fab5a3080c8b824ffd6cc7c4544060", "html_url": "https://github.com/rust-lang/rust/commit/87597b5a42fab5a3080c8b824ffd6cc7c4544060"}, {"sha": "83f6b516a094e7a39e3ad58b074cd9c366960b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f6b516a094e7a39e3ad58b074cd9c366960b63", "html_url": "https://github.com/rust-lang/rust/commit/83f6b516a094e7a39e3ad58b074cd9c366960b63"}], "stats": {"total": 441, "additions": 219, "deletions": 222}, "files": [{"sha": "0b9342c9c4234efd70ad5e0552d7ecea018e3884", "filename": "tests/ui/match_same_arms.rs", "status": "modified", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/50f23ea3bc63621196091139a50562bc20c18f55/tests%2Fui%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f23ea3bc63621196091139a50562bc20c18f55/tests%2Fui%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.rs?ref=50f23ea3bc63621196091139a50562bc20c18f55", "patch": "@@ -1,114 +1,24 @@\n #![warn(clippy::match_same_arms)]\n-#![allow(\n-    clippy::blacklisted_name,\n-    clippy::collapsible_if,\n-    clippy::cognitive_complexity,\n-    clippy::eq_op,\n-    clippy::needless_continue,\n-    clippy::needless_return,\n-    clippy::no_effect,\n-    clippy::zero_divided_by_zero,\n-    clippy::unused_unit\n-)]\n-\n-fn bar<T>(_: T) {}\n-fn foo() -> bool {\n-    unimplemented!()\n-}\n \n pub enum Abc {\n     A,\n     B,\n     C,\n }\n \n-#[allow(clippy::unused_unit)]\n fn match_same_arms() {\n-    let _ = match 42 {\n-        42 => {\n-            foo();\n-            let mut a = 42 + [23].len() as i32;\n-            if true {\n-                a += 7;\n-            }\n-            a = -31 - a;\n-            a\n-        },\n-        _ => {\n-            //~ ERROR match arms have same body\n-            foo();\n-            let mut a = 42 + [23].len() as i32;\n-            if true {\n-                a += 7;\n-            }\n-            a = -31 - a;\n-            a\n-        },\n-    };\n-\n     let _ = match Abc::A {\n         Abc::A => 0,\n         Abc::B => 1,\n         _ => 0, //~ ERROR match arms have same body\n     };\n \n-    let _ = match 42 {\n-        42 => foo(),\n-        51 => foo(), //~ ERROR match arms have same body\n-        _ => true,\n-    };\n-\n-    let _ = match Some(42) {\n-        Some(_) => 24,\n-        None => 24, //~ ERROR match arms have same body\n-    };\n-\n-    let _ = match Some(42) {\n-        Some(foo) => 24,\n-        None => 24,\n-    };\n-\n-    let _ = match Some(42) {\n-        Some(42) => 24,\n-        Some(a) => 24, // bindings are different\n-        None => 0,\n-    };\n-\n-    let _ = match Some(42) {\n-        Some(a) if a > 0 => 24,\n-        Some(a) => 24, // one arm has a guard\n-        None => 0,\n-    };\n-\n-    match (Some(42), Some(42)) {\n-        (Some(a), None) => bar(a),\n-        (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n-        _ => (),\n-    }\n-\n-    match (Some(42), Some(42)) {\n-        (Some(a), ..) => bar(a),\n-        (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n-        _ => (),\n-    }\n-\n     match (1, 2, 3) {\n         (1, .., 3) => 42,\n         (.., 3) => 42, //~ ERROR match arms have same body\n         _ => 0,\n     };\n \n-    let _ = match Some(()) {\n-        Some(()) => 0.0,\n-        None => -0.0,\n-    };\n-\n-    match (Some(42), Some(\"\")) {\n-        (Some(a), None) => bar(a),\n-        (None, Some(a)) => bar(a), // bindings have different types\n-        _ => (),\n-    }\n-\n     let _ = match 42 {\n         42 => 1,\n         51 => 1, //~ ERROR match arms have same body"}, {"sha": "0549886a1e8ec7ad8a52f497c1ff647033e63528", "filename": "tests/ui/match_same_arms.stderr", "status": "modified", "additions": 26, "deletions": 132, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/50f23ea3bc63621196091139a50562bc20c18f55/tests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50f23ea3bc63621196091139a50562bc20c18f55/tests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.stderr?ref=50f23ea3bc63621196091139a50562bc20c18f55", "patch": "@@ -1,245 +1,139 @@\n error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:37:14\n-   |\n-LL |           _ => {\n-   |  ______________^\n-LL | |             //~ ERROR match arms have same body\n-LL | |             foo();\n-LL | |             let mut a = 42 + [23].len() as i32;\n-...  |\n-LL | |             a\n-LL | |         },\n-   | |_________^\n-   |\n-   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n-note: same as this\n-  --> $DIR/match_same_arms.rs:28:15\n-   |\n-LL |           42 => {\n-   |  _______________^\n-LL | |             foo();\n-LL | |             let mut a = 42 + [23].len() as i32;\n-LL | |             if true {\n-...  |\n-LL | |             a\n-LL | |         },\n-   | |_________^\n-note: `42` has the same arm body as the `_` wildcard, consider removing it\n-  --> $DIR/match_same_arms.rs:28:15\n-   |\n-LL |           42 => {\n-   |  _______________^\n-LL | |             foo();\n-LL | |             let mut a = 42 + [23].len() as i32;\n-LL | |             if true {\n-...  |\n-LL | |             a\n-LL | |         },\n-   | |_________^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:52:14\n+  --> $DIR/match_same_arms.rs:13:14\n    |\n LL |         _ => 0, //~ ERROR match arms have same body\n    |              ^\n    |\n+   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n note: same as this\n-  --> $DIR/match_same_arms.rs:50:19\n+  --> $DIR/match_same_arms.rs:11:19\n    |\n LL |         Abc::A => 0,\n    |                   ^\n note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it\n-  --> $DIR/match_same_arms.rs:50:19\n+  --> $DIR/match_same_arms.rs:11:19\n    |\n LL |         Abc::A => 0,\n    |                   ^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:57:15\n-   |\n-LL |         51 => foo(), //~ ERROR match arms have same body\n-   |               ^^^^^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:56:15\n-   |\n-LL |         42 => foo(),\n-   |               ^^^^^\n-help: consider refactoring into `42 | 51`\n-  --> $DIR/match_same_arms.rs:56:9\n-   |\n-LL |         42 => foo(),\n-   |         ^^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:63:17\n-   |\n-LL |         None => 24, //~ ERROR match arms have same body\n-   |                 ^^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:62:20\n-   |\n-LL |         Some(_) => 24,\n-   |                    ^^\n-help: consider refactoring into `Some(_) | None`\n-  --> $DIR/match_same_arms.rs:62:9\n-   |\n-LL |         Some(_) => 24,\n-   |         ^^^^^^^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:85:28\n-   |\n-LL |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n-   |                            ^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:84:28\n-   |\n-LL |         (Some(a), None) => bar(a),\n-   |                            ^^^^^^\n-help: consider refactoring into `(Some(a), None) | (None, Some(a))`\n-  --> $DIR/match_same_arms.rs:84:9\n-   |\n-LL |         (Some(a), None) => bar(a),\n-   |         ^^^^^^^^^^^^^^^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:91:26\n-   |\n-LL |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n-   |                          ^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:90:26\n-   |\n-LL |         (Some(a), ..) => bar(a),\n-   |                          ^^^^^^\n-help: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n-  --> $DIR/match_same_arms.rs:90:9\n-   |\n-LL |         (Some(a), ..) => bar(a),\n-   |         ^^^^^^^^^^^^^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:97:20\n+  --> $DIR/match_same_arms.rs:18:20\n    |\n LL |         (.., 3) => 42, //~ ERROR match arms have same body\n    |                    ^^\n    |\n note: same as this\n-  --> $DIR/match_same_arms.rs:96:23\n+  --> $DIR/match_same_arms.rs:17:23\n    |\n LL |         (1, .., 3) => 42,\n    |                       ^^\n help: consider refactoring into `(1, .., 3) | (.., 3)`\n-  --> $DIR/match_same_arms.rs:96:9\n+  --> $DIR/match_same_arms.rs:17:9\n    |\n LL |         (1, .., 3) => 42,\n    |         ^^^^^^^^^^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:114:15\n+  --> $DIR/match_same_arms.rs:24:15\n    |\n LL |         51 => 1, //~ ERROR match arms have same body\n    |               ^\n    |\n note: same as this\n-  --> $DIR/match_same_arms.rs:113:15\n+  --> $DIR/match_same_arms.rs:23:15\n    |\n LL |         42 => 1,\n    |               ^\n help: consider refactoring into `42 | 51`\n-  --> $DIR/match_same_arms.rs:113:9\n+  --> $DIR/match_same_arms.rs:23:9\n    |\n LL |         42 => 1,\n    |         ^^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:116:15\n+  --> $DIR/match_same_arms.rs:26:15\n    |\n LL |         52 => 2, //~ ERROR match arms have same body\n    |               ^\n    |\n note: same as this\n-  --> $DIR/match_same_arms.rs:115:15\n+  --> $DIR/match_same_arms.rs:25:15\n    |\n LL |         41 => 2,\n    |               ^\n help: consider refactoring into `41 | 52`\n-  --> $DIR/match_same_arms.rs:115:9\n+  --> $DIR/match_same_arms.rs:25:9\n    |\n LL |         41 => 2,\n    |         ^^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:122:14\n+  --> $DIR/match_same_arms.rs:32:14\n    |\n LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n    |              ^\n    |\n note: same as this\n-  --> $DIR/match_same_arms.rs:121:14\n+  --> $DIR/match_same_arms.rs:31:14\n    |\n LL |         1 => 2,\n    |              ^\n help: consider refactoring into `1 | 2`\n-  --> $DIR/match_same_arms.rs:121:9\n+  --> $DIR/match_same_arms.rs:31:9\n    |\n LL |         1 => 2,\n    |         ^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:123:14\n+  --> $DIR/match_same_arms.rs:33:14\n    |\n LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n    |              ^\n    |\n note: same as this\n-  --> $DIR/match_same_arms.rs:121:14\n+  --> $DIR/match_same_arms.rs:31:14\n    |\n LL |         1 => 2,\n    |              ^\n help: consider refactoring into `1 | 3`\n-  --> $DIR/match_same_arms.rs:121:9\n+  --> $DIR/match_same_arms.rs:31:9\n    |\n LL |         1 => 2,\n    |         ^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:123:14\n+  --> $DIR/match_same_arms.rs:33:14\n    |\n LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n    |              ^\n    |\n note: same as this\n-  --> $DIR/match_same_arms.rs:122:14\n+  --> $DIR/match_same_arms.rs:32:14\n    |\n LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n    |              ^\n help: consider refactoring into `2 | 3`\n-  --> $DIR/match_same_arms.rs:122:9\n+  --> $DIR/match_same_arms.rs:32:9\n    |\n LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n    |         ^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:140:55\n+  --> $DIR/match_same_arms.rs:50:55\n    |\n LL |                 CommandInfo::External { name, .. } => name.to_string(),\n    |                                                       ^^^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/match_same_arms.rs:139:54\n+  --> $DIR/match_same_arms.rs:49:54\n    |\n LL |                 CommandInfo::BuiltIn { name, .. } => name.to_string(),\n    |                                                      ^^^^^^^^^^^^^^^^\n help: consider refactoring into `CommandInfo::BuiltIn { name, .. } | CommandInfo::External { name, .. }`\n-  --> $DIR/match_same_arms.rs:139:17\n+  --> $DIR/match_same_arms.rs:49:17\n    |\n LL |                 CommandInfo::BuiltIn { name, .. } => name.to_string(),\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "21b1c439e843856b4ea86e434a4a15b2a6783011", "filename": "tests/ui/match_same_arms2.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/50f23ea3bc63621196091139a50562bc20c18f55/tests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f23ea3bc63621196091139a50562bc20c18f55/tests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.rs?ref=50f23ea3bc63621196091139a50562bc20c18f55", "patch": "@@ -0,0 +1,84 @@\n+#![warn(clippy::match_same_arms)]\n+#![allow(clippy::blacklisted_name)]\n+\n+fn bar<T>(_: T) {}\n+fn foo() -> bool {\n+    unimplemented!()\n+}\n+\n+fn match_same_arms() {\n+    let _ = match 42 {\n+        42 => {\n+            foo();\n+            let mut a = 42 + [23].len() as i32;\n+            if true {\n+                a += 7;\n+            }\n+            a = -31 - a;\n+            a\n+        },\n+        _ => {\n+            //~ ERROR match arms have same body\n+            foo();\n+            let mut a = 42 + [23].len() as i32;\n+            if true {\n+                a += 7;\n+            }\n+            a = -31 - a;\n+            a\n+        },\n+    };\n+\n+    let _ = match 42 {\n+        42 => foo(),\n+        51 => foo(), //~ ERROR match arms have same body\n+        _ => true,\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(_) => 24,\n+        None => 24, //~ ERROR match arms have same body\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(foo) => 24,\n+        None => 24,\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(42) => 24,\n+        Some(a) => 24, // bindings are different\n+        None => 0,\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(a) if a > 0 => 24,\n+        Some(a) => 24, // one arm has a guard\n+        None => 0,\n+    };\n+\n+    match (Some(42), Some(42)) {\n+        (Some(a), None) => bar(a),\n+        (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n+        _ => (),\n+    }\n+\n+    match (Some(42), Some(42)) {\n+        (Some(a), ..) => bar(a),\n+        (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n+        _ => (),\n+    }\n+\n+    let _ = match Some(()) {\n+        Some(()) => 0.0,\n+        None => -0.0,\n+    };\n+\n+    match (Some(42), Some(\"\")) {\n+        (Some(a), None) => bar(a),\n+        (None, Some(a)) => bar(a), // bindings have different types\n+        _ => (),\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e34c2c30ab8a28f6dc5c84ffc41d7f458d911358", "filename": "tests/ui/match_same_arms2.stderr", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/50f23ea3bc63621196091139a50562bc20c18f55/tests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50f23ea3bc63621196091139a50562bc20c18f55/tests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.stderr?ref=50f23ea3bc63621196091139a50562bc20c18f55", "patch": "@@ -0,0 +1,109 @@\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms2.rs:20:14\n+   |\n+LL |           _ => {\n+   |  ______________^\n+LL | |             //~ ERROR match arms have same body\n+LL | |             foo();\n+LL | |             let mut a = 42 + [23].len() as i32;\n+...  |\n+LL | |             a\n+LL | |         },\n+   | |_________^\n+   |\n+   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/match_same_arms2.rs:11:15\n+   |\n+LL |           42 => {\n+   |  _______________^\n+LL | |             foo();\n+LL | |             let mut a = 42 + [23].len() as i32;\n+LL | |             if true {\n+...  |\n+LL | |             a\n+LL | |         },\n+   | |_________^\n+note: `42` has the same arm body as the `_` wildcard, consider removing it\n+  --> $DIR/match_same_arms2.rs:11:15\n+   |\n+LL |           42 => {\n+   |  _______________^\n+LL | |             foo();\n+LL | |             let mut a = 42 + [23].len() as i32;\n+LL | |             if true {\n+...  |\n+LL | |             a\n+LL | |         },\n+   | |_________^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms2.rs:34:15\n+   |\n+LL |         51 => foo(), //~ ERROR match arms have same body\n+   |               ^^^^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms2.rs:33:15\n+   |\n+LL |         42 => foo(),\n+   |               ^^^^^\n+help: consider refactoring into `42 | 51`\n+  --> $DIR/match_same_arms2.rs:33:9\n+   |\n+LL |         42 => foo(),\n+   |         ^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms2.rs:40:17\n+   |\n+LL |         None => 24, //~ ERROR match arms have same body\n+   |                 ^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms2.rs:39:20\n+   |\n+LL |         Some(_) => 24,\n+   |                    ^^\n+help: consider refactoring into `Some(_) | None`\n+  --> $DIR/match_same_arms2.rs:39:9\n+   |\n+LL |         Some(_) => 24,\n+   |         ^^^^^^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms2.rs:62:28\n+   |\n+LL |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n+   |                            ^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms2.rs:61:28\n+   |\n+LL |         (Some(a), None) => bar(a),\n+   |                            ^^^^^^\n+help: consider refactoring into `(Some(a), None) | (None, Some(a))`\n+  --> $DIR/match_same_arms2.rs:61:9\n+   |\n+LL |         (Some(a), None) => bar(a),\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms2.rs:68:26\n+   |\n+LL |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n+   |                          ^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms2.rs:67:26\n+   |\n+LL |         (Some(a), ..) => bar(a),\n+   |                          ^^^^^^\n+help: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n+  --> $DIR/match_same_arms2.rs:67:9\n+   |\n+LL |         (Some(a), ..) => bar(a),\n+   |         ^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}