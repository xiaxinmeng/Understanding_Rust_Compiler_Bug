{"sha": "a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Y2UzNDJmYTM4NGIzYzFmODZlOWIzYTgwZWM3YjMwYTg3ZDJlNjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T00:02:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:08:26Z"}, "message": "Convert all uses of unsafe_from_bytes to unsafe_from_bytes_ivec", "tree": {"sha": "94e3672f0e08e1a56cc4ce44d803f85bf38c892b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94e3672f0e08e1a56cc4ce44d803f85bf38c892b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "html_url": "https://github.com/rust-lang/rust/commit/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b80f9bf7a3d72a58111b9d753a777411c7ad4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b80f9bf7a3d72a58111b9d753a777411c7ad4a", "html_url": "https://github.com/rust-lang/rust/commit/49b80f9bf7a3d72a58111b9d753a777411c7ad4a"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "ede46df6df595c15d5f274fefa212bc42e710b93", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -311,8 +311,8 @@ fn sanitize(s: &str) -> str {\n                     if c != 10u8 && c != '}' as u8 && c != ')' as u8 &&\n                            c != ' ' as u8 && c != '\\t' as u8 && c != ';' as u8\n                        {\n-                        let v = [c];\n-                        result += str::unsafe_from_bytes(v);\n+                        let v = ~[c];\n+                        result += str::unsafe_from_bytes_ivec(v);\n                     }\n                 }\n             }"}, {"sha": "04939ad0ecdb209b86f37bf03b892ccd8b1a882b", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -177,11 +177,11 @@ fn scan_exponent(rdr: &reader) -> option::t[str] {\n     let c = rdr.curr();\n     let rslt = \"\";\n     if c == 'e' || c == 'E' {\n-        rslt += str::unsafe_from_bytes([c as u8]);\n+        rslt += str::unsafe_from_bytes_ivec(~[c as u8]);\n         rdr.bump();\n         c = rdr.curr();\n         if c == '-' || c == '+' {\n-            rslt += str::unsafe_from_bytes([c as u8]);\n+            rslt += str::unsafe_from_bytes_ivec(~[c as u8]);\n             rdr.bump();\n         }\n         let exponent = scan_dec_digits(rdr);\n@@ -195,7 +195,7 @@ fn scan_dec_digits(rdr: &reader) -> str {\n     let c = rdr.curr();\n     let rslt: str = \"\";\n     while is_dec_digit(c) || c == '_' {\n-        if c != '_' { rslt += str::unsafe_from_bytes([c as u8]); }\n+        if c != '_' { rslt += str::unsafe_from_bytes_ivec(~[c as u8]); }\n         rdr.bump();\n         c = rdr.curr();\n     }"}, {"sha": "6d89bc325de5dee9e4ff693d82ccbc8b49acdaf3", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -1385,8 +1385,8 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n         print_string(s, st);\n       }\n       ast::lit_char(ch) {\n-        word(s.s, \"'\" +\n-             escape_str(str::unsafe_from_bytes([ch as u8]), '\\'') + \"'\");\n+        word(s.s, \"'\" + escape_str(\n+            str::unsafe_from_bytes_ivec(~[ch as u8]), '\\'') + \"'\");\n       }\n       ast::lit_int(val) { word(s.s, int::str(val)); }\n       ast::lit_uint(val) { word(s.s, uint::str(val) + \"u\"); }"}, {"sha": "a598237284bd47939f4689a22c8db997881e59d9", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -132,7 +132,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n       }\n       ty_var(v) { s += \"<T\" + int::str(v) + \">\"; }\n       ty_param(id,_) {\n-        s += \"'\" + str::unsafe_from_bytes([('a' as u8) + (id as u8)]);\n+        s += \"'\" + str::unsafe_from_bytes_ivec(~[('a' as u8) + (id as u8)]);\n       }\n       _ { s += ty_to_short_str(cx, typ); }\n     }"}, {"sha": "295ae7fe110dc168ebad019fefa155e141895f79", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -356,9 +356,9 @@ mod rt {\n \n     // FIXME: This might be useful in str: but needs to be utf8 safe first\n     fn str_init_elt(c: char, n_elts: uint) -> str {\n-        let svec = vec::init_elt[u8](c as u8, n_elts);\n+        let svec = ivec::from_vec(vec::init_elt[u8](c as u8, n_elts));\n \n-        ret str::unsafe_from_bytes(svec);\n+        ret str::unsafe_from_bytes_ivec((svec));\n     }\n     tag pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n     fn pad(cv: &conv, s: str, mode: pad_mode) -> str {\n@@ -407,7 +407,7 @@ mod rt {\n         if signed && zero_padding && str::byte_len(s) > 0u {\n             let head = s.(0);\n             if head == '+' as u8 || head == '-' as u8 || head == ' ' as u8 {\n-                let headstr = str::unsafe_from_bytes([head]);\n+                let headstr = str::unsafe_from_bytes_ivec(~[head]);\n                 let bytelen = str::byte_len(s);\n                 let numpart = str::substr(s, 1u, bytelen - 1u);\n                 ret headstr + padstr + numpart;"}, {"sha": "3407eba4875b36278a88c0d77d467055ec1b371c", "filename": "src/lib/io.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -120,7 +120,7 @@ obj new_reader(rdr: buf_reader) {\n                 go_on = false;\n             } else { vec::push[u8](buf, ch as u8); }\n         }\n-        ret str::unsafe_from_bytes(buf);\n+        ret str::unsafe_from_bytes_ivec(ivec::from_vec(buf));\n     }\n     fn read_c_str() -> str {\n         let buf: vec[u8] = [];\n@@ -131,7 +131,7 @@ obj new_reader(rdr: buf_reader) {\n                 go_on = false;\n             } else { vec::push[u8](buf, ch as u8); }\n         }\n-        ret str::unsafe_from_bytes(buf);\n+        ret str::unsafe_from_bytes_ivec(ivec::from_vec(buf));\n     }\n \n     // FIXME deal with eof?\n@@ -440,7 +440,9 @@ fn string_writer() -> str_writer {\n     let buf: mutable_byte_buf = @{mutable buf: b, mutable pos: 0u};\n     obj str_writer_wrap(wr: writer, buf: mutable_byte_buf) {\n         fn get_writer() -> writer { ret wr; }\n-        fn get_str() -> str { ret str::unsafe_from_bytes(buf.buf); }\n+        fn get_str() -> str {\n+            ret str::unsafe_from_bytes_ivec(ivec::from_vec(buf.buf));\n+        }\n     }\n     ret str_writer_wrap(new_writer(byte_buf_writer(buf)), buf);\n }"}, {"sha": "ab232f36c296c4277733bf921f98de01ede72c56", "filename": "src/lib/ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Flib%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Flib%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fivec.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -17,7 +17,7 @@ native \"rust\" mod rustrt {\n                                     count: uint);\n }\n \n-fn from_vec[@T](v: &vec[T]) -> [T] {\n+fn from_vec[@T](v: &vec[mutable? T]) -> [T] {\n     let iv = ~[];\n     for e in v {\n         iv += ~[e];"}, {"sha": "05e3ee3a1d9b3fff8706c033d823740f2405284a", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -103,8 +103,8 @@ fn start_program(prog: str, args: vec[str]) -> @program_res {\n fn read_all(rd: &io::reader) -> str {\n     let buf = \"\";\n     while !rd.eof() {\n-        let bytes = rd.read_bytes(4096u);\n-        buf += str::unsafe_from_bytes(bytes);\n+        let bytes = ivec::from_vec(rd.read_bytes(4096u));\n+        buf += str::unsafe_from_bytes_ivec(bytes);\n     }\n     ret buf;\n }"}, {"sha": "d654091471f5cb2648b7868f6f1eb9ae04ecfd75", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -87,8 +87,8 @@ fn readclose(fd: int) -> str {\n     let reader = io::new_reader(io::FILE_buf_reader(file, option::none));\n     let buf = \"\";\n     while !reader.eof() {\n-        let bytes = reader.read_bytes(4096u);\n-        buf += str::unsafe_from_bytes(bytes);\n+        let bytes = ivec::from_vec(reader.read_bytes(4096u));\n+        buf += str::unsafe_from_bytes_ivec(bytes);\n     }\n     os::libc::fclose(file);\n     ret buf;"}, {"sha": "bc16e6ea2cf24918af19c8ad55d246b9bf8156ba", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -4,6 +4,7 @@ import std::os;\n import std::io;\n import std::option;\n import std::str;\n+import std::ivec;\n \n // Regression test for memory leaks\n #[cfg(target_os = \"linux\")]\n@@ -58,8 +59,8 @@ fn test_pipes() {\n         let reader = io::new_reader(io::FILE_buf_reader(file, option::none));\n         let buf = \"\";\n         while !reader.eof() {\n-            let bytes = reader.read_bytes(4096u);\n-            buf += str::unsafe_from_bytes(bytes);\n+            let bytes = ivec::from_vec(reader.read_bytes(4096u));\n+            buf += str::unsafe_from_bytes_ivec(bytes);\n         }\n         os::libc::fclose(file);\n         ret buf;"}, {"sha": "3b103f80e5c0fdf88916e951fafe76f137f73c6d", "filename": "src/test/stdtest/vec_str_conversions.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs?ref=a9ce342fa384b3c1f86e9b3a80ec7b30a87d2e65", "patch": "@@ -3,24 +3,17 @@\n // -*- rust -*-\n use std;\n import std::str;\n-import std::vec;\n import std::ivec;\n \n #[test]\n fn test_simple() {\n     let s1: str = \"All mimsy were the borogoves\";\n-    /*\n-     * FIXME from_bytes(vec[u8] v) has constraint is_utf(v), which is\n-     * unimplemented and thereby just fails.  This doesn't stop us from\n-     * using from_bytes for now since the constraint system isn't fully\n-     * working, but we should implement is_utf8 before that happens.\n-     */\n \n-    let v: vec[u8] = ivec::to_vec(str::bytes(s1));\n-    let s2: str = str::unsafe_from_bytes(v);\n+    let v: [u8] = str::bytes(s1);\n+    let s2: str = str::unsafe_from_bytes_ivec(v);\n     let i: uint = 0u;\n     let n1: uint = str::byte_len(s1);\n-    let n2: uint = vec::len[u8](v);\n+    let n2: uint = ivec::len[u8](v);\n     assert (n1 == n2);\n     while i < n1 {\n         let a: u8 = s1.(i);"}]}