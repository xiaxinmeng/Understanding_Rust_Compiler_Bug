{"sha": "1a6f215fb54167afe20c265218d1292110a12ebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmYyMTVmYjU0MTY3YWZlMjBjMjY1MjE4ZDEyOTIxMTBhMTJlYmY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-08-30T04:43:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-30T04:43:04Z"}, "message": "Merge pull request #2975 from max-sixty/clippy\n\nSome clippy changes", "tree": {"sha": "77688519235d4174b068c702383a980cf7d8c85b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77688519235d4174b068c702383a980cf7d8c85b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6f215fb54167afe20c265218d1292110a12ebf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbh3XYCRBK7hj4Ov3rIwAAdHIIAHcV3vNvnjob1PH0q2xih2vj\nT+qhW5kOxmY3IG0jGzftA/3Q6hvU0zlHHEUbaoI3EhxlYLK2c77FMSXF8jOv8fyo\nsBvnpGkehHNRKoijm7Yl8Udtnyc3zLUcA/LIPFqloFzIOp0I6gQdx+4JDu3kZHaD\n/x/iGMxxVcJAsVmOrs9Hfy8FbKhwHXCalhwkcN0feFD2TdaDsnW7346nh3VQO6YV\nwm66jCfysu56dT1mf9f7YATkh5jL87msfqT21Jk+I5jKL7rMST64ej0mZR+5FW2k\noS32vC4C+etiAcmkc5u6er58zj31RXg7woSifV2MNQIA8jKBiEer2ZHcq1SStp4=\n=L3Mp\n-----END PGP SIGNATURE-----\n", "payload": "tree 77688519235d4174b068c702383a980cf7d8c85b\nparent b784f234847f5600390f38e41fce32cd89e9d823\nparent df72570b58824e9a2bc9ec48c36e0c708412797b\nauthor Nick Cameron <nrc@ncameron.org> 1535604184 +1200\ncommitter GitHub <noreply@github.com> 1535604184 +1200\n\nMerge pull request #2975 from max-sixty/clippy\n\nSome clippy changes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6f215fb54167afe20c265218d1292110a12ebf", "html_url": "https://github.com/rust-lang/rust/commit/1a6f215fb54167afe20c265218d1292110a12ebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6f215fb54167afe20c265218d1292110a12ebf/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b784f234847f5600390f38e41fce32cd89e9d823", "url": "https://api.github.com/repos/rust-lang/rust/commits/b784f234847f5600390f38e41fce32cd89e9d823", "html_url": "https://github.com/rust-lang/rust/commit/b784f234847f5600390f38e41fce32cd89e9d823"}, {"sha": "df72570b58824e9a2bc9ec48c36e0c708412797b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df72570b58824e9a2bc9ec48c36e0c708412797b", "html_url": "https://github.com/rust-lang/rust/commit/df72570b58824e9a2bc9ec48c36e0c708412797b"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "e3c6201d3c4c3d53679fc220785e9517e38cb5f6", "filename": "src/comment.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=1a6f215fb54167afe20c265218d1292110a12ebf", "patch": "@@ -525,7 +525,7 @@ fn rewrite_comment_inner(\n \n const RUSTFMT_CUSTOM_COMMENT_PREFIX: &str = \"//#### \";\n \n-fn hide_sharp_behind_comment<'a>(s: &'a str) -> Cow<'a, str> {\n+fn hide_sharp_behind_comment(s: &str) -> Cow<str> {\n     if s.trim_left().starts_with(\"# \") {\n         Cow::from(format!(\"{}{}\", RUSTFMT_CUSTOM_COMMENT_PREFIX, s))\n     } else {\n@@ -823,20 +823,20 @@ pub enum FullCodeCharKind {\n }\n \n impl FullCodeCharKind {\n-    pub fn is_comment(&self) -> bool {\n-        match *self {\n+    pub fn is_comment(self) -> bool {\n+        match self {\n             FullCodeCharKind::StartComment\n             | FullCodeCharKind::InComment\n             | FullCodeCharKind::EndComment => true,\n             _ => false,\n         }\n     }\n \n-    pub fn is_string(&self) -> bool {\n-        *self == FullCodeCharKind::InString\n+    pub fn is_string(self) -> bool {\n+        self == FullCodeCharKind::InString\n     }\n \n-    fn to_codecharkind(&self) -> CodeCharKind {\n+    fn to_codecharkind(self) -> CodeCharKind {\n         if self.is_comment() {\n             CodeCharKind::Comment\n         } else {\n@@ -987,9 +987,7 @@ impl<'a> Iterator for LineClasses<'a> {\n     type Item = (FullCodeCharKind, String);\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        if self.base.peek().is_none() {\n-            return None;\n-        }\n+        self.base.peek()?;\n \n         let mut line = String::new();\n \n@@ -1174,7 +1172,7 @@ pub fn filter_normal_code(code: &str) -> String {\n         }\n         _ => (),\n     });\n-    if !code.ends_with(\"\\n\") && buffer.ends_with(\"\\n\") {\n+    if !code.ends_with('\\n') && buffer.ends_with('\\n') {\n         buffer.pop();\n     }\n     buffer"}, {"sha": "bf9cd8597321f65d2ff70be31d0187959243703b", "filename": "src/config/config_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=1a6f215fb54167afe20c265218d1292110a12ebf", "patch": "@@ -175,11 +175,11 @@ macro_rules! create_config {\n             }\n             )+\n \n-            pub fn set<'a>(&'a mut self) -> ConfigSetter<'a> {\n+            pub fn set(&mut self) -> ConfigSetter {\n                 ConfigSetter(self)\n             }\n \n-            pub fn was_set<'a>(&'a self) -> ConfigWasSet<'a> {\n+            pub fn was_set(&self) -> ConfigWasSet {\n                 ConfigWasSet(self)\n             }\n "}, {"sha": "61496e21642415c125cec3c583a51c89e3e92250", "filename": "src/config/lists.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Fconfig%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Fconfig%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flists.rs?ref=1a6f215fb54167afe20c265218d1292110a12ebf", "patch": "@@ -80,12 +80,12 @@ pub enum SeparatorPlace {\n impl_enum_serialize_and_deserialize!(SeparatorPlace, Front, Back);\n \n impl SeparatorPlace {\n-    pub fn is_front(&self) -> bool {\n-        *self == SeparatorPlace::Front\n+    pub fn is_front(self) -> bool {\n+        self == SeparatorPlace::Front\n     }\n \n-    pub fn is_back(&self) -> bool {\n-        *self == SeparatorPlace::Back\n+    pub fn is_back(self) -> bool {\n+        self == SeparatorPlace::Back\n     }\n \n     pub fn from_tactic("}, {"sha": "8867c6f2283236d42b1a5ba90aa84ec850744000", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=1a6f215fb54167afe20c265218d1292110a12ebf", "patch": "@@ -209,8 +209,8 @@ pub enum Separator {\n }\n \n impl Separator {\n-    pub fn len(&self) -> usize {\n-        match *self {\n+    pub fn len(self) -> usize {\n+        match self {\n             // 2 = `, `\n             Separator::Comma => 2,\n             // 3 = ` | `"}, {"sha": "931aaff17655a2a27cf39a207e7c5ac532512fd0", "filename": "src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=1a6f215fb54167afe20c265218d1292110a12ebf", "patch": "@@ -289,7 +289,7 @@ fn rewrite_match_pattern(\n         guard,\n         shape,\n         trimmed_last_line_width(&pats_str),\n-        pats_str.contains(\"\\n\"),\n+        pats_str.contains('\\n'),\n     )?;\n \n     Some(format!(\"{}{}\", pats_str, guard_str))"}, {"sha": "9a9c9831f4017baf8714a3dd9d031918f9ee6c94", "filename": "src/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=1a6f215fb54167afe20c265218d1292110a12ebf", "patch": "@@ -223,7 +223,7 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n         // 1 = \"(\"\n         let combine_arg_with_callee = self.items.len() == 1\n             && self.items[0].to_expr().is_some()\n-            && self.ident.len() + 1 <= self.context.config.tab_spaces();\n+            && self.ident.len() < self.context.config.tab_spaces();\n         let overflow_last = combine_arg_with_callee || can_be_overflowed(self.context, self.items);\n \n         // Replace the last item with its first line to see if it fits with"}, {"sha": "3ab639a1ac34ab530d20030910b0e42a2030717e", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f215fb54167afe20c265218d1292110a12ebf/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=1a6f215fb54167afe20c265218d1292110a12ebf", "patch": "@@ -520,7 +520,7 @@ impl Rewrite for ast::GenericBounds {\n         }\n \n         let span = mk_sp(self.get(0)?.span().lo(), self.last()?.span().hi());\n-        let has_paren = context.snippet(span).starts_with(\"(\");\n+        let has_paren = context.snippet(span).starts_with('(');\n         let bounds_shape = if has_paren {\n             shape.offset_left(1)?.sub_width(1)?\n         } else {"}]}