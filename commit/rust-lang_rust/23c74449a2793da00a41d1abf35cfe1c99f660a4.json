{"sha": "23c74449a2793da00a41d1abf35cfe1c99f660a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYzc0NDQ5YTI3OTNkYTAwYTQxZDFhYmYzNWNmZTFjOTlmNjYwYTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-01-15T18:27:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-01-15T18:27:21Z"}, "message": "rustup", "tree": {"sha": "3ab3f8c03bc0444f1a4ea47b61a7f402d06050cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab3f8c03bc0444f1a4ea47b61a7f402d06050cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23c74449a2793da00a41d1abf35cfe1c99f660a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23c74449a2793da00a41d1abf35cfe1c99f660a4", "html_url": "https://github.com/rust-lang/rust/commit/23c74449a2793da00a41d1abf35cfe1c99f660a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23c74449a2793da00a41d1abf35cfe1c99f660a4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a91f3794be69cf8626cfb1ce3b443f24902929fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a91f3794be69cf8626cfb1ce3b443f24902929fb", "html_url": "https://github.com/rust-lang/rust/commit/a91f3794be69cf8626cfb1ce3b443f24902929fb"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "09255212910c4cdb14bf42f7c44a747942a6f41d", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c74449a2793da00a41d1abf35cfe1c99f660a4/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/23c74449a2793da00a41d1abf35cfe1c99f660a4/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=23c74449a2793da00a41d1abf35cfe1c99f660a4", "patch": "@@ -1 +1 @@\n-adc65725004c8aac16392fe4052c3e347181157d\n+31dd4f4acbcbdb02b0745d2136399ed664a28050"}, {"sha": "fba933d278d2fcd452dee6ab3948ffcfe7af9cec", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c74449a2793da00a41d1abf35cfe1c99f660a4/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c74449a2793da00a41d1abf35cfe1c99f660a4/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=23c74449a2793da00a41d1abf35cfe1c99f660a4", "patch": "@@ -76,7 +76,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Get the `Place` for a local\n     fn local_place(&mut self, local: mir::Local) -> InterpResult<'tcx, PlaceTy<'tcx, Tag>> {\n         let this = self.eval_context_mut();\n-        let place = mir::Place { base: mir::PlaceBase::Local(local), projection: List::empty() };\n+        let place = mir::Place { local: local, projection: List::empty() };\n         this.eval_place(&place)\n     }\n \n@@ -349,7 +349,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         for &imm in imms {\n             this.write_immediate_to_mplace(\n                 *imm,\n-                place.offset(offset, None, imm.layout, &*this.tcx)?,\n+                place.offset(offset, MemPlaceMeta::None, imm.layout, &*this.tcx)?,\n             )?;\n             offset += imm.layout.size;\n         }"}, {"sha": "151edfda4318af25a9578b7e5e4415efa3ee216a", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c74449a2793da00a41d1abf35cfe1c99f660a4/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c74449a2793da00a41d1abf35cfe1c99f660a4/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=23c74449a2793da00a41d1abf35cfe1c99f660a4", "patch": "@@ -409,7 +409,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         _ => {\n                             // Do it in memory\n                             let mplace = this.force_allocation(dest)?;\n-                            mplace.meta.unwrap_none(); // must be sized\n+                            assert!(!mplace.layout.is_unsized());\n                             this.memory.write_bytes(\n                                 mplace.ptr,\n                                 iter::repeat(0u8).take(dest.layout.size.bytes() as usize),\n@@ -574,7 +574,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         _ => {\n                             // Do it in memory\n                             let mplace = this.force_allocation(dest)?;\n-                            mplace.meta.unwrap_none();\n+                            assert!(!mplace.layout.is_unsized());\n                             let ptr = mplace.ptr.assert_ptr();\n                             // We know the return place is in-bounds\n                             this.memory.get_raw_mut(ptr.alloc_id)?.mark_definedness("}, {"sha": "d676f046465741caca179b502867375044925305", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c74449a2793da00a41d1abf35cfe1c99f660a4/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c74449a2793da00a41d1abf35cfe1c99f660a4/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=23c74449a2793da00a41d1abf35cfe1c99f660a4", "patch": "@@ -132,7 +132,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let payload = this.machine.panic_payload.take().unwrap();\n             let payload = this.ref_to_mplace(payload)?;\n             let payload_data_place = payload.ptr;\n-            let payload_vtable_place = payload.meta.expect(\"Expected fat pointer\");\n+            let payload_vtable_place = payload.meta.unwrap_meta();\n \n             this.write_scalar(payload_data_place, unwind_data.data_place.into())?;\n             this.write_scalar(payload_vtable_place, unwind_data.vtable_place.into())?;"}]}