{"sha": "e86f1845ff6ca556621e2d366a6ad0c2d5aa408f", "node_id": "C_kwDOAAsO6NoAKGU4NmYxODQ1ZmY2Y2E1NTY2MjFlMmQzNjZhNmFkMGMyZDVhYTQwOGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-19T14:35:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-19T14:35:21Z"}, "message": "Rollup merge of #104497 - lyming2007:issue-104379-fix, r=fee1-dead\n\ndetect () to avoid redundant <> suggestion for type\n\nfix #104379", "tree": {"sha": "a0e0bf5061aff33ed74fa69ef9cf47c554e2d570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e0bf5061aff33ed74fa69ef9cf47c554e2d570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjeOmpCRBK7hj4Ov3rIwAAPv0IADwUSdP7iY2SHHcph7TE2tlS\n2UyZpy4jdZtMSiGzeZtZ0385e9KTQotj40WBXLxnOoQH7DW6LurGSwT9GBuE0z2e\nPXCvU4VtLJIEHqCbuKi2cGRR+i6QS+KhExl4EhlNIOs7f0gXp4c+bGxo5EdiVIHp\nqXkK47J+NHigOb1DHUN9UtZvxn+X5j+gy5PT/5oqGbptJ5BEdkOqvLliACSsWrSM\n06uC5Htig68+Gk/cj+dgy1e4qoPqZRk4tWYXBSun7MyzTIFI+p5YatRbyyzK1tK5\nAIiDSP3XNL6ZJ7dPFQATEdVYWoGYYXIjK08L1KSX0u9UtlKOe9pduSvpenTrKSg=\n=ual5\n-----END PGP SIGNATURE-----\n", "payload": "tree a0e0bf5061aff33ed74fa69ef9cf47c554e2d570\nparent 06707c073dcb29732933dc484877aa57c6dd1f94\nparent 867582eb9710b08e88d45ca8d2a452efd3233fea\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668868521 +0100\ncommitter GitHub <noreply@github.com> 1668868521 +0100\n\nRollup merge of #104497 - lyming2007:issue-104379-fix, r=fee1-dead\n\ndetect () to avoid redundant <> suggestion for type\n\nfix #104379\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f", "html_url": "https://github.com/rust-lang/rust/commit/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06707c073dcb29732933dc484877aa57c6dd1f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/06707c073dcb29732933dc484877aa57c6dd1f94", "html_url": "https://github.com/rust-lang/rust/commit/06707c073dcb29732933dc484877aa57c6dd1f94"}, {"sha": "867582eb9710b08e88d45ca8d2a452efd3233fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/867582eb9710b08e88d45ca8d2a452efd3233fea", "html_url": "https://github.com/rust-lang/rust/commit/867582eb9710b08e88d45ca8d2a452efd3233fea"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "9a66e73d9c2aa1838f7d7342d91b56ee73781d13", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=e86f1845ff6ca556621e2d366a6ad0c2d5aa408f", "patch": "@@ -1918,12 +1918,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         | ty::Str\n                         | ty::Projection(_)\n                         | ty::Param(_) => format!(\"{deref_ty}\"),\n-                        // we need to test something like  <&[_]>::len\n+                        // we need to test something like  <&[_]>::len or <(&[u32])>::len\n                         // and Vec::function();\n-                        // <&[_]>::len doesn't need an extra \"<>\" between\n+                        // <&[_]>::len or <&[u32]>::len doesn't need an extra \"<>\" between\n                         // but for Adt type like Vec::function()\n                         // we would suggest <[_]>::function();\n-                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_bracket(ty.span)  => format!(\"{deref_ty}\"),\n+                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_or_parentheses(ty.span)  => format!(\"{deref_ty}\"),\n                         _ => format!(\"<{deref_ty}>\"),\n                     };\n                     err.span_suggestion_verbose("}, {"sha": "e8d129d733c1e340c10b76bbc28cb2e3b3646c08", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=e86f1845ff6ca556621e2d366a6ad0c2d5aa408f", "patch": "@@ -753,22 +753,29 @@ impl SourceMap {\n         }\n     }\n \n-    /// Given a 'Span', tries to tell if the next character is '>'\n-    /// and the previous charactoer is '<' after skipping white space\n-    /// return true if wrapped by '<>'\n-    pub fn span_wrapped_by_angle_bracket(&self, span: Span) -> bool {\n+    /// Given a 'Span', tries to tell if it's wrapped by \"<>\" or \"()\"\n+    /// the algorithm searches if the next character is '>' or ')' after skipping white space\n+    /// then searches the previous charactoer to match '<' or '(' after skipping white space\n+    /// return true if wrapped by '<>' or '()'\n+    pub fn span_wrapped_by_angle_or_parentheses(&self, span: Span) -> bool {\n         self.span_to_source(span, |src, start_index, end_index| {\n             if src.get(start_index..end_index).is_none() {\n                 return Ok(false);\n             }\n             // test the right side to match '>' after skipping white space\n             let end_src = &src[end_index..];\n             let mut i = 0;\n+            let mut found_right_parentheses = false;\n+            let mut found_right_angle = false;\n             while let Some(cc) = end_src.chars().nth(i) {\n                 if cc == ' ' {\n                     i = i + 1;\n                 } else if cc == '>' {\n                     // found > in the right;\n+                    found_right_angle = true;\n+                    break;\n+                } else if cc == ')' {\n+                    found_right_parentheses = true;\n                     break;\n                 } else {\n                     // failed to find '>' return false immediately\n@@ -786,6 +793,16 @@ impl SourceMap {\n                     i = i - 1;\n                 } else if cc == '<' {\n                     // found < in the left\n+                    if !found_right_angle {\n+                        // skip something like \"(< )>\"\n+                        return Ok(false);\n+                    }\n+                    break;\n+                } else if cc == '(' {\n+                    if !found_right_parentheses {\n+                        // skip something like \"<(>)\"\n+                        return Ok(false);\n+                    }\n                     break;\n                 } else {\n                     // failed to find '<' return false immediately"}, {"sha": "7cd76286a929efbf054860ce2e3561a8ad9b1148", "filename": "src/test/ui/type/issue-103271.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs?ref=e86f1845ff6ca556621e2d366a6ad0c2d5aa408f", "patch": "@@ -7,4 +7,12 @@ fn main() {\n         let x: &u32 = item;\n         assert_eq!(x, &1);\n     }\n+    let iter_fun2 = <(&[u32])>::iter;\n+    //~^ no function or associated item named `iter` found for reference `&[u32]` in the current scope [E0599]\n+    //~| function or associated item not found in `&[u32]`\n+    //~| HELP the function `iter` is implemented on `[u32]`\n+    for item2 in iter_fun2(&[1,1]) {\n+        let x: &u32 = item2;\n+        assert_eq!(x, &1);\n+    }\n }"}, {"sha": "f4dac51b2b47852a6c4dd8dd7a640f454a544806", "filename": "src/test/ui/type/issue-103271.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e86f1845ff6ca556621e2d366a6ad0c2d5aa408f/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr?ref=e86f1845ff6ca556621e2d366a6ad0c2d5aa408f", "patch": "@@ -9,6 +9,17 @@ help: the function `iter` is implemented on `[u32]`\n LL |     let iter_fun = <[u32]>::iter;\n    |                     ~~~~~\n \n-error: aborting due to previous error\n+error[E0599]: no function or associated item named `iter` found for reference `&[u32]` in the current scope\n+  --> $DIR/issue-103271.rs:10:33\n+   |\n+LL |     let iter_fun2 = <(&[u32])>::iter;\n+   |                                 ^^^^ function or associated item not found in `&[u32]`\n+   |\n+help: the function `iter` is implemented on `[u32]`\n+   |\n+LL |     let iter_fun2 = <([u32])>::iter;\n+   |                       ~~~~~\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}