{"sha": "065e497630db6d9be3e1fd984270c9807408b55e", "node_id": "C_kwDOAAsO6NoAKDA2NWU0OTc2MzBkYjZkOWJlM2UxZmQ5ODQyNzBjOTgwNzQwOGI1NWU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T15:47:58Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T18:13:44Z"}, "message": "Improve opt_local_def_id docs", "tree": {"sha": "84b7b41446381c81c2736145e1bfbf3cf1790bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b7b41446381c81c2736145e1bfbf3cf1790bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/065e497630db6d9be3e1fd984270c9807408b55e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLsDFoACgkQgTGiTgx5\n769hbw/+J+WKKd28RiciJYjNQywJxSo1C/02x0aLJLLrt4XO0K0BTyNfig+bFyQp\npNOqBZVTGbr2SPjwWiJfneMfAvDHt3hOwp2UQOPzCgToR7Zj+tBZkQjlkN1GZbBM\n1gQFBvrFnJvYDfY+OZFpCiJlKOIEkVxmmFzGusi8kFICneP093alf96p96K8qKdh\nq0cPT2Vgj6zjvLaFvueNmTmBDEkdmSqwbNXjn1kmLMX7O2Pu5qRPcfdMZNWW0hdX\nwkHidANGjoZ1E1VTqL3LqGSoelAJ/bQxRyLZRdIZBPelJ7KO/UcnQgCtWo1JZ090\nR1sc7H1pV8mbDKkMJxDnWgBHJdO9IJrU8k1YTsfvlX2ZJHGwqjeLYlw6QMWRe6An\n/t5+dYhADDdl3JyVEdR/AowPLzaBmS/LCY7O1SD9KWJzxAkU3cOO6bE9gEcut5wi\nkN+tt8DkKhjQb7DfxOR2rPTrDuocjwt/q6abWMbmsS7tZqSLB61KnUmdwVJaGZvJ\nGg6EVFbClO8t/Ux9IWJUv6qN5jZ9v1+zaMUhCy1sMGGaJqI8DmnFCWTQT1X1Rr00\ncMdyq7w/qdhqUqO3Qw7H4yp4Nkl25keXeb4Bi1u063XHxRWGlscA3k36Sjv/7pno\naniBliK5yHYaQtCIA15sq4jSaM0aPNIQGteAxDNiw553S17aOgw=\n=bhD/\n-----END PGP SIGNATURE-----", "payload": "tree 84b7b41446381c81c2736145e1bfbf3cf1790bff\nparent bf1c7da1476c8193a0e92262c3e4dd2d88392569\nauthor Santiago Pastorino <spastorino@gmail.com> 1659628078 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659636824 -0300\n\nImprove opt_local_def_id docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/065e497630db6d9be3e1fd984270c9807408b55e", "html_url": "https://github.com/rust-lang/rust/commit/065e497630db6d9be3e1fd984270c9807408b55e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/065e497630db6d9be3e1fd984270c9807408b55e/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1c7da1476c8193a0e92262c3e4dd2d88392569", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1c7da1476c8193a0e92262c3e4dd2d88392569", "html_url": "https://github.com/rust-lang/rust/commit/bf1c7da1476c8193a0e92262c3e4dd2d88392569"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "f86dcb9c4c88194bf6934ade1a9f2aa0260a761c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/065e497630db6d9be3e1fd984270c9807408b55e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065e497630db6d9be3e1fd984270c9807408b55e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=065e497630db6d9be3e1fd984270c9807408b55e", "patch": "@@ -489,14 +489,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// Given the id of some node in the AST, finds the `LocalDefId` associated with it by the name\n     /// resolver (if any), after applying any remapping from `get_remapped_def_id`.\n     ///\n-    /// For example: for each captured lifetime (e.g., 'a), we create a new lifetime parameter that is a generic\n-    /// defined on the TAIT, so we have type Foo<'a1> = ... and we establish a mapping from the\n-    /// original parameter 'a to the new parameter 'a1.\n+    /// For example, in a function like `fn foo<'a>(x: &'a u32)`,\n+    /// invoking with the id from the `ast::Lifetime` node found inside\n+    /// the `&'a u32` type would return the `LocalDefId` of the\n+    /// `'a` parameter declared on `foo`.\n     ///\n-    /// This method will return, given `'a` node id, `'a1` def id, going through, as a mid step,\n-    /// the def_id of `'a`.\n-    /// For cases when there are no mappings, it will just return the def_id that correspond to the\n-    /// given node_id.\n+    /// This function also applies remapping from `get_remapped_def_id`.\n+    /// These are used when synthesizing opaque types from `-> impl Trait` return types and so forth.\n+    /// For example, in a function like `fn foo<'a>() -> impl Debug + 'a`,\n+    /// we would create an opaque type `type FooReturn<'a1> = impl Debug + 'a1`.\n+    /// When lowering the `Debug + 'a` bounds, we add a remapping to map `'a` to `'a1`.\n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {\n         self.resolver\n             .node_id_to_def_id"}]}