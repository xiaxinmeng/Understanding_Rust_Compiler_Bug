{"sha": "7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTgxN2M5ZDRhMDY0OWE3ZWExYzk0OGJkNzMxYTViNjNhYTNkMDY=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-01-13T20:47:46Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-01-13T20:47:46Z"}, "message": "Move `custom_flags` to `OpenOptionsExt`\nAnd mark the new methods as unstable.", "tree": {"sha": "2e1f2d70228636bb1ec4023e03adc422676ccf2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1f2d70228636bb1ec4023e03adc422676ccf2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "html_url": "https://github.com/rust-lang/rust/commit/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f4dd047af2de895df2754f7222b39f10cb6205", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f4dd047af2de895df2754f7222b39f10cb6205", "html_url": "https://github.com/rust-lang/rust/commit/42f4dd047af2de895df2754f7222b39f10cb6205"}], "stats": {"total": 97, "additions": 58, "deletions": 39}, "files": [{"sha": "6a96ab56fc341650db7ce9307b6be28417868f2f", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "patch": "@@ -519,46 +519,13 @@ impl OpenOptions {\n     ///\n     /// let file = OpenOptions::new().write(true).create_new(true).open(\"foo.txt\");\n     /// ```\n-    #[stable(feature = \"expand_open_options\", since = \"1.7.0\")]\n+    #[unstable(feature = \"expand_open_options\",\n+               reason = \"recently added\",\n+               issue = \"30014\")]\n     pub fn create_new(&mut self, create_new: bool) -> &mut OpenOptions {\n         self.0.create_new(create_new); self\n     }\n \n-    /// Pass custom open flags to the operating system.\n-    ///\n-    /// Windows and the various flavours of Unix support flags that are not\n-    /// cross-platform, but that can be useful in some circumstances. On Unix they will\n-    /// be passed as the variable _flags_ to `open`, on Windows as the\n-    /// _dwFlagsAndAttributes_ parameter.\n-    ///\n-    /// The cross-platform options of Rust can do magic: they can set any flag necessary\n-    /// to ensure it works as expected. For example, `.append(true)` on Unix not only\n-    /// sets the flag `O_APPEND`, but also automatically `O_WRONLY` or `O_RDWR`. This\n-    /// special treatment is not available for the custom flags.\n-    ///\n-    /// Custom flags can only set flags, not remove flags set by Rusts options.\n-    ///\n-    /// For the custom flags on Unix, the bits that define the access mode are masked\n-    /// out with `O_ACCMODE`, to ensure they do not interfere with the access mode set\n-    /// by Rusts options.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```rust,ignore\n-    /// extern crate libc;\n-    /// extern crate winapi;\n-    /// use std::fs::OpenOptions;\n-    ///\n-    /// let options = OpenOptions::new().write(true);\n-    /// if cfg!(unix) { options.custom_flags(libc::O_NOFOLLOW); }\n-    /// if cfg!(windows) { options.custom_flags(winapi::FILE_FLAG_BACKUP_SEMANTICS); }\n-    /// let file = options.open(\"foo.txt\");\n-    /// ```\n-    #[stable(feature = \"expand_open_options\", since = \"1.7.0\")]\n-    pub fn custom_flags(&mut self, flags: u32) -> &mut OpenOptions {\n-        self.0.custom_flags(flags); self\n-    }\n-\n     /// Opens a file at `path` with the options specified by `self`.\n     ///\n     /// # Errors"}, {"sha": "75ea5846fb3e7dc9aa793737210a4a35fc89f2ea", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "patch": "@@ -104,13 +104,40 @@ pub trait OpenOptionsExt {\n     /// the final permissions.\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn mode(&mut self, mode: raw::mode_t) -> &mut Self;\n+\n+    /// Pass custom flags to the `flags` agument of `open`.\n+    ///\n+    /// The bits that define the access mode are masked out with `O_ACCMODE`, to ensure\n+    /// they do not interfere with the access mode set by Rusts options.\n+    ///\n+    /// Custom flags can only set flags, not remove flags set by Rusts options.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// extern crate libc;\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::unix::fs::OpenOptionsExt;\n+    ///\n+    /// let options = OpenOptions::new().write(true);\n+    /// if cfg!(unix) { options.custom_flags(libc::O_NOFOLLOW); }\n+    /// let file = options.open(\"foo.txt\");\n+    /// ```\n+    #[unstable(feature = \"expand_open_options\",\n+               reason = \"recently added\",\n+               issue = \"30014\")]\n+    fn custom_flags(&mut self, flags: i32) -> &mut Self;\n }\n \n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n impl OpenOptionsExt for OpenOptions {\n     fn mode(&mut self, mode: raw::mode_t) -> &mut OpenOptions {\n         self.as_inner_mut().mode(mode); self\n     }\n+\n+    fn custom_flags(&mut self, flags: i32) -> &mut OpenOptions {\n+        self.as_inner_mut().custom_flags(flags); self\n+    }\n }\n \n // Hm, why are there casts here to the returned type, shouldn't the types always\n@@ -265,4 +292,3 @@ impl DirBuilderExt for fs::DirBuilder {\n         self\n     }\n }\n-"}, {"sha": "31ea6b7dd2e493fcec3c3f9be9706b025ad6049a", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "patch": "@@ -58,7 +58,7 @@ pub struct OpenOptions {\n     create: bool,\n     create_new: bool,\n     // system-specific\n-    custom_flags: u32,\n+    custom_flags: i32,\n     mode: mode_t,\n }\n \n@@ -259,7 +259,7 @@ impl OpenOptions {\n     pub fn create(&mut self, create: bool) { self.create = create; }\n     pub fn create_new(&mut self, create_new: bool) { self.create_new = create_new; }\n \n-    pub fn custom_flags(&mut self, flags: u32) { self.custom_flags = flags; }\n+    pub fn custom_flags(&mut self, flags: i32) { self.custom_flags = flags; }\n     pub fn mode(&mut self, mode: raw::mode_t) { self.mode = mode as mode_t; }\n \n     fn get_access_mode(&self) -> io::Result<c_int> {"}, {"sha": "04053b6cb6a6237b5c4b7da21c3f46d647f3ec35", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "patch": "@@ -64,6 +64,28 @@ pub trait OpenOptionsExt {\n     /// ```\n     fn share_mode(&mut self, val: u32) -> &mut Self;\n \n+    /// Sets extra flags for the `dwFileFlags` argument to the call to `CreateFile2`\n+    /// (or combines it with `attributes` and `security_qos_flags` to set the\n+    /// `dwFlagsAndAttributes` for `CreateFile`).\n+    ///\n+    /// Custom flags can only set flags, not remove flags set by Rusts options.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust,ignore\n+    /// extern crate winapi;\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::windows::fs::OpenOptionsExt;\n+    ///\n+    /// let options = OpenOptions::new().create(true).write(true);\n+    /// if cfg!(windows) { options.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE); }\n+    /// let file = options.open(\"foo.txt\");\n+    /// ```\n+    #[unstable(feature = \"expand_open_options\",\n+               reason = \"recently added\",\n+               issue = \"30014\")]\n+    fn custom_flags(&mut self, flags: u32) -> &mut Self;\n+\n     /// Sets the `dwFileAttributes` argument to the call to `CreateFile2` to\n     /// the specified value (or combines it with `custom_flags` and\n     /// `security_qos_flags` to set the `dwFlagsAndAttributes` for `CreateFile`).\n@@ -114,6 +136,10 @@ impl OpenOptionsExt for OpenOptions {\n         self.as_inner_mut().share_mode(share); self\n     }\n \n+    fn custom_flags(&mut self, flags: u32) -> &mut OpenOptions {\n+        self.as_inner_mut().custom_flags(flags); self\n+    }\n+\n     fn attributes(&mut self, attributes: u32) -> &mut OpenOptions {\n         self.as_inner_mut().attributes(attributes); self\n     }"}]}