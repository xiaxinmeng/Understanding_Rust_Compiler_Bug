{"sha": "77ef394d72bf2d60117635fe6198878269e5bfc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZWYzOTRkNzJiZjJkNjAxMTc2MzVmZTYxOTg4NzgyNjllNWJmYzk=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-08-20T21:07:06Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-08-20T21:11:37Z"}, "message": "Remove deprecated modes from os.rs", "tree": {"sha": "a7f0919e5dd19e887a1d3b829fca40ba9dc5e2a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7f0919e5dd19e887a1d3b829fca40ba9dc5e2a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77ef394d72bf2d60117635fe6198878269e5bfc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77ef394d72bf2d60117635fe6198878269e5bfc9", "html_url": "https://github.com/rust-lang/rust/commit/77ef394d72bf2d60117635fe6198878269e5bfc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77ef394d72bf2d60117635fe6198878269e5bfc9/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08441fca76084b97c21ead917e54ce6c66d5d012", "url": "https://api.github.com/repos/rust-lang/rust/commits/08441fca76084b97c21ead917e54ce6c66d5d012", "html_url": "https://github.com/rust-lang/rust/commit/08441fca76084b97c21ead917e54ce6c66d5d012"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "9f5b6e538bfd765d66a38e1c01a61395536f0b1f", "filename": "src/libcore/os.rs", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/77ef394d72bf2d60117635fe6198878269e5bfc9/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ef394d72bf2d60117635fe6198878269e5bfc9/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=77ef394d72bf2d60117635fe6198878269e5bfc9", "patch": "@@ -16,6 +16,9 @@\n  * to write OS-ignorant code by default.\n  */\n \n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n import libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t,\n               mode_t, pid_t, FILE};\n import libc::{close, fclose};\n@@ -53,7 +56,7 @@ extern mod rustrt {\n \n const tmpbuf_sz : uint = 1000u;\n \n-fn as_c_charp<T>(s: ~str, f: fn(*c_char) -> T) -> T {\n+fn as_c_charp<T>(+s: ~str, f: fn(*c_char) -> T) -> T {\n     str::as_c_str(s, |b| f(b as *c_char))\n }\n \n@@ -103,19 +106,19 @@ mod win32 {\n         return res;\n     }\n \n-    fn as_utf16_p<T>(s: ~str, f: fn(*u16) -> T) -> T {\n+    fn as_utf16_p<T>(+s: ~str, f: fn(*u16) -> T) -> T {\n         let mut t = str::to_utf16(s);\n         // Null terminate before passing on.\n         t += ~[0u16];\n         vec::as_buf(t, |buf, _len| f(buf))\n     }\n }\n \n-fn getenv(n: ~str) -> option<~str> {\n+fn getenv(+n: ~str) -> option<~str> {\n     global_env::getenv(n)\n }\n \n-fn setenv(n: ~str, v: ~str) {\n+fn setenv(+n: ~str, +v: ~str) {\n     global_env::setenv(n, v)\n }\n \n@@ -140,14 +143,14 @@ mod global_env {\n         MsgEnv(comm::Chan<~[(~str,~str)]>)\n     }\n \n-    fn getenv(n: ~str) -> option<~str> {\n+    fn getenv(+n: ~str) -> option<~str> {\n         let env_ch = get_global_env_chan();\n         let po = comm::port();\n         comm::send(env_ch, MsgGetEnv(n, comm::chan(po)));\n         comm::recv(po)\n     }\n \n-    fn setenv(n: ~str, v: ~str) {\n+    fn setenv(+n: ~str, +v: ~str) {\n         let env_ch = get_global_env_chan();\n         let po = comm::port();\n         comm::send(env_ch, MsgSetEnv(n, v, comm::chan(po)));\n@@ -209,7 +212,7 @@ mod global_env {\n         }\n \n         #[cfg(unix)]\n-        fn getenv(n: ~str) -> option<~str> {\n+        fn getenv(+n: ~str) -> option<~str> {\n             unsafe {\n                 let s = str::as_c_str(n, libc::getenv);\n                 return if unsafe::reinterpret_cast(s) == 0 {\n@@ -222,7 +225,7 @@ mod global_env {\n         }\n \n         #[cfg(windows)]\n-        fn getenv(n: ~str) -> option<~str> {\n+        fn getenv(+n: ~str) -> option<~str> {\n             import libc::types::os::arch::extra::*;\n             import libc::funcs::extra::kernel32::*;\n             import win32::*;\n@@ -235,7 +238,7 @@ mod global_env {\n \n \n         #[cfg(unix)]\n-        fn setenv(n: ~str, v: ~str) {\n+        fn setenv(+n: ~str, +v: ~str) {\n \n             // FIXME: remove this when export globs work properly. #1238\n             import libc::funcs::posix01::unistd::setenv;\n@@ -248,7 +251,7 @@ mod global_env {\n \n \n         #[cfg(windows)]\n-        fn setenv(n: ~str, v: ~str) {\n+        fn setenv(+n: ~str, +v: ~str) {\n             // FIXME: remove imports when export globs work properly. #1238\n             import libc::funcs::extra::kernel32::*;\n             import win32::*;\n@@ -358,7 +361,7 @@ fn pipe() -> {in: c_int, out: c_int} {\n }\n \n \n-fn dll_filename(base: ~str) -> ~str {\n+fn dll_filename(+base: ~str) -> ~str {\n     return pre() + base + dll_suffix();\n \n     #[cfg(unix)]\n@@ -465,11 +468,11 @@ fn homedir() -> option<Path> {\n }\n \n /// Recursively walk a directory structure\n-fn walk_dir(p: Path, f: fn(Path) -> bool) {\n+fn walk_dir(+p: Path, f: fn(Path) -> bool) {\n \n     walk_dir_(p, f);\n \n-    fn walk_dir_(p: Path, f: fn(Path) -> bool) -> bool {\n+    fn walk_dir_(+p: Path, f: fn(Path) -> bool) -> bool {\n         let mut keepgoing = true;\n         do list_dir(p).each |q| {\n             let path = path::connect(p, q);\n@@ -494,14 +497,14 @@ fn walk_dir(p: Path, f: fn(Path) -> bool) {\n }\n \n /// Indicates whether a path represents a directory\n-fn path_is_dir(p: Path) -> bool {\n+fn path_is_dir(+p: Path) -> bool {\n     do str::as_c_str(p) |buf| {\n         rustrt::rust_path_is_dir(buf) != 0 as c_int\n     }\n }\n \n /// Indicates whether a path exists\n-fn path_exists(p: Path) -> bool {\n+fn path_exists(+p: Path) -> bool {\n     do str::as_c_str(p) |buf| {\n         rustrt::rust_path_exists(buf) != 0 as c_int\n     }\n@@ -519,7 +522,7 @@ fn path_exists(p: Path) -> bool {\n // NB: this is here rather than in path because it is a form of environment\n // querying; what it does depends on the process working directory, not just\n // the input paths.\n-fn make_absolute(p: Path) -> Path {\n+fn make_absolute(+p: Path) -> Path {\n     if path::path_is_absolute(p) {\n         p\n     } else {\n@@ -529,11 +532,11 @@ fn make_absolute(p: Path) -> Path {\n \n \n /// Creates a directory at the specified path\n-fn make_dir(p: Path, mode: c_int) -> bool {\n+fn make_dir(+p: Path, mode: c_int) -> bool {\n     return mkdir(p, mode);\n \n     #[cfg(windows)]\n-    fn mkdir(p: Path, _mode: c_int) -> bool {\n+    fn mkdir(+p: Path, _mode: c_int) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::types::os::arch::extra::*;\n         import libc::funcs::extra::kernel32::*;\n@@ -546,21 +549,21 @@ fn make_dir(p: Path, mode: c_int) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn mkdir(p: Path, mode: c_int) -> bool {\n+    fn mkdir(+p: Path, mode: c_int) -> bool {\n         do as_c_charp(p) |c| {\n             libc::mkdir(c, mode as mode_t) == (0 as c_int)\n         }\n     }\n }\n \n /// Lists the contents of a directory\n-fn list_dir(p: Path) -> ~[~str] {\n+fn list_dir(+p: Path) -> ~[~str] {\n \n     #[cfg(unix)]\n-    fn star(p: ~str) -> ~str { p }\n+    fn star(+p: ~str) -> ~str { p }\n \n     #[cfg(windows)]\n-    fn star(p: ~str) -> ~str {\n+    fn star(+p: ~str) -> ~str {\n         let pl = str::len(p);\n         if pl == 0u || (p[pl - 1u] as char != path::consts::path_sep\n                         || p[pl - 1u] as char != path::consts::alt_path_sep) {\n@@ -580,7 +583,7 @@ fn list_dir(p: Path) -> ~[~str] {\n  *\n  * This version prepends each entry with the directory.\n  */\n-fn list_dir_path(p: Path) -> ~[~str] {\n+fn list_dir_path(+p: Path) -> ~[~str] {\n     let mut p = p;\n     let pl = str::len(p);\n     if pl == 0u || (p[pl - 1u] as char != path::consts::path_sep\n@@ -591,11 +594,11 @@ fn list_dir_path(p: Path) -> ~[~str] {\n }\n \n /// Removes a directory at the specified path\n-fn remove_dir(p: Path) -> bool {\n+fn remove_dir(+p: Path) -> bool {\n    return rmdir(p);\n \n     #[cfg(windows)]\n-    fn rmdir(p: Path) -> bool {\n+    fn rmdir(+p: Path) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n@@ -606,18 +609,18 @@ fn remove_dir(p: Path) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn rmdir(p: Path) -> bool {\n+    fn rmdir(+p: Path) -> bool {\n         return do as_c_charp(p) |buf| {\n             libc::rmdir(buf) == (0 as c_int)\n         };\n     }\n }\n \n-fn change_dir(p: Path) -> bool {\n+fn change_dir(+p: Path) -> bool {\n     return chdir(p);\n \n     #[cfg(windows)]\n-    fn chdir(p: Path) -> bool {\n+    fn chdir(+p: Path) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n@@ -628,19 +631,19 @@ fn change_dir(p: Path) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn chdir(p: Path) -> bool {\n+    fn chdir(+p: Path) -> bool {\n         return do as_c_charp(p) |buf| {\n             libc::chdir(buf) == (0 as c_int)\n         };\n     }\n }\n \n /// Copies a file from one location to another\n-fn copy_file(from: Path, to: Path) -> bool {\n+fn copy_file(+from: Path, +to: Path) -> bool {\n     return do_copy_file(from, to);\n \n     #[cfg(windows)]\n-    fn do_copy_file(from: Path, to: Path) -> bool {\n+    fn do_copy_file(+from: Path, +to: Path) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n@@ -653,7 +656,7 @@ fn copy_file(from: Path, to: Path) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn do_copy_file(from: Path, to: Path) -> bool {\n+    fn do_copy_file(+from: Path, +to: Path) -> bool {\n         let istream = do as_c_charp(from) |fromp| {\n             do as_c_charp(~\"rb\") |modebuf| {\n                 libc::fopen(fromp, modebuf)\n@@ -699,11 +702,11 @@ fn copy_file(from: Path, to: Path) -> bool {\n }\n \n /// Deletes an existing file\n-fn remove_file(p: Path) -> bool {\n+fn remove_file(+p: Path) -> bool {\n     return unlink(p);\n \n     #[cfg(windows)]\n-    fn unlink(p: Path) -> bool {\n+    fn unlink(+p: Path) -> bool {\n         // FIXME (similar to Issue #2006): remove imports when export globs\n         // work properly.\n         import libc::funcs::extra::kernel32::*;\n@@ -715,7 +718,7 @@ fn remove_file(p: Path) -> bool {\n     }\n \n     #[cfg(unix)]\n-    fn unlink(p: Path) -> bool {\n+    fn unlink(+p: Path) -> bool {\n         return do as_c_charp(p) |buf| {\n             libc::unlink(buf) == (0 as c_int)\n         };"}]}