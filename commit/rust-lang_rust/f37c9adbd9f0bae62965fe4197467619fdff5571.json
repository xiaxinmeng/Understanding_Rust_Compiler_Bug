{"sha": "f37c9adbd9f0bae62965fe4197467619fdff5571", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzN2M5YWRiZDlmMGJhZTYyOTY1ZmU0MTk3NDY3NjE5ZmRmZjU1NzE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-21T21:17:18Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-29T15:09:39Z"}, "message": "Make `CollapsibleIf` an `EarlyLintPass`\n\nIt doesn't need any `hir` feature and `ast` is much more stable.", "tree": {"sha": "7502d010986ed76b3475a149e85cc03ff3911b0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7502d010986ed76b3475a149e85cc03ff3911b0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f37c9adbd9f0bae62965fe4197467619fdff5571", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXc+S3AAoJEF5CfHlMukXonS0P+wQ3WIy4U7BQQDQHQnJYekq8\n3TR0/VRtPw26SzUM+qI8BhoI5vHpy5jUz/5f1Hi3W8uAVRdexFQxOiDWdD0Ln4dL\nG3kIoW3Bl7dZHnHNq72mCqirMl1g6510ik6awT0CVpn8thtM8RBxUtkKQIqUyH8s\nncRGoXrgimpEV4JipqCGma215CVqYD6ai9fIfIcXhSm78T/ymqYdfnK7M1wPnnh8\nAqL/ExPrsJjChv9PU0uyUUeCtVxw1ulAc2oF2/yy1/EMe85Rb7gjwoFVDqtsFmHo\nOqyAzehDZ5VJdFD24+sx10yhyJHyfaQw7HM1w60TJ7HvOVAFnJuJv1uDvsPwMkBi\nX1YrL+0kMvuQwmNYKuueKQJ114P5GE0nW+iqeE2TfiFi62k/K07BFvY8bK1gP5lU\nQ1j0/lGOdEtIkteYbn/07qBVjNEdh70EF6Kqe9W2Uz2/biAmCmgBkUUpEYKa7TTt\nEHBGKGvPrqP/jfZuW3Sz7YSC66Xz71dxIYvz84azK7yj+IGD4JZZOEpmrx78hdrJ\nZnK62RaiNppVscyBRXwehBvi1/SmsoVhxxo4WLwllXFndBooDQ5O7hr8rSY2iPIi\nI1roTAl7PRlvVcFF7R0NN5Jm+cxddtN79LekixqKreFJLYoB0uBT28lu4NpjvoPO\nOhY2oD24o5d5naQC3hpd\n=ZXmW\n-----END PGP SIGNATURE-----", "payload": "tree 7502d010986ed76b3475a149e85cc03ff3911b0d\nparent 7fa38f678764d7d5203cd4155eb39a355857e1ce\nauthor mcarton <cartonmartin+git@gmail.com> 1466543838 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467212979 +0200\n\nMake `CollapsibleIf` an `EarlyLintPass`\n\nIt doesn't need any `hir` feature and `ast` is much more stable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f37c9adbd9f0bae62965fe4197467619fdff5571", "html_url": "https://github.com/rust-lang/rust/commit/f37c9adbd9f0bae62965fe4197467619fdff5571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f37c9adbd9f0bae62965fe4197467619fdff5571/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fa38f678764d7d5203cd4155eb39a355857e1ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa38f678764d7d5203cd4155eb39a355857e1ce", "html_url": "https://github.com/rust-lang/rust/commit/7fa38f678764d7d5203cd4155eb39a355857e1ce"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "9bdc35596bf4e940ec436df737ecc791b7854dd9", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f37c9adbd9f0bae62965fe4197467619fdff5571/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37c9adbd9f0bae62965fe4197467619fdff5571/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=f37c9adbd9f0bae62965fe4197467619fdff5571", "patch": "@@ -13,9 +13,9 @@\n //! This lint is **warn** by default\n \n use rustc::lint::*;\n-use rustc::hir::*;\n use std::borrow::Cow;\n use syntax::codemap::Spanned;\n+use syntax::ast;\n \n use utils::{in_macro, snippet, snippet_block, span_lint_and_then};\n \n@@ -45,23 +45,22 @@ impl LintPass for CollapsibleIf {\n     }\n }\n \n-impl LateLintPass for CollapsibleIf {\n-    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+impl EarlyLintPass for CollapsibleIf {\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &ast::Expr) {\n         if !in_macro(cx, expr.span) {\n             check_if(cx, expr)\n         }\n     }\n }\n \n-fn check_if(cx: &LateContext, e: &Expr) {\n-    if let ExprIf(ref check, ref then, ref else_) = e.node {\n+fn check_if(cx: &EarlyContext, e: &ast::Expr) {\n+    if let ast::ExprKind::If(ref check, ref then, ref else_) = e.node {\n         if let Some(ref else_) = *else_ {\n             if_let_chain! {[\n-                let ExprBlock(ref block) = else_.node,\n+                let ast::ExprKind::Block(ref block) = else_.node,\n                 block.stmts.is_empty(),\n-                block.rules == BlockCheckMode::DefaultBlock,\n                 let Some(ref else_) = block.expr,\n-                let ExprIf(_, _, _) = else_.node\n+                let ast::ExprKind::If(_, _, _) = else_.node\n             ], {\n                 span_lint_and_then(cx,\n                                    COLLAPSIBLE_IF,\n@@ -70,7 +69,7 @@ fn check_if(cx: &LateContext, e: &Expr) {\n                     db.span_suggestion(block.span, \"try\", snippet_block(cx, else_.span, \"..\").into_owned());\n                 });\n             }}\n-        } else if let Some(&Expr { node: ExprIf(ref check_inner, ref content, None), span: sp, .. }) =\n+        } else if let Some(&ast::Expr { node: ast::ExprKind::If(ref check_inner, ref content, None), span: sp, .. }) =\n                single_stmt_of_block(then) {\n             if e.span.expn_id != sp.expn_id {\n                 return;\n@@ -87,24 +86,24 @@ fn check_if(cx: &LateContext, e: &Expr) {\n     }\n }\n \n-fn requires_brackets(e: &Expr) -> bool {\n+fn requires_brackets(e: &ast::Expr) -> bool {\n     match e.node {\n-        ExprBinary(Spanned { node: n, .. }, _, _) if n == BiEq => false,\n+        ast::ExprKind::Binary(Spanned { node: n, .. }, _, _) if n == ast::BinOpKind::Eq => false,\n         _ => true,\n     }\n }\n \n-fn check_to_string(cx: &LateContext, e: &Expr) -> Cow<'static, str> {\n+fn check_to_string(cx: &EarlyContext, e: &ast::Expr) -> Cow<'static, str> {\n     if requires_brackets(e) {\n         format!(\"({})\", snippet(cx, e.span, \"..\")).into()\n     } else {\n         snippet(cx, e.span, \"..\")\n     }\n }\n \n-fn single_stmt_of_block(block: &Block) -> Option<&Expr> {\n+fn single_stmt_of_block(block: &ast::Block) -> Option<&ast::Expr> {\n     if block.stmts.len() == 1 && block.expr.is_none() {\n-        if let StmtExpr(ref expr, _) = block.stmts[0].node {\n+        if let ast::StmtKind::Expr(ref expr, _) = block.stmts[0].node {\n             single_stmt_of_expr(expr)\n         } else {\n             None\n@@ -120,8 +119,8 @@ fn single_stmt_of_block(block: &Block) -> Option<&Expr> {\n     }\n }\n \n-fn single_stmt_of_expr(expr: &Expr) -> Option<&Expr> {\n-    if let ExprBlock(ref block) = expr.node {\n+fn single_stmt_of_expr(expr: &ast::Expr) -> Option<&ast::Expr> {\n+    if let ast::ExprKind::Block(ref block) = expr.node {\n         single_stmt_of_block(block)\n     } else {\n         Some(expr)"}, {"sha": "e980f4d081dfd0deaf1c4334ddba5089f40a3177", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f37c9adbd9f0bae62965fe4197467619fdff5571/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37c9adbd9f0bae62965fe4197467619fdff5571/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f37c9adbd9f0bae62965fe4197467619fdff5571", "patch": "@@ -189,7 +189,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box len_zero::LenZero);\n     reg.register_late_lint_pass(box misc::CmpOwned);\n     reg.register_late_lint_pass(box attrs::AttrPass);\n-    reg.register_late_lint_pass(box collapsible_if::CollapsibleIf);\n+    reg.register_early_lint_pass(box collapsible_if::CollapsibleIf);\n     reg.register_late_lint_pass(box block_in_if_condition::BlockInIfCondition);\n     reg.register_late_lint_pass(box misc::ModuloOne);\n     reg.register_late_lint_pass(box unicode::Unicode);"}]}