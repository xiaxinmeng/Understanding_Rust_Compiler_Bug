{"sha": "23b1e3d77290265c72566b4dabff39384a330b60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjFlM2Q3NzI5MDI2NWM3MjU2NmI0ZGFiZmYzOTM4NGEzMzBiNjA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-05T00:29:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-05T00:29:38Z"}, "message": "Rollup merge of #77471 - ssomers:btree_cleanup_3, r=Mark-Simulacrum\n\nBTreeMap: refactoring around edges, missed spots\n\nTweaks from #77244 (and more) that are really inconsistencies in #77005.\n\nr? @Mark-Simulacrum", "tree": {"sha": "6bf5f9261d6c2425a407faca9eb5518656748cad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bf5f9261d6c2425a407faca9eb5518656748cad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b1e3d77290265c72566b4dabff39384a330b60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfemjyCRBK7hj4Ov3rIwAAdHIIADNYvZ/BhjLlXjKYZxStdpG6\nmNbX1o/6wfgvyYxjbblNCAg6G5/qzkg524SzGV7zbsL/t/Y2RuLJu8VpT+wn+5ji\n4Lt/O82/zllz9w5gXIqIPrisPI09cNb+kz0YX8CQ/quNpMxrov6HgpYRhSue0I+V\nlbWSj3YM3JOGF/WHEiwj4iTdBCaHVXJNlPvZ4WssN61hXozVK51S7xauZD3a8OOi\nv71KY78p/DWz69LMYEIZyUGqb5kSJkldmXYX4vzOCtpSCM0gJn1oGsusUWmnfy7K\nsXbBwGYXgbi2xY9RNtIJAmq1lDUGVus2WttLM0i+auTu2Yqv3udZHAg0OKSQBBg=\n=RzF1\n-----END PGP SIGNATURE-----\n", "payload": "tree 6bf5f9261d6c2425a407faca9eb5518656748cad\nparent e032bb7c65d5444a44bda9bd7db5c42b4931b0aa\nparent d71d13e82d5a7cb3037a70d2ac18453db6dacca7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1601857778 +0200\ncommitter GitHub <noreply@github.com> 1601857778 +0200\n\nRollup merge of #77471 - ssomers:btree_cleanup_3, r=Mark-Simulacrum\n\nBTreeMap: refactoring around edges, missed spots\n\nTweaks from #77244 (and more) that are really inconsistencies in #77005.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b1e3d77290265c72566b4dabff39384a330b60", "html_url": "https://github.com/rust-lang/rust/commit/23b1e3d77290265c72566b4dabff39384a330b60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b1e3d77290265c72566b4dabff39384a330b60/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "html_url": "https://github.com/rust-lang/rust/commit/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa"}, {"sha": "d71d13e82d5a7cb3037a70d2ac18453db6dacca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d71d13e82d5a7cb3037a70d2ac18453db6dacca7", "html_url": "https://github.com/rust-lang/rust/commit/d71d13e82d5a7cb3037a70d2ac18453db6dacca7"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "880627e94c33469af7f49d4057af509876d420e7", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23b1e3d77290265c72566b4dabff39384a330b60/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b1e3d77290265c72566b4dabff39384a330b60/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=23b1e3d77290265c72566b4dabff39384a330b60", "patch": "@@ -474,15 +474,15 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     ///\n     /// # Safety\n     /// The node has more than `idx` initialized elements.\n-    pub unsafe fn key_mut_at(&mut self, idx: usize) -> &mut K {\n+    unsafe fn key_mut_at(&mut self, idx: usize) -> &mut K {\n         unsafe { self.reborrow_mut().into_key_mut_at(idx) }\n     }\n \n     /// Borrows a mutable reference to one of the values stored in the node.\n     ///\n     /// # Safety\n     /// The node has more than `idx` initialized elements.\n-    pub unsafe fn val_mut_at(&mut self, idx: usize) -> &mut V {\n+    unsafe fn val_mut_at(&mut self, idx: usize) -> &mut V {\n         unsafe { self.reborrow_mut().into_val_mut_at(idx) }\n     }\n \n@@ -645,7 +645,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n \n     /// Adds a key/value pair, and an edge to go to the left of that pair,\n     /// to the beginning of the node.\n-    pub fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) {\n+    fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) {\n         assert!(edge.height == self.height - 1);\n         assert!(self.len() < CAPACITY);\n \n@@ -1001,18 +1001,18 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n             let (middle_kv_idx, insertion) = splitpoint(self.idx);\n             let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };\n             let (mut left, k, v, mut right) = middle.split();\n-            match insertion {\n+            let mut insertion_edge = match insertion {\n                 InsertionPlace::Left(insert_idx) => unsafe {\n-                    Handle::new_edge(left.reborrow_mut(), insert_idx).insert_fit(key, val, edge);\n+                    Handle::new_edge(left.reborrow_mut(), insert_idx)\n                 },\n                 InsertionPlace::Right(insert_idx) => unsafe {\n                     Handle::new_edge(\n                         right.node_as_mut().cast_unchecked::<marker::Internal>(),\n                         insert_idx,\n                     )\n-                    .insert_fit(key, val, edge);\n                 },\n-            }\n+            };\n+            insertion_edge.insert_fit(key, val, edge);\n             InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right })\n         }\n     }"}]}