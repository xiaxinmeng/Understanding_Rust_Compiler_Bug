{"sha": "62d200d9cffcaa50c7874637d588072ded9dffac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZDIwMGQ5Y2ZmY2FhNTBjNzg3NDYzN2Q1ODgwNzJkZWQ5ZGZmYWM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-03T13:50:55Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-04T10:35:29Z"}, "message": "Update tests", "tree": {"sha": "0f566275668dde945426513f7c6d296b353323b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f566275668dde945426513f7c6d296b353323b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62d200d9cffcaa50c7874637d588072ded9dffac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62d200d9cffcaa50c7874637d588072ded9dffac", "html_url": "https://github.com/rust-lang/rust/commit/62d200d9cffcaa50c7874637d588072ded9dffac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62d200d9cffcaa50c7874637d588072ded9dffac/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f529cba4f30567d1ae96110dae235dc7a21348", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f529cba4f30567d1ae96110dae235dc7a21348", "html_url": "https://github.com/rust-lang/rust/commit/a9f529cba4f30567d1ae96110dae235dc7a21348"}], "stats": {"total": 170, "additions": 145, "deletions": 25}, "files": [{"sha": "b36676e4c371c03db7f59b3954a71f9d9a051689", "filename": "tests/system.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=62d200d9cffcaa50c7874637d588072ded9dffac", "patch": "@@ -201,8 +201,9 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n     let mut t = term::stdout().unwrap();\n \n     for (file_name, diff) in result {\n-        print_diff(diff,\n-                   |line_num| format!(\"\\nMismatch at {}:{}:\", file_name, line_num));\n+        print_diff(diff, |line_num| {\n+            format!(\"\\nMismatch at {}:{}:\", file_name, line_num)\n+        });\n     }\n \n     t.reset().unwrap();"}, {"sha": "298c79ae91a8a2be6ba1ab48795636efaf2662df", "filename": "tests/target/chains.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=62d200d9cffcaa50c7874637d588072ded9dffac", "patch": "@@ -147,12 +147,9 @@ fn try_shorthand() {\n         .0\n         .x;\n \n-    parameterized(f,\n-                  substs,\n-                  def_id,\n-                  Ns::Value,\n-                  &[],\n-                  |tcx| tcx.lookup_item_type(def_id).generics)?;\n+    parameterized(f, substs, def_id, Ns::Value, &[], |tcx| {\n+        tcx.lookup_item_type(def_id).generics\n+    })?;\n     fooooooooooooooooooooooooooo()?\n         .bar()?\n         .baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz()?;"}, {"sha": "de9ee656f688563489c06d7b36d27ddf6323cee7", "filename": "tests/target/combining.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fcombining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fcombining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcombining.rs?ref=62d200d9cffcaa50c7874637d588072ded9dffac", "patch": "@@ -0,0 +1,120 @@\n+// rustfmt-fn_call_style: Block\n+// Combining openings and closings. See https://github.com/rust-lang-nursery/fmt-rfcs/issues/61.\n+\n+fn main() {\n+    // Call\n+    foo(bar(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // Mac\n+    foo(foo!(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // MethodCall\n+    foo(x.foo::<Bar, Baz>(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // Block\n+    foo!({\n+        foo();\n+        bar();\n+    });\n+\n+    // Closure\n+    foo(|x| {\n+        let y = x + 1;\n+        y\n+    });\n+\n+    // Match\n+    foo(match opt {\n+        Some(x) => x,\n+        None => y,\n+    });\n+\n+    // Struct\n+    foo(Bar {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    });\n+\n+    // If\n+    foo!(if x {\n+        foo();\n+    } else {\n+        bar();\n+    });\n+\n+    // IfLet\n+    foo!(if let Some(..) = x {\n+        foo();\n+    } else {\n+        bar();\n+    });\n+\n+    // While\n+    foo!(while x {\n+        foo();\n+        bar();\n+    });\n+\n+    // WhileLet\n+    foo!(while let Some(..) = x {\n+        foo();\n+        bar();\n+    });\n+\n+    // ForLoop\n+    foo!(for x in y {\n+        foo();\n+        bar();\n+    });\n+\n+    // Loop\n+    foo!(loop {\n+        foo();\n+        bar();\n+    });\n+\n+    // Tuple\n+    foo((\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // AddrOf\n+    foo(&bar(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // Box\n+    foo(box Bar {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    });\n+\n+    // Unary\n+    foo(!bar(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    ));\n+\n+    // Try\n+    foo(bar(\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    )?);\n+\n+    // Cast\n+    foo(Bar {\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+    } as i64);\n+}"}, {"sha": "ddead8ce5a857043e2c2ddeb1ae58899a25e57fb", "filename": "tests/target/configs-fn_call_style-block.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs?ref=62d200d9cffcaa50c7874637d588072ded9dffac", "patch": "@@ -134,15 +134,14 @@ impl Cursor {\n }\n \n fn issue1581() {\n-    bootstrap.checks.register(\n-        \"PERSISTED_LOCATIONS\",\n-        move || if locations2.0.inner_mut.lock().poisoned {\n+    bootstrap.checks.register(\"PERSISTED_LOCATIONS\", move || {\n+        if locations2.0.inner_mut.lock().poisoned {\n             Check::new(\n                 State::Error,\n                 \"Persisted location storage is poisoned due to a write failure\",\n             )\n         } else {\n             Check::new(State::Healthy, \"Persisted location storage is healthy\")\n-        },\n-    );\n+        }\n+    });\n }"}, {"sha": "bdd07ffbd7401e0ec9d7bcd49e87b91f42de2fc4", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=62d200d9cffcaa50c7874637d588072ded9dffac", "patch": "@@ -67,18 +67,18 @@ fn main() {\n \t}\n \n \tloong_func().quux(move || if true {\n-\t\t                  1\n-\t\t                 } else {\n-\t\t                  2\n-\t\t                 });\n+\t\t1\n+\t} else {\n+\t\t2\n+\t});\n \n \tfffffffffffffffffffffffffffffffffff(a, {\n \t\tSCRIPT_TASK_ROOT.with(|root| { *root.borrow_mut() = Some(&script_task); });\n \t});\n \ta.b.c.d();\n \n \tx().y(|| match cond() {\n-\t          true => (),\n-\t          false => (),\n-\t      });\n+\t\ttrue => (),\n+\t\tfalse => (),\n+\t});\n }"}, {"sha": "a2e3c30f3ac4ef048ecc3dc1aae73767b90d0583", "filename": "tests/target/nested-visual-block.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fnested-visual-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d200d9cffcaa50c7874637d588072ded9dffac/tests%2Ftarget%2Fnested-visual-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnested-visual-block.rs?ref=62d200d9cffcaa50c7874637d588072ded9dffac", "patch": "@@ -45,13 +45,16 @@ fn main() {\n     });\n \n     // #1581\n-    bootstrap.checks.register(\n-        \"PERSISTED_LOCATIONS\",\n-        move || if locations2.0.inner_mut.lock().poisoned {\n+    bootstrap\n+        .checks\n+        .register(\"PERSISTED_LOCATIONS\", move || if locations2\n+               .0\n+               .inner_mut\n+               .lock()\n+               .poisoned {\n             Check::new(State::Error,\n                        \"Persisted location storage is poisoned due to a write failure\")\n         } else {\n             Check::new(State::Healthy, \"Persisted location storage is healthy\")\n-        }\n-    );\n+        });\n }"}]}