{"sha": "56e7678ca97e9740f7d09206f767d5bb676917f7", "node_id": "C_kwDOAAsO6NoAKDU2ZTc2NzhjYTk3ZTk3NDBmN2QwOTIwNmY3NjdkNWJiNjc2OTE3Zjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T06:05:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T06:05:32Z"}, "message": "Auto merge of #100502 - chenyukang:fix-100478, r=jackh726\n\nAvoid infinite loop in function arguments checking\n\nFixes #100478\nFixes #101097", "tree": {"sha": "25342b60afc964801c6336b06b43a7a0805c9bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25342b60afc964801c6336b06b43a7a0805c9bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e7678ca97e9740f7d09206f767d5bb676917f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e7678ca97e9740f7d09206f767d5bb676917f7", "html_url": "https://github.com/rust-lang/rust/commit/56e7678ca97e9740f7d09206f767d5bb676917f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e7678ca97e9740f7d09206f767d5bb676917f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3194958217c24744ee3118fdc5b3d6b274b7316d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3194958217c24744ee3118fdc5b3d6b274b7316d", "html_url": "https://github.com/rust-lang/rust/commit/3194958217c24744ee3118fdc5b3d6b274b7316d"}, {"sha": "7e7dfb83dc1fe63d1ce14101339f5eee5b76159d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7dfb83dc1fe63d1ce14101339f5eee5b76159d", "html_url": "https://github.com/rust-lang/rust/commit/7e7dfb83dc1fe63d1ce14101339f5eee5b76159d"}], "stats": {"total": 339, "additions": 330, "deletions": 9}, "files": [{"sha": "fc83994caf53966aff1ba74745ca44856349f233", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/arg_matrix.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/56e7678ca97e9740f7d09206f767d5bb676917f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Farg_matrix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e7678ca97e9740f7d09206f767d5bb676917f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Farg_matrix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Farg_matrix.rs?ref=56e7678ca97e9740f7d09206f767d5bb676917f7", "patch": "@@ -130,21 +130,25 @@ impl<'tcx> ArgMatrix<'tcx> {\n         let ai = &self.expected_indices;\n         let ii = &self.provided_indices;\n \n+        // Issue: 100478, when we end the iteration,\n+        // `next_unmatched_idx` will point to the index of the first unmatched\n+        let mut next_unmatched_idx = 0;\n         for i in 0..cmp::max(ai.len(), ii.len()) {\n-            // If we eliminate the last row, any left-over inputs are considered missing\n+            // If we eliminate the last row, any left-over arguments are considered missing\n             if i >= mat.len() {\n-                return Some(Issue::Missing(i));\n+                return Some(Issue::Missing(next_unmatched_idx));\n             }\n-            // If we eliminate the last column, any left-over arguments are extra\n+            // If we eliminate the last column, any left-over inputs are extra\n             if mat[i].len() == 0 {\n-                return Some(Issue::Extra(i));\n+                return Some(Issue::Extra(next_unmatched_idx));\n             }\n \n             // Make sure we don't pass the bounds of our matrix\n             let is_arg = i < ai.len();\n             let is_input = i < ii.len();\n             if is_arg && is_input && matches!(mat[i][i], Compatibility::Compatible) {\n                 // This is a satisfied input, so move along\n+                next_unmatched_idx += 1;\n                 continue;\n             }\n \n@@ -163,7 +167,7 @@ impl<'tcx> ArgMatrix<'tcx> {\n             if is_input {\n                 for j in 0..ai.len() {\n                     // If we find at least one argument that could satisfy this input\n-                    // this argument isn't useless\n+                    // this input isn't useless\n                     if matches!(mat[i][j], Compatibility::Compatible) {\n                         useless = false;\n                         break;\n@@ -232,8 +236,8 @@ impl<'tcx> ArgMatrix<'tcx> {\n                             if matches!(c, Compatibility::Compatible) { Some(i) } else { None }\n                         })\n                         .collect();\n-                if compat.len() != 1 {\n-                    // this could go into multiple slots, don't bother exploring both\n+                if compat.len() < 1 {\n+                    // try to find a cycle even when this could go into multiple slots, see #101097\n                     is_cycle = false;\n                     break;\n                 }\n@@ -309,7 +313,8 @@ impl<'tcx> ArgMatrix<'tcx> {\n         }\n \n         while !self.provided_indices.is_empty() || !self.expected_indices.is_empty() {\n-            match self.find_issue() {\n+            let res = self.find_issue();\n+            match res {\n                 Some(Issue::Invalid(idx)) => {\n                     let compatibility = self.compatibility_matrix[idx][idx].clone();\n                     let input_idx = self.provided_indices[idx];\n@@ -364,7 +369,9 @@ impl<'tcx> ArgMatrix<'tcx> {\n                 None => {\n                     // We didn't find any issues, so we need to push the algorithm forward\n                     // First, eliminate any arguments that currently satisfy their inputs\n-                    for (inp, arg) in self.eliminate_satisfied() {\n+                    let eliminated = self.eliminate_satisfied();\n+                    assert!(!eliminated.is_empty(), \"didn't eliminated any indice in this round\");\n+                    for (inp, arg) in eliminated {\n                         matched_inputs[arg] = Some(inp);\n                     }\n                 }"}, {"sha": "6bef6ad103862dec8f851e7c1cdd4878f03c2b17", "filename": "src/test/ui/argument-suggestions/issue-100478.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/56e7678ca97e9740f7d09206f767d5bb676917f7/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e7678ca97e9740f7d09206f767d5bb676917f7/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.rs?ref=56e7678ca97e9740f7d09206f767d5bb676917f7", "patch": "@@ -0,0 +1,52 @@\n+use std::sync::Arc;\n+macro_rules! GenT {\n+    ($name:tt) => {\n+        #[derive(Default, Debug)]\n+        struct $name {\n+            #[allow(unused)]\n+            val: i32,\n+        }\n+\n+        impl $name {\n+            #[allow(unused)]\n+            fn new(val: i32) -> Self {\n+                $name { val }\n+            }\n+        }\n+    };\n+}\n+\n+GenT!(T1);\n+GenT!(T2);\n+GenT!(T3);\n+GenT!(T4);\n+GenT!(T5);\n+GenT!(T6);\n+GenT!(T7);\n+GenT!(T8);\n+\n+#[allow(unused)]\n+fn foo(p1: T1, p2: Arc<T2>, p3: T3, p4: Arc<T4>, p5: T5, p6: T6, p7: T7, p8: Arc<T8>) {}\n+fn three_diff(_a: T1, _b: T2, _c: T3) {}\n+fn four_shuffle(_a: T1, _b: T2, _c: T3, _d: T4) {}\n+\n+fn main() {\n+    three_diff(T2::new(0)); //~ ERROR this function takes\n+    four_shuffle(T3::default(), T4::default(), T1::default(), T2::default()); //~ ERROR 35:5: 35:17: arguments to this function are incorrect [E0308]\n+    four_shuffle(T3::default(), T2::default(), T1::default(), T3::default()); //~ ERROR 36:5: 36:17: arguments to this function are incorrect [E0308]\n+\n+    let p1 = T1::new(0);\n+    let p2 = Arc::new(T2::new(0));\n+    let p3 = T3::new(0);\n+    let p4 = Arc::new(T4::new(1));\n+    let p5 = T5::new(0);\n+    let p6 = T6::new(0);\n+    let p7 = T7::new(0);\n+    let p8 = Arc::default();\n+\n+    foo(\n+        //~^ 47:5: 47:8: this function takes 8 arguments but 7 arguments were supplied [E0061]\n+        p1, //p2,\n+        p3, p4, p5, p6, p7, p8,\n+    );\n+}"}, {"sha": "df02a312cf11c1a79756f087acafcfa8f2884b26", "filename": "src/test/ui/argument-suggestions/issue-100478.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/56e7678ca97e9740f7d09206f767d5bb676917f7/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e7678ca97e9740f7d09206f767d5bb676917f7/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.stderr?ref=56e7678ca97e9740f7d09206f767d5bb676917f7", "patch": "@@ -0,0 +1,81 @@\n+error[E0061]: this function takes 3 arguments but 1 argument was supplied\n+  --> $DIR/issue-100478.rs:34:5\n+   |\n+LL |     three_diff(T2::new(0));\n+   |     ^^^^^^^^^^------------\n+   |               ||\n+   |               |an argument of type `T1` is missing\n+   |               an argument of type `T3` is missing\n+   |\n+note: function defined here\n+  --> $DIR/issue-100478.rs:30:4\n+   |\n+LL | fn three_diff(_a: T1, _b: T2, _c: T3) {}\n+   |    ^^^^^^^^^^ ------  ------  ------\n+help: provide the arguments\n+   |\n+LL |     three_diff(/* T1 */, T2::new(0), /* T3 */);\n+   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/issue-100478.rs:35:5\n+   |\n+LL |     four_shuffle(T3::default(), T4::default(), T1::default(), T2::default());\n+   |     ^^^^^^^^^^^^ -------------  -------------  -------------  ------------- expected `T4`, found `T2`\n+   |                  |              |              |\n+   |                  |              |              expected `T3`, found `T1`\n+   |                  |              expected `T2`, found `T4`\n+   |                  expected `T1`, found `T3`\n+   |\n+note: function defined here\n+  --> $DIR/issue-100478.rs:31:4\n+   |\n+LL | fn four_shuffle(_a: T1, _b: T2, _c: T3, _d: T4) {}\n+   |    ^^^^^^^^^^^^ ------  ------  ------  ------\n+help: did you mean\n+   |\n+LL |     four_shuffle(T1::default(), T2::default(), T3::default(), T4::default());\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/issue-100478.rs:36:5\n+   |\n+LL |     four_shuffle(T3::default(), T2::default(), T1::default(), T3::default());\n+   |     ^^^^^^^^^^^^ -------------                 -------------  ------------- expected struct `T4`, found struct `T3`\n+   |                  |                             |\n+   |                  |                             expected `T3`, found `T1`\n+   |                  expected `T1`, found `T3`\n+   |\n+note: function defined here\n+  --> $DIR/issue-100478.rs:31:4\n+   |\n+LL | fn four_shuffle(_a: T1, _b: T2, _c: T3, _d: T4) {}\n+   |    ^^^^^^^^^^^^ ------  ------  ------  ------\n+help: swap these arguments\n+   |\n+LL |     four_shuffle(T1::default(), T2::default(), T3::default(), /* T4 */);\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0061]: this function takes 8 arguments but 7 arguments were supplied\n+  --> $DIR/issue-100478.rs:47:5\n+   |\n+LL |     foo(\n+   |     ^^^\n+...\n+LL |         p3, p4, p5, p6, p7, p8,\n+   |         -- an argument of type `Arc<T2>` is missing\n+   |\n+note: function defined here\n+  --> $DIR/issue-100478.rs:29:4\n+   |\n+LL | fn foo(p1: T1, p2: Arc<T2>, p3: T3, p4: Arc<T4>, p5: T5, p6: T6, p7: T7, p8: Arc<T8>) {}\n+   |    ^^^ ------  -----------  ------  -----------  ------  ------  ------  -----------\n+help: provide the argument\n+   |\n+LL |     foo(p1, /* Arc<T2> */, p3, p4, p5, p6, p7, p8);\n+   |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "7994d3cd9959cb469d9aa33cd269667c732a2926", "filename": "src/test/ui/argument-suggestions/issue-101097.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56e7678ca97e9740f7d09206f767d5bb676917f7/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e7678ca97e9740f7d09206f767d5bb676917f7/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.rs?ref=56e7678ca97e9740f7d09206f767d5bb676917f7", "patch": "@@ -0,0 +1,21 @@\n+struct A;\n+struct B;\n+struct C;\n+struct D;\n+\n+fn f(\n+    a1: A,\n+    a2: A,\n+    b1: B,\n+    b2: B,\n+    c1: C,\n+    c2: C,\n+) {}\n+\n+fn main() {\n+    f(C, A, A, A, B, B, C); //~ ERROR this function takes 6 arguments but 7 arguments were supplied [E0061]\n+    f(C, C, A, A, B, B);  //~ ERROR arguments to this function are incorrect [E0308]\n+    f(A, A, D, D, B, B);  //~ arguments to this function are incorrect [E0308]\n+    f(C, C, B, B, A, A);  //~ arguments to this function are incorrect [E0308]\n+    f(C, C, A, B, A, A);  //~ arguments to this function are incorrect [E0308]\n+}"}, {"sha": "096f8c226f2aac19a1b7688a0315d0cd33a79824", "filename": "src/test/ui/argument-suggestions/issue-101097.stderr", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/56e7678ca97e9740f7d09206f767d5bb676917f7/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e7678ca97e9740f7d09206f767d5bb676917f7/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.stderr?ref=56e7678ca97e9740f7d09206f767d5bb676917f7", "patch": "@@ -0,0 +1,160 @@\n+error[E0061]: this function takes 6 arguments but 7 arguments were supplied\n+  --> $DIR/issue-101097.rs:16:5\n+   |\n+LL |     f(C, A, A, A, B, B, C);\n+   |     ^ -     -  -  - expected `C`, found `B`\n+   |       |     |  |\n+   |       |     |  argument of type `A` unexpected\n+   |       |     expected `B`, found `A`\n+   |       expected `A`, found `C`\n+   |\n+note: function defined here\n+  --> $DIR/issue-101097.rs:6:4\n+   |\n+LL | fn f(\n+   |    ^\n+LL |     a1: A,\n+   |     -----\n+LL |     a2: A,\n+   |     -----\n+LL |     b1: B,\n+   |     -----\n+LL |     b2: B,\n+   |     -----\n+LL |     c1: C,\n+   |     -----\n+LL |     c2: C,\n+   |     -----\n+help: did you mean\n+   |\n+LL |     f(A, A, B, B, C, C);\n+   |      ~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/issue-101097.rs:17:5\n+   |\n+LL |     f(C, C, A, A, B, B);\n+   |     ^\n+   |\n+note: function defined here\n+  --> $DIR/issue-101097.rs:6:4\n+   |\n+LL | fn f(\n+   |    ^\n+LL |     a1: A,\n+   |     -----\n+LL |     a2: A,\n+   |     -----\n+LL |     b1: B,\n+   |     -----\n+LL |     b2: B,\n+   |     -----\n+LL |     c1: C,\n+   |     -----\n+LL |     c2: C,\n+   |     -----\n+help: did you mean\n+   |\n+LL |     f(A, A, B, B, C, C);\n+   |      ~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/issue-101097.rs:18:5\n+   |\n+LL |     f(A, A, D, D, B, B);\n+   |     ^       -  -  ---- two arguments of type `C` and `C` are missing\n+   |             |  |\n+   |             |  argument of type `D` unexpected\n+   |             argument of type `D` unexpected\n+   |\n+note: function defined here\n+  --> $DIR/issue-101097.rs:6:4\n+   |\n+LL | fn f(\n+   |    ^\n+LL |     a1: A,\n+   |     -----\n+LL |     a2: A,\n+   |     -----\n+LL |     b1: B,\n+   |     -----\n+LL |     b2: B,\n+   |     -----\n+LL |     c1: C,\n+   |     -----\n+LL |     c2: C,\n+   |     -----\n+help: did you mean\n+   |\n+LL |     f(A, A, B, B, /* C */, /* C */);\n+   |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/issue-101097.rs:19:5\n+   |\n+LL |     f(C, C, B, B, A, A);\n+   |     ^ -  -        -  - expected `C`, found `A`\n+   |       |  |        |\n+   |       |  |        expected `C`, found `A`\n+   |       |  expected `A`, found `C`\n+   |       expected `A`, found `C`\n+   |\n+note: function defined here\n+  --> $DIR/issue-101097.rs:6:4\n+   |\n+LL | fn f(\n+   |    ^\n+LL |     a1: A,\n+   |     -----\n+LL |     a2: A,\n+   |     -----\n+LL |     b1: B,\n+   |     -----\n+LL |     b2: B,\n+   |     -----\n+LL |     c1: C,\n+   |     -----\n+LL |     c2: C,\n+   |     -----\n+help: did you mean\n+   |\n+LL |     f(A, A, B, B, C, C);\n+   |      ~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/issue-101097.rs:20:5\n+   |\n+LL |     f(C, C, A, B, A, A);\n+   |     ^ -  -  -     -  - expected `C`, found `A`\n+   |       |  |  |     |\n+   |       |  |  |     expected `C`, found `A`\n+   |       |  |  expected struct `B`, found struct `A`\n+   |       |  expected `A`, found `C`\n+   |       expected `A`, found `C`\n+   |\n+note: function defined here\n+  --> $DIR/issue-101097.rs:6:4\n+   |\n+LL | fn f(\n+   |    ^\n+LL |     a1: A,\n+   |     -----\n+LL |     a2: A,\n+   |     -----\n+LL |     b1: B,\n+   |     -----\n+LL |     b2: B,\n+   |     -----\n+LL |     c1: C,\n+   |     -----\n+LL |     c2: C,\n+   |     -----\n+help: did you mean\n+   |\n+LL |     f(A, A, /* B */, B, C, C);\n+   |      ~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}]}