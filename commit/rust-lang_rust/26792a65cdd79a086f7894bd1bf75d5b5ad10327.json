{"sha": "26792a65cdd79a086f7894bd1bf75d5b5ad10327", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NzkyYTY1Y2RkNzlhMDg2Zjc4OTRiZDFiZjc1ZDViNWFkMTAzMjc=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-10T19:01:58Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-10T19:01:58Z"}, "message": "Move to doc links inside std/time.rs", "tree": {"sha": "9a7fb8e0b6bb41a4e0c53693aab7df57cd219ec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a7fb8e0b6bb41a4e0c53693aab7df57cd219ec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26792a65cdd79a086f7894bd1bf75d5b5ad10327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26792a65cdd79a086f7894bd1bf75d5b5ad10327", "html_url": "https://github.com/rust-lang/rust/commit/26792a65cdd79a086f7894bd1bf75d5b5ad10327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26792a65cdd79a086f7894bd1bf75d5b5ad10327/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c336d46263999cce87de899220d7b92d11f1c85", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c336d46263999cce87de899220d7b92d11f1c85", "html_url": "https://github.com/rust-lang/rust/commit/4c336d46263999cce87de899220d7b92d11f1c85"}], "stats": {"total": 28, "additions": 4, "deletions": 24}, "files": [{"sha": "07b07c0fbe3047382b8f94de4fce24915d4c31a7", "filename": "library/std/src/time.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/26792a65cdd79a086f7894bd1bf75d5b5ad10327/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792a65cdd79a086f7894bd1bf75d5b5ad10327/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=26792a65cdd79a086f7894bd1bf75d5b5ad10327", "patch": "@@ -97,7 +97,6 @@ pub use core::time::Duration;\n /// [clock_time_get (Monotonic Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n ///\n /// **Disclaimer:** These system calls might change over time.\n-///\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct Instant(time::Instant);\n@@ -125,11 +124,6 @@ pub struct Instant(time::Instant);\n /// The size of a `SystemTime` struct may vary depending on the target operating\n /// system.\n ///\n-/// [`Instant`]: ../../std/time/struct.Instant.html\n-/// [`Result`]: ../../std/result/enum.Result.html\n-/// [`Duration`]: ../../std/time/struct.Duration.html\n-/// [`UNIX_EPOCH`]: ../../std/time/constant.UNIX_EPOCH.html\n-///\n /// Example:\n ///\n /// ```no_run\n@@ -176,7 +170,6 @@ pub struct Instant(time::Instant);\n /// [GetSystemTimeAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimeasfiletime\n ///\n /// **Disclaimer:** These system calls might change over time.\n-///\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTime(time::SystemTime);\n@@ -368,7 +361,7 @@ impl Add<Duration> for Instant {\n     /// This function may panic if the resulting point in time cannot be represented by the\n     /// underlying data structure. See [`checked_add`] for a version without panic.\n     ///\n-    /// [`checked_add`]: ../../std/time/struct.Instant.html#method.checked_add\n+    /// [`checked_add`]: Instant::checked_add\n     fn add(self, other: Duration) -> Instant {\n         self.checked_add(other).expect(\"overflow when adding duration to instant\")\n     }\n@@ -463,11 +456,6 @@ impl SystemTime {\n     /// Returns an [`Err`] if `earlier` is later than `self`, and the error\n     /// contains how far from `self` the time is.\n     ///\n-    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`Instant`]: ../../std/time/struct.Instant.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -497,11 +485,6 @@ impl SystemTime {\n     /// Returns an [`Err`] if `self` is later than the current system time, and\n     /// the error contains how far from the current system time `self` is.\n     ///\n-    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`Instant`]: ../../std/time/struct.Instant.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -544,7 +527,7 @@ impl Add<Duration> for SystemTime {\n     /// This function may panic if the resulting point in time cannot be represented by the\n     /// underlying data structure. See [`checked_add`] for a version without panic.\n     ///\n-    /// [`checked_add`]: ../../std/time/struct.SystemTime.html#method.checked_add\n+    /// [`checked_add`]: SystemTime::checked_add\n     fn add(self, dur: Duration) -> SystemTime {\n         self.checked_add(dur).expect(\"overflow when adding duration to instant\")\n     }\n@@ -589,8 +572,6 @@ impl fmt::Debug for SystemTime {\n /// measurement lies, and using `UNIX_EPOCH + duration` can be used to create a\n /// [`SystemTime`] instance to represent another fixed point in time.\n ///\n-/// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n-///\n /// # Examples\n ///\n /// ```no_run\n@@ -612,9 +593,8 @@ impl SystemTimeError {\n     /// methods of [`SystemTime`] whenever the second system time represents a point later\n     /// in time than the `self` of the method call.\n     ///\n-    /// [`duration_since`]: ../../std/time/struct.SystemTime.html#method.duration_since\n-    /// [`elapsed`]: ../../std/time/struct.SystemTime.html#method.elapsed\n-    /// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n+    /// [`duration_since`]: SystemTime::duration_since\n+    /// [`elapsed`]: SystemTime::elapsed\n     ///\n     /// # Examples\n     ///"}]}