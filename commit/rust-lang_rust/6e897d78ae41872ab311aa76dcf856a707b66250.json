{"sha": "6e897d78ae41872ab311aa76dcf856a707b66250", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlODk3ZDc4YWU0MTg3MmFiMzExYWE3NmRjZjg1NmE3MDdiNjYyNTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-28T14:22:16Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-28T14:22:16Z"}, "message": "Rollup merge of #33849 - ranma42:escape-iters-count, r=alexcrichton\n\nImplement `count` for `EscapeUnicode`\n\nand cleanup the code for `count` for `EscapeDefault` (instead of repeating the `match` for `size_hint` and `count`).\n\nThis PR marks EscapeUnicode and EscapeDefault as ExactSizeIterator. The constraints for the trait implementations held even before this PR, but I am not sure if this is something we want to guarantee/expose (I would love feedback on this, especially on what would be the appropriate way to handle stabilisation, if needed).\n\nPart of #24214, split from #31049.\n\nThe test for `count` was added in #33103.", "tree": {"sha": "cda0a2ec15b1d7a47ec33b6cb2a11730ba8dc65f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda0a2ec15b1d7a47ec33b6cb2a11730ba8dc65f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e897d78ae41872ab311aa76dcf856a707b66250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e897d78ae41872ab311aa76dcf856a707b66250", "html_url": "https://github.com/rust-lang/rust/commit/6e897d78ae41872ab311aa76dcf856a707b66250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e897d78ae41872ab311aa76dcf856a707b66250/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320dd04fabf1d3351efa00446bc9c36d5c6c5ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/320dd04fabf1d3351efa00446bc9c36d5c6c5ef3", "html_url": "https://github.com/rust-lang/rust/commit/320dd04fabf1d3351efa00446bc9c36d5c6c5ef3"}, {"sha": "6b5e86b0ce543c60e201f95d57d720181281f1da", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5e86b0ce543c60e201f95d57d720181281f1da", "html_url": "https://github.com/rust-lang/rust/commit/6b5e86b0ce543c60e201f95d57d720181281f1da"}], "stats": {"total": 84, "additions": 56, "deletions": 28}, "files": [{"sha": "d80b456181ae475d8e53651b30b2aefab89a38a5", "filename": "src/libcore/char.rs", "status": "modified", "additions": 50, "deletions": 28, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6e897d78ae41872ab311aa76dcf856a707b66250/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e897d78ae41872ab311aa76dcf856a707b66250/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=6e897d78ae41872ab311aa76dcf856a707b66250", "patch": "@@ -411,14 +411,17 @@ pub struct EscapeUnicode {\n     hex_digit_idx: usize,\n }\n \n+// The enum values are ordered so that their representation is the\n+// same as the remaining length (besides the hexadecimal digits). This\n+// likely makes `len()` a single load from memory) and inline-worth.\n #[derive(Clone, Debug)]\n enum EscapeUnicodeState {\n-    Backslash,\n-    Type,\n-    LeftBrace,\n-    Value,\n-    RightBrace,\n     Done,\n+    RightBrace,\n+    Value,\n+    LeftBrace,\n+    Type,\n+    Backslash,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -457,19 +460,17 @@ impl Iterator for EscapeUnicode {\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let n = match self.state {\n-            EscapeUnicodeState::Backslash => 5,\n-            EscapeUnicodeState::Type => 4,\n-            EscapeUnicodeState::LeftBrace => 3,\n-            EscapeUnicodeState::Value => 2,\n-            EscapeUnicodeState::RightBrace => 1,\n-            EscapeUnicodeState::Done => 0,\n-        };\n-        let n = n + self.hex_digit_idx;\n+        let n = self.len();\n         (n, Some(n))\n     }\n \n+    #[inline]\n+    fn count(self) -> usize {\n+        self.len()\n+    }\n+\n     fn last(self) -> Option<char> {\n         match self.state {\n             EscapeUnicodeState::Done => None,\n@@ -483,6 +484,22 @@ impl Iterator for EscapeUnicode {\n     }\n }\n \n+#[stable(feature = \"exact_size_escape\", since = \"1.11.0\")]\n+impl ExactSizeIterator for EscapeUnicode {\n+    #[inline]\n+    fn len(&self) -> usize {\n+        // The match is a single memory access with no branching\n+        self.hex_digit_idx + match self.state {\n+            EscapeUnicodeState::Done => 0,\n+            EscapeUnicodeState::RightBrace => 1,\n+            EscapeUnicodeState::Value => 2,\n+            EscapeUnicodeState::LeftBrace => 3,\n+            EscapeUnicodeState::Type => 4,\n+            EscapeUnicodeState::Backslash => 5,\n+        }\n+    }\n+}\n+\n /// An iterator that yields the literal escape code of a `char`.\n ///\n /// This `struct` is created by the [`escape_default()`] method on [`char`]. See\n@@ -498,9 +515,9 @@ pub struct EscapeDefault {\n \n #[derive(Clone, Debug)]\n enum EscapeDefaultState {\n-    Backslash(char),\n-    Char(char),\n     Done,\n+    Char(char),\n+    Backslash(char),\n     Unicode(EscapeUnicode),\n }\n \n@@ -523,22 +540,15 @@ impl Iterator for EscapeDefault {\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        match self.state {\n-            EscapeDefaultState::Char(_) => (1, Some(1)),\n-            EscapeDefaultState::Backslash(_) => (2, Some(2)),\n-            EscapeDefaultState::Unicode(ref iter) => iter.size_hint(),\n-            EscapeDefaultState::Done => (0, Some(0)),\n-        }\n+        let n = self.len();\n+        (n, Some(n))\n     }\n \n+    #[inline]\n     fn count(self) -> usize {\n-        match self.state {\n-            EscapeDefaultState::Char(_) => 1,\n-            EscapeDefaultState::Unicode(iter) => iter.count(),\n-            EscapeDefaultState::Done => 0,\n-            EscapeDefaultState::Backslash(_) => 2,\n-        }\n+        self.len()\n     }\n \n     fn nth(&mut self, n: usize) -> Option<char> {\n@@ -578,6 +588,18 @@ impl Iterator for EscapeDefault {\n     }\n }\n \n+#[stable(feature = \"exact_size_escape\", since = \"1.11.0\")]\n+impl ExactSizeIterator for EscapeDefault {\n+    fn len(&self) -> usize {\n+        match self.state {\n+            EscapeDefaultState::Done => 0,\n+            EscapeDefaultState::Char(_) => 1,\n+            EscapeDefaultState::Backslash(_) => 2,\n+            EscapeDefaultState::Unicode(ref iter) => iter.len(),\n+        }\n+    }\n+}\n+\n /// An iterator over `u8` entries represending the UTF-8 encoding of a `char`\n /// value.\n ///"}, {"sha": "7da876b945947c646138727c1f8d358dd84956c7", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e897d78ae41872ab311aa76dcf856a707b66250/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e897d78ae41872ab311aa76dcf856a707b66250/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=6e897d78ae41872ab311aa76dcf856a707b66250", "patch": "@@ -276,6 +276,12 @@ fn eu_iterator_specializations() {\n             // Check last\n             assert_eq!(iter.clone().last(), Some('}'));\n \n+            // Check len\n+            assert_eq!(iter.len(), len - offset);\n+\n+            // Check size_hint (= len in ExactSizeIterator)\n+            assert_eq!(iter.size_hint(), (iter.len(), Some(iter.len())));\n+\n             // Check counting\n             assert_eq!(iter.clone().count(), len - offset);\n "}]}