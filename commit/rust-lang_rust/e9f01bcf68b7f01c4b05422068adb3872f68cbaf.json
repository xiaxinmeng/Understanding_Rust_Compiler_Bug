{"sha": "e9f01bcf68b7f01c4b05422068adb3872f68cbaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZjAxYmNmNjhiN2YwMWM0YjA1NDIyMDY4YWRiMzg3MmY2OGNiYWY=", "commit": {"author": {"name": "Jeroen Bollen", "email": "contact@jeroenbollen.eu", "date": "2017-09-02T21:44:21Z"}, "committer": {"name": "Jeroen Bollen", "email": "contact@jeroenbollen.eu", "date": "2017-09-02T22:19:56Z"}, "message": "Added a way to retrieve the key out of a HashMap when it's being replaced.", "tree": {"sha": "b9d291f9eae978484f4550430339fc8297c51a4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d291f9eae978484f4550430339fc8297c51a4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9f01bcf68b7f01c4b05422068adb3872f68cbaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f01bcf68b7f01c4b05422068adb3872f68cbaf", "html_url": "https://github.com/rust-lang/rust/commit/e9f01bcf68b7f01c4b05422068adb3872f68cbaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9f01bcf68b7f01c4b05422068adb3872f68cbaf/comments", "author": {"login": "Binero", "id": 6867251, "node_id": "MDQ6VXNlcjY4NjcyNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6867251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Binero", "html_url": "https://github.com/Binero", "followers_url": "https://api.github.com/users/Binero/followers", "following_url": "https://api.github.com/users/Binero/following{/other_user}", "gists_url": "https://api.github.com/users/Binero/gists{/gist_id}", "starred_url": "https://api.github.com/users/Binero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Binero/subscriptions", "organizations_url": "https://api.github.com/users/Binero/orgs", "repos_url": "https://api.github.com/users/Binero/repos", "events_url": "https://api.github.com/users/Binero/events{/privacy}", "received_events_url": "https://api.github.com/users/Binero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Binero", "id": 6867251, "node_id": "MDQ6VXNlcjY4NjcyNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6867251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Binero", "html_url": "https://github.com/Binero", "followers_url": "https://api.github.com/users/Binero/followers", "following_url": "https://api.github.com/users/Binero/following{/other_user}", "gists_url": "https://api.github.com/users/Binero/gists{/gist_id}", "starred_url": "https://api.github.com/users/Binero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Binero/subscriptions", "organizations_url": "https://api.github.com/users/Binero/orgs", "repos_url": "https://api.github.com/users/Binero/repos", "events_url": "https://api.github.com/users/Binero/events{/privacy}", "received_events_url": "https://api.github.com/users/Binero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "204c0a47e7b7e371cf1cdc159404d405b86386ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/204c0a47e7b7e371cf1cdc159404d405b86386ba", "html_url": "https://github.com/rust-lang/rust/commit/204c0a47e7b7e371cf1cdc159404d405b86386ba"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "6eb6f892f80fec9e0b2df3170be6d89621aed9ee", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e9f01bcf68b7f01c4b05422068adb3872f68cbaf/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f01bcf68b7f01c4b05422068adb3872f68cbaf/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e9f01bcf68b7f01c4b05422068adb3872f68cbaf", "patch": "@@ -2161,6 +2161,36 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     fn take_key(&mut self) -> Option<K> {\n         self.key.take()\n     }\n+\n+    /// Replaces the entry, returning the old key and value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    /// use std::collections::hash_map::Entry;\n+    ///\n+    /// let mut map: HashMap<String, u32> = HashMap::new();\n+    /// map.insert(String::from(\"poneyland\"), 15);\n+    ///\n+    /// if let Entry::Occupied(entry) = map.entry(String::from(\"poneyland\")) {\n+    ///     let (old_key, old_value): (String, u32) = entry.replace(16);\n+    ///     assert_eq!(old_key, \"poneyland\");\n+    ///     assert_eq!(old_value, 15);\n+    /// }\n+    ///\n+    /// assert_eq!(map.get(\"poneyland\"), Some(&16));\n+    ///\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.20.0\")]\n+    pub fn replace(mut self, value: V) -> (K, V) {\n+        let (old_key, old_value) = self.elem.read_mut();\n+\n+        let old_key = mem::replace(old_key, self.key.unwrap());\n+        let old_value = mem::replace(old_value, value);\n+\n+        (old_key, old_value)\n+    }\n }\n \n impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {"}]}