{"sha": "63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzY2Q0YTM5ZWFkMWJkY2M2ZjRkZjVmMTFkMTg3OTE2YmQ4ZDNlYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-01T03:24:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-01T03:24:54Z"}, "message": "Auto merge of #51171 - faern:const-bswap-ctpop-cttz-ctlz, r=oli-obk\n\nMake some std::intrinsics `const fn`s\n\nMaking some rustc intrinsics (`ctpop`, `cttz`, `ctlz` and `bswap`) `const fn`s.\n\nThis is a pre-step to being able to make `swap_bytes`, `to_be` and `from_be` constant functions. That in itself could be ergonomic and useful. But even better is that it would allow `Ipv4Addr::new` etc becoming `const fn`s as well. Which might be really useful since I find it quite common to want to define them as constants.\n\nr? @oli-obk", "tree": {"sha": "c16da5601fbe4b7cef6a46d53d94fecf004afc34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c16da5601fbe4b7cef6a46d53d94fecf004afc34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "html_url": "https://github.com/rust-lang/rust/commit/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7a9d4ea744c9a99952bc4576727b57c58c0e958", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a9d4ea744c9a99952bc4576727b57c58c0e958", "html_url": "https://github.com/rust-lang/rust/commit/b7a9d4ea744c9a99952bc4576727b57c58c0e958"}, {"sha": "97a0d46dece080714a4fe1ac21f84ad54f6ab76d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a0d46dece080714a4fe1ac21f84ad54f6ab76d", "html_url": "https://github.com/rust-lang/rust/commit/97a0d46dece080714a4fe1ac21f84ad54f6ab76d"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "44832df824064a769d063eb897a2a1efc7a63c12", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "patch": "@@ -3,7 +3,7 @@ use rustc::middle::const_val::{ConstEvalErr, ErrKind};\n use rustc::middle::const_val::ErrKind::{TypeckError, CheckMatchError};\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Ty, Instance};\n-use rustc::ty::layout::{self, LayoutOf};\n+use rustc::ty::layout::{self, LayoutOf, Primitive};\n use rustc::ty::subst::Subst;\n \n use syntax::ast::Mutability;\n@@ -307,7 +307,7 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n     fn call_intrinsic<'a>(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n-        _args: &[ValTy<'tcx>],\n+        args: &[ValTy<'tcx>],\n         dest: Place,\n         dest_layout: layout::TyLayout<'tcx>,\n         target: mir::BasicBlock,\n@@ -345,8 +345,28 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n                 };\n                 ecx.write_scalar(dest, id_val, dest_layout.ty)?;\n             }\n+            \"ctpop\" | \"cttz\" | \"cttz_nonzero\" | \"ctlz\" | \"ctlz_nonzero\" | \"bswap\" => {\n+                let ty = substs.type_at(0);\n+                let layout_of = ecx.layout_of(ty)?;\n+                let bits = ecx.value_to_scalar(args[0])?.to_bits(layout_of.size)?;\n+                let kind = match layout_of.abi {\n+                    ty::layout::Abi::Scalar(ref scalar) => scalar.value,\n+                    _ => Err(::rustc::mir::interpret::EvalErrorKind::TypeNotPrimitive(ty))?,\n+                };\n+                let out_val = if intrinsic_name.ends_with(\"_nonzero\") {\n+                    if bits == 0 {\n+                        return err!(Intrinsic(format!(\"{} called on 0\", intrinsic_name)));\n+                    }\n+                    numeric_intrinsic(intrinsic_name.trim_right_matches(\"_nonzero\"), bits, kind)?\n+                } else {\n+                    numeric_intrinsic(intrinsic_name, bits, kind)?\n+                };\n+                ecx.write_scalar(dest, out_val, ty)?;\n+            }\n \n-            name => return Err(ConstEvalError::NeedsRfc(format!(\"calling intrinsic `{}`\", name)).into()),\n+            name => return Err(\n+                ConstEvalError::NeedsRfc(format!(\"calling intrinsic `{}`\", name)).into()\n+            ),\n         }\n \n         ecx.goto_block(target);\n@@ -570,3 +590,23 @@ pub fn const_eval_provider<'a, 'tcx>(\n         }\n     })\n }\n+\n+fn numeric_intrinsic<'tcx>(\n+    name: &str,\n+    bits: u128,\n+    kind: Primitive,\n+) -> EvalResult<'tcx, Scalar> {\n+    let defined = match kind {\n+        Primitive::Int(integer, _) => integer.size().bits() as u8,\n+        _ => bug!(\"invalid `{}` argument: {:?}\", name, bits),\n+    };\n+    let extra = 128 - defined as u128;\n+    let bits_out = match name {\n+        \"ctpop\" => bits.count_ones() as u128,\n+        \"ctlz\" => bits.leading_zeros() as u128 - extra,\n+        \"cttz\" => (bits << extra).trailing_zeros() as u128 - extra,\n+        \"bswap\" => (bits << extra).swap_bytes(),\n+        _ => bug!(\"not a numeric intrinsic: {}\", name),\n+    };\n+    Ok(Scalar::Bits { bits: bits_out, defined })\n+}"}, {"sha": "03ca85faafff6b6af56c96eb14d1154c375d89c9", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "patch": "@@ -907,7 +907,15 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     Abi::PlatformIntrinsic => {\n                         assert!(!self.tcx.is_const_fn(def_id));\n                         match &self.tcx.item_name(def_id).as_str()[..] {\n-                            \"size_of\" | \"min_align_of\" | \"type_id\" => is_const_fn = Some(def_id),\n+                            | \"size_of\"\n+                            | \"min_align_of\"\n+                            | \"type_id\"\n+                            | \"bswap\"\n+                            | \"ctpop\"\n+                            | \"cttz\"\n+                            | \"cttz_nonzero\"\n+                            | \"ctlz\"\n+                            | \"ctlz_nonzero\" => is_const_fn = Some(def_id),\n \n                             name if name.starts_with(\"simd_shuffle\") => {\n                                 is_shuffle = true;"}, {"sha": "b951a9b72b1e14cb4bb07df1cb12d93d53971a44", "filename": "src/test/run-pass/ctfe/bswap-const.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7/src%2Ftest%2Frun-pass%2Fctfe%2Fbswap-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7/src%2Ftest%2Frun-pass%2Fctfe%2Fbswap-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fbswap-const.rs?ref=63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics;\n+\n+const SWAPPED_U8: u8 = unsafe { intrinsics::bswap(0x12_u8) };\n+const SWAPPED_U16: u16 = unsafe { intrinsics::bswap(0x12_34_u16) };\n+const SWAPPED_I32: i32 = unsafe { intrinsics::bswap(0x12_34_56_78_i32) };\n+\n+fn main() {\n+    assert_eq!(SWAPPED_U8, 0x12);\n+    assert_eq!(SWAPPED_U16, 0x34_12);\n+    assert_eq!(SWAPPED_I32, 0x78_56_34_12);\n+}"}]}