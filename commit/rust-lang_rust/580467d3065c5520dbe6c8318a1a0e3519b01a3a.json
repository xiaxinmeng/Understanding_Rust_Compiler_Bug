{"sha": "580467d3065c5520dbe6c8318a1a0e3519b01a3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDQ2N2QzMDY1YzU1MjBkYmU2YzgzMThhMWEwZTM1MTliMDFhM2E=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-03-05T02:47:39Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-03-09T18:51:39Z"}, "message": "Rename BorrowData::location to BorrowData::reserve_location\n\nin preparation for rewritting two phase borrow support", "tree": {"sha": "691663172a45d083845fee3f40d12108b5f1bff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/691663172a45d083845fee3f40d12108b5f1bff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/580467d3065c5520dbe6c8318a1a0e3519b01a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/580467d3065c5520dbe6c8318a1a0e3519b01a3a", "html_url": "https://github.com/rust-lang/rust/commit/580467d3065c5520dbe6c8318a1a0e3519b01a3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/580467d3065c5520dbe6c8318a1a0e3519b01a3a/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedce67cd21dc08ece5a484fe1a060346acac98a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedce67cd21dc08ece5a484fe1a060346acac98a", "html_url": "https://github.com/rust-lang/rust/commit/fedce67cd21dc08ece5a484fe1a060346acac98a"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "a47ced010e60464a9821c2e1a4c52ceb08cb3c62", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/580467d3065c5520dbe6c8318a1a0e3519b01a3a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580467d3065c5520dbe6c8318a1a0e3519b01a3a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=580467d3065c5520dbe6c8318a1a0e3519b01a3a", "patch": "@@ -250,7 +250,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let new_closure_span = self.find_closure_span(span, context.loc);\n         let span = new_closure_span.map(|(args, _)| args).unwrap_or(span);\n-        let old_closure_span = self.find_closure_span(issued_span, issued_borrow.location);\n+        let old_closure_span = self.find_closure_span(issued_span, issued_borrow.reserve_location);\n         let issued_span = old_closure_span\n             .map(|(args, _)| args)\n             .unwrap_or(issued_span);\n@@ -380,7 +380,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             .last()\n             .unwrap();\n \n-        let borrow_span = self.mir.source_info(borrow.location).span;\n+        let borrow_span = self.mir.source_info(borrow.reserve_location).span;\n         let proper_span = match *root_place {\n             Place::Local(local) => self.mir.local_decls[local].source_info.span,\n             _ => drop_span,\n@@ -817,7 +817,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n     // Retrieve span of given borrow from the current MIR representation\n     pub fn retrieve_borrow_span(&self, borrow: &BorrowData) -> Span {\n-        self.mir.source_info(borrow.location).span\n+        self.mir.source_info(borrow.reserve_location).span\n     }\n \n     // Retrieve type of a place for the current MIR representation"}, {"sha": "859618d27b33bf78aca00eccb8b0db8171f170cc", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/580467d3065c5520dbe6c8318a1a0e3519b01a3a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580467d3065c5520dbe6c8318a1a0e3519b01a3a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=580467d3065c5520dbe6c8318a1a0e3519b01a3a", "patch": "@@ -111,7 +111,9 @@ impl<'a, 'gcx, 'tcx> ActiveBorrows<'a, 'gcx, 'tcx> {\n #[allow(dead_code)]\n #[derive(Debug)]\n pub struct BorrowData<'tcx> {\n-    pub(crate) location: Location,\n+    /// Location where the borrow reservation starts.\n+    /// In many cases, this will be equal to the activation location but not always.\n+    pub(crate) reserve_location: Location,\n     pub(crate) kind: mir::BorrowKind,\n     pub(crate) region: Region<'tcx>,\n     pub(crate) borrowed_place: mir::Place<'tcx>,\n@@ -209,7 +211,8 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                     if is_unsafe_place(self.tcx, self.mir, borrowed_place) { return; }\n \n                     let borrow = BorrowData {\n-                        location, kind, region,\n+                        reserve_location: location,\n+                        kind, region,\n                         borrowed_place: borrowed_place.clone(),\n                         assigned_place: assigned_place.clone(),\n                     };\n@@ -245,7 +248,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                     let mut found_it = false;\n                     for idx in &self.region_map[region] {\n                         let bd = &self.idx_vec[*idx];\n-                        if bd.location == location &&\n+                        if bd.reserve_location == location &&\n                             bd.kind == kind &&\n                             bd.region == region &&\n                             bd.borrowed_place == *place\n@@ -277,7 +280,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     pub fn scope_tree(&self) -> &Lrc<region::ScopeTree> { &self.scope_tree }\n \n     pub fn location(&self, idx: BorrowIndex) -> &Location {\n-        &self.borrows[idx].location\n+        &self.borrows[idx].reserve_location\n     }\n \n     /// Add all borrows to the kill set, if those borrows are out of scope at `location`."}]}