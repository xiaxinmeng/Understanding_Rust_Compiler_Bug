{"sha": "5257a5b284038d704011c90f14140c16c5a37f7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNTdhNWIyODQwMzhkNzA0MDExYzkwZjE0MTQwYzE2YzVhMzdmN2Q=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-27T18:12:30Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T00:05:58Z"}, "message": "libcoretest: remove unnecessary `as_slice()` calls", "tree": {"sha": "aa09d76e9e881d4b5c1d62b3746a79a8a35eaeef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa09d76e9e881d4b5c1d62b3746a79a8a35eaeef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5257a5b284038d704011c90f14140c16c5a37f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5257a5b284038d704011c90f14140c16c5a37f7d", "html_url": "https://github.com/rust-lang/rust/commit/5257a5b284038d704011c90f14140c16c5a37f7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5257a5b284038d704011c90f14140c16c5a37f7d/comments", "author": null, "committer": null, "parents": [{"sha": "0ac3b166df97f34c43214d3c64da0cff66cbac7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac3b166df97f34c43214d3c64da0cff66cbac7c", "html_url": "https://github.com/rust-lang/rust/commit/0ac3b166df97f34c43214d3c64da0cff66cbac7c"}], "stats": {"total": 278, "additions": 139, "deletions": 139}, "files": [{"sha": "54da6264bb0491e1f947250c7f723c2c73ebe557", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=5257a5b284038d704011c90f14140c16c5a37f7d", "patch": "@@ -29,22 +29,22 @@ fn smoketest_cell() {\n #[test]\n fn cell_has_sensible_show() {\n     let x = Cell::new(\"foo bar\");\n-    assert!(format!(\"{}\", x).as_slice().contains(x.get()));\n+    assert!(format!(\"{}\", x).contains(x.get()));\n \n     x.set(\"baz qux\");\n-    assert!(format!(\"{}\", x).as_slice().contains(x.get()));\n+    assert!(format!(\"{}\", x).contains(x.get()));\n }\n \n #[test]\n fn ref_and_refmut_have_sensible_show() {\n     let refcell = RefCell::new(\"foo\");\n \n     let refcell_refmut = refcell.borrow_mut();\n-    assert!(format!(\"{}\", refcell_refmut).as_slice().contains(\"foo\"));\n+    assert!(format!(\"{}\", refcell_refmut).contains(\"foo\"));\n     drop(refcell_refmut);\n \n     let refcell_ref = refcell.borrow();\n-    assert!(format!(\"{}\", refcell_ref).as_slice().contains(\"foo\"));\n+    assert!(format!(\"{}\", refcell_ref).contains(\"foo\"));\n     drop(refcell_ref);\n }\n "}, {"sha": "e5561bebb22d8927c8fb62e71b9f6095f5c623cb", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=5257a5b284038d704011c90f14140c16c5a37f7d", "patch": "@@ -121,31 +121,31 @@ fn test_escape_default() {\n         return result;\n     }\n     let s = string('\\n');\n-    assert_eq!(s.as_slice(), \"\\\\n\");\n+    assert_eq!(s, \"\\\\n\");\n     let s = string('\\r');\n-    assert_eq!(s.as_slice(), \"\\\\r\");\n+    assert_eq!(s, \"\\\\r\");\n     let s = string('\\'');\n-    assert_eq!(s.as_slice(), \"\\\\'\");\n+    assert_eq!(s, \"\\\\'\");\n     let s = string('\"');\n-    assert_eq!(s.as_slice(), \"\\\\\\\"\");\n+    assert_eq!(s, \"\\\\\\\"\");\n     let s = string(' ');\n-    assert_eq!(s.as_slice(), \" \");\n+    assert_eq!(s, \" \");\n     let s = string('a');\n-    assert_eq!(s.as_slice(), \"a\");\n+    assert_eq!(s, \"a\");\n     let s = string('~');\n-    assert_eq!(s.as_slice(), \"~\");\n+    assert_eq!(s, \"~\");\n     let s = string('\\x00');\n-    assert_eq!(s.as_slice(), \"\\\\x00\");\n+    assert_eq!(s, \"\\\\x00\");\n     let s = string('\\x1f');\n-    assert_eq!(s.as_slice(), \"\\\\x1f\");\n+    assert_eq!(s, \"\\\\x1f\");\n     let s = string('\\x7f');\n-    assert_eq!(s.as_slice(), \"\\\\x7f\");\n+    assert_eq!(s, \"\\\\x7f\");\n     let s = string('\\u00ff');\n-    assert_eq!(s.as_slice(), \"\\\\u00ff\");\n+    assert_eq!(s, \"\\\\u00ff\");\n     let s = string('\\u011b');\n-    assert_eq!(s.as_slice(), \"\\\\u011b\");\n+    assert_eq!(s, \"\\\\u011b\");\n     let s = string('\\U0001d4b6');\n-    assert_eq!(s.as_slice(), \"\\\\U0001d4b6\");\n+    assert_eq!(s, \"\\\\U0001d4b6\");\n }\n \n #[test]\n@@ -156,17 +156,17 @@ fn test_escape_unicode() {\n         return result;\n     }\n     let s = string('\\x00');\n-    assert_eq!(s.as_slice(), \"\\\\x00\");\n+    assert_eq!(s, \"\\\\x00\");\n     let s = string('\\n');\n-    assert_eq!(s.as_slice(), \"\\\\x0a\");\n+    assert_eq!(s, \"\\\\x0a\");\n     let s = string(' ');\n-    assert_eq!(s.as_slice(), \"\\\\x20\");\n+    assert_eq!(s, \"\\\\x20\");\n     let s = string('a');\n-    assert_eq!(s.as_slice(), \"\\\\x61\");\n+    assert_eq!(s, \"\\\\x61\");\n     let s = string('\\u011b');\n-    assert_eq!(s.as_slice(), \"\\\\u011b\");\n+    assert_eq!(s, \"\\\\u011b\");\n     let s = string('\\U0001d4b6');\n-    assert_eq!(s.as_slice(), \"\\\\U0001d4b6\");\n+    assert_eq!(s, \"\\\\U0001d4b6\");\n }\n \n #[test]"}, {"sha": "1e28933becd6ec6808011712ca09e77f76aac57d", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 107, "deletions": 107, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=5257a5b284038d704011c90f14140c16c5a37f7d", "patch": "@@ -16,136 +16,136 @@ fn test_format_int() {\n     // Formatting integers should select the right implementation based off\n     // the type of the argument. Also, hex/octal/binary should be defined\n     // for integers, but they shouldn't emit the negative sign.\n-    assert!(format!(\"{}\", 1i).as_slice() == \"1\");\n-    assert!(format!(\"{}\", 1i8).as_slice() == \"1\");\n-    assert!(format!(\"{}\", 1i16).as_slice() == \"1\");\n-    assert!(format!(\"{}\", 1i32).as_slice() == \"1\");\n-    assert!(format!(\"{}\", 1i64).as_slice() == \"1\");\n-    assert!(format!(\"{}\", -1i).as_slice() == \"-1\");\n-    assert!(format!(\"{}\", -1i8).as_slice() == \"-1\");\n-    assert!(format!(\"{}\", -1i16).as_slice() == \"-1\");\n-    assert!(format!(\"{}\", -1i32).as_slice() == \"-1\");\n-    assert!(format!(\"{}\", -1i64).as_slice() == \"-1\");\n-    assert!(format!(\"{:b}\", 1i).as_slice() == \"1\");\n-    assert!(format!(\"{:b}\", 1i8).as_slice() == \"1\");\n-    assert!(format!(\"{:b}\", 1i16).as_slice() == \"1\");\n-    assert!(format!(\"{:b}\", 1i32).as_slice() == \"1\");\n-    assert!(format!(\"{:b}\", 1i64).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1i).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1i8).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1i16).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1i32).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1i64).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1i).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1i8).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1i16).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1i32).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1i64).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1i).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1i8).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1i16).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1i32).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1i64).as_slice() == \"1\");\n-\n-    assert!(format!(\"{}\", 1u).as_slice() == \"1\");\n-    assert!(format!(\"{}\", 1u8).as_slice() == \"1\");\n-    assert!(format!(\"{}\", 1u16).as_slice() == \"1\");\n-    assert!(format!(\"{}\", 1u32).as_slice() == \"1\");\n-    assert!(format!(\"{}\", 1u64).as_slice() == \"1\");\n-    assert!(format!(\"{:b}\", 1u).as_slice() == \"1\");\n-    assert!(format!(\"{:b}\", 1u8).as_slice() == \"1\");\n-    assert!(format!(\"{:b}\", 1u16).as_slice() == \"1\");\n-    assert!(format!(\"{:b}\", 1u32).as_slice() == \"1\");\n-    assert!(format!(\"{:b}\", 1u64).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1u).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1u8).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1u16).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1u32).as_slice() == \"1\");\n-    assert!(format!(\"{:x}\", 1u64).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1u).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1u8).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1u16).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1u32).as_slice() == \"1\");\n-    assert!(format!(\"{:X}\", 1u64).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1u).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1u8).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1u16).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1u32).as_slice() == \"1\");\n-    assert!(format!(\"{:o}\", 1u64).as_slice() == \"1\");\n+    assert!(format!(\"{}\", 1i) == \"1\");\n+    assert!(format!(\"{}\", 1i8) == \"1\");\n+    assert!(format!(\"{}\", 1i16) == \"1\");\n+    assert!(format!(\"{}\", 1i32) == \"1\");\n+    assert!(format!(\"{}\", 1i64) == \"1\");\n+    assert!(format!(\"{}\", -1i) == \"-1\");\n+    assert!(format!(\"{}\", -1i8) == \"-1\");\n+    assert!(format!(\"{}\", -1i16) == \"-1\");\n+    assert!(format!(\"{}\", -1i32) == \"-1\");\n+    assert!(format!(\"{}\", -1i64) == \"-1\");\n+    assert!(format!(\"{:b}\", 1i) == \"1\");\n+    assert!(format!(\"{:b}\", 1i8) == \"1\");\n+    assert!(format!(\"{:b}\", 1i16) == \"1\");\n+    assert!(format!(\"{:b}\", 1i32) == \"1\");\n+    assert!(format!(\"{:b}\", 1i64) == \"1\");\n+    assert!(format!(\"{:x}\", 1i) == \"1\");\n+    assert!(format!(\"{:x}\", 1i8) == \"1\");\n+    assert!(format!(\"{:x}\", 1i16) == \"1\");\n+    assert!(format!(\"{:x}\", 1i32) == \"1\");\n+    assert!(format!(\"{:x}\", 1i64) == \"1\");\n+    assert!(format!(\"{:X}\", 1i) == \"1\");\n+    assert!(format!(\"{:X}\", 1i8) == \"1\");\n+    assert!(format!(\"{:X}\", 1i16) == \"1\");\n+    assert!(format!(\"{:X}\", 1i32) == \"1\");\n+    assert!(format!(\"{:X}\", 1i64) == \"1\");\n+    assert!(format!(\"{:o}\", 1i) == \"1\");\n+    assert!(format!(\"{:o}\", 1i8) == \"1\");\n+    assert!(format!(\"{:o}\", 1i16) == \"1\");\n+    assert!(format!(\"{:o}\", 1i32) == \"1\");\n+    assert!(format!(\"{:o}\", 1i64) == \"1\");\n+\n+    assert!(format!(\"{}\", 1u) == \"1\");\n+    assert!(format!(\"{}\", 1u8) == \"1\");\n+    assert!(format!(\"{}\", 1u16) == \"1\");\n+    assert!(format!(\"{}\", 1u32) == \"1\");\n+    assert!(format!(\"{}\", 1u64) == \"1\");\n+    assert!(format!(\"{:b}\", 1u) == \"1\");\n+    assert!(format!(\"{:b}\", 1u8) == \"1\");\n+    assert!(format!(\"{:b}\", 1u16) == \"1\");\n+    assert!(format!(\"{:b}\", 1u32) == \"1\");\n+    assert!(format!(\"{:b}\", 1u64) == \"1\");\n+    assert!(format!(\"{:x}\", 1u) == \"1\");\n+    assert!(format!(\"{:x}\", 1u8) == \"1\");\n+    assert!(format!(\"{:x}\", 1u16) == \"1\");\n+    assert!(format!(\"{:x}\", 1u32) == \"1\");\n+    assert!(format!(\"{:x}\", 1u64) == \"1\");\n+    assert!(format!(\"{:X}\", 1u) == \"1\");\n+    assert!(format!(\"{:X}\", 1u8) == \"1\");\n+    assert!(format!(\"{:X}\", 1u16) == \"1\");\n+    assert!(format!(\"{:X}\", 1u32) == \"1\");\n+    assert!(format!(\"{:X}\", 1u64) == \"1\");\n+    assert!(format!(\"{:o}\", 1u) == \"1\");\n+    assert!(format!(\"{:o}\", 1u8) == \"1\");\n+    assert!(format!(\"{:o}\", 1u16) == \"1\");\n+    assert!(format!(\"{:o}\", 1u32) == \"1\");\n+    assert!(format!(\"{:o}\", 1u64) == \"1\");\n \n     // Test a larger number\n-    assert!(format!(\"{:b}\", 55i).as_slice() == \"110111\");\n-    assert!(format!(\"{:o}\", 55i).as_slice() == \"67\");\n-    assert!(format!(\"{}\", 55i).as_slice() == \"55\");\n-    assert!(format!(\"{:x}\", 55i).as_slice() == \"37\");\n-    assert!(format!(\"{:X}\", 55i).as_slice() == \"37\");\n+    assert!(format!(\"{:b}\", 55i) == \"110111\");\n+    assert!(format!(\"{:o}\", 55i) == \"67\");\n+    assert!(format!(\"{}\", 55i) == \"55\");\n+    assert!(format!(\"{:x}\", 55i) == \"37\");\n+    assert!(format!(\"{:X}\", 55i) == \"37\");\n }\n \n #[test]\n fn test_format_int_zero() {\n-    assert!(format!(\"{}\", 0i).as_slice() == \"0\");\n-    assert!(format!(\"{:b}\", 0i).as_slice() == \"0\");\n-    assert!(format!(\"{:o}\", 0i).as_slice() == \"0\");\n-    assert!(format!(\"{:x}\", 0i).as_slice() == \"0\");\n-    assert!(format!(\"{:X}\", 0i).as_slice() == \"0\");\n-\n-    assert!(format!(\"{}\", 0u).as_slice() == \"0\");\n-    assert!(format!(\"{:b}\", 0u).as_slice() == \"0\");\n-    assert!(format!(\"{:o}\", 0u).as_slice() == \"0\");\n-    assert!(format!(\"{:x}\", 0u).as_slice() == \"0\");\n-    assert!(format!(\"{:X}\", 0u).as_slice() == \"0\");\n+    assert!(format!(\"{}\", 0i) == \"0\");\n+    assert!(format!(\"{:b}\", 0i) == \"0\");\n+    assert!(format!(\"{:o}\", 0i) == \"0\");\n+    assert!(format!(\"{:x}\", 0i) == \"0\");\n+    assert!(format!(\"{:X}\", 0i) == \"0\");\n+\n+    assert!(format!(\"{}\", 0u) == \"0\");\n+    assert!(format!(\"{:b}\", 0u) == \"0\");\n+    assert!(format!(\"{:o}\", 0u) == \"0\");\n+    assert!(format!(\"{:x}\", 0u) == \"0\");\n+    assert!(format!(\"{:X}\", 0u) == \"0\");\n }\n \n #[test]\n fn test_format_int_flags() {\n-    assert!(format!(\"{:3}\", 1i).as_slice() == \"  1\");\n-    assert!(format!(\"{:>3}\", 1i).as_slice() == \"  1\");\n-    assert!(format!(\"{:>+3}\", 1i).as_slice() == \" +1\");\n-    assert!(format!(\"{:<3}\", 1i).as_slice() == \"1  \");\n-    assert!(format!(\"{:#}\", 1i).as_slice() == \"1\");\n-    assert!(format!(\"{:#x}\", 10i).as_slice() == \"0xa\");\n-    assert!(format!(\"{:#X}\", 10i).as_slice() == \"0xA\");\n-    assert!(format!(\"{:#5x}\", 10i).as_slice() == \"  0xa\");\n-    assert!(format!(\"{:#o}\", 10i).as_slice() == \"0o12\");\n-    assert!(format!(\"{:08x}\", 10i).as_slice() == \"0000000a\");\n-    assert!(format!(\"{:8x}\", 10i).as_slice() == \"       a\");\n-    assert!(format!(\"{:<8x}\", 10i).as_slice() == \"a       \");\n-    assert!(format!(\"{:>8x}\", 10i).as_slice() == \"       a\");\n-    assert!(format!(\"{:#08x}\", 10i).as_slice() == \"0x00000a\");\n-    assert!(format!(\"{:08}\", -10i).as_slice() == \"-0000010\");\n-    assert!(format!(\"{:x}\", -1u8).as_slice() == \"ff\");\n-    assert!(format!(\"{:X}\", -1u8).as_slice() == \"FF\");\n-    assert!(format!(\"{:b}\", -1u8).as_slice() == \"11111111\");\n-    assert!(format!(\"{:o}\", -1u8).as_slice() == \"377\");\n-    assert!(format!(\"{:#x}\", -1u8).as_slice() == \"0xff\");\n-    assert!(format!(\"{:#X}\", -1u8).as_slice() == \"0xFF\");\n-    assert!(format!(\"{:#b}\", -1u8).as_slice() == \"0b11111111\");\n-    assert!(format!(\"{:#o}\", -1u8).as_slice() == \"0o377\");\n+    assert!(format!(\"{:3}\", 1i) == \"  1\");\n+    assert!(format!(\"{:>3}\", 1i) == \"  1\");\n+    assert!(format!(\"{:>+3}\", 1i) == \" +1\");\n+    assert!(format!(\"{:<3}\", 1i) == \"1  \");\n+    assert!(format!(\"{:#}\", 1i) == \"1\");\n+    assert!(format!(\"{:#x}\", 10i) == \"0xa\");\n+    assert!(format!(\"{:#X}\", 10i) == \"0xA\");\n+    assert!(format!(\"{:#5x}\", 10i) == \"  0xa\");\n+    assert!(format!(\"{:#o}\", 10i) == \"0o12\");\n+    assert!(format!(\"{:08x}\", 10i) == \"0000000a\");\n+    assert!(format!(\"{:8x}\", 10i) == \"       a\");\n+    assert!(format!(\"{:<8x}\", 10i) == \"a       \");\n+    assert!(format!(\"{:>8x}\", 10i) == \"       a\");\n+    assert!(format!(\"{:#08x}\", 10i) == \"0x00000a\");\n+    assert!(format!(\"{:08}\", -10i) == \"-0000010\");\n+    assert!(format!(\"{:x}\", -1u8) == \"ff\");\n+    assert!(format!(\"{:X}\", -1u8) == \"FF\");\n+    assert!(format!(\"{:b}\", -1u8) == \"11111111\");\n+    assert!(format!(\"{:o}\", -1u8) == \"377\");\n+    assert!(format!(\"{:#x}\", -1u8) == \"0xff\");\n+    assert!(format!(\"{:#X}\", -1u8) == \"0xFF\");\n+    assert!(format!(\"{:#b}\", -1u8) == \"0b11111111\");\n+    assert!(format!(\"{:#o}\", -1u8) == \"0o377\");\n }\n \n #[test]\n fn test_format_int_sign_padding() {\n-    assert!(format!(\"{:+5}\", 1i).as_slice() == \"   +1\");\n-    assert!(format!(\"{:+5}\", -1i).as_slice() == \"   -1\");\n-    assert!(format!(\"{:05}\", 1i).as_slice() == \"00001\");\n-    assert!(format!(\"{:05}\", -1i).as_slice() == \"-0001\");\n-    assert!(format!(\"{:+05}\", 1i).as_slice() == \"+0001\");\n-    assert!(format!(\"{:+05}\", -1i).as_slice() == \"-0001\");\n+    assert!(format!(\"{:+5}\", 1i) == \"   +1\");\n+    assert!(format!(\"{:+5}\", -1i) == \"   -1\");\n+    assert!(format!(\"{:05}\", 1i) == \"00001\");\n+    assert!(format!(\"{:05}\", -1i) == \"-0001\");\n+    assert!(format!(\"{:+05}\", 1i) == \"+0001\");\n+    assert!(format!(\"{:+05}\", -1i) == \"-0001\");\n }\n \n #[test]\n fn test_format_int_twos_complement() {\n     use core::{i8, i16, i32, i64};\n-    assert!(format!(\"{}\", i8::MIN).as_slice() == \"-128\");\n-    assert!(format!(\"{}\", i16::MIN).as_slice() == \"-32768\");\n-    assert!(format!(\"{}\", i32::MIN).as_slice() == \"-2147483648\");\n-    assert!(format!(\"{}\", i64::MIN).as_slice() == \"-9223372036854775808\");\n+    assert!(format!(\"{}\", i8::MIN) == \"-128\");\n+    assert!(format!(\"{}\", i16::MIN) == \"-32768\");\n+    assert!(format!(\"{}\", i32::MIN) == \"-2147483648\");\n+    assert!(format!(\"{}\", i64::MIN) == \"-9223372036854775808\");\n }\n \n #[test]\n fn test_format_radix() {\n-    assert!(format!(\"{:04}\", radix(3i, 2)).as_slice() == \"0011\");\n-    assert!(format!(\"{}\", radix(55i, 36)).as_slice() == \"1j\");\n+    assert!(format!(\"{:04}\", radix(3i, 2)) == \"0011\");\n+    assert!(format!(\"{}\", radix(55i, 36)) == \"1j\");\n }\n \n #[test]"}, {"sha": "86fc25c9d918c2b765a2fe26645e0ec299668e0e", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=5257a5b284038d704011c90f14140c16c5a37f7d", "patch": "@@ -28,10 +28,10 @@ fn test_get_ptr() {\n #[test]\n fn test_get_str() {\n     let x = \"test\".to_string();\n-    let addr_x = x.as_slice().as_ptr();\n+    let addr_x = x.as_ptr();\n     let opt = Some(x);\n     let y = opt.unwrap();\n-    let addr_y = y.as_slice().as_ptr();\n+    let addr_y = y.as_ptr();\n     assert_eq!(addr_x, addr_y);\n }\n \n@@ -135,7 +135,7 @@ fn test_or_else() {\n fn test_unwrap() {\n     assert_eq!(Some(1i).unwrap(), 1);\n     let s = Some(\"hello\".to_string()).unwrap();\n-    assert_eq!(s.as_slice(), \"hello\");\n+    assert_eq!(s, \"hello\");\n }\n \n #[test]\n@@ -266,4 +266,4 @@ fn test_cloned() {\n     assert_eq!(opt_ref_ref.clone(), Some(&val1_ref));\n     assert_eq!(opt_ref_ref.clone().cloned(), Some(&val1));\n     assert_eq!(opt_ref_ref.cloned().cloned(), Some(1u32));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "415cd4e7dcfb80a75c05be7cf77452d6062bf703", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=5257a5b284038d704011c90f14140c16c5a37f7d", "patch": "@@ -93,9 +93,9 @@ pub fn test_fmt_default() {\n     let err: Result<int, &'static str> = Err(\"Err\");\n \n     let s = format!(\"{}\", ok);\n-    assert_eq!(s.as_slice(), \"Ok(100)\");\n+    assert_eq!(s, \"Ok(100)\");\n     let s = format!(\"{}\", err);\n-    assert_eq!(s.as_slice(), \"Err(Err)\");\n+    assert_eq!(s, \"Err(Err)\");\n }\n \n #[test]"}, {"sha": "c53d82de23c6c31a29102cee09fb90ca50ae6fb9", "filename": "src/libcoretest/tuple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5257a5b284038d704011c90f14140c16c5a37f7d/src%2Flibcoretest%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ftuple.rs?ref=5257a5b284038d704011c90f14140c16c5a37f7d", "patch": "@@ -84,9 +84,9 @@ fn test_tuple_cmp() {\n #[test]\n fn test_show() {\n     let s = format!(\"{}\", (1i,));\n-    assert_eq!(s.as_slice(), \"(1,)\");\n+    assert_eq!(s, \"(1,)\");\n     let s = format!(\"{}\", (1i, true));\n-    assert_eq!(s.as_slice(), \"(1, true)\");\n+    assert_eq!(s, \"(1, true)\");\n     let s = format!(\"{}\", (1i, \"hi\", true));\n-    assert_eq!(s.as_slice(), \"(1, hi, true)\");\n+    assert_eq!(s, \"(1, hi, true)\");\n }"}]}