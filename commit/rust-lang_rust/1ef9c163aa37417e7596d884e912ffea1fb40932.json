{"sha": "1ef9c163aa37417e7596d884e912ffea1fb40932", "node_id": "C_kwDOAAsO6NoAKDFlZjljMTYzYWEzNzQxN2U3NTk2ZDg4NGU5MTJmZmVhMWZiNDA5MzI", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-03-28T16:31:21Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-10T17:36:01Z"}, "message": "Uplift clippy::forget_ref to rustc", "tree": {"sha": "52f77869f7138596b5a8058c013a80dcfa16339d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52f77869f7138596b5a8058c013a80dcfa16339d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef9c163aa37417e7596d884e912ffea1fb40932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef9c163aa37417e7596d884e912ffea1fb40932", "html_url": "https://github.com/rust-lang/rust/commit/1ef9c163aa37417e7596d884e912ffea1fb40932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef9c163aa37417e7596d884e912ffea1fb40932/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb24ce3da5a6b3e5e864fd76e2dd304a55216c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb24ce3da5a6b3e5e864fd76e2dd304a55216c6", "html_url": "https://github.com/rust-lang/rust/commit/bbb24ce3da5a6b3e5e864fd76e2dd304a55216c6"}], "stats": {"total": 195, "additions": 193, "deletions": 2}, "files": [{"sha": "a570f03e28cb95e1dde0c758daf334e0fbbf4efd", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ef9c163aa37417e7596d884e912ffea1fb40932/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1ef9c163aa37417e7596d884e912ffea1fb40932/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=1ef9c163aa37417e7596d884e912ffea1fb40932", "patch": "@@ -526,3 +526,6 @@ lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned v\n \n lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy`.\n     .note = argument has type `{$arg_ty}`\n+\n+lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value\n+    .note = argument has type `{$arg_ty}`"}, {"sha": "32594178fe81f642050cdb09a1c1cc32a1fe7ef8", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1ef9c163aa37417e7596d884e912ffea1fb40932/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef9c163aa37417e7596d884e912ffea1fb40932/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=1ef9c163aa37417e7596d884e912ffea1fb40932", "patch": "@@ -1,7 +1,7 @@\n use rustc_hir::{Arm, Expr, ExprKind, Node};\n use rustc_span::sym;\n \n-use crate::{lints::{DropRefDiag, DropCopyDiag}, LateContext, LateLintPass, LintContext};\n+use crate::{lints::{DropRefDiag, DropCopyDiag, ForgetRefDiag}, LateContext, LateLintPass, LintContext};\n \n declare_lint! {\n     /// The `drop_ref` lint checks for calls to `std::mem::drop` with a reference\n@@ -31,6 +31,29 @@ declare_lint! {\n     \"calls to `std::mem::drop` with a reference instead of an owned value\"\n }\n \n+declare_lint! {\n+    /// The `forget_ref` lint checks for calls to `std::mem::forget` with a reference\n+    /// instead of an owned value.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let x = Box::new(1);\n+    /// std::mem::forget(&x); // Should have been forget(x), x will still be dropped\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `forget` on a reference will only forget the\n+    /// reference itself, which is a no-op. It will not forget the underlying\n+    /// referenced value, which is likely what was intended.\n+    pub FORGET_REF,\n+    Warn,\n+    \"calls to `std::mem::forget` with a reference instead of an owned value\"\n+}\n+\n declare_lint! {\n     /// The `drop_copy` lint checks for calls to `std::mem::drop` with a value\n     /// that derives the Copy trait.\n@@ -55,7 +78,7 @@ declare_lint! {\n     \"calls to `std::mem::drop` with a value that implements Copy\"\n }\n \n-declare_lint_pass!(DropForgetUseless => [DROP_REF, DROP_COPY]);\n+declare_lint_pass!(DropForgetUseless => [DROP_REF, FORGET_REF, DROP_COPY]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -71,6 +94,9 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => {\n                     cx.emit_spanned_lint(DROP_REF, expr.span, DropRefDiag { arg_ty, note: arg.span });\n                 },\n+                sym::mem_forget if arg_ty.is_ref() => {\n+                    cx.emit_spanned_lint(FORGET_REF, expr.span, ForgetRefDiag { arg_ty, note: arg.span });\n+                },\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n                     cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, note: arg.span });\n                 }"}, {"sha": "2431c3707f5d0b12363457540f521e608c2b48bb", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ef9c163aa37417e7596d884e912ffea1fb40932/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef9c163aa37417e7596d884e912ffea1fb40932/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=1ef9c163aa37417e7596d884e912ffea1fb40932", "patch": "@@ -679,6 +679,14 @@ pub struct DropCopyDiag<'a> {\n     pub note: Span,\n }\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_forget_ref)]\n+pub struct ForgetRefDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[note]\n+    pub note: Span,\n+}\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "13f6d4be3d153b029c56648b09f3a115e439368e", "filename": "tests/ui/lint/forget_ref.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1ef9c163aa37417e7596d884e912ffea1fb40932/tests%2Fui%2Flint%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef9c163aa37417e7596d884e912ffea1fb40932/tests%2Fui%2Flint%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_ref.rs?ref=1ef9c163aa37417e7596d884e912ffea1fb40932", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+#![warn(forget_ref)]\n+\n+use std::mem::forget;\n+\n+struct SomeStruct;\n+\n+fn main() {\n+    forget(&SomeStruct); //~ WARN calls to `std::mem::forget`\n+\n+    let mut owned = SomeStruct;\n+    forget(&owned); //~ WARN calls to `std::mem::forget`\n+    forget(&&owned); //~ WARN calls to `std::mem::forget`\n+    forget(&mut owned); //~ WARN calls to `std::mem::forget`\n+    forget(owned);\n+\n+    let reference1 = &SomeStruct;\n+    forget(&*reference1); //~ WARN calls to `std::mem::forget`\n+\n+    let reference2 = &mut SomeStruct;\n+    forget(reference2); //~ WARN calls to `std::mem::forget`\n+\n+    let ref reference3 = SomeStruct;\n+    forget(reference3); //~ WARN calls to `std::mem::forget`\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_forget<T>(val: T) {\n+    forget(&val); //~ WARN calls to `std::mem::forget`\n+    forget(val);\n+}\n+\n+#[allow(dead_code)]\n+fn test_similarly_named_function() {\n+    fn forget<T>(_val: T) {}\n+    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::forget(&SomeStruct); //~ WARN calls to `std::mem::forget`\n+}"}, {"sha": "abb45443e4e9d17b3adbf1c507ab6b6f640544b4", "filename": "tests/ui/lint/forget_ref.stderr", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/1ef9c163aa37417e7596d884e912ffea1fb40932/tests%2Fui%2Flint%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ef9c163aa37417e7596d884e912ffea1fb40932/tests%2Fui%2Flint%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_ref.stderr?ref=1ef9c163aa37417e7596d884e912ffea1fb40932", "patch": "@@ -0,0 +1,115 @@\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_ref.rs:10:5\n+   |\n+LL |     forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:10:12\n+   |\n+LL |     forget(&SomeStruct);\n+   |            ^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/forget_ref.rs:3:9\n+   |\n+LL | #![warn(forget_ref)]\n+   |         ^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_ref.rs:13:5\n+   |\n+LL |     forget(&owned);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:13:12\n+   |\n+LL |     forget(&owned);\n+   |            ^^^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_ref.rs:14:5\n+   |\n+LL |     forget(&&owned);\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&&SomeStruct`\n+  --> $DIR/forget_ref.rs:14:12\n+   |\n+LL |     forget(&&owned);\n+   |            ^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_ref.rs:15:5\n+   |\n+LL |     forget(&mut owned);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&mut SomeStruct`\n+  --> $DIR/forget_ref.rs:15:12\n+   |\n+LL |     forget(&mut owned);\n+   |            ^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_ref.rs:19:5\n+   |\n+LL |     forget(&*reference1);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:19:12\n+   |\n+LL |     forget(&*reference1);\n+   |            ^^^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_ref.rs:22:5\n+   |\n+LL |     forget(reference2);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&mut SomeStruct`\n+  --> $DIR/forget_ref.rs:22:12\n+   |\n+LL |     forget(reference2);\n+   |            ^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_ref.rs:25:5\n+   |\n+LL |     forget(reference3);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:25:12\n+   |\n+LL |     forget(reference3);\n+   |            ^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_ref.rs:30:5\n+   |\n+LL |     forget(&val);\n+   |     ^^^^^^^^^^^^\n+   |\n+note: argument has type `&T`\n+  --> $DIR/forget_ref.rs:30:12\n+   |\n+LL |     forget(&val);\n+   |            ^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_ref.rs:38:5\n+   |\n+LL |     std::mem::forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:38:22\n+   |\n+LL |     std::mem::forget(&SomeStruct);\n+   |                      ^^^^^^^^^^^\n+\n+warning: 9 warnings emitted\n+"}]}