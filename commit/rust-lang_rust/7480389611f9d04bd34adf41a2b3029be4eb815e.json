{"sha": "7480389611f9d04bd34adf41a2b3029be4eb815e", "node_id": "C_kwDOAAsO6NoAKDc0ODAzODk2MTFmOWQwNGJkMzRhZGY0MWEyYjMwMjliZTRlYjgxNWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-25T18:17:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-25T18:17:42Z"}, "message": "Auto merge of #100911 - tmiasko:update-stdarch, r=Amanieu\n\nUpdate stdarch submodule\n\nChanges from stdarch:\n\n* Fix links in documentation of cmpxchg16b\n* Use load intrinsic and loop for intrinsic-test programs. Add --release flag back to intrinsic-test programs.\n* Properly fix vext intrinsic tests\n* Replace some calls to `pointer::offset` with `add` and `sub`\n* Allow internal use of stdsimd from detect_feature\n* fix target name in contributing.md\n* Tweak constant for ARM vext instruction tests\n* Use `llvm.ppc.altivec.lvx` intrinsic for `vec_ld`\n*  Adding doc links for arm neon intrinsics\n* Adding doc links for arm crypto and aes intrinsics\n* Remove instruction tests for `__mmask*` intrinsics\n* Update ubuntu 21.10 docker containers to 22.04\n* Adding documentation links for arm crc32 intrinsics\n* Remove restrictions on compare-exchange memory ordering.\n* Fix a typo in the document.\n* Allow mapping a runtime feature to a set of target_features\n* Update atomic intrinsics\n* Fully qualify recursive macro calls\n* Ensure the neon vector aggregates like `float32x4x4_t` are `#[repr(C)]`\n* Remove useless conditional compilation\n* Fix ARM vbsl* NEON intrinsics\n\nr? `@Amanieu`", "tree": {"sha": "2e56280a7792b1bb66353028bba8c9a7571cf1ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e56280a7792b1bb66353028bba8c9a7571cf1ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7480389611f9d04bd34adf41a2b3029be4eb815e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7480389611f9d04bd34adf41a2b3029be4eb815e", "html_url": "https://github.com/rust-lang/rust/commit/7480389611f9d04bd34adf41a2b3029be4eb815e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7480389611f9d04bd34adf41a2b3029be4eb815e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d45b0745ab227feb9000bc15713ade4b99241ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d45b0745ab227feb9000bc15713ade4b99241ea", "html_url": "https://github.com/rust-lang/rust/commit/4d45b0745ab227feb9000bc15713ade4b99241ea"}, {"sha": "5f4d23dd143295bc637410b31e29b405806c1622", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4d23dd143295bc637410b31e29b405806c1622", "html_url": "https://github.com/rust-lang/rust/commit/5f4d23dd143295bc637410b31e29b405806c1622"}], "stats": {"total": 38, "additions": 10, "deletions": 28}, "files": [{"sha": "f27ac24fdedd3b12723b0857f46b94cfb224872b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7480389611f9d04bd34adf41a2b3029be4eb815e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7480389611f9d04bd34adf41a2b3029be4eb815e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=7480389611f9d04bd34adf41a2b3029be4eb815e", "patch": "@@ -737,28 +737,7 @@ extern \"rust-intrinsic\" {\n     /// [`atomic::compiler_fence`] by passing [`Ordering::AcqRel`]\n     /// as the `order`.\n     pub fn atomic_singlethreadfence_acqrel();\n-}\n-\n-// These have been renamed.\n-//\n-// These are the aliases for the old names.\n-// To be removed when stdarch and panic_unwind have been updated.\n-mod atomics {\n-    pub use super::atomic_cxchg_acqrel_acquire as atomic_cxchg_acqrel;\n-    pub use super::atomic_cxchg_acqrel_relaxed as atomic_cxchg_acqrel_failrelaxed;\n-    pub use super::atomic_cxchg_acquire_acquire as atomic_cxchg_acq;\n-    pub use super::atomic_cxchg_acquire_relaxed as atomic_cxchg_acq_failrelaxed;\n-    pub use super::atomic_cxchg_relaxed_relaxed as atomic_cxchg_relaxed;\n-    pub use super::atomic_cxchg_release_relaxed as atomic_cxchg_rel;\n-    pub use super::atomic_cxchg_seqcst_acquire as atomic_cxchg_failacq;\n-    pub use super::atomic_cxchg_seqcst_relaxed as atomic_cxchg_failrelaxed;\n-    pub use super::atomic_cxchg_seqcst_seqcst as atomic_cxchg;\n-    pub use super::atomic_store_seqcst as atomic_store;\n-}\n \n-pub use atomics::*;\n-\n-extern \"rust-intrinsic\" {\n     /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n     /// if supported; otherwise, it is a no-op.\n     /// Prefetches have no effect on the behavior of the program but can change its performance"}, {"sha": "b243333c48e5fa091e55430ae879a76d409ef1d4", "filename": "library/panic_unwind/src/seh.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7480389611f9d04bd34adf41a2b3029be4eb815e/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7480389611f9d04bd34adf41a2b3029be4eb815e/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fseh.rs?ref=7480389611f9d04bd34adf41a2b3029be4eb815e", "patch": "@@ -256,7 +256,7 @@ cfg_if::cfg_if! {\n }\n \n pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n-    use core::intrinsics::atomic_store;\n+    use core::intrinsics::atomic_store_seqcst;\n \n     // _CxxThrowException executes entirely on this stack frame, so there's no\n     // need to otherwise transfer `data` to the heap. We just pass a stack\n@@ -288,20 +288,23 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     //\n     // In any case, we basically need to do something like this until we can\n     // express more operations in statics (and we may never be able to).\n-    atomic_store(&mut THROW_INFO.pmfnUnwind as *mut _ as *mut u32, ptr!(exception_cleanup) as u32);\n-    atomic_store(\n+    atomic_store_seqcst(\n+        &mut THROW_INFO.pmfnUnwind as *mut _ as *mut u32,\n+        ptr!(exception_cleanup) as u32,\n+    );\n+    atomic_store_seqcst(\n         &mut THROW_INFO.pCatchableTypeArray as *mut _ as *mut u32,\n         ptr!(&CATCHABLE_TYPE_ARRAY as *const _) as u32,\n     );\n-    atomic_store(\n+    atomic_store_seqcst(\n         &mut CATCHABLE_TYPE_ARRAY.arrayOfCatchableTypes[0] as *mut _ as *mut u32,\n         ptr!(&CATCHABLE_TYPE as *const _) as u32,\n     );\n-    atomic_store(\n+    atomic_store_seqcst(\n         &mut CATCHABLE_TYPE.pType as *mut _ as *mut u32,\n         ptr!(&TYPE_DESCRIPTOR as *const _) as u32,\n     );\n-    atomic_store(\n+    atomic_store_seqcst(\n         &mut CATCHABLE_TYPE.copyFunction as *mut _ as *mut u32,\n         ptr!(exception_copy) as u32,\n     );"}, {"sha": "42df7394d38bc7b945116ea3ad8a7cbcd1db50a9", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=7480389611f9d04bd34adf41a2b3029be4eb815e", "patch": "@@ -1 +1 @@\n-Subproject commit 28335054b1f417175ab5005cf1d9cf7937737930\n+Subproject commit 42df7394d38bc7b945116ea3ad8a7cbcd1db50a9"}]}