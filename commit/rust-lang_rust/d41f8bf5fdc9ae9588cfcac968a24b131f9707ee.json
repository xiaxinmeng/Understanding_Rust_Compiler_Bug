{"sha": "d41f8bf5fdc9ae9588cfcac968a24b131f9707ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MWY4YmY1ZmRjOWFlOTU4OGNmY2FjOTY4YTI0YjEzMWY5NzA3ZWU=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-16T15:09:42Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-16T15:09:42Z"}, "message": "Move the explanation why adjust_global_const is called for all constants.", "tree": {"sha": "22ceac0ed8bd86af055e96321d868071e49bebbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22ceac0ed8bd86af055e96321d868071e49bebbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d41f8bf5fdc9ae9588cfcac968a24b131f9707ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d41f8bf5fdc9ae9588cfcac968a24b131f9707ee", "html_url": "https://github.com/rust-lang/rust/commit/d41f8bf5fdc9ae9588cfcac968a24b131f9707ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d41f8bf5fdc9ae9588cfcac968a24b131f9707ee/comments", "author": null, "committer": null, "parents": [{"sha": "844eead57e346444a9182e5e2eee3d41ff0dca3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/844eead57e346444a9182e5e2eee3d41ff0dca3f", "html_url": "https://github.com/rust-lang/rust/commit/844eead57e346444a9182e5e2eee3d41ff0dca3f"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "678a81bc534fcfb9f3b9ae77eb7fba2aefae027e", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d41f8bf5fdc9ae9588cfcac968a24b131f9707ee/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41f8bf5fdc9ae9588cfcac968a24b131f9707ee/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=d41f8bf5fdc9ae9588cfcac968a24b131f9707ee", "patch": "@@ -528,6 +528,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // potentially requiring the current static to be evaluated again. This is not a\n                 // problem here, because we are building an operand which means an actual read is\n                 // happening.\n+                //\n+                // The machine callback `adjust_global_const` below is guaranteed to\n+                // be called for all constants because `const_eval` calls\n+                // `eval_const_to_op` recursively.\n                 return Ok(self.const_eval(GlobalId { instance, promoted }, val.ty)?);\n             }\n             ty::ConstKind::Infer(..)\n@@ -539,9 +543,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         // This call allows the machine to create fresh allocation ids for\n         // thread-local statics (see the `adjust_global_const` function\n-        // documentation). Please note that the `const_eval` call in the early\n-        // return above calls `eval_const_to_op` again, so `adjust_global_const`\n-        // is guaranteed to be called for all constants.\n+        // documentation).\n         let val_val = M::adjust_global_const(self, val_val)?;\n         // Other cases need layout.\n         let layout = from_known_layout(self.tcx, layout, || self.layout_of(val.ty))?;"}]}