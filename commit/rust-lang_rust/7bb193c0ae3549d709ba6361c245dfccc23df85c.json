{"sha": "7bb193c0ae3549d709ba6361c245dfccc23df85c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYjE5M2MwYWUzNTQ5ZDcwOWJhNjM2MWMyNDVkZmNjYzIzZGY4NWM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-05T08:45:38Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-05T08:45:38Z"}, "message": "Fixes as per @brson's review", "tree": {"sha": "fcb0db11434b78b63a5c83d732a64f5947620e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcb0db11434b78b63a5c83d732a64f5947620e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bb193c0ae3549d709ba6361c245dfccc23df85c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb193c0ae3549d709ba6361c245dfccc23df85c", "html_url": "https://github.com/rust-lang/rust/commit/7bb193c0ae3549d709ba6361c245dfccc23df85c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bb193c0ae3549d709ba6361c245dfccc23df85c/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f4fbb2bf5bceb2816925789c7d9534debbcd2b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0", "html_url": "https://github.com/rust-lang/rust/commit/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "5b1040dd05ee19dbc0b9c267cfaa91e8b28a04b6", "filename": "src/doc/trpl/getting-started.md", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7bb193c0ae3549d709ba6361c245dfccc23df85c/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/7bb193c0ae3549d709ba6361c245dfccc23df85c/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgetting-started.md?ref=7bb193c0ae3549d709ba6361c245dfccc23df85c", "patch": "@@ -7,7 +7,7 @@ we\u2019ll talk about Cargo, Rust\u2019s build system and package manager.\n # Installing Rust\n \n The first step to using Rust is to install it. Generally speaking, you\u2019ll need\n-an internet connection to run the commands in this chapter, as we\u2019ll be\n+an Internet connection to run the commands in this chapter, as we\u2019ll be\n downloading Rust from the internet.\n \n We\u2019ll be showing off a number of commands using a terminal, and those lines all\n@@ -108,7 +108,7 @@ tier 3 platforms that will ever be!\n If we're on Linux or a Mac, all we need to do is open a terminal and type this:\n \n ```bash\n-$ curl -sf -L https://static.rust-lang.org/rustup.sh | sh\n+$ curl -sSf https://static.rust-lang.org/rustup.sh | sh\n ```\n \n This will download a script, and stat the installation. If it all goes well,\n@@ -140,8 +140,7 @@ If you're on Windows, please download the appropriate [installer][install-page].\n \n ## Uninstalling\n \n-If you ever need to uninstall Rust for any reason, refer to this section to\n-find out how. It's actually as easy as installing. On Linux or Mac, just run\n+Uninstalling Rust is as easy as installing it. On Linux or Mac, just run\n the uninstall script:\n \n ```bash\n@@ -163,11 +162,6 @@ You should see the version number, commit hash, and commit date.\n \n If you do, Rust has been installed successfully! Congrats!\n \n-This installer also installs a copy of the documentation locally, so we can\n-read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n-On Windows, it's in a `share/doc` directory, inside the directory to which Rust\n-was installed.\n-\n If you don't and you're on Windows, check that Rust is in your %PATH% system\n variable. If it isn't, run the installer again, select \"Change\" on the \"Change,\n repair, or remove installation\" page and ensure \"Add to PATH\" is installed on\n@@ -184,6 +178,11 @@ include [the user\u2019s forum][users], and [Stack Overflow][stackoverflow].\n [users]: https://users.rust-lang.org/\n [stackoverflow]: http://stackoverflow.com/questions/tagged/rust\n \n+This installer also installs a copy of the documentation locally, so we can\n+read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n+On Windows, it's in a `share/doc` directory, inside the directory to which Rust\n+was installed.\n+\n # Hello, world!\n \n Now that you have Rust installed, we'll help you write your first Rust program.\n@@ -227,7 +226,7 @@ $ cd hello_world\n \n ## Writing and Running a Rust Program\n \n-Next, make a new source file next and call it *main.rs*. Rust files always end\n+Next, make a new source file and call it *main.rs*. Rust files always end\n in a *.rs* extension. If you\u2019re using more than one word in your filename, use\n an underscore to separate them; for example, you'd use *hello_world.rs* rather\n than *helloworld.rs*.\n@@ -266,28 +265,26 @@ fn main() {\n ```\n \n These lines define a *function* in Rust. The `main` function is special: it's\n-the beginning of every Rust program. The first line says, \"I\u2019m declaring a\n-function named `main` that currently takes no arguments and returns nothing.\"\n-If there were arguments, they would go inside the parentheses (`(` and `)`),\n-and because we aren\u2019t returning anything from this function, we can omit the\n-return type entirely.\n+the beginning of every Rust program. The first line says, \u201cI\u2019m declaring a\n+function named `main` that takes no arguments and returns nothing.\u201d If there\n+were arguments, they would go inside the parentheses (`(` and `)`), and because\n+we aren\u2019t returning anything from this function, we can omit the return type\n+entirely.\n \n Also note that the function body is wrapped in curly braces (`{` and `}`). Rust\n requires these around all function bodies. It's considered good style to put\n the opening curly brace on the same line as the function declaration, with one\n space in between.\n \n-Inside the `main()` function, is this line:\n+Inside the `main()` function:\n \n ```rust\n     println!(\"Hello, world!\");\n ```\n \n This line does all of the work in this little program: it prints text to the\n screen. There are a number of details that are important here. The first is\n-that it\u2019s indented with four spaces, not tabs. If you configure your editor of\n-choice to insert four spaces with the tab key, it will make your coding much\n-more efficient.\n+that it\u2019s indented with four spaces, not tabs.\n  \n The second important part is the `println!()` line. This is calling a Rust\n *[macro]*, which is how metaprogramming is done in Rust. If it were calling a\n@@ -304,7 +301,7 @@ complicated topic in a systems programming language, and this is a *[statically\n allocated]* string. We pass this string as an argument to `println!`, which\n prints the string to the screen. Easy enough!\n \n-[allocation]: the-stack-and-the-heap.html\n+[statically allocated]: the-stack-and-the-heap.html\n \n The line ends with a semicolon (`;`). Rust is an *[expression oriented]*\n language, which means that most things are expressions, rather than statements.\n@@ -343,7 +340,7 @@ $ dir\n main.exe  main.rs\n ```\n \n-This would create two files: the source code, with a `.rs` extension, and the\n+This shows we have two files: the source code, with an `.rs` extension, and the\n executable (`main.exe` on Windows, `main` everywhere else). All that's left to\n do from here is run the `main` or `main.exe` file, like this:\n \n@@ -361,7 +358,7 @@ give it to someone else, and they can run it even without Rust installed. If\n you give someone a `.rb` or `.py` or `.js` file, on the other hand, they need\n to have a Ruby, Python, or JavaScript implementation installed (respectively),\n but you only need one command to both compile and run your program. Everything\n-is a tradeoff in language design, and Rust has made its choice.\n+is a tradeoff in language design.\n \n Just compiling with `rustc` is fine for simple programs, but as your project\n grows, you'll want to be able to manage all of the options your project has,\n@@ -374,7 +371,7 @@ programs.\n Cargo is Rust\u2019s build system and package manager, and Rustaceans use Cargo to\n manage their Rust projects. Cargo manages three things: building your code,\n downloading the libraries your code depends on, and building those libraries.\n-We call libraries your code needs \u2018dependencies\u2019, since your code depends on\n+We call libraries your code needs \u2018dependencies\u2019 since your code depends on\n them.\n \n The simplest Rust programs don\u2019t have any dependencies, so right now, you'd\n@@ -442,9 +439,8 @@ Make sure to capitalize the `C` in `Cargo.toml`, or Cargo won't know what to do\n with the configuration file. \n \n This file is in the *[TOML]* (Tom's Obvious, Minimal Language) format. TOML is\n-similar to INI, but has some extra goodies. According to the TOML docs, TOML\n-\u201caims to be a minimal configuration file format that's easy to read\u201d, and so we\n-chose it as the format Cargo uses.\n+similar to INI, but has some extra goodies, and is used as Cargo\u2019s\n+configuration format.\n \n [TOML]: https://github.com/toml-lang/toml\n \n@@ -494,9 +490,9 @@ Hello, world!\n ```\n \n Notice that this example didn\u2019t re-build the project. Cargo figured out that\n-the hasn\u2019t changed, and so it just ran the binary. If you'd modified your\n-program, Cargo would have built the file before running it, and you would have\n-seen something like this:\n+the file hasn\u2019t changed, and so it just ran the binary. If you'd modified your\n+source code, Cargo would have rebuilt the project before running it, and you\n+would have seen something like this:\n \n ```bash\n $ cargo run\n@@ -509,9 +505,9 @@ Cargo checks to see if any of your project\u2019s files have been modified, and onl\n rebuilds your project if they\u2019ve changed since the last time you built it.\n \n With simple projects, Cargo doesn't bring a whole lot over just using `rustc`,\n-but it will become useful in future. When your projects get more complex,\n-you'll need to do more things to get all of the parts to properly compile. With\n-Cargo, you can just run `cargo build`, and it should work the right way.\n+but it will become useful in future. With complex projects composed of multiple\n+crates, it\u2019s much easier to let Cargo coordinate the build. With Cargo, you can\n+just run `cargo build`, and it should work the right way.\n \n ## Building for Release\n "}]}