{"sha": "67696be160cc35ba5e54086a42225d9c1f81b275", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3Njk2YmUxNjBjYzM1YmE1ZTU0MDg2YTQyMjI1ZDljMWY4MWIyNzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-28T21:42:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-29T01:06:30Z"}, "message": "Point only at method signatures and point at trait\n\n - On mismatch between impl and trait method, point at the trait\n   signature.\n - Point only at the method signature instead of the whole body on\n   trait/impl mismatch errors.", "tree": {"sha": "99bca6fc3e50d98a5301d3c81d519c43342912f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99bca6fc3e50d98a5301d3c81d519c43342912f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67696be160cc35ba5e54086a42225d9c1f81b275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67696be160cc35ba5e54086a42225d9c1f81b275", "html_url": "https://github.com/rust-lang/rust/commit/67696be160cc35ba5e54086a42225d9c1f81b275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67696be160cc35ba5e54086a42225d9c1f81b275/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c026997bf1696ee64313135b82dfba3b0857805", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c026997bf1696ee64313135b82dfba3b0857805", "html_url": "https://github.com/rust-lang/rust/commit/6c026997bf1696ee64313135b82dfba3b0857805"}], "stats": {"total": 163, "additions": 75, "deletions": 88}, "files": [{"sha": "6a4f6ad0e1961a4bbc3606bbaf98b1f48bda6e27", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -807,7 +807,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let span = cause.span;\n+        let span = cause.span(&self.tcx);\n \n         diag.span_label(span, terr.to_string());\n         if let Some((sp, msg)) = secondary_span {\n@@ -842,7 +842,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     \"did you mean `{}(/* fields */)`?\",\n                                     self.tcx.item_path_str(def_id)\n                                 );\n-                                diag.span_label(cause.span, message);\n+                                diag.span_label(span, message);\n                             }\n                         }\n                     }\n@@ -870,7 +870,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                trace,\n                terr);\n \n-        let span = trace.cause.span;\n+        let span = trace.cause.span(&self.tcx);\n         let failure_code = trace.cause.as_failure_code(terr);\n         let mut diag = match failure_code {\n             FailureCode::Error0317(failure_str) => {"}, {"sha": "0616dda228e681b44a1865f97737adea9644bdfc", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -100,6 +100,19 @@ pub struct ObligationCause<'tcx> {\n     pub code: ObligationCauseCode<'tcx>\n }\n \n+impl<'tcx> ObligationCause<'tcx> {\n+    pub fn span<'a, 'gcx>(&self, tcx: &TyCtxt<'a, 'gcx, 'tcx>) -> Span {\n+        match self.code {\n+            ObligationCauseCode::CompareImplMethodObligation { .. } |\n+            ObligationCauseCode::MainFunctionType |\n+            ObligationCauseCode::StartFunctionType => {\n+                tcx.sess.codemap().def_span(self.span)\n+            }\n+            _ => self.span,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum ObligationCauseCode<'tcx> {\n     /// Not well classified or should be obvious from span."}, {"sha": "4c10f28eb8e5de23d9987a82c087f716adf4f92c", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -40,6 +40,8 @@ pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"compare_impl_method(impl_trait_ref={:?})\",\n            impl_trait_ref);\n \n+    let impl_m_span = tcx.sess.codemap().def_span(impl_m_span);\n+\n     if let Err(ErrorReported) = compare_self_type(tcx,\n                                                   impl_m,\n                                                   impl_m_span,\n@@ -186,6 +188,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     check_region_bounds_on_impl_method(tcx,\n                                        impl_m_span,\n                                        impl_m,\n+                                       trait_m,\n                                        &trait_m_generics,\n                                        &impl_m_generics,\n                                        trait_to_skol_substs)?;\n@@ -310,7 +313,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             };\n \n             let mut diag = struct_span_err!(tcx.sess,\n-                                            cause.span,\n+                                            cause.span(&tcx),\n                                             E0053,\n                                             \"method `{}` has an incompatible type for trait\",\n                                             trait_m.name);\n@@ -346,10 +349,12 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 span: Span,\n                                                 impl_m: &ty::AssociatedItem,\n+                                                trait_m: &ty::AssociatedItem,\n                                                 trait_generics: &ty::Generics,\n                                                 impl_generics: &ty::Generics,\n                                                 trait_to_skol_substs: &Substs<'tcx>)\n                                                 -> Result<(), ErrorReported> {\n+    let span = tcx.sess.codemap().def_span(span);\n     let trait_params = &trait_generics.regions[..];\n     let impl_params = &impl_generics.regions[..];\n \n@@ -371,14 +376,18 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // are zero. Since I don't quite know how to phrase things at\n     // the moment, give a kind of vague error message.\n     if trait_params.len() != impl_params.len() {\n-        struct_span_err!(tcx.sess,\n-                         span,\n-                         E0195,\n-                         \"lifetime parameters or bounds on method `{}` do not match the \\\n-                          trait declaration\",\n-                         impl_m.name)\n-            .span_label(span, \"lifetimes do not match trait\")\n-            .emit();\n+        let mut err = struct_span_err!(tcx.sess,\n+                                       span,\n+                                       E0195,\n+                                       \"lifetime parameters or bounds on method `{}` do not match \\\n+                                        the trait declaration\",\n+                                       impl_m.name);\n+        err.span_label(span, \"lifetimes do not match method in trait\");\n+        if let Some(sp) = tcx.hir.span_if_local(trait_m.def_id) {\n+            err.span_label(tcx.sess.codemap().def_span(sp),\n+                           \"lifetimes in impl do not match this method in trait\");\n+        }\n+        err.emit();\n         return Err(ErrorReported);\n     }\n \n@@ -424,9 +433,9 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n                 }).map(|(ref impl_arg, ref trait_arg)| {\n                     (impl_arg.span, Some(trait_arg.span))\n                 })\n-                .unwrap_or_else(|| (cause.span, tcx.hir.span_if_local(trait_m.def_id)))\n+                .unwrap_or_else(|| (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id)))\n             } else {\n-                (cause.span, tcx.hir.span_if_local(trait_m.def_id))\n+                (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id))\n             }\n         }\n         TypeError::Sorts(ExpectedFound { .. }) => {\n@@ -459,14 +468,14 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n                              {\n                                  (impl_m_output.span(), Some(trait_m_output.span()))\n                              } else {\n-                                 (cause.span, tcx.hir.span_if_local(trait_m.def_id))\n+                                 (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id))\n                              }\n                          })\n             } else {\n-                (cause.span, tcx.hir.span_if_local(trait_m.def_id))\n+                (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id))\n             }\n         }\n-        _ => (cause.span, tcx.hir.span_if_local(trait_m.def_id)),\n+        _ => (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id)),\n     }\n }\n "}, {"sha": "4f4d7ce0dba839126787a7c1f798a5a6d8c51bff", "filename": "src/test/compile-fail/E0195.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fcompile-fail%2FE0195.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fcompile-fail%2FE0195.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0195.rs?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -10,13 +10,14 @@\n \n trait Trait {\n     fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n+    //~^ NOTE lifetimes in impl do not match this method in trait\n }\n \n struct Foo;\n \n impl Trait for Foo {\n     fn bar<'a,'b>(x: &'a str, y: &'b str) { //~ ERROR E0195\n-                                            //~^ lifetimes do not match trait\n+    //~^ NOTE lifetimes do not match method in trait\n     }\n }\n "}, {"sha": "cda83fe54b09ab527acdca32c31a484d28327565", "filename": "src/test/compile-fail/issue-16048.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -10,6 +10,7 @@\n \n trait NoLifetime {\n     fn get<'p, T : Test<'p>>(&self) -> T;\n+    //~^ NOTE lifetimes in impl do not match this method in trait\n }\n \n trait Test<'p> {\n@@ -28,8 +29,8 @@ impl<'a> Test<'a> for Foo<'a> {\n \n impl<'a> NoLifetime for Foo<'a> {\n     fn get<'p, T : Test<'a>>(&self) -> T {\n-//~^ ERROR E0195\n-//~| lifetimes do not match trait\n+    //~^ ERROR E0195\n+    //~| NOTE lifetimes do not match method in trait\n         return *self as T;\n     }\n }"}, {"sha": "ab0e1003a9e10d76dad53b835907c202538eef02", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -9,11 +9,8 @@ error[E0308]: mismatched types\n note: the lifetime 'a as defined on the impl at 17:1...\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:17:1\n    |\n-17 | / impl<'a> Foo for &'a () {\n-18 | |     const NAME: &'a str = \"unit\";\n-19 | |     //~^ ERROR mismatched types [E0308]\n-20 | | }\n-   | |_^\n+17 | impl<'a> Foo for &'a () {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to previous error"}, {"sha": "e8323247af9971b68b132a43788993c12e973698", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -1,30 +1,26 @@\n error[E0195]: lifetime parameters or bounds on method `no_bound` do not match the trait declaration\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:28:5\n    |\n-28 | /     fn no_bound<'b:'a>(self, b: Inv<'b>) {\n-29 | |         //~^ ERROR lifetime parameters or bounds on method `no_bound` do not match\n-30 | |     }\n-   | |_____^ lifetimes do not match trait\n+20 |     fn no_bound<'b>(self, b: Inv<'b>);\n+   |     ---------------------------------- lifetimes in impl do not match this method in trait\n+...\n+28 |     fn no_bound<'b:'a>(self, b: Inv<'b>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n \n error[E0195]: lifetime parameters or bounds on method `has_bound` do not match the trait declaration\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:32:5\n    |\n-32 | /     fn has_bound<'b>(self, b: Inv<'b>) {\n-33 | |         //~^ ERROR lifetime parameters or bounds on method `has_bound` do not match\n-34 | |     }\n-   | |_____^ lifetimes do not match trait\n+21 |     fn has_bound<'b:'a>(self, b: Inv<'b>);\n+   |     -------------------------------------- lifetimes in impl do not match this method in trait\n+...\n+32 |     fn has_bound<'b>(self, b: Inv<'b>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n \n error[E0308]: method not compatible with trait\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n    |\n-36 | /     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n-37 | |         //~^ ERROR method not compatible with trait\n-38 | |         //\n-39 | |         // Note: This is a terrible error message. It is caused\n-...  |\n-47 | |         // cases.\n-48 | |     }\n-   | |_____^ lifetime mismatch\n+36 |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n               found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`"}, {"sha": "1417c71ca1244d3a605722497b42baf3334cacf1", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -2,7 +2,7 @@ error[E0053]: method `fmt` has an incompatible type for trait\n   --> $DIR/trait_type.rs:17:4\n    |\n 17 |    fn fmt(&self, x: &str) -> () { }\n-   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n+   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n    |\n    = note: expected type `fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n               found type `fn(&MyType, &str)`\n@@ -19,7 +19,7 @@ error[E0186]: method `fmt` has a `&self` declaration in the trait, but not in th\n   --> $DIR/trait_type.rs:27:4\n    |\n 27 |    fn fmt() -> () { }\n-   |    ^^^^^^^^^^^^^^^^^^ expected `&self` in impl\n+   |    ^^^^^^^^^^^^^^ expected `&self` in impl\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n "}, {"sha": "7aab31eb909d0cc480afad4b2243088cea5c8c9a", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -3,10 +3,8 @@ error[E0601]: main function not found\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n   --> $DIR/mismatched_trait_impl-2.rs:18:5\n    |\n-18 | /     fn deref(&self) -> &Trait {\n-19 | |         unimplemented!();\n-20 | |     }\n-   | |_____^\n+18 |     fn deref(&self) -> &Trait {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 18:5...\n   --> $DIR/mismatched_trait_impl-2.rs:18:5"}, {"sha": "fd6be01da9f460a44c7066dbcbfd2724ce00980f", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -1,10 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-20 | |         x\n-21 | |     }\n-   | |_____^\n+19 |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 19:5...\n   --> $DIR/mismatched_trait_impl.rs:19:5"}, {"sha": "b24544743d87da84c5e64e6432854df272775864", "filename": "src/test/ui/issue-27942.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27942.stderr?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -14,14 +14,8 @@ note: the anonymous lifetime #1 defined on the method body at 15:5...\n note: ...does not necessarily outlive the lifetime 'a as defined on the trait at 13:1\n   --> $DIR/issue-27942.rs:13:1\n    |\n-13 | / pub trait Buffer<'a, R: Resources<'a>> {\n-14 | |\n-15 | |     fn select(&self) -> BufferViewHandle<R>;\n-16 | |     //~^ ERROR mismatched types\n-...  |\n-19 | |     //~| lifetime mismatch\n-20 | | }\n-   | |_^\n+13 | pub trait Buffer<'a, R: Resources<'a>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27942.rs:15:5\n@@ -34,14 +28,8 @@ error[E0308]: mismatched types\n note: the lifetime 'a as defined on the trait at 13:1...\n   --> $DIR/issue-27942.rs:13:1\n    |\n-13 | / pub trait Buffer<'a, R: Resources<'a>> {\n-14 | |\n-15 | |     fn select(&self) -> BufferViewHandle<R>;\n-16 | |     //~^ ERROR mismatched types\n-...  |\n-19 | |     //~| lifetime mismatch\n-20 | | }\n-   | |_^\n+13 | pub trait Buffer<'a, R: Resources<'a>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 15:5\n   --> $DIR/issue-27942.rs:15:5\n    |"}, {"sha": "c4ad232ae7eba6f5b11af4182801ea27da2af831", "filename": "src/test/ui/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37884.stderr?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -24,14 +24,8 @@ note: the anonymous lifetime #1 defined on the method body at 16:5...\n note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 13:1\n   --> $DIR/issue-37884.rs:13:1\n    |\n-13 | / impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n-14 | |\n-15 | |     type Item = &'a mut T;\n-16 | |     fn next(&'a mut self) -> Option<Self::Item>\n-...  |\n-21 | |     }\n-22 | | }\n-   | |_^\n+13 | impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "38ed7c600862247a2f9ee857083f2d7e708a03ae", "filename": "src/test/ui/issue-46472.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46472.stderr?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -10,12 +10,8 @@ error[E0597]: borrowed value does not live long enough (Ast)\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n   --> $DIR/issue-46472.rs:13:1\n    |\n-13 | / fn bar<'a>() -> &'a mut u32 {\n-14 | |     &mut 4\n-15 | |     //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n-16 | |     //~| ERROR borrowed value does not live long enough (Mir) [E0597]\n-17 | | }\n-   | |_^\n+13 | fn bar<'a>() -> &'a mut u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0597]: borrowed value does not live long enough (Mir)\n   --> $DIR/issue-46472.rs:14:10\n@@ -29,12 +25,8 @@ error[E0597]: borrowed value does not live long enough (Mir)\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n   --> $DIR/issue-46472.rs:13:1\n    |\n-13 | / fn bar<'a>() -> &'a mut u32 {\n-14 | |     &mut 4\n-15 | |     //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n-16 | |     //~| ERROR borrowed value does not live long enough (Mir) [E0597]\n-17 | | }\n-   | |_^\n+13 | fn bar<'a>() -> &'a mut u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "24ba27b27ad368623eab3eeaa7398348fa4c6589", "filename": "src/test/ui/static-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fstatic-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67696be160cc35ba5e54086a42225d9c1f81b275/src%2Ftest%2Fui%2Fstatic-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic-lifetime.stderr?ref=67696be160cc35ba5e54086a42225d9c1f81b275", "patch": "@@ -8,7 +8,7 @@ note: lifetime parameter instantiated with the lifetime 'a as defined on the imp\n   --> $DIR/static-lifetime.rs:13:1\n    |\n 13 | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {} //~ ERROR lifetime bound\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but lifetime parameter must outlive the static lifetime\n \n error: aborting due to previous error"}]}