{"sha": "be993beb0b0294c6ce4519bf007f73063187809e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOTkzYmViMGIwMjk0YzZjZTQ1MTliZjAwN2Y3MzA2MzE4NzgwOWU=", "commit": {"author": {"name": "Thomas Etter", "email": "thomas.etter@auterion.com", "date": "2019-11-17T23:51:18Z"}, "committer": {"name": "Thomas Etter", "email": "thomas.etter@auterion.com", "date": "2019-11-17T23:51:18Z"}, "message": "print a more useful error message on should_panic mismatch", "tree": {"sha": "c1649cba1eeac08a26c0d6b2de516b1efa7a2b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1649cba1eeac08a26c0d6b2de516b1efa7a2b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be993beb0b0294c6ce4519bf007f73063187809e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be993beb0b0294c6ce4519bf007f73063187809e", "html_url": "https://github.com/rust-lang/rust/commit/be993beb0b0294c6ce4519bf007f73063187809e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be993beb0b0294c6ce4519bf007f73063187809e/comments", "author": null, "committer": null, "parents": [{"sha": "0f0c640e0ee5a9ad365e78e3c62239b3d65b7045", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0c640e0ee5a9ad365e78e3c62239b3d65b7045", "html_url": "https://github.com/rust-lang/rust/commit/0f0c640e0ee5a9ad365e78e3c62239b3d65b7045"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "5dbbd71554e984bcf9b6c11ebe311f6deaf669e5", "filename": "src/libtest/test_result.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/be993beb0b0294c6ce4519bf007f73063187809e/src%2Flibtest%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be993beb0b0294c6ce4519bf007f73063187809e/src%2Flibtest%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftest_result.rs?ref=be993beb0b0294c6ce4519bf007f73063187809e", "patch": "@@ -37,10 +37,12 @@ pub fn calc_result<'a>(\n     let result = match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) | (&ShouldPanic::Yes, Err(_)) => TestResult::TrOk,\n         (&ShouldPanic::YesWithMessage(msg), Err(ref err)) => {\n-            if err\n+            let maybe_panic_str = err\n                 .downcast_ref::<String>()\n                 .map(|e| &**e)\n-                .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n+                .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e));\n+\n+            if maybe_panic_str\n                 .map(|e| e.contains(msg))\n                 .unwrap_or(false)\n             {\n@@ -49,9 +51,19 @@ pub fn calc_result<'a>(\n                 if desc.allow_fail {\n                     TestResult::TrAllowedFail\n                 } else {\n-                    TestResult::TrFailedMsg(\n-                        format!(\"panic did not include expected string '{}'\", msg)\n-                    )\n+                    if let Some(panic_str) = maybe_panic_str{\n+                        TestResult::TrFailedMsg(\n+                            format!(r#\"panic did not contain expected string\n+      panic message: `{:?}`,\n+ expected substring: `{:?}`\"#, panic_str, &*msg)\n+                        )\n+                    } else {\n+                        TestResult::TrFailedMsg(\n+                            format!(r#\"expected panic with string value,\n+ found non-string value: `{:?}`\n+     expected substring: `{:?}`\"#, (**err).type_id(), &*msg)\n+                        )\n+                    }\n                 }\n             }\n         }"}, {"sha": "fc82bb4f47a4b5896e407099e0f86d2d14cbebd4", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/be993beb0b0294c6ce4519bf007f73063187809e/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be993beb0b0294c6ce4519bf007f73063187809e/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=be993beb0b0294c6ce4519bf007f73063187809e", "patch": "@@ -15,6 +15,7 @@ use crate::{\n         // TestType, TrFailedMsg, TrIgnored, TrOk,\n     },\n };\n+use std::any::TypeId;\n use std::sync::mpsc::channel;\n use std::time::Duration;\n \n@@ -161,7 +162,9 @@ fn test_should_panic_bad_message() {\n         panic!(\"an error message\");\n     }\n     let expected = \"foobar\";\n-    let failed_msg = \"panic did not include expected string\";\n+    let failed_msg = r#\"panic did not contain expected string\n+      panic message: `\"an error message\"`,\n+ expected substring: `\"foobar\"`\"#;\n     let desc = TestDescAndFn {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n@@ -175,7 +178,35 @@ fn test_should_panic_bad_message() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrFailedMsg(format!(\"{} '{}'\", failed_msg, expected)));\n+    assert_eq!(result, TrFailedMsg(failed_msg.to_string()));\n+}\n+\n+// FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n+#[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n+fn test_should_panic_non_string_message_type() {\n+    use crate::tests::TrFailedMsg;\n+    fn f() {\n+        panic!(1i32);\n+    }\n+    let expected = \"foobar\";\n+    let failed_msg = format!(r#\"expected panic with string value,\n+ found non-string value: `{:?}`\n+     expected substring: `\"foobar\"`\"#, TypeId::of::<i32>());\n+    let desc = TestDescAndFn {\n+        desc: TestDesc {\n+            name: StaticTestName(\"whatever\"),\n+            ignore: false,\n+            should_panic: ShouldPanic::YesWithMessage(expected),\n+            allow_fail: false,\n+            test_type: TestType::Unknown,\n+        },\n+        testfn: DynTestFn(Box::new(f)),\n+    };\n+    let (tx, rx) = channel();\n+    run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    let result = rx.recv().unwrap().result;\n+    assert_eq!(result, TrFailedMsg(failed_msg));\n }\n \n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)"}]}