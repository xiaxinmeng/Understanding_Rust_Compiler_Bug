{"sha": "e78dd6d781e6cb1f032c10336557c10ecc5d9372", "node_id": "C_kwDOAAsO6NoAKGU3OGRkNmQ3ODFlNmNiMWYwMzJjMTAzMzY1NTdjMTBlY2M1ZDkzNzI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-29T20:03:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T14:23:00Z"}, "message": "Simplify LintLevelsProvider.", "tree": {"sha": "1ec8d8b654d5433c0fd0759ee4ef337fcc30c5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec8d8b654d5433c0fd0759ee4ef337fcc30c5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e78dd6d781e6cb1f032c10336557c10ecc5d9372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e78dd6d781e6cb1f032c10336557c10ecc5d9372", "html_url": "https://github.com/rust-lang/rust/commit/e78dd6d781e6cb1f032c10336557c10ecc5d9372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e78dd6d781e6cb1f032c10336557c10ecc5d9372/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d08669c4fa51a864a46438c2e4bc9047931e1033", "url": "https://api.github.com/repos/rust-lang/rust/commits/d08669c4fa51a864a46438c2e4bc9047931e1033", "html_url": "https://github.com/rust-lang/rust/commit/d08669c4fa51a864a46438c2e4bc9047931e1033"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "ab566b3dd02fe9d8391fefe7a7fe3c1692c2a7eb", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e78dd6d781e6cb1f032c10336557c10ecc5d9372/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78dd6d781e6cb1f032c10336557c10ecc5d9372/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=e78dd6d781e6cb1f032c10336557c10ecc5d9372", "patch": "@@ -174,7 +174,7 @@ pub struct TopDown {\n \n pub trait LintLevelsProvider {\n     fn current_specs(&self) -> &FxHashMap<LintId, LevelAndSource>;\n-    fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource>;\n+    fn insert(&mut self, id: LintId, lvl: LevelAndSource);\n     fn get_lint_level(&self, lint: &'static Lint, sess: &Session) -> LevelAndSource;\n     fn push_expectation(&mut self, _id: LintExpectationId, _expectation: LintExpectation) {}\n }\n@@ -184,8 +184,8 @@ impl LintLevelsProvider for TopDown {\n         &self.sets.list[self.cur].specs\n     }\n \n-    fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource> {\n-        &mut self.sets.list[self.cur].specs\n+    fn insert(&mut self, id: LintId, lvl: LevelAndSource) {\n+        self.sets.list[self.cur].specs.insert(id, lvl);\n     }\n \n     fn get_lint_level(&self, lint: &'static Lint, sess: &Session) -> LevelAndSource {\n@@ -205,8 +205,8 @@ impl LintLevelsProvider for LintLevelQueryMap<'_> {\n     fn current_specs(&self) -> &FxHashMap<LintId, LevelAndSource> {\n         self.specs.specs.get(&self.cur.local_id).unwrap_or(&self.empty)\n     }\n-    fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource> {\n-        self.specs.specs.get_mut_or_insert_default(self.cur.local_id)\n+    fn insert(&mut self, id: LintId, lvl: LevelAndSource) {\n+        self.specs.specs.get_mut_or_insert_default(self.cur.local_id).insert(id, lvl);\n     }\n     fn get_lint_level(&self, lint: &'static Lint, _: &Session) -> LevelAndSource {\n         self.specs.lint_level_id_at_node(self.tcx, LintId::of(lint), self.cur)\n@@ -227,10 +227,10 @@ impl LintLevelsProvider for QueryMapExpectationsWrapper<'_> {\n     fn current_specs(&self) -> &FxHashMap<LintId, LevelAndSource> {\n         self.specs.specs.get(&self.cur.local_id).unwrap_or(&self.empty)\n     }\n-    fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource> {\n+    fn insert(&mut self, id: LintId, lvl: LevelAndSource) {\n         let specs = self.specs.specs.get_mut_or_insert_default(self.cur.local_id);\n         specs.clear();\n-        specs\n+        specs.insert(id, lvl);\n     }\n     fn get_lint_level(&self, lint: &'static Lint, _: &Session) -> LevelAndSource {\n         self.specs.lint_level_id_at_node(self.tcx, LintId::of(lint), self.cur)\n@@ -487,8 +487,8 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n         self.provider.current_specs()\n     }\n \n-    fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource> {\n-        self.provider.current_specs_mut()\n+    fn insert(&mut self, id: LintId, lvl: LevelAndSource) {\n+        self.provider.insert(id, lvl)\n     }\n \n     fn add_command_line(&mut self) {\n@@ -511,7 +511,7 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n \n                 if self.check_gated_lint(id, DUMMY_SP) {\n                     let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n-                    self.current_specs_mut().insert(id, (level, src));\n+                    self.insert(id, (level, src));\n                 }\n             }\n         }\n@@ -625,23 +625,21 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n \n         match (old_level, level) {\n             // If the new level is an expectation store it in `ForceWarn`\n-            (Level::ForceWarn(_), Level::Expect(expectation_id)) => self\n-                .current_specs_mut()\n-                .insert(id, (Level::ForceWarn(Some(expectation_id)), old_src)),\n-            // Keep `ForceWarn` level but drop the expectation\n-            (Level::ForceWarn(_), _) => {\n-                self.current_specs_mut().insert(id, (Level::ForceWarn(None), old_src))\n+            (Level::ForceWarn(_), Level::Expect(expectation_id)) => {\n+                self.insert(id, (Level::ForceWarn(Some(expectation_id)), old_src))\n             }\n+            // Keep `ForceWarn` level but drop the expectation\n+            (Level::ForceWarn(_), _) => self.insert(id, (Level::ForceWarn(None), old_src)),\n             // Set the lint level as normal\n-            _ => self.current_specs_mut().insert(id, (level, src)),\n+            _ => self.insert(id, (level, src)),\n         };\n     }\n \n     fn add(&mut self, attrs: &[ast::Attribute], is_crate_node: bool, source_hir_id: Option<HirId>) {\n         let sess = self.sess;\n         for (attr_index, attr) in attrs.iter().enumerate() {\n             if attr.has_name(sym::automatically_derived) {\n-                self.current_specs_mut().insert(\n+                self.insert(\n                     LintId::of(SINGLE_USE_LIFETIMES),\n                     (Level::Allow, LintLevelSource::Default),\n                 );"}]}