{"sha": "647a951b084e5718b37bb97cd36760918e37c2f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0N2E5NTFiMDg0ZTU3MThiMzdiYjk3Y2QzNjc2MDkxOGUzN2MyZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T09:30:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T09:30:51Z"}, "message": "Auto merge of #60128 - jimblandy:futures-doc-fix, r=withoutboats\n\nDoc fixes for core::future::Future.\n\nFixed outdated reference to `waker` argument; now futures are passed a\n`Context`, from which one can obtain a `waker`.\n\nCleaned up explanation of what happens when you call `poll` on a completed\nfuture. It doesn't make sense to say that `poll` implementations can't cause\nmemory unsafety; no safe function is ever allowed to cause memory unsafety, so\nwhy mention it here? It seems like the intent is to say that the `Future` trait\ndoesn't say what the consequences of excess polls will be, and they might be\nbad; but that the usual constraints that Rust imposes on any non-`unsafe`\nfunction still apply. It's also oddly specific to say 'memory corruption'\ninstead of just 'undefined behavior'; UB is a bit jargony, so the text should\nprovide examples.", "tree": {"sha": "f4a1f589c7e1fd6dab52380d21076ecf56f88441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a1f589c7e1fd6dab52380d21076ecf56f88441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/647a951b084e5718b37bb97cd36760918e37c2f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/647a951b084e5718b37bb97cd36760918e37c2f0", "html_url": "https://github.com/rust-lang/rust/commit/647a951b084e5718b37bb97cd36760918e37c2f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/647a951b084e5718b37bb97cd36760918e37c2f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775486589279430b4c9ebe7c1aac6017563c853a", "url": "https://api.github.com/repos/rust-lang/rust/commits/775486589279430b4c9ebe7c1aac6017563c853a", "html_url": "https://github.com/rust-lang/rust/commit/775486589279430b4c9ebe7c1aac6017563c853a"}, {"sha": "f8f02debbb9a163420c86689b13cf144207381aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f02debbb9a163420c86689b13cf144207381aa", "html_url": "https://github.com/rust-lang/rust/commit/f8f02debbb9a163420c86689b13cf144207381aa"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "e1ab67873a025ef241555c27194673617c3bed5b", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/647a951b084e5718b37bb97cd36760918e37c2f0/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647a951b084e5718b37bb97cd36760918e37c2f0/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=647a951b084e5718b37bb97cd36760918e37c2f0", "patch": "@@ -18,9 +18,9 @@ use crate::task::{Context, Poll};\n /// The core method of future, `poll`, *attempts* to resolve the future into a\n /// final value. This method does not block if the value is not ready. Instead,\n /// the current task is scheduled to be woken up when it's possible to make\n-/// further progress by `poll`ing again. The wake up is performed using\n-/// the `waker` argument of the `poll()` method, which is a handle for waking\n-/// up the current task.\n+/// further progress by `poll`ing again. The `context` passed to the `poll`\n+/// method can provide a `Waker`, which is a handle for waking up the current\n+/// task.\n ///\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `await!` the value.\n@@ -49,13 +49,13 @@ pub trait Future {\n     /// For example, a future waiting for a socket to become\n     /// readable would call `.clone()` on the [`Waker`] and store it.\n     /// When a signal arrives elsewhere indicating that the socket is readable,\n-    /// `[Waker::wake]` is called and the socket future's task is awoken.\n+    /// [`Waker::wake`] is called and the socket future's task is awoken.\n     /// Once a task has been woken up, it should attempt to `poll` the future\n     /// again, which may or may not produce a final value.\n     ///\n-    /// Note that on multiple calls to `poll`, only the most recent\n-    /// [`Waker`] passed to `poll` should be scheduled to receive a\n-    /// wakeup.\n+    /// Note that on multiple calls to `poll`, only the [`Waker`] from the\n+    /// [`Context`] passed to the most recent call should be scheduled to\n+    /// receive a wakeup.\n     ///\n     /// # Runtime characteristics\n     ///\n@@ -77,15 +77,15 @@ pub trait Future {\n     /// thread pool (or something similar) to ensure that `poll` can return\n     /// quickly.\n     ///\n-    /// An implementation of `poll` may also never cause memory unsafety.\n-    ///\n     /// # Panics\n     ///\n-    /// Once a future has completed (returned `Ready` from `poll`),\n-    /// then any future calls to `poll` may panic, block forever, or otherwise\n-    /// cause any kind of bad behavior except causing memory unsafety.\n-    /// The `Future` trait itself provides no guarantees about the behavior\n-    /// of `poll` after a future has completed.\n+    /// Once a future has completed (returned `Ready` from `poll`), calling its\n+    /// `poll` method again may panic, block forever, or cause other kinds of\n+    /// problems; the `Future` trait places no requirements on the effects of\n+    /// such a call. However, as the `poll` method is not marked `unsafe`,\n+    /// Rust's usual rules apply: calls must never cause undefined behavior\n+    /// (memory corruption, incorrect use of `unsafe` functions, or the like),\n+    /// regardless of the future's state.\n     ///\n     /// [`Poll::Pending`]: ../task/enum.Poll.html#variant.Pending\n     /// [`Poll::Ready(val)`]: ../task/enum.Poll.html#variant.Ready"}]}