{"sha": "7794ea5854094ffa15e933750196ef7c7e0e2f3b", "node_id": "C_kwDOAAsO6NoAKDc3OTRlYTU4NTQwOTRmZmExNWU5MzM3NTAxOTZlZjdjN2UwZTJmM2I", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-13T10:00:10Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-14T10:44:56Z"}, "message": "Prefer explict closure sig types over expected ones", "tree": {"sha": "f48c0a0d591bdd7d12fd6049f72c3dba65f3d1ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48c0a0d591bdd7d12fd6049f72c3dba65f3d1ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7794ea5854094ffa15e933750196ef7c7e0e2f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7794ea5854094ffa15e933750196ef7c7e0e2f3b", "html_url": "https://github.com/rust-lang/rust/commit/7794ea5854094ffa15e933750196ef7c7e0e2f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7794ea5854094ffa15e933750196ef7c7e0e2f3b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "html_url": "https://github.com/rust-lang/rust/commit/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84"}], "stats": {"total": 117, "additions": 87, "deletions": 30}, "files": [{"sha": "9b943b160f39344d589af2f44bdd6298b6adcc41", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7794ea5854094ffa15e933750196ef7c7e0e2f3b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7794ea5854094ffa15e933750196ef7c7e0e2f3b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=7794ea5854094ffa15e933750196ef7c7e0e2f3b", "patch": "@@ -30,7 +30,12 @@ struct ExpectedSig<'tcx> {\n }\n \n struct ClosureSignatures<'tcx> {\n+    /// The signature users of the closure see.\n     bound_sig: ty::PolyFnSig<'tcx>,\n+    /// The signature within the function body.\n+    /// This mostly differs in the sense that lifetimes are now early bound and any\n+    /// opaque types from the signature expectation are overriden in case there are\n+    /// explicit hidden types written by the user in the closure signature.\n     liberated_sig: ty::FnSig<'tcx>,\n }\n \n@@ -444,18 +449,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Along the way, it also writes out entries for types that the user\n         // wrote into our typeck results, which are then later used by the privacy\n         // check.\n-        match self.check_supplied_sig_against_expectation(\n+        match self.merge_supplied_sig_with_expectation(\n             hir_id,\n             expr_def_id,\n             decl,\n             body,\n-            &closure_sigs,\n+            closure_sigs,\n         ) {\n             Ok(infer_ok) => self.register_infer_ok_obligations(infer_ok),\n-            Err(_) => return self.sig_of_closure_no_expectation(hir_id, expr_def_id, decl, body),\n+            Err(_) => self.sig_of_closure_no_expectation(hir_id, expr_def_id, decl, body),\n         }\n-\n-        closure_sigs\n     }\n \n     fn sig_of_closure_with_mismatched_number_of_arguments(\n@@ -497,21 +500,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Enforce the user's types against the expectation. See\n     /// `sig_of_closure_with_expectation` for details on the overall\n     /// strategy.\n-    fn check_supplied_sig_against_expectation(\n+    #[instrument(level = \"debug\", skip(self, hir_id, expr_def_id, decl, body, expected_sigs))]\n+    fn merge_supplied_sig_with_expectation(\n         &self,\n         hir_id: hir::HirId,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl<'_>,\n         body: &hir::Body<'_>,\n-        expected_sigs: &ClosureSignatures<'tcx>,\n-    ) -> InferResult<'tcx, ()> {\n+        mut expected_sigs: ClosureSignatures<'tcx>,\n+    ) -> InferResult<'tcx, ClosureSignatures<'tcx>> {\n         // Get the signature S that the user gave.\n         //\n         // (See comment on `sig_of_closure_with_expectation` for the\n         // meaning of these letters.)\n         let supplied_sig = self.supplied_sig_of_closure(hir_id, expr_def_id, decl, body);\n \n-        debug!(\"check_supplied_sig_against_expectation: supplied_sig={:?}\", supplied_sig);\n+        debug!(?supplied_sig);\n \n         // FIXME(#45727): As discussed in [this comment][c1], naively\n         // forcing equality here actually results in suboptimal error\n@@ -529,23 +533,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // [c2]: https://github.com/rust-lang/rust/pull/45072#issuecomment-341096796\n         self.commit_if_ok(|_| {\n             let mut all_obligations = vec![];\n+            let inputs: Vec<_> = iter::zip(\n+                decl.inputs,\n+                supplied_sig.inputs().skip_binder(), // binder moved to (*) below\n+            )\n+            .map(|(hir_ty, &supplied_ty)| {\n+                // Instantiate (this part of..) S to S', i.e., with fresh variables.\n+                self.replace_bound_vars_with_fresh_vars(\n+                    hir_ty.span,\n+                    LateBoundRegionConversionTime::FnCall,\n+                    // (*) binder moved to here\n+                    supplied_sig.inputs().rebind(supplied_ty),\n+                )\n+            })\n+            .collect();\n \n             // The liberated version of this signature should be a subtype\n             // of the liberated form of the expectation.\n             for ((hir_ty, &supplied_ty), expected_ty) in iter::zip(\n-                iter::zip(\n-                    decl.inputs,\n-                    supplied_sig.inputs().skip_binder(), // binder moved to (*) below\n-                ),\n+                iter::zip(decl.inputs, &inputs),\n                 expected_sigs.liberated_sig.inputs(), // `liberated_sig` is E'.\n             ) {\n-                // Instantiate (this part of..) S to S', i.e., with fresh variables.\n-                let supplied_ty = self.replace_bound_vars_with_fresh_vars(\n-                    hir_ty.span,\n-                    LateBoundRegionConversionTime::FnCall,\n-                    supplied_sig.inputs().rebind(supplied_ty),\n-                ); // recreated from (*) above\n-\n                 // Check that E' = S'.\n                 let cause = self.misc(hir_ty.span);\n                 let InferOk { value: (), obligations } =\n@@ -564,7 +572,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .eq(expected_sigs.liberated_sig.output(), supplied_output_ty)?;\n             all_obligations.extend(obligations);\n \n-            Ok(InferOk { value: (), obligations: all_obligations })\n+            let inputs = inputs.into_iter().map(|ty| self.resolve_vars_if_possible(ty));\n+\n+            expected_sigs.liberated_sig = self.tcx.mk_fn_sig(\n+                inputs,\n+                supplied_output_ty,\n+                expected_sigs.liberated_sig.c_variadic,\n+                hir::Unsafety::Normal,\n+                Abi::RustCall,\n+            );\n+\n+            Ok(InferOk { value: expected_sigs, obligations: all_obligations })\n         })\n     }\n "}, {"sha": "96fc7e6493ab94dc7e19a5e503c4bcd87791ef01", "filename": "src/test/mir-opt/retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir?ref=7794ea5854094ffa15e933750196ef7c7e0e2f3b", "patch": "@@ -14,7 +14,7 @@ fn main::{closure#0}(_1: &[closure@main::{closure#0}], _2: &i32) -> &i32 {\n         StorageLive(_3);                 // scope 0 at $DIR/retag.rs:+1:13: +1:15\n         _3 = _2;                         // scope 0 at $DIR/retag.rs:+1:18: +1:19\n         Retag(_3);                       // scope 0 at $DIR/retag.rs:+1:18: +1:19\n-        _0 = _2;                         // scope 1 at $DIR/retag.rs:+2:9: +2:10\n+        _0 = &(*_2);                     // scope 1 at $DIR/retag.rs:+2:9: +2:10\n         Retag(_0);                       // scope 1 at $DIR/retag.rs:+2:9: +2:10\n         StorageDead(_3);                 // scope 0 at $DIR/retag.rs:+3:5: +3:6\n         return;                          // scope 0 at $DIR/retag.rs:+3:6: +3:6"}, {"sha": "284fc1c21f5f9ac64c6be7eec1032005ee0db01a", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=7794ea5854094ffa15e933750196ef7c7e0e2f3b", "patch": "@@ -25,26 +25,26 @@ error[E0308]: mismatched types\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n    |                                                 ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r> fn(&'r u32)`\n-              found fn pointer `fn(&u32)`\n+   = note: expected fn pointer `fn(&u32)`\n+              found fn pointer `for<'r> fn(&'r u32)`\n \n error[E0308]: mismatched types\n   --> $DIR/expect-fn-supply-fn.rs:39:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n    |                                                  ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `fn(&'x u32)`\n-              found fn pointer `for<'r> fn(&'r u32)`\n+   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+              found fn pointer `fn(&u32)`\n \n error[E0308]: mismatched types\n   --> $DIR/expect-fn-supply-fn.rs:48:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n    |                                                  ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `fn(&u32)`\n-              found fn pointer `for<'r> fn(&'r u32)`\n+   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+              found fn pointer `fn(&u32)`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d5432755cfed3fd2981c31270e6effbfacd50fec", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=7794ea5854094ffa15e933750196ef7c7e0e2f3b", "patch": "@@ -6,7 +6,7 @@ LL |     with_closure(|x: u32, y| {});\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |     with_closure(|x: u32, y: B| {});\n+LL |     with_closure(|x: u32, y: _| {});\n    |                            +++\n \n error: aborting due to previous error"}, {"sha": "c5e7af81d3dd0948dfc95d3b101e7ea4216a62e3", "filename": "src/test/ui/type-alias-impl-trait/closure_args.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args.rs?ref=7794ea5854094ffa15e933750196ef7c7e0e2f3b", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+// regression test for https://github.com/rust-lang/rust/issues/100800\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Anything {}\n+impl<T> Anything for T {}\n+type Input = impl Anything;\n+fn run<F: FnOnce(Input) -> ()>(f: F, i: Input) {\n+    f(i);\n+}\n+\n+fn main() {\n+    run(|x: u32| {println!(\"{x}\");}, 0);\n+}"}, {"sha": "82386c280a8e3182f47592809847c85eee056b37", "filename": "src/test/ui/type-alias-impl-trait/closure_args2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args2.rs?ref=7794ea5854094ffa15e933750196ef7c7e0e2f3b", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Foo {\n+    // This was reachable in https://github.com/rust-lang/rust/issues/100800\n+    fn foo(&self) { unreachable!() }\n+}\n+impl<T> Foo for T {}\n+\n+struct B;\n+impl B {\n+    fn foo(&self) {}\n+}\n+\n+type Input = impl Foo;\n+fn run1<F: FnOnce(Input)>(f: F, i: Input) {f(i)}\n+fn run2<F: FnOnce(B)>(f: F, i: B) {f(i)}\n+\n+fn main() {\n+    run1(|x: B| {x.foo()}, B);\n+    run2(|x: B| {x.foo()}, B);\n+}"}, {"sha": "d0c04371bd793faa8926a8a7404c1a8126a3e321", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7794ea5854094ffa15e933750196ef7c7e0e2f3b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=7794ea5854094ffa15e933750196ef7c7e0e2f3b", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n-   |                                        ^ the trait `Bug` is not implemented for `()`\n+   |                                        ^^ the trait `Bug` is not implemented for `()`\n    |\n    = help: the trait `Bug` is implemented for `&()`\n "}]}