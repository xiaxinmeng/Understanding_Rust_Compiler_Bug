{"sha": "6f02befee4249618a2a7858d27649fa389888ea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMDJiZWZlZTQyNDk2MThhMmE3ODU4ZDI3NjQ5ZmEzODk4ODhlYTg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-24T14:30:12Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-24T14:30:12Z"}, "message": "Add a builder for DiagnosticSink", "tree": {"sha": "57ebf87e049cf1bded4c94338ca86dcd84e77d27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57ebf87e049cf1bded4c94338ca86dcd84e77d27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f02befee4249618a2a7858d27649fa389888ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f02befee4249618a2a7858d27649fa389888ea8", "html_url": "https://github.com/rust-lang/rust/commit/6f02befee4249618a2a7858d27649fa389888ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f02befee4249618a2a7858d27649fa389888ea8/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3defe2532ba6ffd12a13bcbc8fdeda037665efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3defe2532ba6ffd12a13bcbc8fdeda037665efc", "html_url": "https://github.com/rust-lang/rust/commit/c3defe2532ba6ffd12a13bcbc8fdeda037665efc"}], "stats": {"total": 190, "additions": 102, "deletions": 88}, "files": [{"sha": "266b513dcf50c307943ce688af4c8d700a92b25c", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f02befee4249618a2a7858d27649fa389888ea8/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f02befee4249618a2a7858d27649fa389888ea8/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=6f02befee4249618a2a7858d27649fa389888ea8", "patch": "@@ -1,6 +1,8 @@\n //! FIXME: write short doc here\n pub use hir_def::diagnostics::UnresolvedModule;\n-pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n+pub use hir_expand::diagnostics::{\n+    AstDiagnostic, Diagnostic, DiagnosticSink, DiagnosticSinkBuilder,\n+};\n pub use hir_ty::diagnostics::{\n     MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField,\n };"}, {"sha": "6a5844f31ff3dd3f8bce13409aa0ac673b973fa3", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6f02befee4249618a2a7858d27649fa389888ea8/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f02befee4249618a2a7858d27649fa389888ea8/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=6f02befee4249618a2a7858d27649fa389888ea8", "patch": "@@ -48,23 +48,6 @@ pub struct DiagnosticSink<'a> {\n }\n \n impl<'a> DiagnosticSink<'a> {\n-    /// FIXME: split `new` and `on` into a separate builder type\n-    pub fn new(cb: impl FnMut(&dyn Diagnostic) + 'a) -> DiagnosticSink<'a> {\n-        DiagnosticSink { callbacks: Vec::new(), default_callback: Box::new(cb) }\n-    }\n-\n-    pub fn on<D: Diagnostic, F: FnMut(&D) + 'a>(mut self, mut cb: F) -> DiagnosticSink<'a> {\n-        let cb = move |diag: &dyn Diagnostic| match diag.downcast_ref::<D>() {\n-            Some(d) => {\n-                cb(d);\n-                Ok(())\n-            }\n-            None => Err(()),\n-        };\n-        self.callbacks.push(Box::new(cb));\n-        self\n-    }\n-\n     pub fn push(&mut self, d: impl Diagnostic) {\n         let d: &dyn Diagnostic = &d;\n         self._push(d);\n@@ -80,3 +63,29 @@ impl<'a> DiagnosticSink<'a> {\n         (self.default_callback)(d)\n     }\n }\n+\n+pub struct DiagnosticSinkBuilder<'a> {\n+    callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n+}\n+\n+impl<'a> DiagnosticSinkBuilder<'a> {\n+    pub fn new() -> Self {\n+        Self { callbacks: Vec::new() }\n+    }\n+\n+    pub fn on<D: Diagnostic, F: FnMut(&D) + 'a>(mut self, mut cb: F) -> Self {\n+        let cb = move |diag: &dyn Diagnostic| match diag.downcast_ref::<D>() {\n+            Some(d) => {\n+                cb(d);\n+                Ok(())\n+            }\n+            None => Err(()),\n+        };\n+        self.callbacks.push(Box::new(cb));\n+        self\n+    }\n+\n+    pub fn build<F: FnMut(&dyn Diagnostic) + 'a>(self, default_callback: F) -> DiagnosticSink<'a> {\n+        DiagnosticSink { callbacks: self.callbacks, default_callback: Box::new(default_callback) }\n+    }\n+}"}, {"sha": "a9877d867ff761f94cfee85e1c72046c43aa5393", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f02befee4249618a2a7858d27649fa389888ea8/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f02befee4249618a2a7858d27649fa389888ea8/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=6f02befee4249618a2a7858d27649fa389888ea8", "patch": "@@ -248,7 +248,7 @@ impl AstDiagnostic for MismatchedArgCount {\n #[cfg(test)]\n mod tests {\n     use hir_def::{db::DefDatabase, AssocItemId, ModuleDefId};\n-    use hir_expand::diagnostics::{Diagnostic, DiagnosticSink};\n+    use hir_expand::diagnostics::{Diagnostic, DiagnosticSinkBuilder};\n     use ra_db::{fixture::WithFixture, FileId, SourceDatabase, SourceDatabaseExt};\n     use ra_syntax::{TextRange, TextSize};\n     use rustc_hash::FxHashMap;\n@@ -280,7 +280,7 @@ mod tests {\n                 }\n \n                 for f in fns {\n-                    let mut sink = DiagnosticSink::new(&mut cb);\n+                    let mut sink = DiagnosticSinkBuilder::new().build(&mut cb);\n                     validate_body(self, f.into(), &mut sink);\n                 }\n             }"}, {"sha": "8e715faa4607aff48ff97d4fc10acafd22d1d187", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 71, "deletions": 68, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/6f02befee4249618a2a7858d27649fa389888ea8/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f02befee4249618a2a7858d27649fa389888ea8/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=6f02befee4249618a2a7858d27649fa389888ea8", "patch": "@@ -7,7 +7,7 @@\n use std::cell::RefCell;\n \n use hir::{\n-    diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSink},\n+    diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSinkBuilder},\n     HasSource, HirDisplay, Semantics, VariantDef,\n };\n use itertools::Itertools;\n@@ -48,79 +48,82 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         check_struct_shorthand_initialization(&mut res, file_id, &node);\n     }\n     let res = RefCell::new(res);\n-    let mut sink = DiagnosticSink::new(|d| {\n-        res.borrow_mut().push(Diagnostic {\n-            message: d.message(),\n-            range: sema.diagnostics_range(d).range,\n-            severity: Severity::Error,\n-            fix: None,\n+    let mut sink = DiagnosticSinkBuilder::new()\n+        .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n+            let original_file = d.source().file_id.original_file(db);\n+            let fix = Fix::new(\n+                \"Create module\",\n+                FileSystemEdit::CreateFile { anchor: original_file, dst: d.candidate.clone() }\n+                    .into(),\n+            );\n+            res.borrow_mut().push(Diagnostic {\n+                range: sema.diagnostics_range(d).range,\n+                message: d.message(),\n+                severity: Severity::Error,\n+                fix: Some(fix),\n+            })\n         })\n-    })\n-    .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n-        let original_file = d.source().file_id.original_file(db);\n-        let fix = Fix::new(\n-            \"Create module\",\n-            FileSystemEdit::CreateFile { anchor: original_file, dst: d.candidate.clone() }.into(),\n-        );\n-        res.borrow_mut().push(Diagnostic {\n-            range: sema.diagnostics_range(d).range,\n-            message: d.message(),\n-            severity: Severity::Error,\n-            fix: Some(fix),\n-        })\n-    })\n-    .on::<hir::diagnostics::MissingFields, _>(|d| {\n-        // Note that although we could add a diagnostics to\n-        // fill the missing tuple field, e.g :\n-        // `struct A(usize);`\n-        // `let a = A { 0: () }`\n-        // but it is uncommon usage and it should not be encouraged.\n-        let fix = if d.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n-            None\n-        } else {\n-            let mut field_list = d.ast(db);\n-            for f in d.missed_fields.iter() {\n-                let field =\n-                    make::record_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n-                field_list = field_list.append_field(&field);\n-            }\n-\n-            let edit = {\n-                let mut builder = TextEditBuilder::default();\n-                algo::diff(&d.ast(db).syntax(), &field_list.syntax()).into_text_edit(&mut builder);\n-                builder.finish()\n+        .on::<hir::diagnostics::MissingFields, _>(|d| {\n+            // Note that although we could add a diagnostics to\n+            // fill the missing tuple field, e.g :\n+            // `struct A(usize);`\n+            // `let a = A { 0: () }`\n+            // but it is uncommon usage and it should not be encouraged.\n+            let fix = if d.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n+                None\n+            } else {\n+                let mut field_list = d.ast(db);\n+                for f in d.missed_fields.iter() {\n+                    let field =\n+                        make::record_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n+                    field_list = field_list.append_field(&field);\n+                }\n+\n+                let edit = {\n+                    let mut builder = TextEditBuilder::default();\n+                    algo::diff(&d.ast(db).syntax(), &field_list.syntax())\n+                        .into_text_edit(&mut builder);\n+                    builder.finish()\n+                };\n+                Some(Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()))\n             };\n-            Some(Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()))\n-        };\n \n-        res.borrow_mut().push(Diagnostic {\n-            range: sema.diagnostics_range(d).range,\n-            message: d.message(),\n-            severity: Severity::Error,\n-            fix,\n+            res.borrow_mut().push(Diagnostic {\n+                range: sema.diagnostics_range(d).range,\n+                message: d.message(),\n+                severity: Severity::Error,\n+                fix,\n+            })\n         })\n-    })\n-    .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n-        let node = d.ast(db);\n-        let replacement = format!(\"Ok({})\", node.syntax());\n-        let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n-        let source_change = SourceFileEdit { file_id, edit }.into();\n-        let fix = Fix::new(\"Wrap with ok\", source_change);\n-        res.borrow_mut().push(Diagnostic {\n-            range: sema.diagnostics_range(d).range,\n-            message: d.message(),\n-            severity: Severity::Error,\n-            fix: Some(fix),\n+        .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n+            let node = d.ast(db);\n+            let replacement = format!(\"Ok({})\", node.syntax());\n+            let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n+            let source_change = SourceFileEdit { file_id, edit }.into();\n+            let fix = Fix::new(\"Wrap with ok\", source_change);\n+            res.borrow_mut().push(Diagnostic {\n+                range: sema.diagnostics_range(d).range,\n+                message: d.message(),\n+                severity: Severity::Error,\n+                fix: Some(fix),\n+            })\n         })\n-    })\n-    .on::<hir::diagnostics::NoSuchField, _>(|d| {\n-        res.borrow_mut().push(Diagnostic {\n-            range: sema.diagnostics_range(d).range,\n-            message: d.message(),\n-            severity: Severity::Error,\n-            fix: missing_struct_field_fix(&sema, file_id, d),\n+        .on::<hir::diagnostics::NoSuchField, _>(|d| {\n+            res.borrow_mut().push(Diagnostic {\n+                range: sema.diagnostics_range(d).range,\n+                message: d.message(),\n+                severity: Severity::Error,\n+                fix: missing_struct_field_fix(&sema, file_id, d),\n+            })\n         })\n-    });\n+        .build(|d| {\n+            res.borrow_mut().push(Diagnostic {\n+                message: d.message(),\n+                range: sema.diagnostics_range(d).range,\n+                severity: Severity::Error,\n+                fix: None,\n+            })\n+        });\n \n     if let Some(m) = sema.to_module_def(file_id) {\n         m.diagnostics(db, &mut sink);"}]}