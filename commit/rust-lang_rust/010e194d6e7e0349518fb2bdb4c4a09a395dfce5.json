{"sha": "010e194d6e7e0349518fb2bdb4c4a09a395dfce5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMGUxOTRkNmU3ZTAzNDk1MThmYjJiZGI0YzRhMDlhMzk1ZGZjZTU=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2021-02-08T05:01:02Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2021-02-08T11:32:18Z"}, "message": "Specialize slice::fill for Copy type and u8/i8/bool", "tree": {"sha": "49694b540afc7567cfcd97d84a5341f31f0474ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49694b540afc7567cfcd97d84a5341f31f0474ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/010e194d6e7e0349518fb2bdb4c4a09a395dfce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/010e194d6e7e0349518fb2bdb4c4a09a395dfce5", "html_url": "https://github.com/rust-lang/rust/commit/010e194d6e7e0349518fb2bdb4c4a09a395dfce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/010e194d6e7e0349518fb2bdb4c4a09a395dfce5/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446798f84ba0f0f9fe4c79a65256f5920ef2f4ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/446798f84ba0f0f9fe4c79a65256f5920ef2f4ac", "html_url": "https://github.com/rust-lang/rust/commit/446798f84ba0f0f9fe4c79a65256f5920ef2f4ac"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "7db9c42921241451c6f0895a5533d6ef4cb8f2cd", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/010e194d6e7e0349518fb2bdb4c4a09a395dfce5/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010e194d6e7e0349518fb2bdb4c4a09a395dfce5/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=010e194d6e7e0349518fb2bdb4c4a09a395dfce5", "patch": "@@ -34,6 +34,7 @@ mod iter;\n mod raw;\n mod rotate;\n mod sort;\n+mod specialize;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use iter::{Chunks, ChunksMut, Windows};\n@@ -2831,13 +2832,7 @@ impl<T> [T] {\n     where\n         T: Clone,\n     {\n-        if let Some((last, elems)) = self.split_last_mut() {\n-            for el in elems {\n-                el.clone_from(&value);\n-            }\n-\n-            *last = value\n-        }\n+        specialize::SpecFill::spec_fill(self, value);\n     }\n \n     /// Fills `self` with elements returned by calling a closure repeatedly."}, {"sha": "16a9588989c854ee34b2a9b269fd5a9d2523b692", "filename": "library/core/src/slice/specialize.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/010e194d6e7e0349518fb2bdb4c4a09a395dfce5/library%2Fcore%2Fsrc%2Fslice%2Fspecialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010e194d6e7e0349518fb2bdb4c4a09a395dfce5/library%2Fcore%2Fsrc%2Fslice%2Fspecialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fspecialize.rs?ref=010e194d6e7e0349518fb2bdb4c4a09a395dfce5", "patch": "@@ -0,0 +1,58 @@\n+use crate::ptr::write_bytes;\n+\n+pub(super) trait SpecFill<T> {\n+    fn spec_fill(&mut self, value: T);\n+}\n+\n+impl<T: Clone> SpecFill<T> for [T] {\n+    default fn spec_fill(&mut self, value: T) {\n+        if let Some((last, elems)) = self.split_last_mut() {\n+            for el in elems {\n+                el.clone_from(&value);\n+            }\n+\n+            *last = value\n+        }\n+    }\n+}\n+\n+impl<T: Copy> SpecFill<T> for [T] {\n+    default fn spec_fill(&mut self, value: T) {\n+        for item in self.iter_mut() {\n+            *item = value;\n+        }\n+    }\n+}\n+\n+impl SpecFill<u8> for [u8] {\n+    fn spec_fill(&mut self, value: u8) {\n+        // SAFETY: this is slice of u8\n+        unsafe {\n+            let ptr = self.as_mut_ptr();\n+            let len = self.len();\n+            write_bytes(ptr, value, len);\n+        }\n+    }\n+}\n+\n+impl SpecFill<i8> for [i8] {\n+    fn spec_fill(&mut self, value: i8) {\n+        // SAFETY: this is slice of i8\n+        unsafe {\n+            let ptr = self.as_mut_ptr();\n+            let len = self.len();\n+            write_bytes(ptr, value as u8, len);\n+        }\n+    }\n+}\n+\n+impl SpecFill<bool> for [bool] {\n+    fn spec_fill(&mut self, value: bool) {\n+        // SAFETY: this is slice of bool\n+        unsafe {\n+            let ptr = self.as_mut_ptr();\n+            let len = self.len();\n+            write_bytes(ptr, value as u8, len);\n+        }\n+    }\n+}"}]}