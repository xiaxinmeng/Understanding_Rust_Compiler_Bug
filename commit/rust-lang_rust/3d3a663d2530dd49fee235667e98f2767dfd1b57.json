{"sha": "3d3a663d2530dd49fee235667e98f2767dfd1b57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkM2E2NjNkMjUzMGRkNDlmZWUyMzU2NjdlOThmMjc2N2RmZDFiNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-14T18:41:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-14T18:41:24Z"}, "message": "auto merge of #10870 : ktt3ja/rust/issue-10865, r=alexcrichton\n\nFix #10865 and #10939.", "tree": {"sha": "1e6a43693425e4f74f162c236417f49890d46d24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e6a43693425e4f74f162c236417f49890d46d24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d3a663d2530dd49fee235667e98f2767dfd1b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d3a663d2530dd49fee235667e98f2767dfd1b57", "html_url": "https://github.com/rust-lang/rust/commit/3d3a663d2530dd49fee235667e98f2767dfd1b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d3a663d2530dd49fee235667e98f2767dfd1b57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73c9c9bbcaf1595f766ad8bb01e21c78fcba84b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73c9c9bbcaf1595f766ad8bb01e21c78fcba84b", "html_url": "https://github.com/rust-lang/rust/commit/f73c9c9bbcaf1595f766ad8bb01e21c78fcba84b"}, {"sha": "a67b8863c2d2e31f834e7a2b39b0afa6f8be7492", "url": "https://api.github.com/repos/rust-lang/rust/commits/a67b8863c2d2e31f834e7a2b39b0afa6f8be7492", "html_url": "https://github.com/rust-lang/rust/commit/a67b8863c2d2e31f834e7a2b39b0afa6f8be7492"}], "stats": {"total": 145, "additions": 97, "deletions": 48}, "files": [{"sha": "5ada1bfa63046bbfd75e23285ab22bac0cb8e150", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=3d3a663d2530dd49fee235667e98f2767dfd1b57", "patch": "@@ -41,11 +41,15 @@ def scrub(b):\n \n c = open(\"tmp/run_pass_stage2.rc\", \"w\")\n i = 0\n-c.write(\"// AUTO-GENERATED FILE: DO NOT EDIT\\n\")\n-c.write(\"#[pkgid=\\\"run_pass_stage2#0.1\\\"];\\n\")\n-c.write(\"#[link(name=\\\"run_pass_stage2\\\", vers=\\\"0.1\\\")];\\n\")\n-c.write(\"#[feature(globs, macro_rules, struct_variant, managed_boxes)];\\n\")\n-c.write(\"#[allow(attribute_usage)];\\n\")\n+c.write(\n+\"\"\"\n+// AUTO-GENERATED FILE: DO NOT EDIT\n+#[pkgid=\\\"run_pass_stage2#0.1\\\"];\n+#[link(name=\\\"run_pass_stage2\\\", vers=\\\"0.1\\\")];\n+#[feature(globs, macro_rules, struct_variant, managed_boxes)];\n+#[allow(warnings)];\n+\"\"\"\n+)\n for t in stage2_tests:\n     p = os.path.join(run_pass, t)\n     p = p.replace(\"\\\\\", \"\\\\\\\\\")\n@@ -56,15 +60,19 @@ def scrub(b):\n \n \n d = open(\"tmp/run_pass_stage2_driver.rs\", \"w\")\n-d.write(\"// AUTO-GENERATED FILE: DO NOT EDIT\\n\")\n-d.write(\"#[feature(globs, managed_boxes)];\\n\")\n-d.write(\"extern mod extra;\\n\")\n-d.write(\"extern mod run_pass_stage2;\\n\")\n-d.write(\"use run_pass_stage2::*;\\n\")\n-d.write(\"use std::io;\\n\")\n-d.write(\"use std::io::Writer;\\n\")\n-d.write(\"fn main() {\\n\")\n-d.write(\"    let mut out = io::stdout();\\n\")\n+d.write(\n+\"\"\"\n+// AUTO-GENERATED FILE: DO NOT EDIT\n+#[feature(globs, managed_boxes)];\n+extern mod extra;\n+extern mod run_pass_stage2;\n+use run_pass_stage2::*;\n+use std::io;\n+use std::io::Writer;\n+fn main() {\n+    let mut out = io::stdout();\n+\"\"\"\n+)\n i = 0\n for t in stage2_tests:\n     p = os.path.join(\"test\", \"run-pass\", t)"}, {"sha": "9007e4bd90a9d22964ebfcb456450a11e20d312f", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=3d3a663d2530dd49fee235667e98f2767dfd1b57", "patch": "@@ -37,6 +37,7 @@ fn should_explore(tcx: ty::ctxt, def_id: ast::DefId) -> bool {\n     match tcx.items.find(&def_id.node) {\n         Some(&ast_map::node_item(..))\n         | Some(&ast_map::node_method(..))\n+        | Some(&ast_map::node_foreign_item(..))\n         | Some(&ast_map::node_trait_method(..)) => true,\n         _ => false\n     }\n@@ -61,11 +62,10 @@ impl MarkSymbolVisitor {\n         }\n     }\n \n-    fn lookup_and_handle_definition(&mut self, id: &ast::NodeId,\n-                                    span: codemap::Span) {\n+    fn lookup_and_handle_definition(&mut self, id: &ast::NodeId) {\n         let def = match self.tcx.def_map.find(id) {\n             Some(&def) => def,\n-            None => self.tcx.sess.span_bug(span, \"def ID not in def map?!\"),\n+            None => return\n         };\n         let def_id = match def {\n             ast::DefVariant(enum_id, _, _) => Some(enum_id),\n@@ -107,8 +107,7 @@ impl MarkSymbolVisitor {\n                 match item.node {\n                     ast::item_fn(..)\n                     | ast::item_ty(..)\n-                    | ast::item_static(..)\n-                    | ast::item_foreign_mod(_) => {\n+                    | ast::item_static(..) => {\n                         visit::walk_item(self, item, ());\n                     }\n                     _ => ()\n@@ -120,6 +119,9 @@ impl MarkSymbolVisitor {\n             ast_map::node_method(method, _, _) => {\n                 visit::walk_block(self, method.body, ());\n             }\n+            ast_map::node_foreign_item(foreign_item, _, _, _) => {\n+                visit::walk_foreign_item(self, foreign_item, ());\n+            }\n             _ => ()\n         }\n     }\n@@ -129,9 +131,6 @@ impl Visitor<()> for MarkSymbolVisitor {\n \n     fn visit_expr(&mut self, expr: @ast::Expr, _: ()) {\n         match expr.node {\n-            ast::ExprPath(_) | ast::ExprStruct(..) => {\n-                self.lookup_and_handle_definition(&expr.id, expr.span);\n-            }\n             ast::ExprMethodCall(..) => {\n                 match self.method_map.find(&expr.id) {\n                     Some(&typeck::method_map_entry {\n@@ -160,12 +159,16 @@ impl Visitor<()> for MarkSymbolVisitor {\n     fn visit_ty(&mut self, typ: &ast::Ty, _: ()) {\n         match typ.node {\n             ast::ty_path(_, _, ref id) => {\n-                self.lookup_and_handle_definition(id, typ.span);\n+                self.lookup_and_handle_definition(id);\n             }\n             _ => visit::walk_ty(self, typ, ()),\n         }\n     }\n \n+    fn visit_path(&mut self, _: &ast::Path, id: ast::NodeId, _: ()) {\n+        self.lookup_and_handle_definition(&id);\n+    }\n+\n     fn visit_item(&mut self, _item: @ast::item, _: ()) {\n         // Do not recurse into items. These items will be added to the\n         // worklist and recursed into manually if necessary.\n@@ -299,19 +302,31 @@ impl DeadVisitor {\n         }\n         false\n     }\n+\n+    fn warn_dead_code(&mut self, id: ast::NodeId,\n+                      span: codemap::Span, ident: &ast::Ident) {\n+        self.tcx.sess.add_lint(dead_code, id, span,\n+                               format!(\"code is never used: `{}`\",\n+                                       token::ident_to_str(ident)));\n+    }\n }\n \n impl Visitor<()> for DeadVisitor {\n     fn visit_item(&mut self, item: @ast::item, _: ()) {\n         let ctor_id = get_struct_ctor_id(item);\n         if !self.symbol_is_live(item.id, ctor_id) && should_warn(item) {\n-            self.tcx.sess.add_lint(dead_code, item.id, item.span,\n-                                   format!(\"code is never used: `{}`\",\n-                                           token::ident_to_str(&item.ident)));\n+            self.warn_dead_code(item.id, item.span, &item.ident);\n         }\n         visit::walk_item(self, item, ());\n     }\n \n+    fn visit_foreign_item(&mut self, fi: @ast::foreign_item, _: ()) {\n+        if !self.symbol_is_live(fi.id, None) {\n+            self.warn_dead_code(fi.id, fi.span, &fi.ident);\n+        }\n+        visit::walk_foreign_item(self, fi, ());\n+    }\n+\n     fn visit_fn(&mut self, fk: &visit::fn_kind,\n                 _: &ast::fn_decl, block: ast::P<ast::Block>,\n                 span: codemap::Span, id: ast::NodeId, _: ()) {\n@@ -320,10 +335,7 @@ impl Visitor<()> for DeadVisitor {\n             visit::fk_method(..) => {\n                 let ident = visit::name_of_fn(fk);\n                 if !self.symbol_is_live(id, None) {\n-                    self.tcx.sess\n-                            .add_lint(dead_code, id, span,\n-                                      format!(\"code is never used: `{}`\",\n-                                              token::ident_to_str(&ident)));\n+                    self.warn_dead_code(id, span, &ident);\n                 }\n             }\n             _ => ()"}, {"sha": "c1d4d367e25f27fd842318b233a3dc98d07f6e93", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=3d3a663d2530dd49fee235667e98f2767dfd1b57", "patch": "@@ -29,12 +29,15 @@\n \n #[allow(non_camel_case_types)]; // C types\n \n-use std::libc::{size_t, c_int, c_uint, c_void, c_char, uintptr_t, c_double};\n+use std::libc::{size_t, c_int, c_uint, c_void, c_char, c_double};\n use std::libc::ssize_t;\n use std::libc::{malloc, free};\n use std::libc;\n use std::vec;\n \n+#[cfg(test)]\n+use std::libc::uintptr_t;\n+\n pub use self::errors::*;\n \n pub static OK: c_int = 0;\n@@ -541,7 +544,9 @@ extern {\n     pub fn rust_is_ipv4_sockaddr(addr: *sockaddr) -> c_int;\n     pub fn rust_is_ipv6_sockaddr(addr: *sockaddr) -> c_int;\n \n+    #[cfg(test)]\n     fn rust_uv_handle_type_max() -> uintptr_t;\n+    #[cfg(test)]\n     fn rust_uv_req_type_max() -> uintptr_t;\n     fn rust_uv_get_udp_handle_from_send_req(req: *uv_udp_send_t) -> *uv_udp_t;\n "}, {"sha": "5212b6fc15ec4e392406cf9272ec02f710d51ff8", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=3d3a663d2530dd49fee235667e98f2767dfd1b57", "patch": "@@ -10,6 +10,7 @@\n \n #[allow(missing_doc)];\n #[allow(non_uppercase_statics)];\n+#[allow(dead_code)];\n \n // function names are almost identical to C's libmath, a few have been\n // renamed, grep for \"rename:\""}, {"sha": "6086484772ad613db2e61168229c05c6974b4632", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=3d3a663d2530dd49fee235667e98f2767dfd1b57", "patch": "@@ -26,20 +26,7 @@ pub static pub_static: int = 0;\n static priv_static: int = 0; //~ ERROR: code is never used\n static used_static: int = 0;\n pub static used_static2: int = used_static;\n-\n-pub fn pub_fn() {\n-    used_fn();\n-    let used_struct1 = UsedStruct1 { x: 1 };\n-    let used_struct2 = UsedStruct2(1);\n-    let used_struct3 = UsedStruct3;\n-    let e = foo3;\n-    SemiUsedStruct::la_la_la();\n-\n-}\n-fn priv_fn() { //~ ERROR: code is never used\n-    let unused_struct = PrivStruct;\n-}\n-fn used_fn() {}\n+static USED_STATIC: int = 0;\n \n pub type typ = ~UsedStruct4;\n pub struct PubStruct();\n@@ -59,6 +46,25 @@ pub enum pub_enum { foo1, bar1 }\n enum priv_enum { foo2, bar2 } //~ ERROR: code is never used\n enum used_enum { foo3, bar3 }\n \n+pub fn pub_fn() {\n+    used_fn();\n+    let used_struct1 = UsedStruct1 { x: 1 };\n+    let used_struct2 = UsedStruct2(1);\n+    let used_struct3 = UsedStruct3;\n+    let e = foo3;\n+    SemiUsedStruct::la_la_la();\n+\n+    let i = 1;\n+    match i {\n+        USED_STATIC => (),\n+        _ => ()\n+    }\n+}\n+fn priv_fn() { //~ ERROR: code is never used\n+    let unused_struct = PrivStruct;\n+}\n+fn used_fn() {}\n+\n fn foo() { //~ ERROR: code is never used\n     bar();\n     let unused_enum = foo2;"}, {"sha": "29d77959997f6ead55104d12acffdc7da3c5f37a", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=3d3a663d2530dd49fee235667e98f2767dfd1b57", "patch": "@@ -40,11 +40,27 @@ fn bar2() {\n pub fn pub_fn() {\n     let foo2_struct = Foo2;\n     foo2_struct.foo2();\n+\n+    blah::baz();\n }\n \n-// not warned because it's used in the parameter of `free` below\n-enum c_void {}\n+mod blah {\n+    use std::libc::size_t;\n+    // not warned because it's used in the parameter of `free` and return of\n+    // `malloc` below, which are also used.\n+    enum c_void {}\n+\n+    extern {\n+        fn free(p: *c_void);\n+        fn malloc(size: size_t) -> *c_void;\n+    }\n+\n+    pub fn baz() {\n+        unsafe { free(malloc(4)); }\n+    }\n+}\n \n+enum c_void {} //~ ERROR: code is never used\n extern {\n-    fn free(p: *c_void);\n+    fn free(p: *c_void); //~ ERROR: code is never used\n }"}, {"sha": "726d778c3bb2b7e0b4e0df27af1169ee12a6d377", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3a663d2530dd49fee235667e98f2767dfd1b57/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=3d3a663d2530dd49fee235667e98f2767dfd1b57", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[forbid(ctypes)];\n+#[allow(dead_code)];\n \n mod xx {\n     extern {"}]}