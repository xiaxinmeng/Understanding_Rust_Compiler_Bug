{"sha": "c0705c1f8189790207b6d53014cafd7ba3f62add", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNzA1YzFmODE4OTc5MDIwN2I2ZDUzMDE0Y2FmZDdiYTNmNjJhZGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:03:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:03:21Z"}, "message": "rollup merge of #21720: huonw/simd-cmp\n\nPreviously comparisons of SIMD types were always signed, even unsigned\ncomparisons, meaning 0xFFFF_FFFF_u32 < 0 inside a SIMD vector.\n\nFixes #21719.", "tree": {"sha": "98df4a7813bfe2a9e6e3c6767d4d1d40e6414301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98df4a7813bfe2a9e6e3c6767d4d1d40e6414301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0705c1f8189790207b6d53014cafd7ba3f62add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0705c1f8189790207b6d53014cafd7ba3f62add", "html_url": "https://github.com/rust-lang/rust/commit/c0705c1f8189790207b6d53014cafd7ba3f62add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0705c1f8189790207b6d53014cafd7ba3f62add/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac1a03d7422ba52749e4e513a46c8d2129c2c817", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1a03d7422ba52749e4e513a46c8d2129c2c817", "html_url": "https://github.com/rust-lang/rust/commit/ac1a03d7422ba52749e4e513a46c8d2129c2c817"}, {"sha": "76d66baf72ee075e7671286f513efb2ce9cc14bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d66baf72ee075e7671286f513efb2ce9cc14bc", "html_url": "https://github.com/rust-lang/rust/commit/76d66baf72ee075e7671286f513efb2ce9cc14bc"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "2559aa81d13bfcb4dec9441e27b15c01bbea1fca", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c0705c1f8189790207b6d53014cafd7ba3f62add/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0705c1f8189790207b6d53014cafd7ba3f62add/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=c0705c1f8189790207b6d53014cafd7ba3f62add", "patch": "@@ -623,7 +623,7 @@ pub fn compare_simd_types<'blk, 'tcx>(\n                     size: uint,\n                     op: ast::BinOp)\n                     -> ValueRef {\n-    match t.sty {\n+    let cmp = match t.sty {\n         ty::ty_float(_) => {\n             // The comparison operators for floating point vectors are challenging.\n             // LLVM outputs a `< size x i1 >`, but if we perform a sign extension\n@@ -632,25 +632,32 @@ pub fn compare_simd_types<'blk, 'tcx>(\n             cx.sess().bug(\"compare_simd_types: comparison operators \\\n                            not supported for floating point SIMD types\")\n         },\n-        ty::ty_uint(_) | ty::ty_int(_) => {\n-            let cmp = match op.node {\n-                ast::BiEq => llvm::IntEQ,\n-                ast::BiNe => llvm::IntNE,\n-                ast::BiLt => llvm::IntSLT,\n-                ast::BiLe => llvm::IntSLE,\n-                ast::BiGt => llvm::IntSGT,\n-                ast::BiGe => llvm::IntSGE,\n-                _ => cx.sess().bug(\"compare_simd_types: must be a comparison operator\"),\n-            };\n-            let return_ty = Type::vector(&type_of(cx.ccx(), t), size as u64);\n-            // LLVM outputs an `< size x i1 >`, so we need to perform a sign extension\n-            // to get the correctly sized type. This will compile to a single instruction\n-            // once the IR is converted to assembly if the SIMD instruction is supported\n-            // by the target architecture.\n-            SExt(cx, ICmp(cx, cmp, lhs, rhs), return_ty)\n+        ty::ty_uint(_) => match op.node {\n+            ast::BiEq => llvm::IntEQ,\n+            ast::BiNe => llvm::IntNE,\n+            ast::BiLt => llvm::IntULT,\n+            ast::BiLe => llvm::IntULE,\n+            ast::BiGt => llvm::IntUGT,\n+            ast::BiGe => llvm::IntUGE,\n+            _ => cx.sess().bug(\"compare_simd_types: must be a comparison operator\"),\n+        },\n+        ty::ty_int(_) => match op.node {\n+            ast::BiEq => llvm::IntEQ,\n+            ast::BiNe => llvm::IntNE,\n+            ast::BiLt => llvm::IntSLT,\n+            ast::BiLe => llvm::IntSLE,\n+            ast::BiGt => llvm::IntSGT,\n+            ast::BiGe => llvm::IntSGE,\n+            _ => cx.sess().bug(\"compare_simd_types: must be a comparison operator\"),\n         },\n         _ => cx.sess().bug(\"compare_simd_types: invalid SIMD type\"),\n-    }\n+    };\n+    let return_ty = Type::vector(&type_of(cx.ccx(), t), size as u64);\n+    // LLVM outputs an `< size x i1 >`, so we need to perform a sign extension\n+    // to get the correctly sized type. This will compile to a single instruction\n+    // once the IR is converted to assembly if the SIMD instruction is supported\n+    // by the target architecture.\n+    SExt(cx, ICmp(cx, cmp, lhs, rhs), return_ty)\n }\n \n // Iterates through the elements of a structural type."}, {"sha": "779e507f43dfdff3cd77aafb98dfa53c0682a084", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c0705c1f8189790207b6d53014cafd7ba3f62add/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0705c1f8189790207b6d53014cafd7ba3f62add/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=c0705c1f8189790207b6d53014cafd7ba3f62add", "patch": "@@ -55,17 +55,18 @@ pub fn main() {\n \n     // comparison operators\n \n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) == u32x4(3, 2, 1, 0), u32x4(0, !0, 0, 0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) != u32x4(3, 2, 1, 0), u32x4(!0, 0, !0, !0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) < u32x4(3, 2, 1, 0), u32x4(!0, 0, 0, 0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) <= u32x4(3, 2, 1, 0), u32x4(!0, !0, 0, 0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) >= u32x4(3, 2, 1, 0), u32x4(0, !0, !0, !0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) > u32x4(3, 2, 1, 0), u32x4(0, 0, !0, !0)));\n+    // check !0/-1 to ensure operators are using the correct signedness.\n+    assert!(eq_u32x4(u32x4(1, 2, 3, !0) == u32x4(3, 2, 1, 0), u32x4(0, !0, 0, 0)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, !0) != u32x4(3, 2, 1, 0), u32x4(!0, 0, !0, !0)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, !0) < u32x4(3, 2, 1, 0), u32x4(!0, 0, 0, 0)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, !0) <= u32x4(3, 2, 1, 0), u32x4(!0, !0, 0, 0)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, !0) >= u32x4(3, 2, 1, 0), u32x4(0, !0, !0, !0)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, !0) > u32x4(3, 2, 1, 0), u32x4(0, 0, !0, !0)));\n \n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) == i32x4(3, 2, 1, 0), i32x4(0, !0, 0, 0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) != i32x4(3, 2, 1, 0), i32x4(!0, 0, !0, !0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) < i32x4(3, 2, 1, 0), i32x4(!0, 0, 0, 0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) <= i32x4(3, 2, 1, 0), i32x4(!0, !0, 0, 0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) >= i32x4(3, 2, 1, 0), i32x4(0, !0, !0, !0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) > i32x4(3, 2, 1, 0), i32x4(0, 0, !0, !0)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, -1) == i32x4(3, 2, 1, 0), i32x4(0, !0, 0, 0)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, -1) != i32x4(3, 2, 1, 0), i32x4(!0, 0, !0, !0)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, -1) < i32x4(3, 2, 1, 0), i32x4(!0, 0, 0, !0)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, -1) <= i32x4(3, 2, 1, 0), i32x4(!0, !0, 0, !0)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, -1) >= i32x4(3, 2, 1, 0), i32x4(0, !0, !0, 0)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, -1) > i32x4(3, 2, 1, 0), i32x4(0, 0, !0, 0)));\n }"}]}