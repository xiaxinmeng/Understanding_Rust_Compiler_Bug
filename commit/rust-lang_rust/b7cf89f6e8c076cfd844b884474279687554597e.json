{"sha": "b7cf89f6e8c076cfd844b884474279687554597e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Y2Y4OWY2ZThjMDc2Y2ZkODQ0Yjg4NDQ3NDI3OTY4NzU1NDU5N2U=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T15:02:30Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T15:02:30Z"}, "message": "Add mul_add and next_after methods to Float", "tree": {"sha": "705c79935484af0a7f99bdd08b28adca4f6b5770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705c79935484af0a7f99bdd08b28adca4f6b5770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7cf89f6e8c076cfd844b884474279687554597e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cf89f6e8c076cfd844b884474279687554597e", "html_url": "https://github.com/rust-lang/rust/commit/b7cf89f6e8c076cfd844b884474279687554597e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7cf89f6e8c076cfd844b884474279687554597e/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc7107aa6ca78093cb81aed44170099b8fad68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc7107aa6ca78093cb81aed44170099b8fad68a", "html_url": "https://github.com/rust-lang/rust/commit/6cc7107aa6ca78093cb81aed44170099b8fad68a"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "cae26349af14eb8b90a877b4c40b1fa7ee8673ab", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7cf89f6e8c076cfd844b884474279687554597e/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cf89f6e8c076cfd844b884474279687554597e/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=b7cf89f6e8c076cfd844b884474279687554597e", "patch": "@@ -543,6 +543,22 @@ impl Float for f32 {\n     fn is_finite(&self) -> bool {\n         !(self.is_NaN() || self.is_infinite())\n     }\n+\n+    ///\n+    /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This\n+    /// produces a more accurate result with better performance than a separate multiplication\n+    /// operation followed by an add.\n+    ///\n+    #[inline(always)]\n+    fn mul_add(&self, a: f32, b: f32) -> f32 {\n+        mul_add(*self, a, b)\n+    }\n+\n+    /// Returns the next representable floating-point value in the direction of `other`\n+    #[inline(always)]\n+    fn next_after(&self, other: f32) -> f32 {\n+        nextafter(*self, other)\n+    }\n }\n \n //"}, {"sha": "d5b423edb2988a8ce21a372976acfc37aa95506a", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7cf89f6e8c076cfd844b884474279687554597e/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cf89f6e8c076cfd844b884474279687554597e/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=b7cf89f6e8c076cfd844b884474279687554597e", "patch": "@@ -583,6 +583,22 @@ impl Float for f64 {\n     fn is_finite(&self) -> bool {\n         !(self.is_NaN() || self.is_infinite())\n     }\n+\n+    ///\n+    /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This\n+    /// produces a more accurate result with better performance than a separate multiplication\n+    /// operation followed by an add.\n+    ///\n+    #[inline(always)]\n+    fn mul_add(&self, a: f64, b: f64) -> f64 {\n+        mul_add(*self, a, b)\n+    }\n+\n+    /// Returns the next representable floating-point value in the direction of `other`\n+    #[inline(always)]\n+    fn next_after(&self, other: f64) -> f64 {\n+        nextafter(*self, other)\n+    }\n }\n \n //"}, {"sha": "4ba5b0054909777f21748a10f06755397d0b5f7c", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7cf89f6e8c076cfd844b884474279687554597e/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cf89f6e8c076cfd844b884474279687554597e/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=b7cf89f6e8c076cfd844b884474279687554597e", "patch": "@@ -735,6 +735,22 @@ impl Float for float {\n     fn is_finite(&self) -> bool {\n         !(self.is_NaN() || self.is_infinite())\n     }\n+\n+    ///\n+    /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This\n+    /// produces a more accurate result with better performance than a separate multiplication\n+    /// operation followed by an add.\n+    ///\n+    #[inline(always)]\n+    fn mul_add(&self, a: float, b: float) -> float {\n+        mul_add(*self as f64, a as f64, b as f64) as float\n+    }\n+\n+    /// Returns the next representable floating-point value in the direction of `other`\n+    #[inline(always)]\n+    fn next_after(&self, other: float) -> float {\n+        nextafter(*self as f64, other as f64) as float\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "7da6107a0fb67f6e6f245d5369dae8b6e0d79706", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7cf89f6e8c076cfd844b884474279687554597e/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cf89f6e8c076cfd844b884474279687554597e/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=b7cf89f6e8c076cfd844b884474279687554597e", "patch": "@@ -105,6 +105,9 @@ pub trait Fractional: Num\n     fn recip(&self) -> Self;\n }\n \n+///\n+/// Defines constants and methods common to real numbers\n+///\n pub trait Real: Signed\n               + Fractional {\n     // FIXME (#5527): usages of `int` should be replaced with an associated\n@@ -237,8 +240,7 @@ pub trait Int: Integer\n              + BitCount {}\n \n ///\n-/// Primitive floating point numbers. This trait should only be implemented\n-/// for the `f32`, `f64`, and `float` types.\n+/// Primitive floating point numbers\n ///\n pub trait Float: Real\n                + Signed\n@@ -252,6 +254,9 @@ pub trait Float: Real\n     fn is_NaN(&self) -> bool;\n     fn is_infinite(&self) -> bool;\n     fn is_finite(&self) -> bool;\n+\n+    fn mul_add(&self, a: Self, b: Self) -> Self;\n+    fn next_after(&self, other: Self) -> Self;\n }\n \n ///"}]}