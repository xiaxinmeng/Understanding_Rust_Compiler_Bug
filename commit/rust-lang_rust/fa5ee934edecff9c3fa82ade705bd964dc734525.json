{"sha": "fa5ee934edecff9c3fa82ade705bd964dc734525", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNWVlOTM0ZWRlY2ZmOWMzZmE4MmFkZTcwNWJkOTY0ZGM3MzQ1MjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-28T02:24:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-28T02:24:18Z"}, "message": "libstd: Fix a bunch of resolve errors in tests. rs=fire", "tree": {"sha": "daa3fd7dbafa64db3921c7f314da9d76e9f77cff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa3fd7dbafa64db3921c7f314da9d76e9f77cff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa5ee934edecff9c3fa82ade705bd964dc734525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa5ee934edecff9c3fa82ade705bd964dc734525", "html_url": "https://github.com/rust-lang/rust/commit/fa5ee934edecff9c3fa82ade705bd964dc734525", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa5ee934edecff9c3fa82ade705bd964dc734525/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e26ca35b081e96d709f318e668e06209e89b95e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e26ca35b081e96d709f318e668e06209e89b95e2", "html_url": "https://github.com/rust-lang/rust/commit/e26ca35b081e96d709f318e668e06209e89b95e2"}], "stats": {"total": 131, "additions": 118, "deletions": 13}, "files": [{"sha": "e91d09fc0cc2dd145e3a375ae845172d99392a31", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -469,7 +469,13 @@ impl<T: Const Owned> &RWReadMode<T> {\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];\n-    use comm::*;\n+\n+    use core::oldcomm::*;\n+    use core::option::{Some, None};\n+    use core::option;\n+    use core::pipes;\n+    use core::task;\n+    use core::vec;\n \n     #[test]\n     fn manually_share_arc() {"}, {"sha": "e817e6e160f7a53ecc3ddad5e5afca6c51e2ba6c", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -34,6 +34,7 @@\n \n #[forbid(deprecated_mode)];\n \n+use arena;\n use list;\n use list::{List, Cons, Nil};\n "}, {"sha": "db3991a1d3bedf1c4232ee4c65148c3a7c01fe20", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -153,6 +153,9 @@ impl ~str: FromBase64 {\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];\n+\n+    use core::str;\n+\n     #[test]\n     fn test_to_base64() {\n         assert (~\"\").to_base64()       == ~\"\";"}, {"sha": "990ccb3a16312bc6fcba2a1a7ac7cd227fe6b863", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -577,6 +577,11 @@ impl Bitv: ops::Index<uint,bool> {\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];\n+\n+    use bitv;\n+\n+    use core::uint;\n+\n     #[test]\n     fn test_to_str() {\n         let zerolen = Bitv(0u, false);"}, {"sha": "aa9e864adfdcaac928f1446027ce86c39987314c", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -152,7 +152,8 @@ pub unsafe fn ptr<T>(t: CVec<T>) -> *mut T {\n \n #[cfg(test)]\n mod tests {\n-    use libc::*;\n+    use core::libc::*;\n+    use core::libc;\n \n     fn malloc(n: size_t) -> CVec<u8> {\n         let mem = libc::malloc(n);"}, {"sha": "e7042ffa89f057781d1eff323be88ea521d1f83a", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -131,6 +131,8 @@ pub fn create<T: Copy>() -> Deque<T> {\n \n #[cfg(test)]\n mod tests {\n+    use deque;\n+\n     #[test]\n     fn test_simple() {\n         let d: deque::Deque<int> = deque::create::<int>();"}, {"sha": "0f49507cea4dc038224b045f9e2aa640ffe085ec", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -663,6 +663,12 @@ pub mod writer {\n \n #[cfg(test)]\n mod tests {\n+    use ebml::reader;\n+    use ebml::writer;\n+    use serialize;\n+\n+    use core::io;\n+\n     #[test]\n     fn test_option_int() {\n         fn test_v(v: Option<int>) {"}, {"sha": "3c1dec844ea8596577c991f1359e29647b7328e8", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -685,11 +685,18 @@ mod test {\n \n     use flatpipes::flatteners::*;\n     use flatpipes::bytepipes::*;\n+    use flatpipes::pod;\n+    use flatpipes::serial;\n+    use flatpipes::util::BufReader;\n+    use net::ip;\n+    use net::tcp::TcpSocketBuf;\n \n     use core::dvec::DVec;\n-    use io::BytesReader;\n-    use util::BufReader;\n-    use net::tcp::TcpSocketBuf;\n+    use core::int;\n+    use core::io::BytesReader;\n+    use core::io;\n+    use core::sys;\n+    use core::task;\n \n     #[test]\n     fn test_serializing_memory_stream() {"}, {"sha": "3d9ee0d3d12965109390fe4721568671d0f394b9", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -634,8 +634,11 @@ pub mod groups {\n mod tests {\n     #[legacy_exports];\n     use opt = getopts;\n-    use result::{Err, Ok};\n     use getopts::groups::OptGroup;\n+    use getopts::groups;\n+\n+    use core::result::{Err, Ok};\n+    use core::result;\n \n     fn check_fail_type(f: Fail_, ft: FailType) {\n         match f {"}, {"sha": "44cd4fe44491a721255494aecd7e24a0ae6018b9", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -1193,6 +1193,9 @@ impl Error: to_str::ToStr {\n \n #[cfg(test)]\n mod tests {\n+    use core::result;\n+    use core::send_map::linear;\n+\n     fn mk_object(items: &[(~str, Json)]) -> Json {\n         let mut d = ~linear::LinearMap();\n "}, {"sha": "4a7574afd9f0797b79b6534a28f3cf99ea18c776", "filename": "src/libstd/list.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -162,6 +162,10 @@ pub pure fn each<T>(l: @List<T>, f: fn(&T) -> bool) {\n mod tests {\n     #[legacy_exports];\n \n+    use list;\n+\n+    use core::option;\n+\n     #[test]\n     fn test_is_empty() {\n         let empty : @list::List<int> = from_vec(~[]);"}, {"sha": "b6c7c8be5a923445d28a9a44feab484b9267f1ba", "filename": "src/libstd/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -613,6 +613,10 @@ impl<K: Eq IterBytes Hash Copy, V: Copy> @Mut<LinearMap<K, V>>:\n \n #[cfg(test)]\n mod tests {\n+    use map;\n+\n+    use core::option;\n+    use core::uint;\n \n     #[test]\n     fn test_simple() {"}, {"sha": "7d1806d931e6d867be5b4065d0cef39ed868b0ad", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -1259,6 +1259,12 @@ pub mod node {\n \n #[cfg(test)]\n mod tests {\n+    use rope::iterator;\n+    use rope::node;\n+\n+    use core::option;\n+    use core::str;\n+    use core::vec;\n \n     //Utility function, used for sanity check\n     fn rope_to_string(r: Rope) -> ~str {"}, {"sha": "ef3969a376b1078559326a5650c38111655e3a90", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -276,6 +276,11 @@ pub fn sha1() -> Sha1 {\n mod tests {\n     #[legacy_exports];\n \n+    use sha1;\n+\n+    use core::str;\n+    use core::vec;\n+\n     #[test]\n     fn test() unsafe {\n         type Test = {input: ~str, output: ~[u8]};"}, {"sha": "a6c14516af2cdb00657080e73afd26721c8e3cb0", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -19,8 +19,8 @@ use map::Map;\n \n use core::dvec::DVec;\n use core::ops;\n-use core::option;\n use core::option::{Some, None};\n+use core::option;\n \n // FIXME (#2347): Should not be @; there's a bug somewhere in rustc that\n // requires this to be.\n@@ -168,6 +168,8 @@ pub fn as_map<V: Copy>(s: SmallIntMap<V>) -> map::Map<uint, V> {\n \n #[cfg(test)]\n mod tests {\n+    use core::option::None;\n+    use core::option;\n \n     #[test]\n     fn test_insert_with_key() {"}, {"sha": "e557730643a2fbca575317515f4ca1e13ce51140", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -968,6 +968,9 @@ mod test_tim_sort {\n \n #[cfg(test)]\n mod big_tests {\n+    use core::rand;\n+    use core::task;\n+    use core::vec;\n \n     #[test]\n     fn test_unique() {"}, {"sha": "f9afcc49bc15ddd318aa84959ddb4f7d3baaaa65", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -708,6 +708,12 @@ impl &RWlockReadMode {\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];\n+\n+    use core::pipes;\n+    use core::ptr;\n+    use core::result;\n+    use core::task;\n+\n     /************************************************************************\n      * Semaphore tests\n      ************************************************************************/"}, {"sha": "176953663ebfbf6a0bd2ccceb0c059b8401be572", "filename": "src/libstd/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -425,6 +425,11 @@ fn calc_result(test: &TestDesc, task_succeeded: bool) -> TestResult {\n mod tests {\n     #[legacy_exports];\n \n+    use core::either;\n+    use core::oldcomm;\n+    use core::option;\n+    use core::vec;\n+\n     #[test]\n     fn do_not_run_ignored_tests() {\n         fn f() { fail; }"}, {"sha": "7c586c3fd4e210a61de4c509812adb26504c3a88", "filename": "src/libstd/time.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -857,6 +857,14 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n mod tests {\n     #[legacy_exports];\n \n+    use core::float;\n+    use core::os;\n+    use core::result;\n+    use core::str;\n+    use core::u64;\n+    use core::uint;\n+    use core::vec;\n+\n     #[test]\n     fn test_get_time() {\n         const some_recent_date: i64 = 1325376000i64; // 2012-01-01T00:00:00Z\n@@ -904,7 +912,7 @@ mod tests {\n         os::setenv(~\"TZ\", ~\"America/Los_Angeles\");\n         tzset();\n \n-        let time = Timespec::new(1234567890, 54321);\n+        let time = ::time::Timespec::new(1234567890, 54321);\n         let utc = at_utc(time);\n \n         assert utc.tm_sec == 30_i32;\n@@ -926,7 +934,7 @@ mod tests {\n         os::setenv(~\"TZ\", ~\"America/Los_Angeles\");\n         tzset();\n \n-        let time = Timespec::new(1234567890, 54321);\n+        let time = ::time::Timespec::new(1234567890, 54321);\n         let local = at(time);\n \n         error!(\"time_at: %?\", local);\n@@ -955,7 +963,7 @@ mod tests {\n         os::setenv(~\"TZ\", ~\"America/Los_Angeles\");\n         tzset();\n \n-        let time = Timespec::new(1234567890, 54321);\n+        let time = ::time::Timespec::new(1234567890, 54321);\n         let utc = at_utc(time);\n \n         assert utc.to_timespec() == time;\n@@ -967,7 +975,7 @@ mod tests {\n         os::setenv(~\"TZ\", ~\"America/Los_Angeles\");\n         tzset();\n \n-        let time = Timespec::new(1234567890, 54321);\n+        let time = ::time::Timespec::new(1234567890, 54321);\n         let utc = at_utc(time);\n         let local = at(time);\n \n@@ -1140,7 +1148,7 @@ mod tests {\n         os::setenv(~\"TZ\", ~\"America/Los_Angeles\");\n         tzset();\n \n-        let time = Timespec::new(1234567890, 54321);\n+        let time = ::time::Timespec::new(1234567890, 54321);\n         let utc   = at_utc(time);\n         let local = at(time);\n \n@@ -1156,7 +1164,7 @@ mod tests {\n         os::setenv(~\"TZ\", ~\"America/Los_Angeles\");\n         tzset();\n \n-        let time = Timespec::new(1234567890, 54321);\n+        let time = ::time::Timespec::new(1234567890, 54321);\n         let utc = at_utc(time);\n         let local = at(time);\n "}, {"sha": "038486f2b902d1fa5b155d462dcb42d61ad79864", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -163,6 +163,14 @@ extern fn delayed_send_close_cb(handle: *uv::ll::uv_timer_t) unsafe {\n #[cfg(test)]\n mod test {\n     #[legacy_exports];\n+\n+    use uv;\n+\n+    use core::iter;\n+    use core::oldcomm;\n+    use core::rand;\n+    use core::task;\n+\n     #[test]\n     fn test_gl_timer_simple_sleep_test() {\n         let hl_loop = uv::global_loop::get();"}, {"sha": "caccb763ee9d6d40903ddbb042494412d56b0072", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -107,6 +107,8 @@ pub fn equals<K: Copy Eq Ord, V: Copy Eq>(t1: &const TreeEdge<K, V>,\n mod tests {\n     #[legacy_exports];\n \n+    use core::str;\n+\n     #[test]\n     fn init_treemap() { let _m = TreeMap::<int, int>(); }\n "}, {"sha": "8a04059754a985bd880caf169171072fb75ff9cc", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -123,6 +123,14 @@ fn spawn_loop() -> IoTask {\n \n #[cfg(test)]\n mod test {\n+    use uv::iotask;\n+    use uv::ll;\n+\n+    use core::iter;\n+    use core::libc;\n+    use core::oldcomm;\n+    use core::ptr;\n+\n     extern fn simple_timer_close_cb(timer_ptr: *ll::uv_timer_t) unsafe {\n         let exit_ch_ptr = ll::get_data_for_uv_handle(\n             timer_ptr as *libc::c_void) as *oldcomm::Chan<bool>;"}, {"sha": "c1c455c3a115c41ec7b0540eb4d484786f486d59", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -176,6 +176,11 @@ extern fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n \n #[cfg(test)]\n mod test {\n+    use uv::ll;\n+\n+    use core::oldcomm;\n+    use core::ptr;\n+\n     extern fn async_close_cb(handle: *ll::uv_async_t) unsafe {\n         log(debug, fmt!(\"async_close_cb handle %?\", handle));\n         let exit_ch = (*(ll::get_data_for_uv_handle(handle)"}, {"sha": "3631556c2ba005aea370a28884209d273620e5dd", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ee934edecff9c3fa82ade705bd964dc734525/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=fa5ee934edecff9c3fa82ade705bd964dc734525", "patch": "@@ -17,6 +17,7 @@ use core::io;\n use core::option;\n use core::pipes::{recv, oneshot, PortOne, send_one};\n use core::result;\n+use core::run;\n use core::send_map::linear::LinearMap;\n use core::task;\n use core::to_bytes;\n@@ -331,6 +332,7 @@ fn unwrap<T:Owned\n #[test]\n fn test() {\n     use io::WriterUtil;\n+\n     let db = @Database { a: () };\n     let lg = @Logger { a: () };\n     let cfg = @LinearMap();"}]}