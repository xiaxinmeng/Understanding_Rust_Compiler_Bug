{"sha": "21f37a6d9e45055f8a9bcf699f923d193c61fe82", "node_id": "C_kwDOAAsO6NoAKDIxZjM3YTZkOWU0NTA1NWY4YTliY2Y2OTlmOTIzZDE5M2M2MWZlODI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-17T12:46:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-17T12:46:43Z"}, "message": "Allow inlay hint tooltips to trigger hovers", "tree": {"sha": "b8d0914d947fb7961eb1a220f520317ece281abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d0914d947fb7961eb1a220f520317ece281abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f37a6d9e45055f8a9bcf699f923d193c61fe82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f37a6d9e45055f8a9bcf699f923d193c61fe82", "html_url": "https://github.com/rust-lang/rust/commit/21f37a6d9e45055f8a9bcf699f923d193c61fe82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f37a6d9e45055f8a9bcf699f923d193c61fe82/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ec0101853f4821a47279144669fc4ede713bed", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ec0101853f4821a47279144669fc4ede713bed", "html_url": "https://github.com/rust-lang/rust/commit/a2ec0101853f4821a47279144669fc4ede713bed"}], "stats": {"total": 140, "additions": 80, "deletions": 60}, "files": [{"sha": "e84338f0c82144516736aaf6d569c5aa65f38d9a", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=21f37a6d9e45055f8a9bcf699f923d193c61fe82", "patch": "@@ -48,7 +48,7 @@ pub enum ReborrowHints {\n pub enum InlayKind {\n     BindingModeHint,\n     ChainingHint,\n-    ClosingBraceHint(Option<TextSize>),\n+    ClosingBraceHint,\n     ClosureReturnTypeHint,\n     GenericParamListHint,\n     ImplicitReborrowHint,\n@@ -57,11 +57,19 @@ pub enum InlayKind {\n     TypeHint,\n }\n \n+// FIXME: This should live somewhere more general\n+#[derive(Debug)]\n+pub enum RangeOrOffset {\n+    Range(TextRange),\n+    Offset(TextSize),\n+}\n+\n #[derive(Debug)]\n pub struct InlayHint {\n     pub range: TextRange,\n     pub kind: InlayKind,\n     pub label: String,\n+    pub hover_trigger: Option<RangeOrOffset>,\n }\n \n // Feature: Inlay Hints\n@@ -253,8 +261,9 @@ fn closing_brace_hints(\n \n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n-        kind: InlayKind::ClosingBraceHint(name_offset),\n+        kind: InlayKind::ClosingBraceHint,\n         label,\n+        hover_trigger: name_offset.map(RangeOrOffset::Offset),\n     });\n \n     None\n@@ -273,6 +282,7 @@ fn lifetime_fn_hints(\n         range: t.text_range(),\n         kind: InlayKind::LifetimeHint,\n         label,\n+        hover_trigger: None,\n     };\n \n     let param_list = func.param_list()?;\n@@ -431,6 +441,7 @@ fn lifetime_fn_hints(\n             range: func.name()?.syntax().text_range(),\n             kind: InlayKind::GenericParamListHint,\n             label: format!(\"<{}>\", allocated_lifetimes.iter().format(\", \"),).into(),\n+            hover_trigger: None,\n         }),\n     }\n     Some(())\n@@ -464,6 +475,7 @@ fn closure_ret_hints(\n         kind: InlayKind::ClosureReturnTypeHint,\n         label: hint_iterator(sema, &famous_defs, config, &ty)\n             .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string()),\n+        hover_trigger: None,\n     });\n     Some(())\n }\n@@ -490,6 +502,7 @@ fn reborrow_hints(\n         range: expr.syntax().text_range(),\n         kind: InlayKind::ImplicitReborrowHint,\n         label: label.to_string(),\n+        hover_trigger: None,\n     });\n     Some(())\n }\n@@ -548,6 +561,7 @@ fn chaining_hints(\n                 label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n                     ty.display_truncated(sema.db, config.max_length).to_string()\n                 }),\n+                hover_trigger: Some(RangeOrOffset::Range(expr.syntax().text_range())),\n             });\n         }\n     }\n@@ -588,6 +602,8 @@ fn param_name_hints(\n             range,\n             kind: InlayKind::ParameterHint,\n             label: param_name.into(),\n+            // FIXME: Show hover for parameter\n+            hover_trigger: None,\n         });\n \n     acc.extend(hints);\n@@ -613,7 +629,12 @@ fn binding_mode_hints(\n             (true, false) => \"&\",\n             _ => return,\n         };\n-        acc.push(InlayHint { range, kind: InlayKind::BindingModeHint, label: r.to_string() });\n+        acc.push(InlayHint {\n+            range,\n+            kind: InlayKind::BindingModeHint,\n+            label: r.to_string(),\n+            hover_trigger: None,\n+        });\n     });\n     match pat {\n         ast::Pat::IdentPat(pat) if pat.ref_token().is_none() && pat.mut_token().is_none() => {\n@@ -623,7 +644,12 @@ fn binding_mode_hints(\n                 hir::BindingMode::Ref(Mutability::Mut) => \"ref mut\",\n                 hir::BindingMode::Ref(Mutability::Shared) => \"ref\",\n             };\n-            acc.push(InlayHint { range, kind: InlayKind::BindingModeHint, label: bm.to_string() });\n+            acc.push(InlayHint {\n+                range,\n+                kind: InlayKind::BindingModeHint,\n+                label: bm.to_string(),\n+                hover_trigger: None,\n+            });\n         }\n         _ => (),\n     }\n@@ -673,6 +699,7 @@ fn bind_pat_hints(\n         },\n         kind: InlayKind::TypeHint,\n         label,\n+        hover_trigger: pat.name().map(|it| it.syntax().text_range()).map(RangeOrOffset::Range),\n     });\n \n     Some(())"}, {"sha": "071da8097c50b95f56b0d8f47f505908a2fa1c35", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=21f37a6d9e45055f8a9bcf699f923d193c61fe82", "patch": "@@ -80,7 +80,9 @@ pub use crate::{\n     folding_ranges::{Fold, FoldKind},\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n-    inlay_hints::{InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints, ReborrowHints},\n+    inlay_hints::{\n+        InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints, RangeOrOffset, ReborrowHints,\n+    },\n     join_lines::JoinLinesConfig,\n     markup::Markup,\n     moniker::{MonikerKind, MonikerResult, PackageInformation},"}, {"sha": "510b37bb6f631acc0de999914e3f144ce33cea67", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=21f37a6d9e45055f8a9bcf699f923d193c61fe82", "patch": "@@ -1360,46 +1360,34 @@ pub(crate) fn handle_inlay_hints_resolve(\n     mut hint: InlayHint,\n ) -> Result<InlayHint> {\n     let _p = profile::span(\"handle_inlay_hints_resolve\");\n-    let succ = (|| {\n-        let data = match hint.data.take() {\n-            Some(it) => it,\n-            None => return Ok(None),\n-        };\n+    let data = match hint.data.take() {\n+        Some(it) => it,\n+        None => return Ok(hint),\n+    };\n \n-        let resolve_data: lsp_ext::InlayHintResolveData = serde_json::from_value(data)?;\n+    let resolve_data: lsp_ext::InlayHintResolveData = serde_json::from_value(data)?;\n \n-        let file_range = from_proto::file_range(\n-            &snap,\n-            resolve_data.position.text_document,\n-            Range::new(resolve_data.position.position, resolve_data.position.position),\n-        )?;\n-        let info = match snap.analysis.hover(&snap.config.hover(), file_range)? {\n-            None => return Ok(None),\n-            Some(info) => info,\n-        };\n+    let file_range = from_proto::file_range(\n+        &snap,\n+        resolve_data.text_document,\n+        match resolve_data.position {\n+            PositionOrRange::Position(pos) => Range::new(pos, pos),\n+            PositionOrRange::Range(range) => range,\n+        },\n+    )?;\n+    let info = match snap.analysis.hover(&snap.config.hover(), file_range)? {\n+        None => return Ok(hint),\n+        Some(info) => info,\n+    };\n \n-        let markup_kind =\n-            snap.config.hover().documentation.map_or(ide::HoverDocFormat::Markdown, |kind| kind);\n-\n-        // FIXME: hover actions?\n-        hint.tooltip = Some(lsp_types::InlayHintTooltip::MarkupContent(to_proto::markup_content(\n-            info.info.markup,\n-            markup_kind,\n-        )));\n-        Result::<_, crate::Error>::Ok(Some(()))\n-    })()?\n-    .is_some();\n-\n-    if !succ {\n-        if let lsp_types::InlayHintLabel::String(s) = &hint.label {\n-            hint.tooltip =\n-                Some(lsp_types::InlayHintTooltip::MarkupContent(lsp_types::MarkupContent {\n-                    kind: lsp_types::MarkupKind::PlainText,\n-                    value: s.clone(),\n-                }));\n-        }\n-    }\n+    let markup_kind =\n+        snap.config.hover().documentation.map_or(ide::HoverDocFormat::Markdown, |kind| kind);\n \n+    // FIXME: hover actions?\n+    hint.tooltip = Some(lsp_types::InlayHintTooltip::MarkupContent(to_proto::markup_content(\n+        info.info.markup,\n+        markup_kind,\n+    )));\n     Ok(hint)\n }\n "}, {"sha": "c1b230bd9dff2dbd9e8eb8d0cd55888568255449", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=21f37a6d9e45055f8a9bcf699f923d193c61fe82", "patch": "@@ -520,7 +520,8 @@ pub struct CompletionResolveData {\n \n #[derive(Debug, Serialize, Deserialize)]\n pub struct InlayHintResolveData {\n-    pub position: lsp_types::TextDocumentPositionParams,\n+    pub text_document: TextDocumentIdentifier,\n+    pub position: PositionOrRange,\n }\n \n #[derive(Debug, Serialize, Deserialize)]"}, {"sha": "6817090a8bc3cb9577a90d616e1f0802fec179b1", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f37a6d9e45055f8a9bcf699f923d193c61fe82/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=21f37a6d9e45055f8a9bcf699f923d193c61fe82", "patch": "@@ -432,11 +432,11 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ChainingHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n-            | InlayKind::ClosingBraceHint(_) => position(line_index, inlay_hint.range.end()),\n+            | InlayKind::ClosingBraceHint => position(line_index, inlay_hint.range.end()),\n         },\n         padding_left: Some(match inlay_hint.kind {\n             InlayKind::TypeHint => !render_colons,\n-            InlayKind::ChainingHint | InlayKind::ClosingBraceHint(_) => true,\n+            InlayKind::ChainingHint | InlayKind::ClosingBraceHint => true,\n             InlayKind::BindingModeHint\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n@@ -450,15 +450,15 @@ pub(crate) fn inlay_hint(\n             | InlayKind::GenericParamListHint\n             | InlayKind::ImplicitReborrowHint\n             | InlayKind::TypeHint\n-            | InlayKind::ClosingBraceHint(_) => false,\n+            | InlayKind::ClosingBraceHint => false,\n             InlayKind::BindingModeHint => inlay_hint.label != \"&\",\n             InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n         }),\n         label: lsp_types::InlayHintLabel::String(match inlay_hint.kind {\n             InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n             InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n             InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n-            _ => inlay_hint.label,\n+            _ => inlay_hint.label.clone(),\n         }),\n         kind: match inlay_hint.kind {\n             InlayKind::ParameterHint => Some(lsp_types::InlayHintKind::PARAMETER),\n@@ -469,22 +469,24 @@ pub(crate) fn inlay_hint(\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n             | InlayKind::ImplicitReborrowHint\n-            | InlayKind::ClosingBraceHint(_) => None,\n+            | InlayKind::ClosingBraceHint => None,\n         },\n         text_edits: None,\n-        tooltip: None,\n-        data: match inlay_hint.kind {\n-            InlayKind::ClosingBraceHint(Some(offset)) => Some(\n-                to_value(lsp_ext::InlayHintResolveData {\n-                    position: lsp_types::TextDocumentPositionParams {\n-                        text_document: text_document.clone(),\n-                        position: position(line_index, offset),\n-                    },\n-                })\n-                .unwrap(),\n-            ),\n-            _ => None,\n-        },\n+        tooltip: Some(lsp_types::InlayHintTooltip::String(inlay_hint.label)),\n+        data: inlay_hint.hover_trigger.map(|range_or_offset| {\n+            to_value(lsp_ext::InlayHintResolveData {\n+                text_document: text_document.clone(),\n+                position: match range_or_offset {\n+                    ide::RangeOrOffset::Offset(offset) => {\n+                        lsp_ext::PositionOrRange::Position(position(line_index, offset))\n+                    }\n+                    ide::RangeOrOffset::Range(text_range) => {\n+                        lsp_ext::PositionOrRange::Range(range(line_index, text_range))\n+                    }\n+                },\n+            })\n+            .unwrap()\n+        }),\n     }\n }\n "}]}