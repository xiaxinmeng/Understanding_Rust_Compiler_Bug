{"sha": "66e2857253ff9bc8ce299398ad5bb346d64e3fc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZTI4NTcyNTNmZjliYzhjZTI5OTM5OGFkNWJiMzQ2ZDY0ZTNmYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-14T12:55:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-14T12:55:22Z"}, "message": "auto merge of #7781 : dotdash/rust/glue, r=huonw\n\nWe used to have concrete types in glue functions, but the way we used\r\nto implement that broke inlining of those functions. To fix that, we\r\nconverted all glue to just take an i8* and always casted to that type.\r\n\r\nThe problem with the old implementation was that we made a wrong\r\nassumption about the glue functions, taking it for granted that they\r\nalways take an i8*, because that's the function type expected by the\r\nTyDesc fields. Therefore, we always ended up with some kind of cast.\r\n\r\nBut actually, we can initially have the glue with concrete types and\r\nonly cast the functions to the generic type once we actually emit the\r\nTyDesc data.\r\n\r\nThat means that for glue calls that can be statically resolved, we don't\r\nneed any casts, unless the glue uses a simplified type. In that case we\r\ncast the argument. And for glue calls that are resolved at runtime, we\r\ncast the argument to i8*, because that's what the glue function in the\r\nTyDesc expects.\r\n\r\nSince most of out glue calls are static, this saves a lot of bitcasts.\r\nThe size of the unoptimized librustc.ll goes down by 240k lines.", "tree": {"sha": "ed3a392c8341754c2f21ce3affd296ec6bc8b839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3a392c8341754c2f21ce3affd296ec6bc8b839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66e2857253ff9bc8ce299398ad5bb346d64e3fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66e2857253ff9bc8ce299398ad5bb346d64e3fc3", "html_url": "https://github.com/rust-lang/rust/commit/66e2857253ff9bc8ce299398ad5bb346d64e3fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66e2857253ff9bc8ce299398ad5bb346d64e3fc3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51cb98443cfd053f3d2bdb26465fdb0c9d3a0f74", "url": "https://api.github.com/repos/rust-lang/rust/commits/51cb98443cfd053f3d2bdb26465fdb0c9d3a0f74", "html_url": "https://github.com/rust-lang/rust/commit/51cb98443cfd053f3d2bdb26465fdb0c9d3a0f74"}, {"sha": "e56b3691c87c24fc335fa8a293f1bf2e13a01ad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e56b3691c87c24fc335fa8a293f1bf2e13a01ad9", "html_url": "https://github.com/rust-lang/rust/commit/e56b3691c87c24fc335fa8a293f1bf2e13a01ad9"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "60efe72fd13a8b78069e9c72620c679475400c2f", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/66e2857253ff9bc8ce299398ad5bb346d64e3fc3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e2857253ff9bc8ce299398ad5bb346d64e3fc3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=66e2857253ff9bc8ce299398ad5bb346d64e3fc3", "patch": "@@ -230,7 +230,7 @@ pub fn lazily_emit_tydesc_glue(ccx: @mut CrateContext,\n                                field: uint,\n                                ti: @mut tydesc_info) {\n     let _icx = push_ctxt(\"lazily_emit_tydesc_glue\");\n-    let llfnty = Type::glue_fn();\n+    let llfnty = Type::glue_fn(type_of::type_of(ccx, ti.ty).ptr_to());\n \n     if lazily_emit_simplified_tydesc_glue(ccx, field, ti) {\n         return;\n@@ -323,7 +323,20 @@ pub fn call_tydesc_glue_full(bcx: block,\n       }\n     };\n \n-    let llrawptr = PointerCast(bcx, v, Type::i8p());\n+    // When static type info is available, avoid casting parameter unless the\n+    // glue is using a simplified type, because the function already has the\n+    // right type. Otherwise cast to generic pointer.\n+    let llrawptr = if static_ti.is_none() || static_glue_fn.is_none() {\n+        PointerCast(bcx, v, Type::i8p())\n+    } else {\n+        let ty = static_ti.get().ty;\n+        let simpl = simplified_glue_type(ccx.tcx, field, ty);\n+        if simpl != ty {\n+            PointerCast(bcx, v, type_of(ccx, simpl).ptr_to())\n+        } else {\n+            v\n+        }\n+    };\n \n     let llfn = {\n         match static_glue_fn {\n@@ -709,13 +722,14 @@ pub fn make_generic_glue_inner(ccx: @mut CrateContext,\n     // requirement since in many contexts glue is invoked indirectly and\n     // the caller has no idea if it's dealing with something that can be\n     // passed by value.\n+    //\n+    // llfn is expected be declared to take a parameter of the appropriate\n+    // type, so we don't need to explicitly cast the function parameter.\n \n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n     let rawptr0_arg = fcx.arg_pos(0u);\n     let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, rawptr0_arg as c_uint) };\n-    let llty = type_of(ccx, t);\n-    let llrawptr0 = PointerCast(bcx, llrawptr0, llty.ptr_to());\n     let bcx = helper(bcx, llrawptr0, t);\n \n     finish_fn(fcx, lltop, bcx);"}, {"sha": "67df6f38b3acc6b430bd6f99f1d70f16e8a7f620", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66e2857253ff9bc8ce299398ad5bb346d64e3fc3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e2857253ff9bc8ce299398ad5bb346d64e3fc3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=66e2857253ff9bc8ce299398ad5bb346d64e3fc3", "patch": "@@ -187,20 +187,20 @@ impl Type {\n             None => ()\n         }\n \n-        let ty = Type::glue_fn();\n+        let ty = Type::glue_fn(Type::i8p());\n         cx.tn.associate_type(\"glue_fn\", &ty);\n \n         return ty;\n     }\n \n-    pub fn glue_fn() -> Type {\n-        Type::func([ Type::nil().ptr_to(), Type::i8p() ],\n+    pub fn glue_fn(t: Type) -> Type {\n+        Type::func([ Type::nil().ptr_to(), t ],\n             &Type::void())\n     }\n \n     pub fn tydesc(arch: Architecture) -> Type {\n         let mut tydesc = Type::named_struct(\"tydesc\");\n-        let glue_fn_ty = Type::glue_fn().ptr_to();\n+        let glue_fn_ty = Type::glue_fn(Type::i8p()).ptr_to();\n \n         let int_ty = Type::int(arch);\n "}]}