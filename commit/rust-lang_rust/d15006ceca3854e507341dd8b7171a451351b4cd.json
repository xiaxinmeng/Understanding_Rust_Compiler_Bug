{"sha": "d15006ceca3854e507341dd8b7171a451351b4cd", "node_id": "C_kwDOAAsO6NoAKGQxNTAwNmNlY2EzODU0ZTUwNzM0MWRkOGI3MTcxYTQ1MTM1MWI0Y2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-18T20:50:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-18T20:50:46Z"}, "message": "Rollup merge of #94295 - Urgau:cfg-always-eval-all-predicate, r=petrochenkov\n\nAlways evaluate all cfg predicate in all() and any()\n\nThis pull-request adjust the handling of the `all()` and `any()` to always evaluate every cfg predicate because not doing so result in accepting incorrect `cfg`:\n\n```rust\n#[cfg(any(unix, foo::bar))] // Should error on foo::bar, but does not on unix platform (but does on non unix platform)\nfn foo1() {}\n\n#[cfg(all(foo, foo::bar))] // Should error on foo::bar, but does not\nfn foo2() {}\n\n#[cfg(all(foo::bar, foo))] // Correctly error on foo::bar\nfn foo3() {}\n\n#[cfg(any(foo::bar, foo))] // Correctly error on foo::bar\nfn foo4() {}\n```\nThis pull-request take the side to directly turn it into a hard error instead of having a future incompatibility lint because the combination to get this incorrect behavior is unusual and highly probable that some code have this without noticing.\n\nA [search](https://cs.github.com/?scopeName=All+repos&scope=&q=lang%3Arust+%2Fany%5C%28%5Ba-zA-Z%5D%2C+%5Ba-zA-Z%5D%2B%3A%3A%5Ba-zA-Z%5D%2B%2F) on Github reveal no such instance nevertheless a Crater run should probably be done before merging this.\n\nThis was discover in https://github.com/rust-lang/rust/pull/94175 when trying to lint on the second predicate. Also note that this seems to have being introduce with Rust 1.27.0: https://rust.godbolt.org/z/KnfqKv15f.\n\nr? `@petrochenkov`", "tree": {"sha": "bb4bbd1871d59189f449465b21fc9dc284df1db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4bbd1871d59189f449465b21fc9dc284df1db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d15006ceca3854e507341dd8b7171a451351b4cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNPCmCRBK7hj4Ov3rIwAArrQIAIbi6Y/RVcq56bHArpRgb5nU\nrVlDJDorVmABRkf/Ju8JTpzl05CAojeuH9auitiZ2sKHpbxk7d7hhPtqBB4Ovf2N\nlO6I8ZMvQMAinsp/QEt2t2iXY/oQCqWvrmt4TKWSl0DiLzqkzceO6/bInubII6Js\nyPYaEQ/LiCDFiZV7ftlW1/R6mI5wRX0Y84Gu+5qmjbAt4eG0wEUX5+wi22Q7M9XE\nxyEiDwaUt8iUw0S5yrS+Dj9ae9hP4qbA0J0xd9JPGlqLvNKTn3Shg0/DZThaQPif\n9/S84hF1qEDdSKsxmCO/pijMgDVZliGgCyrqy5Y72/xtwYF/3mb5BspXaMvjJ6U=\n=bCdH\n-----END PGP SIGNATURE-----\n", "payload": "tree bb4bbd1871d59189f449465b21fc9dc284df1db2\nparent c183d4a510a0007923354bec8ec2ea4d23d92f7d\nparent f57cc8ca5cd344a6111650a8ba4744b4e4859da8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647636646 +0100\ncommitter GitHub <noreply@github.com> 1647636646 +0100\n\nRollup merge of #94295 - Urgau:cfg-always-eval-all-predicate, r=petrochenkov\n\nAlways evaluate all cfg predicate in all() and any()\n\nThis pull-request adjust the handling of the `all()` and `any()` to always evaluate every cfg predicate because not doing so result in accepting incorrect `cfg`:\n\n```rust\n#[cfg(any(unix, foo::bar))] // Should error on foo::bar, but does not on unix platform (but does on non unix platform)\nfn foo1() {}\n\n#[cfg(all(foo, foo::bar))] // Should error on foo::bar, but does not\nfn foo2() {}\n\n#[cfg(all(foo::bar, foo))] // Correctly error on foo::bar\nfn foo3() {}\n\n#[cfg(any(foo::bar, foo))] // Correctly error on foo::bar\nfn foo4() {}\n```\nThis pull-request take the side to directly turn it into a hard error instead of having a future incompatibility lint because the combination to get this incorrect behavior is unusual and highly probable that some code have this without noticing.\n\nA [search](https://cs.github.com/?scopeName=All+repos&scope=&q=lang%3Arust+%2Fany%5C%28%5Ba-zA-Z%5D%2C+%5Ba-zA-Z%5D%2B%3A%3A%5Ba-zA-Z%5D%2B%2F) on Github reveal no such instance nevertheless a Crater run should probably be done before merging this.\n\nThis was discover in https://github.com/rust-lang/rust/pull/94175 when trying to lint on the second predicate. Also note that this seems to have being introduce with Rust 1.27.0: https://rust.godbolt.org/z/KnfqKv15f.\n\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d15006ceca3854e507341dd8b7171a451351b4cd", "html_url": "https://github.com/rust-lang/rust/commit/d15006ceca3854e507341dd8b7171a451351b4cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d15006ceca3854e507341dd8b7171a451351b4cd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c183d4a510a0007923354bec8ec2ea4d23d92f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c183d4a510a0007923354bec8ec2ea4d23d92f7d", "html_url": "https://github.com/rust-lang/rust/commit/c183d4a510a0007923354bec8ec2ea4d23d92f7d"}, {"sha": "f57cc8ca5cd344a6111650a8ba4744b4e4859da8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57cc8ca5cd344a6111650a8ba4744b4e4859da8", "html_url": "https://github.com/rust-lang/rust/commit/f57cc8ca5cd344a6111650a8ba4744b4e4859da8"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "8a134bf7f9662bff1fa17a77c050487a41ada1f6", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d15006ceca3854e507341dd8b7171a451351b4cd/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15006ceca3854e507341dd8b7171a451351b4cd/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=d15006ceca3854e507341dd8b7171a451351b4cd", "patch": "@@ -603,10 +603,18 @@ pub fn eval_condition(\n             match cfg.name_or_empty() {\n                 sym::any => mis\n                     .iter()\n-                    .any(|mi| eval_condition(mi.meta_item().unwrap(), sess, features, eval)),\n+                    // We don't use any() here, because we want to evaluate all cfg condition\n+                    // as eval_condition can (and does) extra checks\n+                    .fold(false, |res, mi| {\n+                        res | eval_condition(mi.meta_item().unwrap(), sess, features, eval)\n+                    }),\n                 sym::all => mis\n                     .iter()\n-                    .all(|mi| eval_condition(mi.meta_item().unwrap(), sess, features, eval)),\n+                    // We don't use all() here, because we want to evaluate all cfg condition\n+                    // as eval_condition can (and does) extra checks\n+                    .fold(true, |res, mi| {\n+                        res & eval_condition(mi.meta_item().unwrap(), sess, features, eval)\n+                    }),\n                 sym::not => {\n                     if mis.len() != 1 {\n                         struct_span_err!("}, {"sha": "5bf80bd74b843aba4c2e54a9b3bf1689c6d9c0e3", "filename": "src/test/ui/cfg/cfg-path-error.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d15006ceca3854e507341dd8b7171a451351b4cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15006ceca3854e507341dd8b7171a451351b4cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.rs?ref=d15006ceca3854e507341dd8b7171a451351b4cd", "patch": "@@ -0,0 +1,19 @@\n+// check-fail\n+\n+#[cfg(any(foo, foo::bar))]\n+//~^ERROR `cfg` predicate key must be an identifier\n+fn foo1() {}\n+\n+#[cfg(any(foo::bar, foo))]\n+//~^ERROR `cfg` predicate key must be an identifier\n+fn foo2() {}\n+\n+#[cfg(all(foo, foo::bar))]\n+//~^ERROR `cfg` predicate key must be an identifier\n+fn foo3() {}\n+\n+#[cfg(all(foo::bar, foo))]\n+//~^ERROR `cfg` predicate key must be an identifier\n+fn foo4() {}\n+\n+fn main() {}"}, {"sha": "84b44b2b0c24a021467e56df3772630d07763ada", "filename": "src/test/ui/cfg/cfg-path-error.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d15006ceca3854e507341dd8b7171a451351b4cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15006ceca3854e507341dd8b7171a451351b4cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.stderr?ref=d15006ceca3854e507341dd8b7171a451351b4cd", "patch": "@@ -0,0 +1,26 @@\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-path-error.rs:3:16\n+   |\n+LL | #[cfg(any(foo, foo::bar))]\n+   |                ^^^^^^^^\n+\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-path-error.rs:7:11\n+   |\n+LL | #[cfg(any(foo::bar, foo))]\n+   |           ^^^^^^^^\n+\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-path-error.rs:11:16\n+   |\n+LL | #[cfg(all(foo, foo::bar))]\n+   |                ^^^^^^^^\n+\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-path-error.rs:15:11\n+   |\n+LL | #[cfg(all(foo::bar, foo))]\n+   |           ^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}