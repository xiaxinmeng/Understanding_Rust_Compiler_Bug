{"sha": "917d3c28b6aab7de454087236173122616a6f9b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxN2QzYzI4YjZhYWI3ZGU0NTQwODcyMzYxNzMxMjI2MTZhNmY5YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-10T11:26:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-10T11:26:01Z"}, "message": "auto merge of #9094 : pnkfelix/rust/fsk-visitor-ports, r=huonw\n\nr? anyone\r\n\r\nRemove some trivial Visitor structs, using their non-trivial Contexts as the Visitor implementation instead.\r\n\r\nRemoved a little bit of `@boxing` as well.\r\n\r\nPart of ongoing work on #7081.", "tree": {"sha": "6b7bd7de573a0bdcbe03980e9050fde09e7bad2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b7bd7de573a0bdcbe03980e9050fde09e7bad2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/917d3c28b6aab7de454087236173122616a6f9b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/917d3c28b6aab7de454087236173122616a6f9b6", "html_url": "https://github.com/rust-lang/rust/commit/917d3c28b6aab7de454087236173122616a6f9b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/917d3c28b6aab7de454087236173122616a6f9b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "753d8c226c75b72edd939793223d28f4baf932fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/753d8c226c75b72edd939793223d28f4baf932fd", "html_url": "https://github.com/rust-lang/rust/commit/753d8c226c75b72edd939793223d28f4baf932fd"}, {"sha": "ed37da2f799bd95c6398b92a51f7eaf65c62c5fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed37da2f799bd95c6398b92a51f7eaf65c62c5fe", "html_url": "https://github.com/rust-lang/rust/commit/ed37da2f799bd95c6398b92a51f7eaf65c62c5fe"}], "stats": {"total": 183, "additions": 81, "deletions": 102}, "files": [{"sha": "9280bbf1817a73c3bd03ef8de061cf9d2d13662c", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 30, "deletions": 37, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/917d3c28b6aab7de454087236173122616a6f9b6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917d3c28b6aab7de454087236173122616a6f9b6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=917d3c28b6aab7de454087236173122616a6f9b6", "patch": "@@ -40,24 +40,23 @@ struct CheckLoanCtxt<'self> {\n     reported: @mut HashSet<ast::NodeId>,\n }\n \n-struct CheckLoanVisitor;\n+impl<'self> Visitor<()> for CheckLoanCtxt<'self> {\n \n-impl<'self> Visitor<CheckLoanCtxt<'self>> for CheckLoanVisitor {\n-    fn visit_expr<'a>(&mut self, ex:@ast::Expr, e:CheckLoanCtxt<'a>) {\n-        check_loans_in_expr(self, ex, e);\n+    fn visit_expr(&mut self, ex:@ast::Expr, _:()) {\n+        check_loans_in_expr(self, ex);\n     }\n-    fn visit_local(&mut self, l:@ast::Local, e:CheckLoanCtxt) {\n-        check_loans_in_local(self, l, e);\n+    fn visit_local(&mut self, l:@ast::Local, _:()) {\n+        check_loans_in_local(self, l);\n     }\n-    fn visit_block(&mut self, b:&ast::Block, e:CheckLoanCtxt) {\n-        check_loans_in_block(self, b, e);\n+    fn visit_block(&mut self, b:&ast::Block, _:()) {\n+        check_loans_in_block(self, b);\n     }\n-    fn visit_pat(&mut self, p:@ast::Pat, e:CheckLoanCtxt) {\n-        check_loans_in_pat(self, p, e);\n+    fn visit_pat(&mut self, p:@ast::Pat, _:()) {\n+        check_loans_in_pat(self, p);\n     }\n     fn visit_fn(&mut self, fk:&visit::fn_kind, fd:&ast::fn_decl,\n-                b:&ast::Block, s:Span, n:ast::NodeId, e:CheckLoanCtxt) {\n-        check_loans_in_fn(self, fk, fd, b, s, n, e);\n+                b:&ast::Block, s:Span, n:ast::NodeId, _:()) {\n+        check_loans_in_fn(self, fk, fd, b, s, n);\n     }\n }\n \n@@ -68,16 +67,15 @@ pub fn check_loans(bccx: @BorrowckCtxt,\n                    body: &ast::Block) {\n     debug!(\"check_loans(body id=%?)\", body.id);\n \n-    let clcx = CheckLoanCtxt {\n+    let mut clcx = CheckLoanCtxt {\n         bccx: bccx,\n         dfcx_loans: dfcx_loans,\n         move_data: @move_data,\n         all_loans: all_loans,\n         reported: @mut HashSet::new(),\n     };\n \n-    let mut vt = CheckLoanVisitor;\n-    vt.visit_block(body, clcx);\n+    clcx.visit_block(body, ());\n }\n \n enum MoveError {\n@@ -725,13 +723,12 @@ impl<'self> CheckLoanCtxt<'self> {\n     }\n }\n \n-fn check_loans_in_fn<'a>(visitor: &mut CheckLoanVisitor,\n+fn check_loans_in_fn<'a>(this: &mut CheckLoanCtxt<'a>,\n                          fk: &visit::fn_kind,\n                          decl: &ast::fn_decl,\n                          body: &ast::Block,\n                          sp: Span,\n-                         id: ast::NodeId,\n-                         this: CheckLoanCtxt<'a>) {\n+                         id: ast::NodeId) {\n     match *fk {\n         visit::fk_item_fn(*) |\n         visit::fk_method(*) => {\n@@ -745,9 +742,9 @@ fn check_loans_in_fn<'a>(visitor: &mut CheckLoanVisitor,\n         }\n     }\n \n-    visit::walk_fn(visitor, fk, decl, body, sp, id, this);\n+    visit::walk_fn(this, fk, decl, body, sp, id, ());\n \n-    fn check_captured_variables(this: CheckLoanCtxt,\n+    fn check_captured_variables(this: &CheckLoanCtxt,\n                                 closure_id: ast::NodeId,\n                                 span: Span) {\n         let cap_vars = this.bccx.capture_map.get(&closure_id);\n@@ -765,7 +762,7 @@ fn check_loans_in_fn<'a>(visitor: &mut CheckLoanVisitor,\n         }\n         return;\n \n-        fn check_by_move_capture(this: CheckLoanCtxt,\n+        fn check_by_move_capture(this: &CheckLoanCtxt,\n                                  closure_id: ast::NodeId,\n                                  cap_var: &moves::CaptureVar,\n                                  move_path: @LoanPath) {\n@@ -788,16 +785,14 @@ fn check_loans_in_fn<'a>(visitor: &mut CheckLoanVisitor,\n     }\n }\n \n-fn check_loans_in_local<'a>(vt: &mut CheckLoanVisitor,\n-                            local: @ast::Local,\n-                            this: CheckLoanCtxt<'a>) {\n-    visit::walk_local(vt, local, this);\n+fn check_loans_in_local<'a>(this: &mut CheckLoanCtxt<'a>,\n+                            local: @ast::Local) {\n+    visit::walk_local(this, local, ());\n }\n \n-fn check_loans_in_expr<'a>(vt: &mut CheckLoanVisitor,\n-                           expr: @ast::Expr,\n-                           this: CheckLoanCtxt<'a>) {\n-    visit::walk_expr(vt, expr, this);\n+fn check_loans_in_expr<'a>(this: &mut CheckLoanCtxt<'a>,\n+                           expr: @ast::Expr) {\n+    visit::walk_expr(this, expr, ());\n \n     debug!(\"check_loans_in_expr(expr=%s)\",\n            expr.repr(this.tcx()));\n@@ -848,20 +843,18 @@ fn check_loans_in_expr<'a>(vt: &mut CheckLoanVisitor,\n     }\n }\n \n-fn check_loans_in_pat<'a>(vt: &mut CheckLoanVisitor,\n-                          pat: @ast::Pat,\n-                          this: CheckLoanCtxt<'a>)\n+fn check_loans_in_pat<'a>(this: &mut CheckLoanCtxt<'a>,\n+                          pat: @ast::Pat)\n {\n     this.check_for_conflicting_loans(pat.id);\n     this.check_move_out_from_id(pat.id, pat.span);\n-    visit::walk_pat(vt, pat, this);\n+    visit::walk_pat(this, pat, ());\n }\n \n-fn check_loans_in_block<'a>(vt: &mut CheckLoanVisitor,\n-                            blk: &ast::Block,\n-                            this: CheckLoanCtxt<'a>)\n+fn check_loans_in_block<'a>(this: &mut CheckLoanCtxt<'a>,\n+                            blk: &ast::Block)\n {\n-    visit::walk_block(vt, blk, this);\n+    visit::walk_block(this, blk, ());\n     this.check_for_conflicting_loans(blk.id);\n }\n "}, {"sha": "d754e0360fd459b1b12a94ce054c388cf98d2a21", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 42, "deletions": 51, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/917d3c28b6aab7de454087236173122616a6f9b6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917d3c28b6aab7de454087236173122616a6f9b6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=917d3c28b6aab7de454087236173122616a6f9b6", "patch": "@@ -73,40 +73,38 @@ struct GatherLoanCtxt {\n     repeating_ids: ~[ast::NodeId]\n }\n \n-struct GatherLoanVisitor;\n-\n-impl visit::Visitor<@mut GatherLoanCtxt> for GatherLoanVisitor {\n-    fn visit_expr(&mut self, ex:@Expr, e:@mut GatherLoanCtxt) {\n-        gather_loans_in_expr(self, ex, e);\n+impl visit::Visitor<()> for GatherLoanCtxt {\n+    fn visit_expr(&mut self, ex:@Expr, _:()) {\n+        gather_loans_in_expr(self, ex);\n     }\n-    fn visit_block(&mut self, b:&Block, e:@mut GatherLoanCtxt) {\n-        gather_loans_in_block(self, b, e);\n+    fn visit_block(&mut self, b:&Block, _:()) {\n+        gather_loans_in_block(self, b);\n     }\n     fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:&Block,\n-                s:Span, n:NodeId, e:@mut GatherLoanCtxt) {\n-        gather_loans_in_fn(self, fk, fd, b, s, n, e);\n+                s:Span, n:NodeId, _:()) {\n+        gather_loans_in_fn(self, fk, fd, b, s, n);\n     }\n-    fn visit_stmt(&mut self, s:@Stmt, e:@mut GatherLoanCtxt) {\n-        add_stmt_to_map(self, s, e);\n+    fn visit_stmt(&mut self, s:@Stmt, _:()) {\n+        add_stmt_to_map(self, s);\n     }\n-    fn visit_pat(&mut self, p:@Pat, e:@mut GatherLoanCtxt) {\n-        add_pat_to_id_range(self, p, e);\n+    fn visit_pat(&mut self, p:@Pat, _:()) {\n+        add_pat_to_id_range(self, p);\n     }\n-    fn visit_local(&mut self, l:@Local, e:@mut GatherLoanCtxt) {\n-        gather_loans_in_local(self, l, e);\n+    fn visit_local(&mut self, l:@Local, _:()) {\n+        gather_loans_in_local(self, l);\n     }\n \n     // #7740: Do not visit items here, not even fn items nor methods\n     // of impl items; the outer loop in borrowck/mod will visit them\n     // for us in turn.  Thus override visit_item's walk with a no-op.\n-    fn visit_item(&mut self, _:@ast::item, _:@mut GatherLoanCtxt) { }\n+    fn visit_item(&mut self, _:@ast::item, _:()) { }\n }\n \n pub fn gather_loans(bccx: @BorrowckCtxt,\n                     decl: &ast::fn_decl,\n                     body: &ast::Block)\n                     -> (id_range, @mut ~[Loan], @mut move_data::MoveData) {\n-    let glcx = @mut GatherLoanCtxt {\n+    let mut glcx = GatherLoanCtxt {\n         bccx: bccx,\n         id_range: id_range::max(),\n         all_loans: @mut ~[],\n@@ -116,29 +114,26 @@ pub fn gather_loans(bccx: @BorrowckCtxt,\n     };\n     glcx.gather_fn_arg_patterns(decl, body);\n \n-    let mut v = GatherLoanVisitor;\n-    v.visit_block(body, glcx);\n+    glcx.visit_block(body, ());\n     return (glcx.id_range, glcx.all_loans, glcx.move_data);\n }\n \n-fn add_pat_to_id_range(v: &mut GatherLoanVisitor,\n-                       p: @ast::Pat,\n-                       this: @mut GatherLoanCtxt) {\n+fn add_pat_to_id_range(this: &mut GatherLoanCtxt,\n+                       p: @ast::Pat) {\n     // NB: This visitor function just adds the pat ids into the id\n     // range. We gather loans that occur in patterns using the\n     // `gather_pat()` method below. Eventually these two should be\n     // brought together.\n     this.id_range.add(p.id);\n-    visit::walk_pat(v, p, this);\n+    visit::walk_pat(this, p, ());\n }\n \n-fn gather_loans_in_fn(v: &mut GatherLoanVisitor,\n+fn gather_loans_in_fn(this: &mut GatherLoanCtxt,\n                       fk: &fn_kind,\n                       decl: &ast::fn_decl,\n                       body: &ast::Block,\n                       sp: Span,\n-                      id: ast::NodeId,\n-                      this: @mut GatherLoanCtxt) {\n+                      id: ast::NodeId) {\n     match fk {\n         &visit::fk_item_fn(*) | &visit::fk_method(*) => {\n             fail!(\"cannot occur, due to visit_item override\");\n@@ -147,23 +142,21 @@ fn gather_loans_in_fn(v: &mut GatherLoanVisitor,\n         // Visit closures as part of the containing item.\n         &visit::fk_anon(*) | &visit::fk_fn_block(*) => {\n             this.push_repeating_id(body.id);\n-            visit::walk_fn(v, fk, decl, body, sp, id, this);\n+            visit::walk_fn(this, fk, decl, body, sp, id, ());\n             this.pop_repeating_id(body.id);\n             this.gather_fn_arg_patterns(decl, body);\n         }\n     }\n }\n \n-fn gather_loans_in_block(v: &mut GatherLoanVisitor,\n-                         blk: &ast::Block,\n-                         this: @mut GatherLoanCtxt) {\n+fn gather_loans_in_block(this: &mut GatherLoanCtxt,\n+                         blk: &ast::Block) {\n     this.id_range.add(blk.id);\n-    visit::walk_block(v, blk, this);\n+    visit::walk_block(this, blk, ());\n }\n \n-fn gather_loans_in_local(v: &mut GatherLoanVisitor,\n-                         local: @ast::Local,\n-                         this: @mut GatherLoanCtxt) {\n+fn gather_loans_in_local(this: &mut GatherLoanCtxt,\n+                         local: @ast::Local) {\n     match local.init {\n         None => {\n             // Variable declarations without initializers are considered \"moves\":\n@@ -194,13 +187,12 @@ fn gather_loans_in_local(v: &mut GatherLoanVisitor,\n         }\n     }\n \n-    visit::walk_local(v, local, this);\n+    visit::walk_local(this, local, ());\n }\n \n \n-fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n-                        ex: @ast::Expr,\n-                        this: @mut GatherLoanCtxt) {\n+fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n+                        ex: @ast::Expr) {\n     let bccx = this.bccx;\n     let tcx = bccx.tcx;\n \n@@ -244,7 +236,7 @@ fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n                              base_cmt,\n                              LoanMutability::from_ast_mutability(mutbl),\n                              scope_r);\n-        visit::walk_expr(v, ex, this);\n+        visit::walk_expr(this, ex, ());\n       }\n \n       ast::ExprAssign(l, _) | ast::ExprAssignOp(_, _, l, _) => {\n@@ -261,7 +253,7 @@ fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n                   // with moves etc, just ignore.\n               }\n           }\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n       }\n \n       ast::ExprMatch(ex_v, ref arms) => {\n@@ -271,7 +263,7 @@ fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n                 this.gather_pat(cmt, *pat, Some((arm.body.id, ex.id)));\n             }\n         }\n-        visit::walk_expr(v, ex, this);\n+        visit::walk_expr(this, ex, ());\n       }\n \n       ast::ExprIndex(_, _, arg) |\n@@ -289,36 +281,36 @@ fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n                                arg_cmt,\n                                ImmutableMutability,\n                                scope_r);\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n       }\n \n       // see explanation attached to the `root_ub` field:\n       ast::ExprWhile(cond, ref body) => {\n           // during the condition, can only root for the condition\n           this.push_repeating_id(cond.id);\n-          v.visit_expr(cond, this);\n+          this.visit_expr(cond, ());\n           this.pop_repeating_id(cond.id);\n \n           // during body, can only root for the body\n           this.push_repeating_id(body.id);\n-          v.visit_block(body, this);\n+          this.visit_block(body, ());\n           this.pop_repeating_id(body.id);\n       }\n \n       // see explanation attached to the `root_ub` field:\n       ast::ExprLoop(ref body, _) => {\n           this.push_repeating_id(body.id);\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n           this.pop_repeating_id(body.id);\n       }\n \n       ast::ExprFnBlock(*) => {\n           gather_moves::gather_captures(this.bccx, this.move_data, ex);\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n       }\n \n       _ => {\n-          visit::walk_expr(v, ex, this);\n+          visit::walk_expr(this, ex, ());\n       }\n     }\n }\n@@ -809,14 +801,13 @@ impl GatherLoanCtxt {\n \n // Setting up info that preserve needs.\n // This is just the most convenient place to do it.\n-fn add_stmt_to_map(v: &mut GatherLoanVisitor,\n-                   stmt: @ast::Stmt,\n-                   this: @mut GatherLoanCtxt) {\n+fn add_stmt_to_map(this: &mut GatherLoanCtxt,\n+                   stmt: @ast::Stmt) {\n     match stmt.node {\n         ast::StmtExpr(_, id) | ast::StmtSemi(_, id) => {\n             this.bccx.stmt_map.insert(id);\n         }\n         _ => ()\n     }\n-    visit::walk_stmt(v, stmt, this);\n+    visit::walk_stmt(this, stmt, ());\n }"}, {"sha": "4f9c9bdc62b02ce142d47f1efc3fab3411adc435", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/917d3c28b6aab7de454087236173122616a6f9b6/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917d3c28b6aab7de454087236173122616a6f9b6/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=917d3c28b6aab7de454087236173122616a6f9b6", "patch": "@@ -39,11 +39,9 @@ struct EntryContext {\n     non_main_fns: ~[(NodeId, Span)],\n }\n \n-struct EntryVisitor;\n-\n-impl Visitor<@mut EntryContext> for EntryVisitor {\n-    fn visit_item(&mut self, item:@item, ctxt:@mut EntryContext) {\n-        find_item(item, ctxt, self);\n+impl Visitor<()> for EntryContext {\n+    fn visit_item(&mut self, item:@item, _:()) {\n+        find_item(item, self);\n     }\n }\n \n@@ -62,7 +60,7 @@ pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map)\n         return\n     }\n \n-    let ctxt = @mut EntryContext {\n+    let mut ctxt = EntryContext {\n         session: session,\n         ast_map: ast_map,\n         main_fn: None,\n@@ -71,14 +69,12 @@ pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map)\n         non_main_fns: ~[],\n     };\n \n-    let mut v = EntryVisitor;\n-\n-    visit::walk_crate(&mut v, crate, ctxt);\n+    visit::walk_crate(&mut ctxt, crate, ());\n \n-    configure_main(ctxt);\n+    configure_main(&mut ctxt);\n }\n \n-fn find_item(item: @item, ctxt: @mut EntryContext, visitor: &mut EntryVisitor) {\n+fn find_item(item: @item, ctxt: &mut EntryContext) {\n     match item.node {\n         item_fn(*) => {\n             if item.ident.name == special_idents::main.name {\n@@ -125,11 +121,10 @@ fn find_item(item: @item, ctxt: @mut EntryContext, visitor: &mut EntryVisitor) {\n         _ => ()\n     }\n \n-    visit::walk_item(visitor, item, ctxt);\n+    visit::walk_item(ctxt, item, ());\n }\n \n-fn configure_main(ctxt: @mut EntryContext) {\n-    let this = &mut *ctxt;\n+fn configure_main(this: &mut EntryContext) {\n     if this.start_fn.is_some() {\n         *this.session.entry_fn = this.start_fn;\n         *this.session.entry_type = Some(session::EntryStart);"}]}