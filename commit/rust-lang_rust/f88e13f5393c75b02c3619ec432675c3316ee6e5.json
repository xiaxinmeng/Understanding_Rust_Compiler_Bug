{"sha": "f88e13f5393c75b02c3619ec432675c3316ee6e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4OGUxM2Y1MzkzYzc1YjAyYzM2MTllYzQzMjY3NWMzMzE2ZWU2ZTU=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-11T14:25:35Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-11T14:25:35Z"}, "message": "Use Comment wrapper", "tree": {"sha": "9a4d2611dec98a083ae2f6b99a04f68962bf2f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4d2611dec98a083ae2f6b99a04f68962bf2f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f88e13f5393c75b02c3619ec432675c3316ee6e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f88e13f5393c75b02c3619ec432675c3316ee6e5", "html_url": "https://github.com/rust-lang/rust/commit/f88e13f5393c75b02c3619ec432675c3316ee6e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f88e13f5393c75b02c3619ec432675c3316ee6e5/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a86cb7df5e1764c85f5eeb8bb85885072f782e", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a86cb7df5e1764c85f5eeb8bb85885072f782e", "html_url": "https://github.com/rust-lang/rust/commit/27a86cb7df5e1764c85f5eeb8bb85885072f782e"}], "stats": {"total": 114, "additions": 78, "deletions": 36}, "files": [{"sha": "ae82ff89bf0167c6a73bbb2439d017dfe31a6efe", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 16, "deletions": 36, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f88e13f5393c75b02c3619ec432675c3316ee6e5/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88e13f5393c75b02c3619ec432675c3316ee6e5/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=f88e13f5393c75b02c3619ec432675c3316ee6e5", "patch": "@@ -58,14 +58,19 @@ pub fn join_lines(file: &File, range: TextRange) -> LocalEdit {\n }\n \n pub fn on_enter(file: &File, offset: TextUnit) -> Option<LocalEdit> {\n-    let comment = find_leaf_at_offset(file.syntax(), offset).left_biased().filter(|it| it.kind() == COMMENT)?;\n-    let prefix = comment_preffix(comment)?;\n-    if offset < comment.range().start() + TextUnit::of_str(prefix) {\n+    let comment = find_leaf_at_offset(file.syntax(), offset).left_biased().and_then(|it| ast::Comment::cast(it))?;\n+\n+    if let ast::CommentFlavor::Multiline = comment.flavor() {\n+        return None;\n+    }\n+\n+    let prefix = comment.prefix();\n+    if offset < comment.syntax().range().start() + TextUnit::of_str(prefix) + TextUnit::from(1) {\n         return None;\n     }\n \n-    let indent = node_indent(file, comment)?;\n-    let inserted = format!(\"\\n{}{}\", indent, prefix);\n+    let indent = node_indent(file, comment.syntax())?;\n+    let inserted = format!(\"\\n{}{} \", indent, prefix);\n     let cursor_position = offset + TextUnit::of_str(&inserted);\n     let mut edit = EditBuilder::new();\n     edit.insert(offset, inserted);\n@@ -75,20 +80,6 @@ pub fn on_enter(file: &File, offset: TextUnit) -> Option<LocalEdit> {\n     })\n }\n \n-fn comment_preffix(comment: SyntaxNodeRef) -> Option<&'static str> {\n-    let text = comment.leaf_text().unwrap();\n-    let res = if text.starts_with(\"///\") {\n-        \"/// \"\n-    } else if text.starts_with(\"//!\") {\n-        \"//! \"\n-    } else if text.starts_with(\"//\") {\n-        \"// \"\n-    } else {\n-        return None;\n-    };\n-    Some(res)\n-}\n-\n fn node_indent<'a>(file: &'a File, node: SyntaxNodeRef) -> Option<&'a str> {\n     let ws = match find_leaf_at_offset(file.syntax(), node.range().start()) {\n         LeafAtOffset::Between(l, r) => {\n@@ -166,31 +157,27 @@ fn remove_newline(\n                 // Removes: comma, newline (incl. surrounding whitespace)\n                 // Adds: a single whitespace\n                 edit.replace(range, \" \".to_string());\n-            } else if prev.kind() == COMMENT && next.kind() == COMMENT {\n+            } else if let (Some(_), Some(next)) = (ast::Comment::cast(prev), ast::Comment::cast(next)) {\n                 // Removes: newline (incl. surrounding whitespace), start of the next comment\n-\n-                // FIXME: I guess it is safe to unwrap here? A comment always has text, right?\n-                let comment_text = next.leaf_text().unwrap().as_str();\n-                let comment_start_length = comment_start_length(comment_text);\n-\n+                let comment_text = next.text();\n                 if let Some(newline_pos) = comment_text.find('\\n') {\n                     // Special case for multi-line c-like comments: join the comment content but\n                     // keep the leading `/*`\n \n-                    let newline_offset = next.range().start()\n+                    let newline_offset = next.syntax().range().start()\n                                         + TextUnit::from(newline_pos as u32)\n                                         + TextUnit::of_char('\\n');\n \n                     edit.insert(newline_offset, \"/*\".to_string());\n                     edit.delete(TextRange::from_to(\n                         node.range().start(),\n-                        next.range().start() + comment_start_length\n+                        next.syntax().range().start() + TextUnit::of_str(next.prefix())\n                     ));\n                 } else {\n                     // Single-line comments\n                     edit.delete(TextRange::from_to(\n                         node.range().start(),\n-                        next.range().start() + comment_start_length\n+                        next.syntax().range().start() + TextUnit::of_str(next.prefix())\n                     ));\n                 }\n             } else {\n@@ -205,7 +192,7 @@ fn remove_newline(\n         }\n     }\n \n-    // FIXME: do we ever reach this point? What does it mean to be here? I think we should document it\n+    // The node is either the first or the last in the file\n     let suff = &node_text[TextRange::from_to(\n         offset - node.range().start() + TextUnit::of_char('\\n'),\n         TextUnit::of_str(node_text),\n@@ -218,13 +205,6 @@ fn remove_newline(\n     );\n }\n \n-// Return the start length of the comment (e.g. 2 for `//` and 3 for `//!`)\n-fn comment_start_length(_text: &str) -> TextUnit {\n-    // TODO: use the parser here instead of reimplementing comment parsing?\n-    // Otherwise, reimplement comment parsing :)\n-    return TextUnit::from(2);\n-}\n-\n fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n     match (left, right) {\n        (COMMA, R_PAREN) | (COMMA, R_BRACK) => true,"}, {"sha": "b0b855eb483e6c10241921a8096c83324a0b1ee1", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f88e13f5393c75b02c3619ec432675c3316ee6e5/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88e13f5393c75b02c3619ec432675c3316ee6e5/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=f88e13f5393c75b02c3619ec432675c3316ee6e5", "patch": "@@ -227,6 +227,24 @@ impl<'a> AstNode<'a> for CastExpr<'a> {\n \n impl<'a> CastExpr<'a> {}\n \n+// Comment\n+#[derive(Debug, Clone, Copy)]\n+pub struct Comment<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for Comment<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            COMMENT => Some(Comment { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> Comment<'a> {}\n+\n // Condition\n #[derive(Debug, Clone, Copy)]\n pub struct Condition<'a> {"}, {"sha": "10dac72e5fac5cd00b1b7c47aaa8284b47ed6555", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f88e13f5393c75b02c3619ec432675c3316ee6e5/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88e13f5393c75b02c3619ec432675c3316ee6e5/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=f88e13f5393c75b02c3619ec432675c3316ee6e5", "patch": "@@ -99,6 +99,49 @@ impl<'a> Lifetime<'a> {\n     }\n }\n \n+impl<'a> Comment<'a> {\n+    pub fn text(&self) -> SmolStr {\n+        self.syntax().leaf_text().unwrap().clone()\n+    }\n+\n+    pub fn flavor(&self) -> CommentFlavor {\n+        let text = self.text();\n+        if text.starts_with(\"///\") {\n+            CommentFlavor::Doc\n+        } else if text.starts_with(\"//!\") {\n+            CommentFlavor::ModuleDoc\n+        } else if text.starts_with(\"//\") {\n+            CommentFlavor::Line\n+        } else {\n+            CommentFlavor::Multiline\n+        }\n+    }\n+\n+    pub fn prefix(&self) -> &'static str {\n+        self.flavor().prefix()\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum CommentFlavor {\n+    Line,\n+    Doc,\n+    ModuleDoc,\n+    Multiline\n+}\n+\n+impl CommentFlavor {\n+    pub fn prefix(&self) -> &'static str {\n+        use self::CommentFlavor::*;\n+        match *self {\n+            Line => \"//\",\n+            Doc => \"///\",\n+            ModuleDoc => \"//!\",\n+            Multiline => \"/*\"\n+        }\n+    }\n+}\n+\n impl<'a> Name<'a> {\n     pub fn text(&self) -> SmolStr {\n         let ident = self.syntax().first_child()"}, {"sha": "9da0c2c13fd9bc9d9ce7741d7805df4bab47e9bd", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f88e13f5393c75b02c3619ec432675c3316ee6e5/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/f88e13f5393c75b02c3619ec432675c3316ee6e5/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=f88e13f5393c75b02c3619ec432675c3316ee6e5", "patch": "@@ -537,5 +537,6 @@ Grammar(\n         \"PathSegment\": (\n             options: [ \"NameRef\" ]\n         ),\n+        \"Comment\": (),\n     },\n )"}]}