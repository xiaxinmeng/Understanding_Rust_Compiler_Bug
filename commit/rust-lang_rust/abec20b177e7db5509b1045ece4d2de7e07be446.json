{"sha": "abec20b177e7db5509b1045ece4d2de7e07be446", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZWMyMGIxNzdlN2RiNTUwOWIxMDQ1ZWNlNGQyZGU3ZTA3YmU0NDY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-08T03:32:42Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-09T10:27:27Z"}, "message": "Refactor out `driver::lower_and_resolve`", "tree": {"sha": "2e60ae26c14fe124ef9e8418f5d905df03c0d337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e60ae26c14fe124ef9e8418f5d905df03c0d337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abec20b177e7db5509b1045ece4d2de7e07be446", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abec20b177e7db5509b1045ece4d2de7e07be446", "html_url": "https://github.com/rust-lang/rust/commit/abec20b177e7db5509b1045ece4d2de7e07be446", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abec20b177e7db5509b1045ece4d2de7e07be446/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6710eef6b2165abef065c72c5fb57389b8e49441", "url": "https://api.github.com/repos/rust-lang/rust/commits/6710eef6b2165abef065c72c5fb57389b8e49441", "html_url": "https://github.com/rust-lang/rust/commit/6710eef6b2165abef065c72c5fb57389b8e49441"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "e72204e5e22de2fa36a89400a3610d691a050392", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/abec20b177e7db5509b1045ece4d2de7e07be446/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abec20b177e7db5509b1045ece4d2de7e07be446/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=abec20b177e7db5509b1045ece4d2de7e07be446", "patch": "@@ -157,30 +157,7 @@ pub fn compile_input(sess: &Session,\n \n         let (analysis, resolutions, mut hir_forest) = {\n             let defs = &mut *defs.borrow_mut();\n-            resolve::with_resolver(sess, defs, control.make_glob_map, |mut resolver| {\n-                time(sess.time_passes(), \"name resolution\", || {\n-                    resolve::resolve_crate(&mut resolver, &expanded_crate);\n-                });\n-\n-                // Lower ast -> hir.\n-                let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n-                    let lcx = LoweringContext::new(sess, Some(&expanded_crate), &mut resolver);\n-                    hir_map::Forest::new(lower_crate(&lcx, &expanded_crate), dep_graph)\n-                });\n-\n-                (ty::CrateAnalysis {\n-                    export_map: resolver.export_map,\n-                    access_levels: AccessLevels::default(),\n-                    reachable: NodeSet(),\n-                    name: &id,\n-                    glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n-                }, Resolutions {\n-                    def_map: RefCell::new(resolver.def_map),\n-                    freevars: resolver.freevars,\n-                    trait_map: resolver.trait_map,\n-                    maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n-                }, hir_forest)\n-            })\n+            lower_and_resolve(sess, &id, defs, &expanded_crate, dep_graph, control.make_glob_map)\n         };\n \n         // Discard MTWT tables that aren't required past lowering to HIR.\n@@ -796,6 +773,39 @@ pub fn assign_node_ids(sess: &Session, krate: ast::Crate) -> ast::Crate {\n     krate\n }\n \n+pub fn lower_and_resolve<'a>(sess: &Session,\n+                             id: &'a str,\n+                             defs: &mut hir_map::Definitions,\n+                             krate: &ast::Crate,\n+                             dep_graph: DepGraph,\n+                             make_glob_map: resolve::MakeGlobMap)\n+                             -> (ty::CrateAnalysis<'a>, Resolutions, hir_map::Forest) {\n+    resolve::with_resolver(sess, defs, make_glob_map, |mut resolver| {\n+        time(sess.time_passes(), \"name resolution\", || {\n+            resolve::resolve_crate(&mut resolver, krate);\n+        });\n+\n+        // Lower ast -> hir.\n+        let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n+            let lcx = LoweringContext::new(sess, Some(krate), &mut resolver);\n+            hir_map::Forest::new(lower_crate(&lcx, krate), dep_graph)\n+        });\n+\n+        (ty::CrateAnalysis {\n+            export_map: resolver.export_map,\n+            access_levels: AccessLevels::default(),\n+            reachable: NodeSet(),\n+            name: &id,\n+            glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n+        }, Resolutions {\n+            def_map: RefCell::new(resolver.def_map),\n+            freevars: resolver.freevars,\n+            trait_map: resolver.trait_map,\n+            maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n+        }, hir_forest)\n+    })\n+}\n+\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis."}]}