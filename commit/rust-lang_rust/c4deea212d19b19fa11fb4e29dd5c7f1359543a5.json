{"sha": "c4deea212d19b19fa11fb4e29dd5c7f1359543a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZGVlYTIxMmQxOWIxOWZhMTFmYjRlMjlkZDVjN2YxMzU5NTQzYTU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-16T06:22:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-16T07:47:20Z"}, "message": "Avoid unnecessary arena allocations in `expand_pattern()`.\n\n`expand_pattern()` has two callsites. One of them needs arena\nallocation, but the other does not.\n\nThis commit moves the arena allocation out of the function. This avoids\nthe allocation of many 4 KiB page arena chunks that only hold a single\nsmall allocation. It reduces the number of bytes allocated by up to 2%\nfor various benchmarks, albeit without only a very small improvement in\nruntime.", "tree": {"sha": "8c38a77a200be90bcbd33102f1df71a219fb09da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c38a77a200be90bcbd33102f1df71a219fb09da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4deea212d19b19fa11fb4e29dd5c7f1359543a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4deea212d19b19fa11fb4e29dd5c7f1359543a5", "html_url": "https://github.com/rust-lang/rust/commit/c4deea212d19b19fa11fb4e29dd5c7f1359543a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4deea212d19b19fa11fb4e29dd5c7f1359543a5/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237d54ff6c4fb3577e02d4c5af02813c11b63d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/237d54ff6c4fb3577e02d4c5af02813c11b63d01", "html_url": "https://github.com/rust-lang/rust/commit/237d54ff6c4fb3577e02d4c5af02813c11b63d01"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "bcbb14137c7da4a409efbd4a4469e2bb8fc46e03", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4deea212d19b19fa11fb4e29dd5c7f1359543a5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4deea212d19b19fa11fb4e29dd5c7f1359543a5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=c4deea212d19b19fa11fb4e29dd5c7f1359543a5", "patch": "@@ -188,8 +188,8 @@ use std::ops::RangeInclusive;\n use std::u128;\n use std::convert::TryInto;\n \n-pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pat<'tcx>) -> &'a Pat<'tcx> {\n-    cx.pattern_arena.alloc(LiteralExpander { tcx: cx.tcx }.fold_pattern(&pat))\n+pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pat<'tcx>) -> Pat<'tcx> {\n+    LiteralExpander { tcx: cx.tcx }.fold_pattern(&pat)\n }\n \n struct LiteralExpander<'tcx> {"}, {"sha": "27ad56fd29b530b079c004f7aa5f9db8bf51fc89", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4deea212d19b19fa11fb4e29dd5c7f1359543a5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4deea212d19b19fa11fb4e29dd5c7f1359543a5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=c4deea212d19b19fa11fb4e29dd5c7f1359543a5", "patch": "@@ -153,7 +153,8 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n                         self.tables\n                     );\n                     patcx.include_lint_checks();\n-                    let pattern = expand_pattern(cx, patcx.lower_pattern(&pat));\n+                    let pattern =\n+                        cx.pattern_arena.alloc(expand_pattern(cx, patcx.lower_pattern(&pat))) as &_;\n                     if !patcx.errors.is_empty() {\n                         patcx.report_inlining_errors(pat.span);\n                         have_errors = true;\n@@ -252,8 +253,9 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             patcx.include_lint_checks();\n             let pattern = patcx.lower_pattern(pat);\n             let pattern_ty = pattern.ty;\n+            let pattern = expand_pattern(cx, pattern);\n             let pats: Matrix<'_, '_> = vec![smallvec![\n-                expand_pattern(cx, pattern)\n+                &pattern\n             ]].into_iter().collect();\n \n             let witnesses = match check_not_useful(cx, pattern_ty, &pats) {"}]}