{"sha": "f5593de579545b4e68512718c948fbed89f21931", "node_id": "C_kwDOAAsO6NoAKGY1NTkzZGU1Nzk1NDViNGU2ODUxMjcxOGM5NDhmYmVkODlmMjE5MzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T17:40:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T17:40:15Z"}, "message": "Auto merge of #2221 - InfRandomness:freebsd-target-support, r=RalfJung\n\nFreebsd-target-support\n\nImplement freebsd as a target for miri", "tree": {"sha": "3ea9257dce756729be7dfcfab1e8e16591b59889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ea9257dce756729be7dfcfab1e8e16591b59889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5593de579545b4e68512718c948fbed89f21931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5593de579545b4e68512718c948fbed89f21931", "html_url": "https://github.com/rust-lang/rust/commit/f5593de579545b4e68512718c948fbed89f21931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5593de579545b4e68512718c948fbed89f21931/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99afff9dc1479f4f8593c08f2a241966cf4fd0ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/99afff9dc1479f4f8593c08f2a241966cf4fd0ab", "html_url": "https://github.com/rust-lang/rust/commit/99afff9dc1479f4f8593c08f2a241966cf4fd0ab"}, {"sha": "5719897fb0ba0a91fd1b094019c5caf7f58e6e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5719897fb0ba0a91fd1b094019c5caf7f58e6e9f", "html_url": "https://github.com/rust-lang/rust/commit/5719897fb0ba0a91fd1b094019c5caf7f58e6e9f"}], "stats": {"total": 149, "additions": 116, "deletions": 33}, "files": [{"sha": "1fa67f52139ed923c6e4765b01e5f1fb233e0fdc", "filename": "ci.sh", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -42,6 +42,16 @@ function run_tests {\n   echo\n }\n \n+function run_tests_minimal {\n+  if [ -n \"${MIRI_TEST_TARGET+exists}\" ]; then\n+    echo \"Testing MINIMAL foreign architecture $MIRI_TEST_TARGET: only testing $@\"\n+  else\n+    echo \"Testing MINIMAL host architecture: only testing $@\"\n+  fi\n+\n+  ./miri test --locked -- \"$@\"\n+}\n+\n # host\n run_tests\n \n@@ -50,6 +60,7 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=aarch64-apple-darwin run_tests\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n+    MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec\n     ;;\n   x86_64-apple-darwin)\n     MIRI_TEST_TARGET=mips64-unknown-linux-gnuabi64 run_tests # big-endian architecture"}, {"sha": "86823f28178871e4537aed72099f717731467fd2", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -910,5 +910,5 @@ impl std::fmt::Display for HexRange {\n /// Helper function used inside the shims of foreign functions to check that\n /// `target_os` is a supported UNIX OS.\n pub fn target_os_is_unix(target_os: &str) -> bool {\n-    matches!(target_os, \"linux\" | \"macos\")\n+    matches!(target_os, \"linux\" | \"macos\" | \"freebsd\")\n }"}, {"sha": "e1f819fb85671c1fc5fe75a45a17252d96e83e38", "filename": "src/shims/unix/dlsym.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fdlsym.rs?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -2,13 +2,15 @@ use rustc_middle::mir;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n+use shims::unix::freebsd::dlsym as freebsd;\n use shims::unix::linux::dlsym as linux;\n use shims::unix::macos::dlsym as macos;\n \n #[derive(Debug, Copy, Clone)]\n pub enum Dlsym {\n     Linux(linux::Dlsym),\n     MacOs(macos::Dlsym),\n+    FreeBSD(freebsd::Dlsym),\n }\n \n impl Dlsym {\n@@ -18,6 +20,7 @@ impl Dlsym {\n         Ok(match target_os {\n             \"linux\" => linux::Dlsym::from_str(name)?.map(Dlsym::Linux),\n             \"macos\" => macos::Dlsym::from_str(name)?.map(Dlsym::MacOs),\n+            \"freebsd\" => freebsd::Dlsym::from_str(name)?.map(Dlsym::FreeBSD),\n             _ => unreachable!(),\n         })\n     }\n@@ -40,6 +43,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match dlsym {\n             Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n             Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n+            Dlsym::FreeBSD(dlsym) =>\n+                freebsd::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n         }\n     }\n }"}, {"sha": "d0c93ef4cdaf3c793e5a7f2d4eaa8931ca4f2a03", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -461,6 +461,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n+            // Querying system information\n+            \"pthread_attr_getstack\" => {\n+                // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here. Hence we can mostly ignore the input `attr_place`.\n+                let [attr_place, addr_place, size_place] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let _attr_place = this.deref_operand(attr_place)?;\n+                let addr_place = this.deref_operand(addr_place)?;\n+                let size_place = this.deref_operand(size_place)?;\n+\n+                this.write_scalar(\n+                    Scalar::from_uint(STACK_ADDR, this.pointer_size()),\n+                    &addr_place.into(),\n+                )?;\n+                this.write_scalar(\n+                    Scalar::from_uint(STACK_SIZE, this.pointer_size()),\n+                    &size_place.into(),\n+                )?;\n+\n+                // Return success (`0`).\n+                this.write_null(dest)?;\n+            }\n+\n             | \"signal\"\n             | \"sigaltstack\"\n             if this.frame_in_std() => {\n@@ -485,6 +507,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 match this.tcx.sess.target.os.as_ref() {\n                     \"linux\" => return shims::unix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                     \"macos\" => return shims::unix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                    \"freebsd\" => return shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                     _ => unreachable!(),\n                 }\n             }"}, {"sha": "18347d274e93c657e678d522961858d9f5d7958f", "filename": "src/shims/unix/freebsd/dlsym.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -0,0 +1,32 @@\n+use rustc_middle::mir;\n+\n+use crate::*;\n+\n+#[derive(Debug, Copy, Clone)]\n+#[allow(non_camel_case_types)]\n+pub enum Dlsym {}\n+\n+impl Dlsym {\n+    // Returns an error for unsupported symbols, and None if this symbol\n+    // should become a NULL pointer (pretend it does not exist).\n+    pub fn from_str<'tcx>(name: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n+        throw_unsup_format!(\"unsupported FreeBSD dlsym: {}\", name)\n+    }\n+}\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn call_dlsym(\n+        &mut self,\n+        dlsym: Dlsym,\n+        _args: &[OpTy<'tcx, Tag>],\n+        _dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let _ret = ret.expect(\"we don't support any diverging dlsym\");\n+        assert!(this.tcx.sess.target.os == \"freebsd\");\n+\n+        match dlsym {}\n+    }\n+}"}, {"sha": "cad119233740434f38402fa4c1901dd09d40a0a7", "filename": "src/shims/unix/freebsd/foreign_items.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -0,0 +1,31 @@\n+use rustc_middle::mir;\n+use rustc_span::Symbol;\n+use rustc_target::spec::abi::Abi;\n+\n+use crate::*;\n+use shims::foreign_items::EmulateByNameResult;\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: Symbol,\n+        abi: Abi,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: &PlaceTy<'tcx, Tag>,\n+        _ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n+        let this = self.eval_context_mut();\n+        match link_name.as_str() {\n+            // Linux's `pthread_getattr_np` equivalent\n+            \"pthread_attr_get_np\" if this.frame_in_std() => {\n+                let [_thread, _attr] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                this.write_null(dest)?;\n+            }\n+            _ => return Ok(EmulateByNameResult::NotSupported),\n+        }\n+        Ok(EmulateByNameResult::NeedsJumping)\n+    }\n+}"}, {"sha": "434f5f30b5a5689206655f20e623d99789556bb6", "filename": "src/shims/unix/freebsd/mod.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Ffreebsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Ffreebsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fmod.rs?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -0,0 +1,2 @@\n+pub mod dlsym;\n+pub mod foreign_items;"}, {"sha": "48abe9bf08c33d1658cfa05d706521ace2bca5d7", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -80,28 +80,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n-            // Querying system information\n-            \"pthread_attr_getstack\" => {\n-                // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here.\n-                let [attr_place, addr_place, size_place] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.deref_operand(attr_place)?;\n-                let addr_place = this.deref_operand(addr_place)?;\n-                let size_place = this.deref_operand(size_place)?;\n-\n-                this.write_scalar(\n-                    Scalar::from_uint(STACK_ADDR, this.pointer_size()),\n-                    &addr_place.into(),\n-                )?;\n-                this.write_scalar(\n-                    Scalar::from_uint(STACK_SIZE, this.pointer_size()),\n-                    &size_place.into(),\n-                )?;\n-\n-                // Return success (`0`).\n-                this.write_null(dest)?;\n-            }\n-\n             // Threading\n             \"prctl\" => {\n                 // prctl is variadic. (It is not documented like that in the manpage, but defined like that in the libc crate.)"}, {"sha": "8e8c70bbd0faf4fa3f4068382311eacc7f18efca", "filename": "src/shims/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/src%2Fshims%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmod.rs?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -5,6 +5,7 @@ mod fs;\n mod sync;\n mod thread;\n \n+mod freebsd;\n mod linux;\n mod macos;\n "}, {"sha": "e73e796449cc54efb44a3a6ddb5c7d0dd604baa1", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f5593de579545b4e68512718c948fbed89f21931/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5593de579545b4e68512718c948fbed89f21931/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=f5593de579545b4e68512718c948fbed89f21931", "patch": "@@ -5,14 +5,14 @@\n \n extern crate libc;\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn tmp() -> std::path::PathBuf {\n     std::env::var(\"MIRI_TEMP\")\n         .map(std::path::PathBuf::from)\n         .unwrap_or_else(|_| std::env::temp_dir())\n }\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_posix_fadvise() {\n     use std::convert::TryInto;\n     use std::fs::{remove_file, File};\n@@ -42,7 +42,7 @@ fn test_posix_fadvise() {\n     assert_eq!(result, 0);\n }\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_sync_file_range() {\n     use std::fs::{remove_file, File};\n     use std::io::Write;\n@@ -208,7 +208,7 @@ fn test_rwlock_libc_static_initializer() {\n /// Test whether the `prctl` shim correctly sets the thread name.\n ///\n /// Note: `prctl` exists only on Linux.\n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_prctl_thread_name() {\n     use libc::c_long;\n     use std::ffi::CString;\n@@ -277,7 +277,7 @@ fn test_thread_local_errno() {\n }\n \n /// Tests whether clock support exists at all\n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_clocks() {\n     let mut tp = std::mem::MaybeUninit::<libc::timespec>::uninit();\n     let is_error = unsafe { libc::clock_gettime(libc::CLOCK_REALTIME, tp.as_mut_ptr()) };\n@@ -291,25 +291,25 @@ fn test_clocks() {\n }\n \n fn main() {\n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_posix_fadvise();\n \n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_sync_file_range();\n \n     test_mutex_libc_init_recursive();\n     test_mutex_libc_init_normal();\n     test_mutex_libc_init_errorcheck();\n     test_rwlock_libc_static_initializer();\n \n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_mutex_libc_static_initializer_recursive();\n \n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_prctl_thread_name();\n \n     test_thread_local_errno();\n \n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_clocks();\n }"}]}