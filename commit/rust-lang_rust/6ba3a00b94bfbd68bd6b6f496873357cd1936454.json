{"sha": "6ba3a00b94bfbd68bd6b6f496873357cd1936454", "node_id": "C_kwDOAAsO6NoAKDZiYTNhMDBiOTRiZmJkNjhiZDZiNmY0OTY4NzMzNTdjZDE5MzY0NTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-13T14:18:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-13T14:18:04Z"}, "message": "Auto merge of #9822 - Veykril:unnecessary-safety-doc, r=Jarcho\n\nAdd `unnecessary_safety_doc` lint\n\nchangelog: [`unnecessary_safety_doc`]: Add `unnecessary_safety_doc` lint\n\nfixes https://github.com/rust-lang/rust-clippy/issues/6880\n\nThis lint does not trigger for private functions, just like `missing_safety_docs`. Reason for that was implementation simplicity and because I figured asking first would make more sense, so if it should trigger for private functions as well let me know and I'll fix that up as well.", "tree": {"sha": "308952825fce88fcd78eef94a3532d5aa30183f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/308952825fce88fcd78eef94a3532d5aa30183f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba3a00b94bfbd68bd6b6f496873357cd1936454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba3a00b94bfbd68bd6b6f496873357cd1936454", "html_url": "https://github.com/rust-lang/rust/commit/6ba3a00b94bfbd68bd6b6f496873357cd1936454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba3a00b94bfbd68bd6b6f496873357cd1936454/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8151409a0352c4141fc823cdbbd70edfdf88366", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8151409a0352c4141fc823cdbbd70edfdf88366", "html_url": "https://github.com/rust-lang/rust/commit/a8151409a0352c4141fc823cdbbd70edfdf88366"}, {"sha": "146bd1e13d910bc90c5316f11ddecd35f2673d65", "url": "https://api.github.com/repos/rust-lang/rust/commits/146bd1e13d910bc90c5316f11ddecd35f2673d65", "html_url": "https://github.com/rust-lang/rust/commit/146bd1e13d910bc90c5316f11ddecd35f2673d65"}], "stats": {"total": 303, "additions": 278, "deletions": 25}, "files": [{"sha": "f1697312d5c665a25044a97223f112c917e25df7", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3a00b94bfbd68bd6b6f496873357cd1936454/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3a00b94bfbd68bd6b6f496873357cd1936454/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6ba3a00b94bfbd68bd6b6f496873357cd1936454", "patch": "@@ -4449,6 +4449,7 @@ Released 2018-09-13\n [`unnecessary_mut_passed`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed\n [`unnecessary_operation`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation\n [`unnecessary_owned_empty_strings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_owned_empty_strings\n+[`unnecessary_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_doc\n [`unnecessary_self_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_self_imports\n [`unnecessary_sort_by`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\n [`unnecessary_to_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_to_owned"}, {"sha": "0ff039a4cdfd67f05d5da4dfc1a59f7a2ebe6dc0", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3a00b94bfbd68bd6b6f496873357cd1936454/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3a00b94bfbd68bd6b6f496873357cd1936454/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=6ba3a00b94bfbd68bd6b6f496873357cd1936454", "patch": "@@ -127,6 +127,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::doc::MISSING_PANICS_DOC_INFO,\n     crate::doc::MISSING_SAFETY_DOC_INFO,\n     crate::doc::NEEDLESS_DOCTEST_MAIN_INFO,\n+    crate::doc::UNNECESSARY_SAFETY_DOC_INFO,\n     crate::double_parens::DOUBLE_PARENS_INFO,\n     crate::drop_forget_ref::DROP_COPY_INFO,\n     crate::drop_forget_ref::DROP_NON_DROP_INFO,"}, {"sha": "2ff58ade31fa40420117636d91cf667d67a87a3f", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 69, "deletions": 25, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3a00b94bfbd68bd6b6f496873357cd1936454/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3a00b94bfbd68bd6b6f496873357cd1936454/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=6ba3a00b94bfbd68bd6b6f496873357cd1936454", "patch": "@@ -221,6 +221,42 @@ declare_clippy_lint! {\n     \"possible typo for an intra-doc link\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for the doc comments of publicly visible\n+    /// safe functions and traits and warns if there is a `# Safety` section.\n+    ///\n+    /// ### Why is this bad?\n+    /// Safe functions and traits are safe to implement and therefore do not\n+    /// need to describe safety preconditions that users are required to uphold.\n+    ///\n+    /// ### Examples\n+    /// ```rust\n+    ///# type Universe = ();\n+    /// /// # Safety\n+    /// ///\n+    /// /// This function should not be called before the horsemen are ready.\n+    /// pub fn start_apocalypse_but_safely(u: &mut Universe) {\n+    ///     unimplemented!();\n+    /// }\n+    /// ```\n+    ///\n+    /// The function is safe, so there shouldn't be any preconditions\n+    /// that have to be explained for safety reasons.\n+    ///\n+    /// ```rust\n+    ///# type Universe = ();\n+    /// /// This function should really be documented\n+    /// pub fn start_apocalypse(u: &mut Universe) {\n+    ///     unimplemented!();\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub UNNECESSARY_SAFETY_DOC,\n+    style,\n+    \"`pub fn` or `pub trait` with `# Safety` docs\"\n+}\n+\n #[expect(clippy::module_name_repetitions)]\n #[derive(Clone)]\n pub struct DocMarkdown {\n@@ -243,7 +279,8 @@ impl_lint_pass!(DocMarkdown => [\n     MISSING_SAFETY_DOC,\n     MISSING_ERRORS_DOC,\n     MISSING_PANICS_DOC,\n-    NEEDLESS_DOCTEST_MAIN\n+    NEEDLESS_DOCTEST_MAIN,\n+    UNNECESSARY_SAFETY_DOC,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n@@ -254,7 +291,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let headers = check_attrs(cx, &self.valid_idents, attrs);\n+        let Some(headers) = check_attrs(cx, &self.valid_idents, attrs) else { return };\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n                 if !(is_entrypoint_fn(cx, item.def_id.to_def_id()) || in_external_macro(cx.tcx.sess, item.span)) {\n@@ -271,15 +308,20 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n             hir::ItemKind::Impl(impl_) => {\n                 self.in_trait_impl = impl_.of_trait.is_some();\n             },\n-            hir::ItemKind::Trait(_, unsafety, ..) => {\n-                if !headers.safety && unsafety == hir::Unsafety::Unsafe {\n-                    span_lint(\n-                        cx,\n-                        MISSING_SAFETY_DOC,\n-                        cx.tcx.def_span(item.def_id),\n-                        \"docs for unsafe trait missing `# Safety` section\",\n-                    );\n-                }\n+            hir::ItemKind::Trait(_, unsafety, ..) => match (headers.safety, unsafety) {\n+                (false, hir::Unsafety::Unsafe) => span_lint(\n+                    cx,\n+                    MISSING_SAFETY_DOC,\n+                    cx.tcx.def_span(item.def_id),\n+                    \"docs for unsafe trait missing `# Safety` section\",\n+                ),\n+                (true, hir::Unsafety::Normal) => span_lint(\n+                    cx,\n+                    UNNECESSARY_SAFETY_DOC,\n+                    cx.tcx.def_span(item.def_id),\n+                    \"docs for safe trait have unnecessary `# Safety` section\",\n+                ),\n+                _ => (),\n             },\n             _ => (),\n         }\n@@ -293,7 +335,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let headers = check_attrs(cx, &self.valid_idents, attrs);\n+        let Some(headers) = check_attrs(cx, &self.valid_idents, attrs) else { return };\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n                 lint_for_missing_headers(cx, item.def_id.def_id, sig, headers, None, None);\n@@ -303,7 +345,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let headers = check_attrs(cx, &self.valid_idents, attrs);\n+        let Some(headers) = check_attrs(cx, &self.valid_idents, attrs) else { return };\n         if self.in_trait_impl || in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n@@ -343,14 +385,20 @@ fn lint_for_missing_headers(\n     }\n \n     let span = cx.tcx.def_span(def_id);\n-\n-    if !headers.safety && sig.header.unsafety == hir::Unsafety::Unsafe {\n-        span_lint(\n+    match (headers.safety, sig.header.unsafety) {\n+        (false, hir::Unsafety::Unsafe) => span_lint(\n             cx,\n             MISSING_SAFETY_DOC,\n             span,\n             \"unsafe function's docs miss `# Safety` section\",\n-        );\n+        ),\n+        (true, hir::Unsafety::Normal) => span_lint(\n+            cx,\n+            UNNECESSARY_SAFETY_DOC,\n+            span,\n+            \"safe function's docs have unnecessary `# Safety` section\",\n+        ),\n+        _ => (),\n     }\n     if !headers.panics && panic_span.is_some() {\n         span_lint_and_note(\n@@ -452,7 +500,7 @@ struct DocHeaders {\n     panics: bool,\n }\n \n-fn check_attrs(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &[Attribute]) -> DocHeaders {\n+fn check_attrs(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &[Attribute]) -> Option<DocHeaders> {\n     use pulldown_cmark::{BrokenLink, CowStr, Options};\n     /// We don't want the parser to choke on intra doc links. Since we don't\n     /// actually care about rendering them, just pretend that all broken links are\n@@ -473,11 +521,7 @@ fn check_attrs(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &[\n         } else if attr.has_name(sym::doc) {\n             // ignore mix of sugared and non-sugared doc\n             // don't trigger the safety or errors check\n-            return DocHeaders {\n-                safety: true,\n-                errors: true,\n-                panics: true,\n-            };\n+            return None;\n         }\n     }\n \n@@ -489,7 +533,7 @@ fn check_attrs(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &[\n     }\n \n     if doc.is_empty() {\n-        return DocHeaders::default();\n+        return Some(DocHeaders::default());\n     }\n \n     let mut cb = fake_broken_link_callback;\n@@ -512,7 +556,7 @@ fn check_attrs(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &[\n             (previous, current) => Err(((previous, previous_range), (current, current_range))),\n         }\n     });\n-    check_doc(cx, valid_idents, events, &spans)\n+    Some(check_doc(cx, valid_idents, events, &spans))\n }\n \n const RUST_CODE: &[&str] = &[\"rust\", \"no_run\", \"should_panic\", \"compile_fail\"];"}, {"sha": "3d917e3dc75e9211a5ca7f5a52de06d569792acb", "filename": "tests/ui/auxiliary/doc_unsafe_macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3a00b94bfbd68bd6b6f496873357cd1936454/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3a00b94bfbd68bd6b6f496873357cd1936454/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs?ref=6ba3a00b94bfbd68bd6b6f496873357cd1936454", "patch": "@@ -6,3 +6,11 @@ macro_rules! undocd_unsafe {\n         }\n     };\n }\n+#[macro_export]\n+macro_rules! undocd_safe {\n+    () => {\n+        pub fn vey_oy() {\n+            unimplemented!();\n+        }\n+    };\n+}"}, {"sha": "d9e9363b0f4bdd17540aaa9355e67fde5b37553d", "filename": "tests/ui/doc_unnecessary_unsafe.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3a00b94bfbd68bd6b6f496873357cd1936454/tests%2Fui%2Fdoc_unnecessary_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3a00b94bfbd68bd6b6f496873357cd1936454/tests%2Fui%2Fdoc_unnecessary_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unnecessary_unsafe.rs?ref=6ba3a00b94bfbd68bd6b6f496873357cd1936454", "patch": "@@ -0,0 +1,148 @@\n+// aux-build:doc_unsafe_macros.rs\n+\n+#![allow(clippy::let_unit_value)]\n+\n+#[macro_use]\n+extern crate doc_unsafe_macros;\n+\n+/// This is has no safety section, and does not need one either\n+pub fn destroy_the_planet() {\n+    unimplemented!();\n+}\n+\n+/// This one does not need a `Safety` section\n+///\n+/// # Safety\n+///\n+/// This function shouldn't be called unless the horsemen are ready\n+pub fn apocalypse(universe: &mut ()) {\n+    unimplemented!();\n+}\n+\n+/// This is a private function, skip to match behavior with `missing_safety_doc`.\n+///\n+/// # Safety\n+///\n+/// Boo!\n+fn you_dont_see_me() {\n+    unimplemented!();\n+}\n+\n+mod private_mod {\n+    /// This is public but unexported function, skip to match behavior with `missing_safety_doc`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Very safe!\n+    pub fn only_crate_wide_accessible() {\n+        unimplemented!();\n+    }\n+\n+    /// # Safety\n+    ///\n+    /// Unnecessary safety!\n+    pub fn republished() {\n+        unimplemented!();\n+    }\n+}\n+\n+pub use private_mod::republished;\n+\n+pub trait SafeTraitSafeMethods {\n+    fn woefully_underdocumented(self);\n+\n+    /// # Safety\n+    ///\n+    /// Unnecessary!\n+    fn documented(self);\n+}\n+\n+pub trait SafeTrait {\n+    fn method();\n+}\n+\n+/// # Safety\n+///\n+/// Unnecessary!\n+pub trait DocumentedSafeTrait {\n+    fn method2();\n+}\n+\n+pub struct Struct;\n+\n+impl SafeTraitSafeMethods for Struct {\n+    fn woefully_underdocumented(self) {\n+        // all is well\n+    }\n+\n+    fn documented(self) {\n+        // all is still well\n+    }\n+}\n+\n+impl SafeTrait for Struct {\n+    fn method() {}\n+}\n+\n+impl DocumentedSafeTrait for Struct {\n+    fn method2() {}\n+}\n+\n+impl Struct {\n+    /// # Safety\n+    ///\n+    /// Unnecessary!\n+    pub fn documented() -> Self {\n+        unimplemented!();\n+    }\n+\n+    pub fn undocumented(&self) {\n+        unimplemented!();\n+    }\n+\n+    /// Private, fine again to stay consistent with `missing_safety_doc`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Unnecessary!\n+    fn private(&self) {\n+        unimplemented!();\n+    }\n+}\n+\n+macro_rules! very_safe {\n+    () => {\n+        pub fn whee() {\n+            unimplemented!()\n+        }\n+\n+        /// # Safety\n+        ///\n+        /// Driving is very safe already!\n+        pub fn drive() {\n+            whee()\n+        }\n+    };\n+}\n+\n+very_safe!();\n+\n+// we don't lint code from external macros\n+undocd_safe!();\n+\n+fn main() {}\n+\n+// do not lint if any parent has `#[doc(hidden)]` attribute\n+// see #7347\n+#[doc(hidden)]\n+pub mod __macro {\n+    pub struct T;\n+    impl T {\n+        pub unsafe fn f() {}\n+    }\n+}\n+\n+/// # Implementation safety\n+pub trait DocumentedSafeTraitWithImplementationHeader {\n+    fn method();\n+}"}, {"sha": "83b2efbb346be5e7207da88cccb5b08737e8a409", "filename": "tests/ui/doc_unnecessary_unsafe.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3a00b94bfbd68bd6b6f496873357cd1936454/tests%2Fui%2Fdoc_unnecessary_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3a00b94bfbd68bd6b6f496873357cd1936454/tests%2Fui%2Fdoc_unnecessary_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unnecessary_unsafe.stderr?ref=6ba3a00b94bfbd68bd6b6f496873357cd1936454", "patch": "@@ -0,0 +1,51 @@\n+error: safe function's docs have unnecessary `# Safety` section\n+  --> $DIR/doc_unnecessary_unsafe.rs:18:1\n+   |\n+LL | pub fn apocalypse(universe: &mut ()) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unnecessary-safety-doc` implied by `-D warnings`\n+\n+error: safe function's docs have unnecessary `# Safety` section\n+  --> $DIR/doc_unnecessary_unsafe.rs:44:5\n+   |\n+LL |     pub fn republished() {\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: safe function's docs have unnecessary `# Safety` section\n+  --> $DIR/doc_unnecessary_unsafe.rs:57:5\n+   |\n+LL |     fn documented(self);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: docs for safe trait have unnecessary `# Safety` section\n+  --> $DIR/doc_unnecessary_unsafe.rs:67:1\n+   |\n+LL | pub trait DocumentedSafeTrait {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: safe function's docs have unnecessary `# Safety` section\n+  --> $DIR/doc_unnecessary_unsafe.rs:95:5\n+   |\n+LL |     pub fn documented() -> Self {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: safe function's docs have unnecessary `# Safety` section\n+  --> $DIR/doc_unnecessary_unsafe.rs:122:9\n+   |\n+LL |         pub fn drive() {\n+   |         ^^^^^^^^^^^^^^\n+...\n+LL | very_safe!();\n+   | ------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `very_safe` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: docs for safe trait have unnecessary `# Safety` section\n+  --> $DIR/doc_unnecessary_unsafe.rs:146:1\n+   |\n+LL | pub trait DocumentedSafeTraitWithImplementationHeader {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}]}