{"sha": "c1437c944c280ff9d761c45912167f1023d0e24c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNDM3Yzk0NGMyODBmZjlkNzYxYzQ1OTEyMTY3ZjEwMjNkMGUyNGM=", "commit": {"author": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-01-25T17:22:44Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-27T09:52:40Z"}, "message": "Make NiceRegionError use the `InferCtxt` instead of its `TyCtxt`\n\nSome errors (e.g placeholder errors) have unresolved type vars so this will allow to use `resolve_type_vars_if_possible` when needed.", "tree": {"sha": "c10884ae1720d288ba8b09cc20d99394da4b4d09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c10884ae1720d288ba8b09cc20d99394da4b4d09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1437c944c280ff9d761c45912167f1023d0e24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1437c944c280ff9d761c45912167f1023d0e24c", "html_url": "https://github.com/rust-lang/rust/commit/c1437c944c280ff9d761c45912167f1023d0e24c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1437c944c280ff9d761c45912167f1023d0e24c/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1484d0d123860dbd79804e9996f3fa5b6f4a6d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/1484d0d123860dbd79804e9996f3fa5b6f4a6d58", "html_url": "https://github.com/rust-lang/rust/commit/1484d0d123860dbd79804e9996f3fa5b6f4a6d58"}], "stats": {"total": 92, "additions": 48, "deletions": 44}, "files": [{"sha": "8be49b2792441ab7043e714281356ee2d8c6d827", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=c1437c944c280ff9d761c45912167f1023d0e24c", "patch": "@@ -46,9 +46,9 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let (span, sub, sup) = self.get_regions();\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n-        let anon_reg_sup = self.tcx.is_suitable_region(sup)?;\n+        let anon_reg_sup = self.tcx().is_suitable_region(sup)?;\n \n-        let anon_reg_sub = self.tcx.is_suitable_region(sub)?;\n+        let anon_reg_sub = self.tcx().is_suitable_region(sub)?;\n         let scope_def_id_sup = anon_reg_sup.def_id;\n         let bregion_sup = anon_reg_sup.boundregion;\n         let scope_def_id_sub = anon_reg_sub.def_id;\n@@ -138,7 +138,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         };\n \n \n-        struct_span_err!(self.tcx.sess, span, E0623, \"lifetime mismatch\")\n+        struct_span_err!(self.tcx().sess, span, E0623, \"lifetime mismatch\")\n             .span_label(span_1, main_label)\n             .span_label(span_2, String::new())\n             .span_label(span, span_label)"}, {"sha": "eeaa01375ed4da9456c0c7ca0f2d95305a4b00c3", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=c1437c944c280ff9d761c45912167f1023d0e24c", "patch": "@@ -26,10 +26,10 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         region: Region<'tcx>,\n         br: &ty::BoundRegion,\n     ) -> Option<(&hir::Ty, &hir::FnDecl)> {\n-        if let Some(anon_reg) = self.tcx.is_suitable_region(region) {\n+        if let Some(anon_reg) = self.tcx().is_suitable_region(region) {\n             let def_id = anon_reg.def_id;\n-            if let Some(node_id) = self.tcx.hir().as_local_node_id(def_id) {\n-                let fndecl = match self.tcx.hir().get(node_id) {\n+            if let Some(node_id) = self.tcx().hir().as_local_node_id(def_id) {\n+                let fndecl = match self.tcx().hir().get(node_id) {\n                     Node::Item(&hir::Item {\n                         node: hir::ItemKind::Fn(ref fndecl, ..),\n                         ..\n@@ -64,7 +64,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         br: &ty::BoundRegion,\n     ) -> Option<(&'gcx hir::Ty)> {\n         let mut nested_visitor = FindNestedTypeVisitor {\n-            tcx: self.tcx,\n+            tcx: self.tcx(),\n             bound_region: *br,\n             found_type: None,\n             current_index: ty::INNERMOST,"}, {"sha": "d34b71c33f4b43b50ee657ce5ed1b47aa4997f79", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=c1437c944c280ff9d761c45912167f1023d0e24c", "patch": "@@ -22,37 +22,41 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         if let Some(tables) = self.in_progress_tables {\n             let tables = tables.borrow();\n-            NiceRegionError::new(self.tcx, error.clone(), Some(&tables)).try_report().is_some()\n+            NiceRegionError::new(self, error.clone(), Some(&tables)).try_report().is_some()\n         } else {\n-            NiceRegionError::new(self.tcx, error.clone(), None).try_report().is_some()\n+            NiceRegionError::new(self, error.clone(), None).try_report().is_some()\n         }\n     }\n }\n \n pub struct NiceRegionError<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n-    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+    infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n     error: Option<RegionResolutionError<'tcx>>,\n     regions: Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)>,\n     tables: Option<&'cx ty::TypeckTables<'tcx>>,\n }\n \n impl<'cx, 'gcx, 'tcx> NiceRegionError<'cx, 'gcx, 'tcx> {\n     pub fn new(\n-        tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+        infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n         error: RegionResolutionError<'tcx>,\n         tables: Option<&'cx ty::TypeckTables<'tcx>>,\n     ) -> Self {\n-        Self { tcx, error: Some(error), regions: None, tables }\n+        Self { infcx, error: Some(error), regions: None, tables }\n     }\n \n     pub fn new_from_span(\n-        tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+        infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n         span: Span,\n         sub: ty::Region<'tcx>,\n         sup: ty::Region<'tcx>,\n         tables: Option<&'cx ty::TypeckTables<'tcx>>,\n     ) -> Self {\n-        Self { tcx, error: None, regions: Some((span, sub, sup)), tables }\n+        Self { infcx, error: None, regions: Some((span, sub, sup)), tables }\n+    }\n+\n+    fn tcx(&self) -> TyCtxt<'cx, 'gcx, 'tcx> {\n+        self.infcx.tcx\n     }\n \n     pub fn try_report_from_nll(&self) -> Option<ErrorReported> {"}, {"sha": "05333f43373367e3f8a169f37e16060d5625e47b", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=c1437c944c280ff9d761c45912167f1023d0e24c", "patch": "@@ -24,23 +24,23 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         // version new_ty of its type where the anonymous region is replaced\n         // with the named one.//scope_def_id\n         let (named, anon, anon_arg_info, region_info) = if self.is_named_region(sub)\n-            && self.tcx.is_suitable_region(sup).is_some()\n+            && self.tcx().is_suitable_region(sup).is_some()\n             && self.find_arg_with_region(sup, sub).is_some()\n         {\n             (\n                 sub,\n                 sup,\n                 self.find_arg_with_region(sup, sub).unwrap(),\n-                self.tcx.is_suitable_region(sup).unwrap(),\n+                self.tcx().is_suitable_region(sup).unwrap(),\n             )\n-        } else if self.is_named_region(sup) && self.tcx.is_suitable_region(sub).is_some()\n+        } else if self.is_named_region(sup) && self.tcx().is_suitable_region(sub).is_some()\n             && self.find_arg_with_region(sub, sup).is_some()\n         {\n             (\n                 sup,\n                 sub,\n                 self.find_arg_with_region(sub, sup).unwrap(),\n-                self.tcx.is_suitable_region(sub).unwrap(),\n+                self.tcx().is_suitable_region(sub).unwrap(),\n             )\n         } else {\n             return None; // inapplicable\n@@ -97,7 +97,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         };\n \n         struct_span_err!(\n-            self.tcx.sess,\n+            self.tcx().sess,\n             span,\n             E0621,\n             \"explicit lifetime required in {}\","}, {"sha": "cbd36a8b2db8ae2b853c3df4e386f0208912fe7d", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=c1437c944c280ff9d761c45912167f1023d0e24c", "patch": "@@ -47,15 +47,15 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             // closure, provide a specific message pointing this out.\n             if let (&SubregionOrigin::BindingTypeIsNotValidAtDecl(ref external_span),\n                     &RegionKind::ReFree(ref free_region)) = (&sub_origin, sup_region) {\n-                let hir = &self.tcx.hir();\n+                let hir = &self.tcx().hir();\n                 if let Some(node_id) = hir.as_local_node_id(free_region.scope) {\n                     if let Node::Expr(Expr {\n                         node: Closure(_, _, _, closure_span, None),\n                         ..\n                     }) = hir.get(node_id) {\n                         let sup_sp = sup_origin.span();\n                         let origin_sp = origin.span();\n-                        let mut err = self.tcx.sess.struct_span_err(\n+                        let mut err = self.tcx().sess.struct_span_err(\n                             sup_sp,\n                             \"borrowed data cannot be stored outside of its closure\");\n                         err.span_label(sup_sp, \"cannot be stored outside of its closure\");"}, {"sha": "7ece3d38a7f3e3ca9a71b7861b0cdda6fafe0267", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=c1437c944c280ff9d761c45912167f1023d0e24c", "patch": "@@ -38,7 +38,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 if expected.def_id == found.def_id =>\n             {\n                 Some(self.try_report_placeholders_trait(\n-                    Some(self.tcx.mk_region(ty::ReVar(*vid))),\n+                    Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                     cause,\n                     Some(sub_placeholder),\n                     Some(sup_placeholder),\n@@ -62,7 +62,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 if expected.def_id == found.def_id =>\n             {\n                 Some(self.try_report_placeholders_trait(\n-                    Some(self.tcx.mk_region(ty::ReVar(*vid))),\n+                    Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                     cause,\n                     Some(sub_placeholder),\n                     None,\n@@ -86,7 +86,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 if expected.def_id == found.def_id =>\n             {\n                 Some(self.try_report_placeholders_trait(\n-                    Some(self.tcx.mk_region(ty::ReVar(*vid))),\n+                    Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                     cause,\n                     None,\n                     Some(*sup_placeholder),\n@@ -182,19 +182,19 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         expected_substs: &'tcx Substs<'tcx>,\n         actual_substs: &'tcx Substs<'tcx>,\n     ) -> ErrorReported {\n-        let mut err = self.tcx.sess.struct_span_err(\n-            cause.span(&self.tcx),\n+        let mut err = self.tcx().sess.struct_span_err(\n+            cause.span(&self.tcx()),\n             &format!(\n                 \"implementation of `{}` is not general enough\",\n-                self.tcx.item_path_str(trait_def_id),\n+                self.tcx().item_path_str(trait_def_id),\n             ),\n         );\n \n         match cause.code {\n             ObligationCauseCode::ItemObligation(def_id) => {\n                 err.note(&format!(\n                     \"Due to a where-clause on `{}`,\",\n-                    self.tcx.item_path_str(def_id),\n+                    self.tcx().item_path_str(def_id),\n                 ));\n             }\n             _ => (),\n@@ -220,7 +220,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         let mut has_sup = None;\n         let mut has_vid = None;\n \n-        self.tcx.for_each_free_region(&expected_trait_ref, |r| {\n+        self.tcx().for_each_free_region(&expected_trait_ref, |r| {\n             if Some(r) == sub_placeholder && has_sub.is_none() {\n                 has_sub = Some(counter);\n                 counter += 1;\n@@ -230,15 +230,15 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             }\n         });\n \n-        self.tcx.for_each_free_region(&actual_trait_ref, |r| {\n+        self.tcx().for_each_free_region(&actual_trait_ref, |r| {\n             if Some(r) == vid && has_vid.is_none() {\n                 has_vid = Some(counter);\n                 counter += 1;\n             }\n         });\n \n         let self_ty_has_vid = self\n-            .tcx\n+            .tcx()\n             .any_free_region_meets(&actual_trait_ref.self_ty(), |r| Some(r) == vid);\n \n         RegionHighlightMode::maybe_highlighting_region(sub_placeholder, has_sub, || {"}, {"sha": "4331518d403ddd42b770b7dd7aabe51b658aa40c", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=c1437c944c280ff9d761c45912167f1023d0e24c", "patch": "@@ -19,13 +19,13 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                     sup_r,\n                 ) = error.clone()\n             {\n-                let anon_reg_sup = self.tcx.is_suitable_region(sup_r)?;\n+                let anon_reg_sup = self.tcx().is_suitable_region(sup_r)?;\n                 if sub_r == &RegionKind::ReStatic &&\n-                    self.tcx.return_type_impl_trait(anon_reg_sup.def_id).is_some()\n+                    self.tcx().return_type_impl_trait(anon_reg_sup.def_id).is_some()\n                 {\n                     let sp = var_origin.span();\n                     let return_sp = sub_origin.span();\n-                    let mut err = self.tcx.sess.struct_span_err(\n+                    let mut err = self.tcx().sess.struct_span_err(\n                         sp,\n                         \"cannot infer an appropriate lifetime\",\n                     );\n@@ -38,7 +38,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                         \"...but this borrow...\",\n                     );\n \n-                    let (lifetime, lt_sp_opt) = self.tcx.msg_span_from_free_region(sup_r);\n+                    let (lifetime, lt_sp_opt) = self.tcx().msg_span_from_free_region(sup_r);\n                     if let Some(lifetime_sp) = lt_sp_opt {\n                         err.span_note(\n                             lifetime_sp,\n@@ -52,7 +52,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                         }) => name.to_string(),\n                         _ => \"'_\".to_owned(),\n                     };\n-                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(return_sp) {\n+                    if let Ok(snippet) = self.tcx().sess.source_map().span_to_snippet(return_sp) {\n                         err.span_suggestion(\n                             return_sp,\n                             &format!("}, {"sha": "dd8a33829eb532f444f46e2b62f296eef6d06b68", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=c1437c944c280ff9d761c45912167f1023d0e24c", "patch": "@@ -44,13 +44,13 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let (id, bound_region) = match *anon_region {\n             ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n             ty::ReEarlyBound(ref ebr) => (\n-                self.tcx.parent_def_id(ebr.def_id).unwrap(),\n+                self.tcx().parent_def_id(ebr.def_id).unwrap(),\n                 ty::BoundRegion::BrNamed(ebr.def_id, ebr.name),\n             ),\n             _ => return None, // not a free region\n         };\n \n-        let hir = &self.tcx.hir();\n+        let hir = &self.tcx().hir();\n         if let Some(node_id) = hir.as_local_node_id(id) {\n             if let Some(body_id) = hir.maybe_body_owned_by(node_id) {\n                 let body = hir.body(body_id);\n@@ -66,7 +66,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                             let arg_ty_span = hir.span(hir.hir_to_node_id(ty_hir_id));\n                             let ty = tables.node_id_to_type_opt(arg.hir_id)?;\n                             let mut found_anon_region = false;\n-                            let new_arg_ty = self.tcx.fold_regions(&ty, &mut false, |r, _| {\n+                            let new_arg_ty = self.tcx().fold_regions(&ty, &mut false, |r, _| {\n                                 if *r == *anon_region {\n                                     found_anon_region = true;\n                                     replace_region\n@@ -108,10 +108,10 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         br: ty::BoundRegion,\n         decl: &hir::FnDecl,\n     ) -> Option<Span> {\n-        let ret_ty = self.tcx.type_of(scope_def_id);\n+        let ret_ty = self.tcx().type_of(scope_def_id);\n         if let ty::FnDef(_, _) = ret_ty.sty {\n-            let sig = ret_ty.fn_sig(self.tcx);\n-            let late_bound_regions = self.tcx\n+            let sig = ret_ty.fn_sig(self.tcx());\n+            let late_bound_regions = self.tcx()\n                 .collect_referenced_late_bound_regions(&sig.output());\n             if late_bound_regions.iter().any(|r| *r == br) {\n                 return Some(decl.output.span());\n@@ -126,7 +126,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     // enable E0621 for it.\n     pub(super) fn is_self_anon(&self, is_first: bool, scope_def_id: DefId) -> bool {\n         is_first\n-            && self.tcx\n+            && self.tcx()\n                    .opt_associated_item(scope_def_id)\n                    .map(|i| i.method_has_self_argument) == Some(true)\n     }"}, {"sha": "ec68ddaf3c852cb4156bda9ec6c76a502bc5a3eb", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1437c944c280ff9d761c45912167f1023d0e24c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=c1437c944c280ff9d761c45912167f1023d0e24c", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Check if we can use one of the \"nice region errors\".\n         if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n             let tables = infcx.tcx.typeck_tables_of(mir_def_id);\n-            let nice = NiceRegionError::new_from_span(infcx.tcx, span, o, f, Some(tables));\n+            let nice = NiceRegionError::new_from_span(infcx, span, o, f, Some(tables));\n             if let Some(_error_reported) = nice.try_report_from_nll() {\n                 return;\n             }"}]}