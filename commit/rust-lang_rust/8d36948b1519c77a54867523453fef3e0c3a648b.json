{"sha": "8d36948b1519c77a54867523453fef3e0c3a648b", "node_id": "C_kwDOAAsO6NoAKDhkMzY5NDhiMTUxOWM3N2E1NDg2NzUyMzQ1M2ZlZjNlMGMzYTY0OGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-08T22:50:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-08T22:50:12Z"}, "message": "Auto merge of #104168 - GuillaumeGomez:rollup-tf4edqc, r=GuillaumeGomez\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #103928 (Add 'ty_error_with_guaranteed' and 'const_error_with_guaranteed')\n - #104027 (Place config.toml in current working directory if config not found)\n - #104093 (disable btree size tests on Miri)\n - #104097 (run alloc benchmarks in Miri and fix UB)\n - #104104 (Add split-debuginfo print option)\n - #104109 (rustdoc: Add mutable to the description)\n - #104113 (Fix `const_fn_trait_ref_impl`, add test for it)\n - #104114 (Fix invalid background-image file name)\n - #104132 (fix: lint against lint functions)\n - #104139 (Clarify licensing situation of MPSC and SPSC queue)\n - #104147 (Remove an address comparison from the parser)\n - #104165 (Add llvm-main to triagebot.toml)\n\nFailed merges:\n\n - #104115 (Migrate crate-search element to CSS variables)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "eced4c9651b027b180542b5836a760dbbfcd571a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eced4c9651b027b180542b5836a760dbbfcd571a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d36948b1519c77a54867523453fef3e0c3a648b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d36948b1519c77a54867523453fef3e0c3a648b", "html_url": "https://github.com/rust-lang/rust/commit/8d36948b1519c77a54867523453fef3e0c3a648b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d36948b1519c77a54867523453fef3e0c3a648b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f4f41deb1557ca8ab228319d33003dd2f20f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f4f41deb1557ca8ab228319d33003dd2f20f45", "html_url": "https://github.com/rust-lang/rust/commit/85f4f41deb1557ca8ab228319d33003dd2f20f45"}, {"sha": "c46cc1dabe20d702b1544bfed21361235b6e9aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46cc1dabe20d702b1544bfed21361235b6e9aa2", "html_url": "https://github.com/rust-lang/rust/commit/c46cc1dabe20d702b1544bfed21361235b6e9aa2"}], "stats": {"total": 328, "additions": 235, "deletions": 93}, "files": [{"sha": "dd222485daf2c01b3188ff5abaa564065fa69246", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -299,8 +299,8 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         if errors.is_empty() {\n             definition_ty\n         } else {\n-            infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n-            self.tcx.ty_error()\n+            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+            self.tcx.ty_error_with_guaranteed(reported)\n         }\n     }\n }"}, {"sha": "14cfc3613bf0c890357dc20e8e4d4db2846f41aa", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -247,12 +247,13 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                     .and(type_op::normalize::Normalize::new(ty))\n                     .fully_perform(self.infcx)\n                     .unwrap_or_else(|_| {\n-                        self.infcx\n+                        let reported = self\n+                            .infcx\n                             .tcx\n                             .sess\n                             .delay_span_bug(span, &format!(\"failed to normalize {:?}\", ty));\n                         TypeOpOutput {\n-                            output: self.infcx.tcx.ty_error(),\n+                            output: self.infcx.tcx.ty_error_with_guaranteed(reported),\n                             constraints: None,\n                             error_info: None,\n                         }"}, {"sha": "9c1d0bb8b235752feff6217722def95cf51be6da", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -233,11 +233,11 @@ pub(crate) fn type_check<'mir, 'tcx>(\n             let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n             trace!(\"finalized opaque type {:?} to {:#?}\", opaque_type_key, hidden_type.ty.kind());\n             if hidden_type.has_non_region_infer() {\n-                infcx.tcx.sess.delay_span_bug(\n+                let reported = infcx.tcx.sess.delay_span_bug(\n                     decl.hidden_type.span,\n                     &format!(\"could not resolve {:#?}\", hidden_type.ty.kind()),\n                 );\n-                hidden_type.ty = infcx.tcx.ty_error();\n+                hidden_type.ty = infcx.tcx.ty_error_with_guaranteed(reported);\n             }\n \n             (opaque_type_key, (hidden_type, decl.origin))"}, {"sha": "423f0cdddfd5c2e58303562d6a45667499c2ab6d", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -736,6 +736,17 @@ fn print_crate_info(\n             // Any output here interferes with Cargo's parsing of other printed output\n             NativeStaticLibs => {}\n             LinkArgs => {}\n+            SplitDebuginfo => {\n+                use rustc_target::spec::SplitDebuginfo::{Off, Packed, Unpacked};\n+\n+                for split in &[Off, Packed, Unpacked] {\n+                    let stable = sess.target.options.supported_split_debuginfo.contains(split);\n+                    let unstable_ok = sess.unstable_options();\n+                    if stable || unstable_ok {\n+                        println!(\"{}\", split);\n+                    }\n+                }\n+            }\n         }\n     }\n     Compilation::Stop"}, {"sha": "730061fca99369791a0791aebcab0aaa13baf36d", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -482,9 +482,9 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     /// In the meantime, though, callsites are required to deal with the \"bug\"\n     /// locally in whichever way makes the most sense.\n     #[track_caller]\n-    pub fn delay_as_bug(&mut self) {\n+    pub fn delay_as_bug(&mut self) -> G {\n         self.downgrade_to_delayed_bug();\n-        self.emit();\n+        self.emit()\n     }\n \n     forward!("}, {"sha": "2665813478c2c4649b108dbd119d2c8606cf338a", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -1201,7 +1201,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     (_, _) => {\n                         let got = if let Some(_) = term.ty() { \"type\" } else { \"constant\" };\n                         let expected = def_kind.descr(assoc_item_def_id);\n-                        tcx.sess\n+                        let reported = tcx\n+                            .sess\n                             .struct_span_err(\n                                 binding.span,\n                                 &format!(\"expected {expected} bound, found {got}\"),\n@@ -1212,11 +1213,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             )\n                             .emit();\n                         term = match def_kind {\n-                            hir::def::DefKind::AssocTy => tcx.ty_error().into(),\n+                            hir::def::DefKind::AssocTy => {\n+                                tcx.ty_error_with_guaranteed(reported).into()\n+                            }\n                             hir::def::DefKind::AssocConst => tcx\n-                                .const_error(\n+                                .const_error_with_guaranteed(\n                                     tcx.bound_type_of(assoc_item_def_id)\n                                         .subst(tcx, projection_ty.skip_binder().substs),\n+                                    reported,\n                                 )\n                                 .into(),\n                             _ => unreachable!(),\n@@ -1334,8 +1338,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .map(|&(trait_ref, _, _)| trait_ref.def_id())\n                 .find(|&trait_ref| tcx.is_trait_alias(trait_ref))\n                 .map(|trait_ref| tcx.def_span(trait_ref));\n-            tcx.sess.emit_err(TraitObjectDeclaredWithNoTraits { span, trait_alias_span });\n-            return tcx.ty_error();\n+            let reported =\n+                tcx.sess.emit_err(TraitObjectDeclaredWithNoTraits { span, trait_alias_span });\n+            return tcx.ty_error_with_guaranteed(reported);\n         }\n \n         // Check that there are no gross object safety violations;\n@@ -1345,14 +1350,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let object_safety_violations =\n                 astconv_object_safety_violations(tcx, item.trait_ref().def_id());\n             if !object_safety_violations.is_empty() {\n-                report_object_safety_error(\n+                let reported = report_object_safety_error(\n                     tcx,\n                     span,\n                     item.trait_ref().def_id(),\n                     &object_safety_violations,\n                 )\n                 .emit();\n-                return tcx.ty_error();\n+                return tcx.ty_error_with_guaranteed(reported);\n             }\n         }\n \n@@ -2112,13 +2117,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"Type\"\n             };\n \n-            self.report_ambiguous_associated_type(\n+            let reported = self.report_ambiguous_associated_type(\n                 span,\n                 type_name,\n                 &path_str,\n                 item_segment.ident.name,\n             );\n-            return tcx.ty_error();\n+            return tcx.ty_error_with_guaranteed(reported)\n         };\n \n         debug!(\"qpath_to_ty: self_type={:?}\", self_ty);\n@@ -2560,8 +2565,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     {\n                         err.span_note(impl_.self_ty.span, \"not a concrete type\");\n                     }\n-                    err.emit();\n-                    tcx.ty_error()\n+                    tcx.ty_error_with_guaranteed(err.emit())\n                 } else {\n                     self.normalize_ty(span, ty)\n                 }"}, {"sha": "660c56ee8b011fb568be285d91bedc9857b95d91", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -611,11 +611,11 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n                 collected_tys.insert(def_id, ty);\n             }\n             Err(err) => {\n-                tcx.sess.delay_span_bug(\n+                let reported = tcx.sess.delay_span_bug(\n                     return_span,\n                     format!(\"could not fully resolve: {ty} => {err:?}\"),\n                 );\n-                collected_tys.insert(def_id, tcx.ty_error());\n+                collected_tys.insert(def_id, tcx.ty_error_with_guaranteed(reported));\n             }\n         }\n     }"}, {"sha": "4bca16c3a1ccef74d54f21cb22dd419055b6e7a7", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -512,8 +512,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n                 }\n                 _ => {}\n             }\n-            err.emit();\n-            self.tcx().ty_error()\n+            self.tcx().ty_error_with_guaranteed(err.emit())\n         }\n     }\n "}, {"sha": "2402495c2e4a6ffde84ea918a633705408a27c27", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -698,7 +698,7 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n     }\n \n     let Some(hidden) = locator.found else {\n-        tcx.sess.emit_err(UnconstrainedOpaqueType {\n+        let reported = tcx.sess.emit_err(UnconstrainedOpaqueType {\n             span: tcx.def_span(def_id),\n             name: tcx.item_name(tcx.local_parent(def_id).to_def_id()),\n             what: match tcx.hir().get(scope) {\n@@ -708,7 +708,7 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n                 _ => \"item\",\n             },\n         });\n-        return tcx.ty_error();\n+        return tcx.ty_error_with_guaranteed(reported);\n     };\n \n     // Only check against typeck if we didn't already error"}, {"sha": "4d8ab2c1c7ad94fe15c646a3115b5655291bdd20", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -1639,9 +1639,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 if visitor.ret_exprs.len() > 0 && let Some(expr) = expression {\n                     self.note_unreachable_loop_return(&mut err, &expr, &visitor.ret_exprs);\n                 }\n-                err.emit_unless(unsized_return);\n+                let reported = err.emit_unless(unsized_return);\n \n-                self.final_ty = Some(fcx.tcx.ty_error());\n+                self.final_ty = Some(fcx.tcx.ty_error_with_guaranteed(reported));\n             }\n         }\n     }"}, {"sha": "43669489e69bbb86201134b513ce6155f5bc92b0", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -80,14 +80,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // coercions from ! to `expected`.\n         if ty.is_never() {\n             if let Some(adjustments) = self.typeck_results.borrow().adjustments().get(expr.hir_id) {\n-                self.tcx().sess.delay_span_bug(\n+                let reported = self.tcx().sess.delay_span_bug(\n                     expr.span,\n                     \"expression with never type wound up being adjusted\",\n                 );\n                 return if let [Adjustment { kind: Adjust::NeverToAny, target }] = &adjustments[..] {\n                     target.to_owned()\n                 } else {\n-                    self.tcx().ty_error()\n+                    self.tcx().ty_error_with_guaranteed(reported)\n                 };\n             }\n \n@@ -396,8 +396,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         {\n                             err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n                         }\n-                        err.emit();\n-                        oprnd_t = tcx.ty_error();\n+                        oprnd_t = tcx.ty_error_with_guaranteed(err.emit());\n                     }\n                 }\n                 hir::UnOp::Not => {\n@@ -1097,12 +1096,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // If the assignment expression itself is ill-formed, don't\n             // bother emitting another error\n-            if lhs_ty.references_error() || rhs_ty.references_error() {\n-                err.delay_as_bug()\n-            } else {\n-                err.emit();\n-            }\n-            return self.tcx.ty_error();\n+            let reported = err.emit_unless(lhs_ty.references_error() || rhs_ty.references_error());\n+            return self.tcx.ty_error_with_guaranteed(reported);\n         }\n \n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n@@ -2777,8 +2772,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             );\n                         }\n                     }\n-                    err.emit();\n-                    self.tcx.ty_error()\n+                    let reported = err.emit();\n+                    self.tcx.ty_error_with_guaranteed(reported)\n                 }\n             }\n         }"}, {"sha": "6ed7a93d46332f4df7da0d4dead2bcfff85f5a9d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -1212,9 +1212,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    err.emit();\n-\n-                    return (tcx.ty_error(), res);\n+                    let reported = err.emit();\n+                    return (tcx.ty_error_with_guaranteed(reported), res);\n                 }\n             }\n         } else {"}, {"sha": "38b3dd218a9719b4b28fcc41ff354c66bb50c42b", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -529,8 +529,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                 }\n-                err.emit();\n-                self.tcx.ty_error()\n+                let reported = err.emit();\n+                self.tcx.ty_error_with_guaranteed(reported)\n             }\n         };\n "}, {"sha": "c248deb892b1d3a55b8d5aeb3f0a038b35767ea6", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -1278,12 +1278,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let element_tys = tcx.mk_type_list(element_tys_iter);\n         let pat_ty = tcx.mk_ty(ty::Tuple(element_tys));\n         if let Some(mut err) = self.demand_eqtype_pat_diag(span, expected, pat_ty, ti) {\n-            err.emit();\n+            let reported = err.emit();\n             // Walk subpatterns with an expected type of `err` in this case to silence\n             // further errors being emitted when using the bindings. #50333\n-            let element_tys_iter = (0..max_len).map(|_| tcx.ty_error());\n+            let element_tys_iter = (0..max_len).map(|_| tcx.ty_error_with_guaranteed(reported));\n             for (_, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n-                self.check_pat(elem, tcx.ty_error(), def_bm, ti);\n+                self.check_pat(elem, tcx.ty_error_with_guaranteed(reported), def_bm, ti);\n             }\n             tcx.mk_tup(element_tys_iter)\n         } else {"}, {"sha": "952ea14887f7bc7f279de7c1863e523c61c0195a", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -90,8 +90,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Applicability::MachineApplicable,\n             );\n         }\n-        err.emit();\n-        Some((self.tcx.ty_error(), self.tcx.ty_error()))\n+        let reported = err.emit();\n+        Some((\n+            self.tcx.ty_error_with_guaranteed(reported),\n+            self.tcx.ty_error_with_guaranteed(reported),\n+        ))\n     }\n \n     /// To type-check `base_expr[index_expr]`, we progressively autoderef"}, {"sha": "28f6ac61c5bddbed6d2553ef552b69f244063b75", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -579,6 +579,7 @@ pub trait LintContext: Sized {\n     /// Return value of the `decorate` closure is ignored, see [`struct_lint_level`] for a detailed explanation.\n     ///\n     /// [`struct_lint_level`]: rustc_middle::lint::struct_lint_level#decorate-signature\n+    #[rustc_lint_diagnostics]\n     fn lookup_with_diagnostics(\n         &self,\n         lint: &'static Lint,\n@@ -882,6 +883,7 @@ pub trait LintContext: Sized {\n     /// Return value of the `decorate` closure is ignored, see [`struct_lint_level`] for a detailed explanation.\n     ///\n     /// [`struct_lint_level`]: rustc_middle::lint::struct_lint_level#decorate-signature\n+    #[rustc_lint_diagnostics]\n     fn lookup<S: Into<MultiSpan>>(\n         &self,\n         lint: &'static Lint,\n@@ -908,6 +910,7 @@ pub trait LintContext: Sized {\n     /// Return value of the `decorate` closure is ignored, see [`struct_lint_level`] for a detailed explanation.\n     ///\n     /// [`struct_lint_level`]: rustc_middle::lint::struct_lint_level#decorate-signature\n+    #[rustc_lint_diagnostics]\n     fn struct_span_lint<S: Into<MultiSpan>>(\n         &self,\n         lint: &'static Lint,\n@@ -933,6 +936,7 @@ pub trait LintContext: Sized {\n     /// Return value of the `decorate` closure is ignored, see [`struct_lint_level`] for a detailed explanation.\n     ///\n     /// [`struct_lint_level`]: rustc_middle::lint::struct_lint_level#decorate-signature\n+    #[rustc_lint_diagnostics]\n     fn lint(\n         &self,\n         lint: &'static Lint,"}, {"sha": "dfe52312ff00d9ba188b0ab2764a753ee0196db6", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -1073,6 +1073,7 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n     /// Return value of the `decorate` closure is ignored, see [`struct_lint_level`] for a detailed explanation.\n     ///\n     /// [`struct_lint_level`]: rustc_middle::lint::struct_lint_level#decorate-signature\n+    #[rustc_lint_diagnostics]\n     pub(crate) fn struct_lint(\n         &self,\n         lint: &'static Lint,"}, {"sha": "ebb7de70e0570303252825af7696f440e8e33c26", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -36,6 +36,7 @@\n #![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n+#![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "2a93df771e1e225c23028c0412a32442a65473b8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -1283,6 +1283,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Constructs a `TyKind::Error` type with current `ErrorGuaranteed`\n+    #[track_caller]\n+    pub fn ty_error_with_guaranteed(self, reported: ErrorGuaranteed) -> Ty<'tcx> {\n+        self.mk_ty(Error(reported))\n+    }\n+\n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n     #[track_caller]\n     pub fn ty_error(self) -> Ty<'tcx> {\n@@ -1297,6 +1303,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Error(reported))\n     }\n \n+    /// Like [TyCtxt::ty_error] but for constants, with current `ErrorGuaranteed`\n+    #[track_caller]\n+    pub fn const_error_with_guaranteed(\n+        self,\n+        ty: Ty<'tcx>,\n+        reported: ErrorGuaranteed,\n+    ) -> Const<'tcx> {\n+        self.mk_const(ty::ConstKind::Error(reported), ty)\n+    }\n+\n     /// Like [TyCtxt::ty_error] but for constants.\n     #[track_caller]\n     pub fn const_error(self, ty: Ty<'tcx>) -> Const<'tcx> {\n@@ -2856,6 +2872,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Return value of the `decorate` closure is ignored, see [`struct_lint_level`] for a detailed explanation.\n     ///\n     /// [`struct_lint_level`]: rustc_middle::lint::struct_lint_level#decorate-signature\n+    #[rustc_lint_diagnostics]\n     pub fn struct_lint_node(\n         self,\n         lint: &'static Lint,"}, {"sha": "5e366ef703f254f22b9fec8a17c8813e733aafa9", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -97,7 +97,11 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     }\n     fn error_reported(&self) -> Result<(), ErrorGuaranteed> {\n         if self.references_error() {\n-            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+            if let Some(reported) = ty::tls::with(|tcx| tcx.sess.has_errors()) {\n+                Err(reported)\n+            } else {\n+                bug!(\"expect tcx.sess.has_errors return true\");\n+            }\n         } else {\n             Ok(())\n         }"}, {"sha": "d784fef2bed589e8c3f031545da5c60a15f1923f", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -833,16 +833,11 @@ impl<'a> Parser<'a> {\n                 (\"cast\", None)\n             };\n \n-        // Save the memory location of expr before parsing any following postfix operators.\n-        // This will be compared with the memory location of the output expression.\n-        // If they different we can assume we parsed another expression because the existing expression is not reallocated.\n-        let addr_before = &*cast_expr as *const _ as usize;\n         let with_postfix = self.parse_dot_or_call_expr_with_(cast_expr, span)?;\n-        let changed = addr_before != &*with_postfix as *const _ as usize;\n \n         // Check if an illegal postfix operator has been added after the cast.\n-        // If the resulting expression is not a cast, or has a different memory location, it is an illegal postfix operator.\n-        if !matches!(with_postfix.kind, ExprKind::Cast(_, _) | ExprKind::Type(_, _)) || changed {\n+        // If the resulting expression is not a cast, it is an illegal postfix operator.\n+        if !matches!(with_postfix.kind, ExprKind::Cast(_, _) | ExprKind::Type(_, _)) {\n             let msg = format!(\n                 \"{cast_kind} cannot be followed by {}\",\n                 match with_postfix.kind {"}, {"sha": "be084adb7b724c831ce3ec882180147ae431a53b", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -548,6 +548,7 @@ pub enum PrintRequest {\n     NativeStaticLibs,\n     StackProtectorStrategies,\n     LinkArgs,\n+    SplitDebuginfo,\n }\n \n pub enum Input {\n@@ -1806,6 +1807,7 @@ fn collect_print_requests(\n         (\"stack-protector-strategies\", PrintRequest::StackProtectorStrategies),\n         (\"target-spec-json\", PrintRequest::TargetSpec),\n         (\"link-args\", PrintRequest::LinkArgs),\n+        (\"split-debuginfo\", PrintRequest::SplitDebuginfo),\n     ];\n \n     prints.extend(matches.opt_strs(\"print\").into_iter().map(|req| {"}, {"sha": "1a5938fd34cf17d2b58d8c836be0f7d6c387af58", "filename": "library/alloc/src/alloc/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -22,7 +22,6 @@ fn allocate_zeroed() {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn alloc_owned_small(b: &mut Bencher) {\n     b.iter(|| {\n         let _: Box<_> = Box::new(10);"}, {"sha": "64bce0ff8c0483f805179f10d61e69f7b52feba2", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -94,6 +94,7 @@ fn test_partial_eq() {\n \n #[test]\n #[cfg(target_arch = \"x86_64\")]\n+#[cfg_attr(miri, ignore)] // We'd like to run Miri with layout randomization\n fn test_sizes() {\n     assert_eq!(core::mem::size_of::<LeafNode<(), ()>>(), 16);\n     assert_eq!(core::mem::size_of::<LeafNode<i64, i64>>(), 16 + CAPACITY * 2 * 8);"}, {"sha": "6e0f83020f9574de20c56761a70ca4978941574a", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -3,7 +3,6 @@ use core::iter::TrustedLen;\n use super::*;\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_push_back_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -16,7 +15,6 @@ fn bench_push_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_push_front_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -29,12 +27,15 @@ fn bench_push_front_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_pop_back_100(b: &mut test::Bencher) {\n-    let mut deq = VecDeque::<i32>::with_capacity(101);\n+    let size = 100;\n+    let mut deq = VecDeque::<i32>::with_capacity(size + 1);\n+    // We'll mess with private state to pretend like `deq` is filled.\n+    // Make sure the buffer is initialized so that we don't read uninit memory.\n+    unsafe { deq.ptr().write_bytes(0u8, size + 1) };\n \n     b.iter(|| {\n-        deq.head = 100;\n+        deq.head = size;\n         deq.tail = 0;\n         while !deq.is_empty() {\n             test::black_box(deq.pop_back());\n@@ -43,9 +44,9 @@ fn bench_pop_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_retain_whole_10000(b: &mut test::Bencher) {\n-    let v = (1..100000).collect::<VecDeque<u32>>();\n+    let size = if cfg!(miri) { 1000 } else { 100000 };\n+    let v = (1..size).collect::<VecDeque<u32>>();\n \n     b.iter(|| {\n         let mut v = v.clone();\n@@ -54,9 +55,9 @@ fn bench_retain_whole_10000(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_retain_odd_10000(b: &mut test::Bencher) {\n-    let v = (1..100000).collect::<VecDeque<u32>>();\n+    let size = if cfg!(miri) { 1000 } else { 100000 };\n+    let v = (1..size).collect::<VecDeque<u32>>();\n \n     b.iter(|| {\n         let mut v = v.clone();\n@@ -65,23 +66,26 @@ fn bench_retain_odd_10000(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_retain_half_10000(b: &mut test::Bencher) {\n-    let v = (1..100000).collect::<VecDeque<u32>>();\n+    let size = if cfg!(miri) { 1000 } else { 100000 };\n+    let v = (1..size).collect::<VecDeque<u32>>();\n \n     b.iter(|| {\n         let mut v = v.clone();\n-        v.retain(|x| *x > 50000)\n+        v.retain(|x| *x > size / 2)\n     })\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_pop_front_100(b: &mut test::Bencher) {\n-    let mut deq = VecDeque::<i32>::with_capacity(101);\n+    let size = 100;\n+    let mut deq = VecDeque::<i32>::with_capacity(size + 1);\n+    // We'll mess with private state to pretend like `deq` is filled.\n+    // Make sure the buffer is initialized so that we don't read uninit memory.\n+    unsafe { deq.ptr().write_bytes(0u8, size + 1) };\n \n     b.iter(|| {\n-        deq.head = 100;\n+        deq.head = size;\n         deq.tail = 0;\n         while !deq.is_empty() {\n             test::black_box(deq.pop_front());"}, {"sha": "11b43b621c7b883029cbc6d8b9db546bc21d72d0", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -576,29 +576,32 @@ mod impls {\n     use crate::marker::Tuple;\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<A: Tuple, F: ?Sized> Fn<A> for &F\n+    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n+    impl<A: Tuple, F: ?Sized> const Fn<A> for &F\n     where\n-        F: Fn<A>,\n+        F: ~const Fn<A>,\n     {\n         extern \"rust-call\" fn call(&self, args: A) -> F::Output {\n             (**self).call(args)\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<A: Tuple, F: ?Sized> FnMut<A> for &F\n+    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n+    impl<A: Tuple, F: ?Sized> const FnMut<A> for &F\n     where\n-        F: Fn<A>,\n+        F: ~const Fn<A>,\n     {\n         extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n             (**self).call(args)\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<A: Tuple, F: ?Sized> FnOnce<A> for &F\n+    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n+    impl<A: Tuple, F: ?Sized> const FnOnce<A> for &F\n     where\n-        F: Fn<A>,\n+        F: ~const Fn<A>,\n     {\n         type Output = F::Output;\n \n@@ -608,19 +611,21 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<A: Tuple, F: ?Sized> FnMut<A> for &mut F\n+    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n+    impl<A: Tuple, F: ?Sized> const FnMut<A> for &mut F\n     where\n-        F: FnMut<A>,\n+        F: ~const FnMut<A>,\n     {\n         extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n             (*self).call_mut(args)\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<A: Tuple, F: ?Sized> FnOnce<A> for &mut F\n+    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n+    impl<A: Tuple, F: ?Sized> const FnOnce<A> for &mut F\n     where\n-        F: FnMut<A>,\n+        F: ~const FnMut<A>,\n     {\n         type Output = F::Output;\n         extern \"rust-call\" fn call_once(self, args: A) -> F::Output {"}, {"sha": "0fde931140fbe78615c213c5f9dd6da4a206984f", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -3524,8 +3524,8 @@ impl<T> [T] {\n         }\n     }\n \n-    /// Transmute the slice to a slice of another type, ensuring alignment of the types is\n-    /// maintained.\n+    /// Transmute the mutable slice to a mutable slice of another type, ensuring alignment of the\n+    /// types is maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n     /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest"}, {"sha": "7322512e3b4585346b96d8b31bf29a94f673eb7c", "filename": "library/std/src/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -8,8 +8,15 @@\n //! method, and see the method for more information about it. Due to this\n //! caveat, this queue might not be appropriate for all use-cases.\n \n-// https://www.1024cores.net/home/lock-free-algorithms\n-//                          /queues/non-intrusive-mpsc-node-based-queue\n+// The original implementation is based off:\n+// https://www.1024cores.net/home/lock-free-algorithms/queues/non-intrusive-mpsc-node-based-queue\n+//\n+// Note that back when the code was imported, it was licensed under the BSD-2-Clause license:\n+// http://web.archive.org/web/20110411011612/https://www.1024cores.net/home/lock-free-algorithms/queues/unbounded-spsc-queue\n+//\n+// The original author of the code agreed to relicense it under `MIT OR Apache-2.0` in 2017, so as\n+// of today the license of this file is the same as the rest of the codebase:\n+// https://github.com/rust-lang/rust/pull/42149\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests;"}, {"sha": "61f91313ea96d79f645c4cfee272826ee5947de3", "filename": "library/std/src/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -4,7 +4,15 @@\n //! concurrently between two threads. This data structure is safe to use and\n //! enforces the semantics that there is one pusher and one popper.\n \n+// The original implementation is based off:\n // https://www.1024cores.net/home/lock-free-algorithms/queues/unbounded-spsc-queue\n+//\n+// Note that back when the code was imported, it was licensed under the BSD-2-Clause license:\n+// http://web.archive.org/web/20110411011612/https://www.1024cores.net/home/lock-free-algorithms/queues/unbounded-spsc-queue\n+//\n+// The original author of the code agreed to relicense it under `MIT OR Apache-2.0` in 2017, so as\n+// of today the license of this file is the same as the rest of the codebase:\n+// https://github.com/rust-lang/rust/pull/42149\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests;"}, {"sha": "be69f819c6428f8e88332ab7889656ec7482a88a", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -35,7 +35,7 @@ fn main() {\n \n     // NOTE: Since `./configure` generates a `config.toml`, distro maintainers will see the\n     // changelog warning, not the `x.py setup` message.\n-    let suggest_setup = !config.config.exists() && !matches!(config.cmd, Subcommand::Setup { .. });\n+    let suggest_setup = config.config.is_none() && !matches!(config.cmd, Subcommand::Setup { .. });\n     if suggest_setup {\n         println!(\"warning: you have not made a `config.toml`\");\n         println!("}, {"sha": "ba50ce9ec2426e99c362a666afdd5f2524995058", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -80,7 +80,7 @@ pub struct Config {\n     pub keep_stage_std: Vec<u32>,\n     pub src: PathBuf,\n     /// defaults to `config.toml`\n-    pub config: PathBuf,\n+    pub config: Option<PathBuf>,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n     pub incremental: bool,\n@@ -926,8 +926,10 @@ impl Config {\n         // Give a hard error if `--config` or `RUST_BOOTSTRAP_CONFIG` are set to a missing path,\n         // but not if `config.toml` hasn't been created.\n         let mut toml = if !using_default_path || toml_path.exists() {\n+            config.config = Some(toml_path.clone());\n             get_toml(&toml_path)\n         } else {\n+            config.config = None;\n             TomlConfig::default()\n         };\n \n@@ -942,7 +944,6 @@ impl Config {\n         }\n \n         config.changelog_seen = toml.changelog_seen;\n-        config.config = toml_path;\n \n         let build = toml.build.unwrap_or_default();\n "}, {"sha": "04480277fe0474cb8b3dd97993d8f4bdaf1162e0", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -82,7 +82,7 @@ impl fmt::Display for Profile {\n }\n \n pub fn setup(config: &Config, profile: Profile) {\n-    let path = &config.config;\n+    let path = &config.config.clone().unwrap_or(PathBuf::from(\"config.toml\"));\n \n     if path.exists() {\n         eprintln!("}, {"sha": "f58d2c609426d87a27f94947c7bc18ddc2e2e3ce", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -854,7 +854,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tbackground-size: 20px;\n \tbackground-position: calc(100% - 2px) 56%;\n \t/* image is black color, themes should apply a \"filter\" property to change the color */\n-\tbackground-image: url(\"down-arrow-2d685a4bae708e15.svg\");\n+\tbackground-image: url(\"down-arrow-927217e04c7463ac.svg\");\n }\n #crate-search > option {\n \tfont-size: 1rem;"}, {"sha": "5191e4676486a8fb5635572339d4b94c42b9ebdd", "filename": "src/test/run-make/valid-print-requests/valid-print-requests.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Ftest%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Ftest%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -1,2 +1,2 @@\n-error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `link-args`\n+error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `link-args`, `split-debuginfo`\n "}, {"sha": "bc8766c74c60f296693a436d415c5b62a709821e", "filename": "src/test/ui/consts/fn_trait_refs.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Ftest%2Fui%2Fconsts%2Ffn_trait_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/src%2Ftest%2Fui%2Fconsts%2Ffn_trait_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ffn_trait_refs.rs?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -0,0 +1,80 @@\n+// build-pass\n+\n+#![feature(const_fn_trait_ref_impls)]\n+#![feature(fn_traits)]\n+#![feature(unboxed_closures)]\n+#![feature(const_trait_impl)]\n+#![feature(const_mut_refs)]\n+#![feature(const_cmp)]\n+#![feature(const_refs_to_cell)]\n+\n+use std::marker::Destruct;\n+\n+const fn tester_fn<T>(f: T) -> T::Output\n+where\n+    T: ~const Fn<()> + ~const Destruct,\n+{\n+    f()\n+}\n+\n+const fn tester_fn_mut<T>(mut f: T) -> T::Output\n+where\n+    T: ~const FnMut<()> + ~const Destruct,\n+{\n+    f()\n+}\n+\n+const fn tester_fn_once<T>(f: T) -> T::Output\n+where\n+    T: ~const FnOnce<()>,\n+{\n+    f()\n+}\n+\n+const fn test_fn<T>(mut f: T) -> (T::Output, T::Output, T::Output)\n+where\n+    T: ~const Fn<()> + ~const Destruct,\n+{\n+    (\n+        // impl<A: Tuple, F: ~const Fn + ?Sized> const Fn<A> for &F\n+        tester_fn(&f),\n+        // impl<A: Tuple, F: ~const Fn + ?Sized> const FnMut<A> for &F\n+        tester_fn_mut(&f),\n+        // impl<A: Tuple, F: ~const Fn + ?Sized> const FnOnce<A> for &F\n+        tester_fn_once(&f),\n+    )\n+}\n+\n+const fn test_fn_mut<T>(mut f: T) -> (T::Output, T::Output)\n+where\n+    T: ~const FnMut<()> + ~const Destruct,\n+{\n+    (\n+        // impl<A: Tuple, F: ~const FnMut + ?Sized> const FnMut<A> for &mut F\n+        tester_fn_mut(&mut f),\n+        // impl<A: Tuple, F: ~const FnMut + ?Sized> const FnOnce<A> for &mut F\n+        tester_fn_once(&mut f),\n+    )\n+}\n+const fn test(i: i32) -> i32 {\n+    i + 1\n+}\n+\n+const fn main() {\n+    const fn one() -> i32 {\n+        1\n+    };\n+    const fn two() -> i32 {\n+        2\n+    };\n+\n+    // FIXME(const_cmp_tuple)\n+    let test_one = test_fn(one);\n+    assert!(test_one.0 == 1);\n+    assert!(test_one.1 == 1);\n+    assert!(test_one.2 == 1);\n+\n+    let test_two = test_fn_mut(two);\n+    assert!(test_two.0 == 1);\n+    assert!(test_two.1 == 1);\n+}"}, {"sha": "d3f9efcc41c3e4c2941a02349d435e3b909ce495", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d36948b1519c77a54867523453fef3e0c3a648b/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8d36948b1519c77a54867523453fef3e0c3a648b/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=8d36948b1519c77a54867523453fef3e0c3a648b", "patch": "@@ -12,6 +12,7 @@ allow-unauthenticated = [\n     \"T-*\",\n     \"WG-*\",\n     \"const-hack\",\n+    \"llvm-main\",\n     \"needs-fcp\",\n     \"relnotes\",\n     \"requires-nightly\","}]}