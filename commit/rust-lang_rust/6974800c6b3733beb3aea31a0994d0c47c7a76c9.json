{"sha": "6974800c6b3733beb3aea31a0994d0c47c7a76c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NzQ4MDBjNmIzNzMzYmViM2FlYTMxYTA5OTRkMGM0N2M3YTc2Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-08T21:57:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-08T21:57:57Z"}, "message": "Auto merge of #33288 - cyplo:32834_retry_download, r=alexcrichton\n\nGet a file during bootstrap to a temp location first.\n\nWhen downloading a file in the bootstrap phase - get it to a temp\nlocation first. Verify it there and only if downloaded properly move it\nto the `cache` directory.\n\nThis should prevent `make` being stuck if the download was interrupted\nor otherwise corrupted, as per discussion in #32834\n\nThe temporary files are deleted in case of an exception.\n\nI was looking for some unit/integration tests around this and couldn't find any - presumably because this is being tested by just Travis launching it ? Let me know if it would be good to try to write tests around this. Thanks !", "tree": {"sha": "7d4b5163ec2121a21c5d340a10bf98dc86aeb330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d4b5163ec2121a21c5d340a10bf98dc86aeb330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6974800c6b3733beb3aea31a0994d0c47c7a76c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6974800c6b3733beb3aea31a0994d0c47c7a76c9", "html_url": "https://github.com/rust-lang/rust/commit/6974800c6b3733beb3aea31a0994d0c47c7a76c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6974800c6b3733beb3aea31a0994d0c47c7a76c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebe6da34ffc72a701f4189ef7be5ab2c1cb6e8c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe6da34ffc72a701f4189ef7be5ab2c1cb6e8c9", "html_url": "https://github.com/rust-lang/rust/commit/ebe6da34ffc72a701f4189ef7be5ab2c1cb6e8c9"}, {"sha": "6bce110c3e6a931fe1bd79c640e9d29a744f0e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bce110c3e6a931fe1bd79c640e9d29a744f0e8f", "html_url": "https://github.com/rust-lang/rust/commit/6bce110c3e6a931fe1bd79c640e9d29a744f0e8f"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "0ab5253ee723940a26d347fa7ce19b3d7a490d85", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6974800c6b3733beb3aea31a0994d0c47c7a76c9/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/6974800c6b3733beb3aea31a0994d0c47c7a76c9/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=6974800c6b3733beb3aea31a0994d0c47c7a76c9", "patch": "@@ -16,20 +16,46 @@\n import subprocess\n import sys\n import tarfile\n+import tempfile\n+\n \n def get(url, path, verbose=False):\n-    print(\"downloading \" + url)\n     sha_url = url + \".sha256\"\n-    sha_path = path + \".sha256\"\n-    for _url, _path in ((url, path), (sha_url, sha_path)):\n-        # see http://serverfault.com/questions/301128/how-to-download\n-        if sys.platform == 'win32':\n-            run([\"PowerShell.exe\", \"/nologo\", \"-Command\",\n-                 \"(New-Object System.Net.WebClient)\"\n-                 \".DownloadFile('{}', '{}')\".format(_url, _path)],\n-                verbose=verbose)\n-        else:\n-            run([\"curl\", \"-o\", _path, _url], verbose=verbose)\n+    with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+        temp_path = temp_file.name\n+    with tempfile.NamedTemporaryFile(suffix=\".sha256\", delete=False) as sha_file:\n+        sha_path = sha_file.name\n+\n+    try:\n+        download(sha_path, sha_url, verbose)\n+        download(temp_path, url, verbose)\n+        verify(temp_path, sha_path, verbose)\n+        print(\"moving \" + temp_path + \" to \" + path)\n+        shutil.move(temp_path, path)\n+    finally:\n+        delete_if_present(sha_path)\n+        delete_if_present(temp_path)\n+\n+\n+def delete_if_present(path):\n+    if os.path.isfile(path):\n+        print(\"removing \" + path)\n+        os.unlink(path)\n+\n+\n+def download(path, url, verbose):\n+    print(\"downloading \" + url + \" to \" + path)\n+    # see http://serverfault.com/questions/301128/how-to-download\n+    if sys.platform == 'win32':\n+        run([\"PowerShell.exe\", \"/nologo\", \"-Command\",\n+             \"(New-Object System.Net.WebClient)\"\n+             \".DownloadFile('{}', '{}')\".format(url, path)],\n+            verbose=verbose)\n+    else:\n+        run([\"curl\", \"-o\", path, url], verbose=verbose)\n+\n+\n+def verify(path, sha_path, verbose):\n     print(\"verifying \" + path)\n     with open(path, \"rb\") as f:\n         found = hashlib.sha256(f.read()).hexdigest()\n@@ -43,6 +69,7 @@ def get(url, path, verbose=False):\n             raise RuntimeError(err)\n         sys.exit(err)\n \n+\n def unpack(tarball, dst, verbose=False, match=None):\n     print(\"extracting \" + tarball)\n     fname = os.path.basename(tarball).replace(\".tar.gz\", \"\")"}]}