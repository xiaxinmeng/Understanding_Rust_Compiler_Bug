{"sha": "b9dbb81b5e4f62be117fd196723a85e45b84341d", "node_id": "C_kwDOAAsO6NoAKGI5ZGJiODFiNWU0ZjYyYmUxMTdmZDE5NjcyM2E4NWU0NWI4NDM0MWQ", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-06T23:17:43Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:21Z"}, "message": "Improve example used for SB tests", "tree": {"sha": "49497342bcb06908446639257fc4cdb59e099588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49497342bcb06908446639257fc4cdb59e099588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9dbb81b5e4f62be117fd196723a85e45b84341d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9dbb81b5e4f62be117fd196723a85e45b84341d", "html_url": "https://github.com/rust-lang/rust/commit/b9dbb81b5e4f62be117fd196723a85e45b84341d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9dbb81b5e4f62be117fd196723a85e45b84341d/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "html_url": "https://github.com/rust-lang/rust/commit/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "81aa0a1a93d66bd96519f48e0c62debdf1b5716d", "filename": "src/test/mir-opt/dataflow-const-prop/ref_with_sb.main.DataflowConstProp.diff", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b9dbb81b5e4f62be117fd196723a85e45b84341d/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b9dbb81b5e4f62be117fd196723a85e45b84341d/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.main.DataflowConstProp.diff?ref=b9dbb81b5e4f62be117fd196723a85e45b84341d", "patch": "@@ -7,11 +7,12 @@\n       let _2: ();                          // in scope 0 at $DIR/ref_with_sb.rs:+2:5: +2:15\n       let mut _3: &i32;                    // in scope 0 at $DIR/ref_with_sb.rs:+2:12: +2:14\n       let _4: &i32;                        // in scope 0 at $DIR/ref_with_sb.rs:+2:12: +2:14\n+      let _5: ();                          // in scope 0 at $DIR/ref_with_sb.rs:+4:5: +4:20\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/ref_with_sb.rs:+1:9: +1:14\n-          let _5: i32;                     // in scope 1 at $DIR/ref_with_sb.rs:+6:9: +6:10\n+          let _6: i32;                     // in scope 1 at $DIR/ref_with_sb.rs:+7:9: +7:10\n           scope 2 {\n-              debug b => _5;               // in scope 2 at $DIR/ref_with_sb.rs:+6:9: +6:10\n+              debug b => _6;               // in scope 2 at $DIR/ref_with_sb.rs:+7:9: +7:10\n           }\n       }\n   \n@@ -25,7 +26,7 @@\n           _3 = &(*_4);                     // scope 1 at $DIR/ref_with_sb.rs:+2:12: +2:14\n           _2 = escape::<i32>(move _3) -> bb1; // scope 1 at $DIR/ref_with_sb.rs:+2:5: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_with_sb.rs:10:5: 10:11\n+                                           // + span: $DIR/ref_with_sb.rs:13:5: 13:11\n                                            // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n       }\n   \n@@ -34,13 +35,22 @@\n           StorageDead(_4);                 // scope 1 at $DIR/ref_with_sb.rs:+2:15: +2:16\n           StorageDead(_2);                 // scope 1 at $DIR/ref_with_sb.rs:+2:15: +2:16\n           _1 = const 1_i32;                // scope 1 at $DIR/ref_with_sb.rs:+3:5: +3:10\n-          StorageLive(_5);                 // scope 1 at $DIR/ref_with_sb.rs:+6:9: +6:10\n--         _5 = _1;                         // scope 1 at $DIR/ref_with_sb.rs:+6:13: +6:14\n-+         _5 = const 1_i32;                // scope 1 at $DIR/ref_with_sb.rs:+6:13: +6:14\n-          _0 = const ();                   // scope 0 at $DIR/ref_with_sb.rs:+0:11: +7:2\n-          StorageDead(_5);                 // scope 1 at $DIR/ref_with_sb.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_with_sb.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/ref_with_sb.rs:+7:2: +7:2\n+          StorageLive(_5);                 // scope 1 at $DIR/ref_with_sb.rs:+4:5: +4:20\n+          _5 = some_function() -> bb2;     // scope 1 at $DIR/ref_with_sb.rs:+4:5: +4:20\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_with_sb.rs:15:5: 15:18\n+                                           // + literal: Const { ty: fn() {some_function}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_5);                 // scope 1 at $DIR/ref_with_sb.rs:+4:20: +4:21\n+          StorageLive(_6);                 // scope 1 at $DIR/ref_with_sb.rs:+7:9: +7:10\n+-         _6 = _1;                         // scope 1 at $DIR/ref_with_sb.rs:+7:13: +7:14\n++         _6 = const 1_i32;                // scope 1 at $DIR/ref_with_sb.rs:+7:13: +7:14\n+          _0 = const ();                   // scope 0 at $DIR/ref_with_sb.rs:+0:11: +8:2\n+          StorageDead(_6);                 // scope 1 at $DIR/ref_with_sb.rs:+8:1: +8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_with_sb.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/ref_with_sb.rs:+8:2: +8:2\n       }\n   }\n   "}, {"sha": "060aa6ab79472bd9b36019d8db05ccd512efc67a", "filename": "src/test/mir-opt/dataflow-const-prop/ref_with_sb.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9dbb81b5e4f62be117fd196723a85e45b84341d/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9dbb81b5e4f62be117fd196723a85e45b84341d/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.rs?ref=b9dbb81b5e4f62be117fd196723a85e45b84341d", "patch": "@@ -4,11 +4,15 @@\n #[inline(never)]\n fn escape<T>(x: &T) {}\n \n+#[inline(never)]\n+fn some_function() {}\n+\n // EMIT_MIR ref_with_sb.main.DataflowConstProp.diff\n fn main() {\n     let mut a = 0;\n     escape(&a);\n     a = 1;\n+    some_function();\n     // With `-Zunsound-mir-opt`, this should be propagated\n     // (because we assume Stacked Borrows).\n     let b = a;"}, {"sha": "dc6a6a8a7595d1131a03637a6f64acb6dbdd9747", "filename": "src/test/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.diff", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b9dbb81b5e4f62be117fd196723a85e45b84341d/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b9dbb81b5e4f62be117fd196723a85e45b84341d/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff?ref=b9dbb81b5e4f62be117fd196723a85e45b84341d", "patch": "@@ -7,11 +7,12 @@\n       let _2: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+2:5: +2:15\n       let mut _3: &i32;                    // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n       let _4: &i32;                        // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+      let _5: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+4:5: +4:20\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/ref_without_sb.rs:+1:9: +1:14\n-          let _5: i32;                     // in scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          let _6: i32;                     // in scope 1 at $DIR/ref_without_sb.rs:+7:9: +7:10\n           scope 2 {\n-              debug b => _5;               // in scope 2 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+              debug b => _6;               // in scope 2 at $DIR/ref_without_sb.rs:+7:9: +7:10\n           }\n       }\n   \n@@ -25,7 +26,7 @@\n           _3 = &(*_4);                     // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n           _2 = escape::<i32>(move _3) -> bb1; // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_without_sb.rs:9:5: 9:11\n+                                           // + span: $DIR/ref_without_sb.rs:12:5: 12:11\n                                            // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n       }\n   \n@@ -34,12 +35,21 @@\n           StorageDead(_4);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n           StorageDead(_2);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n           _1 = const 1_i32;                // scope 1 at $DIR/ref_without_sb.rs:+3:5: +3:10\n-          StorageLive(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n-          _5 = _1;                         // scope 1 at $DIR/ref_without_sb.rs:+6:13: +6:14\n-          _0 = const ();                   // scope 0 at $DIR/ref_without_sb.rs:+0:11: +7:2\n-          StorageDead(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/ref_without_sb.rs:+7:2: +7:2\n+          StorageLive(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n+          _5 = some_function() -> bb2;     // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_without_sb.rs:14:5: 14:18\n+                                           // + literal: Const { ty: fn() {some_function}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:20: +4:21\n+          StorageLive(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+7:9: +7:10\n+          _6 = _1;                         // scope 1 at $DIR/ref_without_sb.rs:+7:13: +7:14\n+          _0 = const ();                   // scope 0 at $DIR/ref_without_sb.rs:+0:11: +8:2\n+          StorageDead(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+8:1: +8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/ref_without_sb.rs:+8:2: +8:2\n       }\n   }\n   "}, {"sha": "4789eb69cda60a2b83cb0cfa997b453805c0ad5b", "filename": "src/test/mir-opt/dataflow-const-prop/ref_without_sb.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9dbb81b5e4f62be117fd196723a85e45b84341d/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9dbb81b5e4f62be117fd196723a85e45b84341d/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs?ref=b9dbb81b5e4f62be117fd196723a85e45b84341d", "patch": "@@ -3,11 +3,15 @@\n #[inline(never)]\n fn escape<T>(x: &T) {}\n \n+#[inline(never)]\n+fn some_function() {}\n+\n // EMIT_MIR ref_without_sb.main.DataflowConstProp.diff\n fn main() {\n     let mut a = 0;\n     escape(&a);\n     a = 1;\n+    some_function();\n     // Without `-Zunsound-mir-opt`, this should not be propagated\n     // (because we do not assume Stacked Borrows).\n     let b = a;"}]}