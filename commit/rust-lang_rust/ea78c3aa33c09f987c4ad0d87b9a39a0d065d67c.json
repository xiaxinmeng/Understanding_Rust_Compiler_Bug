{"sha": "ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzhjM2FhMzNjMDlmOTg3YzRhZDBkODdiOWEzOWEwZDA2NWQ2N2M=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-16T09:41:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-18T15:10:26Z"}, "message": "Run `rustfmt --file-lines ...` for changes from previous commits.", "tree": {"sha": "09d4c7285c9dcade08d278eb3d46bb8d3c8df9e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09d4c7285c9dcade08d278eb3d46bb8d3c8df9e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "html_url": "https://github.com/rust-lang/rust/commit/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4fc7512eff62f5cc63a1a30f4474db003884c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4fc7512eff62f5cc63a1a30f4474db003884c9", "html_url": "https://github.com/rust-lang/rust/commit/4c4fc7512eff62f5cc63a1a30f4474db003884c9"}], "stats": {"total": 180, "additions": 103, "deletions": 77}, "files": [{"sha": "982886f0f157397ef415e3816d703112ea98ab21", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -505,12 +505,11 @@ impl<'a, 'tcx> DecoderWithPosition for CacheDecoder<'a, 'tcx> {\n \n // Decode something that was encoded with encode_tagged() and verify that the\n // tag matches and the correct amount of bytes was read.\n-fn decode_tagged<D, T, V>(decoder: &mut D,\n-                                    expected_tag: T)\n-                                    -> Result<V, D::Error>\n-    where T: Decodable + Eq + ::std::fmt::Debug,\n-          V: Decodable,\n-          D: DecoderWithPosition,\n+fn decode_tagged<D, T, V>(decoder: &mut D, expected_tag: T) -> Result<V, D::Error>\n+where\n+    T: Decodable + Eq + ::std::fmt::Debug,\n+    V: Decodable,\n+    D: DecoderWithPosition,\n {\n     let start_pos = decoder.position();\n "}, {"sha": "05c0a22900a0b3d9ee74485e7340a2a7343f19d0", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -20,7 +20,7 @@ struct GatherMoveInfo<'c, 'tcx> {\n     id: hir::ItemLocalId,\n     kind: MoveKind,\n     cmt: &'c mc::cmt_<'tcx>,\n-    span_path_opt: Option<MovePlace<'tcx>>\n+    span_path_opt: Option<MovePlace<'tcx>>,\n }\n \n /// Represents the kind of pattern\n@@ -91,11 +91,13 @@ pub fn gather_move_from_expr<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     gather_move(bccx, move_data, move_error_collector, move_info);\n }\n \n-pub fn gather_move_from_pat<'a, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n-                                              move_data: &MoveData<'tcx>,\n-                                              move_error_collector: &mut MoveErrorCollector<'tcx>,\n-                                              move_pat: &hir::Pat,\n-                                              cmt: &'c mc::cmt_<'tcx>) {\n+pub fn gather_move_from_pat<'a, 'c, 'tcx>(\n+    bccx: &BorrowckCtxt<'a, 'tcx>,\n+    move_data: &MoveData<'tcx>,\n+    move_error_collector: &mut MoveErrorCollector<'tcx>,\n+    move_pat: &hir::Pat,\n+    cmt: &'c mc::cmt_<'tcx>,\n+) {\n     let source = get_pattern_source(bccx.tcx,move_pat);\n     let pat_span_path_opt = match move_pat.node {\n         PatKind::Binding(_, _, ident, _) => {\n@@ -121,10 +123,12 @@ pub fn gather_move_from_pat<'a, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     gather_move(bccx, move_data, move_error_collector, move_info);\n }\n \n-fn gather_move<'a, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n-                         move_data: &MoveData<'tcx>,\n-                         move_error_collector: &mut MoveErrorCollector<'tcx>,\n-                         move_info: GatherMoveInfo<'c, 'tcx>) {\n+fn gather_move<'a, 'c, 'tcx>(\n+    bccx: &BorrowckCtxt<'a, 'tcx>,\n+    move_data: &MoveData<'tcx>,\n+    move_error_collector: &mut MoveErrorCollector<'tcx>,\n+    move_info: GatherMoveInfo<'c, 'tcx>,\n+) {\n     debug!(\"gather_move(move_id={:?}, cmt={:?})\",\n            move_info.id, move_info.cmt);\n "}, {"sha": "47b383fddbc31ca9acddcc30ca0888cfbc827dee", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -94,7 +94,7 @@ pub fn compare_simd_types<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     rhs: Bx::Value,\n     t: Ty<'tcx>,\n     ret_ty: Bx::Type,\n-    op: hir::BinOpKind\n+    op: hir::BinOpKind,\n ) -> Bx::Value {\n     let signed = match t.sty {\n         ty::Float(_) => {\n@@ -156,7 +156,7 @@ pub fn unsize_thin_ptr<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     src: Bx::Value,\n     src_ty: Ty<'tcx>,\n-    dst_ty: Ty<'tcx>\n+    dst_ty: Ty<'tcx>,\n ) -> (Bx::Value, Bx::Value) {\n     debug!(\"unsize_thin_ptr: {:?} => {:?}\", src_ty, dst_ty);\n     match (&src_ty.sty, &dst_ty.sty) {\n@@ -210,8 +210,8 @@ pub fn unsize_thin_ptr<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n pub fn coerce_unsized_into<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     src: PlaceRef<'tcx, Bx::Value>,\n-    dst: PlaceRef<'tcx, Bx::Value>\n-)  {\n+    dst: PlaceRef<'tcx, Bx::Value>,\n+) {\n     let src_ty = src.layout.ty;\n     let dst_ty = dst.layout.ty;\n     let mut coerce_ptr = || {\n@@ -270,7 +270,7 @@ pub fn cast_shift_expr_rhs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     op: hir::BinOpKind,\n     lhs: Bx::Value,\n-    rhs: Bx::Value\n+    rhs: Bx::Value,\n ) -> Bx::Value {\n     cast_shift_rhs(bx, op, lhs, rhs)\n }\n@@ -318,7 +318,7 @@ pub fn wants_msvc_seh(sess: &Session) -> bool {\n \n pub fn from_immediate<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n-    val: Bx::Value\n+    val: Bx::Value,\n ) -> Bx::Value {\n     if bx.cx().val_ty(val) == bx.cx().type_i1() {\n         bx.zext(val, bx.cx().type_i8())\n@@ -387,9 +387,7 @@ pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n \n /// Creates the `main` function which will initialize the rust runtime and call\n /// users main function.\n-pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n-    cx: &'a Bx::CodegenCx\n-) {\n+pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'a Bx::CodegenCx) {\n     let (main_def_id, span) = match cx.tcx().entry_fn(LOCAL_CRATE) {\n         Some((def_id, _)) => { (def_id, cx.tcx().def_span(def_id)) },\n         None => return,"}, {"sha": "6376512ca4025e39698ee2058fd6d98344c8de1b", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -140,7 +140,7 @@ pub fn langcall(tcx: TyCtxt<'_>, span: Option<Span>, msg: &str, li: LangItem) ->\n pub fn build_unchecked_lshift<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     lhs: Bx::Value,\n-    rhs: Bx::Value\n+    rhs: Bx::Value,\n ) -> Bx::Value {\n     let rhs = base::cast_shift_expr_rhs(bx, hir::BinOpKind::Shl, lhs, rhs);\n     // #1877, #10183: Ensure that input is always valid\n@@ -152,7 +152,7 @@ pub fn build_unchecked_rshift<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     lhs_t: Ty<'tcx>,\n     lhs: Bx::Value,\n-    rhs: Bx::Value\n+    rhs: Bx::Value,\n ) -> Bx::Value {\n     let rhs = base::cast_shift_expr_rhs(bx, hir::BinOpKind::Shr, lhs, rhs);\n     // #1877, #10183: Ensure that input is always valid\n@@ -167,7 +167,7 @@ pub fn build_unchecked_rshift<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n fn shift_mask_rhs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n-    rhs: Bx::Value\n+    rhs: Bx::Value,\n ) -> Bx::Value {\n     let rhs_llty = bx.val_ty(rhs);\n     let shift_val = shift_mask_val(bx, rhs_llty, rhs_llty, false);\n@@ -178,7 +178,7 @@ pub fn shift_mask_val<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     llty: Bx::Type,\n     mask_llty: Bx::Type,\n-    invert: bool\n+    invert: bool,\n ) -> Bx::Value {\n     let kind = bx.type_kind(llty);\n     match kind {"}, {"sha": "7fd9f67e2f45b6dc5239eaebbe02bb965acde401", "filename": "src/librustc_codegen_ssa/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fglue.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -10,7 +10,7 @@ use crate::traits::*;\n pub fn size_and_align_of_dst<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     t: Ty<'tcx>,\n-    info: Option<Bx::Value>\n+    info: Option<Bx::Value>,\n ) -> (Bx::Value, Bx::Value) {\n     let layout = bx.layout_of(t);\n     debug!(\"size_and_align_of_dst(ty={}, info={:?}): layout: {:?}\","}, {"sha": "0289150a5e42a40305175859c3cf9762cfc67b6c", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -13,7 +13,7 @@ use super::FunctionCx;\n use crate::traits::*;\n \n pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n-    fx: &FunctionCx<'a, 'tcx, Bx>\n+    fx: &FunctionCx<'a, 'tcx, Bx>,\n ) -> BitSet<mir::Local> {\n     let mir = fx.mir;\n     let mut analyzer = LocalAnalyzer::new(fx);\n@@ -49,7 +49,7 @@ struct LocalAnalyzer<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     non_ssa_locals: BitSet<mir::Local>,\n     // The location of the first visited direct assignment to each\n     // local, or an invalid location (out of bounds `block` index).\n-    first_assignment: IndexVec<mir::Local, Location>\n+    first_assignment: IndexVec<mir::Local, Location>,\n }\n \n impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n@@ -95,7 +95,8 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n }\n \n impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n-    for LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n+    for LocalAnalyzer<'mir, 'a, 'tcx, Bx>\n+{\n     fn visit_assign(&mut self,\n                     place: &mir::Place<'tcx>,\n                     rvalue: &mir::Rvalue<'tcx>,"}, {"sha": "c20be56ba0cf5cb57c9adfeebff8e13a003bc00e", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -43,7 +43,7 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     /// don't really care about it very much. Anyway, this value\n     /// contains an alloca into which the personality is stored and\n     /// then later loaded when generating the DIVERGE_BLOCK.\n-    personality_slot: Option<PlaceRef<'tcx, Bx::Value,>>,\n+    personality_slot: Option<PlaceRef<'tcx, Bx::Value>>,\n \n     /// A `Block` for each MIR `BasicBlock`\n     blocks: IndexVec<mir::BasicBlock, Bx::BasicBlock>,\n@@ -355,10 +355,11 @@ fn create_funclets<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     mir: &'a Body<'tcx>,\n     bx: &mut Bx,\n     cleanup_kinds: &IndexVec<mir::BasicBlock, CleanupKind>,\n-    block_bxs: &IndexVec<mir::BasicBlock, Bx::BasicBlock>)\n-    -> (IndexVec<mir::BasicBlock, Option<Bx::BasicBlock>>,\n-        IndexVec<mir::BasicBlock, Option<Bx::Funclet>>)\n-{\n+    block_bxs: &IndexVec<mir::BasicBlock, Bx::BasicBlock>,\n+) -> (\n+    IndexVec<mir::BasicBlock, Option<Bx::BasicBlock>>,\n+    IndexVec<mir::BasicBlock, Option<Bx::Funclet>>,\n+) {\n     block_bxs.iter_enumerated().zip(cleanup_kinds).map(|((bb, &llbb), cleanup_kind)| {\n         match *cleanup_kind {\n             CleanupKind::Funclet if base::wants_msvc_seh(bx.sess()) => {}"}, {"sha": "0728d5b21bbd18f548ebabd5902881204543330e", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -43,7 +43,7 @@ pub(crate) mod indexes {\n \n pub(crate) struct DataflowBuilder<'a, 'tcx, BD>\n where\n-    BD: BitDenotation<'tcx>\n+    BD: BitDenotation<'tcx>,\n {\n     def_id: DefId,\n     flow_state: DataflowAnalysis<'a, 'tcx, BD>,\n@@ -88,7 +88,7 @@ pub(crate) trait Dataflow<'tcx, BD: BitDenotation<'tcx>> {\n \n impl<'a, 'tcx, BD> Dataflow<'tcx, BD> for DataflowBuilder<'a, 'tcx, BD>\n where\n-    BD: BitDenotation<'tcx>\n+    BD: BitDenotation<'tcx>,\n {\n     fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> DebugFormatted {\n         self.flow_state.build_sets();\n@@ -179,12 +179,16 @@ where\n     }\n }\n \n-struct PropagationContext<'b, 'a, 'tcx, O> where O: 'b + BitDenotation<'tcx>\n+struct PropagationContext<'b, 'a, 'tcx, O>\n+where\n+    O: 'b + BitDenotation<'tcx>,\n {\n     builder: &'b mut DataflowAnalysis<'a, 'tcx, O>,\n }\n \n-impl<'a, 'tcx, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n+impl<'a, 'tcx, BD> DataflowAnalysis<'a, 'tcx, BD>\n+where\n+    BD: BitDenotation<'tcx>,\n {\n     fn propagate(&mut self) {\n         let mut temp = BitSet::new_empty(self.flow_state.sets.bits_per_block);\n@@ -234,7 +238,9 @@ impl<'a, 'tcx, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n     }\n }\n \n-impl<'b, 'a, 'tcx, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n+impl<'b, 'a, 'tcx, BD> PropagationContext<'b, 'a, 'tcx, BD>\n+where\n+    BD: BitDenotation<'tcx>,\n {\n     fn walk_cfg(&mut self, in_out: &mut BitSet<BD::Idx>) {\n         let mut dirty_queue: WorkQueue<mir::BasicBlock> =\n@@ -265,7 +271,9 @@ fn dataflow_path(context: &str, path: &str) -> PathBuf {\n     path\n }\n \n-impl<'a, 'tcx, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n+impl<'a, 'tcx, BD> DataflowBuilder<'a, 'tcx, BD>\n+where\n+    BD: BitDenotation<'tcx>,\n {\n     fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>\n         where P: Fn(&BD, BD::Idx) -> DebugFormatted\n@@ -387,14 +395,18 @@ pub fn state_for_location<'tcx, T: BitDenotation<'tcx>>(loc: Location,\n     gen_set.to_dense()\n }\n \n-pub struct DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation<'tcx>\n+pub struct DataflowAnalysis<'a, 'tcx, O>\n+where\n+    O: BitDenotation<'tcx>,\n {\n     flow_state: DataflowState<'tcx, O>,\n     dead_unwinds: &'a BitSet<mir::BasicBlock>,\n     body: &'a Body<'tcx>,\n }\n \n-impl<'a, 'tcx, O> DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation<'tcx>\n+impl<'a, 'tcx, O> DataflowAnalysis<'a, 'tcx, O>\n+where\n+    O: BitDenotation<'tcx>,\n {\n     pub fn results(self) -> DataflowResults<'tcx, O> {\n         DataflowResults(self.flow_state)\n@@ -734,7 +746,10 @@ impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation<'tcx>\n     }\n }\n \n-impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation<'tcx> {\n+impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D>\n+where\n+    D: BitDenotation<'tcx>,\n+{\n     /// Propagates the bits of `in_out` into all the successors of `bb`,\n     /// using bitwise operator denoted by `self.operator`.\n     ///"}, {"sha": "946d66fc91d7d21b53fd4e05a419b471b4dacc7e", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -33,7 +33,8 @@ impl<'tcx> ToRef for Expr<'tcx> {\n }\n \n impl<'tcx, T, U> ToRef for &'tcx Option<T>\n-    where &'tcx T: ToRef<Output = U>\n+where\n+    &'tcx T: ToRef<Output = U>,\n {\n     type Output = Option<U>;\n \n@@ -43,7 +44,8 @@ impl<'tcx, T, U> ToRef for &'tcx Option<T>\n }\n \n impl<'tcx, T, U> ToRef for &'tcx Vec<T>\n-    where &'tcx T: ToRef<Output = U>\n+where\n+    &'tcx T: ToRef<Output = U>,\n {\n     type Output = Vec<U>;\n \n@@ -53,7 +55,8 @@ impl<'tcx, T, U> ToRef for &'tcx Vec<T>\n }\n \n impl<'tcx, T, U> ToRef for &'tcx P<[T]>\n-    where &'tcx T: ToRef<Output = U>\n+where\n+    &'tcx T: ToRef<Output = U>,\n {\n     type Output = Vec<U>;\n "}, {"sha": "1fcdf71337251e612a1f331bb628d75fbc8673bd", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -632,10 +632,10 @@ impl<'tcx> Witness<'tcx> {\n ///\n /// We make sure to omit constructors that are statically impossible. E.g., for\n /// `Option<!>`, we do not include `Some(_)` in the returned list of constructors.\n-fn all_constructors<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-                                  pcx: PatternContext<'tcx>)\n-                                  -> Vec<Constructor<'tcx>>\n-{\n+fn all_constructors<'a, 'tcx>(\n+    cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+    pcx: PatternContext<'tcx>,\n+) -> Vec<Constructor<'tcx>> {\n     debug!(\"all_constructors({:?})\", pcx.ty);\n     let ctors = match pcx.ty.sty {\n         ty::Bool => {\n@@ -706,11 +706,10 @@ fn all_constructors<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     ctors\n }\n \n-fn max_slice_length<'p, 'a, 'tcx, I>(\n-    cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-    patterns: I) -> u64\n-    where I: Iterator<Item=&'p Pattern<'tcx>>,\n-        'tcx: 'p,\n+fn max_slice_length<'p, 'a, 'tcx, I>(cx: &mut MatchCheckCtxt<'a, 'tcx>, patterns: I) -> u64\n+where\n+    I: Iterator<Item = &'p Pattern<'tcx>>,\n+    'tcx: 'p,\n {\n     // The exhaustiveness-checking paper does not include any details on\n     // checking variable-length slice patterns. However, they are matched\n@@ -1056,11 +1055,12 @@ fn compute_missing_ctors<'tcx>(\n /// relation to preceding patterns, it is not reachable) and exhaustiveness\n /// checking (if a wildcard pattern is useful in relation to a matrix, the\n /// matrix isn't exhaustive).\n-pub fn is_useful<'p, 'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-                                       matrix: &Matrix<'p, 'tcx>,\n-                                       v: &[&Pattern<'tcx>],\n-                                       witness: WitnessPreference)\n-                                       -> Usefulness<'tcx> {\n+pub fn is_useful<'p, 'a, 'tcx>(\n+    cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+    matrix: &Matrix<'p, 'tcx>,\n+    v: &[&Pattern<'tcx>],\n+    witness: WitnessPreference,\n+) -> Usefulness<'tcx> {\n     let &Matrix(ref rows) = matrix;\n     debug!(\"is_useful({:#?}, {:#?})\", matrix, v);\n \n@@ -1372,10 +1372,11 @@ fn constructor_arity(cx: &MatchCheckCtxt<'a, 'tcx>, ctor: &Constructor<'tcx>, ty\n /// expanded to.\n ///\n /// For instance, a tuple pattern (43u32, 'a') has sub pattern types [u32, char].\n-fn constructor_sub_pattern_tys<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>,\n-                                             ctor: &Constructor<'tcx>,\n-                                             ty: Ty<'tcx>) -> Vec<Ty<'tcx>>\n-{\n+fn constructor_sub_pattern_tys<'a, 'tcx>(\n+    cx: &MatchCheckCtxt<'a, 'tcx>,\n+    ctor: &Constructor<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Vec<Ty<'tcx>> {\n     debug!(\"constructor_sub_pattern_tys({:#?}, {:?})\", ctor, ty);\n     match ty.sty {\n         ty::Tuple(ref fs) => fs.into_iter().map(|t| t.expect_ty()).collect(),"}, {"sha": "ba8c47c665e03b3a8bc2542b4538152ba75bab44", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -625,7 +625,8 @@ struct StorageConflictVisitor<'body, 'tcx, 's> {\n }\n \n impl<'body, 'tcx, 's> DataflowResultsConsumer<'body, 'tcx>\n-for StorageConflictVisitor<'body, 'tcx, 's> {\n+    for StorageConflictVisitor<'body, 'tcx, 's>\n+{\n     type FlowState = FlowAtLocation<'tcx, MaybeStorageLive<'body, 'tcx>>;\n \n     fn body(&self) -> &'body Body<'tcx> {"}, {"sha": "815d210d36ea4fcbbfbe93e3483be9ac1254b43d", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -91,7 +91,8 @@ pub trait DropElaborator<'a, 'tcx>: fmt::Debug {\n \n #[derive(Debug)]\n struct DropCtxt<'l, 'b, 'tcx, D>\n-    where D : DropElaborator<'b, 'tcx> + 'l\n+where\n+    D: DropElaborator<'b, 'tcx> + 'l,\n {\n     elaborator: &'l mut D,\n \n@@ -110,8 +111,9 @@ pub fn elaborate_drop<'b, 'tcx, D>(\n     path: D::Path,\n     succ: BasicBlock,\n     unwind: Unwind,\n-    bb: BasicBlock)\n-    where D: DropElaborator<'b, 'tcx>,\n+    bb: BasicBlock,\n+) where\n+    D: DropElaborator<'b, 'tcx>,\n     'tcx: 'b,\n {\n     DropCtxt {"}, {"sha": "444cf1263ce255abcf6cce8b83a1fcfb5078dfa7", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=ea78c3aa33c09f987c4ad0d87b9a39a0d065d67c", "patch": "@@ -339,11 +339,12 @@ pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n /// This method helps to extract all the type parameters referenced from a\n /// type. For a type parameter `<T>`, it looks for either a `TyPath` that\n /// is not global and starts with `T`, or a `TyQPath`.\n-fn find_type_parameters(ty: &ast::Ty,\n-                        ty_param_names: &[ast::Name],\n-                        span: Span,\n-                        cx: &ExtCtxt<'_>)\n-                        -> Vec<P<ast::Ty>> {\n+fn find_type_parameters(\n+    ty: &ast::Ty,\n+    ty_param_names: &[ast::Name],\n+    span: Span,\n+    cx: &ExtCtxt<'_>,\n+) -> Vec<P<ast::Ty>> {\n     use syntax::visit;\n \n     struct Visitor<'a, 'b> {"}]}