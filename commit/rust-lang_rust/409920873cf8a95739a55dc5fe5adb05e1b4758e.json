{"sha": "409920873cf8a95739a55dc5fe5adb05e1b4758e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOTkyMDg3M2NmOGE5NTczOWE1NWRjNWZlNWFkYjA1ZTFiNDc1OGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-04T15:16:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-04T15:16:44Z"}, "message": "Auto merge of #81451 - nikic:llvm-12, r=nagisa\n\nUpgrade to LLVM 12\n\nThis implements the necessary adjustments to make rustc work with LLVM 12. I didn't encounter any major issues so far.\n\nr? `@cuviper`", "tree": {"sha": "61f0b6eef6363dc987e6c22c7e1d8f521b321a92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f0b6eef6363dc987e6c22c7e1d8f521b321a92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409920873cf8a95739a55dc5fe5adb05e1b4758e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409920873cf8a95739a55dc5fe5adb05e1b4758e", "html_url": "https://github.com/rust-lang/rust/commit/409920873cf8a95739a55dc5fe5adb05e1b4758e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409920873cf8a95739a55dc5fe5adb05e1b4758e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7f258d543e1ac7d0b94435972331e85da8c509", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f258d543e1ac7d0b94435972331e85da8c509", "html_url": "https://github.com/rust-lang/rust/commit/ec7f258d543e1ac7d0b94435972331e85da8c509"}, {"sha": "ab03c56ba2df69e5c01d2150a319343543a29ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab03c56ba2df69e5c01d2150a319343543a29ba9", "html_url": "https://github.com/rust-lang/rust/commit/ab03c56ba2df69e5c01d2150a319343543a29ba9"}], "stats": {"total": 503, "additions": 402, "deletions": 101}, "files": [{"sha": "8618f61f04acdc8042dd8e06c8494eed56ee9389", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -37,7 +37,7 @@\n [submodule \"src/llvm-project\"]\n \tpath = src/llvm-project\n \turl = https://github.com/rust-lang/llvm-project.git\n-\tbranch = rustc/11.0-2021-01-05\n+\tbranch = rustc/12.0-2021-02-03\n [submodule \"src/doc/embedded-book\"]\n \tpath = src/doc/embedded-book\n \turl = https://github.com/rust-embedded/book.git"}, {"sha": "d9393ffe534accb4d6b7763f129db6e7d76b2583", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -430,7 +430,13 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             PassMode::Indirect { ref attrs, extra_attrs: _, on_stack } => {\n                 assert!(!on_stack);\n                 let i = apply(attrs);\n-                llvm::Attribute::StructRet.apply_llfn(llvm::AttributePlace::Argument(i), llfn);\n+                unsafe {\n+                    llvm::LLVMRustAddStructRetAttr(\n+                        llfn,\n+                        llvm::AttributePlace::Argument(i).as_uint(),\n+                        self.ret.layout.llvm_type(cx),\n+                    );\n+                }\n             }\n             _ => {}\n         }\n@@ -486,8 +492,13 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             PassMode::Indirect { ref attrs, extra_attrs: _, on_stack } => {\n                 assert!(!on_stack);\n                 let i = apply(attrs);\n-                llvm::Attribute::StructRet\n-                    .apply_callsite(llvm::AttributePlace::Argument(i), callsite);\n+                unsafe {\n+                    llvm::LLVMRustAddStructRetCallSiteAttr(\n+                        callsite,\n+                        llvm::AttributePlace::Argument(i).as_uint(),\n+                        self.ret.layout.llvm_type(bx),\n+                    );\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "38c8ae711a4cba3915f42baf1402b9d357edd157", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -304,6 +304,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             } else if options.contains(InlineAsmOptions::READONLY) {\n                 llvm::Attribute::ReadOnly.apply_callsite(llvm::AttributePlace::Function, result);\n             }\n+            llvm::Attribute::WillReturn.apply_callsite(llvm::AttributePlace::Function, result);\n         } else if options.contains(InlineAsmOptions::NOMEM) {\n             llvm::Attribute::InaccessibleMemOnly\n                 .apply_callsite(llvm::AttributePlace::Function, result);"}, {"sha": "9f6a2ae3ca1b79d3574722a7b68f872e016248e6", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -104,6 +104,10 @@ fn strip_x86_address_spaces(data_layout: String) -> String {\n     data_layout.replace(\"-p270:32:32-p271:32:32-p272:64:64-\", \"-\")\n }\n \n+fn strip_powerpc64_vectors(data_layout: String) -> String {\n+    data_layout.replace(\"-v256:256:256-v512:512:512\", \"\")\n+}\n+\n pub unsafe fn create_module(\n     tcx: TyCtxt<'_>,\n     llcx: &'ll llvm::Context,\n@@ -119,6 +123,9 @@ pub unsafe fn create_module(\n     {\n         target_data_layout = strip_x86_address_spaces(target_data_layout);\n     }\n+    if llvm_util::get_version() < (12, 0, 0) && sess.target.arch == \"powerpc64\" {\n+        target_data_layout = strip_powerpc64_vectors(target_data_layout);\n+    }\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.is_builtin {"}, {"sha": "e47b8fde40fee327a4a1972448c11383877c268d", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -162,7 +162,7 @@ pub(crate) fn write_filenames_section_to_buffer<'a>(\n pub(crate) fn write_mapping_to_buffer(\n     virtual_file_mapping: Vec<u32>,\n     expressions: Vec<CounterExpression>,\n-    mut mapping_regions: Vec<CounterMappingRegion>,\n+    mapping_regions: Vec<CounterMappingRegion>,\n     buffer: &RustString,\n ) {\n     unsafe {\n@@ -171,7 +171,7 @@ pub(crate) fn write_mapping_to_buffer(\n             virtual_file_mapping.len() as c_uint,\n             expressions.as_ptr(),\n             expressions.len() as c_uint,\n-            mapping_regions.as_mut_ptr(),\n+            mapping_regions.as_ptr(),\n             mapping_regions.len() as c_uint,\n             buffer,\n         );"}, {"sha": "e6d60044c84b4db76cf9c358d1c8bcf938863341", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -132,6 +132,7 @@ pub enum Attribute {\n     ReadNone = 26,\n     InaccessibleMemOnly = 27,\n     SanitizeHWAddress = 28,\n+    WillReturn = 29,\n }\n \n /// LLVMIntPredicate\n@@ -239,6 +240,7 @@ pub enum TypeKind {\n     Token = 16,\n     ScalableVector = 17,\n     BFloat = 18,\n+    X86_AMX = 19,\n }\n \n impl TypeKind {\n@@ -263,6 +265,7 @@ impl TypeKind {\n             TypeKind::Token => rustc_codegen_ssa::common::TypeKind::Token,\n             TypeKind::ScalableVector => rustc_codegen_ssa::common::TypeKind::ScalableVector,\n             TypeKind::BFloat => rustc_codegen_ssa::common::TypeKind::BFloat,\n+            TypeKind::X86_AMX => rustc_codegen_ssa::common::TypeKind::X86_AMX,\n         }\n     }\n }\n@@ -674,9 +677,7 @@ pub mod coverageinfo {\n     /// array\", encoded separately), and source location (start and end positions of the represented\n     /// code region).\n     ///\n-    /// Aligns with [llvm::coverage::CounterMappingRegion](https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L224-L227)\n-    /// Important: The Rust struct layout (order and types of fields) must match its C++\n-    /// counterpart.\n+    /// Matches LLVMRustCounterMappingRegion.\n     #[derive(Copy, Clone, Debug)]\n     #[repr(C)]\n     pub struct CounterMappingRegion {\n@@ -1073,6 +1074,7 @@ extern \"C\" {\n     pub fn LLVMRustAddDereferenceableAttr(Fn: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddDereferenceableOrNullAttr(Fn: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddByValAttr(Fn: &Value, index: c_uint, ty: &Type);\n+    pub fn LLVMRustAddStructRetAttr(Fn: &Value, index: c_uint, ty: &Type);\n     pub fn LLVMRustAddFunctionAttribute(Fn: &Value, index: c_uint, attr: Attribute);\n     pub fn LLVMRustAddFunctionAttrStringValue(\n         Fn: &Value,\n@@ -1108,6 +1110,7 @@ extern \"C\" {\n     pub fn LLVMRustAddDereferenceableCallSiteAttr(Instr: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddDereferenceableOrNullCallSiteAttr(Instr: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddByValCallSiteAttr(Instr: &Value, index: c_uint, ty: &Type);\n+    pub fn LLVMRustAddStructRetCallSiteAttr(Instr: &Value, index: c_uint, ty: &Type);\n \n     // Operations on load/store instructions (only)\n     pub fn LLVMSetVolatile(MemoryAccessInst: &Value, volatile: Bool);\n@@ -1792,7 +1795,7 @@ extern \"C\" {\n         NumVirtualFileMappingIDs: c_uint,\n         Expressions: *const coverage_map::CounterExpression,\n         NumExpressions: c_uint,\n-        MappingRegions: *mut coverageinfo::CounterMappingRegion,\n+        MappingRegions: *const coverageinfo::CounterMappingRegion,\n         NumMappingRegions: c_uint,\n         BufferOut: &RustString,\n     );"}, {"sha": "afd83bfcb56922a4d8d791ac4530956c7c5d5a1f", "filename": "compiler/rustc_codegen_ssa/src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -95,6 +95,7 @@ pub enum TypeKind {\n     Token,\n     ScalableVector,\n     BFloat,\n+    X86_AMX,\n }\n \n // FIXME(mw): Anything that is produced via DepGraph::with_task() must implement"}, {"sha": "e97d96e3a4eabc01f7b02bef63cf60f84dc47623", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -8,6 +8,17 @@\n \n using namespace llvm;\n \n+struct LLVMRustCounterMappingRegion {\n+  coverage::Counter Count;\n+  uint32_t FileID;\n+  uint32_t ExpandedFileID;\n+  uint32_t LineStart;\n+  uint32_t ColumnStart;\n+  uint32_t LineEnd;\n+  uint32_t ColumnEnd;\n+  coverage::CounterMappingRegion::RegionKind Kind;\n+};\n+\n extern \"C\" void LLVMRustCoverageWriteFilenamesSectionToBuffer(\n     const char* const Filenames[],\n     size_t FilenamesLen,\n@@ -27,13 +38,22 @@ extern \"C\" void LLVMRustCoverageWriteMappingToBuffer(\n     unsigned NumVirtualFileMappingIDs,\n     const coverage::CounterExpression *Expressions,\n     unsigned NumExpressions,\n-    coverage::CounterMappingRegion *MappingRegions,\n+    LLVMRustCounterMappingRegion *RustMappingRegions,\n     unsigned NumMappingRegions,\n     RustStringRef BufferOut) {\n+  // Convert from FFI representation to LLVM representation.\n+  SmallVector<coverage::CounterMappingRegion, 0> MappingRegions;\n+  MappingRegions.reserve(NumMappingRegions);\n+  for (const auto &Region : makeArrayRef(RustMappingRegions, NumMappingRegions)) {\n+    MappingRegions.emplace_back(\n+        Region.Count, Region.FileID, Region.ExpandedFileID,\n+        Region.LineStart, Region.ColumnStart, Region.LineEnd, Region.ColumnEnd,\n+        Region.Kind);\n+  }\n   auto CoverageMappingWriter = coverage::CoverageMappingWriter(\n       makeArrayRef(VirtualFileMappingIDs, NumVirtualFileMappingIDs),\n       makeArrayRef(Expressions, NumExpressions),\n-      makeMutableArrayRef(MappingRegions, NumMappingRegions));\n+      MappingRegions);\n   RawRustStringOstream OS(BufferOut);\n   CoverageMappingWriter.write(OS);\n }"}, {"sha": "f67e06706ea57deca52615f0193058bb4bfd20d2", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -86,6 +86,7 @@ enum LLVMRustAttribute {\n   ReadNone = 26,\n   InaccessibleMemOnly = 27,\n   SanitizeHWAddress = 28,\n+  WillReturn = 29,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "2f28162f908acde9d1416c1228d2ced9cb3f56f2", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 102, "deletions": 22, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -5,6 +5,7 @@\n \n #include \"LLVMWrapper.h\"\n \n+#include \"llvm/Analysis/AliasAnalysis.h\"\n #include \"llvm/Analysis/TargetLibraryInfo.h\"\n #include \"llvm/Analysis/TargetTransformInfo.h\"\n #include \"llvm/CodeGen/TargetSubtargetInfo.h\"\n@@ -683,6 +684,25 @@ void LLVMSelfProfileInitializeCallbacks(\n     PassInstrumentationCallbacks& PIC, void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback) {\n+#if LLVM_VERSION_GE(12, 0)\n+  PIC.registerBeforeNonSkippedPassCallback([LlvmSelfProfiler, BeforePassCallback](\n+                                           StringRef Pass, llvm::Any Ir) {\n+    std::string PassName = Pass.str();\n+    std::string IrName = LLVMRustwrappedIrGetName(Ir);\n+    BeforePassCallback(LlvmSelfProfiler, PassName.c_str(), IrName.c_str());\n+  });\n+\n+  PIC.registerAfterPassCallback(\n+      [LlvmSelfProfiler, AfterPassCallback](StringRef Pass, llvm::Any IR,\n+                                            const PreservedAnalyses &Preserved) {\n+        AfterPassCallback(LlvmSelfProfiler);\n+      });\n+\n+  PIC.registerAfterPassInvalidatedCallback(\n+      [LlvmSelfProfiler, AfterPassCallback](StringRef Pass, const PreservedAnalyses &Preserved) {\n+        AfterPassCallback(LlvmSelfProfiler);\n+      });\n+#else\n   PIC.registerBeforePassCallback([LlvmSelfProfiler, BeforePassCallback](\n                                      StringRef Pass, llvm::Any Ir) {\n     std::string PassName = Pass.str();\n@@ -700,6 +720,7 @@ void LLVMSelfProfileInitializeCallbacks(\n       [LlvmSelfProfiler, AfterPassCallback](StringRef Pass) {\n         AfterPassCallback(LlvmSelfProfiler);\n       });\n+#endif\n \n   PIC.registerBeforeAnalysisCallback([LlvmSelfProfiler, BeforePassCallback](\n                                          StringRef Pass, llvm::Any Ir) {\n@@ -760,8 +781,15 @@ LLVMRustOptimizeWithNewPassManager(\n   PTO.LoopVectorization = LoopVectorize;\n   PTO.SLPVectorization = SLPVectorize;\n \n+  // FIXME: We may want to expose this as an option.\n+  bool DebugPassManager = false;\n+\n   PassInstrumentationCallbacks PIC;\n+#if LLVM_VERSION_GE(12, 0)\n+  StandardInstrumentations SI(DebugPassManager);\n+#else\n   StandardInstrumentations SI;\n+#endif\n   SI.registerCallbacks(PIC);\n \n   if (LlvmSelfProfiler){\n@@ -777,10 +805,12 @@ LLVMRustOptimizeWithNewPassManager(\n     PGOOpt = PGOOptions(PGOUsePath, \"\", \"\", PGOOptions::IRUse);\n   }\n \n+#if LLVM_VERSION_GE(12, 0)\n+  PassBuilder PB(DebugPassManager, TM, PTO, PGOOpt, &PIC);\n+#else\n   PassBuilder PB(TM, PTO, PGOOpt, &PIC);\n+#endif\n \n-  // FIXME: We may want to expose this as an option.\n-  bool DebugPassManager = false;\n   LoopAnalysisManager LAM(DebugPassManager);\n   FunctionAnalysisManager FAM(DebugPassManager);\n   CGSCCAnalysisManager CGAM(DebugPassManager);\n@@ -802,7 +832,8 @@ LLVMRustOptimizeWithNewPassManager(\n \n   // We manually collect pipeline callbacks so we can apply them at O0, where the\n   // PassBuilder does not create a pipeline.\n-  std::vector<std::function<void(ModulePassManager &)>> PipelineStartEPCallbacks;\n+  std::vector<std::function<void(ModulePassManager &, PassBuilder::OptimizationLevel)>>\n+      PipelineStartEPCallbacks;\n #if LLVM_VERSION_GE(11, 0)\n   std::vector<std::function<void(ModulePassManager &, PassBuilder::OptimizationLevel)>>\n       OptimizerLastEPCallbacks;\n@@ -812,9 +843,11 @@ LLVMRustOptimizeWithNewPassManager(\n #endif\n \n   if (VerifyIR) {\n-    PipelineStartEPCallbacks.push_back([VerifyIR](ModulePassManager &MPM) {\n+    PipelineStartEPCallbacks.push_back(\n+      [VerifyIR](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n         MPM.addPass(VerifierPass());\n-    });\n+      }\n+    );\n   }\n \n   if (SanitizerOptions) {\n@@ -832,9 +865,11 @@ LLVMRustOptimizeWithNewPassManager(\n       );\n #else\n #if LLVM_VERSION_GE(10, 0)\n-      PipelineStartEPCallbacks.push_back([Options](ModulePassManager &MPM) {\n-        MPM.addPass(MemorySanitizerPass(Options));\n-      });\n+      PipelineStartEPCallbacks.push_back(\n+        [Options](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+          MPM.addPass(MemorySanitizerPass(Options));\n+        }\n+      );\n #endif\n       OptimizerLastEPCallbacks.push_back(\n         [Options](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n@@ -854,9 +889,11 @@ LLVMRustOptimizeWithNewPassManager(\n       );\n #else\n #if LLVM_VERSION_GE(10, 0)\n-      PipelineStartEPCallbacks.push_back([](ModulePassManager &MPM) {\n-        MPM.addPass(ThreadSanitizerPass());\n-      });\n+      PipelineStartEPCallbacks.push_back(\n+        [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+          MPM.addPass(ThreadSanitizerPass());\n+        }\n+      );\n #endif\n       OptimizerLastEPCallbacks.push_back(\n         [](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n@@ -879,9 +916,11 @@ LLVMRustOptimizeWithNewPassManager(\n         }\n       );\n #else\n-      PipelineStartEPCallbacks.push_back([&](ModulePassManager &MPM) {\n-        MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n-      });\n+      PipelineStartEPCallbacks.push_back(\n+        [&](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+          MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n+        }\n+      );\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n           FPM.addPass(AddressSanitizerPass(\n@@ -890,7 +929,7 @@ LLVMRustOptimizeWithNewPassManager(\n         }\n       );\n       PipelineStartEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM) {\n+        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n           MPM.addPass(ModuleAddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n         }\n@@ -907,7 +946,7 @@ LLVMRustOptimizeWithNewPassManager(\n       );\n #else\n       PipelineStartEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM) {\n+        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n           MPM.addPass(HWAddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n         }\n@@ -917,35 +956,53 @@ LLVMRustOptimizeWithNewPassManager(\n   }\n \n   ModulePassManager MPM(DebugPassManager);\n+  bool NeedThinLTOBufferPasses = UseThinLTOBuffers;\n   if (!NoPrepopulatePasses) {\n     if (OptLevel == PassBuilder::OptimizationLevel::O0) {\n+#if LLVM_VERSION_GE(12, 0)\n       for (const auto &C : PipelineStartEPCallbacks)\n-        C(MPM);\n+        PB.registerPipelineStartEPCallback(C);\n+      for (const auto &C : OptimizerLastEPCallbacks)\n+        PB.registerOptimizerLastEPCallback(C);\n \n-#if LLVM_VERSION_GE(11, 0)\n+      // Pass false as we manually schedule ThinLTOBufferPasses below.\n+      MPM = PB.buildO0DefaultPipeline(OptLevel, /* PreLinkLTO */ false);\n+#else\n+      for (const auto &C : PipelineStartEPCallbacks)\n+        C(MPM, OptLevel);\n+\n+# if LLVM_VERSION_GE(11, 0)\n       for (const auto &C : OptimizerLastEPCallbacks)\n         C(MPM, OptLevel);\n-#else\n+# else\n       if (!OptimizerLastEPCallbacks.empty()) {\n         FunctionPassManager FPM(DebugPassManager);\n         for (const auto &C : OptimizerLastEPCallbacks)\n           C(FPM, OptLevel);\n         MPM.addPass(createModuleToFunctionPassAdaptor(std::move(FPM)));\n       }\n-#endif\n+# endif\n \n       MPM.addPass(AlwaysInlinerPass(EmitLifetimeMarkers));\n \n-#if LLVM_VERSION_GE(10, 0)\n+# if LLVM_VERSION_GE(10, 0)\n       if (PGOOpt) {\n         PB.addPGOInstrPassesForO0(\n             MPM, DebugPassManager, PGOOpt->Action == PGOOptions::IRInstr,\n             /*IsCS=*/false, PGOOpt->ProfileFile, PGOOpt->ProfileRemappingFile);\n       }\n+# endif\n #endif\n     } else {\n+#if LLVM_VERSION_GE(12, 0)\n       for (const auto &C : PipelineStartEPCallbacks)\n         PB.registerPipelineStartEPCallback(C);\n+#else\n+      for (const auto &C : PipelineStartEPCallbacks)\n+        PB.registerPipelineStartEPCallback([C, OptLevel](ModulePassManager &MPM) {\n+          C(MPM, OptLevel);\n+        });\n+#endif\n       if (OptStage != LLVMRustOptStage::PreLinkThinLTO) {\n         for (const auto &C : OptimizerLastEPCallbacks)\n           PB.registerOptimizerLastEPCallback(C);\n@@ -956,7 +1013,17 @@ LLVMRustOptimizeWithNewPassManager(\n         MPM = PB.buildPerModuleDefaultPipeline(OptLevel, DebugPassManager);\n         break;\n       case LLVMRustOptStage::PreLinkThinLTO:\n+#if LLVM_VERSION_GE(12, 0)\n+        MPM = PB.buildThinLTOPreLinkDefaultPipeline(OptLevel);\n+        // The ThinLTOPreLink pipeline already includes ThinLTOBuffer passes. However, callback\n+        // passes may still run afterwards. This means we need to run the buffer passes again.\n+        // FIXME: In LLVM 13, the ThinLTOPreLink pipeline also runs OptimizerLastEPCallbacks\n+        // before the RequiredLTOPreLinkPasses, in which case we can remove these hacks.\n+        if (OptimizerLastEPCallbacks.empty())\n+          NeedThinLTOBufferPasses = false;\n+#else\n         MPM = PB.buildThinLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);\n+#endif\n #if LLVM_VERSION_GE(11, 0)\n         for (const auto &C : OptimizerLastEPCallbacks)\n           C(MPM, OptLevel);\n@@ -970,21 +1037,34 @@ LLVMRustOptimizeWithNewPassManager(\n #endif\n         break;\n       case LLVMRustOptStage::PreLinkFatLTO:\n+#if LLVM_VERSION_GE(12, 0)\n+        MPM = PB.buildLTOPreLinkDefaultPipeline(OptLevel);\n+        NeedThinLTOBufferPasses = false;\n+#else\n         MPM = PB.buildLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);\n+#endif\n         break;\n       case LLVMRustOptStage::ThinLTO:\n         // FIXME: Does it make sense to pass the ModuleSummaryIndex?\n         // It only seems to be needed for C++ specific optimizations.\n+#if LLVM_VERSION_GE(12, 0)\n+        MPM = PB.buildThinLTODefaultPipeline(OptLevel, nullptr);\n+#else\n         MPM = PB.buildThinLTODefaultPipeline(OptLevel, DebugPassManager, nullptr);\n+#endif\n         break;\n       case LLVMRustOptStage::FatLTO:\n+#if LLVM_VERSION_GE(12, 0)\n+        MPM = PB.buildLTODefaultPipeline(OptLevel, nullptr);\n+#else\n         MPM = PB.buildLTODefaultPipeline(OptLevel, DebugPassManager, nullptr);\n+#endif\n         break;\n       }\n     }\n   }\n \n-  if (UseThinLTOBuffers) {\n+  if (NeedThinLTOBufferPasses) {\n     MPM.addPass(CanonicalizeAliasesPass());\n     MPM.addPass(NameAnonGlobalPass());\n   }"}, {"sha": "a8536595404423b36c8f1425fa5d316a1b24ef3e", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -207,6 +207,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::InaccessibleMemOnly;\n   case SanitizeHWAddress:\n     return Attribute::SanitizeHWAddress;\n+  case WillReturn:\n+    return Attribute::WillReturn;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }\n@@ -263,6 +265,17 @@ extern \"C\" void LLVMRustAddByValCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n   Call->addAttribute(Index, Attr);\n }\n \n+extern \"C\" void LLVMRustAddStructRetCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n+                                                 LLVMTypeRef Ty) {\n+  CallBase *Call = unwrap<CallBase>(Instr);\n+#if LLVM_VERSION_GE(12, 0)\n+  Attribute Attr = Attribute::getWithStructRetType(Call->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(Call->getContext(), Attribute::StructRet);\n+#endif\n+  Call->addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n@@ -304,6 +317,17 @@ extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n   F->addAttribute(Index, Attr);\n }\n \n+extern \"C\" void LLVMRustAddStructRetAttr(LLVMValueRef Fn, unsigned Index,\n+                                         LLVMTypeRef Ty) {\n+  Function *F = unwrap<Function>(Fn);\n+#if LLVM_VERSION_GE(12, 0)\n+  Attribute Attr = Attribute::getWithStructRetType(F->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(F->getContext(), Attribute::StructRet);\n+#endif\n+  F->addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n                                                    unsigned Index,\n                                                    const char *Name,\n@@ -1007,12 +1031,19 @@ LLVMRustDICompositeTypeReplaceArrays(LLVMRustDIBuilderRef Builder,\n \n extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateDebugLocation(unsigned Line, unsigned Column,\n-                                     LLVMMetadataRef Scope,\n+                                     LLVMMetadataRef ScopeRef,\n                                      LLVMMetadataRef InlinedAt) {\n-  DebugLoc debug_loc = DebugLoc::get(Line, Column, unwrapDIPtr<MDNode>(Scope),\n+#if LLVM_VERSION_GE(12, 0)\n+  MDNode *Scope = unwrapDIPtr<MDNode>(ScopeRef);\n+  DILocation *Loc = DILocation::get(\n+      Scope->getContext(), Line, Column, Scope,\n+      unwrapDIPtr<MDNode>(InlinedAt));\n+  return wrap(Loc);\n+#else\n+  DebugLoc debug_loc = DebugLoc::get(Line, Column, unwrapDIPtr<MDNode>(ScopeRef),\n                                      unwrapDIPtr<MDNode>(InlinedAt));\n-\n   return wrap(debug_loc.getAsMDNode());\n+#endif\n }\n \n extern \"C\" int64_t LLVMRustDIBuilderCreateOpDeref() {\n@@ -1262,6 +1293,10 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n     return LLVMScalableVectorTypeKind;\n   case Type::BFloatTyID:\n     return LLVMBFloatTypeKind;\n+#endif\n+#if LLVM_VERSION_GE(12, 0)\n+  case Type::X86_AMXTyID:\n+    return LLVMX86_AMXTypeKind;\n #endif\n   }\n   report_fatal_error(\"Unhandled TypeID.\");\n@@ -1708,11 +1743,23 @@ LLVMRustBuildVectorReduceMax(LLVMBuilderRef B, LLVMValueRef Src, bool IsSigned)\n }\n extern \"C\" LLVMValueRef\n LLVMRustBuildVectorReduceFMin(LLVMBuilderRef B, LLVMValueRef Src, bool NoNaN) {\n-   return wrap(unwrap(B)->CreateFPMinReduce(unwrap(Src), NoNaN));\n+#if LLVM_VERSION_GE(12, 0)\n+  Instruction *I = unwrap(B)->CreateFPMinReduce(unwrap(Src));\n+  I->setHasNoNaNs(NoNaN);\n+  return wrap(I);\n+#else\n+  return wrap(unwrap(B)->CreateFPMinReduce(unwrap(Src), NoNaN));\n+#endif\n }\n extern \"C\" LLVMValueRef\n LLVMRustBuildVectorReduceFMax(LLVMBuilderRef B, LLVMValueRef Src, bool NoNaN) {\n+#if LLVM_VERSION_GE(12, 0)\n+  Instruction *I = unwrap(B)->CreateFPMaxReduce(unwrap(Src));\n+  I->setHasNoNaNs(NoNaN);\n+  return wrap(I);\n+#else\n   return wrap(unwrap(B)->CreateFPMaxReduce(unwrap(Src), NoNaN));\n+#endif\n }\n \n extern \"C\" LLVMValueRef"}, {"sha": "0deb1186b0fd667ec58080d8b18ebcb7defa08e2", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -603,6 +603,13 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n         Ty: TyAndLayoutMethods<'a, C> + Copy,\n         C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n     {\n+        if abi == spec::abi::Abi::X86Interrupt {\n+            if let Some(arg) = self.args.first_mut() {\n+                arg.make_indirect_byval();\n+            }\n+            return Ok(());\n+        }\n+\n         match &cx.target_spec().arch[..] {\n             \"x86\" => {\n                 let flavor = if abi == spec::abi::Abi::Fastcall {"}, {"sha": "9db880b0e53ca5bce1ee95e4c42447e41a81c893", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "8767f86b00bb482b1b3e75bd874d76a001925983", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-musl\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "2f28a8562472d8d4d49ffb358cea6020fa0580b0", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { endian: Endian::Big, ..base },\n     }"}, {"sha": "4cbd99765088f627a54d6adc666485e654dba476", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"e-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "efdc9ad7517d1b924d59cf4c68f99fdd57ffbe12", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-musl\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"e-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "2de6db762b2fb8eb3c166d381067660b8b4369a5", "filename": "library/profiler_builtins/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/library%2Fprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/library%2Fprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fprofiler_builtins%2Fbuild.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -26,6 +26,7 @@ fn main() {\n         \"InstrProfilingPlatformWindows.c\",\n         \"InstrProfilingUtil.c\",\n         \"InstrProfilingValue.c\",\n+        \"InstrProfilingVersionVar.c\",\n         \"InstrProfilingWriter.c\",\n         // This file was renamed in LLVM 10.\n         \"InstrProfilingRuntime.cc\","}, {"sha": "fb5127bac54df16d333ba612620269f8b8c5094a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -383,6 +383,8 @@ fn configure_cmake(\n             cfg.define(\"CMAKE_SYSTEM_NAME\", \"Windows\");\n         } else if target.contains(\"haiku\") {\n             cfg.define(\"CMAKE_SYSTEM_NAME\", \"Haiku\");\n+        } else if target.contains(\"solaris\") || target.contains(\"illumos\") {\n+            cfg.define(\"CMAKE_SYSTEM_NAME\", \"SunOS\");\n         }\n         // When cross-compiling we should also set CMAKE_SYSTEM_VERSION, but in\n         // that case like CMake we cannot easily determine system version either."}, {"sha": "43cdbbe92e3acfbd787d2092f7d7679d20891733", "filename": "src/ci/docker/host-x86_64/arm-android/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Farm-android%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -36,5 +36,8 @@ ENV SCRIPT python3 ../x.py --stage 2 test --host='' --target $TARGETS\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n COPY scripts/android-start-emulator.sh /scripts/\n ENTRYPOINT [\"/scripts/android-start-emulator.sh\"]"}, {"sha": "e6b6b6e53b99d32126279b32546d09a7fc798c10", "filename": "src/ci/docker/host-x86_64/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -24,6 +24,9 @@ USER root\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV PATH=$PATH:/x-tools/aarch64-unknown-linux-gnueabi/bin\n \n ENV CC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-gcc \\"}, {"sha": "ee727359f396189b80abec2fec9bafb73c3f8e95", "filename": "src/ci/docker/host-x86_64/dist-android/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-android%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -36,3 +36,6 @@ ENV SCRIPT python3 ../x.py dist --host='' --target $TARGETS\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n+\n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh"}, {"sha": "1be3fecd88ffff3f6df6edb515a93559374906de", "filename": "src/ci/docker/host-x86_64/dist-arm-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -27,6 +27,9 @@ USER root\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabi/bin\n \n ENV CC_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-gcc \\"}, {"sha": "66eb4137a87ca1a3cbae0ae01d088f33ee668faa", "filename": "src/ci/docker/host-x86_64/dist-armhf-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -19,6 +19,9 @@ USER root\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabihf/bin\n \n ENV CC_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-gcc \\"}, {"sha": "c13f63911f8fae06089859ba6ac6dce173ce665c", "filename": "src/ci/docker/host-x86_64/dist-armv7-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -19,6 +19,9 @@ USER root\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV PATH=$PATH:/x-tools/armv7-unknown-linux-gnueabihf/bin\n \n ENV CC_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-gcc \\"}, {"sha": "c98fc7dcfff3e803d3edc9407db469c1e3664f95", "filename": "src/ci/docker/host-x86_64/dist-i586-gnu-i586-i686-musl/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -30,6 +30,9 @@ RUN CC=gcc CFLAGS=\"-m32 -Wa,-mrelax-relocations=no\" \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV RUST_CONFIGURE_ARGS \\\n       --musl-root-i586=/musl-i586 \\\n       --musl-root-i686=/musl-i686 \\"}, {"sha": "247b539652b15971a49fff3ab396142fb1418319", "filename": "src/ci/docker/host-x86_64/dist-i686-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i686-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -68,11 +68,13 @@ RUN ./build-binutils.sh\n COPY host-x86_64/dist-x86_64-linux/build-gcc.sh /tmp/\n RUN ./build-gcc.sh && apt-get remove -y gcc g++\n \n-# Debian 6 has Python 2.6 by default, but LLVM needs 2.7+\n COPY host-x86_64/dist-x86_64-linux/build-python.sh /tmp/\n-RUN ./build-python.sh\n+# Build Python 2.7 needed for Clang 10.\n+RUN ./build-python.sh 2.7.12\n+# Build Python 3 needed for LLVM 12.\n+RUN ./build-python.sh 3.9.1\n \n-# LLVM needs cmake 3.4.3 or higher, and is planning to raise to 3.13.4.\n+# LLVM needs cmake 3.13.4 or higher.\n COPY host-x86_64/dist-x86_64-linux/build-cmake.sh /tmp/\n RUN ./build-cmake.sh\n "}, {"sha": "b0f06569a9c21f20192cd72525e2ce63f4f7b1a9", "filename": "src/ci/docker/host-x86_64/dist-mips-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -21,6 +21,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV HOSTS=mips-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs"}, {"sha": "245c28e1fa341efa1b0775ad18658fc9b7367dde", "filename": "src/ci/docker/host-x86_64/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -20,6 +20,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV HOSTS=mips64-unknown-linux-gnuabi64\n \n ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs"}, {"sha": "03998c8880aea3cdefc056163c8074bcc68e6c74", "filename": "src/ci/docker/host-x86_64/dist-mips64el-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -21,6 +21,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV HOSTS=mips64el-unknown-linux-gnuabi64\n \n ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs"}, {"sha": "586172706210104606a9cfe441565cf7ffc1e569", "filename": "src/ci/docker/host-x86_64/dist-mipsel-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -20,6 +20,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV HOSTS=mipsel-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs"}, {"sha": "ecaa495e97aee8859f63a17e0f0951146f944d8c", "filename": "src/ci/docker/host-x86_64/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -25,6 +25,9 @@ USER root\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV PATH=$PATH:/x-tools/powerpc-unknown-linux-gnu/bin\n \n ENV \\"}, {"sha": "a22d9a7553ecfbf87b92ce8a313bbcbe94bafb22", "filename": "src/ci/docker/host-x86_64/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -26,6 +26,9 @@ USER root\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV PATH=$PATH:/x-tools/powerpc64-unknown-linux-gnu/bin\n \n ENV \\"}, {"sha": "5157dd4c79b4c841c173418a6fea025c034b0029", "filename": "src/ci/docker/host-x86_64/dist-powerpc64le-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64le-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64le-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64le-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -25,6 +25,9 @@ RUN ./build-powerpc64le-toolchain.sh\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV \\\n     AR_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-ar \\\n     CC_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-gcc \\"}, {"sha": "80b7793cb7e3caa88a4db03d2ec9df15351c8ebb", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -19,6 +19,9 @@ USER root\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV PATH=$PATH:/x-tools/riscv64-unknown-linux-gnu/bin\n \n ENV CC_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-gcc \\"}, {"sha": "5e62624395210f3b82cdd51e32e9e00bdda52efa", "filename": "src/ci/docker/host-x86_64/dist-s390x-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -25,6 +25,9 @@ USER root\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin\n \n ENV \\"}, {"sha": "121dd3f455a9e151a4e6120d167167228632c9c2", "filename": "src/ci/docker/host-x86_64/dist-x86_64-freebsd/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-freebsd%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -23,6 +23,9 @@ RUN /tmp/freebsd-toolchain.sh x86_64\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV \\\n     AR_x86_64_unknown_freebsd=x86_64-unknown-freebsd11-ar \\\n     CC_x86_64_unknown_freebsd=x86_64-unknown-freebsd11-clang \\"}, {"sha": "c2e44ead51ee4cdbe9e0a33150c7de5726447221", "filename": "src/ci/docker/host-x86_64/dist-x86_64-illumos/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-illumos%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-illumos%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-illumos%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -22,6 +22,9 @@ RUN bash /tmp/illumos-toolchain.sh x86_64 gcc\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV \\\n     AR_x86_64_unknown_illumos=x86_64-illumos-ar \\\n     CC_x86_64_unknown_illumos=x86_64-illumos-gcc \\"}, {"sha": "4dd4378f196922bbb97ebf809e61cfd869cb976d", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -68,11 +68,13 @@ RUN ./build-binutils.sh\n COPY host-x86_64/dist-x86_64-linux/build-gcc.sh /tmp/\n RUN ./build-gcc.sh && apt-get remove -y gcc g++\n \n-# Debian 6 has Python 2.6 by default, but LLVM needs 2.7+\n COPY host-x86_64/dist-x86_64-linux/build-python.sh /tmp/\n-RUN ./build-python.sh\n+# Build Python 2.7 needed for Clang 10.\n+RUN ./build-python.sh 2.7.12\n+# Build Python 3 needed for LLVM 12.\n+RUN ./build-python.sh 3.9.1\n \n-# LLVM needs cmake 3.4.3 or higher, and is planning to raise to 3.13.4.\n+# LLVM needs cmake 3.13.4 or higher.\n COPY host-x86_64/dist-x86_64-linux/build-cmake.sh /tmp/\n RUN ./build-cmake.sh\n "}, {"sha": "970d67b6db3ddc495ef6923411348eb8d045da42", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/build-python.sh", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-python.sh", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-python.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-python.sh?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -3,7 +3,8 @@\n set -ex\n source shared.sh\n \n-curl https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz | \\\n+VERSION=$1\n+curl https://www.python.org/ftp/python/$VERSION/Python-$VERSION.tgz | \\\n   tar xzf -\n \n mkdir python-build\n@@ -12,10 +13,10 @@ cd python-build\n # Gotta do some hackery to tell python about our custom OpenSSL build, but other\n # than that fairly normal.\n CFLAGS='-I /rustroot/include' LDFLAGS='-L /rustroot/lib -L /rustroot/lib64' \\\n-    hide_output ../Python-2.7.12/configure --prefix=/rustroot\n+    hide_output ../Python-$VERSION/configure --prefix=/rustroot\n hide_output make -j10\n hide_output make install\n \n cd ..\n rm -rf python-build\n-rm -rf Python-2.7.12\n+rm -rf Python-$VERSION"}, {"sha": "08f07eb8284062f6a4d1548ac852642c197d6a94", "filename": "src/ci/docker/host-x86_64/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -20,6 +20,10 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n \n WORKDIR /build/\n \n+# Build cmake before musl toolchain, as we replace the compiler during that step.\n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n COPY scripts/musl-toolchain.sh /build/\n # We need to mitigate rust-lang/rust#34978 when compiling musl itself as well\n RUN CFLAGS=\"-Wa,-mrelax-relocations=no -Wa,--compress-debug-sections=none -Wl,--compress-debug-sections=none\" \\"}, {"sha": "92bdc9811fd52140127964b1c016cd1a305d103d", "filename": "src/ci/docker/host-x86_64/dist-x86_64-netbsd/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -9,6 +9,9 @@ RUN /tmp/build-netbsd-toolchain.sh\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV PATH=$PATH:/x-tools/x86_64-unknown-netbsd/bin\n \n ENV \\"}, {"sha": "0182ebb8b597e7249ca12f5fc71b35214d2993ab", "filename": "src/ci/docker/host-x86_64/i686-gnu-nopt/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu-nopt%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -20,6 +20,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n RUN mkdir -p /config\n RUN echo \"[rust]\" > /config/nopt-std-config.toml\n RUN echo \"optimize = false\" >> /config/nopt-std-config.toml"}, {"sha": "feaab819bdda30ab3d7fca2615f96dc29e42b265", "filename": "src/ci/docker/host-x86_64/i686-gnu/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -20,6 +20,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV RUST_CONFIGURE_ARGS --build=i686-unknown-linux-gnu\n # Exclude some tests that are unlikely to be platform specific, to speed up\n # this slow job."}, {"sha": "00ad7b0a710370986848010f3f226d028f574136", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -42,5 +42,8 @@ RUN npm install browser-ui-test -g --unsafe-perm=true\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n ENV RUST_CHECK_TARGET check-aux-and-gui"}, {"sha": "09d9cda02bda65efb072fdf77e71e7929eec0494", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -19,6 +19,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --set rust.ignore-git=false\n ENV SCRIPT python3 ../x.py --stage 2 test distcheck\n ENV DIST_SRC 1"}, {"sha": "d4838c0d6f8e535422ccfb6c6d838ec9daac9cb2", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -18,6 +18,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY scripts/cmake.sh /scripts/\n+RUN /scripts/cmake.sh\n+\n COPY host-x86_64/x86_64-gnu-tools/checktools.sh /tmp/\n \n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "70096173403d787f55074dcbb72f2e806dd18c24", "filename": "src/ci/docker/scripts/cmake.sh", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fscripts%2Fcmake.sh", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Fci%2Fdocker%2Fscripts%2Fcmake.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fcmake.sh?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -0,0 +1,34 @@\n+#!/bin/bash\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  \"$@\" &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  rm /tmp/build.log\n+  set -x\n+}\n+\n+# LLVM 12 requires CMake 3.13.4 or higher.\n+# This script is not necessary for images using Ubuntu 20.04 or newer.\n+CMAKE=3.13.4\n+curl -L https://github.com/Kitware/CMake/releases/download/v$CMAKE/cmake-$CMAKE.tar.gz | tar xzf -\n+\n+mkdir cmake-build\n+cd cmake-build\n+hide_output ../cmake-$CMAKE/configure\n+hide_output make -j$(nproc)\n+hide_output make install\n+\n+cd ..\n+rm -rf cmake-build\n+rm -rf cmake-$CMAKE"}, {"sha": "40618a2340ac2939b3dc320a9fe1133fa5caa345", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -1 +1 @@\n-Subproject commit 96ae8953e4938d39c4173dd189f268459fff8c02\n+Subproject commit 40618a2340ac2939b3dc320a9fe1133fa5caa345"}, {"sha": "47518cdcf167144e950a7206f515468920580719", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -5,6 +5,7 @@\n //[riscv32] compile-flags: --target riscv32imac-unknown-none-elf\n // compile-flags: -C target-feature=+d\n // needs-llvm-components: riscv\n+// min-system-llvm-version: 12.0\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]\n@@ -99,45 +100,45 @@ macro_rules! check_reg {\n \n // CHECK-LABEL: reg_i8:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i8 i8 reg \"mv\");\n \n // CHECK-LABEL: reg_i16:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i16 i16 reg \"mv\");\n \n // CHECK-LABEL: reg_i32:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i32 i32 reg \"mv\");\n \n // CHECK-LABEL: reg_f32:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_f32 f32 reg \"mv\");\n \n // riscv64-LABEL: reg_i64:\n // riscv64: #APP\n-// riscv64: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// riscv64: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check!(reg_i64 i64 reg \"mv\");\n \n // riscv64-LABEL: reg_f64:\n // riscv64: #APP\n-// riscv64: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// riscv64: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check!(reg_f64 f64 reg \"mv\");\n \n // CHECK-LABEL: reg_ptr:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_ptr ptr reg \"mv\");\n \n@@ -155,45 +156,45 @@ check!(freg_f64 f64 freg \"fmv.d\");\n \n // CHECK-LABEL: a0_i8:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_i8 i8 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_i16:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_i16 i16 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_i32:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_i32 i32 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_f32:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_f32 f32 \"a0\" \"mv\");\n \n // riscv64-LABEL: a0_i64:\n // riscv64: #APP\n-// riscv64: add a0, zero, a0\n+// riscv64: mv a0, a0\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check_reg!(a0_i64 i64 \"a0\" \"mv\");\n \n // riscv64-LABEL: a0_f64:\n // riscv64: #APP\n-// riscv64: add a0, zero, a0\n+// riscv64: mv a0, a0\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check_reg!(a0_f64 f64 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_ptr:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_ptr ptr \"a0\" \"mv\");\n "}, {"sha": "a1da4faf5d85a2800020820005ab053a9eb5ebdb", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n+// min-system-llvm-version: 12.0\n \n #![crate_type = \"lib\"]\n #![feature(rustc_attrs)]\n@@ -73,7 +74,7 @@ pub fn _box(x: Box<i32>) -> Box<i32> {\n   x\n }\n \n-// CHECK: @struct_return(%S* noalias nocapture sret dereferenceable(32){{( %0)?}})\n+// CHECK: @struct_return(%S* noalias nocapture sret(%S) dereferenceable(32){{( %0)?}})\n #[no_mangle]\n pub fn struct_return() -> S {\n   S {"}, {"sha": "c31e8457dcdeddcefd9985f0ff338610e5551256", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -52,7 +52,7 @@ pub struct BigPacked2 {\n #[no_mangle]\n pub fn call_pkd1(f: fn() -> Array) -> BigPacked1 {\n // CHECK: [[ALLOCA:%[_a-z0-9]+]] = alloca %Array\n-// CHECK: call void %{{.*}}(%Array* noalias nocapture sret dereferenceable(32) [[ALLOCA]])\n+// CHECK: call void %{{.*}}(%Array* noalias nocapture sret{{.*}} dereferenceable(32) [[ALLOCA]])\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* align 1 %{{.*}}, i8* align 4 %{{.*}}, i{{[0-9]+}} 32, i1 false)\n     // check that calls whose destination is a field of a packed struct\n     // go through an alloca rather than calling the function with an\n@@ -64,7 +64,7 @@ pub fn call_pkd1(f: fn() -> Array) -> BigPacked1 {\n #[no_mangle]\n pub fn call_pkd2(f: fn() -> Array) -> BigPacked2 {\n // CHECK: [[ALLOCA:%[_a-z0-9]+]] = alloca %Array\n-// CHECK: call void %{{.*}}(%Array* noalias nocapture sret dereferenceable(32) [[ALLOCA]])\n+// CHECK: call void %{{.*}}(%Array* noalias nocapture sret{{.*}} dereferenceable(32) [[ALLOCA]])\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* align 2 %{{.*}}, i8* align 4 %{{.*}}, i{{[0-9]+}} 32, i1 false)\n     // check that calls whose destination is a field of a packed struct\n     // go through an alloca rather than calling the function with an"}, {"sha": "847b94fac78cee377369e1be4fc8eafa5690021c", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n \n-// min-system-llvm-version: 9.0\n+// min-system-llvm-version: 12.0\n // ignore-arm\n // ignore-aarch64\n // ignore-mips\n@@ -34,19 +34,19 @@ pub enum TeBigS {\n     Variant(BigS),\n }\n \n-// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], %BigS* [[BIGS_ARG_ATTRS1:.*]] byval(%BigS) [[BIGS_ARG_ATTRS2:.*]])\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS1:.*]] sret(%BigS) [[BIGS_RET_ATTRS2:.*]], %BigS* [[BIGS_ARG_ATTRS1:.*]] byval(%BigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_BigS(_: BigS) -> BigS { loop {} }\n \n-// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], %TsBigS* [[BIGS_ARG_ATTRS1]] byval(%TsBigS) [[BIGS_ARG_ATTRS2:.*]])\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS1]] sret(%TsBigS) [[BIGS_RET_ATTRS2]], %TsBigS* [[BIGS_ARG_ATTRS1]] byval(%TsBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], %TuBigS* [[BIGS_ARG_ATTRS1]] byval(%TuBigS) [[BIGS_ARG_ATTRS2:.*]])\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS1]] sret(%TuBigS) [[BIGS_RET_ATTRS2]], %TuBigS* [[BIGS_ARG_ATTRS1]] byval(%TuBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS1]] byval(%\"TeBigS::Variant\") [[BIGS_ARG_ATTRS2]])\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS1]] sret(%\"TeBigS::Variant\") [[BIGS_RET_ATTRS2]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS1]] byval(%\"TeBigS::Variant\") [[BIGS_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n@@ -70,18 +70,18 @@ pub enum TeBigU {\n     Variant(BigU),\n }\n \n-// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], %BigU* [[BIGU_ARG_ATTRS1:.*]] byval(%BigU) [[BIGU_ARG_ATTRS2:.*]])\n+// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS1:.*]] sret(%BigU) [[BIGU_RET_ATTRS2:.*]], %BigU* [[BIGU_ARG_ATTRS1:.*]] byval(%BigU) [[BIGU_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], %TsBigU* [[BIGU_ARG_ATTRS1]] byval(%TsBigU) [[BIGU_ARG_ATTRS2]])\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS1:.*]] sret(%TsBigU) [[BIGU_RET_ATTRS2:.*]], %TsBigU* [[BIGU_ARG_ATTRS1]] byval(%TsBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n \n-// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], %TuBigU* [[BIGU_ARG_ATTRS1]] byval(%TuBigU) [[BIGU_ARG_ATTRS2]])\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS1]] sret(%TuBigU) [[BIGU_RET_ATTRS2:.*]], %TuBigU* [[BIGU_ARG_ATTRS1]] byval(%TuBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n \n-// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS1]] byval(%\"TeBigU::Variant\") [[BIGU_ARG_ATTRS2]])\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS1]] sret(%\"TeBigU::Variant\") [[BIGU_RET_ATTRS2:.*]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS1]] byval(%\"TeBigU::Variant\") [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "1fb12d92bd135468ec6c6cd26472eac0595766ab", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n+// min-system-llvm-version: 12.0\n // ignore-aarch64\n // ignore-emscripten\n // ignore-mips64\n@@ -36,19 +38,19 @@ pub enum TeBigS {\n     Variant(BigS),\n }\n \n-// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], [16 x i32]\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS1:.*]] sret(%BigS) [[BIGS_RET_ATTRS2:.*]], [16 x i32]\n #[no_mangle]\n pub extern fn test_BigS(_: BigS) -> BigS { loop {} }\n \n-// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS1]] sret(%TsBigS) [[BIGS_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS1]] sret(%TuBigS) [[BIGS_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS1]] sret(%\"TeBigS::Variant\") [[BIGS_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n@@ -72,18 +74,18 @@ pub enum TeBigU {\n     Variant(BigU),\n }\n \n-// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], [16 x i32]\n+// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS1:.*]] sret(%BigU) [[BIGU_RET_ATTRS2:.*]], [16 x i32]\n #[no_mangle]\n pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], [16 x i32]\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS1]] sret(%TsBigU) [[BIGU_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n \n-// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS1]] sret(%TuBigU) [[BIGU_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n \n-// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS1]] sret(%\"TeBigU::Variant\") [[BIGU_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "3381764bfc8188d9f900782ebd4d49346149fc0c", "filename": "src/test/codegen/repr-transparent-aggregates-3.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n+// min-system-llvm-version: 12.0\n // only-mips64\n // See repr-transparent.rs\n \n@@ -25,19 +27,19 @@ pub enum TeBigS {\n     Variant(BigS),\n }\n \n-// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], [8 x i64]\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS1:.*]] sret(%BigS) [[BIGS_RET_ATTRS2:.*]], [8 x i64]\n #[no_mangle]\n pub extern fn test_BigS(_: BigS) -> BigS { loop {} }\n \n-// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS1]] sret(%TsBigS) [[BIGS_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS1]] sret(%TuBigS) [[BIGS_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS1]] sret(%\"TeBigS::Variant\") [[BIGS_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n@@ -61,18 +63,18 @@ pub enum TeBigU {\n     Variant(BigU),\n }\n \n-// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], [8 x i64]\n+// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS1:.*]] sret(%BigU) [[BIGU_RET_ATTRS2:.*]], [8 x i64]\n #[no_mangle]\n pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], [8 x i64]\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS1]] sret(%TsBigU) [[BIGU_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n \n-// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS1]] sret(%TuBigU) [[BIGU_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n \n-// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS1]] sret(%\"TeBigU::Variant\") [[BIGU_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "01bc211df161650f8b794f5035e8a6c41e747bb5", "filename": "src/test/run-make-fulldeps/pgo-use/Makefile", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -12,12 +12,11 @@\n # `else` branch. Accordingly, we expect the function that is never called to\n # be marked as cold.\n #\n-# The program is compiled with `-Copt-level=s` because this setting disables\n-# LLVM's pre-inlining pass (i.e. a pass that does some inlining before it adds\n-# the profiling instrumentation). Disabling this pass leads to rather\n-# predictable IR which we need for this test to be stable.\n+# Disable the pre-inlining pass (i.e. a pass that does some inlining before\n+# it adds the profiling instrumentation). Disabling this pass leads to\n+# rather predictable IR which we need for this test to be stable.\n \n-COMMON_FLAGS=-Copt-level=s -Ccodegen-units=1\n+COMMON_FLAGS=-Copt-level=2 -Ccodegen-units=1 -Cllvm-args=-disable-preinline\n \n # LLVM doesn't support instrumenting binaries that use SEH:\n # https://github.com/rust-lang/rust/issues/61002"}, {"sha": "f56b4168b2d66673a0f98895b7e786d910ea2c4c", "filename": "src/test/run-make-fulldeps/split-dwarf/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/409920873cf8a95739a55dc5fe5adb05e1b4758e/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile?ref=409920873cf8a95739a55dc5fe5adb05e1b4758e", "patch": "@@ -4,6 +4,6 @@\n # min-llvm-version: 11.0\n \n all:\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed foo.rs -g\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 foo.rs -g\n \trm $(TMPDIR)/foo.dwp\n \trm $(TMPDIR)/$(call BIN,foo)"}]}