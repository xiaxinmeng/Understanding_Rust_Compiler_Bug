{"sha": "2999479a2dcb10019558d64c2045fdee31841d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OTk0NzlhMmRjYjEwMDE5NTU4ZDY0YzIwNDVmZGVlMzE4NDFkMzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T00:23:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T00:24:06Z"}, "message": "rustc: Allow attributes on enum variants. Closes #1663", "tree": {"sha": "331200932427d412f7d406d992212f91cea564dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/331200932427d412f7d406d992212f91cea564dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2999479a2dcb10019558d64c2045fdee31841d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2999479a2dcb10019558d64c2045fdee31841d31", "html_url": "https://github.com/rust-lang/rust/commit/2999479a2dcb10019558d64c2045fdee31841d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2999479a2dcb10019558d64c2045fdee31841d31/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "url": "https://api.github.com/repos/rust-lang/rust/commits/08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "html_url": "https://github.com/rust-lang/rust/commit/08c6cb5f708efa7484ca27d6b14b86d6ae58b692"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "e37116d53f5cb62ca4d79c43a5a98a402b84d698", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2999479a2dcb10019558d64c2045fdee31841d31/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2999479a2dcb10019558d64c2045fdee31841d31/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=2999479a2dcb10019558d64c2045fdee31841d31", "patch": "@@ -418,8 +418,8 @@ type native_mod =\n \n type variant_arg = {ty: @ty, id: node_id};\n \n-type variant_ = {name: ident, args: [variant_arg], id: node_id,\n-                 disr_expr: option::t<@expr>};\n+type variant_ = {name: ident, attrs: [attribute], args: [variant_arg],\n+                 id: node_id, disr_expr: option::t<@expr>};\n \n type variant = spanned<variant_>;\n "}, {"sha": "7e2cd136a28873da0e053e6c890195f8cf9ed9cf", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2999479a2dcb10019558d64c2045fdee31841d31/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2999479a2dcb10019558d64c2045fdee31841d31/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=2999479a2dcb10019558d64c2045fdee31841d31", "patch": "@@ -441,11 +441,18 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n     }\n     let fold_variant_arg = bind fold_variant_arg_(_, fld);\n     let args = vec::map(v.args, fold_variant_arg);\n+\n+    let fold_meta_item = bind fold_meta_item_(_, fld);\n+    let fold_attribute = bind fold_attribute_(_, fold_meta_item);\n+    let attrs = vec::map(v.attrs, fold_attribute);\n+\n     let de = alt v.disr_expr {\n       some(e) {some(fld.fold_expr(e))}\n       none {none}\n     };\n-    ret {name: v.name, args: args, id: v.id,\n+    ret {name: v.name,\n+         attrs: attrs,\n+         args: args, id: v.id,\n          disr_expr: de};\n }\n "}, {"sha": "a66b223175c7fd86691e9d6503e5a19346352d68", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2999479a2dcb10019558d64c2045fdee31841d31/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2999479a2dcb10019558d64c2045fdee31841d31/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=2999479a2dcb10019558d64c2045fdee31841d31", "patch": "@@ -2042,16 +2042,19 @@ fn parse_item_enum(p: parser, attrs: [ast::attribute]) -> @ast::item {\n         let variant =\n             spanned(ty.span.lo, ty.span.hi,\n                     {name: id,\n+                     attrs: [],\n                      args: [{ty: ty, id: p.get_id()}],\n                      id: p.get_id(),\n                      disr_expr: none});\n         ret mk_item(p, lo, ty.span.hi, id,\n                     ast::item_enum([variant], ty_params), attrs);\n     }\n     expect(p, token::LBRACE);\n+\n     let all_nullary = true, have_disr = false;\n \n     while p.token != token::RBRACE {\n+        let variant_attrs = parse_outer_attributes(p);\n         let vlo = p.span.lo;\n         let ident = parse_value_ident(p);\n         let args = [], disr_expr = none;\n@@ -2068,7 +2071,8 @@ fn parse_item_enum(p: parser, attrs: [ast::attribute]) -> @ast::item {\n             disr_expr = some(parse_expr(p));\n         }\n \n-        let vr = {name: ident, args: args, id: p.get_id(),\n+        let vr = {name: ident, attrs: variant_attrs,\n+                  args: args, id: p.get_id(),\n                   disr_expr: disr_expr};\n         variants += [spanned(vlo, p.last_span.hi, vr)];\n "}, {"sha": "9e6b25aa2fca6bed308cfc60d956c7b86e8a4ca3", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2999479a2dcb10019558d64c2045fdee31841d31/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2999479a2dcb10019558d64c2045fdee31841d31/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=2999479a2dcb10019558d64c2045fdee31841d31", "patch": "@@ -434,6 +434,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n             for v: ast::variant in variants {\n                 space_if_not_bol(s);\n                 maybe_print_comment(s, v.span.lo);\n+                print_outer_attributes(s, v.node.attrs);\n                 ibox(s, indent_unit);\n                 word(s.s, v.node.name);\n                 if vec::len(v.node.args) > 0u {"}, {"sha": "45d79c835325f6c55eef447c7bb3cfe1eefd5410", "filename": "src/test/run-pass/variant-attributes.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2999479a2dcb10019558d64c2045fdee31841d31/src%2Ftest%2Frun-pass%2Fvariant-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2999479a2dcb10019558d64c2045fdee31841d31/src%2Ftest%2Frun-pass%2Fvariant-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariant-attributes.rs?ref=2999479a2dcb10019558d64c2045fdee31841d31", "patch": "@@ -0,0 +1,29 @@\n+// pp-exact - Make sure we actually print the attributes\n+\n+enum crew_of_enterprise_d {\n+\n+    #[captain]\n+    jean_luc_picard,\n+\n+    #[commander]\n+    william_t_riker,\n+\n+    #[chief_medical_officer]\n+    beverly_crusher,\n+\n+    #[ships_councellor]\n+    deanna_troi,\n+\n+    #[lieutenant_commander]\n+    data,\n+\n+    #[chief_of_security]\n+    worf,\n+\n+    #[chief_engineer]\n+    geordi_la_forge,\n+}\n+\n+fn boldly_go(_crew_member: crew_of_enterprise_d, _where: str) { }\n+\n+fn main() { boldly_go(worf, \"where no one has gone before\"); }"}]}