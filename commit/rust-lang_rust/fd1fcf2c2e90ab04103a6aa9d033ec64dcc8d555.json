{"sha": "fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMWZjZjJjMmU5MGFiMDQxMDNhNmFhOWQwMzNlYzY0ZGNjOGQ1NTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-23T10:37:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-23T10:37:30Z"}, "message": "Merge #7010\n\n7010: Update ungrammar for const block patterns r=matklad a=Veykril\n\nFixes #6848\r\n\r\nAdds const blocks and const block patterns to the AST and parses them.\r\n\r\nBlocked on https://github.com/rust-analyzer/ungrammar/pull/17/, will merge that PR there once this one gets the OK so I can remove the local ungrammar dependency path and fix the Cargo.lock.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "31b5facb6a7a24a113e32fd6afa76f326ab8e3a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31b5facb6a7a24a113e32fd6afa76f326ab8e3a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf4x3qCRBK7hj4Ov3rIwAAdHIIAJ7533BYSDxykBCpoRggiPqy\nDt7CCd8euPIlOfJ7sw3dhLOTxne0Pn/lx9ztTOwM1TqkW5CHrHnqhtXxT/aHmx2X\nzPfoDbsnH4xXsQV34MQ7MdeBMDU2HKdvPB3s99j3vOcXw53PDzelIOyPthuES5F8\nI+DP+emnOh7MOJWiR6f0ehAD0GPjkG9RpS6tcjh/5Tj38CLxy9dLg5/8n2ua9DrV\nX7QwmY0i17cdYwTWG3FevkyU4ok+bLhaQNuhFS62IpzA2NbtIT1p7TdFDiCkkT+m\nWmI+hPuOP2iXmTkRGdnyDtMnt8fJa1WOtzE58kC9xjzneriUENwbTjLv2IR++LI=\n=nlhS\n-----END PGP SIGNATURE-----\n", "payload": "tree 31b5facb6a7a24a113e32fd6afa76f326ab8e3a2\nparent b0d81d98dbc4cea6920793c7e2952a0d38ec543e\nparent bdd8c0b68f097c7d1a65a5b85b94f0a79affa506\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608719850 +0000\ncommitter GitHub <noreply@github.com> 1608719850 +0000\n\nMerge #7010\n\n7010: Update ungrammar for const block patterns r=matklad a=Veykril\n\nFixes #6848\r\n\r\nAdds const blocks and const block patterns to the AST and parses them.\r\n\r\nBlocked on https://github.com/rust-analyzer/ungrammar/pull/17/, will merge that PR there once this one gets the OK so I can remove the local ungrammar dependency path and fix the Cargo.lock.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "html_url": "https://github.com/rust-lang/rust/commit/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0d81d98dbc4cea6920793c7e2952a0d38ec543e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d81d98dbc4cea6920793c7e2952a0d38ec543e", "html_url": "https://github.com/rust-lang/rust/commit/b0d81d98dbc4cea6920793c7e2952a0d38ec543e"}, {"sha": "bdd8c0b68f097c7d1a65a5b85b94f0a79affa506", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd8c0b68f097c7d1a65a5b85b94f0a79affa506", "html_url": "https://github.com/rust-lang/rust/commit/bdd8c0b68f097c7d1a65a5b85b94f0a79affa506"}], "stats": {"total": 179, "additions": 172, "deletions": 7}, "files": [{"sha": "891cff55e372955e94f1b616862a377d6f34859b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -1827,9 +1827,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.4.0\"\n+version = \"1.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"68951379f3ced25754472ca5addbf74d7dab58c9818f49290a3d8caa3ab44fb7\"\n+checksum = \"c11bffada52edc8f2a56160b286ea4640acf90ffcb21bded361ccb8ed43a1457\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "978c3a32498c0ed51eea9ee06014e61c99a6daf3", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -933,7 +933,9 @@ impl ExprCollector<'_> {\n                 Pat::Box { inner }\n             }\n             // FIXME: implement\n-            ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) => Pat::Missing,\n+            ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) | ast::Pat::ConstBlockPat(_) => {\n+                Pat::Missing\n+            }\n         };\n         let ptr = AstPtr::new(&pat);\n         self.alloc_pat(pattern, Either::Left(ptr))"}, {"sha": "c7a3556a775092960a18e3b1aa8b45f4482102ad", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -46,6 +46,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         T![continue],\n         T![async],\n         T![try],\n+        T![const],\n         T![loop],\n         T![for],\n         LIFETIME_IDENT,\n@@ -115,6 +116,14 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             block_expr(p);\n             m.complete(p, EFFECT_EXPR)\n         }\n+        // test const_block\n+        // fn f() { const { } }\n+        T![const] if la == T!['{'] => {\n+            let m = p.start();\n+            p.bump(T![const]);\n+            block_expr(p);\n+            m.complete(p, EFFECT_EXPR)\n+        }\n         T!['{'] => {\n             // test for_range_from\n             // fn foo() {"}, {"sha": "72b73f89174d60faf249cffe52dfe50b38b4e78c", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -96,7 +96,10 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     let mut has_mods = false;\n \n     // modifiers\n-    has_mods |= p.eat(T![const]);\n+    if p.at(T![const]) && p.nth(1) != T!['{'] {\n+        p.eat(T![const]);\n+        has_mods = true;\n+    }\n \n     // test_err async_without_semicolon\n     // fn foo() { let _ = async {} }\n@@ -167,7 +170,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             m.complete(p, TRAIT);\n         }\n \n-        T![const] => {\n+        T![const] if p.nth(1) != T!['{'] => {\n             consts::konst(p, m);\n         }\n "}, {"sha": "b53d5749f42ba12b7b1d0b58aed82ea92da3c57d", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -89,6 +89,7 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     let m = match p.nth(0) {\n         T![box] => box_pat(p),\n         T![ref] | T![mut] => ident_pat(p, true),\n+        T![const] => const_block_pat(p),\n         IDENT => match p.nth(1) {\n             // Checks the token after an IDENT to see if a pattern is a path (Struct { .. }) or macro\n             // (T![x]).\n@@ -386,3 +387,16 @@ fn box_pat(p: &mut Parser) -> CompletedMarker {\n     pattern_single(p);\n     m.complete(p, BOX_PAT)\n }\n+\n+// test const_block_pat\n+// fn main() {\n+//     let const { 15 } = ();\n+//     let const { foo(); bar() } = ();\n+// }\n+fn const_block_pat(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(T![const]));\n+    let m = p.start();\n+    p.bump(T![const]);\n+    expressions::block_expr(p);\n+    m.complete(p, CONST_BLOCK_PAT)\n+}"}, {"sha": "f69e71bdba65a17aba832daef02566e380dbf7f5", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -170,6 +170,7 @@ pub enum SyntaxKind {\n     RANGE_PAT,\n     LITERAL_PAT,\n     MACRO_PAT,\n+    CONST_BLOCK_PAT,\n     TUPLE_EXPR,\n     ARRAY_EXPR,\n     PAREN_EXPR,"}, {"sha": "c5b80bffe742cf0a191bbc702479a171020188bc", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -763,6 +763,7 @@ impl EffectExpr {\n     pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n     pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1251,6 +1252,14 @@ impl TupleStructPat {\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ConstBlockPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ConstBlockPat {\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+    pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordPatFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1369,6 +1378,7 @@ pub enum Pat {\n     SlicePat(SlicePat),\n     TuplePat(TuplePat),\n     TupleStructPat(TupleStructPat),\n+    ConstBlockPat(ConstBlockPat),\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum FieldList {\n@@ -2772,6 +2782,17 @@ impl AstNode for TupleStructPat {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for ConstBlockPat {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_BLOCK_PAT }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for RecordPatFieldList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_PAT_FIELD_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3242,12 +3263,15 @@ impl From<TuplePat> for Pat {\n impl From<TupleStructPat> for Pat {\n     fn from(node: TupleStructPat) -> Pat { Pat::TupleStructPat(node) }\n }\n+impl From<ConstBlockPat> for Pat {\n+    fn from(node: ConstBlockPat) -> Pat { Pat::ConstBlockPat(node) }\n+}\n impl AstNode for Pat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             IDENT_PAT | BOX_PAT | REST_PAT | LITERAL_PAT | MACRO_PAT | OR_PAT | PAREN_PAT\n             | PATH_PAT | WILDCARD_PAT | RANGE_PAT | RECORD_PAT | REF_PAT | SLICE_PAT\n-            | TUPLE_PAT | TUPLE_STRUCT_PAT => true,\n+            | TUPLE_PAT | TUPLE_STRUCT_PAT | CONST_BLOCK_PAT => true,\n             _ => false,\n         }\n     }\n@@ -3268,6 +3292,7 @@ impl AstNode for Pat {\n             SLICE_PAT => Pat::SlicePat(SlicePat { syntax }),\n             TUPLE_PAT => Pat::TuplePat(TuplePat { syntax }),\n             TUPLE_STRUCT_PAT => Pat::TupleStructPat(TupleStructPat { syntax }),\n+            CONST_BLOCK_PAT => Pat::ConstBlockPat(ConstBlockPat { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3289,6 +3314,7 @@ impl AstNode for Pat {\n             Pat::SlicePat(it) => &it.syntax,\n             Pat::TuplePat(it) => &it.syntax,\n             Pat::TupleStructPat(it) => &it.syntax,\n+            Pat::ConstBlockPat(it) => &it.syntax,\n         }\n     }\n }\n@@ -4137,6 +4163,11 @@ impl std::fmt::Display for TupleStructPat {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for ConstBlockPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for RecordPatFieldList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "8ff4822c4efb7e8492558e50c6d44f4c728aee86", "filename": "crates/syntax/test_data/parser/inline/ok/0156_const_block_pat.rast", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rast?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -0,0 +1,76 @@\n+SOURCE_FILE@0..78\n+  FN@0..77\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..7\n+      IDENT@3..7 \"main\"\n+    PARAM_LIST@7..9\n+      L_PAREN@7..8 \"(\"\n+      R_PAREN@8..9 \")\"\n+    WHITESPACE@9..10 \" \"\n+    BLOCK_EXPR@10..77\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      LET_STMT@16..38\n+        LET_KW@16..19 \"let\"\n+        WHITESPACE@19..20 \" \"\n+        CONST_BLOCK_PAT@20..32\n+          CONST_KW@20..25 \"const\"\n+          WHITESPACE@25..26 \" \"\n+          BLOCK_EXPR@26..32\n+            L_CURLY@26..27 \"{\"\n+            WHITESPACE@27..28 \" \"\n+            LITERAL@28..30\n+              INT_NUMBER@28..30 \"15\"\n+            WHITESPACE@30..31 \" \"\n+            R_CURLY@31..32 \"}\"\n+        WHITESPACE@32..33 \" \"\n+        EQ@33..34 \"=\"\n+        WHITESPACE@34..35 \" \"\n+        TUPLE_EXPR@35..37\n+          L_PAREN@35..36 \"(\"\n+          R_PAREN@36..37 \")\"\n+        SEMICOLON@37..38 \";\"\n+      WHITESPACE@38..43 \"\\n    \"\n+      LET_STMT@43..75\n+        LET_KW@43..46 \"let\"\n+        WHITESPACE@46..47 \" \"\n+        CONST_BLOCK_PAT@47..69\n+          CONST_KW@47..52 \"const\"\n+          WHITESPACE@52..53 \" \"\n+          BLOCK_EXPR@53..69\n+            L_CURLY@53..54 \"{\"\n+            WHITESPACE@54..55 \" \"\n+            EXPR_STMT@55..61\n+              CALL_EXPR@55..60\n+                PATH_EXPR@55..58\n+                  PATH@55..58\n+                    PATH_SEGMENT@55..58\n+                      NAME_REF@55..58\n+                        IDENT@55..58 \"foo\"\n+                ARG_LIST@58..60\n+                  L_PAREN@58..59 \"(\"\n+                  R_PAREN@59..60 \")\"\n+              SEMICOLON@60..61 \";\"\n+            WHITESPACE@61..62 \" \"\n+            CALL_EXPR@62..67\n+              PATH_EXPR@62..65\n+                PATH@62..65\n+                  PATH_SEGMENT@62..65\n+                    NAME_REF@62..65\n+                      IDENT@62..65 \"bar\"\n+              ARG_LIST@65..67\n+                L_PAREN@65..66 \"(\"\n+                R_PAREN@66..67 \")\"\n+            WHITESPACE@67..68 \" \"\n+            R_CURLY@68..69 \"}\"\n+        WHITESPACE@69..70 \" \"\n+        EQ@70..71 \"=\"\n+        WHITESPACE@71..72 \" \"\n+        TUPLE_EXPR@72..74\n+          L_PAREN@72..73 \"(\"\n+          R_PAREN@73..74 \")\"\n+        SEMICOLON@74..75 \";\"\n+      WHITESPACE@75..76 \"\\n\"\n+      R_CURLY@76..77 \"}\"\n+  WHITESPACE@77..78 \"\\n\""}, {"sha": "dce9defac2f9fdc312a082f503f2183d9161870e", "filename": "crates/syntax/test_data/parser/inline/ok/0156_const_block_pat.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rs?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let const { 15 } = ();\n+    let const { foo(); bar() } = ();\n+}"}, {"sha": "d5d2c8fe3069eb70967407c30461762d6811e9cc", "filename": "crates/syntax/test_data/parser/inline/ok/0157_const_block.rast", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rast?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -0,0 +1,23 @@\n+SOURCE_FILE@0..21\n+  FN@0..20\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    PARAM_LIST@4..6\n+      L_PAREN@4..5 \"(\"\n+      R_PAREN@5..6 \")\"\n+    WHITESPACE@6..7 \" \"\n+    BLOCK_EXPR@7..20\n+      L_CURLY@7..8 \"{\"\n+      WHITESPACE@8..9 \" \"\n+      EFFECT_EXPR@9..18\n+        CONST_KW@9..14 \"const\"\n+        WHITESPACE@14..15 \" \"\n+        BLOCK_EXPR@15..18\n+          L_CURLY@15..16 \"{\"\n+          WHITESPACE@16..17 \" \"\n+          R_CURLY@17..18 \"}\"\n+      WHITESPACE@18..19 \" \"\n+      R_CURLY@19..20 \"}\"\n+  WHITESPACE@20..21 \"\\n\""}, {"sha": "a2e3565a321f2f583859c8f1a8f961cbd982e000", "filename": "crates/syntax/test_data/parser/inline/ok/0157_const_block.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rs?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -0,0 +1 @@\n+fn f() { const { } }"}, {"sha": "96b4ea448d476ba173a823ec302c2d1810982de1", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -15,7 +15,7 @@ flate2 = \"1.0\"\n pico-args = \"0.3.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"1.4\"\n+ungrammar = \"1.5\"\n walkdir = \"2.3.1\"\n write-json = \"0.1.0\"\n xshell = \"0.1\""}, {"sha": "2b8012bdd55757dcc846920e0d32a2ef148c5457", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "patch": "@@ -132,6 +132,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"RANGE_PAT\",\n         \"LITERAL_PAT\",\n         \"MACRO_PAT\",\n+        \"CONST_BLOCK_PAT\",\n         // atoms\n         \"TUPLE_EXPR\",\n         \"ARRAY_EXPR\","}]}