{"sha": "dc18ff51c38a9e602832508f4a3676176dbe113d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMThmZjUxYzM4YTllNjAyODMyNTA4ZjRhMzY3NjE3NmRiZTExM2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-29T13:11:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-29T13:12:19Z"}, "message": "Remove dead code", "tree": {"sha": "631c3a685be6d15eaa868d89185770814ee21ca1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631c3a685be6d15eaa868d89185770814ee21ca1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc18ff51c38a9e602832508f4a3676176dbe113d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc18ff51c38a9e602832508f4a3676176dbe113d", "html_url": "https://github.com/rust-lang/rust/commit/dc18ff51c38a9e602832508f4a3676176dbe113d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc18ff51c38a9e602832508f4a3676176dbe113d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35804355797a50195718918efc6f7272786d62e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35804355797a50195718918efc6f7272786d62e", "html_url": "https://github.com/rust-lang/rust/commit/e35804355797a50195718918efc6f7272786d62e"}], "stats": {"total": 54, "additions": 0, "deletions": 54}, "files": [{"sha": "01508ed8824c52207b54f80bfa4d4983425d873c", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dc18ff51c38a9e602832508f4a3676176dbe113d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc18ff51c38a9e602832508f4a3676176dbe113d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=dc18ff51c38a9e602832508f4a3676176dbe113d", "patch": "@@ -1929,7 +1929,6 @@ pub struct TypeParamList {\n }\n impl TypeParamList {\n     pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n-    pub fn generic_params(&self) -> AstChildren<GenericParam> { support::children(&self.syntax) }\n     pub fn type_params(&self) -> AstChildren<TypeParam> { support::children(&self.syntax) }\n     pub fn lifetime_params(&self) -> AstChildren<LifetimeParam> { support::children(&self.syntax) }\n     pub fn const_params(&self) -> AstChildren<ConstParam> { support::children(&self.syntax) }\n@@ -2601,13 +2600,6 @@ pub enum NominalDef {\n impl ast::NameOwner for NominalDef {}\n impl ast::TypeParamsOwner for NominalDef {}\n impl ast::AttrsOwner for NominalDef {}\n-/// Any kind of **declared** generic parameter\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum GenericParam {\n-    LifetimeParam(LifetimeParam),\n-    TypeParam(TypeParam),\n-    ConstParam(ConstParam),\n-}\n /// Any kind of generic argument passed at instantiation site\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum GenericArg {\n@@ -4155,39 +4147,6 @@ impl AstNode for NominalDef {\n         }\n     }\n }\n-impl From<LifetimeParam> for GenericParam {\n-    fn from(node: LifetimeParam) -> GenericParam { GenericParam::LifetimeParam(node) }\n-}\n-impl From<TypeParam> for GenericParam {\n-    fn from(node: TypeParam) -> GenericParam { GenericParam::TypeParam(node) }\n-}\n-impl From<ConstParam> for GenericParam {\n-    fn from(node: ConstParam) -> GenericParam { GenericParam::ConstParam(node) }\n-}\n-impl AstNode for GenericParam {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LIFETIME_PARAM | TYPE_PARAM | CONST_PARAM => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            LIFETIME_PARAM => GenericParam::LifetimeParam(LifetimeParam { syntax }),\n-            TYPE_PARAM => GenericParam::TypeParam(TypeParam { syntax }),\n-            CONST_PARAM => GenericParam::ConstParam(ConstParam { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            GenericParam::LifetimeParam(it) => &it.syntax,\n-            GenericParam::TypeParam(it) => &it.syntax,\n-            GenericParam::ConstParam(it) => &it.syntax,\n-        }\n-    }\n-}\n impl From<LifetimeArg> for GenericArg {\n     fn from(node: LifetimeArg) -> GenericArg { GenericArg::LifetimeArg(node) }\n }\n@@ -4855,11 +4814,6 @@ impl std::fmt::Display for NominalDef {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for GenericParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for GenericArg {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "8d1ffc5b51fb43f857c989d0ab4a95e421940ab9", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc18ff51c38a9e602832508f4a3676176dbe113d/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc18ff51c38a9e602832508f4a3676176dbe113d/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=dc18ff51c38a9e602832508f4a3676176dbe113d", "patch": "@@ -1630,7 +1630,6 @@ pub(crate) fn rust_ast() -> AstSrc {\n             /// [Reference](https://doc.rust-lang.org/reference/items/generics.html)\n             struct TypeParamList {\n                 T![<],\n-                generic_params: [GenericParam],\n                 type_params: [TypeParam],\n                 lifetime_params: [LifetimeParam],\n                 const_params: [ConstParam],\n@@ -2102,13 +2101,6 @@ pub(crate) fn rust_ast() -> AstSrc {\n                 StructDef, EnumDef, UnionDef,\n             }\n \n-            /// Any kind of **declared** generic parameter\n-            enum GenericParam {\n-                LifetimeParam,\n-                TypeParam,\n-                ConstParam\n-            }\n-\n             /// Any kind of generic argument passed at instantiation site\n             enum GenericArg {\n                 LifetimeArg,"}]}