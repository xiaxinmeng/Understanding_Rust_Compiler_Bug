{"sha": "7376e751aeed046c29ff4b892b359002de145d2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNzZlNzUxYWVlZDA0NmMyOWZmNGI4OTJiMzU5MDAyZGUxNDVkMmQ=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-14T16:07:51Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-14T16:07:51Z"}, "message": "Keep a pointer to rust_object_type.", "tree": {"sha": "7c560311563efe8c837555291f0ddc4990e7fa67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c560311563efe8c837555291f0ddc4990e7fa67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7376e751aeed046c29ff4b892b359002de145d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7376e751aeed046c29ff4b892b359002de145d2d", "html_url": "https://github.com/rust-lang/rust/commit/7376e751aeed046c29ff4b892b359002de145d2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7376e751aeed046c29ff4b892b359002de145d2d/comments", "author": null, "committer": null, "parents": [{"sha": "40f617390d26816374d5ca54f2b3ea699471e0c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f617390d26816374d5ca54f2b3ea699471e0c8", "html_url": "https://github.com/rust-lang/rust/commit/40f617390d26816374d5ca54f2b3ea699471e0c8"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "90473857dec976b2a6c11cac1e090bfc333662b9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7376e751aeed046c29ff4b892b359002de145d2d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7376e751aeed046c29ff4b892b359002de145d2d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7376e751aeed046c29ff4b892b359002de145d2d", "patch": "@@ -146,6 +146,7 @@ type crate_ctxt =\n         ty::ctxt tcx,\n         stats stats,\n         @upcall::upcalls upcalls,\n+        TypeRef rust_object_type,\n         TypeRef tydesc_type,\n         TypeRef task_type);\n \n@@ -773,7 +774,7 @@ fn type_of_fn_full(&@crate_ctxt cx, &span sp, ast::proto proto,\n \n     // Arg 2: Env (closure-bindings / self-obj)\n     if (is_method) {\n-        atys += ~[T_rust_object()];\n+        atys += ~[cx.rust_object_type];\n     } else {\n         atys += ~[T_opaque_closure_ptr(*cx)];\n     }\n@@ -901,7 +902,7 @@ fn type_of_inner(&@crate_ctxt cx, &span sp, &ty::t t) -> TypeRef {\n             llty = T_fn_pair(*cx, nft);\n         }\n         case (ty::ty_obj(?meths)) {\n-            llty = T_rust_object();\n+            llty = cx.rust_object_type;\n         }\n         case (ty::ty_res(_, ?sub, ?tps)) {\n             auto sub1 = ty::substitute_type_params(cx.tcx, tps, sub);\n@@ -6963,7 +6964,7 @@ fn trans_anon_obj(@block_ctxt bcx, &span sp, &ast::anon_obj anon_obj,\n     }\n \n     // Allocate the object that we're going to return.\n-    auto pair = alloca(bcx, T_rust_object());\n+    auto pair = alloca(bcx, ccx.rust_object_type);\n \n     // Take care of cleanups.\n     auto t = node_id_type(ccx, id);\n@@ -7124,9 +7125,9 @@ fn trans_anon_obj(@block_ctxt bcx, &span sp, &ast::anon_obj anon_obj,\n     }\n \n     // Cast the final object to how we want its type to appear.\n-    pair = bcx.build.PointerCast(pair, T_ptr(T_rust_object()));\n+    pair = bcx.build.PointerCast(pair, T_ptr(ccx.rust_object_type));\n \n-    // Return the object we built.\n+    // return the object we built.\n     ret rslt(bcx, pair);\n }\n \n@@ -7554,7 +7555,7 @@ fn copy_any_self_to_alloca(@fn_ctxt fcx) {\n     auto bcx = llstaticallocas_block_ctxt(fcx);\n     alt ({ fcx.llself }) {\n         case (some(?pair)) {\n-            auto a = alloca(bcx, T_rust_object());\n+            auto a = alloca(bcx, fcx.lcx.ccx.rust_object_type);\n             bcx.build.Store(pair.v, a);\n             fcx.llself = some[val_self_pair](rec(v=a, t=pair.t));\n         }\n@@ -7769,7 +7770,7 @@ fn process_fwding_mthd(@local_ctxt cx, &span sp, @ty::method m,\n \n     // The outer object will arrive in the forwarding function via the llenv\n     // argument.  Put it in an alloca so that we can GEP into it later.\n-    auto llself_obj_ptr = alloca(bcx, T_rust_object());\n+    auto llself_obj_ptr = alloca(bcx, fcx.lcx.ccx.rust_object_type);\n     bcx.build.Store(fcx.llenv, llself_obj_ptr);\n \n     // Grab hold of the outer object so we can pass it into the inner object,\n@@ -9225,6 +9226,7 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n                        mutable n_real_glues=0u),\n              upcalls=upcall::declare_upcalls(tn, tydesc_type, taskptr_type,\n                                              llmod),\n+             rust_object_type=T_rust_object(),\n              tydesc_type=tydesc_type,\n              task_type=task_type);\n     auto cx = new_local_ctxt(ccx);"}]}