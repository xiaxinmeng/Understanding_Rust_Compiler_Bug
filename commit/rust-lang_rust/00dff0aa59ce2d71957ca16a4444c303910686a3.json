{"sha": "00dff0aa59ce2d71957ca16a4444c303910686a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZGZmMGFhNTljZTJkNzE5NTdjYTE2YTQ0NDRjMzAzOTEwNjg2YTM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-04-17T20:22:16Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-04-25T02:31:01Z"}, "message": "Support AddressSanitizer and ThreadSanitizer on x86_64-apple-darwin.\n\nASan and TSan are supported on macOS, and this commit enables their\nsupport.\n\nThe sanitizers are always built as *.dylib on Apple platforms, so they\ncannot be statically linked into the corresponding `rustc_?san.rlib`. The\ndylibs are directly copied to `lib/rustlib/x86_64-apple-darwin/lib/`\ninstead.\n\nNote, although Xcode also ships with their own copies of ASan/TSan dylibs,\nwe cannot use them due to version mismatch.\n\nThere is a caveat: the sanitizer libraries are linked as @rpath, so the\nuser needs to additionally pass `-C rpath`:\n\n    rustc -Z sanitizer=address -C rpath file.rs\n                               ^~~~~~~~\n\nOtherwise there will be a runtime error:\n\n    dyld: Library not loaded: @rpath/libclang_rt.asan_osx_dynamic.dylib\n      Referenced from: /path/to/executable\n      Reason: image not found\n    Abort trap: 6\n\nThe next commit includes a temporary change in compiler to force the linker\nto emit a usable @rpath.", "tree": {"sha": "852ffe5c231746516dfd968e7e5272840d09a92d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/852ffe5c231746516dfd968e7e5272840d09a92d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00dff0aa59ce2d71957ca16a4444c303910686a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJY/rTlAAoJEP72yAUdDgE8M7sP/1NgL3cbeqkPopduOtS9/RTH\n2V1nvBmiuXRamEqUwh8rlhPDMTZ+k7A4YNyjzrVdK3SH9ZmBGxWAVrz+ctPaN3eL\n5yzlUt2zQN61ibyM4e5f0gXU5mZdjtZVuVIf3GVJVNfr14wsowH7nBjDcoAG/ILY\nvwp8rbMqEasjnxoXB07oEM8WhKq22UhUo3EcOF006rQvZLlqTQGHYU84Fa+Zjnvq\nl2p9EI0wJKMHpouGP+AE3OzWVJr+DDGDad76fqJziYnNK9TulopFMuRk6dkof6dM\nfO4jY3xyuhLNvAImRVCKD59WB3TXfqHVqBzGzdik+44ROZgH3GTWk8HOddvVXpSs\nZI7WiH3Pk+UEcwxtMh7X+8Jh/XOZAhF8E/LQPw3erSeodTYDVzCNeLXm8xcTXssO\n4+DsjHjz78e+Cnk31bbWB2UzAQEzZRkZe9LyNpNHB5FeJkJEaJDk60J1IPZ3Wv1C\niCFYFrSbHZvC9UTevkelMEFlm+Hm5yeH91+BZXX86YjhTG8NXMzjpPnpFL2Y6YtX\nvXPtGaopHaMC40rGuyjlIcsiW31FDrvMIzsJLdCXnijT0M56FGJRqmlUk8AaOBJu\naZr83e/5pr2G0tkUhoRh1M3mV7xjdGJrKOw8w3MqxP1LOoE6HR5pdXWURnt/UTzr\nuziYrimHNJRGjHmGRIf8\n=8/Qk\n-----END PGP SIGNATURE-----", "payload": "tree 852ffe5c231746516dfd968e7e5272840d09a92d\nparent 93d57d64b86d574efa35e2fb354d8dc92153b8a7\nauthor kennytm <kennytm@gmail.com> 1492460536 +0800\ncommitter kennytm <kennytm@gmail.com> 1493087461 +0800\n\nSupport AddressSanitizer and ThreadSanitizer on x86_64-apple-darwin.\n\nASan and TSan are supported on macOS, and this commit enables their\nsupport.\n\nThe sanitizers are always built as *.dylib on Apple platforms, so they\ncannot be statically linked into the corresponding `rustc_?san.rlib`. The\ndylibs are directly copied to `lib/rustlib/x86_64-apple-darwin/lib/`\ninstead.\n\nNote, although Xcode also ships with their own copies of ASan/TSan dylibs,\nwe cannot use them due to version mismatch.\n\nThere is a caveat: the sanitizer libraries are linked as @rpath, so the\nuser needs to additionally pass `-C rpath`:\n\n    rustc -Z sanitizer=address -C rpath file.rs\n                               ^~~~~~~~\n\nOtherwise there will be a runtime error:\n\n    dyld: Library not loaded: @rpath/libclang_rt.asan_osx_dynamic.dylib\n      Referenced from: /path/to/executable\n      Reason: image not found\n    Abort trap: 6\n\nThe next commit includes a temporary change in compiler to force the linker\nto emit a usable @rpath.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00dff0aa59ce2d71957ca16a4444c303910686a3", "html_url": "https://github.com/rust-lang/rust/commit/00dff0aa59ce2d71957ca16a4444c303910686a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00dff0aa59ce2d71957ca16a4444c303910686a3/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93d57d64b86d574efa35e2fb354d8dc92153b8a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/93d57d64b86d574efa35e2fb354d8dc92153b8a7", "html_url": "https://github.com/rust-lang/rust/commit/93d57d64b86d574efa35e2fb354d8dc92153b8a7"}], "stats": {"total": 133, "additions": 97, "deletions": 36}, "files": [{"sha": "c5372609e9bc622eb8f0385fd0db681d906ba0b0", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -54,7 +54,7 @@ matrix:\n     # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n     - env: >\n         RUST_CHECK_TARGET=check\n-        RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin\n+        RUST_CONFIGURE_ARGS=\"--build=x86_64-apple-darwin --enable-sanitizers\"\n         SRC=.\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n@@ -98,7 +98,7 @@ matrix:\n       install: *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended\"\n+        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1"}, {"sha": "6f1de62d07ee3bd9267837281b990205f95050c7", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -115,6 +115,13 @@ pub fn std_link(build: &Build,\n     if target.contains(\"musl\") && !target.contains(\"mips\") {\n         copy_musl_third_party_objects(build, target, &libdir);\n     }\n+\n+    if build.config.sanitizers && compiler.stage != 0 && target == \"x86_64-apple-darwin\" {\n+        // The sanitizers are only built in stage1 or above, so the dylibs will\n+        // be missing in stage0 and causes panic. See the `std()` function above\n+        // for reason why the sanitizers are not built in stage0.\n+        copy_apple_sanitizer_dylibs(&build.native_dir(target), \"osx\", &libdir);\n+    }\n }\n \n /// Copies the crt(1,i,n).o startup objects\n@@ -126,6 +133,18 @@ fn copy_musl_third_party_objects(build: &Build, target: &str, into: &Path) {\n     }\n }\n \n+fn copy_apple_sanitizer_dylibs(native_dir: &Path, platform: &str, into: &Path) {\n+    for &sanitizer in &[\"asan\", \"tsan\"] {\n+        let filename = format!(\"libclang_rt.{}_{}_dynamic.dylib\", sanitizer, platform);\n+        let mut src_path = native_dir.join(sanitizer);\n+        src_path.push(\"build\");\n+        src_path.push(\"lib\");\n+        src_path.push(\"darwin\");\n+        src_path.push(&filename);\n+        copy(&src_path, &into.join(filename));\n+    }\n+}\n+\n /// Build and prepare startup objects like rsbegin.o and rsend.o\n ///\n /// These are primarily used on Windows right now for linking executables/dlls."}, {"sha": "da00b970da977e950bacdf275403c0a57e0e6ad7", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -198,7 +198,11 @@ pub fn native_lib_boilerplate(src_name: &str,\n     let out_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n     let out_dir = PathBuf::from(out_dir).join(out_name);\n     t!(create_dir_racy(&out_dir));\n-    println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    if link_name.contains('=') {\n+        println!(\"cargo:rustc-link-lib={}\", link_name);\n+    } else {\n+        println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    }\n     println!(\"cargo:rustc-link-search=native={}\", out_dir.join(search_subdir).display());\n \n     let timestamp = out_dir.join(\"rustbuild.timestamp\");\n@@ -209,6 +213,21 @@ pub fn native_lib_boilerplate(src_name: &str,\n     }\n }\n \n+pub fn sanitizer_lib_boilerplate(sanitizer_name: &str) -> Result<NativeLibBoilerplate, ()> {\n+    let (link_name, search_path) = match &*env::var(\"TARGET\").unwrap() {\n+        \"x86_64-unknown-linux-gnu\" => (\n+            format!(\"clang_rt.{}-x86_64\", sanitizer_name),\n+            \"build/lib/linux\",\n+        ),\n+        \"x86_64-apple-darwin\" => (\n+            format!(\"dylib=clang_rt.{}_osx_dynamic\", sanitizer_name),\n+            \"build/lib/darwin\",\n+        ),\n+        _ => return Err(()),\n+    };\n+    native_lib_boilerplate(\"compiler-rt\", sanitizer_name, &link_name, search_path)\n+}\n+\n fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());"}, {"sha": "462fd57cbf17f4a7de6a0d8cfb066bc983597304", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -51,7 +51,7 @@ pub struct Config {\n     pub uint_type: UintTy,\n }\n \n-#[derive(Clone, Hash)]\n+#[derive(Clone, Hash, Debug)]\n pub enum Sanitizer {\n     Address,\n     Leak,"}, {"sha": "3a80baa0485f56cf15b32243f61d960f340d2996", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -12,14 +12,13 @@ extern crate build_helper;\n extern crate cmake;\n \n use std::env;\n-use build_helper::native_lib_boilerplate;\n+use build_helper::sanitizer_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match native_lib_boilerplate(\"compiler-rt\", \"asan\", \"clang_rt.asan-x86_64\",\n-                                                  \"build/lib/linux\") {\n+        let native = match sanitizer_lib_boilerplate(\"asan\") {\n             Ok(native) => native,\n             _ => return,\n         };"}, {"sha": "da53571a243905fe7ac7d7fc6063a001fbffdb55", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -12,14 +12,13 @@ extern crate build_helper;\n extern crate cmake;\n \n use std::env;\n-use build_helper::native_lib_boilerplate;\n+use build_helper::sanitizer_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match native_lib_boilerplate(\"compiler-rt\", \"lsan\", \"clang_rt.lsan-x86_64\",\n-                                                  \"build/lib/linux\") {\n+        let native = match sanitizer_lib_boilerplate(\"lsan\") {\n             Ok(native) => native,\n             _ => return,\n         };"}, {"sha": "966e814e3379075741b2809585814f95e5a5624b", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -799,11 +799,26 @@ impl<'a> CrateLoader<'a> {\n \n     fn inject_sanitizer_runtime(&mut self) {\n         if let Some(ref sanitizer) = self.sess.opts.debugging_opts.sanitizer {\n-            // Sanitizers can only be used with x86_64 Linux executables linked\n-            // to `std`\n-            if self.sess.target.target.llvm_target != \"x86_64-unknown-linux-gnu\" {\n-                self.sess.err(&format!(\"Sanitizers only work with the \\\n-                                        `x86_64-unknown-linux-gnu` target.\"));\n+            // Sanitizers can only be used on some tested platforms with\n+            // executables linked to `std`\n+            const ASAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\",\n+                                                      \"x86_64-apple-darwin\"];\n+            const TSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\",\n+                                                      \"x86_64-apple-darwin\"];\n+            const LSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n+            const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n+\n+            let supported_targets = match *sanitizer {\n+                Sanitizer::Address => ASAN_SUPPORTED_TARGETS,\n+                Sanitizer::Thread => TSAN_SUPPORTED_TARGETS,\n+                Sanitizer::Leak => LSAN_SUPPORTED_TARGETS,\n+                Sanitizer::Memory => MSAN_SUPPORTED_TARGETS,\n+            };\n+            if !supported_targets.contains(&&*self.sess.target.target.llvm_target) {\n+                self.sess.err(&format!(\"{:?}Sanitizer only works with the `{}` target\",\n+                    sanitizer,\n+                    supported_targets.join(\"` or `\")\n+                ));\n                 return\n             }\n "}, {"sha": "dcadbe86966e71eeab8adf40f4e2ad44d6d045e8", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -12,14 +12,13 @@ extern crate build_helper;\n extern crate cmake;\n \n use std::env;\n-use build_helper::native_lib_boilerplate;\n+use build_helper::sanitizer_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match native_lib_boilerplate(\"compiler-rt\", \"msan\", \"clang_rt.msan-x86_64\",\n-                                                  \"build/lib/linux\") {\n+        let native = match sanitizer_lib_boilerplate(\"msan\") {\n             Ok(native) => native,\n             _ => return,\n         };"}, {"sha": "5ea52f17a0fdedd73686ddd140f40fbb12d535a3", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -12,14 +12,13 @@ extern crate build_helper;\n extern crate cmake;\n \n use std::env;\n-use build_helper::native_lib_boilerplate;\n+use build_helper::sanitizer_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match native_lib_boilerplate(\"compiler-rt\", \"tsan\", \"clang_rt.tsan-x86_64\",\n-                                                  \"build/lib/linux\") {\n+        let native = match sanitizer_lib_boilerplate(\"tsan\") {\n             Ok(native) => native,\n             _ => return,\n         };"}, {"sha": "717892be2abad5f4eb4bf9855527453d81a5228e", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -23,6 +23,10 @@ compiler_builtins = { path = \"../libcompiler_builtins\" }\n std_unicode = { path = \"../libstd_unicode\" }\n unwind = { path = \"../libunwind\" }\n \n+[target.x86_64-apple-darwin.dependencies]\n+rustc_asan = { path = \"../librustc_asan\" }\n+rustc_tsan = { path = \"../librustc_tsan\" }\n+\n [target.x86_64-unknown-linux-gnu.dependencies]\n rustc_asan = { path = \"../librustc_asan\" }\n rustc_lsan = { path = \"../librustc_lsan\" }"}, {"sha": "61b25df1451b336895e189500c5a0fbb5335ae4a", "filename": "src/test/run-make/sanitizer-address/Makefile", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -1,11 +1,19 @@\n -include ../tools.mk\n \n-# NOTE the address sanitizer only supports x86_64 linux\n-ifdef SANITIZER_SUPPORT\n-all:\n-\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args overflow.rs | grep -q librustc_asan\n-\t$(TMPDIR)/overflow 2>&1 | grep -q stack-buffer-overflow\n+# NOTE the address sanitizer only supports x86_64 linux and macOS\n+\n+ifeq ($(TARGET),x86_64-apple-darwin)\n+ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n+EXTRA_RUSTFLAG=-C rpath\n else\n-all:\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n+EXTRA_RUSTFLAG=\n+endif\n+endif\n \n+all:\n+ifeq ($(ASAN_SUPPORT),1)\n+\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | grep -q librustc_asan\n+\t$(TMPDIR)/overflow 2>&1 | grep -q stack-buffer-overflow\n endif"}, {"sha": "82e32f0995202e02e5990024745326fb20c4abcf", "filename": "src/test/run-make/sanitizer-invalid-target/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -1,4 +1,4 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | grep -q 'Sanitizers only work with the `x86_64-unknown-linux-gnu` target'\n+\t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | grep -q 'LeakSanitizer only works with the `x86_64-unknown-linux-gnu` target'"}, {"sha": "b18dd1d45eda48fd6cd014d392bf1ec60a39fbed", "filename": "src/test/run-make/sanitizer-leak/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -1,10 +1,10 @@\n -include ../tools.mk\n \n-ifdef SANITIZER_SUPPORT\n all:\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+ifdef SANITIZER_SUPPORT\n \t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | grep -q librustc_lsan\n \t$(TMPDIR)/leak 2>&1 | grep -q 'detected memory leaks'\n-else\n-all:\n-\n endif\n+endif\n+"}, {"sha": "7502ef0e7a7b750467ecde8e32e013b21d87557d", "filename": "src/test/run-make/sanitizer-memory/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/00dff0aa59ce2d71957ca16a4444c303910686a3/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile?ref=00dff0aa59ce2d71957ca16a4444c303910686a3", "patch": "@@ -1,10 +1,10 @@\n -include ../tools.mk\n \n-ifdef SANITIZER_SUPPORT\n all:\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+ifdef SANITIZER_SUPPORT\n \t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | grep -q librustc_msan\n \t$(TMPDIR)/uninit 2>&1 | grep -q use-of-uninitialized-value\n-else\n-all:\n-\n endif\n+endif\n+"}]}