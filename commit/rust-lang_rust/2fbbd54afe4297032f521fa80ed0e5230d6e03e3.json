{"sha": "2fbbd54afe4297032f521fa80ed0e5230d6e03e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYmJkNTRhZmU0Mjk3MDMyZjUyMWZhODBlZDBlNTIzMGQ2ZTAzZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T03:25:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T03:25:45Z"}, "message": "Auto merge of #26122 - bluss:borrow-box, r=alexcrichton\n\nImplement Borrow<T> and BorrowMut<T> for Box<T: ?Sized>", "tree": {"sha": "ed0cb2c9f1442b4fda0b148a21be557511b3d0ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0cb2c9f1442b4fda0b148a21be557511b3d0ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fbbd54afe4297032f521fa80ed0e5230d6e03e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbbd54afe4297032f521fa80ed0e5230d6e03e3", "html_url": "https://github.com/rust-lang/rust/commit/2fbbd54afe4297032f521fa80ed0e5230d6e03e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fbbd54afe4297032f521fa80ed0e5230d6e03e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb13543fc1e0afe4975996b4c20b3898e86030d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb13543fc1e0afe4975996b4c20b3898e86030d", "html_url": "https://github.com/rust-lang/rust/commit/fbb13543fc1e0afe4975996b4c20b3898e86030d"}, {"sha": "4fdb4cfa896232a2a2beb9d1eace922402b98082", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdb4cfa896232a2a2beb9d1eace922402b98082", "html_url": "https://github.com/rust-lang/rust/commit/4fdb4cfa896232a2a2beb9d1eace922402b98082"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "d7242b9077556da112e5bac4bbd9eb40c01485d6", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fbbd54afe4297032f521fa80ed0e5230d6e03e3/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbbd54afe4297032f521fa80ed0e5230d6e03e3/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=2fbbd54afe4297032f521fa80ed0e5230d6e03e3", "patch": "@@ -21,7 +21,7 @@ use core::ops::Deref;\n use core::option::Option;\n \n use fmt;\n-use alloc::{rc, arc};\n+use alloc::{boxed, rc, arc};\n \n use self::Cow::*;\n \n@@ -116,6 +116,14 @@ impl<'a, T: ?Sized> BorrowMut<T> for &'a mut T {\n     fn borrow_mut(&mut self) -> &mut T { &mut **self }\n }\n \n+impl<T: ?Sized> Borrow<T> for boxed::Box<T> {\n+    fn borrow(&self) -> &T { &**self }\n+}\n+\n+impl<T: ?Sized> BorrowMut<T> for boxed::Box<T> {\n+    fn borrow_mut(&mut self) -> &mut T { &mut **self }\n+}\n+\n impl<T: ?Sized> Borrow<T> for rc::Rc<T> {\n     fn borrow(&self) -> &T { &**self }\n }"}, {"sha": "62b46433da95748ae6ba7d5c2ea37a5046968f03", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2fbbd54afe4297032f521fa80ed0e5230d6e03e3/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbbd54afe4297032f521fa80ed0e5230d6e03e3/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=2fbbd54afe4297032f521fa80ed0e5230d6e03e3", "patch": "@@ -12,6 +12,7 @@ use std::collections::BTreeMap;\n use std::collections::Bound::{Excluded, Included, Unbounded, self};\n use std::collections::btree_map::Entry::{Occupied, Vacant};\n use std::iter::range_inclusive;\n+use std::rc::Rc;\n \n #[test]\n fn test_basic_large() {\n@@ -198,6 +199,34 @@ fn test_range() {\n     }\n }\n \n+#[test]\n+fn test_borrow() {\n+    // make sure these compile -- using the Borrow trait\n+    {\n+        let mut map = BTreeMap::new();\n+        map.insert(\"0\".to_string(), 1);\n+        assert_eq!(map[\"0\"], 1);\n+    }\n+\n+    {\n+        let mut map = BTreeMap::new();\n+        map.insert(Box::new(0), 1);\n+        assert_eq!(map[&0], 1);\n+    }\n+\n+    {\n+        let mut map = BTreeMap::new();\n+        map.insert(Box::new([0, 1]) as Box<[i32]>, 1);\n+        assert_eq!(map[&[0, 1][..]], 1);\n+    }\n+\n+    {\n+        let mut map = BTreeMap::new();\n+        map.insert(Rc::new(0), 1);\n+        assert_eq!(map[&0], 1);\n+    }\n+}\n+\n #[test]\n fn test_entry(){\n     let xs = [(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60)];"}]}