{"sha": "f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "node_id": "C_kwDOAAsO6NoAKGY4ZmQ5NzMzYjYwMGU1MTc1ZmM2ODEwYjMwZjJlMGUxNGUwYWFmMTQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-18T17:53:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-19T14:41:41Z"}, "message": "Add mir_const_qualifs table.", "tree": {"sha": "3bd5b8e30278e2043f34b7efdd3b00f7c92cda40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bd5b8e30278e2043f34b7efdd3b00f7c92cda40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "html_url": "https://github.com/rust-lang/rust/commit/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "html_url": "https://github.com/rust-lang/rust/commit/0b7ee3aca28e4036bb0045b14d8b807a7400bd28"}], "stats": {"total": 43, "additions": 15, "deletions": 28}, "files": [{"sha": "5e298e94fcc86673c8217cb592e7134f538b48fe", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "patch": "@@ -24,7 +24,6 @@ use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::middle::stability::DeprecationEntry;\n-use rustc_middle::mir;\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::thir;\n use rustc_middle::ty::codec::TyDecoder;\n@@ -1171,21 +1170,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn mir_const_qualif(self, id: DefIndex) -> mir::ConstQualifs {\n-        match self.kind(id) {\n-            EntryKind::AnonConst(qualif, _)\n-            | EntryKind::Const(qualif, _)\n-            | EntryKind::AssocConst(\n-                AssocContainer::ImplDefault\n-                | AssocContainer::ImplFinal\n-                | AssocContainer::TraitWithDefault,\n-                qualif,\n-                _,\n-            ) => qualif,\n-            _ => bug!(\"mir_const_qualif: unexpected kind\"),\n-        }\n-    }\n-\n     fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {\n         match self.kind(id) {\n             EntryKind::AssocFn(data) => data.decode(self).has_self,\n@@ -1209,7 +1193,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         let name = self.item_name(id);\n \n         let (kind, container, has_self) = match self.kind(id) {\n-            EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),\n+            EntryKind::AssocConst(container, _) => (ty::AssocKind::Const, container, false),\n             EntryKind::AssocFn(data) => {\n                 let data = data.decode(self);\n                 (ty::AssocKind::Fn, data.container, data.has_self)\n@@ -1429,9 +1413,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_rendered_const(self, id: DefIndex) -> String {\n         match self.kind(id) {\n-            EntryKind::AnonConst(_, data)\n-            | EntryKind::Const(_, data)\n-            | EntryKind::AssocConst(_, _, data) => data.decode(self).0,\n+            EntryKind::AnonConst(data)\n+            | EntryKind::Const(data)\n+            | EntryKind::AssocConst(_, data) => data.decode(self).0,\n             _ => bug!(),\n         }\n     }"}, {"sha": "02652f84318884d8b3d895564ac6849c49a6d836", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "patch": "@@ -136,6 +136,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     impl_defaultness => { table }\n     impl_constness => { table }\n     coerce_unsized_info => { table }\n+    mir_const_qualif => { table }\n \n     trait_def => { cdata.get_trait_def(def_id.index, tcx.sess) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n@@ -145,7 +146,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     associated_item_def_ids => { cdata.get_associated_item_def_ids(tcx, def_id.index) }\n     associated_item => { cdata.get_associated_item(def_id.index) }\n-    mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n     asyncness => { cdata.asyncness(def_id.index) }"}, {"sha": "cff1e17a382a2b356582759f6c7b85f07aa525a9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "patch": "@@ -1192,9 +1192,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n                 record!(self.tables.kind[def_id] <- EntryKind::AssocConst(\n                     container,\n-                    Default::default(),\n                     rendered_const,\n                 ));\n+                record!(self.tables.mir_const_qualif[def_id] <- mir::ConstQualifs::default());\n             }\n             ty::AssocKind::Fn => {\n                 let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {\n@@ -1259,9 +1259,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n                     record!(self.tables.kind[def_id] <- EntryKind::AssocConst(\n                         container,\n-                        qualifs,\n                         self.encode_rendered_const_for_body(body_id))\n                     );\n+                    record!(self.tables.mir_const_qualif[def_id] <- qualifs);\n                 } else {\n                     bug!()\n                 }\n@@ -1407,7 +1407,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,\n             hir::ItemKind::Const(_, body_id) => {\n                 let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);\n-                EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id))\n+                record!(self.tables.mir_const_qualif[def_id] <- qualifs);\n+                EntryKind::Const(self.encode_rendered_const_for_body(body_id))\n             }\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 let data = FnData {\n@@ -1603,7 +1604,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let const_data = self.encode_rendered_const_for_body(body_id);\n         let qualifs = self.tcx.mir_const_qualif(def_id);\n \n-        record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));\n+        record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(const_data));\n+        record!(self.tables.mir_const_qualif[def_id.to_def_id()] <- qualifs);\n         self.encode_item_type(def_id.to_def_id());\n     }\n "}, {"sha": "c826800031e642ec64bac0960b4dc806cd99d2d0", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "patch": "@@ -308,6 +308,7 @@ define_tables! {\n     impl_defaultness: Table<DefIndex, Lazy!(hir::Defaultness)>,\n     // FIXME(eddyb) perhaps compute this on the fly if cheap enough?\n     coerce_unsized_info: Table<DefIndex, Lazy!(ty::adjustment::CoerceUnsizedInfo)>,\n+    mir_const_qualif: Table<DefIndex, Lazy!(mir::ConstQualifs)>,\n \n     trait_item_def_id: Table<DefIndex, Lazy<DefId>>,\n     inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n@@ -324,8 +325,8 @@ define_tables! {\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]\n enum EntryKind {\n-    AnonConst(mir::ConstQualifs, Lazy<RenderedConst>),\n-    Const(mir::ConstQualifs, Lazy<RenderedConst>),\n+    AnonConst(Lazy<RenderedConst>),\n+    Const(Lazy<RenderedConst>),\n     ImmStatic,\n     MutStatic,\n     ForeignImmStatic,\n@@ -353,7 +354,7 @@ enum EntryKind {\n     Impl,\n     AssocFn(Lazy<AssocFnData>),\n     AssocType(AssocContainer),\n-    AssocConst(AssocContainer, mir::ConstQualifs, Lazy<RenderedConst>),\n+    AssocConst(AssocContainer, Lazy<RenderedConst>),\n     TraitAlias,\n }\n "}]}