{"sha": "82d71b1b3acf31d688788d83a88acd91b78790c6", "node_id": "C_kwDOAAsO6NoAKDgyZDcxYjFiM2FjZjMxZDY4ODc4OGQ4M2E4OGFjZDkxYjc4NzkwYzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-08T22:22:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-08T22:22:47Z"}, "message": "Auto merge of #10605 - blyxyas:book-type_checking, r=llogiq\n\nClippy Book Chapter Updates Reborn: Type Checking\n\nThis PR adds a new chapter to the book: \"Type Checking\", it hasn't changed a lot from the source mainly because there wasn't many reviews on it and I haven't see a lot of things that needed a change.\n\n## Notes\n\n- I have some doubts about the whole \"`is_*` Usage\" section, what do you think about it.\n- For discussion about  the whole project, please use the tracking issue for the project #10597 (It also contains a timeline, discussions, and more information)\n\nchangelog: Add a new \"Type Checking\" chapter to the book\n\nr? `@flip1995`", "tree": {"sha": "803bca8f51934915f8a345a019c88d02ad6d0886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803bca8f51934915f8a345a019c88d02ad6d0886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82d71b1b3acf31d688788d83a88acd91b78790c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82d71b1b3acf31d688788d83a88acd91b78790c6", "html_url": "https://github.com/rust-lang/rust/commit/82d71b1b3acf31d688788d83a88acd91b78790c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82d71b1b3acf31d688788d83a88acd91b78790c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592ea3954d52be8a31249a1e945f77b412645560", "url": "https://api.github.com/repos/rust-lang/rust/commits/592ea3954d52be8a31249a1e945f77b412645560", "html_url": "https://github.com/rust-lang/rust/commit/592ea3954d52be8a31249a1e945f77b412645560"}, {"sha": "1cf64060e37f1cafca05beb61113f82635da08b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf64060e37f1cafca05beb61113f82635da08b4", "html_url": "https://github.com/rust-lang/rust/commit/1cf64060e37f1cafca05beb61113f82635da08b4"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "cbd73376dfa070b99071a41b9cb96313164a5ea2", "filename": "book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82d71b1b3acf31d688788d83a88acd91b78790c6/book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/82d71b1b3acf31d688788d83a88acd91b78790c6/book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FSUMMARY.md?ref=82d71b1b3acf31d688788d83a88acd91b78790c6", "patch": "@@ -13,6 +13,7 @@\n - [Development](development/README.md)\n     - [Basics](development/basics.md)\n     - [Adding Lints](development/adding_lints.md)\n+    - [Type Checking](development/type_checking.md)\n     - [Common Tools](development/common_tools_writing_lints.md)\n     - [Infrastructure](development/infrastructure/README.md)\n         - [Syncing changes between Clippy and rust-lang/rust](development/infrastructure/sync.md)"}, {"sha": "5ce434b99a1a6ab368b45edcc3397081f2a319ab", "filename": "book/src/development/type_checking.md", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/82d71b1b3acf31d688788d83a88acd91b78790c6/book%2Fsrc%2Fdevelopment%2Ftype_checking.md", "raw_url": "https://github.com/rust-lang/rust/raw/82d71b1b3acf31d688788d83a88acd91b78790c6/book%2Fsrc%2Fdevelopment%2Ftype_checking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Ftype_checking.md?ref=82d71b1b3acf31d688788d83a88acd91b78790c6", "patch": "@@ -0,0 +1,144 @@\n+# Type Checking\n+\n+When we work on a new lint or improve an existing lint, we might want\n+to retrieve the type `Ty` of an expression `Expr` for a variety of\n+reasons. This can be achieved by utilizing the [`LateContext`][LateContext]\n+that is available for [`LateLintPass`][LateLintPass].\n+\n+## `LateContext` and `TypeckResults`\n+\n+The lint context [`LateContext`][LateContext] and [`TypeckResults`][TypeckResults]\n+(returned by `LateContext::typeck_results`) are the two most useful data structures\n+in `LateLintPass`. They allow us to jump to type definitions and other compilation\n+stages such as HIR.\n+\n+> Note: `LateContext.typeck_results`'s return value is [`TypeckResults`][TypeckResults]\n+> and is created in the type checking step, it includes useful information such as types of\n+> expressions, ways to resolve methods and so on.\n+\n+`TypeckResults` contains useful methods such as [`expr_ty`][expr_ty],\n+which gives us access to the underlying structure [`Ty`][Ty] of a given expression.\n+\n+```rust\n+pub fn expr_ty(&self, expr: &Expr<'_>) -> Ty<'tcx>\n+```\n+\n+As a side note, besides `expr_ty`, [`TypeckResults`][TypeckResults] contains a\n+[`pat_ty()`][pat_ty] method that is useful for retrieving a type from a pattern.\n+\n+## `Ty`\n+\n+`Ty` struct contains the type information of an expression.\n+Let's take a look at `rustc_middle`'s [`Ty`][Ty] struct to examine this struct:\n+\n+```rust\n+pub struct Ty<'tcx>(Interned<'tcx, WithStableHash<TyS<'tcx>>>);\n+```\n+\n+At a first glance, this struct looks quite esoteric. But at a closer look,\n+we will see that this struct contains many useful methods for type checking.\n+\n+For instance, [`is_char`][is_char] checks if the given `Ty` struct corresponds\n+to the primitive character type.\n+\n+### `is_*` Usage\n+\n+In some scenarios, all we need to do is check if the `Ty` of an expression\n+is a specific type, such as `char` type, so we could write the following:\n+\n+```rust\n+impl LateLintPass<'_> for MyStructLint {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        // Get type of `expr`\n+        let ty = cx.typeck_results().expr_ty(expr);\n+        \n+        // Check if the `Ty` of this expression is of character type\n+        if ty.is_char() {\n+            println!(\"Our expression is a char!\");\n+        }\n+    }\n+}\n+```\n+\n+Furthermore, if we examine the [source code][is_char_source] for `is_char`,\n+we find something very interesting:\n+\n+```rust\n+#[inline]\n+pub fn is_char(self) -> bool {\n+    matches!(self.kind(), Char)\n+}\n+```\n+\n+Indeed, we just discovered `Ty`'s [`kind` method][kind], which provides us\n+with [`TyKind`][TyKind] of a `Ty`.\n+\n+## `TyKind`\n+\n+`TyKind` defines the kinds of types in Rust's type system.\n+Peeking into [`TyKind` documentation][TyKind], we will see that it is an\n+enum of 27 variants, including items such as `Bool`, `Int`, `Ref`, etc.\n+\n+### `kind` Usage\n+\n+The `TyKind` of `Ty` can be returned by calling [`Ty.kind` method][kind].\n+We often use this method to perform pattern matching in Clippy.\n+\n+For instance, if we want to check for a `struct`, we could examine if the\n+`ty.kind` corresponds to an [`Adt`][Adt] (algebraic data type) and if its\n+[`AdtDef`][AdtDef] is a struct:\n+\n+```rust\n+impl LateLintPass<'_> for MyStructLint {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        // Get type of `expr`\n+        let ty = cx.typeck_results().expr_ty(expr);\n+        // Match its kind to enter the type\n+        match ty.kind {\n+            ty::Adt(adt_def, _) if adt_def.is_struct() => println!(\"Our `expr` is a struct!\"),\n+            _ => ()\n+        }\n+    }\n+}\n+```\n+\n+## `hir::Ty` and `ty::Ty`\n+\n+We've been talking about [`ty::Ty`][middle_ty] this whole time without addressing [`hir::Ty`][hir_ty], but the latter\n+is also important to understand.\n+\n+`hir::Ty` would represent *what* an user wrote, while `ty::Ty` would understand the meaning of it (because it has more\n+information).\n+\n+**Example: `fn foo(x: u32) -> u32 { x }`**\n+\n+Here the HIR sees the types without \"thinking\" about them, it knows that the function takes an `u32` and returns\n+an `u32`. But at the `ty::Ty` level the compiler understands that they're the same type, in-depth lifetimes, etc...\n+\n+you can use the [`hir_ty_to_ty`][hir_ty_to_ty] function to convert from a `hir::Ty` to a `ty::Ty`\n+\n+## Useful Links\n+\n+Below are some useful links to further explore the concepts covered\n+in this chapter:\n+\n+- [Stages of compilation](https://rustc-dev-guide.rust-lang.org/compiler-src.html#the-main-stages-of-compilation)\n+- [Diagnostic items](https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-items.html)\n+- [Type checking](https://rustc-dev-guide.rust-lang.org/type-checking.html)\n+- [Ty module](https://rustc-dev-guide.rust-lang.org/ty.html)\n+\n+[Adt]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html#variant.Adt\n+[AdtDef]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/adt/struct.AdtDef.html\n+[expr_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#method.expr_ty\n+[is_char]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Ty.html#method.is_char\n+[is_char_source]: https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/sty.rs.html#1831-1834\n+[kind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Ty.html#method.kind\n+[LateContext]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LateContext.html\n+[LateLintPass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n+[pat_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#method.pat_ty\n+[Ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Ty.html\n+[TyKind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html\n+[TypeckResults]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html\n+[middle_ty]: https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/struct.Ty.html\n+[hir_ty]: https://doc.rust-lang.org/beta/nightly-rustc/rustc_hir/struct.Ty.html\n+[hir_ty_to_ty]: https://doc.rust-lang.org/beta/nightly-rustc/rustc_hir_analysis/fn.hir_ty_to_ty.html"}]}