{"sha": "fcfda94664b454f60be2dbc1b564ed63aa4c3ec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZmRhOTQ2NjRiNDU0ZjYwYmUyZGJjMWI1NjRlZDYzYWE0YzNlYzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-07T19:03:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-07T19:05:05Z"}, "message": "Separete API from IMPL\n\nLooks like there's a rule of thumb: don't call API functions from an\nimplementation! In this case, following this rule of thumb saves us an\nArc-bump!", "tree": {"sha": "68f9a6821dbdcac491319dd31bcdeb1f0124a529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f9a6821dbdcac491319dd31bcdeb1f0124a529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcfda94664b454f60be2dbc1b564ed63aa4c3ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcfda94664b454f60be2dbc1b564ed63aa4c3ec5", "html_url": "https://github.com/rust-lang/rust/commit/fcfda94664b454f60be2dbc1b564ed63aa4c3ec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcfda94664b454f60be2dbc1b564ed63aa4c3ec5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba7b3c2108c13c20d3e279ff5f0bb4cc9522e08a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7b3c2108c13c20d3e279ff5f0bb4cc9522e08a", "html_url": "https://github.com/rust-lang/rust/commit/ba7b3c2108c13c20d3e279ff5f0bb4cc9522e08a"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "ff4fc709b55ecf6afffa0d0eaaa3e398dda08946", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fcfda94664b454f60be2dbc1b564ed63aa4c3ec5/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfda94664b454f60be2dbc1b564ed63aa4c3ec5/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=fcfda94664b454f60be2dbc1b564ed63aa4c3ec5", "patch": "@@ -167,20 +167,20 @@ impl Analysis {\n         libeditor::matching_brace(file, offset)\n     }\n     pub fn syntax_tree(&self, file_id: FileId) -> String {\n-        let file = self.file_syntax(file_id);\n-        libeditor::syntax_tree(&file)\n+        let file = self.imp.file_syntax(file_id);\n+        libeditor::syntax_tree(file)\n     }\n     pub fn join_lines(&self, file_id: FileId, range: TextRange) -> SourceChange {\n-        let file = self.file_syntax(file_id);\n-        SourceChange::from_local_edit(file_id, \"join lines\", libeditor::join_lines(&file, range))\n+        let file = self.imp.file_syntax(file_id);\n+        SourceChange::from_local_edit(file_id, \"join lines\", libeditor::join_lines(file, range))\n     }\n     pub fn on_eq_typed(&self, file_id: FileId, offset: TextUnit) -> Option<SourceChange> {\n-        let file = self.file_syntax(file_id);\n-        Some(SourceChange::from_local_edit(file_id, \"add semicolon\", libeditor::on_eq_typed(&file, offset)?))\n+        let file = self.imp.file_syntax(file_id);\n+        Some(SourceChange::from_local_edit(file_id, \"add semicolon\", libeditor::on_eq_typed(file, offset)?))\n     }\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n-        let file = self.file_syntax(file_id);\n-        libeditor::file_structure(&file)\n+        let file = self.imp.file_syntax(file_id);\n+        libeditor::file_structure(file)\n     }\n     pub fn symbol_search(&self, query: Query, token: &JobToken) -> Vec<(FileId, FileSymbol)> {\n         self.imp.world_symbols(query, token)\n@@ -198,16 +198,16 @@ impl Analysis {\n         self.imp.crate_root(crate_id)\n     }\n     pub fn runnables(&self, file_id: FileId) -> Vec<Runnable> {\n-        let file = self.file_syntax(file_id);\n-        libeditor::runnables(&file)\n+        let file = self.imp.file_syntax(file_id);\n+        libeditor::runnables(file)\n     }\n     pub fn highlight(&self, file_id: FileId) -> Vec<HighlightedRange> {\n-        let file = self.file_syntax(file_id);\n-        libeditor::highlight(&file)\n+        let file = self.imp.file_syntax(file_id);\n+        libeditor::highlight(file)\n     }\n     pub fn completions(&self, file_id: FileId, offset: TextUnit) -> Option<Vec<CompletionItem>> {\n-        let file = self.file_syntax(file_id);\n-        libeditor::scope_completion(&file, offset)\n+        let file = self.imp.file_syntax(file_id);\n+        libeditor::scope_completion(file, offset)\n     }\n     pub fn assists(&self, file_id: FileId, range: TextRange) -> Vec<SourceChange> {\n         self.imp.assists(file_id, range)"}]}