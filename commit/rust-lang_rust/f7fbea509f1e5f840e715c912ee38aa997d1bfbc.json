{"sha": "f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZmJlYTUwOWYxZTVmODQwZTcxNWM5MTJlZTM4YWE5OTdkMWJmYmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-17T08:12:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T08:12:34Z"}, "message": "Merge #8063\n\n8063: couple clippy::complexity fixes r=matklad a=matthiaskrgr\n\navoid redundant `.into()` calls to convert T into identical T (`let x: String = String::from(\"hello\").into();`)\r\nuse `if let Some(x)` instead of `.is_some()` + `.unwrap()`\r\ndon't clone Copy types\r\nremove redundant wrapped ?s:  `Some(Some(3)?)` can just be `Some(3)`\r\nuse `.map(|x| y)` instead of `and_then(|x| Some(y)` on `Option`s\n\nCo-authored-by: Matthias Kr\u00fcger <matthias.krueger@famsik.de>", "tree": {"sha": "2b4932678fc83624c278ca93cdf0f1d3a28346c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b4932678fc83624c278ca93cdf0f1d3a28346c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUbnyCRBK7hj4Ov3rIwAAdHIIAGKXXvn7vocBBRwh3mK8C/B2\nAdiwmctRNF50IdjckrcIPJBHq7vm1jJvhjG0ih7DAramKI8kry25fwO1o1utyLZK\nJvuYSIaSM9HsXD39f7UWWdC39b4BgiJO6swfcpQjMV0r4HA0FMDuj4QgNpCHvXGe\n/5MGbyadmnOYOuYjAgV4Fp8WC1df/9pYqYUgv3mtbfmMTUfkiL/LU/b3HbmfTCDa\nPkTQwDvMLZUTvvaHQmvq83U2I+ptfLSrFw/Kr7HanGiAHQqdrW7XMyXdrFcSSBp+\nAdFzV/b4QnKTkHo4/0dcbsBb/RreMK9r7ccWdXDhaaFU0u4uNRdwbtWaK3abWMw=\n=3LJA\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b4932678fc83624c278ca93cdf0f1d3a28346c2\nparent 6fcb5d772f16af0d1f62dad55fbde75072fb9e89\nparent ff5f90d8ae2da8e4856d5c78f55e5cd02b178325\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615968754 +0000\ncommitter GitHub <noreply@github.com> 1615968754 +0000\n\nMerge #8063\n\n8063: couple clippy::complexity fixes r=matklad a=matthiaskrgr\n\navoid redundant `.into()` calls to convert T into identical T (`let x: String = String::from(\"hello\").into();`)\r\nuse `if let Some(x)` instead of `.is_some()` + `.unwrap()`\r\ndon't clone Copy types\r\nremove redundant wrapped ?s:  `Some(Some(3)?)` can just be `Some(3)`\r\nuse `.map(|x| y)` instead of `and_then(|x| Some(y)` on `Option`s\n\nCo-authored-by: Matthias Kr\u00fcger <matthias.krueger@famsik.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "html_url": "https://github.com/rust-lang/rust/commit/f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "html_url": "https://github.com/rust-lang/rust/commit/6fcb5d772f16af0d1f62dad55fbde75072fb9e89"}, {"sha": "ff5f90d8ae2da8e4856d5c78f55e5cd02b178325", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325", "html_url": "https://github.com/rust-lang/rust/commit/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325"}], "stats": {"total": 219, "additions": 97, "deletions": 122}, "files": [{"sha": "8d4641355723a65d036532745d2cb207d6a010c1", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -197,7 +197,7 @@ impl ChangeFixture {\n \n             change.change_file(file_id, Some(Arc::new(text)));\n             let path = VfsPath::new_virtual_path(meta.path);\n-            file_set.insert(file_id, path.into());\n+            file_set.insert(file_id, path);\n             files.push(file_id);\n             file_id.0 += 1;\n         }"}, {"sha": "b9c6959214f8562c9d41ce02f0944e4348d83690", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -124,5 +124,5 @@ fn resolve_doc_path(\n         Some(Namespace::Macros) => return None,\n         None => resolved.iter_items().find_map(|it| it.as_module_def_id())?,\n     };\n-    Some(def.into())\n+    Some(def)\n }"}, {"sha": "861b7329ef32a7a4384e7a63a5158815e6feced8", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -1335,7 +1335,7 @@ impl Local {\n \n     // FIXME: why is this an option? It shouldn't be?\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n-        let body = db.body(self.parent.into());\n+        let body = db.body(self.parent);\n         match &body[self.pat_id] {\n             Pat::Bind { name, .. } => Some(name.clone()),\n             _ => None,\n@@ -1347,7 +1347,7 @@ impl Local {\n     }\n \n     pub fn is_mut(self, db: &dyn HirDatabase) -> bool {\n-        let body = db.body(self.parent.into());\n+        let body = db.body(self.parent);\n         matches!(&body[self.pat_id], Pat::Bind { mode: BindingAnnotation::Mutable, .. })\n     }\n \n@@ -1360,15 +1360,15 @@ impl Local {\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n-        let def = DefWithBodyId::from(self.parent);\n+        let def = self.parent;\n         let infer = db.infer(def);\n         let ty = infer[self.pat_id].clone();\n         let krate = def.module(db.upcast()).krate();\n         Type::new(db, krate, def, ty)\n     }\n \n     pub fn source(self, db: &dyn HirDatabase) -> InFile<Either<ast::IdentPat, ast::SelfParam>> {\n-        let (_body, source_map) = db.body_with_source_map(self.parent.into());\n+        let (_body, source_map) = db.body_with_source_map(self.parent);\n         let src = source_map.pat_syntax(self.pat_id).unwrap(); // Hmm...\n         let root = src.file_syntax(db.upcast());\n         src.map(|ast| {\n@@ -1393,12 +1393,12 @@ impl Label {\n     }\n \n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n-        let body = db.body(self.parent.into());\n+        let body = db.body(self.parent);\n         body[self.label_id].name.clone()\n     }\n \n     pub fn source(self, db: &dyn HirDatabase) -> InFile<ast::Label> {\n-        let (_body, source_map) = db.body_with_source_map(self.parent.into());\n+        let (_body, source_map) = db.body_with_source_map(self.parent);\n         let src = source_map.label_syntax(self.label_id);\n         let root = src.file_syntax(db.upcast());\n         src.map(|ast| ast.to_node(&root))"}, {"sha": "00b076175ee061fa78a3eda8c1553a63b874e984", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -835,7 +835,7 @@ impl<'a> SemanticsScope<'a> {\n                 resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n                 resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(id.into()),\n                 resolver::ScopeDef::Local(pat_id) => {\n-                    let parent = resolver.body_owner().unwrap().into();\n+                    let parent = resolver.body_owner().unwrap();\n                     ScopeDef::Local(Local { parent, pat_id })\n                 }\n             };"}, {"sha": "37d162b328a04b392d319884c5d7db5a522b1d0a", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -484,7 +484,7 @@ fn resolve_hir_path_(\n         resolver.resolve_path_in_value_ns_fully(db.upcast(), path.mod_path()).and_then(|val| {\n             let res = match val {\n                 ValueNs::LocalBinding(pat_id) => {\n-                    let var = Local { parent: body_owner?.into(), pat_id };\n+                    let var = Local { parent: body_owner?, pat_id };\n                     PathResolution::Local(var)\n                 }\n                 ValueNs::FunctionId(it) => PathResolution::Def(Function::from(it).into()),"}, {"sha": "b0b4b505214240c1d9ea7fed9f8f550d86e96bdc", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -325,7 +325,7 @@ impl Attrs {\n         if docs.is_empty() {\n             None\n         } else {\n-            Some(Documentation(docs.into()))\n+            Some(Documentation(docs))\n         }\n     }\n }"}, {"sha": "87cad326d1cbed20373c2fc30b12ae85ef797a45", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -23,7 +23,7 @@ pub struct Hygiene {\n \n impl Hygiene {\n     pub fn new(db: &dyn AstDatabase, file_id: HirFileId) -> Hygiene {\n-        Hygiene { frames: Some(HygieneFrames::new(db, file_id.clone())) }\n+        Hygiene { frames: Some(HygieneFrames::new(db, file_id)) }\n     }\n \n     pub fn new_unhygienic() -> Hygiene {\n@@ -129,10 +129,7 @@ impl HygieneInfo {\n             mbe::Origin::Call => (&self.macro_arg.1, self.arg_start),\n             mbe::Origin::Def => (\n                 &self.macro_def.1,\n-                self.def_start\n-                    .as_ref()\n-                    .expect(\"`Origin::Def` used with non-`macro_rules!` macro\")\n-                    .clone(),\n+                *self.def_start.as_ref().expect(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n             ),\n         };\n "}, {"sha": "7532d00b833a853853ffa0034a728c4c699eafcc", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -475,7 +475,7 @@ fn original_range_opt(\n     let single = skip_trivia_token(node.value.first_token()?, Direction::Next)?\n         == skip_trivia_token(node.value.last_token()?, Direction::Prev)?;\n \n-    Some(node.value.descendants().find_map(|it| {\n+    node.value.descendants().find_map(|it| {\n         let first = skip_trivia_token(it.first_token()?, Direction::Next)?;\n         let first = ascend_call_token(db, &expansion, node.with_value(first))?;\n \n@@ -487,7 +487,7 @@ fn original_range_opt(\n         }\n \n         Some(first.with_value(first.value.text_range().cover(last.value.text_range())))\n-    })?)\n+    })\n }\n \n fn ascend_call_token("}, {"sha": "bfe239793c6598a97f0b847c266c450051e65125", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: fn_src.file_id,\n                 ident_type: IdentType::Function,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: replacement.expected_case,\n                 ident_text: replacement.current_name.to_string(),\n                 suggested_text: replacement.suggested_text,\n@@ -261,7 +261,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: fn_src.file_id,\n                 ident_type: IdentType::Argument,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: param_to_rename.expected_case,\n                 ident_text: param_to_rename.current_name.to_string(),\n                 suggested_text: param_to_rename.suggested_text,\n@@ -313,7 +313,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n                         let diagnostic = IncorrectCase {\n                             file: source_ptr.file_id,\n                             ident_type: IdentType::Variable,\n-                            ident: AstPtr::new(&name_ast).into(),\n+                            ident: AstPtr::new(&name_ast),\n                             expected_case: replacement.expected_case,\n                             ident_text: replacement.current_name.to_string(),\n                             suggested_text: replacement.suggested_text,\n@@ -403,7 +403,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: struct_src.file_id,\n                 ident_type: IdentType::Structure,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: replacement.expected_case,\n                 ident_text: replacement.current_name.to_string(),\n                 suggested_text: replacement.suggested_text,\n@@ -448,7 +448,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: struct_src.file_id,\n                 ident_type: IdentType::Field,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: field_to_rename.expected_case,\n                 ident_text: field_to_rename.current_name.to_string(),\n                 suggested_text: field_to_rename.suggested_text,\n@@ -527,7 +527,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: enum_src.file_id,\n                 ident_type: IdentType::Enum,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: replacement.expected_case,\n                 ident_text: replacement.current_name.to_string(),\n                 suggested_text: replacement.suggested_text,\n@@ -572,7 +572,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: enum_src.file_id,\n                 ident_type: IdentType::Variant,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: variant_to_rename.expected_case,\n                 ident_text: variant_to_rename.current_name.to_string(),\n                 suggested_text: variant_to_rename.suggested_text,\n@@ -617,7 +617,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let diagnostic = IncorrectCase {\n             file: const_src.file_id,\n             ident_type: IdentType::Constant,\n-            ident: AstPtr::new(&ast_ptr).into(),\n+            ident: AstPtr::new(&ast_ptr),\n             expected_case: replacement.expected_case,\n             ident_text: replacement.current_name.to_string(),\n             suggested_text: replacement.suggested_text,\n@@ -665,7 +665,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let diagnostic = IncorrectCase {\n             file: static_src.file_id,\n             ident_type: IdentType::StaticVariable,\n-            ident: AstPtr::new(&ast_ptr).into(),\n+            ident: AstPtr::new(&ast_ptr),\n             expected_case: replacement.expected_case,\n             ident_text: replacement.current_name.to_string(),\n             suggested_text: replacement.suggested_text,"}, {"sha": "71b2cade0881b71c4c81251ef5cb220c7afdb1ce", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n     pub(super) fn validate_body(&mut self, db: &dyn HirDatabase) {\n         self.check_for_filter_map_next(db);\n \n-        let body = db.body(self.owner.into());\n+        let body = db.body(self.owner);\n \n         for (id, expr) in body.exprs.iter() {\n             if let Some((variant_def, missed_fields, true)) =\n@@ -98,7 +98,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         missed_fields: Vec<LocalFieldId>,\n     ) {\n         // XXX: only look at source_map if we do have missing fields\n-        let (_, source_map) = db.body_with_source_map(self.owner.into());\n+        let (_, source_map) = db.body_with_source_map(self.owner);\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n             let root = source_ptr.file_syntax(db.upcast());\n@@ -128,7 +128,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         missed_fields: Vec<LocalFieldId>,\n     ) {\n         // XXX: only look at source_map if we do have missing fields\n-        let (_, source_map) = db.body_with_source_map(self.owner.into());\n+        let (_, source_map) = db.body_with_source_map(self.owner);\n \n         if let Ok(source_ptr) = source_map.pat_syntax(id) {\n             if let Some(expr) = source_ptr.value.as_ref().left() {\n@@ -175,7 +175,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n \n         // Search function body for instances of .filter_map(..).next()\n-        let body = db.body(self.owner.into());\n+        let body = db.body(self.owner);\n         let mut prev = None;\n         for (id, expr) in body.exprs.iter() {\n             if let Expr::MethodCall { receiver, .. } = expr {\n@@ -192,7 +192,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 if function_id == *next_function_id {\n                     if let Some(filter_map_id) = prev {\n                         if *receiver == filter_map_id {\n-                            let (_, source_map) = db.body_with_source_map(self.owner.into());\n+                            let (_, source_map) = db.body_with_source_map(self.owner);\n                             if let Ok(next_source_ptr) = source_map.expr_syntax(id) {\n                                 self.sink.push(ReplaceFilterMapNextWithFindMap {\n                                     file: next_source_ptr.file_id,\n@@ -262,7 +262,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let mut arg_count = args.len();\n \n         if arg_count != param_count {\n-            let (_, source_map) = db.body_with_source_map(self.owner.into());\n+            let (_, source_map) = db.body_with_source_map(self.owner);\n             if let Ok(source_ptr) = source_map.expr_syntax(call_id) {\n                 if is_method_call {\n                     param_count -= 1;\n@@ -287,7 +287,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         infer: Arc<InferenceResult>,\n     ) {\n         let (body, source_map): (Arc<Body>, Arc<BodySourceMap>) =\n-            db.body_with_source_map(self.owner.into());\n+            db.body_with_source_map(self.owner);\n \n         let match_expr_ty = if infer.type_of_expr[match_expr].is_unknown() {\n             return;\n@@ -393,7 +393,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n \n         if params.len() > 0 && params[0] == mismatch.actual {\n-            let (_, source_map) = db.body_with_source_map(self.owner.into());\n+            let (_, source_map) = db.body_with_source_map(self.owner);\n \n             if let Ok(source_ptr) = source_map.expr_syntax(id) {\n                 self.sink.push(MissingOkOrSomeInTailExpr {\n@@ -425,7 +425,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             return;\n         }\n \n-        let (_, source_map) = db.body_with_source_map(self.owner.into());\n+        let (_, source_map) = db.body_with_source_map(self.owner);\n \n         if let Ok(source_ptr) = source_map.expr_syntax(possible_tail_id) {\n             self.sink"}, {"sha": "1f49a49096eda96aa3821507e8767e85da4dab94", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'b> UnsafeValidator<'a, 'b> {\n     }\n \n     pub(super) fn validate_body(&mut self, db: &dyn HirDatabase) {\n-        let def = self.owner.into();\n+        let def = self.owner;\n         let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n         let is_unsafe = match self.owner {\n             DefWithBodyId::FunctionId(it) => db.function_data(it).qualifier.is_unsafe,"}, {"sha": "d969527dc90c2c08d04edb0aa63cac5d4876f89f", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -52,7 +52,7 @@ impl ToChalk for Ty {\n \n             TyKind::Tuple(cardinality, substs) => {\n                 let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::Tuple(cardinality.into(), substitution).intern(&Interner)\n+                chalk_ir::TyKind::Tuple(cardinality, substitution).intern(&Interner)\n             }\n             TyKind::Raw(mutability, ty) => {\n                 let ty = ty.to_chalk(db);"}, {"sha": "2f840909c1c53dfe87960e2ae39500ef0067d7a5", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -180,7 +180,7 @@ fn missing_record_expr_field_fix(\n     let def_id = sema.resolve_variant(record_lit)?;\n     let module;\n     let def_file_id;\n-    let record_fields = match VariantDef::from(def_id) {\n+    let record_fields = match def_id {\n         VariantDef::Struct(s) => {\n             module = s.module(sema.db);\n             let source = s.source(sema.db)?;"}, {"sha": "5ea9fc4fb3741d9268b9bfe1c17788a5166ea306", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn remove_links(markdown: &str) -> String {\n \n     let mut cb = |_: BrokenLink| {\n         let empty = InlineStr::try_from(\"\").unwrap();\n-        Some((CowStr::Inlined(empty.clone()), CowStr::Inlined(empty)))\n+        Some((CowStr::Inlined(empty), CowStr::Inlined(empty)))\n     };\n     let doc = Parser::new_with_broken_link_callback(markdown, opts, Some(&mut cb));\n     let doc = doc.filter_map(move |evt| match evt {\n@@ -147,7 +147,7 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n         _ => return None,\n     };\n \n-    let ns = ItemInNs::from(target_def.clone());\n+    let ns = ItemInNs::from(target_def);\n \n     let module = definition.module(db)?;\n     let krate = module.krate();"}, {"sha": "b71f4917c0c5978f75c02c01be1f0abc41a3611b", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -102,7 +102,7 @@ fn extract_positioned_link_from_comment(\n             None => comment_range.end(),\n         }\n     })?;\n-    Some((def_link.to_string(), ns.clone()))\n+    Some((def_link.to_string(), *ns))\n }\n \n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {"}, {"sha": "4f825523c429adb26aa0cc071c4c4784714d98ea", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -56,7 +56,7 @@ pub(super) fn ra_fixture(\n         for range in inj.map_range_up(hl_range.range) {\n             if let Some(range) = literal.map_range_up(range) {\n                 hl_range.range = range;\n-                hl.add(hl_range.clone());\n+                hl.add(hl_range);\n             }\n         }\n     }"}, {"sha": "83aa11d52c733622ea7df82055ba2d54610b4dca", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -73,8 +73,8 @@ fn find_parent_and_path(\n ) -> Option<(Either<ast::UseTree, ast::UseTreeList>, ast::Path)> {\n     return star.ancestors().find_map(|n| {\n         find_use_tree_list(n.clone())\n-            .and_then(|(u, p)| Some((Either::Right(u), p)))\n-            .or_else(|| find_use_tree(n).and_then(|(u, p)| Some((Either::Left(u), p))))\n+            .map(|(u, p)| (Either::Right(u), p))\n+            .or_else(|| find_use_tree(n).map(|(u, p)| (Either::Left(u), p)))\n     });\n \n     fn find_use_tree_list(n: SyntaxNode) -> Option<(ast::UseTreeList, ast::Path)> {"}, {"sha": "596c536a763f21bfba77b475060e5c677675f397", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -145,11 +145,8 @@ fn insert_import(\n     variant_hir_name: &Name,\n ) -> Option<()> {\n     let db = ctx.db();\n-    let mod_path = module.find_use_path_prefixed(\n-        db,\n-        enum_module_def.clone(),\n-        ctx.config.insert_use.prefix_kind,\n-    );\n+    let mod_path =\n+        module.find_use_path_prefixed(db, *enum_module_def, ctx.config.insert_use.prefix_kind);\n     if let Some(mut mod_path) = mod_path {\n         mod_path.pop_segment();\n         mod_path.push_segment(variant_hir_name.clone());"}, {"sha": "09882c4f310edef56ab2bde5fddf615d68944351", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -56,7 +56,7 @@ impl Builder {\n \n impl Completions {\n     pub(crate) fn add(&mut self, item: CompletionItem) {\n-        self.buf.push(item.into())\n+        self.buf.push(item)\n     }\n \n     pub(crate) fn add_all<I>(&mut self, items: I)"}, {"sha": "476eecff0e18edc3bed5c37d240a86f0356cfafe", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -26,11 +26,11 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n         let add_resolution = match &res {\n             hir::ScopeDef::ModuleDef(def) => match def {\n                 hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {\n-                    acc.add_struct_pat(ctx, strukt.clone(), Some(name.clone()));\n+                    acc.add_struct_pat(ctx, *strukt, Some(name.clone()));\n                     true\n                 }\n                 hir::ModuleDef::Variant(variant) if !ctx.is_irrefutable_pat_binding => {\n-                    acc.add_variant_pat(ctx, variant.clone(), Some(name.clone()));\n+                    acc.add_variant_pat(ctx, *variant, Some(name.clone()));\n                     true\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Enum(..))"}, {"sha": "3f1c6730b4642f940bb00997babfb2ebebbe4217", "filename": "crates/ide_completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -89,7 +89,7 @@ enum State {\n impl FormatStrParser {\n     pub(crate) fn new(input: String) -> Self {\n         Self {\n-            input: input.into(),\n+            input: input,\n             output: String::new(),\n             extracted_expressions: Vec::new(),\n             state: State::NotExpr,"}, {"sha": "12921e12b794c719620cdbbd1ac562195d7805c4", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -81,7 +81,7 @@ impl<'a> RenderContext<'a> {\n     }\n \n     fn snippet_cap(&self) -> Option<SnippetCap> {\n-        self.completion.config.snippet_cap.clone()\n+        self.completion.config.snippet_cap\n     }\n \n     fn db(&self) -> &'a RootDatabase {"}, {"sha": "75167ff3942b6b444b4431d1eda35848a8c8a3d7", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -181,7 +181,7 @@ impl NameClass {\n                 },\n                 ast::SelfParam(it) => {\n                     let def = sema.to_def(&it)?;\n-                    Some(NameClass::Definition(Definition::Local(def.into())))\n+                    Some(NameClass::Definition(Definition::Local(def)))\n                 },\n                 ast::RecordField(it) => {\n                     let field: hir::Field = sema.to_def(&it)?;"}, {"sha": "9e0cb91c3fc2f98e385e20ca47b3ee36989dbd03", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -80,7 +80,7 @@ impl ImportScope {\n             })\n             .last()\n             .map(|last_inner_element| {\n-                (InsertPosition::After(last_inner_element.into()), AddBlankLine::BeforeTwice)\n+                (InsertPosition::After(last_inner_element), AddBlankLine::BeforeTwice)\n             })\n             .unwrap_or_else(|| self.first_insert_pos())\n     }"}, {"sha": "324817cd0d8f25ecaff355db8941a562c97b983b", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -161,15 +161,9 @@ impl Definition {\n \n         if let Definition::Local(var) = self {\n             let range = match var.parent(db) {\n-                DefWithBody::Function(f) => {\n-                    f.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                }\n-                DefWithBody::Const(c) => {\n-                    c.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                }\n-                DefWithBody::Static(s) => {\n-                    s.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                }\n+                DefWithBody::Function(f) => f.source(db).map(|src| src.value.syntax().text_range()),\n+                DefWithBody::Const(c) => c.source(db).map(|src| src.value.syntax().text_range()),\n+                DefWithBody::Static(s) => s.source(db).map(|src| src.value.syntax().text_range()),\n             };\n             let mut res = FxHashMap::default();\n             res.insert(file_id, range);\n@@ -179,33 +173,29 @@ impl Definition {\n         if let Definition::GenericParam(hir::GenericParam::LifetimeParam(param)) = self {\n             let range = match param.parent(db) {\n                 hir::GenericDef::Function(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::Adt(it) => match it {\n                     hir::Adt::Struct(it) => {\n-                        it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                    }\n-                    hir::Adt::Union(it) => {\n-                        it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                    }\n-                    hir::Adt::Enum(it) => {\n-                        it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                        it.source(db).map(|src| src.value.syntax().text_range())\n                     }\n+                    hir::Adt::Union(it) => it.source(db).map(|src| src.value.syntax().text_range()),\n+                    hir::Adt::Enum(it) => it.source(db).map(|src| src.value.syntax().text_range()),\n                 },\n                 hir::GenericDef::Trait(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::TypeAlias(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::Impl(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::Variant(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::Const(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n             };\n             let mut res = FxHashMap::default();"}, {"sha": "47434f4af84b6e7ee8f62d8e0a726f0b677bb32c", "filename": "crates/ide_ssr/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Flib.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -139,11 +139,8 @@ impl<'db> MatchFinder<'db> {\n     pub fn at_first_file(db: &'db ide_db::RootDatabase) -> Result<MatchFinder<'db>, SsrError> {\n         use ide_db::base_db::SourceDatabaseExt;\n         use ide_db::symbol_index::SymbolsDatabase;\n-        if let Some(first_file_id) = db\n-            .local_roots()\n-            .iter()\n-            .next()\n-            .and_then(|root| db.source_root(root.clone()).iter().next())\n+        if let Some(first_file_id) =\n+            db.local_roots().iter().next().and_then(|root| db.source_root(*root).iter().next())\n         {\n             Ok(MatchFinder::in_context(\n                 db,"}, {"sha": "b3072fb9f43ecfecaee45fd7d5fecd30c134d403", "filename": "crates/ide_ssr/src/matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fmatching.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -127,7 +127,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         restrict_range: &Option<FileRange>,\n         sema: &'sema Semantics<'db, ide_db::RootDatabase>,\n     ) -> Result<Match, MatchFailed> {\n-        let match_state = Matcher { sema, restrict_range: restrict_range.clone(), rule };\n+        let match_state = Matcher { sema, restrict_range: *restrict_range, rule };\n         // First pass at matching, where we check that node types and idents match.\n         match_state.attempt_match_node(&mut Phase::First, &rule.pattern.node, code)?;\n         match_state.validate_range(&sema.original_range(code))?;"}, {"sha": "ba814a2e1adac951447307e4b3b7a693c8ebe81c", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -120,7 +120,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, MacroRules>) -> Vec<(String, tt\n                 Some(\"pat\") => parent.token_trees.push(make_ident(\"foo\")),\n                 Some(\"path\") => parent.token_trees.push(make_ident(\"foo\")),\n                 Some(\"literal\") => parent.token_trees.push(make_literal(\"1\")),\n-                Some(\"expr\") => parent.token_trees.push(make_ident(\"foo\").into()),\n+                Some(\"expr\") => parent.token_trees.push(make_ident(\"foo\")),\n                 Some(\"lifetime\") => {\n                     parent.token_trees.push(make_punct('\\''));\n                     parent.token_trees.push(make_ident(\"a\"));\n@@ -157,17 +157,15 @@ fn invocation_fixtures(rules: &FxHashMap<String, MacroRules>) -> Vec<(String, tt\n                     if i + 1 != cnt {\n                         if let Some(sep) = separator {\n                             match sep {\n-                                Separator::Literal(it) => parent\n-                                    .token_trees\n-                                    .push(tt::Leaf::Literal(it.clone().into()).into()),\n-                                Separator::Ident(it) => parent\n-                                    .token_trees\n-                                    .push(tt::Leaf::Ident(it.clone().into()).into()),\n+                                Separator::Literal(it) => {\n+                                    parent.token_trees.push(tt::Leaf::Literal(it.clone()).into())\n+                                }\n+                                Separator::Ident(it) => {\n+                                    parent.token_trees.push(tt::Leaf::Ident(it.clone()).into())\n+                                }\n                                 Separator::Puncts(puncts) => {\n                                     for it in puncts {\n-                                        parent\n-                                            .token_trees\n-                                            .push(tt::Leaf::Punct(it.clone().into()).into())\n+                                        parent.token_trees.push(tt::Leaf::Punct(*it).into())\n                                     }\n                                 }\n                             };\n@@ -176,8 +174,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, MacroRules>) -> Vec<(String, tt\n                 }\n             }\n             Op::Subtree { tokens, delimiter } => {\n-                let mut subtree =\n-                    tt::Subtree { delimiter: delimiter.clone(), token_trees: Vec::new() };\n+                let mut subtree = tt::Subtree { delimiter: *delimiter, token_trees: Vec::new() };\n                 tokens.iter().for_each(|it| {\n                     collect_from_op(it, &mut subtree, seed);\n                 });"}, {"sha": "b6782b4ba8c7c537e33a92c438eff65c92f5de9f", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -540,7 +540,7 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n     let mut src = TtIter::new(src);\n     let mut stack: SmallVec<[TtIter; 1]> = SmallVec::new();\n     let mut res = Match::default();\n-    let mut error_reover_item = None;\n+    let mut error_recover_item = None;\n \n     let mut bindings_builder = BindingsBuilder::default();\n \n@@ -579,9 +579,9 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n         stdx::always!(cur_items.is_empty());\n \n         if error_items.len() > 0 {\n-            error_reover_item = error_items.pop().map(|it| it.bindings);\n+            error_recover_item = error_items.pop().map(|it| it.bindings);\n         } else if eof_items.len() > 0 {\n-            error_reover_item = Some(eof_items[0].bindings.clone());\n+            error_recover_item = Some(eof_items[0].bindings.clone());\n         }\n \n         // We need to do some post processing after the `match_loop_inner`.\n@@ -594,8 +594,8 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n                 res.bindings = bindings_builder.build(&eof_items[0].bindings);\n             } else {\n                 // Error recovery\n-                if error_reover_item.is_some() {\n-                    res.bindings = bindings_builder.build(&error_reover_item.unwrap());\n+                if let Some(item) = error_recover_item {\n+                    res.bindings = bindings_builder.build(&item);\n                 }\n                 res.add_err(ExpandError::UnexpectedToken);\n             }\n@@ -618,7 +618,7 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n             }\n             res.add_err(err!(\"leftover tokens\"));\n \n-            if let Some(error_reover_item) = error_reover_item {\n+            if let Some(error_reover_item) = error_recover_item {\n                 res.bindings = bindings_builder.build(&error_reover_item);\n             }\n             return res;\n@@ -722,7 +722,7 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                     input\n                         .expect_literal()\n                         .map(|literal| {\n-                            let lit = tt::Leaf::from(literal.clone());\n+                            let lit = literal.clone();\n                             match neg {\n                                 None => Some(lit.into()),\n                                 Some(neg) => Some(tt::TokenTree::Subtree(tt::Subtree {"}, {"sha": "7b5b8ec16495f77aaa7d8905ef882a8b46160b99", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -262,7 +262,7 @@ fn parse_repeat(src: &mut TtIter) -> Result<(Option<Separator>, RepeatKind), Par\n                                 if puncts.len() == 3 {\n                                     return Err(ParseError::InvalidRepeat);\n                                 }\n-                                puncts.push(punct.clone())\n+                                puncts.push(*punct)\n                             }\n                             _ => return Err(ParseError::InvalidRepeat),\n                         }"}, {"sha": "85163c4b32b0df10b3916f8ee12029382cffeeca", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -130,7 +130,7 @@ pub fn parse_exprs_with_sep(tt: &tt::Subtree, sep: char) -> Vec<tt::Subtree> {\n         res.push(match expanded.value {\n             None => break,\n             Some(tt @ tt::TokenTree::Leaf(_)) => {\n-                tt::Subtree { delimiter: None, token_trees: vec![tt.into()] }\n+                tt::Subtree { delimiter: None, token_trees: vec![tt] }\n             }\n             Some(tt::TokenTree::Subtree(tt)) => tt,\n         });\n@@ -727,7 +727,7 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n             // Note: We always assume the semi-colon would be the last token in\n             // other parts of RA such that we don't add whitespace here.\n             if curr.spacing == tt::Spacing::Alone && curr.char != ';' {\n-                self.inner.token(WHITESPACE, \" \".into());\n+                self.inner.token(WHITESPACE, \" \");\n                 self.text_pos += TextSize::of(' ');\n             }\n         }"}, {"sha": "25c374b9b262e78d880fee751a858c354b9d1cfc", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -35,7 +35,7 @@ mod rule_parsing {\n     fn test_invalid_arms() {\n         fn check(macro_body: &str, err: ParseError) {\n             let m = parse_macro_arm(macro_body);\n-            assert_eq!(m, Err(err.into()));\n+            assert_eq!(m, Err(err));\n         }\n         check(\"invalid\", ParseError::Expected(\"expected subtree\".into()));\n "}, {"sha": "30bb1b687b1c31025b8bf852b184ebd49ae513d6", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -154,5 +154,5 @@ fn send_request(\n     req: Request,\n ) -> io::Result<Option<Response>> {\n     req.write(&mut writer)?;\n-    Ok(Response::read(&mut reader)?)\n+    Response::read(&mut reader)\n }"}, {"sha": "9a68e2cc5139588a68f0b88b4b33ae579853e742", "filename": "crates/proc_macro_api/src/rpc.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -236,13 +236,10 @@ mod tests {\n         subtree\n             .token_trees\n             .push(TokenTree::Leaf(Ident { text: \"Foo\".into(), id: TokenId(1) }.into()));\n-        subtree.token_trees.push(TokenTree::Subtree(\n-            Subtree {\n-                delimiter: Some(Delimiter { id: TokenId(2), kind: DelimiterKind::Brace }),\n-                token_trees: vec![],\n-            }\n-            .into(),\n-        ));\n+        subtree.token_trees.push(TokenTree::Subtree(Subtree {\n+            delimiter: Some(Delimiter { id: TokenId(2), kind: DelimiterKind::Brace }),\n+            token_trees: vec![],\n+        }));\n         subtree\n     }\n "}, {"sha": "76994de71d1a314c70b23737909b43292fa4ed99", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -161,7 +161,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         return Vec::new();\n     }\n \n-    let severity = diagnostic_severity(config, rd.level.clone(), rd.code.clone());\n+    let severity = diagnostic_severity(config, rd.level, rd.code.clone());\n \n     let mut source = String::from(\"rustc\");\n     let mut code = rd.code.as_ref().map(|c| c.code.clone());"}, {"sha": "b6f484e5157f74c976a812963beb025c3c06ef61", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -1134,7 +1134,7 @@ pub(crate) fn handle_code_lens_resolve(\n ) -> Result<CodeLens> {\n     let annotation = from_proto::annotation(&snap, code_lens)?;\n \n-    Ok(to_proto::code_lens(&snap, snap.analysis.resolve_annotation(annotation)?)?)\n+    to_proto::code_lens(&snap, snap.analysis.resolve_annotation(annotation)?)\n }\n \n pub(crate) fn handle_document_highlight("}, {"sha": "2ac487632f792aa9598b677851117387c14d7448", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -36,7 +36,7 @@ impl Progress {\n \n impl GlobalState {\n     pub(crate) fn show_message(&mut self, typ: lsp_types::MessageType, message: String) {\n-        let message = message.into();\n+        let message = message;\n         self.send_notification::<lsp_types::notification::ShowMessage>(\n             lsp_types::ShowMessageParams { typ, message },\n         )"}, {"sha": "c63fe2915e360705ced3c15d535fee36ca71ab99", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -287,7 +287,7 @@ pub(crate) fn signature_help(\n             let params = call_info\n                 .parameter_ranges()\n                 .iter()\n-                .map(|it| [u32::from(it.start()).into(), u32::from(it.end()).into()])\n+                .map(|it| [u32::from(it.start()), u32::from(it.end())])\n                 .map(|label_offsets| lsp_types::ParameterInformation {\n                     label: lsp_types::ParameterLabel::LabelOffsets(label_offsets),\n                     documentation: None,"}, {"sha": "64fac13a73f83d2afeeda7cd4a737312db4e2219", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -479,7 +479,7 @@ impl ast::MatchArmList {\n             Some(t) => t,\n             None => return self.clone(),\n         };\n-        let position = InsertPosition::Before(r_curly.into());\n+        let position = InsertPosition::Before(r_curly);\n         let arm_ws = tokens::WsBuilder::new(\"    \");\n         let match_indent = &leading_indent(self.syntax()).unwrap_or_default();\n         let match_ws = tokens::WsBuilder::new(&format!(\"\\n{}\", match_indent));"}, {"sha": "442dfa14ae39ce5f6a92702494fc2f5a72cb3767", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fbea509f1e5f840e715c912ee38aa997d1bfbc/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=f7fbea509f1e5f840e715c912ee38aa997d1bfbc", "patch": "@@ -122,5 +122,5 @@ fn ws_between(left: &SyntaxElement, right: &SyntaxElement) -> Option<SyntaxToken\n     if right.kind() == T![;] || right.kind() == T![,] {\n         return None;\n     }\n-    Some(make::tokens::single_space().into())\n+    Some(make::tokens::single_space())\n }"}]}