{"sha": "24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YjFiNzljZjFkMmEyN2MzZjhkMWM1MThmY2ZhN2ExZWM4MzIxNTQ=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "message": "Make analyze_move_out_from take a BorrowKind\n\nCurrently analyze_move_out_from ignores the BorrowKind of loans, but the\nsame logic is useful when restricted to loans of specific borrow kinds.", "tree": {"sha": "ded3ea0491da13a0e8a90cc1a34ac1122829318b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded3ea0491da13a0e8a90cc1a34ac1122829318b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154", "html_url": "https://github.com/rust-lang/rust/commit/24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154/comments", "author": null, "committer": null, "parents": [{"sha": "45a1b977643456ceacfc81183e2d5743f7c61ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/45a1b977643456ceacfc81183e2d5743f7c61ce9", "html_url": "https://github.com/rust-lang/rust/commit/45a1b977643456ceacfc81183e2d5743f7c61ce9"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "d38107cd5fe89b3794a9e8de861451baa6f325ea", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=24b1b79cf1d2a27c3f8d1c518fcfa7a1ec832154", "patch": "@@ -476,7 +476,10 @@ impl<'a> CheckLoanCtxt<'a> {\n                                        span: Span,\n                                        move_path: &LoanPath,\n                                        move_kind: move_data::MoveKind) {\n-        match self.analyze_move_out_from(id, move_path) {\n+        // We want to detect if there are any loans at all, so we search for\n+        // any loans incompatible with MutBorrrow, since all other kinds of\n+        // loans are incompatible with that.\n+        match self.analyze_move_out_from(id, move_path, ty::MutBorrow) {\n             MoveOk => { }\n             MoveWhileBorrowed(loan_path, loan_span) => {\n                 let err_message = match move_kind {\n@@ -865,7 +868,8 @@ impl<'a> CheckLoanCtxt<'a> {\n \n     pub fn analyze_move_out_from(&self,\n                                  expr_id: ast::NodeId,\n-                                 move_path: &LoanPath)\n+                                 move_path: &LoanPath,\n+                                 borrow_kind: ty::BorrowKind)\n                                  -> MoveError {\n         debug!(\"analyze_move_out_from(expr_id={:?}, move_path={})\",\n                self.tcx().map.node_to_str(expr_id),\n@@ -881,9 +885,12 @@ impl<'a> CheckLoanCtxt<'a> {\n         //     let y = a;          // Conflicts with restriction\n \n         self.each_in_scope_restriction(expr_id, move_path, |loan, _restr| {\n-            // Any restriction prevents moves.\n-            ret = MoveWhileBorrowed(loan.loan_path.clone(), loan.span);\n-            false\n+            if incompatible(loan.kind, borrow_kind) {\n+                ret = MoveWhileBorrowed(loan.loan_path.clone(), loan.span);\n+                false\n+            } else {\n+                true\n+            }\n         });\n \n         // Next, we must check for *loans* (not restrictions) on the path P or\n@@ -901,8 +908,8 @@ impl<'a> CheckLoanCtxt<'a> {\n         let mut loan_path = move_path;\n         loop {\n             self.each_in_scope_loan(expr_id, |loan| {\n-                // Any restriction prevents moves.\n-                if *loan.loan_path == *loan_path {\n+                if *loan.loan_path == *loan_path &&\n+                   incompatible(loan.kind, borrow_kind) {\n                     ret = MoveWhileBorrowed(loan.loan_path.clone(), loan.span);\n                     false\n                 } else {\n@@ -921,5 +928,11 @@ impl<'a> CheckLoanCtxt<'a> {\n         }\n \n         return ret;\n+\n+        fn incompatible(borrow_kind1: ty::BorrowKind,\n+                        borrow_kind2: ty::BorrowKind)\n+                        -> bool {\n+            borrow_kind1 != ty::ImmBorrow || borrow_kind2 != ty::ImmBorrow\n+        }\n     }\n }"}]}