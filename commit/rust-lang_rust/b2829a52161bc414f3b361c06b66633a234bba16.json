{"sha": "b2829a52161bc414f3b361c06b66633a234bba16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyODI5YTUyMTYxYmM0MTRmM2IzNjFjMDZiNjY2MzNhMjM0YmJhMTY=", "commit": {"author": {"name": "Leander Tentrup", "email": "ltentrup@users.noreply.github.com", "date": "2020-04-22T08:08:46Z"}, "committer": {"name": "Leander Tentrup", "email": "leander.tentrup@gmail.com", "date": "2020-04-22T08:18:46Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: bjorn3 <bjorn3@users.noreply.github.com>", "tree": {"sha": "5c2ec7a4766ec5e24060758e0fc8f059a536a0c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2ec7a4766ec5e24060758e0fc8f059a536a0c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2829a52161bc414f3b361c06b66633a234bba16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2829a52161bc414f3b361c06b66633a234bba16", "html_url": "https://github.com/rust-lang/rust/commit/b2829a52161bc414f3b361c06b66633a234bba16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2829a52161bc414f3b361c06b66633a234bba16/comments", "author": {"login": "ltentrup", "id": 201808, "node_id": "MDQ6VXNlcjIwMTgwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/201808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltentrup", "html_url": "https://github.com/ltentrup", "followers_url": "https://api.github.com/users/ltentrup/followers", "following_url": "https://api.github.com/users/ltentrup/following{/other_user}", "gists_url": "https://api.github.com/users/ltentrup/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltentrup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltentrup/subscriptions", "organizations_url": "https://api.github.com/users/ltentrup/orgs", "repos_url": "https://api.github.com/users/ltentrup/repos", "events_url": "https://api.github.com/users/ltentrup/events{/privacy}", "received_events_url": "https://api.github.com/users/ltentrup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ltentrup", "id": 201808, "node_id": "MDQ6VXNlcjIwMTgwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/201808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltentrup", "html_url": "https://github.com/ltentrup", "followers_url": "https://api.github.com/users/ltentrup/followers", "following_url": "https://api.github.com/users/ltentrup/following{/other_user}", "gists_url": "https://api.github.com/users/ltentrup/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltentrup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltentrup/subscriptions", "organizations_url": "https://api.github.com/users/ltentrup/orgs", "repos_url": "https://api.github.com/users/ltentrup/repos", "events_url": "https://api.github.com/users/ltentrup/events{/privacy}", "received_events_url": "https://api.github.com/users/ltentrup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac798e1f7cfbc6d27c87bb28e3f1d5b6801796aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac798e1f7cfbc6d27c87bb28e3f1d5b6801796aa", "html_url": "https://github.com/rust-lang/rust/commit/ac798e1f7cfbc6d27c87bb28e3f1d5b6801796aa"}], "stats": {"total": 66, "additions": 32, "deletions": 34}, "files": [{"sha": "8ee3a78c64d1b790e8f6477f298d8a6649ab6263", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2829a52161bc414f3b361c06b66633a234bba16/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2829a52161bc414f3b361c06b66633a234bba16/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=b2829a52161bc414f3b361c06b66633a234bba16", "patch": "@@ -194,7 +194,7 @@ pub(crate) fn highlight(\n             let token = sema.descend_into_macros(token.clone());\n             let parent = token.parent();\n \n-            // Check if macro takes a format string and remeber it for highlighting later.\n+            // Check if macro takes a format string and remember it for highlighting later.\n             // The macros that accept a format string expand to a compiler builtin macros\n             // `format_args` and `format_args_nl`.\n             if let Some(fmt_macro_call) = parent.parent().and_then(ast::MacroCall::cast) {\n@@ -233,8 +233,7 @@ pub(crate) fn highlight(\n             }\n         }\n \n-        let is_format_string =\n-            format_string.as_ref().map(|fs| fs == &element_to_highlight).unwrap_or_default();\n+        let is_format_string = format_string.as_ref() == Some(&element_to_highlight);\n \n         if let Some((highlight, binding_hash)) =\n             highlight_element(&sema, &mut bindings_shadow_count, element_to_highlight.clone())\n@@ -245,7 +244,7 @@ pub(crate) fn highlight(\n             {\n                 stack.push();\n                 if is_format_string {\n-                    string.lex_format_specifier(&mut |piece_range, kind| {\n+                    string.lex_format_specifier(|piece_range, kind| {\n                         let highlight = match kind {\n                             FormatSpecifier::Open\n                             | FormatSpecifier::Close"}, {"sha": "3e5c56b192d5c23693afacfcca510054a965068c", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b2829a52161bc414f3b361c06b66633a234bba16/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2829a52161bc414f3b361c06b66633a234bba16/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=b2829a52161bc414f3b361c06b66633a234bba16", "patch": "@@ -192,7 +192,7 @@ pub enum FormatSpecifier {\n }\n \n pub trait HasFormatSpecifier: AstToken {\n-    fn lex_format_specifier<F>(&self, callback: &mut F)\n+    fn lex_format_specifier<F>(&self, mut callback: F)\n     where\n         F: FnMut(TextRange, FormatSpecifier),\n     {\n@@ -217,21 +217,15 @@ pub trait HasFormatSpecifier: AstToken {\n                         FormatSpecifier::Open,\n                     );\n \n-                    let next_char = if let Some(c) = chars.clone().next() {\n-                        c\n-                    } else {\n-                        break;\n-                    };\n-\n                     // check for integer/identifier\n-                    match next_char {\n+                    match chars.clone().next().unwrap_or_default() {\n                         '0'..='9' => {\n                             // integer\n-                            read_integer(&mut chars, initial_len, callback);\n+                            read_integer(&mut chars, initial_len, &mut callback);\n                         }\n                         'a'..='z' | 'A'..='Z' | '_' => {\n                             // identifier\n-                            read_identifier(&mut chars, initial_len, callback);\n+                            read_identifier(&mut chars, initial_len, &mut callback);\n                         }\n                         _ => {}\n                     }\n@@ -241,7 +235,7 @@ pub trait HasFormatSpecifier: AstToken {\n                             &mut chars,\n                             initial_len,\n                             FormatSpecifier::Colon,\n-                            callback,\n+                            &mut callback,\n                         );\n \n                         // check for fill/align\n@@ -255,13 +249,13 @@ pub trait HasFormatSpecifier: AstToken {\n                                     &mut chars,\n                                     initial_len,\n                                     FormatSpecifier::Fill,\n-                                    callback,\n+                                    &mut callback,\n                                 );\n                                 skip_char_and_emit(\n                                     &mut chars,\n                                     initial_len,\n                                     FormatSpecifier::Align,\n-                                    callback,\n+                                    &mut callback,\n                                 );\n                             }\n                             _ => match first {\n@@ -270,7 +264,7 @@ pub trait HasFormatSpecifier: AstToken {\n                                         &mut chars,\n                                         initial_len,\n                                         FormatSpecifier::Align,\n-                                        callback,\n+                                        &mut callback,\n                                     );\n                                 }\n                                 _ => {}\n@@ -284,7 +278,7 @@ pub trait HasFormatSpecifier: AstToken {\n                                     &mut chars,\n                                     initial_len,\n                                     FormatSpecifier::Sign,\n-                                    callback,\n+                                    &mut callback,\n                                 );\n                             }\n                             _ => {}\n@@ -296,7 +290,7 @@ pub trait HasFormatSpecifier: AstToken {\n                                 &mut chars,\n                                 initial_len,\n                                 FormatSpecifier::NumberSign,\n-                                callback,\n+                                &mut callback,\n                             );\n                         }\n \n@@ -310,33 +304,33 @@ pub trait HasFormatSpecifier: AstToken {\n                                 &mut chars,\n                                 initial_len,\n                                 FormatSpecifier::Zero,\n-                                callback,\n+                                &mut callback,\n                             );\n                         }\n \n                         // width\n                         match chars.clone().next().unwrap_or_default() {\n                             '0'..='9' => {\n-                                read_integer(&mut chars, initial_len, callback);\n+                                read_integer(&mut chars, initial_len, &mut callback);\n                                 if chars.clone().next() == Some('$') {\n                                     skip_char_and_emit(\n                                         &mut chars,\n                                         initial_len,\n                                         FormatSpecifier::DollarSign,\n-                                        callback,\n+                                        &mut callback,\n                                     );\n                                 }\n                             }\n                             'a'..='z' | 'A'..='Z' | '_' => {\n-                                read_identifier(&mut chars, initial_len, callback);\n+                                read_identifier(&mut chars, initial_len, &mut callback);\n                                 if chars.clone().next() != Some('$') {\n                                     continue;\n                                 }\n                                 skip_char_and_emit(\n                                     &mut chars,\n                                     initial_len,\n                                     FormatSpecifier::DollarSign,\n-                                    callback,\n+                                    &mut callback,\n                                 );\n                             }\n                             _ => {}\n@@ -348,7 +342,7 @@ pub trait HasFormatSpecifier: AstToken {\n                                 &mut chars,\n                                 initial_len,\n                                 FormatSpecifier::Dot,\n-                                callback,\n+                                &mut callback,\n                             );\n \n                             match chars.clone().next().unwrap_or_default() {\n@@ -357,30 +351,30 @@ pub trait HasFormatSpecifier: AstToken {\n                                         &mut chars,\n                                         initial_len,\n                                         FormatSpecifier::Asterisk,\n-                                        callback,\n+                                        &mut callback,\n                                     );\n                                 }\n                                 '0'..='9' => {\n-                                    read_integer(&mut chars, initial_len, callback);\n+                                    read_integer(&mut chars, initial_len, &mut callback);\n                                     if chars.clone().next() == Some('$') {\n                                         skip_char_and_emit(\n                                             &mut chars,\n                                             initial_len,\n                                             FormatSpecifier::DollarSign,\n-                                            callback,\n+                                            &mut callback,\n                                         );\n                                     }\n                                 }\n                                 'a'..='z' | 'A'..='Z' | '_' => {\n-                                    read_identifier(&mut chars, initial_len, callback);\n+                                    read_identifier(&mut chars, initial_len, &mut callback);\n                                     if chars.clone().next() != Some('$') {\n                                         continue;\n                                     }\n                                     skip_char_and_emit(\n                                         &mut chars,\n                                         initial_len,\n                                         FormatSpecifier::DollarSign,\n-                                        callback,\n+                                        &mut callback,\n                                     );\n                                 }\n                                 _ => {\n@@ -396,11 +390,11 @@ pub trait HasFormatSpecifier: AstToken {\n                                     &mut chars,\n                                     initial_len,\n                                     FormatSpecifier::QuestionMark,\n-                                    callback,\n+                                    &mut callback,\n                                 );\n                             }\n                             'a'..='z' | 'A'..='Z' | '_' => {\n-                                read_identifier(&mut chars, initial_len, callback);\n+                                read_identifier(&mut chars, initial_len, &mut callback);\n                             }\n                             _ => {}\n                         }\n@@ -416,7 +410,12 @@ pub trait HasFormatSpecifier: AstToken {\n                         // Escaped format end specifier, `}}`\n                         continue;\n                     }\n-                    skip_char_and_emit(&mut chars, initial_len, FormatSpecifier::Close, callback);\n+                    skip_char_and_emit(\n+                        &mut chars,\n+                        initial_len,\n+                        FormatSpecifier::Close,\n+                        &mut callback,\n+                    );\n                 }\n                 _ => {\n                     while let Some(next_char) = chars.clone().next() {"}]}