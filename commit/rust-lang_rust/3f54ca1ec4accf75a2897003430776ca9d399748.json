{"sha": "3f54ca1ec4accf75a2897003430776ca9d399748", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTRjYTFlYzRhY2NmNzVhMjg5NzAwMzQzMDc3NmNhOWQzOTk3NDg=", "commit": {"author": {"name": "Dave Hodder", "email": "dmh@dmh.org.uk", "date": "2014-02-13T22:28:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-14T15:47:17Z"}, "message": "Add function doc comments for extra::url::*", "tree": {"sha": "82c8c882d686b4121abccbac329dd52b70240d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c8c882d686b4121abccbac329dd52b70240d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f54ca1ec4accf75a2897003430776ca9d399748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f54ca1ec4accf75a2897003430776ca9d399748", "html_url": "https://github.com/rust-lang/rust/commit/3f54ca1ec4accf75a2897003430776ca9d399748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f54ca1ec4accf75a2897003430776ca9d399748/comments", "author": {"login": "dhodder", "id": 489065, "node_id": "MDQ6VXNlcjQ4OTA2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/489065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhodder", "html_url": "https://github.com/dhodder", "followers_url": "https://api.github.com/users/dhodder/followers", "following_url": "https://api.github.com/users/dhodder/following{/other_user}", "gists_url": "https://api.github.com/users/dhodder/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhodder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhodder/subscriptions", "organizations_url": "https://api.github.com/users/dhodder/orgs", "repos_url": "https://api.github.com/users/dhodder/repos", "events_url": "https://api.github.com/users/dhodder/events{/privacy}", "received_events_url": "https://api.github.com/users/dhodder/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a289587dd38fbb01565c1bc056b8fbdc20749252", "url": "https://api.github.com/repos/rust-lang/rust/commits/a289587dd38fbb01565c1bc056b8fbdc20749252", "html_url": "https://github.com/rust-lang/rust/commit/a289587dd38fbb01565c1bc056b8fbdc20749252"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "c76c73dc4325bcab951ee93374537816927ff10f", "filename": "src/libextra/url.rs", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3f54ca1ec4accf75a2897003430776ca9d399748/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f54ca1ec4accf75a2897003430776ca9d399748/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=3f54ca1ec4accf75a2897003430776ca9d399748", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -139,10 +139,19 @@ fn encode_inner(s: &str, full_url: bool) -> ~str {\n }\n \n /**\n- * Encodes a URI by replacing reserved characters with percent encoded\n+ * Encodes a URI by replacing reserved characters with percent-encoded\n  * character sequences.\n  *\n  * This function is compliant with RFC 3986.\n+ *\n+ * # Example\n+ *\n+ * ```rust\n+ * use extra::url::encode;\n+ *\n+ * let url = encode(&\"https://example.com/Rust (programming language)\");\n+ * println!(\"{}\", url); // https://example.com/Rust%20(programming%20language)\n+ * ```\n  */\n pub fn encode(s: &str) -> ~str {\n     encode_inner(s, true)\n@@ -206,9 +215,18 @@ fn decode_inner(s: &str, full_url: bool) -> ~str {\n }\n \n /**\n- * Decode a string encoded with percent encoding.\n+ * Decodes a percent-encoded string representing a URI.\n  *\n- * This will only decode escape sequences generated by encode.\n+ * This will only decode escape sequences generated by `encode`.\n+ *\n+ * # Example\n+ *\n+ * ```rust\n+ * use extra::url::decode;\n+ *\n+ * let url = decode(&\"https://example.com/Rust%20(programming%20language)\");\n+ * println!(\"{}\", url); // https://example.com/Rust (programming language)\n+ * ```\n  */\n pub fn decode(s: &str) -> ~str {\n     decode_inner(s, true)\n@@ -410,7 +428,23 @@ pub fn query_to_str(query: &Query) -> ~str {\n     return strvec.connect(\"&\");\n }\n \n-// returns the scheme and the rest of the url, or a parsing error\n+/**\n+ * Returns a tuple of the URI scheme and the rest of the URI, or a parsing error.\n+ *\n+ * Does not include the separating `:` character.\n+ *\n+ * # Example\n+ *\n+ * ```rust\n+ * use extra::url::get_scheme;\n+ *\n+ * let scheme = match get_scheme(\"https://example.com/\") {\n+ *     Ok((sch, _)) => sch,\n+ *     Err(_) => ~\"(None)\",\n+ * };\n+ * println!(\"Scheme in use: {}.\", scheme); // Scheme in use: https.\n+ * ```\n+ */\n pub fn get_scheme(rawurl: &str) -> Result<(~str, ~str), ~str> {\n     for (i,c) in rawurl.chars().enumerate() {\n         match c {\n@@ -654,18 +688,16 @@ fn get_query_fragment(rawurl: &str) ->\n }\n \n /**\n- * Parse a `str` to a `url`\n+ * Parses a URL, converting it from a string to `Url` representation.\n  *\n  * # Arguments\n  *\n- * `rawurl` - a string representing a full url, including scheme.\n+ * `rawurl` - a string representing the full URL, including scheme.\n  *\n  * # Returns\n  *\n- * a `url` that contains the parsed representation of the url.\n- *\n+ * A `Url` struct type representing the URL.\n  */\n-\n pub fn from_str(rawurl: &str) -> Result<Url, ~str> {\n     // scheme\n     let (scheme, rest) = match get_scheme(rawurl) {\n@@ -705,19 +737,18 @@ impl FromStr for Url {\n }\n \n /**\n- * Format a `url` as a string\n+ * Converts a URL from `Url` to string representation.\n  *\n  * # Arguments\n  *\n- * `url` - a url.\n+ * `url` - a URL.\n  *\n  * # Returns\n  *\n- * a `str` that contains the formatted url. Note that this will usually\n- * be an inverse of `from_str` but might strip out unneeded separators.\n+ * A string that contains the formatted URL. Note that this will usually\n+ * be an inverse of `from_str` but might strip out unneeded separators;\n  * for example, \"http://somehost.com?\", when parsed and formatted, will\n  * result in just \"http://somehost.com\".\n- *\n  */\n pub fn to_str(url: &Url) -> ~str {\n     let user = match url.user {"}]}