{"sha": "bb2d533bb9b5c247f48f7932f7e533475b59e402", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMmQ1MzNiYjliNWMyNDdmNDhmNzkzMmY3ZTUzMzQ3NWI1OWU0MDI=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-10-11T18:43:25Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:03Z"}, "message": "in-place collect for Vec. Box<[]> and BinaryHeap IntoIter and some adapters", "tree": {"sha": "fb8d7148dab7b9c75ef9144b18b083bf863d1616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb8d7148dab7b9c75ef9144b18b083bf863d1616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb2d533bb9b5c247f48f7932f7e533475b59e402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2d533bb9b5c247f48f7932f7e533475b59e402", "html_url": "https://github.com/rust-lang/rust/commit/bb2d533bb9b5c247f48f7932f7e533475b59e402", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb2d533bb9b5c247f48f7932f7e533475b59e402/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "038394a330f24e5ec63d78657a32f3279b8b276b", "url": "https://api.github.com/repos/rust-lang/rust/commits/038394a330f24e5ec63d78657a32f3279b8b276b", "html_url": "https://github.com/rust-lang/rust/commit/038394a330f24e5ec63d78657a32f3279b8b276b"}], "stats": {"total": 323, "additions": 280, "deletions": 43}, "files": [{"sha": "f7012a03425287875518aecda26175835e90ff65", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -145,7 +145,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::fmt;\n-use core::iter::{FromIterator, FusedIterator, TrustedLen};\n+use core::iter::{FromIterator, FusedIterator, InPlaceIterable, SourceIter, TrustedLen};\n use core::mem::{self, size_of, swap, ManuallyDrop};\n use core::ops::{Deref, DerefMut};\n use core::ptr;\n@@ -1173,6 +1173,19 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+impl<T> SourceIter for IntoIter<T> {\n+    type Source = crate::vec::IntoIter<T>;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut Self::Source {\n+        &mut self.iter\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I> InPlaceIterable for IntoIter<I> {}\n+\n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n #[derive(Clone, Debug)]\n pub struct IntoIterSorted<T> {"}, {"sha": "72aa7fea4cfc38b3e0494d567bd0afe4c0d7109c", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -99,6 +99,7 @@\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n #![feature(fundamental)]\n+#![feature(inplace_iteration)]\n #![feature(internal_uninit_const)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]"}, {"sha": "ad639ca320ae19a61e349f0fede1d3ce2fab426a", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 97, "deletions": 41, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -58,7 +58,7 @@ use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::intrinsics::{arith_offset, assume};\n-use core::iter::{FromIterator, FusedIterator, TrustedLen};\n+use core::iter::{FromIterator, FusedIterator, InPlaceIterable, SourceIter, TrustedLen};\n use core::marker::PhantomData;\n use core::mem::{self, ManuallyDrop, MaybeUninit};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n@@ -2012,7 +2012,7 @@ impl<T, I: SliceIndex<[T]>> IndexMut<I> for Vec<T> {\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {\n-        <Self as SpecExtend<T, I::IntoIter>>::from_iter(iter.into_iter())\n+        <Self as SpecFrom<T, I::IntoIter>>::from_iter(iter.into_iter())\n     }\n }\n \n@@ -2094,13 +2094,12 @@ impl<T> Extend<T> for Vec<T> {\n     }\n }\n \n-// Specialization trait used for Vec::from_iter and Vec::extend\n-trait SpecExtend<T, I> {\n+// Specialization trait used for Vec::from_iter\n+trait SpecFrom<T, I> {\n     fn from_iter(iter: I) -> Self;\n-    fn spec_extend(&mut self, iter: I);\n }\n \n-impl<T, I> SpecExtend<T, I> for Vec<T>\n+impl<T, I> SpecFrom<T, I> for Vec<T>\n where\n     I: Iterator<Item = T>,\n {\n@@ -2125,7 +2124,86 @@ where\n         <Vec<T> as SpecExtend<T, I>>::spec_extend(&mut vector, iterator);\n         vector\n     }\n+}\n+\n+fn from_into_iter_source<T, I>(mut iterator: I) -> Vec<T>\n+where\n+    I: Iterator<Item = T> + InPlaceIterable + SourceIter<Source = IntoIter<T>>,\n+{\n+    let mut insert_pos = 0;\n+\n+    // FIXME: how to drop values written into source when iteration panics?\n+    //   tail already gets cleaned by IntoIter::drop\n+    while let Some(item) = iterator.next() {\n+        let source_iter = iterator.as_inner();\n+        let src_buf = source_iter.buf.as_ptr();\n+        let src_idx = source_iter.ptr;\n+        unsafe {\n+            let dst = src_buf.offset(insert_pos as isize);\n+            debug_assert!(\n+                dst as *const _ < src_idx,\n+                \"InPlaceIterable implementation produced more\\\n+                          items than it consumed from the source\"\n+            );\n+            ptr::write(dst, item)\n+        }\n+        insert_pos += 1;\n+    }\n+\n+    let src = iterator.as_inner();\n+    let vec = unsafe { Vec::from_raw_parts(src.buf.as_ptr(), insert_pos, src.cap) };\n+    mem::forget(iterator);\n+    vec\n+}\n+\n+impl<T> SpecFrom<T, IntoIter<T>> for Vec<T> {\n+    fn from_iter(iterator: IntoIter<T>) -> Self {\n+        // A common case is passing a vector into a function which immediately\n+        // re-collects into a vector. We can short circuit this if the IntoIter\n+        // has not been advanced at all.\n+        if iterator.buf.as_ptr() as *const _ == iterator.ptr {\n+            unsafe {\n+                let it = ManuallyDrop::new(iterator);\n+                return Vec::from_raw_parts(it.buf.as_ptr(), it.len(), it.cap);\n+            }\n+        }\n+\n+        from_into_iter_source(iterator)\n+    }\n+}\n+\n+// Further specialization potential once lattice specialization exists\n+// and https://github.com/rust-lang/rust/issues/62645 has been solved:\n+// This can be broadened to only require size and alignment equality between\n+// input and output Item types.\n+impl<T, I> SpecFrom<T, I> for Vec<T>\n+where\n+    I: Iterator<Item = T> + InPlaceIterable + SourceIter<Source = IntoIter<T>>,\n+{\n+    default fn from_iter(iterator: I) -> Self {\n+        from_into_iter_source(iterator)\n+    }\n+}\n+\n+impl<'a, T: 'a, I> SpecFrom<&'a T, I> for Vec<T>\n+where\n+    I: Iterator<Item = &'a T>,\n+    T: Clone,\n+{\n+    default fn from_iter(iterator: I) -> Self {\n+        SpecFrom::from_iter(iterator.cloned())\n+    }\n+}\n \n+// Specialization trait used for Vec::extend\n+trait SpecExtend<T, I> {\n+    fn spec_extend(&mut self, iter: I);\n+}\n+\n+impl<T, I> SpecExtend<T, I> for Vec<T>\n+where\n+    I: Iterator<Item = T>,\n+{\n     default fn spec_extend(&mut self, iter: I) {\n         self.extend_desugared(iter)\n     }\n@@ -2135,12 +2213,6 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n where\n     I: TrustedLen<Item = T>,\n {\n-    default fn from_iter(iterator: I) -> Self {\n-        let mut vector = Vec::new();\n-        vector.spec_extend(iterator);\n-        vector\n-    }\n-\n     default fn spec_extend(&mut self, iterator: I) {\n         // This is the case for a TrustedLen iterator.\n         let (low, high) = iterator.size_hint();\n@@ -2170,40 +2242,11 @@ where\n     }\n }\n \n-impl<T> SpecExtend<T, IntoIter<T>> for Vec<T> {\n-    fn from_iter(iterator: IntoIter<T>) -> Self {\n-        // A common case is passing a vector into a function which immediately\n-        // re-collects into a vector. We can short circuit this if the IntoIter\n-        // has not been advanced at all.\n-        if iterator.buf.as_ptr() as *const _ == iterator.ptr {\n-            unsafe {\n-                let it = ManuallyDrop::new(iterator);\n-                Vec::from_raw_parts(it.buf.as_ptr(), it.len(), it.cap)\n-            }\n-        } else {\n-            let mut vector = Vec::new();\n-            vector.spec_extend(iterator);\n-            vector\n-        }\n-    }\n-\n-    fn spec_extend(&mut self, mut iterator: IntoIter<T>) {\n-        unsafe {\n-            self.append_elements(iterator.as_slice() as _);\n-        }\n-        iterator.ptr = iterator.end;\n-    }\n-}\n-\n impl<'a, T: 'a, I> SpecExtend<&'a T, I> for Vec<T>\n where\n     I: Iterator<Item = &'a T>,\n     T: Clone,\n {\n-    default fn from_iter(iterator: I) -> Self {\n-        SpecExtend::from_iter(iterator.cloned())\n-    }\n-\n     default fn spec_extend(&mut self, iterator: I) {\n         self.spec_extend(iterator.cloned())\n     }\n@@ -2779,6 +2822,19 @@ unsafe impl<#[may_dangle] T> Drop for IntoIter<T> {\n     }\n }\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<T> InPlaceIterable for IntoIter<T> {}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+impl<T> SourceIter for IntoIter<T> {\n+    type Source = IntoIter<T>;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut Self::Source {\n+        self\n+    }\n+}\n+\n /// A draining iterator for `Vec<T>`.\n ///\n /// This `struct` is created by [`Vec::drain`]."}, {"sha": "ce794a9a4afa2dd0c89b167efc33a3ff76edfdd1", "filename": "library/alloc/tests/binary_heap.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fbinary_heap.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -230,6 +230,18 @@ fn test_to_vec() {\n     check_to_vec(vec![5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1]);\n }\n \n+#[test]\n+fn test_in_place_iterator_specialization() {\n+    let src: Vec<usize> = vec![1, 2, 3];\n+    let src_ptr = src.as_ptr();\n+    let heap: BinaryHeap<_> = src.into_iter().map(std::convert::identity).collect();\n+    let heap_ptr = heap.iter().next().unwrap() as *const usize;\n+    assert_eq!(src_ptr, heap_ptr);\n+    let sink: Vec<_> = heap.into_iter().map(std::convert::identity).collect();\n+    let sink_ptr = sink.as_ptr();\n+    assert_eq!(heap_ptr, sink_ptr);\n+}\n+\n #[test]\n fn test_empty_pop() {\n     let mut heap = BinaryHeap::<i32>::new();"}, {"sha": "e0e146dc4275494b6b3b6cd577b52a3d7fcbc29d", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -14,6 +14,7 @@\n #![feature(slice_ptr_get)]\n #![feature(split_inclusive)]\n #![feature(binary_heap_retain)]\n+#![feature(inplace_iteration)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "1f561bebd908b5b86a21fa2c941ff6ba094cb0f2", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -1459,6 +1459,15 @@ fn test_to_vec() {\n     assert_eq!(ys, [1, 2, 3]);\n }\n \n+#[test]\n+fn test_in_place_iterator_specialization() {\n+    let src: Box<[usize]> = box [1, 2, 3];\n+    let src_ptr = src.as_ptr();\n+    let sink: Box<_> = src.into_vec().into_iter().map(std::convert::identity).collect();\n+    let sink_ptr = sink.as_ptr();\n+    assert_eq!(src_ptr, sink_ptr);\n+}\n+\n #[test]\n fn test_box_slice_clone() {\n     let data = vec![vec![0, 1], vec![0], vec![1]];"}, {"sha": "271a705cf0631d1a1c15df0520967af7b688776e", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -1,6 +1,7 @@\n use std::borrow::Cow;\n use std::collections::TryReserveError::*;\n use std::fmt::Debug;\n+use std::iter::InPlaceIterable;\n use std::mem::size_of;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::vec::{Drain, IntoIter};\n@@ -775,6 +776,27 @@ fn test_into_iter_leak() {\n     assert_eq!(unsafe { DROPS }, 3);\n }\n \n+#[test]\n+fn test_from_iter_specialization() {\n+    let src: Vec<usize> = vec![0usize; 1];\n+    let srcptr = src.as_ptr();\n+    let sink = src.into_iter().collect::<Vec<_>>();\n+    let sinkptr = sink.as_ptr();\n+    assert_eq!(srcptr, sinkptr);\n+}\n+\n+#[test]\n+fn test_from_iter_specialization_with_iterator_adapters() {\n+    fn assert_in_place_trait<T: InPlaceIterable>(_: &T) {};\n+    let src: Vec<usize> = vec![0usize; 65535];\n+    let srcptr = src.as_ptr();\n+    let iter = src.into_iter().enumerate().map(|i| i.0 + i.1).peekable().skip(1);\n+    assert_in_place_trait(&iter);\n+    let sink = iter.collect::<Vec<_>>();\n+    let sinkptr = sink.as_ptr();\n+    assert_eq!(srcptr, sinkptr);\n+}\n+\n #[test]\n fn test_cow_from() {\n     let borrowed: &[_] = &[\"borrowed\", \"(slice)\"];"}, {"sha": "c7488ef2720642547874e8f9257be488d6acd64f", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 105, "deletions": 1, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -4,7 +4,9 @@ use crate::intrinsics;\n use crate::ops::{Add, AddAssign, ControlFlow, Try};\n \n use super::from_fn;\n-use super::{DoubleEndedIterator, ExactSizeIterator, FusedIterator, Iterator, TrustedLen};\n+use super::{\n+    DoubleEndedIterator, ExactSizeIterator, FusedIterator, InPlaceIterable, Iterator, TrustedLen,\n+};\n \n mod chain;\n mod flatten;\n@@ -19,6 +21,40 @@ use self::zip::try_get_unchecked;\n pub(crate) use self::zip::TrustedRandomAccess;\n pub use self::zip::Zip;\n \n+/// This trait provides access to to the backing source of an interator-adapter pipeline\n+/// under the conditions that\n+/// * the iterator source `S` itself implements `SourceIter<Source = S>`\n+/// * there is a delegating implementation of this trait for each adapter in the pipeline\n+///\n+/// This is useful for specializing [`FromIterator`] implementations or to retrieve\n+/// the remaining values from a source of a partially consumed iterator.\n+///\n+/// # Examples\n+///\n+/// Retrieving a partially consumed source and wrapping it into a different pipeline:\n+///\n+/// ```\n+/// # #![feature(inplace_iteration)]\n+/// # use std::iter::SourceIter;\n+///\n+/// let mut iter = vec![9, 9, 9].into_iter().map(|i| i * i);\n+/// let first = iter.next().unwrap();\n+/// let mut remainder = std::mem::replace(iter.as_inner(), Vec::new().into_iter());\n+/// let second = remainder.map(|i| i + 1).next().unwrap();\n+/// assert_eq!(first, 81);\n+/// assert_eq!(second, 10);\n+/// ```\n+///\n+/// [`FromIterator`]: trait.FromIterator.html\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+pub trait SourceIter {\n+    /// The source iterator of the adapter.\n+    type Source: Iterator;\n+\n+    /// Recursively extract the source of an iterator pipeline.\n+    fn as_inner(&mut self) -> &mut Self::Source;\n+}\n+\n /// A double-ended iterator with the direction inverted.\n ///\n /// This `struct` is created by the [`rev`] method on [`Iterator`]. See its\n@@ -939,6 +975,23 @@ where\n     }\n }\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+impl<S: Iterator, B, I: Iterator, F> SourceIter for Map<I, F>\n+where\n+    F: FnMut(I::Item) -> B,\n+    I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<B, I: InPlaceIterable, F> InPlaceIterable for Map<I, F> where F: FnMut(I::Item) -> B {}\n+\n /// An iterator that filters the elements of `iter` with `predicate`.\n ///\n /// This `struct` is created by the [`filter`] method on [`Iterator`]. See its\n@@ -1414,6 +1467,22 @@ impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I> TrustedLen for Enumerate<I> where I: TrustedLen {}\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+impl<S: Iterator, I: Iterator> SourceIter for Enumerate<I>\n+where\n+    I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable> InPlaceIterable for Enumerate<I> {}\n+\n /// An iterator with a `peek()` that returns an optional reference to the next\n /// element.\n ///\n@@ -1692,6 +1761,25 @@ impl<I: Iterator> Peekable<I> {\n     }\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<I> TrustedLen for Peekable<I> where I: TrustedLen {}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+impl<S: Iterator, I: Iterator> SourceIter for Peekable<I>\n+where\n+    I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable> InPlaceIterable for Peekable<I> {}\n+\n /// An iterator that rejects elements while `predicate` returns `true`.\n ///\n /// This `struct` is created by the [`skip_while`] method on [`Iterator`]. See its\n@@ -2167,6 +2255,22 @@ where\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+impl<S: Iterator, I: Iterator> SourceIter for Skip<I>\n+where\n+    I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable> InPlaceIterable for Skip<I> {}\n+\n /// An iterator that only iterates over the first `n` iterations of `iter`.\n ///\n /// This `struct` is created by the [`take`] method on [`Iterator`]. See its"}, {"sha": "f35994560c56af959ccf3a0db651eaf2bce4207f", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -342,6 +342,9 @@ pub use self::traits::{DoubleEndedIterator, Extend, FromIterator, IntoIterator};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::{ExactSizeIterator, Product, Sum};\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+pub use self::traits::InPlaceIterable;\n+\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n pub use self::adapters::Cloned;\n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]\n@@ -350,6 +353,8 @@ pub use self::adapters::Copied;\n pub use self::adapters::Flatten;\n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n pub use self::adapters::MapWhile;\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+pub use self::adapters::SourceIter;\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n pub use self::adapters::StepBy;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "549f7972689e2ed40bbdd6f7bbf4410fcc83dd8a", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -42,3 +42,15 @@ pub unsafe trait TrustedLen: Iterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}\n+\n+/// An iterator that when yielding an item will have taken at least one element\n+/// from its underlying [`SourceIter`].\n+///\n+/// Calling next() guarantees that at least one value of the iterator's underlying source\n+/// has been moved out and the result of the iterator chain could be inserted in its place,\n+/// assuming structural constraints of the source allow such an insertion.\n+/// In other words this trait indicates that an iterator pipeline can be collected in place.\n+///\n+/// [`SourceIter`]: ../../std/iter/trait.SourceIter.html\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+pub unsafe trait InPlaceIterable: Iterator {}"}, {"sha": "9ed2de7313df131bc215e993a0d65bf08829a338", "filename": "library/core/src/iter/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2d533bb9b5c247f48f7932f7e533475b59e402/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmod.rs?ref=bb2d533bb9b5c247f48f7932f7e533475b59e402", "patch": "@@ -11,5 +11,7 @@ pub use self::double_ended::DoubleEndedIterator;\n pub use self::exact_size::ExactSizeIterator;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::iterator::Iterator;\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+pub use self::marker::InPlaceIterable;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::marker::{FusedIterator, TrustedLen};"}]}