{"sha": "9869d071d101c580e1b54f077a30af8ee0fc960c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NjlkMDcxZDEwMWM1ODBlMWI1NGYwNzdhMzBhZjhlZTBmYzk2MGM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-11T00:50:48Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-11T00:51:24Z"}, "message": "Make remaining moves explicit in libstd", "tree": {"sha": "123d33a953945afed2461b7a3ea33211a8b12b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/123d33a953945afed2461b7a3ea33211a8b12b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9869d071d101c580e1b54f077a30af8ee0fc960c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9869d071d101c580e1b54f077a30af8ee0fc960c", "html_url": "https://github.com/rust-lang/rust/commit/9869d071d101c580e1b54f077a30af8ee0fc960c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9869d071d101c580e1b54f077a30af8ee0fc960c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73eb89430569d80a2f3ff124514f2905b25dbe68", "url": "https://api.github.com/repos/rust-lang/rust/commits/73eb89430569d80a2f3ff124514f2905b25dbe68", "html_url": "https://github.com/rust-lang/rust/commit/73eb89430569d80a2f3ff124514f2905b25dbe68"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "0776f22d6f40caa3157dadb8f98d5da1ba91701d", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -73,7 +73,7 @@ struct ARC<T: Const Send> { x: SharedMutableState<T> }\n \n /// Create an atomically reference counted wrapper.\n fn ARC<T: Const Send>(+data: T) -> ARC<T> {\n-    ARC { x: unsafe { shared_mutable_state(data) } }\n+    ARC { x: unsafe { shared_mutable_state(move data) } }\n }\n \n /**\n@@ -105,8 +105,8 @@ fn clone<T: Const Send>(rc: &ARC<T>) -> ARC<T> {\n  * guaranteed to deadlock.\n  */\n fn unwrap<T: Const Send>(+rc: ARC<T>) -> T {\n-    let ARC { x: x } = rc;\n-    unsafe { unwrap_shared_mutable_state(x) }\n+    let ARC { x: x } <- rc;\n+    unsafe { unwrap_shared_mutable_state(move x) }\n }\n \n /****************************************************************************\n@@ -120,7 +120,7 @@ struct MutexARC<T: Send> { x: SharedMutableState<MutexARCInner<T>> }\n \n /// Create a mutex-protected ARC with the supplied data.\n fn MutexARC<T: Send>(+user_data: T) -> MutexARC<T> {\n-    mutex_arc_with_condvars(user_data, 1)\n+    mutex_arc_with_condvars(move user_data, 1)\n }\n /**\n  * Create a mutex-protected ARC with the supplied data and a specified number\n@@ -131,7 +131,7 @@ fn mutex_arc_with_condvars<T: Send>(+user_data: T,\n     let data =\n         MutexARCInner { lock: mutex_with_condvars(num_condvars),\n                           failed: false, data: user_data };\n-    MutexARC { x: unsafe { shared_mutable_state(data) } }\n+    MutexARC { x: unsafe { shared_mutable_state(move data) } }\n }\n \n impl<T: Send> &MutexARC<T> {\n@@ -198,13 +198,13 @@ impl<T: Send> &MutexARC<T> {\n  */\n // FIXME(#2585) make this a by-move method on the arc\n fn unwrap_mutex_arc<T: Send>(+arc: MutexARC<T>) -> T {\n-    let MutexARC { x: x } = arc;\n-    let inner = unsafe { unwrap_shared_mutable_state(x) };\n-    let MutexARCInner { failed: failed, data: data, _ } = inner;\n+    let MutexARC { x: x } <- arc;\n+    let inner = unsafe { unwrap_shared_mutable_state(move x) };\n+    let MutexARCInner { failed: failed, data: data, _ } <- inner;\n     if failed {\n         fail ~\"Can't unwrap poisoned MutexARC - another task failed inside!\"\n     }\n-    data\n+    move data\n }\n \n // Common code for {mutex.access,rwlock.write}{,_cond}.\n@@ -254,7 +254,7 @@ struct RWARC<T: Const Send> {\n \n /// Create a reader/writer ARC with the supplied data.\n fn RWARC<T: Const Send>(+user_data: T) -> RWARC<T> {\n-    rw_arc_with_condvars(user_data, 1)\n+    rw_arc_with_condvars(move user_data, 1)\n }\n /**\n  * Create a reader/writer ARC with the supplied data and a specified number\n@@ -265,7 +265,7 @@ fn rw_arc_with_condvars<T: Const Send>(+user_data: T,\n     let data =\n         RWARCInner { lock: rwlock_with_condvars(num_condvars),\n                      failed: false, data: user_data };\n-    RWARC { x: unsafe { shared_mutable_state(data) }, cant_nest: () }\n+    RWARC { x: unsafe { shared_mutable_state(move data) }, cant_nest: () }\n }\n \n impl<T: Const Send> &RWARC<T> {\n@@ -344,7 +344,7 @@ impl<T: Const Send> &RWARC<T> {\n         let state = unsafe { get_shared_mutable_state(&self.x) };\n         do borrow_rwlock(state).write_downgrade |write_mode| {\n             check_poison(false, state.failed);\n-            blk(RWWriteMode((&mut state.data, write_mode,\n+            blk(RWWriteMode((&mut state.data, move write_mode,\n                               PoisonOnFail(&mut state.failed))))\n         }\n     }\n@@ -353,17 +353,17 @@ impl<T: Const Send> &RWARC<T> {\n     fn downgrade(+token: RWWriteMode/&a<T>) -> RWReadMode/&a<T> {\n         // The rwlock should assert that the token belongs to us for us.\n         let state = unsafe { get_shared_immutable_state(&self.x) };\n-        let RWWriteMode((data, t, _poison)) = token;\n+        let RWWriteMode((data, t, _poison)) <- token;\n         // Let readers in\n-        let new_token = (&state.lock).downgrade(t);\n+        let new_token = (&state.lock).downgrade(move t);\n         // Whatever region the input reference had, it will be safe to use\n         // the same region for the output reference. (The only 'unsafe' part\n         // of this cast is removing the mutability.)\n         let new_data = unsafe { unsafe::transmute_immut(data) };\n         // Downgrade ensured the token belonged to us. Just a sanity check.\n         assert ptr::ref_eq(&state.data, new_data);\n         // Produce new token\n-        RWReadMode((new_data, new_token))\n+        RWReadMode((new_data, move new_token))\n     }\n }\n \n@@ -376,13 +376,13 @@ impl<T: Const Send> &RWARC<T> {\n  */\n // FIXME(#2585) make this a by-move method on the arc\n fn unwrap_rw_arc<T: Const Send>(+arc: RWARC<T>) -> T {\n-    let RWARC { x: x, _ } = arc;\n-    let inner = unsafe { unwrap_shared_mutable_state(x) };\n-    let RWARCInner { failed: failed, data: data, _ } = inner;\n+    let RWARC { x: x, _ } <- arc;\n+    let inner = unsafe { unwrap_shared_mutable_state(move x) };\n+    let RWARCInner { failed: failed, data: data, _ } <- inner;\n     if failed {\n         fail ~\"Can't unwrap poisoned RWARC - another task failed inside!\"\n     }\n-    data\n+    move data\n }\n \n // Borrowck rightly complains about immutably aliasing the rwlock in order to"}, {"sha": "3482329efde99e5ad5d769b2baf56a41736cbe57", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -541,7 +541,7 @@ fn from_fn(len: uint, f: fn(index: uint) -> bool) -> Bitv {\n     for uint::range(0, len) |i| {\n         bitv.set(i, f(i));\n     }\n-    return bitv;\n+    move bitv\n }\n \n const uint_bits: uint = 32u + (1u << 32u >> 27u);"}, {"sha": "8948d66f7abc9b49383cc918c669e87e2bc1863a", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -46,8 +46,8 @@ impl<T> Cell<T> {\n     fn with_ref<R>(op: fn(v: &T) -> R) -> R {\n         let v = self.take();\n         let r = op(&v);\n-        self.put_back(v);\n-        return move r;\n+        self.put_back(move v);\n+        move r\n     }\n }\n "}, {"sha": "8bf0b629f54644f193242ebec6dc7e67edee03c1", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -20,11 +20,11 @@ struct DuplexStream<T: Send, U: Send> {\n \n impl<T: Send, U: Send> DuplexStream<T, U> : Channel<T> {\n     fn send(+x: T) {\n-        self.chan.send(x)\n+        self.chan.send(move x)\n     }\n \n     fn try_send(+x: T) -> bool {\n-        self.chan.try_send(x)\n+        self.chan.try_send(move x)\n     }\n }\n "}, {"sha": "0935834eb44e4ee0c3dbd8512ab21b5c271d1ea2", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -38,7 +38,7 @@ fn create<T: Copy>() -> Deque<T> {\n             i += 1u;\n         }\n \n-        return rv;\n+        move rv\n     }\n     fn get<T: Copy>(elts: DVec<Cell<T>>, i: uint) -> T {\n         match elts.get_elt(i) { Some(t) => t, _ => fail }\n@@ -111,7 +111,7 @@ fn create<T: Copy>() -> Deque<T> {\n                 vec::to_mut(\n                     vec::from_elem(initial_capacity, None)))\n     };\n-    repr as Deque::<T>\n+    move (repr as Deque::<T>)\n }\n \n #[cfg(test)]"}, {"sha": "193a2a6370b43a4252ec1d422f68274061a9b5e3", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -452,7 +452,7 @@ priv impl EbmlDeserializer {\n         let r = f();\n         self.parent = old_parent;\n         self.pos = old_pos;\n-        return r;\n+        move r\n     }\n \n     fn _next_uint(exp_tag: EbmlSerializerTag) -> uint {"}, {"sha": "d3cc11d2a311d31f0611e8dde55a8c363b889c16", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -54,7 +54,7 @@ fn find<K: Eq Ord, V: Copy>(m: Treemap<K, V>, +k: K) -> Option<V> {\n       Node(@kk, @v, left, right) => {\n         if k == kk {\n             Some(v)\n-        } else if k < kk { find(left, k) } else { find(right, k) }\n+        } else if k < kk { find(left, move k) } else { find(right, move k) }\n       }\n     }\n }"}, {"sha": "711b91d57ba5eaaa545e6e7fada5094c18a628fd", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -343,7 +343,7 @@ fn getopts(args: &[~str], opts: &[Opt]) -> Result unsafe {\n         i += 1u;\n     }\n     return Ok({opts: vec::from_slice(opts),\n-               vals: vec::from_mut(vals),\n+               vals: vec::from_mut(move vals),\n                free: free});\n }\n "}, {"sha": "79a99fb4220141159edbe448641d285a241607fd", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -646,15 +646,15 @@ pure fn lt(value0: Json, value1: Json) -> bool {\n                         let (d0_flat, d1_flat) = {\n                             let d0_flat = dvec::DVec();\n                             for d0.each |k, v| { d0_flat.push((k, v)); }\n-                            let d0_flat = dvec::unwrap(d0_flat);\n+                            let d0_flat = dvec::unwrap(move d0_flat);\n                             d0_flat.qsort();\n \n                             let mut d1_flat = dvec::DVec();\n                             for d1.each |k, v| { d1_flat.push((k, v)); }\n-                            let d1_flat = dvec::unwrap(d1_flat);\n+                            let d1_flat = dvec::unwrap(move d1_flat);\n                             d1_flat.qsort();\n \n-                            (d0_flat, d1_flat)\n+                            (move d0_flat, move d1_flat)\n                         };\n \n                         d0_flat < d1_flat"}, {"sha": "a24d360becae2d0aa3dce944584ddf00b7bb69de", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -183,7 +183,7 @@ mod chained {\n                 entry.next = new_chains[idx];\n                 new_chains[idx] = Some(entry);\n             }\n-            self.chains = new_chains;\n+            self.chains <- new_chains;\n         }\n \n         pure fn each_entry(blk: fn(@Entry<K,V>) -> bool) {"}, {"sha": "9bf893b096174723373ad71bfc1099a0fa6414b9", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -577,7 +577,7 @@ fn listen(-host_ip: ip::IpAddr, port: uint, backlog: uint,\n     -> result::Result<(), TcpListenErrData> unsafe {\n     do listen_common(host_ip, port, backlog, iotask, on_establish_cb)\n         // on_connect_cb\n-        |handle| unsafe {\n+        |move new_connect_cb, handle| unsafe {\n             let server_data_ptr = uv::ll::get_data_for_uv_handle(handle)\n                 as *TcpListenFcData;\n             let new_conn = NewTcpConn(handle);\n@@ -727,7 +727,7 @@ fn listen_common(-host_ip: ip::IpAddr, port: uint, backlog: uint,\n  * A buffered wrapper that you can cast as an `io::reader` or `io::writer`\n  */\n fn socket_buf(-sock: TcpSocket) -> TcpSocketBuf {\n-    TcpSocketBuf(@{ sock: sock, mut buf: ~[] })\n+    TcpSocketBuf(@{ sock: move sock, mut buf: ~[] })\n }\n \n /// Convenience methods extending `net::tcp::tcp_socket`\n@@ -1520,7 +1520,7 @@ mod test {\n                         log(debug,\n                             ~\"SERVER/WORKER: send on cont ch\");\n                         cont_ch.send(());\n-                        let sock = result::unwrap(accept_result);\n+                        let sock = result::unwrap(move accept_result);\n                         log(debug, ~\"SERVER: successfully accepted\"+\n                             ~\"connection!\");\n                         let received_req_bytes = read(sock, 0u);\n@@ -1607,7 +1607,7 @@ mod test {\n             Err(err_data)\n         }\n         else {\n-            let sock = result::unwrap(connect_result);\n+            let sock = result::unwrap(move connect_result);\n             let resp_bytes = str::to_bytes(resp);\n             tcp_write_single(sock, resp_bytes);\n             let read_result = sock.read(0u);"}, {"sha": "096fbdec1b93450536a7f23dfcf0ea98029d870e", "filename": "src/libstd/par.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -41,7 +41,7 @@ fn map_slices<A: Copy Send, B: Copy Send>(\n             let end = uint::min(len, base + items_per_task);\n             do vec::as_buf(xs) |p, _len| {\n                 let f = f();\n-                let f = do future_spawn() |copy base| {\n+                let f = do future_spawn() |move f, copy base| {\n                     unsafe {\n                         let len = end - base;\n                         let slice = (ptr::offset(p, base),\n@@ -55,7 +55,7 @@ fn map_slices<A: Copy Send, B: Copy Send>(\n                         f(base, slice)\n                     }\n                 };\n-                vec::push(futures, f);\n+                vec::push(futures, move f);\n             };\n             base += items_per_task;\n         }"}, {"sha": "d1dc6cb8d0220f5d17e22f26421a9fbf751c7400", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -1112,13 +1112,13 @@ mod node {\n \n         fn empty() -> T {\n             let stack : ~[mut @Node] = ~[mut];\n-            return {stack: stack, mut stackpos: -1}\n+            return {stack: move stack, mut stackpos: -1}\n         }\n \n         fn start(node: @Node) -> T {\n             let stack = vec::to_mut(vec::from_elem(height(node)+1u, node));\n             return {\n-                stack:             stack,\n+                stack:         move stack,\n                 mut stackpos:  0\n             }\n         }"}, {"sha": "e9f937f4d75b472a2f191e8abb574f242a85d7a0", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -253,7 +253,7 @@ fn sha1() -> Sha1 {\n         mut computed: false,\n         work_buf: @vec::to_mut(vec::from_elem(work_buf_len, 0u32))\n     };\n-    let sh = st as Sha1;\n+    let sh <- st as Sha1;\n     sh.reset();\n     return sh;\n }"}, {"sha": "339278d3c662f874a8faf6239e8b164301f9c5ba", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -21,7 +21,7 @@ enum SmallIntMap<T:Copy> {\n /// Create a smallintmap\n fn mk<T: Copy>() -> SmallIntMap<T> {\n     let v = DVec();\n-    return SmallIntMap_(@{v: v});\n+    return SmallIntMap_(@{v: move v});\n }\n \n /**"}, {"sha": "6719b8ad6cdeab8fc6378062990dcc0730bb2a9b", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -84,7 +84,7 @@ fn new_sem_and_signal(count: int, num_condvars: uint)\n     for num_condvars.times {\n         vec::push(queues, new_waitqueue());\n     }\n-    new_sem(count, queues)\n+    new_sem(count, move queues)\n }\n \n #[doc(hidden)]\n@@ -98,9 +98,9 @@ impl<Q: Send> &Sem<Q> {\n                     // Create waiter nobe.\n                     let (SignalEnd, WaitEnd) = pipes::oneshot();\n                     // Tell outer scope we need to block.\n-                    waiter_nobe = Some(WaitEnd);\n+                    waiter_nobe = Some(move WaitEnd);\n                     // Enqueue ourself.\n-                    state.waiters.tail.send(SignalEnd);\n+                    state.waiters.tail.send(move SignalEnd);\n                 }\n             }\n         }\n@@ -203,8 +203,8 @@ impl &Condvar {\n     fn wait_on(condvar_id: uint) {\n         // Create waiter nobe.\n         let (SignalEnd, WaitEnd) = pipes::oneshot();\n-        let mut WaitEnd   = Some(WaitEnd);\n-        let mut SignalEnd = Some(SignalEnd);\n+        let mut WaitEnd   = Some(move WaitEnd);\n+        let mut SignalEnd = Some(move SignalEnd);\n         let mut reacquire = None;\n         let mut out_of_bounds = None;\n         unsafe {\n@@ -219,7 +219,7 @@ impl &Condvar {\n                         }\n                         // Enqueue ourself to be woken up by a signaller.\n                         let SignalEnd = option::swap_unwrap(&mut SignalEnd);\n-                        state.blocked[condvar_id].tail.send(SignalEnd);\n+                        state.blocked[condvar_id].tail.send(move SignalEnd);\n                     } else {\n                         out_of_bounds = Some(vec::len(state.blocked));\n                     }"}, {"sha": "7c0e87ec1441f234e633b05587265b53c3529ced", "filename": "src/libstd/test.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -291,34 +291,34 @@ fn run_tests(opts: TestOpts, tests: ~[TestDesc],\n     debug!(\"using %u test tasks\", concurrency);\n \n     let total = vec::len(filtered_tests);\n-    let mut run_idx = 0u;\n-    let mut wait_idx = 0u;\n-    let mut done_idx = 0u;\n+    let mut run_idx = 0;\n+    let mut wait_idx = 0;\n+    let mut done_idx = 0;\n \n     let p = core::comm::Port();\n     let ch = core::comm::Chan(p);\n \n     while done_idx < total {\n         while wait_idx < concurrency && run_idx < total {\n             let test = copy filtered_tests[run_idx];\n-            if concurrency == 1u {\n+            if concurrency == 1 {\n                 // We are doing one test at a time so we can print the name\n                 // of the test before we run it. Useful for debugging tests\n                 // that hang forever.\n                 callback(TeWait(copy test));\n             }\n-            run_test(test, ch);\n-            wait_idx += 1u;\n-            run_idx += 1u;\n+            run_test(move test, ch);\n+            wait_idx += 1;\n+            run_idx += 1;\n         }\n \n         let (test, result) = core::comm::recv(p);\n-        if concurrency != 1u {\n+        if concurrency != 1 {\n             callback(TeWait(copy test));\n         }\n-        callback(TeResult(test, result));\n-        wait_idx -= 1u;\n-        done_idx += 1u;\n+        callback(TeResult(move test, result));\n+        wait_idx -= 1;\n+        done_idx += 1;\n     }\n }\n \n@@ -342,7 +342,7 @@ fn filter_tests(opts: TestOpts,\n \n     // Remove tests that don't match the test filter\n     filtered = if option::is_none(opts.filter) {\n-        filtered\n+        move filtered\n     } else {\n         let filter_str =\n             match opts.filter {\n@@ -362,7 +362,7 @@ fn filter_tests(opts: TestOpts,\n \n     // Maybe pull out the ignored test and unignore them\n     filtered = if !opts.run_ignored {\n-        filtered\n+        move filtered\n     } else {\n         fn filter(test: TestDesc) -> Option<TestDesc> {\n             if test.ignore {\n@@ -384,7 +384,7 @@ fn filter_tests(opts: TestOpts,\n         sort::merge_sort(lteq, filtered)\n     };\n \n-    return filtered;\n+    move filtered\n }\n \n type TestFuture = {test: TestDesc, wait: fn@() -> TestResult};\n@@ -395,12 +395,12 @@ fn run_test(+test: TestDesc, monitor_ch: comm::Chan<MonitorMsg>) {\n         return;\n     }\n \n-    do task::spawn {\n+    do task::spawn |move test| {\n         let testfn = copy test.fn;\n         let mut result_future = None; // task::future_result(builder);\n         task::task().unlinked().future_result(|+r| {\n-            result_future = Some(r);\n-        }).spawn(testfn);\n+            result_future = Some(move r);\n+        }).spawn(move testfn);\n         let task_result = future::get(&option::unwrap(result_future));\n         let test_result = calc_result(test, task_result == task::Success);\n         comm::send(monitor_ch, (copy test, test_result));"}, {"sha": "398a5dd344acd1d8872e4538e7ac47070f566b01", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9869d071d101c580e1b54f077a30af8ee0fc960c/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=9869d071d101c580e1b54f077a30af8ee0fc960c", "patch": "@@ -64,7 +64,7 @@ fn spawn_iotask(-task: task::TaskBuilder) -> IoTask {\n  */\n unsafe fn interact(iotask: IoTask,\n                    -cb: fn~(*c_void)) {\n-    send_msg(iotask, Interaction(cb));\n+    send_msg(iotask, Interaction(move cb));\n }\n \n /**\n@@ -129,7 +129,7 @@ type IoTaskLoopData = {\n \n fn send_msg(iotask: IoTask,\n             -msg: IoTaskMsg) unsafe {\n-    iotask.op_chan.send(msg);\n+    iotask.op_chan.send(move msg);\n     ll::async_send(iotask.async_handle);\n }\n "}]}