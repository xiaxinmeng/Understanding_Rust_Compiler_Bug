{"sha": "31965860c797d07bc5f9d217874323b4f361bc0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOTY1ODYwYzc5N2QwN2JjNWY5ZDIxNzg3NDMyM2I0ZjM2MWJjMGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-08T02:12:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-08T02:12:58Z"}, "message": "rustc: Resolve constructor expressions for variant structs", "tree": {"sha": "831f869e127344bb0d0320a4c512eed607315a19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/831f869e127344bb0d0320a4c512eed607315a19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31965860c797d07bc5f9d217874323b4f361bc0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31965860c797d07bc5f9d217874323b4f361bc0c", "html_url": "https://github.com/rust-lang/rust/commit/31965860c797d07bc5f9d217874323b4f361bc0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31965860c797d07bc5f9d217874323b4f361bc0c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "html_url": "https://github.com/rust-lang/rust/commit/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "3eef3d118f7eaaf836250bfc975f99a5a945db87", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/31965860c797d07bc5f9d217874323b4f361bc0c/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31965860c797d07bc5f9d217874323b4f361bc0c/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=31965860c797d07bc5f9d217874323b4f361bc0c", "patch": "@@ -33,7 +33,8 @@ import syntax::ast::{lt, method, mul, ne, neg, node_id, pat, pat_enum};\n import syntax::ast::{pat_ident, path, prim_ty, pat_box, pat_uniq, pat_lit};\n import syntax::ast::{pat_range, pat_rec, pat_struct, pat_tup, pat_wild};\n import syntax::ast::{provided, required, rem, self_ty_, shl, stmt_decl};\n-import syntax::ast::{sty_static, subtract, ty};\n+import syntax::ast::{struct_variant_kind, sty_static, subtract};\n+import syntax::ast::{tuple_variant_kind, ty};\n import syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i};\n import syntax::ast::{ty_i16, ty_i32, ty_i64, ty_i8, ty_int, ty_param};\n import syntax::ast::{ty_path, ty_str, ty_u, ty_u16, ty_u32, ty_u64, ty_u8};\n@@ -1114,10 +1115,8 @@ class Resolver {\n         }\n     }\n \n-    /**\n-     * Constructs the reduced graph for one variant. Variants exist in the\n-     * type namespace.\n-     */\n+    // Constructs the reduced graph for one variant. Variants exist in the\n+    // type and/or value namespaces.\n     fn build_reduced_graph_for_variant(variant: variant,\n                                        item_id: def_id,\n                                        parent: ReducedGraphParent,\n@@ -1127,8 +1126,19 @@ class Resolver {\n         let (child, _) = self.add_child(atom, parent, ~[ValueNS],\n                                         variant.span);\n \n-        (*child).define_value(def_variant(item_id,\n-                                local_def(variant.node.id)), variant.span);\n+        match variant.node.kind {\n+            tuple_variant_kind(_) => {\n+                (*child).define_value(def_variant(item_id,\n+                                                  local_def(variant.node.id)),\n+                                      variant.span);\n+            }\n+            struct_variant_kind(_) => {\n+                (*child).define_type(def_variant(item_id,\n+                                                 local_def(variant.node.id)),\n+                                     variant.span);\n+                self.structs.insert(local_def(variant.node.id), false);\n+            }\n+        }\n     }\n \n     /**\n@@ -4018,13 +4028,17 @@ class Resolver {\n \n                 pat_struct(path, _, _) => {\n                     match self.resolve_path(path, TypeNS, false, visitor) {\n-                        some(definition @ def_ty(class_id))\n+                        some(def_ty(class_id))\n                                 if self.structs.contains_key(class_id) => {\n                             let has_constructor = self.structs.get(class_id);\n                             let class_def = def_class(class_id,\n                                                       has_constructor);\n                             self.record_def(pattern.id, class_def);\n                         }\n+                        some(definition @ def_variant(_, variant_id))\n+                                if self.structs.contains_key(variant_id) => {\n+                            self.record_def(pattern.id, definition);\n+                        }\n                         _ => {\n                             self.session.span_err(path.span,\n                                                   fmt!(\"`%s` does not name a \\\n@@ -4450,13 +4464,16 @@ class Resolver {\n                 //    let bar = Bar { ... } // no type parameters\n \n                 match self.resolve_path(path, TypeNS, false, visitor) {\n-                    some(definition @ def_ty(class_id))\n+                    some(def_ty(class_id))\n                             if self.structs.contains_key(class_id) => {\n-\n                         let has_constructor = self.structs.get(class_id);\n                         let class_def = def_class(class_id, has_constructor);\n                         self.record_def(expr.id, class_def);\n                     }\n+                    some(definition @ def_variant(_, class_id))\n+                            if self.structs.contains_key(class_id) => {\n+                        self.record_def(expr.id, definition);\n+                    }\n                     _ => {\n                         self.session.span_err(path.span,\n                                               fmt!{\"`%s` does not name a \\"}]}