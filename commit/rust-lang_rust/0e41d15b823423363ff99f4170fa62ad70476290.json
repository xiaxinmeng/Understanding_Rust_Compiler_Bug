{"sha": "0e41d15b823423363ff99f4170fa62ad70476290", "node_id": "C_kwDOAAsO6NoAKDBlNDFkMTViODIzNDIzMzYzZmY5OWY0MTcwZmE2MmFkNzA0NzYyOTA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-15T16:04:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-15T16:06:33Z"}, "message": "Use the correct crates proc-macro loading error message", "tree": {"sha": "8eaf57f0597e1be7ae6faab787f4bc1f9b26dbd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eaf57f0597e1be7ae6faab787f4bc1f9b26dbd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e41d15b823423363ff99f4170fa62ad70476290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e41d15b823423363ff99f4170fa62ad70476290", "html_url": "https://github.com/rust-lang/rust/commit/0e41d15b823423363ff99f4170fa62ad70476290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e41d15b823423363ff99f4170fa62ad70476290/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d34cdcac07b23dafa7826ecf73ce2008b4be479", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d34cdcac07b23dafa7826ecf73ce2008b4be479", "html_url": "https://github.com/rust-lang/rust/commit/1d34cdcac07b23dafa7826ecf73ce2008b4be479"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "536eecf0206f3766fb93ecfd9cb99f0b04a16091", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=0e41d15b823423363ff99f4170fa62ad70476290", "patch": "@@ -103,6 +103,8 @@ pub struct DefMap {\n     /// Side table for resolving derive helpers.\n     exported_derives: FxHashMap<MacroDefId, Box<[Name]>>,\n     fn_proc_macro_mapping: FxHashMap<FunctionId, ProcMacroId>,\n+    /// The error that occurred when failing to load the proc-macro dll.\n+    proc_macro_loading_error: Option<Box<str>>,\n \n     /// Custom attributes registered with `#![register_attr]`.\n     registered_attrs: Vec<SmolStr>,\n@@ -273,6 +275,7 @@ impl DefMap {\n             extern_prelude: FxHashMap::default(),\n             exported_derives: FxHashMap::default(),\n             fn_proc_macro_mapping: FxHashMap::default(),\n+            proc_macro_loading_error: None,\n             prelude: None,\n             root,\n             modules,\n@@ -305,6 +308,9 @@ impl DefMap {\n     pub fn fn_as_proc_macro(&self, id: FunctionId) -> Option<ProcMacroId> {\n         self.fn_proc_macro_mapping.get(&id).copied()\n     }\n+    pub fn proc_macro_loading_error(&self) -> Option<&str> {\n+        self.proc_macro_loading_error.as_deref()\n+    }\n \n     pub(crate) fn krate(&self) -> CrateId {\n         self.krate\n@@ -460,6 +466,7 @@ impl DefMap {\n             registered_attrs,\n             registered_tools,\n             fn_proc_macro_mapping,\n+            proc_macro_loading_error: _,\n             block: _,\n             edition: _,\n             recursion_limit: _,"}, {"sha": "6a9f569ea813ecd51873f450a6388ab9ef90a144", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=0e41d15b823423363ff99f4170fa62ad70476290", "patch": "@@ -74,26 +74,25 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n     }\n \n     let cfg_options = &krate.cfg_options;\n-    let (proc_macros, proc_macro_err) = match &krate.proc_macro {\n+    let proc_macros = match &krate.proc_macro {\n         Ok(proc_macros) => {\n-            (\n-                proc_macros\n-                    .iter()\n-                    .enumerate()\n-                    .map(|(idx, it)| {\n-                        // FIXME: a hacky way to create a Name from string.\n-                        let name =\n-                            tt::Ident { text: it.name.clone(), id: tt::TokenId::unspecified() };\n-                        (\n-                            name.as_name(),\n-                            ProcMacroExpander::new(def_map.krate, base_db::ProcMacroId(idx as u32)),\n-                        )\n-                    })\n-                    .collect(),\n-                None,\n-            )\n+            proc_macros\n+                .iter()\n+                .enumerate()\n+                .map(|(idx, it)| {\n+                    // FIXME: a hacky way to create a Name from string.\n+                    let name = tt::Ident { text: it.name.clone(), id: tt::TokenId::unspecified() };\n+                    (\n+                        name.as_name(),\n+                        ProcMacroExpander::new(def_map.krate, base_db::ProcMacroId(idx as u32)),\n+                    )\n+                })\n+                .collect()\n+        }\n+        Err(e) => {\n+            def_map.proc_macro_loading_error = Some(e.clone().into_boxed_str());\n+            Vec::new()\n         }\n-        Err(e) => (Vec::new(), Some(e.clone())),\n     };\n     let is_proc_macro = krate.is_proc_macro;\n \n@@ -108,7 +107,6 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         mod_dirs: FxHashMap::default(),\n         cfg_options,\n         proc_macros,\n-        proc_macro_err,\n         from_glob_import: Default::default(),\n         skip_attrs: Default::default(),\n         derive_helpers_in_scope: Default::default(),\n@@ -250,7 +248,6 @@ struct DefCollector<'a> {\n     /// empty when proc. macro support is disabled (in which case we still do name resolution for\n     /// them).\n     proc_macros: Vec<(Name, ProcMacroExpander)>,\n-    proc_macro_err: Option<String>,\n     is_proc_macro: bool,\n     from_glob_import: PerNsGlobImports,\n     /// If we fail to resolve an attribute on a `ModItem`, we fall back to ignoring the attribute.\n@@ -1147,7 +1144,7 @@ impl DefCollector<'_> {\n                                     invoc_attr_index: attr.id.ast_index,\n                                     is_derive: false,\n                                 },\n-                                self.proc_macro_err.clone(),\n+                                None,\n                             ));\n                             return true;\n                         }\n@@ -1254,7 +1251,7 @@ impl DefCollector<'_> {\n                             self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n                                 directive.module_id,\n                                 loc.kind,\n-                                self.proc_macro_err.clone(),\n+                                Some(loc.def.krate),\n                             ));\n \n                             return recollect_without(self);\n@@ -1309,7 +1306,7 @@ impl DefCollector<'_> {\n                     DefDiagnostic::unresolved_proc_macro(\n                         module_id,\n                         loc.kind.clone(),\n-                        self.proc_macro_err.clone(),\n+                        Some(loc.def.krate),\n                     )\n                 }\n                 _ => DefDiagnostic::macro_error(module_id, loc.kind.clone(), err.to_string()),\n@@ -2124,7 +2121,6 @@ mod tests {\n             mod_dirs: FxHashMap::default(),\n             cfg_options: &CfgOptions::default(),\n             proc_macros: Default::default(),\n-            proc_macro_err: None,\n             from_glob_import: Default::default(),\n             skip_attrs: Default::default(),\n             derive_helpers_in_scope: Default::default(),"}, {"sha": "3ebc5629d7c0188111f6b273d1bb61d07804b0aa", "filename": "crates/hir-def/src/nameres/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=0e41d15b823423363ff99f4170fa62ad70476290", "patch": "@@ -1,5 +1,6 @@\n //! Diagnostics emitted during DefMap construction.\n \n+use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use hir_expand::MacroCallKind;\n use la_arena::Idx;\n@@ -23,7 +24,7 @@ pub enum DefDiagnosticKind {\n \n     UnconfiguredCode { ast: AstId<ast::Item>, cfg: CfgExpr, opts: CfgOptions },\n \n-    UnresolvedProcMacro { ast: MacroCallKind, proc_macro_err: Option<String> },\n+    UnresolvedProcMacro { ast: MacroCallKind, krate: Option<CrateId> },\n \n     UnresolvedMacroCall { ast: MacroCallKind, path: ModPath },\n \n@@ -84,12 +85,9 @@ impl DefDiagnostic {\n     pub(super) fn unresolved_proc_macro(\n         container: LocalModuleId,\n         ast: MacroCallKind,\n-        proc_macro_err: Option<String>,\n+        krate: Option<CrateId>,\n     ) -> Self {\n-        Self {\n-            in_module: container,\n-            kind: DefDiagnosticKind::UnresolvedProcMacro { ast, proc_macro_err },\n-        }\n+        Self { in_module: container, kind: DefDiagnosticKind::UnresolvedProcMacro { ast, krate } }\n     }\n \n     pub(super) fn macro_error("}, {"sha": "1f65c05c1eabbc54438dea43e8fc52542fdb5cc8", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=0e41d15b823423363ff99f4170fa62ad70476290", "patch": "@@ -3,6 +3,7 @@\n //!\n //! This probably isn't the best way to do this -- ideally, diagnistics should\n //! be expressed in terms of hir types themselves.\n+use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n use hir_def::path::ModPath;\n@@ -87,7 +88,8 @@ pub struct UnresolvedProcMacro {\n     pub precise_location: Option<TextRange>,\n     pub macro_name: Option<String>,\n     pub kind: MacroKind,\n-    pub proc_macro_err: Option<String>,\n+    /// The crate id of the proc-macro this macro belongs to, or `None` if the proc-macro can't be found.\n+    pub krate: Option<CrateId>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "3f0d586bf64443f163aa3148b42bd34feccf506c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0e41d15b823423363ff99f4170fa62ad70476290", "patch": "@@ -627,7 +627,7 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n             );\n         }\n \n-        DefDiagnosticKind::UnresolvedProcMacro { ast, proc_macro_err } => {\n+        DefDiagnosticKind::UnresolvedProcMacro { ast, krate } => {\n             let (node, precise_location, macro_name, kind) = match ast {\n                 MacroCallKind::FnLike { ast_id, .. } => {\n                     let node = ast_id.to_node(db.upcast());\n@@ -690,14 +690,8 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n                 }\n             };\n             acc.push(\n-                UnresolvedProcMacro {\n-                    node,\n-                    precise_location,\n-                    macro_name,\n-                    kind,\n-                    proc_macro_err: proc_macro_err.clone(),\n-                }\n-                .into(),\n+                UnresolvedProcMacro { node, precise_location, macro_name, kind, krate: *krate }\n+                    .into(),\n             );\n         }\n \n@@ -1172,7 +1166,7 @@ impl DefWithBody {\n                         precise_location: None,\n                         macro_name: None,\n                         kind: MacroKind::ProcMacro,\n-                        proc_macro_err: None,\n+                        krate: None,\n                     }\n                     .into(),\n                 ),"}, {"sha": "5ebfe33dab10bcd20f5980d417d70689308a3f67", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e41d15b823423363ff99f4170fa62ad70476290/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=0e41d15b823423363ff99f4170fa62ad70476290", "patch": "@@ -1,3 +1,5 @@\n+use hir::db::DefDatabase;\n+\n use crate::{Diagnostic, DiagnosticsContext, Severity};\n \n // Diagnostic: unresolved-proc-macro\n@@ -30,10 +32,11 @@ pub(crate) fn unresolved_proc_macro(\n         None => \"proc macro not expanded\".to_string(),\n     };\n     let severity = if config_enabled { Severity::Error } else { Severity::WeakWarning };\n+    let def_map = d.krate.map(|krate| ctx.sema.db.crate_def_map(krate));\n     let message = format!(\n         \"{message}: {}\",\n         if config_enabled {\n-            match &d.proc_macro_err {\n+            match def_map.as_ref().and_then(|def_map| def_map.proc_macro_loading_error()) {\n                 Some(e) => e,\n                 None => \"proc macro not found\",\n             }"}]}