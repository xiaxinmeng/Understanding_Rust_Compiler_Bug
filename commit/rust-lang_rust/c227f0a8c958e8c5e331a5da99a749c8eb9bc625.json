{"sha": "c227f0a8c958e8c5e331a5da99a749c8eb9bc625", "node_id": "C_kwDOAAsO6NoAKGMyMjdmMGE4Yzk1OGU4YzVlMzMxYTVkYTk5YTc0OWM4ZWI5YmM2MjU", "commit": {"author": {"name": "Quinn Painter", "email": "quinn@geekymonkey.com", "date": "2022-09-09T18:51:58Z"}, "committer": {"name": "Quinn Painter", "email": "quinn@geekymonkey.com", "date": "2022-09-09T18:51:58Z"}, "message": "remove DS stuff from docs + change to use thumb_base", "tree": {"sha": "d035a1750cbe6d00aae34a93b553609bac478f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d035a1750cbe6d00aae34a93b553609bac478f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c227f0a8c958e8c5e331a5da99a749c8eb9bc625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c227f0a8c958e8c5e331a5da99a749c8eb9bc625", "html_url": "https://github.com/rust-lang/rust/commit/c227f0a8c958e8c5e331a5da99a749c8eb9bc625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c227f0a8c958e8c5e331a5da99a749c8eb9bc625/comments", "author": {"login": "QuinnPainter", "id": 1771999, "node_id": "MDQ6VXNlcjE3NzE5OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1771999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuinnPainter", "html_url": "https://github.com/QuinnPainter", "followers_url": "https://api.github.com/users/QuinnPainter/followers", "following_url": "https://api.github.com/users/QuinnPainter/following{/other_user}", "gists_url": "https://api.github.com/users/QuinnPainter/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuinnPainter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuinnPainter/subscriptions", "organizations_url": "https://api.github.com/users/QuinnPainter/orgs", "repos_url": "https://api.github.com/users/QuinnPainter/repos", "events_url": "https://api.github.com/users/QuinnPainter/events{/privacy}", "received_events_url": "https://api.github.com/users/QuinnPainter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuinnPainter", "id": 1771999, "node_id": "MDQ6VXNlcjE3NzE5OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1771999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuinnPainter", "html_url": "https://github.com/QuinnPainter", "followers_url": "https://api.github.com/users/QuinnPainter/followers", "following_url": "https://api.github.com/users/QuinnPainter/following{/other_user}", "gists_url": "https://api.github.com/users/QuinnPainter/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuinnPainter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuinnPainter/subscriptions", "organizations_url": "https://api.github.com/users/QuinnPainter/orgs", "repos_url": "https://api.github.com/users/QuinnPainter/repos", "events_url": "https://api.github.com/users/QuinnPainter/events{/privacy}", "received_events_url": "https://api.github.com/users/QuinnPainter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0377c7164caf86a839bd701813c8ef7adab793", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0377c7164caf86a839bd701813c8ef7adab793", "html_url": "https://github.com/rust-lang/rust/commit/7b0377c7164caf86a839bd701813c8ef7adab793"}], "stats": {"total": 26, "additions": 5, "deletions": 21}, "files": [{"sha": "dfd27b6547467bd9aa70cabebed7e75d70e51f02", "filename": "compiler/rustc_target/src/spec/armv5te_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c227f0a8c958e8c5e331a5da99a749c8eb9bc625/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c227f0a8c958e8c5e331a5da99a749c8eb9bc625/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_none_eabi.rs?ref=c227f0a8c958e8c5e331a5da99a749c8eb9bc625", "patch": "@@ -1,6 +1,6 @@\n //! Targets the ARMv5TE, with code as `a32` code by default.\n \n-use crate::spec::{cvs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+use crate::spec::{cvs, FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n@@ -20,8 +20,6 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             abi: \"eabi\".into(),\n-            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            linker: Some(\"rust-lld\".into()),\n             // extra args passed to the external assembler (assuming `arm-none-eabi-as`):\n             // * activate t32/a32 interworking\n             // * use arch ARMv5TE\n@@ -31,18 +29,13 @@ pub fn target() -> Target {\n             // Also force-enable 32-bit atomics, which allows the use of atomic load/store only.\n             // The resulting atomics are ABI incompatible with atomics backed by libatomic.\n             features: \"+soft-float,+strict-align,+atomics-32\".into(),\n+            frame_pointer: FramePointer::MayOmit,\n             main_needs_argc_argv: false,\n             // don't have atomic compare-and-swap\n             atomic_cas: false,\n             has_thumb_interworking: true,\n-            relocation_model: RelocModel::Static,\n-            panic_strategy: PanicStrategy::Abort,\n-            // from thumb_base, rust-lang/rust#44993.\n-            emit_debug_gdb_scripts: false,\n-            // from thumb_base, apparently gcc/clang give enums a minimum of 8 bits on no-os targets\n-            c_enum_min_bits: 8,\n \n-            ..Default::default()\n+            ..super::thumb_base::opts()\n         },\n     }\n }"}, {"sha": "f469dab1c42faaf78db9fd9aabe66c773e71342c", "filename": "src/doc/rustc/src/platform-support/armv5te-none-eabi.md", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c227f0a8c958e8c5e331a5da99a749c8eb9bc625/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv5te-none-eabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/c227f0a8c958e8c5e331a5da99a749c8eb9bc625/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv5te-none-eabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv5te-none-eabi.md?ref=c227f0a8c958e8c5e331a5da99a749c8eb9bc625", "patch": "@@ -3,13 +3,10 @@\n **Tier: 3**\n \n Bare-metal target for any cpu in the ARMv5TE architecture family, supporting\n-ARM/Thumb code interworking (aka `a32`/`t32`), with ARM code as the default code\n+ARM/Thumb code interworking (aka `a32`/`t32`), with `a32` code as the default code\n generation.\n \n-The `thumbv5te-none-eabi` target is the same as this one, but with THUMB code as the default.\n-\n-In particular this supports the main CPU of the Nintendo DS, but there's nothing DS\n-specific with this target, so any ARMv5TE device should work fine.\n+The `thumbv5te-none-eabi` target is the same as this one, but the instruction set defaults to `t32`.\n \n ## Target Maintainers\n \n@@ -59,12 +56,6 @@ Most of `core` should work as expected, with the following notes:\n \n Rust programs are output as ELF files.\n \n-For running on DS hardware, you'll need to use an external tool to bundle this ELF file into an NDS binary. The `ndstool` utility included with devkitARM is one such tool that can do this for you:\n-\n-```shell\n-ndstool -c [out_nds] -9 [in_elf]\n-```\n-\n ## Testing\n \n This is a cross-compiled target that you will need to emulate during testing."}]}