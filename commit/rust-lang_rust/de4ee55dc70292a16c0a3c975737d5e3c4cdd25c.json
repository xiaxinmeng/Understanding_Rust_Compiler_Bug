{"sha": "de4ee55dc70292a16c0a3c975737d5e3c4cdd25c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNGVlNTVkYzcwMjkyYTE2YzBhM2M5NzU3MzdkNWUzYzRjZGQyNWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-30T11:59:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-20T11:21:40Z"}, "message": "Remove get_reloc_model and target_cpu dependency from most of link.rs", "tree": {"sha": "99fae5db00f65a57f9fd175492f2a2ee7fa85f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99fae5db00f65a57f9fd175492f2a2ee7fa85f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de4ee55dc70292a16c0a3c975737d5e3c4cdd25c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de4ee55dc70292a16c0a3c975737d5e3c4cdd25c", "html_url": "https://github.com/rust-lang/rust/commit/de4ee55dc70292a16c0a3c975737d5e3c4cdd25c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de4ee55dc70292a16c0a3c975737d5e3c4cdd25c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8bce01a04958337dc39b895655f8aa2e577b6d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bce01a04958337dc39b895655f8aa2e577b6d2", "html_url": "https://github.com/rust-lang/rust/commit/d8bce01a04958337dc39b895655f8aa2e577b6d2"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "021d185da791503b06dce3717e68f34d5bdba28b", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de4ee55dc70292a16c0a3c975737d5e3c4cdd25c/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ee55dc70292a16c0a3c975737d5e3c4cdd25c/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=de4ee55dc70292a16c0a3c975737d5e3c4cdd25c", "patch": "@@ -2,8 +2,6 @@ use super::archive::LlvmArchiveBuilder;\n use super::rpath::RPathConfig;\n use super::rpath;\n use crate::back::wasm;\n-use crate::context::get_reloc_model;\n-use crate::llvm;\n use rustc_codegen_ssa::{METADATA_FILENAME, RLIB_BYTECODE_EXTENSION};\n use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n use rustc_codegen_ssa::back::linker::Linker;\n@@ -40,6 +38,7 @@ pub(crate) fn link_binary<'a>(sess: &'a Session,\n                           codegen_results: &CodegenResults,\n                           outputs: &OutputFilenames,\n                           crate_name: &str) -> Vec<PathBuf> {\n+    let target_cpu = crate::llvm_util::target_cpu(sess);\n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-codegen, as they will error.\n@@ -58,7 +57,8 @@ pub(crate) fn link_binary<'a>(sess: &'a Session,\n                                            codegen_results,\n                                            crate_type,\n                                            outputs,\n-                                           crate_name);\n+                                           crate_name,\n+                                           target_cpu);\n         out_filenames.extend(out_files);\n     }\n \n@@ -92,7 +92,8 @@ fn link_binary_output<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n                       codegen_results: &CodegenResults,\n                       crate_type: config::CrateType,\n                       outputs: &OutputFilenames,\n-                      crate_name: &str) -> Vec<PathBuf> {\n+                      crate_name: &str,\n+                      target_cpu: &str) -> Vec<PathBuf> {\n     for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n         check_file_is_writeable(obj, sess);\n     }\n@@ -134,7 +135,7 @@ fn link_binary_output<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n                 link_staticlib::<B>(sess, codegen_results, &out_filename, &tmpdir);\n             }\n             _ => {\n-                link_natively::<B>(sess, crate_type, &out_filename, codegen_results, tmpdir.path());\n+                link_natively::<B>(sess, crate_type, &out_filename, codegen_results, tmpdir.path(), target_cpu);\n             }\n         }\n         out_filenames.push(out_filename);\n@@ -167,11 +168,6 @@ fn emit_metadata<'a>(\n     out_filename\n }\n \n-enum RlibFlavor {\n-    Normal,\n-    StaticlibBase,\n-}\n-\n // Create an 'rlib'\n //\n // An rlib in its current incarnation is essentially a renamed .a file. The\n@@ -354,7 +350,8 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n                  crate_type: config::CrateType,\n                  out_filename: &Path,\n                  codegen_results: &CodegenResults,\n-                 tmpdir: &Path) {\n+                 tmpdir: &Path,\n+                 target_cpu: &str) {\n     info!(\"preparing {:?} to {:?}\", crate_type, out_filename);\n     let (linker, flavor) = linker_and_flavor(sess);\n \n@@ -407,7 +404,6 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n     }\n \n     {\n-        let target_cpu = crate::llvm_util::target_cpu(sess);\n         let mut linker = codegen_results.linker_info.to_linker(cmd, &sess, flavor, target_cpu);\n         link_args::<B>(&mut *linker, flavor, sess, crate_type, tmpdir,\n                   out_filename, codegen_results);\n@@ -663,8 +659,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n             let more_args = &sess.opts.cg.link_arg;\n             let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n \n-            if get_reloc_model(sess) == llvm::RelocMode::PIC\n-                && !sess.crt_static() && !args.any(|x| *x == \"-static\") {\n+            if is_pic(sess) && !sess.crt_static() && !args.any(|x| *x == \"-static\") {\n                 position_independent_executable = true;\n             }\n         }\n@@ -1106,3 +1101,12 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n                             parent.unwrap_or(Path::new(\"\")));\n     }\n }\n+\n+fn is_pic(sess: &Session) -> bool {\n+    let reloc_model_arg = match sess.opts.cg.relocation_model {\n+        Some(ref s) => &s[..],\n+        None => &sess.target.target.options.relocation_model[..],\n+    };\n+\n+    reloc_model_arg == \"pic\"\n+}"}, {"sha": "f97f78b7feb918f4024bc2a3d902dadf02b440be", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de4ee55dc70292a16c0a3c975737d5e3c4cdd25c/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ee55dc70292a16c0a3c975737d5e3c4cdd25c/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=de4ee55dc70292a16c0a3c975737d5e3c4cdd25c", "patch": "@@ -258,7 +258,7 @@ pub fn archive_search_paths(sess: &Session) -> Vec<PathBuf> {\n     sess.target_filesearch(PathKind::Native).search_path_dirs()\n }\n \n-enum RlibFlavor {\n+pub enum RlibFlavor {\n     Normal,\n     StaticlibBase,\n }"}]}