{"sha": "57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZWJkMjhmZGI2OWQ3Y2M0ZGYzZGUzNDM2NjRlNjY5OGE0YjU1ZjA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-03T17:34:48Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-11T05:41:16Z"}, "message": "rustc: use ConstVal::Unevaluated instead of mir::Literal::Item.", "tree": {"sha": "1b87f10587551665882ba4195f76554414b76954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b87f10587551665882ba4195f76554414b76954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "html_url": "https://github.com/rust-lang/rust/commit/57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74349fa2884013389ace2ed0a098cb08983d8740", "url": "https://api.github.com/repos/rust-lang/rust/commits/74349fa2884013389ace2ed0a098cb08983d8740", "html_url": "https://github.com/rust-lang/rust/commit/74349fa2884013389ace2ed0a098cb08983d8740"}], "stats": {"total": 83, "additions": 33, "deletions": 50}, "files": [{"sha": "dce1639b375b781587fb1be335e0d94045312478", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "patch": "@@ -493,10 +493,6 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::L\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n-            mir::Literal::Item { def_id, substs } => {\n-                def_id.hash_stable(hcx, hasher);\n-                substs.hash_stable(hcx, hasher);\n-            }\n             mir::Literal::Value { ref value } => {\n                 value.hash_stable(hcx, hasher);\n             }"}, {"sha": "38dfe010c153cc14af61ca38ad7cbc07c2e6f829", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "patch": "@@ -1479,10 +1479,6 @@ newtype_index!(Promoted, \"promoted\");\n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum Literal<'tcx> {\n-    Item {\n-        def_id: DefId,\n-        substs: &'tcx Substs<'tcx>,\n-    },\n     Value {\n         value: &'tcx ty::Const<'tcx>,\n     },\n@@ -1502,9 +1498,6 @@ impl<'tcx> Debug for Literal<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         use self::Literal::*;\n         match *self {\n-            Item { def_id, substs } => {\n-                ppaux::parameterized(fmt, substs, def_id, &[])\n-            }\n             Value { value } => {\n                 write!(fmt, \"const \")?;\n                 fmt_const_val(fmt, &value.val)\n@@ -2002,17 +1995,16 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for Literal<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n-            Literal::Item { def_id, substs } => Literal::Item {\n-                def_id,\n-                substs: substs.fold_with(folder)\n+            Literal::Value { value } => Literal::Value {\n+                value: value.fold_with(folder)\n             },\n-            _ => self.clone()\n+            Literal::Promoted { index } => Literal::Promoted { index }\n         }\n     }\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n-            Literal::Item { substs, .. } => substs.visit_with(visitor),\n-            _ => false\n+            Literal::Value { value } => value.visit_with(visitor),\n+            Literal::Promoted { .. } => false\n         }\n     }\n }"}, {"sha": "37c97ad3dad9058aa763e8f15c84ef0bb485705f", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "patch": "@@ -724,11 +724,6 @@ macro_rules! make_mir_visitor {\n                              literal: & $($mutability)* Literal<'tcx>,\n                              location: Location) {\n                 match *literal {\n-                    Literal::Item { ref $($mutability)* def_id,\n-                                    ref $($mutability)* substs } => {\n-                        self.visit_def_id(def_id, location);\n-                        self.visit_substs(substs, location);\n-                    }\n                     Literal::Value { ref $($mutability)* value } => {\n                         self.visit_const(value, location);\n                     }"}, {"sha": "45449103c8083fde0b139e22f1b5e2450dbf3c97", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "patch": "@@ -643,9 +643,11 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         Def::Const(def_id) |\n         Def::AssociatedConst(def_id) => ExprKind::Literal {\n-            literal: Literal::Item {\n-                def_id,\n-                substs,\n+            literal: Literal::Value {\n+                value: cx.tcx.mk_const(ty::Const {\n+                    val: ConstVal::Unevaluated(def_id, substs),\n+                    ty: cx.tables().node_id_to_type(expr.hir_id)\n+                }),\n             },\n         },\n "}, {"sha": "5550fb2788eaf088dfe1e564489d2630ee7db6c4", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "patch": "@@ -20,6 +20,7 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc::hir;\n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n+use rustc::middle::const_val::ConstVal;\n use rustc::traits::{self, Reveal};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n@@ -622,10 +623,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n             }\n             Operand::Constant(ref constant) => {\n-                if let Literal::Item { def_id, substs: _ } = constant.literal {\n+                if let Literal::Value {\n+                    value: &ty::Const { val: ConstVal::Unevaluated(def_id, _), ty }\n+                } = constant.literal {\n                     // Don't peek inside trait associated constants.\n                     if self.tcx.trait_of_item(def_id).is_some() {\n-                        self.add_type(constant.ty);\n+                        self.add_type(ty);\n                     } else {\n                         let (bits, _) = self.tcx.at(constant.span).mir_const_qualif(def_id);\n \n@@ -635,7 +638,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         // Just in case the type is more specific than\n                         // the definition, e.g. impl associated const\n                         // with type parameters, take it into account.\n-                        self.qualif.restrict(constant.ty, self.tcx, self.param_env);\n+                        self.qualif.restrict(ty, self.tcx, self.param_env);\n                     }\n \n                     // Let `const fn` transitively have destructors,"}, {"sha": "1fa49614580a3a19b091faf077d6361062a0e75a", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "patch": "@@ -235,7 +235,6 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n                      location: Location) {\n         self.record(\"Literal\", literal);\n         self.record(match *literal {\n-            Literal::Item { .. } => \"Literal::Item\",\n             Literal::Value { .. } => \"Literal::Value\",\n             Literal::Promoted { .. } => \"Literal::Promoted\",\n         }, literal);"}, {"sha": "3bf709ff7ba9d227fa679e3d2edc7fa022c5754e", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "patch": "@@ -193,6 +193,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n+use rustc::middle::const_val::ConstVal;\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem};\n use rustc::traits;\n use rustc::ty::subst::Substs;\n@@ -564,24 +565,17 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_rvalue(rvalue, location);\n     }\n \n-    fn visit_constant(&mut self, constant: &mir::Constant<'tcx>, location: Location) {\n-        debug!(\"visiting constant {:?} @ {:?}\", *constant, location);\n+    fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, location: Location) {\n+        debug!(\"visiting const {:?} @ {:?}\", *constant, location);\n \n-        if let ty::TyFnDef(..) = constant.ty.sty {\n-            // function definitions are zero-sized, and only generate\n-            // IR when they are called/reified.\n-            self.super_constant(constant, location);\n-            return\n-        }\n-\n-        if let mir::Literal::Item { def_id, substs } = constant.literal {\n+        if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n             let substs = self.scx.tcx().trans_apply_param_substs(self.param_substs,\n                                                                  &substs);\n             let instance = monomorphize::resolve(self.scx, def_id, substs);\n             collect_neighbours(self.scx, instance, true, self.output);\n         }\n \n-        self.super_constant(constant, location);\n+        self.super_const(constant);\n     }\n \n     fn visit_terminator_kind(&mut self,"}, {"sha": "4c3326a466d3a4f919ecebd1789fada6c78b1619", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ebd28fdb69d7cc4df3de343664e6698a4b55f0/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=57ebd28fdb69d7cc4df3de343664e6698a4b55f0", "patch": "@@ -510,16 +510,17 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n             mir::Operand::Constant(ref constant) => {\n                 let ty = self.monomorphize(&constant.ty);\n                 match constant.literal.clone() {\n-                    mir::Literal::Item { def_id, substs } => {\n-                        let substs = self.monomorphize(&substs);\n-                        MirConstContext::trans_def(self.ccx, def_id, substs, IndexVec::new())\n-                    }\n                     mir::Literal::Promoted { index } => {\n                         let mir = &self.mir.promoted[index];\n                         MirConstContext::new(self.ccx, mir, self.substs, IndexVec::new()).trans()\n                     }\n                     mir::Literal::Value { value } => {\n-                        Ok(Const::from_constval(self.ccx, &value.val, ty))\n+                        if let ConstVal::Unevaluated(def_id, substs) = value.val {\n+                            let substs = self.monomorphize(&substs);\n+                            MirConstContext::trans_def(self.ccx, def_id, substs, IndexVec::new())\n+                        } else {\n+                            Ok(Const::from_constval(self.ccx, &value.val, ty))\n+                        }\n                     }\n                 }\n             }\n@@ -960,16 +961,17 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         debug!(\"trans_constant({:?})\", constant);\n         let ty = self.monomorphize(&constant.ty);\n         let result = match constant.literal.clone() {\n-            mir::Literal::Item { def_id, substs } => {\n-                let substs = self.monomorphize(&substs);\n-                MirConstContext::trans_def(bcx.ccx, def_id, substs, IndexVec::new())\n-            }\n             mir::Literal::Promoted { index } => {\n                 let mir = &self.mir.promoted[index];\n                 MirConstContext::new(bcx.ccx, mir, self.param_substs, IndexVec::new()).trans()\n             }\n             mir::Literal::Value { value } => {\n-                Ok(Const::from_constval(bcx.ccx, &value.val, ty))\n+                if let ConstVal::Unevaluated(def_id, substs) = value.val {\n+                    let substs = self.monomorphize(&substs);\n+                    MirConstContext::trans_def(bcx.ccx, def_id, substs, IndexVec::new())\n+                } else {\n+                    Ok(Const::from_constval(bcx.ccx, &value.val, ty))\n+                }\n             }\n         };\n "}]}