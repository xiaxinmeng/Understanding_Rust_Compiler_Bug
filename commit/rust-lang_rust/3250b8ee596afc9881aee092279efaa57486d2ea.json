{"sha": "3250b8ee596afc9881aee092279efaa57486d2ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNTBiOGVlNTk2YWZjOTg4MWFlZTA5MjI3OWVmYWE1NzQ4NmQyZWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-07T15:00:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-07T15:00:17Z"}, "message": "Rollup merge of #62042 - petrochenkov:macstab, r=matthewjasper\n\nSupport stability and deprecation checking for all macros\n\nRELNOTES: Deprecation attributes on macros now have effect.\n\nFixes https://github.com/rust-lang/rust/issues/34079\nFixes https://github.com/rust-lang/rust/issues/49912\nUnblocks https://github.com/rust-lang/rust/pull/62086\nUnblocks https://github.com/rust-lang/rust/pull/61000", "tree": {"sha": "c445db0b21aa62544140ff60894f770dc8fade07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c445db0b21aa62544140ff60894f770dc8fade07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3250b8ee596afc9881aee092279efaa57486d2ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdIgkBCRBK7hj4Ov3rIwAAdHIIAJJqI58yJreTL55P5q3mPFhA\nKKV+tERlNVp8+hbwvaT35Na6Hh3w4xgWw6zSl9Vp/lQGRAIJZ2xC+192OSyzB5Bu\n0W2BvAlLvgpdl/ACfG50ChF547gb9XoY8BhyhkUbfaXkEaCNARsI0TUZfBcIR5fr\nkvs5uFLTMMsbwpgZjtwfbdSBh4MOwM4MeQo2qBjTteFKwJG9nJ7SmYgXVMF17cX6\nV/Ujuh+xiw6W9d4Y6onRyFejE9rzY+oHN2tFxzx1HKaRO58GF+62V0AaHkgtFPLg\nqR1Y2U4dFHLRJ8D8zMBHP9cAw3WbXb3GU/yQUgL3og3dLqt8zTinV8jAKpst+mM=\n=vSkV\n-----END PGP SIGNATURE-----\n", "payload": "tree c445db0b21aa62544140ff60894f770dc8fade07\nparent 9cd75fb35f1d24f805c6759fd6236cd708b81ee1\nparent 941653b528deb96d5ed13935143db14c45d99d6e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562511617 +0200\ncommitter GitHub <noreply@github.com> 1562511617 +0200\n\nRollup merge of #62042 - petrochenkov:macstab, r=matthewjasper\n\nSupport stability and deprecation checking for all macros\n\nRELNOTES: Deprecation attributes on macros now have effect.\n\nFixes https://github.com/rust-lang/rust/issues/34079\nFixes https://github.com/rust-lang/rust/issues/49912\nUnblocks https://github.com/rust-lang/rust/pull/62086\nUnblocks https://github.com/rust-lang/rust/pull/61000\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3250b8ee596afc9881aee092279efaa57486d2ea", "html_url": "https://github.com/rust-lang/rust/commit/3250b8ee596afc9881aee092279efaa57486d2ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3250b8ee596afc9881aee092279efaa57486d2ea/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cd75fb35f1d24f805c6759fd6236cd708b81ee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd75fb35f1d24f805c6759fd6236cd708b81ee1", "html_url": "https://github.com/rust-lang/rust/commit/9cd75fb35f1d24f805c6759fd6236cd708b81ee1"}, {"sha": "941653b528deb96d5ed13935143db14c45d99d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/941653b528deb96d5ed13935143db14c45d99d6e", "html_url": "https://github.com/rust-lang/rust/commit/941653b528deb96d5ed13935143db14c45d99d6e"}], "stats": {"total": 948, "additions": 517, "deletions": 431}, "files": [{"sha": "2a9fd58f84b3bd93ad303d3bd80c8c7eb78b7de9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -90,6 +90,7 @@ pub struct LoweringContext<'a> {\n     impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem>,\n     bodies: BTreeMap<hir::BodyId, hir::Body>,\n     exported_macros: Vec<hir::MacroDef>,\n+    non_exported_macro_attrs: Vec<ast::Attribute>,\n \n     trait_impls: BTreeMap<DefId, Vec<hir::HirId>>,\n \n@@ -252,6 +253,7 @@ pub fn lower_crate(\n         trait_impls: BTreeMap::new(),\n         modules: BTreeMap::new(),\n         exported_macros: Vec::new(),\n+        non_exported_macro_attrs: Vec::new(),\n         catch_scopes: Vec::new(),\n         loop_scopes: Vec::new(),\n         is_in_loop_condition: false,\n@@ -662,6 +664,7 @@ impl<'a> LoweringContext<'a> {\n             attrs,\n             span: c.span,\n             exported_macros: hir::HirVec::from(self.exported_macros),\n+            non_exported_macro_attrs: hir::HirVec::from(self.non_exported_macro_attrs),\n             items: self.items,\n             trait_items: self.trait_items,\n             impl_items: self.impl_items,\n@@ -4022,6 +4025,8 @@ impl<'a> LoweringContext<'a> {\n                     body,\n                     legacy: def.legacy,\n                 });\n+            } else {\n+                self.non_exported_macro_attrs.extend(attrs.into_iter());\n             }\n             return None;\n         }"}, {"sha": "12ea772c1fb3160c2e59424fbdd026ce15bc3540", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -119,6 +119,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 span,\n                 // These fields are handled separately:\n                 exported_macros: _,\n+                non_exported_macro_attrs: _,\n                 items: _,\n                 trait_items: _,\n                 impl_items: _,"}, {"sha": "e7b37d40b4b2f2b3d5104cc02cc44e887225b905", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -727,6 +727,8 @@ pub struct Crate {\n     pub attrs: HirVec<Attribute>,\n     pub span: Span,\n     pub exported_macros: HirVec<MacroDef>,\n+    // Attributes from non-exported macros, kept only for collecting the library feature list.\n+    pub non_exported_macro_attrs: HirVec<Attribute>,\n \n     // N.B., we use a BTreeMap here so that `visit_all_items` iterates\n     // over the ids in increasing order. In principle it should not"}, {"sha": "dd879ec6aff34f773016aad1c3de6fe2a449ca56", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -5,10 +5,12 @@\n //! lints are all available in `rustc_lint::builtin`.\n \n use crate::lint::{LintPass, LateLintPass, LintArray};\n+use crate::middle::stability;\n use crate::session::Session;\n use errors::{Applicability, DiagnosticBuilder};\n use syntax::ast;\n use syntax::source_map::Span;\n+use syntax::symbol::Symbol;\n \n declare_lint! {\n     pub EXCEEDING_BITSHIFTS,\n@@ -461,6 +463,7 @@ pub enum BuiltinLintDiagnostics {\n     UnusedImports(String, Vec<(Span, String)>),\n     NestedImplTrait { outer_impl_trait_span: Span, inner_impl_trait_span: Span },\n     RedundantImport(Vec<(Span, bool)>, ast::Ident),\n+    DeprecatedMacro(Option<Symbol>, Span),\n }\n \n pub(crate) fn add_elided_lifetime_in_path_suggestion(\n@@ -586,6 +589,8 @@ impl BuiltinLintDiagnostics {\n                     );\n                 }\n             }\n+            BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) =>\n+                stability::deprecation_suggestion(db, suggestion, span),\n         }\n     }\n }"}, {"sha": "0d6d016e5070143a94fa6fceb9e3f792cc1e7d01", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -144,6 +144,10 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n \n pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n-    intravisit::walk_crate(&mut collector, tcx.hir().krate());\n+    let krate = tcx.hir().krate();\n+    for attr in &krate.non_exported_macro_attrs {\n+        collector.visit_attribute(attr);\n+    }\n+    intravisit::walk_crate(&mut collector, krate);\n     collector.lib_features\n }"}, {"sha": "5ab762ab225f97a38b6d54430c64b9b4d6b135eb", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 117, "deletions": 91, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -4,19 +4,21 @@\n pub use self::StabilityLevel::*;\n \n use crate::lint::{self, Lint, in_derive_expansion};\n+use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::hir::{self, Item, Generics, StructField, Variant, HirId};\n use crate::hir::def::{Res, DefKind};\n use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::ty::query::Providers;\n use crate::middle::privacy::AccessLevels;\n use crate::session::{DiagnosticMessageId, Session};\n+use errors::DiagnosticBuilder;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::{Span, MultiSpan};\n-use syntax::ast::Attribute;\n+use syntax::ast::{Attribute, CRATE_NODE_ID};\n use syntax::errors::Applicability;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n-use syntax::attr::{self, Stability, Deprecation};\n+use syntax::attr::{self, Stability, Deprecation, RustcDeprecation};\n use crate::ty::{self, TyCtxt};\n use crate::util::nodemap::{FxHashSet, FxHashMap};\n \n@@ -477,6 +479,36 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n+pub fn report_unstable(\n+    sess: &Session, feature: Symbol, reason: Option<Symbol>, issue: u32, span: Span\n+) {\n+    let msg = match reason {\n+        Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n+        None => format!(\"use of unstable library feature '{}'\", &feature)\n+    };\n+\n+    let msp: MultiSpan = span.into();\n+    let cm = &sess.parse_sess.source_map();\n+    let span_key = msp.primary_span().and_then(|sp: Span|\n+        if !sp.is_dummy() {\n+            let file = cm.lookup_char_pos(sp.lo()).file;\n+            if file.name.is_macros() {\n+                None\n+            } else {\n+                Some(span)\n+            }\n+        } else {\n+            None\n+        }\n+    );\n+\n+    let error_id = (DiagnosticMessageId::StabilityId(issue), span_key, msg.clone());\n+    let fresh = sess.one_time_diagnostics.borrow_mut().insert(error_id);\n+    if fresh {\n+        emit_feature_err(&sess.parse_sess, feature, span, GateIssue::Library(Some(issue)), &msg);\n+    }\n+}\n+\n /// Checks whether an item marked with `deprecated(since=\"X\")` is currently\n /// deprecated (i.e., whether X is not greater than the current rustc version).\n pub fn deprecation_in_effect(since: &str) -> bool {\n@@ -501,6 +533,79 @@ pub fn deprecation_in_effect(since: &str) -> bool {\n     }\n }\n \n+pub fn deprecation_suggestion(\n+    diag: &mut DiagnosticBuilder<'_>, suggestion: Option<Symbol>, span: Span\n+) {\n+    if let Some(suggestion) = suggestion {\n+        diag.span_suggestion(\n+            span,\n+            \"replace the use of the deprecated item\",\n+            suggestion.to_string(),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n+\n+fn deprecation_message_common(message: String, reason: Option<Symbol>) -> String {\n+    match reason {\n+        Some(reason) => format!(\"{}: {}\", message, reason),\n+        None => message,\n+    }\n+}\n+\n+pub fn deprecation_message(depr: &Deprecation, path: &str) -> (String, &'static Lint) {\n+    let message = format!(\"use of deprecated item '{}'\", path);\n+    (deprecation_message_common(message, depr.note), lint::builtin::DEPRECATED)\n+}\n+\n+pub fn rustc_deprecation_message(depr: &RustcDeprecation, path: &str) -> (String, &'static Lint) {\n+    let (message, lint) = if deprecation_in_effect(&depr.since.as_str()) {\n+        (format!(\"use of deprecated item '{}'\", path), lint::builtin::DEPRECATED)\n+    } else {\n+        (format!(\"use of item '{}' that will be deprecated in future version {}\", path, depr.since),\n+         lint::builtin::DEPRECATED_IN_FUTURE)\n+    };\n+    (deprecation_message_common(message, Some(depr.reason)), lint)\n+}\n+\n+pub fn early_report_deprecation(\n+    sess: &Session,\n+    message: &str,\n+    suggestion: Option<Symbol>,\n+    lint: &'static Lint,\n+    span: Span,\n+) {\n+    if in_derive_expansion(span) {\n+        return;\n+    }\n+\n+    let diag = BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span);\n+    sess.buffer_lint_with_diagnostic(lint, CRATE_NODE_ID, span, message, diag);\n+}\n+\n+fn late_report_deprecation(\n+    tcx: TyCtxt<'_>,\n+    message: &str,\n+    suggestion: Option<Symbol>,\n+    lint: &'static Lint,\n+    span: Span,\n+    def_id: DefId,\n+    hir_id: HirId,\n+) {\n+    if in_derive_expansion(span) {\n+        return;\n+    }\n+\n+    let mut diag = tcx.struct_span_lint_hir(lint, hir_id, span, message);\n+    if let hir::Node::Expr(_) = tcx.hir().get(hir_id) {\n+        deprecation_suggestion(&mut diag, suggestion, span);\n+    }\n+    diag.emit();\n+    if hir_id == hir::DUMMY_HIR_ID {\n+        span_bug!(span, \"emitted a {} lint with dummy HIR id: {:?}\", lint.name, def_id);\n+    }\n+}\n+\n struct Checker<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n@@ -563,38 +668,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// deprecated. If the item is indeed deprecated, we will emit a deprecation lint attached to\n     /// `id`.\n     pub fn eval_stability(self, def_id: DefId, id: Option<HirId>, span: Span) -> EvalResult {\n-        let lint_deprecated = |def_id: DefId,\n-                               id: HirId,\n-                               note: Option<Symbol>,\n-                               suggestion: Option<Symbol>,\n-                               message: &str,\n-                               lint: &'static Lint| {\n-            if in_derive_expansion(span) {\n-                return;\n-            }\n-            let msg = if let Some(note) = note {\n-                format!(\"{}: {}\", message, note)\n-            } else {\n-                format!(\"{}\", message)\n-            };\n-\n-            let mut diag = self.struct_span_lint_hir(lint, id, span, &msg);\n-            if let Some(suggestion) = suggestion {\n-                if let hir::Node::Expr(_) = self.hir().get(id) {\n-                    diag.span_suggestion(\n-                        span,\n-                        \"replace the use of the deprecated item\",\n-                        suggestion.to_string(),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n-            diag.emit();\n-            if id == hir::DUMMY_HIR_ID {\n-                span_bug!(span, \"emitted a {} lint with dummy HIR id: {:?}\", lint.name, def_id);\n-            }\n-        };\n-\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(id) = id {\n             if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n@@ -604,14 +677,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                                .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n \n                 if !skip {\n-                    let path = self.def_path_str(def_id);\n-                    let message = format!(\"use of deprecated item '{}'\", path);\n-                    lint_deprecated(def_id,\n-                                    id,\n-                                    depr_entry.attr.note,\n-                                    None,\n-                                    &message,\n-                                    lint::builtin::DEPRECATED);\n+                    let (message, lint) =\n+                        deprecation_message(&depr_entry.attr, &self.def_path_str(def_id));\n+                    late_report_deprecation(self, &message, None, lint, span, def_id, id);\n                 }\n             };\n         }\n@@ -631,27 +699,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(id) = id {\n             if let Some(stability) = stability {\n                 if let Some(depr) = &stability.rustc_depr {\n-                    let path = self.def_path_str(def_id);\n-                    if deprecation_in_effect(&depr.since.as_str()) {\n-                        let message = format!(\"use of deprecated item '{}'\", path);\n-                        lint_deprecated(def_id,\n-                                        id,\n-                                        Some(depr.reason),\n-                                        depr.suggestion,\n-                                        &message,\n-                                        lint::builtin::DEPRECATED);\n-                    } else {\n-                        let message = format!(\"use of item '{}' \\\n-                                                that will be deprecated in future version {}\",\n-                                                path,\n-                                                depr.since);\n-                        lint_deprecated(def_id,\n-                                        id,\n-                                        Some(depr.reason),\n-                                        depr.suggestion,\n-                                        &message,\n-                                        lint::builtin::DEPRECATED_IN_FUTURE);\n-                    }\n+                    let (message, lint) =\n+                        rustc_deprecation_message(depr, &self.def_path_str(def_id));\n+                    late_report_deprecation(\n+                        self, &message, depr.suggestion, lint, span, def_id, id\n+                    );\n                 }\n             }\n         }\n@@ -715,34 +767,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn check_stability(self, def_id: DefId, id: Option<HirId>, span: Span) {\n         match self.eval_stability(def_id, id, span) {\n             EvalResult::Allow => {}\n-            EvalResult::Deny { feature, reason, issue } => {\n-                let msg = match reason {\n-                    Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n-                    None => format!(\"use of unstable library feature '{}'\", &feature)\n-                };\n-\n-                let msp: MultiSpan = span.into();\n-                let cm = &self.sess.parse_sess.source_map();\n-                let span_key = msp.primary_span().and_then(|sp: Span|\n-                    if !sp.is_dummy() {\n-                        let file = cm.lookup_char_pos(sp.lo()).file;\n-                        if file.name.is_macros() {\n-                            None\n-                        } else {\n-                            Some(span)\n-                        }\n-                    } else {\n-                        None\n-                    }\n-                );\n-\n-                let error_id = (DiagnosticMessageId::StabilityId(issue), span_key, msg.clone());\n-                let fresh = self.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n-                if fresh {\n-                    emit_feature_err(&self.sess.parse_sess, feature, span,\n-                                     GateIssue::Library(Some(issue)), &msg);\n-                }\n-            }\n+            EvalResult::Deny { feature, reason, issue } =>\n+                report_unstable(self.sess, feature, reason, issue, span),\n             EvalResult::Unmarked => {\n                 // The API could be uncallable for other reasons, for example when a private module\n                 // was referenced."}, {"sha": "bb3c950edae3bb292de3869f599b9d7f4d39addc", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -84,10 +84,7 @@ impl<'a> Registry<'a> {\n     /// Register a syntax extension of any kind.\n     ///\n     /// This is the most general hook into `libsyntax`'s expansion behavior.\n-    pub fn register_syntax_extension(&mut self, name: ast::Name, mut extension: SyntaxExtension) {\n-        if extension.def_info.is_none() {\n-            extension.def_info = Some((ast::CRATE_NODE_ID, self.krate_span));\n-        }\n+    pub fn register_syntax_extension(&mut self, name: ast::Name, extension: SyntaxExtension) {\n         self.syntax_exts.push((name, extension));\n     }\n "}, {"sha": "66410482cc6d71749426dfa5ce37f76b57e3fff3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1666,10 +1666,7 @@ pub struct Resolver<'a> {\n     non_macro_attrs: [Lrc<SyntaxExtension>; 2],\n     macro_defs: FxHashMap<Mark, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n-\n-    /// List of crate local macros that we need to warn about as being unused.\n-    /// Right now this only includes macro_rules! macros, and macros 2.0.\n-    unused_macros: FxHashSet<DefId>,\n+    unused_macros: NodeMap<Span>,\n \n     /// Maps the `Mark` of an expansion to its containing module or block.\n     invocations: FxHashMap<Mark, &'a InvocationData<'a>>,\n@@ -1687,6 +1684,9 @@ pub struct Resolver<'a> {\n     current_type_ascription: Vec<Span>,\n \n     injected_crate: Option<Module<'a>>,\n+\n+    /// Features enabled for this crate.\n+    active_features: FxHashSet<Symbol>,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1925,6 +1925,7 @@ impl<'a> Resolver<'a> {\n         let mut macro_defs = FxHashMap::default();\n         macro_defs.insert(Mark::root(), root_def_id);\n \n+        let features = session.features_untracked();\n         let non_macro_attr = |mark_used| Lrc::new(SyntaxExtension::default(\n             SyntaxExtensionKind::NonMacroAttr { mark_used }, session.edition()\n         ));\n@@ -2009,9 +2010,13 @@ impl<'a> Resolver<'a> {\n             name_already_seen: FxHashMap::default(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: Default::default(),\n-            unused_macros: FxHashSet::default(),\n+            unused_macros: Default::default(),\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n+            active_features:\n+                features.declared_lib_features.iter().map(|(feat, ..)| *feat)\n+                    .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n+                    .collect(),\n         }\n     }\n "}, {"sha": "f26c3b8ae6afc74b49602db0195235d42bc67e60", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -9,10 +9,10 @@ use crate::resolve_imports::ImportResolver;\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n-use rustc::{ty, lint};\n-use rustc::{bug, span_bug};\n+use rustc::middle::stability;\n+use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, Ident};\n-use syntax::attr;\n+use syntax::attr::{self, StabilityLevel};\n use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n@@ -230,16 +230,19 @@ impl<'a> base::Resolver for Resolver<'a> {\n             Err(determinacy) => return Err(determinacy),\n         };\n \n+        let span = invoc.span();\n+        let path = fast_print_path(path);\n         let format = match kind {\n-            MacroKind::Derive => format!(\"derive({})\", fast_print_path(path)),\n-            _ => fast_print_path(path),\n+            MacroKind::Derive => format!(\"derive({})\", path),\n+            _ => path.clone(),\n         };\n-        invoc.expansion_data.mark.set_expn_info(ext.expn_info(invoc.span(), &format));\n+        invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, &format));\n+\n+        self.check_stability_and_deprecation(&ext, &path, span);\n \n         if let Res::Def(_, def_id) = res {\n             if after_derive {\n-                self.session.span_err(invoc.span(),\n-                                      \"macro attributes must be placed before `#[derive]`\");\n+                self.session.span_err(span, \"macro attributes must be placed before `#[derive]`\");\n             }\n             self.macro_defs.insert(invoc.expansion_data.mark, def_id);\n             let normal_module_def_id =\n@@ -259,14 +262,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n     }\n \n     fn check_unused_macros(&self) {\n-        for did in self.unused_macros.iter() {\n-            if let Some((id, span)) = self.macro_map[did].def_info {\n-                let lint = lint::builtin::UNUSED_MACROS;\n-                let msg = \"unused macro definition\";\n-                self.session.buffer_lint(lint, id, span, msg);\n-            } else {\n-                bug!(\"attempted to create unused macro error, but span not available\");\n-            }\n+        for (&node_id, &span) in self.unused_macros.iter() {\n+            self.session.buffer_lint(\n+                lint::builtin::UNUSED_MACROS, node_id, span, \"unused macro definition\"\n+            );\n         }\n     }\n }\n@@ -323,7 +322,9 @@ impl<'a> Resolver<'a> {\n \n         match res {\n             Res::Def(DefKind::Macro(macro_kind), def_id) => {\n-                self.unused_macros.remove(&def_id);\n+                if let Some(node_id) = self.definitions.as_local_node_id(def_id) {\n+                    self.unused_macros.remove(&node_id);\n+                }\n                 if macro_kind == MacroKind::ProcMacroStub {\n                     let msg = \"can't use a procedural macro from the same crate that defines it\";\n                     self.session.span_err(path.span, msg);\n@@ -1009,6 +1010,27 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, path: &str, span: Span) {\n+        if let Some(stability) = &ext.stability {\n+            if let StabilityLevel::Unstable { reason, issue } = stability.level {\n+                let feature = stability.feature;\n+                if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {\n+                    stability::report_unstable(self.session, feature, reason, issue, span);\n+                }\n+            }\n+            if let Some(depr) = &stability.rustc_depr {\n+                let (message, lint) = stability::rustc_deprecation_message(depr, path);\n+                stability::early_report_deprecation(\n+                    self.session, &message, depr.suggestion, lint, span\n+                );\n+            }\n+        }\n+        if let Some(depr) = &ext.deprecation {\n+            let (message, lint) = stability::deprecation_message(depr, path);\n+            stability::early_report_deprecation(self.session, &message, None, lint, span);\n+        }\n+    }\n+\n     fn prohibit_imported_non_macro_attrs(&self, binding: Option<&'a NameBinding<'a>>,\n                                          res: Option<Res>, span: Span) {\n         if let Some(Res::NonMacroAttr(kind)) = res {\n@@ -1157,13 +1179,13 @@ impl<'a> Resolver<'a> {\n                             (res, vis, item.span, expansion, IsMacroExport));\n             } else {\n                 self.check_reserved_macro_name(ident, res);\n-                self.unused_macros.insert(def_id);\n+                self.unused_macros.insert(item.id, item.span);\n             }\n         } else {\n             let module = self.current_module;\n             let vis = self.resolve_visibility(&item.vis);\n             if vis != ty::Visibility::Public {\n-                self.unused_macros.insert(def_id);\n+                self.unused_macros.insert(item.id, item.span);\n             }\n             self.define(module, ident, MacroNS, (res, vis, item.span, expansion));\n         }"}, {"sha": "d0007074a823caa70776fb787dbe4a4e015e9866", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -103,8 +103,8 @@\n //!\n //! ```rust\n //! # #![feature(rustc_private)]\n-//! extern crate serialize;\n-//! use serialize::json::{self, ToJson, Json};\n+//! extern crate serialize as rustc_serialize;\n+//! use rustc_serialize::json::{self, ToJson, Json};\n //!\n //! // A custom data structure\n //! struct ComplexNum {\n@@ -120,7 +120,7 @@\n //! }\n //!\n //! // Only generate `RustcEncodable` trait implementation\n-//! #[derive(Encodable)]\n+//! #[derive(RustcEncodable)]\n //! pub struct ComplexNumRecord {\n //!     uid: u8,\n //!     dsc: String,\n@@ -143,12 +143,12 @@\n //!\n //! ```rust\n //! # #![feature(rustc_private)]\n-//! extern crate serialize;\n+//! extern crate serialize as rustc_serialize;\n //! use std::collections::BTreeMap;\n-//! use serialize::json::{self, Json, ToJson};\n+//! use rustc_serialize::json::{self, Json, ToJson};\n //!\n-//! // Only generate `Decodable` trait implementation\n-//! #[derive(Decodable)]\n+//! // Only generate `RustcDecodable` trait implementation\n+//! #[derive(RustcDecodable)]\n //! pub struct TestStruct {\n //!     data_int: u8,\n //!     data_str: String,"}, {"sha": "b41f1047fcba3765c952f4d3197b5e19a926a472", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -135,6 +135,19 @@ pub enum StabilityLevel {\n     Stable { since: Symbol },\n }\n \n+impl Stability {\n+    pub fn unstable(feature: Symbol, reason: Option<Symbol>, issue: u32) -> Stability {\n+        Stability {\n+            level: StabilityLevel::Unstable { reason, issue },\n+            feature,\n+            rustc_depr: None,\n+            const_stability: None,\n+            promotable: false,\n+            allow_const_fn_ptr: false,\n+        }\n+    }\n+}\n+\n impl StabilityLevel {\n     pub fn is_unstable(&self) -> bool {\n         if let StabilityLevel::Unstable {..} = *self {\n@@ -171,7 +184,8 @@ pub fn contains_feature_attr(attrs: &[Attribute], feature_name: Symbol) -> bool\n     })\n }\n \n-/// Finds the first stability attribute. `None` if none exists.\n+/// Collects stability info from all stability attributes in `attrs`.\n+/// Returns `None` if no stability attributes are found.\n pub fn find_stability(sess: &ParseSess, attrs: &[Attribute],\n                       item_sp: Span) -> Option<Stability> {\n     find_stability_generic(sess, attrs.iter(), item_sp)"}, {"sha": "15c0b6ca5aa81248b7d149e78d7ee701565b37db", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,5 +1,5 @@\n use crate::ast::{self, Attribute, Name, PatKind};\n-use crate::attr::HasAttrs;\n+use crate::attr::{HasAttrs, Stability, Deprecation};\n use crate::source_map::{SourceMap, Spanned, respan};\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n@@ -606,8 +606,8 @@ pub enum SyntaxExtensionKind {\n pub struct SyntaxExtension {\n     /// A syntax extension kind.\n     pub kind: SyntaxExtensionKind,\n-    /// Some info about the macro's definition point.\n-    pub def_info: Option<(ast::NodeId, Span)>,\n+    /// Span of the macro definition.\n+    pub span: Span,\n     /// Hygienic properties of spans produced by this macro by default.\n     pub default_transparency: Transparency,\n     /// Whitelist of unstable features that are treated as stable inside this macro.\n@@ -616,8 +616,10 @@ pub struct SyntaxExtension {\n     pub allow_internal_unsafe: bool,\n     /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`) for this macro.\n     pub local_inner_macros: bool,\n-    /// The macro's feature name and tracking issue number if it is unstable.\n-    pub unstable_feature: Option<(Symbol, u32)>,\n+    /// The macro's stability info.\n+    pub stability: Option<Stability>,\n+    /// The macro's deprecation info.\n+    pub deprecation: Option<Deprecation>,\n     /// Names of helper attributes registered by this macro.\n     pub helper_attrs: Vec<Symbol>,\n     /// Edition of the crate in which this macro is defined.\n@@ -657,12 +659,13 @@ impl SyntaxExtension {\n     /// Constructs a syntax extension with default properties.\n     pub fn default(kind: SyntaxExtensionKind, edition: Edition) -> SyntaxExtension {\n         SyntaxExtension {\n-            def_info: None,\n+            span: DUMMY_SP,\n             default_transparency: kind.default_transparency(),\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n-            unstable_feature: None,\n+            stability: None,\n+            deprecation: None,\n             helper_attrs: Vec::new(),\n             edition,\n             kind,\n@@ -681,7 +684,7 @@ impl SyntaxExtension {\n         ExpnInfo {\n             call_site,\n             format: self.expn_format(Symbol::intern(format)),\n-            def_site: self.def_info.map(|(_, span)| span),\n+            def_site: Some(self.span),\n             default_transparency: self.default_transparency,\n             allow_internal_unstable: self.allow_internal_unstable.clone(),\n             allow_internal_unsafe: self.allow_internal_unsafe,\n@@ -738,7 +741,6 @@ pub struct ExpansionData {\n     pub depth: usize,\n     pub module: Rc<ModuleData>,\n     pub directory_ownership: DirectoryOwnership,\n-    pub crate_span: Option<Span>,\n }\n \n /// One of these is made during expansion and incrementally updated as we go;\n@@ -768,7 +770,6 @@ impl<'a> ExtCtxt<'a> {\n                 depth: 0,\n                 module: Rc::new(ModuleData { mod_path: Vec::new(), directory: PathBuf::new() }),\n                 directory_ownership: DirectoryOwnership::Owned { relative: None },\n-                crate_span: None,\n             },\n             expansions: FxHashMap::default(),\n         }"}, {"sha": "2a56f3dd7566bc2fa06b0994097c312b868eaf28", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -63,11 +63,11 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n \n     let span = span.with_ctxt(cx.backtrace());\n     item.visit_attrs(|attrs| {\n-        if names.contains(&Symbol::intern(\"Eq\")) && names.contains(&Symbol::intern(\"PartialEq\")) {\n-            let meta = cx.meta_word(span, Symbol::intern(\"structural_match\"));\n+        if names.contains(&sym::Eq) && names.contains(&sym::PartialEq) {\n+            let meta = cx.meta_word(span, sym::structural_match);\n             attrs.push(cx.attribute(span, meta));\n         }\n-        if names.contains(&Symbol::intern(\"Copy\")) {\n+        if names.contains(&sym::Copy) {\n             let meta = cx.meta_word(span, sym::rustc_copy_clone_marker);\n             attrs.push(cx.attribute(span, meta));\n         }"}, {"sha": "74ef5cbe9177ebf767c6206fa87e95acdbfaf7d2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 17, "deletions": 69, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -243,7 +243,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         module.directory.pop();\n         self.cx.root_path = module.directory.clone();\n         self.cx.current_expansion.module = Rc::new(module);\n-        self.cx.current_expansion.crate_span = Some(krate.span);\n \n         let orig_mod_span = krate.module.inner;\n \n@@ -488,7 +487,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     fn expand_invoc(&mut self, invoc: Invocation, ext: &SyntaxExtension) -> Option<AstFragment> {\n         if invoc.fragment_kind == AstFragmentKind::ForeignItems &&\n-           !self.cx.ecfg.macros_in_extern_enabled() {\n+           !self.cx.ecfg.macros_in_extern() {\n             if let SyntaxExtensionKind::NonMacroAttr { .. } = ext.kind {} else {\n                 emit_feature_err(&self.cx.parse_sess, sym::macros_in_extern,\n                                  invoc.span(), GateIssue::Language,\n@@ -668,40 +667,17 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n         let path = &mac.node.path;\n \n-        let validate = |this: &mut Self| {\n-            // feature-gate the macro invocation\n-            if let Some((feature, issue)) = ext.unstable_feature {\n-                let crate_span = this.cx.current_expansion.crate_span.unwrap();\n-                // don't stability-check macros in the same crate\n-                // (the only time this is null is for syntax extensions registered as macros)\n-                if ext.def_info.map_or(false, |(_, def_span)| !crate_span.contains(def_span))\n-                    && !span.allows_unstable(feature)\n-                    && this.cx.ecfg.features.map_or(true, |feats| {\n-                    // macro features will count as lib features\n-                    !feats.declared_lib_features.iter().any(|&(feat, _)| feat == feature)\n-                }) {\n-                    let explain = format!(\"macro {}! is unstable\", path);\n-                    emit_feature_err(this.cx.parse_sess, feature, span,\n-                                     GateIssue::Library(Some(issue)), &explain);\n-                    this.cx.trace_macros_diag();\n-                }\n-            }\n-\n-            Ok(())\n-        };\n-\n         let opt_expanded = match &ext.kind {\n+            SyntaxExtensionKind::Bang(expander) => {\n+                self.gate_proc_macro_expansion_kind(span, kind);\n+                let tok_result = expander.expand(self.cx, span, mac.node.stream());\n+                let result = self.parse_ast_fragment(tok_result, kind, path, span);\n+                self.gate_proc_macro_expansion(span, &result);\n+                result\n+            }\n             SyntaxExtensionKind::LegacyBang(expander) => {\n-                if let Err(dummy_span) = validate(self) {\n-                    dummy_span\n-                } else {\n-                    kind.make_from(expander.expand(\n-                        self.cx,\n-                        span,\n-                        mac.node.stream(),\n-                        ext.def_info.map(|(_, s)| s),\n-                    ))\n-                }\n+                let tok_result = expander.expand(self.cx, span, mac.node.stream(), Some(ext.span));\n+                kind.make_from(tok_result)\n             }\n \n             SyntaxExtensionKind::Attr(..) |\n@@ -718,14 +694,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 self.cx.trace_macros_diag();\n                 kind.dummy(span)\n             }\n-\n-            SyntaxExtensionKind::Bang(expander) => {\n-                self.gate_proc_macro_expansion_kind(span, kind);\n-                let tok_result = expander.expand(self.cx, span, mac.node.stream());\n-                let result = self.parse_ast_fragment(tok_result, kind, path, span);\n-                self.gate_proc_macro_expansion(span, &result);\n-                result\n-            }\n         };\n \n         if opt_expanded.is_some() {\n@@ -951,7 +919,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                         })\n                         .map(|i| attrs.remove(i));\n         if let Some(attr) = &attr {\n-            if !self.cx.ecfg.enable_custom_inner_attributes() &&\n+            if !self.cx.ecfg.custom_inner_attributes() &&\n                attr.style == ast::AttrStyle::Inner && attr.path != sym::test {\n                 emit_feature_err(&self.cx.parse_sess, sym::custom_inner_attributes,\n                                  attr.span, GateIssue::Language,\n@@ -1464,19 +1432,6 @@ pub struct ExpansionConfig<'feat> {\n     pub keep_macs: bool,\n }\n \n-macro_rules! feature_tests {\n-    ($( fn $getter:ident = $field:ident, )*) => {\n-        $(\n-            pub fn $getter(&self) -> bool {\n-                match self.features {\n-                    Some(&Features { $field: true, .. }) => true,\n-                    _ => false,\n-                }\n-            }\n-        )*\n-    }\n-}\n-\n impl<'feat> ExpansionConfig<'feat> {\n     pub fn default(crate_name: String) -> ExpansionConfig<'static> {\n         ExpansionConfig {\n@@ -1490,20 +1445,13 @@ impl<'feat> ExpansionConfig<'feat> {\n         }\n     }\n \n-    feature_tests! {\n-        fn enable_asm = asm,\n-        fn enable_custom_test_frameworks = custom_test_frameworks,\n-        fn enable_global_asm = global_asm,\n-        fn enable_log_syntax = log_syntax,\n-        fn enable_concat_idents = concat_idents,\n-        fn enable_trace_macros = trace_macros,\n-        fn enable_allow_internal_unstable = allow_internal_unstable,\n-        fn enable_format_args_nl = format_args_nl,\n-        fn macros_in_extern_enabled = macros_in_extern,\n-        fn proc_macro_hygiene = proc_macro_hygiene,\n+    fn macros_in_extern(&self) -> bool {\n+        self.features.map_or(false, |features| features.macros_in_extern)\n     }\n-\n-    fn enable_custom_inner_attributes(&self) -> bool {\n+    fn proc_macro_hygiene(&self) -> bool {\n+        self.features.map_or(false, |features| features.proc_macro_hygiene)\n+    }\n+    fn custom_inner_attributes(&self) -> bool {\n         self.features.map_or(false, |features| features.custom_inner_attributes)\n     }\n }"}, {"sha": "c2ba8b983f5a84b2393bd7a948183ddc162023f4", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -4,7 +4,7 @@ use crate::ext::build::AstBuilder;\n use crate::parse::{self, token, DirectoryOwnership};\n use crate::print::pprust;\n use crate::ptr::P;\n-use crate::symbol::{Symbol, sym};\n+use crate::symbol::Symbol;\n use crate::tokenstream;\n \n use smallvec::SmallVec;\n@@ -41,16 +41,6 @@ pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTr\n     base::MacEager::expr(cx.expr_u32(topmost, loc.col.to_usize() as u32 + 1))\n }\n \n-/* __rust_unstable_column!(): expands to the current column number */\n-pub fn expand_column_gated(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n-                  -> Box<dyn base::MacResult+'static> {\n-    if sp.allows_unstable(sym::__rust_unstable_column) {\n-        expand_column(cx, sp, tts)\n-    } else {\n-        cx.span_fatal(sp, \"the __rust_unstable_column macro is unstable\");\n-    }\n-}\n-\n /// file!(): expands to the current filename */\n /// The source_file (`loc.file`) contains a bunch more information we could spit\n /// out if we wanted."}, {"sha": "665c794422d49cc51433835a3d163d47fba09135", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -422,32 +422,22 @@ pub fn compile(\n                 })\n         });\n \n-    let allow_internal_unsafe = attr::contains_name(&def.attrs, sym::allow_internal_unsafe);\n-\n     let mut local_inner_macros = false;\n     if let Some(macro_export) = attr::find_by_name(&def.attrs, sym::macro_export) {\n         if let Some(l) = macro_export.meta_item_list() {\n             local_inner_macros = attr::list_contains_name(&l, sym::local_inner_macros);\n         }\n     }\n \n-    let unstable_feature =\n-        attr::find_stability(&sess, &def.attrs, def.span).and_then(|stability| {\n-            if let attr::StabilityLevel::Unstable { issue, .. } = stability.level {\n-                Some((stability.feature, issue))\n-            } else {\n-                None\n-            }\n-        });\n-\n     SyntaxExtension {\n         kind: SyntaxExtensionKind::LegacyBang(expander),\n-        def_info: Some((def.id, def.span)),\n+        span: def.span,\n         default_transparency,\n         allow_internal_unstable,\n-        allow_internal_unsafe,\n+        allow_internal_unsafe: attr::contains_name(&def.attrs, sym::allow_internal_unsafe),\n         local_inner_macros,\n-        unstable_feature,\n+        stability: attr::find_stability(&sess, &def.attrs, def.span),\n+        deprecation: attr::find_deprecation(&sess, &def.attrs, def.span),\n         helper_attrs: Vec::new(),\n         edition,\n     }"}, {"sha": "f4f0d041e64d8cbfa624b437bbd8b3e6e57e7d6d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1568,7 +1568,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     (sym::type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n     (sym::test_runner, CrateLevel, template!(List: \"path\"), Gated(Stability::Unstable,\n                     sym::custom_test_frameworks,\n-                    EXPLAIN_CUSTOM_TEST_FRAMEWORKS,\n+                    \"custom test frameworks are an unstable feature\",\n                     cfg_fn!(custom_test_frameworks))),\n ];\n \n@@ -1819,26 +1819,6 @@ const EXPLAIN_BOX_SYNTAX: &str =\n pub const EXPLAIN_STMT_ATTR_SYNTAX: &str =\n     \"attributes on expressions are experimental\";\n \n-pub const EXPLAIN_ASM: &str =\n-    \"inline assembly is not stable enough for use and is subject to change\";\n-\n-pub const EXPLAIN_GLOBAL_ASM: &str =\n-    \"`global_asm!` is not stable enough for use and is subject to change\";\n-\n-pub const EXPLAIN_CUSTOM_TEST_FRAMEWORKS: &str =\n-    \"custom test frameworks are an unstable feature\";\n-\n-pub const EXPLAIN_LOG_SYNTAX: &str =\n-    \"`log_syntax!` is not stable enough for use and is subject to change\";\n-\n-pub const EXPLAIN_CONCAT_IDENTS: &str =\n-    \"`concat_idents` is not stable enough for use and is subject to change\";\n-\n-pub const EXPLAIN_FORMAT_ARGS_NL: &str =\n-    \"`format_args_nl` is only for internal language use and is subject to change\";\n-\n-pub const EXPLAIN_TRACE_MACROS: &str =\n-    \"`trace_macros` is not stable enough for use and is subject to change\";\n pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &str =\n     \"allow_internal_unstable side-steps feature gating and stability checks\";\n pub const EXPLAIN_ALLOW_INTERNAL_UNSAFE: &str ="}, {"sha": "d0c4e8d6a5634b6bbbc09b8f252605141423bdc7", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -613,7 +613,7 @@ impl<'a> StringReader<'a> {\n         if num_digits == 0 {\n             self.err_span_(start_bpos, self.pos, \"no valid digits found for number\");\n \n-            return (token::Integer, Symbol::intern(\"0\"));\n+            return (token::Integer, sym::integer(0));\n         }\n \n         // might be a float, but don't be greedy if this is actually an"}, {"sha": "c1c2732605c46d5c199c1142527bee315d41c211", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -8,7 +8,6 @@ use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n-use syntax::feature_gate;\n use syntax::parse;\n use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n@@ -46,14 +45,6 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n                        -> Box<dyn base::MacResult + 'cx> {\n-    if !cx.ecfg.enable_asm() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       sym::asm,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_ASM);\n-    }\n-\n     let mut inline_asm = match parse_inline_asm(cx, sp, tts) {\n         Ok(Some(inline_asm)) => inline_asm,\n         Ok(None) => return DummyResult::expr(sp),"}, {"sha": "df9191416038d7f825671f642e6f1aba83705d63", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -2,25 +2,16 @@ use rustc_data_structures::thin_vec::ThinVec;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n-use syntax::feature_gate;\n use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use syntax_pos::symbol::{Symbol, sym};\n+use syntax_pos::symbol::Symbol;\n use syntax::tokenstream::TokenTree;\n \n pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n                               tts: &[TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {\n-    if !cx.ecfg.enable_concat_idents() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       sym::concat_idents,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_CONCAT_IDENTS);\n-    }\n-\n     if tts.is_empty() {\n         cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n         return DummyResult::any(sp);"}, {"sha": "8009f42b8cf95b8650839101d50d1facb5139fac", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -3,7 +3,6 @@\n use crate::deriving::{self, pathvec_std};\n use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n-use crate::deriving::warn_if_deprecated;\n \n use syntax::ast;\n use syntax::ast::{Expr, MetaItem, Mutability};\n@@ -26,7 +25,6 @@ pub fn expand_deriving_decodable(cx: &mut ExtCtxt<'_>,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n                                  push: &mut dyn FnMut(Annotatable)) {\n-    warn_if_deprecated(cx, span, \"Decodable\");\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n "}, {"sha": "cd89a42cf82703a083fb0bcfa47b9abe0a7f1eba", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -85,7 +85,6 @@\n use crate::deriving::{self, pathvec_std};\n use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n-use crate::deriving::warn_if_deprecated;\n \n use syntax::ast::{Expr, ExprKind, MetaItem, Mutability};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n@@ -107,7 +106,6 @@ pub fn expand_deriving_encodable(cx: &mut ExtCtxt<'_>,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n                                  push: &mut dyn FnMut(Annotatable)) {\n-    warn_if_deprecated(cx, span, \"Encodable\");\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n "}, {"sha": "e491e93256d1cf776d509b7910ebf11d3cf5e578", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -2,6 +2,7 @@\n \n use rustc_data_structures::sync::Lrc;\n use syntax::ast::{self, MetaItem};\n+use syntax::attr::Deprecation;\n use syntax::edition::Edition;\n use syntax::ext::base::{Annotatable, ExtCtxt, Resolver, MultiItemModifier};\n use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n@@ -60,10 +61,10 @@ impl MultiItemModifier for BuiltinDerive {\n }\n \n macro_rules! derive_traits {\n-    ($( $name:expr => $func:path, )+) => {\n+    ($( [$deprecation:expr] $name:ident => $func:path, )+) => {\n         pub fn is_builtin_trait(name: ast::Name) -> bool {\n-            match &*name.as_str() {\n-                $( $name )|+ => true,\n+            match name {\n+                $( sym::$name )|+ => true,\n                 _ => false,\n             }\n         }\n@@ -79,8 +80,12 @@ macro_rules! derive_traits {\n \n             $(\n                 resolver.add_builtin(\n-                    ast::Ident::with_empty_ctxt(Symbol::intern($name)),\n+                    ast::Ident::with_empty_ctxt(sym::$name),\n                     Lrc::new(SyntaxExtension {\n+                        deprecation: $deprecation.map(|msg| Deprecation {\n+                            since: Some(Symbol::intern(\"1.0.0\")),\n+                            note: Some(Symbol::intern(msg)),\n+                        }),\n                         allow_internal_unstable: allow_internal_unstable.clone(),\n                         ..SyntaxExtension::default(\n                             SyntaxExtensionKind::LegacyDerive(Box::new(BuiltinDerive($func))),\n@@ -94,42 +99,41 @@ macro_rules! derive_traits {\n }\n \n derive_traits! {\n-    \"Clone\" => clone::expand_deriving_clone,\n+    [None]\n+    Clone => clone::expand_deriving_clone,\n \n-    \"Hash\" => hash::expand_deriving_hash,\n+    [None]\n+    Hash => hash::expand_deriving_hash,\n \n-    \"RustcEncodable\" => encodable::expand_deriving_rustc_encodable,\n+    [None]\n+    RustcEncodable => encodable::expand_deriving_rustc_encodable,\n \n-    \"RustcDecodable\" => decodable::expand_deriving_rustc_decodable,\n+    [None]\n+    RustcDecodable => decodable::expand_deriving_rustc_decodable,\n \n-    \"PartialEq\" => partial_eq::expand_deriving_partial_eq,\n-    \"Eq\" => eq::expand_deriving_eq,\n-    \"PartialOrd\" => partial_ord::expand_deriving_partial_ord,\n-    \"Ord\" => ord::expand_deriving_ord,\n+    [None]\n+    PartialEq => partial_eq::expand_deriving_partial_eq,\n+    [None]\n+    Eq => eq::expand_deriving_eq,\n+    [None]\n+    PartialOrd => partial_ord::expand_deriving_partial_ord,\n+    [None]\n+    Ord => ord::expand_deriving_ord,\n \n-    \"Debug\" => debug::expand_deriving_debug,\n+    [None]\n+    Debug => debug::expand_deriving_debug,\n \n-    \"Default\" => default::expand_deriving_default,\n+    [None]\n+    Default => default::expand_deriving_default,\n \n-    \"Copy\" => bounds::expand_deriving_copy,\n+    [None]\n+    Copy => bounds::expand_deriving_copy,\n \n     // deprecated\n-    \"Encodable\" => encodable::expand_deriving_encodable,\n-    \"Decodable\" => decodable::expand_deriving_decodable,\n-}\n-\n-#[inline] // because `name` is a compile-time constant\n-fn warn_if_deprecated(ecx: &mut ExtCtxt<'_>, sp: Span, name: &str) {\n-    if let Some(replacement) = match name {\n-        \"Encodable\" => Some(\"RustcEncodable\"),\n-        \"Decodable\" => Some(\"RustcDecodable\"),\n-        _ => None,\n-    } {\n-        ecx.span_warn(sp,\n-                      &format!(\"derive({}) is deprecated in favor of derive({})\",\n-                               name,\n-                               replacement));\n-    }\n+    [Some(\"derive(Encodable) is deprecated in favor of derive(RustcEncodable)\")]\n+    Encodable => encodable::expand_deriving_encodable,\n+    [Some(\"derive(Decodable) is deprecated in favor of derive(RustcDecodable)\")]\n+    Decodable => decodable::expand_deriving_decodable,\n }\n \n /// Construct a name for the inner type parameter that can't collide with any type parameters of"}, {"sha": "c3dbd48cc6e4e8bbebcfd83138c2e8b7fcc2e9c7", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -9,7 +9,6 @@ use errors::Applicability;\n use syntax::ast;\n use syntax::ext::base::{self, *};\n use syntax::ext::build::AstBuilder;\n-use syntax::feature_gate;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};\n@@ -686,14 +685,16 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n }\n \n-pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n-                               mut sp: Span,\n-                               tts: &[tokenstream::TokenTree])\n-                               -> Box<dyn base::MacResult + 'cx> {\n+fn expand_format_args_impl<'cx>(\n+    ecx: &'cx mut ExtCtxt<'_>,\n+    mut sp: Span,\n+    tts: &[tokenstream::TokenTree],\n+    nl: bool,\n+) -> Box<dyn base::MacResult + 'cx> {\n     sp = sp.apply_mark(ecx.current_expansion.mark);\n     match parse_args(ecx, sp, tts) {\n         Ok((efmt, args, names)) => {\n-            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, false))\n+            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, nl))\n         }\n         Err(mut err) => {\n             err.emit();\n@@ -702,34 +703,20 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n     }\n }\n \n+pub fn expand_format_args<'cx>(\n+    ecx: &'cx mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: &[tokenstream::TokenTree],\n+) -> Box<dyn base::MacResult + 'cx> {\n+    expand_format_args_impl(ecx, sp, tts, false)\n+}\n+\n pub fn expand_format_args_nl<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n-    mut sp: Span,\n+    sp: Span,\n     tts: &[tokenstream::TokenTree],\n ) -> Box<dyn base::MacResult + 'cx> {\n-    //if !ecx.ecfg.enable_allow_internal_unstable() {\n-\n-    // For some reason, the only one that actually works for `println` is the first check\n-    if !sp.allows_unstable(sym::format_args_nl) // the span is marked `#[allow_insternal_unsable]`\n-        && !ecx.ecfg.enable_allow_internal_unstable()  // NOTE: when is this enabled?\n-        && !ecx.ecfg.enable_format_args_nl()  // enabled using `#[feature(format_args_nl]`\n-    {\n-        feature_gate::emit_feature_err(&ecx.parse_sess,\n-                                       sym::format_args_nl,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_FORMAT_ARGS_NL);\n-    }\n-    sp = sp.apply_mark(ecx.current_expansion.mark);\n-    match parse_args(ecx, sp, tts) {\n-        Ok((efmt, args, names)) => {\n-            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, true))\n-        }\n-        Err(mut err) => {\n-            err.emit();\n-            DummyResult::expr(sp)\n-        }\n-    }\n+    expand_format_args_impl(ecx, sp, tts, true)\n }\n \n /// Take the various parts of `format_args!(efmt, args..., name=names...)`"}, {"sha": "112192fac5d26dd79531eaf808eb0e6a479561d7", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -13,27 +13,15 @@ use errors::DiagnosticBuilder;\n use syntax::ast;\n use syntax::source_map::respan;\n use syntax::ext::base::{self, *};\n-use syntax::feature_gate;\n use syntax::parse::token;\n use syntax::ptr::P;\n-use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n use syntax::tokenstream;\n use smallvec::smallvec;\n \n-pub const MACRO: Symbol = sym::global_asm;\n-\n pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree]) -> Box<dyn base::MacResult + 'cx> {\n-    if !cx.ecfg.enable_global_asm() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       MACRO,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_GLOBAL_ASM);\n-    }\n-\n     match parse_global_asm(cx, sp, tts) {\n         Ok(Some(global_asm)) => {\n             MacEager::items(smallvec![P(ast::Item {"}, {"sha": "62530f4fe7b336dd11524db94418faff18b6610e", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 65, "deletions": 19, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -41,12 +41,29 @@ pub mod proc_macro_impl;\n \n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n-\n+use syntax::attr::Stability;\n use syntax::ext::base::MacroExpanderFn;\n use syntax::ext::base::{NamedSyntaxExtension, SyntaxExtension, SyntaxExtensionKind};\n use syntax::edition::Edition;\n use syntax::symbol::{sym, Symbol};\n \n+const EXPLAIN_ASM: &str =\n+    \"inline assembly is not stable enough for use and is subject to change\";\n+const EXPLAIN_GLOBAL_ASM: &str =\n+    \"`global_asm!` is not stable enough for use and is subject to change\";\n+const EXPLAIN_CUSTOM_TEST_FRAMEWORKS: &str =\n+    \"custom test frameworks are an unstable feature\";\n+const EXPLAIN_LOG_SYNTAX: &str =\n+    \"`log_syntax!` is not stable enough for use and is subject to change\";\n+const EXPLAIN_CONCAT_IDENTS: &str =\n+    \"`concat_idents` is not stable enough for use and is subject to change\";\n+const EXPLAIN_FORMAT_ARGS_NL: &str =\n+    \"`format_args_nl` is only for internal language use and is subject to change\";\n+const EXPLAIN_TRACE_MACROS: &str =\n+    \"`trace_macros` is not stable enough for use and is subject to change\";\n+const EXPLAIN_UNSTABLE_COLUMN: &str =\n+    \"internal implementation detail of the `column` macro\";\n+\n pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                          user_exts: Vec<NamedSyntaxExtension>,\n                          edition: Edition) {\n@@ -57,59 +74,88 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n     };\n     macro_rules! register {\n         ($( $name:ident: $f:expr, )*) => { $(\n-            register(Symbol::intern(stringify!($name)), SyntaxExtension::default(\n+            register(sym::$name, SyntaxExtension::default(\n                 SyntaxExtensionKind::LegacyBang(Box::new($f as MacroExpanderFn)), edition\n             ));\n         )* }\n     }\n-    macro_rules! register_attr {\n-        ($( $name:ident: $f:expr, )*) => { $(\n-            register(Symbol::intern(stringify!($name)), SyntaxExtension::default(\n-                SyntaxExtensionKind::LegacyAttr(Box::new($f)), edition\n-            ));\n+    macro_rules! register_unstable {\n+        ($( [$feature:expr, $reason:expr, $issue:expr] $name:ident: $f:expr, )*) => { $(\n+            register(sym::$name, SyntaxExtension {\n+                stability: Some(Stability::unstable(\n+                    $feature, Some(Symbol::intern($reason)), $issue\n+                )),\n+                ..SyntaxExtension::default(\n+                    SyntaxExtensionKind::LegacyBang(Box::new($f as MacroExpanderFn)), edition\n+                )\n+            });\n         )* }\n     }\n \n     use syntax::ext::source_util::*;\n     register! {\n         line: expand_line,\n-        __rust_unstable_column: expand_column_gated,\n         column: expand_column,\n         file: expand_file,\n         stringify: expand_stringify,\n         include: expand_include,\n         include_str: expand_include_str,\n         include_bytes: expand_include_bytes,\n         module_path: expand_mod,\n-\n-        asm: asm::expand_asm,\n-        global_asm: global_asm::expand_global_asm,\n         cfg: cfg::expand_cfg,\n         concat: concat::expand_syntax_ext,\n-        concat_idents: concat_idents::expand_syntax_ext,\n         env: env::expand_env,\n         option_env: env::expand_option_env,\n-        log_syntax: log_syntax::expand_syntax_ext,\n-        trace_macros: trace_macros::expand_trace_macros,\n         compile_error: compile_error::expand_compile_error,\n         assert: assert::expand_assert,\n     }\n \n-    register_attr! {\n-        test_case: test_case::expand,\n-        test: test::expand_test,\n-        bench: test::expand_bench,\n+    register_unstable! {\n+        [sym::__rust_unstable_column, EXPLAIN_UNSTABLE_COLUMN, 0]\n+        __rust_unstable_column: expand_column,\n+        [sym::asm, EXPLAIN_ASM, 29722]\n+        asm: asm::expand_asm,\n+        [sym::global_asm, EXPLAIN_GLOBAL_ASM, 35119]\n+        global_asm: global_asm::expand_global_asm,\n+        [sym::concat_idents, EXPLAIN_CONCAT_IDENTS, 29599]\n+        concat_idents: concat_idents::expand_syntax_ext,\n+        [sym::log_syntax, EXPLAIN_LOG_SYNTAX, 29598]\n+        log_syntax: log_syntax::expand_syntax_ext,\n+        [sym::trace_macros, EXPLAIN_TRACE_MACROS, 29598]\n+        trace_macros: trace_macros::expand_trace_macros,\n     }\n \n+    register(sym::test_case, SyntaxExtension {\n+        stability: Some(Stability::unstable(\n+            sym::custom_test_frameworks,\n+            Some(Symbol::intern(EXPLAIN_CUSTOM_TEST_FRAMEWORKS)),\n+            50297,\n+        )),\n+        ..SyntaxExtension::default(\n+            SyntaxExtensionKind::LegacyAttr(Box::new(test_case::expand)), edition\n+        )\n+    });\n+    register(sym::test, SyntaxExtension::default(\n+        SyntaxExtensionKind::LegacyAttr(Box::new(test::expand_test)), edition\n+    ));\n+    register(sym::bench, SyntaxExtension::default(\n+        SyntaxExtensionKind::LegacyAttr(Box::new(test::expand_bench)), edition\n+    ));\n+\n     // format_args uses `unstable` things internally.\n     let allow_internal_unstable = Some([sym::fmt_internals][..].into());\n-    register(Symbol::intern(\"format_args\"), SyntaxExtension {\n+    register(sym::format_args, SyntaxExtension {\n         allow_internal_unstable: allow_internal_unstable.clone(),\n         ..SyntaxExtension::default(\n             SyntaxExtensionKind::LegacyBang(Box::new(format::expand_format_args)), edition\n         )\n     });\n     register(sym::format_args_nl, SyntaxExtension {\n+        stability: Some(Stability::unstable(\n+            sym::format_args_nl,\n+            Some(Symbol::intern(EXPLAIN_FORMAT_ARGS_NL)),\n+            0,\n+        )),\n         allow_internal_unstable,\n         ..SyntaxExtension::default(\n             SyntaxExtensionKind::LegacyBang(Box::new(format::expand_format_args_nl)), edition"}, {"sha": "cbdfd08b4977f2f5a6c946f4f516adef6aa5d0eb", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,22 +1,12 @@\n use syntax::ext::base;\n-use syntax::feature_gate;\n use syntax::print;\n use syntax::tokenstream;\n-use syntax::symbol::sym;\n use syntax_pos;\n \n-pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt<'_>,\n+pub fn expand_syntax_ext<'cx>(_cx: &'cx mut base::ExtCtxt<'_>,\n                               sp: syntax_pos::Span,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {\n-    if !cx.ecfg.enable_log_syntax() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       sym::log_syntax,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_LOG_SYNTAX);\n-    }\n-\n     println!(\"{}\", print::pprust::tts_to_string(tts));\n \n     // any so that `log_syntax` can be invoked as an expression and item."}, {"sha": "e502735452735d8dca8264ae20b834953a2acdfd", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -548,10 +548,10 @@ impl server::Literal for Rustc<'_> {\n         self.lit(token::Float, Symbol::intern(n), None)\n     }\n     fn f32(&mut self, n: &str) -> Self::Literal {\n-        self.lit(token::Float, Symbol::intern(n), Some(Symbol::intern(\"f32\")))\n+        self.lit(token::Float, Symbol::intern(n), Some(sym::f32))\n     }\n     fn f64(&mut self, n: &str) -> Self::Literal {\n-        self.lit(token::Float, Symbol::intern(n), Some(Symbol::intern(\"f64\")))\n+        self.lit(token::Float, Symbol::intern(n), Some(sym::f64))\n     }\n     fn string(&mut self, string: &str) -> Self::Literal {\n         let mut escaped = String::new();"}, {"sha": "186673c142f14b13db8daeb72df7155548329bcc", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -17,22 +17,13 @@ use syntax::source_map::respan;\n use syntax::symbol::sym;\n use syntax_pos::Span;\n use syntax::source_map::{ExpnInfo, MacroAttribute};\n-use syntax::feature_gate;\n \n pub fn expand(\n     ecx: &mut ExtCtxt<'_>,\n     attr_sp: Span,\n     _meta_item: &ast::MetaItem,\n     anno_item: Annotatable\n ) -> Vec<Annotatable> {\n-    if !ecx.ecfg.enable_custom_test_frameworks() {\n-        feature_gate::emit_feature_err(&ecx.parse_sess,\n-                                       sym::custom_test_frameworks,\n-                                       attr_sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_CUSTOM_TEST_FRAMEWORKS);\n-    }\n-\n     if !ecx.ecfg.should_test { return vec![]; }\n \n     let sp = {"}, {"sha": "0dce8a36f4c7b24c39b769eb58c1dbeba3913c07", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,21 +1,12 @@\n use syntax::ext::base::{self, ExtCtxt};\n-use syntax::feature_gate;\n-use syntax::symbol::{kw, sym};\n+use syntax::symbol::kw;\n use syntax_pos::Span;\n use syntax::tokenstream::TokenTree;\n \n pub fn expand_trace_macros(cx: &mut ExtCtxt<'_>,\n                            sp: Span,\n                            tt: &[TokenTree])\n                            -> Box<dyn base::MacResult + 'static> {\n-    if !cx.ecfg.enable_trace_macros() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       sym::trace_macros,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_TRACE_MACROS);\n-    }\n-\n     match tt {\n         [TokenTree::Token(token)] if token.is_keyword(kw::True) => {\n             cx.set_trace_macros(true);"}, {"sha": "8bb622a68552f66a3324a2fa2e478b6d79fc9a8c", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -141,6 +141,7 @@ symbols! {\n         ArgumentV1,\n         arm_target_feature,\n         asm,\n+        assert,\n         associated_consts,\n         associated_type_bounds,\n         associated_type_defaults,\n@@ -184,8 +185,10 @@ symbols! {\n         cmp,\n         cmpxchg16b_target_feature,\n         cold,\n+        column,\n         compile_error,\n         compiler_builtins,\n+        concat,\n         concat_idents,\n         conservative_impl_trait,\n         console,\n@@ -203,6 +206,7 @@ symbols! {\n         contents,\n         context,\n         convert,\n+        Copy,\n         copy_closures,\n         core,\n         core_intrinsics,\n@@ -217,8 +221,10 @@ symbols! {\n         custom_inner_attributes,\n         custom_test_frameworks,\n         c_variadic,\n+        Debug,\n         declare_lint_pass,\n         decl_macro,\n+        Decodable,\n         Default,\n         default_lib_allocator,\n         default_type_parameter_fallback,\n@@ -253,9 +259,12 @@ symbols! {\n         eh_personality,\n         eh_unwind_resume,\n         enable,\n+        Encodable,\n+        env,\n         eq,\n         err,\n         Err,\n+        Eq,\n         Equal,\n         except,\n         exclusive_range_pattern,\n@@ -284,6 +293,7 @@ symbols! {\n         fmt_internals,\n         fn_must_use,\n         forbid,\n+        format_args,\n         format_args_nl,\n         from,\n         From,\n@@ -335,6 +345,8 @@ symbols! {\n         index_mut,\n         in_band_lifetimes,\n         include,\n+        include_bytes,\n+        include_str,\n         inclusive_range_syntax,\n         infer_outlives_requirements,\n         infer_static_outlives_requirements,\n@@ -363,6 +375,7 @@ symbols! {\n         lhs,\n         lib,\n         lifetime,\n+        line,\n         link,\n         linkage,\n         link_args,\n@@ -402,6 +415,7 @@ symbols! {\n         mips_target_feature,\n         mmx_target_feature,\n         module,\n+        module_path,\n         more_struct_aliases,\n         movbe_target_feature,\n         must_use,\n@@ -447,6 +461,7 @@ symbols! {\n         optin_builtin_traits,\n         option,\n         Option,\n+        option_env,\n         opt_out_copy,\n         or,\n         Ord,\n@@ -462,6 +477,7 @@ symbols! {\n         parent_trait,\n         partial_cmp,\n         param_attrs,\n+        PartialEq,\n         PartialOrd,\n         passes,\n         pat,\n@@ -532,6 +548,8 @@ symbols! {\n         rust_2018_preview,\n         rust_begin_unwind,\n         rustc,\n+        RustcDecodable,\n+        RustcEncodable,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_ptr,\n@@ -591,7 +609,6 @@ symbols! {\n         _Self,\n         self_in_typedefs,\n         self_struct_ctor,\n-        Send,\n         should_panic,\n         simd,\n         simd_ffi,\n@@ -613,6 +630,7 @@ symbols! {\n         static_recursion,\n         std,\n         str,\n+        stringify,\n         stmt,\n         stmt_expr_attributes,\n         stop_after_dataflow,"}, {"sha": "817bddf69562b9847685bf4184bd58ef52d5a0e2", "filename": "src/test/run-pass/macros/macro-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-stability.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // aux-build:unstable-macros.rs\n \n-#![feature(unstable_macros)]\n+#![feature(unstable_macros, local_unstable)]\n \n #[macro_use] extern crate unstable_macros;\n "}, {"sha": "9afb3a35cb402898e05c1910a64e47bea00e6ee4", "filename": "src/test/ui-fulldeps/deprecated-derive.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,6 +1,8 @@\n-warning: derive(Encodable) is deprecated in favor of derive(RustcEncodable)\n+warning: use of deprecated item 'Encodable': derive(Encodable) is deprecated in favor of derive(RustcEncodable)\n   --> $DIR/deprecated-derive.rs:8:10\n    |\n LL | #[derive(Encodable)]\n    |          ^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n "}, {"sha": "30a7582a92bd4d7d2a851bd9ce0a8607cf0995c8", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: inline assembly is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'asm': inline assembly is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-asm.rs:3:9\n    |\n LL |         asm!(\"\");"}, {"sha": "8f4c6806a97010bb27532f4088a867149abb655a", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: inline assembly is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'asm': inline assembly is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-asm2.rs:5:26\n    |\n LL |         println!(\"{:?}\", asm!(\"\"));"}, {"sha": "2a1e5f54592f80368c36304049cc3938c8dc5802", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents.rs:5:13\n    |\n LL |     let a = concat_idents!(X, Y_1);\n@@ -7,7 +7,7 @@ LL |     let a = concat_idents!(X, Y_1);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents.rs:6:13\n    |\n LL |     let b = concat_idents!(X, Y_2);"}, {"sha": "0dc6c13734ef11708fd1051369d1e127c0bba6a0", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents2.rs:4:5\n    |\n LL |     concat_idents!(a, b);"}, {"sha": "543570f0afc3ffe723af9d4215f82c1bddec1e4a", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents3.rs:7:20\n    |\n LL |     assert_eq!(10, concat_idents!(X, Y_1));\n@@ -7,7 +7,7 @@ LL |     assert_eq!(10, concat_idents!(X, Y_1));\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents3.rs:8:20\n    |\n LL |     assert_eq!(20, concat_idents!(X, Y_2));"}, {"sha": "83bb153ba08a15538f9037f79d4c2a918c1af194", "filename": "src/test/ui/feature-gates/feature-gate-custom_test_frameworks.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,3 +1,6 @@\n #![test_runner(main)] //~ ERROR custom test frameworks are an unstable feature\n \n+#[test_case] //~ ERROR custom test frameworks are an unstable feature\n+fn f() {}\n+\n fn main() {}"}, {"sha": "31ff7aebe3a0168e43a4777c01cb76baf89d88c7", "filename": "src/test/ui/feature-gates/feature-gate-custom_test_frameworks.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,3 +1,12 @@\n+error[E0658]: use of unstable library feature 'custom_test_frameworks': custom test frameworks are an unstable feature\n+  --> $DIR/feature-gate-custom_test_frameworks.rs:3:1\n+   |\n+LL | #[test_case]\n+   | ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/50297\n+   = help: add #![feature(custom_test_frameworks)] to the crate attributes to enable\n+\n error[E0658]: custom test frameworks are an unstable feature\n   --> $DIR/feature-gate-custom_test_frameworks.rs:1:1\n    |\n@@ -7,6 +16,6 @@ LL | #![test_runner(main)]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/50297\n    = help: add #![feature(custom_test_frameworks)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "5cf48d8749c8f69f0575708b17ccd8d338761b09", "filename": "src/test/ui/feature-gates/feature-gate-format_args_nl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-format_args_nl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-format_args_nl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-format_args_nl.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `format_args_nl` is only for internal language use and is subject to change\n+error[E0658]: use of unstable library feature 'format_args_nl': `format_args_nl` is only for internal language use and is subject to change\n   --> $DIR/feature-gate-format_args_nl.rs:2:5\n    |\n LL |     format_args_nl!(\"\");"}, {"sha": "c65f8d87a6a2356f32917dd451368645e4ee4a17", "filename": "src/test/ui/feature-gates/feature-gate-global_asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `global_asm!` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'global_asm': `global_asm!` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-global_asm.rs:1:1\n    |\n LL | global_asm!(\"\");"}, {"sha": "f6a07616c5308bd683724696b9f4f6140e7db8bd", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `log_syntax!` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-log_syntax.rs:2:5\n    |\n LL |     log_syntax!()"}, {"sha": "cfc2beb80879cacd65deb00a32e9df4fbe13f9b1", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `log_syntax!` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-log_syntax2.rs:4:22\n    |\n LL |     println!(\"{:?}\", log_syntax!());"}, {"sha": "e08b173ae84ad0ffc2241314aef57b735224480b", "filename": "src/test/ui/feature-gates/feature-gate-trace_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-trace_macros.rs:2:5\n    |\n LL |     trace_macros!(true);"}, {"sha": "657a7252a36ded1ebfd4c5c319e83a846515eedf", "filename": "src/test/ui/macros/auxiliary/deprecated-macros.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdeprecated-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdeprecated-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdeprecated-macros.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -0,0 +1,3 @@\n+#[deprecated(since = \"1.0.0\", note = \"deprecation note\")]\n+#[macro_export]\n+macro_rules! deprecated_macro{ () => () }"}, {"sha": "e928dc705d71fec8772b04fca343e47de1480cff", "filename": "src/test/ui/macros/auxiliary/unstable-macros.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,6 +1,16 @@\n+#![feature(decl_macro)]\n #![feature(staged_api)]\n #![stable(feature = \"unit_test\", since = \"1.0.0\")]\n \n #[unstable(feature = \"unstable_macros\", issue = \"0\")]\n #[macro_export]\n macro_rules! unstable_macro{ () => () }\n+\n+#[stable(feature = \"deprecated_macros\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"deprecation reason\")]\n+#[macro_export]\n+macro_rules! deprecated_macro{ () => () }\n+\n+// FIXME: Cannot use a `pub` macro 2.0 in a staged API crate due to reachability issues.\n+// #[unstable(feature = \"unstable_macros\", issue = \"0\")]\n+// pub macro unstable_macro_modern() {}"}, {"sha": "9636b48c2daa3c3b541943dd47a29eb3d35d6b32", "filename": "src/test/ui/macros/macro-deprecation.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+// aux-build:deprecated-macros.rs\n+\n+#[macro_use] extern crate deprecated_macros;\n+\n+#[deprecated(since = \"1.0.0\", note = \"local deprecation note\")]\n+#[macro_export]\n+macro_rules! local_deprecated{ () => () }\n+\n+fn main() {\n+    local_deprecated!(); //~ WARN use of deprecated item 'local_deprecated': local deprecation note\n+    deprecated_macro!(); //~ WARN use of deprecated item 'deprecated_macro': deprecation note\n+}"}, {"sha": "e5f4df5223752e5f80364c3f5aa840ea70b67ddb", "filename": "src/test/ui/macros/macro-deprecation.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -0,0 +1,14 @@\n+warning: use of deprecated item 'local_deprecated': local deprecation note\n+  --> $DIR/macro-deprecation.rs:11:5\n+   |\n+LL |     local_deprecated!();\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n+\n+warning: use of deprecated item 'deprecated_macro': deprecation note\n+  --> $DIR/macro-deprecation.rs:12:5\n+   |\n+LL |     deprecated_macro!();\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "ab927e419b4c3cfd5e36da4fca41978ec157a0a2", "filename": "src/test/ui/macros/macro-stability.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,12 +1,28 @@\n // aux-build:unstable-macros.rs\n \n+#![feature(decl_macro)]\n #![feature(staged_api)]\n #[macro_use] extern crate unstable_macros;\n \n #[unstable(feature = \"local_unstable\", issue = \"0\")]\n macro_rules! local_unstable { () => () }\n \n+#[unstable(feature = \"local_unstable\", issue = \"0\")]\n+macro local_unstable_modern() {}\n+\n+#[stable(feature = \"deprecated_macros\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"local deprecation reason\")]\n+#[macro_export]\n+macro_rules! local_deprecated{ () => () }\n+\n fn main() {\n-    local_unstable!();\n-    unstable_macro!(); //~ ERROR: macro unstable_macro! is unstable\n+    local_unstable!(); //~ ERROR use of unstable library feature 'local_unstable'\n+    local_unstable_modern!(); //~ ERROR use of unstable library feature 'local_unstable'\n+    unstable_macro!(); //~ ERROR use of unstable library feature 'unstable_macros'\n+    // unstable_macro_modern!(); // ERROR use of unstable library feature 'unstable_macros'\n+\n+    deprecated_macro!();\n+    //~^ WARN use of deprecated item 'deprecated_macro': deprecation reason\n+    local_deprecated!();\n+    //~^ WARN use of deprecated item 'local_deprecated': local deprecation reason\n }"}, {"sha": "88edadc3811bc7f9cc6fedead6df97b3ae71bc5f", "filename": "src/test/ui/macros/macro-stability.stderr", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,11 +1,41 @@\n-error[E0658]: macro unstable_macro! is unstable\n-  --> $DIR/macro-stability.rs:11:5\n+error[E0658]: use of unstable library feature 'local_unstable'\n+  --> $DIR/macro-stability.rs:19:5\n+   |\n+LL |     local_unstable!();\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(local_unstable)] to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'local_unstable'\n+  --> $DIR/macro-stability.rs:20:5\n+   |\n+LL |     local_unstable_modern!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(local_unstable)] to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_macros'\n+  --> $DIR/macro-stability.rs:21:5\n    |\n LL |     unstable_macro!();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unstable_macros)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+warning: use of deprecated item 'deprecated_macro': deprecation reason\n+  --> $DIR/macro-stability.rs:24:5\n+   |\n+LL |     deprecated_macro!();\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n+\n+warning: use of deprecated item 'local_deprecated': local deprecation reason\n+  --> $DIR/macro-stability.rs:26:5\n+   |\n+LL |     local_deprecated!();\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "053806ead2d12bcc50c1923793923ac3a21bb94d", "filename": "src/test/ui/rust-unstable-column-gated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     println!(\"{}\", __rust_unstable_column!());\n-    //~^ERROR the __rust_unstable_column macro is unstable\n+    //~^ ERROR use of unstable library feature '__rust_unstable_column'\n }"}, {"sha": "70b3654b5af7e5446d718e81f5df4597dba0f53d", "filename": "src/test/ui/rust-unstable-column-gated.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,8 +1,11 @@\n-error: the __rust_unstable_column macro is unstable\n+error[E0658]: use of unstable library feature '__rust_unstable_column': internal implementation detail of the `column` macro\n   --> $DIR/rust-unstable-column-gated.rs:2:20\n    |\n LL |     println!(\"{}\", __rust_unstable_column!());\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(__rust_unstable_column)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "18745e9ab5a6c90de863e11c58a21e150d29958f", "filename": "src/test/ui/trace_macros-gate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3250b8ee596afc9881aee092279efaa57486d2ea/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr?ref=3250b8ee596afc9881aee092279efaa57486d2ea", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:4:5\n    |\n LL |     trace_macros!();\n@@ -13,7 +13,7 @@ error: trace_macros! accepts only `true` or `false`\n LL |     trace_macros!();\n    |     ^^^^^^^^^^^^^^^^\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:6:5\n    |\n LL |     trace_macros!(true);\n@@ -22,7 +22,7 @@ LL |     trace_macros!(true);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:7:5\n    |\n LL |     trace_macros!(false);\n@@ -31,7 +31,7 @@ LL |     trace_macros!(false);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:10:26\n    |\n LL |         ($x: ident) => { trace_macros!($x) }"}]}