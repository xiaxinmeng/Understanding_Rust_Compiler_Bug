{"sha": "1190c91a61b056fcdebebd0770745f2a5649c71f", "node_id": "C_kwDOAAsO6NoAKDExOTBjOTFhNjFiMDU2ZmNkZWJlYmQwNzcwNzQ1ZjJhNTY0OWM3MWY", "commit": {"author": {"name": "gftea", "email": "ckq614@gmail.com", "date": "2023-02-22T18:18:19Z"}, "committer": {"name": "gftea", "email": "ckq614@gmail.com", "date": "2023-03-10T19:06:18Z"}, "message": "improve doc test for UnsafeCell::raw_get and fix docs error", "tree": {"sha": "4ad030c1e30b497863623c14bb3c64255a554cde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad030c1e30b497863623c14bb3c64255a554cde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1190c91a61b056fcdebebd0770745f2a5649c71f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1190c91a61b056fcdebebd0770745f2a5649c71f", "html_url": "https://github.com/rust-lang/rust/commit/1190c91a61b056fcdebebd0770745f2a5649c71f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1190c91a61b056fcdebebd0770745f2a5649c71f/comments", "author": {"login": "gftea", "id": 1705787, "node_id": "MDQ6VXNlcjE3MDU3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1705787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gftea", "html_url": "https://github.com/gftea", "followers_url": "https://api.github.com/users/gftea/followers", "following_url": "https://api.github.com/users/gftea/following{/other_user}", "gists_url": "https://api.github.com/users/gftea/gists{/gist_id}", "starred_url": "https://api.github.com/users/gftea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gftea/subscriptions", "organizations_url": "https://api.github.com/users/gftea/orgs", "repos_url": "https://api.github.com/users/gftea/repos", "events_url": "https://api.github.com/users/gftea/events{/privacy}", "received_events_url": "https://api.github.com/users/gftea/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gftea", "id": 1705787, "node_id": "MDQ6VXNlcjE3MDU3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1705787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gftea", "html_url": "https://github.com/gftea", "followers_url": "https://api.github.com/users/gftea/followers", "following_url": "https://api.github.com/users/gftea/following{/other_user}", "gists_url": "https://api.github.com/users/gftea/gists{/gist_id}", "starred_url": "https://api.github.com/users/gftea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gftea/subscriptions", "organizations_url": "https://api.github.com/users/gftea/orgs", "repos_url": "https://api.github.com/users/gftea/repos", "events_url": "https://api.github.com/users/gftea/events{/privacy}", "received_events_url": "https://api.github.com/users/gftea/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5833423a02e2373c5e3cceb238fb19192cd82f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5833423a02e2373c5e3cceb238fb19192cd82f8", "html_url": "https://github.com/rust-lang/rust/commit/d5833423a02e2373c5e3cceb238fb19192cd82f8"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "8c7cd42d010ee1d3a28ba53372f29953cc035347", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1190c91a61b056fcdebebd0770745f2a5649c71f/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190c91a61b056fcdebebd0770745f2a5649c71f/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=1190c91a61b056fcdebebd0770745f2a5649c71f", "patch": "@@ -2053,6 +2053,8 @@ impl<T: ?Sized> UnsafeCell<T> {\n     ///\n     /// let m = MaybeUninit::<UnsafeCell<i32>>::uninit();\n     /// unsafe { UnsafeCell::raw_get(m.as_ptr()).write(5); }\n+    /// // avoid below which references to uninitialized data\n+    /// // unsafe { UnsafeCell::get(&*m.as_ptr()).write(5); }\n     /// let uc = unsafe { m.assume_init() };\n     ///\n     /// assert_eq!(uc.into_inner(), 5);"}, {"sha": "28648f1360ada0bd8cea459f7bd200b4cbeb94e1", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1190c91a61b056fcdebebd0770745f2a5649c71f/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190c91a61b056fcdebebd0770745f2a5649c71f/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=1190c91a61b056fcdebebd0770745f2a5649c71f", "patch": "@@ -138,7 +138,7 @@ impl<'a> PanicInfo<'a> {\n     /// whose ABI does not support unwinding.\n     ///\n     /// It is safe for a panic handler to unwind even when this function returns\n-    /// true, however this will simply cause the panic handler to be called\n+    /// false, however this will simply cause the panic handler to be called\n     /// again.\n     #[must_use]\n     #[unstable(feature = \"panic_can_unwind\", issue = \"92988\")]"}]}