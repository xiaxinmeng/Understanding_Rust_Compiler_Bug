{"sha": "ad9b07c7e5c1a24ec3b75a5bc70708dbed2e40f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOWIwN2M3ZTVjMWEyNGVjM2I3NWE1YmM3MDcwOGRiZWQyZTQwZjk=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-04T22:34:16Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-11-13T18:46:37Z"}, "message": "add benchmarks", "tree": {"sha": "13a79c5d3d934f65cc7d708bbea0bedd9aa9370b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a79c5d3d934f65cc7d708bbea0bedd9aa9370b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad9b07c7e5c1a24ec3b75a5bc70708dbed2e40f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9b07c7e5c1a24ec3b75a5bc70708dbed2e40f9", "html_url": "https://github.com/rust-lang/rust/commit/ad9b07c7e5c1a24ec3b75a5bc70708dbed2e40f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad9b07c7e5c1a24ec3b75a5bc70708dbed2e40f9/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e7fbe60b53e486ff39d29c571428c8a345e925", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e7fbe60b53e486ff39d29c571428c8a345e925", "html_url": "https://github.com/rust-lang/rust/commit/46e7fbe60b53e486ff39d29c571428c8a345e925"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "9a0672e88b80fa9897711993e30f61b95b543e55", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 131, "deletions": 1, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ad9b07c7e5c1a24ec3b75a5bc70708dbed2e40f9/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9b07c7e5c1a24ec3b75a5bc70708dbed2e40f9/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=ad9b07c7e5c1a24ec3b75a5bc70708dbed2e40f9", "patch": "@@ -1,8 +1,15 @@\n use super::{repeat, Cursor, SeekFrom};\n use crate::cmp::{self, min};\n+use crate::env::temp_dir;\n+#[cfg(unix)]\n+use crate::fs::OpenOptions;\n+#[cfg(unix)]\n+use crate::io::Result;\n use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::io::{BufRead, BufReader, BufWriter, Read, Result, Seek, Write};\n+use crate::io::{BufRead, Read, Seek, Write};\n use crate::ops::Deref;\n+#[cfg(unix)]\n+use crate::os::unix::io::AsRawFd;\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n@@ -496,6 +503,8 @@ fn test_write_all_vectored() {\n #[test]\n #[cfg(unix)]\n fn copy_specialization() -> Result<()> {\n+    use crate::io::{BufReader, BufWriter};\n+\n     let path = crate::env::temp_dir();\n     let source_path = path.join(\"copy-spec.source\");\n     let sink_path = path.join(\"copy-spec.sink\");\n@@ -543,3 +552,124 @@ fn copy_specialization() -> Result<()> {\n \n     result.and(rm1).and(rm2)\n }\n+\n+#[bench]\n+fn bench_file_to_file_copy(b: &mut test::Bencher) {\n+    const BYTES: usize = 128 * 1024;\n+    let src_path = temp_dir().join(\"file-copy-bench-src\");\n+    let mut src = crate::fs::OpenOptions::new()\n+        .create(true)\n+        .truncate(true)\n+        .read(true)\n+        .write(true)\n+        .open(src_path)\n+        .unwrap();\n+    src.write(&vec![0u8; BYTES]).unwrap();\n+\n+    let sink_path = temp_dir().join(\"file-copy-bench-sink\");\n+    let mut sink = crate::fs::OpenOptions::new()\n+        .create(true)\n+        .truncate(true)\n+        .write(true)\n+        .open(sink_path)\n+        .unwrap();\n+\n+    b.bytes = BYTES as u64;\n+    b.iter(|| {\n+        src.seek(SeekFrom::Start(0)).unwrap();\n+        sink.seek(SeekFrom::Start(0)).unwrap();\n+        assert_eq!(BYTES as u64, io::copy(&mut src, &mut sink).unwrap());\n+    });\n+}\n+\n+#[cfg(unix)]\n+#[bench]\n+fn bench_file_to_socket_copy(b: &mut test::Bencher) {\n+    const BYTES: usize = 128 * 1024;\n+    let src_path = temp_dir().join(\"pipe-copy-bench-src\");\n+    let mut src = OpenOptions::new()\n+        .create(true)\n+        .truncate(true)\n+        .read(true)\n+        .write(true)\n+        .open(src_path)\n+        .unwrap();\n+    src.write(&vec![0u8; BYTES]).unwrap();\n+\n+    let sink_drainer = crate::net::TcpListener::bind(\"localhost:0\").unwrap();\n+    let mut sink = crate::net::TcpStream::connect(sink_drainer.local_addr().unwrap()).unwrap();\n+    let mut sink_drainer = sink_drainer.accept().unwrap().0;\n+\n+    crate::thread::spawn(move || {\n+        let mut sink_buf = vec![0u8; 1024 * 1024];\n+        loop {\n+            sink_drainer.read(&mut sink_buf[..]).unwrap();\n+        }\n+    });\n+\n+    b.bytes = BYTES as u64;\n+    b.iter(|| {\n+        src.seek(SeekFrom::Start(0)).unwrap();\n+        assert_eq!(BYTES as u64, io::copy(&mut src, &mut sink).unwrap());\n+    });\n+}\n+\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+#[bench]\n+fn bench_socket_pipe_socket_copy(b: &mut test::Bencher) {\n+    use crate::io::ErrorKind;\n+    use crate::process::{ChildStdin, ChildStdout};\n+    use crate::sys_common::FromInner;\n+\n+    let (read_end, write_end) = crate::sys::pipe::anon_pipe().unwrap();\n+\n+    let mut read_end = ChildStdout::from_inner(read_end);\n+    let write_end = ChildStdin::from_inner(write_end);\n+\n+    let acceptor = crate::net::TcpListener::bind(\"localhost:0\").unwrap();\n+    let mut remote_end = crate::net::TcpStream::connect(acceptor.local_addr().unwrap()).unwrap();\n+\n+    let local_end = crate::sync::Arc::new(acceptor.accept().unwrap().0);\n+\n+    crate::thread::spawn(move || {\n+        let mut sink_buf = vec![0u8; 1024 * 1024];\n+        remote_end.set_nonblocking(true).unwrap();\n+        loop {\n+            match remote_end.write(&mut sink_buf[..]) {\n+                Err(err) if err.kind() == ErrorKind::WouldBlock => {}\n+                Ok(_) => {}\n+                err => {\n+                    err.expect(\"write failed\");\n+                }\n+            };\n+            match remote_end.read(&mut sink_buf[..]) {\n+                Err(err) if err.kind() == ErrorKind::WouldBlock => {}\n+                Ok(_) => {}\n+                err => {\n+                    err.expect(\"read failed\");\n+                }\n+            };\n+        }\n+    });\n+\n+    let local_source = local_end.clone();\n+    crate::thread::spawn(move || {\n+        loop {\n+            crate::sys::fs::sendfile_splice(\n+                crate::sys::fs::SpliceMode::Splice,\n+                local_source.as_raw_fd(),\n+                write_end.as_raw_fd(),\n+                u64::MAX,\n+            );\n+        }\n+    });\n+\n+    const BYTES: usize = 128 * 1024;\n+    b.bytes = BYTES as u64;\n+    b.iter(|| {\n+        assert_eq!(\n+            BYTES as u64,\n+            io::copy(&mut (&mut read_end).take(BYTES as u64), &mut &*local_end).unwrap()\n+        );\n+    });\n+}"}]}