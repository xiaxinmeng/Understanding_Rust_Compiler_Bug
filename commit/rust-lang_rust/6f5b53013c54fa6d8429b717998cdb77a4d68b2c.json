{"sha": "6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNWI1MzAxM2M1NGZhNmQ4NDI5YjcxNzk5OGNkYjc3YTRkNjhiMmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T18:39:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T18:39:09Z"}, "message": "Merge #5611\n\n5611: Finalize attribute grammar r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c09cf0434ecf282cf1763d34cf838952db105e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09cf0434ecf282cf1763d34cf838952db105e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIxPNCRBK7hj4Ov3rIwAAdHIIACzeMS0eqbi4pepLio0s9j0Z\nU5jolXTeVAL4aTp1OkMkecTot/xjY2SfnqKMp0qtGnCEpEvDbx00ZR0ckDCCeADh\n27gQzP8YsZP40Uz2IweBkyk+9ucy15RKyDOu9oxeLTSiHZA9krSeoXwx/FND7x49\namACtv2AEXRA3IPNXN8VbivhtxiH3Cj7R4oFOiyHnybpRPOVdoIfaT4M+x/pJbUT\niuXCGsamnRwt42XVbny8zVifzUnZ/R4Yy2G7pwvkWMf7LCqZgyVGhzpMLIMDtmc4\nUa1F7iXHybIPEH4iZ2GffUNQGJ8oj/hNjCGzIcxZZzp212sa9TBjRPObHgbKDDI=\n=R4w/\n-----END PGP SIGNATURE-----\n", "payload": "tree c09cf0434ecf282cf1763d34cf838952db105e0a\nparent e28ea81b2b68a61b5c5eec3c815172b17256a25f\nparent fbe60a2e284035d16c2a1ee743ee88db418689aa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596134349 +0000\ncommitter GitHub <noreply@github.com> 1596134349 +0000\n\nMerge #5611\n\n5611: Finalize attribute grammar r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "html_url": "https://github.com/rust-lang/rust/commit/6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28ea81b2b68a61b5c5eec3c815172b17256a25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e28ea81b2b68a61b5c5eec3c815172b17256a25f", "html_url": "https://github.com/rust-lang/rust/commit/e28ea81b2b68a61b5c5eec3c815172b17256a25f"}, {"sha": "fbe60a2e284035d16c2a1ee743ee88db418689aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe60a2e284035d16c2a1ee743ee88db418689aa", "html_url": "https://github.com/rust-lang/rust/commit/fbe60a2e284035d16c2a1ee743ee88db418689aa"}], "stats": {"total": 148, "additions": 48, "deletions": 100}, "files": [{"sha": "b67438b6ba26689dac22012ed73c58eae14fb259", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "patch": "@@ -29,8 +29,8 @@ use crate::{\n // }\n // ```\n pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let input = ctx.find_node_at_offset::<ast::AttrInput>()?;\n-    let attr = input.syntax().parent().and_then(ast::Attr::cast)?;\n+    let attr = ctx.find_node_at_offset::<ast::Attr>()?;\n+    let input = attr.token_tree()?;\n \n     let attr_name = attr\n         .syntax()"}, {"sha": "050832ce01be0cd51d2dccc00c23882624bcb7b1", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "patch": "@@ -151,18 +151,15 @@ pub enum AttrInput {\n impl Attr {\n     fn from_src(ast: ast::Attr, hygiene: &Hygiene) -> Option<Attr> {\n         let path = ModPath::from_src(ast.path()?, hygiene)?;\n-        let input = match ast.input() {\n-            None => None,\n-            Some(ast::AttrInput::Literal(lit)) => {\n-                // FIXME: escape? raw string?\n-                let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n-                Some(AttrInput::Literal(value))\n-            }\n-            Some(ast::AttrInput::TokenTree(tt)) => {\n-                Some(AttrInput::TokenTree(ast_to_token_tree(&tt)?.0))\n-            }\n+        let input = if let Some(lit) = ast.literal() {\n+            // FIXME: escape? raw string?\n+            let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n+            Some(AttrInput::Literal(value))\n+        } else if let Some(tt) = ast.token_tree() {\n+            Some(AttrInput::TokenTree(ast_to_token_tree(&tt)?.0))\n+        } else {\n+            None\n         };\n-\n         Some(Attr { path, input })\n     }\n }"}, {"sha": "2faaae974607c875568bd91cebd48427b0d29d4f", "filename": "crates/ra_ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "patch": "@@ -13,20 +13,18 @@ use crate::completion::{\n \n pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let attribute = ctx.attribute_under_caret.as_ref()?;\n-    match (attribute.path(), attribute.input()) {\n-        (Some(path), Some(ast::AttrInput::TokenTree(token_tree)))\n-            if path.to_string() == \"derive\" =>\n-        {\n+    match (attribute.path(), attribute.token_tree()) {\n+        (Some(path), Some(token_tree)) if path.to_string() == \"derive\" => {\n             complete_derive(acc, ctx, token_tree)\n         }\n-        (Some(path), Some(ast::AttrInput::TokenTree(token_tree)))\n+        (Some(path), Some(token_tree))\n             if [\"allow\", \"warn\", \"deny\", \"forbid\"]\n                 .iter()\n                 .any(|lint_level| lint_level == &path.to_string()) =>\n         {\n             complete_lint(acc, ctx, token_tree)\n         }\n-        (_, Some(ast::AttrInput::TokenTree(_token_tree))) => {}\n+        (_, Some(_token_tree)) => {}\n         _ => complete_attribute_start(acc, ctx, attribute),\n     }\n     Some(())"}, {"sha": "c20ff53bf9c53a1a981a8fcb880f9a6795bffc70", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 20, "deletions": 57, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "patch": "@@ -24,7 +24,8 @@ impl Attr {\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn input(&self) -> Option<AttrInput> { support::child(&self.syntax) }\n+    pub fn literal(&self) -> Option<Literal> { support::child(&self.syntax) }\n+    pub fn token_tree(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -321,9 +322,9 @@ pub struct ParamList {\n }\n impl ParamList {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn params(&self) -> AstChildren<Param> { support::children(&self.syntax) }\n     pub fn self_param(&self) -> Option<SelfParam> { support::child(&self.syntax) }\n     pub fn comma_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![,]) }\n+    pub fn params(&self) -> AstChildren<Param> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -356,17 +357,6 @@ impl BlockExpr {\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Param {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for Param {}\n-impl ast::TypeAscriptionOwner for Param {}\n-impl Param {\n-    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n-    pub fn dotdotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![...]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SelfParam {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -382,6 +372,17 @@ impl SelfParam {\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Param {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for Param {}\n+impl ast::TypeAscriptionOwner for Param {}\n+impl Param {\n+    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n+    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn dotdotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![...]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1378,11 +1379,6 @@ pub enum GenericParam {\n }\n impl ast::AttrsOwner for GenericParam {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum AttrInput {\n-    Literal(Literal),\n-    TokenTree(TokenTree),\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Stmt {\n     LetStmt(LetStmt),\n     ExprStmt(ExprStmt),\n@@ -1728,8 +1724,8 @@ impl AstNode for BlockExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Param {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM }\n+impl AstNode for SelfParam {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SELF_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1739,8 +1735,8 @@ impl AstNode for Param {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for SelfParam {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SELF_PARAM }\n+impl AstNode for Param {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3342,34 +3338,6 @@ impl AstNode for GenericParam {\n         }\n     }\n }\n-impl From<Literal> for AttrInput {\n-    fn from(node: Literal) -> AttrInput { AttrInput::Literal(node) }\n-}\n-impl From<TokenTree> for AttrInput {\n-    fn from(node: TokenTree) -> AttrInput { AttrInput::TokenTree(node) }\n-}\n-impl AstNode for AttrInput {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LITERAL | TOKEN_TREE => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            LITERAL => AttrInput::Literal(Literal { syntax }),\n-            TOKEN_TREE => AttrInput::TokenTree(TokenTree { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            AttrInput::Literal(it) => &it.syntax,\n-            AttrInput::TokenTree(it) => &it.syntax,\n-        }\n-    }\n-}\n impl From<LetStmt> for Stmt {\n     fn from(node: LetStmt) -> Stmt { Stmt::LetStmt(node) }\n }\n@@ -3471,11 +3439,6 @@ impl std::fmt::Display for GenericParam {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for AttrInput {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for Stmt {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3636,12 +3599,12 @@ impl std::fmt::Display for BlockExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Param {\n+impl std::fmt::Display for SelfParam {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for SelfParam {\n+impl std::fmt::Display for Param {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "bba7310adeee914eec2672ebaf64785bbe24d52c", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "patch": "@@ -7,7 +7,7 @@ use itertools::Itertools;\n use ra_parser::SyntaxKind;\n \n use crate::{\n-    ast::{self, support, AstNode, AttrInput, NameOwner, SyntaxNode},\n+    ast::{self, support, AstNode, NameOwner, SyntaxNode},\n     SmolStr, SyntaxElement, SyntaxToken, T,\n };\n \n@@ -39,29 +39,23 @@ pub enum AttrKind {\n \n impl ast::Attr {\n     pub fn as_simple_atom(&self) -> Option<SmolStr> {\n-        match self.input() {\n-            None => self.simple_name(),\n-            Some(_) => None,\n+        if self.eq_token().is_some() || self.token_tree().is_some() {\n+            return None;\n         }\n+        self.simple_name()\n     }\n \n     pub fn as_simple_call(&self) -> Option<(SmolStr, ast::TokenTree)> {\n-        match self.input() {\n-            Some(AttrInput::TokenTree(tt)) => Some((self.simple_name()?, tt)),\n-            _ => None,\n-        }\n+        let tt = self.token_tree()?;\n+        Some((self.simple_name()?, tt))\n     }\n \n     pub fn as_simple_key_value(&self) -> Option<(SmolStr, SmolStr)> {\n-        match self.input() {\n-            Some(AttrInput::Literal(lit)) => {\n-                let key = self.simple_name()?;\n-                // FIXME: escape? raw string?\n-                let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n-                Some((key, value))\n-            }\n-            _ => None,\n-        }\n+        let lit = self.literal()?;\n+        let key = self.simple_name()?;\n+        // FIXME: escape? raw string?\n+        let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n+        Some((key, value))\n     }\n \n     pub fn simple_name(&self) -> Option<SmolStr> {"}, {"sha": "8c4f953b020df0b499299053843c7e19a5b53ac9", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/6f5b53013c54fa6d8429b717998cdb77a4d68b2c/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=6f5b53013c54fa6d8429b717998cdb77a4d68b2c", "patch": "@@ -54,9 +54,8 @@ Abi =\n \n ParamList =\n   '('(\n-    (Param (',' Param)* ','?)?\n-  | SelfParam ','?\n-  | SelfParam ',' (Param (',' Param)* ','?)\n+    SelfParam\n+  | (SelfParam ',')? (Param (',' Param)* ','?)?\n   )')'\n \n SelfParam =\n@@ -182,10 +181,7 @@ Visibility =\n   ')')?\n \n Attr =\n-  '#' '!'? '[' Path ('=' input:AttrInput)? ']'\n-\n-AttrInput =\n-  Literal | TokenTree\n+  '#' '!'? '[' Path ('=' Literal | TokenTree)? ']'\n \n ParenType =\n   '(' TypeRef ')'"}]}