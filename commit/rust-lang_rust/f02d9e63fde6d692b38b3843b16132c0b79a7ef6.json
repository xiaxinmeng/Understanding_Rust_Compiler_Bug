{"sha": "f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMmQ5ZTYzZmRlNmQ2OTJiMzhiMzg0M2IxNjEzMmMwYjc5YTdlZjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-07-20T05:09:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-20T05:09:52Z"}, "message": "Merge pull request #259 from RalfJung/ref-validate\n\nNo longer check aligment and non-NULLness on `&`", "tree": {"sha": "d9ecc6add6a7ded16f8d14c449e4616a9fff3bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9ecc6add6a7ded16f8d14c449e4616a9fff3bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "html_url": "https://github.com/rust-lang/rust/commit/f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c64479cd0e449634ef61bbf42dff42cfa1fc28", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c64479cd0e449634ef61bbf42dff42cfa1fc28", "html_url": "https://github.com/rust-lang/rust/commit/27c64479cd0e449634ef61bbf42dff42cfa1fc28"}, {"sha": "7648ccaae1296a43d3050536f9ed774782f9c775", "url": "https://api.github.com/repos/rust-lang/rust/commits/7648ccaae1296a43d3050536f9ed774782f9c775", "html_url": "https://github.com/rust-lang/rust/commit/7648ccaae1296a43d3050536f9ed774782f9c775"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "0fa38366e1c0a2e98c23b9598737780f16f5d591", "filename": "src/cast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "patch": "@@ -46,9 +46,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn cast_int(&self, v: u128, ty: ty::Ty<'tcx>, negative: bool) -> EvalResult<'tcx, PrimVal> {\n         use rustc::ty::TypeVariants::*;\n         match ty.sty {\n-            TyBool if v == 0 => Ok(PrimVal::from_bool(false)),\n-            TyBool if v == 1 => Ok(PrimVal::from_bool(true)),\n-            TyBool => Err(EvalError::InvalidBool),\n+            // Casts to bool are not permitted by rustc, no need to handle them here.\n \n             TyInt(IntTy::I8)  => Ok(PrimVal::Bytes(v as i128 as i8  as u128)),\n             TyInt(IntTy::I16) => Ok(PrimVal::Bytes(v as i128 as i16 as u128)),"}, {"sha": "5bcd83689337ba7e6d221d4bca4a820f397cd198", "filename": "src/eval_context.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "patch": "@@ -670,9 +670,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             Ref(_, _, ref lvalue) => {\n                 let src = self.eval_lvalue(lvalue)?;\n-                // We ignore the alignment of the lvalue here -- this rvalue produces sth. of type &, which must always be aligned.\n+                // We ignore the alignment of the lvalue here -- special handling for packed structs ends\n+                // at the `&` operator.\n                 let (ptr, extra, _aligned) = self.force_allocation(src)?.to_ptr_extra_aligned();\n-                let ty = self.lvalue_ty(lvalue);\n \n                 let val = match extra {\n                     LvalueExtra::None => ptr.to_value(),\n@@ -682,10 +682,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n                 };\n \n-                // Check alignment and non-NULLness.\n-                let (_, align) = self.size_and_align_of_dst(ty, val)?;\n-                self.memory.check_align(ptr, align)?;\n-\n                 self.write_value(val, dest, dest_ty)?;\n             }\n \n@@ -1105,6 +1101,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx> {\n+        //trace!(\"Writing {:?} to {:?} at type {:?}\", src_val, dest, dest_ty);\n         // Note that it is really important that the type here is the right one, and matches the type things are read at.\n         // In case `src_val` is a `ByValPair`, we don't do any magic here to handle padding properly, which is only\n         // correct if we never look at this data with the wrong type.\n@@ -1382,7 +1379,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // if we transmute a ptr to an isize, reading it back into a primval shouldn't panic\n                 // Due to read_ptr ignoring the sign, we need to jump around some hoops\n                 match self.memory.read_int(ptr.to_ptr()?, size) {\n-                    Err(EvalError::ReadPointerAsBytes) if size == self.memory.pointer_size() => self.memory.read_ptr(ptr.to_ptr()?)?.into_inner_primval(),\n+                    Err(EvalError::ReadPointerAsBytes) if size == self.memory.pointer_size() =>\n+                        // Reading as an int failed because we are seeing ptr bytes *and* we are actually reading at ptr size.\n+                        // Let's try again, reading a ptr this time.\n+                        self.memory.read_ptr(ptr.to_ptr()?)?.into_inner_primval(),\n                     other => PrimVal::from_i128(other?),\n                 }\n             }\n@@ -1397,11 +1397,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     U128 => 16,\n                     Us => self.memory.pointer_size(),\n                 };\n-                if size == self.memory.pointer_size() {\n-                    // if we transmute a ptr to an usize, reading it back into a primval shouldn't panic\n-                    self.memory.read_ptr(ptr.to_ptr()?)?.into_inner_primval()\n-                } else {\n-                    PrimVal::from_u128(self.memory.read_uint(ptr.to_ptr()?, size)?)\n+                // if we transmute a ptr to an usize, reading it back into a primval shouldn't panic\n+                // for consistency's sake, we use the same code as above\n+                match self.memory.read_uint(ptr.to_ptr()?, size) {\n+                    Err(EvalError::ReadPointerAsBytes) if size == self.memory.pointer_size() => self.memory.read_ptr(ptr.to_ptr()?)?.into_inner_primval(),\n+                    other => PrimVal::from_u128(other?),\n                 }\n             }\n "}, {"sha": "71f4c329b5be0ca58b183d9fc3f04682f374b218", "filename": "src/memory.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "patch": "@@ -720,12 +720,14 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n     pub fn read_ptr(&self, ptr: MemoryPointer) -> EvalResult<'tcx, Pointer> {\n         let size = self.pointer_size();\n-        if self.check_defined(ptr, size).is_err() {\n-            return Ok(PrimVal::Undef.into());\n-        }\n         self.check_relocation_edges(ptr, size)?; // Make sure we don't read part of a pointer as a pointer\n         let endianess = self.endianess();\n         let bytes = self.get_bytes_unchecked(ptr, size, size)?;\n+        // Undef check happens *after* we established that the alignment is correct.\n+        // We must not return Ok() for unaligned pointers!\n+        if self.check_defined(ptr, size).is_err() {\n+            return Ok(PrimVal::Undef.into());\n+        }\n         let offset = read_target_uint(endianess, bytes).unwrap();\n         assert_eq!(offset as u64 as u128, offset);\n         let offset = offset as u64;"}, {"sha": "ae5f65a7166c6847fcfb0959fc27435a87123af8", "filename": "tests/compile-fail/int_ptr_cast.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27c64479cd0e449634ef61bbf42dff42cfa1fc28/tests%2Fcompile-fail%2Fint_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c64479cd0e449634ef61bbf42dff42cfa1fc28/tests%2Fcompile-fail%2Fint_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fint_ptr_cast.rs?ref=27c64479cd0e449634ef61bbf42dff42cfa1fc28", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let x = 2usize as *const u32;\n-    // This must fail because alignment is violated\n-    let _ = unsafe { &*x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n-}"}, {"sha": "1897066f7bcc3c7078ebee8135f9b34da862acc7", "filename": "tests/compile-fail/int_ptr_cast2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27c64479cd0e449634ef61bbf42dff42cfa1fc28/tests%2Fcompile-fail%2Fint_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c64479cd0e449634ef61bbf42dff42cfa1fc28/tests%2Fcompile-fail%2Fint_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fint_ptr_cast2.rs?ref=27c64479cd0e449634ef61bbf42dff42cfa1fc28", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let x = 0usize as *const u32;\n-    // This must fail because the pointer is NULL\n-    let _ = unsafe { &*x }; //~ ERROR: invalid use of NULL pointer\n-}"}, {"sha": "5ca733a64df2d91823680cb4cee3aeaad3328f2f", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         x: 42,\n         y: 99,\n     };\n-    let p = &foo.x; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n-    let i = *p;\n+    let p = &foo.x;\n+    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "8ad1b323250c9b833e528bd6939d207b14f3cdf4", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const u32;\n     // This must fail because alignment is violated\n-    let _ = unsafe { &*x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "15fb7dd31368bcce0b840b2611511a3d525b9514", "filename": "tests/compile-fail/unaligned_ptr_cast2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02d9e63fde6d692b38b3843b16132c0b79a7ef6/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs?ref=f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x = &2u16;\n+    let x = x as *const _ as *const *const u8;\n+    // This must fail because alignment is violated.  Test specifically for loading pointers, which have special code\n+    // in miri's memory.\n+    let _x = unsafe { *x }; //~ ERROR: tried to access memory with alignment 2, but alignment\n+}"}]}