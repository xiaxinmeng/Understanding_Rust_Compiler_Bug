{"sha": "6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNzMzZWFjNjdmZGM5OWIwZWZhYzlmNmI4YmZhZjQyYjgxNGU3YzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-31T13:23:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-31T13:23:00Z"}, "message": "Merge #9743\n\n9743: internal: a bit of completion profiling r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "859b2499d82670b8224d37efd09f3c0f8f5da899", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859b2499d82670b8224d37efd09f3c0f8f5da899"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhBU60CRBK7hj4Ov3rIwAA7CUIAHgd+qLWeLJxSCo6yhnAATe7\nbQ6ni1/Xz4rvqXR9B55QLRBIRQ1qlnT/sCzTdF55E7T14gdUDGM3cIzHm7uf6PVo\nAhR+JssiIqmmjACBf54X18g4b9AMy+KllWHmE+bRmbtuX64P3n1lZO7Xv33Jncrh\ngx8isqYbtZ6tZ8XPl2/Tm7wVoxc1HIutsSLow1pMqKf0tz+UalLJsqr+Y1ckFqKx\nEQo+7KoyrP+Riw8MOnLJ6v9UfzzZZLrYdhMtcKCKteg9zynEGBHIVsNzZZxk01XO\n4uiUxyS1Ct33MucQcfKwZ3oy58g4LCI1fCs54MTF6wL6NoMHBkCx6jI7hizxtUQ=\n=0FpY\n-----END PGP SIGNATURE-----\n", "payload": "tree 859b2499d82670b8224d37efd09f3c0f8f5da899\nparent 3236845d67f65ffee878751092820c0edd73ae20\nparent a5049e13bf35f70da329a64d8ea4435665f5caba\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627737780 +0000\ncommitter GitHub <noreply@github.com> 1627737780 +0000\n\nMerge #9743\n\n9743: internal: a bit of completion profiling r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4", "html_url": "https://github.com/rust-lang/rust/commit/6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3236845d67f65ffee878751092820c0edd73ae20", "url": "https://api.github.com/repos/rust-lang/rust/commits/3236845d67f65ffee878751092820c0edd73ae20", "html_url": "https://github.com/rust-lang/rust/commit/3236845d67f65ffee878751092820c0edd73ae20"}, {"sha": "a5049e13bf35f70da329a64d8ea4435665f5caba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5049e13bf35f70da329a64d8ea4435665f5caba", "html_url": "https://github.com/rust-lang/rust/commit/a5049e13bf35f70da329a64d8ea4435665f5caba"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "95244a758de6808119ec878efd2f760021029d10", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4", "patch": "@@ -3,7 +3,7 @@\n use hir::{AsAssocItem, HasSource, HirDisplay};\n use ide_db::SymbolKind;\n use itertools::Itertools;\n-use syntax::ast::Fn;\n+use syntax::ast;\n \n use crate::{\n     item::{CompletionItem, CompletionItemKind, CompletionKind, CompletionRelevance, ImportEdit},\n@@ -40,7 +40,21 @@ struct FunctionRender<'a> {\n     name: String,\n     receiver: Option<hir::Name>,\n     func: hir::Function,\n-    ast_node: Fn,\n+    /// NB: having `ast::Fn` here might or might not be a good idea. The problem\n+    /// with it is that, to get an `ast::`, you want to parse the corresponding\n+    /// source file. So, when flyimport completions suggest a bunch of\n+    /// functions, we spend quite some time parsing many files.\n+    ///\n+    /// We need ast because we want to access parameter names (patterns). We can\n+    /// add them to the hir of the function itself, but parameter names are not\n+    /// something hir cares otherwise.\n+    ///\n+    /// Alternatively we can reconstruct params from the function body, but that\n+    /// would require parsing anyway.\n+    ///\n+    /// It seems that just using `ast` is the best choice -- most of parses\n+    /// should be cached anyway.\n+    ast_node: ast::Fn,\n     is_method: bool,\n }\n "}, {"sha": "3ce11fd86c81adc0977ee010bb46ec41511bf05e", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=6b733eac67fdc99b0efac9f6b8bfaf42b814e7c4", "patch": "@@ -2,7 +2,7 @@\n use std::{\n     cell::RefCell,\n     collections::{BTreeMap, HashSet},\n-    env,\n+    env, fmt,\n     io::{stderr, Write},\n     sync::{\n         atomic::{AtomicBool, Ordering},\n@@ -278,9 +278,9 @@ fn print(\n     let detail = tree[curr].detail.as_ref().map(|it| format!(\" @ {}\", it)).unwrap_or_default();\n     writeln!(\n         out,\n-        \"{}{:5}ms - {}{}\",\n+        \"{}{} - {}{}\",\n         current_indent,\n-        tree[curr].duration.as_millis(),\n+        ms(tree[curr].duration),\n         tree[curr].label,\n         detail,\n     )\n@@ -302,14 +302,25 @@ fn print(\n     }\n \n     for (child_msg, (duration, count)) in short_children.iter() {\n-        let millis = duration.as_millis();\n-        writeln!(out, \"    {}{:5}ms - {} ({} calls)\", current_indent, millis, child_msg, count)\n+        writeln!(out, \"    {}{} - {} ({} calls)\", current_indent, ms(*duration), child_msg, count)\n             .expect(\"printing profiling info\");\n     }\n \n     let unaccounted = tree[curr].duration - accounted_for;\n     if tree.children(curr).next().is_some() && unaccounted > longer_than {\n-        writeln!(out, \"    {}{:5}ms - ???\", current_indent, unaccounted.as_millis())\n+        writeln!(out, \"    {}{} - ???\", current_indent, ms(unaccounted))\n             .expect(\"printing profiling info\");\n     }\n }\n+\n+#[allow(non_camel_case_types)]\n+struct ms(Duration);\n+\n+impl fmt::Display for ms {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.0.as_millis() {\n+            0 => f.write_str(\"    0  \"),\n+            n => write!(f, \"{:5}ms\", n),\n+        }\n+    }\n+}"}]}