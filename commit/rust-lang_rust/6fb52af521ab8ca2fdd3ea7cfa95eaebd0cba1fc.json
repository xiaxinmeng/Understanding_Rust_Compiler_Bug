{"sha": "6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjUyYWY1MjFhYjhjYTJmZGQzZWE3Y2ZhOTVlYWViZDBjYmExZmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T11:41:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T11:41:31Z"}, "message": "Rename dummy -> none", "tree": {"sha": "8d5a1f77e57fb494f47c9092a85d223a9a4346fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d5a1f77e57fb494f47c9092a85d223a9a4346fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc", "html_url": "https://github.com/rust-lang/rust/commit/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625ec9e1ae69168f194cbc5bf20846870f03e149", "url": "https://api.github.com/repos/rust-lang/rust/commits/625ec9e1ae69168f194cbc5bf20846870f03e149", "html_url": "https://github.com/rust-lang/rust/commit/625ec9e1ae69168f194cbc5bf20846870f03e149"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "7ff1593aefa3425c743def0f4bde161ac874d618", "filename": "crates/ide/src/syntax_highlighting/highlights.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlights.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlights.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlights.rs?ref=6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc", "patch": "@@ -20,7 +20,7 @@ impl Highlights {\n         Highlights {\n             root: Node::new(HighlightedRange {\n                 range,\n-                highlight: HighlightTag::Dummy.into(),\n+                highlight: HighlightTag::None.into(),\n                 binding_hash: None,\n             }),\n         }"}, {"sha": "07c788b50b1219e212442657dc83cccbba55dcc1", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc", "patch": "@@ -33,8 +33,8 @@ pub enum HighlightTag {\n     Operator,\n     UnresolvedReference,\n \n-    // For things which don't have proper Tag, but want to use modifiers.\n-    Dummy,\n+    // For things which don't have a specific highlight.\n+    None,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n@@ -100,7 +100,7 @@ impl HighlightTag {\n             HighlightTag::Operator => \"operator\",\n             HighlightTag::StringLiteral => \"string_literal\",\n             HighlightTag::UnresolvedReference => \"unresolved_reference\",\n-            HighlightTag::Dummy => \"dummy\",\n+            HighlightTag::None => \"none\",\n         }\n     }\n }\n@@ -174,7 +174,7 @@ impl Highlight {\n         Highlight { tag, modifiers: HighlightModifiers::default() }\n     }\n     pub fn is_empty(&self) -> bool {\n-        self.tag == HighlightTag::Dummy && self.modifiers == HighlightModifiers::default()\n+        self.tag == HighlightTag::None && self.modifiers == HighlightModifiers::default()\n     }\n }\n "}, {"sha": "7d1d2a839925a74aabe1ec472de7f8ac81c7811b", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc", "patch": "@@ -37,15 +37,15 @@\n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n <pre><code><span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"punctuation injected\">;</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"punctuation injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"punctuation\">{</span>\n     <span class=\"field declaration\">bar</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">bool</span><span class=\"punctuation\">,</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"string_literal injected\">\"Call me</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"string_literal injected\">\"Call me</span>\n     <span class=\"comment\">//    KILLER WHALE</span>\n     <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">    Ishmael.\"</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n@@ -56,8 +56,8 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span><span class=\"dummy injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"punctuation attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"punctuation attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"punctuation injected\">:</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"punctuation attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"punctuation attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"none injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"punctuation injected\">:</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n         <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">bar</span><span class=\"punctuation\">:</span> <span class=\"bool_literal\">true</span> <span class=\"punctuation\">}</span>\n@@ -68,26 +68,26 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"dummy injected\"> </span><span class=\"module injected\">x</span><span class=\"operator injected\">::</span><span class=\"module injected\">y</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"none injected\"> </span><span class=\"module injected\">x</span><span class=\"operator injected\">::</span><span class=\"module injected\">y</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">// calls bar on foo</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"punctuation injected\">(</span><span class=\"dummy injected\">foo</span><span class=\"operator injected\">.</span><span class=\"dummy injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"punctuation injected\">(</span><span class=\"none injected\">foo</span><span class=\"operator injected\">.</span><span class=\"none injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"variable injected\">foo</span><span class=\"operator injected\">.</span><span class=\"field injected\">bar</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">||</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"constant injected\">bar</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"variable injected\">foo</span><span class=\"operator injected\">.</span><span class=\"field injected\">bar</span><span class=\"none injected\"> </span><span class=\"operator injected\">||</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"constant injected\">bar</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">/* multi-line</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">       comment */</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"string_literal injected\">\"Foo</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"string_literal injected\">\"Foo</span>\n     <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">  bar</span>\n     <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```rust,no_run</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```sh</span>"}, {"sha": "4cfe6ff513556686bcb360e5081bf3c6e75e631e", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=6fb52af521ab8ca2fdd3ea7cfa95eaebd0cba1fc", "patch": "@@ -413,7 +413,7 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::Macro => lsp_types::SemanticTokenType::MACRO,\n         },\n         HighlightTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n-        HighlightTag::Dummy => semantic_tokens::GENERIC,\n+        HighlightTag::None => semantic_tokens::GENERIC,\n         HighlightTag::ByteLiteral | HighlightTag::NumericLiteral => {\n             lsp_types::SemanticTokenType::NUMBER\n         }"}]}