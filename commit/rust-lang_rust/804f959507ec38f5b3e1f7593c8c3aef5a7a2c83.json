{"sha": "804f959507ec38f5b3e1f7593c8c3aef5a7a2c83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNGY5NTk1MDdlYzM4ZjViM2UxZjc1OTNjOGMzYWVmNWE3YTJjODM=", "commit": {"author": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-02-19T00:46:39Z"}, "committer": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-03-25T01:30:04Z"}, "message": "session: Add two tracked, exclusive codegen options for PGO profile usage and generation.\n\nSigned-off-by: Emilio Cobos \u00c1lvarez <emilio@crisal.io>", "tree": {"sha": "92e0dcbd48b24752b8b41bffa481b647ce6c8b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92e0dcbd48b24752b8b41bffa481b647ce6c8b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/804f959507ec38f5b3e1f7593c8c3aef5a7a2c83", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE+uMrE+H37zcdV8pyBWtye7nBAnwFAlq2+5wACgkQBWtye7nB\nAnwsggf8C2olOpqL3IpjJ3XmYYk9oFqelGvSZBrOSLVmJinniGxB5uVFnvc66Xlc\nLHyS99ZmsbsNLOMdGS5KJgGAXwqJylh2V3qoozzBjNQN5OX+oxzBy1jKs2iLsbpl\nopeWMqfX+QOmXYVljC+UPvp82L5obe+j8w4U50HAcAO0I/EB7efcZ7i6sIUNepV8\nTDd9s3ypx0R58j5+hjW97fqviDpHfBA6AAkp/c91eyYpz2g2cKahl4n7U7UUh3eW\nU+WlaS7xPlWnmrDdrdhPrpvM2FpxYslsT4qOV0XfC6/c9CAlim7GQJALJVk4fJwR\nndjEErLhSs8TKMWMhB4pRiNAZVWTvA==\n=DULB\n-----END PGP SIGNATURE-----", "payload": "tree 92e0dcbd48b24752b8b41bffa481b647ce6c8b6b\nparent e8a1575cf6fe7105535db36e396a3a9a58765205\nauthor Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1519001199 +0100\ncommitter Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1521941404 +0200\n\nsession: Add two tracked, exclusive codegen options for PGO profile usage and generation.\n\nSigned-off-by: Emilio Cobos \u00c1lvarez <emilio@crisal.io>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/804f959507ec38f5b3e1f7593c8c3aef5a7a2c83", "html_url": "https://github.com/rust-lang/rust/commit/804f959507ec38f5b3e1f7593c8c3aef5a7a2c83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/804f959507ec38f5b3e1f7593c8c3aef5a7a2c83/comments", "author": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8a1575cf6fe7105535db36e396a3a9a58765205", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a1575cf6fe7105535db36e396a3a9a58765205", "html_url": "https://github.com/rust-lang/rust/commit/e8a1575cf6fe7105535db36e396a3a9a58765205"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "e5d7a618b355dc7ac38578804357bd98b63e902d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/804f959507ec38f5b3e1f7593c8c3aef5a7a2c83/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804f959507ec38f5b3e1f7593c8c3aef5a7a2c83/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=804f959507ec38f5b3e1f7593c8c3aef5a7a2c83", "patch": "@@ -1027,6 +1027,11 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"`-C save-temps` might not produce all requested temporary products \\\n          when incremental compilation is enabled.\")],\n         \"save all temporary output files during compilation\"),\n+    pgo_gen: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"Generate PGO profile data, to a given file, or to the default \\\n+         location if it's empty.\"),\n+    pgo_use: String = (String::new(), parse_string, [TRACKED],\n+        \"Use PGO profile data from the given profile file.\"),\n     rpath: bool = (false, parse_bool, [UNTRACKED],\n         \"set rpath values in libs/exes\"),\n     overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n@@ -1801,6 +1806,13 @@ pub fn build_session_options_and_crate_config(\n     let mut codegen_units = cg.codegen_units;\n     let mut disable_thinlto = false;\n \n+    if cg.pgo_gen.is_some() && !cg.pgo_use.is_empty() {\n+        early_error(\n+            error_format,\n+            \"options `-C pgo-gen` and `-C pgo-use` are exclussive\",\n+        );\n+    }\n+\n     // Issue #30063: if user requests llvm-related output to one\n     // particular path, disable codegen-units.\n     let incompatible: Vec<_> = output_types\n@@ -2824,6 +2836,14 @@ mod tests {\n         opts.cg.lto = Lto::Fat;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.cg.pgo_gen = Some(String::from(\"abc\"));\n+        assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.cg.pgo_use = String::from(\"abc\");\n+        assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.cg.target_cpu = Some(String::from(\"abc\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}]}