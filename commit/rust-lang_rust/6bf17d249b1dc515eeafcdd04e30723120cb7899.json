{"sha": "6bf17d249b1dc515eeafcdd04e30723120cb7899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZjE3ZDI0OWIxZGM1MTVlZWFmY2RkMDRlMzA3MjMxMjBjYjc4OTk=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-03T13:52:37Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-24T00:24:40Z"}, "message": "Instantiate all bound vars universally", "tree": {"sha": "be3c19b5fd06f072d39cd5ecf9560d5709a8bea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3c19b5fd06f072d39cd5ecf9560d5709a8bea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bf17d249b1dc515eeafcdd04e30723120cb7899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf17d249b1dc515eeafcdd04e30723120cb7899", "html_url": "https://github.com/rust-lang/rust/commit/6bf17d249b1dc515eeafcdd04e30723120cb7899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bf17d249b1dc515eeafcdd04e30723120cb7899/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdb96be11e178a82ac6b16f37ef2a9c2b7189d6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb96be11e178a82ac6b16f37ef2a9c2b7189d6b", "html_url": "https://github.com/rust-lang/rust/commit/cdb96be11e178a82ac6b16f37ef2a9c2b7189d6b"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "5218aa36facc1c4696c593277f61e1e1738b3352", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6bf17d249b1dc515eeafcdd04e30723120cb7899/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf17d249b1dc515eeafcdd04e30723120cb7899/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=6bf17d249b1dc515eeafcdd04e30723120cb7899", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             // First, we instantiate each bound region in the supertype with a\n             // fresh placeholder region.\n             let (b_prime, placeholder_map) =\n-                self.infcx.replace_late_bound_regions_with_placeholders(b);\n+                self.infcx.replace_bound_vars_with_placeholders(b);\n \n             // Next, we instantiate each bound region in the subtype\n             // with a fresh region variable. These region variables --\n@@ -115,7 +115,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             // First, we instantiate each bound region in the matcher\n             // with a placeholder region.\n             let ((a_match, a_value), placeholder_map) =\n-                self.infcx.replace_late_bound_regions_with_placeholders(a_pair);\n+                self.infcx.replace_bound_vars_with_placeholders(a_pair);\n \n             debug!(\"higher_ranked_match: a_match={:?}\", a_match);\n             debug!(\"higher_ranked_match: placeholder_map={:?}\", placeholder_map);\n@@ -314,10 +314,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         region_vars\n     }\n \n-    /// Replace all regions bound by `binder` with placeholder regions and\n-    /// return a map indicating which bound-region was replaced with what\n-    /// placeholder region. This is the first step of checking subtyping\n-    /// when higher-ranked things are involved.\n+    /// Replace all regions (resp. types) bound by `binder` with placeholder\n+    /// regions (resp. types) and return a map indicating which bound-region\n+    /// was replaced with what placeholder region. This is the first step of\n+    /// checking subtyping when higher-ranked things are involved.\n     ///\n     /// **Important:** you must call this function from within a snapshot.\n     /// Moreover, before committing the snapshot, you must eventually call\n@@ -330,26 +330,37 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// the [rustc guide].\n     ///\n     /// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/hrtb.html\n-    pub fn replace_late_bound_regions_with_placeholders<T>(\n+    pub fn replace_bound_vars_with_placeholders<T>(\n         &self,\n-        binder: &ty::Binder<T>,\n+        binder: &ty::Binder<T>\n     ) -> (T, PlaceholderMap<'tcx>)\n     where\n-        T : TypeFoldable<'tcx>,\n+        T: TypeFoldable<'tcx>\n     {\n         let next_universe = self.create_next_universe();\n \n-        let (result, map) = self.tcx.replace_late_bound_regions(binder, |br| {\n+        let fld_r = |br| {\n             self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n                 universe: next_universe,\n                 name: br,\n             }))\n-        });\n+        };\n+\n+        let fld_t = |bound_ty: ty::BoundTy| {\n+            self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                universe: next_universe,\n+                name: bound_ty.var,\n+            }))\n+        };\n+\n+        let (result, map) = self.tcx.replace_bound_vars(binder, fld_r, fld_t);\n \n-        debug!(\"replace_late_bound_regions_with_placeholders(binder={:?}, result={:?}, map={:?})\",\n-               binder,\n-               result,\n-               map);\n+        debug!(\n+            \"replace_bound_vars_with_placeholders(binder={:?}, result={:?}, map={:?})\",\n+            binder,\n+            result,\n+            map\n+        );\n \n         (result, map)\n     }\n@@ -530,7 +541,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// Pops the placeholder regions found in `placeholder_map` from the region\n     /// inference context. Whenever you create placeholder regions via\n-    /// `replace_late_bound_regions_with_placeholders`, they must be popped before you\n+    /// `replace_bound_vars_with_placeholders`, they must be popped before you\n     /// commit the enclosing snapshot (if you do not commit, e.g. within a\n     /// probe or as a result of an error, then this is not necessary, as\n     /// popping happens as part of the rollback)."}, {"sha": "a29c85bd2b1c5781d9c489e29ccea0cbaedd52b9", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bf17d249b1dc515eeafcdd04e30723120cb7899/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf17d249b1dc515eeafcdd04e30723120cb7899/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=6bf17d249b1dc515eeafcdd04e30723120cb7899", "patch": "@@ -227,7 +227,7 @@ pub struct InferCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     universe: Cell<ty::UniverseIndex>,\n }\n \n-/// A map returned by `replace_late_bound_regions_with_placeholders()`\n+/// A map returned by `replace_bound_vars_with_placeholders()`\n /// indicating the placeholder region that each late-bound region was\n /// replaced with.\n pub type PlaceholderMap<'tcx> = BTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n@@ -935,7 +935,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     b,\n                 },\n                 placeholder_map,\n-            ) = self.replace_late_bound_regions_with_placeholders(predicate);\n+            ) = self.replace_bound_vars_with_placeholders(predicate);\n \n             let cause_span = cause.span;\n             let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;\n@@ -952,7 +952,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) -> UnitResult<'tcx> {\n         self.commit_if_ok(|snapshot| {\n             let (ty::OutlivesPredicate(r_a, r_b), placeholder_map) =\n-                self.replace_late_bound_regions_with_placeholders(predicate);\n+                self.replace_bound_vars_with_placeholders(predicate);\n             let origin = SubregionOrigin::from_obligation_cause(cause, || {\n                 RelateRegionParamBound(cause.span)\n             });"}, {"sha": "e7b5fc3d1ffd7549ca923d397777b79c7c55b184", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bf17d249b1dc515eeafcdd04e30723120cb7899/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf17d249b1dc515eeafcdd04e30723120cb7899/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=6bf17d249b1dc515eeafcdd04e30723120cb7899", "patch": "@@ -204,7 +204,7 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n     let infcx = selcx.infcx();\n     infcx.commit_if_ok(|snapshot| {\n         let (placeholder_predicate, placeholder_map) =\n-            infcx.replace_late_bound_regions_with_placeholders(&obligation.predicate);\n+            infcx.replace_bound_vars_with_placeholders(&obligation.predicate);\n \n         let skol_obligation = obligation.with(placeholder_predicate);\n         let r = match project_and_unify_type(selcx, &skol_obligation) {"}, {"sha": "0cb071e3196ae3480af587d77882d1dbfd503ea8", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6bf17d249b1dc515eeafcdd04e30723120cb7899/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf17d249b1dc515eeafcdd04e30723120cb7899/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=6bf17d249b1dc515eeafcdd04e30723120cb7899", "patch": "@@ -1726,7 +1726,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let poly_trait_predicate = self.infcx()\n             .resolve_type_vars_if_possible(&obligation.predicate);\n         let (skol_trait_predicate, placeholder_map) = self.infcx()\n-            .replace_late_bound_regions_with_placeholders(&poly_trait_predicate);\n+            .replace_bound_vars_with_placeholders(&poly_trait_predicate);\n         debug!(\n             \"match_projection_obligation_against_definition_bounds: \\\n              skol_trait_predicate={:?} placeholder_map={:?}\",\n@@ -2685,7 +2685,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n                 self.in_snapshot(|this, snapshot| {\n                     let (skol_ty, placeholder_map) = this.infcx()\n-                        .replace_late_bound_regions_with_placeholders(&ty);\n+                        .replace_bound_vars_with_placeholders(&ty);\n                     let Normalized {\n                         value: normalized_ty,\n                         mut obligations,\n@@ -2919,7 +2919,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let trait_obligations: Vec<PredicateObligation<'_>> = self.in_snapshot(|this, snapshot| {\n             let poly_trait_ref = obligation.predicate.to_poly_trait_ref();\n             let (trait_ref, placeholder_map) = this.infcx()\n-                .replace_late_bound_regions_with_placeholders(&poly_trait_ref);\n+                .replace_bound_vars_with_placeholders(&poly_trait_ref);\n             let cause = obligation.derived_cause(ImplDerivedObligation);\n             this.impl_or_trait_obligations(\n                 cause,\n@@ -3122,7 +3122,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         self.in_snapshot(|this, snapshot| {\n             let (predicate, placeholder_map) = this.infcx()\n-                .replace_late_bound_regions_with_placeholders(&obligation.predicate);\n+                .replace_bound_vars_with_placeholders(&obligation.predicate);\n             let trait_ref = predicate.trait_ref;\n             let trait_def_id = trait_ref.def_id;\n             let substs = trait_ref.substs;\n@@ -3585,7 +3585,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n \n         let (skol_obligation, placeholder_map) = self.infcx()\n-            .replace_late_bound_regions_with_placeholders(&obligation.predicate);\n+            .replace_bound_vars_with_placeholders(&obligation.predicate);\n         let skol_obligation_trait_ref = skol_obligation.trait_ref;\n \n         let impl_substs = self.infcx"}]}