{"sha": "05a51e5730bb643f4905e711b2cbdbc91e1288d7", "node_id": "C_kwDOAAsO6NoAKDA1YTUxZTU3MzBiYjY0M2Y0OTA1ZTcxMWIyY2JkYmM5MWUxMjg4ZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T17:00:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T17:00:40Z"}, "message": "Auto merge of #9214 - Jarcho:assign_op_prim, r=Manishearth\n\nCheck `assign_op_pattern` for conflicting borrows\n\nfixes #9180\n\nchangelog: [`assign_op_pattern`](https://rust-lang.github.io/rust-clippy/master/#assign_op_pattern): Don't lint when the suggestion would cause borrowck errors.", "tree": {"sha": "b84c5c06035b2cbd19b443a99017cabe94c09708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b84c5c06035b2cbd19b443a99017cabe94c09708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a51e5730bb643f4905e711b2cbdbc91e1288d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a51e5730bb643f4905e711b2cbdbc91e1288d7", "html_url": "https://github.com/rust-lang/rust/commit/05a51e5730bb643f4905e711b2cbdbc91e1288d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a51e5730bb643f4905e711b2cbdbc91e1288d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa3c293db4b995c2a2c5cffc61e5155291d8ce5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3c293db4b995c2a2c5cffc61e5155291d8ce5c", "html_url": "https://github.com/rust-lang/rust/commit/fa3c293db4b995c2a2c5cffc61e5155291d8ce5c"}, {"sha": "a2f9b9311656afd18468f242db3507157371c545", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f9b9311656afd18468f242db3507157371c545", "html_url": "https://github.com/rust-lang/rust/commit/a2f9b9311656afd18468f242db3507157371c545"}], "stats": {"total": 134, "additions": 124, "deletions": 10}, "files": [{"sha": "945a09a647c415fc2cd2902cd053fc6a42e8fc5d", "filename": "clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/05a51e5730bb643f4905e711b2cbdbc91e1288d7/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a51e5730bb643f4905e711b2cbdbc91e1288d7/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=05a51e5730bb643f4905e711b2cbdbc91e1288d7", "patch": "@@ -8,6 +8,10 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_lint::LateContext;\n+use rustc_middle::mir::FakeReadCause;\n+use rustc_middle::ty::BorrowKind;\n+use rustc_trait_selection::infer::TyCtxtInferExt;\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n use super::ASSIGN_OP_PATTERN;\n \n@@ -29,6 +33,16 @@ pub(super) fn check<'tcx>(\n                     .map_or(true, |t| t.path.res.def_id() != trait_id);\n                 if implements_trait(cx, ty, trait_id, &[rty.into()]);\n                 then {\n+                    // Primitive types execute assign-ops right-to-left. Every other type is left-to-right.\n+                    if !(ty.is_primitive() && rty.is_primitive()) {\n+                        // TODO: This will have false negatives as it doesn't check if the borrows are\n+                        // actually live at the end of their respective expressions.\n+                        let mut_borrows = mut_borrows_in_expr(cx, assignee);\n+                        let imm_borrows = imm_borrows_in_expr(cx, rhs);\n+                        if mut_borrows.iter().any(|id| imm_borrows.contains(id)) {\n+                            return;\n+                        }\n+                    }\n                     span_lint_and_then(\n                         cx,\n                         ASSIGN_OP_PATTERN,\n@@ -99,3 +113,69 @@ impl<'a, 'tcx> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n }\n+\n+fn imm_borrows_in_expr(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> hir::HirIdSet {\n+    struct S(hir::HirIdSet);\n+    impl Delegate<'_> for S {\n+        fn borrow(&mut self, place: &PlaceWithHirId<'_>, _: hir::HirId, kind: BorrowKind) {\n+            if matches!(kind, BorrowKind::ImmBorrow | BorrowKind::UniqueImmBorrow) {\n+                self.0.insert(match place.place.base {\n+                    PlaceBase::Local(id) => id,\n+                    PlaceBase::Upvar(id) => id.var_path.hir_id,\n+                    _ => return,\n+                });\n+            }\n+        }\n+\n+        fn consume(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+        fn mutate(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+        fn fake_read(&mut self, _: &PlaceWithHirId<'_>, _: FakeReadCause, _: hir::HirId) {}\n+        fn copy(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+    }\n+\n+    let mut s = S(hir::HirIdSet::default());\n+    cx.tcx.infer_ctxt().enter(|infcx| {\n+        let mut v = ExprUseVisitor::new(\n+            &mut s,\n+            &infcx,\n+            cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n+            cx.param_env,\n+            cx.typeck_results(),\n+        );\n+        v.consume_expr(e);\n+    });\n+    s.0\n+}\n+\n+fn mut_borrows_in_expr(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> hir::HirIdSet {\n+    struct S(hir::HirIdSet);\n+    impl Delegate<'_> for S {\n+        fn borrow(&mut self, place: &PlaceWithHirId<'_>, _: hir::HirId, kind: BorrowKind) {\n+            if matches!(kind, BorrowKind::MutBorrow) {\n+                self.0.insert(match place.place.base {\n+                    PlaceBase::Local(id) => id,\n+                    PlaceBase::Upvar(id) => id.var_path.hir_id,\n+                    _ => return,\n+                });\n+            }\n+        }\n+\n+        fn consume(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+        fn mutate(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+        fn fake_read(&mut self, _: &PlaceWithHirId<'_>, _: FakeReadCause, _: hir::HirId) {}\n+        fn copy(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+    }\n+\n+    let mut s = S(hir::HirIdSet::default());\n+    cx.tcx.infer_ctxt().enter(|infcx| {\n+        let mut v = ExprUseVisitor::new(\n+            &mut s,\n+            &infcx,\n+            cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n+            cx.param_env,\n+            cx.typeck_results(),\n+        );\n+        v.consume_expr(e);\n+    });\n+    s.0\n+}"}, {"sha": "da034b51cfdb905497b69e494101ed14c8be4a22", "filename": "tests/ui/assign_ops.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05a51e5730bb643f4905e711b2cbdbc91e1288d7/tests%2Fui%2Fassign_ops.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05a51e5730bb643f4905e711b2cbdbc91e1288d7/tests%2Fui%2Fassign_ops.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.fixed?ref=05a51e5730bb643f4905e711b2cbdbc91e1288d7", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+use core::num::Wrapping;\n+\n #[allow(dead_code, unused_assignments)]\n #[warn(clippy::assign_op_pattern)]\n fn main() {\n@@ -18,4 +20,13 @@ fn main() {\n     a = 6 << a;\n     let mut s = String::new();\n     s += \"bla\";\n+\n+    // Issue #9180\n+    let mut a = Wrapping(0u32);\n+    a += Wrapping(1u32);\n+    let mut v = vec![0u32, 1u32];\n+    v[0] += v[1];\n+    let mut v = vec![Wrapping(0u32), Wrapping(1u32)];\n+    v[0] = v[0] + v[1];\n+    let _ = || v[0] = v[0] + v[1];\n }"}, {"sha": "337bb02c8a612860b520c9dcf0304721b9da258f", "filename": "tests/ui/assign_ops.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05a51e5730bb643f4905e711b2cbdbc91e1288d7/tests%2Fui%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a51e5730bb643f4905e711b2cbdbc91e1288d7/tests%2Fui%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.rs?ref=05a51e5730bb643f4905e711b2cbdbc91e1288d7", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+use core::num::Wrapping;\n+\n #[allow(dead_code, unused_assignments)]\n #[warn(clippy::assign_op_pattern)]\n fn main() {\n@@ -18,4 +20,13 @@ fn main() {\n     a = 6 << a;\n     let mut s = String::new();\n     s = s + \"bla\";\n+\n+    // Issue #9180\n+    let mut a = Wrapping(0u32);\n+    a = a + Wrapping(1u32);\n+    let mut v = vec![0u32, 1u32];\n+    v[0] = v[0] + v[1];\n+    let mut v = vec![Wrapping(0u32), Wrapping(1u32)];\n+    v[0] = v[0] + v[1];\n+    let _ = || v[0] = v[0] + v[1];\n }"}, {"sha": "63a938ab4b43557f218acf7afb239b0f71e36879", "filename": "tests/ui/assign_ops.stderr", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/05a51e5730bb643f4905e711b2cbdbc91e1288d7/tests%2Fui%2Fassign_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05a51e5730bb643f4905e711b2cbdbc91e1288d7/tests%2Fui%2Fassign_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.stderr?ref=05a51e5730bb643f4905e711b2cbdbc91e1288d7", "patch": "@@ -1,58 +1,70 @@\n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:7:5\n+  --> $DIR/assign_ops.rs:9:5\n    |\n LL |     a = a + 1;\n    |     ^^^^^^^^^ help: replace it with: `a += 1`\n    |\n    = note: `-D clippy::assign-op-pattern` implied by `-D warnings`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:8:5\n+  --> $DIR/assign_ops.rs:10:5\n    |\n LL |     a = 1 + a;\n    |     ^^^^^^^^^ help: replace it with: `a += 1`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:9:5\n+  --> $DIR/assign_ops.rs:11:5\n    |\n LL |     a = a - 1;\n    |     ^^^^^^^^^ help: replace it with: `a -= 1`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:10:5\n+  --> $DIR/assign_ops.rs:12:5\n    |\n LL |     a = a * 99;\n    |     ^^^^^^^^^^ help: replace it with: `a *= 99`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:11:5\n+  --> $DIR/assign_ops.rs:13:5\n    |\n LL |     a = 42 * a;\n    |     ^^^^^^^^^^ help: replace it with: `a *= 42`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:12:5\n+  --> $DIR/assign_ops.rs:14:5\n    |\n LL |     a = a / 2;\n    |     ^^^^^^^^^ help: replace it with: `a /= 2`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:13:5\n+  --> $DIR/assign_ops.rs:15:5\n    |\n LL |     a = a % 5;\n    |     ^^^^^^^^^ help: replace it with: `a %= 5`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:14:5\n+  --> $DIR/assign_ops.rs:16:5\n    |\n LL |     a = a & 1;\n    |     ^^^^^^^^^ help: replace it with: `a &= 1`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:20:5\n+  --> $DIR/assign_ops.rs:22:5\n    |\n LL |     s = s + \"bla\";\n    |     ^^^^^^^^^^^^^ help: replace it with: `s += \"bla\"`\n \n-error: aborting due to 9 previous errors\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:26:5\n+   |\n+LL |     a = a + Wrapping(1u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `a += Wrapping(1u32)`\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:28:5\n+   |\n+LL |     v[0] = v[0] + v[1];\n+   |     ^^^^^^^^^^^^^^^^^^ help: replace it with: `v[0] += v[1]`\n+\n+error: aborting due to 11 previous errors\n "}]}