{"sha": "75011bbccbf2e00092222a1071ba9111f834a4ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MDExYmJjY2JmMmUwMDA5MjIyMmExMDcxYmE5MTExZjgzNGE0YWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-31T12:26:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-31T12:26:57Z"}, "message": "Merge #8210\n\n8210: Implement \"Extract type alias\" assist r=jonas-schievink a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "4e39b7bd20df44f57ab57c27ce1a3a71362b077f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e39b7bd20df44f57ab57c27ce1a3a71362b077f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75011bbccbf2e00092222a1071ba9111f834a4ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZGqRCRBK7hj4Ov3rIwAAdHIIAIBp1wYyXE2KU4ljgCM8bzpf\n5dU9wYYg/AZWmMix4vXnKosbLAEaYgrKMOet9usKXaombI0FUFf5vfq68z0G6XNw\nEvd4OrbsJzVnvN7KA6vylHq8rBjEsh/PjkeLwXUvvBX2trwQgsBUaj+ZkJZO6bLH\nW4V8jkbd0gNR0sAMdOhi0jtOqbTwgQZw3gERn/5zOf6RD8T9CHasFIzy98gR5QPD\nmtBchbZxZ+dZ+wt2FDtz5X/AdGjlxxI+XyCNWwNfMp7vQEqKafJBljGBJIqT0bcx\ngf3UwPHwPuCutQAX5famOQKR+e8/jVwOCB1VuuHEEX+g4sM1zabIhiklx4n2Mgc=\n=oEFN\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e39b7bd20df44f57ab57c27ce1a3a71362b077f\nparent aca9004c7e4bafe1fc60d0e0298f5687b2e7615a\nparent 3c6c1c99b41e2a3c9a31b0d4c73d660399255cba\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617193617 +0000\ncommitter GitHub <noreply@github.com> 1617193617 +0000\n\nMerge #8210\n\n8210: Implement \"Extract type alias\" assist r=jonas-schievink a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75011bbccbf2e00092222a1071ba9111f834a4ae", "html_url": "https://github.com/rust-lang/rust/commit/75011bbccbf2e00092222a1071ba9111f834a4ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75011bbccbf2e00092222a1071ba9111f834a4ae/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca9004c7e4bafe1fc60d0e0298f5687b2e7615a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca9004c7e4bafe1fc60d0e0298f5687b2e7615a", "html_url": "https://github.com/rust-lang/rust/commit/aca9004c7e4bafe1fc60d0e0298f5687b2e7615a"}, {"sha": "3c6c1c99b41e2a3c9a31b0d4c73d660399255cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6c1c99b41e2a3c9a31b0d4c73d660399255cba", "html_url": "https://github.com/rust-lang/rust/commit/3c6c1c99b41e2a3c9a31b0d4c73d660399255cba"}], "stats": {"total": 185, "additions": 179, "deletions": 6}, "files": [{"sha": "8714e4978c5424cd276753a86ce8a98e90780292", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75011bbccbf2e00092222a1071ba9111f834a4ae/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75011bbccbf2e00092222a1071ba9111f834a4ae/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=75011bbccbf2e00092222a1071ba9111f834a4ae", "patch": "@@ -13,7 +13,7 @@ use ide_db::{\n     RootDatabase,\n };\n use syntax::{\n-    algo::{self, find_node_at_offset, SyntaxRewriter},\n+    algo::{self, find_node_at_offset, find_node_at_range, SyntaxRewriter},\n     AstNode, AstToken, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxNodePtr,\n     SyntaxToken, TextRange, TextSize, TokenAtOffset,\n };\n@@ -89,6 +89,9 @@ impl<'a> AssistContext<'a> {\n     pub(crate) fn find_node_at_offset<N: AstNode>(&self) -> Option<N> {\n         find_node_at_offset(self.source_file.syntax(), self.offset())\n     }\n+    pub(crate) fn find_node_at_range<N: AstNode>(&self) -> Option<N> {\n+        find_node_at_range(self.source_file.syntax(), self.frange.range)\n+    }\n     pub(crate) fn find_node_at_offset_with_descend<N: AstNode>(&self) -> Option<N> {\n         self.sema.find_node_at_offset_with_descend(self.source_file.syntax(), self.offset())\n     }"}, {"sha": "442a209b976e18a50bf23aa98f32e044a8eb4372", "filename": "crates/ide_assists/src/handlers/extract_type_alias.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/75011bbccbf2e00092222a1071ba9111f834a4ae/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75011bbccbf2e00092222a1071ba9111f834a4ae/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs?ref=75011bbccbf2e00092222a1071ba9111f834a4ae", "patch": "@@ -0,0 +1,149 @@\n+use syntax::ast::{self, AstNode};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: extract_type_alias\n+//\n+// Extracts the selected type as a type alias.\n+//\n+// ```\n+// struct S {\n+//     field: $0(u8, u8, u8)$0,\n+// }\n+// ```\n+// ->\n+// ```\n+// type $0Type = (u8, u8, u8);\n+//\n+// struct S {\n+//     field: Type,\n+// }\n+// ```\n+pub(crate) fn extract_type_alias(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    if ctx.frange.range.is_empty() {\n+        return None;\n+    }\n+\n+    let node = ctx.find_node_at_range::<ast::Type>()?;\n+    let insert = ctx.find_node_at_offset::<ast::Item>()?.syntax().text_range().start();\n+    let target = node.syntax().text_range();\n+\n+    acc.add(\n+        AssistId(\"extract_type_alias\", AssistKind::RefactorExtract),\n+        \"Extract type as type alias\",\n+        target,\n+        |builder| {\n+            builder.edit_file(ctx.frange.file_id);\n+            builder.replace(target, \"Type\");\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    builder.insert_snippet(cap, insert, format!(\"type $0Type = {};\\n\\n\", node));\n+                }\n+                None => {\n+                    builder.insert(insert, format!(\"type Type = {};\\n\\n\", node));\n+                }\n+            }\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn test_not_applicable_without_selection() {\n+        check_assist_not_applicable(\n+            extract_type_alias,\n+            r\"\n+struct S {\n+    field: $0(u8, u8, u8),\n+}\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_simple_types() {\n+        check_assist(\n+            extract_type_alias,\n+            r\"\n+struct S {\n+    field: $0u8$0,\n+}\n+            \",\n+            r#\"\n+type $0Type = u8;\n+\n+struct S {\n+    field: Type,\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generic_type_arg() {\n+        check_assist(\n+            extract_type_alias,\n+            r\"\n+fn generic<T>() {}\n+\n+fn f() {\n+    generic::<$0()$0>();\n+}\n+            \",\n+            r#\"\n+fn generic<T>() {}\n+\n+type $0Type = ();\n+\n+fn f() {\n+    generic::<Type>();\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_inner_type_arg() {\n+        check_assist(\n+            extract_type_alias,\n+            r\"\n+struct Vec<T> {}\n+struct S {\n+    v: Vec<Vec<$0Vec<u8>$0>>,\n+}\n+            \",\n+            r#\"\n+struct Vec<T> {}\n+type $0Type = Vec<u8>;\n+\n+struct S {\n+    v: Vec<Vec<Type>>,\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_inner_type() {\n+        check_assist(\n+            extract_type_alias,\n+            r\"\n+struct S {\n+    field: ($0u8$0,),\n+}\n+            \",\n+            r#\"\n+type $0Type = u8;\n+\n+struct S {\n+    field: (Type,),\n+}\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "3d1dcef4ceadaf0751706dd262f2a2aa0d441b96", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75011bbccbf2e00092222a1071ba9111f834a4ae/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75011bbccbf2e00092222a1071ba9111f834a4ae/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=75011bbccbf2e00092222a1071ba9111f834a4ae", "patch": "@@ -121,6 +121,7 @@ mod handlers {\n     mod expand_glob_import;\n     mod extract_function;\n     mod extract_struct_from_enum_variant;\n+    mod extract_type_alias;\n     mod extract_variable;\n     mod fill_match_arms;\n     mod fix_visibility;\n@@ -187,6 +188,7 @@ mod handlers {\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n+            extract_type_alias::extract_type_alias,\n             fill_match_arms::fill_match_arms,\n             fix_visibility::fix_visibility,\n             flip_binexpr::flip_binexpr,"}, {"sha": "03b7fb36623193d2a06115b24803623831b75985", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/75011bbccbf2e00092222a1071ba9111f834a4ae/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75011bbccbf2e00092222a1071ba9111f834a4ae/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=75011bbccbf2e00092222a1071ba9111f834a4ae", "patch": "@@ -328,6 +328,25 @@ enum A { One(One) }\n     )\n }\n \n+#[test]\n+fn doctest_extract_type_alias() {\n+    check_doc_test(\n+        \"extract_type_alias\",\n+        r#####\"\n+struct S {\n+    field: $0(u8, u8, u8)$0,\n+}\n+\"#####,\n+        r#####\"\n+type $0Type = (u8, u8, u8);\n+\n+struct S {\n+    field: Type,\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_extract_variable() {\n     check_doc_test("}, {"sha": "9561aa345b6f4daa009aa33432240f37eab277ed", "filename": "editors/code/src/snippets.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75011bbccbf2e00092222a1071ba9111f834a4ae/editors%2Fcode%2Fsrc%2Fsnippets.ts", "raw_url": "https://github.com/rust-lang/rust/raw/75011bbccbf2e00092222a1071ba9111f834a4ae/editors%2Fcode%2Fsrc%2Fsnippets.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsnippets.ts?ref=75011bbccbf2e00092222a1071ba9111f834a4ae", "patch": "@@ -29,7 +29,7 @@ async function editorFromUri(uri: vscode.Uri): Promise<vscode.TextEditor | undef\n }\n \n export async function applySnippetTextEdits(editor: vscode.TextEditor, edits: vscode.TextEdit[]) {\n-    let selection: vscode.Selection | undefined = undefined;\n+    const selections: vscode.Selection[] = [];\n     let lineDelta = 0;\n     await editor.edit((builder) => {\n         for (const indel of edits) {\n@@ -44,18 +44,18 @@ export async function applySnippetTextEdits(editor: vscode.TextEditor, edits: vs\n                     indel.range.start.character + placeholderStart\n                     : prefix.length - lastNewline - 1;\n                 const endColumn = startColumn + placeholderLength;\n-                selection = new vscode.Selection(\n+                selections.push(new vscode.Selection(\n                     new vscode.Position(startLine, startColumn),\n                     new vscode.Position(startLine, endColumn),\n-                );\n+                ));\n                 builder.replace(indel.range, newText);\n             } else {\n-                lineDelta = countLines(indel.newText) - (indel.range.end.line - indel.range.start.line);\n                 builder.replace(indel.range, indel.newText);\n             }\n+            lineDelta = countLines(indel.newText) - (indel.range.end.line - indel.range.start.line);\n         }\n     });\n-    if (selection) editor.selection = selection;\n+    if (selections.length > 0) editor.selections = selections;\n }\n \n function parseSnippet(snip: string): [string, [number, number]] | undefined {"}]}