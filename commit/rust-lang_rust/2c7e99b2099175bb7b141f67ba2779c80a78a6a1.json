{"sha": "2c7e99b2099175bb7b141f67ba2779c80a78a6a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjN2U5OWIyMDk5MTc1YmI3YjE0MWY2N2JhMjc3OWM4MGE3OGE2YTE=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-07-31T03:15:19Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-08-02T16:49:36Z"}, "message": "Sort unions", "tree": {"sha": "53d2c66d723374098912e45be82a5ee4b2c3cbae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53d2c66d723374098912e45be82a5ee4b2c3cbae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c7e99b2099175bb7b141f67ba2779c80a78a6a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7e99b2099175bb7b141f67ba2779c80a78a6a1", "html_url": "https://github.com/rust-lang/rust/commit/2c7e99b2099175bb7b141f67ba2779c80a78a6a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c7e99b2099175bb7b141f67ba2779c80a78a6a1/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b31bf74c13ccbd7f07dd74f03fe2dce29f058d44", "url": "https://api.github.com/repos/rust-lang/rust/commits/b31bf74c13ccbd7f07dd74f03fe2dce29f058d44", "html_url": "https://github.com/rust-lang/rust/commit/b31bf74c13ccbd7f07dd74f03fe2dce29f058d44"}], "stats": {"total": 118, "additions": 83, "deletions": 35}, "files": [{"sha": "d264ce6eeb973a4527d6a0647356938657cdf3ed", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "modified", "additions": 83, "deletions": 35, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/2c7e99b2099175bb7b141f67ba2779c80a78a6a1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7e99b2099175bb7b141f67ba2779c80a78a6a1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=2c7e99b2099175bb7b141f67ba2779c80a78a6a1", "patch": "@@ -1,11 +1,10 @@\n use std::cmp::Ordering;\n \n-use hir::known::Option;\n use itertools::Itertools;\n \n use syntax::{\n     ast::{self, NameOwner},\n-    ted, AstNode,\n+    ted, AstNode, TextRange,\n };\n \n use crate::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};\n@@ -18,12 +17,45 @@ pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     } else if let Some(impl_ast) = ctx.find_node_at_offset::<ast::Impl>() {\n         add_sort_methods_assist(acc, impl_ast.assoc_item_list()?)\n     } else if let Some(struct_ast) = ctx.find_node_at_offset::<ast::Struct>() {\n-        add_sort_fields_assist(acc, struct_ast.field_list()?)\n+        match struct_ast.field_list() {\n+            Some(ast::FieldList::RecordFieldList(it)) => add_sort_fields_assist(acc, it),\n+            _ => None,\n+        }\n+    } else if let Some(union_ast) = ctx.find_node_at_offset::<ast::Union>() {\n+        add_sort_fields_assist(acc, union_ast.record_field_list()?)\n     } else {\n         None\n     }\n }\n \n+trait AddRewrite {\n+    fn add_rewrite<T: AstNode>(\n+        &mut self,\n+        label: &str,\n+        old: Vec<T>,\n+        new: Vec<T>,\n+        target: TextRange,\n+    ) -> Option<()>;\n+}\n+\n+impl AddRewrite for Assists {\n+    fn add_rewrite<T: AstNode>(\n+        &mut self,\n+        label: &str,\n+        old: Vec<T>,\n+        new: Vec<T>,\n+        target: TextRange,\n+    ) -> Option<()> {\n+        self.add(AssistId(\"sort_items\", AssistKind::RefactorRewrite), label, target, |builder| {\n+            let mutable: Vec<_> = old.into_iter().map(|it| builder.make_mut(it)).collect();\n+            mutable\n+                .into_iter()\n+                .zip(new)\n+                .for_each(|(old, new)| ted::replace(old.syntax(), new.clone_for_update().syntax()));\n+        })\n+    }\n+}\n+\n fn add_sort_methods_assist(acc: &mut Assists, item_list: ast::AssocItemList) -> Option<()> {\n     let methods = get_methods(&item_list);\n     let sorted = sort_by_name(&methods);\n@@ -33,47 +65,26 @@ fn add_sort_methods_assist(acc: &mut Assists, item_list: ast::AssocItemList) ->\n         return None;\n     }\n \n-    acc.add(\n-        AssistId(\"sort_items\", AssistKind::RefactorRewrite),\n-        \"Sort methods alphabetically\",\n-        item_list.syntax().text_range(),\n-        |builder| {\n-            let methods = methods.into_iter().map(|fn_| builder.make_mut(fn_)).collect::<Vec<_>>();\n-            methods\n-                .into_iter()\n-                .zip(sorted)\n-                .for_each(|(old, new)| ted::replace(old.syntax(), new.clone_for_update().syntax()));\n-        },\n-    )\n+    acc.add_rewrite(\"Sort methods alphabetically\", methods, sorted, item_list.syntax().text_range())\n }\n \n-fn add_sort_fields_assist(acc: &mut Assists, field_list: ast::FieldList) -> Option<()> {\n-    fn record_fields(field_list: &ast::FieldList) -> Option<Vec<ast::RecordField>> {\n-        match field_list {\n-            ast::FieldList::RecordFieldList(it) => Some(it.fields().collect()),\n-            ast::FieldList::TupleFieldList(_) => None,\n-        }\n-    }\n-\n-    let fields = record_fields(&field_list)?;\n+fn add_sort_fields_assist(\n+    acc: &mut Assists,\n+    record_field_list: ast::RecordFieldList,\n+) -> Option<()> {\n+    let fields: Vec<_> = record_field_list.fields().collect();\n     let sorted = sort_by_name(&fields);\n \n     if fields == sorted {\n         cov_mark::hit!(not_applicable_if_sorted);\n         return None;\n     }\n \n-    acc.add(\n-        AssistId(\"sort_items\", AssistKind::RefactorRewrite),\n-        \"Sort methods alphabetically\",\n-        field_list.syntax().text_range(),\n-        |builder| {\n-            let methods = fields.into_iter().map(|fn_| builder.make_mut(fn_)).collect::<Vec<_>>();\n-            methods\n-                .into_iter()\n-                .zip(sorted)\n-                .for_each(|(old, new)| ted::replace(old.syntax(), new.clone_for_update().syntax()));\n-        },\n+    acc.add_rewrite(\n+        \"Sort fields alphabetically\",\n+        fields,\n+        sorted,\n+        record_field_list.syntax().text_range(),\n     )\n }\n \n@@ -147,6 +158,22 @@ $0struct Bar {\n         )\n     }\n \n+    #[test]\n+    fn not_applicable_if_union_sorted() {\n+        cov_mark::check!(not_applicable_if_sorted);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+$0union Bar {\n+    a: u32,\n+    b: u8,\n+    c: u64,\n+}\n+        \"#,\n+        )\n+    }\n+\n     #[test]\n     fn sort_trait() {\n         check_assist(\n@@ -255,6 +282,27 @@ struct Bar {\n     a: usize,\n     aaa: u8,\n     b: u8,\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn sort_union() {\n+        check_assist(\n+            sort_items,\n+            r#\"\n+$0union Bar {\n+    b: u8,\n+    a: u32,\n+    c: u64,\n+}\n+        \"#,\n+            r#\"\n+union Bar {\n+    a: u32,\n+    b: u8,\n+    c: u64,\n }\n         \"#,\n         )"}]}