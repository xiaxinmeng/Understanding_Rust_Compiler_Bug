{"sha": "bf9ed994960cee0443a39e952f1a8b59d3f48a40", "node_id": "C_kwDOAAsO6NoAKGJmOWVkOTk0OTYwY2VlMDQ0M2EzOWU5NTJmMWE4YjU5ZDNmNDhhNDA", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-16T08:52:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-16T08:52:59Z"}, "message": "Rollup merge of #98387 - NobodyXu:feature/std_io_Error_try_downgrade_inner, r=yaahc\n\nAdd new unstable API `downcast` to `std::io::Error`\n\nhttps://github.com/rust-lang/libs-team/issues/57\n\nSigned-off-by: Jiahao XU <Jiahao_XU@outlook.com>", "tree": {"sha": "15668a6de306ff64910b320f903aab2f525561d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15668a6de306ff64910b320f903aab2f525561d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf9ed994960cee0443a39e952f1a8b59d3f48a40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0nxrCRBK7hj4Ov3rIwAAbhEIAE4+w9L8NTPUnaLbNgP8KhEL\nMSZNoUk61hQCo4zLeHuvSlM99/qhZIC0KHTyMIvrHv+EU3mgjiheNQXZRADLxvNH\nlKvCi6M5U+yQ2mG5uYHChY25dLETkxNbIyjRxiqKSFap/3sde/bpDD9KnpuQjkR5\nG6hD/8ZCC2Te+Mi1RQtLsw6FbsbgLPC83FBhiSIbTkydatUcmYd2Fai4qqbFoKYh\nLcAmLYDoeCvDeXjKmDkRFC3hKtehOG5IZZqlIzgKQZZLe26nqQxpDnQ2vZiku0nz\nduGkYivWH5Sq6vsSVauLGoYvZGWJIJIjfpm/Vb813yBvLwoGZFCbaclDbqxSuPE=\n=PL4u\n-----END PGP SIGNATURE-----\n", "payload": "tree 15668a6de306ff64910b320f903aab2f525561d2\nparent e6c43cf8b98e4837bbee1cab225621001a3f2230\nparent 8e8a3be22f1082da965f6a696be93fbbd7b5d4ba\nauthor Yuki Okushi <jtitor@2k36.org> 1657961579 +0900\ncommitter GitHub <noreply@github.com> 1657961579 +0900\n\nRollup merge of #98387 - NobodyXu:feature/std_io_Error_try_downgrade_inner, r=yaahc\n\nAdd new unstable API `downcast` to `std::io::Error`\n\nhttps://github.com/rust-lang/libs-team/issues/57\n\nSigned-off-by: Jiahao XU <Jiahao_XU@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9ed994960cee0443a39e952f1a8b59d3f48a40", "html_url": "https://github.com/rust-lang/rust/commit/bf9ed994960cee0443a39e952f1a8b59d3f48a40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf9ed994960cee0443a39e952f1a8b59d3f48a40/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c43cf8b98e4837bbee1cab225621001a3f2230", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c43cf8b98e4837bbee1cab225621001a3f2230", "html_url": "https://github.com/rust-lang/rust/commit/e6c43cf8b98e4837bbee1cab225621001a3f2230"}, {"sha": "8e8a3be22f1082da965f6a696be93fbbd7b5d4ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8a3be22f1082da965f6a696be93fbbd7b5d4ba", "html_url": "https://github.com/rust-lang/rust/commit/8e8a3be22f1082da965f6a696be93fbbd7b5d4ba"}], "stats": {"total": 128, "additions": 127, "deletions": 1}, "files": [{"sha": "ff7fdcae16f535450124a904da0ecc2d36fc15f4", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bf9ed994960cee0443a39e952f1a8b59d3f48a40/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9ed994960cee0443a39e952f1a8b59d3f48a40/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=bf9ed994960cee0443a39e952f1a8b59d3f48a40", "patch": "@@ -795,6 +795,68 @@ impl Error {\n         }\n     }\n \n+    /// Attempt to downgrade the inner error to `E` if any.\n+    ///\n+    /// If this [`Error`] was constructed via [`new`] then this function will\n+    /// attempt to perform downgrade on it, otherwise it will return [`Err`].\n+    ///\n+    /// If downgrade succeeds, it will return [`Ok`], otherwise it will also\n+    /// return [`Err`].\n+    ///\n+    /// [`new`]: Error::new\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(io_error_downcast)]\n+    ///\n+    /// use std::fmt;\n+    /// use std::io;\n+    /// use std::error::Error;\n+    ///\n+    /// #[derive(Debug)]\n+    /// enum E {\n+    ///     Io(io::Error),\n+    ///     SomeOtherVariant,\n+    /// }\n+    ///\n+    /// impl fmt::Display for E {\n+    ///    // ...\n+    /// #    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    /// #        todo!()\n+    /// #    }\n+    /// }\n+    /// impl Error for E {}\n+    ///\n+    /// impl From<io::Error> for E {\n+    ///     fn from(err: io::Error) -> E {\n+    ///         err.downcast::<E>()\n+    ///             .map(|b| *b)\n+    ///             .unwrap_or_else(E::Io)\n+    ///     }\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"io_error_downcast\", issue = \"99262\")]\n+    pub fn downcast<E>(self) -> result::Result<Box<E>, Self>\n+    where\n+        E: error::Error + Send + Sync + 'static,\n+    {\n+        match self.repr.into_data() {\n+            ErrorData::Custom(b) if b.error.is::<E>() => {\n+                let res = (*b).error.downcast::<E>();\n+\n+                // downcast is a really trivial and is marked as inline, so\n+                // it's likely be inlined here.\n+                //\n+                // And the compiler should be able to eliminate the branch\n+                // that produces `Err` here since b.error.is::<E>()\n+                // returns true.\n+                Ok(res.unwrap())\n+            }\n+            repr_data => Err(Self { repr: Repr::new(repr_data) }),\n+        }\n+    }\n+\n     /// Returns the corresponding [`ErrorKind`] for this error.\n     ///\n     /// # Examples"}, {"sha": "292bf4826fd237a3d9dafe63b3d9ae1b5deac1d5", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf9ed994960cee0443a39e952f1a8b59d3f48a40/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9ed994960cee0443a39e952f1a8b59d3f48a40/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=bf9ed994960cee0443a39e952f1a8b59d3f48a40", "patch": "@@ -132,6 +132,15 @@ unsafe impl Send for Repr {}\n unsafe impl Sync for Repr {}\n \n impl Repr {\n+    pub(super) fn new(dat: ErrorData<Box<Custom>>) -> Self {\n+        match dat {\n+            ErrorData::Os(code) => Self::new_os(code),\n+            ErrorData::Simple(kind) => Self::new_simple(kind),\n+            ErrorData::SimpleMessage(simple_message) => Self::new_simple_message(simple_message),\n+            ErrorData::Custom(b) => Self::new_custom(b),\n+        }\n+    }\n+\n     pub(super) fn new_custom(b: Box<Custom>) -> Self {\n         let p = Box::into_raw(b).cast::<u8>();\n         // Should only be possible if an allocator handed out a pointer with"}, {"sha": "d6ad55b99f5c0aef5abe2d413084b1e2a84d0033", "filename": "library/std/src/io/error/repr_unpacked.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf9ed994960cee0443a39e952f1a8b59d3f48a40/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9ed994960cee0443a39e952f1a8b59d3f48a40/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs?ref=bf9ed994960cee0443a39e952f1a8b59d3f48a40", "patch": "@@ -10,6 +10,10 @@ type Inner = ErrorData<Box<Custom>>;\n pub(super) struct Repr(Inner);\n \n impl Repr {\n+    #[inline]\n+    pub(super) fn new(dat: ErrorData<Box<Custom>>) -> Self {\n+        Self(dat)\n+    }\n     pub(super) fn new_custom(b: Box<Custom>) -> Self {\n         Self(Inner::Custom(b))\n     }"}, {"sha": "c897a5e8701c45ebad019aa86eb679e7660b71a5", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bf9ed994960cee0443a39e952f1a8b59d3f48a40/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9ed994960cee0443a39e952f1a8b59d3f48a40/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=bf9ed994960cee0443a39e952f1a8b59d3f48a40", "patch": "@@ -1,4 +1,4 @@\n-use super::{const_io_error, Custom, Error, ErrorData, ErrorKind, Repr};\n+use super::{const_io_error, Custom, Error, ErrorData, ErrorKind, Repr, SimpleMessage};\n use crate::assert_matches::assert_matches;\n use crate::error;\n use crate::fmt;\n@@ -141,3 +141,54 @@ fn test_custom_error_packing() {\n         }) if error.downcast_ref::<Bojji>().as_deref() == Some(&Bojji(true)),\n     );\n }\n+\n+#[derive(Debug)]\n+struct E;\n+\n+impl fmt::Display for E {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+impl error::Error for E {}\n+\n+#[test]\n+fn test_std_io_error_downcast() {\n+    // Case 1: custom error, downcast succeeds\n+    let io_error = Error::new(ErrorKind::Other, Bojji(true));\n+    let e: Box<Bojji> = io_error.downcast().unwrap();\n+    assert!(e.0);\n+\n+    // Case 2: custom error, downcast fails\n+    let io_error = Error::new(ErrorKind::Other, Bojji(true));\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n+\n+    //   ensures that the custom error is intact\n+    assert_eq!(ErrorKind::Other, io_error.kind());\n+    let e: Box<Bojji> = io_error.downcast().unwrap();\n+    assert!(e.0);\n+\n+    // Case 3: os error\n+    let errno = 20;\n+    let io_error = Error::from_raw_os_error(errno);\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n+\n+    assert_eq!(errno, io_error.raw_os_error().unwrap());\n+\n+    // Case 4: simple\n+    let kind = ErrorKind::OutOfMemory;\n+    let io_error: Error = kind.into();\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n+\n+    assert_eq!(kind, io_error.kind());\n+\n+    // Case 5: simple message\n+    const SIMPLE_MESSAGE: SimpleMessage =\n+        SimpleMessage { kind: ErrorKind::Other, message: \"simple message error test\" };\n+    let io_error = Error::from_static_message(&SIMPLE_MESSAGE);\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n+\n+    assert_eq!(SIMPLE_MESSAGE.kind, io_error.kind());\n+    assert_eq!(SIMPLE_MESSAGE.message, &*format!(\"{io_error}\"));\n+}"}]}