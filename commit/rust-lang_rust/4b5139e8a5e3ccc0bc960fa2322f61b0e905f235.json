{"sha": "4b5139e8a5e3ccc0bc960fa2322f61b0e905f235", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNTEzOWU4YTVlM2NjYzBiYzk2MGZhMjMyMmY2MWIwZTkwNWYyMzU=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T10:13:30Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T10:37:10Z"}, "message": "impl gen hash for structs", "tree": {"sha": "8815be70efae6604b1623168e77db95e1c5910a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8815be70efae6604b1623168e77db95e1c5910a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235", "html_url": "https://github.com/rust-lang/rust/commit/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec2535e9cef8a60c9ef19a50ac928c4b5d4b87bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec2535e9cef8a60c9ef19a50ac928c4b5d4b87bf", "html_url": "https://github.com/rust-lang/rust/commit/ec2535e9cef8a60c9ef19a50ac928c4b5d4b87bf"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "3a17035ae853e852a93a7e919080650f32ade0d7", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=4b5139e8a5e3ccc0bc960fa2322f61b0e905f235", "patch": "@@ -2732,8 +2732,8 @@ fn foo() {\n                                     file_id: FileId(\n                                         1,\n                                     ),\n-                                    full_range: 252..434,\n-                                    focus_range: 291..297,\n+                                    full_range: 253..435,\n+                                    focus_range: 292..298,\n                                     name: \"Future\",\n                                     kind: Trait,\n                                     description: \"pub trait Future\","}, {"sha": "bd0b2028a1a00d1dcf78b96f6025cb801f9ed67e", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=4b5139e8a5e3ccc0bc960fa2322f61b0e905f235", "patch": "@@ -370,6 +370,56 @@ impl Default for Foo {\n         )\n     }\n \n+    #[test]\n+    fn add_custom_impl_hash_record_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: hash\n+#[derive(Has$0h)]\n+struct Foo {\n+    bin: usize,\n+    bar: usize,\n+}\n+\"#,\n+            r#\"\n+struct Foo {\n+    bin: usize,\n+    bar: usize,\n+}\n+\n+impl core::hash::Hash for Foo {\n+    $0fn hash<H: core::hash::Hasher>(&self, state: &mut H) {\n+        self.bin.hash(state);\n+        self.bar.hash(state);\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_hash_tuple_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: hash\n+#[derive(Has$0h)]\n+struct Foo(usize, usize);\n+\"#,\n+            r#\"\n+struct Foo(usize, usize);\n+\n+impl core::hash::Hash for Foo {\n+    $0fn hash<H: core::hash::Hasher>(&self, state: &mut H) {\n+        self.0.hash(state);\n+        self.1.hash(state);\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn add_custom_impl_hash_enum() {\n         check_assist("}, {"sha": "9ed8cbdbc735d318c763092f87499e9dd92f2ea5", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=4b5139e8a5e3ccc0bc960fa2322f61b0e905f235", "patch": "@@ -155,6 +155,14 @@ fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `Hash` impl based on the fields and members of the target type.\n fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    fn gen_hash_call(target: ast::Expr) -> ast::Stmt {\n+        let method = make::name_ref(\"hash\");\n+        let arg = make::expr_path(make::ext::ident_path(\"state\"));\n+        let expr = make::expr_method_call(target, method, make::arg_list(Some(arg)));\n+        let stmt = make::expr_stmt(expr);\n+        stmt.into()\n+    }\n+\n     let body = match adt {\n         // `Hash` cannot be derived for unions, so no default impl can be provided.\n         ast::Adt::Union(_) => return None,\n@@ -169,29 +177,35 @@ fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n             let arg = make::expr_path(make::ext::ident_path(\"self\"));\n             let fn_call = make::expr_call(fn_name, make::arg_list(Some(arg)));\n+            let stmt = gen_hash_call(fn_call);\n \n-            let method = make::name_ref(\"hash\");\n-            let arg = make::expr_path(make::ext::ident_path(\"state\"));\n-            let expr = make::expr_method_call(fn_call, method, make::arg_list(Some(arg)));\n-            let stmt = make::expr_stmt(expr);\n-\n-            make::block_expr(Some(stmt.into()), None).indent(ast::edit::IndentLevel(1))\n+            make::block_expr(Some(stmt), None).indent(ast::edit::IndentLevel(1))\n         }\n         ast::Adt::Struct(strukt) => match strukt.field_list() {\n             // => self.<field>.hash(state);*\n             Some(ast::FieldList::RecordFieldList(field_list)) => {\n-                // let mut stmts = vec![];\n-                for field in field_list.fields() {}\n-                todo!();\n+                let mut stmts = vec![];\n+                for field in field_list.fields() {\n+                    let base = make::expr_path(make::ext::ident_path(\"self\"));\n+                    let target = make::expr_field(base, &field.name()?.to_string());\n+                    stmts.push(gen_hash_call(target));\n+                }\n+                make::block_expr(stmts, None).indent(ast::edit::IndentLevel(1))\n             }\n \n             // => self.<field_index>.hash(state);*\n             Some(ast::FieldList::TupleFieldList(field_list)) => {\n-                todo!();\n+                let mut stmts = vec![];\n+                for (i, _) in field_list.fields().enumerate() {\n+                    let base = make::expr_path(make::ext::ident_path(\"self\"));\n+                    let target = make::expr_field(base, &format!(\"{}\", i));\n+                    stmts.push(gen_hash_call(target));\n+                }\n+                make::block_expr(stmts, None).indent(ast::edit::IndentLevel(1))\n             }\n \n             // No fields in the body means there's nothing to hash.\n-            None => make::ext::empty_block_expr(),\n+            None => return None,\n         },\n     };\n "}]}