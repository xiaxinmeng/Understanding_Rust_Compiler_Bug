{"sha": "e107194b669a9464ff26d59f13ff1499b2a7dc67", "node_id": "C_kwDOAAsO6NoAKGUxMDcxOTRiNjY5YTk0NjRmZjI2ZDU5ZjEzZmYxNDk5YjJhN2RjNjc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-26T13:16:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-09T17:45:13Z"}, "message": "Ignore AscribeUserType in unsafeck to avoid duplicate diagnostics.", "tree": {"sha": "dc6acc6bbcc143abf6388f0cc8ad36b2107d4e4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc6acc6bbcc143abf6388f0cc8ad36b2107d4e4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e107194b669a9464ff26d59f13ff1499b2a7dc67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e107194b669a9464ff26d59f13ff1499b2a7dc67", "html_url": "https://github.com/rust-lang/rust/commit/e107194b669a9464ff26d59f13ff1499b2a7dc67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e107194b669a9464ff26d59f13ff1499b2a7dc67/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4462bb54e3bbff7eecae1816836f306fcc309e05", "url": "https://api.github.com/repos/rust-lang/rust/commits/4462bb54e3bbff7eecae1816836f306fcc309e05", "html_url": "https://github.com/rust-lang/rust/commit/4462bb54e3bbff7eecae1816836f306fcc309e05"}], "stats": {"total": 50, "additions": 17, "deletions": 33}, "files": [{"sha": "61f5586d736a1d240d4e31e44cb07d7abe1e23bc", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e107194b669a9464ff26d59f13ff1499b2a7dc67/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e107194b669a9464ff26d59f13ff1499b2a7dc67/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=e107194b669a9464ff26d59f13ff1499b2a7dc67", "patch": "@@ -100,14 +100,16 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag { .. }\n-            | StatementKind::AscribeUserType(..)\n             | StatementKind::PlaceMention(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n             | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {\n                 // safe (at least as emitted during MIR construction)\n             }\n+            // `AscribeUserType` just exists to help MIR borrowck.  It has no semantics, and\n+            // everything is already reported by `PlaceMention`.\n+            StatementKind::AscribeUserType(..) => return,\n         }\n         self.super_statement(statement, location);\n     }"}, {"sha": "f4be2b482a7e65eb2ee059d5a2c8bdaca2f33d5d", "filename": "tests/ui/binding/issue-53114-safety-checks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs?ref=e107194b669a9464ff26d59f13ff1499b2a7dc67", "patch": "@@ -36,7 +36,6 @@ fn let_ascribe_gets_unsafe_field() {\n     let p = P { a: &2, b: &3 };\n     let _: _ = &p.b;  //~ ERROR    reference to packed field\n     let _: _ = u1.a;  //~ ERROR  [E0133]\n-                      //~^ ERROR  [E0133]\n     let _: _ = &u2.a; //~ ERROR  [E0133]\n \n     // variation on above with `_` in substructure"}, {"sha": "41318d0a38a17a3e0188699b503b6bdfcc51d8cb", "filename": "tests/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=e107194b669a9464ff26d59f13ff1499b2a7dc67", "patch": "@@ -26,7 +26,7 @@ LL |     let _: _ = &p.b;\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:43:20\n+  --> $DIR/issue-53114-safety-checks.rs:42:20\n    |\n LL |     let (_,): _ = (&p.b,);\n    |                    ^^^^\n@@ -35,7 +35,7 @@ LL |     let (_,): _ = (&p.b,);\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:52:11\n+  --> $DIR/issue-53114-safety-checks.rs:51:11\n    |\n LL |     match &p.b  { _ => { } }\n    |           ^^^^\n@@ -44,7 +44,7 @@ LL |     match &p.b  { _ => { } }\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:57:12\n+  --> $DIR/issue-53114-safety-checks.rs:56:12\n    |\n LL |     match (&p.b,)  { (_,) => { } }\n    |            ^^^^\n@@ -93,70 +93,62 @@ LL |     let _: _ = u1.a;\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:38:12\n-   |\n-LL |     let _: _ = u1.a;\n-   |            ^ access to union field\n-   |\n-   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n-\n-error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:40:16\n+  --> $DIR/issue-53114-safety-checks.rs:39:16\n    |\n LL |     let _: _ = &u2.a;\n    |                ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:44:20\n+  --> $DIR/issue-53114-safety-checks.rs:43:20\n    |\n LL |     let (_,): _ = (u1.a,);\n    |                    ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:45:20\n+  --> $DIR/issue-53114-safety-checks.rs:44:20\n    |\n LL |     let (_,): _ = (&u2.a,);\n    |                    ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:53:11\n+  --> $DIR/issue-53114-safety-checks.rs:52:11\n    |\n LL |     match u1.a  { _ => { } }\n    |           ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:54:11\n+  --> $DIR/issue-53114-safety-checks.rs:53:11\n    |\n LL |     match &u2.a { _ => { } }\n    |           ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:58:12\n+  --> $DIR/issue-53114-safety-checks.rs:57:12\n    |\n LL |     match (u1.a,)  { (_,) => { } }\n    |            ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:59:12\n+  --> $DIR/issue-53114-safety-checks.rs:58:12\n    |\n LL |     match (&u2.a,) { (_,) => { } }\n    |            ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 18 previous errors\n \n Some errors have detailed explanations: E0133, E0793.\n For more information about an error, try `rustc --explain E0133`."}, {"sha": "24313352a41e0412f973036e35eb2dd5ad8a3ecb", "filename": "tests/ui/unsafe/unsafe-fn-deref-ptr.mir.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr?ref=e107194b669a9464ff26d59f13ff1499b2a7dc67", "patch": "@@ -15,21 +15,13 @@ LL |     let _: u8 = *p;\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-deref-ptr.rs:6:12\n-   |\n-LL |     let _: u8 = *p;\n-   |            ^^ dereference of raw pointer\n-   |\n-   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n-\n-error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-deref-ptr.rs:8:12\n+  --> $DIR/unsafe-fn-deref-ptr.rs:7:12\n    |\n LL |     return *p;\n    |            ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "ef8221d05cdb25cb67c0b101617e7cb8096185a9", "filename": "tests/ui/unsafe/unsafe-fn-deref-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs?ref=e107194b669a9464ff26d59f13ff1499b2a7dc67", "patch": "@@ -4,7 +4,6 @@\n fn f(p: *const u8) -> u8 {\n     let _ = *p; //~ ERROR dereference of raw pointer is unsafe\n     let _: u8 = *p; //~ ERROR dereference of raw pointer is unsafe\n-                    //[mir]~^ ERROR dereference of raw pointer is unsafe\n     return *p; //~ ERROR dereference of raw pointer is unsafe\n }\n "}, {"sha": "24313352a41e0412f973036e35eb2dd5ad8a3ecb", "filename": "tests/ui/unsafe/unsafe-fn-deref-ptr.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e107194b669a9464ff26d59f13ff1499b2a7dc67/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr?ref=e107194b669a9464ff26d59f13ff1499b2a7dc67", "patch": "@@ -15,7 +15,7 @@ LL |     let _: u8 = *p;\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-deref-ptr.rs:8:12\n+  --> $DIR/unsafe-fn-deref-ptr.rs:7:12\n    |\n LL |     return *p;\n    |            ^^ dereference of raw pointer"}]}