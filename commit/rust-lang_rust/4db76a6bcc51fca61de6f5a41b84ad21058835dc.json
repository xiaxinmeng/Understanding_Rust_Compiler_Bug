{"sha": "4db76a6bcc51fca61de6f5a41b84ad21058835dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYjc2YTZiY2M1MWZjYTYxZGU2ZjVhNDFiODRhZDIxMDU4ODM1ZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-30T14:53:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-30T14:53:30Z"}, "message": "Auto merge of #6653 - flip1995:rustup, r=flip1995\n\nRustup\n\nchangelog: Deprecate `unknown_clippy_lints` (integrated in `unknown_lints`)\n\nr? `@ghost`", "tree": {"sha": "ec83997de8fd62afe99605bb92a2d85ed29ee2eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec83997de8fd62afe99605bb92a2d85ed29ee2eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4db76a6bcc51fca61de6f5a41b84ad21058835dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4db76a6bcc51fca61de6f5a41b84ad21058835dc", "html_url": "https://github.com/rust-lang/rust/commit/4db76a6bcc51fca61de6f5a41b84ad21058835dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4db76a6bcc51fca61de6f5a41b84ad21058835dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db215bca8baa05520002e553e2a7b2d9659b6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db215bca8baa05520002e553e2a7b2d9659b6ba", "html_url": "https://github.com/rust-lang/rust/commit/5db215bca8baa05520002e553e2a7b2d9659b6ba"}, {"sha": "60ab57e4eb0bc8845e0a5a683e10d2e39147094a", "url": "https://api.github.com/repos/rust-lang/rust/commits/60ab57e4eb0bc8845e0a5a683e10d2e39147094a", "html_url": "https://github.com/rust-lang/rust/commit/60ab57e4eb0bc8845e0a5a683e10d2e39147094a"}], "stats": {"total": 424, "additions": 185, "deletions": 239}, "files": [{"sha": "652d1fa16b6dedc30635d8d7b0bdb14d51cfb963", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 70, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -10,11 +10,10 @@ use rustc_errors::Applicability;\n use rustc_hir::{\n     Block, Expr, ExprKind, ImplItem, ImplItemKind, Item, ItemKind, StmtKind, TraitFn, TraitItem, TraitItemKind,\n };\n-use rustc_lint::{CheckLintNameResult, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n use rustc_span::symbol::{Symbol, SymbolStr};\n@@ -156,33 +155,6 @@ declare_clippy_lint! {\n     \"empty line after outer attribute\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `allow`/`warn`/`deny`/`forbid` attributes with scoped clippy\n-    /// lints and if those lints exist in clippy. If there is an uppercase letter in the lint name\n-    /// (not the tool name) and a lowercase version of this lint exists, it will suggest to lowercase\n-    /// the lint name.\n-    ///\n-    /// **Why is this bad?** A lint attribute with a mistyped lint name won't have an effect.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// Bad:\n-    /// ```rust\n-    /// #![warn(if_not_els)]\n-    /// #![deny(clippy::All)]\n-    /// ```\n-    ///\n-    /// Good:\n-    /// ```rust\n-    /// #![warn(if_not_else)]\n-    /// #![deny(clippy::all)]\n-    /// ```\n-    pub UNKNOWN_CLIPPY_LINTS,\n-    style,\n-    \"unknown_lints for scoped Clippy lints\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.\n     ///\n@@ -272,7 +244,6 @@ declare_lint_pass!(Attributes => [\n     INLINE_ALWAYS,\n     DEPRECATED_SEMVER,\n     USELESS_ATTRIBUTE,\n-    UNKNOWN_CLIPPY_LINTS,\n     BLANKET_CLIPPY_RESTRICTION_LINTS,\n ]);\n \n@@ -409,48 +380,9 @@ fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n }\n \n fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n-    let lint_store = cx.lints();\n     for lint in items {\n         if let Some(lint_name) = extract_clippy_lint(lint) {\n-            if let CheckLintNameResult::Tool(Err((None, _))) = lint_store.check_lint_name(&lint_name, Some(sym::clippy))\n-            {\n-                span_lint_and_then(\n-                    cx,\n-                    UNKNOWN_CLIPPY_LINTS,\n-                    lint.span(),\n-                    &format!(\"unknown clippy lint: clippy::{}\", lint_name),\n-                    |diag| {\n-                        let name_lower = lint_name.to_lowercase();\n-                        let symbols = lint_store\n-                            .get_lints()\n-                            .iter()\n-                            .map(|l| Symbol::intern(&l.name_lower()))\n-                            .collect::<Vec<_>>();\n-                        let sugg = find_best_match_for_name(\n-                            &symbols,\n-                            Symbol::intern(&format!(\"clippy::{}\", name_lower)),\n-                            None,\n-                        );\n-                        if lint_name.chars().any(char::is_uppercase)\n-                            && lint_store.find_lints(&format!(\"clippy::{}\", name_lower)).is_ok()\n-                        {\n-                            diag.span_suggestion(\n-                                lint.span(),\n-                                \"lowercase the lint name\",\n-                                format!(\"clippy::{}\", name_lower),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        } else if let Some(sugg) = sugg {\n-                            diag.span_suggestion(\n-                                lint.span(),\n-                                \"did you mean\",\n-                                sugg.to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    },\n-                );\n-            } else if lint_name == \"restriction\" && ident != \"allow\" {\n+            if lint_name == \"restriction\" && ident != \"allow\" {\n                 span_lint_and_help(\n                     cx,\n                     BLANKET_CLIPPY_RESTRICTION_LINTS,"}, {"sha": "ac9098a7584d6d6985a02d9d2f7c931e27d5185e", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -2,11 +2,10 @@ use crate::utils::{\n     contains_name, get_pat_name, match_type, paths, single_segment_path, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::UintTy;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n use rustc_span::Symbol;"}, {"sha": "640cffd24a701d52a006f088726459a07358d3c1", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -2,14 +2,14 @@\n \n use crate::utils::{clip, sext, unsext};\n use if_chain::if_chain;\n-use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n+use rustc_ast::ast::{self, LitFloatType, LitKind};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, ScalarInt, Ty, TyCtxt};\n+use rustc_middle::ty::{self, FloatTy, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n@@ -167,8 +167,8 @@ pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {\n-            FloatTy::F32 => Constant::F32(is.as_str().parse().unwrap()),\n-            FloatTy::F64 => Constant::F64(is.as_str().parse().unwrap()),\n+            ast::FloatTy::F32 => Constant::F32(is.as_str().parse().unwrap()),\n+            ast::FloatTy::F64 => Constant::F64(is.as_str().parse().unwrap()),\n         },\n         LitKind::Float(ref is, LitFloatType::Unsuffixed) => match ty.expect(\"type of float is known\").kind() {\n             ty::Float(FloatTy::F32) => Constant::F32(is.as_str().parse().unwrap()),"}, {"sha": "6fa1378b8c73d66971f75e93e899136a1aa93ab4", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    any_parent_is_automatically_derived, contains_name, match_def_path, paths, qpath_res, snippet_with_macro_callsite,\n+    any_parent_is_automatically_derived, contains_name, match_def_path, paths, snippet_with_macro_callsite,\n };\n use crate::utils::{span_lint_and_note, span_lint_and_sugg};\n use if_chain::if_chain;\n@@ -231,7 +231,7 @@ fn is_expr_default<'tcx>(expr: &'tcx Expr<'tcx>, cx: &LateContext<'tcx>) -> bool\n     if_chain! {\n         if let ExprKind::Call(ref fn_expr, _) = &expr.kind;\n         if let ExprKind::Path(qpath) = &fn_expr.kind;\n-        if let Res::Def(_, def_id) = qpath_res(cx, qpath, fn_expr.hir_id);\n+        if let Res::Def(_, def_id) = cx.qpath_res(qpath, fn_expr.hir_id);\n         then {\n             // right hand side of assignment is `Default::default`\n             match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD)"}, {"sha": "89088c533ed50b305a6f4e0b0cbe4114921fe81d", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -163,11 +163,28 @@ declare_deprecated_lint! {\n }\n \n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been uplifted to rustc and is now called\n+    /// `panic_fmt`.\n     pub PANIC_PARAMS,\n     \"this lint has been uplifted to rustc and is now called `panic_fmt`\"\n }\n \n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been integrated into the `unknown_lints`\n+    /// rustc lint.\n+    pub UNKNOWN_CLIPPY_LINTS,\n+    \"this lint has been integrated into the `unknown_lints` rustc lint\"\n+}\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been replaced by `manual_find_map`, a\n+    /// more specific lint.\n     pub FIND_MAP,\n-    \"this lint is replaced by `manual_find_map`, a more specific lint\"\n+    \"this lint has been replaced by `manual_find_map`, a more specific lint\"\n }"}, {"sha": "3a754f4991782e128c340f2ca0670cd4f92d9cc2", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -12,6 +12,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n+use rustc_parse::parser::ForceCollect;\n use rustc_session::parse::ParseSess;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::edition::Edition;\n@@ -483,7 +484,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n \n                 let mut relevant_main_found = false;\n                 loop {\n-                    match parser.parse_item() {\n+                    match parser.parse_item(ForceCollect::No) {\n                         Ok(Some(item)) => match &item.kind {\n                             // Tests with one of these items are ignored\n                             ItemKind::Static(..)"}, {"sha": "a84f9c46287163ece6ddd5ab947e175dd0d5481f", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_copy, match_def_path, paths, qpath_res, span_lint_and_note};\n+use crate::utils::{is_copy, match_def_path, paths, span_lint_and_note};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             if let ExprKind::Call(ref path, ref args) = expr.kind;\n             if let ExprKind::Path(ref qpath) = path.kind;\n             if args.len() == 1;\n-            if let Some(def_id) = qpath_res(cx, qpath, path.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n             then {\n                 let lint;\n                 let msg;"}, {"sha": "aa235642ac31094e96e9f911d8fa519642b4eb45", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -3,11 +3,10 @@\n \n use crate::consts::{miri_to_const, Constant};\n use crate::utils::span_lint;\n-use rustc_ast::ast::{IntTy, UintTy};\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n use rustc_middle::ty::util::IntTypeExt;\n+use rustc_middle::ty::{self, IntTy, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::convert::TryFrom;\n "}, {"sha": "915859270009b27775b5656c67a7241783abc373", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_entrypoint_fn, match_def_path, paths, qpath_res, span_lint};\n+use crate::utils::{is_entrypoint_fn, match_def_path, paths, span_lint};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -29,7 +29,7 @@ impl<'tcx> LateLintPass<'tcx> for Exit {\n         if_chain! {\n             if let ExprKind::Call(ref path_expr, ref _args) = e.kind;\n             if let ExprKind::Path(ref path) = path_expr.kind;\n-            if let Some(def_id) = qpath_res(cx, path, path_expr.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(path, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::EXIT);\n             then {\n                 let parent = cx.tcx.hir().get_parent_item(e.hir_id);"}, {"sha": "527905e375d287b014502236a71fc09667961f55", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,7 +1,4 @@\n-use crate::utils::paths::FROM_TRAIT;\n-use crate::utils::{\n-    is_expn_of, is_type_diagnostic_item, match_def_path, match_panic_def_id, method_chain_args, span_lint_and_then,\n-};\n+use crate::utils::{is_expn_of, is_type_diagnostic_item, match_panic_def_id, method_chain_args, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -59,7 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         if_chain! {\n             if let hir::ItemKind::Impl(impl_) = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n-            if match_def_path(cx, impl_trait_ref.def_id, &FROM_TRAIT);\n+            if cx.tcx.is_diagnostic_item(sym::from_trait, impl_trait_ref.def_id);\n             then {\n                 lint_impl_body(cx, item.span, impl_.items);\n             }"}, {"sha": "be646cbe4d043659bed1a879e8e3f07836090feb", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{numeric_literal, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n+use rustc_ast::ast::{self, LitFloatType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, FloatTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::fmt;\n \n@@ -75,8 +75,8 @@ impl<'tcx> LateLintPass<'tcx> for FloatLiteral {\n                 let digits = count_digits(&sym_str);\n                 let max = max_digits(fty);\n                 let type_suffix = match lit_float_ty {\n-                    LitFloatType::Suffixed(FloatTy::F32) => Some(\"f32\"),\n-                    LitFloatType::Suffixed(FloatTy::F64) => Some(\"f64\"),\n+                    LitFloatType::Suffixed(ast::FloatTy::F32) => Some(\"f32\"),\n+                    LitFloatType::Suffixed(ast::FloatTy::F64) => Some(\"f64\"),\n                     LitFloatType::Unsuffixed => None\n                 };\n                 let (is_whole, mut float_str) = match fty {"}, {"sha": "8795425461033d2da785dcab99add48a63a6b396", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n     attr_by_name, attrs::is_proc_macro, is_must_use_ty, is_trait_impl_item, is_type_diagnostic_item, iter_input_pats,\n-    last_path_segment, match_def_path, must_use_attr, qpath_res, return_ty, snippet, snippet_opt, span_lint,\n-    span_lint_and_help, span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n+    last_path_segment, match_def_path, must_use_attr, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help,\n+    span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -659,7 +659,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n impl<'a, 'tcx> DerefVisitor<'a, 'tcx> {\n     fn check_arg(&self, ptr: &hir::Expr<'_>) {\n         if let hir::ExprKind::Path(ref qpath) = ptr.kind {\n-            if let Res::Local(id) = qpath_res(self.cx, qpath, ptr.hir_id) {\n+            if let Res::Local(id) = self.cx.qpath_res(qpath, ptr.hir_id) {\n                 if self.ptrs.contains(&id) {\n                     span_lint(\n                         self.cx,\n@@ -722,7 +722,7 @@ fn is_mutated_static(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> bool {\n     use hir::ExprKind::{Field, Index, Path};\n \n     match e.kind {\n-        Path(ref qpath) => !matches!(qpath_res(cx, qpath, e.hir_id), Res::Local(_)),\n+        Path(ref qpath) => !matches!(cx.qpath_res(qpath, e.hir_id), Res::Local(_)),\n         Field(ref inner, _) | Index(ref inner, _) => is_mutated_static(cx, inner),\n         _ => false,\n     }"}, {"sha": "7208e66ff7be15193646225bdd719176dd483ed4", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{Opaque, PredicateAtom::Trait};\n+use rustc_middle::ty::{Opaque, PredicateKind::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n@@ -93,7 +93,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n                                     infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n+                                    if let Trait(trait_pred, _) = obligation.predicate.kind().skip_binder() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "5886c2360e36220ef5c6a7f97dada59c5eda8f5c", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{qpath_res, snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n+use crate::utils::{snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -145,7 +145,7 @@ fn check_assign<'tcx>(\n         if let hir::StmtKind::Semi(ref expr) = expr.kind;\n         if let hir::ExprKind::Assign(ref var, ref value, _) = expr.kind;\n         if let hir::ExprKind::Path(ref qpath) = var.kind;\n-        if let Res::Local(local_id) = qpath_res(cx, qpath, var.hir_id);\n+        if let Res::Local(local_id) = cx.qpath_res(qpath, var.hir_id);\n         if decl == local_id;\n         then {\n             let mut v = LocalUsedVisitor::new(decl);"}, {"sha": "54007c29c6c5efbb8af522a3d18932503b372496", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -506,9 +506,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::panic_params\",\n         \"this lint has been uplifted to rustc and is now called `panic_fmt`\",\n     );\n+    store.register_removed(\n+        \"clippy::unknown_clippy_lints\",\n+        \"this lint has been integrated into the `unknown_lints` rustc lint\",\n+    );\n     store.register_removed(\n         \"clippy::find_map\",\n-        \"this lint is replaced by `manual_find_map`, a more specific lint\",\n+        \"this lint has been replaced by `manual_find_map`, a more specific lint\",\n     );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n@@ -553,7 +557,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n         &attrs::INLINE_ALWAYS,\n         &attrs::MISMATCHED_TARGET_OS,\n-        &attrs::UNKNOWN_CLIPPY_LINTS,\n         &attrs::USELESS_ATTRIBUTE,\n         &await_holding_invalid::AWAIT_HOLDING_LOCK,\n         &await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n@@ -1409,7 +1412,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::MISMATCHED_TARGET_OS),\n-        LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&attrs::USELESS_ATTRIBUTE),\n         LintId::of(&bit_mask::BAD_BIT_MASK),\n         LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),\n@@ -1692,7 +1694,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(&attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n-        LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n         LintId::of(&blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n         LintId::of(&collapsible_if::COLLAPSIBLE_ELSE_IF),"}, {"sha": "5211ca7da323a012f41fe41d9e0109064ab1da40", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -6,9 +6,9 @@ use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n     contains_name, get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n     indent_of, is_in_panic_handler, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item,\n-    last_path_segment, match_trait_method, match_type, match_var, multispan_sugg, qpath_res, single_segment_path,\n-    snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help,\n-    span_lint_and_sugg, span_lint_and_then, sugg, SpanlessEq,\n+    last_path_segment, match_trait_method, match_type, match_var, multispan_sugg, single_segment_path, snippet,\n+    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n+    span_lint_and_then, sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -533,7 +533,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n         }\n \n         // check for never_loop\n-        if let ExprKind::Loop(ref block, _, _) = expr.kind {\n+        if let ExprKind::Loop(ref block, _, _, _) = expr.kind {\n             match never_loop_block(block, expr.hir_id) {\n                 NeverLoopResult::AlwaysBreak => span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\"),\n                 NeverLoopResult::MayContinueMainLoop | NeverLoopResult::Otherwise => (),\n@@ -543,7 +543,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n         // check for `loop { if let {} else break }` that could be `while let`\n         // (also matches an explicit \"match\" instead of \"if let\")\n         // (even if the \"match\" or \"if let\" is used for declaration)\n-        if let ExprKind::Loop(ref block, _, LoopSource::Loop) = expr.kind {\n+        if let ExprKind::Loop(ref block, _, LoopSource::Loop, _) = expr.kind {\n             // also check for empty `loop {}` statements, skipping those in #[panic_handler]\n             if block.stmts.is_empty() && block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n                 let msg = \"empty `loop {}` wastes CPU cycles\";\n@@ -738,7 +738,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Assign(ref e1, ref e2, _)\n         | ExprKind::AssignOp(_, ref e1, ref e2)\n         | ExprKind::Index(ref e1, ref e2) => never_loop_expr_all(&mut [&**e1, &**e2].iter().cloned(), main_loop_id),\n-        ExprKind::Loop(ref b, _, _) => {\n+        ExprKind::Loop(ref b, _, _, _) => {\n             // Break can come from the inner loop so remove them.\n             absorb_break(&never_loop_block(b, main_loop_id))\n         },\n@@ -848,7 +848,7 @@ fn same_var<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, var: HirId) -> bool {\n         if let ExprKind::Path(qpath) = &expr.kind;\n         if let QPath::Resolved(None, path) = qpath;\n         if path.segments.len() == 1;\n-        if let Res::Local(local_id) = qpath_res(cx, qpath, expr.hir_id);\n+        if let Res::Local(local_id) = cx.qpath_res(qpath, expr.hir_id);\n         then {\n             // our variable!\n             local_id == var\n@@ -1313,7 +1313,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SameItemPushVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n             // Non-determinism may occur ... don't give a lint\n-            ExprKind::Loop(_, _, _) | ExprKind::Match(_, _, _) => self.should_lint = false,\n+            ExprKind::Loop(..) | ExprKind::Match(..) => self.should_lint = false,\n             ExprKind::Block(block, _) => self.visit_block(block),\n             _ => {},\n         }\n@@ -1419,7 +1419,7 @@ fn detect_same_item_push<'tcx>(\n                 // Make sure that the push does not involve possibly mutating values\n                 match pushed_item.kind {\n                     ExprKind::Path(ref qpath) => {\n-                        match qpath_res(cx, qpath, pushed_item.hir_id) {\n+                        match cx.qpath_res(qpath, pushed_item.hir_id) {\n                             // immutable bindings that are initialized with literal or constant\n                             Res::Local(hir_id) => {\n                                 if_chain! {\n@@ -1436,7 +1436,7 @@ fn detect_same_item_push<'tcx>(\n                                             ExprKind::Lit(..) => emit_lint(cx, vec, pushed_item),\n                                             // immutable bindings that are initialized with constant\n                                             ExprKind::Path(ref path) => {\n-                                                if let Res::Def(DefKind::Const, ..) = qpath_res(cx, path, init.hir_id) {\n+                                                if let Res::Def(DefKind::Const, ..) = cx.qpath_res(path, init.hir_id) {\n                                                     emit_lint(cx, vec, pushed_item);\n                                                 }\n                                             }\n@@ -2027,7 +2027,7 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n         if let ExprKind::Path(ref qpath) = bound.kind;\n         if let QPath::Resolved(None, _) = *qpath;\n         then {\n-            let res = qpath_res(cx, qpath, bound.hir_id);\n+            let res = cx.qpath_res(qpath, bound.hir_id);\n             if let Res::Local(hir_id) = res {\n                 let node_str = cx.tcx.hir().get(hir_id);\n                 if_chain! {\n@@ -2119,7 +2119,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                     if self.prefer_mutable {\n                         self.indexed_mut.insert(seqvar.segments[0].ident.name);\n                     }\n-                    let res = qpath_res(self.cx, seqpath, seqexpr.hir_id);\n+                    let res = self.cx.qpath_res(seqpath, seqexpr.hir_id);\n                     match res {\n                         Res::Local(hir_id) => {\n                             let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n@@ -2183,7 +2183,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             if let QPath::Resolved(None, ref path) = *qpath;\n             if path.segments.len() == 1;\n             then {\n-                if let Res::Local(local_id) = qpath_res(self.cx, qpath, expr.hir_id) {\n+                if let Res::Local(local_id) = self.cx.qpath_res(qpath, expr.hir_id) {\n                     if local_id == self.var {\n                         self.nonindex = true;\n                     } else {\n@@ -2588,7 +2588,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n \n fn var_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<HirId> {\n     if let ExprKind::Path(ref qpath) = expr.kind {\n-        let path_res = qpath_res(cx, qpath, expr.hir_id);\n+        let path_res = cx.qpath_res(qpath, expr.hir_id);\n         if let Res::Local(hir_id) = path_res {\n             return Some(hir_id);\n         }\n@@ -2818,7 +2818,7 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n         if_chain! {\n             if let ExprKind::Path(ref qpath) = ex.kind;\n             if let QPath::Resolved(None, _) = *qpath;\n-            let res = qpath_res(self.cx, qpath, ex.hir_id);\n+            let res = self.cx.qpath_res(qpath, ex.hir_id);\n             then {\n                 match res {\n                     Res::Local(hir_id) => {"}, {"sha": "42a92104a4919f28d259e18e940f1b90a36aaff8", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, qpath_res, snippet, span_lint_and_then,\n+    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, snippet, span_lint_and_then,\n };\n \n use if_chain::if_chain;\n@@ -92,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n                 } else {\n                     return;\n                 };\n-                let target_res = qpath_res(cx, &target_path, target_arg.hir_id);\n+                let target_res = cx.qpath_res(&target_path, target_arg.hir_id);\n                 if target_res == Res::Err {\n                     return;\n                 };\n@@ -221,7 +221,7 @@ fn find_stripping<'tcx>(\n                 if let ExprKind::Index(indexed, index) = &unref.kind;\n                 if let Some(higher::Range { start, end, .. }) = higher::range(index);\n                 if let ExprKind::Path(path) = &indexed.kind;\n-                if qpath_res(self.cx, path, ex.hir_id) == self.target;\n+                if self.cx.qpath_res(path, ex.hir_id) == self.target;\n                 then {\n                     match (self.strip_kind, start, end) {\n                         (StripKind::Prefix, Some(start), None) => {\n@@ -235,7 +235,7 @@ fn find_stripping<'tcx>(\n                                 if let ExprKind::Binary(Spanned { node: BinOpKind::Sub, .. }, left, right) = end.kind;\n                                 if let Some(left_arg) = len_arg(self.cx, left);\n                                 if let ExprKind::Path(left_path) = &left_arg.kind;\n-                                if qpath_res(self.cx, left_path, left_arg.hir_id) == self.target;\n+                                if self.cx.qpath_res(left_path, left_arg.hir_id) == self.target;\n                                 if eq_pattern_length(self.cx, self.pattern, right);\n                                 then {\n                                     self.results.push(ex.span);"}, {"sha": "d34f9761e26f9a0d26b29c03733217e9e5296858", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, paths, qpath_res, span_lint};\n+use crate::utils::{match_def_path, paths, span_lint};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -29,7 +29,7 @@ impl<'tcx> LateLintPass<'tcx> for MemForget {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.kind {\n             if let ExprKind::Path(ref qpath) = path_expr.kind {\n-                if let Some(def_id) = qpath_res(cx, qpath, path_expr.hir_id).opt_def_id() {\n+                if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n                     if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n                         let forgot_ty = cx.typeck_results().expr_ty(&args[0]);\n "}, {"sha": "a17c5996293e93370c0ad6c2e0f4dd79f609ce28", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1762,7 +1762,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let ty::Opaque(def_id, _) = *ret_ty.kind() {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n-                    if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n+                    if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n                         if contains_ty(projection_predicate.ty, self_ty) {\n                             return;"}, {"sha": "40b236493a3135722fe1ded68054f20ca462a7d9", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -3,7 +3,6 @@\n //! This lint is **warn** by default\n \n use crate::utils::{is_type_diagnostic_item, span_lint};\n-use rustc_ast::ast;\n use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n@@ -77,8 +76,8 @@ impl<'tcx> LateLintPass<'tcx> for Mutex {\n                         atomic_name\n                     );\n                     match *mutex_param.kind() {\n-                        ty::Uint(t) if t != ast::UintTy::Usize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n-                        ty::Int(t) if t != ast::IntTy::Isize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::Uint(t) if t != ty::UintTy::Usize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::Int(t) if t != ty::IntTy::Isize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n                         _ => span_lint(cx, MUTEX_ATOMIC, expr.span, &msg),\n                     };\n                 }"}, {"sha": "603071a5f4ac4659fef61816e436507b54fc5ada", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -221,7 +221,7 @@ where\n {\n     if let ast::ExprKind::While(_, loop_block, label)\n     | ast::ExprKind::ForLoop(_, _, loop_block, label)\n-    | ast::ExprKind::Loop(loop_block, label) = &expr.kind\n+    | ast::ExprKind::Loop(loop_block, label, ..) = &expr.kind\n     {\n         func(loop_block, label.as_ref());\n     }"}, {"sha": "54033f408714086a8c06d9f8315607a86ed16f70", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -116,13 +116,9 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n-                if let ty::PredicateKind::Atom(ty::PredicateAtom::Trait(pred, _)) = obligation.predicate.kind() {\n-                    if pred.def_id() == sized_trait {\n-                        return None;\n-                    }\n-                    Some(pred)\n-                } else {\n-                    None\n+                match obligation.predicate.kind().no_bound_vars() {\n+                    Some(ty::PredicateKind::Trait(pred, _)) if pred.def_id() != sized_trait => Some(pred),\n+                    _ => None,\n                 }\n             })\n             .collect::<Vec<_>>();"}, {"sha": "69302d695ce0a31304aadca1c8c6fa2dcdd19c1b", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{has_drop, qpath_res, snippet_opt, span_lint, span_lint_and_sugg};\n+use crate::utils::{has_drop, snippet_opt, span_lint, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n@@ -67,7 +67,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         },\n         ExprKind::Call(ref callee, ref args) => {\n             if let ExprKind::Path(ref qpath) = callee.kind {\n-                let res = qpath_res(cx, qpath, callee.hir_id);\n+                let res = cx.qpath_res(qpath, callee.hir_id);\n                 match res {\n                     Res::Def(DefKind::Struct | DefKind::Variant | DefKind::Ctor(..), ..) => {\n                         !has_drop(cx, cx.typeck_results().expr_ty(expr))\n@@ -146,7 +146,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Vec\n         },\n         ExprKind::Call(ref callee, ref args) => {\n             if let ExprKind::Path(ref qpath) = callee.kind {\n-                let res = qpath_res(cx, qpath, callee.hir_id);\n+                let res = cx.qpath_res(qpath, callee.hir_id);\n                 match res {\n                     Res::Def(DefKind::Struct | DefKind::Variant | DefKind::Ctor(..), ..)\n                         if !has_drop(cx, cx.typeck_results().expr_ty(expr)) =>"}, {"sha": "f57d753631755881da6f739021dec84a07f1ddaa", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -18,7 +18,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use rustc_typeck::hir_ty_to_ty;\n \n-use crate::utils::{in_constant, qpath_res, span_lint_and_then};\n+use crate::utils::{in_constant, span_lint_and_then};\n use if_chain::if_chain;\n \n // FIXME: this is a correctness problem but there's no suitable\n@@ -339,7 +339,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             }\n \n             // Make sure it is a const item.\n-            let item_def_id = match qpath_res(cx, qpath, expr.hir_id) {\n+            let item_def_id = match cx.qpath_res(qpath, expr.hir_id) {\n                 Res::Def(DefKind::Const | DefKind::AssocConst, did) => did,\n                 _ => return,\n             };"}, {"sha": "d5b1767e945b9ea4a81b4b9a07d5ed70d56c0cb1", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -325,7 +325,7 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n         | ExprKind::Field(ref e, _)\n         | ExprKind::AddrOf(_, _, ref e)\n         | ExprKind::Box(ref e) => check_expr(cx, e, bindings),\n-        ExprKind::Block(ref block, _) | ExprKind::Loop(ref block, _, _) => check_block(cx, block, bindings),\n+        ExprKind::Block(ref block, _) | ExprKind::Loop(ref block, ..) => check_block(cx, block, bindings),\n         // ExprKind::Call\n         // ExprKind::MethodCall\n         ExprKind::Array(v) | ExprKind::Tup(v) => {"}, {"sha": "fa508df865e48af4a01b79866769aee3395f5dc7", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, match_trait_method, paths, qpath_res, span_lint};\n+use crate::utils::{match_def_path, match_trait_method, paths, span_lint};\n use if_chain::if_chain;\n use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind};\n@@ -94,7 +94,7 @@ impl LateLintPass<'_> for ToStringInDisplay {\n             if match_trait_method(cx, expr, &paths::TO_STRING);\n             if self.in_display_impl;\n             if let ExprKind::Path(ref qpath) = args[0].kind;\n-            if let Res::Local(hir_id) = qpath_res(cx, qpath, args[0].hir_id);\n+            if let Res::Local(hir_id) = cx.qpath_res(qpath, args[0].hir_id);\n             if let Some(self_hir_id) = self.self_hir_id;\n             if hir_id == self_hir_id;\n             then {"}, {"sha": "d977cea4da50b6427653d07a59af1ade1686b46e", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -443,7 +443,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             );\n                         },\n                     ),\n-                    (ty::Int(ast::IntTy::I32) | ty::Uint(ast::UintTy::U32), &ty::Char) => {\n+                    (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) => {\n                         span_lint_and_then(\n                             cx,\n                             TRANSMUTE_INT_TO_CHAR,\n@@ -468,7 +468,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                     (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) => {\n                         if_chain! {\n                             if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n-                            if let ty::Uint(ast::UintTy::U8) = slice_ty.kind();\n+                            if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n                             if from_mutbl == to_mutbl;\n                             then {\n                                 let postfix = if *from_mutbl == Mutability::Mut {\n@@ -536,7 +536,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             }\n                         },\n                     ),\n-                    (ty::Int(ast::IntTy::I8) | ty::Uint(ast::UintTy::U8), ty::Bool) => {\n+                    (ty::Int(ty::IntTy::I8) | ty::Uint(ty::UintTy::U8), ty::Bool) => {\n                         span_lint_and_then(\n                             cx,\n                             TRANSMUTE_INT_TO_BOOL,"}, {"sha": "1b0f1e309aa2c304a680c18cb43bc5f8ae9c7f7a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -5,7 +5,7 @@ use std::cmp::Ordering;\n use std::collections::BTreeMap;\n \n use if_chain::if_chain;\n-use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n+use rustc_ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n@@ -18,7 +18,7 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::TypeFoldable;\n-use rustc_middle::ty::{self, InferTy, Ty, TyCtxt, TyS, TypeAndMut, TypeckResults};\n+use rustc_middle::ty::{self, FloatTy, InferTy, IntTy, Ty, TyCtxt, TyS, TypeAndMut, TypeckResults, UintTy};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -34,7 +34,7 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_hir_ty_cfg_dependant,\n     is_type_diagnostic_item, last_path_segment, match_def_path, match_path, meets_msrv, method_chain_args,\n-    multispan_sugg, numeric_literal::NumericLiteral, qpath_res, reindent_multiline, sext, snippet, snippet_opt,\n+    multispan_sugg, numeric_literal::NumericLiteral, reindent_multiline, sext, snippet, snippet_opt,\n     snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n     span_lint_and_then, unsext,\n };\n@@ -298,7 +298,7 @@ fn match_type_parameter(cx: &LateContext<'_>, qpath: &QPath<'_>, path: &[&str])\n             _ => None,\n         });\n         if let TyKind::Path(ref qpath) = ty.kind;\n-        if let Some(did) = qpath_res(cx, qpath, ty.hir_id).opt_def_id();\n+        if let Some(did) = cx.qpath_res(qpath, ty.hir_id).opt_def_id();\n         if match_def_path(cx, did, path);\n         then {\n             return Some(ty.span);\n@@ -365,7 +365,7 @@ impl Types {\n         match hir_ty.kind {\n             TyKind::Path(ref qpath) if !is_local => {\n                 let hir_id = hir_ty.hir_id;\n-                let res = qpath_res(cx, qpath, hir_id);\n+                let res = cx.qpath_res(qpath, hir_id);\n                 if let Some(def_id) = res.opt_def_id() {\n                     if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                         if let Some(span) = match_borrows_parameter(cx, qpath) {\n@@ -535,7 +535,7 @@ impl Types {\n                             });\n                             // ty is now _ at this point\n                             if let TyKind::Path(ref ty_qpath) = ty.kind;\n-                            let res = qpath_res(cx, ty_qpath, ty.hir_id);\n+                            let res = cx.qpath_res(ty_qpath, ty.hir_id);\n                             if let Some(def_id) = res.opt_def_id();\n                             if Some(def_id) == cx.tcx.lang_items().owned_box();\n                             // At this point, we know ty is Box<T>, now get T\n@@ -652,7 +652,7 @@ impl Types {\n         match mut_ty.ty.kind {\n             TyKind::Path(ref qpath) => {\n                 let hir_id = mut_ty.ty.hir_id;\n-                let def = qpath_res(cx, qpath, hir_id);\n+                let def = cx.qpath_res(qpath, hir_id);\n                 if_chain! {\n                     if let Some(def_id) = def.opt_def_id();\n                     if Some(def_id) == cx.tcx.lang_items().owned_box();\n@@ -739,7 +739,7 @@ fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n \n fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id: HirId) -> Option<GenericBounds<'tcx>> {\n     if_chain! {\n-        if let Some(did) = qpath_res(cx, qpath, id).opt_def_id();\n+        if let Some(did) = cx.qpath_res(qpath, id).opt_def_id();\n         if let Some(Node::GenericParam(generic_param)) = cx.tcx.hir().get_if_local(did);\n         if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n         if synthetic == Some(SyntheticTyParamKind::ImplTrait);"}, {"sha": "c6ae8b9b59837f608bdf9a531b19f6473d6abe0c", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_middle::ty::{GenericPredicates, PredicateAtom, ProjectionPredicate, TraitPredicate};\n+use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{BytePos, Span};\n \n@@ -42,7 +42,7 @@ fn get_trait_predicates_for_trait_id<'tcx>(\n     let mut preds = Vec::new();\n     for (pred, _) in generics.predicates {\n         if_chain! {\n-            if let PredicateAtom::Trait(poly_trait_pred, _) = pred.skip_binders();\n+            if let PredicateKind::Trait(poly_trait_pred, _) = pred.kind().skip_binder();\n             let trait_pred = cx.tcx.erase_late_bound_regions(ty::Binder::bind(poly_trait_pred));\n             if let Some(trait_def_id) = trait_id;\n             if trait_def_id == trait_pred.trait_ref.def_id;\n@@ -60,7 +60,7 @@ fn get_projection_pred<'tcx>(\n     pred: TraitPredicate<'tcx>,\n ) -> Option<ProjectionPredicate<'tcx>> {\n     generics.predicates.iter().find_map(|(proj_pred, _)| {\n-        if let ty::PredicateAtom::Projection(proj_pred) = proj_pred.skip_binders() {\n+        if let ty::PredicateKind::Projection(proj_pred) = proj_pred.kind().skip_binder() {\n             let projection_pred = cx.tcx.erase_late_bound_regions(ty::Binder::bind(proj_pred));\n             if projection_pred.projection_ty.substs == pred.trait_ref.substs {\n                 return Some(projection_pred);"}, {"sha": "ca60d335262b3bda975431d92c0f7ecc987dde10", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -317,7 +317,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = cast_pat;\n                 self.visit_expr(expr);\n             },\n-            ExprKind::Loop(ref body, _, desugaring) => {\n+            ExprKind::Loop(ref body, _, desugaring, _) => {\n                 let body_pat = self.next(\"body\");\n                 let des = loop_desugaring_name(desugaring);\n                 let label_pat = self.next(\"label\");"}, {"sha": "340d340d6d340bb39ad4159899b86fff760bc4a3", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -142,7 +142,7 @@ pub fn for_loop<'tcx>(\n         if let hir::ExprKind::Match(ref iterexpr, ref arms, hir::MatchSource::ForLoopDesugar) = expr.kind;\n         if let hir::ExprKind::Call(_, ref iterargs) = iterexpr.kind;\n         if iterargs.len() == 1 && arms.len() == 1 && arms[0].guard.is_none();\n-        if let hir::ExprKind::Loop(ref block, _, _) = arms[0].body.kind;\n+        if let hir::ExprKind::Loop(ref block, ..) = arms[0].body.kind;\n         if block.expr.is_none();\n         if let [ _, _, ref let_stmt, ref body ] = *block.stmts;\n         if let hir::StmtKind::Local(ref local) = let_stmt.kind;\n@@ -158,7 +158,7 @@ pub fn for_loop<'tcx>(\n /// `while cond { body }` becomes `(cond, body)`.\n pub fn while_loop<'tcx>(expr: &'tcx hir::Expr<'tcx>) -> Option<(&'tcx hir::Expr<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if_chain! {\n-        if let hir::ExprKind::Loop(hir::Block { expr: Some(expr), .. }, _, hir::LoopSource::While) = &expr.kind;\n+        if let hir::ExprKind::Loop(hir::Block { expr: Some(expr), .. }, _, hir::LoopSource::While, _) = &expr.kind;\n         if let hir::ExprKind::Match(cond, arms, hir::MatchSource::WhileDesugar) = &expr.kind;\n         if let hir::ExprKind::DropTemps(cond) = &cond.kind;\n         if let [hir::Arm { body, .. }, ..] = &arms[..];"}, {"sha": "c5870dc51248e09a433d7797d89b7a6f343eb11b", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n                 self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n             (&ExprKind::Lit(ref l), &ExprKind::Lit(ref r)) => l.node == r.node,\n-            (&ExprKind::Loop(ref lb, ref ll, ref lls), &ExprKind::Loop(ref rb, ref rl, ref rls)) => {\n+            (&ExprKind::Loop(ref lb, ref ll, ref lls, _), &ExprKind::Loop(ref rb, ref rl, ref rls, _)) => {\n                 lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.name == r.ident.name)\n             },\n             (&ExprKind::Match(ref le, ref la, ref ls), &ExprKind::Match(ref re, ref ra, ref rs)) => {\n@@ -570,7 +570,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             ExprKind::Lit(ref l) => {\n                 l.node.hash(&mut self.s);\n             },\n-            ExprKind::Loop(ref b, ref i, _) => {\n+            ExprKind::Loop(ref b, ref i, ..) => {\n                 self.hash_block(b);\n                 if let Some(i) = *i {\n                     self.hash_name(i.ident.name);"}, {"sha": "822863ca3e279d5039077bf78ac9bbbb4038a93c", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant_simple, Constant};\n use crate::utils::{\n-    is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths, qpath_res, run_lints,\n-    snippet, span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n+    is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths, run_lints, snippet,\n+    span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, NodeId};\n@@ -787,7 +787,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n \n     match &expr.kind {\n         ExprKind::AddrOf(.., expr) => return path_to_matched_type(cx, expr),\n-        ExprKind::Path(qpath) => match qpath_res(cx, qpath, expr.hir_id) {\n+        ExprKind::Path(qpath) => match cx.qpath_res(qpath, expr.hir_id) {\n             Res::Local(hir_id) => {\n                 let parent_id = cx.tcx.hir().get_parent_node(hir_id);\n                 if let Some(Node::Local(local)) = cx.tcx.hir().find(parent_id) {"}, {"sha": "d0db3a67533bc5ead8907482817ff0b193d95693", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -34,7 +34,6 @@ use std::hash::BuildHasherDefault;\n \n use if_chain::if_chain;\n use rustc_ast::ast::{self, Attribute, LitKind};\n-use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -348,19 +347,6 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<Res> {\n     Some(last.res)\n }\n \n-pub fn qpath_res(cx: &LateContext<'_>, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {\n-    match qpath {\n-        hir::QPath::Resolved(_, path) => path.res,\n-        hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => {\n-            if cx.tcx.has_typeck_results(id.owner.to_def_id()) {\n-                cx.tcx.typeck(id.owner).qpath_res(qpath, id)\n-            } else {\n-                Res::Err\n-            }\n-        },\n-    }\n-}\n-\n /// Convenience function to get the `DefId` of a trait by path.\n /// It could be a trait or trait alias.\n pub fn get_trait_def_id(cx: &LateContext<'_>, path: &[&str]) -> Option<DefId> {\n@@ -1201,27 +1187,27 @@ pub fn get_arg_name(pat: &Pat<'_>) -> Option<Symbol> {\n     }\n }\n \n-pub fn int_bits(tcx: TyCtxt<'_>, ity: ast::IntTy) -> u64 {\n-    Integer::from_attr(&tcx, attr::IntType::SignedInt(ity)).size().bits()\n+pub fn int_bits(tcx: TyCtxt<'_>, ity: ty::IntTy) -> u64 {\n+    Integer::from_int_ty(&tcx, ity).size().bits()\n }\n \n #[allow(clippy::cast_possible_wrap)]\n /// Turn a constant int byte representation into an i128\n-pub fn sext(tcx: TyCtxt<'_>, u: u128, ity: ast::IntTy) -> i128 {\n+pub fn sext(tcx: TyCtxt<'_>, u: u128, ity: ty::IntTy) -> i128 {\n     let amt = 128 - int_bits(tcx, ity);\n     ((u as i128) << amt) >> amt\n }\n \n #[allow(clippy::cast_sign_loss)]\n /// clip unused bytes\n-pub fn unsext(tcx: TyCtxt<'_>, u: i128, ity: ast::IntTy) -> u128 {\n+pub fn unsext(tcx: TyCtxt<'_>, u: i128, ity: ty::IntTy) -> u128 {\n     let amt = 128 - int_bits(tcx, ity);\n     ((u as u128) << amt) >> amt\n }\n \n /// clip unused bytes\n-pub fn clip(tcx: TyCtxt<'_>, u: u128, ity: ast::UintTy) -> u128 {\n-    let bits = Integer::from_attr(&tcx, attr::IntType::UnsignedInt(ity)).size().bits();\n+pub fn clip(tcx: TyCtxt<'_>, u: u128, ity: ty::UintTy) -> u128 {\n+    let bits = Integer::from_uint_ty(&tcx, ity).size().bits();\n     let amt = 128 - bits;\n     (u << amt) >> amt\n }\n@@ -1448,7 +1434,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n-                if let ty::PredicateAtom::Trait(trait_predicate, _) = predicate.skip_binders() {\n+                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.kind().skip_binder() {\n                     if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n                         return true;\n                     }"}, {"sha": "432cc5b59f684ddac760861f8ab4906746de5fb3", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -48,7 +48,6 @@ pub const FN_MUT: [&str; 3] = [\"core\", \"ops\", \"FnMut\"];\n pub const FN_ONCE: [&str; 3] = [\"core\", \"ops\", \"FnOnce\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"FromIterator\"];\n-pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];"}, {"sha": "a482017afeb136339277386cd0f78be46d91c3cf", "filename": "clippy_lints/src/utils/qualify_min_const_fn.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -19,18 +19,18 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>) -> McfResult {\n     loop {\n         let predicates = tcx.predicates_of(current);\n         for (predicate, _) in predicates.predicates {\n-            match predicate.skip_binders() {\n-                ty::PredicateAtom::RegionOutlives(_)\n-                | ty::PredicateAtom::TypeOutlives(_)\n-                | ty::PredicateAtom::WellFormed(_)\n-                | ty::PredicateAtom::Projection(_)\n-                | ty::PredicateAtom::ConstEvaluatable(..)\n-                | ty::PredicateAtom::ConstEquate(..)\n-                | ty::PredicateAtom::TypeWellFormedFromEnv(..) => continue,\n-                ty::PredicateAtom::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n-                ty::PredicateAtom::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n-                ty::PredicateAtom::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n-                ty::PredicateAtom::Trait(pred, _) => {\n+            match predicate.kind().skip_binder() {\n+                ty::PredicateKind::RegionOutlives(_)\n+                | ty::PredicateKind::TypeOutlives(_)\n+                | ty::PredicateKind::WellFormed(_)\n+                | ty::PredicateKind::Projection(_)\n+                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n+                ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n+                ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n+                ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n+                ty::PredicateKind::Trait(pred, _) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                         continue;\n                     }"}, {"sha": "f55d55d706587d299ae2a111a6b5ff2e6d3bed25", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-01-15\"\n+channel = \"nightly-2021-01-30\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\", \"rustfmt\"]"}, {"sha": "fc444c0bea7203a2c90084a68b3025f52ac7f771", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -9,5 +9,7 @@\n #[warn(clippy::drop_bounds)]\n #[warn(clippy::temporary_cstring_as_ptr)]\n #[warn(clippy::panic_params)]\n+#[warn(clippy::unknown_clippy_lints)]\n+#[warn(clippy::find_map)]\n \n fn main() {}"}, {"sha": "64efcd18f8891a344ada11c0be14d67a00533f81", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,76 +1,88 @@\n-error: lint `clippy::unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n+error: lint `clippy::unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n-error: lint `clippy::unstable_as_mut_slice` has been removed: ``Vec::as_mut_slice` has been stabilized in 1.7`\n+error: lint `clippy::unstable_as_mut_slice` has been removed: `Vec::as_mut_slice` has been stabilized in 1.7\n   --> $DIR/deprecated.rs:2:8\n    |\n LL | #[warn(clippy::unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::misaligned_transmute` has been removed: `this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr`\n+error: lint `clippy::misaligned_transmute` has been removed: this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\n   --> $DIR/deprecated.rs:3:8\n    |\n LL | #[warn(clippy::misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::unused_collect` has been removed: ``collect` has been marked as #[must_use] in rustc and that covers all cases of this lint`\n+error: lint `clippy::unused_collect` has been removed: `collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\n   --> $DIR/deprecated.rs:4:8\n    |\n LL | #[warn(clippy::unused_collect)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::invalid_ref` has been removed: `superseded by rustc lint `invalid_value``\n+error: lint `clippy::invalid_ref` has been removed: superseded by rustc lint `invalid_value`\n   --> $DIR/deprecated.rs:5:8\n    |\n LL | #[warn(clippy::invalid_ref)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::into_iter_on_array` has been removed: `this lint has been uplifted to rustc and is now called `array_into_iter``\n+error: lint `clippy::into_iter_on_array` has been removed: this lint has been uplifted to rustc and is now called `array_into_iter`\n   --> $DIR/deprecated.rs:6:8\n    |\n LL | #[warn(clippy::into_iter_on_array)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::unused_label` has been removed: `this lint has been uplifted to rustc and is now called `unused_labels``\n+error: lint `clippy::unused_label` has been removed: this lint has been uplifted to rustc and is now called `unused_labels`\n   --> $DIR/deprecated.rs:7:8\n    |\n LL | #[warn(clippy::unused_label)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::regex_macro` has been removed: `the regex! macro has been removed from the regex crate in 2018`\n+error: lint `clippy::regex_macro` has been removed: the regex! macro has been removed from the regex crate in 2018\n   --> $DIR/deprecated.rs:8:8\n    |\n LL | #[warn(clippy::regex_macro)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::drop_bounds` has been removed: `this lint has been uplifted to rustc and is now called `drop_bounds``\n+error: lint `clippy::drop_bounds` has been removed: this lint has been uplifted to rustc and is now called `drop_bounds`\n   --> $DIR/deprecated.rs:9:8\n    |\n LL | #[warn(clippy::drop_bounds)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::temporary_cstring_as_ptr` has been removed: `this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr``\n+error: lint `clippy::temporary_cstring_as_ptr` has been removed: this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr`\n   --> $DIR/deprecated.rs:10:8\n    |\n LL | #[warn(clippy::temporary_cstring_as_ptr)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::panic_params` has been removed: `this lint has been uplifted to rustc and is now called `panic_fmt``\n+error: lint `clippy::panic_params` has been removed: this lint has been uplifted to rustc and is now called `panic_fmt`\n   --> $DIR/deprecated.rs:11:8\n    |\n LL | #[warn(clippy::panic_params)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n+error: lint `clippy::unknown_clippy_lints` has been removed: this lint has been integrated into the `unknown_lints` rustc lint\n+  --> $DIR/deprecated.rs:12:8\n+   |\n+LL | #[warn(clippy::unknown_clippy_lints)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: lint `clippy::find_map` has been removed: this lint has been replaced by `manual_find_map`, a more specific lint\n+  --> $DIR/deprecated.rs:13:8\n+   |\n+LL | #[warn(clippy::find_map)]\n+   |        ^^^^^^^^^^^^^^^^\n+\n+error: lint `clippy::unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "b8550078c4600b7b3595f1413227a463718bf7eb", "filename": "tests/ui/deprecated_old.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/tests%2Fui%2Fdeprecated_old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/tests%2Fui%2Fdeprecated_old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated_old.stderr?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,24 +1,24 @@\n-error: lint `unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n+error: lint `unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n   --> $DIR/deprecated_old.rs:1:8\n    |\n LL | #[warn(unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n-error: lint `unstable_as_mut_slice` has been removed: ``Vec::as_mut_slice` has been stabilized in 1.7`\n+error: lint `unstable_as_mut_slice` has been removed: `Vec::as_mut_slice` has been stabilized in 1.7\n   --> $DIR/deprecated_old.rs:2:8\n    |\n LL | #[warn(unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `misaligned_transmute` has been removed: `this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr`\n+error: lint `misaligned_transmute` has been removed: this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\n   --> $DIR/deprecated_old.rs:3:8\n    |\n LL | #[warn(misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n+error: lint `unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n   --> $DIR/deprecated_old.rs:1:8\n    |\n LL | #[warn(unstable_as_slice)]"}, {"sha": "94a667e5898918d9362f7aa241ceb7f6fafd0471", "filename": "tests/ui/unknown_clippy_lints.stderr", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4db76a6bcc51fca61de6f5a41b84ad21058835dc/tests%2Fui%2Funknown_clippy_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4db76a6bcc51fca61de6f5a41b84ad21058835dc/tests%2Fui%2Funknown_clippy_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funknown_clippy_lints.stderr?ref=4db76a6bcc51fca61de6f5a41b84ad21058835dc", "patch": "@@ -1,52 +1,58 @@\n-error: unknown clippy lint: clippy::if_not_els\n+error: unknown lint: `clippy::All`\n+  --> $DIR/unknown_clippy_lints.rs:5:10\n+   |\n+LL | #![allow(clippy::All)]\n+   |          ^^^^^^^^^^^ help: did you mean: `clippy::all`\n+   |\n+   = note: `-D unknown-lints` implied by `-D warnings`\n+\n+error: unknown lint: `clippy::CMP_NAN`\n+  --> $DIR/unknown_clippy_lints.rs:6:9\n+   |\n+LL | #![warn(clippy::CMP_NAN)]\n+   |         ^^^^^^^^^^^^^^^ help: did you mean: `clippy::cmp_nan`\n+\n+error: unknown lint: `clippy::if_not_els`\n   --> $DIR/unknown_clippy_lints.rs:9:8\n    |\n LL | #[warn(clippy::if_not_els)]\n    |        ^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::if_not_else`\n-   |\n-   = note: `-D clippy::unknown-clippy-lints` implied by `-D warnings`\n \n-error: unknown clippy lint: clippy::UNNecsaRy_cAst\n+error: unknown lint: `clippy::UNNecsaRy_cAst`\n   --> $DIR/unknown_clippy_lints.rs:10:8\n    |\n LL | #[warn(clippy::UNNecsaRy_cAst)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::unnecessary_cast`\n \n-error: unknown clippy lint: clippy::useles_transute\n+error: unknown lint: `clippy::useles_transute`\n   --> $DIR/unknown_clippy_lints.rs:11:8\n    |\n LL | #[warn(clippy::useles_transute)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::useless_transmute`\n \n-error: unknown clippy lint: clippy::dead_cod\n+error: unknown lint: `clippy::dead_cod`\n   --> $DIR/unknown_clippy_lints.rs:13:8\n    |\n LL | #[warn(clippy::dead_cod)]\n    |        ^^^^^^^^^^^^^^^^ help: did you mean: `clippy::drop_copy`\n \n-error: unknown clippy lint: clippy::unused_colle\n+error: unknown lint: `clippy::unused_colle`\n   --> $DIR/unknown_clippy_lints.rs:15:8\n    |\n LL | #[warn(clippy::unused_colle)]\n    |        ^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::unused_self`\n \n-error: unknown clippy lint: clippy::const_static_lifetim\n+error: unknown lint: `clippy::const_static_lifetim`\n   --> $DIR/unknown_clippy_lints.rs:17:8\n    |\n LL | #[warn(clippy::const_static_lifetim)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::redundant_static_lifetimes`\n \n-error: unknown clippy lint: clippy::All\n+error: unknown lint: `clippy::All`\n   --> $DIR/unknown_clippy_lints.rs:5:10\n    |\n LL | #![allow(clippy::All)]\n-   |          ^^^^^^^^^^^ help: lowercase the lint name: `clippy::all`\n-\n-error: unknown clippy lint: clippy::CMP_NAN\n-  --> $DIR/unknown_clippy_lints.rs:6:9\n-   |\n-LL | #![warn(clippy::CMP_NAN)]\n-   |         ^^^^^^^^^^^^^^^ help: lowercase the lint name: `clippy::cmp_nan`\n+   |          ^^^^^^^^^^^ help: did you mean: `clippy::all`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}