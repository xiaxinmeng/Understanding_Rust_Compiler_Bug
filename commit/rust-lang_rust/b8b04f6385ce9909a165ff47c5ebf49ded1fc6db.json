{"sha": "b8b04f6385ce9909a165ff47c5ebf49ded1fc6db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YjA0ZjYzODVjZTk5MDlhMTY1ZmY0N2M1ZWJmNDlkZWQxZmM2ZGI=", "commit": {"author": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-07-11T06:23:13Z"}, "committer": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-07-13T05:51:30Z"}, "message": "Put the two halves of suggest_ampmut back together", "tree": {"sha": "fd177ccbb5f2aab247ce967278035b62a0ea7520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd177ccbb5f2aab247ce967278035b62a0ea7520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8b04f6385ce9909a165ff47c5ebf49ded1fc6db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b04f6385ce9909a165ff47c5ebf49ded1fc6db", "html_url": "https://github.com/rust-lang/rust/commit/b8b04f6385ce9909a165ff47c5ebf49ded1fc6db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8b04f6385ce9909a165ff47c5ebf49ded1fc6db/comments", "author": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd1a9fff79d906ecadcc9eab3962d84d38c7061", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd1a9fff79d906ecadcc9eab3962d84d38c7061", "html_url": "https://github.com/rust-lang/rust/commit/6fd1a9fff79d906ecadcc9eab3962d84d38c7061"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "039f43cd213f7f71b94de7b70fed8fcb8a9a5169", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b8b04f6385ce9909a165ff47c5ebf49ded1fc6db/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b04f6385ce9909a165ff47c5ebf49ded1fc6db/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=b8b04f6385ce9909a165ff47c5ebf49ded1fc6db", "patch": "@@ -1850,22 +1850,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         binding_mode: ty::BindingMode::BindByValue(_),\n                         opt_ty_info,\n                         ..\n-                    }))) => {\n-                        if let Some(x) = try_suggest_ampmut_rhs(\n-                            self.tcx, self.mir, *local,\n-                        ) {\n-                            Some(x)\n-                        } else {\n-                            Some(suggest_ampmut_type(local_decl, opt_ty_info))\n-                        }\n-                    },\n+                    }))) => Some(suggest_ampmut(\n+                        self.tcx,\n+                        self.mir,\n+                        *local,\n+                        local_decl,\n+                        opt_ty_info,\n+                    )),\n \n                     Some(ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n                         binding_mode: ty::BindingMode::BindByReference(_),\n                         ..\n-                    }))) => {\n-                        suggest_ref_mut(self.tcx, local_decl)\n-                    },\n+                    }))) => suggest_ref_mut(self.tcx, local_decl),\n \n                     Some(ClearCrossCrate::Clear) => bug!(\"saw cleared local state\"),\n \n@@ -1927,30 +1923,28 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //\n         // This implementation attempts to emulate AST-borrowck prioritization\n         // by trying (3.), then (2.) and finally falling back on (1.).\n-\n-        fn try_suggest_ampmut_rhs<'cx, 'gcx, 'tcx>(\n+        fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n             tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n             mir: &Mir<'tcx>,\n             local: Local,\n-        ) -> Option<(Span, String)> {\n+            local_decl: &mir::LocalDecl<'tcx>,\n+            opt_ty_info: Option<Span>,\n+        ) -> (Span, String) {\n             let locations = mir.find_assignments(local);\n             if locations.len() > 0 {\n                 let assignment_rhs_span = mir.source_info(locations[0]).span;\n                 let snippet = tcx.sess.codemap().span_to_snippet(assignment_rhs_span);\n                 if let Ok(src) = snippet {\n                     if src.starts_with('&') {\n                         let borrowed_expr = src[1..].to_string();\n-                        return Some((assignment_rhs_span, format!(\"&mut {}\", borrowed_expr)));\n+                        return (\n+                            assignment_rhs_span,\n+                            format!(\"&mut {}\", borrowed_expr),\n+                        );\n                     }\n                 }\n             }\n-            None\n-        }\n \n-        fn suggest_ampmut_type<'tcx>(\n-            local_decl: &mir::LocalDecl<'tcx>,\n-            opt_ty_info: Option<Span>,\n-        ) -> (Span, String) {\n             let highlight_span = match opt_ty_info {\n                 // if this is a variable binding with an explicit type,\n                 // try to highlight that for the suggestion."}]}