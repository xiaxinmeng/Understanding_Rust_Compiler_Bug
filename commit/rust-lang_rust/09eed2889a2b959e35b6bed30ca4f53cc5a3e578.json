{"sha": "09eed2889a2b959e35b6bed30ca4f53cc5a3e578", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZWVkMjg4OWEyYjk1OWUzNWI2YmVkMzBjYTRmNTNjYzVhM2U1Nzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-17T09:16:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-17T09:22:04Z"}, "message": "use to_region_vid in opaque type code\n\nNormalization can pull in named regions from the parameter\nenvironment. We need to be prepared for that in the opaque\ntypes code.", "tree": {"sha": "e57c6f860ee22de369f0ddbed98f9cde83f3b8de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57c6f860ee22de369f0ddbed98f9cde83f3b8de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09eed2889a2b959e35b6bed30ca4f53cc5a3e578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09eed2889a2b959e35b6bed30ca4f53cc5a3e578", "html_url": "https://github.com/rust-lang/rust/commit/09eed2889a2b959e35b6bed30ca4f53cc5a3e578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09eed2889a2b959e35b6bed30ca4f53cc5a3e578/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "html_url": "https://github.com/rust-lang/rust/commit/f30ee6508d3cbd385afc61a5b5993bdd50a849ae"}], "stats": {"total": 46, "additions": 13, "deletions": 33}, "files": [{"sha": "5a334ed556d0106f5992c7c7a7746e5241d7b10f", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/opaque_types.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/09eed2889a2b959e35b6bed30ca4f53cc5a3e578/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09eed2889a2b959e35b6bed30ca4f53cc5a3e578/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs?ref=09eed2889a2b959e35b6bed30ca4f53cc5a3e578", "patch": "@@ -60,33 +60,17 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 debug!(?concrete_type, ?substs);\n \n                 let mut subst_regions = vec![self.universal_regions.fr_static];\n-                let universal_substs =\n-                    infcx.tcx.fold_regions(substs, &mut false, |region, _| match *region {\n-                        ty::ReVar(vid) => {\n-                            subst_regions.push(vid);\n-                            self.definitions[vid].external_name.unwrap_or_else(|| {\n-                                infcx.tcx.sess.delay_span_bug(\n-                                    span,\n-                                    \"opaque type with non-universal region substs\",\n-                                );\n-                                infcx.tcx.lifetimes.re_static\n-                            })\n-                        }\n-                        // We don't fold regions in the predicates of opaque\n-                        // types to `ReVar`s. This means that in a case like\n-                        //\n-                        // fn f<'a: 'a>() -> impl Iterator<Item = impl Sized>\n-                        //\n-                        // The inner opaque type has `'static` in its substs.\n-                        ty::ReStatic => region,\n-                        _ => {\n-                            infcx.tcx.sess.delay_span_bug(\n-                                span,\n-                                &format!(\"unexpected concrete region in borrowck: {:?}\", region),\n-                            );\n-                            region\n-                        }\n-                    });\n+                let universal_substs = infcx.tcx.fold_regions(substs, &mut false, |region, _| {\n+                    let vid = self.universal_regions.to_region_vid(region);\n+                    subst_regions.push(vid);\n+                    self.definitions[vid].external_name.unwrap_or_else(|| {\n+                        infcx\n+                            .tcx\n+                            .sess\n+                            .delay_span_bug(span, \"opaque type with non-universal region substs\");\n+                        infcx.tcx.lifetimes.re_static\n+                    })\n+                });\n \n                 subst_regions.sort();\n                 subst_regions.dedup();"}, {"sha": "beee31812563ed4d536ea5abd4b58fb81222a767", "filename": "compiler/rustc_mir/src/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09eed2889a2b959e35b6bed30ca4f53cc5a3e578/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09eed2889a2b959e35b6bed30ca4f53cc5a3e578/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=09eed2889a2b959e35b6bed30ca4f53cc5a3e578", "patch": "@@ -235,7 +235,6 @@ struct UniversalRegionRelationsBuilder<'this, 'tcx> {\n \n impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n     crate fn create(mut self) -> CreateResult<'tcx> {\n-        let tcx = self.infcx.tcx;\n         let unnormalized_input_output_tys = self\n             .universal_regions\n             .unnormalized_input_tys\n@@ -267,9 +266,6 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                             .delay_span_bug(DUMMY_SP, &format!(\"failed to normalize {:?}\", ty));\n                         (self.infcx.tcx.ty_error(), None)\n                     });\n-                // We need to replace bound regions in the substs of associated types (parent substs, not GATs)\n-                // with inference vars, see issue #78450\n-                let ty = self.universal_regions.indices.fold_to_region_vids(tcx, ty);\n                 let constraints2 = self.add_implied_bounds(ty);\n                 normalized_inputs_and_output.push(ty);\n                 constraints1.into_iter().chain(constraints2)"}, {"sha": "c2ac1e289ce4e1d1a0451600f3bd9434a73b9afb", "filename": "compiler/rustc_mir/src/borrow_check/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09eed2889a2b959e35b6bed30ca4f53cc5a3e578/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09eed2889a2b959e35b6bed30ca4f53cc5a3e578/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs?ref=09eed2889a2b959e35b6bed30ca4f53cc5a3e578", "patch": "@@ -30,7 +30,7 @@ use crate::borrow_check::nll::ToRegionVid;\n \n #[derive(Debug)]\n pub struct UniversalRegions<'tcx> {\n-    pub(crate) indices: UniversalRegionIndices<'tcx>,\n+    indices: UniversalRegionIndices<'tcx>,\n \n     /// The vid assigned to `'static`\n     pub fr_static: RegionVid,\n@@ -162,7 +162,7 @@ impl<'tcx> DefiningTy<'tcx> {\n }\n \n #[derive(Debug)]\n-pub(crate) struct UniversalRegionIndices<'tcx> {\n+struct UniversalRegionIndices<'tcx> {\n     /// For those regions that may appear in the parameter environment\n     /// ('static and early-bound regions), we maintain a map from the\n     /// `ty::Region` to the internal `RegionVid` we are using. This is"}]}