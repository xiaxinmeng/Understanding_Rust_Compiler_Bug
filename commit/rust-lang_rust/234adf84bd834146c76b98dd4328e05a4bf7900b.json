{"sha": "234adf84bd834146c76b98dd4328e05a4bf7900b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNGFkZjg0YmQ4MzQxNDZjNzZiOThkZDQzMjhlMDVhNGJmNzkwMGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-17T02:29:02Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-17T02:29:02Z"}, "message": "Handle more string addition cases with appropriate suggestions", "tree": {"sha": "7ad4d13f98ee989ca4a135ee03664ffcea95f0cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad4d13f98ee989ca4a135ee03664ffcea95f0cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/234adf84bd834146c76b98dd4328e05a4bf7900b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/234adf84bd834146c76b98dd4328e05a4bf7900b", "html_url": "https://github.com/rust-lang/rust/commit/234adf84bd834146c76b98dd4328e05a4bf7900b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/234adf84bd834146c76b98dd4328e05a4bf7900b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "html_url": "https://github.com/rust-lang/rust/commit/1962adea6ad9b992516ae56ad7f8c5bc33b951cb"}], "stats": {"total": 227, "additions": 209, "deletions": 18}, "files": [{"sha": "1913850c94c7e8b381fe06e0057e62956d071424", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/234adf84bd834146c76b98dd4328e05a4bf7900b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234adf84bd834146c76b98dd4328e05a4bf7900b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=234adf84bd834146c76b98dd4328e05a4bf7900b", "patch": "@@ -502,6 +502,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         false\n     }\n \n+    /// Provide actionable suggestions when trying to add two strings with incorrect types,\n+    /// like `&str + &str`, `String + String` and `&str + &String`.\n+    ///\n+    /// If this function returns `true` it means a note was printed, so we don't need\n+    /// to print the normal \"implementation of `std::ops::Add` might be missing\" note\n     fn check_str_addition(\n         &self,\n         expr: &'gcx hir::Expr,\n@@ -514,33 +519,57 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         op: hir::BinOp,\n     ) -> bool {\n         let source_map = self.tcx.sess.source_map();\n+        let remove_borrow_msg = \"String concatenation appends the string on the right to the \\\n+                                 string on the left and may require reallocation. This \\\n+                                 requires ownership of the string on the left\";\n+\n         let msg = \"`to_owned()` can be used to create an owned `String` \\\n                    from a string reference. String concatenation \\\n                    appends the string on the right to the string \\\n                    on the left and may require reallocation. This \\\n                    requires ownership of the string on the left\";\n-        // If this function returns true it means a note was printed, so we don't need\n-        // to print the normal \"implementation of `std::ops::Add` might be missing\" note\n+        debug!(\"check_str_addition: {:?} + {:?}\", lhs_ty, rhs_ty);\n         match (&lhs_ty.sty, &rhs_ty.sty) {\n-            (&Ref(_, l_ty, _), &Ref(_, r_ty, _))\n-            if l_ty.sty == Str && r_ty.sty == Str => {\n+            (&Ref(_, l_ty, _), &Ref(_, r_ty, _)) // &str or &String + &str, &String or &&str\n+            if (l_ty.sty == Str || &format!(\"{:?}\", l_ty) == \"std::string::String\") && (\n+                    r_ty.sty == Str ||\n+                    &format!(\"{:?}\", r_ty) == \"std::string::String\" ||\n+                    &format!(\"{:?}\", rhs_ty) == \"&&str\"\n+                ) =>\n+            {\n                 if !is_assign {\n-                    err.span_label(op.span,\n-                                   \"`+` can't be used to concatenate two `&str` strings\");\n+                    err.span_label(\n+                        op.span,\n+                        \"`+` can't be used to concatenate two `&str` strings\",\n+                    );\n                     match source_map.span_to_snippet(lhs_expr.span) {\n-                        Ok(lstring) => err.span_suggestion(\n-                            lhs_expr.span,\n-                            msg,\n-                            format!(\"{}.to_owned()\", lstring),\n-                            Applicability::MachineApplicable,\n-                        ),\n+                        Ok(lstring) => {\n+                            err.span_suggestion(\n+                                lhs_expr.span,\n+                                if lstring.starts_with(\"&\") {\n+                                    remove_borrow_msg\n+                                } else {\n+                                    msg\n+                                },\n+                                if lstring.starts_with(\"&\") {\n+                                    // let a = String::new();\n+                                    // let _ = &a + \"bar\";\n+                                    format!(\"{}\", &lstring[1..])\n+                                } else {\n+                                    format!(\"{}.to_owned()\", lstring)\n+                                },\n+                                Applicability::MachineApplicable,\n+                            )\n+                        }\n                         _ => err.help(msg),\n                     };\n                 }\n                 true\n             }\n-            (&Ref(_, l_ty, _), &Adt(..))\n-            if l_ty.sty == Str && &format!(\"{:?}\", rhs_ty) == \"std::string::String\" => {\n+            (&Ref(_, l_ty, _), &Adt(..)) // Handle `&str` & `&String` + `String`\n+            if (l_ty.sty == Str || &format!(\"{:?}\", l_ty) == \"std::string::String\") &&\n+                &format!(\"{:?}\", rhs_ty) == \"std::string::String\" =>\n+            {\n                 err.span_label(expr.span,\n                     \"`+` can't be used to concatenate a `&str` with a `String`\");\n                 match ("}, {"sha": "a3b1d1d81799fce76716f160f2cd95b64ebcfc80", "filename": "src/test/ui/span/issue-39018.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/234adf84bd834146c76b98dd4328e05a4bf7900b/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234adf84bd834146c76b98dd4328e05a4bf7900b/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs?ref=234adf84bd834146c76b98dd4328e05a4bf7900b", "patch": "@@ -16,3 +16,23 @@ enum World {\n     Hello,\n     Goodbye,\n }\n+\n+fn foo() {\n+    let a = String::new();\n+    let b = String::new();\n+    let c = \"\";\n+    let d = \"\";\n+    let e = &a;\n+    let _ = &a + &b; //~ ERROR binary operation\n+    let _ = &a + b; //~ ERROR binary operation\n+    let _ = a + &b; // ok\n+    let _ = a + b; //~ ERROR mismatched types\n+    let _ = e + b; //~ ERROR binary operation\n+    let _ = e + &b; //~ ERROR binary operation\n+    let _ = e + d; //~ ERROR binary operation\n+    let _ = e + &d; //~ ERROR binary operation\n+    let _ = &c + &d; //~ ERROR binary operation\n+    let _ = &c + d; //~ ERROR binary operation\n+    let _ = c + &d; //~ ERROR binary operation\n+    let _ = c + d; //~ ERROR binary operation\n+}"}, {"sha": "2f48abcaf33397dc0c8216476cab39f71499425d", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 141, "deletions": 2, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/234adf84bd834146c76b98dd4328e05a4bf7900b/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/234adf84bd834146c76b98dd4328e05a4bf7900b/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=234adf84bd834146c76b98dd4328e05a4bf7900b", "patch": "@@ -35,6 +35,145 @@ help: `to_owned()` can be used to create an owned `String` from a string referen\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:26:16\n+   |\n+LL |     let _ = &a + &b;\n+   |             -- ^ -- &std::string::String\n+   |             |  |\n+   |             |  `+` can't be used to concatenate two `&str` strings\n+   |             &std::string::String\n+help: String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = a + &b;\n+   |             ^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:27:16\n+   |\n+LL |     let _ = &a + b;\n+   |             ---^--\n+   |             |    |\n+   |             |    std::string::String\n+   |             &std::string::String\n+   |             `+` can't be used to concatenate a `&str` with a `String`\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = &a.to_owned() + &b;\n+   |             ^^^^^^^^^^^^^   ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-39018.rs:29:17\n+   |\n+LL |     let _ = a + b;\n+   |                 ^\n+   |                 |\n+   |                 expected &str, found struct `std::string::String`\n+   |                 help: consider borrowing here: `&b`\n+   |\n+   = note: expected type `&str`\n+              found type `std::string::String`\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:30:15\n+   |\n+LL |     let _ = e + b;\n+   |             --^--\n+   |             |   |\n+   |             |   std::string::String\n+   |             &std::string::String\n+   |             `+` can't be used to concatenate a `&str` with a `String`\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = e.to_owned() + &b;\n+   |             ^^^^^^^^^^^^   ^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:31:15\n+   |\n+LL |     let _ = e + &b;\n+   |             - ^ -- &std::string::String\n+   |             | |\n+   |             | `+` can't be used to concatenate two `&str` strings\n+   |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = e.to_owned() + &b;\n+   |             ^^^^^^^^^^^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:32:15\n+   |\n+LL |     let _ = e + d;\n+   |             - ^ - &str\n+   |             | |\n+   |             | `+` can't be used to concatenate two `&str` strings\n+   |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = e.to_owned() + d;\n+   |             ^^^^^^^^^^^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:33:15\n+   |\n+LL |     let _ = e + &d;\n+   |             - ^ -- &&str\n+   |             | |\n+   |             | `+` can't be used to concatenate two `&str` strings\n+   |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = e.to_owned() + &d;\n+   |             ^^^^^^^^^^^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&&str`\n+  --> $DIR/issue-39018.rs:34:16\n+   |\n+LL |     let _ = &c + &d;\n+   |             -- ^ -- &&str\n+   |             |\n+   |             &&str\n+   |\n+   = note: an implementation of `std::ops::Add` might be missing for `&&str`\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&&str`\n+  --> $DIR/issue-39018.rs:35:16\n+   |\n+LL |     let _ = &c + d;\n+   |             -- ^ - &str\n+   |             |\n+   |             &&str\n+   |\n+   = note: an implementation of `std::ops::Add` might be missing for `&&str`\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&str`\n+  --> $DIR/issue-39018.rs:36:15\n+   |\n+LL |     let _ = c + &d;\n+   |             - ^ -- &&str\n+   |             | |\n+   |             | `+` can't be used to concatenate two `&str` strings\n+   |             &str\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = c.to_owned() + &d;\n+   |             ^^^^^^^^^^^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&str`\n+  --> $DIR/issue-39018.rs:37:15\n+   |\n+LL |     let _ = c + d;\n+   |             - ^ - &str\n+   |             | |\n+   |             | `+` can't be used to concatenate two `&str` strings\n+   |             &str\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = c.to_owned() + d;\n+   |             ^^^^^^^^^^^^\n+\n+error: aborting due to 14 previous errors\n \n-For more information about this error, try `rustc --explain E0369`.\n+Some errors have detailed explanations: E0308, E0369.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "17d9475b9c07db2f5aca9cac7956feee13dee934", "filename": "src/test/ui/str/str-concat-on-double-ref.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/234adf84bd834146c76b98dd4328e05a4bf7900b/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/234adf84bd834146c76b98dd4328e05a4bf7900b/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr?ref=234adf84bd834146c76b98dd4328e05a4bf7900b", "patch": "@@ -3,10 +3,13 @@ error[E0369]: binary operation `+` cannot be applied to type `&std::string::Stri\n    |\n LL |     let c = a + b;\n    |             - ^ - &str\n-   |             |\n+   |             | |\n+   |             | `+` can't be used to concatenate two `&str` strings\n    |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-   = note: an implementation of `std::ops::Add` might be missing for `&std::string::String`\n+LL |     let c = a.to_owned() + b;\n+   |             ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}