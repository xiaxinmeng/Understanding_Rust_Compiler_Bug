{"sha": "328be5721ad0d53d6d296fec08fbcc569634ecf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyOGJlNTcyMWFkMGQ1M2Q2ZDI5NmZlYzA4ZmJjYzU2OTYzNGVjZjc=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-14T12:49:32Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-22T20:47:31Z"}, "message": "remove SearchScope", "tree": {"sha": "9799541613d71f0e4dbd61628bcb10e2636ed127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9799541613d71f0e4dbd61628bcb10e2636ed127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/328be5721ad0d53d6d296fec08fbcc569634ecf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/328be5721ad0d53d6d296fec08fbcc569634ecf7", "html_url": "https://github.com/rust-lang/rust/commit/328be5721ad0d53d6d296fec08fbcc569634ecf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/328be5721ad0d53d6d296fec08fbcc569634ecf7/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "html_url": "https://github.com/rust-lang/rust/commit/88ff88d3189de9dd9b0d88bdda3da769254c2b8e"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "0f1ac57fc161ee01d88b40bf2ff71f1732a27279", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/328be5721ad0d53d6d296fec08fbcc569634ecf7/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/328be5721ad0d53d6d296fec08fbcc569634ecf7/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=328be5721ad0d53d6d296fec08fbcc569634ecf7", "patch": "@@ -99,7 +99,7 @@ fn find_name<'a>(\n \n fn process_definition(db: &RootDatabase, def: NameDefinition, name: String) -> Vec<FileRange> {\n     let pat = name.as_str();\n-    let scope = def.scope(db).files;\n+    let scope = def.search_scope(db);\n     let mut refs = vec![];\n \n     let is_match = |file_id: FileId, name_ref: &ast::NameRef| -> bool {"}, {"sha": "dfea18a196bb10c72171e97697a45042f8c344a8", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/328be5721ad0d53d6d296fec08fbcc569634ecf7/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/328be5721ad0d53d6d296fec08fbcc569634ecf7/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=328be5721ad0d53d6d296fec08fbcc569634ecf7", "patch": "@@ -8,12 +8,8 @@ use crate::db::RootDatabase;\n \n use super::{NameDefinition, NameKind};\n \n-pub(crate) struct SearchScope {\n-    pub files: Vec<(FileId, Option<TextRange>)>,\n-}\n-\n impl NameDefinition {\n-    pub(crate) fn scope(&self, db: &RootDatabase) -> SearchScope {\n+    pub(crate) fn search_scope(&self, db: &RootDatabase) -> Vec<(FileId, Option<TextRange>)> {\n         let module_src = self.container.definition_source(db);\n         let file_id = module_src.file_id.original_file(db);\n \n@@ -23,7 +19,7 @@ impl NameDefinition {\n                 DefWithBody::Const(c) => c.source(db).ast.syntax().text_range(),\n                 DefWithBody::Static(s) => s.source(db).ast.syntax().text_range(),\n             };\n-            return SearchScope { files: vec![(file_id, Some(range))] };\n+            return vec![(file_id, Some(range))];\n         }\n \n         if let Some(ref vis) = self.visibility {\n@@ -32,7 +28,7 @@ impl NameDefinition {\n             let mut files = source_root.walk().map(|id| (id.into(), None)).collect::<Vec<_>>();\n \n             if vis.syntax().to_string().as_str() == \"pub(crate)\" {\n-                return SearchScope { files };\n+                return files;\n             }\n             if vis.syntax().to_string().as_str() == \"pub\" {\n                 let krate = self.container.krate(db).unwrap();\n@@ -49,7 +45,7 @@ impl NameDefinition {\n                     }\n                 }\n \n-                return SearchScope { files };\n+                return files;\n             }\n             // FIXME: \"pub(super)\", \"pub(in path)\"\n         }\n@@ -58,6 +54,6 @@ impl NameDefinition {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };\n-        SearchScope { files: vec![(file_id, range)] }\n+        vec![(file_id, range)]\n     }\n }"}]}