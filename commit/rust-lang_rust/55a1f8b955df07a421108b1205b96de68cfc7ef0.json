{"sha": "55a1f8b955df07a421108b1205b96de68cfc7ef0", "node_id": "C_kwDOAAsO6NoAKDU1YTFmOGI5NTVkZjA3YTQyMTEwOGIxMjA1Yjk2ZGU2OGNmYzdlZjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-23T00:09:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-23T00:09:41Z"}, "message": "Rollup merge of #91122 - dtolnay:not, r=m-ou-se\n\nimpl Not for !\n\nThe lack of this impl caused trouble for me in some degenerate cases of macro-generated code of the form `if !$cond {...}`, even without `feature(never_type)` on a stable compiler. Namely if `$cond` contains a `return` or `break` or similar diverging expression, which would otherwise be perfectly legal in boolean position, the code previously failed to compile with:\n\n```console\nerror[E0600]: cannot apply unary operator `!` to type `!`\n   --> library/core/tests/ops.rs:239:8\n    |\n239 |     if !return () {}\n    |        ^^^^^^^^^^ cannot apply unary operator `!`\n```", "tree": {"sha": "a029b3ad959e733c0e7928f36f882acac7a28bf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a029b3ad959e733c0e7928f36f882acac7a28bf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55a1f8b955df07a421108b1205b96de68cfc7ef0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7JzFCRBK7hj4Ov3rIwAA01sIAKHyYUH6lu4ihPgdBebq/WIa\n0R0R9byDPERp/DXml2K8suby8dxgY04EFNUu8Y+6FpgACAnfWId5J3Lmi36Fl9aZ\ndZQmmfyOlzA386dpN0n9jn/ujY6sj3oa4skFEDBHFij7IBgaTPJ0jVgz8w9+50WU\nugJkDBwEp61VKbnNs/i8qydPrVMJLb0ijYjQnfkwbBq+d89McgsVBdTFHf4+c9dk\nPMoKurGE2/G7is1aldHVejJHO2jrWI76q4v52qoVE8hFbi2Jfpma8Wfuv4gq941N\nTsYln2itYGmvOiu48OgPATUxcJRzlQZL3dhcOFZZ4iucQzwC6IdbaAeExgxKURI=\n=3nGx\n-----END PGP SIGNATURE-----\n", "payload": "tree a029b3ad959e733c0e7928f36f882acac7a28bf3\nparent 59d9ad98b66afdfa2d9e636743dfd323321e5f49\nparent 3136c5f752837ce48d2e6cf1cc643929d294cfe0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642896581 +0100\ncommitter GitHub <noreply@github.com> 1642896581 +0100\n\nRollup merge of #91122 - dtolnay:not, r=m-ou-se\n\nimpl Not for !\n\nThe lack of this impl caused trouble for me in some degenerate cases of macro-generated code of the form `if !$cond {...}`, even without `feature(never_type)` on a stable compiler. Namely if `$cond` contains a `return` or `break` or similar diverging expression, which would otherwise be perfectly legal in boolean position, the code previously failed to compile with:\n\n```console\nerror[E0600]: cannot apply unary operator `!` to type `!`\n   --> library/core/tests/ops.rs:239:8\n    |\n239 |     if !return () {}\n    |        ^^^^^^^^^^ cannot apply unary operator `!`\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55a1f8b955df07a421108b1205b96de68cfc7ef0", "html_url": "https://github.com/rust-lang/rust/commit/55a1f8b955df07a421108b1205b96de68cfc7ef0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55a1f8b955df07a421108b1205b96de68cfc7ef0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d9ad98b66afdfa2d9e636743dfd323321e5f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/59d9ad98b66afdfa2d9e636743dfd323321e5f49", "html_url": "https://github.com/rust-lang/rust/commit/59d9ad98b66afdfa2d9e636743dfd323321e5f49"}, {"sha": "3136c5f752837ce48d2e6cf1cc643929d294cfe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3136c5f752837ce48d2e6cf1cc643929d294cfe0", "html_url": "https://github.com/rust-lang/rust/commit/3136c5f752837ce48d2e6cf1cc643929d294cfe0"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "7c664226fc2566d88a8ef47d431e10f1496a49cf", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55a1f8b955df07a421108b1205b96de68cfc7ef0/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a1f8b955df07a421108b1205b96de68cfc7ef0/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=55a1f8b955df07a421108b1205b96de68cfc7ef0", "patch": "@@ -68,6 +68,17 @@ macro_rules! not_impl {\n \n not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n+#[stable(feature = \"not_never\", since = \"1.60.0\")]\n+#[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+impl const Not for ! {\n+    type Output = !;\n+\n+    #[inline]\n+    fn not(self) -> ! {\n+        match self {}\n+    }\n+}\n+\n /// The bitwise AND operator `&`.\n ///\n /// Note that `Rhs` is `Self` by default, but this is not mandatory."}, {"sha": "0c81cba35b3dfac7e66b92353bd1c375e5654761", "filename": "library/core/tests/ops.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55a1f8b955df07a421108b1205b96de68cfc7ef0/library%2Fcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a1f8b955df07a421108b1205b96de68cfc7ef0/library%2Fcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fops.rs?ref=55a1f8b955df07a421108b1205b96de68cfc7ef0", "patch": "@@ -232,3 +232,9 @@ fn deref_on_ref() {\n     let y = deref(&mut x);\n     assert_eq!(y, 4);\n }\n+\n+#[test]\n+#[allow(unreachable_code)]\n+fn test_not_never() {\n+    if !return () {}\n+}"}, {"sha": "190c7447dccbe3ffaa1d7453165227da4d3c6406", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55a1f8b955df07a421108b1205b96de68cfc7ef0/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a1f8b955df07a421108b1205b96de68cfc7ef0/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=55a1f8b955df07a421108b1205b96de68cfc7ef0", "patch": "@@ -5,8 +5,8 @@\n #![deny(unreachable_code)]\n \n fn foo() {\n-    let x: ! = ! { return; }; //~ ERROR unreachable\n-    //~| ERROR cannot apply unary operator `!` to type `!`\n+    let x: ! = * { return; }; //~ ERROR unreachable\n+    //~| ERROR type `!` cannot be dereferenced\n }\n \n fn main() { }"}, {"sha": "0a763087c6f13c6cdd2b9f52abe76ad8d9a2f2cd", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55a1f8b955df07a421108b1205b96de68cfc7ef0/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55a1f8b955df07a421108b1205b96de68cfc7ef0/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=55a1f8b955df07a421108b1205b96de68cfc7ef0", "patch": "@@ -1,13 +1,13 @@\n-error[E0600]: cannot apply unary operator `!` to type `!`\n+error[E0614]: type `!` cannot be dereferenced\n   --> $DIR/expr_unary.rs:8:16\n    |\n-LL |     let x: ! = ! { return; };\n-   |                ^^^^^^^^^^^^^ cannot apply unary operator `!`\n+LL |     let x: ! = * { return; };\n+   |                ^^^^^^^^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_unary.rs:8:16\n    |\n-LL |     let x: ! = ! { return; };\n+LL |     let x: ! = * { return; };\n    |                ^^^^------^^^\n    |                |   |\n    |                |   any code following this expression is unreachable\n@@ -21,4 +21,4 @@ LL | #![deny(unreachable_code)]\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0600`.\n+For more information about this error, try `rustc --explain E0614`."}]}