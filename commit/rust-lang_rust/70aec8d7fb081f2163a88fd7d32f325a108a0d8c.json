{"sha": "70aec8d7fb081f2163a88fd7d32f325a108a0d8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYWVjOGQ3ZmIwODFmMjE2M2E4OGZkN2QzMmYzMjVhMTA4YTBkOGM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-23T18:45:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-23T18:45:40Z"}, "message": "Rollup merge of #87976 - estebank:fix-suggestion-span-coloring, r=m-ou-se\n\nAccount for tabs when highlighting multiline code suggestions\n\nAddress `'\\t'` case in #87972.\n\nBefore:\n\n![Screen Shot 2021-08-12 at 8 52 27 AM](https://user-images.githubusercontent.com/1606434/129228214-e5cfd203-9aa8-41c7-acd9-ce255ef8a21e.png)\n\nAfter:\n\n![Screen Shot 2021-08-12 at 8 52 15 AM](https://user-images.githubusercontent.com/1606434/129228236-57c951fc-c8cf-4901-989f-b9b5aa5eebca.png)", "tree": {"sha": "e78a83c1a85c61705f8e79b9214d18d76df07f1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e78a83c1a85c61705f8e79b9214d18d76df07f1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70aec8d7fb081f2163a88fd7d32f325a108a0d8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhI+zVCRBK7hj4Ov3rIwAAMZQIAA8aaDsaf4RWR+GyU9GMq3V/\nC0ZzbNWmllmDoqX1jXuyXkzAQJnSTO08HuaL7CC6KBv5aYsp/YPu1D2X2xP0fhtM\nRnSfceGzjwRCSZtupQ7b8/tS4P0OPhOQPFH4yo6JDXTd5ey8xHLIwkw9B82Tlmky\nkHmOBX2riC0AgqVVs1vD8clnpRk1b0x7zbYXDdv8EoHgE+UyKdSiht0KsKSWOrCv\n5ONjnVjlJm2BrKrV/LOHzTqQPjDeqEzQ2LloZ+zPgHmTF1+LU6x1DBlIehkUendF\nPsbz2vwB7yOCrUQ+gwtG8yiaCZzpxL2hENUSbjtny5acK6OMnLGrh5cqdY8KiZI=\n=U5UY\n-----END PGP SIGNATURE-----\n", "payload": "tree e78a83c1a85c61705f8e79b9214d18d76df07f1d\nparent 52c881ff5240bf0f09557a3c100f40704b5db836\nparent 955e913612648056853b4021a5d9046775538fd7\nauthor Mara Bos <m-ou.se@m-ou.se> 1629744340 +0200\ncommitter GitHub <noreply@github.com> 1629744340 +0200\n\nRollup merge of #87976 - estebank:fix-suggestion-span-coloring, r=m-ou-se\n\nAccount for tabs when highlighting multiline code suggestions\n\nAddress `'\\t'` case in #87972.\n\nBefore:\n\n![Screen Shot 2021-08-12 at 8 52 27 AM](https://user-images.githubusercontent.com/1606434/129228214-e5cfd203-9aa8-41c7-acd9-ce255ef8a21e.png)\n\nAfter:\n\n![Screen Shot 2021-08-12 at 8 52 15 AM](https://user-images.githubusercontent.com/1606434/129228236-57c951fc-c8cf-4901-989f-b9b5aa5eebca.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70aec8d7fb081f2163a88fd7d32f325a108a0d8c", "html_url": "https://github.com/rust-lang/rust/commit/70aec8d7fb081f2163a88fd7d32f325a108a0d8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70aec8d7fb081f2163a88fd7d32f325a108a0d8c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c881ff5240bf0f09557a3c100f40704b5db836", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c881ff5240bf0f09557a3c100f40704b5db836", "html_url": "https://github.com/rust-lang/rust/commit/52c881ff5240bf0f09557a3c100f40704b5db836"}, {"sha": "955e913612648056853b4021a5d9046775538fd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/955e913612648056853b4021a5d9046775538fd7", "html_url": "https://github.com/rust-lang/rust/commit/955e913612648056853b4021a5d9046775538fd7"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "25777f4133b94e952176c431190252780eefd0f2", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/70aec8d7fb081f2163a88fd7d32f325a108a0d8c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70aec8d7fb081f2163a88fd7d32f325a108a0d8c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=70aec8d7fb081f2163a88fd7d32f325a108a0d8c", "patch": "@@ -1623,7 +1623,7 @@ impl EmitterWriter {\n             let line_start = sm.lookup_char_pos(parts[0].span.lo()).line;\n             draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);\n             let mut lines = complete.lines();\n-            for (line_pos, (line, parts)) in\n+            for (line_pos, (line, highlight_parts)) in\n                 lines.by_ref().zip(highlights).take(MAX_SUGGESTION_HIGHLIGHT_LINES).enumerate()\n             {\n                 // Print the span column to avoid confusion\n@@ -1658,7 +1658,7 @@ impl EmitterWriter {\n                     );\n                     buffer.puts(row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n                 } else if is_multiline {\n-                    match &parts[..] {\n+                    match &highlight_parts[..] {\n                         [SubstitutionHighlight { start: 0, end }] if *end == line.len() => {\n                             buffer.puts(row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n                         }\n@@ -1676,16 +1676,24 @@ impl EmitterWriter {\n                 // print the suggestion\n                 buffer.append(row_num, &replace_tabs(line), Style::NoStyle);\n \n-                if is_multiline {\n-                    for SubstitutionHighlight { start, end } in parts {\n-                        buffer.set_style_range(\n-                            row_num,\n-                            max_line_num_len + 3 + start,\n-                            max_line_num_len + 3 + end,\n-                            Style::Addition,\n-                            true,\n-                        );\n-                    }\n+                // Colorize addition/replacements with green.\n+                for &SubstitutionHighlight { start, end } in highlight_parts {\n+                    // Account for tabs when highlighting (#87972).\n+                    let tabs: usize = line\n+                        .chars()\n+                        .take(start)\n+                        .map(|ch| match ch {\n+                            '\\t' => 3,\n+                            _ => 0,\n+                        })\n+                        .sum();\n+                    buffer.set_style_range(\n+                        row_num,\n+                        max_line_num_len + 3 + start + tabs,\n+                        max_line_num_len + 3 + end + tabs,\n+                        Style::Addition,\n+                        true,\n+                    );\n                 }\n                 row_num += 1;\n             }\n@@ -1723,13 +1731,6 @@ impl EmitterWriter {\n                     assert!(underline_start >= 0 && underline_end >= 0);\n                     let padding: usize = max_line_num_len + 3;\n                     for p in underline_start..underline_end {\n-                        // Colorize addition/replacements with green.\n-                        buffer.set_style(\n-                            row_num - 1,\n-                            (padding as isize + p) as usize,\n-                            Style::Addition,\n-                            true,\n-                        );\n                         if !show_diff {\n                             // If this is a replacement, underline with `^`, if this is an addition\n                             // underline with `+`."}, {"sha": "a48d4fe8bb55adb670f0b8286a0dbdf864b27328", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/70aec8d7fb081f2163a88fd7d32f325a108a0d8c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70aec8d7fb081f2163a88fd7d32f325a108a0d8c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=70aec8d7fb081f2163a88fd7d32f325a108a0d8c", "patch": "@@ -283,16 +283,21 @@ impl CodeSuggestion {\n                 let mut buf = String::new();\n \n                 let mut line_highlight = vec![];\n+                // We need to keep track of the difference between the existing code and the added\n+                // or deleted code in order to point at the correct column *after* substitution.\n+                let mut acc = 0;\n                 for part in &substitution.parts {\n                     let cur_lo = sm.lookup_char_pos(part.span.lo());\n                     if prev_hi.line == cur_lo.line {\n                         let mut count =\n                             push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, Some(&cur_lo));\n                         while count > 0 {\n                             highlights.push(std::mem::take(&mut line_highlight));\n+                            acc = 0;\n                             count -= 1;\n                         }\n                     } else {\n+                        acc = 0;\n                         highlights.push(std::mem::take(&mut line_highlight));\n                         let mut count = push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, None);\n                         while count > 0 {\n@@ -316,18 +321,43 @@ impl CodeSuggestion {\n                         }\n                     }\n                     // Add a whole line highlight per line in the snippet.\n+                    let len: isize = part\n+                        .snippet\n+                        .split('\\n')\n+                        .next()\n+                        .unwrap_or(&part.snippet)\n+                        .chars()\n+                        .map(|c| match c {\n+                            '\\t' => 4,\n+                            _ => 1,\n+                        })\n+                        .sum();\n                     line_highlight.push(SubstitutionHighlight {\n-                        start: cur_lo.col.0,\n-                        end: cur_lo.col.0\n-                            + part.snippet.split('\\n').next().unwrap_or(&part.snippet).len(),\n+                        start: (cur_lo.col.0 as isize + acc) as usize,\n+                        end: (cur_lo.col.0 as isize + acc + len) as usize,\n                     });\n+                    buf.push_str(&part.snippet);\n+                    let cur_hi = sm.lookup_char_pos(part.span.hi());\n+                    if prev_hi.line == cur_lo.line {\n+                        // Account for the difference between the width of the current code and the\n+                        // snippet being suggested, so that the *later* suggestions are correctly\n+                        // aligned on the screen.\n+                        acc += len as isize - (cur_hi.col.0 - cur_lo.col.0) as isize;\n+                    }\n+                    prev_hi = cur_hi;\n+                    prev_line = sf.get_line(prev_hi.line - 1);\n                     for line in part.snippet.split('\\n').skip(1) {\n+                        acc = 0;\n                         highlights.push(std::mem::take(&mut line_highlight));\n-                        line_highlight.push(SubstitutionHighlight { start: 0, end: line.len() });\n+                        let end: usize = line\n+                            .chars()\n+                            .map(|c| match c {\n+                                '\\t' => 4,\n+                                _ => 1,\n+                            })\n+                            .sum();\n+                        line_highlight.push(SubstitutionHighlight { start: 0, end });\n                     }\n-                    buf.push_str(&part.snippet);\n-                    prev_hi = sm.lookup_char_pos(part.span.hi());\n-                    prev_line = sf.get_line(prev_hi.line - 1);\n                 }\n                 highlights.push(std::mem::take(&mut line_highlight));\n                 let only_capitalization = is_case_difference(sm, &buf, bounding_span);"}]}