{"sha": "73db83aa70bea7973fa4bb1f025de199a19d5282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZGI4M2FhNzBiZWE3OTczZmE0YmIxZjAyNWRlMTk5YTE5ZDUyODI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T05:53:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T12:50:20Z"}, "message": "cleanup check_pat", "tree": {"sha": "012a98785d269dd27384b0fd6aa354427c044f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/012a98785d269dd27384b0fd6aa354427c044f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73db83aa70bea7973fa4bb1f025de199a19d5282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73db83aa70bea7973fa4bb1f025de199a19d5282", "html_url": "https://github.com/rust-lang/rust/commit/73db83aa70bea7973fa4bb1f025de199a19d5282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73db83aa70bea7973fa4bb1f025de199a19d5282/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "580ac0b4f1c6f9cf76f6edafdaf9806437770aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/580ac0b4f1c6f9cf76f6edafdaf9806437770aff", "html_url": "https://github.com/rust-lang/rust/commit/580ac0b4f1c6f9cf76f6edafdaf9806437770aff"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "397f8682ede7369b1ad6ea714c12c66132e8f306", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/73db83aa70bea7973fa4bb1f025de199a19d5282/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73db83aa70bea7973fa4bb1f025de199a19d5282/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=73db83aa70bea7973fa4bb1f025de199a19d5282", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let is_nrp = self.is_non_ref_pat(pat, path_resolution.map(|(res, ..)| res));\n         let (expected, def_bm) = self.calc_default_binding_mode(pat, expected, def_bm, is_nrp);\n \n-        let ty = match &pat.kind {\n+        let ty = match pat.kind {\n             PatKind::Wild => expected,\n             PatKind::Lit(lt) => self.check_pat_lit(pat.span, lt, expected, discrim_span),\n             PatKind::Range(begin, end, _) => {\n@@ -82,50 +82,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             PatKind::Binding(ba, var_id, _, sub) => {\n-                let sub = sub.as_deref();\n-                self.check_pat_ident(pat, *ba, *var_id, sub, expected, def_bm, discrim_span)\n+                self.check_pat_ident(pat, ba, var_id, sub, expected, def_bm, discrim_span)\n             }\n-            PatKind::TupleStruct(qpath, subpats, ddpos) => self.check_pat_tuple_struct(\n+            PatKind::TupleStruct(ref qpath, subpats, ddpos) => self.check_pat_tuple_struct(\n                 pat,\n                 qpath,\n                 subpats,\n-                *ddpos,\n+                ddpos,\n                 expected,\n                 def_bm,\n                 discrim_span,\n             ),\n-            PatKind::Path(qpath) => {\n+            PatKind::Path(ref qpath) => {\n                 self.check_pat_path(pat, path_resolution.unwrap(), qpath, expected)\n             }\n-            PatKind::Struct(qpath, fields, etc) => {\n-                self.check_pat_struct(pat, qpath, fields, *etc, expected, def_bm, discrim_span)\n+            PatKind::Struct(ref qpath, fields, etc) => {\n+                self.check_pat_struct(pat, qpath, fields, etc, expected, def_bm, discrim_span)\n             }\n             PatKind::Or(pats) => {\n-                for pat in *pats {\n+                for pat in pats {\n                     self.check_pat(pat, expected, def_bm, discrim_span);\n                 }\n                 expected\n             }\n             PatKind::Tuple(elements, ddpos) => {\n-                self.check_pat_tuple(pat.span, *elements, *ddpos, expected, def_bm, discrim_span)\n+                self.check_pat_tuple(pat.span, elements, ddpos, expected, def_bm, discrim_span)\n             }\n             PatKind::Box(inner) => {\n                 self.check_pat_box(pat.span, inner, expected, def_bm, discrim_span)\n             }\n             PatKind::Ref(inner, mutbl) => {\n-                self.check_pat_ref(pat, inner, *mutbl, expected, def_bm, discrim_span)\n+                self.check_pat_ref(pat, inner, mutbl, expected, def_bm, discrim_span)\n             }\n             PatKind::Slice(before, slice, after) => {\n-                let slice = slice.as_deref();\n-                self.check_pat_slice(\n-                    pat.span,\n-                    *before,\n-                    slice,\n-                    *after,\n-                    expected,\n-                    def_bm,\n-                    discrim_span,\n-                )\n+                self.check_pat_slice(pat.span, before, slice, after, expected, def_bm, discrim_span)\n             }\n         };\n "}]}