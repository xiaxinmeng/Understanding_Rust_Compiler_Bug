{"sha": "833b03ad52f1d5381d65ad866ab79cb9a68b0e7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzM2IwM2FkNTJmMWQ1MzgxZDY1YWQ4NjZhYjc5Y2I5YTY4YjBlN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-15T09:26:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-15T09:26:25Z"}, "message": "Auto merge of #38185 - jsgf:test-list, r=alexcrichton\n\nlibtest: add --list option to list tests and benchmarks\n\nThis option lists all the tests and benchmarks a binary provides without running any of them.\nBy default the listing is sent to stdout (intended for human consumption), but if `--logfile` is also specified, it is also written there in an easily parsable form.\n\nIf filters are specified, they're applied before the output is emitted. The human output will also include a summary unless `-q` is specified.", "tree": {"sha": "339dd376f8909180c08c771fdd9faffba4b34328", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/339dd376f8909180c08c771fdd9faffba4b34328"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/833b03ad52f1d5381d65ad866ab79cb9a68b0e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/833b03ad52f1d5381d65ad866ab79cb9a68b0e7f", "html_url": "https://github.com/rust-lang/rust/commit/833b03ad52f1d5381d65ad866ab79cb9a68b0e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/833b03ad52f1d5381d65ad866ab79cb9a68b0e7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa668f3bf8156730b419deec51fb980af23b8bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa668f3bf8156730b419deec51fb980af23b8bb", "html_url": "https://github.com/rust-lang/rust/commit/cfa668f3bf8156730b419deec51fb980af23b8bb"}, {"sha": "516d105c0b1c2cbe8a9cd8de6c12236c913b99a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/516d105c0b1c2cbe8a9cd8de6c12236c913b99a3", "html_url": "https://github.com/rust-lang/rust/commit/516d105c0b1c2cbe8a9cd8de6c12236c913b99a3"}], "stats": {"total": 99, "additions": 79, "deletions": 20}, "files": [{"sha": "f5546b6aac4f5bfe54699d3c21c7fb2d09a3b4a4", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 78, "deletions": 20, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/833b03ad52f1d5381d65ad866ab79cb9a68b0e7f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b03ad52f1d5381d65ad866ab79cb9a68b0e7f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=833b03ad52f1d5381d65ad866ab79cb9a68b0e7f", "patch": "@@ -254,10 +254,16 @@ pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>) {\n         Some(Err(msg)) => panic!(\"{:?}\", msg),\n         None => return,\n     };\n-    match run_tests_console(&opts, tests) {\n-        Ok(true) => {}\n-        Ok(false) => std::process::exit(101),\n-        Err(e) => panic!(\"io error when running tests: {:?}\", e),\n+    if opts.list {\n+        if let Err(e) = list_tests_console(&opts, tests) {\n+            panic!(\"io error when listing tests: {:?}\", e);\n+        }\n+    } else {\n+        match run_tests_console(&opts, tests) {\n+            Ok(true) => {}\n+            Ok(false) => std::process::exit(101),\n+            Err(e) => panic!(\"io error when running tests: {:?}\", e),\n+        }\n     }\n }\n \n@@ -300,6 +306,7 @@ pub enum ColorConfig {\n }\n \n pub struct TestOpts {\n+    pub list: bool,\n     pub filter: Option<String>,\n     pub filter_exact: bool,\n     pub run_ignored: bool,\n@@ -317,6 +324,7 @@ impl TestOpts {\n     #[cfg(test)]\n     fn new() -> TestOpts {\n         TestOpts {\n+            list: false,\n             filter: None,\n             filter_exact: false,\n             run_ignored: false,\n@@ -340,6 +348,7 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n     vec![getopts::optflag(\"\", \"ignored\", \"Run ignored tests\"),\n       getopts::optflag(\"\", \"test\", \"Run tests and not benchmarks\"),\n       getopts::optflag(\"\", \"bench\", \"Run benchmarks instead of tests\"),\n+      getopts::optflag(\"\", \"list\", \"List all tests and benchmarks\"),\n       getopts::optflag(\"h\", \"help\", \"Display this message (longer with --help)\"),\n       getopts::optopt(\"\", \"logfile\", \"Write logs to the specified file instead \\\n                           of stdout\", \"PATH\"),\n@@ -411,6 +420,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     let run_ignored = matches.opt_present(\"ignored\");\n     let quiet = matches.opt_present(\"quiet\");\n     let exact = matches.opt_present(\"exact\");\n+    let list = matches.opt_present(\"list\");\n \n     let logfile = matches.opt_str(\"logfile\");\n     let logfile = logfile.map(|s| PathBuf::from(&s));\n@@ -451,6 +461,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     };\n \n     let test_opts = TestOpts {\n+        list: list,\n         filter: filter,\n         filter_exact: exact,\n         run_ignored: run_ignored,\n@@ -581,7 +592,8 @@ impl<T: Write> ConsoleTestState<T> {\n         }\n     }\n \n-    pub fn write_plain(&mut self, s: &str) -> io::Result<()> {\n+    pub fn write_plain<S: AsRef<str>>(&mut self, s: S) -> io::Result<()> {\n+        let s = s.as_ref();\n         match self.out {\n             Pretty(ref mut term) => {\n                 term.write_all(s.as_bytes())?;\n@@ -635,25 +647,28 @@ impl<T: Write> ConsoleTestState<T> {\n                                   TEST_WARN_TIMEOUT_S))\n     }\n \n-    pub fn write_log(&mut self, test: &TestDesc, result: &TestResult) -> io::Result<()> {\n+    pub fn write_log<S: AsRef<str>>(&mut self, msg: S) -> io::Result<()> {\n+        let msg = msg.as_ref();\n         match self.log_out {\n             None => Ok(()),\n-            Some(ref mut o) => {\n-                let s = format!(\"{} {}\\n\",\n-                                match *result {\n-                                    TrOk => \"ok\".to_owned(),\n-                                    TrFailed => \"failed\".to_owned(),\n-                                    TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n-                                    TrIgnored => \"ignored\".to_owned(),\n-                                    TrMetrics(ref mm) => mm.fmt_metrics(),\n-                                    TrBench(ref bs) => fmt_bench_samples(bs),\n-                                },\n-                                test.name);\n-                o.write_all(s.as_bytes())\n-            }\n+            Some(ref mut o) => o.write_all(msg.as_bytes()),\n         }\n     }\n \n+    pub fn write_log_result(&mut self, test: &TestDesc, result: &TestResult) -> io::Result<()> {\n+        self.write_log(\n+            format!(\"{} {}\\n\",\n+                    match *result {\n+                        TrOk => \"ok\".to_owned(),\n+                        TrFailed => \"failed\".to_owned(),\n+                        TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n+                        TrIgnored => \"ignored\".to_owned(),\n+                        TrMetrics(ref mm) => mm.fmt_metrics(),\n+                        TrBench(ref bs) => fmt_bench_samples(bs),\n+                    },\n+                    test.name))\n+    }\n+\n     pub fn write_failures(&mut self) -> io::Result<()> {\n         self.write_plain(\"\\nfailures:\\n\")?;\n         let mut failures = Vec::new();\n@@ -746,6 +761,49 @@ pub fn fmt_bench_samples(bs: &BenchSamples) -> String {\n     output\n }\n \n+// List the tests to console, and optionally to logfile. Filters are honored.\n+pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Result<()> {\n+    let mut st = ConsoleTestState::new(opts, None::<io::Stdout>)?;\n+\n+    let mut ntest = 0;\n+    let mut nbench = 0;\n+    let mut nmetric = 0;\n+\n+    for test in filter_tests(&opts, tests) {\n+        use TestFn::*;\n+\n+        let TestDescAndFn { desc: TestDesc { name, .. }, testfn } = test;\n+\n+        let fntype = match testfn {\n+            StaticTestFn(..) | DynTestFn(..) => { ntest += 1; \"test\" },\n+            StaticBenchFn(..) | DynBenchFn(..) => { nbench += 1; \"benchmark\" },\n+            StaticMetricFn(..) | DynMetricFn(..) => { nmetric += 1; \"metric\" },\n+        };\n+\n+        st.write_plain(format!(\"{}: {}\\n\", name, fntype))?;\n+        st.write_log(format!(\"{} {}\\n\", fntype, name))?;\n+    }\n+\n+    fn plural(count: u32, s: &str) -> String {\n+        match count {\n+            1 => format!(\"{} {}\", 1, s),\n+            n => format!(\"{} {}s\", n, s),\n+        }\n+    }\n+\n+    if !opts.quiet {\n+        if ntest != 0 || nbench != 0 || nmetric != 0 {\n+            st.write_plain(\"\\n\")?;\n+        }\n+        st.write_plain(format!(\"{}, {}, {}\\n\",\n+            plural(ntest, \"test\"),\n+            plural(nbench, \"benchmark\"),\n+            plural(nmetric, \"metric\")))?;\n+    }\n+\n+    Ok(())\n+}\n+\n // A simple console test runner\n pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Result<bool> {\n \n@@ -755,7 +813,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n             TeWait(ref test, padding) => st.write_test_start(test, padding),\n             TeTimeout(ref test) => st.write_timeout(test),\n             TeResult(test, result, stdout) => {\n-                st.write_log(&test, &result)?;\n+                st.write_log_result(&test, &result)?;\n                 st.write_result(&result)?;\n                 match result {\n                     TrOk => st.passed += 1,"}, {"sha": "e4d9836c56298e30b39e028bd07746762d83e46f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/833b03ad52f1d5381d65ad866ab79cb9a68b0e7f/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b03ad52f1d5381d65ad866ab79cb9a68b0e7f/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=833b03ad52f1d5381d65ad866ab79cb9a68b0e7f", "patch": "@@ -325,6 +325,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         color: test::AutoColor,\n         test_threads: None,\n         skip: vec![],\n+        list: false,\n     }\n }\n "}]}