{"sha": "378b5b4ca06d027d9dfff807fe0fff4bc5e62806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OGI1YjRjYTA2ZDAyN2Q5ZGZmZjgwN2ZlMGZmZjRiYzVlNjI4MDY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-26T17:51:39Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:02Z"}, "message": "Generate more accurate MIR in `construct_error`", "tree": {"sha": "364aeab75c09406db5d4f0a5203315f4ec1f2a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/364aeab75c09406db5d4f0a5203315f4ec1f2a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/378b5b4ca06d027d9dfff807fe0fff4bc5e62806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/378b5b4ca06d027d9dfff807fe0fff4bc5e62806", "html_url": "https://github.com/rust-lang/rust/commit/378b5b4ca06d027d9dfff807fe0fff4bc5e62806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/378b5b4ca06d027d9dfff807fe0fff4bc5e62806/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9664122b1ff04dd8a853de602cd64d86a6473248", "url": "https://api.github.com/repos/rust-lang/rust/commits/9664122b1ff04dd8a853de602cd64d86a6473248", "html_url": "https://github.com/rust-lang/rust/commit/9664122b1ff04dd8a853de602cd64d86a6473248"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "5f8c0b027e96a036dc3d231daffe8ca691f9e990", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/378b5b4ca06d027d9dfff807fe0fff4bc5e62806/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378b5b4ca06d027d9dfff807fe0fff4bc5e62806/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=378b5b4ca06d027d9dfff807fe0fff4bc5e62806", "patch": "@@ -670,14 +670,51 @@ fn construct_const<'a, 'tcx>(\n     builder.finish()\n }\n \n+/// Construct MIR for a item that has had errors in type checking.\n+///\n+/// This is required because we may still want to run MIR passes on an item\n+/// with type errors, but normal MIR construction can't handle that in general.\n fn construct_error<'a, 'tcx>(hir: Cx<'a, 'tcx>, body_id: hir::BodyId) -> Body<'tcx> {\n-    let owner_id = hir.tcx().hir().body_owner(body_id);\n-    let span = hir.tcx().hir().span(owner_id);\n-    let ty = hir.tcx().types.err;\n-    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, span, None);\n+    let tcx = hir.tcx();\n+    let owner_id = tcx.hir().body_owner(body_id);\n+    let span = tcx.hir().span(owner_id);\n+    let ty = tcx.types.err;\n+    let num_params = match hir.body_owner_kind {\n+        hir::BodyOwnerKind::Fn => tcx.hir().fn_decl_by_hir_id(owner_id).unwrap().inputs.len(),\n+        hir::BodyOwnerKind::Closure => {\n+            if tcx.hir().body(body_id).generator_kind().is_some() {\n+                // Generators have an implicit `self` parameter *and* a possibly\n+                // implicit resume parameter.\n+                2\n+            } else {\n+                // The implicit self parameter adds another local in MIR.\n+                1 + tcx.hir().fn_decl_by_hir_id(owner_id).unwrap().inputs.len()\n+            }\n+        }\n+        hir::BodyOwnerKind::Const => 0,\n+        hir::BodyOwnerKind::Static(_) => 0,\n+    };\n+    let mut builder = Builder::new(hir, span, num_params, Safety::Safe, ty, span, None);\n     let source_info = builder.source_info(span);\n+    // Some MIR passes will expect the number of parameters to match the\n+    // function declaration.\n+    for _ in 0..num_params {\n+        builder.local_decls.push(LocalDecl {\n+            mutability: Mutability::Mut,\n+            ty,\n+            user_ty: UserTypeProjections::none(),\n+            source_info,\n+            internal: false,\n+            local_info: LocalInfo::Other,\n+            is_block_tail: None,\n+        });\n+    }\n     builder.cfg.terminate(START_BLOCK, source_info, TerminatorKind::Unreachable);\n-    builder.finish()\n+    let mut body = builder.finish();\n+    if tcx.hir().body(body_id).generator_kind.is_some() {\n+        body.yield_ty = Some(ty);\n+    }\n+    body\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}]}