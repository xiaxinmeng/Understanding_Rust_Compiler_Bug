{"sha": "cb35370557ecea46d7b36237b9c60bfa105c8de5", "node_id": "C_kwDOAAsO6NoAKGNiMzUzNzA1NTdlY2VhNDZkN2IzNjIzN2I5YzYwYmZhMTA1YzhkZTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-18T22:23:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-18T22:23:08Z"}, "message": "Rollup merge of #93877 - Amanieu:asm_fixes, r=nagisa\n\nasm: Allow the use of r8-r14 as clobbers on Thumb1\n\nPreviously these were entirely disallowed, except for r11 which was allowed by accident.\n\ncc `@hudson-ayers`", "tree": {"sha": "bc26374f65593b4003791f2c0cc197c2c417243c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc26374f65593b4003791f2c0cc197c2c417243c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb35370557ecea46d7b36237b9c60bfa105c8de5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiEBxMCRBK7hj4Ov3rIwAAt70IAA00J5nhnijoj+Di7dVn80xZ\nHwalimy9KuNhPvIUFZGLw6NujnIllQlOR8tqFZe95K7VhHbFn9pkboDLv5RRGP4H\nqZAMzGZqZ/UclaKF/fRjJVuCxcEGHVieJHtAefNDCs39zsD4PX3UUhDh4YLD5TLj\nc3AkAV2Z792MsnOTKeGCWM3aZOwPekRhyDA/St5AvWv95ZfNb75ZxgByW6aOFU0i\n9LgMr+gOJ1h4QNRJsrxKsdjZRFqqFPte2vnNSPrpHJSlicE1H7i8gtbr23znNOFD\neA9GtyQCKRFtfZApb55o2mansXXTQjhdJGUkirRfmGu0pgXO0i5ZCalF+2rXJkw=\n=zhUn\n-----END PGP SIGNATURE-----\n", "payload": "tree bc26374f65593b4003791f2c0cc197c2c417243c\nparent 724cca6d7f792cf3edea743a8fdc2dab397467e2\nparent 11250b8661f2f37e96827d6d5434833221b355d2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645222988 +0100\ncommitter GitHub <noreply@github.com> 1645222988 +0100\n\nRollup merge of #93877 - Amanieu:asm_fixes, r=nagisa\n\nasm: Allow the use of r8-r14 as clobbers on Thumb1\n\nPreviously these were entirely disallowed, except for r11 which was allowed by accident.\n\ncc `@hudson-ayers`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb35370557ecea46d7b36237b9c60bfa105c8de5", "html_url": "https://github.com/rust-lang/rust/commit/cb35370557ecea46d7b36237b9c60bfa105c8de5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb35370557ecea46d7b36237b9c60bfa105c8de5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "724cca6d7f792cf3edea743a8fdc2dab397467e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/724cca6d7f792cf3edea743a8fdc2dab397467e2", "html_url": "https://github.com/rust-lang/rust/commit/724cca6d7f792cf3edea743a8fdc2dab397467e2"}, {"sha": "11250b8661f2f37e96827d6d5434833221b355d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/11250b8661f2f37e96827d6d5434833221b355d2", "html_url": "https://github.com/rust-lang/rust/commit/11250b8661f2f37e96827d6d5434833221b355d2"}], "stats": {"total": 143, "additions": 97, "deletions": 46}, "files": [{"sha": "18fcc99ffbaa0432eb7b30fb892f0b5d1dd4dc59", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=cb35370557ecea46d7b36237b9c60bfa105c8de5", "patch": "@@ -129,13 +129,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .operands\n             .iter()\n             .map(|(op, op_sp)| {\n-                let lower_reg = |reg| match reg {\n+                let lower_reg = |reg, is_clobber| match reg {\n                     InlineAsmRegOrRegClass::Reg(s) => {\n                         asm::InlineAsmRegOrRegClass::Reg(if let Some(asm_arch) = asm_arch {\n                             asm::InlineAsmReg::parse(\n                                 asm_arch,\n                                 &sess.target_features,\n                                 &sess.target,\n+                                is_clobber,\n                                 s,\n                             )\n                             .unwrap_or_else(|e| {\n@@ -162,24 +163,24 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 let op = match *op {\n                     InlineAsmOperand::In { reg, ref expr } => hir::InlineAsmOperand::In {\n-                        reg: lower_reg(reg),\n+                        reg: lower_reg(reg, false),\n                         expr: self.lower_expr_mut(expr),\n                     },\n                     InlineAsmOperand::Out { reg, late, ref expr } => hir::InlineAsmOperand::Out {\n-                        reg: lower_reg(reg),\n+                        reg: lower_reg(reg, expr.is_none()),\n                         late,\n                         expr: expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n                     },\n                     InlineAsmOperand::InOut { reg, late, ref expr } => {\n                         hir::InlineAsmOperand::InOut {\n-                            reg: lower_reg(reg),\n+                            reg: lower_reg(reg, false),\n                             late,\n                             expr: self.lower_expr_mut(expr),\n                         }\n                     }\n                     InlineAsmOperand::SplitInOut { reg, late, ref in_expr, ref out_expr } => {\n                         hir::InlineAsmOperand::SplitInOut {\n-                            reg: lower_reg(reg),\n+                            reg: lower_reg(reg, false),\n                             late,\n                             in_expr: self.lower_expr_mut(in_expr),\n                             out_expr: out_expr.as_ref().map(|expr| self.lower_expr_mut(expr)),"}, {"sha": "d184ad4e78ae5ea4854a4e7bde7074fe8e563889", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=cb35370557ecea46d7b36237b9c60bfa105c8de5", "patch": "@@ -77,6 +77,7 @@ pub fn reserved_x18(\n     _arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     if target.os == \"android\"\n         || target.is_like_fuchsia"}, {"sha": "b2d5bb3736afd5f9ccbda039843034dd453de3f6", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=cb35370557ecea46d7b36237b9c60bfa105c8de5", "patch": "@@ -66,10 +66,13 @@ fn frame_pointer_is_r7(target_features: &FxHashSet<Symbol>, target: &Target) ->\n }\n \n fn frame_pointer_r11(\n-    _arch: InlineAsmArch,\n+    arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     target: &Target,\n+    is_clobber: bool,\n ) -> Result<(), &'static str> {\n+    not_thumb1(arch, target_features, target, is_clobber)?;\n+\n     if !frame_pointer_is_r7(target_features, target) {\n         Err(\"the frame pointer (r11) cannot be used as an operand for inline asm\")\n     } else {\n@@ -81,6 +84,7 @@ fn frame_pointer_r7(\n     _arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     if frame_pointer_is_r7(target_features, target) {\n         Err(\"the frame pointer (r7) cannot be used as an operand for inline asm\")\n@@ -93,9 +97,13 @@ fn not_thumb1(\n     _arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    is_clobber: bool,\n ) -> Result<(), &'static str> {\n-    if target_features.contains(&sym::thumb_mode) && !target_features.contains(&sym::thumb2) {\n-        Err(\"high registers (r8+) cannot be used in Thumb-1 code\")\n+    if !is_clobber\n+        && target_features.contains(&sym::thumb_mode)\n+        && !target_features.contains(&sym::thumb2)\n+    {\n+        Err(\"high registers (r8+) can only be used as clobbers in Thumb-1 code\")\n     } else {\n         Ok(())\n     }\n@@ -105,8 +113,9 @@ fn reserved_r9(\n     arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     target: &Target,\n+    is_clobber: bool,\n ) -> Result<(), &'static str> {\n-    not_thumb1(arch, target_features, target)?;\n+    not_thumb1(arch, target_features, target, is_clobber)?;\n \n     // We detect this using the reserved-r9 feature instead of using the target\n     // because the relocation model can be changed with compiler options."}, {"sha": "b4d982f3836be848253730555a726f5753082bb5", "filename": "compiler/rustc_target/src/asm/bpf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs?ref=cb35370557ecea46d7b36237b9c60bfa105c8de5", "patch": "@@ -47,6 +47,7 @@ fn only_alu32(\n     _arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     if !target_features.contains(&sym::alu32) {\n         Err(\"register can't be used without the `alu32` target feature\")"}, {"sha": "fd95b0338a6e14ebedee1d38e1227f09d328ca6e", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 71, "deletions": 37, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=cb35370557ecea46d7b36237b9c60bfa105c8de5", "patch": "@@ -83,12 +83,13 @@ macro_rules! def_regs {\n                 _arch: super::InlineAsmArch,\n                 _target_features: &rustc_data_structures::fx::FxHashSet<Symbol>,\n                 _target: &crate::spec::Target,\n+                _is_clobber: bool,\n                 name: &str,\n             ) -> Result<Self, &'static str> {\n                 match name {\n                     $(\n                         $($alias)|* | $reg_name => {\n-                            $($filter(_arch, _target_features, _target)?;)?\n+                            $($filter(_arch, _target_features, _target, _is_clobber)?;)?\n                             Ok(Self::$reg)\n                         }\n                     )*\n@@ -112,7 +113,7 @@ macro_rules! def_regs {\n             #[allow(unused_imports)]\n             use super::{InlineAsmReg, InlineAsmRegClass};\n             $(\n-                if $($filter(_arch, _target_features, _target).is_ok() &&)? true {\n+                if $($filter(_arch, _target_features, _target, false).is_ok() &&)? true {\n                     if let Some(set) = _map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n                         set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                     }\n@@ -298,54 +299,87 @@ impl InlineAsmReg {\n         arch: InlineAsmArch,\n         target_features: &FxHashSet<Symbol>,\n         target: &Target,\n+        is_clobber: bool,\n         name: Symbol,\n     ) -> Result<Self, &'static str> {\n         // FIXME: use direct symbol comparison for register names\n         // Use `Symbol::as_str` instead of `Symbol::with` here because `has_feature` may access `Symbol`.\n         let name = name.as_str();\n         Ok(match arch {\n             InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                Self::X86(X86InlineAsmReg::parse(arch, target_features, target, name)?)\n+                Self::X86(X86InlineAsmReg::parse(arch, target_features, target, is_clobber, name)?)\n             }\n             InlineAsmArch::Arm => {\n-                Self::Arm(ArmInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::AArch64 => {\n-                Self::AArch64(AArch64InlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                Self::RiscV(RiscVInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Nvptx64 => {\n-                Self::Nvptx(NvptxInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {\n-                Self::PowerPC(PowerPCInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Hexagon => {\n-                Self::Hexagon(HexagonInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n-                Self::Mips(MipsInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::S390x => {\n-                Self::S390x(S390xInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::SpirV => {\n-                Self::SpirV(SpirVInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n-                Self::Wasm(WasmInlineAsmReg::parse(arch, target_features, target, name)?)\n+                Self::Arm(ArmInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?)\n             }\n+            InlineAsmArch::AArch64 => Self::AArch64(AArch64InlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => Self::RiscV(\n+                RiscVInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?,\n+            ),\n+            InlineAsmArch::Nvptx64 => Self::Nvptx(NvptxInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => Self::PowerPC(\n+                PowerPCInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?,\n+            ),\n+            InlineAsmArch::Hexagon => Self::Hexagon(HexagonInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::Mips | InlineAsmArch::Mips64 => Self::Mips(MipsInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::S390x => Self::S390x(S390xInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => Self::Wasm(WasmInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n             InlineAsmArch::Bpf => {\n-                Self::Bpf(BpfInlineAsmReg::parse(arch, target_features, target, name)?)\n+                Self::Bpf(BpfInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?)\n             }\n             InlineAsmArch::Avr => {\n-                Self::Avr(AvrInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Msp430 => {\n-                Self::Msp430(Msp430InlineAsmReg::parse(arch, target_features, target, name)?)\n+                Self::Avr(AvrInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?)\n             }\n+            InlineAsmArch::Msp430 => Self::Msp430(Msp430InlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n         })\n     }\n \n@@ -844,7 +878,7 @@ impl InlineAsmClobberAbi {\n             },\n             InlineAsmArch::AArch64 => match name {\n                 \"C\" | \"system\" | \"efiapi\" => {\n-                    Ok(if aarch64::reserved_x18(arch, target_features, target).is_err() {\n+                    Ok(if aarch64::reserved_x18(arch, target_features, target, true).is_err() {\n                         InlineAsmClobberAbi::AArch64NoX18\n                     } else {\n                         InlineAsmClobberAbi::AArch64"}, {"sha": "e145ba8a16e6488d2d6779327285c99152fa9275", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=cb35370557ecea46d7b36237b9c60bfa105c8de5", "patch": "@@ -56,6 +56,7 @@ fn not_e(\n     _arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     if target_features.contains(&sym::e) {\n         Err(\"register can't be used with the `e` target feature\")"}, {"sha": "a8ee80ec4ea277131cdb086ade32ae0a9c851a8e", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb35370557ecea46d7b36237b9c60bfa105c8de5/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=cb35370557ecea46d7b36237b9c60bfa105c8de5", "patch": "@@ -141,6 +141,7 @@ fn x86_64_only(\n     arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => Err(\"register is only available on x86_64\"),\n@@ -153,6 +154,7 @@ fn high_byte(\n     arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86_64 => Err(\"high byte registers cannot be used as an operand on x86_64\"),\n@@ -164,6 +166,7 @@ fn rbx_reserved(\n     arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => Ok(()),\n@@ -178,6 +181,7 @@ fn esi_reserved(\n     arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => {"}]}