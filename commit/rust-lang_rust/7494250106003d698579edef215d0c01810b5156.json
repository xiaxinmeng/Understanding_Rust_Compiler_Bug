{"sha": "7494250106003d698579edef215d0c01810b5156", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OTQyNTAxMDYwMDNkNjk4NTc5ZWRlZjIxNWQwYzAxODEwYjUxNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-04T21:50:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-04T21:50:12Z"}, "message": "Auto merge of #67803 - Centril:librustc_hir, r=Zoxc\n\nExtract `rustc_hir` out of `rustc`\n\nThe new crate contains:\n```rust\npub mod def;\npub mod def_id;\nmod hir;\npub mod hir_id;\npub mod itemlikevisit;\npub mod pat_util;\npub mod print;\nmod stable_hash_impls;\n\npub use hir::*;\npub use hir_id::*;\npub use stable_hash_impls::HashStableContext;\n```\n\nRemains to be done in follow-up PRs:\n\n- Move `rustc::hir::map` into `rustc_hir_map` -- this has to be a separate crate due to the `dep_graph` (blocked on https://github.com/rust-lang/rust/pull/67761).\n\n- Move references to `rustc::hir` to `rustc_hir` where possible.\n\ncc https://github.com/rust-lang/rust/issues/65031\n\nr? @Zoxc", "tree": {"sha": "2162bd329ca39cb45c1ddc32393d459ee8caab68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2162bd329ca39cb45c1ddc32393d459ee8caab68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7494250106003d698579edef215d0c01810b5156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7494250106003d698579edef215d0c01810b5156", "html_url": "https://github.com/rust-lang/rust/commit/7494250106003d698579edef215d0c01810b5156", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7494250106003d698579edef215d0c01810b5156/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760ce94c69ca510d44087291c311296f6d9ccdf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/760ce94c69ca510d44087291c311296f6d9ccdf5", "html_url": "https://github.com/rust-lang/rust/commit/760ce94c69ca510d44087291c311296f6d9ccdf5"}, {"sha": "cdf32e1a0f8fc207b177857775c29549f609a094", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdf32e1a0f8fc207b177857775c29549f609a094", "html_url": "https://github.com/rust-lang/rust/commit/cdf32e1a0f8fc207b177857775c29549f609a094"}], "stats": {"total": 2054, "additions": 1104, "deletions": 950}, "files": [{"sha": "a25f8dbc9186a4d88ef7da82f83fc6065c50a618", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -3091,6 +3091,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_fs_util\",\n+ \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_session\",\n@@ -3368,6 +3369,7 @@ dependencies = [\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_index\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\",\n@@ -3562,6 +3564,22 @@ dependencies = [\n name = \"rustc_fs_util\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"rustc_hir\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_index\",\n+ \"rustc_macros\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"serialize\",\n+ \"smallvec 1.0.0\",\n+ \"syntax\",\n+]\n+\n [[package]]\n name = \"rustc_incremental\"\n version = \"0.0.0\"\n@@ -3602,6 +3620,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n+ \"rustc_hir\",\n  \"rustc_incremental\",\n  \"rustc_lint\",\n  \"rustc_metadata\",\n@@ -3808,6 +3827,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_metadata\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec 1.0.0\",\n  \"syntax\","}, {"sha": "2e882cfdafdf3a57f4d25fe17a701bd24bc1afcb", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -23,6 +23,7 @@ rustc-rayon-core = \"0.3.0\"\n polonius-engine = \"0.11.0\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_feature = { path = \"../librustc_feature\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "1c7d36b731225a41f3939626c84582019e2cb307", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -41,10 +41,10 @@ macro_rules! arena_types {\n                 rustc::hir::def_id::DefId,\n                 rustc::ty::subst::SubstsRef<$tcx>\n             )>,\n-            [few, decode] mir_keys: rustc::util::nodemap::DefIdSet,\n+            [few, decode] mir_keys: rustc::hir::def_id::DefIdSet,\n             [decode] specialization_graph: rustc::traits::specialization_graph::Graph,\n             [] region_scope_tree: rustc::middle::region::ScopeTree,\n-            [] item_local_set: rustc::util::nodemap::ItemLocalSet,\n+            [] item_local_set: rustc::hir::ItemLocalSet,\n             [decode] mir_const_qualif: rustc_index::bit_set::BitSet<rustc::mir::Local>,\n             [] trait_impls_of: rustc::ty::trait_def::TraitImpls,\n             [] dropck_outlives:\n@@ -87,7 +87,7 @@ macro_rules! arena_types {\n                 >,\n             [few] crate_inherent_impls: rustc::ty::CrateInherentImpls,\n             [few] upstream_monomorphizations:\n-                rustc::util::nodemap::DefIdMap<\n+                rustc::hir::def_id::DefIdMap<\n                     rustc_data_structures::fx::FxHashMap<\n                         rustc::ty::subst::SubstsRef<'tcx>,\n                         rustc::hir::def_id::CrateNum\n@@ -113,10 +113,10 @@ macro_rules! arena_types {\n             >,\n             [few] get_lib_features: rustc::middle::lib_features::LibFeatures,\n             [few] defined_lib_features: rustc::middle::lang_items::LanguageItems,\n-            [few] visible_parent_map: rustc::util::nodemap::DefIdMap<rustc::hir::def_id::DefId>,\n+            [few] visible_parent_map: rustc::hir::def_id::DefIdMap<rustc::hir::def_id::DefId>,\n             [few] foreign_module: rustc::middle::cstore::ForeignModule,\n             [few] foreign_modules: Vec<rustc::middle::cstore::ForeignModule>,\n-            [few] reachable_non_generics: rustc::util::nodemap::DefIdMap<\n+            [few] reachable_non_generics: rustc::hir::def_id::DefIdMap<\n                 rustc::middle::exported_symbols::SymbolExportLevel\n             >,\n             [few] crate_variances: rustc::ty::CrateVariancesMap<'tcx>,"}, {"sha": "0dae5d05066ef8daa24fdcd58d9b0cd10f447fcb", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -396,12 +396,6 @@ impl DefPathHash {\n     }\n }\n \n-impl DefId {\n-    pub fn to_dep_node(self, tcx: TyCtxt<'_>, kind: DepKind) -> DepNode {\n-        DepNode::from_def_path_hash(kind, tcx.def_path_hash(self))\n-    }\n-}\n-\n rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,"}, {"sha": "62160fed1bc6653be6f32ce038d309530f2abe2d", "filename": "src/librustc/hir.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -0,0 +1,30 @@\n+//! HIR datatypes. See the [rustc guide] for more info.\n+//!\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n+\n+pub mod check_attr;\n+pub use rustc_hir::def;\n+pub mod exports;\n+pub use rustc_hir::def_id;\n+pub use rustc_hir::hir_id::*;\n+pub mod intravisit;\n+pub use rustc_hir::itemlikevisit;\n+pub mod map;\n+pub use rustc_hir::pat_util;\n+pub use rustc_hir::print;\n+pub mod upvars;\n+\n+pub use rustc_hir::BlockCheckMode::*;\n+pub use rustc_hir::FunctionRetTy::*;\n+pub use rustc_hir::PrimTy::*;\n+pub use rustc_hir::UnOp::*;\n+pub use rustc_hir::UnsafeSource::*;\n+pub use rustc_hir::*;\n+\n+use crate::ty::query::Providers;\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    check_attr::provide(providers);\n+    map::provide(providers);\n+    upvars::provide(providers);\n+}"}, {"sha": "08d4163add7327b9c36ec4c7ed79c5b76886fff8", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -7,14 +7,15 @@\n use crate::hir::def_id::DefId;\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use crate::hir::DUMMY_HIR_ID;\n-use crate::hir::{self, Attribute, HirId, Item, ItemKind, TraitItem, TraitItemKind};\n+use crate::hir::{self, HirId, Item, ItemKind, TraitItem, TraitItemKind};\n use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n \n use rustc_error_codes::*;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use syntax::ast::Attribute;\n use syntax::attr;\n \n use std::fmt::{self, Display};"}, {"sha": "a2e885f2a6a7e2066b7c99fbffe4d5f4bd0d37c6", "filename": "src/librustc/hir/exports.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fexports.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -0,0 +1,32 @@\n+use crate::hir::def::Res;\n+use crate::hir::def_id::DefIdMap;\n+use crate::ty;\n+\n+use rustc_macros::HashStable;\n+use rustc_span::Span;\n+use syntax::ast;\n+\n+use std::fmt::Debug;\n+\n+/// This is the replacement export map. It maps a module to all of the exports\n+/// within.\n+pub type ExportMap<Id> = DefIdMap<Vec<Export<Id>>>;\n+\n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+pub struct Export<Id> {\n+    /// The name of the target.\n+    pub ident: ast::Ident,\n+    /// The resolution of the target.\n+    pub res: Res<Id>,\n+    /// The span of the target.\n+    pub span: Span,\n+    /// The visibility of the export.\n+    /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n+    pub vis: ty::Visibility,\n+}\n+\n+impl<Id> Export<Id> {\n+    pub fn map_id<R>(self, map: impl FnMut(Id) -> R) -> Export<R> {\n+        Export { ident: self.ident, res: self.res.map_id(map), span: self.span, vis: self.vis }\n+    }\n+}"}, {"sha": "780b0e36b5e4de5f2d212997b61f0dd45bde121f", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -31,13 +31,66 @@\n //! This order consistency is required in a few places in rustc, for\n //! example generator inference, and possibly also HIR borrowck.\n \n-use super::itemlikevisit::DeepVisitor;\n-\n+use crate::hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use crate::hir::map::Map;\n use crate::hir::*;\n \n use rustc_span::Span;\n-use syntax::ast::{Attribute, Ident, Name};\n+use syntax::ast::{Attribute, Ident, Label, Name};\n+\n+pub struct DeepVisitor<'v, V> {\n+    visitor: &'v mut V,\n+}\n+\n+impl<'v, 'hir, V> DeepVisitor<'v, V>\n+where\n+    V: Visitor<'hir> + 'v,\n+{\n+    pub fn new(base: &'v mut V) -> Self {\n+        DeepVisitor { visitor: base }\n+    }\n+}\n+\n+impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n+where\n+    V: Visitor<'hir>,\n+{\n+    fn visit_item(&mut self, item: &'hir Item<'hir>) {\n+        self.visitor.visit_item(item);\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>) {\n+        self.visitor.visit_trait_item(trait_item);\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>) {\n+        self.visitor.visit_impl_item(impl_item);\n+    }\n+}\n+\n+pub trait IntoVisitor<'hir> {\n+    type Visitor: Visitor<'hir>;\n+    fn into_visitor(&self) -> Self::Visitor;\n+}\n+\n+pub struct ParDeepVisitor<V>(pub V);\n+\n+impl<'hir, V> ParItemLikeVisitor<'hir> for ParDeepVisitor<V>\n+where\n+    V: IntoVisitor<'hir>,\n+{\n+    fn visit_item(&self, item: &'hir Item<'hir>) {\n+        self.0.into_visitor().visit_item(item);\n+    }\n+\n+    fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>) {\n+        self.0.into_visitor().visit_trait_item(trait_item);\n+    }\n+\n+    fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>) {\n+        self.0.into_visitor().visit_impl_item(impl_item);\n+    }\n+}\n \n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {"}, {"sha": "25083281ce9d188fe8478b2ecdd3e6a34a262d72", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,16 +1,15 @@\n use super::*;\n use crate::dep_graph::{DepGraph, DepKind, DepNodeIndex};\n use crate::hir;\n-use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n+use crate::hir::def_id::{CrateNum, DefIndex, LOCAL_CRATE};\n use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n use crate::hir::map::HirEntryMap;\n use crate::ich::Fingerprint;\n use crate::middle::cstore::CrateStore;\n-use crate::session::CrateDisambiguator;\n-use crate::session::Session;\n-use crate::util::nodemap::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_index::vec::IndexVec;\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::SourceMap;\n use rustc_span::Span;\n use std::iter::repeat;"}, {"sha": "b04c3523662eb3046497a77218da0866cb6d566f", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -7,12 +7,12 @@\n use crate::hir;\n use crate::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::ich::Fingerprint;\n-use crate::session::CrateDisambiguator;\n-use crate::util::nodemap::NodeMap;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_index::vec::IndexVec;\n+use rustc_session::node_id::NodeMap;\n+use rustc_session::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;"}, {"sha": "b499ba20b8cf1499f93effbe6633958088127d38", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 43, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -4,20 +4,21 @@ pub use self::definitions::{\n };\n \n use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n-use crate::hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use crate::hir::def::{DefKind, Res};\n+use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n use crate::hir::itemlikevisit::ItemLikeVisitor;\n use crate::hir::print::Nested;\n-use crate::hir::DefKind;\n use crate::hir::*;\n use crate::middle::cstore::CrateStoreDyn;\n use crate::ty::query::Providers;\n use crate::util::common::time;\n-use crate::util::nodemap::FxHashMap;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n+use rustc_span::symbol::kw;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n@@ -1203,7 +1204,7 @@ impl Named for ImplItem<'_> {\n }\n \n pub fn map_crate<'hir>(\n-    sess: &crate::session::Session,\n+    sess: &rustc_session::Session,\n     cstore: &CrateStoreDyn,\n     forest: &'hir Forest<'hir>,\n     definitions: Definitions,\n@@ -1265,45 +1266,6 @@ impl<'hir> print::PpAnn for Map<'hir> {\n     }\n }\n \n-impl<'a> print::State<'a> {\n-    pub fn print_node(&mut self, node: Node<'_>) {\n-        match node {\n-            Node::Param(a) => self.print_param(&a),\n-            Node::Item(a) => self.print_item(&a),\n-            Node::ForeignItem(a) => self.print_foreign_item(&a),\n-            Node::TraitItem(a) => self.print_trait_item(a),\n-            Node::ImplItem(a) => self.print_impl_item(a),\n-            Node::Variant(a) => self.print_variant(&a),\n-            Node::AnonConst(a) => self.print_anon_const(&a),\n-            Node::Expr(a) => self.print_expr(&a),\n-            Node::Stmt(a) => self.print_stmt(&a),\n-            Node::PathSegment(a) => self.print_path_segment(&a),\n-            Node::Ty(a) => self.print_type(&a),\n-            Node::TraitRef(a) => self.print_trait_ref(&a),\n-            Node::Binding(a) | Node::Pat(a) => self.print_pat(&a),\n-            Node::Arm(a) => self.print_arm(&a),\n-            Node::Block(a) => {\n-                // Containing cbox, will be closed by print-block at `}`.\n-                self.cbox(print::INDENT_UNIT);\n-                // Head-ibox, will be closed by print-block after `{`.\n-                self.ibox(0);\n-                self.print_block(&a)\n-            }\n-            Node::Lifetime(a) => self.print_lifetime(&a),\n-            Node::Visibility(a) => self.print_visibility(&a),\n-            Node::GenericParam(_) => bug!(\"cannot print Node::GenericParam\"),\n-            Node::Field(_) => bug!(\"cannot print StructField\"),\n-            // These cases do not carry enough information in the\n-            // `hir_map` to reconstruct their full structure for pretty\n-            // printing.\n-            Node::Ctor(..) => bug!(\"cannot print isolated Ctor\"),\n-            Node::Local(a) => self.print_local_decl(&a),\n-            Node::MacroDef(_) => bug!(\"cannot print MacroDef\"),\n-            Node::Crate => bug!(\"cannot print Crate\"),\n-        }\n-    }\n-}\n-\n fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n     let id_str = format!(\" (hir_id={})\", id);\n     let id_str = if include_id { &id_str[..] } else { \"\" };"}, {"sha": "86cad00af17a8d547c9f12b7187e9db248560987", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -33,10 +33,10 @@ pub struct StableHashingContext<'a> {\n     sess: &'a Session,\n     definitions: &'a Definitions,\n     cstore: &'a dyn CrateStore,\n-    body_resolver: BodyResolver<'a>,\n+    pub(super) body_resolver: BodyResolver<'a>,\n     hash_spans: bool,\n     hash_bodies: bool,\n-    node_id_hashing_mode: NodeIdHashingMode,\n+    pub(super) node_id_hashing_mode: NodeIdHashingMode,\n \n     // Very often, we are hashing something that does not need the\n     // `CachingSourceMapView`, so we initialize it lazily.\n@@ -54,12 +54,12 @@ pub enum NodeIdHashingMode {\n /// We could also just store a plain reference to the `hir::Crate` but we want\n /// to avoid that the crate is used to get untracked access to all of the HIR.\n #[derive(Clone, Copy)]\n-struct BodyResolver<'tcx>(&'tcx hir::Crate<'tcx>);\n+pub(super) struct BodyResolver<'tcx>(&'tcx hir::Crate<'tcx>);\n \n impl<'tcx> BodyResolver<'tcx> {\n     /// Returns a reference to the `hir::Body` with the given `BodyId`.\n     /// **Does not do any tracking**; use carefully.\n-    fn body(self, id: hir::BodyId) -> &'tcx hir::Body<'tcx> {\n+    pub(super) fn body(self, id: hir::BodyId) -> &'tcx hir::Body<'tcx> {\n         self.0.body(id)\n     }\n }\n@@ -207,31 +207,6 @@ impl<'a> StableHashingContextProvider<'a> for StableHashingContext<'a> {\n \n impl<'a> crate::dep_graph::DepGraphSafe for StableHashingContext<'a> {}\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::BodyId {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        if hcx.hash_bodies() {\n-            hcx.body_resolver.body(*self).hash_stable(hcx, hasher);\n-        }\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::HirId {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        match hcx.node_id_hashing_mode {\n-            NodeIdHashingMode::Ignore => {\n-                // Don't do anything.\n-            }\n-            NodeIdHashingMode::HashDefPath => {\n-                let hir::HirId { owner, local_id } = *self;\n-\n-                hcx.local_def_path_hash(owner).hash_stable(hcx, hasher);\n-                local_id.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::HirId {\n     type KeyType = (DefPathHash, hir::ItemLocalId);\n "}, {"sha": "f69051fd85dd2270db17a29247ab418f15779d8d", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 125, "deletions": 106, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -11,10 +11,132 @@ use smallvec::SmallVec;\n use std::mem;\n use syntax::attr;\n \n-impl<'a> HashStable<StableHashingContext<'a>> for DefId {\n+impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n     #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        hcx.def_path_hash(*self).hash_stable(hcx, hasher);\n+    fn hash_def_id(&mut self, def_id: DefId, hasher: &mut StableHasher) {\n+        let hcx = self;\n+        hcx.def_path_hash(def_id).hash_stable(hcx, hasher);\n+    }\n+\n+    #[inline]\n+    fn hash_hir_id(&mut self, hir_id: hir::HirId, hasher: &mut StableHasher) {\n+        let hcx = self;\n+        match hcx.node_id_hashing_mode {\n+            NodeIdHashingMode::Ignore => {\n+                // Don't do anything.\n+            }\n+            NodeIdHashingMode::HashDefPath => {\n+                let hir::HirId { owner, local_id } = hir_id;\n+\n+                hcx.local_def_path_hash(owner).hash_stable(hcx, hasher);\n+                local_id.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+\n+    fn hash_body_id(&mut self, id: hir::BodyId, hasher: &mut StableHasher) {\n+        let hcx = self;\n+        if hcx.hash_bodies() {\n+            hcx.body_resolver.body(id).hash_stable(hcx, hasher);\n+        }\n+    }\n+\n+    // The following implementations of HashStable for `ItemId`, `TraitItemId`, and\n+    // `ImplItemId` deserve special attention. Normally we do not hash `NodeId`s within\n+    // the HIR, since they just signify a HIR nodes own path. But `ItemId` et al\n+    // are used when another item in the HIR is *referenced* and we certainly\n+    // want to pick up on a reference changing its target, so we hash the NodeIds\n+    // in \"DefPath Mode\".\n+\n+    fn hash_item_id(&mut self, id: hir::ItemId, hasher: &mut StableHasher) {\n+        let hcx = self;\n+        let hir::ItemId { id } = id;\n+\n+        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+            id.hash_stable(hcx, hasher);\n+        })\n+    }\n+\n+    fn hash_impl_item_id(&mut self, id: hir::ImplItemId, hasher: &mut StableHasher) {\n+        let hcx = self;\n+        let hir::ImplItemId { hir_id } = id;\n+\n+        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+            hir_id.hash_stable(hcx, hasher);\n+        })\n+    }\n+\n+    fn hash_trait_item_id(&mut self, id: hir::TraitItemId, hasher: &mut StableHasher) {\n+        let hcx = self;\n+        let hir::TraitItemId { hir_id } = id;\n+\n+        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+            hir_id.hash_stable(hcx, hasher);\n+        })\n+    }\n+\n+    fn hash_hir_mod(&mut self, module: &hir::Mod<'_>, hasher: &mut StableHasher) {\n+        let hcx = self;\n+        let hir::Mod { inner: ref inner_span, ref item_ids } = *module;\n+\n+        inner_span.hash_stable(hcx, hasher);\n+\n+        // Combining the `DefPathHash`s directly is faster than feeding them\n+        // into the hasher. Because we use a commutative combine, we also don't\n+        // have to sort the array.\n+        let item_ids_hash = item_ids\n+            .iter()\n+            .map(|id| {\n+                let (def_path_hash, local_id) = id.id.to_stable_hash_key(hcx);\n+                debug_assert_eq!(local_id, hir::ItemLocalId::from_u32(0));\n+                def_path_hash.0\n+            })\n+            .fold(Fingerprint::ZERO, |a, b| a.combine_commutative(b));\n+\n+        item_ids.len().hash_stable(hcx, hasher);\n+        item_ids_hash.hash_stable(hcx, hasher);\n+    }\n+\n+    fn hash_hir_expr(&mut self, expr: &hir::Expr<'_>, hasher: &mut StableHasher) {\n+        self.while_hashing_hir_bodies(true, |hcx| {\n+            let hir::Expr { hir_id: _, ref span, ref kind, ref attrs } = *expr;\n+\n+            span.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n+        })\n+    }\n+\n+    fn hash_hir_ty(&mut self, ty: &hir::Ty<'_>, hasher: &mut StableHasher) {\n+        self.while_hashing_hir_bodies(true, |hcx| {\n+            let hir::Ty { hir_id: _, ref kind, ref span } = *ty;\n+\n+            kind.hash_stable(hcx, hasher);\n+            span.hash_stable(hcx, hasher);\n+        })\n+    }\n+\n+    fn hash_hir_visibility_kind(\n+        &mut self,\n+        vis: &hir::VisibilityKind<'_>,\n+        hasher: &mut StableHasher,\n+    ) {\n+        let hcx = self;\n+        mem::discriminant(vis).hash_stable(hcx, hasher);\n+        match *vis {\n+            hir::VisibilityKind::Public | hir::VisibilityKind::Inherited => {\n+                // No fields to hash.\n+            }\n+            hir::VisibilityKind::Crate(sugar) => {\n+                sugar.hash_stable(hcx, hasher);\n+            }\n+            hir::VisibilityKind::Restricted { ref path, hir_id } => {\n+                hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+                    hir_id.hash_stable(hcx, hasher);\n+                });\n+                path.hash_stable(hcx, hasher);\n+            }\n+        }\n     }\n }\n \n@@ -69,66 +191,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::ItemLocalId {\n     }\n }\n \n-// The following implementations of HashStable for `ItemId`, `TraitItemId`, and\n-// `ImplItemId` deserve special attention. Normally we do not hash `NodeId`s within\n-// the HIR, since they just signify a HIR nodes own path. But `ItemId` et al\n-// are used when another item in the HIR is *referenced* and we certainly\n-// want to pick up on a reference changing its target, so we hash the NodeIds\n-// in \"DefPath Mode\".\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::ItemId {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::ItemId { id } = *self;\n-\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            id.hash_stable(hcx, hasher);\n-        })\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitItemId {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::TraitItemId { hir_id } = *self;\n-\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            hir_id.hash_stable(hcx, hasher);\n-        })\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItemId {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::ImplItemId { hir_id } = *self;\n-\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            hir_id.hash_stable(hcx, hasher);\n-        })\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::Ty<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        hcx.while_hashing_hir_bodies(true, |hcx| {\n-            let hir::Ty { hir_id: _, ref kind, ref span } = *self;\n-\n-            kind.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-        })\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::Expr<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        hcx.while_hashing_hir_bodies(true, |hcx| {\n-            let hir::Expr { hir_id: _, ref span, ref kind, ref attrs } = *self;\n-\n-            span.hash_stable(hcx, hasher);\n-            kind.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n-        })\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitItem<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::TraitItem { hir_id: _, ident, ref attrs, ref generics, ref kind, span } = *self;\n@@ -168,49 +230,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem<'_> {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::VisibilityKind<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-        match *self {\n-            hir::VisibilityKind::Public | hir::VisibilityKind::Inherited => {\n-                // No fields to hash.\n-            }\n-            hir::VisibilityKind::Crate(sugar) => {\n-                sugar.hash_stable(hcx, hasher);\n-            }\n-            hir::VisibilityKind::Restricted { ref path, hir_id } => {\n-                hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-                    hir_id.hash_stable(hcx, hasher);\n-                });\n-                path.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::Mod<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::Mod { inner: ref inner_span, ref item_ids } = *self;\n-\n-        inner_span.hash_stable(hcx, hasher);\n-\n-        // Combining the `DefPathHash`s directly is faster than feeding them\n-        // into the hasher. Because we use a commutative combine, we also don't\n-        // have to sort the array.\n-        let item_ids_hash = item_ids\n-            .iter()\n-            .map(|id| {\n-                let (def_path_hash, local_id) = id.id.to_stable_hash_key(hcx);\n-                debug_assert_eq!(local_id, hir::ItemLocalId::from_u32(0));\n-                def_path_hash.0\n-            })\n-            .fold(Fingerprint::ZERO, |a, b| a.combine_commutative(b));\n-\n-        item_ids.len().hash_stable(hcx, hasher);\n-        item_ids_hash.hash_stable(hcx, hasher);\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::Item<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::Item { ident, ref attrs, hir_id: _, ref kind, ref vis, span } = *self;"}, {"sha": "e72a5241fadb174b7f19ec4123011bf3646a3e8c", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -43,25 +43,23 @@ impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for ast::Attribute {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+impl<'ctx> syntax::HashStableContext for StableHashingContext<'ctx> {\n+    fn hash_attr(&mut self, attr: &ast::Attribute, hasher: &mut StableHasher) {\n         // Make sure that these have been filtered out.\n-        debug_assert!(!self.ident().map_or(false, |ident| hcx.is_ignored_attr(ident.name)));\n-        debug_assert!(!self.is_doc_comment());\n+        debug_assert!(!attr.ident().map_or(false, |ident| self.is_ignored_attr(ident.name)));\n+        debug_assert!(!attr.is_doc_comment());\n \n-        let ast::Attribute { kind, id: _, style, span } = self;\n+        let ast::Attribute { kind, id: _, style, span } = attr;\n         if let ast::AttrKind::Normal(item) = kind {\n-            item.hash_stable(hcx, hasher);\n-            style.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n+            item.hash_stable(self, hasher);\n+            style.hash_stable(self, hasher);\n+            span.hash_stable(self, hasher);\n         } else {\n             unreachable!();\n         }\n     }\n }\n \n-impl<'ctx> syntax::HashStableContext for StableHashingContext<'ctx> {}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let SourceFile {"}, {"sha": "16087959972b7671692350f18c5a974d19ea4b53", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -33,7 +33,8 @@\n \n use crate::ty::fold::TypeFolder;\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use crate::util::nodemap::FxHashMap;\n+\n+use rustc_data_structures::fx::FxHashMap;\n \n use std::collections::hash_map::Entry;\n "}, {"sha": "b7a3ff6987cb586519b5cadd07c0dd4a3c2ceb64", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -15,7 +15,7 @@ use crate::infer::SubregionOrigin;\n use crate::middle::free_region::RegionRelations;\n use crate::middle::region;\n use crate::ty;\n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use std::borrow::Cow;\n use std::collections::btree_map::BTreeMap;"}, {"sha": "5c11659b550ce3bd5596cf1c169f0c6da6b810c4", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -22,9 +22,9 @@ use crate::ty::relate::RelateResult;\n use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use crate::ty::{ConstVid, FloatVid, IntVid, TyVid};\n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n use errors::DiagnosticBuilder;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n use rustc_span::symbol::Symbol;"}, {"sha": "638ab01baac70d11a76982db493d60c76137b64f", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,5 +1,5 @@\n use crate::hir;\n-use crate::hir::def_id::DefId;\n+use crate::hir::def_id::{DefId, DefIdMap};\n use crate::hir::Node;\n use crate::infer::outlives::free_region_map::FreeRegionRelations;\n use crate::infer::{self, InferCtxt, InferOk, TypeVariableOrigin, TypeVariableOriginKind};\n@@ -8,7 +8,6 @@ use crate::traits::{self, PredicateObligation};\n use crate::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n-use crate::util::nodemap::DefIdMap;\n use errors::DiagnosticBuilder;\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "9882b021ff30e5ed9b12b07eeae736c992c66881", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -105,7 +105,6 @@ pub mod util {\n     pub mod bug;\n     pub mod captures;\n     pub mod common;\n-    pub mod nodemap;\n }\n \n // Allows macros to refer to this crate as `::rustc`"}, {"sha": "ca6a7beb48ed4330a6d77c118fbe48689702ed64", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -27,9 +27,8 @@ use crate::middle::privacy::AccessLevels;\n use crate::session::Session;\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n-use crate::util::nodemap::FxHashMap;\n-\n use errors::DiagnosticBuilder;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_span::{symbol::Symbol, MultiSpan, Span};\n use std::slice;"}, {"sha": "40e6f22c25f3df594d774f3ccc16cda8311dd68d", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -6,8 +6,8 @@ use crate::lint::builtin;\n use crate::lint::context::{CheckLintNameResult, LintStore};\n use crate::lint::{self, Level, Lint, LintId, LintSource};\n use crate::session::Session;\n-use crate::util::nodemap::FxHashMap;\n use errors::{Applicability, DiagnosticBuilder};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "3c5566923130150497cd21e2cb36a015121181cd", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -25,10 +25,10 @@ use rustc_data_structures::sync;\n \n use crate::hir;\n use crate::lint::builtin::BuiltinLintDiagnostics;\n-use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::TyCtxt;\n-use crate::util::nodemap::NodeMap;\n use errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_session::node_id::NodeMap;\n+use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n use rustc_span::symbol::Symbol;"}, {"sha": "3b109f2fea687442660cb4cf31d3bcbbbe635004", "filename": "src/librustc/middle/codegen_fn_attrs.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -0,0 +1,116 @@\n+use crate::mir::mono::Linkage;\n+use rustc_span::symbol::Symbol;\n+use syntax::attr::{InlineAttr, OptimizeAttr};\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub struct CodegenFnAttrs {\n+    pub flags: CodegenFnAttrFlags,\n+    /// Parsed representation of the `#[inline]` attribute\n+    pub inline: InlineAttr,\n+    /// Parsed representation of the `#[optimize]` attribute\n+    pub optimize: OptimizeAttr,\n+    /// The `#[export_name = \"...\"]` attribute, indicating a custom symbol a\n+    /// function should be exported under\n+    pub export_name: Option<Symbol>,\n+    /// The `#[link_name = \"...\"]` attribute, indicating a custom symbol an\n+    /// imported function should be imported as. Note that `export_name`\n+    /// probably isn't set when this is set, this is for foreign items while\n+    /// `#[export_name]` is for Rust-defined functions.\n+    pub link_name: Option<Symbol>,\n+    /// The `#[link_ordinal = \"...\"]` attribute, indicating an ordinal an\n+    /// imported function has in the dynamic library. Note that this must not\n+    /// be set when `link_name` is set. This is for foreign items with the\n+    /// \"raw-dylib\" kind.\n+    pub link_ordinal: Option<usize>,\n+    /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n+    /// features (only enabled features are supported right now).\n+    pub target_features: Vec<Symbol>,\n+    /// The `#[linkage = \"...\"]` attribute and the value we found.\n+    pub linkage: Option<Linkage>,\n+    /// The `#[link_section = \"...\"]` attribute, or what executable section this\n+    /// should be placed in.\n+    pub link_section: Option<Symbol>,\n+}\n+\n+bitflags! {\n+    #[derive(RustcEncodable, RustcDecodable, HashStable)]\n+    pub struct CodegenFnAttrFlags: u32 {\n+        /// `#[cold]`: a hint to LLVM that this function, when called, is never on\n+        /// the hot path.\n+        const COLD                      = 1 << 0;\n+        /// `#[rustc_allocator]`: a hint to LLVM that the pointer returned from this\n+        /// function is never null.\n+        const ALLOCATOR                 = 1 << 1;\n+        /// `#[unwind]`: an indicator that this function may unwind despite what\n+        /// its ABI signature may otherwise imply.\n+        const UNWIND                    = 1 << 2;\n+        /// `#[rust_allocator_nounwind]`, an indicator that an imported FFI\n+        /// function will never unwind. Probably obsolete by recent changes with\n+        /// #[unwind], but hasn't been removed/migrated yet\n+        const RUSTC_ALLOCATOR_NOUNWIND  = 1 << 3;\n+        /// `#[naked]`: an indicator to LLVM that no function prologue/epilogue\n+        /// should be generated.\n+        const NAKED                     = 1 << 4;\n+        /// `#[no_mangle]`: an indicator that the function's name should be the same\n+        /// as its symbol.\n+        const NO_MANGLE                 = 1 << 5;\n+        /// `#[rustc_std_internal_symbol]`: an indicator that this symbol is a\n+        /// \"weird symbol\" for the standard library in that it has slightly\n+        /// different linkage, visibility, and reachability rules.\n+        const RUSTC_STD_INTERNAL_SYMBOL = 1 << 6;\n+        /// `#[no_debug]`: an indicator that no debugging information should be\n+        /// generated for this function by LLVM.\n+        const NO_DEBUG                  = 1 << 7;\n+        /// `#[thread_local]`: indicates a static is actually a thread local\n+        /// piece of memory\n+        const THREAD_LOCAL              = 1 << 8;\n+        /// `#[used]`: indicates that LLVM can't eliminate this function (but the\n+        /// linker can!).\n+        const USED                      = 1 << 9;\n+        /// `#[ffi_returns_twice]`, indicates that an extern function can return\n+        /// multiple times\n+        const FFI_RETURNS_TWICE         = 1 << 10;\n+        /// `#[track_caller]`: allow access to the caller location\n+        const TRACK_CALLER              = 1 << 11;\n+    }\n+}\n+\n+impl CodegenFnAttrs {\n+    pub fn new() -> CodegenFnAttrs {\n+        CodegenFnAttrs {\n+            flags: CodegenFnAttrFlags::empty(),\n+            inline: InlineAttr::None,\n+            optimize: OptimizeAttr::None,\n+            export_name: None,\n+            link_name: None,\n+            link_ordinal: None,\n+            target_features: vec![],\n+            linkage: None,\n+            link_section: None,\n+        }\n+    }\n+\n+    /// Returns `true` if `#[inline]` or `#[inline(always)]` is present.\n+    pub fn requests_inline(&self) -> bool {\n+        match self.inline {\n+            InlineAttr::Hint | InlineAttr::Always => true,\n+            InlineAttr::None | InlineAttr::Never => false,\n+        }\n+    }\n+\n+    /// Returns `true` if it looks like this symbol needs to be exported, for example:\n+    ///\n+    /// * `#[no_mangle]` is present\n+    /// * `#[export_name(...)]` is present\n+    /// * `#[linkage]` is present\n+    pub fn contains_extern_indicator(&self) -> bool {\n+        self.flags.contains(CodegenFnAttrFlags::NO_MANGLE)\n+            || self.export_name.is_some()\n+            || match self.linkage {\n+                // These are private, so make sure we don't try to consider\n+                // them external.\n+                None | Some(Linkage::Internal) | Some(Linkage::Private) => false,\n+                Some(_) => true,\n+            }\n+    }\n+}"}, {"sha": "0e9a2a39fd912663a2c574f66debd2ffbe48b521", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -9,15 +9,15 @@\n \n pub use self::LangItem::*;\n \n+use crate::hir;\n use crate::hir::check_attr::Target;\n use crate::hir::def_id::DefId;\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n use crate::middle::cstore::ExternCrate;\n use crate::middle::weak_lang_items;\n use crate::ty::{self, TyCtxt};\n-use crate::util::nodemap::FxHashMap;\n \n-use crate::hir;\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;"}, {"sha": "c2959766c570a5de3da4cdac0ca7a181b93773c3", "filename": "src/librustc/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,3 +1,4 @@\n+pub mod codegen_fn_attrs;\n pub mod cstore;\n pub mod dependency_format;\n pub mod exported_symbols;"}, {"sha": "c4da4d75f4de2056ef7315a6863a5874ddaa651e", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -2,9 +2,10 @@\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n \n+use crate::hir::def_id::DefIdSet;\n use crate::hir::HirId;\n-use crate::util::nodemap::{DefIdSet, FxHashMap};\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_macros::HashStable;\n use std::fmt;\n use std::hash::Hash;"}, {"sha": "ee96b595f6fde92c9e685b92a1550716c79866c8", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -11,8 +11,8 @@ use crate::hir::def_id::DefId;\n use crate::hir::Node;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{self, DefIdTree, TyCtxt};\n-use crate::util::nodemap::FxHashMap;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;"}, {"sha": "951181c8900ce1efb184457c1b3e2abf3dc2db89", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -5,7 +5,7 @@ use crate::hir::{GenericParam, ItemLocalId};\n use crate::hir::{GenericParamKind, LifetimeParamKind};\n use crate::ty;\n \n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_macros::HashStable;\n \n /// The origin of a named lifetime definition."}, {"sha": "0c756c71fbdf68d5d57bd4721a0c999c8d00a85f", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -10,8 +10,9 @@ use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::{self, in_derive_expansion, Lint};\n use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n+\n use errors::DiagnosticBuilder;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::GateIssue;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};"}, {"sha": "2dbe1d4fa5c49413d721fea66743f2cc14ff62ff", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -5,8 +5,8 @@ use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use crate::session::config::OptLevel;\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n-use crate::util::nodemap::FxHashMap;\n use rustc_data_structures::base_n;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;"}, {"sha": "e81497351cabba79a44a4f3ea502a7cc7ef54025", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -16,6 +16,14 @@ use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc_span::symbol::Symbol;\n use std::borrow::Cow;\n \n+fn describe_as_module(def_id: DefId, tcx: TyCtxt<'_>) -> String {\n+    if def_id.is_top_level_module() {\n+        format!(\"top-level module\")\n+    } else {\n+        format!(\"module `{}`\", tcx.def_path_str(def_id))\n+    }\n+}\n+\n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n // on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way\n@@ -332,50 +340,50 @@ rustc_queries! {\n \n     Other {\n         query lint_mod(key: DefId) -> () {\n-            desc { |tcx| \"linting {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"linting {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Checks the attributes in the module.\n         query check_mod_attrs(key: DefId) -> () {\n-            desc { |tcx| \"checking attributes in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking attributes in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_unstable_api_usage(key: DefId) -> () {\n-            desc { |tcx| \"checking for unstable API usage in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking for unstable API usage in {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Checks the const bodies in the module for illegal operations (e.g. `if` or `loop`).\n         query check_mod_const_bodies(key: DefId) -> () {\n-            desc { |tcx| \"checking consts in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking consts in {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Checks the loops in the module.\n         query check_mod_loops(key: DefId) -> () {\n-            desc { |tcx| \"checking loops in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking loops in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_item_types(key: DefId) -> () {\n-            desc { |tcx| \"checking item types in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking item types in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_privacy(key: DefId) -> () {\n-            desc { |tcx| \"checking privacy in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking privacy in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_intrinsics(key: DefId) -> () {\n-            desc { |tcx| \"checking intrinsics in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking intrinsics in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_liveness(key: DefId) -> () {\n-            desc { |tcx| \"checking liveness of variables in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking liveness of variables in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_impl_wf(key: DefId) -> () {\n-            desc { |tcx| \"checking that impls are well-formed in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking that impls are well-formed in {}\", describe_as_module(key, tcx) }\n         }\n \n         query collect_mod_item_types(key: DefId) -> () {\n-            desc { |tcx| \"collecting item types in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"collecting item types in {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Caches `CoerceUnsized` kinds for impls on custom types."}, {"sha": "3fef1dd064edb0291fc36f8e58c848c788edb71b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -21,10 +21,10 @@ use crate::ty::GenericParamDefKind;\n use crate::ty::SubtypePredicate;\n use crate::ty::TypeckTables;\n use crate::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n use errors::{pluralize, Applicability, DiagnosticBuilder, Style};\n use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};"}, {"sha": "f1a04da188ba0ad376d1e924462c04ac374a17ca", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -3,8 +3,8 @@ use fmt_macros::{Parser, Piece, Position};\n use crate::hir::def_id::DefId;\n use crate::ty::{self, GenericParamDefKind, TyCtxt};\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::FxHashMap;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::{MetaItem, NestedMetaItem};"}, {"sha": "0d35ad2a4cdda0184da962fa4128b26b7a112888", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -39,7 +39,7 @@ use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n \n use crate::hir;\n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lock;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::symbol::sym;"}, {"sha": "200c2188ac360d9b05c9489e6a13ede6a84ef12f", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,11 +1,11 @@\n use super::OverlapError;\n \n-use crate::hir::def_id::DefId;\n+use crate::hir::def_id::{DefId, DefIdMap};\n use crate::ich::{self, StableHashingContext};\n use crate::traits;\n use crate::ty::fast_reject::{self, SimplifiedType};\n use crate::ty::{self, TyCtxt, TypeFoldable};\n-use crate::util::nodemap::{DefIdMap, FxHashMap};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use syntax::ast::Ident;\n "}, {"sha": "995131178284985a972c016b51178825cb234985", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -7,7 +7,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::outlives::Component;\n use crate::ty::subst::{GenericArg, Subst, SubstsRef};\n use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt};\n-use crate::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n "}, {"sha": "86042d86b939c12b7e95d42e81e64a389be9f792", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -3,11 +3,13 @@\n use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepConstructor, DepNode};\n-use crate::hir::def::{DefKind, Export, Res};\n-use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use crate::hir::def::{DefKind, Res};\n+use crate::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n+use crate::hir::exports::Export;\n use crate::hir::map as hir_map;\n use crate::hir::map::DefPathHash;\n-use crate::hir::{self, HirId, ItemKind, ItemLocalId, Node, TraitCandidate};\n+use crate::hir::{self, HirId, Node, TraitCandidate};\n+use crate::hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::infer::outlives::free_region_map::FreeRegionMap;\n@@ -46,11 +48,10 @@ use crate::ty::{ExistentialPredicate, InferTy, ParamTy, PolyFnSig, Predicate, Pr\n use crate::ty::{InferConst, ParamConst};\n use crate::ty::{List, TyKind, TyS};\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap, ItemLocalSet, NodeMap};\n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n use arena::SyncDroplessArena;\n use errors::DiagnosticBuilder;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::ShardedHashMap;\n use rustc_data_structures::stable_hasher::{\n@@ -59,6 +60,7 @@ use rustc_data_structures::stable_hasher::{\n use rustc_data_structures::sync::{Lock, Lrc, WorkerLocal};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n+use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;"}, {"sha": "7004cec8a31cefc90b3eaa6f4d09521a79035558", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -34,7 +34,7 @@\n use crate::hir::def_id::DefId;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n \n-use crate::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use std::collections::BTreeMap;\n use std::fmt;\n "}, {"sha": "a7e716ad7b730a2d2092e5101eb2618ccd0bfc09", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,6 +1,6 @@\n use crate::hir::def::Namespace;\n use crate::hir::def_id::DefId;\n-use crate::hir::CodegenFnAttrFlags;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::middle::lang_items::DropInPlaceFnLangItem;\n use crate::traits;\n use crate::ty::print::{FmtPrinter, Printer};"}, {"sha": "1ce74a61c0e42bced56e1d761fd6cbb375158b73", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -6,8 +6,9 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::Variance::*;\n \n-use crate::hir::def::{CtorKind, CtorOf, DefKind, ExportMap, Res};\n-use crate::hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::hir::def::{CtorKind, CtorOf, DefKind, Res};\n+use crate::hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::hir::exports::ExportMap;\n use crate::hir::Node;\n use crate::hir::{map as hir_map, GlobMap, TraitMap};\n use crate::ich::Fingerprint;\n@@ -28,10 +29,11 @@ use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n use crate::ty::walk::TypeWalker;\n use crate::util::captures::Captures;\n-use crate::util::nodemap::{DefIdMap, FxHashMap, NodeMap, NodeSet};\n use arena::SyncDroplessArena;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_macros::HashStable;\n+use rustc_session::node_id::{NodeMap, NodeSet};\n \n use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n use rustc_serialize::{self, Encodable, Encoder};"}, {"sha": "0ec3874e6a117396fef5c06ccb43d8f049ea7e6e", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,9 +1,11 @@\n use crate::dep_graph::{self, DepNode};\n-use crate::hir::def::{DefKind, Export};\n-use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n-use crate::hir::{self, CodegenFnAttrs, ItemLocalId, TraitCandidate};\n+use crate::hir::def::DefKind;\n+use crate::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex};\n+use crate::hir::exports::Export;\n+use crate::hir::{self, HirIdSet, ItemLocalId, TraitCandidate};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::cstore::{CrateSource, DepKind, NativeLibraryKind};\n use crate::middle::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLibrary};\n use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n@@ -36,7 +38,6 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::util::NeedsDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::{DefIdMap, DefIdSet, HirIdSet};\n use rustc_data_structures::profiling::ProfileCategory::*;\n \n use rustc_data_structures::fingerprint::Fingerprint;"}, {"sha": "ce0f77e0b6d37d7525824f5dfe0f1f5ccf27254b", "filename": "src/librustc/util/nodemap.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/760ce94c69ca510d44087291c311296f6d9ccdf5/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760ce94c69ca510d44087291c311296f6d9ccdf5/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=760ce94c69ca510d44087291c311296f6d9ccdf5", "patch": "@@ -1,20 +0,0 @@\n-//! An efficient hash map for `NodeId`s.\n-\n-use crate::hir::def_id::DefId;\n-use crate::hir::{HirId, ItemLocalId};\n-use syntax::ast;\n-\n-pub use rustc_data_structures::fx::FxHashMap;\n-pub use rustc_data_structures::fx::FxHashSet;\n-\n-macro_rules! define_id_collections {\n-    ($map_name:ident, $set_name:ident, $key:ty) => {\n-        pub type $map_name<T> = FxHashMap<$key, T>;\n-        pub type $set_name = FxHashSet<$key>;\n-    };\n-}\n-\n-define_id_collections!(NodeMap, NodeSet, ast::NodeId);\n-define_id_collections!(DefIdMap, DefIdSet, DefId);\n-define_id_collections!(HirIdMap, HirIdSet, HirId);\n-define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);"}, {"sha": "76980dfa31db4c051cfe2d59d6204749d8c8afc8", "filename": "src/librustc_ast_lowering/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_ast_lowering%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_ast_lowering%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2FCargo.toml?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -18,5 +18,6 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_errors = { path = \"../librustc_errors\" }\n+rustc_session = { path = \"../librustc_session\" }\n syntax = { path = \"../libsyntax\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "7e7e2d1e10892efd05f338c094661c3655b64d14", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -6,8 +6,8 @@ use rustc::bug;\n use rustc::hir;\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::DefId;\n-use rustc::util::nodemap::NodeMap;\n use rustc_error_codes::*;\n+use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;"}, {"sha": "5694bedb199377fdf6399915fe3aac7eae5757a1", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -37,7 +37,7 @@\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n-use rustc::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{DefId, DefIdMap, DefIndex, CRATE_DEF_INDEX};\n use rustc::hir::map::{DefKey, DefPathData, Definitions};\n use rustc::hir::{self, ConstArg, GenericArg, ParamName};\n use rustc::lint;\n@@ -47,13 +47,13 @@ use rustc::session::config::nightly_options;\n use rustc::session::Session;\n use rustc::util::captures::Captures;\n use rustc::util::common::FN_OUTPUT_NAME;\n-use rustc::util::nodemap::{DefIdMap, NodeMap};\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_error_codes::*;\n use rustc_errors::Applicability;\n use rustc_index::vec::IndexVec;\n+use rustc_session::node_id::NodeMap;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind, ExpnData, ExpnKind, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "a7826282314eb553bcf30a2f2e8cdd9fcb779b90", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -3,7 +3,7 @@\n use std::ffi::CString;\n \n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::session::config::{OptLevel, Sanitizer};\n use rustc::session::Session;\n use rustc::ty::layout::HasTyCtxt;"}, {"sha": "cb44a56d0751636b6535bc77ea1f0c26e56bb004", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -14,33 +14,32 @@\n //!   int)` and `rec(x=int, y=int, z=int)` will have the same `llvm::Type`.\n \n use super::{LlvmCodegenBackend, ModuleLlvm};\n-use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n-use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n \n use crate::builder::Builder;\n use crate::common;\n use crate::context::CodegenCx;\n use crate::llvm;\n use crate::metadata;\n+use crate::value::Value;\n+\n use rustc::dep_graph;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::exported_symbols;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::session::config::DebugInfo;\n use rustc::ty::TyCtxt;\n-use rustc_codegen_ssa::mono_item::MonoItemExt;\n-use rustc_data_structures::small_c_str::SmallCStr;\n-\n use rustc_codegen_ssa::back::write::submit_codegened_module_to_llvm;\n+use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n+use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::*;\n-\n-use rustc::hir::CodegenFnAttrs;\n+use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n+use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_span::symbol::Symbol;\n+\n use std::ffi::CString;\n use std::time::Instant;\n \n-use crate::value::Value;\n-\n pub fn write_compressed_metadata<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     metadata: &EncodedMetadata,"}, {"sha": "4b4fbd0e1ad53a8f2f2227f2e20d721d5c4826d7", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -8,20 +8,18 @@ use crate::value::Value;\n use libc::c_uint;\n use log::debug;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::Node;\n+use rustc::hir::{self, Node};\n+use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::interpret::{read_target_uint, Allocation, ConstValue, ErrorHandled, Pointer};\n use rustc::mir::mono::MonoItem;\n+use rustc::ty::layout::{self, Align, LayoutOf, Size};\n use rustc::ty::{self, Instance, Ty};\n use rustc::{bug, span_bug};\n use rustc_codegen_ssa::traits::*;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::HasDataLayout;\n \n-use rustc::ty::layout::{self, Align, LayoutOf, Size};\n-\n-use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs};\n-\n use std::ffi::CStr;\n \n pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll Value {"}, {"sha": "746b76ad1c7d0223fbcea28e08ebe471245a79f7", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -19,10 +19,10 @@ use rustc::ty::layout::{\n     FnAbiExt, HasParamEnv, LayoutError, LayoutOf, PointeeInfo, Size, TyLayout, VariantIdx,\n };\n use rustc::ty::{self, Instance, Ty, TyCtxt};\n-use rustc::util::nodemap::FxHashMap;\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use rustc_data_structures::base_n;\n use rustc_data_structures::const_cstr;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_target::spec::{HasTargetSpec, Target};\n "}, {"sha": "88e692cb11747aeb9d8704282a9713b6cb6bc305", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -22,8 +22,8 @@ use crate::value::Value;\n use log::debug;\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n use rustc::ich::NodeIdHashingMode;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::interpret::truncate;\n use rustc::mir::{self, Field, GeneratorLayout};\n use rustc::session::config::{self, DebugInfo};\n@@ -33,11 +33,11 @@ use rustc::ty::layout::{\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::Instance;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n-use rustc::util::nodemap::FxHashMap;\n use rustc::{bug, span_bug};\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_fs_util::path_to_c_string;"}, {"sha": "0edfd3457746ddd206506545f603c843c5f28271", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -13,8 +13,8 @@ use crate::llvm;\n use crate::llvm::debuginfo::{\n     DIArray, DIBuilder, DIFile, DIFlags, DILexicalBlock, DISPFlags, DIScope, DIType,\n };\n-use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n+use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n \n use crate::abi::FnAbi;\n@@ -24,9 +24,9 @@ use crate::value::Value;\n use rustc::mir;\n use rustc::session::config::{self, DebugInfo};\n use rustc::ty::{self, Instance, InstanceDef, ParamEnv, Ty};\n-use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n use rustc_codegen_ssa::debuginfo::type_names;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, VariableKind};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_index::vec::IndexVec;\n "}, {"sha": "0f54557eaed2dbdaadd524eb8a1990409a1a7165", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -2,17 +2,17 @@ use std::collections::hash_map::Entry::*;\n use std::sync::Arc;\n \n use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n+use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::Node;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n use rustc::session::config;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::Instance;\n use rustc::ty::{SymbolName, TyCtxt};\n-use rustc::util::nodemap::{DefIdMap, FxHashMap};\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n use syntax::expand::allocator::ALLOCATOR_METHODS;\n "}, {"sha": "f901a51ada80504ab2bde5e0fa978cf8a12c7459", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -19,7 +19,7 @@ use rustc::session::config::{\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc::util::common::{print_time_passes_entry, set_time_depth, time_depth};\n-use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "b964fa1c182c955a6ac0b8ca52bf7b9d6103986a", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -27,6 +27,7 @@ use crate::{CachedModuleCodegen, CrateInfo, MemFlags, ModuleCodegen, ModuleKind}\n \n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::middle::lang_items::StartFnLangItem;\n@@ -39,8 +40,8 @@ use rustc::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc::util::common::{print_time_passes_entry, set_time_depth, time, time_depth};\n-use rustc::util::nodemap::FxHashMap;\n use rustc_codegen_utils::{check_for_rustc_errors_attr, symbol_names_test};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::Idx;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_span::Span;\n@@ -811,7 +812,7 @@ pub fn provide_both(providers: &mut Providers<'_>) {\n \n         let (defids, _) = tcx.collect_and_partition_mono_items(cratenum);\n         for id in &*defids {\n-            let hir::CodegenFnAttrs { optimize, .. } = tcx.codegen_fn_attrs(*id);\n+            let CodegenFnAttrs { optimize, .. } = tcx.codegen_fn_attrs(*id);\n             match optimize {\n                 attr::OptimizeAttr::None => continue,\n                 attr::OptimizeAttr::Size => continue,"}, {"sha": "691b94c2f9d485309ff1ef9995b4ce228f069d5c", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -2,7 +2,7 @@ use super::BackendTypes;\n use rustc::mir::mono::CodegenUnit;\n use rustc::session::Session;\n use rustc::ty::{self, Instance, Ty};\n-use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::cell::RefCell;\n use std::sync::Arc;\n "}, {"sha": "e479573038b73cfaf10444f5f56dc751f87dd327", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -88,8 +88,8 @@\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::Node;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n use rustc::session::config::SymbolManglingVersion;\n use rustc::ty::query::Providers;"}, {"sha": "bbeb193dba32b4c8970d8bc18160d4d2dd5563c7", "filename": "src/librustc_data_structures/fx.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_data_structures%2Ffx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_data_structures%2Ffx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffx.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -4,3 +4,11 @@ pub use rustc_hash::{FxHashMap, FxHashSet, FxHasher};\n \n pub type FxIndexMap<K, V> = indexmap::IndexMap<K, V, BuildHasherDefault<FxHasher>>;\n pub type FxIndexSet<V> = indexmap::IndexSet<V, BuildHasherDefault<FxHasher>>;\n+\n+#[macro_export]\n+macro_rules! define_id_collections {\n+    ($map_name:ident, $set_name:ident, $key:ty) => {\n+        pub type $map_name<T> = $crate::fx::FxHashMap<$key, T>;\n+        pub type $set_name = $crate::fx::FxHashSet<$key>;\n+    };\n+}"}, {"sha": "f2e420dbae64001e67496f23c1ec9c04f1ddbf02", "filename": "src/librustc_hir/Cargo.toml", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2FCargo.toml?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -0,0 +1,22 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_hir\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_hir\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+rustc_target = { path = \"../librustc_target\" }\n+rustc_macros = { path = \"../librustc_macros\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_index = { path = \"../librustc_index\" }\n+rustc_span = { path = \"../librustc_span\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+rustc_session = { path = \"../librustc_session\" }\n+syntax = { path = \"../libsyntax\" }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "83e30d85c5a675d95e973ea3cbab273db93dadce", "filename": "src/librustc_hir/def.rs", "status": "renamed", "additions": 24, "deletions": 46, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,28 +1,25 @@\n-use self::Namespace::*;\n-\n+use crate::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir;\n-use crate::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use crate::ty;\n-use crate::util::nodemap::DefIdMap;\n \n-use rustc_macros::HashStable;\n+use rustc_macros::HashStable_Generic;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::Span;\n use syntax::ast;\n use syntax::ast::NodeId;\n \n use std::fmt::Debug;\n \n /// Encodes if a `DefKind::Ctor` is the constructor of an enum variant or a struct.\n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum CtorOf {\n     /// This `DefKind::Ctor` is a synthesized constructor of a tuple or unit struct.\n     Struct,\n     /// This `DefKind::Ctor` is a synthesized constructor of a tuple or unit variant.\n     Variant,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum CtorKind {\n     /// Constructor function automatically created by a tuple struct/variant.\n     Fn,\n@@ -32,7 +29,8 @@ pub enum CtorKind {\n     Fictive,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum NonMacroAttrKind {\n     /// Single-segment attribute defined by the language (`#[inline]`)\n     Builtin,\n@@ -44,7 +42,8 @@ pub enum NonMacroAttrKind {\n     Registered,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum DefKind {\n     // Type namespace\n     Mod,\n@@ -98,7 +97,7 @@ impl DefKind {\n             DefKind::Ctor(CtorOf::Struct, CtorKind::Fn) => \"tuple struct\",\n             DefKind::Ctor(CtorOf::Struct, CtorKind::Const) => \"unit struct\",\n             DefKind::Ctor(CtorOf::Struct, CtorKind::Fictive) => {\n-                bug!(\"impossible struct constructor\")\n+                panic!(\"impossible struct constructor\")\n             }\n             DefKind::OpaqueTy => \"opaque type\",\n             DefKind::TyAlias => \"type alias\",\n@@ -159,7 +158,8 @@ impl DefKind {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum Res<Id = hir::HirId> {\n     Def(DefKind, DefId),\n \n@@ -239,9 +239,9 @@ pub enum Namespace {\n impl Namespace {\n     pub fn descr(self) -> &'static str {\n         match self {\n-            TypeNS => \"type\",\n-            ValueNS => \"value\",\n-            MacroNS => \"macro\",\n+            Self::TypeNS => \"type\",\n+            Self::ValueNS => \"value\",\n+            Self::MacroNS => \"macro\",\n         }\n     }\n }\n@@ -265,19 +265,19 @@ impl<T> ::std::ops::Index<Namespace> for PerNS<T> {\n \n     fn index(&self, ns: Namespace) -> &T {\n         match ns {\n-            ValueNS => &self.value_ns,\n-            TypeNS => &self.type_ns,\n-            MacroNS => &self.macro_ns,\n+            Namespace::ValueNS => &self.value_ns,\n+            Namespace::TypeNS => &self.type_ns,\n+            Namespace::MacroNS => &self.macro_ns,\n         }\n     }\n }\n \n impl<T> ::std::ops::IndexMut<Namespace> for PerNS<T> {\n     fn index_mut(&mut self, ns: Namespace) -> &mut T {\n         match ns {\n-            ValueNS => &mut self.value_ns,\n-            TypeNS => &mut self.type_ns,\n-            MacroNS => &mut self.macro_ns,\n+            Namespace::ValueNS => &mut self.value_ns,\n+            Namespace::TypeNS => &mut self.type_ns,\n+            Namespace::MacroNS => &mut self.macro_ns,\n         }\n     }\n }\n@@ -296,29 +296,6 @@ impl<T> PerNS<Option<T>> {\n     }\n }\n \n-/// This is the replacement export map. It maps a module to all of the exports\n-/// within.\n-pub type ExportMap<Id> = DefIdMap<Vec<Export<Id>>>;\n-\n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct Export<Id> {\n-    /// The name of the target.\n-    pub ident: ast::Ident,\n-    /// The resolution of the target.\n-    pub res: Res<Id>,\n-    /// The span of the target.\n-    pub span: Span,\n-    /// The visibility of the export.\n-    /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n-    pub vis: ty::Visibility,\n-}\n-\n-impl<Id> Export<Id> {\n-    pub fn map_id<R>(self, map: impl FnMut(Id) -> R) -> Export<R> {\n-        Export { ident: self.ident, res: self.res.map_id(map), span: self.span, vis: self.vis }\n-    }\n-}\n-\n impl CtorKind {\n     pub fn from_ast(vdata: &ast::VariantData) -> CtorKind {\n         match *vdata {\n@@ -369,7 +346,8 @@ impl<Id> Res<Id> {\n     where\n         Id: Debug,\n     {\n-        self.opt_def_id().unwrap_or_else(|| bug!(\"attempted .def_id() on invalid res: {:?}\", self))\n+        self.opt_def_id()\n+            .unwrap_or_else(|| panic!(\"attempted .def_id() on invalid res: {:?}\", self))\n     }\n \n     /// Return `Some(..)` with the `DefId` of this `Res` if it has a ID, else `None`.", "previous_filename": "src/librustc/hir/def.rs"}, {"sha": "f8cacdc6238e830ecdd1731594b9d8c34f807925", "filename": "src/librustc_hir/def_id.rs", "status": "renamed", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef_id.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,4 +1,4 @@\n-use crate::ty::{self, TyCtxt};\n+use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n use std::fmt;\n use std::u32;\n@@ -40,7 +40,7 @@ impl Idx for CrateNum {\n     fn index(self) -> usize {\n         match self {\n             CrateNum::Index(idx) => Idx::index(idx),\n-            _ => bug!(\"Tried to get crate index of {:?}\", self),\n+            _ => panic!(\"Tried to get crate index of {:?}\", self),\n         }\n     }\n }\n@@ -61,14 +61,14 @@ impl CrateNum {\n     pub fn as_usize(self) -> usize {\n         match self {\n             CrateNum::Index(id) => id.as_usize(),\n-            _ => bug!(\"tried to get index of non-standard crate {:?}\", self),\n+            _ => panic!(\"tried to get index of non-standard crate {:?}\", self),\n         }\n     }\n \n     pub fn as_u32(self) -> u32 {\n         match self {\n             CrateNum::Index(id) => id.as_u32(),\n-            _ => bug!(\"tried to get index of non-standard crate {:?}\", self),\n+            _ => panic!(\"tried to get index of non-standard crate {:?}\", self),\n         }\n     }\n \n@@ -113,21 +113,6 @@ pub struct DefId {\n     pub index: DefIndex,\n }\n \n-impl fmt::Debug for DefId {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"DefId({}:{}\", self.krate, self.index.index())?;\n-\n-        ty::tls::with_opt(|opt_tcx| {\n-            if let Some(tcx) = opt_tcx {\n-                write!(f, \" ~ {}\", tcx.def_path_debug_str(*self))?;\n-            }\n-            Ok(())\n-        })?;\n-\n-        write!(f, \")\")\n-    }\n-}\n-\n impl DefId {\n     /// Makes a local `DefId` from the given `DefIndex`.\n     #[inline]\n@@ -145,18 +130,29 @@ impl DefId {\n         LocalDefId::from_def_id(self)\n     }\n \n-    pub fn describe_as_module(&self, tcx: TyCtxt<'_>) -> String {\n-        if self.is_local() && self.index == CRATE_DEF_INDEX {\n-            format!(\"top-level module\")\n-        } else {\n-            format!(\"module `{}`\", tcx.def_path_str(*self))\n-        }\n+    pub fn is_top_level_module(self) -> bool {\n+        self.is_local() && self.index == CRATE_DEF_INDEX\n     }\n }\n \n impl rustc_serialize::UseSpecializedEncodable for DefId {}\n impl rustc_serialize::UseSpecializedDecodable for DefId {}\n \n+pub fn default_def_id_debug(def_id: DefId, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    f.debug_struct(\"DefId\").field(\"krate\", &def_id.krate).field(\"index\", &def_id.index).finish()\n+}\n+\n+pub static DEF_ID_DEBUG: AtomicRef<fn(DefId, &mut fmt::Formatter<'_>) -> fmt::Result> =\n+    AtomicRef::new(&(default_def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n+\n+impl fmt::Debug for DefId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        (*DEF_ID_DEBUG)(*self, f)\n+    }\n+}\n+\n+rustc_data_structures::define_id_collections!(DefIdMap, DefIdSet, DefId);\n+\n /// A LocalDefId is equivalent to a DefId with `krate == LOCAL_CRATE`. Since\n /// we encode this information in the type, we can ensure at compile time that\n /// no DefIds from upstream crates get thrown into the mix. There are quite a", "previous_filename": "src/librustc/hir/def_id.rs"}, {"sha": "2303a85df4acfb56ee7e16b5e422d36dbedad54c", "filename": "src/librustc_hir/hir.rs", "status": "renamed", "additions": 118, "deletions": 337, "changes": 455, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,24 +1,18 @@\n-//! HIR datatypes. See the [rustc guide] for more info.\n-//!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n-\n-pub use self::BlockCheckMode::*;\n-pub use self::FunctionRetTy::*;\n-pub use self::PrimTy::*;\n-pub use self::UnOp::*;\n-pub use self::UnsafeSource::*;\n-\n-use crate::hir::def::{DefKind, Res};\n-use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n-use crate::mir::mono::Linkage;\n-use crate::ty::query::Providers;\n-use crate::ty::AdtKind;\n-use crate::util::nodemap::{FxHashSet, NodeMap};\n-\n-use errors::FatalError;\n+use crate::def::{DefKind, Res};\n+use crate::def_id::DefId;\n+crate use crate::hir_id::HirId;\n+use crate::itemlikevisit;\n+use crate::print;\n+\n+crate use BlockCheckMode::*;\n+crate use FunctionRetTy::*;\n+crate use UnsafeSource::*;\n+\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n-use rustc_macros::HashStable;\n-use rustc_serialize::{self, Decodable, Decoder, Encodable, Encoder};\n+use rustc_errors::FatalError;\n+use rustc_macros::HashStable_Generic;\n+use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n@@ -30,101 +24,10 @@ use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name, NodeId};\n use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use syntax::ast::{CaptureBy, Constness, Movability, Mutability, Unsafety};\n-use syntax::attr::{InlineAttr, OptimizeAttr};\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n \n-pub mod check_attr;\n-pub mod def;\n-pub mod def_id;\n-pub mod intravisit;\n-pub mod itemlikevisit;\n-pub mod map;\n-pub mod pat_util;\n-pub mod print;\n-pub mod upvars;\n-\n-/// Uniquely identifies a node in the HIR of the current crate. It is\n-/// composed of the `owner`, which is the `DefIndex` of the directly enclosing\n-/// `hir::Item`, `hir::TraitItem`, or `hir::ImplItem` (i.e., the closest \"item-like\"),\n-/// and the `local_id` which is unique within the given owner.\n-///\n-/// This two-level structure makes for more stable values: One can move an item\n-/// around within the source code, or add or remove stuff before it, without\n-/// the `local_id` part of the `HirId` changing, which is a very useful property in\n-/// incremental compilation where we have to persist things through changes to\n-/// the code base.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n-pub struct HirId {\n-    pub owner: DefIndex,\n-    pub local_id: ItemLocalId,\n-}\n-\n-impl HirId {\n-    pub fn owner_def_id(self) -> DefId {\n-        DefId::local(self.owner)\n-    }\n-\n-    pub fn owner_local_def_id(self) -> LocalDefId {\n-        LocalDefId::from_def_id(DefId::local(self.owner))\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedEncodable for HirId {\n-    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        let HirId { owner, local_id } = *self;\n-\n-        owner.encode(s)?;\n-        local_id.encode(s)?;\n-        Ok(())\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedDecodable for HirId {\n-    fn default_decode<D: Decoder>(d: &mut D) -> Result<HirId, D::Error> {\n-        let owner = DefIndex::decode(d)?;\n-        let local_id = ItemLocalId::decode(d)?;\n-\n-        Ok(HirId { owner, local_id })\n-    }\n-}\n-\n-impl fmt::Display for HirId {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}\", self)\n-    }\n-}\n-\n-// Hack to ensure that we don't try to access the private parts of `ItemLocalId` in this module.\n-mod item_local_id_inner {\n-    use rustc_index::vec::Idx;\n-    use rustc_macros::HashStable;\n-    rustc_index::newtype_index! {\n-        /// An `ItemLocalId` uniquely identifies something within a given \"item-like\";\n-        /// that is, within a `hir::Item`, `hir::TraitItem`, or `hir::ImplItem`. There is no\n-        /// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n-        /// the node's position within the owning item in any way, but there is a\n-        /// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n-        /// integers starting at zero, so a mapping that maps all or most nodes within\n-        /// an \"item-like\" to something else can be implemented by a `Vec` instead of a\n-        /// tree or hash map.\n-        pub struct ItemLocalId {\n-            derive [HashStable]\n-        }\n-    }\n-}\n-\n-pub use self::item_local_id_inner::ItemLocalId;\n-\n-/// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n-pub const CRATE_HIR_ID: HirId =\n-    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32_const(0) };\n-\n-pub const DUMMY_HIR_ID: HirId = HirId { owner: CRATE_DEF_INDEX, local_id: DUMMY_ITEM_LOCAL_ID };\n-\n-pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;\n-\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub struct Lifetime {\n     pub hir_id: HirId,\n     pub span: Span,\n@@ -138,7 +41,8 @@ pub struct Lifetime {\n     pub name: LifetimeName,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy, HashStable)]\n+#[derive(Debug, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(HashStable_Generic)]\n pub enum ParamName {\n     /// Some user-given name like `T` or `'x`.\n     Plain(Ident),\n@@ -183,7 +87,8 @@ impl ParamName {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy, HashStable)]\n+#[derive(Debug, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(HashStable_Generic)]\n pub enum LifetimeName {\n     /// User-given names or fresh (synthetic) names.\n     Param(ParamName),\n@@ -284,7 +189,7 @@ impl Lifetime {\n /// A `Path` is essentially Rust's notion of a name; for instance,\n /// `std::cmp::PartialEq`. It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n-#[derive(RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub struct Path<'hir> {\n     pub span: Span,\n     /// The resolution for the path.\n@@ -313,7 +218,7 @@ impl fmt::Display for Path<'_> {\n \n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct PathSegment<'hir> {\n     /// The identifier portion of this path segment.\n     #[stable_hasher(project(name))]\n@@ -356,13 +261,13 @@ impl<'hir> PathSegment<'hir> {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct ConstArg {\n     pub value: AnonConst,\n     pub span: Span,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum GenericArg<'hir> {\n     Lifetime(Lifetime),\n     Type(Ty<'hir>),\n@@ -394,7 +299,7 @@ impl GenericArg<'_> {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct GenericArgs<'hir> {\n     /// The generic arguments for this path segment.\n     pub args: &'hir [GenericArg<'hir>],\n@@ -431,7 +336,7 @@ impl GenericArgs<'_> {\n                 }\n             }\n         }\n-        bug!(\"GenericArgs::inputs: not a `Fn(T) -> U`\");\n+        panic!(\"GenericArgs::inputs: not a `Fn(T) -> U`\");\n     }\n \n     pub fn own_counts(&self) -> GenericParamCount {\n@@ -454,7 +359,8 @@ impl GenericArgs<'_> {\n \n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum TraitBoundModifier {\n     None,\n     Maybe,\n@@ -464,7 +370,7 @@ pub enum TraitBoundModifier {\n /// `typeck::collect::compute_bounds` matches these against\n /// the \"special\" built-in traits (see `middle::lang_items`) and\n /// detects `Copy`, `Send` and `Sync`.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum GenericBound<'hir> {\n     Trait(PolyTraitRef<'hir>, TraitBoundModifier),\n     Outlives(Lifetime),\n@@ -481,7 +387,7 @@ impl GenericBound<'_> {\n \n pub type GenericBounds<'hir> = &'hir [GenericBound<'hir>];\n \n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum LifetimeParamKind {\n     // Indicates that the lifetime definition was explicitly declared (e.g., in\n     // `fn foo<'a>(x: &'a u8) -> &'a u8 { x }`).\n@@ -500,7 +406,7 @@ pub enum LifetimeParamKind {\n     Error,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum GenericParamKind<'hir> {\n     /// A lifetime definition (e.g., `'a: 'b + 'c + 'd`).\n     Lifetime {\n@@ -515,7 +421,7 @@ pub enum GenericParamKind<'hir> {\n     },\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct GenericParam<'hir> {\n     pub hir_id: HirId,\n     pub name: ParamName,\n@@ -535,7 +441,7 @@ pub struct GenericParamCount {\n \n /// Represents lifetimes and type parameters attached to a declaration\n /// of a function, enum, trait, etc.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Generics<'hir> {\n     pub params: &'hir [GenericParam<'hir>],\n     pub where_clause: WhereClause<'hir>,\n@@ -588,13 +494,14 @@ impl Generics<'hir> {\n \n /// Synthetic type parameters are converted to another form during lowering; this allows\n /// us to track the original form they had, and is useful for error messages.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum SyntheticTyParamKind {\n     ImplTrait,\n }\n \n /// A where-clause in a definition.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct WhereClause<'hir> {\n     pub predicates: &'hir [WherePredicate<'hir>],\n     // Only valid if predicates isn't empty.\n@@ -614,7 +521,7 @@ impl WhereClause<'_> {\n }\n \n /// A single predicate in a where-clause.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum WherePredicate<'hir> {\n     /// A type binding (e.g., `for<'c> Foo: Send + Clone + 'c`).\n     BoundPredicate(WhereBoundPredicate<'hir>),\n@@ -635,7 +542,7 @@ impl WherePredicate<'_> {\n }\n \n /// A type bound (e.g., `for<'c> Foo: Send + Clone + 'c`).\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct WhereBoundPredicate<'hir> {\n     pub span: Span,\n     /// Any generics from a `for` binding.\n@@ -647,15 +554,15 @@ pub struct WhereBoundPredicate<'hir> {\n }\n \n /// A lifetime predicate (e.g., `'a: 'b + 'c`).\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct WhereRegionPredicate<'hir> {\n     pub span: Span,\n     pub lifetime: Lifetime,\n     pub bounds: GenericBounds<'hir>,\n }\n \n /// An equality predicate (e.g., `T = int`); currently unsupported.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct WhereEqPredicate<'hir> {\n     pub hir_id: HirId,\n     pub span: Span,\n@@ -783,7 +690,7 @@ impl Crate<'_> {\n /// A macro definition, in this crate or imported from another.\n ///\n /// Not parsed directly, but created on macro import or `macro_rules!` expansion.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct MacroDef<'hir> {\n     pub name: Name,\n     pub vis: Visibility<'hir>,\n@@ -797,7 +704,7 @@ pub struct MacroDef<'hir> {\n /// A block of statements `{ .. }`, which may have a label (in this case the\n /// `targeted_by_break` field will be `true`) and may be `unsafe` by means of\n /// the `rules` being anything but `DefaultBlock`.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Block<'hir> {\n     /// Statements in a block.\n     pub stmts: &'hir [Stmt<'hir>],\n@@ -815,7 +722,7 @@ pub struct Block<'hir> {\n     pub targeted_by_break: bool,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub struct Pat<'hir> {\n     #[stable_hasher(ignore)]\n     pub hir_id: HirId,\n@@ -904,7 +811,7 @@ impl Pat<'_> {\n /// Patterns like the fields of Foo `{ x, ref y, ref mut z }`\n /// are treated the same as` x: x, y: ref y, z: ref mut z`,\n /// except `is_shorthand` is true.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct FieldPat<'hir> {\n     #[stable_hasher(ignore)]\n     pub hir_id: HirId,\n@@ -920,7 +827,7 @@ pub struct FieldPat<'hir> {\n /// Explicit binding annotations given in the HIR for a binding. Note\n /// that this is not the final binding *mode* that we infer after type\n /// inference.\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum BindingAnnotation {\n     /// No binding annotation given: this means that the final binding mode\n     /// will depend on whether we have skipped through a `&` reference\n@@ -941,7 +848,7 @@ pub enum BindingAnnotation {\n     RefMut,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum RangeEnd {\n     Included,\n     Excluded,\n@@ -956,7 +863,7 @@ impl fmt::Display for RangeEnd {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum PatKind<'hir> {\n     /// Represents a wildcard pattern (i.e., `_`).\n     Wild,\n@@ -1012,7 +919,7 @@ pub enum PatKind<'hir> {\n     Slice(&'hir [&'hir Pat<'hir>], Option<&'hir Pat<'hir>>, &'hir [&'hir Pat<'hir>]),\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum BinOpKind {\n     /// The `+` operator (addition).\n     Add,\n@@ -1146,7 +1053,7 @@ impl Into<ast::BinOpKind> for BinOpKind {\n \n pub type BinOp = Spanned<BinOpKind>;\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum UnOp {\n     /// The `*` operator (deferencing).\n     UnDeref,\n@@ -1159,23 +1066,23 @@ pub enum UnOp {\n impl UnOp {\n     pub fn as_str(self) -> &'static str {\n         match self {\n-            UnDeref => \"*\",\n-            UnNot => \"!\",\n-            UnNeg => \"-\",\n+            Self::UnDeref => \"*\",\n+            Self::UnNot => \"!\",\n+            Self::UnNeg => \"-\",\n         }\n     }\n \n     /// Returns `true` if the unary operator takes its argument by value.\n     pub fn is_by_value(self) -> bool {\n         match self {\n-            UnNeg | UnNot => true,\n+            Self::UnNeg | Self::UnNot => true,\n             _ => false,\n         }\n     }\n }\n \n /// A statement.\n-#[derive(RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub struct Stmt<'hir> {\n     pub hir_id: HirId,\n     pub kind: StmtKind<'hir>,\n@@ -1194,7 +1101,7 @@ impl fmt::Debug for Stmt<'_> {\n }\n \n /// The contents of a statement.\n-#[derive(RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum StmtKind<'hir> {\n     /// A local (`let`) binding.\n     Local(&'hir Local<'hir>),\n@@ -1220,7 +1127,7 @@ impl StmtKind<'hir> {\n }\n \n /// Represents a `let` statement (i.e., `let <pat>:<ty> = <expr>;`).\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Local<'hir> {\n     pub pat: &'hir Pat<'hir>,\n     /// Type annotation, if any (otherwise the type will be inferred).\n@@ -1237,7 +1144,7 @@ pub struct Local<'hir> {\n \n /// Represents a single arm of a `match` expression, e.g.\n /// `<pat> (if <guard>) => <body>`.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Arm<'hir> {\n     #[stable_hasher(ignore)]\n     pub hir_id: HirId,\n@@ -1251,12 +1158,12 @@ pub struct Arm<'hir> {\n     pub body: &'hir Expr<'hir>,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum Guard<'hir> {\n     If(&'hir Expr<'hir>),\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Field<'hir> {\n     #[stable_hasher(ignore)]\n     pub hir_id: HirId,\n@@ -1266,15 +1173,15 @@ pub struct Field<'hir> {\n     pub is_shorthand: bool,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n     PushUnsafeBlock(UnsafeSource),\n     PopUnsafeBlock(UnsafeSource),\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,\n@@ -1324,7 +1231,7 @@ impl Body<'hir> {\n }\n \n /// The type of source expression that caused this generator to be created.\n-#[derive(Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, HashStable_Generic, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum GeneratorKind {\n     /// An explicit `async` block or the body of an async function.\n     Async(AsyncGeneratorKind),\n@@ -1347,7 +1254,7 @@ impl fmt::Display for GeneratorKind {\n ///\n /// This helps error messages but is also used to drive coercions in\n /// type-checking (see #60424).\n-#[derive(Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, HashStable_Generic, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum AsyncGeneratorKind {\n     /// An explicit `async` block written by the user.\n     Block,\n@@ -1401,7 +1308,7 @@ pub type Lit = Spanned<LitKind>;\n /// These are usually found nested inside types (e.g., array lengths)\n /// or expressions (e.g., repeat counts), and also used to define\n /// explicit discriminant values for enum variants.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct AnonConst {\n     pub hir_id: HirId,\n     pub body: BodyId,\n@@ -1418,7 +1325,7 @@ pub struct Expr<'hir> {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(Expr<'static>, 64);\n+rustc_data_structures::static_assert_size!(Expr<'static>, 64);\n \n impl Expr<'_> {\n     pub fn precedence(&self) -> ExprPrecedence {\n@@ -1478,7 +1385,7 @@ impl Expr<'_> {\n             // https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md#type-ascription-and-temporaries\n             ExprKind::Type(ref e, _) => e.is_place_expr(allow_projections_from),\n \n-            ExprKind::Unary(UnDeref, _) => true,\n+            ExprKind::Unary(UnOp::UnDeref, _) => true,\n \n             ExprKind::Field(ref base, _) | ExprKind::Index(ref base, _) => {\n                 allow_projections_from(base) || base.is_place_expr(allow_projections_from)\n@@ -1602,7 +1509,7 @@ pub fn is_range_literal(sm: &SourceMap, expr: &Expr<'_>) -> bool {\n     false\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum ExprKind<'hir> {\n     /// A `box x` expression.\n     Box(&'hir Expr<'hir>),\n@@ -1715,7 +1622,7 @@ pub enum ExprKind<'hir> {\n /// To resolve the path to a `DefId`, call [`qpath_res`].\n ///\n /// [`qpath_res`]: ../ty/struct.TypeckTables.html#method.qpath_res\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum QPath<'hir> {\n     /// Path to a definition, optionally \"fully-qualified\" with a `Self`\n     /// type, if the path points to an associated item in a trait.\n@@ -1735,7 +1642,7 @@ pub enum QPath<'hir> {\n }\n \n /// Hints at the original code for a let statement.\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum LocalSource {\n     /// A `match _ { .. }`.\n     Normal,\n@@ -1757,7 +1664,8 @@ pub enum LocalSource {\n }\n \n /// Hints at the original code for a `match _ { .. }`.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum MatchSource {\n     /// A `match _ { .. }`.\n     Normal,\n@@ -1793,7 +1701,7 @@ impl MatchSource {\n }\n \n /// The loop type that yielded an `ExprKind::Loop`.\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum LoopSource {\n     /// A `loop { .. }` loop.\n     Loop,\n@@ -1815,7 +1723,7 @@ impl LoopSource {\n     }\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum LoopIdError {\n     OutsideLoopScope,\n     UnlabeledCfInWhileCondition,\n@@ -1834,7 +1742,7 @@ impl fmt::Display for LoopIdError {\n     }\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Destination {\n     // This is `Some(_)` iff there is an explicit user-specified `label\n     pub label: Option<Label>,\n@@ -1845,7 +1753,7 @@ pub struct Destination {\n }\n \n /// The yield kind that caused an `ExprKind::Yield`.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum YieldSource {\n     /// An `<expr>.await`.\n     Await,\n@@ -1874,15 +1782,15 @@ impl From<GeneratorKind> for YieldSource {\n \n // N.B., if you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct MutTy<'hir> {\n     pub ty: &'hir Ty<'hir>,\n     pub mutbl: Mutability,\n }\n \n /// Represents a function's signature in a trait declaration,\n /// trait implementation, or a free function.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct FnSig<'hir> {\n     pub header: FnHeader,\n     pub decl: &'hir FnDecl<'hir>,\n@@ -1911,7 +1819,7 @@ pub struct TraitItem<'hir> {\n }\n \n /// Represents a trait method's body (or just argument names).\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum TraitMethod<'hir> {\n     /// No default body in the trait, just a signature.\n     Required(&'hir [Ident]),\n@@ -1921,7 +1829,7 @@ pub enum TraitMethod<'hir> {\n }\n \n /// Represents a trait method or associated constant or type\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum TraitItemKind<'hir> {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(&'hir Ty<'hir>, Option<BodyId>),\n@@ -1954,7 +1862,7 @@ pub struct ImplItem<'hir> {\n }\n \n /// Represents various kinds of content within an `impl`.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum ImplItemKind<'hir> {\n     /// An associated constant of the given type, set to the constant result\n     /// of the expression.\n@@ -1982,7 +1890,7 @@ pub enum ImplItemKind<'hir> {\n ///    Binding(...),\n /// }\n /// ```\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct TypeBinding<'hir> {\n     pub hir_id: HirId,\n     #[stable_hasher(project(name))]\n@@ -1992,7 +1900,7 @@ pub struct TypeBinding<'hir> {\n }\n \n // Represents the two kinds of type bindings.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum TypeBindingKind<'hir> {\n     /// E.g., `Foo<Bar: Send>`.\n     Constraint { bounds: &'hir [GenericBound<'hir>] },\n@@ -2004,7 +1912,7 @@ impl TypeBinding<'_> {\n     pub fn ty(&self) -> &Ty<'_> {\n         match self.kind {\n             TypeBindingKind::Equality { ref ty } => ty,\n-            _ => bug!(\"expected equality type binding for parenthesized generic args\"),\n+            _ => panic!(\"expected equality type binding for parenthesized generic args\"),\n         }\n     }\n }\n@@ -2023,7 +1931,8 @@ impl fmt::Debug for Ty<'_> {\n }\n \n /// Not represented directly in the AST; referred to by name through a `ty_path`.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum PrimTy {\n     Int(IntTy),\n     Uint(UintTy),\n@@ -2033,7 +1942,7 @@ pub enum PrimTy {\n     Char,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct BareFnTy<'hir> {\n     pub unsafety: Unsafety,\n     pub abi: Abi,\n@@ -2042,7 +1951,7 @@ pub struct BareFnTy<'hir> {\n     pub param_names: &'hir [Ident],\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct OpaqueTy<'hir> {\n     pub generics: Generics<'hir>,\n     pub bounds: GenericBounds<'hir>,\n@@ -2051,7 +1960,7 @@ pub struct OpaqueTy<'hir> {\n }\n \n /// From whence the opaque type came.\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum OpaqueTyOrigin {\n     /// `type Foo = impl Trait;`\n     TypeAlias,\n@@ -2062,7 +1971,7 @@ pub enum OpaqueTyOrigin {\n }\n \n /// The various kinds of types recognized by the compiler.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum TyKind<'hir> {\n     /// A variable length slice (i.e., `[T]`).\n     Slice(&'hir Ty<'hir>),\n@@ -2101,7 +2010,7 @@ pub enum TyKind<'hir> {\n     Err,\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable, PartialEq)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic, PartialEq)]\n pub struct InlineAsmOutput {\n     pub constraint: Symbol,\n     pub is_rw: bool,\n@@ -2111,7 +2020,7 @@ pub struct InlineAsmOutput {\n \n // NOTE(eddyb) This is used within MIR as well, so unlike the rest of the HIR,\n // it needs to be `Clone` and use plain `Vec<T>` instead of arena-allocated slice.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic, PartialEq)]\n pub struct InlineAsmInner {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n@@ -2123,15 +2032,15 @@ pub struct InlineAsmInner {\n     pub dialect: AsmDialect,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct InlineAsm<'hir> {\n     pub inner: InlineAsmInner,\n     pub outputs_exprs: &'hir [Expr<'hir>],\n     pub inputs_exprs: &'hir [Expr<'hir>],\n }\n \n /// Represents a parameter in a function header.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Param<'hir> {\n     pub attrs: &'hir [Attribute],\n     pub hir_id: HirId,\n@@ -2140,7 +2049,7 @@ pub struct Param<'hir> {\n }\n \n /// Represents the header (not the body) of a function declaration.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct FnDecl<'hir> {\n     /// The types of the function's parameters.\n     ///\n@@ -2153,7 +2062,7 @@ pub struct FnDecl<'hir> {\n }\n \n /// Represents what type of implicit self a function has, if any.\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum ImplicitSelfKind {\n     /// Represents a `fn x(self);`.\n     Imm,\n@@ -2184,7 +2093,7 @@ impl ImplicitSelfKind {\n     PartialEq,\n     Eq,\n     PartialOrd,\n-    HashStable,\n+    HashStable_Generic,\n     Ord,\n     RustcEncodable,\n     RustcDecodable,\n@@ -2195,7 +2104,7 @@ pub enum IsAsync {\n     NotAsync,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum Defaultness {\n     Default { has_value: bool },\n     Final,\n@@ -2221,7 +2130,7 @@ impl Defaultness {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum FunctionRetTy<'hir> {\n     /// Return type is not specified.\n     ///\n@@ -2236,17 +2145,17 @@ pub enum FunctionRetTy<'hir> {\n impl fmt::Display for FunctionRetTy<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            Return(ref ty) => print::to_string(print::NO_ANN, |s| s.print_type(ty)).fmt(f),\n-            DefaultReturn(_) => \"()\".fmt(f),\n+            Self::Return(ref ty) => print::to_string(print::NO_ANN, |s| s.print_type(ty)).fmt(f),\n+            Self::DefaultReturn(_) => \"()\".fmt(f),\n         }\n     }\n }\n \n impl FunctionRetTy<'_> {\n     pub fn span(&self) -> Span {\n         match *self {\n-            DefaultReturn(span) => span,\n-            Return(ref ty) => ty.span,\n+            Self::DefaultReturn(span) => span,\n+            Self::Return(ref ty) => ty.span,\n         }\n     }\n }\n@@ -2260,23 +2169,23 @@ pub struct Mod<'hir> {\n     pub item_ids: &'hir [ItemId],\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct ForeignMod<'hir> {\n     pub abi: Abi,\n     pub items: &'hir [ForeignItem<'hir>],\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct GlobalAsm {\n     pub asm: Symbol,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct EnumDef<'hir> {\n     pub variants: &'hir [Variant<'hir>],\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Variant<'hir> {\n     /// Name of the variant.\n     #[stable_hasher(project(name))]\n@@ -2293,7 +2202,7 @@ pub struct Variant<'hir> {\n     pub span: Span,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum UseKind {\n     /// One import, e.g., `use foo::bar` or `use foo::bar as baz`.\n     /// Also produced for each element of a list `use`, e.g.\n@@ -2315,7 +2224,7 @@ pub enum UseKind {\n /// that the `ref_id` is for. Note that `ref_id`'s value is not the `HirId` of the\n /// trait being referred to but just a unique `HirId` that serves as a key\n /// within the resolution map.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct TraitRef<'hir> {\n     pub path: &'hir Path<'hir>,\n     // Don't hash the `ref_id`. It is tracked via the thing it is used to access.\n@@ -2337,7 +2246,7 @@ impl TraitRef<'_> {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct PolyTraitRef<'hir> {\n     /// The `'a` in `<'a> Foo<&'a T>`.\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n@@ -2383,7 +2292,7 @@ impl VisibilityKind<'_> {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct StructField<'hir> {\n     pub span: Span,\n     #[stable_hasher(project(name))]\n@@ -2403,7 +2312,7 @@ impl StructField<'_> {\n }\n \n /// Fields and constructor IDs of enum variants and structs.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum VariantData<'hir> {\n     /// A struct variant.\n     ///\n@@ -2458,7 +2367,7 @@ pub struct Item<'hir> {\n     pub span: Span,\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct FnHeader {\n     pub unsafety: Unsafety,\n     pub constness: Constness,\n@@ -2475,7 +2384,7 @@ impl FnHeader {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum ItemKind<'hir> {\n     /// An `extern crate` item, with optional *original* crate name if the crate was renamed.\n     ///\n@@ -2550,15 +2459,6 @@ impl ItemKind<'_> {\n         }\n     }\n \n-    pub fn adt_kind(&self) -> Option<AdtKind> {\n-        match *self {\n-            ItemKind::Struct(..) => Some(AdtKind::Struct),\n-            ItemKind::Union(..) => Some(AdtKind::Union),\n-            ItemKind::Enum(..) => Some(AdtKind::Enum),\n-            _ => None,\n-        }\n-    }\n-\n     pub fn generics(&self) -> Option<&Generics<'_>> {\n         Some(match *self {\n             ItemKind::Fn(_, ref generics, _)\n@@ -2580,7 +2480,7 @@ impl ItemKind<'_> {\n /// type or method, and whether it is public). This allows other\n /// passes to find the impl they want without loading the ID (which\n /// means fewer edges in the incremental compilation graph).\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct TraitItemRef {\n     pub id: TraitItemId,\n     #[stable_hasher(project(name))]\n@@ -2596,7 +2496,7 @@ pub struct TraitItemRef {\n /// type or method, and whether it is public). This allows other\n /// passes to find the impl they want without loading the ID (which\n /// means fewer edges in the incremental compilation graph).\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct ImplItemRef<'hir> {\n     pub id: ImplItemId,\n     #[stable_hasher(project(name))]\n@@ -2607,15 +2507,15 @@ pub struct ImplItemRef<'hir> {\n     pub defaultness: Defaultness,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum AssocItemKind {\n     Const,\n     Method { has_self: bool },\n     Type,\n     OpaqueTy,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct ForeignItem<'hir> {\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n@@ -2627,7 +2527,7 @@ pub struct ForeignItem<'hir> {\n }\n \n /// An item within an `extern` block.\n-#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum ForeignItemKind<'hir> {\n     /// A foreign function.\n     Fn(&'hir FnDecl<'hir>, &'hir [Ident], Generics<'hir>),\n@@ -2648,7 +2548,7 @@ impl ForeignItemKind<'hir> {\n }\n \n /// A variable captured by a closure.\n-#[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub struct Upvar {\n     // First span where it is accessed (there can be multiple).\n     pub span: Span,\n@@ -2672,125 +2572,6 @@ pub type TraitMap = NodeMap<Vec<TraitCandidate>>;\n // imported.\n pub type GlobMap = NodeMap<FxHashSet<Name>>;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n-    check_attr::provide(providers);\n-    map::provide(providers);\n-    upvars::provide(providers);\n-}\n-\n-#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct CodegenFnAttrs {\n-    pub flags: CodegenFnAttrFlags,\n-    /// Parsed representation of the `#[inline]` attribute\n-    pub inline: InlineAttr,\n-    /// Parsed representation of the `#[optimize]` attribute\n-    pub optimize: OptimizeAttr,\n-    /// The `#[export_name = \"...\"]` attribute, indicating a custom symbol a\n-    /// function should be exported under\n-    pub export_name: Option<Symbol>,\n-    /// The `#[link_name = \"...\"]` attribute, indicating a custom symbol an\n-    /// imported function should be imported as. Note that `export_name`\n-    /// probably isn't set when this is set, this is for foreign items while\n-    /// `#[export_name]` is for Rust-defined functions.\n-    pub link_name: Option<Symbol>,\n-    /// The `#[link_ordinal = \"...\"]` attribute, indicating an ordinal an\n-    /// imported function has in the dynamic library. Note that this must not\n-    /// be set when `link_name` is set. This is for foreign items with the\n-    /// \"raw-dylib\" kind.\n-    pub link_ordinal: Option<usize>,\n-    /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n-    /// features (only enabled features are supported right now).\n-    pub target_features: Vec<Symbol>,\n-    /// The `#[linkage = \"...\"]` attribute and the value we found.\n-    pub linkage: Option<Linkage>,\n-    /// The `#[link_section = \"...\"]` attribute, or what executable section this\n-    /// should be placed in.\n-    pub link_section: Option<Symbol>,\n-}\n-\n-bitflags! {\n-    #[derive(RustcEncodable, RustcDecodable, HashStable)]\n-    pub struct CodegenFnAttrFlags: u32 {\n-        /// `#[cold]`: a hint to LLVM that this function, when called, is never on\n-        /// the hot path.\n-        const COLD                      = 1 << 0;\n-        /// `#[rustc_allocator]`: a hint to LLVM that the pointer returned from this\n-        /// function is never null.\n-        const ALLOCATOR                 = 1 << 1;\n-        /// `#[unwind]`: an indicator that this function may unwind despite what\n-        /// its ABI signature may otherwise imply.\n-        const UNWIND                    = 1 << 2;\n-        /// `#[rust_allocator_nounwind]`, an indicator that an imported FFI\n-        /// function will never unwind. Probably obsolete by recent changes with\n-        /// #[unwind], but hasn't been removed/migrated yet\n-        const RUSTC_ALLOCATOR_NOUNWIND  = 1 << 3;\n-        /// `#[naked]`: an indicator to LLVM that no function prologue/epilogue\n-        /// should be generated.\n-        const NAKED                     = 1 << 4;\n-        /// `#[no_mangle]`: an indicator that the function's name should be the same\n-        /// as its symbol.\n-        const NO_MANGLE                 = 1 << 5;\n-        /// `#[rustc_std_internal_symbol]`: an indicator that this symbol is a\n-        /// \"weird symbol\" for the standard library in that it has slightly\n-        /// different linkage, visibility, and reachability rules.\n-        const RUSTC_STD_INTERNAL_SYMBOL = 1 << 6;\n-        /// `#[no_debug]`: an indicator that no debugging information should be\n-        /// generated for this function by LLVM.\n-        const NO_DEBUG                  = 1 << 7;\n-        /// `#[thread_local]`: indicates a static is actually a thread local\n-        /// piece of memory\n-        const THREAD_LOCAL              = 1 << 8;\n-        /// `#[used]`: indicates that LLVM can't eliminate this function (but the\n-        /// linker can!).\n-        const USED                      = 1 << 9;\n-        /// `#[ffi_returns_twice]`, indicates that an extern function can return\n-        /// multiple times\n-        const FFI_RETURNS_TWICE         = 1 << 10;\n-        /// `#[track_caller]`: allow access to the caller location\n-        const TRACK_CALLER              = 1 << 11;\n-    }\n-}\n-\n-impl CodegenFnAttrs {\n-    pub fn new() -> CodegenFnAttrs {\n-        CodegenFnAttrs {\n-            flags: CodegenFnAttrFlags::empty(),\n-            inline: InlineAttr::None,\n-            optimize: OptimizeAttr::None,\n-            export_name: None,\n-            link_name: None,\n-            link_ordinal: None,\n-            target_features: vec![],\n-            linkage: None,\n-            link_section: None,\n-        }\n-    }\n-\n-    /// Returns `true` if `#[inline]` or `#[inline(always)]` is present.\n-    pub fn requests_inline(&self) -> bool {\n-        match self.inline {\n-            InlineAttr::Hint | InlineAttr::Always => true,\n-            InlineAttr::None | InlineAttr::Never => false,\n-        }\n-    }\n-\n-    /// Returns `true` if it looks like this symbol needs to be exported, for example:\n-    ///\n-    /// * `#[no_mangle]` is present\n-    /// * `#[export_name(...)]` is present\n-    /// * `#[linkage]` is present\n-    pub fn contains_extern_indicator(&self) -> bool {\n-        self.flags.contains(CodegenFnAttrFlags::NO_MANGLE)\n-            || self.export_name.is_some()\n-            || match self.linkage {\n-                // These are private, so make sure we don't try to consider\n-                // them external.\n-                None | Some(Linkage::Internal) | Some(Linkage::Private) => false,\n-                Some(_) => true,\n-            }\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub enum Node<'hir> {\n     Param(&'hir Param<'hir>),", "previous_filename": "src/librustc/hir/mod.rs"}, {"sha": "462946411718bc667c1db34297673e17b22aaa4c", "filename": "src/librustc_hir/hir_id.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -0,0 +1,79 @@\n+use crate::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_serialize::{self, Decodable, Decoder, Encodable, Encoder};\n+use std::fmt;\n+\n+/// Uniquely identifies a node in the HIR of the current crate. It is\n+/// composed of the `owner`, which is the `DefIndex` of the directly enclosing\n+/// `hir::Item`, `hir::TraitItem`, or `hir::ImplItem` (i.e., the closest \"item-like\"),\n+/// and the `local_id` which is unique within the given owner.\n+///\n+/// This two-level structure makes for more stable values: One can move an item\n+/// around within the source code, or add or remove stuff before it, without\n+/// the `local_id` part of the `HirId` changing, which is a very useful property in\n+/// incremental compilation where we have to persist things through changes to\n+/// the code base.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n+pub struct HirId {\n+    pub owner: DefIndex,\n+    pub local_id: ItemLocalId,\n+}\n+\n+impl HirId {\n+    pub fn owner_def_id(self) -> DefId {\n+        DefId::local(self.owner)\n+    }\n+\n+    pub fn owner_local_def_id(self) -> LocalDefId {\n+        LocalDefId::from_def_id(DefId::local(self.owner))\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedEncodable for HirId {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        let HirId { owner, local_id } = *self;\n+\n+        owner.encode(s)?;\n+        local_id.encode(s)?;\n+        Ok(())\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedDecodable for HirId {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<HirId, D::Error> {\n+        let owner = DefIndex::decode(d)?;\n+        let local_id = ItemLocalId::decode(d)?;\n+\n+        Ok(HirId { owner, local_id })\n+    }\n+}\n+\n+impl fmt::Display for HirId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self)\n+    }\n+}\n+\n+rustc_data_structures::define_id_collections!(HirIdMap, HirIdSet, HirId);\n+rustc_data_structures::define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);\n+\n+use rustc_index::vec::Idx;\n+rustc_index::newtype_index! {\n+    /// An `ItemLocalId` uniquely identifies something within a given \"item-like\";\n+    /// that is, within a `hir::Item`, `hir::TraitItem`, or `hir::ImplItem`. There is no\n+    /// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n+    /// the node's position within the owning item in any way, but there is a\n+    /// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n+    /// integers starting at zero, so a mapping that maps all or most nodes within\n+    /// an \"item-like\" to something else can be implemented by a `Vec` instead of a\n+    /// tree or hash map.\n+    pub struct ItemLocalId { .. }\n+}\n+rustc_data_structures::impl_stable_hash_via_hash!(ItemLocalId);\n+\n+/// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n+pub const CRATE_HIR_ID: HirId =\n+    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32_const(0) };\n+\n+pub const DUMMY_HIR_ID: HirId = HirId { owner: CRATE_DEF_INDEX, local_id: DUMMY_ITEM_LOCAL_ID };\n+\n+pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;"}, {"sha": "369cd49621b2dcb63687584d3f480c57b58d26a5", "filename": "src/librustc_hir/itemlikevisit.rs", "status": "renamed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fitemlikevisit.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,4 +1,3 @@\n-use super::intravisit::Visitor;\n use super::{ImplItem, Item, TraitItem};\n \n /// The \"item-like visitor\" defines only the top-level methods\n@@ -50,63 +49,9 @@ pub trait ItemLikeVisitor<'hir> {\n     fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>);\n }\n \n-pub struct DeepVisitor<'v, V> {\n-    visitor: &'v mut V,\n-}\n-\n-impl<'v, 'hir, V> DeepVisitor<'v, V>\n-where\n-    V: Visitor<'hir> + 'v,\n-{\n-    pub fn new(base: &'v mut V) -> Self {\n-        DeepVisitor { visitor: base }\n-    }\n-}\n-\n-impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n-where\n-    V: Visitor<'hir>,\n-{\n-    fn visit_item(&mut self, item: &'hir Item<'hir>) {\n-        self.visitor.visit_item(item);\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>) {\n-        self.visitor.visit_trait_item(trait_item);\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>) {\n-        self.visitor.visit_impl_item(impl_item);\n-    }\n-}\n-\n /// A parallel variant of `ItemLikeVisitor`.\n pub trait ParItemLikeVisitor<'hir> {\n     fn visit_item(&self, item: &'hir Item<'hir>);\n     fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>);\n     fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>);\n }\n-\n-pub trait IntoVisitor<'hir> {\n-    type Visitor: Visitor<'hir>;\n-    fn into_visitor(&self) -> Self::Visitor;\n-}\n-\n-pub struct ParDeepVisitor<V>(pub V);\n-\n-impl<'hir, V> ParItemLikeVisitor<'hir> for ParDeepVisitor<V>\n-where\n-    V: IntoVisitor<'hir>,\n-{\n-    fn visit_item(&self, item: &'hir Item<'hir>) {\n-        self.0.into_visitor().visit_item(item);\n-    }\n-\n-    fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>) {\n-        self.0.into_visitor().visit_trait_item(trait_item);\n-    }\n-\n-    fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>) {\n-        self.0.into_visitor().visit_impl_item(impl_item);\n-    }\n-}", "previous_filename": "src/librustc/hir/itemlikevisit.rs"}, {"sha": "8bf2e6299a9d3c081bfeac8897c95a003368a64e", "filename": "src/librustc_hir/lib.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -0,0 +1,24 @@\n+//! HIR datatypes. See the [rustc guide] for more info.\n+//!\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n+\n+#![feature(crate_visibility_modifier)]\n+#![feature(const_fn)]\n+#![feature(in_band_lifetimes)]\n+#![feature(specialization)]\n+#![recursion_limit = \"256\"]\n+\n+#[macro_use]\n+extern crate rustc_data_structures;\n+\n+pub mod def;\n+pub mod def_id;\n+mod hir;\n+pub mod hir_id;\n+pub mod itemlikevisit;\n+pub mod pat_util;\n+pub mod print;\n+mod stable_hash_impls;\n+pub use hir::*;\n+pub use hir_id::*;\n+pub use stable_hash_impls::HashStableContext;"}, {"sha": "6bca45b4f8397d6ea8d8b8ddd1f6f16dae3bc43f", "filename": "src/librustc_hir/pat_util.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fpat_util.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,5 +1,5 @@\n-use crate::hir::def::{CtorOf, DefKind, Res};\n-use crate::hir::def_id::DefId;\n+use crate::def::{CtorOf, DefKind, Res};\n+use crate::def_id::DefId;\n use crate::hir::{self, HirId, PatKind};\n use rustc_span::Span;\n use syntax::ast;", "previous_filename": "src/librustc/hir/pat_util.rs"}, {"sha": "571bab2cb83f288869707bbfc7c80cfc2c3b156a", "filename": "src/librustc_hir/print.rs", "status": "renamed", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -10,7 +10,7 @@ use syntax::sess::ParseSess;\n use syntax::util::parser::{self, AssocOp, Fixity};\n \n use crate::hir;\n-use crate::hir::{GenericArg, GenericParam, GenericParamKind};\n+use crate::hir::{GenericArg, GenericParam, GenericParamKind, Node};\n use crate::hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n \n use std::borrow::Cow;\n@@ -69,6 +69,45 @@ pub struct State<'a> {\n     ann: &'a (dyn PpAnn + 'a),\n }\n \n+impl<'a> State<'a> {\n+    pub fn print_node(&mut self, node: Node<'_>) {\n+        match node {\n+            Node::Param(a) => self.print_param(&a),\n+            Node::Item(a) => self.print_item(&a),\n+            Node::ForeignItem(a) => self.print_foreign_item(&a),\n+            Node::TraitItem(a) => self.print_trait_item(a),\n+            Node::ImplItem(a) => self.print_impl_item(a),\n+            Node::Variant(a) => self.print_variant(&a),\n+            Node::AnonConst(a) => self.print_anon_const(&a),\n+            Node::Expr(a) => self.print_expr(&a),\n+            Node::Stmt(a) => self.print_stmt(&a),\n+            Node::PathSegment(a) => self.print_path_segment(&a),\n+            Node::Ty(a) => self.print_type(&a),\n+            Node::TraitRef(a) => self.print_trait_ref(&a),\n+            Node::Binding(a) | Node::Pat(a) => self.print_pat(&a),\n+            Node::Arm(a) => self.print_arm(&a),\n+            Node::Block(a) => {\n+                // Containing cbox, will be closed by print-block at `}`.\n+                self.cbox(INDENT_UNIT);\n+                // Head-ibox, will be closed by print-block after `{`.\n+                self.ibox(0);\n+                self.print_block(&a)\n+            }\n+            Node::Lifetime(a) => self.print_lifetime(&a),\n+            Node::Visibility(a) => self.print_visibility(&a),\n+            Node::GenericParam(_) => panic!(\"cannot print Node::GenericParam\"),\n+            Node::Field(_) => panic!(\"cannot print StructField\"),\n+            // These cases do not carry enough information in the\n+            // `hir_map` to reconstruct their full structure for pretty\n+            // printing.\n+            Node::Ctor(..) => panic!(\"cannot print isolated Ctor\"),\n+            Node::Local(a) => self.print_local_decl(&a),\n+            Node::MacroDef(_) => panic!(\"cannot print MacroDef\"),\n+            Node::Crate => panic!(\"cannot print Crate\"),\n+        }\n+    }\n+}\n+\n impl std::ops::Deref for State<'_> {\n     type Target = pp::Printer;\n     fn deref(&self) -> &Self::Target {\n@@ -92,8 +131,8 @@ impl<'a> PrintState<'a> for State<'a> {\n         self.ann.post(self, AnnNode::Name(&ident.name))\n     }\n \n-    fn print_generic_args(&mut self, args: &ast::GenericArgs, _colons_before_params: bool) {\n-        span_bug!(args.span(), \"AST generic args printed by HIR pretty-printer\");\n+    fn print_generic_args(&mut self, _: &ast::GenericArgs, _colons_before_params: bool) {\n+        panic!(\"AST generic args printed by HIR pretty-printer\");\n     }\n }\n \n@@ -1960,7 +1999,7 @@ impl<'a> State<'a> {\n                             self.print_lifetime(lt);\n                             sep = \"+\";\n                         }\n-                        _ => bug!(),\n+                        _ => panic!(),\n                     }\n                 }\n             }\n@@ -2023,7 +2062,7 @@ impl<'a> State<'a> {\n                             GenericBound::Outlives(lt) => {\n                                 self.print_lifetime(lt);\n                             }\n-                            _ => bug!(),\n+                            _ => panic!(),\n                         }\n \n                         if i != 0 {", "previous_filename": "src/librustc/hir/print.rs"}, {"sha": "696a350ebdd15e7d97ba5ed1fe37850c9a51d307", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -0,0 +1,81 @@\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+\n+use crate::def_id::DefId;\n+use crate::hir::{BodyId, Expr, ImplItemId, ItemId, Mod, TraitItemId, Ty, VisibilityKind};\n+use crate::hir_id::HirId;\n+\n+/// Requirements for a `StableHashingContext` to be used in this crate.\n+/// This is a hack to allow using the `HashStable_Generic` derive macro\n+/// instead of implementing everything in librustc.\n+pub trait HashStableContext: syntax::HashStableContext + rustc_target::HashStableContext {\n+    fn hash_def_id(&mut self, _: DefId, hasher: &mut StableHasher);\n+    fn hash_hir_id(&mut self, _: HirId, hasher: &mut StableHasher);\n+    fn hash_body_id(&mut self, _: BodyId, hasher: &mut StableHasher);\n+    fn hash_item_id(&mut self, _: ItemId, hasher: &mut StableHasher);\n+    fn hash_impl_item_id(&mut self, _: ImplItemId, hasher: &mut StableHasher);\n+    fn hash_trait_item_id(&mut self, _: TraitItemId, hasher: &mut StableHasher);\n+    fn hash_hir_mod(&mut self, _: &Mod<'_>, hasher: &mut StableHasher);\n+    fn hash_hir_expr(&mut self, _: &Expr<'_>, hasher: &mut StableHasher);\n+    fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n+    fn hash_hir_visibility_kind(&mut self, _: &VisibilityKind<'_>, hasher: &mut StableHasher);\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for HirId {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_hir_id(*self, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for DefId {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_def_id(*self, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for BodyId {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_body_id(*self, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ItemId {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_item_id(*self, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItemId {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_impl_item_id(*self, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItemId {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_trait_item_id(*self, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Mod<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_hir_mod(self, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Expr<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_hir_expr(self, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Ty<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_hir_ty(self, hasher)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for VisibilityKind<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_hir_visibility_kind(self, hasher)\n+    }\n+}"}, {"sha": "be60b75bc47eb26171ebda49bb8037eb6802019e", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -27,6 +27,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_codegen_llvm = { path = \"../librustc_codegen_llvm\", optional = true }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_passes = { path = \"../librustc_passes\" }"}, {"sha": "eb9c118bb0100d8345ee53b09327d84a2707e94f", "filename": "src/librustc_interface/callbacks.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_interface%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_interface%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fcallbacks.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -40,9 +40,23 @@ fn track_diagnostic(diagnostic: &Diagnostic) {\n     })\n }\n \n+/// This is a callback from librustc_hir as it cannot access the implicit state\n+/// in librustc otherwise.\n+fn def_id_debug(def_id: rustc_hir::def_id::DefId, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    write!(f, \"DefId({}:{}\", def_id.krate, def_id.index.index())?;\n+    tls::with_opt(|opt_tcx| {\n+        if let Some(tcx) = opt_tcx {\n+            write!(f, \" ~ {}\", tcx.def_path_debug_str(def_id))?;\n+        }\n+        Ok(())\n+    })?;\n+    write!(f, \")\")\n+}\n+\n /// Sets up the callbacks in prior crates which we want to refer to the\n /// TyCtxt in.\n pub fn setup_callbacks() {\n     rustc_span::SPAN_DEBUG.swap(&(span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n+    rustc_hir::def_id::DEF_ID_DEBUG.swap(&(def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n     TRACK_DIAGNOSTICS.swap(&(track_diagnostic as fn(&_)));\n }"}, {"sha": "5e107b2f72d621eb8fc29e5974bfc3ac56f7971d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -23,17 +23,16 @@\n \n use std::fmt::Write;\n \n-use hir::Node;\n use lint::{EarlyContext, EarlyLintPass, LateLintPass, LintPass};\n use lint::{LateContext, LintArray, LintContext};\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::DefId;\n+use rustc::hir::{HirIdSet, Node};\n+use rustc::lint;\n use rustc::lint::FutureIncompatibleInfo;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n-use rustc::{lint, util};\n-use util::nodemap::HirIdSet;\n \n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::Stability;\n use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n "}, {"sha": "7944c88c7cbd8fa63d09ccb7b9ed93184ab5335a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -5,11 +5,12 @@ use lint::{LateContext, LintArray, LintContext};\n use lint::{LateLintPass, LintPass};\n use rustc::hir;\n use rustc::hir::{is_range_literal, ExprKind, Node};\n+use rustc::lint;\n use rustc::mir::interpret::{sign_extend, truncate};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n-use rustc::{lint, util::nodemap::FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;"}, {"sha": "f82579aba02ad5555e0ab9e9dfa64d12e88a514d", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -59,7 +59,7 @@ use rustc::middle::cstore::{self, DepKind};\n use rustc::middle::dependency_format::{Dependencies, DependencyList, Linkage};\n use rustc::session::config;\n use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::PanicStrategy;\n \n crate fn calculate(tcx: TyCtxt<'_>) -> Dependencies {"}, {"sha": "59e769cabb7d47a837870eb101593b58ff9c467e", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -219,8 +219,7 @@ use rustc::middle::cstore::{CrateSource, MetadataLoader};\n use rustc::session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n use rustc::session::search_paths::PathKind;\n use rustc::session::{config, CrateDisambiguator, Session};\n-use rustc::util::nodemap::FxHashMap;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n "}, {"sha": "bdd9eab71186d8bfd4b1d76e2052435aab1d179b", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::middle::cstore::{self, NativeLibrary};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;"}, {"sha": "1ed6b748d873a133d5553565bb1137e26291cf41", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -5,8 +5,9 @@ use crate::rmeta::*;\n \n use rustc::dep_graph::{self, DepNodeIndex};\n use rustc::hir;\n-use rustc::hir::def::{self, CtorKind, CtorOf, DefKind, Res};\n+use rustc::hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::exports::Export;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::middle::cstore::{CrateSource, ExternCrate};\n@@ -930,7 +931,7 @@ impl<'a, 'tcx> CrateMetadata {\n     /// Iterates over each child of the given item.\n     fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F, sess: &Session)\n     where\n-        F: FnMut(def::Export<hir::HirId>),\n+        F: FnMut(Export<hir::HirId>),\n     {\n         if let Some(proc_macros_ids) = self.root.proc_macro_data.map(|d| d.decode(self)) {\n             /* If we are loading as a proc macro, we want to return the view of this crate\n@@ -944,12 +945,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         self.local_def_id(def_index),\n                     );\n                     let ident = Ident::from_str(raw_macro.name());\n-                    callback(def::Export {\n-                        ident: ident,\n-                        res: res,\n-                        vis: ty::Visibility::Public,\n-                        span: DUMMY_SP,\n-                    });\n+                    callback(Export { ident, res, vis: ty::Visibility::Public, span: DUMMY_SP });\n                 }\n             }\n             return;\n@@ -989,7 +985,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             .unwrap_or(Lazy::empty());\n                         for child_index in child_children.decode((self, sess)) {\n                             if let Some(kind) = self.def_kind(child_index) {\n-                                callback(def::Export {\n+                                callback(Export {\n                                     res: Res::Def(kind, self.local_def_id(child_index)),\n                                     ident: Ident::with_dummy_span(self.item_name(child_index)),\n                                     vis: self.get_visibility(child_index),\n@@ -1019,7 +1015,7 @@ impl<'a, 'tcx> CrateMetadata {\n                     let vis = self.get_visibility(child_index);\n                     let def_id = self.local_def_id(child_index);\n                     let res = Res::Def(kind, def_id);\n-                    callback(def::Export { res, ident, vis, span });\n+                    callback(Export { res, ident, vis, span });\n                     // For non-re-export structs and variants add their constructors to children.\n                     // Re-export lists automatically contain constructors when necessary.\n                     match kind {\n@@ -1029,7 +1025,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                 let ctor_res =\n                                     Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                                 let vis = self.get_visibility(ctor_def_id.index);\n-                                callback(def::Export { res: ctor_res, vis, ident, span });\n+                                callback(Export { res: ctor_res, vis, ident, span });\n                             }\n                         }\n                         DefKind::Variant => {\n@@ -1053,7 +1049,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                     vis = ty::Visibility::Restricted(crate_def_id);\n                                 }\n                             }\n-                            callback(def::Export { res: ctor_res, ident, vis, span });\n+                            callback(Export { res: ctor_res, ident, vis, span });\n                         }\n                         _ => {}\n                     }"}, {"sha": "5d5fcf406898714c6b74cb61841b3977b325b4b9", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -5,8 +5,8 @@ use crate::native_libs;\n use crate::rmeta::{self, encoder};\n \n use rustc::hir;\n-use rustc::hir::def;\n-use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::exports::Export;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::middle::cstore::{CrateSource, CrateStore, DepKind, EncodedMetadata, NativeLibraryKind};\n@@ -16,7 +16,6 @@ use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::query::QueryConfig;\n use rustc::ty::{self, TyCtxt};\n-use rustc::util::nodemap::DefIdMap;\n use rustc_data_structures::svh::Svh;\n use rustc_parse::parser::emit_unclosed_delims;\n use rustc_parse::source_file_to_stream;\n@@ -343,29 +342,28 @@ pub fn provide(providers: &mut Providers<'_>) {\n             // (restrict scope of mutable-borrow of `visible_parent_map`)\n             {\n                 let visible_parent_map = &mut visible_parent_map;\n-                let mut add_child = |bfs_queue: &mut VecDeque<_>,\n-                                     child: &def::Export<hir::HirId>,\n-                                     parent: DefId| {\n-                    if child.vis != ty::Visibility::Public {\n-                        return;\n-                    }\n+                let mut add_child =\n+                    |bfs_queue: &mut VecDeque<_>, child: &Export<hir::HirId>, parent: DefId| {\n+                        if child.vis != ty::Visibility::Public {\n+                            return;\n+                        }\n \n-                    if let Some(child) = child.res.opt_def_id() {\n-                        match visible_parent_map.entry(child) {\n-                            Entry::Occupied(mut entry) => {\n-                                // If `child` is defined in crate `cnum`, ensure\n-                                // that it is mapped to a parent in `cnum`.\n-                                if child.krate == cnum && entry.get().krate != cnum {\n+                        if let Some(child) = child.res.opt_def_id() {\n+                            match visible_parent_map.entry(child) {\n+                                Entry::Occupied(mut entry) => {\n+                                    // If `child` is defined in crate `cnum`, ensure\n+                                    // that it is mapped to a parent in `cnum`.\n+                                    if child.krate == cnum && entry.get().krate != cnum {\n+                                        entry.insert(parent);\n+                                    }\n+                                }\n+                                Entry::Vacant(entry) => {\n                                     entry.insert(parent);\n+                                    bfs_queue.push_back(child);\n                                 }\n                             }\n-                            Entry::Vacant(entry) => {\n-                                entry.insert(parent);\n-                                bfs_queue.push_back(child);\n-                            }\n                         }\n-                    }\n-                };\n+                    };\n \n                 while let Some(def) = bfs_queue.pop_front() {\n                     for child in tcx.item_children(def).iter() {\n@@ -411,7 +409,7 @@ impl CStore {\n         &self,\n         def_id: DefId,\n         sess: &Session,\n-    ) -> Vec<def::Export<hir::HirId>> {\n+    ) -> Vec<Export<hir::HirId>> {\n         let mut result = vec![];\n         self.get_crate_data(def_id.krate).each_child_of_item(\n             def_id.index,"}, {"sha": "fc7eae1e6c7a182ad5651ca4824d5e4b100db5dd", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -18,8 +18,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_index::vec::Idx;\n \n use rustc::session::config::{self, CrateType};\n-use rustc::util::nodemap::FxHashMap;\n-\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::Lrc;\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};"}, {"sha": "4ef978c21e06db239eae590a373adb41eec8f0be", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -2,8 +2,9 @@ use decoder::Metadata;\n use table::{Table, TableBuilder};\n \n use rustc::hir;\n-use rustc::hir::def::{self, CtorKind};\n+use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, DefIndex};\n+use rustc::hir::exports::Export;\n use rustc::middle::cstore::{DepKind, ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n@@ -317,7 +318,7 @@ struct RenderedConst(String);\n \n #[derive(RustcEncodable, RustcDecodable)]\n struct ModData {\n-    reexports: Lazy<[def::Export<hir::HirId>]>,\n+    reexports: Lazy<[Export<hir::HirId>]>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "b66b2e4b1f7f548cd98b06730229207c01df6e6e", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -7,7 +7,7 @@ use rustc::mir::traversal;\n use rustc::mir::visit::{MutatingUseContext, NonUseContext, PlaceContext, Visitor};\n use rustc::mir::{self, Body, Local, Location, ReadOnlyBodyAndCache};\n use rustc::ty::{RegionVid, TyCtxt};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use std::fmt;"}, {"sha": "c7ef017215e0c3dbbdc48d26df4e1d2a7b0f01fe", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -20,7 +20,7 @@ use rustc::middle::lang_items;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n-use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::DiagnosticBuilder;\n use rustc_index::vec::{Idx, IndexVec};\n use std::iter;"}, {"sha": "39edcc981a005f6919127bc1a41e856515f12ed6", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -4,15 +4,13 @@ use crate::hair::cx::Cx;\n use crate::hair::{BindingMode, LintLevel, PatKind};\n use crate::transform::MirSource;\n use crate::util as mir_util;\n-use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::{GeneratorKind, Node};\n+use rustc::hir::{self, GeneratorKind, HirIdMap, Node};\n use rustc::middle::lang_items;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::util::nodemap::HirIdMap;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::symbol::kw;\n use rustc_span::Span;"}, {"sha": "6450762d351b11ca7497d3a50519ec7c4976d284", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,7 +1,7 @@\n use core::slice::Iter;\n use rustc::mir::*;\n use rustc::ty::{ParamEnv, Ty, TyCtxt};\n-use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::{Enumerated, Idx, IndexVec};\n use rustc_span::Span;\n use smallvec::SmallVec;"}, {"sha": "43d57e0e85fb37c291d15a0f6fa3d91353c4e92b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -176,9 +176,10 @@\n \n use crate::monomorphize;\n \n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir;\n+use rustc::hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::{self, CodegenFnAttrFlags};\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::mir::interpret::{ErrorHandled, GlobalAlloc, Scalar};\n@@ -191,8 +192,7 @@ use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::time;\n-use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n-\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n use rustc_index::bit_set::GrowableBitSet;\n "}, {"sha": "9c8bcfad6da17ff413cd2188b501448f3d3ba98c", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -97,16 +97,16 @@ use std::collections::hash_map::Entry;\n use std::sync::Arc;\n \n use rustc::hir::def::DefKind;\n-use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n+use rustc::hir::def_id::{CrateNum, DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, Linkage, Visibility};\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n use rustc::ty::print::characteristic_def_id_of_type;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, InstanceDef, TyCtxt};\n use rustc::util::common::time;\n-use rustc::util::nodemap::{DefIdSet, FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_span::symbol::Symbol;\n \n use crate::monomorphize::collector::InliningMap;"}, {"sha": "860a014c5173c30c386b433c22dcd7f4b9880c47", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -13,7 +13,7 @@ use rustc::hir;\n use rustc::mir::*;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::{self, TyCtxt};\n-use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n use rustc_span::Span;\n use std::fmt;"}, {"sha": "52a105658bdcdc96d65ff840e7d3a2bb073e4690", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,11 +1,11 @@\n //! Inlining pass for MIR functions\n \n use rustc::hir::def_id::DefId;\n-use rustc::hir::CodegenFnAttrFlags;\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n \n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::visit::*;\n use rustc::mir::*;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};"}, {"sha": "a2f3fcea7569a6d50ca2103bf8083756333b74c6", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -7,7 +7,7 @@ use rustc::mir::{\n     ProjectionElem, Rvalue,\n };\n use rustc::ty::{self, TyCtxt};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::Idx;\n use std::mem;\n "}, {"sha": "7cf94f7260fd4c281528f47345f53cfaeceaa107", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,12 +1,11 @@\n use crate::{build, shim};\n use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIdSet, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n use rustc::ty::{InstanceDef, TyCtxt, TypeFoldable};\n-use rustc::util::nodemap::DefIdSet;\n use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use std::borrow::Cow;"}, {"sha": "f9db1a21cc87d3c055131d2a47d957500e9f006a", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -9,13 +9,11 @@ use rustc::hir::{self, PatKind, TyKind};\n \n use rustc::hir::def::{CtorOf, DefKind, Res};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n use rustc::lint;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::privacy;\n use rustc::ty::{self, DefIdTree, TyCtxt};\n-use rustc::util::nodemap::FxHashSet;\n-\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use rustc_span;\n use rustc_span::symbol::sym;"}, {"sha": "6b2c42602ff0ba6bc043771c962f0ebdcdd80b69", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -9,13 +9,12 @@\n //!\n //! * Compiler internal types like `Ty` and `TyCtxt`\n \n+use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::FxHashMap;\n-\n-use rustc::hir;\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;\n "}, {"sha": "4341ebfc45736d7acbeafd0cdf6579dae625fd00", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -5,7 +5,7 @@\n use rustc::hir::intravisit as hir_visit;\n use rustc::hir::{self, HirId};\n use rustc::util::common::to_readable_str;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_span::Span;\n use syntax::ast::{self, AttrId, NodeId};\n use syntax::visit as ast_visit;"}, {"sha": "6a38524720e27307008aa502551250c59abbda75", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -96,16 +96,13 @@\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use rustc::hir;\n use rustc::hir::def::*;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n-use rustc::hir::Node;\n-use rustc::hir::{Expr, HirId};\n+use rustc::hir::{self, Expr, HirId, HirIdMap, HirIdSet, Node};\n use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n-use rustc::util::nodemap::{HirIdMap, HirIdSet};\n \n use errors::Applicability;\n use rustc_data_structures::fx::FxIndexMap;"}, {"sha": "4bcba96910bde2d979f8120a33a5b69721f1e11e", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -6,21 +6,20 @@\n // reachable as well.\n \n use rustc::hir::def::{DefKind, Res};\n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::def_id::{CrateNum, DefId};\n+use rustc::hir::intravisit;\n+use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::Node;\n-use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n+use rustc::hir::{self, HirIdSet};\n+use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n use rustc::session::config;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n-use rustc::util::nodemap::{FxHashSet, HirIdSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n-\n-use rustc::hir;\n-use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_target::spec::abi::Abi;\n \n // Returns true if the given item must be inlined because it may be"}, {"sha": "7652d5a36ee19292f8142fa64849fba6cc1b196f", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -14,8 +14,7 @@ use rustc::hir::{Arm, Block, Expr, Local, Pat, PatKind, Stmt};\n use rustc::middle::region::*;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::FxHashSet;\n-\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n use rustc_span::Span;"}, {"sha": "60f26625a2e877052d246fe33362292a4cbe2f57", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -11,7 +11,7 @@ use rustc::middle::stability::{DeprecationEntry, Index};\n use rustc::session::Session;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::Attribute;"}, {"sha": "68e5e6d2543a62a33bab352f3b3c9fc7e623cd87", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -9,16 +9,14 @@ extern crate syntax;\n use rustc::bug;\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::itemlikevisit::DeepVisitor;\n-use rustc::hir::{self, AssocItemKind, Node, PatKind};\n+use rustc::hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n+use rustc::hir::{self, AssocItemKind, HirIdSet, Node, PatKind};\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n-use rustc::util::nodemap::HirIdSet;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym};"}, {"sha": "593662c1180db6dcd48fd575d1031a8f4cb7bb8f", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -24,4 +24,5 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "613fad644f64d3739d46f284f8fbbdaaed605c67", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -19,6 +19,7 @@ use crate::{Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, Segmen\n use rustc::bug;\n use rustc::hir::def::{self, *};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::exports::Export;\n use rustc::middle::cstore::CrateStore;\n use rustc::ty;\n use rustc_metadata::creader::LoadedMacro;"}, {"sha": "6561072a21bcee699e102c6d779067a17b06e75a", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -27,10 +27,9 @@ use crate::imports::ImportDirectiveSubclass;\n use crate::Resolver;\n \n use errors::pluralize;\n-\n-use rustc::util::nodemap::NodeMap;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_session::node_id::NodeMap;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n use syntax::visit::{self, Visitor};"}, {"sha": "1d45f1cd9124a605fc2558d9d48f1b82d20039b3", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::SourceMap;"}, {"sha": "cc35b7748ef44510c475dfe82b307fa78128c816", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -13,16 +13,16 @@ use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBindin\n \n use errors::{pluralize, Applicability};\n \n-use rustc::hir::def::{self, Export, PartialRes};\n+use rustc::hir::def::{self, PartialRes};\n use rustc::hir::def_id::DefId;\n+use rustc::hir::exports::Export;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc::session::DiagnosticMessageId;\n use rustc::ty;\n-use rustc::util::nodemap::FxHashSet;\n use rustc::{bug, span_bug};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n-\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::kw;\n use rustc_span::{MultiSpan, Span};"}, {"sha": "84cb3f7181996fcdeb6b569682ef0b8f9b914544", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -16,8 +16,8 @@ use rustc::hir::def::Namespace::{self, *};\n use rustc::hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::hir::TraitCandidate;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc::{bug, lint, span_bug};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};"}, {"sha": "cd94229b0abc5898a695f40d3063a9a06ad0d9c2", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -11,7 +11,7 @@ use rustc::hir::def::{self, CtorKind, DefKind};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::hir::PrimTy;\n use rustc::session::config::nightly_options;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::kw;\n use rustc_span::Span;"}, {"sha": "72e0dc32c21036fe1fae228b20c47d0f6117d90f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -20,9 +20,11 @@ pub use rustc::hir::def::{Namespace, PerNS};\n \n use Determinacy::*;\n \n+use errors::{Applicability, DiagnosticBuilder};\n use rustc::hir::def::Namespace::*;\n-use rustc::hir::def::{self, CtorKind, CtorOf, DefKind, ExportMap, NonMacroAttrKind, PartialRes};\n-use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::exports::ExportMap;\n use rustc::hir::map::Definitions;\n use rustc::hir::{Bool, Char, Float, Int, PrimTy, Str, Uint};\n use rustc::hir::{GlobMap, TraitMap};\n@@ -32,12 +34,12 @@ use rustc::session::Session;\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, ResolverOutputs};\n-use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n-\n-use rustc_metadata::creader::{CStore, CrateLoader};\n-\n-use errors::{Applicability, DiagnosticBuilder};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n+use rustc_data_structures::ptr_key::PtrKey;\n+use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::SyntaxExtension;\n+use rustc_metadata::creader::{CStore, CrateLoader};\n+use rustc_session::node_id::{NodeMap, NodeSet};\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n@@ -51,10 +53,6 @@ use syntax::visit::{self, Visitor};\n use syntax::{struct_span_err, unwrap_or};\n \n use log::debug;\n-\n-use rustc_data_structures::fx::FxIndexMap;\n-use rustc_data_structures::ptr_key::PtrKey;\n-use rustc_data_structures::sync::Lrc;\n use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n use std::{cmp, fmt, iter, ptr};"}, {"sha": "5d82c177259448859a12914f1ffdd3e5b358f4d7", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -5,32 +5,30 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n+use errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n+use rustc::hir::{self, GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n use rustc::hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n-use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n-\n-use errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc::lint;\n+use rustc::middle::resolve_lifetime::*;\n use rustc::session::Session;\n-use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n+use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n+use rustc::{bug, span_bug};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::mem::{replace, take};\n use syntax::ast;\n use syntax::attr;\n-\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::{self, GenericParamKind, LifetimeParamKind};\n+use syntax::{help, span_err, struct_span_err, walk_list};\n \n use log::debug;\n-use rustc::{bug, span_bug};\n-use syntax::{help, span_err, struct_span_err, walk_list};\n \n-use rustc::middle::resolve_lifetime::*;\n use rustc_error_codes::*;\n \n // This counts the no of times a lifetime is used"}, {"sha": "a2ef6ad70f907b1314df0a9dfe33d296838753ea", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -10,8 +10,8 @@ use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::def_id;\n use rustc::middle::stability;\n use rustc::session::Session;\n-use rustc::util::nodemap::FxHashSet;\n use rustc::{lint, span_bug, ty};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::SyntaxExtension;\n use rustc_expand::base::{self, Indeterminate, InvocationRes};\n use rustc_expand::compile_declarative_macro;"}, {"sha": "5e51c5a92ccc473850292829537dd85c7e282cc3", "filename": "src/librustc_session/node_id.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_session%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_session%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fnode_id.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -10,6 +10,8 @@ rustc_index::newtype_index! {\n     }\n }\n \n+rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeId);\n+\n impl NodeId {\n     pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n         NodeId::from_u32(expn_id.as_u32())"}, {"sha": "a0bbc2824336ccb1efc71a15b27c276044089001", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -7,7 +7,7 @@ use rustc::traits::{Normalized, ObligationCause, TraitEngine, TraitEngineExt};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::source_map::{Span, DUMMY_SP};\n \n crate fn provide(p: &mut Providers<'_>) {"}, {"sha": "601a46ad345c450b1ff2d9df554b67b2b8c7541e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -14,14 +14,14 @@ use crate::middle::resolve_lifetime as rl;\n use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::FxHashMap;\n use errors::{Applicability, DiagnosticId};\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n@@ -35,8 +35,6 @@ use std::collections::BTreeSet;\n use std::iter;\n use std::slice;\n \n-use rustc_data_structures::fx::FxHashSet;\n-\n use rustc_error_codes::*;\n \n #[derive(Debug)]"}, {"sha": "743a2c6b543972d10451d1da064e5b53065cc7af", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -15,7 +15,6 @@ use crate::check::FnCtxt;\n use crate::check::Needs;\n use crate::check::TupleArgumentsFlag::DontTupleArguments;\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::FxHashMap;\n \n use errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir;\n@@ -31,6 +30,7 @@ use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoB\n use rustc::ty::Ty;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{AdtKind, Visibility};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "63aadd43a094961ab719c4e789064fd549384093", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -4,13 +4,13 @@\n //! types computed here.\n \n use super::FnCtxt;\n-use crate::util::nodemap::FxHashMap;\n use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::{self, Expr, ExprKind, Pat, PatKind};\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::Span;\n \n struct InteriorVisitor<'a, 'tcx> {"}, {"sha": "28c84c5c0d0226dfef4f8e6e749ef87cc89c7a80", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -27,7 +27,7 @@ use rustc::ty::GenericParamDefKind;\n use rustc::ty::{\n     self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_span::{symbol::Symbol, Span, DUMMY_SP};\n use std::cmp::max;"}, {"sha": "fd92e376f61c14c015f17554e9cd7ac6ad9295d7", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -4,7 +4,6 @@\n use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n-use crate::util::nodemap::FxHashSet;\n use errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -14,6 +13,7 @@ use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::{source_map, FileName, Span};\n use syntax::ast;\n use syntax::util::lev_distance;"}, {"sha": "312208626cf2d83488ce18ad741111424847e651", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -92,10 +92,10 @@ use crate::middle::lang_items;\n use crate::namespace::Namespace;\n use errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir::def::{CtorOf, DefKind, Res};\n-use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::{self, ExprKind, GenericArg, ItemKind, Node, PatKind, QPath};\n+use rustc::hir::{self, ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n@@ -117,6 +117,7 @@ use rustc::ty::{\n     self, AdtKind, CanonicalUserType, Const, GenericParamDefKind, RegionKind, ToPolyTraitRef,\n     ToPredicate, Ty, TyCtxt, UserType,\n };\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::Idx;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n@@ -144,7 +145,6 @@ use crate::session::config::EntryFnType;\n use crate::session::Session;\n use crate::util::captures::Captures;\n use crate::util::common::{indenter, ErrorReported};\n-use crate::util::nodemap::{DefIdMap, DefIdSet, FxHashMap, FxHashSet, HirIdMap};\n use crate::TypeAndSubsts;\n \n use self::autoderef::Autoderef;"}, {"sha": "8e5e5c39e67dcfec39610bb3f6bf26031875817b", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,5 +1,4 @@\n use crate::check::FnCtxt;\n-use crate::util::nodemap::FxHashMap;\n use errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -9,6 +8,7 @@ use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Pattern;\n use rustc::ty::subst::GenericArg;\n use rustc::ty::{self, BindingMode, Ty, TypeFoldable};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "e9df155c9b75899574cace8838f16181c7b2d154", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,13 +1,14 @@\n use crate::check::{FnCtxt, Inherited};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n-use crate::hir::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::ItemKind;\n use rustc::infer::opaque_types::may_define_opaque_type;\n use rustc::middle::lang_items;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::{InternalSubsts, Subst};\n-use rustc::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use errors::DiagnosticBuilder;\n use rustc_span::symbol::sym;\n@@ -252,6 +253,15 @@ fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_>\n     }\n }\n \n+fn item_adt_kind(kind: &ItemKind<'_>) -> Option<AdtKind> {\n+    match kind {\n+        ItemKind::Struct(..) => Some(AdtKind::Struct),\n+        ItemKind::Union(..) => Some(AdtKind::Union),\n+        ItemKind::Enum(..) => Some(AdtKind::Enum),\n+        _ => None,\n+    }\n+}\n+\n /// In a type definition, we check that to ensure that the types of the fields are well-formed.\n fn check_type_defn<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n@@ -297,7 +307,7 @@ fn check_type_defn<'tcx, F>(\n                         field.span,\n                         fcx.body_id,\n                         traits::FieldSized {\n-                            adt_kind: match item.kind.adt_kind() {\n+                            adt_kind: match item_adt_kind(&item.kind) {\n                                 Some(i) => i,\n                                 None => bug!(),\n                             },"}, {"sha": "0fbc14a717374361a3c9c5d5c9ce7dca9c7b54b1", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -5,14 +5,13 @@\n use crate::check::FnCtxt;\n \n use rustc::hir;\n-use rustc::hir::def_id::{DefId, DefIndex};\n+use rustc::hir::def_id::{DefId, DefIdSet, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::InferCtxt;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::util::nodemap::DefIdSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_span::symbol::sym;\n use rustc_span::Span;"}, {"sha": "b0cbabd195853dbe9c9701ecfbd9b13bfdcb9794", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -6,11 +6,9 @@ use rustc_span::Span;\n use syntax::ast;\n \n use rustc::hir;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::print::visibility_qualified;\n-use rustc::util::nodemap::DefIdSet;\n-\n use rustc_data_structures::fx::FxHashMap;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {"}, {"sha": "bc39856e14d73f0e63f242c9de7913ededb13a5a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -20,6 +20,7 @@ use crate::constrained_generic_params as cgp;\n use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n+use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::GenericArgKind;\n@@ -29,7 +30,7 @@ use rustc::ty::util::IntTypeExt;\n use rustc::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc::util::captures::Captures;\n-use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi;\n \n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -44,7 +45,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::GenericParamKind;\n use rustc::hir::Node;\n-use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs, Unsafety};\n+use rustc::hir::{self, Unsafety};\n \n use errors::{Applicability, StashKey};\n "}, {"sha": "a281c0ae67d24ef1635c883442495b6cb0eea62c", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,6 +1,6 @@\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::source_map::Span;\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]"}, {"sha": "770aeb6869a8af3ecf11393ea6a95f06fc6aaccc", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n use rustc_span::Span;"}, {"sha": "a922846856db8375d06f61ed1e1fcd27f010799b", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,6 +1,6 @@\n-use crate::util::nodemap::FxHashMap;\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, OutlivesPredicate, TyCtxt};\n+use rustc_data_structures::fx::FxHashMap;\n \n use super::utils::*;\n "}, {"sha": "b18f89c1a72d15d54390865c1ed6179fa9ee3c79", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Node};\n use rustc::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::Span;\n \n use super::explicit::ExplicitPredicatesMap;"}, {"sha": "db3e7a2b1342857004c85f0976c09c22e06a77c4", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -9,10 +9,9 @@\n // `InferredIndex` is a newtype'd int representing the index of such\n // a variable.\n \n-use crate::util::nodemap::HirIdMap;\n use arena::TypedArena;\n-use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir::{self, HirIdMap};\n use rustc::ty::{self, TyCtxt};\n use std::fmt;\n "}, {"sha": "dec019711a01267521a3995b799333bd8e1d9f05", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir;\n use rustc::traits::auto_trait::{self, AutoTraitResult};\n use rustc::ty::{self, Region, RegionVid, TypeFoldable};\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n \n use std::fmt::Debug;\n "}, {"sha": "49baff065c873e84480bcc90386b1fea35371440", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -11,7 +11,7 @@ use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::DefId;\n use rustc::hir::{self, Mutability};\n use rustc::ty;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_metadata::creader::LoadedMacro;\n \n use crate::clean::{self, GetDefId, ToSource, TypeKind};"}, {"sha": "fad2bab43b990731c71985fca05b18f5eb9fea7d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -19,7 +19,7 @@ use rustc::middle::stability;\n use rustc::ty::fold::TypeFolder;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym};"}, {"sha": "6bb1ef7d1261b281cc99c28c158b2e2e831c781f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::{self, Mutability};\n use rustc::middle::lang_items;\n use rustc::middle::stability;\n use rustc::ty::layout::VariantIdx;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;"}, {"sha": "d17b3ce0b1bc2b266e360133e96570334fa755f5", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -15,7 +15,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::{sign_extend, ConstValue, Scalar};\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, DefIdTree, Ty};\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;"}, {"sha": "988d35117ae028b0276a47f3c4090ae19b0f5f11", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -8,7 +8,7 @@ use rustc::session::config::ErrorOutputType;\n use rustc::session::DiagnosticOutput;\n use rustc::session::{self, config};\n use rustc::ty::{Ty, TyCtxt};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_driver::abort_on_err;\n use rustc_feature::UnstableFeatures;\n use rustc_interface::interface;"}, {"sha": "f84fef2761eca802525fc258f352485439a93064", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -11,7 +11,7 @@ use std::fmt;\n \n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_target::spec::abi::Abi;\n \n use crate::clean::{self, PrimitiveType};"}, {"sha": "c315cefc1b88b3d591db46540ff5ffb5753e4aa9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -47,8 +47,8 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::{self, Mutability};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;"}, {"sha": "d9360f24a787cdf5634c9d4c9d2019fed14439cd", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -4,7 +4,7 @@ use crate::core::DocContext;\n use crate::fold::DocFolder;\n \n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::symbol::sym;\n \n pub const COLLECT_TRAIT_IMPLS: Pass = Pass {"}, {"sha": "784d967017db0c71be65a9a1bc4b9ef76e6cb3ef", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,10 +1,9 @@\n //! Contains information about \"passes\", used to modify crate information during the documentation\n //! process.\n \n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, DefIdSet};\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::util::nodemap::DefIdSet;\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use std::mem;\n use std::ops::Range;"}, {"sha": "5fd97d1685ac619586f3185aca35301db55cd85f", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,4 +1,4 @@\n-use rustc::util::nodemap::DefIdSet;\n+use rustc::hir::def_id::DefIdSet;\n use rustc_span::symbol::sym;\n use std::mem;\n "}, {"sha": "167aa2ca7d23049f859dda5c02cfcf9c8646443e", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -1,4 +1,4 @@\n-use rustc::util::nodemap::DefIdSet;\n+use rustc::hir::def_id::DefIdSet;\n \n use crate::clean;\n use crate::core::DocContext;"}, {"sha": "707d9a999e5291b938165cb20b38bd332068f72e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -6,7 +6,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::{self, Node};\n use rustc::middle::privacy::AccessLevel;\n use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;"}, {"sha": "d157a0ca03fd07350077c11af26aa05edfe486e7", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{TyCtxt, Visibility};\n-use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::symbol::sym;\n \n use crate::clean::{AttributesExt, NestedAttributesExt};"}, {"sha": "72beddf7bb516202e8dbf3153c0a68fec20a1300", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7494250106003d698579edef215d0c01810b5156/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494250106003d698579edef215d0c01810b5156/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=7494250106003d698579edef215d0c01810b5156", "patch": "@@ -102,7 +102,17 @@ pub mod print {\n \n pub mod early_buffered_lints;\n \n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+\n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n /// instead of implementing everything in librustc.\n-pub trait HashStableContext: rustc_span::HashStableContext {}\n+pub trait HashStableContext: rustc_span::HashStableContext {\n+    fn hash_attr(&mut self, _: &ast::Attribute, hasher: &mut StableHasher);\n+}\n+\n+impl<AstCtx: crate::HashStableContext> HashStable<AstCtx> for ast::Attribute {\n+    fn hash_stable(&self, hcx: &mut AstCtx, hasher: &mut StableHasher) {\n+        hcx.hash_attr(self, hasher)\n+    }\n+}"}]}