{"sha": "ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZTQyY2Y5MzFkYzljYjdjN2Y0Yzc4ZDdmOTUyMTk4NWMyYThlMTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T00:05:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T00:05:45Z"}, "message": "A certain incomplete quantity of wrestling with \"INIT\" statements that don't actually initialize. Should probably rename them to MAKE. Anyway, WIP, but two steps forward (and one back). More later.", "tree": {"sha": "0fa2f6e9274f326687bb981172c76897b08c9eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa2f6e9274f326687bb981172c76897b08c9eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11", "html_url": "https://github.com/rust-lang/rust/commit/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6af9dda69a8650b79757a4166facde855ea6b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6af9dda69a8650b79757a4166facde855ea6b1f", "html_url": "https://github.com/rust-lang/rust/commit/c6af9dda69a8650b79757a4166facde855ea6b1f"}], "stats": {"total": 113, "additions": 82, "deletions": 31}, "files": [{"sha": "84f3a2b2ef2cd8c35232f211f59c28638638e31c", "filename": "src/Makefile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11", "patch": "@@ -357,6 +357,7 @@ TEST_XFAILS_X86 :=  test/run-pass/bind-obj-ctor.rs \\\n                     test/run-pass/vec-slice.rs \\\n                     test/run-pass/fn-lval.rs \\\n                     test/run-pass/generic-fn-infer.rs \\\n+                    test/run-pass/generic-tag-alt.rs \\\n                     test/run-pass/generic-recursive-tag.rs \\\n                     test/run-pass/iter-ret.rs \\\n                     test/run-pass/mlist-cycle.rs \\\n@@ -387,6 +388,7 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       bind-thunk.rs \\\n                       bind-trivial.rs \\\n                       bitwise.rs \\\n+                      box-in-tup.rs \\\n                       box-unbox.rs \\\n                       cast.rs \\\n                       clone-with-exterior.rs \\\n@@ -476,6 +478,7 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       vec-append.rs \\\n                       vec-concat.rs \\\n                       vec-drop.rs \\\n+                      vec-in-tup.rs \\\n                       vec-late-init.rs \\\n                       vec-lib.rs \\\n                       vec-slice.rs \\"}, {"sha": "cd59ff5dd2f8d2d82c8aa6bd12249f4379aed855", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 76, "deletions": 28, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11", "patch": "@@ -1248,12 +1248,16 @@ let trans_visitor\n                  (sorted_htab_keys fns))\n         end\n \n-  and trans_init_str (dst:Ast.lval) (s:string) : unit =\n+  and trans_init_str (initializing:bool) (dst:Ast.lval) (s:string) : unit =\n     (* Include null byte. *)\n     let init_sz = Int64.of_int ((String.length s) + 1) in\n     let static = trans_static_string s in\n-    let (dst, _) = trans_lval_init dst in\n-      trans_upcall \"upcall_new_str\" dst [| static; imm init_sz |]\n+    let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n+    let _ =\n+      if not initializing\n+      then drop_ty_in_current_frame dst_cell dst_ty\n+    in\n+      trans_upcall \"upcall_new_str\" dst_cell [| static; imm init_sz |]\n \n   and trans_lit (lit:Ast.lit) : Il.operand =\n     match lit with\n@@ -2220,22 +2224,33 @@ let trans_visitor\n                  trans_atom (Ast.ATOM_lval chan) |];\n         end\n \n-  and trans_init_port (dst:Ast.lval) : unit =\n-    let (dstcell, dst_ty) = trans_lval_init dst in\n+  and trans_init_port (initializing:bool) (dst:Ast.lval) : unit =\n+    let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n+    let _ =\n+      if not initializing\n+      then drop_ty_in_current_frame dst_cell dst_ty\n+    in\n     let unit_ty = match dst_ty with\n         Ast.TY_port t -> t\n       | _ -> bug () \"init dst of port-init has non-port type\"\n     in\n     let unit_sz = ty_sz abi unit_ty in\n-      trans_upcall \"upcall_new_port\" dstcell [| imm unit_sz |]\n+      trans_upcall \"upcall_new_port\" dst_cell [| imm unit_sz |]\n \n   and trans_del_port (port:Il.cell) : unit =\n     trans_void_upcall \"upcall_del_port\" [| Il.Cell port |]\n \n-  and trans_init_chan (dst:Ast.lval) (port:Ast.lval) : unit =\n-    let (dstcell, _) = trans_lval_init dst\n+  and trans_init_chan\n+      (initializing:bool)\n+      (dst:Ast.lval)\n+      (port:Ast.lval)\n+      : unit =\n+    let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n+    let _ =\n+      if not initializing\n+      then drop_ty_in_current_frame dst_cell dst_ty\n     in\n-      trans_upcall \"upcall_new_chan\" dstcell\n+      trans_upcall \"upcall_new_chan\" dst_cell\n         [| trans_atom (Ast.ATOM_lval port) |]\n \n   and trans_del_chan (chan:Il.cell) : unit =\n@@ -2258,8 +2273,16 @@ let trans_visitor\n    * part out for reuse in string code.\n    *)\n \n-  and trans_init_vec (dst:Ast.lval) (atoms:Ast.atom array) : unit =\n-    let (dst_cell, dst_ty) = trans_lval_init dst in\n+  and trans_init_vec\n+      (initializing:bool)\n+      (dst:Ast.lval)\n+      (atoms:Ast.atom array)\n+      : unit =\n+    let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n+    let _ =\n+      if not initializing\n+      then drop_ty_in_current_frame dst_cell dst_ty\n+    in\n     let gc_ctrl =\n       if (ty_mem_ctrl dst_ty) = MEM_gc\n       then Il.Cell (get_tydesc None dst_ty)\n@@ -2292,17 +2315,26 @@ let trans_visitor\n             mov (get_element_ptr vec Abi.vec_elt_fill) (Il.Cell fill);\n \n \n-  and trans_init_box (dst:Ast.lval) (src:Ast.atom) : unit =\n+  and trans_init_box\n+      (initializing:bool)\n+      (dst:Ast.lval)\n+      (src:Ast.atom)\n+      : unit =\n     let src_op = trans_atom src in\n     let src_cell = Il.Mem (force_to_mem src_op) in\n     let src_ty = simplified_ty (atom_type cx src) in\n-    let dst_sloti = lval_base_to_slot cx dst in\n-    let dst_cell = cell_of_block_slot dst_sloti.id in\n-    let dst_cell = deref_slot true dst_cell dst_sloti.node in\n-    let dst_ty = slot_ty dst_sloti.node in\n+    let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n+    let _ =\n+      if not initializing\n+      then drop_ty_in_current_frame dst_cell dst_ty\n+    in\n+    let dst_ty = strip_mutable_or_constrained_ty dst_ty in\n     let (dst_cell, dst_ty) =\n       deref_ty DEREF_one_box true dst_cell dst_ty\n     in\n+    let _ = log cx \"init_box: dst ty %a, src ty %a\"\n+      Ast.sprintf_ty dst_ty Ast.sprintf_ty src_ty\n+    in\n     let _ = assert (dst_ty = src_ty) in\n       trans_copy_ty (get_ty_params_of_current_frame()) true\n         dst_cell dst_ty src_cell src_ty None\n@@ -2868,6 +2900,12 @@ let trans_visitor\n       : unit =\n       drop_slot (get_ty_params_of_current_frame()) cell slot curr_iso\n \n+  and drop_ty_in_current_frame\n+      (cell:Il.cell)\n+      (ty:Ast.ty)\n+      : unit =\n+    drop_ty (get_ty_params_of_current_frame()) cell ty None\n+\n   and null_check (cell:Il.cell) : quad_idx =\n     emit (Il.cmp (Il.Cell cell) zero);\n     let j = mark() in\n@@ -4338,7 +4376,7 @@ let trans_visitor\n \n \n   and trans_copy_binop dst binop a_src =\n-    let (dst_cell, dst_ty) = trans_lval_maybe_init false dst in\n+    let (dst_cell, dst_ty) = trans_lval dst in\n     let src_oper = trans_atom a_src in\n       match dst_ty with\n           Ast.TY_str\n@@ -4440,15 +4478,15 @@ let trans_visitor\n           end\n \n       | Ast.STMT_init_rec (dst, atab, base) ->\n-          let (slot_cell, ty) = trans_lval_init dst in\n+          let init = maybe_init stmt.id \"rec-init\" dst in\n+          let (dst_cell, ty) = trans_lval_maybe_init init dst in\n           let (trec, dst_tys) =\n             match ty with\n                 Ast.TY_rec trec -> (trec, Array.map snd trec)\n               | _ ->\n                   bugi cx stmt.id\n                     \"non-rec destination type in stmt_init_rec\"\n           in\n-          let (dst_cell, _) = deref_ty DEREF_none true slot_cell ty in\n             begin\n               match base with\n                   None ->\n@@ -4461,42 +4499,52 @@ let trans_visitor\n             end\n \n       | Ast.STMT_init_tup (dst, elems) ->\n-          let (slot_cell, ty) = trans_lval_init dst in\n+          let init = maybe_init stmt.id \"tup-init\" dst in\n+          let (dst_cell, dst_ty) = trans_lval_maybe_init init dst in\n+          let _ =\n+            if not init\n+            then drop_ty_in_current_frame dst_cell dst_ty\n+          in\n           let dst_tys =\n-            match ty with\n+            match dst_ty with\n                 Ast.TY_tup ttup -> ttup\n               | _ ->\n                   bugi cx stmt.id\n                     \"non-tup destination type in stmt_init_tup\"\n           in\n           let atoms = Array.map snd elems in\n-          let (dst_cell, _) = deref_ty DEREF_none true slot_cell ty in\n+          let (dst_cell, _) = deref_ty DEREF_none init dst_cell dst_ty in\n             trans_init_structural_from_atoms dst_cell dst_tys atoms\n \n \n       | Ast.STMT_init_str (dst, s) ->\n-          trans_init_str dst s\n+          let init = maybe_init stmt.id \"str-init\" dst in\n+            trans_init_str init dst s\n \n       | Ast.STMT_init_vec (dst, _, atoms) ->\n-          trans_init_vec dst atoms\n+          let init = maybe_init stmt.id \"vec-init\" dst in\n+            trans_init_vec init dst atoms\n \n       | Ast.STMT_init_port dst ->\n-          trans_init_port dst\n+          let init = maybe_init stmt.id \"port-init\" dst in\n+            trans_init_port init dst\n \n       | Ast.STMT_init_chan (dst, port) ->\n+          let init = maybe_init stmt.id \"chan-init\" dst in\n           begin\n             match port with\n                 None ->\n                   let (dst_cell, _) =\n-                    trans_lval_init dst\n+                    trans_lval_maybe_init init dst\n                   in\n                     mov dst_cell imm_false\n               | Some p ->\n-                  trans_init_chan dst p\n+                  trans_init_chan init dst p\n           end\n \n       | Ast.STMT_init_box (dst, _, src) ->\n-          trans_init_box dst src\n+          let init = maybe_init stmt.id \"box-init\" dst in\n+            trans_init_box init dst src\n \n       | Ast.STMT_block block ->\n           trans_block block"}, {"sha": "09221ea3e2c2a3fc00c890f63735d88579fc12c9", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11", "patch": "@@ -6,9 +6,9 @@ type cell = tup(mutable @list);\n type list = tag(link(@cell), nil());\n \n fn main() {\n-  let @cell first = tup(@nil());\n-  let @cell second = tup(@link(first));\n+  let @cell first = @tup(mutable @nil());\n+  let @cell second = @tup(mutable @link(first));\n   first._0 = @link(second);\n   std.sys.rustrt.gc();\n-  let @cell third = tup(@nil());\n+  let @cell third = @tup(mutable @nil());\n }"}]}