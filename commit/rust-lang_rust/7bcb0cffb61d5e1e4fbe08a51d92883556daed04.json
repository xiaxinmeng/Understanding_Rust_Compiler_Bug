{"sha": "7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiY2IwY2ZmYjYxZDVlMWU0ZmJlMDhhNTFkOTI4ODM1NTZkYWVkMDQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-04-14T22:26:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-04-29T22:51:57Z"}, "message": "In JSON output, emit a directive after metadata is generated.\n\nTo implement pipelining, Cargo needs to know when metadata generation is\nfinished. This commit adds code to do that. Unfortunately, metadata file\nwriting currently occurs very late during compilation, so pipelining\nwon't produce a speed-up. Moving metadata file writing earlier will be a\nfollow-up.\n\nThe change involves splitting the existing `Emitter::emit` method in\ntwo: `Emitter::emit_diagnostic` and `Emitter::emit_directive`.\n\nThe JSON directives look like this:\n```\n{\"directive\":\"metadata file written: liba.rmeta\"}\n```\nThe functionality is behind the `-Z emit-directives` option, and also\nrequires `--error-format=json`.", "tree": {"sha": "5967374e659ac96d365d8d3b381af68ccea38d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5967374e659ac96d365d8d3b381af68ccea38d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "html_url": "https://github.com/rust-lang/rust/commit/7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d5b764ea1e717641b146d5c3169058a18f3919", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d5b764ea1e717641b146d5c3169058a18f3919", "html_url": "https://github.com/rust-lang/rust/commit/91d5b764ea1e717641b146d5c3169058a18f3919"}], "stats": {"total": 110, "additions": 85, "deletions": 25}, "files": [{"sha": "4fef6cd3dd290ef6af08024ff6a3607bf8f7dc03", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -1468,6 +1468,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          the same values as the target option of the same name\"),\n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n+    emit_directives: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit build directives if producing JSON output\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "08424e7c3229acd10261b40cc6053a10e7edcdf4", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -300,7 +300,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         sess: &Session,\n         dep_graph: &DepGraph,\n         outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported>{\n+    ) -> Result<(), ErrorReported> {\n         use rustc::util::common::time;\n         let (codegen_results, work_products) =\n             ongoing_codegen.downcast::"}, {"sha": "4cae20b698a1ca366da63a33eacb05fbda583952", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -119,8 +119,14 @@ fn link_binary_output<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n             .tempdir_in(out_filename.parent().unwrap())\n             .unwrap_or_else(|err| sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n         let metadata = emit_metadata(sess, codegen_results, &metadata_tmpdir);\n-        if let Err(e) = fs::rename(metadata, &out_filename) {\n-            sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n+        match fs::rename(&metadata, &out_filename) {\n+            Ok(_) => {\n+                if sess.opts.debugging_opts.emit_directives {\n+                    sess.parse_sess.span_diagnostic.maybe_emit_json_directive(\n+                        format!(\"metadata file written: {}\", out_filename.display()));\n+                }\n+            }\n+            Err(e) => sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e)),\n         }\n     }\n "}, {"sha": "576bcc8f38e656274d2da9d6e7822cf7d0e753c6", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -1726,7 +1726,7 @@ impl SharedEmitter {\n }\n \n impl Emitter for SharedEmitter {\n-    fn emit(&mut self, db: &DiagnosticBuilder<'_>) {\n+    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n             msg: db.message(),\n             code: db.code.clone(),\n@@ -1865,7 +1865,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n         self.wait_for_signal_to_codegen_item();\n         self.check_for_errors(tcx.sess);\n \n-        // These are generally cheap and won't through off scheduling.\n+        // These are generally cheap and won't throw off scheduling.\n         let cost = 0;\n         submit_codegened_module_to_llvm(&self.backend, tcx, module, cost);\n     }"}, {"sha": "bfc9113c2d41ed8d56e6c5bfc44da512a9a4c8e8", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -50,7 +50,11 @@ const ANONYMIZED_LINE_NUM: &str = \"LL\";\n /// Emitter trait for emitting errors.\n pub trait Emitter {\n     /// Emit a structured diagnostic.\n-    fn emit(&mut self, db: &DiagnosticBuilder<'_>);\n+    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>);\n+\n+    /// Emit a JSON directive. The default is to do nothing; this should only\n+    /// be emitted with --error-format=json.\n+    fn maybe_emit_json_directive(&mut self, _directive: String) {}\n \n     /// Checks if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {\n@@ -59,7 +63,7 @@ pub trait Emitter {\n }\n \n impl Emitter for EmitterWriter {\n-    fn emit(&mut self, db: &DiagnosticBuilder<'_>) {\n+    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n         let mut primary_span = db.span.clone();\n         let mut children = db.children.clone();\n         let mut suggestions: &[_] = &[];"}, {"sha": "e173e1060cc1097988a89a93ed98593078c565fd", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -294,9 +294,16 @@ impl error::Error for ExplicitBug {\n pub use diagnostic::{Diagnostic, SubDiagnostic, DiagnosticStyledString, DiagnosticId};\n pub use diagnostic_builder::DiagnosticBuilder;\n \n-/// A handler deals with errors; certain errors\n-/// (fatal, bug, unimpl) may cause immediate exit,\n-/// others log errors for later reporting.\n+/// A handler deals with two kinds of compiler output.\n+/// - Errors: certain errors (fatal, bug, unimpl) may cause immediate exit,\n+///   others log errors for later reporting.\n+/// - Directives: with --error-format=json, the compiler produces directives\n+///   that indicate when certain actions have completed, which are useful for\n+///   Cargo. They may change at any time and should not be considered a public\n+///   API.\n+///\n+/// This crate's name (rustc_errors) doesn't encompass the directives, because\n+/// directives were added much later.\n pub struct Handler {\n     pub flags: HandlerFlags,\n \n@@ -736,7 +743,7 @@ impl Handler {\n     }\n \n     pub fn force_print_db(&self, mut db: DiagnosticBuilder<'_>) {\n-        self.emitter.borrow_mut().emit(&db);\n+        self.emitter.borrow_mut().emit_diagnostic(&db);\n         db.cancel();\n     }\n \n@@ -761,14 +768,17 @@ impl Handler {\n         // Only emit the diagnostic if we haven't already emitted an equivalent\n         // one:\n         if self.emitted_diagnostics.borrow_mut().insert(diagnostic_hash) {\n-            self.emitter.borrow_mut().emit(db);\n+            self.emitter.borrow_mut().emit_diagnostic(db);\n             if db.is_error() {\n                 self.bump_err_count();\n             }\n         }\n     }\n-}\n \n+    pub fn maybe_emit_json_directive(&self, directive: String) {\n+        self.emitter.borrow_mut().maybe_emit_json_directive(directive);\n+    }\n+}\n \n #[derive(Copy, PartialEq, Clone, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum Level {"}, {"sha": "65f8d0e77d7be430318685fb353fa1944244f521", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -79,7 +79,7 @@ impl JsonEmitter {\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit(&mut self, db: &DiagnosticBuilder<'_>) {\n+    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n         let data = Diagnostic::from_diagnostic_builder(db, self);\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n@@ -90,6 +90,18 @@ impl Emitter for JsonEmitter {\n             panic!(\"failed to print diagnostics: {:?}\", e);\n         }\n     }\n+\n+    fn maybe_emit_json_directive(&mut self, directive: String) {\n+        let data = Directive { directive };\n+        let result = if self.pretty {\n+            writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n+        } else {\n+            writeln!(&mut self.dst, \"{}\", as_json(&data))\n+        };\n+        if let Err(e) = result {\n+            panic!(\"failed to print message: {:?}\", e);\n+        }\n+    }\n }\n \n // The following data types are provided just for serialisation.\n@@ -168,6 +180,12 @@ struct DiagnosticCode {\n     explanation: Option<&'static str>,\n }\n \n+#[derive(RustcEncodable)]\n+struct Directive {\n+    /// The directive itself.\n+    directive: String,\n+}\n+\n impl Diagnostic {\n     fn from_diagnostic_builder(db: &DiagnosticBuilder<'_>,\n                                je: &JsonEmitter)\n@@ -200,7 +218,7 @@ impl Diagnostic {\n         let buf = BufWriter::default();\n         let output = buf.clone();\n         je.json_rendered.new_emitter(Box::new(buf), Some(je.sm.clone()), false)\n-            .ui_testing(je.ui_testing).emit(db);\n+            .ui_testing(je.ui_testing).emit_diagnostic(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();\n "}, {"sha": "088280e358ae7b624585007fcf2fe77072615272", "filename": "src/test/ui/emit-directives.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Ftest%2Fui%2Femit-directives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Ftest%2Fui%2Femit-directives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-directives.rs?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -0,0 +1,12 @@\n+// ignore-tidy-linelength\n+// compile-flags:--emit=metadata --error-format=json -Z emit-directives\n+// compile-pass\n+//\n+// Normalization is required to eliminated minor path and filename differences\n+// across platforms.\n+// normalize-stderr-test: \"metadata file written: .*/emit-directives\" -> \"metadata file written: .../emit-directives\"\n+// normalize-stderr-test: \"emit-directives(\\.\\w*)?/a(\\.\\w*)?\" -> \"emit-directives/a\"\n+\n+// A very basic test for the emission of build directives in JSON output.\n+\n+fn main() {}"}, {"sha": "b8a4b96f4bf25b611eb637d1f522ae837347d029", "filename": "src/test/ui/emit-directives.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Ftest%2Fui%2Femit-directives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Ftest%2Fui%2Femit-directives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-directives.stderr?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -0,0 +1 @@\n+{\"directive\":\"metadata file written: .../emit-directives/a\"}"}, {"sha": "26a3c4dee40aa478f3ec112f56187d167b59c34b", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcb0cffb61d5e1e4fbe08a51d92883556daed04/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=7bcb0cffb61d5e1e4fbe08a51d92883556daed04", "patch": "@@ -17,6 +17,12 @@ struct Diagnostic {\n     rendered: Option<String>,\n }\n \n+#[derive(Deserialize)]\n+struct Directive {\n+    #[allow(dead_code)]\n+    directive: String,\n+}\n+\n #[derive(Deserialize, Clone)]\n struct DiagnosticSpan {\n     file_name: String,\n@@ -67,16 +73,17 @@ pub fn extract_rendered(output: &str) -> String {\n         .lines()\n         .filter_map(|line| {\n             if line.starts_with('{') {\n-                match serde_json::from_str::<Diagnostic>(line) {\n-                    Ok(diagnostic) => diagnostic.rendered,\n-                    Err(error) => {\n-                        print!(\n-                            \"failed to decode compiler output as json: \\\n-                             `{}`\\nline: {}\\noutput: {}\",\n-                            error, line, output\n-                        );\n-                        panic!()\n-                    }\n+                if let Ok(diagnostic) = serde_json::from_str::<Diagnostic>(line) {\n+                    diagnostic.rendered\n+                } else if let Ok(_directive) = serde_json::from_str::<Directive>(line) {\n+                    // Swallow the directive.\n+                    None\n+                } else {\n+                    print!(\n+                        \"failed to decode compiler output as json: line: {}\\noutput: {}\",\n+                        line, output\n+                    );\n+                    panic!()\n                 }\n             } else {\n                 // preserve non-JSON lines, such as ICEs"}]}