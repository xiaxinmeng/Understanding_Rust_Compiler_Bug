{"sha": "6b11f6c46fcece9dceb92cab009e1d9f42f9672e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTFmNmM0NmZjZWNlOWRjZWI5MmNhYjAwOWUxZDlmNDJmOTY3MmU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-26T18:32:08Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-26T18:32:14Z"}, "message": "Change rustc to use GetOpts rather than ad-hoc command-line parsing\n\nNOTE: all 'long' parameters now use a double dash, so --shared, rather\nthan gcc-style -shared.", "tree": {"sha": "994e741c4f97eb5c65a8121825fbcebd6a454d63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/994e741c4f97eb5c65a8121825fbcebd6a454d63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b11f6c46fcece9dceb92cab009e1d9f42f9672e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b11f6c46fcece9dceb92cab009e1d9f42f9672e", "html_url": "https://github.com/rust-lang/rust/commit/6b11f6c46fcece9dceb92cab009e1d9f42f9672e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b11f6c46fcece9dceb92cab009e1d9f42f9672e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c74571311431924285032588e9a3b99a048a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c74571311431924285032588e9a3b99a048a9b", "html_url": "https://github.com/rust-lang/rust/commit/74c74571311431924285032588e9a3b99a048a9b"}], "stats": {"total": 220, "additions": 87, "deletions": 133}, "files": [{"sha": "2c33bbb28bc893007289a20791669406a5db592d", "filename": "Makefile.in", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b11f6c46fcece9dceb92cab009e1d9f42f9672e/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/6b11f6c46fcece9dceb92cab009e1d9f42f9672e/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=6b11f6c46fcece9dceb92cab009e1d9f42f9672e", "patch": "@@ -16,13 +16,13 @@ CFG_GCC_LINK_FLAGS :=\n CFG_BOOT_FLAGS := $(BOOT_FLAGS)\n ifdef CFG_DISABLE_OPTIMIZE\n   $(info cfg: disabling rustc optimization (CFG_DISABLE_OPTIMIZE))\n-  CFG_RUSTC_FLAGS := -nowarn\n+  CFG_RUSTC_FLAGS := --nowarn\n else\n-  CFG_RUSTC_FLAGS := -nowarn -O\n+  CFG_RUSTC_FLAGS := --nowarn -O\n endif\n \n ifdef SAVE_TEMPS\n-  CFG_RUSTC_FLAGS += -save-temps\n+  CFG_RUSTC_FLAGS += --save-temps\n endif\n \n # On Darwin, we need to run dsymutil so the debugging information ends\n@@ -471,7 +471,7 @@ boot/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n \n stage0/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE0) -c -shared -o $@ $<\n+\t$(STAGE0) -c --shared -o $@ $<\n \n stage0/$(CFG_STDLIB): stage0/std.o stage0/glue.o\n \t@$(call E, link: $@)\n@@ -480,7 +480,7 @@ stage0/$(CFG_STDLIB): stage0/std.o stage0/glue.o\n \n stage1/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE1) -c -shared -o $@ $<\n+\t$(STAGE1) -c --shared -o $@ $<\n \n stage1/$(CFG_STDLIB): stage1/std.o stage1/glue.o\n \t@$(call E, link: $@)\n@@ -489,7 +489,7 @@ stage1/$(CFG_STDLIB): stage1/std.o stage1/glue.o\n \n stage2/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE2) -c -shared -o $@ $<\n+\t$(STAGE2) -c --shared -o $@ $<\n \n stage2/$(CFG_STDLIB): stage2/std.o stage2/glue.o\n \t@$(call E, link: $@)\n@@ -516,17 +516,17 @@ stage2/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n stage0/glue.o: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE0) -c -o $@ -glue\n+\t$(STAGE0) -c -o $@ --glue\n \n stage1/glue.o: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE1) -c -o $@ -glue\n+\t$(STAGE1) -c -o $@ --glue\n \n stage2/glue.o: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE2) -c -o $@ -glue\n+\t$(STAGE2) -c -o $@ --glue\n \n # Due to make not wanting to run the same implicit rules twice on the same\n # rule tree (implicit-rule recursion prevention, see \"Chains of Implicit"}, {"sha": "c321b3a09738abc08dfa71223536804ed569023f", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 78, "deletions": 124, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/6b11f6c46fcece9dceb92cab009e1d9f42f9672e/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b11f6c46fcece9dceb92cab009e1d9f42f9672e/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=6b11f6c46fcece9dceb92cab009e1d9f42f9672e", "patch": "@@ -20,6 +20,12 @@ import std._str;\n import std._vec;\n import std.io;\n \n+import std.GetOpts;\n+import std.GetOpts.optopt;\n+import std.GetOpts.optmulti;\n+import std.GetOpts.optflag;\n+import std.GetOpts.opt_present;\n+\n fn default_environment(session.session sess,\n                        str argv0,\n                        str input) -> eval.env {\n@@ -105,18 +111,18 @@ fn usage(session.session sess, str argv0) {\n options:\n \n     -o <filename>      write output to <filename>\n-    -nowarn            suppress wrong-compiler warning\n-    -glue              generate glue.bc file\n-    -shared            compile a shared-library crate\n-    -pp                pretty-print the input instead of compiling\n-    -ls                list the symbols defined by a crate file\n+    --nowarn           suppress wrong-compiler warning\n+    --glue             generate glue.bc file\n+    --shared           compile a shared-library crate\n+    --pretty           pretty-print the input instead of compiling\n+    --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n-    -noverify          suppress LLVM verification step (slight speedup)\n-    -parse-only        parse only; do not compile, assemble, or link\n+    --noverify         suppress LLVM verification step (slight speedup)\n+    --parse-only       parse only; do not compile, assemble, or link\n     -O                 optimize\n     -S                 compile only; do not assemble or link\n     -c                 compile and assemble, but do not link\n-    -save-temps        write intermediate files in addition to normal output\n+    --save-temps       write intermediate files in addition to normal output\n     -h                 display this message\\n\\n\");\n }\n \n@@ -142,133 +148,81 @@ fn main(vec[str] args) {\n     auto sess = session.session(target_crate_num, target_cfg, crate_cache,\n                                 md, front.codemap.new_codemap());\n \n-    let option.t[str] input_file = none[str];\n-    let option.t[str] output_file = none[str];\n-    let vec[str] library_search_paths = vec();\n-    let bool do_warn = true;\n-    let bool shared = false;\n-    let bool pretty = false;\n-    let bool ls = false;\n-    auto ot = trans.output_type_bitcode;\n-    let bool glue = false;\n-    let bool verify = true;\n-    let bool save_temps = false;\n+    auto opts = vec(optflag(\"nowarn\"), optflag(\"h\"), optflag(\"glue\"),\n+                    optflag(\"pretty\"), optflag(\"ls\"), optflag(\"parse-only\"),\n+                    optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n+                    optflag(\"S\"), optflag(\"c\"), optopt(\"o\"),\n+                    optflag(\"save-temps\"), optflag(\"noverify\"));\n+    auto binary = _vec.shift[str](args);\n+    auto match;\n+    alt (GetOpts.getopts(args, opts)) {\n+        case (GetOpts.failure(?f)) { sess.err(GetOpts.fail_str(f)); fail; }\n+        case (GetOpts.success(?m)) { match = m; }\n+    }\n+    if (!opt_present(match, \"nowarn\")) {\n+        warn_wrong_compiler();\n+    }\n+    if (opt_present(match, \"h\")) {\n+        usage(sess, binary);\n+        ret;\n+    }\n \n+    auto pretty = opt_present(match, \"pretty\");\n+    auto ls = opt_present(match, \"ls\");\n+    auto glue = opt_present(match, \"glue\");\n+    auto shared = opt_present(match, \"shared\");\n+    auto output_file = GetOpts.opt_maybe_str(match, \"o\");\n+    auto library_search_paths = GetOpts.opt_strs(match, \"L\");\n+    auto ot = trans.output_type_bitcode;\n+    if (opt_present(match, \"parse-only\")) {\n+        ot = trans.output_type_none;\n+    } else if (opt_present(match, \"S\")) {\n+        ot = trans.output_type_assembly;\n+    } else if (opt_present(match, \"c\")) {\n+        ot = trans.output_type_object;\n+    }\n+    auto verify = !opt_present(match, \"noverify\");\n+    auto save_temps = opt_present(match, \"save-temps\");\n     // FIXME: Maybe we should support -O0, -O1, -Os, etc\n-    let bool optimize = false;\n+    auto optimize = opt_present(match, \"O\");\n+    auto n_inputs = _vec.len[str](match.free);\n \n-    auto i = 1u;\n-    auto len = _vec.len[str](args);\n-\n-    // FIXME: a getopt module would be nice.\n-    while (i < len) {\n-        auto arg = args.(i);\n-        if (_str.byte_len(arg) > 0u && arg.(0) == '-' as u8) {\n-            if (_str.eq(arg, \"-nowarn\")) {\n-                do_warn = false;\n-            } else if (_str.eq(arg, \"-O\")) {\n-                optimize = true;\n-            } else if (_str.eq(arg, \"-glue\")) {\n-                glue = true;\n-            } else if (_str.eq(arg, \"-shared\")) {\n-                shared = true;\n-            } else if (_str.eq(arg, \"-pp\")) {\n-                pretty = true;\n-            } else if (_str.eq(arg, \"-ls\")) {\n-                ls = true;\n-            } else if (_str.eq(arg, \"-parse-only\")) {\n-                ot = trans.output_type_none;\n-            } else if (_str.eq(arg, \"-S\")) {\n-                ot = trans.output_type_assembly;\n-            } else if (_str.eq(arg, \"-c\")) {\n-                ot = trans.output_type_object;\n-            } else if (_str.eq(arg, \"-o\")) {\n-                if (i+1u < len) {\n-                    output_file = some(args.(i+1u));\n-                    i += 1u;\n-                } else {\n-                    usage(sess, args.(0));\n-                    sess.err(\"-o requires an argument\");\n-                }\n-            } else if (_str.eq(arg, \"-save-temps\")) {\n-                save_temps = true;\n-            } else if (_str.eq(arg, \"-L\")) {\n-                if (i+1u < len) {\n-                    library_search_paths += vec(args.(i+1u));\n-                    i += 1u;\n-                } else {\n-                    usage(sess, args.(0));\n-                    sess.err(\"-L requires an argument\");\n-                }\n-            } else if (_str.eq(arg, \"-noverify\")) {\n-                verify = false;\n-            } else if (_str.eq(arg, \"-h\")) {\n-                usage(sess, args.(0));\n-            } else {\n-                usage(sess, args.(0));\n-                sess.err(\"unrecognized option: \" + arg);\n-            }\n-        } else {\n-            alt (input_file) {\n-                case (some[str](_)) {\n-                    usage(sess, args.(0));\n-                    sess.err(\"multiple inputs provided\");\n-                }\n-                case (none[str]) {\n-                    input_file = some[str](arg);\n-                }\n-            }\n+    if (glue) {\n+        if (n_inputs > 0u) {\n+            sess.err(\"No input files allowed with --glue.\");\n         }\n-        i += 1u;\n+        auto out = option.from_maybe[str](\"glue.bc\", output_file);\n+        middle.trans.make_common_glue(out, optimize, verify, save_temps, ot);\n+        ret;\n     }\n \n-    if (do_warn) {\n-        warn_wrong_compiler();\n+    if (n_inputs == 0u) {\n+        sess.err(\"No input filename given.\");\n+    } else if (n_inputs > 1u) {\n+        sess.err(\"Multiple input filenames provided.\");\n     }\n \n-    if (glue) {\n+    auto ifile = match.free.(0);\n+    auto env = default_environment(sess, args.(0), ifile);\n+    if (pretty) {\n+        pretty_print_input(sess, env, ifile);\n+    } else if (ls) {\n+        front.creader.list_file_metadata(ifile, std.io.stdout());\n+    } else {\n         alt (output_file) {\n             case (none[str]) {\n-                middle.trans.make_common_glue(\"glue.bc\", optimize, verify,\n-                                              save_temps, ot);\n-            }\n-            case (some[str](?s)) {\n-                middle.trans.make_common_glue(s, optimize, verify, save_temps,\n-                                              ot);\n+                let vec[str] parts = _str.split(ifile, '.' as u8);\n+                _vec.pop[str](parts);\n+                parts += vec(\".bc\");\n+                auto ofile = _str.concat(parts);\n+                compile_input(sess, env, ifile, ofile, shared,\n+                              optimize, verify, save_temps, ot,\n+                              library_search_paths);\n             }\n-        }\n-        ret;\n-    }\n-\n-    alt (input_file) {\n-        case (none[str]) {\n-            usage(sess, args.(0));\n-            sess.err(\"no input filename\");\n-        }\n-        case (some[str](?ifile)) {\n-\n-            auto env = default_environment(sess, args.(0), ifile);\n-            if (pretty) {\n-                pretty_print_input(sess, env, ifile);\n-            } else if (ls) {\n-                front.creader.list_file_metadata(ifile, std.io.stdout());\n-            } else {\n-                alt (output_file) {\n-                    case (none[str]) {\n-                        let vec[str] parts = _str.split(ifile, '.' as u8);\n-                        _vec.pop[str](parts);\n-                        parts += vec(\".bc\");\n-                        auto ofile = _str.concat(parts);\n-                        compile_input(sess, env, ifile, ofile, shared,\n-                                      optimize, verify, save_temps, ot,\n-                                      library_search_paths);\n-                    }\n-                    case (some[str](?ofile)) {\n-                        compile_input(sess, env, ifile, ofile, shared,\n-                                      optimize, verify, save_temps, ot,\n-                                      library_search_paths);\n-                    }\n-                }\n+            case (some[str](?ofile)) {\n+                compile_input(sess, env, ifile, ofile, shared,\n+                              optimize, verify, save_temps, ot,\n+                              library_search_paths);\n             }\n         }\n     }"}]}