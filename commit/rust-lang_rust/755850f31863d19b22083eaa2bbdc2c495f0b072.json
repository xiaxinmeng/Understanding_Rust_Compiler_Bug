{"sha": "755850f31863d19b22083eaa2bbdc2c495f0b072", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NTg1MGYzMTg2M2QxOWIyMjA4M2VhYTJiYmRjMmM0OTVmMGIwNzI=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-17T00:39:35Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:27Z"}, "message": "Merge OwnedBuilder and Builder", "tree": {"sha": "ae8926721b2d5d7988375526892b5e63d253f8ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae8926721b2d5d7988375526892b5e63d253f8ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/755850f31863d19b22083eaa2bbdc2c495f0b072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/755850f31863d19b22083eaa2bbdc2c495f0b072", "html_url": "https://github.com/rust-lang/rust/commit/755850f31863d19b22083eaa2bbdc2c495f0b072", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/755850f31863d19b22083eaa2bbdc2c495f0b072/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed11209d6f7ae0ca8ea21a1ffed902345a4217f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed11209d6f7ae0ca8ea21a1ffed902345a4217f", "html_url": "https://github.com/rust-lang/rust/commit/8ed11209d6f7ae0ca8ea21a1ffed902345a4217f"}], "stats": {"total": 61, "additions": 23, "deletions": 38}, "files": [{"sha": "b710c08e1a47376f03b86d6ed89d219d7400c5ff", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/755850f31863d19b22083eaa2bbdc2c495f0b072/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755850f31863d19b22083eaa2bbdc2c495f0b072/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=755850f31863d19b22083eaa2bbdc2c495f0b072", "patch": "@@ -32,6 +32,14 @@ pub struct Builder<'a, 'tcx: 'a> {\n     pub ccx: &'a CrateContext<'a, 'tcx>,\n }\n \n+impl<'blk, 'tcx> Drop for Builder<'blk, 'tcx> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            llvm::LLVMDisposeBuilder(self.llbuilder);\n+        }\n+    }\n+}\n+\n // This is a really awful way to get a zero-length c-string, but better (and a\n // lot more efficient) than doing str::as_c_str(\"\", ...) every time.\n pub fn noname() -> *const c_char {\n@@ -40,9 +48,13 @@ pub fn noname() -> *const c_char {\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n-    pub fn new(ccx: &'a CrateContext<'a, 'tcx>) -> Builder<'a, 'tcx> {\n+    pub fn with_ccx(ccx: &'a CrateContext<'a, 'tcx>) -> Self {\n+        // Create a fresh builder from the crate context.\n+        let llbuilder = unsafe {\n+            llvm::LLVMCreateBuilderInContext(ccx.llcx())\n+        };\n         Builder {\n-            llbuilder: ccx.raw_builder(),\n+            llbuilder: llbuilder,\n             ccx: ccx,\n         }\n     }"}, {"sha": "d09cb8ce2c8a8b6ff1267d9f0132de3a980fdbd7", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/755850f31863d19b22083eaa2bbdc2c495f0b072/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755850f31863d19b22083eaa2bbdc2c495f0b072/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=755850f31863d19b22083eaa2bbdc2c495f0b072", "patch": "@@ -306,7 +306,7 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     // Used and maintained by the debuginfo module.\n     pub debug_context: debuginfo::FunctionDebugContext,\n \n-    alloca_builder: OwnedBuilder<'a, 'tcx>,\n+    alloca_builder: Builder<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n@@ -359,13 +359,13 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             param_substs: param_substs,\n             ccx: ccx,\n             debug_context: debug_context,\n-            alloca_builder: OwnedBuilder::new_with_ccx(ccx),\n+            alloca_builder: Builder::with_ccx(ccx),\n         };\n \n         let val = {\n             let entry_bcx = fcx.build_new_block(\"entry-block\");\n             let val = entry_bcx.load(C_null(Type::i8p(ccx)));\n-            fcx.alloca_builder.builder.position_at_start(entry_bcx.llbb());\n+            fcx.alloca_builder.position_at_start(entry_bcx.llbb());\n             val\n         };\n \n@@ -509,7 +509,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n     }\n \n     pub fn alloca(&self, ty: Type, name: &str) -> ValueRef {\n-        self.alloca_builder.builder.dynamic_alloca(ty, name)\n+        self.alloca_builder.dynamic_alloca(ty, name)\n     }\n }\n \n@@ -521,33 +521,6 @@ impl<'a, 'tcx> Drop for FunctionContext<'a, 'tcx> {\n     }\n }\n \n-pub struct OwnedBuilder<'blk, 'tcx: 'blk> {\n-    builder: Builder<'blk, 'tcx>\n-}\n-\n-impl<'blk, 'tcx> OwnedBuilder<'blk, 'tcx> {\n-    pub fn new_with_ccx(ccx: &'blk CrateContext<'blk, 'tcx>) -> Self {\n-        // Create a fresh builder from the crate context.\n-        let llbuilder = unsafe {\n-            llvm::LLVMCreateBuilderInContext(ccx.llcx())\n-        };\n-        OwnedBuilder {\n-            builder: Builder {\n-                llbuilder: llbuilder,\n-                ccx: ccx,\n-            }\n-        }\n-    }\n-}\n-\n-impl<'blk, 'tcx> Drop for OwnedBuilder<'blk, 'tcx> {\n-    fn drop(&mut self) {\n-        unsafe {\n-            llvm::LLVMDisposeBuilder(self.builder.llbuilder);\n-        }\n-    }\n-}\n-\n #[must_use]\n pub struct BlockAndBuilder<'blk, 'tcx: 'blk> {\n     // The BasicBlockRef returned from a call to\n@@ -561,18 +534,18 @@ pub struct BlockAndBuilder<'blk, 'tcx: 'blk> {\n     // attached.\n     fcx: &'blk FunctionContext<'blk, 'tcx>,\n \n-    owned_builder: OwnedBuilder<'blk, 'tcx>,\n+    builder: Builder<'blk, 'tcx>,\n }\n \n impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n     pub fn new(llbb: BasicBlockRef, fcx: &'blk FunctionContext<'blk, 'tcx>) -> Self {\n-        let owned_builder = OwnedBuilder::new_with_ccx(fcx.ccx);\n+        let builder = Builder::with_ccx(fcx.ccx);\n         // Set the builder's position to this block's end.\n-        owned_builder.builder.position_at_end(llbb);\n+        builder.position_at_end(llbb);\n         BlockAndBuilder {\n             llbb: llbb,\n             fcx: fcx,\n-            owned_builder: owned_builder,\n+            builder: builder,\n         }\n     }\n \n@@ -610,7 +583,7 @@ impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n impl<'blk, 'tcx> Deref for BlockAndBuilder<'blk, 'tcx> {\n     type Target = Builder<'blk, 'tcx>;\n     fn deref(&self) -> &Self::Target {\n-        &self.owned_builder.builder\n+        &self.builder\n     }\n }\n "}]}