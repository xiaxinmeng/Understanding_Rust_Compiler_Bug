{"sha": "c080d26d328d6e8bbf4b159b5c5f3cd55c86f621", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODBkMjZkMzI4ZDZlOGJiZjRiMTU5YjVjNWYzY2Q1NWM4NmY2MjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-23T18:11:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-23T18:11:15Z"}, "message": "auto merge of #15902 : nham/rust/hash_triemap, r=alexcrichton\n\ncc #15294", "tree": {"sha": "a43b7da534c8d34ecea12888e18f8678359794d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a43b7da534c8d34ecea12888e18f8678359794d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c080d26d328d6e8bbf4b159b5c5f3cd55c86f621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c080d26d328d6e8bbf4b159b5c5f3cd55c86f621", "html_url": "https://github.com/rust-lang/rust/commit/c080d26d328d6e8bbf4b159b5c5f3cd55c86f621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c080d26d328d6e8bbf4b159b5c5f3cd55c86f621/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "826b8358134f909f0b8aeb4c1d67a3fdda50b4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/826b8358134f909f0b8aeb4c1d67a3fdda50b4b0", "html_url": "https://github.com/rust-lang/rust/commit/826b8358134f909f0b8aeb4c1d67a3fdda50b4b0"}, {"sha": "366c66e171b94ef78ce7b8daf2530dbdc30eadb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/366c66e171b94ef78ce7b8daf2530dbdc30eadb9", "html_url": "https://github.com/rust-lang/rust/commit/366c66e171b94ef78ce7b8daf2530dbdc30eadb9"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "424cda92c12d45b60acf71afe5d53331d3aa4ed0", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c080d26d328d6e8bbf4b159b5c5f3cd55c86f621/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c080d26d328d6e8bbf4b159b5c5f3cd55c86f621/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=c080d26d328d6e8bbf4b159b5c5f3cd55c86f621", "patch": "@@ -17,6 +17,7 @@ use core::default::Default;\n use core::mem::zeroed;\n use core::mem;\n use core::uint;\n+use std::hash::{Writer, Hash};\n \n use {Collection, Mutable, Map, MutableMap, Set, MutableSet};\n use slice::{Items, MutItems};\n@@ -40,6 +41,15 @@ pub struct TrieMap<T> {\n     length: uint\n }\n \n+impl<T: PartialEq> PartialEq for TrieMap<T> {\n+    fn eq(&self, other: &TrieMap<T>) -> bool {\n+        self.len() == other.len() &&\n+            self.iter().zip(other.iter()).all(|(a, b)| a == b)\n+    }\n+}\n+\n+impl<T: Eq> Eq for TrieMap<T> {}\n+\n impl<T> Collection for TrieMap<T> {\n     /// Return the number of elements in the map\n     #[inline]\n@@ -292,7 +302,16 @@ impl<T> Extendable<(uint, T)> for TrieMap<T> {\n     }\n }\n \n+impl<S: Writer, T: Hash<S>> Hash<S> for TrieMap<T> {\n+    fn hash(&self, state: &mut S) {\n+        for elt in self.iter() {\n+            elt.hash(state);\n+        }\n+    }\n+}\n+\n #[allow(missing_doc)]\n+#[deriving(Hash, PartialEq, Eq)]\n pub struct TrieSet {\n     map: TrieMap<()>\n }\n@@ -661,6 +680,7 @@ mod test_map {\n     use std::prelude::*;\n     use std::iter::range_step;\n     use std::uint;\n+    use std::hash;\n \n     use {MutableMap, Map};\n     use super::{TrieMap, TrieNode, Internal, External, Nothing};\n@@ -933,6 +953,41 @@ mod test_map {\n         assert!(m_lower.iter().all(|(_, &x)| x == 0));\n         assert!(m_upper.iter().all(|(_, &x)| x == 0));\n     }\n+\n+    #[test]\n+    fn test_eq() {\n+        let mut a = TrieMap::new();\n+        let mut b = TrieMap::new();\n+\n+        assert!(a == b);\n+        assert!(a.insert(0, 5i));\n+        assert!(a != b);\n+        assert!(b.insert(0, 4i));\n+        assert!(a != b);\n+        assert!(a.insert(5, 19));\n+        assert!(a != b);\n+        assert!(!b.insert(0, 5));\n+        assert!(a != b);\n+        assert!(b.insert(5, 19));\n+        assert!(a == b);\n+    }\n+\n+    #[test]\n+    fn test_hash() {\n+      let mut x = TrieMap::new();\n+      let mut y = TrieMap::new();\n+\n+      assert!(hash::hash(&x) == hash::hash(&y));\n+      x.insert(1, 'a');\n+      x.insert(2, 'b');\n+      x.insert(3, 'c');\n+\n+      y.insert(3, 'c');\n+      y.insert(2, 'b');\n+      y.insert(1, 'a');\n+\n+      assert!(hash::hash(&x) == hash::hash(&y));\n+    }\n }\n \n #[cfg(test)]"}]}