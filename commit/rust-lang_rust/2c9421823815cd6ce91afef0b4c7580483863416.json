{"sha": "2c9421823815cd6ce91afef0b4c7580483863416", "node_id": "C_kwDOAAsO6NoAKDJjOTQyMTgyMzgxNWNkNmNlOTFhZmVmMGI0Yzc1ODA0ODM4NjM0MTY", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2022-04-25T22:17:25Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2022-04-27T20:36:40Z"}, "message": "Recover suggestions to introduce named lifetime under NLL", "tree": {"sha": "6fc0e6aded6a6e1c07c6d956e436296dba7c0616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fc0e6aded6a6e1c07c6d956e436296dba7c0616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c9421823815cd6ce91afef0b4c7580483863416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c9421823815cd6ce91afef0b4c7580483863416", "html_url": "https://github.com/rust-lang/rust/commit/2c9421823815cd6ce91afef0b4c7580483863416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c9421823815cd6ce91afef0b4c7580483863416/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e", "html_url": "https://github.com/rust-lang/rust/commit/bb85bcaca93fd7cf1955d5eb0cb1e16ef462bc7e"}], "stats": {"total": 407, "additions": 331, "deletions": 76}, "files": [{"sha": "30fe4ea8662eb909d4fda73aeccff5d2ec769702", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -2,7 +2,10 @@\n \n use rustc_errors::{Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_infer::infer::{\n-    error_reporting::nice_region_error::{self, find_param_with_region, NiceRegionError},\n+    error_reporting::nice_region_error::{\n+        self, find_anon_type, find_param_with_region, suggest_adding_lifetime_params,\n+        NiceRegionError,\n+    },\n     error_reporting::unexpected_hidden_region_diagnostic,\n     NllRegionVariableOrigin, RelateParamBound,\n };\n@@ -630,6 +633,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         }\n \n         self.add_static_impl_trait_suggestion(&mut diag, *fr, fr_name, *outlived_fr);\n+        self.suggest_adding_lifetime_params(&mut diag, *fr, *outlived_fr);\n \n         diag\n     }\n@@ -694,4 +698,33 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             );\n         }\n     }\n+\n+    fn suggest_adding_lifetime_params(\n+        &self,\n+        diag: &mut Diagnostic,\n+        sub: RegionVid,\n+        sup: RegionVid,\n+    ) {\n+        let (Some(sub), Some(sup)) = (self.to_error_region(sub), self.to_error_region(sup)) else {\n+            return\n+        };\n+\n+        let Some((ty_sub, _)) = self\n+            .infcx\n+            .tcx\n+            .is_suitable_region(sub)\n+            .and_then(|anon_reg| find_anon_type(self.infcx.tcx, sub, &anon_reg.boundregion)) else {\n+            return\n+        };\n+\n+        let Some((ty_sup, _)) = self\n+            .infcx\n+            .tcx\n+            .is_suitable_region(sup)\n+            .and_then(|anon_reg| find_anon_type(self.infcx.tcx, sup, &anon_reg.boundregion)) else {\n+            return\n+        };\n+\n+        suggest_adding_lifetime_params(self.infcx.tcx, sub, ty_sup, ty_sub, diag);\n+    }\n }"}, {"sha": "be9db6aa25b75cb2c1ea13048b346a276b7c7f8d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 74, "deletions": 74, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -6,6 +6,7 @@ use crate::infer::error_reporting::nice_region_error::util::AnonymousParamInfo;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::SubregionOrigin;\n+use crate::infer::TyCtxt;\n \n use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -145,84 +146,83 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n \n-        self.suggest_adding_lifetime_params(sub, ty_sup, ty_sub, &mut err);\n+        if suggest_adding_lifetime_params(self.tcx(), sub, ty_sup, ty_sub, &mut err) {\n+            err.note(\"each elided lifetime in input position becomes a distinct lifetime\");\n+        }\n \n         let reported = err.emit();\n         Some(reported)\n     }\n+}\n \n-    fn suggest_adding_lifetime_params(\n-        &self,\n-        sub: Region<'tcx>,\n-        ty_sup: &Ty<'_>,\n-        ty_sub: &Ty<'_>,\n-        err: &mut Diagnostic,\n-    ) {\n-        if let (\n-            hir::Ty { kind: hir::TyKind::Rptr(lifetime_sub, _), .. },\n-            hir::Ty { kind: hir::TyKind::Rptr(lifetime_sup, _), .. },\n-        ) = (ty_sub, ty_sup)\n-        {\n-            if lifetime_sub.name.is_elided() && lifetime_sup.name.is_elided() {\n-                if let Some(anon_reg) = self.tcx().is_suitable_region(sub) {\n-                    let hir_id = self.tcx().hir().local_def_id_to_hir_id(anon_reg.def_id);\n-\n-                    let node = self.tcx().hir().get(hir_id);\n-                    let is_impl = matches!(&node, hir::Node::ImplItem(_));\n-                    let generics = match node {\n-                        hir::Node::Item(&hir::Item {\n-                            kind: hir::ItemKind::Fn(_, ref generics, ..),\n-                            ..\n-                        })\n-                        | hir::Node::TraitItem(&hir::TraitItem { ref generics, .. })\n-                        | hir::Node::ImplItem(&hir::ImplItem { ref generics, .. }) => generics,\n-                        _ => return,\n-                    };\n-\n-                    let (suggestion_param_name, introduce_new) = generics\n-                        .params\n-                        .iter()\n-                        .find(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }))\n-                        .and_then(|p| self.tcx().sess.source_map().span_to_snippet(p.span).ok())\n-                        .map(|name| (name, false))\n-                        .unwrap_or_else(|| (\"'a\".to_string(), true));\n-\n-                    let mut suggestions = vec![\n-                        if let hir::LifetimeName::Underscore = lifetime_sub.name {\n-                            (lifetime_sub.span, suggestion_param_name.clone())\n-                        } else {\n-                            (lifetime_sub.span.shrink_to_hi(), suggestion_param_name.clone() + \" \")\n-                        },\n-                        if let hir::LifetimeName::Underscore = lifetime_sup.name {\n-                            (lifetime_sup.span, suggestion_param_name.clone())\n-                        } else {\n-                            (lifetime_sup.span.shrink_to_hi(), suggestion_param_name.clone() + \" \")\n-                        },\n-                    ];\n-\n-                    if introduce_new {\n-                        let new_param_suggestion = match &generics.params {\n-                            [] => (generics.span, format!(\"<{}>\", suggestion_param_name)),\n-                            [first, ..] => {\n-                                (first.span.shrink_to_lo(), format!(\"{}, \", suggestion_param_name))\n-                            }\n-                        };\n-\n-                        suggestions.push(new_param_suggestion);\n-                    }\n-\n-                    let mut sugg = String::from(\"consider introducing a named lifetime parameter\");\n-                    if is_impl {\n-                        sugg.push_str(\" and update trait if needed\");\n-                    }\n-                    err.multipart_suggestion(\n-                        sugg.as_str(),\n-                        suggestions,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    err.note(\"each elided lifetime in input position becomes a distinct lifetime\");\n-                }\n-            }\n-        }\n+pub fn suggest_adding_lifetime_params<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    sub: Region<'tcx>,\n+    ty_sup: &Ty<'_>,\n+    ty_sub: &Ty<'_>,\n+    err: &mut Diagnostic,\n+) -> bool {\n+    let (\n+        hir::Ty { kind: hir::TyKind::Rptr(lifetime_sub, _), .. },\n+        hir::Ty { kind: hir::TyKind::Rptr(lifetime_sup, _), .. },\n+    ) = (ty_sub, ty_sup) else {\n+        return false;\n+    };\n+\n+    if !lifetime_sub.name.is_elided() || !lifetime_sup.name.is_elided() {\n+        return false;\n+    };\n+\n+    let Some(anon_reg) = tcx.is_suitable_region(sub) else {\n+        return false;\n+    };\n+\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(anon_reg.def_id);\n+\n+    let node = tcx.hir().get(hir_id);\n+    let is_impl = matches!(&node, hir::Node::ImplItem(_));\n+    let generics = match node {\n+        hir::Node::Item(&hir::Item { kind: hir::ItemKind::Fn(_, ref generics, ..), .. })\n+        | hir::Node::TraitItem(&hir::TraitItem { ref generics, .. })\n+        | hir::Node::ImplItem(&hir::ImplItem { ref generics, .. }) => generics,\n+        _ => return false,\n+    };\n+\n+    let (suggestion_param_name, introduce_new) = generics\n+        .params\n+        .iter()\n+        .find(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }))\n+        .and_then(|p| tcx.sess.source_map().span_to_snippet(p.span).ok())\n+        .map(|name| (name, false))\n+        .unwrap_or_else(|| (\"'a\".to_string(), true));\n+\n+    let mut suggestions = vec![\n+        if let hir::LifetimeName::Underscore = lifetime_sub.name {\n+            (lifetime_sub.span, suggestion_param_name.clone())\n+        } else {\n+            (lifetime_sub.span.shrink_to_hi(), suggestion_param_name.clone() + \" \")\n+        },\n+        if let hir::LifetimeName::Underscore = lifetime_sup.name {\n+            (lifetime_sup.span, suggestion_param_name.clone())\n+        } else {\n+            (lifetime_sup.span.shrink_to_hi(), suggestion_param_name.clone() + \" \")\n+        },\n+    ];\n+\n+    if introduce_new {\n+        let new_param_suggestion = match &generics.params {\n+            [] => (generics.span, format!(\"<{}>\", suggestion_param_name)),\n+            [first, ..] => (first.span.shrink_to_lo(), format!(\"{}, \", suggestion_param_name)),\n+        };\n+\n+        suggestions.push(new_param_suggestion);\n     }\n+\n+    let mut sugg = String::from(\"consider introducing a named lifetime parameter\");\n+    if is_impl {\n+        sugg.push_str(\" and update trait if needed\");\n+    }\n+    err.multipart_suggestion(sugg.as_str(), suggestions, Applicability::MaybeIncorrect);\n+\n+    true\n }"}, {"sha": "da4c2b41f09c3be3a496c43417b539d541bb5716", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::{self, Region, TyCtxt};\n /// ```\n /// The function returns the nested type corresponding to the anonymous region\n /// for e.g., `&u8` and `Vec<&u8>`.\n-pub(crate) fn find_anon_type<'tcx>(\n+pub fn find_anon_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     region: Region<'tcx>,\n     br: &ty::BoundRegionKind,"}, {"sha": "9948d15c43115a09199d2d4d3f93123893f8967b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -14,6 +14,8 @@ mod static_impl_trait;\n mod trait_impl_difference;\n mod util;\n \n+pub use different_lifetimes::suggest_adding_lifetime_params;\n+pub use find_anon_type::find_anon_type;\n pub use static_impl_trait::suggest_new_region_bound;\n pub use util::find_param_with_region;\n "}, {"sha": "48fb3fb4a2293dc3fad82b9d52d826788bc9cfac", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.nll.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -6,6 +6,11 @@ LL | pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                        |        |\n    |                        |        let's call the lifetime of this reference `'1`\n    |                        let's call the lifetime of this reference `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n+   |           ++++              ++          ++\n \n error: lifetime may not live long enough\n   --> $DIR/issue-90170-elision-mismatch.rs:5:44\n@@ -15,6 +20,11 @@ LL | pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); }\n    |                         |           |\n    |                         |           let's call the lifetime of this reference `'1`\n    |                         let's call the lifetime of this reference `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | pub fn foo2<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n+   |            ++++              ~~          ++\n \n error: lifetime may not live long enough\n   --> $DIR/issue-90170-elision-mismatch.rs:7:63\n@@ -24,6 +34,11 @@ LL | pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n    |                                               |        |\n    |                                               |        let's call the lifetime of this reference `'1`\n    |                                               let's call the lifetime of this reference `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n+   |                                                ++          ++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5a23f1e0e9d99956fd57a25aafa77170e7dae2ba", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n    |                                   let's call the lifetime of this reference `'2`\n LL |     *v = x;\n    |     ^^^^^^ assignment requires that `'1` must outlive `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(&mut (ref mut v, w): &mut (&'a u8, &u8), x: &'a u8) {\n+   |       ++++                             ++               ++\n \n error: aborting due to previous error\n "}, {"sha": "6ba130308a33a82e6bb4938a2b313b41ed6ee60f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.nll.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                     let's call the lifetime of this reference `'2`\n LL |     z.push((x,y));\n    |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(z: &mut Vec<(&'a u8,&u8)>, (x, y): (&'a u8, &u8)) {\n+   |       ++++               ++                     ++\n \n error: lifetime may not live long enough\n   --> $DIR/ex3-both-anon-regions-3.rs:2:5\n@@ -17,6 +22,11 @@ LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                         let's call the lifetime of this reference `'4`\n LL |     z.push((x,y));\n    |     ^^^^^^^^^^^^^ argument requires that `'3` must outlive `'4`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(z: &mut Vec<(&u8,&'a u8)>, (x, y): (&u8, &'a u8)) {\n+   |       ++++                   ++                      ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5601335d275c33106472fafc4c90ed3edfaac078", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |              let's call the lifetime of this reference `'2`\n LL |     x\n    |     ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |   fn foo<'a>(&'a self, x: &'a i32) -> &i32 {\n+   |               ++           ++\n \n error: aborting due to previous error\n "}, {"sha": "e221902c4a90724e2a41a6937c647be780dcafce", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                let's call the lifetime of this reference `'2`\n LL |         if true { x } else { self }\n    |                   ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn foo<'a>(&'a self, x: &'a Foo) -> &Foo {\n+   |                 ++           ++\n \n error: aborting due to previous error\n "}, {"sha": "a909c5fa82351ddb2d59dfc4aaf49b5cfc032b8b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n    |                               let's call the lifetime of this reference `'2`\n LL |   y.push(z);\n    |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(x:fn(&u8, &u8), y: Vec<&'a u8>, z: &'a u8) {\n+   |       ++++                         ++          ++\n \n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3"}, {"sha": "9661f1e5144b4b30ccef905f5ecddf9c4305498a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.nll.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL |     fn foo(x: &mut Vec<&u8>, y: &u8) {\n    |                        let's call the lifetime of this reference `'2`\n LL |         x.push(y);\n    |         ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) {\n+   |           ++++              ++          ++\n \n error: aborting due to previous error\n "}, {"sha": "cce0a31bfbbf1adc65c7be3ba2b9f49f1cad2463", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n    |                                         let's call the lifetime of this reference `'2`\n LL |   y.push(z);\n    |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(x:Box<dyn Fn(&'a u8, &'a u8)> , y: Vec<&u8>, z: &u8) {\n+   |       ++++               ++      ++\n \n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3"}, {"sha": "ec9fac0c288e06a76e3d3609069e763754a78150", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.nll.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL | fn foo(x: &mut Vec<&u8>, y: &u8) {\n    |                    let's call the lifetime of this reference `'2`\n LL |     x.push(y);\n    |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) {\n+   |       ++++              ++          ++\n \n error: aborting due to previous error\n "}, {"sha": "057146e7cb0ad63ad2aeb38c2949c96b00c24f0a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -6,6 +6,11 @@ LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                    |         |\n    |                    |         let's call the lifetime of this reference `'1`\n    |                    let's call the lifetime of this reference `'2`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn a<'a>(self: Pin<&'a Foo>, f: &'a Foo) -> &Foo { f }\n+   |         ++++            ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:14:69\n@@ -15,6 +20,11 @@ LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self,\n    |                    |          |\n    |                    |          let's call the lifetime of this reference `'1`\n    |                    let's call the lifetime of this reference `'2`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn c<'a>(self: Pin<&'a Self>, f: &'a Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |         ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:21:58"}, {"sha": "2e26c703b657366bd3b7e9200d1aa0d49f5947ce", "filename": "src/test/ui/self/elision/lt-ref-self.nll.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n+   |                ++++  ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:23:9\n@@ -17,6 +22,11 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n+   |                ++++        ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:29:9\n@@ -27,6 +37,11 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:35:9\n@@ -37,6 +52,11 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:41:9\n@@ -47,6 +67,11 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++             ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:47:9\n@@ -57,6 +82,11 @@ LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                   let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                    ++++                ++             ++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fd4ecae3cfe323ee1c96b60b2c79a33af9aff5df", "filename": "src/test/ui/self/elision/ref-mut-self.nll.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_self<'a>(&'a mut self, f: &'a u32) -> &u32 {\n+   |                ++++  ++               ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:23:9\n@@ -17,6 +22,11 @@ LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Self<'a>(self: &'a mut Self, f: &'a u32) -> &u32 {\n+   |                ++++        ++               ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:29:9\n@@ -27,6 +37,11 @@ LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Self<'a>(self: Box<&'a mut Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++                ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:35:9\n@@ -37,6 +52,11 @@ LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Self<'a>(self: Pin<&'a mut Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++                ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:41:9\n@@ -47,6 +67,11 @@ LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a mut Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++                 ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:47:9\n@@ -57,6 +82,11 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_ref_Self<'a>(self: Box<Pin<&'a mut Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++                 ++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ede790c0611431fdb3f2d35e939f6fd17f392c8f", "filename": "src/test/ui/self/elision/ref-mut-struct.nll.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                         let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Struct<'a>(self: &'a mut Struct, f: &'a u32) -> &u32 {\n+   |                  ++++        ++                 ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:21:9\n@@ -17,6 +22,11 @@ LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Struct<'a>(self: Box<&'a mut Struct>, f: &'a u32) -> &u32 {\n+   |                      ++++            ++                  ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:27:9\n@@ -27,6 +37,11 @@ LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Struct<'a>(self: Pin<&'a mut Struct>, f: &'a u32) -> &u32 {\n+   |                      ++++            ++                  ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:33:9\n@@ -37,6 +52,11 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Struct<'a>(self: Box<Box<&'a mut Struct>>, f: &'a u32) -> &u32 {\n+   |                          ++++                ++                   ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:39:9\n@@ -47,6 +67,11 @@ LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_ref_Struct<'a>(self: Box<Pin<&'a mut Struct>>, f: &'a u32) -> &u32 {\n+   |                          ++++                ++                   ++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c0efc35fa6c8e97161b8bcde0cf87f8d778a98fb", "filename": "src/test/ui/self/elision/ref-self.nll.stderr", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n+   |                ++++  ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:33:9\n@@ -17,6 +22,11 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n+   |                ++++        ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:39:9\n@@ -27,6 +37,11 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:45:9\n@@ -37,6 +52,11 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:51:9\n@@ -47,6 +67,11 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++             ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:57:9\n@@ -57,6 +82,11 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_ref_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++             ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:63:9\n@@ -67,6 +97,11 @@ LL |     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                      let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn wrap_ref_Self_Self<'a>(self: Wrap<&'a Self, Self>, f: &'a u8) -> &u8 {\n+   |                          ++++             ++                  ++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "226923f59ff37bfcaa0fb173d11182828e08048c", "filename": "src/test/ui/self/elision/ref-struct.nll.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -7,6 +7,11 @@ LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                         let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Struct<'a>(self: &'a Struct, f: &'a u32) -> &u32 {\n+   |                  ++++        ++             ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:21:9\n@@ -17,6 +22,11 @@ LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Struct<'a>(self: Box<&'a Struct>, f: &'a u32) -> &u32 {\n+   |                      ++++            ++              ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:27:9\n@@ -27,6 +37,11 @@ LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Struct<'a>(self: Pin<&'a Struct>, f: &'a u32) -> &u32 {\n+   |                      ++++            ++              ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:33:9\n@@ -37,6 +52,11 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Struct<'a>(self: Box<Box<&'a Struct>>, f: &'a u32) -> &u32 {\n+   |                          ++++                ++               ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:39:9\n@@ -47,6 +67,11 @@ LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_Struct<'a>(self: Box<Pin<&'a Struct>>, f: &'a u32) -> &u32 {\n+   |                      ++++                ++               ++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "a4dece320ec268ac7fb904c514acab3b220b5476", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.nll.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c9421823815cd6ce91afef0b4c7580483863416/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr?ref=2c9421823815cd6ce91afef0b4c7580483863416", "patch": "@@ -6,6 +6,11 @@ LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n    |                    |           |\n    |                    |           let's call the lifetime of this reference `'1`\n    |                    let's call the lifetime of this reference `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n+   |       ++++              ~~          ~~\n \n error: aborting due to previous error\n "}]}