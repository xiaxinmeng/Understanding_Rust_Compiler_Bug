{"sha": "1a9fc18e830dc57731e2976edb5c5f0fabc5019c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOWZjMThlODMwZGM1NzczMWUyOTc2ZWRiNWM1ZjBmYWJjNTAxOWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-09T10:16:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-09T10:16:23Z"}, "message": "panic_bounds_check: use caller_location, like PanicFnLangItem", "tree": {"sha": "d4f91a1fa34e83789172d7fbc8fc0a5bf45f47eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4f91a1fa34e83789172d7fbc8fc0a5bf45f47eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a9fc18e830dc57731e2976edb5c5f0fabc5019c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9fc18e830dc57731e2976edb5c5f0fabc5019c", "html_url": "https://github.com/rust-lang/rust/commit/1a9fc18e830dc57731e2976edb5c5f0fabc5019c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a9fc18e830dc57731e2976edb5c5f0fabc5019c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cb0b8582ebbf9784db9cec06fff517badbf4553", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb0b8582ebbf9784db9cec06fff517badbf4553", "html_url": "https://github.com/rust-lang/rust/commit/2cb0b8582ebbf9784db9cec06fff517badbf4553"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "d58a7cfec951bc223b76e7bda0f803437d4f1e96", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a9fc18e830dc57731e2976edb5c5f0fabc5019c/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a9fc18e830dc57731e2976edb5c5f0fabc5019c/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=1a9fc18e830dc57731e2976edb5c5f0fabc5019c", "patch": "@@ -52,6 +52,24 @@ pub fn panic(expr: &str) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), Location::caller())\n }\n \n+#[cfg(not(bootstrap))]\n+#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[track_caller]\n+#[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n+fn panic_bounds_check(index: usize, len: usize) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n+    panic_fmt(\n+        format_args!(\"index out of bounds: the len is {} but the index is {}\", len, index),\n+        Location::caller(),\n+    )\n+}\n+\n+// For bootstrap, we need a variant with the old argument order.\n+#[cfg(bootstrap)]\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access"}, {"sha": "f22c0216a78d15c77bed145f4ec54ae1fbb7130f", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a9fc18e830dc57731e2976edb5c5f0fabc5019c/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a9fc18e830dc57731e2976edb5c5f0fabc5019c/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=1a9fc18e830dc57731e2976edb5c5f0fabc5019c", "patch": "@@ -415,11 +415,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             AssertKind::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n-                (lang_items::PanicBoundsCheckFnLangItem, vec![location, index, len])\n+                // It's `fn panic_bounds_check(index: usize, len: usize)`, and\n+                // `#[track_caller]` adds an implicit third argument.\n+                (lang_items::PanicBoundsCheckFnLangItem, vec![index, len, location])\n             }\n             _ => {\n                 let msg_str = Symbol::intern(msg.description());\n                 let msg = bx.const_str(msg_str);\n+                // It's `pub fn panic(expr: &str)`, with the wide reference being passed\n+                // as two arguments, and `#[track_caller]` adds an implicit third argument.\n                 (lang_items::PanicFnLangItem, vec![msg.0, msg.1, location])\n             }\n         };"}]}