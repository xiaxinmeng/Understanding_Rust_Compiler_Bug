{"sha": "e9176c747e626383e37832514130d078b611f995", "node_id": "C_kwDOAAsO6NoAKGU5MTc2Yzc0N2U2MjYzODNlMzc4MzI1MTQxMzBkMDc4YjYxMWY5OTU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-03T00:28:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-07T01:40:31Z"}, "message": "test for better error location on stack pop", "tree": {"sha": "0af9f5164d6613b0024f32a398fdbd58b8135808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0af9f5164d6613b0024f32a398fdbd58b8135808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9176c747e626383e37832514130d078b611f995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9176c747e626383e37832514130d078b611f995", "html_url": "https://github.com/rust-lang/rust/commit/e9176c747e626383e37832514130d078b611f995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9176c747e626383e37832514130d078b611f995/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5df0cc770893d3139f7b5610e09eebe5df79ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5df0cc770893d3139f7b5610e09eebe5df79ae1", "html_url": "https://github.com/rust-lang/rust/commit/e5df0cc770893d3139f7b5610e09eebe5df79ae1"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "fa81306b78cae8308b5962545b6761b248dcd24b", "filename": "tests/fail/data_race/stack_pop_race.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9176c747e626383e37832514130d078b611f995/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9176c747e626383e37832514130d078b611f995/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs?ref=e9176c747e626383e37832514130d078b611f995", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Zmiri-preemption-rate=0\n+use std::thread;\n+\n+#[derive(Copy, Clone)]\n+struct MakeSend(*const i32);\n+unsafe impl Send for MakeSend {}\n+\n+fn main() { race(0); }\n+\n+// Using an argument for the ptr to point to, since those do not get StorageDead.\n+fn race(local: i32) {\n+    let ptr = MakeSend(&local as *const i32);\n+    thread::spawn(move || {\n+        let ptr = ptr;\n+        let _val = unsafe { *ptr.0 };\n+    });\n+    // Make the other thread go first so that it does not UAF.\n+    thread::yield_now();\n+    // Deallocating the local (when `main` returns)\n+    // races with the read in the other thread.\n+    // Make sure the error points at this function's end, not just the call site.\n+} //~ERROR Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>`"}, {"sha": "e7e2ba7e8bd9cd339f92a9f7bc1bf3834cf161be", "filename": "tests/fail/data_race/stack_pop_race.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9176c747e626383e37832514130d078b611f995/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9176c747e626383e37832514130d078b611f995/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr?ref=e9176c747e626383e37832514130d078b611f995", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC\n+  --> $DIR/stack_pop_race.rs:LL:CC\n+   |\n+LL | }\n+   |  ^ Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: backtrace:\n+   = note: inside `race` at $DIR/stack_pop_race.rs:LL:CC\n+note: inside `main` at $DIR/stack_pop_race.rs:LL:CC\n+  --> $DIR/stack_pop_race.rs:LL:CC\n+   |\n+LL | fn main() { race(0); }\n+   |             ^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}