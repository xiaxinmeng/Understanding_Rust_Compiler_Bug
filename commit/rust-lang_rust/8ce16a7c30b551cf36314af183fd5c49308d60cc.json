{"sha": "8ce16a7c30b551cf36314af183fd5c49308d60cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZTE2YTdjMzBiNTUxY2YzNjMxNGFmMTgzZmQ1YzQ5MzA4ZDYwY2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-12T09:01:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-12T09:02:48Z"}, "message": "remove xargo logic; instead rely on MIRI_SYSROOT being set to run full MIR tests", "tree": {"sha": "51e317c646003b68c72d318d57c76c878f182e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51e317c646003b68c72d318d57c76c878f182e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ce16a7c30b551cf36314af183fd5c49308d60cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce16a7c30b551cf36314af183fd5c49308d60cc", "html_url": "https://github.com/rust-lang/rust/commit/8ce16a7c30b551cf36314af183fd5c49308d60cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ce16a7c30b551cf36314af183fd5c49308d60cc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01578ca6b3b976799c6cc6ba607143ed81f09a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/01578ca6b3b976799c6cc6ba607143ed81f09a79", "html_url": "https://github.com/rust-lang/rust/commit/01578ca6b3b976799c6cc6ba607143ed81f09a79"}], "stats": {"total": 79, "additions": 40, "deletions": 39}, "files": [{"sha": "86ac2c040fd1c73e1377da2b0bbd4f3ae93a0d40", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ce16a7c30b551cf36314af183fd5c49308d60cc/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8ce16a7c30b551cf36314af183fd5c49308d60cc/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=8ce16a7c30b551cf36314af183fd5c49308d60cc", "patch": "@@ -31,4 +31,3 @@ cargo_miri = [\"cargo_metadata\"]\n \n [dev-dependencies]\n compiletest_rs = { version = \"0.3.4\", features = [\"tmp\"] }\n-dirs = \"1.0.2\""}, {"sha": "9a2fd02f88cda73a04e8386f91034dbe2d65bb7a", "filename": "tests/compiletest.rs", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8ce16a7c30b551cf36314af183fd5c49308d60cc/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce16a7c30b551cf36314af183fd5c49308d60cc/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=8ce16a7c30b551cf36314af183fd5c49308d60cc", "patch": "@@ -1,7 +1,6 @@\n #![feature(slice_concat_ext)]\n \n extern crate compiletest_rs as compiletest;\n-extern crate dirs;\n \n use std::slice::SliceConcatExt;\n use std::path::{PathBuf, Path};\n@@ -31,7 +30,21 @@ fn rustc_lib_path() -> PathBuf {\n     option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n }\n \n-fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: bool) {\n+fn have_fullmir() -> bool {\n+    // We assume we have full MIR when MIRI_SYSROOT is set or when we are in rustc\n+    std::env::var(\"MIRI_SYSROOT\").is_ok() || rustc_test_suite().is_some()\n+}\n+\n+fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool) {\n+    if need_fullmir && !have_fullmir() {\n+        eprintln!(\n+            \"## Skipping compile-fail tests in {} against miri for target {} due to missing mir\",\n+            path,\n+            target\n+        );\n+        return;\n+    }\n+\n     eprintln!(\n         \"## Running compile-fail tests in {} against miri for target {}\",\n         path,\n@@ -45,28 +58,16 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: b\n         config.run_lib_path = rustc_lib_path();\n         config.compile_lib_path = rustc_lib_path();\n     }\n-    // if we are building as part of the rustc test suite, we already have fullmir for everything\n-    if fullmir && rustc_test_suite().is_none() {\n-        if host != target {\n-            // skip fullmir on nonhost\n-            return;\n-        }\n-        let sysroot = dirs::home_dir().unwrap()\n-            .join(\".xargo\")\n-            .join(\"HOST\");\n-        flags.push(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n-        config.src_base = PathBuf::from(path.to_string());\n-    } else {\n-        flags.push(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n-        config.src_base = PathBuf::from(path.to_string());\n-    }\n+    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n+    config.src_base = PathBuf::from(path.to_string());\n     flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     config.target_rustcflags = Some(flags.join(\" \"));\n     config.target = target.to_owned();\n+    config.host = host.to_owned();\n     compiletest::run_tests(&config);\n }\n \n-fn run_pass(path: &str) {\n+fn rustc_pass(sysroot: &Path, path: &str) {\n     eprintln!(\"## Running run-pass tests in {} against rustc\", path);\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n@@ -75,15 +76,24 @@ fn run_pass(path: &str) {\n         config.rustc_path = rustc_path;\n         config.run_lib_path = rustc_lib_path();\n         config.compile_lib_path = rustc_lib_path();\n-        config.target_rustcflags = Some(format!(\"-Dwarnings --sysroot {}\", get_sysroot().display()));\n+        config.target_rustcflags = Some(format!(\"-Dwarnings --sysroot {}\", sysroot.display()));\n     } else {\n         config.target_rustcflags = Some(\"-Dwarnings\".to_owned());\n     }\n     config.host_rustcflags = Some(\"-Dwarnings\".to_string());\n     compiletest::run_tests(&config);\n }\n \n-fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n+fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool, opt: bool) {\n+    if need_fullmir && !have_fullmir() {\n+        eprintln!(\n+            \"## Skipping run-pass tests in {} against miri for target {} due to missing mir\",\n+            path,\n+            target\n+        );\n+        return;\n+    }\n+\n     let opt_str = if opt { \" with optimizations\" } else { \"\" };\n     eprintln!(\n         \"## Running run-pass tests in {} against miri for target {}{}\",\n@@ -102,21 +112,9 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n         config.compile_lib_path = rustc_lib_path();\n     }\n     let mut flags = Vec::new();\n-    // Control miri logging. This is okay despite concurrent test execution as all tests\n-    // will set this env var to the same value.\n-    env::set_var(\"MIRI_LOG\", \"warn\");\n-    // if we are building as part of the rustc test suite, we already have fullmir for everything\n-    if fullmir && rustc_test_suite().is_none() {\n-        if host != target {\n-            // skip fullmir on nonhost\n-            return;\n-        }\n-        let sysroot = dirs::home_dir().unwrap()\n-            .join(\".xargo\")\n-            .join(\"HOST\");\n-\n+    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n+    if have_fullmir() {\n         flags.push(\"-Zmiri-start-fn\".to_owned());\n-        flags.push(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n     }\n     if opt {\n         flags.push(\"-Zmir-opt-level=3\".to_owned());\n@@ -125,6 +123,9 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n         // For now, only validate without optimizations.  Inlining breaks validation.\n         flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     }\n+    // Control miri logging. This is okay despite concurrent test execution as all tests\n+    // will set this env var to the same value.\n+    env::set_var(\"MIRI_LOG\", \"warn\");\n     config.target_rustcflags = Some(flags.join(\" \"));\n     compiletest::run_tests(&config);\n }\n@@ -181,9 +182,9 @@ fn run_pass_miri(opt: bool) {\n     let host = get_host();\n \n     for_all_targets(&sysroot, |target| {\n-        miri_pass(\"tests/run-pass\", &target, &host, false, opt);\n+        miri_pass(&sysroot, \"tests/run-pass\", &target, &host, false, opt);\n     });\n-    miri_pass(\"tests/run-pass-fullmir\", &host, &host, true, opt);\n+    miri_pass(&sysroot, \"tests/run-pass-fullmir\", &host, &host, true, opt);\n }\n \n #[test]\n@@ -201,8 +202,9 @@ fn run_pass_miri_opt() {\n \n #[test]\n fn run_pass_rustc() {\n-    run_pass(\"tests/run-pass\");\n-    run_pass(\"tests/run-pass-fullmir\");\n+    let sysroot = get_sysroot();\n+    rustc_pass(&sysroot, \"tests/run-pass\");\n+    rustc_pass(&sysroot, \"tests/run-pass-fullmir\");\n }\n \n #[test]"}]}