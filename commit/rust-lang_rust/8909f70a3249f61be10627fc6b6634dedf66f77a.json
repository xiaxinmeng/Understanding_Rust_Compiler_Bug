{"sha": "8909f70a3249f61be10627fc6b6634dedf66f77a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MDlmNzBhMzI0OWY2MWJlMTA2MjdmYzZiNjYzNGRlZGY2NmY3N2E=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-05T04:11:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-05T04:11:52Z"}, "message": "Change `fold_qpath` to `fold_qself`.\n\nIt's simpler that way.", "tree": {"sha": "2574688f8d2c17d360a7e50afc559fdc22e60a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2574688f8d2c17d360a7e50afc559fdc22e60a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8909f70a3249f61be10627fc6b6634dedf66f77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8909f70a3249f61be10627fc6b6634dedf66f77a", "html_url": "https://github.com/rust-lang/rust/commit/8909f70a3249f61be10627fc6b6634dedf66f77a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8909f70a3249f61be10627fc6b6634dedf66f77a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f97e896fd669b61051027d76d6dccb89c72c4c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97e896fd669b61051027d76d6dccb89c72c4c52", "html_url": "https://github.com/rust-lang/rust/commit/f97e896fd669b61051027d76d6dccb89c72c4c52"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "a7e835fbd45f2ad135148ca75285d76c944c607c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8909f70a3249f61be10627fc6b6634dedf66f77a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8909f70a3249f61be10627fc6b6634dedf66f77a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8909f70a3249f61be10627fc6b6634dedf66f77a", "patch": "@@ -168,8 +168,8 @@ pub trait Folder : Sized {\n         noop_fold_path(p, self)\n     }\n \n-    fn fold_qpath(&mut self, qs: Option<QSelf>, p: Path) -> (Option<QSelf>, Path) {\n-        noop_fold_qpath(qs, p, self)\n+    fn fold_qself(&mut self, qs: Option<QSelf>) -> Option<QSelf> {\n+        noop_fold_qself(qs, self)\n     }\n \n     fn fold_generic_args(&mut self, p: GenericArgs) -> GenericArgs {\n@@ -367,8 +367,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyKind::Tup(tys) => TyKind::Tup(tys.move_map(|ty| fld.fold_ty(ty))),\n             TyKind::Paren(ty) => TyKind::Paren(fld.fold_ty(ty)),\n             TyKind::Path(qself, path) => {\n-                let (qself, path) = fld.fold_qpath(qself, path);\n-                TyKind::Path(qself, path)\n+                TyKind::Path(fld.fold_qself(qself), fld.fold_path(path))\n             }\n             TyKind::Array(ty, length) => {\n                 TyKind::Array(fld.fold_ty(ty), fld.fold_anon_const(length))\n@@ -425,17 +424,14 @@ pub fn noop_fold_path<T: Folder>(Path { segments, span }: Path, fld: &mut T) ->\n     }\n }\n \n-pub fn noop_fold_qpath<T: Folder>(qself: Option<QSelf>,\n-                                  path: Path,\n-                                  fld: &mut T) -> (Option<QSelf>, Path) {\n-    let qself = qself.map(|QSelf { ty, path_span, position }| {\n+pub fn noop_fold_qself<T: Folder>(qself: Option<QSelf>, fld: &mut T) -> Option<QSelf> {\n+    qself.map(|QSelf { ty, path_span, position }| {\n         QSelf {\n             ty: fld.fold_ty(ty),\n             path_span: fld.new_span(path_span),\n             position,\n         }\n-    });\n-    (qself, fld.fold_path(path))\n+    })\n }\n \n pub fn noop_fold_generic_args<T: Folder>(generic_args: GenericArgs, fld: &mut T) -> GenericArgs\n@@ -1083,8 +1079,7 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n                         pats.move_map(|x| folder.fold_pat(x)), ddpos)\n             }\n             PatKind::Path(qself, pth) => {\n-                let (qself, pth) = folder.fold_qpath(qself, pth);\n-                PatKind::Path(qself, pth)\n+                PatKind::Path(folder.fold_qself(qself), folder.fold_path(pth))\n             }\n             PatKind::Struct(pth, fields, etc) => {\n                 let pth = folder.fold_path(pth);\n@@ -1251,8 +1246,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                                 lim)\n             }\n             ExprKind::Path(qself, path) => {\n-                let (qself, path) = folder.fold_qpath(qself, path);\n-                ExprKind::Path(qself, path)\n+                ExprKind::Path(folder.fold_qself(qself), folder.fold_path(path))\n             }\n             ExprKind::Break(opt_label, opt_expr) => {\n                 ExprKind::Break(opt_label.map(|label| folder.fold_label(label)),"}]}