{"sha": "250fe9b37e4723c92d4edc0fc5d56a7ccd36db87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MGZlOWIzN2U0NzIzYzkyZDRlZGMwZmM1ZDU2YTdjY2QzNmRiODc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-16T08:43:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-16T08:43:28Z"}, "message": "Rollup merge of #59923 - czipperz:fix-convert-doc-links, r=steveklabnik\n\nFix convert module's documentation links\n\nr? @steveklabnik", "tree": {"sha": "2efe6279849e46bf1ffe667d6a080f2189d0fd69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2efe6279849e46bf1ffe667d6a080f2189d0fd69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250fe9b37e4723c92d4edc0fc5d56a7ccd36db87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc3SKxCRBK7hj4Ov3rIwAAdHIIAD6RxLskuklmN2cnZ3pZ198Z\n0tvG98TTwqe30g17uCMUTlucv/NVvGHbc0ykC7MToUmumjZrOI4lsu37QiWLWyUe\nL+5fDfAsgsr0dOE6lkSrQxQAOjTGGIAv9Y9SH3IXcz8xr2nGto9R/sTKF31kjlso\nAT+s53aUqBjd+iMUgbG1JFTRPR0ebhkndRWheaSVE3E3+hfZ9LEBZMC9O14Fm4pb\nosLgU3WucUWmxAms5eaZTkpcrx+Z9WErqBkzq/LUqFoo+P2f4gg1AIlUUfgh5Wtc\nHwGv5miX22rgPvwt8FiARIa0gfQXhJ0dHHK2FZDKoIvdxdzNkSuE+flB2cCXmYs=\n=nAec\n-----END PGP SIGNATURE-----\n", "payload": "tree 2efe6279849e46bf1ffe667d6a080f2189d0fd69\nparent f08c5bbc850a073cdb60a6bcf29a5052b830b317\nparent 1f5d510604be553906cdcbb2eddaf5277faf543d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557996208 +0200\ncommitter GitHub <noreply@github.com> 1557996208 +0200\n\nRollup merge of #59923 - czipperz:fix-convert-doc-links, r=steveklabnik\n\nFix convert module's documentation links\n\nr? @steveklabnik\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250fe9b37e4723c92d4edc0fc5d56a7ccd36db87", "html_url": "https://github.com/rust-lang/rust/commit/250fe9b37e4723c92d4edc0fc5d56a7ccd36db87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250fe9b37e4723c92d4edc0fc5d56a7ccd36db87/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f08c5bbc850a073cdb60a6bcf29a5052b830b317", "url": "https://api.github.com/repos/rust-lang/rust/commits/f08c5bbc850a073cdb60a6bcf29a5052b830b317", "html_url": "https://github.com/rust-lang/rust/commit/f08c5bbc850a073cdb60a6bcf29a5052b830b317"}, {"sha": "1f5d510604be553906cdcbb2eddaf5277faf543d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d510604be553906cdcbb2eddaf5277faf543d", "html_url": "https://github.com/rust-lang/rust/commit/1f5d510604be553906cdcbb2eddaf5277faf543d"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "b3ff447be5ee4802f110e4c601b38007b9a30bef", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/250fe9b37e4723c92d4edc0fc5d56a7ccd36db87/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250fe9b37e4723c92d4edc0fc5d56a7ccd36db87/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=250fe9b37e4723c92d4edc0fc5d56a7ccd36db87", "patch": "@@ -104,7 +104,6 @@ pub const fn identity<T>(x: T) -> T { x }\n /// If you need to do a costly conversion it is better to implement [`From`] with type\n /// `&T` or write a custom function.\n ///\n-///\n /// `AsRef` has the same signature as [`Borrow`], but `Borrow` is different in few aspects:\n ///\n /// - Unlike `AsRef`, `Borrow` has a blanket impl for any `T`, and can be used to accept either\n@@ -133,7 +132,7 @@ pub const fn identity<T>(x: T) -> T { x }\n /// converted a the specified type `T`.\n ///\n /// For example: By creating a generic function that takes an `AsRef<str>` we express that we\n-/// want to accept all references that can be converted to &str as an argument.\n+/// want to accept all references that can be converted to `&str` as an argument.\n /// Since both [`String`] and `&str` implement `AsRef<str>` we can accept both as input argument.\n ///\n /// [`String`]: ../../std/string/struct.String.html\n@@ -149,7 +148,6 @@ pub const fn identity<T>(x: T) -> T { x }\n /// let s = \"hello\".to_string();\n /// is_hello(s);\n /// ```\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRef<T: ?Sized> {\n     /// Performs the conversion.\n@@ -182,6 +180,7 @@ pub trait AsRef<T: ?Sized> {\n /// write a function `add_one`that takes all arguments that can be converted to `&mut u64`.\n /// Because [`Box<T>`] implements `AsMut<T>` `add_one` accepts arguments of type\n /// `&mut Box<u64>` as well:\n+///\n /// ```\n /// fn add_one<T: AsMut<u64>>(num: &mut T) {\n ///     *num.as_mut() += 1;\n@@ -191,8 +190,8 @@ pub trait AsRef<T: ?Sized> {\n /// add_one(&mut boxed_num);\n /// assert_eq!(*boxed_num, 1);\n /// ```\n-/// [`Box<T>`]: ../../std/boxed/struct.Box.html\n ///\n+/// [`Box<T>`]: ../../std/boxed/struct.Box.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsMut<T: ?Sized> {\n     /// Performs the conversion.\n@@ -203,18 +202,18 @@ pub trait AsMut<T: ?Sized> {\n /// A value-to-value conversion that consumes the input value. The\n /// opposite of [`From`].\n ///\n-/// One should only implement [`Into`] if a conversion to a type outside the current crate is\n-/// required. Otherwise one should always prefer implementing [`From`] over [`Into`] because\n-/// implementing [`From`] automatically provides one with a implementation of [`Into`] thanks to\n+/// One should only implement `Into` if a conversion to a type outside the current crate is\n+/// required. Otherwise one should always prefer implementing [`From`] over `Into` because\n+/// implementing [`From`] automatically provides one with a implementation of `Into` thanks to\n /// the blanket implementation in the standard library. [`From`] cannot do these type of\n /// conversions because of Rust's orphaning rules.\n ///\n /// **Note: This trait must not fail**. If the conversion can fail, use [`TryInto`].\n ///\n /// # Generic Implementations\n ///\n-/// - [`From<T>`]` for U` implies `Into<U> for T`\n-/// - [`Into`]` is reflexive, which means that `Into<T> for T` is implemented\n+/// - [`From`]`<T> for U` implies `Into<U> for T`\n+/// - `Into` is reflexive, which means that `Into<T> for T` is implemented\n ///\n /// # Implementing `Into` for conversions to external types\n ///\n@@ -273,7 +272,7 @@ pub trait AsMut<T: ?Sized> {\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n-/// [From]: trait.From.html\n+/// [`From`]: trait.From.html\n /// [`into`]: trait.Into.html#tymethod.into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n@@ -285,18 +284,18 @@ pub trait Into<T>: Sized {\n /// Used to do value-to-value conversions while consuming the input value. It is the reciprocal of\n /// [`Into`].\n ///\n-/// One should always prefer implementing [`From`] over [`Into`]\n-/// because implementing [`From`] automatically provides one with a implementation of [`Into`]\n+/// One should always prefer implementing `From` over [`Into`]\n+/// because implementing `From` automatically provides one with a implementation of [`Into`]\n /// thanks to the blanket implementation in the standard library.\n ///\n /// Only implement [`Into`] if a conversion to a type outside the current crate is required.\n-/// [`From`] cannot do these type of conversions because of Rust's orphaning rules.\n+/// `From` cannot do these type of conversions because of Rust's orphaning rules.\n /// See [`Into`] for more details.\n ///\n-/// Prefer using [`Into`] over using [`From`] when specifying trait bounds on a generic function.\n+/// Prefer using [`Into`] over using `From` when specifying trait bounds on a generic function.\n /// This way, types that directly implement [`Into`] can be used as arguments as well.\n ///\n-/// The [`From`] is also very useful when performing error handling. When constructing a function\n+/// The `From` is also very useful when performing error handling. When constructing a function\n /// that is capable of failing, the return type will generally be of the form `Result<T, E>`.\n /// The `From` trait simplifies error handling by allowing a function to return a single error type\n /// that encapsulate multiple error types. See the \"Examples\" section and [the book][book] for more\n@@ -306,14 +305,15 @@ pub trait Into<T>: Sized {\n ///\n /// # Generic Implementations\n ///\n-/// - [`From<T>`]` for U` implies [`Into<U>`]` for T`\n-/// - [`From`] is reflexive, which means that `From<T> for T` is implemented\n+/// - `From<T> for U` implies [`Into`]`<U> for T`\n+/// - `From` is reflexive, which means that `From<T> for T` is implemented\n ///\n /// # Examples\n ///\n /// [`String`] implements `From<&str>`:\n ///\n-/// An explicit conversion from a &str to a String is done as follows:\n+/// An explicit conversion from a `&str` to a String is done as follows:\n+///\n /// ```\n /// let string = \"hello\".to_string();\n /// let other_string = String::from(\"hello\");\n@@ -361,7 +361,7 @@ pub trait Into<T>: Sized {\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n-/// [`Into<U>`]: trait.Into.html\n+/// [`Into`]: trait.Into.html\n /// [`from`]: trait.From.html#tymethod.from\n /// [book]: ../../book/ch09-00-error-handling.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -422,7 +422,7 @@ pub trait TryInto<T>: Sized {\n ///\n /// # Generic Implementations\n ///\n-/// - `TryFrom<T> for U` implies [`TryInto<U>`]` for T`\n+/// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n /// calling `T::try_from()` on a value of type `T` is `Infallible`."}]}