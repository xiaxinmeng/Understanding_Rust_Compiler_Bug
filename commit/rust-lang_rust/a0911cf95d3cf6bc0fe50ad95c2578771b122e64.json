{"sha": "a0911cf95d3cf6bc0fe50ad95c2578771b122e64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOTExY2Y5NWQzY2Y2YmMwZmU1MGFkOTVjMjU3ODc3MWIxMjJlNjQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-08-09T21:08:12Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-08-09T22:18:08Z"}, "message": "address review comments", "tree": {"sha": "c5ef03e8e8d1f04f1c815fea52761010c0be6da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ef03e8e8d1f04f1c815fea52761010c0be6da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0911cf95d3cf6bc0fe50ad95c2578771b122e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0911cf95d3cf6bc0fe50ad95c2578771b122e64", "html_url": "https://github.com/rust-lang/rust/commit/a0911cf95d3cf6bc0fe50ad95c2578771b122e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0911cf95d3cf6bc0fe50ad95c2578771b122e64/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb74f21f5a66fcb667a6d7fdf9b4c2521c4d4030", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb74f21f5a66fcb667a6d7fdf9b4c2521c4d4030", "html_url": "https://github.com/rust-lang/rust/commit/eb74f21f5a66fcb667a6d7fdf9b4c2521c4d4030"}], "stats": {"total": 103, "additions": 43, "deletions": 60}, "files": [{"sha": "c31928afb220e9efa96f6cdf564b6e6f40df0680", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 35, "deletions": 49, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a0911cf95d3cf6bc0fe50ad95c2578771b122e64/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0911cf95d3cf6bc0fe50ad95c2578771b122e64/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=a0911cf95d3cf6bc0fe50ad95c2578771b122e64", "patch": "@@ -69,18 +69,13 @@ pub fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> (PathB\n     // This worked historically but is needed manually since #42436 (regression\n     // was tagged as #42791) and some more info can be found on #44443 for\n     // emscripten itself.\n-    let mut cmd = (|| {\n-        if let Some(linker) = linker.to_str() {\n-            if cfg!(windows) && linker.ends_with(\".bat\") {\n-                return Command::bat_script(linker)\n-            }\n-        }\n-        match flavor {\n+    let mut cmd = match linker.to_str() {\n+        Some(linker) if cfg!(windows) && linker.ends_with(\".bat\") => Command::bat_script(linker),\n+        _ => match flavor {\n             LinkerFlavor::Lld(f) => Command::lld(linker, f),\n             _ => Command::new(linker),\n-\n         }\n-    })();\n+    };\n \n     let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple.triple(), \"link.exe\");\n \n@@ -600,33 +595,26 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLibrary]) {\n     }\n }\n \n-pub fn linker_and_flavor(sess: &Session) -> Result<(PathBuf, LinkerFlavor), ()> {\n-    fn from<F>(\n+pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n+    fn infer_from(\n         sess: &Session,\n         linker: Option<PathBuf>,\n         flavor: Option<LinkerFlavor>,\n-        otherwise: F,\n-    ) -> Result<(PathBuf, LinkerFlavor), ()>\n-    where\n-        F: FnOnce() -> Result<(PathBuf, LinkerFlavor), ()>\n-    {\n+    ) -> Option<(PathBuf, LinkerFlavor)> {\n         match (linker, flavor) {\n-            (Some(linker), Some(flavor)) => Ok((linker, flavor)),\n+            (Some(linker), Some(flavor)) => Some((linker, flavor)),\n             // only the linker flavor is known; use the default linker for the selected flavor\n-            (None, Some(flavor)) => Ok((PathBuf::from(match flavor {\n-                LinkerFlavor::Em => \"emcc\",\n+            (None, Some(flavor)) => Some((PathBuf::from(match flavor {\n+                LinkerFlavor::Em  => if cfg!(windows) { \"emcc.bat\" } else { \"emcc\" },\n                 LinkerFlavor::Gcc => \"gcc\",\n                 LinkerFlavor::Ld => \"ld\",\n                 LinkerFlavor::Msvc => \"link.exe\",\n                 LinkerFlavor::Lld(_) => \"lld\",\n             }), flavor)),\n-            // infer the linker flavor from the linker name\n             (Some(linker), None) => {\n-                let stem = linker.file_stem().and_then(|stem| stem.to_str()).ok_or_else(|| {\n-                    sess\n-                        .struct_err(&format!(\"couldn't extract file stem from specified linker\"))\n-                        .emit();\n-                })?.to_owned();\n+                let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n+                    sess.fatal(\"couldn't extract file stem from specified linker\");\n+                }).to_owned();\n \n                 let flavor = if stem == \"emcc\" {\n                     LinkerFlavor::Em\n@@ -637,32 +625,35 @@ pub fn linker_and_flavor(sess: &Session) -> Result<(PathBuf, LinkerFlavor), ()>\n                 } else if stem == \"link\" || stem == \"lld-link\" {\n                     LinkerFlavor::Msvc\n                 } else {\n-                    sess\n-                        .struct_err(&format!(\"couldn't infer linker flavor from specified linker\"))\n-                        .emit();\n-                    return Err(());\n+                    // fall back to the value in the target spec\n+                    sess.target.target.linker_flavor\n                 };\n \n-                Ok((linker, flavor))\n+                Some((linker, flavor))\n             },\n-            (None, None) => otherwise(),\n+            (None, None) => None,\n         }\n     }\n \n     // linker and linker flavor specified via command line have precedence over what the target\n     // specification specifies\n-    from(sess, sess.opts.cg.linker.clone(), sess.opts.debugging_opts.linker_flavor, || {\n-        from(\n-            sess,\n-            sess.target.target.options.linker.clone().map(PathBuf::from),\n-            Some(sess.target.target.linker_flavor),\n-            || {\n-                sess\n-                    .struct_err(&format!(\"no linker or linker flavor information provided\"))\n-                    .emit();\n-                Err(())\n-            })\n-    })\n+    if let Some(ret) = infer_from(\n+        sess,\n+        sess.opts.cg.linker.clone(),\n+        sess.opts.debugging_opts.linker_flavor,\n+    ) {\n+        return ret;\n+    }\n+\n+    if let Some(ret) = infer_from(\n+        sess,\n+        sess.target.target.options.linker.clone().map(PathBuf::from),\n+        Some(sess.target.target.linker_flavor),\n+    ) {\n+        return ret;\n+    }\n+\n+    sess.fatal(\"Not enough information provided to determine how to invoke the linker\");\n }\n \n // Create a dynamic library or executable\n@@ -675,12 +666,7 @@ fn link_natively(sess: &Session,\n                  codegen_results: &CodegenResults,\n                  tmpdir: &Path) {\n     info!(\"preparing {:?} to {:?}\", crate_type, out_filename);\n-    let (linker, flavor) = if let Ok((linker, flavor)) = linker_and_flavor(sess) {\n-        (linker, flavor)\n-    } else {\n-        sess.abort_if_errors();\n-        return;\n-    };\n+    let (linker, flavor) = linker_and_flavor(sess);\n \n     // The invocations of cc share some flags across platforms\n     let (pname, mut cmd) = get_linker(sess, &linker, flavor);"}, {"sha": "14abbe3f183d7c8084914a844584780469a41502", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a0911cf95d3cf6bc0fe50ad95c2578771b122e64/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0911cf95d3cf6bc0fe50ad95c2578771b122e64/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=a0911cf95d3cf6bc0fe50ad95c2578771b122e64", "patch": "@@ -1503,17 +1503,14 @@ fn start_executing_work(tcx: TyCtxt,\n \n     let assembler_cmd = if modules_config.no_integrated_as {\n         // HACK: currently we use linker (gcc) as our assembler\n-        if let Ok((linker, flavor)) = link::linker_and_flavor(sess) {\n-            let (name, mut cmd) = get_linker(sess, &linker, flavor);\n-            cmd.args(&sess.target.target.options.asm_args);\n-            Some(Arc::new(AssemblerCommand {\n-                name,\n-                cmd,\n-            }))\n-        } else {\n-            sess.abort_if_errors();\n-            None\n-        }\n+        let (linker, flavor) = link::linker_and_flavor(sess);\n+\n+        let (name, mut cmd) = get_linker(sess, &linker, flavor);\n+        cmd.args(&sess.target.target.options.asm_args);\n+        Some(Arc::new(AssemblerCommand {\n+            name,\n+            cmd,\n+        }))\n     } else {\n         None\n     };"}]}