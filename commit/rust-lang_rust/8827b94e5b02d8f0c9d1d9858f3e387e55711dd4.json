{"sha": "8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjdiOTRlNWIwMmQ4ZjBjOWQxZDk4NThmM2UzODdlNTU3MTFkZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-05T01:10:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-05T01:10:45Z"}, "message": "auto merge of #8978 : pnkfelix/rust/make-path-api-less-allocation-happy, r=huonw\n\nA [dialogue](https://github.com/mozilla/rust/pull/8909#discussion-diff-6102725) on PR #8909 inspired me to make this change.\r\n\r\nr? anyone\r\n\r\n(It is possible that `std::path` itself will soon be replaced with a new implementation that kballard's working on, as mentioned in the dialogue linked above, but this revision is simple enough that I figured I'd offer it up.)", "tree": {"sha": "c43e999ade2092f70e64c3e312fb3d0ad35c4e74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c43e999ade2092f70e64c3e312fb3d0ad35c4e74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "html_url": "https://github.com/rust-lang/rust/commit/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b161e09e03a5a0135557daa7166d290a515fbec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b161e09e03a5a0135557daa7166d290a515fbec2", "html_url": "https://github.com/rust-lang/rust/commit/b161e09e03a5a0135557daa7166d290a515fbec2"}, {"sha": "7f834c5c075afdda7cb493ba75b54dbe950e5b51", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f834c5c075afdda7cb493ba75b54dbe950e5b51", "html_url": "https://github.com/rust-lang/rust/commit/7f834c5c075afdda7cb493ba75b54dbe950e5b51"}], "stats": {"total": 100, "additions": 52, "deletions": 48}, "files": [{"sha": "df0462203a9eba30db3d3c11760f73fa3cfc716e", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -307,8 +307,9 @@ pub fn make_test_name(config: &config, testfile: &Path) -> test::TestName {\n     // Try to elide redundant long paths\n     fn shorten(path: &Path) -> ~str {\n         let filename = path.filename();\n-        let dir = path.pop().filename();\n-        fmt!(\"%s/%s\", dir.unwrap_or_default(~\"\"), filename.unwrap_or_default(~\"\"))\n+        let p = path.pop();\n+        let dir = p.filename();\n+        fmt!(\"%s/%s\", dir.unwrap_or_default(\"\"), filename.unwrap_or_default(\"\"))\n     }\n \n     test::DynTestName(fmt!(\"[%s] %s\","}, {"sha": "6e2f62f870695821014f0e8a11b380d40205c4d0", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -880,7 +880,7 @@ fn _arm_push_aux_shared_library(config: &config, testfile: &Path) {\n     let dirs = os::list_dir_path(&Path(tstr));\n     for file in dirs.iter() {\n \n-        if (file.filetype() == Some(~\".so\")) {\n+        if (file.filetype() == Some(\".so\")) {\n \n             let copy_result = procsrv::run(\"\", config.adb_path,\n                 [~\"push\", file.to_str(), config.adb_test_dir.clone()],"}, {"sha": "b44fb100000d6fadb7630456eed317a79d9b74b9", "filename": "src/librust/rust.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -162,7 +162,8 @@ fn cmd_help(args: &[~str]) -> ValidUsage {\n fn cmd_test(args: &[~str]) -> ValidUsage {\n     match args {\n         [ref filename] => {\n-            let test_exec = Path(*filename).filestem().unwrap() + \"test~\";\n+            let p = Path(*filename);\n+            let test_exec = p.filestem().unwrap() + \"test~\";\n             invoke(\"rustc\", &[~\"--test\", filename.to_owned(),\n                               ~\"-o\", test_exec.to_owned()], rustc::main_args);\n             let exit_code = run::process_status(~\"./\" + test_exec, []);\n@@ -175,7 +176,8 @@ fn cmd_test(args: &[~str]) -> ValidUsage {\n fn cmd_run(args: &[~str]) -> ValidUsage {\n     match args {\n         [ref filename, ..prog_args] => {\n-            let exec = Path(*filename).filestem().unwrap() + \"~\";\n+            let p = Path(*filename);\n+            let exec = p.filestem().unwrap() + \"~\";\n             invoke(\"rustc\", &[filename.to_owned(), ~\"-o\", exec.to_owned()],\n                    rustc::main_args);\n             let exit_code = run::process_status(~\"./\"+exec, prog_args);"}, {"sha": "e2ef1f2282deda5f6d91114bfbe90a71516ffa92", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -952,13 +952,13 @@ pub fn link_args(sess: Session,\n     let cstore = sess.cstore;\n     let r = cstore::get_used_crate_files(cstore);\n     for cratepath in r.iter() {\n-        if cratepath.filetype() == Some(~\".rlib\") {\n+        if cratepath.filetype() == Some(\".rlib\") {\n             args.push(cratepath.to_str());\n             loop;\n         }\n         let dir = cratepath.dirname();\n         if dir != ~\"\" { args.push(~\"-L\" + dir); }\n-        let libarg = unlib(sess.targ_cfg, cratepath.filestem().unwrap());\n+        let libarg = unlib(sess.targ_cfg, cratepath.filestem().unwrap().to_owned());\n         args.push(~\"-l\" + libarg);\n     }\n "}, {"sha": "984527eb56a0efec98a9adc6d61a7f18064b73d6", "filename": "src/librustpkg/installed_packages.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Finstalled_packages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Finstalled_packages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Finstalled_packages.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -19,7 +19,8 @@ pub fn list_installed_packages(f: &fn(&PkgId) -> bool) -> bool  {\n     for p in workspaces.iter() {\n         let binfiles = os::list_dir(&p.push(\"bin\"));\n         for exec in binfiles.iter() {\n-            let exec_path = Path(*exec).filestem();\n+            let p = Path(*exec);\n+            let exec_path = p.filestem();\n             do exec_path.iter().advance |s| {\n                 f(&PkgId::new(*s))\n             };\n@@ -49,8 +50,8 @@ pub fn has_library(p: &Path) -> Option<~str> {\n     let files = os::list_dir(p);\n     for q in files.iter() {\n         let as_path = Path(*q);\n-        if as_path.filetype() == Some(os::consts::DLL_SUFFIX.to_owned()) {\n-            let stuff : ~str = as_path.filestem().expect(\"has_library: weird path\");\n+        if as_path.filetype() == Some(os::consts::DLL_SUFFIX) {\n+            let stuff : &str = as_path.filestem().expect(\"has_library: weird path\");\n             let mut stuff2 = stuff.split_str_iter(&\"-\");\n             let stuff3: ~[&str] = stuff2.collect();\n             // argh"}, {"sha": "ce1da58a2cb87441b654baf3ee3e32edb82712d2", "filename": "src/librustpkg/package_id.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Fpackage_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Fpackage_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_id.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -68,7 +68,7 @@ impl PkgId {\n         if path.components.len() < 1 {\n             return cond.raise((path, ~\"0-length pkgid\"));\n         }\n-        let short_name = path.clone().filestem().expect(fmt!(\"Strange path! %s\", s));\n+        let short_name = path.filestem().expect(fmt!(\"Strange path! %s\", s));\n \n         let version = match given_version {\n             Some(v) => v,\n@@ -83,8 +83,8 @@ impl PkgId {\n \n         debug!(\"path = %s\", path.to_str());\n         PkgId {\n-            path: path,\n-            short_name: short_name,\n+            path: path.clone(),\n+            short_name: short_name.to_owned(),\n             version: version\n         }\n     }"}, {"sha": "c20091158c4f8a0ab0aa55a086d7227ec2ea1cb8", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -119,7 +119,7 @@ impl PkgSrc {\n             return Some(local);\n         }\n \n-        if (self.id.path.clone()).components().len() < 2 {\n+        if self.id.path.components().len() < 2 {\n             // If a non-URL, don't bother trying to fetch\n             return None;\n         }\n@@ -157,7 +157,7 @@ impl PkgSrc {\n \n     /// True if the given path's stem is self's pkg ID's stem\n     fn stem_matches(&self, p: &Path) -> bool {\n-        p.filestem().map_default(false, |p| { p == &self.id.short_name })\n+        p.filestem().map_default(false, |p| { p == &self.id.short_name.as_slice() })\n     }\n \n     fn push_crate(cs: &mut ~[Crate], prefix: uint, p: &Path) {\n@@ -182,10 +182,10 @@ impl PkgSrc {\n         do os::walk_dir(&dir) |pth| {\n             let maybe_known_crate_set = match pth.filename() {\n                 Some(filename) => match filename {\n-                    ~\"lib.rs\" => Some(&mut self.libs),\n-                    ~\"main.rs\" => Some(&mut self.mains),\n-                    ~\"test.rs\" => Some(&mut self.tests),\n-                    ~\"bench.rs\" => Some(&mut self.benchs),\n+                    \"lib.rs\" => Some(&mut self.libs),\n+                    \"main.rs\" => Some(&mut self.mains),\n+                    \"test.rs\" => Some(&mut self.tests),\n+                    \"bench.rs\" => Some(&mut self.benchs),\n                     _ => None\n                 },\n                 _ => None"}, {"sha": "cbe6c8f65c4326cf71d88bbed39e26184a6760ab", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -234,14 +234,14 @@ pub fn library_in_workspace(path: &Path, short_name: &str, where: Target,\n                                Some(j) => {\n                                    debug!(\"Maybe %s equals %s\", f_name.slice(0, j), lib_prefix);\n                                    if f_name.slice(0, j) == lib_prefix {\n-                                       result_filename = Some(p_path);\n+                                       result_filename = Some(p_path.clone());\n                                    }\n                                    break;\n                                }\n                                None => break\n                            }\n                        }\n-                       _ => { f_name = f_name.slice(0, i).to_owned(); }\n+                       _ => { f_name = f_name.slice(0, i); }\n                  }\n                }\n                None => break"}, {"sha": "5226036802eb227521e5da86fbf77d55b24f4889", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -396,7 +396,7 @@ fn touch_source_file(workspace: &Path, pkgid: &PkgId) {\n     let pkg_src_dir = workspace.push(\"src\").push(pkgid.to_str());\n     let contents = os::list_dir_path(&pkg_src_dir);\n     for p in contents.iter() {\n-        if p.filetype() == Some(~\".rs\") {\n+        if p.filetype() == Some(\".rs\") {\n             // should be able to do this w/o a process\n             if run::process_output(\"touch\", [p.to_str()]).status != 0 {\n                 let _ = cond.raise((pkg_src_dir.clone(), ~\"Bad path\"));\n@@ -413,7 +413,7 @@ fn frob_source_file(workspace: &Path, pkgid: &PkgId) {\n     let contents = os::list_dir_path(&pkg_src_dir);\n     let mut maybe_p = None;\n     for p in contents.iter() {\n-        if p.filetype() == Some(~\".rs\") {\n+        if p.filetype() == Some(\".rs\") {\n             maybe_p = Some(p);\n             break;\n         }"}, {"sha": "d95c7b65101f60b31de56b7c88227d7cb8acfbd7", "filename": "src/libstd/path.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827b94e5b02d8f0c9d1d9858f3e387e55711dd4/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=8827b94e5b02d8f0c9d1d9858f3e387e55711dd4", "patch": "@@ -28,7 +28,7 @@ use option::{None, Option, Some};\n use str::{OwnedStr, Str, StrSlice, StrVector};\n use to_str::ToStr;\n use ascii::{AsciiCast, AsciiStr};\n-use vec::{OwnedVector, ImmutableVector, OwnedCopyableVector};\n+use vec::{Vector, OwnedVector, ImmutableVector, OwnedCopyableVector};\n \n #[cfg(windows)]\n pub use Path = self::WindowsPath;\n@@ -65,17 +65,17 @@ pub trait GenericPath {\n     fn dirname(&self) -> ~str;\n     /// Returns the file component of `self`, as a string option.\n     /// Returns None if `self` names a directory.\n-    fn filename(&self) -> Option<~str>;\n+    fn filename<'a>(&'a self) -> Option<&'a str>;\n     /// Returns the stem of the file component of `self`, as a string option.\n     /// The stem is the slice of a filename starting at 0 and ending just before\n     /// the last '.' in the name.\n     /// Returns None if `self` names a directory.\n-    fn filestem(&self) -> Option<~str>;\n+    fn filestem<'a>(&'a self) -> Option<&'a str>;\n     /// Returns the type of the file component of `self`, as a string option.\n     /// The file type is the slice of a filename starting just after the last\n     /// '.' in the name and ending at the last index in the filename.\n     /// Returns None if `self` names a directory.\n-    fn filetype(&self) -> Option<~str>;\n+    fn filetype<'a>(&'a self) -> Option<&'a str>;\n \n     /// Returns a new path consisting of `self` with the parent directory component replaced\n     /// with the given string.\n@@ -163,7 +163,7 @@ pub trait GenericPath {\n         result\n     }\n \n-    fn components(self) -> ~[~str];\n+    fn components<'a>(&'a self) -> &'a [~str];\n }\n \n #[cfg(target_os = \"linux\")]\n@@ -600,31 +600,31 @@ impl GenericPath for PosixPath {\n         }\n     }\n \n-    fn filename(&self) -> Option<~str> {\n+    fn filename<'a>(&'a self) -> Option<&'a str> {\n         match self.components.len() {\n             0 => None,\n-            n => Some(self.components[n - 1].clone()),\n+            n => Some(self.components[n - 1].as_slice()),\n         }\n     }\n \n-    fn filestem(&self) -> Option<~str> {\n+    fn filestem<'a>(&'a self) -> Option<&'a str> {\n         match self.filename() {\n             None => None,\n             Some(ref f) => {\n                 match f.rfind('.') {\n-                    Some(p) => Some(f.slice_to(p).to_owned()),\n-                    None => Some((*f).clone()),\n+                    Some(p) => Some(f.slice_to(p)),\n+                    None => Some((*f)),\n                 }\n             }\n         }\n     }\n \n-    fn filetype(&self) -> Option<~str> {\n+    fn filetype<'a>(&'a self) -> Option<&'a str> {\n         match self.filename() {\n             None => None,\n             Some(ref f) => {\n                 match f.rfind('.') {\n-                    Some(p) if p < f.len() => Some(f.slice_from(p).to_owned()),\n+                    Some(p) if p < f.len() => Some(f.slice_from(p)),\n                     _ => None,\n                 }\n             }\n@@ -670,7 +670,7 @@ impl GenericPath for PosixPath {\n     fn file_path(&self) -> PosixPath {\n         let cs = match self.filename() {\n           None => ~[],\n-          Some(ref f) => ~[(*f).clone()]\n+          Some(ref f) => ~[(*f).to_owned()]\n         };\n         PosixPath {\n             is_absolute: false,\n@@ -756,7 +756,7 @@ impl GenericPath for PosixPath {\n              self.is_ancestor_of(&other.pop()))\n     }\n \n-   fn components(self) -> ~[~str] { self.components }\n+   fn components<'a>(&'a self) -> &'a [~str] { self.components.as_slice() }\n }\n \n \n@@ -842,31 +842,31 @@ impl GenericPath for WindowsPath {\n         }\n     }\n \n-    fn filename(&self) -> Option<~str> {\n+    fn filename<'a>(&'a self) -> Option<&'a str> {\n         match self.components.len() {\n             0 => None,\n-            n => Some(self.components[n - 1].clone()),\n+            n => Some(self.components[n - 1].as_slice()),\n         }\n     }\n \n-    fn filestem(&self) -> Option<~str> {\n+    fn filestem<'a>(&'a self) -> Option<&'a str> {\n         match self.filename() {\n             None => None,\n             Some(ref f) => {\n                 match f.rfind('.') {\n-                    Some(p) => Some(f.slice_to(p).to_owned()),\n-                    None => Some((*f).clone()),\n+                    Some(p) => Some(f.slice_to(p)),\n+                    None => Some((*f)),\n                 }\n             }\n         }\n     }\n \n-    fn filetype(&self) -> Option<~str> {\n+    fn filetype<'a>(&'a self) -> Option<&'a str> {\n         match self.filename() {\n           None => None,\n           Some(ref f) => {\n             match f.rfind('.') {\n-                Some(p) if p < f.len() => Some(f.slice_from(p).to_owned()),\n+                Some(p) if p < f.len() => Some(f.slice_from(p)),\n                 _ => None,\n             }\n           }\n@@ -916,7 +916,7 @@ impl GenericPath for WindowsPath {\n             is_absolute: false,\n             components: match self.filename() {\n                 None => ~[],\n-                Some(ref f) => ~[(*f).clone()],\n+                Some(ref f) => ~[(*f).to_owned()],\n             }\n         }\n     }\n@@ -1049,7 +1049,7 @@ impl GenericPath for WindowsPath {\n              self.is_ancestor_of(&other.pop()))\n     }\n \n-   fn components(self) -> ~[~str] { self.components }\n+   fn components<'a>(&'a self) -> &'a [~str] { self.components.as_slice() }\n }\n \n pub fn normalize(components: &[~str]) -> ~[~str] {\n@@ -1143,10 +1143,10 @@ mod tests {\n     #[test]\n     fn test_filetype_foo_bar() {\n         let wp = PosixPath(\"foo.bar\");\n-        assert_eq!(wp.filetype(), Some(~\".bar\"));\n+        assert_eq!(wp.filetype(), Some(\".bar\"));\n \n         let wp = WindowsPath(\"foo.bar\");\n-        assert_eq!(wp.filetype(), Some(~\".bar\"));\n+        assert_eq!(wp.filetype(), Some(\".bar\"));\n     }\n \n     #[test]"}]}