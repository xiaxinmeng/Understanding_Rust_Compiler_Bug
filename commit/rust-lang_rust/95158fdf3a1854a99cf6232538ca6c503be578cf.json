{"sha": "95158fdf3a1854a99cf6232538ca6c503be578cf", "node_id": "C_kwDOAAsO6NoAKDk1MTU4ZmRmM2ExODU0YTk5Y2Y2MjMyNTM4Y2E2YzUwM2JlNTc4Y2Y", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-02T18:34:32Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:56Z"}, "message": "No need to store parent_def_id in LifetimeCaptureContext", "tree": {"sha": "6c200c6780f1056e2edcf1ef7d672f297032be7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c200c6780f1056e2edcf1ef7d672f297032be7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95158fdf3a1854a99cf6232538ca6c503be578cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zAACgkQgTGiTgx5\n768mMw/+OHi4Ghzhg4FudBmXvsNFo+ExNLv6Dc9Uyr7mSVc262mdmYS8AaNxEJ1d\n89MewUNKR7IP6UzyJHeiL0of6I/VRkLXD2PYA0Br3tYTglQvOZRCNqvjfoCnqCfb\ncoqq/3bT4HH6PFNukqRbrvvBmEwDTQB6YtxFIOb6XeFmoWWoVQtaPghDuIwGjBP3\nYa0OC2yC5Lb69eLeTA1rOlJfUuNRLem6shuz187vfKrONOzvyqPS4RWZt2Kr/PRA\ns+PT3emAz3ZDKvGDfa2jLCquJvrN5O7TFo/OAiGIRYy6zKnOWaVT6x6iUBhLAzud\nJvF6Oc1OTeT1rXypQEGoChCcKRKVDBpJrLKqJmM3QSTobXKrzplEH+bVng8twbhn\nAW1dnicSsQjocd3+zeZrDiov57RBES9wfZzshu3Q/lk9ZswCzraTcKHdh2Z37soy\nVVX+sCE6d0GNQUm1o73UMNx7OCk7CUOB5Lm2+gLeqUL5Q7hdgmRJHFsTKPmaHlJT\nzOlWsr3Cyg2IW5AFJ7PZawmROtXkBjxuYLdQgMmfjsW0oAUnx2fsTI7px/KfFwwK\nH/YasSNwRpbVXe8sG7mi7VJpnBkKRYjjkJr/WcFzqgm46jyhAC+rzRE0boJQsxeg\nJ7E60gLekItuL23QpONF6gvp8LvUIn6v/MZhwDpH74kwawCjrtg=\n=AARn\n-----END PGP SIGNATURE-----", "payload": "tree 6c200c6780f1056e2edcf1ef7d672f297032be7e\nparent 552f6b0f81c7e2ad031695482d69776439a7935c\nauthor Santiago Pastorino <spastorino@gmail.com> 1659465272 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623216 -0300\n\nNo need to store parent_def_id in LifetimeCaptureContext\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95158fdf3a1854a99cf6232538ca6c503be578cf", "html_url": "https://github.com/rust-lang/rust/commit/95158fdf3a1854a99cf6232538ca6c503be578cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95158fdf3a1854a99cf6232538ca6c503be578cf/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552f6b0f81c7e2ad031695482d69776439a7935c", "url": "https://api.github.com/repos/rust-lang/rust/commits/552f6b0f81c7e2ad031695482d69776439a7935c", "html_url": "https://github.com/rust-lang/rust/commit/552f6b0f81c7e2ad031695482d69776439a7935c"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "26ab1f900e1d51e91ee995ed976604830ce0c5f0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95158fdf3a1854a99cf6232538ca6c503be578cf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95158fdf3a1854a99cf6232538ca6c503be578cf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=95158fdf3a1854a99cf6232538ca6c503be578cf", "patch": "@@ -136,8 +136,6 @@ struct LoweringContext<'a, 'hir> {\n /// to rebind the introduced lifetimes.\n #[derive(Debug)]\n struct LifetimeCaptureContext {\n-    /// parent def_id for new definitions\n-    parent_def_id: LocalDefId,\n     /// Set of lifetimes to rebind.\n     captures: FxHashMap<\n         LocalDefId, // original parameter id\n@@ -1347,7 +1345,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let lifetime_stash = std::mem::replace(\n                     &mut lctx.captured_lifetimes,\n                     Some(LifetimeCaptureContext {\n-                        parent_def_id: opaque_ty_def_id,\n                         captures: std::mem::take(&mut collected_lifetimes),\n                         binders_to_ignore: Default::default(),\n                     }),\n@@ -1357,7 +1354,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     lifetime_collector::lifetimes_in_bounds(&lctx.resolver, bounds);\n                 debug!(?lifetimes_in_bounds);\n \n-                lctx.create_and_capture_lifetime_defs(&lifetimes_in_bounds);\n+                lctx.create_and_capture_lifetime_defs(opaque_ty_def_id, &lifetimes_in_bounds);\n \n                 let ret = lctx.lower_param_bounds(bounds, itctx);\n \n@@ -1446,7 +1443,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::OwnerNode::Item(self.arena.alloc(opaque_ty_item))\n     }\n \n-    fn create_and_capture_lifetime_defs(&mut self, lifetimes_in_bounds: &[Lifetime]) {\n+    fn create_and_capture_lifetime_defs(\n+        &mut self,\n+        parent_def_id: LocalDefId,\n+        lifetimes_in_bounds: &[Lifetime],\n+    ) {\n         for lifetime in lifetimes_in_bounds {\n             let ident = lifetime.ident;\n             let span = ident.span;\n@@ -1464,7 +1465,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 let name = ParamName::Plain(ident);\n \n                                 self.create_def(\n-                                    captured_lifetimes.parent_def_id,\n+                                    parent_def_id,\n                                     node_id,\n                                     DefPathData::LifetimeNs(name.ident().name),\n                                 );\n@@ -1485,7 +1486,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 let name = ParamName::Fresh;\n \n                                 self.create_def(\n-                                    captured_lifetimes.parent_def_id,\n+                                    parent_def_id,\n                                     node_id,\n                                     DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n                                 );\n@@ -1735,7 +1736,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let lifetime_stash = std::mem::replace(\n                 &mut this.captured_lifetimes,\n                 Some(LifetimeCaptureContext {\n-                    parent_def_id: opaque_ty_def_id,\n                     captures: std::mem::take(&mut captures),\n                     binders_to_ignore: Default::default(),\n                 }),\n@@ -1745,7 +1745,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 lifetime_collector::lifetimes_in_ret_ty(&this.resolver, output);\n             debug!(?lifetimes_in_bounds);\n \n-            this.create_and_capture_lifetime_defs(&lifetimes_in_bounds);\n+            this.create_and_capture_lifetime_defs(opaque_ty_def_id, &lifetimes_in_bounds);\n \n             // We have to be careful to get elision right here. The\n             // idea is that we create a lifetime parameter for each"}]}