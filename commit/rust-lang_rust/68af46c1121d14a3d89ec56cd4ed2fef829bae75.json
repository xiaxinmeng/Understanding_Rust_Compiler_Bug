{"sha": "68af46c1121d14a3d89ec56cd4ed2fef829bae75", "node_id": "C_kwDOAAsO6NoAKDY4YWY0NmMxMTIxZDE0YTNkODllYzU2Y2Q0ZWQyZmVmODI5YmFlNzU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-14T12:37:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-14T17:26:40Z"}, "message": "assert that we are (de)seiralizing ProvenanceMap correctly", "tree": {"sha": "09f30c1efe081681e66768af7e1f0548a6e667d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09f30c1efe081681e66768af7e1f0548a6e667d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68af46c1121d14a3d89ec56cd4ed2fef829bae75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68af46c1121d14a3d89ec56cd4ed2fef829bae75", "html_url": "https://github.com/rust-lang/rust/commit/68af46c1121d14a3d89ec56cd4ed2fef829bae75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68af46c1121d14a3d89ec56cd4ed2fef829bae75/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b25989246be62fe1c489db5f381c1ac36a46d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/03b25989246be62fe1c489db5f381c1ac36a46d5", "html_url": "https://github.com/rust-lang/rust/commit/03b25989246be62fe1c489db5f381c1ac36a46d5"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "fdd0e444010879fd873ffb0fbadda49f47463887", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=68af46c1121d14a3d89ec56cd4ed2fef829bae75", "patch": "@@ -112,15 +112,15 @@ pub struct Memory<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n /// A reference to some allocation that was already bounds-checked for the given region\n /// and had the on-access machine hooks run.\n #[derive(Copy, Clone)]\n-pub struct AllocRef<'a, 'tcx, Prov, Extra> {\n+pub struct AllocRef<'a, 'tcx, Prov: Provenance, Extra> {\n     alloc: &'a Allocation<Prov, Extra>,\n     range: AllocRange,\n     tcx: TyCtxt<'tcx>,\n     alloc_id: AllocId,\n }\n /// A reference to some allocation that was already bounds-checked for the given region\n /// and had the on-access machine hooks run.\n-pub struct AllocRefMut<'a, 'tcx, Prov, Extra> {\n+pub struct AllocRefMut<'a, 'tcx, Prov: Provenance, Extra> {\n     alloc: &'a mut Allocation<Prov, Extra>,\n     range: AllocRange,\n     tcx: TyCtxt<'tcx>,"}, {"sha": "680240703465f284726de2a262bd18880b46710c", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=68af46c1121d14a3d89ec56cd4ed2fef829bae75", "patch": "@@ -36,7 +36,7 @@ pub use init_mask::{InitChunk, InitChunkIter};\n // hashed. (see the `Hash` impl below for more details), so the impl is not derived.\n #[derive(Clone, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n-pub struct Allocation<Prov = AllocId, Extra = ()> {\n+pub struct Allocation<Prov: Provenance = AllocId, Extra = ()> {\n     /// The actual bytes of the allocation.\n     /// Note that the bytes of a pointer represent the offset of the pointer.\n     bytes: Box<[u8]>,\n@@ -108,9 +108,7 @@ impl hash::Hash for Allocation {\n /// (`ConstAllocation`) are used quite a bit.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_pass_by_value]\n-pub struct ConstAllocation<'tcx, Prov = AllocId, Extra = ()>(\n-    pub Interned<'tcx, Allocation<Prov, Extra>>,\n-);\n+pub struct ConstAllocation<'tcx>(pub Interned<'tcx, Allocation>);\n \n impl<'tcx> fmt::Debug for ConstAllocation<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -120,8 +118,8 @@ impl<'tcx> fmt::Debug for ConstAllocation<'tcx> {\n     }\n }\n \n-impl<'tcx, Prov, Extra> ConstAllocation<'tcx, Prov, Extra> {\n-    pub fn inner(self) -> &'tcx Allocation<Prov, Extra> {\n+impl<'tcx> ConstAllocation<'tcx> {\n+    pub fn inner(self) -> &'tcx Allocation {\n         self.0.0\n     }\n }\n@@ -220,7 +218,7 @@ impl AllocRange {\n }\n \n // The constructors are all without extra; the extra gets added by a machine hook later.\n-impl<Prov> Allocation<Prov> {\n+impl<Prov: Provenance> Allocation<Prov> {\n     /// Creates an allocation initialized by the given bytes\n     pub fn from_bytes<'a>(\n         slice: impl Into<Cow<'a, [u8]>>,\n@@ -278,7 +276,7 @@ impl<Prov> Allocation<Prov> {\n impl Allocation {\n     /// Adjust allocation from the ones in tcx to a custom Machine instance\n     /// with a different Provenance and Extra type.\n-    pub fn adjust_from_tcx<Prov, Extra, Err>(\n+    pub fn adjust_from_tcx<Prov: Provenance, Extra, Err>(\n         self,\n         cx: &impl HasDataLayout,\n         extra: Extra,\n@@ -311,7 +309,7 @@ impl Allocation {\n }\n \n /// Raw accessors. Provide access to otherwise private bytes.\n-impl<Prov, Extra> Allocation<Prov, Extra> {\n+impl<Prov: Provenance, Extra> Allocation<Prov, Extra> {\n     pub fn len(&self) -> usize {\n         self.bytes.len()\n     }"}, {"sha": "19ee209e552d2343c191cc131a36714fb3467e18", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/provenance_map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs?ref=68af46c1121d14a3d89ec56cd4ed2fef829bae75", "patch": "@@ -22,15 +22,17 @@ pub struct ProvenanceMap<Prov = AllocId> {\n     bytes: Option<Box<SortedMap<Size, Prov>>>,\n }\n \n-impl<D: Decoder, Prov: Decodable<D>> Decodable<D> for ProvenanceMap<Prov> {\n+impl<D: Decoder, Prov: Provenance + Decodable<D>> Decodable<D> for ProvenanceMap<Prov> {\n     fn decode(d: &mut D) -> Self {\n+        assert!(!Prov::OFFSET_IS_ADDR); // only `AllocId` is ever serialized\n         Self { ptrs: Decodable::decode(d), bytes: None }\n     }\n }\n \n-impl<S: Encoder, Prov: Encodable<S>> Encodable<S> for ProvenanceMap<Prov> {\n+impl<S: Encoder, Prov: Provenance + Encodable<S>> Encodable<S> for ProvenanceMap<Prov> {\n     fn encode(&self, s: &mut S) {\n         let Self { ptrs, bytes } = self;\n+        assert!(!Prov::OFFSET_IS_ADDR); // only `AllocId` is ever serialized\n         debug_assert!(bytes.is_none());\n         ptrs.encode(s)\n     }"}, {"sha": "2b3f2c024118977f7e70ad72d16bf59de4221dc1", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=68af46c1121d14a3d89ec56cd4ed2fef829bae75", "patch": "@@ -788,15 +788,15 @@ pub fn write_allocations<'tcx>(\n /// After the hex dump, an ascii dump follows, replacing all unprintable characters (control\n /// characters or characters whose value is larger than 127) with a `.`\n /// This also prints provenance adequately.\n-pub fn display_allocation<'a, 'tcx, Prov, Extra>(\n+pub fn display_allocation<'a, 'tcx, Prov: Provenance, Extra>(\n     tcx: TyCtxt<'tcx>,\n     alloc: &'a Allocation<Prov, Extra>,\n ) -> RenderAllocation<'a, 'tcx, Prov, Extra> {\n     RenderAllocation { tcx, alloc }\n }\n \n #[doc(hidden)]\n-pub struct RenderAllocation<'a, 'tcx, Prov, Extra> {\n+pub struct RenderAllocation<'a, 'tcx, Prov: Provenance, Extra> {\n     tcx: TyCtxt<'tcx>,\n     alloc: &'a Allocation<Prov, Extra>,\n }"}, {"sha": "421438323673f78b53c16683dcbb292299f75304", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68af46c1121d14a3d89ec56cd4ed2fef829bae75/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=68af46c1121d14a3d89ec56cd4ed2fef829bae75", "patch": "@@ -266,7 +266,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_id: AllocId,\n-        alloc: ConstAllocation<'tcx, Self::Provenance, Self::AllocExtra>,\n+        alloc: ConstAllocation<'tcx>,\n         _static_def_id: Option<DefId>,\n         is_write: bool,\n     ) -> InterpResult<'tcx> {"}]}