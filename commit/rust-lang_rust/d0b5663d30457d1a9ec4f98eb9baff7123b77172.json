{"sha": "d0b5663d30457d1a9ec4f98eb9baff7123b77172", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYjU2NjNkMzA0NTdkMWE5ZWM0Zjk4ZWI5YmFmZjcxMjNiNzcxNzI=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-15T08:31:50Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-15T08:45:57Z"}, "message": "Fix usage of backquotes in suggestion", "tree": {"sha": "1294b3a1523d35164b6929f267ed696223b0f9ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1294b3a1523d35164b6929f267ed696223b0f9ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0b5663d30457d1a9ec4f98eb9baff7123b77172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b5663d30457d1a9ec4f98eb9baff7123b77172", "html_url": "https://github.com/rust-lang/rust/commit/d0b5663d30457d1a9ec4f98eb9baff7123b77172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0b5663d30457d1a9ec4f98eb9baff7123b77172/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86a7e5f38e54f4404cc71874316eb0b4dba200b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86a7e5f38e54f4404cc71874316eb0b4dba200b", "html_url": "https://github.com/rust-lang/rust/commit/c86a7e5f38e54f4404cc71874316eb0b4dba200b"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "f201494a02466da46b50701bf851edc8082bfbd4", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5663d30457d1a9ec4f98eb9baff7123b77172/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5663d30457d1a9ec4f98eb9baff7123b77172/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=d0b5663d30457d1a9ec4f98eb9baff7123b77172", "patch": "@@ -704,7 +704,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n                     cx,\n                     MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n                     expr.span,\n-                    \"usage of `utils::match_type() on a type diagnostic item`\",\n+                    \"usage of `utils::match_type()` on a type diagnostic item\",\n                     \"try\",\n                     format!(\"utils::is_type_diagnostic_item({}, {}, sym!({}))\", cx_snippet, ty_snippet, item_name),\n                     Applicability::MaybeIncorrect,"}, {"sha": "5e5fe9e3a3e73c494873f3c06cc126ae43989944", "filename": "tests/ui/match_type_on_diag_item.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0b5663d30457d1a9ec4f98eb9baff7123b77172/tests%2Fui%2Fmatch_type_on_diag_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0b5663d30457d1a9ec4f98eb9baff7123b77172/tests%2Fui%2Fmatch_type_on_diag_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_type_on_diag_item.stderr?ref=d0b5663d30457d1a9ec4f98eb9baff7123b77172", "patch": "@@ -1,4 +1,4 @@\n-error: usage of `utils::match_type() on a type diagnostic item`\n+error: usage of `utils::match_type()` on a type diagnostic item\n   --> $DIR/match_type_on_diag_item.rs:41:17\n    |\n LL |         let _ = match_type(cx, ty, &paths::VEC);\n@@ -11,19 +11,19 @@ LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::match_type_on_diagnostic_item)]` implied by `#[deny(clippy::internal)]`\n \n-error: usage of `utils::match_type() on a type diagnostic item`\n+error: usage of `utils::match_type()` on a type diagnostic item\n   --> $DIR/match_type_on_diag_item.rs:42:17\n    |\n LL |         let _ = match_type(cx, ty, &OPTION);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `utils::is_type_diagnostic_item(cx, ty, sym!(option_type))`\n \n-error: usage of `utils::match_type() on a type diagnostic item`\n+error: usage of `utils::match_type()` on a type diagnostic item\n   --> $DIR/match_type_on_diag_item.rs:43:17\n    |\n LL |         let _ = match_type(cx, ty, &[\"core\", \"result\", \"Result\"]);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `utils::is_type_diagnostic_item(cx, ty, sym!(result_type))`\n \n-error: usage of `utils::match_type() on a type diagnostic item`\n+error: usage of `utils::match_type()` on a type diagnostic item\n   --> $DIR/match_type_on_diag_item.rs:46:17\n    |\n LL |         let _ = utils::match_type(cx, ty, rc_path);"}]}