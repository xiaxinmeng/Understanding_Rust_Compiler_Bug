{"sha": "d490c34086cbb91f5258f72a6a98e813bc2c9ce1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OTBjMzQwODZjYmI5MWY1MjU4ZjcyYTZhOThlODEzYmMyYzljZTE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-20T23:11:41Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-20T23:11:56Z"}, "message": "Don't ICE in subslice pattern const-eval", "tree": {"sha": "5b068ad56797e7019f450ddb871d877e962d6864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b068ad56797e7019f450ddb871d877e962d6864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d490c34086cbb91f5258f72a6a98e813bc2c9ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d490c34086cbb91f5258f72a6a98e813bc2c9ce1", "html_url": "https://github.com/rust-lang/rust/commit/d490c34086cbb91f5258f72a6a98e813bc2c9ce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d490c34086cbb91f5258f72a6a98e813bc2c9ce1/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12307b3b08edee543a78fb9d4a837fbd6d6ac0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/12307b3b08edee543a78fb9d4a837fbd6d6ac0fa", "html_url": "https://github.com/rust-lang/rust/commit/12307b3b08edee543a78fb9d4a837fbd6d6ac0fa"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "93ab7b9aab7fbf5925b3a404570f056eacdad991", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d490c34086cbb91f5258f72a6a98e813bc2c9ce1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d490c34086cbb91f5258f72a6a98e813bc2c9ce1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=d490c34086cbb91f5258f72a6a98e813bc2c9ce1", "patch": "@@ -444,13 +444,27 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Field(field, _) => self.operand_field(base, field.index() as u64)?,\n             Downcast(_, variant) => self.operand_downcast(base, variant)?,\n             Deref => self.deref_operand(base)?.into(),\n-            Subslice { .. } | ConstantIndex { .. } | Index(_) => if base.layout.is_zst() {\n+            ConstantIndex { .. } | Index(_) if base.layout.is_zst() => {\n                 OpTy {\n                     op: Operand::Immediate(Scalar::zst().into()),\n                     // the actual index doesn't matter, so we just pick a convenient one like 0\n                     layout: base.layout.field(self, 0)?,\n                 }\n-            } else {\n+            }\n+            Subslice { from, to, from_end } if base.layout.is_zst() => {\n+                let elem_ty = if let ty::Array(elem_ty, _) = base.layout.ty.kind {\n+                    elem_ty\n+                } else {\n+                    bug!(\"slices shouldn't be zero-sized\");\n+                };\n+                assert!(!from_end, \"arrays shouldn't be subsliced from the end\");\n+\n+                OpTy {\n+                    op: Operand::Immediate(Scalar::zst().into()),\n+                    layout: self.layout_of(self.tcx.mk_array(elem_ty, (to - from) as u64))?,\n+                }\n+            }\n+            Subslice { .. } | ConstantIndex { .. }  | Index(_) => {\n                 // The rest should only occur as mplace, we do not use Immediates for types\n                 // allowing such operations.  This matches place_projection forcing an allocation.\n                 let mplace = base.assert_mem_place();"}, {"sha": "8923b167fdee8aa8cdf8244ec576eb6c7fe7d24f", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d490c34086cbb91f5258f72a6a98e813bc2c9ce1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d490c34086cbb91f5258f72a6a98e813bc2c9ce1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=d490c34086cbb91f5258f72a6a98e813bc2c9ce1", "patch": "@@ -455,7 +455,10 @@ where\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let len = base.len(self)?; // also asserts that we have a type where this makes sense\n         let actual_to = if from_end {\n-            assert!(from <= len - to);\n+            if from + to > len {\n+                // This can only be reached in ConstProp and non-rustc-MIR.\n+                throw_ub!(BoundsCheckFailed { len: len as u64, index: from as u64 + to as u64 });\n+            }\n             len - to\n         } else {\n             to\n@@ -523,7 +526,11 @@ where\n                 from_end,\n             } => {\n                 let n = base.len(self)?;\n-                assert!(n >= min_length as u64);\n+                if n < min_length as u64 {\n+                    // This can only be reached in ConstProp and non-rustc-MIR.\n+                    throw_ub!(BoundsCheckFailed { len: min_length as u64, index: n as u64 });\n+                }\n+                assert!(offset < min_length);\n \n                 let index = if from_end {\n                     n - u64::from(offset)"}]}