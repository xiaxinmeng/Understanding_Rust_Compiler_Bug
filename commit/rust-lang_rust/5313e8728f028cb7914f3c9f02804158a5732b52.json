{"sha": "5313e8728f028cb7914f3c9f02804158a5732b52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMTNlODcyOGYwMjhjYjc5MTRmM2M5ZjAyODA0MTU4YTU3MzJiNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-17T19:32:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-17T19:32:25Z"}, "message": "Auto merge of #47408 - eddyb:deref-danger, r=nikomatsakis\n\nDon't promote to 'static the result of dereferences.\n\nThis is a **breaking change**, removing copies out of dereferences from rvalue-to-`'static` promotion.\n\nWith miri we won't easily know whether the dereference itself would see the same value at runtime as miri (e.g. after mutating a `static`) or even if it can be interpreted (e.g. integer pointers).\nOne alternative to this ban is defining at least *some* of those situations as UB, i.e. you shouldn't have a reference in the first place, and you should work through raw pointers instead, to avoid promotion.\n\n**EDIT**: The other *may seem* to be to add some analysis which whitelists references-to-constant-values and assume any values produced by arbitrary computation to not be safe to promote dereferences thereof - but that means producing a reference from an associated constant or `const fn` would necessarily obscure it, and in the former case, this could still impact code that runs on stable today. What we do today to track \"references to statics\" only works because we restrict taking a reference to a `static` at all to other `static`s (which, again, are currently limited in that they can't be read at compile-time) and to runtime-only `fn`s (*not* `const fn`s).\n\nI'm primarily opening this PR with a conservative first approximation (e.g. `&(*r).a` is not allowed, only reborrows are, and in the old borrow only implicit ones from adjustments, at that) for cratering.\n\nr? @nikomatsakis", "tree": {"sha": "51870e1177c943cd3011fd0a8e3c26dc34067156", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51870e1177c943cd3011fd0a8e3c26dc34067156"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5313e8728f028cb7914f3c9f02804158a5732b52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5313e8728f028cb7914f3c9f02804158a5732b52", "html_url": "https://github.com/rust-lang/rust/commit/5313e8728f028cb7914f3c9f02804158a5732b52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5313e8728f028cb7914f3c9f02804158a5732b52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6216b2d556afba2fdab906409582cb5471eafe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6216b2d556afba2fdab906409582cb5471eafe0", "html_url": "https://github.com/rust-lang/rust/commit/f6216b2d556afba2fdab906409582cb5471eafe0"}, {"sha": "121499a11990b9e8d7359f7f51a7bafb1a266002", "url": "https://api.github.com/repos/rust-lang/rust/commits/121499a11990b9e8d7359f7f51a7bafb1a266002", "html_url": "https://github.com/rust-lang/rust/commit/121499a11990b9e8d7359f7f51a7bafb1a266002"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "a8a7831c823f87ac6decfa5c65ecb005dbaba68b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5313e8728f028cb7914f3c9f02804158a5732b52/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5313e8728f028cb7914f3c9f02804158a5732b52/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=5313e8728f028cb7914f3c9f02804158a5732b52", "patch": "@@ -526,9 +526,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 this.add(Qualif::STATIC);\n                             }\n \n+                            this.add(Qualif::NOT_CONST);\n+\n                             let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n                             if let ty::TyRawPtr(_) = base_ty.sty {\n-                                this.add(Qualif::NOT_CONST);\n                                 if this.mode != Mode::Fn {\n                                     let mut err = struct_span_err!(\n                                         this.tcx.sess,\n@@ -617,7 +618,38 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n         // Recurse through operands and places.\n-        self.super_rvalue(rvalue, location);\n+        if let Rvalue::Ref(region, kind, ref place) = *rvalue {\n+            let mut is_reborrow = false;\n+            if let Place::Projection(ref proj) = *place {\n+                if let ProjectionElem::Deref = proj.elem {\n+                    let base_ty = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx);\n+                    if let ty::TyRef(..) = base_ty.sty {\n+                        is_reborrow = true;\n+                    }\n+                }\n+            }\n+\n+            if is_reborrow {\n+                self.nest(|this| {\n+                    this.super_place(place, PlaceContext::Borrow {\n+                        region,\n+                        kind\n+                    }, location);\n+                    if !this.try_consume() {\n+                        return;\n+                    }\n+\n+                    if this.qualif.intersects(Qualif::STATIC_REF) {\n+                        this.qualif = this.qualif - Qualif::STATIC_REF;\n+                        this.add(Qualif::STATIC);\n+                    }\n+                });\n+            } else {\n+                self.super_rvalue(rvalue, location);\n+            }\n+        } else {\n+            self.super_rvalue(rvalue, location);\n+        }\n \n         match *rvalue {\n             Rvalue::Use(_) |"}, {"sha": "60637bb61823f9167f4489d8bad4c7c2af65f7d5", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5313e8728f028cb7914f3c9f02804158a5732b52/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5313e8728f028cb7914f3c9f02804158a5732b52/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=5313e8728f028cb7914f3c9f02804158a5732b52", "patch": "@@ -362,14 +362,9 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         hir::ExprBox(_) => {\n             v.promotable = false;\n         }\n-        hir::ExprUnary(op, ref inner) => {\n-            match v.tables.node_id_to_type(inner.hir_id).sty {\n-                ty::TyRawPtr(_) => {\n-                    assert!(op == hir::UnDeref);\n-\n-                    v.promotable = false;\n-                }\n-                _ => {}\n+        hir::ExprUnary(op, _) => {\n+            if op == hir::UnDeref {\n+                v.promotable = false;\n             }\n         }\n         hir::ExprBinary(op, ref lhs, _) => {\n@@ -558,7 +553,8 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr) {\n     use rustc::ty::adjustment::*;\n \n-    for adjustment in v.tables.expr_adjustments(e) {\n+    let mut adjustments = v.tables.expr_adjustments(e).iter().peekable();\n+    while let Some(adjustment) = adjustments.next() {\n         match adjustment.kind {\n             Adjust::NeverToAny |\n             Adjust::ReifyFnPointer |\n@@ -568,11 +564,14 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n             Adjust::Borrow(_) |\n             Adjust::Unsize => {}\n \n-            Adjust::Deref(ref overloaded) => {\n-                if overloaded.is_some() {\n-                    v.promotable = false;\n-                    break;\n+            Adjust::Deref(_) => {\n+                if let Some(next_adjustment) = adjustments.peek() {\n+                    if let Adjust::Borrow(_) = next_adjustment.kind {\n+                        continue;\n+                    }\n                 }\n+                v.promotable = false;\n+                break;\n             }\n         }\n     }"}]}