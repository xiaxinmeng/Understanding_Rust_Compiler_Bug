{"sha": "681819c8ad2a33923a33fc6829cfd588eb1f721f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MTgxOWM4YWQyYTMzOTIzYTMzZmM2ODI5Y2ZkNTg4ZWIxZjcyMWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-09T08:38:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-19T07:26:08Z"}, "message": "getting a path should never fail\n\nwe basically treat them as lang items", "tree": {"sha": "0f45271c2245bb22efa036756f9ccab66a6bf808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f45271c2245bb22efa036756f9ccab66a6bf808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681819c8ad2a33923a33fc6829cfd588eb1f721f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681819c8ad2a33923a33fc6829cfd588eb1f721f", "html_url": "https://github.com/rust-lang/rust/commit/681819c8ad2a33923a33fc6829cfd588eb1f721f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681819c8ad2a33923a33fc6829cfd588eb1f721f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77cc0cddd9b0d90b2f7b68c6cb62d1eec33c9427", "url": "https://api.github.com/repos/rust-lang/rust/commits/77cc0cddd9b0d90b2f7b68c6cb62d1eec33c9427", "html_url": "https://github.com/rust-lang/rust/commit/77cc0cddd9b0d90b2f7b68c6cb62d1eec33c9427"}], "stats": {"total": 134, "additions": 60, "deletions": 74}, "files": [{"sha": "169bb4205649eb348ba6a06d18c65ec7841acc83", "filename": "src/helpers.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=681819c8ad2a33923a33fc6829cfd588eb1f721f", "patch": "@@ -18,7 +18,7 @@ use crate::*;\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n \n /// Gets an instance for a path.\n-fn resolve_did<'mir, 'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> InterpResult<'tcx, DefId> {\n+fn try_resolve_did<'mir, 'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n     tcx.crates()\n         .iter()\n         .find(|&&krate| tcx.original_crate_name(krate).as_str() == path[0])\n@@ -41,18 +41,47 @@ fn resolve_did<'mir, 'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> InterpResult<'tc\n             }\n             None\n         })\n-        .ok_or_else(|| {\n-            err_unsup_format!(\"failed to find required Rust item: {:?}\", path).into()\n-        })\n }\n \n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Gets an instance for a path.\n-    fn resolve_path(&self, path: &[&str]) -> InterpResult<'tcx, ty::Instance<'tcx>> {\n-        Ok(ty::Instance::mono(\n-            self.eval_context_ref().tcx.tcx,\n-            resolve_did(self.eval_context_ref().tcx.tcx, path)?,\n-        ))\n+    fn resolve_path(&self, path: &[&str]) -> ty::Instance<'tcx> {\n+        let did = try_resolve_did(self.eval_context_ref().tcx.tcx, path)\n+            .unwrap_or_else(|| panic!(\"failed to find required Rust item: {:?}\", path));\n+        ty::Instance::mono(self.eval_context_ref().tcx.tcx, did)\n+    }\n+\n+    /// Evaluates the scalar at the specified path. Returns Some(val)\n+    /// if the path could be resolved, and None otherwise\n+    fn eval_path_scalar(\n+        &mut self,\n+        path: &[&str],\n+    ) -> InterpResult<'tcx, ScalarMaybeUndef<Tag>> {\n+        let this = self.eval_context_mut();\n+        let instance = this.resolve_path(path);\n+        let cid = GlobalId { instance, promoted: None };\n+        let const_val = this.const_eval_raw(cid)?;\n+        let const_val = this.read_scalar(const_val.into())?;\n+        return Ok(const_val);\n+    }\n+\n+    /// Helper function to get a `libc` constant as a `Scalar`.\n+    fn eval_libc(&mut self, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n+        self.eval_context_mut()\n+            .eval_path_scalar(&[\"libc\", name])?\n+            .not_undef()\n+    }\n+\n+    /// Helper function to get a `libc` constant as an `i32`.\n+    fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n+        self.eval_libc(name)?.to_i32()\n+    }\n+\n+    /// Helper function to get the `TyLayout` of a `libc` type\n+    fn libc_ty_layout(&mut self, name: &str) -> InterpResult<'tcx, TyLayout<'tcx>> {\n+        let this = self.eval_context_mut();\n+        let ty = this.resolve_path(&[\"libc\", name]).monomorphic_ty(*this.tcx);\n+        this.layout_of(ty)\n     }\n \n     /// Write a 0 of the appropriate size to `dest`.\n@@ -97,7 +126,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if this.machine.communicate {\n             // Fill the buffer using the host's rng.\n             getrandom::getrandom(&mut data)\n-                .map_err(|err| err_unsup_format!(\"getrandom failed: {}\", err))?;\n+                .map_err(|err| err_unsup_format!(\"host getrandom failed: {}\", err))?;\n         } else {\n             let rng = this.memory.extra.rng.get_mut();\n             rng.fill_bytes(&mut data);\n@@ -312,26 +341,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n-    /// Helper function to get a `libc` constant as a `Scalar`.\n-    fn eval_libc(&mut self, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n-        self.eval_context_mut()\n-            .eval_path_scalar(&[\"libc\", name])?\n-            .ok_or_else(|| err_unsup_format!(\"Path libc::{} cannot be resolved.\", name))?\n-            .not_undef()\n-    }\n-\n-    /// Helper function to get a `libc` constant as an `i32`.\n-    fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n-        self.eval_libc(name)?.to_i32()\n-    }\n-\n-    /// Helper function to get the `TyLayout` of a `libc` type\n-    fn libc_ty_layout(&mut self, name: &str) -> InterpResult<'tcx, TyLayout<'tcx>> {\n-        let this = self.eval_context_mut();\n-        let ty = this.resolve_path(&[\"libc\", name])?.monomorphic_ty(*this.tcx);\n-        this.layout_of(ty)\n-    }\n-\n     // Writes several `ImmTy`s contiguosly into memory. This is useful when you have to pack\n     // different values into a struct.\n     fn write_packed_immediates(\n@@ -530,7 +539,7 @@ pub fn immty_from_int_checked<'tcx>(\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n     Ok(ImmTy::try_from_int(int, layout).ok_or_else(|| {\n-        err_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, layout.size.bits())\n+        err_unsup_format!(\"signed value {:#x} does not fit in {} bits\", int, layout.size.bits())\n     })?)\n }\n \n@@ -540,6 +549,6 @@ pub fn immty_from_uint_checked<'tcx>(\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n     Ok(ImmTy::try_from_uint(int, layout).ok_or_else(|| {\n-        err_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, layout.size.bits())\n+        err_unsup_format!(\"unsigned value {:#x} does not fit in {} bits\", int, layout.size.bits())\n     })?)\n }"}, {"sha": "fab90e3cc5291a5a0a8323813f68004b956b755c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=681819c8ad2a33923a33fc6829cfd588eb1f721f", "patch": "@@ -165,7 +165,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .expect(\"No panic runtime found!\");\n                 let panic_runtime = tcx.crate_name(*panic_runtime);\n                 let start_panic_instance =\n-                    this.resolve_path(&[&*panic_runtime.as_str(), link_name])?;\n+                    this.resolve_path(&[&*panic_runtime.as_str(), link_name]);\n                 return Ok(Some(&*this.load_mir(start_panic_instance.def, None)?));\n             }\n             _ => {}\n@@ -454,20 +454,4 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n-\n-    /// Evaluates the scalar at the specified path. Returns Some(val)\n-    /// if the path could be resolved, and None otherwise\n-    fn eval_path_scalar(\n-        &mut self,\n-        path: &[&str],\n-    ) -> InterpResult<'tcx, Option<ScalarMaybeUndef<Tag>>> {\n-        let this = self.eval_context_mut();\n-        if let Ok(instance) = this.resolve_path(path) {\n-            let cid = GlobalId { instance, promoted: None };\n-            let const_val = this.const_eval_raw(cid)?;\n-            let const_val = this.read_scalar(const_val.into())?;\n-            return Ok(Some(const_val));\n-        }\n-        return Ok(None);\n-    }\n }"}, {"sha": "85e9b88b6ec03db7b96c8127a578daa6c604df67", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=681819c8ad2a33923a33fc6829cfd588eb1f721f", "patch": "@@ -289,22 +289,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 trace!(\"sysconf() called with name {}\", name);\n                 // TODO: Cache the sysconf integers via Miri's global cache.\n-                let paths = &[\n-                    (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(PAGE_SIZE, dest.layout.size)),\n-                    (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], Scalar::from_int(-1, dest.layout.size)),\n-                    (\n-                        &[\"libc\", \"_SC_NPROCESSORS_ONLN\"],\n-                        Scalar::from_int(NUM_CPUS, dest.layout.size),\n-                    ),\n+                let sysconfs = &[\n+                    (\"_SC_PAGESIZE\", Scalar::from_int(PAGE_SIZE, dest.layout.size)),\n+                    (\"_SC_GETPW_R_SIZE_MAX\", Scalar::from_int(-1, dest.layout.size)),\n+                    (\"_SC_NPROCESSORS_ONLN\", Scalar::from_int(NUM_CPUS, dest.layout.size)),\n                 ];\n                 let mut result = None;\n-                for &(path, path_value) in paths {\n-                    if let Some(val) = this.eval_path_scalar(path)? {\n-                        let val = val.to_i32()?;\n-                        if val == name {\n-                            result = Some(path_value);\n-                            break;\n-                        }\n+                for &(sysconf_name, value) in sysconfs {\n+                    let sysconf_name = this.eval_libc_i32(sysconf_name)?;\n+                    if sysconf_name == name {\n+                        result = Some(value);\n+                        break;\n                     }\n                 }\n                 if let Some(result) = result {"}, {"sha": "82928c9bc17ff045011a2cf7949579727ffbb429", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=681819c8ad2a33923a33fc6829cfd588eb1f721f", "patch": "@@ -56,13 +56,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             \"syscall\" => {\n                 let sys_getrandom = this\n-                    .eval_path_scalar(&[\"libc\", \"SYS_getrandom\"])?\n-                    .expect(\"Failed to get libc::SYS_getrandom\")\n+                    .eval_libc(\"SYS_getrandom\")?\n                     .to_machine_usize(this)?;\n \n                 let sys_statx = this\n-                    .eval_path_scalar(&[\"libc\", \"SYS_statx\"])?\n-                    .expect(\"Failed to get libc::SYS_statx\")\n+                    .eval_libc(\"SYS_statx\")?\n                     .to_machine_usize(this)?;\n \n                 match this.read_scalar(args[0])?.to_machine_usize(this)? {"}, {"sha": "cb429109a4a50b4c94c679f9eb5c65e5767d7b96", "filename": "src/shims/fs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=681819c8ad2a33923a33fc6829cfd588eb1f721f", "patch": "@@ -643,7 +643,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // FIXME: This long path is required because `libc::statx` is an struct and also a\n             // function and `resolve_path` is returning the latter.\n             let statx_ty = this\n-                .resolve_path(&[\"libc\", \"unix\", \"linux_like\", \"linux\", \"gnu\", \"statx\"])?\n+                .resolve_path(&[\"libc\", \"unix\", \"linux_like\", \"linux\", \"gnu\", \"statx\"])\n                 .monomorphic_ty(*this.tcx);\n             let statxbuf_ty = this.tcx.mk_mut_ptr(statx_ty);\n             let statxbuf_layout = this.layout_of(statxbuf_ty)?;\n@@ -655,13 +655,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // `flags` should be a `c_int` but the `syscall` function provides an `isize`.\n         let flags: i32 =\n             this.read_scalar(flags_op)?.to_machine_isize(&*this.tcx)?.try_into().map_err(|e| {\n-                err_unsup_format!(\"Failed to convert pointer sized operand to integer: {}\", e)\n+                err_unsup_format!(\"failed to convert pointer sized operand to integer: {}\", e)\n             })?;\n         let empty_path_flag = flags & this.eval_libc(\"AT_EMPTY_PATH\")?.to_i32()? != 0;\n         // `dirfd` should be a `c_int` but the `syscall` function provides an `isize`.\n         let dirfd: i32 =\n             this.read_scalar(dirfd_op)?.to_machine_isize(&*this.tcx)?.try_into().map_err(|e| {\n-                err_unsup_format!(\"Failed to convert pointer sized operand to integer: {}\", e)\n+                err_unsup_format!(\"failed to convert pointer sized operand to integer: {}\", e)\n             })?;\n         // We only support:\n         // * interpreting `path` as an absolute directory,\n@@ -676,7 +676,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             (path.as_os_str().is_empty() && empty_path_flag)\n         ) {\n             throw_unsup_format!(\n-                \"Using statx is only supported with absolute paths, relative paths with the file \\\n+                \"using statx is only supported with absolute paths, relative paths with the file \\\n                 descriptor `AT_FDCWD`, and empty paths with the `AT_EMPTY_PATH` flag set and any \\\n                 file descriptor\"\n             )\n@@ -886,7 +886,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n         let dir_iter = this.machine.dir_handler.streams.get_mut(&dirp).ok_or_else(|| {\n-            err_unsup_format!(\"The DIR pointer passed to readdir64_r did not come from opendir\")\n+            err_unsup_format!(\"the DIR pointer passed to readdir64_r did not come from opendir\")\n         })?;\n         match dir_iter.next() {\n             Some(Ok(dir_entry)) => {\n@@ -973,7 +973,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n         let dir_iter = this.machine.dir_handler.streams.get_mut(&dirp).ok_or_else(|| {\n-            err_unsup_format!(\"The DIR pointer passed to readdir_r did not come from opendir\")\n+            err_unsup_format!(\"the DIR pointer passed to readdir_r did not come from opendir\")\n         })?;\n         match dir_iter.next() {\n             Some(Ok(dir_entry)) => {"}, {"sha": "627478eaaab70d871243f9d2b7203dfd5686c379", "filename": "src/shims/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681819c8ad2a33923a33fc6829cfd588eb1f721f/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=681819c8ad2a33923a33fc6829cfd588eb1f721f", "patch": "@@ -12,7 +12,7 @@ fn get_time<'tcx>() -> InterpResult<'tcx, Duration> {\n /// Returns the time elapsed between the provided time and the unix epoch as a `Duration`.\n pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Duration> {\n     time.duration_since(SystemTime::UNIX_EPOCH)\n-        .map_err(|_| err_unsup_format!(\"Times before the Unix epoch are not supported\").into())\n+        .map_err(|_| err_unsup_format!(\"times before the Unix epoch are not supported\").into())\n }\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}"}]}