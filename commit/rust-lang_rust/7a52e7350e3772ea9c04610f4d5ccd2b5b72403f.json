{"sha": "7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "node_id": "C_kwDOAAsO6NoAKDdhNTJlNzM1MGUzNzcyZWE5YzA0NjEwZjRkNWNjZDJiNWI3MjQwM2Y", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-06T23:11:06Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:21Z"}, "message": "Add tests for Stacked Borrows behavior", "tree": {"sha": "b350590f308efd884025f6fed2541846eb541c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b350590f308efd884025f6fed2541846eb541c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "html_url": "https://github.com/rust-lang/rust/commit/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "html_url": "https://github.com/rust-lang/rust/commit/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "6a9de6af8c59b6ba9d8c29f64120feaf42ec115c", "filename": "src/test/mir-opt/dataflow-const-prop/ref_with_sb.main.DataflowConstProp.diff", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.main.DataflowConstProp.diff?ref=7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "patch": "@@ -0,0 +1,46 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_with_sb.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/ref_with_sb.rs:+1:9: +1:14\n+      let _2: ();                          // in scope 0 at $DIR/ref_with_sb.rs:+2:5: +2:15\n+      let mut _3: &i32;                    // in scope 0 at $DIR/ref_with_sb.rs:+2:12: +2:14\n+      let _4: &i32;                        // in scope 0 at $DIR/ref_with_sb.rs:+2:12: +2:14\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/ref_with_sb.rs:+1:9: +1:14\n+          let _5: i32;                     // in scope 1 at $DIR/ref_with_sb.rs:+6:9: +6:10\n+          scope 2 {\n+              debug b => _5;               // in scope 2 at $DIR/ref_with_sb.rs:+6:9: +6:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_with_sb.rs:+1:9: +1:14\n+          _1 = const 0_i32;                // scope 0 at $DIR/ref_with_sb.rs:+1:17: +1:18\n+          StorageLive(_2);                 // scope 1 at $DIR/ref_with_sb.rs:+2:5: +2:15\n+          StorageLive(_3);                 // scope 1 at $DIR/ref_with_sb.rs:+2:12: +2:14\n+          StorageLive(_4);                 // scope 1 at $DIR/ref_with_sb.rs:+2:12: +2:14\n+          _4 = &_1;                        // scope 1 at $DIR/ref_with_sb.rs:+2:12: +2:14\n+          _3 = &(*_4);                     // scope 1 at $DIR/ref_with_sb.rs:+2:12: +2:14\n+          _2 = escape::<i32>(move _3) -> bb1; // scope 1 at $DIR/ref_with_sb.rs:+2:5: +2:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_with_sb.rs:10:5: 10:11\n+                                           // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/ref_with_sb.rs:+2:14: +2:15\n+          StorageDead(_4);                 // scope 1 at $DIR/ref_with_sb.rs:+2:15: +2:16\n+          StorageDead(_2);                 // scope 1 at $DIR/ref_with_sb.rs:+2:15: +2:16\n+          _1 = const 1_i32;                // scope 1 at $DIR/ref_with_sb.rs:+3:5: +3:10\n+          StorageLive(_5);                 // scope 1 at $DIR/ref_with_sb.rs:+6:9: +6:10\n+-         _5 = _1;                         // scope 1 at $DIR/ref_with_sb.rs:+6:13: +6:14\n++         _5 = const 1_i32;                // scope 1 at $DIR/ref_with_sb.rs:+6:13: +6:14\n+          _0 = const ();                   // scope 0 at $DIR/ref_with_sb.rs:+0:11: +7:2\n+          StorageDead(_5);                 // scope 1 at $DIR/ref_with_sb.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_with_sb.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/ref_with_sb.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "05f18dab4cd629edd4526292777bb572b1ac2577", "filename": "src/test/mir-opt/dataflow-const-prop/ref_with_sb.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.rs?ref=7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "patch": "@@ -0,0 +1,15 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n+\n+#[inline(never)]\n+fn escape<T>(x: &T) {}\n+\n+// EMIT_MIR ref_with_sb.main.DataflowConstProp.diff\n+fn main() {\n+    let mut a = 0;\n+    escape(&a);\n+    a = 1;\n+    // With `-Zunsound-mir-opt`, this should be propagated\n+    // (because we assume Stacked Borrows).\n+    let b = a;\n+}"}, {"sha": "66b05cdb7c107c010b1b91731e81bf0a6cc29362", "filename": "src/test/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff?ref=7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_without_sb.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/ref_without_sb.rs:+1:9: +1:14\n+      let _2: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+2:5: +2:15\n+      let mut _3: &i32;                    // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+      let _4: &i32;                        // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/ref_without_sb.rs:+1:9: +1:14\n+          let _5: i32;                     // in scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          scope 2 {\n+              debug b => _5;               // in scope 2 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+1:9: +1:14\n+          _1 = const 0_i32;                // scope 0 at $DIR/ref_without_sb.rs:+1:17: +1:18\n+          StorageLive(_2);                 // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n+          StorageLive(_3);                 // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+          StorageLive(_4);                 // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+          _4 = &_1;                        // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+          _3 = &(*_4);                     // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+          _2 = escape::<i32>(move _3) -> bb1; // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_without_sb.rs:9:5: 9:11\n+                                           // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/ref_without_sb.rs:+2:14: +2:15\n+          StorageDead(_4);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n+          StorageDead(_2);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n+          _1 = const 1_i32;                // scope 1 at $DIR/ref_without_sb.rs:+3:5: +3:10\n+          StorageLive(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          _5 = _1;                         // scope 1 at $DIR/ref_without_sb.rs:+6:13: +6:14\n+          _0 = const ();                   // scope 0 at $DIR/ref_without_sb.rs:+0:11: +7:2\n+          StorageDead(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/ref_without_sb.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "4ef027a9b4d4f8cfa651a0a7adb54f428105d97e", "filename": "src/test/mir-opt/dataflow-const-prop/ref_without_sb.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a52e7350e3772ea9c04610f4d5ccd2b5b72403f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs?ref=7a52e7350e3772ea9c04610f4d5ccd2b5b72403f", "patch": "@@ -0,0 +1,14 @@\n+// unit-test: DataflowConstProp\n+\n+#[inline(never)]\n+fn escape<T>(x: &T) {}\n+\n+// EMIT_MIR ref_without_sb.main.DataflowConstProp.diff\n+fn main() {\n+    let mut a = 0;\n+    escape(&a);\n+    a = 1;\n+    // Without `-Zunsound-mir-opt`, this should not be propagated\n+    // (because we do not assume Stacked Borrows).\n+    let b = a;\n+}"}]}