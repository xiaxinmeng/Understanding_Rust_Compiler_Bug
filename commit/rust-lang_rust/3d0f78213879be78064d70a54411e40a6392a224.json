{"sha": "3d0f78213879be78064d70a54411e40a6392a224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMGY3ODIxMzg3OWJlNzgwNjRkNzBhNTQ0MTFlNDBhNjM5MmEyMjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T21:26:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T22:27:57Z"}, "message": "Prep dynamic workspace loading", "tree": {"sha": "19130beea8e22b8f5e6e19eb7705d6c97e615384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19130beea8e22b8f5e6e19eb7705d6c97e615384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d0f78213879be78064d70a54411e40a6392a224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0f78213879be78064d70a54411e40a6392a224", "html_url": "https://github.com/rust-lang/rust/commit/3d0f78213879be78064d70a54411e40a6392a224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d0f78213879be78064d70a54411e40a6392a224/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d73077febba921918b5611574bf514eae63006", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d73077febba921918b5611574bf514eae63006", "html_url": "https://github.com/rust-lang/rust/commit/73d73077febba921918b5611574bf514eae63006"}], "stats": {"total": 175, "additions": 79, "deletions": 96}, "files": [{"sha": "ca4a248f1173739596152fa0f04a1de94351c59a", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 68, "deletions": 12, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3d0f78213879be78064d70a54411e40a6392a224/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0f78213879be78064d70a54411e40a6392a224/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=3d0f78213879be78064d70a54411e40a6392a224", "patch": "@@ -7,16 +7,16 @@ use std::{convert::TryFrom, sync::Arc};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::{FlycheckConfig, FlycheckHandle};\n-use lsp_types::Url;\n+use lsp_types::{request::Request, Url};\n use parking_lot::RwLock;\n use ra_db::{CrateId, SourceRoot, VfsPath};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId};\n-use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n+use ra_project_model::{CargoWorkspace, PackageRoot, ProcMacroClient, ProjectWorkspace, Target};\n use stdx::format_to;\n use vfs::{file_set::FileSetConfig, loader::Handle, AbsPath, AbsPathBuf};\n \n use crate::{\n-    config::{Config, FilesWatcher},\n+    config::{Config, FilesWatcher, LinkedProject},\n     diagnostics::{CheckFixes, DiagnosticCollection},\n     from_proto,\n     line_endings::LineEndings,\n@@ -98,10 +98,8 @@ pub(crate) struct GlobalStateSnapshot {\n impl GlobalState {\n     pub(crate) fn new(\n         sender: Sender<lsp_server::Message>,\n-        workspaces: Vec<ProjectWorkspace>,\n         lru_capacity: Option<usize>,\n         config: Config,\n-        req_queue: ReqQueue,\n     ) -> GlobalState {\n         let (task_sender, task_receiver) = unbounded::<vfs::loader::Message>();\n \n@@ -117,7 +115,7 @@ impl GlobalState {\n             (TaskPool::new(sender), receiver)\n         };\n \n-        let mut res = GlobalState {\n+        GlobalState {\n             sender,\n             config,\n             task_pool,\n@@ -129,17 +127,75 @@ impl GlobalState {\n             mem_docs: FxHashSet::default(),\n             vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n             status: Status::default(),\n-            req_queue,\n+            req_queue: ReqQueue::default(),\n             latest_requests: Default::default(),\n             source_root_config: SourceRootConfig::default(),\n             proc_macro_client: ProcMacroClient::dummy(),\n             workspaces: Arc::new(Vec::new()),\n-        };\n-        res.reload(workspaces);\n-        res\n+        }\n     }\n \n-    pub(crate) fn reload(&mut self, workspaces: Vec<ProjectWorkspace>) {\n+    pub(crate) fn reload(&mut self) {\n+        let workspaces = {\n+            if self.config.linked_projects.is_empty()\n+                && self.config.notifications.cargo_toml_not_found\n+            {\n+                self.show_message(\n+                    lsp_types::MessageType::Error,\n+                    \"rust-analyzer failed to discover workspace\".to_string(),\n+                );\n+            };\n+\n+            self.config\n+                .linked_projects\n+                .iter()\n+                .filter_map(|project| match project {\n+                    LinkedProject::ProjectManifest(manifest) => {\n+                        ra_project_model::ProjectWorkspace::load(\n+                            manifest.clone(),\n+                            &self.config.cargo,\n+                            self.config.with_sysroot,\n+                        )\n+                        .map_err(|err| {\n+                            log::error!(\"failed to load workspace: {:#}\", err);\n+                            self.show_message(\n+                                lsp_types::MessageType::Error,\n+                                format!(\"rust-analyzer failed to load workspace: {:#}\", err),\n+                            );\n+                        })\n+                        .ok()\n+                    }\n+                    LinkedProject::InlineJsonProject(it) => {\n+                        Some(ra_project_model::ProjectWorkspace::Json { project: it.clone() })\n+                    }\n+                })\n+                .collect::<Vec<_>>()\n+        };\n+\n+        if let FilesWatcher::Client = self.config.files.watcher {\n+            let registration_options = lsp_types::DidChangeWatchedFilesRegistrationOptions {\n+                watchers: workspaces\n+                    .iter()\n+                    .flat_map(ProjectWorkspace::to_roots)\n+                    .filter(PackageRoot::is_member)\n+                    .map(|root| format!(\"{}/**/*.rs\", root.path().display()))\n+                    .map(|glob_pattern| lsp_types::FileSystemWatcher { glob_pattern, kind: None })\n+                    .collect(),\n+            };\n+            let registration = lsp_types::Registration {\n+                id: \"file-watcher\".to_string(),\n+                method: \"workspace/didChangeWatchedFiles\".to_string(),\n+                register_options: Some(serde_json::to_value(registration_options).unwrap()),\n+            };\n+            let params = lsp_types::RegistrationParams { registrations: vec![registration] };\n+            let request = self.req_queue.outgoing.register(\n+                lsp_types::request::RegisterCapability::METHOD.to_string(),\n+                params,\n+                |_, _| (),\n+            );\n+            self.send(request.into());\n+        }\n+\n         let mut change = AnalysisChange::new();\n \n         let project_folders = ProjectFolders::new(&workspaces);\n@@ -275,7 +331,7 @@ impl GlobalState {\n             self.send(response.into());\n         }\n     }\n-    pub(crate) fn show_message(&mut self, typ: lsp_types::MessageType, message: String) {\n+    pub(crate) fn show_message(&self, typ: lsp_types::MessageType, message: String) {\n         show_message(typ, message, &self.sender)\n     }\n }"}, {"sha": "6ac50745aec5e4735faf2f1e20dc4f9a16fb4b0e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 11, "deletions": 84, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3d0f78213879be78064d70a54411e40a6392a224/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0f78213879be78064d70a54411e40a6392a224/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=3d0f78213879be78064d70a54411e40a6392a224", "patch": "@@ -11,17 +11,14 @@ use lsp_types::{notification::Notification as _, request::Request as _};\n use ra_db::VfsPath;\n use ra_ide::{Canceled, FileId};\n use ra_prof::profile;\n-use ra_project_model::{PackageRoot, ProjectWorkspace};\n \n use crate::{\n-    config::{Config, FilesWatcher, LinkedProject},\n+    config::Config,\n     dispatch::{NotificationDispatcher, RequestDispatcher},\n     from_proto,\n     global_state::{file_id_to_url, GlobalState, Status},\n     handlers, lsp_ext,\n-    lsp_utils::{\n-        apply_document_changes, is_canceled, notification_is, notification_new, show_message,\n-    },\n+    lsp_utils::{apply_document_changes, is_canceled, notification_is, notification_new},\n     Result,\n };\n \n@@ -47,81 +44,8 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n         SetThreadPriority(thread, thread_priority_above_normal);\n     }\n \n-    let global_state = {\n-        let workspaces = {\n-            if config.linked_projects.is_empty() && config.notifications.cargo_toml_not_found {\n-                show_message(\n-                    lsp_types::MessageType::Error,\n-                    \"rust-analyzer failed to discover workspace\".to_string(),\n-                    &connection.sender,\n-                );\n-            };\n-\n-            config\n-                .linked_projects\n-                .iter()\n-                .filter_map(|project| match project {\n-                    LinkedProject::ProjectManifest(manifest) => {\n-                        ra_project_model::ProjectWorkspace::load(\n-                            manifest.clone(),\n-                            &config.cargo,\n-                            config.with_sysroot,\n-                        )\n-                        .map_err(|err| {\n-                            log::error!(\"failed to load workspace: {:#}\", err);\n-                            show_message(\n-                                lsp_types::MessageType::Error,\n-                                format!(\"rust-analyzer failed to load workspace: {:#}\", err),\n-                                &connection.sender,\n-                            );\n-                        })\n-                        .ok()\n-                    }\n-                    LinkedProject::InlineJsonProject(it) => {\n-                        Some(ra_project_model::ProjectWorkspace::Json { project: it.clone() })\n-                    }\n-                })\n-                .collect::<Vec<_>>()\n-        };\n-\n-        let mut req_queue = ReqQueue::default();\n-\n-        if let FilesWatcher::Client = config.files.watcher {\n-            let registration_options = lsp_types::DidChangeWatchedFilesRegistrationOptions {\n-                watchers: workspaces\n-                    .iter()\n-                    .flat_map(ProjectWorkspace::to_roots)\n-                    .filter(PackageRoot::is_member)\n-                    .map(|root| format!(\"{}/**/*.rs\", root.path().display()))\n-                    .map(|glob_pattern| lsp_types::FileSystemWatcher { glob_pattern, kind: None })\n-                    .collect(),\n-            };\n-            let registration = lsp_types::Registration {\n-                id: \"file-watcher\".to_string(),\n-                method: \"workspace/didChangeWatchedFiles\".to_string(),\n-                register_options: Some(serde_json::to_value(registration_options).unwrap()),\n-            };\n-            let params = lsp_types::RegistrationParams { registrations: vec![registration] };\n-            let request = req_queue.outgoing.register(\n-                lsp_types::request::RegisterCapability::METHOD.to_string(),\n-                params,\n-                DO_NOTHING,\n-            );\n-            connection.sender.send(request.into()).unwrap();\n-        }\n-\n-        GlobalState::new(\n-            connection.sender.clone(),\n-            workspaces,\n-            config.lru_capacity,\n-            config,\n-            req_queue,\n-        )\n-    };\n-\n-    log::info!(\"server initialized, serving requests\");\n-    global_state.run(connection.receiver)?;\n-    Ok(())\n+    GlobalState::new(connection.sender.clone(), config.lru_capacity, config)\n+        .run(connection.receiver)\n }\n \n enum Event {\n@@ -188,23 +112,26 @@ impl GlobalState {\n     }\n \n     fn run(mut self, inbox: Receiver<lsp_server::Message>) -> Result<()> {\n+        self.reload();\n+\n         while let Some(event) = self.next_event(&inbox) {\n             if let Event::Lsp(lsp_server::Message::Notification(not)) = &event {\n                 if not.method == lsp_types::notification::Exit::METHOD {\n                     return Ok(());\n                 }\n             }\n-            self.loop_turn(event)?\n+            self.handle_event(event)?\n         }\n+\n         Err(\"client exited without proper shutdown sequence\")?\n     }\n \n-    fn loop_turn(&mut self, event: Event) -> Result<()> {\n+    fn handle_event(&mut self, event: Event) -> Result<()> {\n         let loop_start = Instant::now();\n         // NOTE: don't count blocking select! call as a loop-turn time\n-        let _p = profile(\"main_loop_inner/loop-turn\");\n+        let _p = profile(\"GlobalState::handle_event\");\n \n-        log::info!(\"loop turn = {:?}\", event);\n+        log::info!(\"handle_event({:?})\", event);\n         let queue_count = self.task_pool.0.len();\n         if queue_count > 0 {\n             log::info!(\"queued count = {}\", queue_count);"}]}