{"sha": "9522a06fd444c670202fd64c91d1ba62e332ff70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjJhMDZmZDQ0NGM2NzAyMDJmZDY0YzkxZDFiYTYyZTMzMmZmNzA=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-07-31T02:28:33Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-07-31T02:33:42Z"}, "message": "Update test calls to 'expect'", "tree": {"sha": "2306b28787786aab1279536b07abfb7ab6059bb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2306b28787786aab1279536b07abfb7ab6059bb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9522a06fd444c670202fd64c91d1ba62e332ff70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9522a06fd444c670202fd64c91d1ba62e332ff70", "html_url": "https://github.com/rust-lang/rust/commit/9522a06fd444c670202fd64c91d1ba62e332ff70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9522a06fd444c670202fd64c91d1ba62e332ff70/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f05d7b41a719d848844b054a16477b29d0f063c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f05d7b41a719d848844b054a16477b29d0f063c6", "html_url": "https://github.com/rust-lang/rust/commit/f05d7b41a719d848844b054a16477b29d0f063c6"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "02099b05ddad195c4ba33a038465437a2fb35099", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9522a06fd444c670202fd64c91d1ba62e332ff70/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9522a06fd444c670202fd64c91d1ba62e332ff70/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=9522a06fd444c670202fd64c91d1ba62e332ff70", "patch": "@@ -1477,33 +1477,35 @@ fn foo() { let bar = Ba<|>r; }\n \n     #[test]\n     fn test_hover_path_link() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n             /// [Foo](struct.Foo.html)\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[Foo](https://docs.rs/test/*/test/struct.Foo.html)\"],\n+            expect![[\n+                \"pub struct Bar\\n```\\n___\\n\\n[Foo](https://docs.rs/test/*/test/struct.Foo.html)\"\n+            ]],\n         );\n     }\n \n     #[test]\n     fn test_hover_path_link_no_strip() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n             /// [struct Foo](struct.Foo.html)\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[struct Foo](https://docs.rs/test/*/test/struct.Foo.html)\"],\n+            expect![[\"pub struct Bar\\n```\\n___\\n\\n[struct Foo](https://docs.rs/test/*/test/struct.Foo.html)\"]],\n         );\n     }\n \n     #[test]\n     fn test_hover_intra_link() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub mod foo {\n@@ -1512,79 +1514,89 @@ fn foo() { let bar = Ba<|>r; }\n             /// [Foo](foo::Foo)\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[Foo](https://docs.rs/test/*/test/foo/struct.Foo.html)\"],\n+            expect![[\"pub struct Bar\\n```\\n___\\n\\n[Foo](https://docs.rs/test/*/test/foo/struct.Foo.html)\"]],\n         );\n     }\n \n     #[test]\n     fn test_hover_intra_link_shortlink() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n             /// [Foo]\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[Foo](https://docs.rs/test/*/test/struct.Foo.html)\"],\n+            expect![[\n+                \"pub struct Bar\\n```\\n___\\n\\n[Foo](https://docs.rs/test/*/test/struct.Foo.html)\"\n+            ]],\n         );\n     }\n \n     #[test]\n     fn test_hover_intra_link_shortlink_code() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n             /// [`Foo`]\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\"],\n+            expect![[\n+                \"pub struct Bar\\n```\\n___\\n\\n[`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\"\n+            ]],\n         );\n     }\n \n     #[test]\n     fn test_hover_intra_link_namespaced() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n             fn Foo() {}\n             /// [Foo()]\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[Foo](https://docs.rs/test/*/test/struct.Foo.html)\"],\n+            expect![[\n+                \"pub struct Bar\\n```\\n___\\n\\n[Foo](https://docs.rs/test/*/test/struct.Foo.html)\"\n+            ]],\n         );\n     }\n \n     #[test]\n     fn test_hover_intra_link_shortlink_namspaced_code() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n             /// [`struct Foo`]\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\"],\n+            expect![[\n+                \"pub struct Bar\\n```\\n___\\n\\n[`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\"\n+            ]],\n         );\n     }\n \n     #[test]\n     fn test_hover_intra_link_shortlink_namspaced_code_with_at() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n             /// [`struct@Foo`]\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\"],\n+            expect![[\n+                \"pub struct Bar\\n```\\n___\\n\\n[`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\"\n+            ]],\n         );\n     }\n \n     #[test]\n     fn test_hover_intra_link_reference() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n@@ -1593,34 +1605,36 @@ fn foo() { let bar = Ba<|>r; }\n             /// [foo]: Foo\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[my Foo](https://docs.rs/test/*/test/struct.Foo.html)\"],\n+            expect![[\n+                \"pub struct Bar\\n```\\n___\\n\\n[my Foo](https://docs.rs/test/*/test/struct.Foo.html)\"\n+            ]],\n         );\n     }\n \n     #[test]\n     fn test_hover_external_url() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n             /// [external](https://www.google.com)\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[external](https://www.google.com)\"],\n+            expect![[\"pub struct Bar\\n```\\n___\\n\\n[external](https://www.google.com)\"]],\n         );\n     }\n \n     // Check that we don't rewrite links which we can't identify\n     #[test]\n     fn test_hover_unknown_target() {\n-        check_hover_result(\n+        check(\n             r\"\n             //- /lib.rs\n             pub struct Foo;\n             /// [baz](Baz)\n             pub struct B<|>ar\n             \",\n-            &[\"pub struct Bar\\n```\\n___\\n\\n[baz](Baz)\"],\n+            expect![[\"pub struct Bar\\n```\\n___\\n\\n[baz](Baz)\"]],\n         );\n     }\n "}]}