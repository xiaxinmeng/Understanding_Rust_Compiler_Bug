{"sha": "c8dc6fcb4cd29e5fb6c509149871b869b951295d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZGM2ZmNiNGNkMjllNWZiNmM1MDkxNDk4NzFiODY5Yjk1MTI5NWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-31T01:37:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-01T02:51:29Z"}, "message": "Revert \"rt: Remove lock_held_by_current_thread\"\n\nAdds back the ability to make assertions about locks, but only under the\n--enable-debug configuration\n\nThis reverts commit b247de64583e2ab527088813ba9192824554e801.\n\nConflicts:\n\n\tsrc/rt/rust_sched_loop.cpp", "tree": {"sha": "3556f9f57afa10a2f14c4ff44042b6db174ded2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3556f9f57afa10a2f14c4ff44042b6db174ded2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8dc6fcb4cd29e5fb6c509149871b869b951295d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8dc6fcb4cd29e5fb6c509149871b869b951295d", "html_url": "https://github.com/rust-lang/rust/commit/c8dc6fcb4cd29e5fb6c509149871b869b951295d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8dc6fcb4cd29e5fb6c509149871b869b951295d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "609144f7a6adba552602feb7e50e7c4d6a815fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/609144f7a6adba552602feb7e50e7c4d6a815fae", "html_url": "https://github.com/rust-lang/rust/commit/609144f7a6adba552602feb7e50e7c4d6a815fae"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "e2d6cec94dd4d5cd7de30c307257d5f89e2b1395", "filename": "src/etc/x86.supp", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Fetc%2Fx86.supp", "raw_url": "https://github.com/rust-lang/rust/raw/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Fetc%2Fx86.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fx86.supp?ref=c8dc6fcb4cd29e5fb6c509149871b869b951295d", "patch": "@@ -389,6 +389,34 @@\n    fun:uv_loop_delete\n }\n \n+{\n+   lock_and_signal-probably-threadsafe-access-outside-of-lock\n+   Helgrind:Race\n+   fun:_ZN15lock_and_signal27lock_held_by_current_threadEv\n+   ...\n+}  \n+\n+{\n+   lock_and_signal-probably-threadsafe-access-outside-of-lock2\n+   Helgrind:Race\n+   fun:_ZN15lock_and_signal6unlockEv\n+   ...\n+}\n+\n+{\n+   lock_and_signal-probably-threadsafe-access-outside-of-lock3\n+   Helgrind:Race\n+   fun:_ZN15lock_and_signal4lockEv\n+   ...\n+}\n+\n+{\n+   lock_and_signal-probably-threadsafe-access-outside-of-lock4\n+   Helgrind:Race\n+   fun:_ZN15lock_and_signal4waitEv\n+   ...\n+}\n+\n {\n    uv-async-send-does-racy-things\n    Helgrind:Race"}, {"sha": "2dcc1fa0f06eb6c12f65c4969734713ce8eecd34", "filename": "src/rt/rust_port_selector.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Frust_port_selector.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Frust_port_selector.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.cpp?ref=c8dc6fcb4cd29e5fb6c509149871b869b951295d", "patch": "@@ -69,6 +69,8 @@ void\n rust_port_selector::msg_sent_on(rust_port *port) {\n     rust_task *task = port->task;\n \n+    port->lock.must_not_have_lock();\n+\n     // Prevent two ports from trying to wake up the task\n     // simultaneously\n     scoped_lock with(rendezvous_lock);"}, {"sha": "d494fa487cfa7b53f05e5f1ab28b3aea480256cf", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=c8dc6fcb4cd29e5fb6c509149871b869b951295d", "patch": "@@ -108,6 +108,8 @@ rust_sched_loop::number_of_live_tasks() {\n  */\n void\n rust_sched_loop::reap_dead_tasks() {\n+    lock.must_have_lock();\n+\n     if (dead_task == NULL) {\n         return;\n     }"}, {"sha": "4ab1f4680ebfed069c4d17927a329fdfe07faf51", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=c8dc6fcb4cd29e5fb6c509149871b869b951295d", "patch": "@@ -212,6 +212,7 @@ rust_task::must_fail_from_being_killed() {\n \n bool\n rust_task::must_fail_from_being_killed_unlocked() {\n+    kill_lock.must_have_lock();\n     return killed && !reentered_rust_stack;\n }\n "}, {"sha": "1d0842e6c60c2d1d737601a31220da938527e8b0", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=c8dc6fcb4cd29e5fb6c509149871b869b951295d", "patch": "@@ -10,8 +10,15 @@\n \n #include \"lock_and_signal.h\"\n \n+// FIXME: This is not a portable way of specifying an invalid pthread_t\n+#define INVALID_THREAD 0\n+\n+\n #if defined(__WIN32__)\n lock_and_signal::lock_and_signal()\n+#if defined(DEBUG_LOCKS)\n+    : _holding_thread(INVALID_THREAD)\n+#endif\n {\n     _event = CreateEvent(NULL, FALSE, FALSE, NULL);\n \n@@ -30,6 +37,9 @@ lock_and_signal::lock_and_signal()\n \n #else\n lock_and_signal::lock_and_signal()\n+#if defined(DEBUG_LOCKS)\n+    : _holding_thread(INVALID_THREAD)\n+#endif\n {\n     CHECKED(pthread_cond_init(&_cond, NULL));\n     CHECKED(pthread_mutex_init(&_mutex, NULL));\n@@ -47,14 +57,25 @@ lock_and_signal::~lock_and_signal() {\n }\n \n void lock_and_signal::lock() {\n+    must_not_have_lock();\n #if defined(__WIN32__)\n     EnterCriticalSection(&_cs);\n+#if defined(DEBUG_LOCKS)\n+    _holding_thread = GetCurrentThreadId();\n+#endif\n #else\n     CHECKED(pthread_mutex_lock(&_mutex));\n+#if defined(DEBUG_LOCKS)\n+    _holding_thread = pthread_self();\n+#endif\n #endif\n }\n \n void lock_and_signal::unlock() {\n+    must_have_lock();\n+#if defined(DEBUG_LOCKS)\n+    _holding_thread = INVALID_THREAD;\n+#endif\n #if defined(__WIN32__)\n     LeaveCriticalSection(&_cs);\n #else\n@@ -66,12 +87,24 @@ void lock_and_signal::unlock() {\n  * Wait indefinitely until condition is signaled.\n  */\n void lock_and_signal::wait() {\n+    must_have_lock();\n+#if defined(DEBUG_LOCKS)\n+    _holding_thread = INVALID_THREAD;\n+#endif\n #if defined(__WIN32__)\n     LeaveCriticalSection(&_cs);\n     WaitForSingleObject(_event, INFINITE);\n     EnterCriticalSection(&_cs);\n+    must_not_be_locked();\n+#if defined(DEBUG_LOCKS)\n+    _holding_thread = GetCurrentThreadId();\n+#endif\n #else\n     CHECKED(pthread_cond_wait(&_cond, &_mutex));\n+    must_not_be_locked();\n+#if defined(DEBUG_LOCKS)\n+    _holding_thread = pthread_self();\n+#endif\n #endif\n }\n \n@@ -86,6 +119,32 @@ void lock_and_signal::signal() {\n #endif\n }\n \n+#if defined(DEBUG_LOCKS)\n+bool lock_and_signal::lock_held_by_current_thread()\n+{\n+#if defined(__WIN32__)\n+    return _holding_thread == GetCurrentThreadId();\n+#else\n+    return pthread_equal(_holding_thread, pthread_self());\n+#endif\n+}\n+#endif\n+\n+#if defined(DEBUG_LOCKS)\n+void lock_and_signal::must_have_lock() {\n+    assert(lock_held_by_current_thread() && \"must have lock\");\n+}\n+void lock_and_signal::must_not_have_lock() {\n+    assert(!lock_held_by_current_thread() && \"must not have lock\");\n+}\n+void lock_and_signal::must_not_be_locked() {\n+}\n+#else\n+void lock_and_signal::must_have_lock() { }\n+void lock_and_signal::must_not_have_lock() { }\n+void lock_and_signal::must_not_be_locked() { }\n+#endif\n+\n scoped_lock::scoped_lock(lock_and_signal &lock)\n     : lock(lock)\n {"}, {"sha": "fae9b1c24ea3e692b95fc9df17f68cdb28da7c34", "filename": "src/rt/sync/lock_and_signal.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Fsync%2Flock_and_signal.h", "raw_url": "https://github.com/rust-lang/rust/raw/c8dc6fcb4cd29e5fb6c509149871b869b951295d/src%2Frt%2Fsync%2Flock_and_signal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.h?ref=c8dc6fcb4cd29e5fb6c509149871b869b951295d", "patch": "@@ -2,15 +2,31 @@\n #ifndef LOCK_AND_SIGNAL_H\n #define LOCK_AND_SIGNAL_H\n \n+#ifndef RUST_NDEBUG\n+#define DEBUG_LOCKS\n+#endif\n+\n class lock_and_signal {\n #if defined(__WIN32__)\n     HANDLE _event;\n     CRITICAL_SECTION _cs;\n+#if defined(DEBUG_LOCKS)\n+    DWORD _holding_thread;\n+#endif\n #else\n     pthread_cond_t _cond;\n     pthread_mutex_t _mutex;\n+#if defined(DEBUG_LOCKS)\n+    pthread_t _holding_thread;\n+#endif\n #endif\n \n+#if defined(DEBUG_LOCKS)\n+    bool lock_held_by_current_thread();\n+#endif\n+\n+    void must_not_be_locked();\n+\n public:\n     lock_and_signal();\n     virtual ~lock_and_signal();\n@@ -19,6 +35,9 @@ class lock_and_signal {\n     void unlock();\n     void wait();\n     void signal();\n+\n+    void must_have_lock();\n+    void must_not_have_lock();\n };\n \n class scoped_lock {"}]}