{"sha": "6087dc20542e9d88445604e3d8b1dd93c8fad04b", "node_id": "C_kwDOAAsO6NoAKDYwODdkYzIwNTQyZTlkODg0NDU2MDRlM2Q4YjFkZDkzYzhmYWQwNGI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-22T03:27:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-23T06:56:24Z"}, "message": "Remove the symbol from `ast::LitKind::Err`.\n\nBecause it's never used meaningfully.", "tree": {"sha": "bf4b11c6f63b31181372d6e2f79129d7e94abf22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4b11c6f63b31181372d6e2f79129d7e94abf22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6087dc20542e9d88445604e3d8b1dd93c8fad04b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6087dc20542e9d88445604e3d8b1dd93c8fad04b", "html_url": "https://github.com/rust-lang/rust/commit/6087dc20542e9d88445604e3d8b1dd93c8fad04b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6087dc20542e9d88445604e3d8b1dd93c8fad04b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb5dc6b3e740e2030710b92a1bae8f8a81b35452", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5dc6b3e740e2030710b92a1bae8f8a81b35452", "html_url": "https://github.com/rust-lang/rust/commit/fb5dc6b3e740e2030710b92a1bae8f8a81b35452"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "fb521073a428d2802bfe0fe994ecd16edce9c8e3", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -1768,7 +1768,7 @@ pub enum LitKind {\n     /// A boolean literal.\n     Bool(bool),\n     /// Placeholder for a literal that wasn't well-formed in some way.\n-    Err(Symbol),\n+    Err,\n }\n \n impl LitKind {\n@@ -1807,7 +1807,7 @@ impl LitKind {\n             | LitKind::Int(_, LitIntType::Unsuffixed)\n             | LitKind::Float(_, LitFloatType::Unsuffixed)\n             | LitKind::Bool(..)\n-            | LitKind::Err(..) => false,\n+            | LitKind::Err => false,\n         }\n     }\n }"}, {"sha": "6a02a3b56f6168bbd41fee55fa257fefdeb2aeb6", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -146,7 +146,7 @@ impl LitKind {\n \n                 LitKind::ByteStr(bytes.into())\n             }\n-            token::Err => LitKind::Err(symbol),\n+            token::Err => LitKind::Err,\n         })\n     }\n \n@@ -199,7 +199,7 @@ impl LitKind {\n                 let symbol = if value { kw::True } else { kw::False };\n                 (token::Bool, symbol, None)\n             }\n-            LitKind::Err(symbol) => (token::Err, symbol, None),\n+            LitKind::Err => unreachable!(),\n         };\n \n         token::Lit::new(kind, symbol, suffix)"}, {"sha": "8ab1daf23e86e0cc55986eb11334c86f6337cb53", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -928,7 +928,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 } else {\n                     Lit {\n                         token_lit: token::Lit::new(token::LitKind::Err, kw::Empty, None),\n-                        kind: LitKind::Err(kw::Empty),\n+                        kind: LitKind::Err,\n                         span: DUMMY_SP,\n                     }\n                 };"}, {"sha": "41f4e8c234d5adc004c8a44710e238fb89494cdd", "filename": "compiler/rustc_builtin_macros/src/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -39,7 +39,7 @@ pub fn expand_concat(\n                 ast::LitKind::Byte(..) | ast::LitKind::ByteStr(..) => {\n                     cx.span_err(e.span, \"cannot concatenate a byte string literal\");\n                 }\n-                ast::LitKind::Err(_) => {\n+                ast::LitKind::Err => {\n                     has_errors = true;\n                 }\n             },"}, {"sha": "66e86bf2182672e0453f24aa3837623ea1a43b72", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -42,7 +42,7 @@ fn invalid_type_err(cx: &mut base::ExtCtxt<'_>, expr: &P<rustc_ast::Expr>, is_ne\n         ast::LitKind::Bool(_) => {\n             cx.span_err(expr.span, \"cannot concatenate boolean literals\");\n         }\n-        ast::LitKind::Err(_) => {}\n+        ast::LitKind::Err => {}\n         ast::LitKind::Int(_, _) if !is_nested => {\n             let mut err = cx.struct_span_err(expr.span, \"cannot concatenate numeric literals\");\n             if let Ok(snippet) = cx.sess.source_map().span_to_snippet(expr.span) {"}, {"sha": "2bb522caa2d418b2e292119ed7e84a08d1909c5d", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -1227,7 +1227,7 @@ pub fn expr_to_spanned_string<'a>(\n                 );\n                 Some((err, true))\n             }\n-            ast::LitKind::Err(_) => None,\n+            ast::LitKind::Err => None,\n             _ => Some((cx.struct_span_err(l.span, err_msg), false)),\n         },\n         ast::ExprKind::Err => None,"}, {"sha": "19d420f154d5c5f893b8bd9e9527ac0139cadc03", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -144,7 +144,7 @@ pub(crate) fn lit_to_mir_constant<'tcx>(\n         }\n         (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n         (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n-        (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n+        (ast::LitKind::Err, _) => return Err(LitToConstError::Reported),\n         _ => return Err(LitToConstError::TypeError),\n     };\n "}, {"sha": "f626571b5b2c59f88e2da701e9f5fb5671924901", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn lit_to_const<'tcx>(\n         }\n         (ast::LitKind::Bool(b), ty::Bool) => ty::ValTree::from_scalar_int((*b).into()),\n         (ast::LitKind::Char(c), ty::Char) => ty::ValTree::from_scalar_int((*c).into()),\n-        (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n+        (ast::LitKind::Err, _) => return Err(LitToConstError::Reported),\n         _ => return Err(LitToConstError::TypeError),\n     };\n "}, {"sha": "f6516d3bd4543604155cf9bde1010d54c01b65cb", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -1383,7 +1383,7 @@ impl<'a> Parser<'a> {\n         match self.parse_str_lit() {\n             Ok(str_lit) => Some(str_lit),\n             Err(Some(lit)) => match lit.kind {\n-                ast::LitKind::Err(_) => None,\n+                ast::LitKind::Err => None,\n                 _ => {\n                     self.struct_span_err(lit.span, \"non-string ABI literal\")\n                         .span_suggestion("}, {"sha": "03bd485096a9c5046a97d1f072e6532094e56538", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -1136,7 +1136,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 opt_ty.unwrap_or_else(|| self.next_float_var())\n             }\n             ast::LitKind::Bool(_) => tcx.types.bool,\n-            ast::LitKind::Err(_) => tcx.ty_error(),\n+            ast::LitKind::Err => tcx.ty_error(),\n         }\n     }\n "}, {"sha": "e32ef9933afe5c2b16a062fd81aed35b3439b340", "filename": "src/tools/clippy/clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -290,7 +290,7 @@ impl<'a> NormalizedPat<'a> {\n                     LitKind::Char(val) => Self::LitInt(val.into()),\n                     LitKind::Int(val, _) => Self::LitInt(val),\n                     LitKind::Bool(val) => Self::LitBool(val),\n-                    LitKind::Float(..) | LitKind::Err(_) => Self::Wild,\n+                    LitKind::Float(..) | LitKind::Err => Self::Wild,\n                 },\n                 _ => Self::Wild,\n             },"}, {"sha": "429c64ac156418c1656161f2d840c8330235f96f", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -276,7 +276,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         match lit.value.node {\n             LitKind::Bool(val) => kind!(\"Bool({val:?})\"),\n             LitKind::Char(c) => kind!(\"Char({c:?})\"),\n-            LitKind::Err(val) => kind!(\"Err({val})\"),\n+            LitKind::Err => kind!(\"Err\"),\n             LitKind::Byte(b) => kind!(\"Byte({b})\"),\n             LitKind::Int(i, suffix) => {\n                 let int_ty = match suffix {"}, {"sha": "e053708edd50779cc1b845c66f7b26cbc33d5cdb", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6087dc20542e9d88445604e3d8b1dd93c8fad04b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6087dc20542e9d88445604e3d8b1dd93c8fad04b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=6087dc20542e9d88445604e3d8b1dd93c8fad04b", "patch": "@@ -45,7 +45,7 @@ pub enum Constant {\n     /// A reference\n     Ref(Box<Constant>),\n     /// A literal with syntax error.\n-    Err(Symbol),\n+    Err,\n }\n \n impl PartialEq for Constant {\n@@ -118,9 +118,7 @@ impl Hash for Constant {\n             Self::Ref(ref r) => {\n                 r.hash(state);\n             },\n-            Self::Err(ref s) => {\n-                s.hash(state);\n-            },\n+            Self::Err => {},\n         }\n     }\n }\n@@ -194,7 +192,7 @@ pub fn lit_to_mir_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n             _ => bug!(),\n         },\n         LitKind::Bool(b) => Constant::Bool(b),\n-        LitKind::Err(s) => Constant::Err(s),\n+        LitKind::Err => Constant::Err,\n     }\n }\n "}]}