{"sha": "fece59b56cbeda4faa7c148ad58569c2bd52a52d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlY2U1OWI1NmNiZWRhNGZhYTdjMTQ4YWQ1ODU2OWMyYmQ1MmE1MmQ=", "commit": {"author": {"name": "0yoyoyo", "email": "60439919+0yoyoyo@users.noreply.github.com", "date": "2021-02-21T09:29:14Z"}, "committer": {"name": "0yoyoyo", "email": "60439919+0yoyoyo@users.noreply.github.com", "date": "2021-02-21T09:29:14Z"}, "message": "Change `find_anon_type` method to function", "tree": {"sha": "8135e6efc5a1c6f2cc4ffb175e425d11621721d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8135e6efc5a1c6f2cc4ffb175e425d11621721d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fece59b56cbeda4faa7c148ad58569c2bd52a52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fece59b56cbeda4faa7c148ad58569c2bd52a52d", "html_url": "https://github.com/rust-lang/rust/commit/fece59b56cbeda4faa7c148ad58569c2bd52a52d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fece59b56cbeda4faa7c148ad58569c2bd52a52d/comments", "author": {"login": "0yoyoyo", "id": 60439919, "node_id": "MDQ6VXNlcjYwNDM5OTE5", "avatar_url": "https://avatars.githubusercontent.com/u/60439919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0yoyoyo", "html_url": "https://github.com/0yoyoyo", "followers_url": "https://api.github.com/users/0yoyoyo/followers", "following_url": "https://api.github.com/users/0yoyoyo/following{/other_user}", "gists_url": "https://api.github.com/users/0yoyoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/0yoyoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0yoyoyo/subscriptions", "organizations_url": "https://api.github.com/users/0yoyoyo/orgs", "repos_url": "https://api.github.com/users/0yoyoyo/repos", "events_url": "https://api.github.com/users/0yoyoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/0yoyoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "0yoyoyo", "id": 60439919, "node_id": "MDQ6VXNlcjYwNDM5OTE5", "avatar_url": "https://avatars.githubusercontent.com/u/60439919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0yoyoyo", "html_url": "https://github.com/0yoyoyo", "followers_url": "https://api.github.com/users/0yoyoyo/followers", "following_url": "https://api.github.com/users/0yoyoyo/following{/other_user}", "gists_url": "https://api.github.com/users/0yoyoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/0yoyoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0yoyoyo/subscriptions", "organizations_url": "https://api.github.com/users/0yoyoyo/orgs", "repos_url": "https://api.github.com/users/0yoyoyo/repos", "events_url": "https://api.github.com/users/0yoyoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/0yoyoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8599bff5a3556059817503030e248507706e96b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8599bff5a3556059817503030e248507706e96b4", "html_url": "https://github.com/rust-lang/rust/commit/8599bff5a3556059817503030e248507706e96b4"}], "stats": {"total": 124, "additions": 61, "deletions": 63}, "files": [{"sha": "1b35c4032f44c5d14e3fe30e935deb79a7dc4a64", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fece59b56cbeda4faa7c148ad58569c2bd52a52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fece59b56cbeda4faa7c148ad58569c2bd52a52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=fece59b56cbeda4faa7c148ad58569c2bd52a52d", "patch": "@@ -1,6 +1,7 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where both the regions are anonymous.\n \n+use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::util::AnonymousParamInfo;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n@@ -66,9 +67,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let scope_def_id_sub = anon_reg_sub.def_id;\n         let bregion_sub = anon_reg_sub.boundregion;\n \n-        let ty_sup = self.find_anon_type(sup, &bregion_sup)?;\n+        let ty_sup = find_anon_type(self.tcx(), sup, &bregion_sup)?;\n \n-        let ty_sub = self.find_anon_type(sub, &bregion_sub)?;\n+        let ty_sub = find_anon_type(self.tcx(), sub, &bregion_sub)?;\n \n         debug!(\n             \"try_report_anon_anon_conflict: found_param1={:?} sup={:?} br1={:?}\","}, {"sha": "ffdaedf8666c3f32ef541c7a9a19a619ca97f45f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 55, "deletions": 59, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/fece59b56cbeda4faa7c148ad58569c2bd52a52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fece59b56cbeda4faa7c148ad58569c2bd52a52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=fece59b56cbeda4faa7c148ad58569c2bd52a52d", "patch": "@@ -1,72 +1,68 @@\n-use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::{self, Region, TyCtxt};\n \n-impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n-    /// This function calls the `visit_ty` method for the parameters\n-    /// corresponding to the anonymous regions. The `nested_visitor.found_type`\n-    /// contains the anonymous type.\n-    ///\n-    /// # Arguments\n-    /// region - the anonymous region corresponding to the anon_anon conflict\n-    /// br - the bound region corresponding to the above region which is of type `BrAnon(_)`\n-    ///\n-    /// # Example\n-    /// ```\n-    /// fn foo(x: &mut Vec<&u8>, y: &u8)\n-    ///    { x.push(y); }\n-    /// ```\n-    /// The function returns the nested type corresponding to the anonymous region\n-    /// for e.g., `&u8` and Vec<`&u8`.\n-    pub(super) fn find_anon_type(\n-        &self,\n-        region: Region<'tcx>,\n-        br: &ty::BoundRegionKind,\n-    ) -> Option<(&hir::Ty<'tcx>, &hir::FnDecl<'tcx>)> {\n-        if let Some(anon_reg) = self.tcx().is_suitable_region(region) {\n-            let hir_id = self.tcx().hir().local_def_id_to_hir_id(anon_reg.def_id);\n-            let fndecl = match self.tcx().hir().get(hir_id) {\n-                Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n-                | Node::TraitItem(&hir::TraitItem {\n-                    kind: hir::TraitItemKind::Fn(ref m, ..),\n-                    ..\n-                })\n-                | Node::ImplItem(&hir::ImplItem {\n-                    kind: hir::ImplItemKind::Fn(ref m, ..), ..\n-                }) => &m.decl,\n-                _ => return None,\n-            };\n+/// This function calls the `visit_ty` method for the parameters\n+/// corresponding to the anonymous regions. The `nested_visitor.found_type`\n+/// contains the anonymous type.\n+///\n+/// # Arguments\n+/// region - the anonymous region corresponding to the anon_anon conflict\n+/// br - the bound region corresponding to the above region which is of type `BrAnon(_)`\n+///\n+/// # Example\n+/// ```\n+/// fn foo(x: &mut Vec<&u8>, y: &u8)\n+///    { x.push(y); }\n+/// ```\n+/// The function returns the nested type corresponding to the anonymous region\n+/// for e.g., `&u8` and Vec<`&u8`.\n+pub(crate) fn find_anon_type(\n+    tcx: TyCtxt<'tcx>,\n+    region: Region<'tcx>,\n+    br: &ty::BoundRegionKind,\n+) -> Option<(&'tcx hir::Ty<'tcx>, &'tcx hir::FnDecl<'tcx>)> {\n+    if let Some(anon_reg) = tcx.is_suitable_region(region) {\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(anon_reg.def_id);\n+        let fndecl = match tcx.hir().get(hir_id) {\n+            Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n+            | Node::TraitItem(&hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(ref m, ..), ..\n+            })\n+            | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(ref m, ..), .. }) => {\n+                &m.decl\n+            }\n+            _ => return None,\n+        };\n \n-            fndecl\n-                .inputs\n-                .iter()\n-                .find_map(|arg| self.find_component_for_bound_region(arg, br))\n-                .map(|ty| (ty, &**fndecl))\n-        } else {\n-            None\n-        }\n+        fndecl\n+            .inputs\n+            .iter()\n+            .find_map(|arg| find_component_for_bound_region(tcx, arg, br))\n+            .map(|ty| (ty, &**fndecl))\n+    } else {\n+        None\n     }\n+}\n \n-    // This method creates a FindNestedTypeVisitor which returns the type corresponding\n-    // to the anonymous region.\n-    fn find_component_for_bound_region(\n-        &self,\n-        arg: &'tcx hir::Ty<'tcx>,\n-        br: &ty::BoundRegionKind,\n-    ) -> Option<&'tcx hir::Ty<'tcx>> {\n-        let mut nested_visitor = FindNestedTypeVisitor {\n-            tcx: self.tcx(),\n-            bound_region: *br,\n-            found_type: None,\n-            current_index: ty::INNERMOST,\n-        };\n-        nested_visitor.visit_ty(arg);\n-        nested_visitor.found_type\n-    }\n+// This method creates a FindNestedTypeVisitor which returns the type corresponding\n+// to the anonymous region.\n+fn find_component_for_bound_region(\n+    tcx: TyCtxt<'tcx>,\n+    arg: &'tcx hir::Ty<'tcx>,\n+    br: &ty::BoundRegionKind,\n+) -> Option<&'tcx hir::Ty<'tcx>> {\n+    let mut nested_visitor = FindNestedTypeVisitor {\n+        tcx,\n+        bound_region: *br,\n+        found_type: None,\n+        current_index: ty::INNERMOST,\n+    };\n+    nested_visitor.visit_ty(arg);\n+    nested_visitor.found_type\n }\n \n // The FindNestedTypeVisitor captures the corresponding `hir::Ty` of the"}, {"sha": "8b2d17ac29b698d99766094e86f5f250259706d6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fece59b56cbeda4faa7c148ad58569c2bd52a52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fece59b56cbeda4faa7c148ad58569c2bd52a52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=fece59b56cbeda4faa7c148ad58569c2bd52a52d", "patch": "@@ -5,8 +5,8 @@ use rustc_errors::{DiagnosticBuilder, ErrorReported};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::source_map::Span;\n \n+pub mod find_anon_type;\n mod different_lifetimes;\n-mod find_anon_type;\n mod named_anon_conflict;\n mod placeholder_error;\n mod static_impl_trait;"}, {"sha": "2f3c0d6957a613f12ff33bd428369aab78cc83e1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fece59b56cbeda4faa7c148ad58569c2bd52a52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fece59b56cbeda4faa7c148ad58569c2bd52a52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=fece59b56cbeda4faa7c148ad58569c2bd52a52d", "patch": "@@ -1,5 +1,6 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n+use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::Visitor;\n@@ -74,7 +75,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             return None;\n         }\n \n-        if let Some((_, fndecl)) = self.find_anon_type(anon, &br) {\n+        if let Some((_, fndecl)) = find_anon_type(self.tcx(), anon, &br) {\n             if self.is_self_anon(is_first, scope_def_id) {\n                 return None;\n             }"}]}