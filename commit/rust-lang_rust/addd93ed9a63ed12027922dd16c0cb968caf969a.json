{"sha": "addd93ed9a63ed12027922dd16c0cb968caf969a", "node_id": "C_kwDOAAsO6NoAKGFkZGQ5M2VkOWE2M2VkMTIwMjc5MjJkZDE2YzBjYjk2OGNhZjk2OWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-05T14:52:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-05T14:52:10Z"}, "message": "Don't search for root nodes unnecessarily", "tree": {"sha": "9a9f5fcf08e5349ca61ede7199f5533eee2d4b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a9f5fcf08e5349ca61ede7199f5533eee2d4b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/addd93ed9a63ed12027922dd16c0cb968caf969a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/addd93ed9a63ed12027922dd16c0cb968caf969a", "html_url": "https://github.com/rust-lang/rust/commit/addd93ed9a63ed12027922dd16c0cb968caf969a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/addd93ed9a63ed12027922dd16c0cb968caf969a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dad1b92284d7c79872ac36e1fb3eece5756c86e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dad1b92284d7c79872ac36e1fb3eece5756c86e", "html_url": "https://github.com/rust-lang/rust/commit/8dad1b92284d7c79872ac36e1fb3eece5756c86e"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "7c2097f00e4265b8c2f11601d97f602c6b5ae6df", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/addd93ed9a63ed12027922dd16c0cb968caf969a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addd93ed9a63ed12027922dd16c0cb968caf969a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=addd93ed9a63ed12027922dd16c0cb968caf969a", "patch": "@@ -18,7 +18,7 @@ use smallvec::{smallvec, SmallVec};\n use syntax::{\n     algo::skip_trivia_token,\n     ast::{self, HasAttrs, HasGenericParams, HasLoopBody},\n-    match_ast, AstNode, Direction, SyntaxNode, SyntaxNodePtr, SyntaxToken, TextRange, TextSize,\n+    match_ast, AstNode, Direction, SyntaxNode, SyntaxNodePtr, SyntaxToken, TextSize,\n };\n \n use crate::{\n@@ -556,25 +556,27 @@ impl<'db> SemanticsImpl<'db> {\n             None => return,\n         };\n         let sa = self.analyze(&parent);\n-        let mut stack: SmallVec<[_; 1]> = smallvec![InFile::new(sa.file_id, token)];\n+        let mut stack: SmallVec<[_; 4]> = smallvec![InFile::new(sa.file_id, token)];\n         let mut cache = self.expansion_info_cache.borrow_mut();\n         let mut mcache = self.macro_call_cache.borrow_mut();\n \n         let mut process_expansion_for_token =\n-            |stack: &mut SmallVec<_>, file_id, item, token: InFile<&_>| {\n-                let mapped_tokens = cache\n-                    .entry(file_id)\n-                    .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n-                    .as_ref()?\n-                    .map_token_down(self.db.upcast(), item, token)?;\n+            |stack: &mut SmallVec<_>, macro_file, item, token: InFile<&_>| {\n+                let expansion_info = cache\n+                    .entry(macro_file)\n+                    .or_insert_with(|| macro_file.expansion_info(self.db.upcast()))\n+                    .as_ref()?;\n+\n+                {\n+                    let InFile { file_id, value } = expansion_info.expanded();\n+                    self.cache(value, file_id);\n+                }\n+\n+                let mapped_tokens = expansion_info.map_token_down(self.db.upcast(), item, token)?;\n \n                 let len = stack.len();\n                 // requeue the tokens we got from mapping our current token down\n-                stack.extend(mapped_tokens.inspect(|token| {\n-                    if let Some(parent) = token.value.parent() {\n-                        self.cache(find_root(&parent), token.file_id);\n-                    }\n-                }));\n+                stack.extend(mapped_tokens);\n                 // if the length changed we have found a mapping for the token\n                 (stack.len() != len).then(|| ())\n             };\n@@ -606,17 +608,15 @@ impl<'db> SemanticsImpl<'db> {\n                 }\n \n                 // or are we inside a function-like macro call\n-                if let Some(macro_call) = token.value.ancestors().find_map(ast::MacroCall::cast) {\n-                    let tt = macro_call.token_tree()?;\n-                    let l_delim = match tt.left_delimiter_token() {\n-                        Some(it) => it.text_range().end(),\n-                        None => tt.syntax().text_range().start(),\n-                    };\n-                    let r_delim = match tt.right_delimiter_token() {\n-                        Some(it) => it.text_range().start(),\n-                        None => tt.syntax().text_range().end(),\n-                    };\n-                    if !TextRange::new(l_delim, r_delim).contains_range(token.value.text_range()) {\n+                if let Some(tt) =\n+                    // FIXME replace map.while_some with take_while once stable\n+                    token.value.ancestors().map(ast::TokenTree::cast).while_some().last()\n+                {\n+                    let macro_call = tt.syntax().parent().and_then(ast::MacroCall::cast)?;\n+                    if tt.left_delimiter_token().map_or(false, |it| it == token.value) {\n+                        return None;\n+                    }\n+                    if tt.right_delimiter_token().map_or(false, |it| it == token.value) {\n                         return None;\n                     }\n "}, {"sha": "97436446729250640024d9b0349daceef4033af0", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/addd93ed9a63ed12027922dd16c0cb968caf969a/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addd93ed9a63ed12027922dd16c0cb968caf969a/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=addd93ed9a63ed12027922dd16c0cb968caf969a", "patch": "@@ -18,7 +18,7 @@ pub mod eager;\n use base_db::ProcMacroKind;\n use either::Either;\n \n-pub use mbe::{ExpandError, ExpandResult};\n+pub use mbe::{ExpandError, ExpandResult, Origin};\n \n use std::{hash::Hash, iter, sync::Arc};\n \n@@ -380,9 +380,11 @@ pub struct ExpansionInfo {\n     exp_map: Arc<mbe::TokenMap>,\n }\n \n-pub use mbe::Origin;\n-\n impl ExpansionInfo {\n+    pub fn expanded(&self) -> InFile<SyntaxNode> {\n+        self.expanded.clone()\n+    }\n+\n     pub fn call_node(&self) -> Option<InFile<SyntaxNode>> {\n         Some(self.arg.with_value(self.arg.value.parent()?))\n     }"}]}