{"sha": "a428ab17abc310c17ca13eeb6f74b3c5bddff940", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MjhhYjE3YWJjMzEwYzE3Y2ExM2VlYjZmNzRiM2M1YmRkZmY5NDA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-14T17:52:47Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-14T17:52:47Z"}, "message": "Improve suggestion for panic!(format!(..)).", "tree": {"sha": "6a5ef88b0890d44fc2286d9bbf58d5952e7da575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5ef88b0890d44fc2286d9bbf58d5952e7da575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a428ab17abc310c17ca13eeb6f74b3c5bddff940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a428ab17abc310c17ca13eeb6f74b3c5bddff940", "html_url": "https://github.com/rust-lang/rust/commit/a428ab17abc310c17ca13eeb6f74b3c5bddff940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a428ab17abc310c17ca13eeb6f74b3c5bddff940/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1abc1e2a43c116a87bd430fa14a86e67617b861a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1abc1e2a43c116a87bd430fa14a86e67617b861a", "html_url": "https://github.com/rust-lang/rust/commit/1abc1e2a43c116a87bd430fa14a86e67617b861a"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "7432f476d7cd03cea9ed0cfdcade6f90af12dab2", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a428ab17abc310c17ca13eeb6f74b3c5bddff940/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a428ab17abc310c17ca13eeb6f74b3c5bddff940/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=a428ab17abc310c17ca13eeb6f74b3c5bddff940", "patch": "@@ -72,18 +72,38 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n     // Find the span of the argument to `panic!()`, before expansion in the\n     // case of `panic!(some_macro!())`.\n     let mut arg_span = arg.span;\n+    let mut arg_macro = None;\n     while !span.contains(arg_span) {\n         let expn = arg_span.ctxt().outer_expn_data();\n         if expn.is_root() {\n             break;\n         }\n+        arg_macro = expn.macro_def_id;\n         arg_span = expn.call_site;\n     }\n \n     cx.struct_span_lint(NON_FMT_PANIC, arg_span, |lint| {\n         let mut l = lint.build(\"panic message is not a string literal\");\n         l.note(\"this is no longer accepted in Rust 2021\");\n-        if span.contains(arg_span) {\n+        if !span.contains(arg_span) {\n+            // No clue where this argument is coming from.\n+            l.emit();\n+            return;\n+        }\n+        if arg_macro.map_or(false, |id| cx.tcx.is_diagnostic_item(sym::format_macro, id)) {\n+            // A case of `panic!(format!(..))`.\n+            l.note(\"the panic!() macro supports formatting, so there's no need for the format!() macro here\");\n+            if let Some(inner) = find_inner_span(cx, arg_span) {\n+                l.multipart_suggestion(\n+                    \"remove the `format!(..)` macro call\",\n+                    vec![\n+                        (arg_span.until(inner), \"\".into()),\n+                        (inner.between(arg_span.shrink_to_hi()), \"\".into()),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        } else {\n             l.span_suggestion_verbose(\n                 arg_span.shrink_to_lo(),\n                 \"add a \\\"{}\\\" format string to Display the message\",\n@@ -186,6 +206,15 @@ fn check_panic_str<'tcx>(\n     }\n }\n \n+/// Given the span of `some_macro!(args)`, gives the span of `args`.\n+fn find_inner_span<'tcx>(cx: &LateContext<'tcx>, span: Span) -> Option<Span> {\n+    let snippet = cx.sess().parse_sess.source_map().span_to_snippet(span).ok()?;\n+    Some(span.from_inner(InnerSpan {\n+        start: snippet.find(&['(', '{', '['][..])? + 1,\n+        end: snippet.rfind(&[')', '}', ']'][..])?,\n+    }))\n+}\n+\n fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span, Symbol) {\n     let mut expn = f.span.ctxt().outer_expn_data();\n "}, {"sha": "831e82559adcc0959aeed57a15bfeb3765641f76", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a428ab17abc310c17ca13eeb6f74b3c5bddff940/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a428ab17abc310c17ca13eeb6f74b3c5bddff940/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a428ab17abc310c17ca13eeb6f74b3c5bddff940", "patch": "@@ -554,6 +554,7 @@ symbols! {\n         format_args,\n         format_args_capture,\n         format_args_nl,\n+        format_macro,\n         freeze,\n         freg,\n         frem_fast,"}, {"sha": "88a6cec3a8342e0ed15e7147e03d4432454b2cb6", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a428ab17abc310c17ca13eeb6f74b3c5bddff940/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a428ab17abc310c17ca13eeb6f74b3c5bddff940/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=a428ab17abc310c17ca13eeb6f74b3c5bddff940", "patch": "@@ -107,6 +107,7 @@ macro_rules! vec {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"format_macro\"]\n macro_rules! format {\n     ($($arg:tt)*) => {{\n         let res = $crate::fmt::format($crate::__export::format_args!($($arg)*));"}]}