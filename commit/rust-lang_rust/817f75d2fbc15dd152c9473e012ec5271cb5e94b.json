{"sha": "817f75d2fbc15dd152c9473e012ec5271cb5e94b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxN2Y3NWQyZmJjMTVkZDE1MmM5NDczZTAxMmVjNTI3MWNiNWU5NGI=", "commit": {"author": {"name": "ville-h", "email": "ville3.14159@gmail.com", "date": "2015-01-04T06:59:06Z"}, "committer": {"name": "ville-h", "email": "ville3.14159@gmail.com", "date": "2015-01-04T06:59:06Z"}, "message": "fix code and comments referencing StaticRwLock", "tree": {"sha": "b8e75450c1304e7b65c09763990222d6926088b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8e75450c1304e7b65c09763990222d6926088b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817f75d2fbc15dd152c9473e012ec5271cb5e94b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817f75d2fbc15dd152c9473e012ec5271cb5e94b", "html_url": "https://github.com/rust-lang/rust/commit/817f75d2fbc15dd152c9473e012ec5271cb5e94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817f75d2fbc15dd152c9473e012ec5271cb5e94b/comments", "author": {"login": "ville-h", "id": 8824715, "node_id": "MDQ6VXNlcjg4MjQ3MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8824715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ville-h", "html_url": "https://github.com/ville-h", "followers_url": "https://api.github.com/users/ville-h/followers", "following_url": "https://api.github.com/users/ville-h/following{/other_user}", "gists_url": "https://api.github.com/users/ville-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/ville-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ville-h/subscriptions", "organizations_url": "https://api.github.com/users/ville-h/orgs", "repos_url": "https://api.github.com/users/ville-h/repos", "events_url": "https://api.github.com/users/ville-h/events{/privacy}", "received_events_url": "https://api.github.com/users/ville-h/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ville-h", "id": 8824715, "node_id": "MDQ6VXNlcjg4MjQ3MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8824715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ville-h", "html_url": "https://github.com/ville-h", "followers_url": "https://api.github.com/users/ville-h/followers", "following_url": "https://api.github.com/users/ville-h/following{/other_user}", "gists_url": "https://api.github.com/users/ville-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/ville-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ville-h/subscriptions", "organizations_url": "https://api.github.com/users/ville-h/orgs", "repos_url": "https://api.github.com/users/ville-h/repos", "events_url": "https://api.github.com/users/ville-h/events{/privacy}", "received_events_url": "https://api.github.com/users/ville-h/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedbde66239d4a7a7551938975d4e3894d778332", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedbde66239d4a7a7551938975d4e3894d778332", "html_url": "https://github.com/rust-lang/rust/commit/fedbde66239d4a7a7551938975d4e3894d778332"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0e2b0a441e69ebc00fe5783873ba811812715e8a", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817f75d2fbc15dd152c9473e012ec5271cb5e94b/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f75d2fbc15dd152c9473e012ec5271cb5e94b/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=817f75d2fbc15dd152c9473e012ec5271cb5e94b", "patch": "@@ -21,7 +21,7 @@ pub use alloc::arc::{Arc, Weak};\n \n pub use self::mutex::{Mutex, MutexGuard, StaticMutex};\n pub use self::mutex::MUTEX_INIT;\n-pub use self::rwlock::{RwLock, StaticRWLock, RWLOCK_INIT};\n+pub use self::rwlock::{RwLock, StaticRwLock, RWLOCK_INIT};\n pub use self::rwlock::{RWLockReadGuard, RWLockWriteGuard};\n pub use self::condvar::{Condvar, StaticCondvar, CONDVAR_INIT};\n pub use self::once::{Once, ONCE_INIT};"}, {"sha": "04efbf893ea02916ecf67c590df6bcc3d2bcfb20", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/817f75d2fbc15dd152c9473e012ec5271cb5e94b/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f75d2fbc15dd152c9473e012ec5271cb5e94b/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=817f75d2fbc15dd152c9473e012ec5271cb5e94b", "patch": "@@ -60,7 +60,7 @@ use sys_common::rwlock as sys;\n /// ```\n #[stable]\n pub struct RwLock<T> {\n-    inner: Box<StaticRWLock>,\n+    inner: Box<StaticRwLock>,\n     data: UnsafeCell<T>,\n }\n \n@@ -76,9 +76,9 @@ unsafe impl<T> Sync for RwLock<T> {}\n /// # Example\n ///\n /// ```\n-/// use std::sync::{StaticRWLock, RWLOCK_INIT};\n+/// use std::sync::{StaticRwLock, RWLOCK_INIT};\n ///\n-/// static LOCK: StaticRWLock = RWLOCK_INIT;\n+/// static LOCK: StaticRwLock = RWLOCK_INIT;\n ///\n /// {\n ///     let _g = LOCK.read().unwrap();\n@@ -101,7 +101,7 @@ unsafe impl Sync for StaticRwLock {}\n \n /// Constant initialization for a statically-initialized rwlock.\n #[unstable = \"may be merged with RwLock in the future\"]\n-pub const RWLOCK_INIT: StaticRWLock = StaticRWLock {\n+pub const RWLOCK_INIT: StaticRwLock = StaticRwLock {\n     lock: sys::RWLOCK_INIT,\n     poison: poison::FLAG_INIT,\n };\n@@ -111,7 +111,7 @@ pub const RWLOCK_INIT: StaticRWLock = StaticRWLock {\n #[must_use]\n #[stable]\n pub struct RWLockReadGuard<'a, T: 'a> {\n-    __lock: &'a StaticRWLock,\n+    __lock: &'a StaticRwLock,\n     __data: &'a UnsafeCell<T>,\n     __marker: marker::NoSend,\n }\n@@ -121,7 +121,7 @@ pub struct RWLockReadGuard<'a, T: 'a> {\n #[must_use]\n #[stable]\n pub struct RWLockWriteGuard<'a, T: 'a> {\n-    __lock: &'a StaticRWLock,\n+    __lock: &'a StaticRwLock,\n     __data: &'a UnsafeCell<T>,\n     __poison: poison::Guard,\n     __marker: marker::NoSend,\n@@ -302,7 +302,7 @@ impl StaticRwLock {\n }\n \n impl<'rwlock, T> RWLockReadGuard<'rwlock, T> {\n-    fn new(lock: &'rwlock StaticRWLock, data: &'rwlock UnsafeCell<T>)\n+    fn new(lock: &'rwlock StaticRwLock, data: &'rwlock UnsafeCell<T>)\n            -> LockResult<RWLockReadGuard<'rwlock, T>> {\n         poison::map_result(lock.poison.borrow(), |_| {\n             RWLockReadGuard {\n@@ -314,7 +314,7 @@ impl<'rwlock, T> RWLockReadGuard<'rwlock, T> {\n     }\n }\n impl<'rwlock, T> RWLockWriteGuard<'rwlock, T> {\n-    fn new(lock: &'rwlock StaticRWLock, data: &'rwlock UnsafeCell<T>)\n+    fn new(lock: &'rwlock StaticRwLock, data: &'rwlock UnsafeCell<T>)\n            -> LockResult<RWLockWriteGuard<'rwlock, T>> {\n         poison::map_result(lock.poison.borrow(), |guard| {\n             RWLockWriteGuard {\n@@ -365,7 +365,7 @@ mod tests {\n     use rand::{mod, Rng};\n     use sync::mpsc::channel;\n     use thread::Thread;\n-    use sync::{Arc, RwLock, StaticRWLock, RWLOCK_INIT};\n+    use sync::{Arc, RwLock, StaticRwLock, RWLOCK_INIT};\n \n     #[test]\n     fn smoke() {\n@@ -378,7 +378,7 @@ mod tests {\n \n     #[test]\n     fn static_smoke() {\n-        static R: StaticRWLock = RWLOCK_INIT;\n+        static R: StaticRwLock = RWLOCK_INIT;\n         drop(R.read().unwrap());\n         drop(R.write().unwrap());\n         drop((R.read().unwrap(), R.read().unwrap()));\n@@ -388,7 +388,7 @@ mod tests {\n \n     #[test]\n     fn frob() {\n-        static R: StaticRWLock = RWLOCK_INIT;\n+        static R: StaticRwLock = RWLOCK_INIT;\n         static N: uint = 10;\n         static M: uint = 1000;\n "}]}