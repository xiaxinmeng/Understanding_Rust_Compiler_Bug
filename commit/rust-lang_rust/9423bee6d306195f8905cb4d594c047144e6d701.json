{"sha": "9423bee6d306195f8905cb4d594c047144e6d701", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjNiZWU2ZDMwNjE5NWY4OTA1Y2I0ZDU5NGMwNDcxNDRlNmQ3MDE=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-10-12T00:01:55Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-10-12T00:01:55Z"}, "message": "Move const qualifier from brackets to constant values and remove comma from after identifier", "tree": {"sha": "22cd793aa724119c077a1fdaf8468e72290e4994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22cd793aa724119c077a1fdaf8468e72290e4994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9423bee6d306195f8905cb4d594c047144e6d701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9423bee6d306195f8905cb4d594c047144e6d701", "html_url": "https://github.com/rust-lang/rust/commit/9423bee6d306195f8905cb4d594c047144e6d701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9423bee6d306195f8905cb4d594c047144e6d701/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf", "html_url": "https://github.com/rust-lang/rust/commit/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf"}], "stats": {"total": 103, "additions": 46, "deletions": 57}, "files": [{"sha": "01e3957a808126a1f80d895d89b4be46becaaaff", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9423bee6d306195f8905cb4d594c047144e6d701/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9423bee6d306195f8905cb4d594c047144e6d701/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9423bee6d306195f8905cb4d594c047144e6d701", "patch": "@@ -402,10 +402,10 @@ pub enum BorrowKind {\n ///////////////////////////////////////////////////////////////////////////\n // Variables and temps\n \n-newtype_index!(Local,\n-    const {\n-        DESCRIPTION = \"_\",\n-        RETURN_POINTER = 0,\n+newtype_index!(Local\n+    {\n+        DEBUG_NAME = \"_\",\n+        const RETURN_POINTER = 0,\n     });\n \n /// Classifies locals into categories. See `Mir::local_kind`.\n@@ -540,7 +540,7 @@ pub struct UpvarDecl {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock\n \n-newtype_index!(BasicBlock, const { DESCRIPTION = \"bb\" });\n+newtype_index!(BasicBlock { DEBUG_NAME = \"bb\" });\n \n ///////////////////////////////////////////////////////////////////////////\n // BasicBlockData and Terminator\n@@ -1120,7 +1120,7 @@ pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Local, Ty<'tcx>\n /// and the index is a local.\n pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n-newtype_index!(Field, const { DESCRIPTION = \"field\" });\n+newtype_index!(Field { DEBUG_NAME = \"field\" });\n \n impl<'tcx> Lvalue<'tcx> {\n     pub fn field(self, f: Field, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n@@ -1185,10 +1185,10 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Scopes\n \n-newtype_index!(VisibilityScope,\n-    const {\n-        DESCRIPTION = \"scope\",\n-        ARGUMENT_VISIBILITY_SCOPE = 0,\n+newtype_index!(VisibilityScope\n+    {\n+        DEBUG_NAME = \"scope\",\n+        const ARGUMENT_VISIBILITY_SCOPE = 0,\n     });\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n@@ -1514,7 +1514,7 @@ pub struct Constant<'tcx> {\n     pub literal: Literal<'tcx>,\n }\n \n-newtype_index!(Promoted, const { DESCRIPTION = \"promoted\" });\n+newtype_index!(Promoted { DEBUG_NAME = \"promoted\" });\n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum Literal<'tcx> {"}, {"sha": "c10f7372a8d5670bdd4d3e23b532ab2ab81222e5", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 35, "deletions": 46, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9423bee6d306195f8905cb4d594c047144e6d701/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9423bee6d306195f8905cb4d594c047144e6d701/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=9423bee6d306195f8905cb4d594c047144e6d701", "patch": "@@ -40,10 +40,29 @@ impl Idx for u32 {\n \n #[macro_export]\n macro_rules! newtype_index {\n+    // ---- public rules ----\n+\n+    // Use default constants\n+    ($name:ident) => (\n+        newtype_index!(\n+            @type[$name]\n+            @max[::std::u32::MAX]\n+            @debug_name[unsafe {::std::intrinsics::type_name::<$name>() }]);\n+    );\n+\n+    // Define any constants\n+    ($name:ident { $($tokens:tt)+ }) => (\n+        newtype_index!(\n+            @type[$name]\n+            @max[::std::u32::MAX]\n+            @debug_name[unsafe {::std::intrinsics::type_name::<$name>() }]\n+            $($tokens)+);\n+    );\n+\n     // ---- private rules ----\n \n     // Base case, user-defined constants (if any) have already been defined\n-    (@type[$type:ident] @max[$max:expr] @descr[$descr:expr]) => (\n+    (@type[$type:ident] @max[$max:expr] @debug_name[$debug_name:expr]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n             RustcEncodable, RustcDecodable)]\n         pub struct $type(u32);\n@@ -60,65 +79,35 @@ macro_rules! newtype_index {\n \n         impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n-                write!(fmt, \"{}{}\", $descr, self.0)\n+                write!(fmt, \"{}{}\", $debug_name, self.0)\n             }\n         }\n     );\n \n-    // Replace existing default for max (as final param)\n-    (@type[$type:ident] @max[$_max:expr] @descr[$descr:expr] MAX = $max:expr) => (\n-        newtype_index!(@type[$type] @max[$max] @descr[$descr]);\n+    // Rewrite final without comma to one that includes comma\n+    (@type[$type:ident] @max[$max:expr] @debug_name[$debug_name:expr] $name:ident = $constant:expr) => (\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $name = $constant,);\n     );\n \n-    // Replace existing default for max\n-    (@type[$type:ident] @max[$_max:expr] @descr[$descr:expr] MAX = $max:expr, $($idents:ident = $constants:expr),*) => (\n-        newtype_index!(@type[$type] @max[$max] @descr[$descr]);\n+    // Rewrite final const without comma to one that includes comma\n+    (@type[$type:ident] @max[$_max:expr] @debug_name[$debug_name:expr] const $name:ident = $constant:expr) => (\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] const $name = $constant,);\n     );\n \n-    // Replace existing default for description (as final param)\n-    (@type[$type:ident] @max[$max:expr] @descr[$_descr:expr] DESCRIPTION = $descr:expr) => (\n-        newtype_index!(@type[$type] @max[$max] @descr[$descr]);\n+    // Replace existing default for max\n+    (@type[$type:ident] @max[$_max:expr] @debug_name[$debug_name:expr] MAX = $max:expr, $($tokens:tt)*) => (\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $(tokens)*);\n     );\n \n-    // Replace existing default for description\n-    (@type[$type:ident] @max[$max:expr] @descr[$_descr:expr] DESCRIPTION = $descr:expr, $($idents:ident = $constants:expr),*) => (\n-        newtype_index!(@type[$type] @max[$max] @descr[$descr] $($idents = $constants),*);\n+    // Replace existing default for debug_name\n+    (@type[$type:ident] @max[$max:expr] @debug_name[$_debug_name:expr] DEBUG_NAME = $debug_name:expr, $($tokens:tt)*) => (\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $($tokens)*);\n     );\n \n     // Assign a user-defined constant (as final param)\n-    (@type[$type:ident] @max[$max:expr] @descr[$descr:expr] $name:ident = $constant:expr) => (\n+    (@type[$type:ident] @max[$max:expr] @debug_name[$debug_name:expr] const $name:ident = $constant:expr, $($tokens:tt)*) => (\n         pub const $name: $type = $type($constant);\n-        newtype_index!(@type[$type] @max[$max] @descr[$descr]);\n-    );\n-\n-    // Assign a user-defined constant\n-    (@type[$type:ident] @max[$max:expr] @descr[$descr:expr] $name:ident = $constant:expr, $($idents:ident = $constants:expr),*) => (\n-        pub const $name: $type = $type($constant);\n-        newtype_index!(@type[$type] @max[$max] @descr[$descr] $($idents = $constants),*);\n-    );\n-\n-    // ---- public rules ----\n-\n-    // Use default constants\n-    ($name:ident) => (\n-        newtype_index!(\n-            @type[$name]\n-            @max[::std::u32::MAX]\n-            @descr[unsafe {::std::intrinsics::type_name::<$name>() }]);\n-    );\n-\n-    // Define any constants\n-    ($name:ident, const { $($idents:ident = $constants:expr,)+ }) => (\n-        newtype_index!(\n-            @type[$name]\n-            @max[::std::u32::MAX]\n-            @descr[unsafe {::std::intrinsics::type_name::<$name>() }]\n-            $($idents = $constants),+);\n-    );\n-\n-    // Rewrite missing trailing comma in const to version with trailing comma\n-    ($name:ident, const { $($idents:ident = $constants:expr),+ }) => (\n-        newtype_index!($name, const { $($idents = $constants,)+ });\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $($tokens)*);\n     );\n }\n "}]}