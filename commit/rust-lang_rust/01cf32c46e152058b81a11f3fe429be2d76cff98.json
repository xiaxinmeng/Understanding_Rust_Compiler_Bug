{"sha": "01cf32c46e152058b81a11f3fe429be2d76cff98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxY2YzMmM0NmUxNTIwNThiODFhMTFmM2ZlNDI5YmUyZDc2Y2ZmOTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T18:09:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T18:09:11Z"}, "message": "fix tests", "tree": {"sha": "f6e9e68520bb793276a1a1ad8384b53096d1f390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e9e68520bb793276a1a1ad8384b53096d1f390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01cf32c46e152058b81a11f3fe429be2d76cff98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01cf32c46e152058b81a11f3fe429be2d76cff98", "html_url": "https://github.com/rust-lang/rust/commit/01cf32c46e152058b81a11f3fe429be2d76cff98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01cf32c46e152058b81a11f3fe429be2d76cff98/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be84a112a75f4e9acac76c497d714aba8d465ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/be84a112a75f4e9acac76c497d714aba8d465ed2", "html_url": "https://github.com/rust-lang/rust/commit/be84a112a75f4e9acac76c497d714aba8d465ed2"}], "stats": {"total": 128, "additions": 49, "deletions": 79}, "files": [{"sha": "2cf79eebf1b5b5999c6d072f46e220cd74092177", "filename": "crates/ra_analysis/src/hover.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/01cf32c46e152058b81a11f3fe429be2d76cff98/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cf32c46e152058b81a11f3fe429be2d76cff98/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhover.rs?ref=01cf32c46e152058b81a11f3fe429be2d76cff98", "patch": "@@ -167,7 +167,7 @@ impl NavigationTarget {\n #[cfg(test)]\n mod tests {\n     use ra_syntax::TextRange;\n-    use crate::mock_analysis::single_file_with_position;\n+    use crate::mock_analysis::{single_file_with_position, single_file_with_range};\n \n     #[test]\n     fn hover_shows_type_of_an_expression() {\n@@ -191,4 +191,52 @@ mod tests {\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(hover.info, \"i32\");\n     }\n+\n+    #[test]\n+    fn test_type_of_for_function() {\n+        let (analysis, range) = single_file_with_range(\n+            \"\n+            pub fn foo() -> u32 { 1 };\n+\n+            fn main() {\n+                let foo_test = <|>foo()<|>;\n+            }\n+            \",\n+        );\n+\n+        let type_name = analysis.type_of(range).unwrap().unwrap();\n+        assert_eq!(\"u32\", &type_name);\n+    }\n+\n+    // FIXME: improve type_of to make this work\n+    #[test]\n+    fn test_type_of_for_expr_1() {\n+        let (analysis, range) = single_file_with_range(\n+            \"\n+            fn main() {\n+                let foo = <|>1 + foo_test<|>;\n+            }\n+            \",\n+        );\n+\n+        let type_name = analysis.type_of(range).unwrap().unwrap();\n+        assert_eq!(\"[unknown]\", &type_name);\n+    }\n+\n+    // FIXME: improve type_of to make this work\n+    #[test]\n+    fn test_type_of_for_expr_2() {\n+        let (analysis, range) = single_file_with_range(\n+            \"\n+            fn main() {\n+                let foo: usize = 1;\n+                let bar = <|>1 + foo_test<|>;\n+            }\n+            \",\n+        );\n+\n+        let type_name = analysis.type_of(range).unwrap().unwrap();\n+        assert_eq!(\"[unknown]\", &type_name);\n+    }\n+\n }"}, {"sha": "26da7c10c96e562bc111ec514ea5024160e1f576", "filename": "crates/ra_analysis/tests/test/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01cf32c46e152058b81a11f3fe429be2d76cff98/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cf32c46e152058b81a11f3fe429be2d76cff98/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs?ref=01cf32c46e152058b81a11f3fe429be2d76cff98", "patch": "@@ -1,5 +1,4 @@\n mod runnables;\n-mod type_of;\n \n use ra_syntax::TextRange;\n use test_utils::{assert_eq_dbg, assert_eq_text};"}, {"sha": "9d15b52a889d5fa4048633bcb9825e39e6456c19", "filename": "crates/ra_analysis/tests/test/type_of.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/be84a112a75f4e9acac76c497d714aba8d465ed2/crates%2Fra_analysis%2Ftests%2Ftest%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be84a112a75f4e9acac76c497d714aba8d465ed2/crates%2Fra_analysis%2Ftests%2Ftest%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftest%2Ftype_of.rs?ref=be84a112a75f4e9acac76c497d714aba8d465ed2", "patch": "@@ -1,77 +0,0 @@\n-use ra_analysis::mock_analysis::single_file_with_range;\n-\n-#[test]\n-fn test_type_of_for_function() {\n-    let (analysis, range) = single_file_with_range(\n-        \"\n-        pub fn foo() -> u32 { 1 };\n-\n-        fn main() {\n-            let foo_test = <|>foo()<|>;\n-        }\n-        \",\n-    );\n-\n-    let type_name = analysis.type_of(range).unwrap().unwrap();\n-    assert_eq!(\"u32\", &type_name);\n-}\n-\n-// FIXME: improve type_of to make this work\n-#[test]\n-fn test_type_of_for_num() {\n-    let (analysis, range) = single_file_with_range(\n-        r#\"\n-        fn main() {\n-            let foo_test = <|>\"foo\"<|>;\n-        }\n-        \"#,\n-    );\n-\n-    assert!(analysis.type_of(range).unwrap().is_none());\n-}\n-// FIXME: improve type_of to make this work\n-#[test]\n-fn test_type_of_for_binding() {\n-    let (analysis, range) = single_file_with_range(\n-        \"\n-        pub fn foo() -> u32 { 1 };\n-\n-        fn main() {\n-            let <|>foo_test<|> = foo();\n-        }\n-        \",\n-    );\n-\n-    assert!(analysis.type_of(range).unwrap().is_none());\n-}\n-\n-// FIXME: improve type_of to make this work\n-#[test]\n-fn test_type_of_for_expr_1() {\n-    let (analysis, range) = single_file_with_range(\n-        \"\n-        fn main() {\n-            let foo = <|>1 + foo_test<|>;\n-        }\n-        \",\n-    );\n-\n-    let type_name = analysis.type_of(range).unwrap().unwrap();\n-    assert_eq!(\"[unknown]\", &type_name);\n-}\n-\n-// FIXME: improve type_of to make this work\n-#[test]\n-fn test_type_of_for_expr_2() {\n-    let (analysis, range) = single_file_with_range(\n-        \"\n-        fn main() {\n-            let foo: usize = 1;\n-            let bar = <|>1 + foo_test<|>;\n-        }\n-        \",\n-    );\n-\n-    let type_name = analysis.type_of(range).unwrap().unwrap();\n-    assert_eq!(\"[unknown]\", &type_name);\n-}"}]}