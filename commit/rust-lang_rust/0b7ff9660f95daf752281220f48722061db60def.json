{"sha": "0b7ff9660f95daf752281220f48722061db60def", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiN2ZmOTY2MGY5NWRhZjc1MjI4MTIyMGY0ODcyMjA2MWRiNjBkZWY=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-07-06T20:48:49Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-07-09T14:00:20Z"}, "message": "Add note on why the variable is not fully captured", "tree": {"sha": "54e9889f1ca94470d26628c87cf3b02d1849ba88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e9889f1ca94470d26628c87cf3b02d1849ba88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7ff9660f95daf752281220f48722061db60def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7ff9660f95daf752281220f48722061db60def", "html_url": "https://github.com/rust-lang/rust/commit/0b7ff9660f95daf752281220f48722061db60def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7ff9660f95daf752281220f48722061db60def/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee86f96ba176f598d64dc9f3bb7e074d5b8b86b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee86f96ba176f598d64dc9f3bb7e074d5b8b86b6", "html_url": "https://github.com/rust-lang/rust/commit/ee86f96ba176f598d64dc9f3bb7e074d5b8b86b6"}], "stats": {"total": 302, "additions": 227, "deletions": 75}, "files": [{"sha": "106fea2b2f73d8030a622206830c7797beab52ff", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 61, "deletions": 31, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -510,6 +510,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         )\n                         .as_str(),\n                     );\n+                    for (var_hir_id, diagnostics_info) in need_migrations.iter() {\n+                        for (captured_hir_id, captured_name) in diagnostics_info.iter() {\n+                            if let Some(captured_hir_id) = captured_hir_id {\n+                                let cause_span = self.tcx.hir().span(*captured_hir_id);\n+                                diagnostics_builder.span_label(cause_span, format!(\"in Rust 2018, closure captures all of `{}`, but in Rust 2021, it only captures `{}`\",\n+                                    self.tcx.hir().name(*var_hir_id),\n+                                    captured_name,\n+                                ));\n+                            }\n+                        }\n+                    }\n                     diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n                     let closure_body_span = self.tcx.hir().span(body_id.hir_id);\n                     let (sugg, app) =\n@@ -579,13 +590,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         var_hir_id: hir::HirId,\n         check_trait: Option<DefId>,\n         closure_clause: hir::CaptureBy,\n-    ) -> bool {\n+    ) -> Option<(Option<hir::HirId>, String)> {\n         let root_var_min_capture_list = if let Some(root_var_min_capture_list) =\n             min_captures.and_then(|m| m.get(&var_hir_id))\n         {\n             root_var_min_capture_list\n         } else {\n-            return false;\n+            return None;\n         };\n \n         let ty = self.infcx.resolve_vars_if_possible(self.node_ty(var_hir_id));\n@@ -639,10 +650,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .unwrap_or(false);\n \n             if !obligation_holds_for_capture && obligation_should_hold {\n-                return true;\n+                return Some((capture.info.path_expr_id, capture.to_string(self.tcx)));\n             }\n         }\n-        false\n+        None\n     }\n \n     /// Figures out the list of root variables (and their types) that aren't completely\n@@ -660,68 +671,75 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n         var_hir_id: hir::HirId,\n         closure_clause: hir::CaptureBy,\n-    ) -> Option<FxHashSet<&str>> {\n+    ) -> Option<(FxHashSet<&str>, FxHashSet<(Option<hir::HirId>, String)>)> {\n         let tcx = self.infcx.tcx;\n \n         // Check whether catpured fields also implement the trait\n         let mut auto_trait_reasons = FxHashSet::default();\n+        let mut diagnostics_info = FxHashSet::default();\n \n-        if self.need_2229_migrations_for_trait(\n+        if let Some(info) = self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n             tcx.lang_items().clone_trait(),\n             closure_clause,\n         ) {\n             auto_trait_reasons.insert(\"`Clone`\");\n+            diagnostics_info.insert(info);\n         }\n \n-        if self.need_2229_migrations_for_trait(\n+        if let Some(info) = self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n             tcx.lang_items().sync_trait(),\n             closure_clause,\n         ) {\n             auto_trait_reasons.insert(\"`Sync`\");\n+            diagnostics_info.insert(info);\n         }\n \n-        if self.need_2229_migrations_for_trait(\n+        if let Some(info) = self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n             tcx.get_diagnostic_item(sym::send_trait),\n             closure_clause,\n         ) {\n             auto_trait_reasons.insert(\"`Send`\");\n+            diagnostics_info.insert(info);\n         }\n \n-        if self.need_2229_migrations_for_trait(\n+        if let Some(info) = self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n             tcx.lang_items().unpin_trait(),\n             closure_clause,\n         ) {\n             auto_trait_reasons.insert(\"`Unpin`\");\n+            diagnostics_info.insert(info);\n         }\n \n-        if self.need_2229_migrations_for_trait(\n+        if let Some(info) = self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n             tcx.get_diagnostic_item(sym::unwind_safe_trait),\n             closure_clause,\n         ) {\n             auto_trait_reasons.insert(\"`UnwindSafe`\");\n+            diagnostics_info.insert(info);\n         }\n \n-        if self.need_2229_migrations_for_trait(\n+        if let Some(info) = self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n             tcx.get_diagnostic_item(sym::ref_unwind_safe_trait),\n             closure_clause,\n         ) {\n             auto_trait_reasons.insert(\"`RefUnwindSafe`\");\n+            diagnostics_info.insert(info);\n         }\n \n         if auto_trait_reasons.len() > 0 {\n-            return Some(auto_trait_reasons);\n+            return Some((auto_trait_reasons, diagnostics_info));\n         }\n \n         return None;\n@@ -746,11 +764,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n         closure_clause: hir::CaptureBy,\n         var_hir_id: hir::HirId,\n-    ) -> bool {\n+    ) -> Option<FxHashSet<(Option<hir::HirId>, String)>> {\n         let ty = self.infcx.resolve_vars_if_possible(self.node_ty(var_hir_id));\n \n         if !ty.has_significant_drop(self.tcx, self.tcx.param_env(closure_def_id.expect_local())) {\n-            return false;\n+            return None;\n         }\n \n         let root_var_min_capture_list = if let Some(root_var_min_capture_list) =\n@@ -763,21 +781,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             match closure_clause {\n                 // Only migrate if closure is a move closure\n-                hir::CaptureBy::Value => return true,\n+                hir::CaptureBy::Value => return Some(FxHashSet::default()),\n                 hir::CaptureBy::Ref => {}\n             }\n \n-            return false;\n+            return None;\n         };\n \n-        let projections_list = root_var_min_capture_list\n-            .iter()\n-            .filter_map(|captured_place| match captured_place.info.capture_kind {\n+        let mut projections_list = Vec::new();\n+        let mut diagnostics_info = FxHashSet::default();\n+\n+        for captured_place in root_var_min_capture_list.iter() {\n+            match captured_place.info.capture_kind {\n                 // Only care about captures that are moved into the closure\n-                ty::UpvarCapture::ByValue(..) => Some(captured_place.place.projections.as_slice()),\n-                ty::UpvarCapture::ByRef(..) => None,\n-            })\n-            .collect::<Vec<_>>();\n+                ty::UpvarCapture::ByValue(..) => {\n+                    projections_list.push(captured_place.place.projections.as_slice());\n+                    diagnostics_info.insert((\n+                        captured_place.info.path_expr_id,\n+                        captured_place.to_string(self.tcx),\n+                    ));\n+                }\n+                ty::UpvarCapture::ByRef(..) => {}\n+            }\n+        }\n \n         let is_moved = !projections_list.is_empty();\n \n@@ -793,10 +819,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 projections_list,\n             )\n         {\n-            return true;\n+            return Some(diagnostics_info);\n         }\n \n-        return false;\n+        return None;\n     }\n \n     /// Figures out the list of root variables (and their types) that aren't completely\n@@ -820,7 +846,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         closure_span: Span,\n         closure_clause: hir::CaptureBy,\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n-    ) -> (Vec<hir::HirId>, String) {\n+    ) -> (Vec<(hir::HirId, FxHashSet<(Option<hir::HirId>, String)>)>, String) {\n         let upvars = if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n             upvars\n         } else {\n@@ -834,14 +860,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Perform auto-trait analysis\n         for (&var_hir_id, _) in upvars.iter() {\n             let mut need_migration = false;\n-            if let Some(trait_migration_cause) =\n+            let mut responsible_captured_hir_ids = FxHashSet::default();\n+\n+            if let Some((trait_migration_cause, diagnostics_info)) =\n                 self.compute_2229_migrations_for_trait(min_captures, var_hir_id, closure_clause)\n             {\n                 need_migration = true;\n                 auto_trait_reasons.extend(trait_migration_cause);\n+                responsible_captured_hir_ids.extend(diagnostics_info);\n             }\n \n-            if self.compute_2229_migrations_for_drop(\n+            if let Some(diagnostics_info) = self.compute_2229_migrations_for_drop(\n                 closure_def_id,\n                 closure_span,\n                 min_captures,\n@@ -850,10 +879,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ) {\n                 need_migration = true;\n                 drop_reorder_reason = true;\n+                responsible_captured_hir_ids.extend(diagnostics_info);\n             }\n \n             if need_migration {\n-                need_migrations.push(var_hir_id);\n+                need_migrations.push((var_hir_id, responsible_captured_hir_ids));\n             }\n         }\n \n@@ -1877,10 +1907,10 @@ fn should_do_rust_2021_incompatible_closure_captures_analysis(\n /// - s2: Comma separated names of the variables being migrated.\n fn migration_suggestion_for_2229(\n     tcx: TyCtxt<'_>,\n-    need_migrations: &Vec<hir::HirId>,\n+    need_migrations: &Vec<(hir::HirId, FxHashSet<(Option<hir::HirId>, String)>)>,\n ) -> (String, String) {\n     let need_migrations_variables =\n-        need_migrations.iter().map(|v| var_name(tcx, *v)).collect::<Vec<_>>();\n+        need_migrations.iter().map(|(v, _)| var_name(tcx, *v)).collect::<Vec<_>>();\n \n     let migration_ref_concat =\n         need_migrations_variables.iter().map(|v| format!(\"&{}\", v)).collect::<Vec<_>>().join(\", \");"}, {"sha": "39b9dc2e22fa4329fb3a19212d458940ad6e345b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -6,6 +6,7 @@ LL |       thread::spawn(move || unsafe {\n LL | |\n LL | |\n LL | |         *fptr.0 = 20;\n+   | |         ------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n LL | |     });\n    | |_____^\n    |\n@@ -32,6 +33,7 @@ LL |       thread::spawn(move || unsafe {\n LL | |\n LL | |\n LL | |         *fptr.0.0 = 20;\n+   | |         --------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`\n LL | |     });\n    | |_____^\n    |\n@@ -53,6 +55,7 @@ LL |       let c = || {\n LL | |\n LL | |\n LL | |         let f_1 = f.1;\n+   | |                   --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`\n LL | |         println!(\"{:?}\", f_1.0);\n LL | |     };\n    | |_____^"}, {"sha": "71fa99997d3883f467a81e47f2aaa818582aa3a9", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -18,8 +18,11 @@ fn test1_all_need_migration() {\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n         let _t2 = t2.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n     };\n \n     c();\n@@ -37,7 +40,9 @@ fn test2_only_precise_paths_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n         let _t2 = t2;\n     };\n \n@@ -54,6 +59,7 @@ fn test3_only_by_value_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         println!(\"{}\", t1.1);\n     };\n \n@@ -73,6 +79,7 @@ fn test4_only_non_copy_types_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n     };\n \n@@ -92,6 +99,7 @@ fn test5_only_drop_types_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _s = s.0;\n     };\n \n@@ -108,6 +116,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+        //~| NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n     };\n \n     c();\n@@ -124,6 +134,7 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     };\n \n     c();"}, {"sha": "a80aa92aa80f4a5b422f3273b8a55723756771cf", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -18,8 +18,11 @@ fn test1_all_need_migration() {\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n         let _t2 = t2.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n     };\n \n     c();\n@@ -37,7 +40,9 @@ fn test2_only_precise_paths_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n         let _t2 = t2;\n     };\n \n@@ -54,6 +59,7 @@ fn test3_only_by_value_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         println!(\"{}\", t1.1);\n     };\n \n@@ -73,6 +79,7 @@ fn test4_only_non_copy_types_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n     };\n \n@@ -92,6 +99,7 @@ fn test5_only_drop_types_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _s = s.0;\n     };\n \n@@ -108,6 +116,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+        //~| NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n     };\n \n     c();\n@@ -124,6 +134,7 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     };\n \n     c();"}, {"sha": "64708027383db3e4f51e420e7814e75e1c2f0d0b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -6,8 +6,16 @@ LL |       let c = || {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |\n+LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n+LL | |         let _t1 = t1.0;\n+   | |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+LL | |\n LL | |         let _t2 = t2.0;\n+   | |                   ---- in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -28,14 +36,19 @@ LL |         let _t = t.0;\n  ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop.rs:35:13\n+  --> $DIR/insignificant_drop.rs:38:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n+LL | |         let _t1 = t1.0;\n+   | |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+LL | |\n LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n@@ -48,18 +61,20 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |         let _t1 = t1.0;\n+LL |\n  ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop.rs:52:13\n+  --> $DIR/insignificant_drop.rs:57:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n LL | |         println!(\"{}\", t1.1);\n LL | |     };\n    | |_____^\n@@ -72,18 +87,20 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |         println!(\"{}\", t1.1);\n+LL |\n  ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop.rs:71:13\n+  --> $DIR/insignificant_drop.rs:77:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n LL | |         let _t1 = t1.0;\n LL | |     };\n    | |_____^\n@@ -96,18 +113,20 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |         let _t1 = t1.0;\n+LL |\n  ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop.rs:90:13\n+  --> $DIR/insignificant_drop.rs:97:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n LL | |         let _s = s.0;\n LL | |     };\n    | |_____^\n@@ -120,18 +139,23 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |         let _s = s.0;\n+LL |\n  ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop.rs:106:13\n+  --> $DIR/insignificant_drop.rs:114:13\n    |\n LL |       let c = move || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         println!(\"{} {}\", t1.1, t.1);\n+   | |                           ----  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+   | |                           |\n+   | |                           in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n+LL | |\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -143,18 +167,20 @@ LL |\n LL |\n LL |\n LL |         println!(\"{} {}\", t1.1, t.1);\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop.rs:122:13\n+  --> $DIR/insignificant_drop.rs:132:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -166,8 +192,8 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: aborting due to 7 previous errors\n "}, {"sha": "f150bd8cc9cbb83867360276cf2d21362f92756a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -39,6 +39,7 @@ fn significant_drop_needs_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     };\n \n     c();\n@@ -57,6 +58,7 @@ fn generic_struct_with_significant_drop_needs_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n     };\n \n     c();"}, {"sha": "03c0ab959b25cad5a06848333e5cc228abcce854", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -39,6 +39,7 @@ fn significant_drop_needs_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     };\n \n     c();\n@@ -57,6 +58,7 @@ fn generic_struct_with_significant_drop_needs_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n     };\n \n     c();"}, {"sha": "478b331f7fa5b2f35900423363e36e5c7a5d5e64", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -7,6 +7,8 @@ LL | |\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -23,18 +25,20 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop_attr_migrations.rs:55:13\n+  --> $DIR/insignificant_drop_attr_migrations.rs:56:13\n    |\n LL |       let c = move || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         let _t = t.1;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -46,8 +50,8 @@ LL |\n LL |\n LL |\n LL |         let _t = t.1;\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a4a38d47500df87b8e9b017eb18d2fb9f442378d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -21,6 +21,8 @@ fn closure_contains_block() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+\n     };\n \n     c();\n@@ -30,6 +32,7 @@ fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || { let _ = &t; t.0 };\n     //~^ ERROR: drop order\n+    //~| NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n "}, {"sha": "01a47dffd85a898e11f342c0c81bc120dc640a97", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -21,6 +21,8 @@ fn closure_contains_block() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+\n     };\n \n     c();\n@@ -30,6 +32,7 @@ fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || t.0;\n     //~^ ERROR: drop order\n+    //~| NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n "}, {"sha": "58109128c2c07c9cb9c4e39eea3b252540891850", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -7,6 +7,9 @@ LL | |\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -23,14 +26,16 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/migrations_rustfix.rs:31:13\n+  --> $DIR/migrations_rustfix.rs:33:13\n    |\n LL |     let c = || t.0;\n-   |             ^^^^^^\n+   |             ^^^---\n+   |                |\n+   |                in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured"}, {"sha": "2513ceecc69984436e98da59b81236dc010806ae", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -6,6 +6,7 @@ LL |       let result = panic::catch_unwind(move || {\n LL | |\n LL | |\n LL | |         f.0()\n+   | |         --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.0`\n LL | |     });\n    | |_____^\n    |"}, {"sha": "09829123db3f43cde8443defb4d0e31968ec6dd8", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -6,6 +6,7 @@ LL |       let c = || {\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n LL | |         let _t = &t.1;\n LL | |     };\n    | |_____^\n@@ -34,8 +35,11 @@ LL |       let c = || {\n LL | |\n LL | |\n LL | |         let _x = u.0.0;\n+   | |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.0`\n LL | |         let _x = u.0.1;\n+   | |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.1`\n LL | |         let _x = u.1.0;\n+   | |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n LL | |     };\n    | |_____^\n    |"}, {"sha": "5bdefb6762e4ff648453e4d9156cd5ec7bdb0d48", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -27,8 +27,11 @@ fn test1_all_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n         let _t2 = t2.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n     };\n \n     c();\n@@ -46,7 +49,9 @@ fn test2_only_precise_paths_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n         let _t2 = t2;\n     };\n \n@@ -63,6 +68,7 @@ fn test3_only_by_value_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         println!(\"{:?}\", t1.1);\n     };\n \n@@ -81,6 +87,7 @@ fn test4_type_contains_drop_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     };\n \n     c();\n@@ -97,6 +104,7 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     };\n \n     c();\n@@ -111,6 +119,7 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n     };\n \n     c();\n@@ -127,6 +136,8 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n+        //~| NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n     };\n \n     c();"}, {"sha": "44119a76e14d0be05ebdeb4db0e4a7c95c711cf9", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -27,8 +27,11 @@ fn test1_all_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n         let _t2 = t2.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n     };\n \n     c();\n@@ -46,7 +49,9 @@ fn test2_only_precise_paths_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t1 = t1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n         let _t2 = t2;\n     };\n \n@@ -63,6 +68,7 @@ fn test3_only_by_value_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         println!(\"{:?}\", t1.1);\n     };\n \n@@ -81,6 +87,7 @@ fn test4_type_contains_drop_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     };\n \n     c();\n@@ -97,6 +104,7 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n     };\n \n     c();\n@@ -111,6 +119,7 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n     };\n \n     c();\n@@ -127,6 +136,8 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n+        //~^ NOTE: in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n+        //~| NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n     };\n \n     c();"}, {"sha": "fa4903b76badf0c4ce02fb6b3fd4eea954ea11fe", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 44, "deletions": 19, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ff9660f95daf752281220f48722061db60def/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=0b7ff9660f95daf752281220f48722061db60def", "patch": "@@ -6,8 +6,15 @@ LL |       let c = || {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n+LL | |         let _t1 = t1.0;\n+   | |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+LL | |\n LL | |         let _t2 = t2.0;\n+   | |                   ---- in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -24,18 +31,23 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |         let _t1 = t1.0;\n+LL |\n  ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/significant_drop.rs:44:13\n+  --> $DIR/significant_drop.rs:47:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n+LL | |         let _t1 = t1.0;\n+   | |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+LL | |\n LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n@@ -48,18 +60,20 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |         let _t1 = t1.0;\n+LL |\n  ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/significant_drop.rs:61:13\n+  --> $DIR/significant_drop.rs:66:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n LL | |         println!(\"{:?}\", t1.1);\n LL | |     };\n    | |_____^\n@@ -72,18 +86,20 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |         println!(\"{:?}\", t1.1);\n+LL |\n  ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/significant_drop.rs:79:13\n+  --> $DIR/significant_drop.rs:85:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -95,18 +111,20 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/significant_drop.rs:95:13\n+  --> $DIR/significant_drop.rs:102:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         let _t = t.0;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -118,18 +136,20 @@ LL |\n LL |\n LL |\n LL |         let _t = t.0;\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/significant_drop.rs:109:13\n+  --> $DIR/significant_drop.rs:117:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         let _t = t.1;\n+   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -141,18 +161,23 @@ LL |\n LL |\n LL |\n LL |         let _t = t.1;\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: drop order will change in Rust 2021\n-  --> $DIR/significant_drop.rs:125:13\n+  --> $DIR/significant_drop.rs:134:13\n    |\n LL |       let c = move || {\n    |  _____________^\n LL | |\n LL | |\n LL | |\n LL | |         println!(\"{:?} {:?}\", t1.1, t.1);\n+   | |                               ----  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+   | |                               |\n+   | |                               in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n+LL | |\n+LL | |\n LL | |     };\n    | |_____^\n    |\n@@ -164,8 +189,8 @@ LL |\n LL |\n LL |\n LL |         println!(\"{:?} {:?}\", t1.1, t.1);\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: aborting due to 7 previous errors\n "}]}