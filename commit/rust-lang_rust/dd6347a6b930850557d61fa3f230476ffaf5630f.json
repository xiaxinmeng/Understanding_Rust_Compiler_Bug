{"sha": "dd6347a6b930850557d61fa3f230476ffaf5630f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNjM0N2E2YjkzMDg1MDU1N2Q2MWZhM2YyMzA0NzZmZmFmNTYzMGY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-15T20:46:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-05T07:40:19Z"}, "message": "resolve: Integrate inert attributes registererd by legacy plugins into macro resolution", "tree": {"sha": "7ecc69197c1dcc3b90898d262fc27d7a088063db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ecc69197c1dcc3b90898d262fc27d7a088063db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd6347a6b930850557d61fa3f230476ffaf5630f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6347a6b930850557d61fa3f230476ffaf5630f", "html_url": "https://github.com/rust-lang/rust/commit/dd6347a6b930850557d61fa3f230476ffaf5630f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd6347a6b930850557d61fa3f230476ffaf5630f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8bea5a0a6aef3966008787a25949344f8cf6942", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bea5a0a6aef3966008787a25949344f8cf6942", "html_url": "https://github.com/rust-lang/rust/commit/b8bea5a0a6aef3966008787a25949344f8cf6942"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "5d9d4deb0abc9e95793aa303ce1a621980cc0b1c", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd6347a6b930850557d61fa3f230476ffaf5630f/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6347a6b930850557d61fa3f230476ffaf5630f/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=dd6347a6b930850557d61fa3f230476ffaf5630f", "patch": "@@ -36,6 +36,8 @@ pub enum NonMacroAttrKind {\n     Tool,\n     /// Single-segment custom attribute registered by a derive macro (`#[serde(default)]`).\n     DeriveHelper,\n+    /// Single-segment custom attriubte registered by a legacy plugin (`register_attribute`).\n+    LegacyPluginHelper,\n     /// Single-segment custom attribute not registered in any way (`#[my_attr]`).\n     Custom,\n }\n@@ -259,6 +261,7 @@ impl NonMacroAttrKind {\n             NonMacroAttrKind::Builtin => \"built-in attribute\",\n             NonMacroAttrKind::Tool => \"tool attribute\",\n             NonMacroAttrKind::DeriveHelper => \"derive helper attribute\",\n+            NonMacroAttrKind::LegacyPluginHelper => \"legacy plugin helper attribute\",\n             NonMacroAttrKind::Custom => \"custom attribute\",\n         }\n     }"}, {"sha": "a4386c6cbfd43e54d12c4c75f3480421b9b84d17", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd6347a6b930850557d61fa3f230476ffaf5630f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6347a6b930850557d61fa3f230476ffaf5630f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=dd6347a6b930850557d61fa3f230476ffaf5630f", "patch": "@@ -1012,6 +1012,7 @@ impl_stable_hash_for!(enum hir::def::NonMacroAttrKind {\n     Builtin,\n     Tool,\n     DeriveHelper,\n+    LegacyPluginHelper,\n     Custom,\n });\n "}, {"sha": "44f95dd307e1ead978577a9ae3917617c62aa2a2", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dd6347a6b930850557d61fa3f230476ffaf5630f/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6347a6b930850557d61fa3f230476ffaf5630f/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=dd6347a6b930850557d61fa3f230476ffaf5630f", "patch": "@@ -248,11 +248,6 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         for i in 0..attrs.len() {\n             let name = attrs[i].name();\n \n-            if self.session.plugin_attributes.borrow().iter()\n-                    .any(|&(ref attr_nm, _)| name == &**attr_nm) {\n-                attr::mark_known(&attrs[i]);\n-            }\n-\n             match self.builtin_macros.get(&name).cloned() {\n                 Some(binding) => match *binding.get_macro(self) {\n                     MultiModifier(..) | MultiDecorator(..) | SyntaxExtension::AttrProcMacro(..) => {\n@@ -591,6 +586,15 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // 2b. Standard library prelude is currently implemented as `macro-use` (closed, controlled)\n         // 3. Language prelude: builtin macros (closed, controlled, except for legacy plugins).\n         // 4. Language prelude: builtin attributes (closed, controlled).\n+        // N (unordered). Derive helpers (open, not controlled). All ambiguities with other names\n+        //    are currently reported as errors. They should be higher in priority than preludes\n+        //    and maybe even names in modules according to the \"general principles\" above. They\n+        //    also should be subject to restricted shadowing because are effectively produced by\n+        //    derives (you need to resolve the derive first to add helpers into scope), but they\n+        //    should be available before the derive is expanded for compatibility.\n+        //    It's mess in general, so we are being conservative for now.\n+        // N (unordered). Legacy plugin helpers (open, not controlled). Similar to derive helpers,\n+        //    but introduced by legacy plugins using `register_attribute`.\n \n         assert!(ns == TypeNS  || ns == MacroNS);\n         assert!(force || !record_used); // `record_used` implies `force`\n@@ -615,6 +619,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             BuiltinMacros,\n             BuiltinAttrs,\n             DeriveHelpers,\n+            LegacyPluginHelpers,\n             ExternPrelude,\n             ToolPrelude,\n             StdLibPrelude,\n@@ -681,6 +686,17 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                     result\n                 }\n+                WhereToResolve::LegacyPluginHelpers => {\n+                    if self.session.plugin_attributes.borrow().iter()\n+                                                     .any(|(name, _)| ident.name == &**name) {\n+                        let binding = (Def::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper),\n+                                       ty::Visibility::Public, ident.span, Mark::root())\n+                                       .to_name_binding(self.arenas);\n+                        Ok((binding, FromPrelude(false)))\n+                    } else {\n+                        Err(Determinacy::Determined)\n+                    }\n+                }\n                 WhereToResolve::ExternPrelude => {\n                     if use_prelude && self.session.extern_prelude.contains(&ident.name) {\n                         let crate_id =\n@@ -752,8 +768,9 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                     WhereToResolve::MacroUsePrelude => WhereToResolve::BuiltinMacros,\n                     WhereToResolve::BuiltinMacros => WhereToResolve::BuiltinAttrs,\n-                    WhereToResolve::BuiltinAttrs => break, // nowhere else to search\n-                    WhereToResolve::DeriveHelpers => WhereToResolve::Module(parent_scope.module),\n+                    WhereToResolve::BuiltinAttrs => WhereToResolve::DeriveHelpers,\n+                    WhereToResolve::DeriveHelpers => WhereToResolve::LegacyPluginHelpers,\n+                    WhereToResolve::LegacyPluginHelpers => break, // nowhere else to search\n                     WhereToResolve::ExternPrelude => WhereToResolve::ToolPrelude,\n                     WhereToResolve::ToolPrelude => WhereToResolve::StdLibPrelude,\n                     WhereToResolve::StdLibPrelude => WhereToResolve::BuiltinTypes,\n@@ -775,12 +792,15 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n                     if let Some(innermost_result) = innermost_result {\n                         // Found another solution, if the first one was \"weak\", report an error.\n-                        let (def, innermost_def) = (result.0.def(), innermost_result.0.def());\n-                        if def != innermost_def &&\n+                        let prohibit_ambiguities = |def| {\n+                            def == Def::NonMacroAttr(NonMacroAttrKind::DeriveHelper) ||\n+                            def == Def::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper)\n+                        };\n+                        if result.0.def() != innermost_result.0.def() &&\n                            (innermost_result.0.is_glob_import() ||\n                             innermost_result.0.may_appear_after(parent_scope.expansion, result.0) ||\n-                            innermost_def == Def::NonMacroAttr(NonMacroAttrKind::DeriveHelper) ||\n-                            def == Def::NonMacroAttr(NonMacroAttrKind::DeriveHelper)) {\n+                            prohibit_ambiguities(innermost_result.0.def()) ||\n+                            prohibit_ambiguities(result.0.def())) {\n                             self.ambiguity_errors.push(AmbiguityError {\n                                 ident,\n                                 b1: innermost_result.0,"}]}