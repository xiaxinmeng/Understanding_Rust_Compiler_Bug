{"sha": "be55ad53a1da73203e73ad3ff8ef0bad6c955e6c", "node_id": "C_kwDOAAsO6NoAKGJlNTVhZDUzYTFkYTczMjAzZTczYWQzZmY4ZWYwYmFkNmM5NTVlNmM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-17T22:12:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-18T19:25:07Z"}, "message": "Remove default trait RPITIT candidates", "tree": {"sha": "680221117649c1e44c8c7b1d9144bef608328c8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/680221117649c1e44c8c7b1d9144bef608328c8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be55ad53a1da73203e73ad3ff8ef0bad6c955e6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be55ad53a1da73203e73ad3ff8ef0bad6c955e6c", "html_url": "https://github.com/rust-lang/rust/commit/be55ad53a1da73203e73ad3ff8ef0bad6c955e6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be55ad53a1da73203e73ad3ff8ef0bad6c955e6c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb5c4581a386b13c414e8c8bd73846ef37236d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5c4581a386b13c414e8c8bd73846ef37236d1", "html_url": "https://github.com/rust-lang/rust/commit/3eb5c4581a386b13c414e8c8bd73846ef37236d1"}], "stats": {"total": 36, "additions": 3, "deletions": 33}, "files": [{"sha": "1c66fb257ebb56acbc68b244ffd52a2bf114d1de", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/be55ad53a1da73203e73ad3ff8ef0bad6c955e6c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be55ad53a1da73203e73ad3ff8ef0bad6c955e6c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=be55ad53a1da73203e73ad3ff8ef0bad6c955e6c", "patch": "@@ -90,15 +90,7 @@ enum ProjectionCandidate<'tcx> {\n     /// From an \"impl\" (or a \"pseudo-impl\" returned by select)\n     Select(Selection<'tcx>),\n \n-    ImplTraitInTrait(ImplTraitInTraitCandidate<'tcx>),\n-}\n-\n-#[derive(PartialEq, Eq, Debug)]\n-enum ImplTraitInTraitCandidate<'tcx> {\n-    // The `impl Trait` from a trait function's default body\n-    Trait,\n-    // A concrete type provided from a trait's `impl Trait` from an impl\n-    Impl(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n+    ImplTraitInTrait(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n }\n \n enum ProjectionCandidateSet<'tcx> {\n@@ -1292,17 +1284,6 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.def_id) == DefKind::ImplTraitPlaceholder {\n         let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n-        // If we are trying to project an RPITIT with trait's default `Self` parameter,\n-        // then we must be within a default trait body.\n-        if obligation.predicate.self_ty()\n-            == ty::InternalSubsts::identity_for_item(tcx, obligation.predicate.def_id).type_at(0)\n-            && tcx.associated_item(trait_fn_def_id).defaultness(tcx).has_value()\n-        {\n-            candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n-                ImplTraitInTraitCandidate::Trait,\n-            ));\n-            return;\n-        }\n \n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n@@ -1313,9 +1294,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n-                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n-                        ImplTraitInTraitCandidate::Impl(data),\n-                    ));\n+                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n                     Ok(())\n                 }\n                 Ok(None) => {\n@@ -1777,18 +1756,9 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionCandidate::Select(impl_source) => {\n             confirm_select_candidate(selcx, obligation, impl_source)\n         }\n-        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Impl(data)) => {\n+        ProjectionCandidate::ImplTraitInTrait(data) => {\n             confirm_impl_trait_in_trait_candidate(selcx, obligation, data)\n         }\n-        // If we're projecting an RPITIT for a default trait body, that's just\n-        // the same def-id, but as an opaque type (with regular RPIT semantics).\n-        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Trait) => Progress {\n-            term: selcx\n-                .tcx()\n-                .mk_opaque(obligation.predicate.def_id, obligation.predicate.substs)\n-                .into(),\n-            obligations: vec![],\n-        },\n     };\n \n     // When checking for cycle during evaluation, we compare predicates with"}]}