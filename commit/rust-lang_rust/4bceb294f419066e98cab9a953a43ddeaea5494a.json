{"sha": "4bceb294f419066e98cab9a953a43ddeaea5494a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiY2ViMjk0ZjQxOTA2NmU5OGNhYjlhOTUzYTQzZGRlYWVhNTQ5NGE=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-02-26T16:42:51Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-09T19:31:31Z"}, "message": "Clean up todos\n\nAlso add some span_bugs where it is unreachable", "tree": {"sha": "445f73f258797c10265a730396a36b71d406b0e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/445f73f258797c10265a730396a36b71d406b0e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bceb294f419066e98cab9a953a43ddeaea5494a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bceb294f419066e98cab9a953a43ddeaea5494a", "html_url": "https://github.com/rust-lang/rust/commit/4bceb294f419066e98cab9a953a43ddeaea5494a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bceb294f419066e98cab9a953a43ddeaea5494a/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "html_url": "https://github.com/rust-lang/rust/commit/217ff6b7ea5ca80b01ee1436914a061ed190d8a8"}], "stats": {"total": 141, "additions": 63, "deletions": 78}, "files": [{"sha": "8edb883ccb5f9c7469241695cb2c870fb8db686f", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=4bceb294f419066e98cab9a953a43ddeaea5494a", "patch": "@@ -11,7 +11,6 @@\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n #![warn(unreachable_pub)]\n-#![feature(box_patterns)]\n \n extern crate snap;\n #[macro_use]"}, {"sha": "5b8bb7257e2303ed7b41cd0e51073b0eea6f4b77", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=4bceb294f419066e98cab9a953a43ddeaea5494a", "patch": "@@ -629,18 +629,11 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n \n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ..\n-                /*\n-                src,\n-                dst,\n-                count,\n-                */\n             }) => {\n-                unreachable!()\n-                /*\n-                self.consume_operand(location, (src, span), flow_state);\n-                self.consume_operand(location, (dst, span), flow_state);\n-                self.consume_operand(location, (count, span), flow_state);\n-                */\n+                span_bug!(\n+                    span,\n+                    \"Unexpected CopyNonOverlapping, should only appear after lower_intrinsics\",\n+                )\n             }\n             StatementKind::Nop\n             | StatementKind::Coverage(..)"}, {"sha": "ab7e75bf4f10c7f282d59ae2ff9fe847c97e534e", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=4bceb294f419066e98cab9a953a43ddeaea5494a", "patch": "@@ -1521,40 +1521,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n-                ref src,\n-                ref dst,\n-                ref count,\n-            }) => {\n-                let op_src_ty = self.normalize(src.ty(body, self.tcx()), location);\n-                let op_dst_ty = self.normalize(dst.ty(body, self.tcx()), location);\n-                // since CopyNonOverlapping is parametrized by 1 type,\n-                // we only need to check that they are equal and not keep an extra parameter.\n-                if let Err(terr) = self.eq_types(\n-                    op_src_ty,\n-                    op_dst_ty,\n-                    location.to_locations(),\n-                    ConstraintCategory::Internal,\n-                ) {\n-                    span_mirbug!(\n-                        self,\n-                        stmt,\n-                        \"bad arg ({:?} != {:?}): {:?}\",\n-                        op_src_ty,\n-                        op_dst_ty,\n-                        terr\n-                    );\n-                }\n-\n-                let op_cnt_ty = self.normalize(count.ty(body, self.tcx()), location);\n-                if let Err(terr) = self.eq_types(\n-                    op_cnt_ty,\n-                    tcx.types.usize,\n-                    location.to_locations(),\n-                    ConstraintCategory::Internal,\n-                ) {\n-                    span_mirbug!(self, stmt, \"bad arg ({:?} != usize): {:?}\", op_cnt_ty, terr);\n-                }\n-            }\n+                ..\n+            }) => span_bug!(\n+                stmt.source_info.span,\n+                \"Unexpected StatementKind::CopyNonOverlapping, should only appear after lowering_intrinsics\",\n+            ),\n             StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)"}, {"sha": "f24d0f0266d9f835c754d1b9277c7d4c814fdc90", "filename": "compiler/rustc_mir/src/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs?ref=4bceb294f419066e98cab9a953a43ddeaea5494a", "patch": "@@ -305,9 +305,8 @@ impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::Coverage(..)\n+            | mir::StatementKind::CopyNonOverlapping(..)\n             | mir::StatementKind::Nop => {}\n-\n-            mir::StatementKind::CopyNonOverlapping(..) => todo!(),\n         }\n     }\n "}, {"sha": "792664597fd9aabc07b1f89dc2dea83b9111b021", "filename": "compiler/rustc_mir/src/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=4bceb294f419066e98cab9a953a43ddeaea5494a", "patch": "@@ -149,9 +149,8 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir,\n             | StatementKind::FakeRead(..)\n             | StatementKind::Nop\n             | StatementKind::Retag(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::StorageLive(..) => {}\n-\n-            StatementKind::CopyNonOverlapping(..) => todo!(),\n         }\n     }\n "}, {"sha": "1ddd81e779b1587211d18fb8fc90e38b47195535", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=4bceb294f419066e98cab9a953a43ddeaea5494a", "patch": "@@ -318,9 +318,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {}\n-\n-            StatementKind::CopyNonOverlapping(..) => todo!(),\n         }\n     }\n "}, {"sha": "25c3c2c632d8166f3de9c4730ac35e3ecc63b766", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=4bceb294f419066e98cab9a953a43ddeaea5494a", "patch": "@@ -323,26 +323,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = Scalar::from_uint(truncated_bits, layout.size);\n                 self.write_scalar(result, dest)?;\n             }\n-            sym::copy_nonoverlapping => {\n-                self.copy_nonoverlapping(args[0], args[1], args[2])?;\n-            }\n             sym::copy => {\n-                let elem_ty = instance.substs.type_at(0);\n-                let elem_layout = self.layout_of(elem_ty)?;\n-                let count = self.read_scalar(&args[2])?.to_machine_usize(self)?;\n-                let elem_align = elem_layout.align.abi;\n-\n-                let size = elem_layout.size.checked_mul(count, self).ok_or_else(|| {\n-                    err_ub_format!(\"overflow computing total size of `{}`\", intrinsic_name)\n-                })?;\n-                let src = self.read_scalar(&args[0])?.check_init()?;\n-                let src = self.memory.check_ptr_access(src, size, elem_align)?;\n-                let dest = self.read_scalar(&args[1])?.check_init()?;\n-                let dest = self.memory.check_ptr_access(dest, size, elem_align)?;\n-\n-                if let (Some(src), Some(dest)) = (src, dest) {\n-                    self.memory.copy(src, dest, size, false)?;\n-                }\n+                self.copy(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n             }\n             sym::offset => {\n                 let ptr = self.read_scalar(&args[0])?.check_init()?;"}, {"sha": "0f365eaa41dded3249298f7d1d35770af198a063", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=4bceb294f419066e98cab9a953a43ddeaea5494a", "patch": "@@ -120,7 +120,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 let src = self.eval_operand(src, None)?;\n                 let dst = self.eval_operand(dst, None)?;\n-                self.copy_nonoverlapping(src, dst, count)?;\n+                self.copy(&src, &dst, &count, /* nonoverlapping */ true)?;\n             }\n \n             // Statements we do not track.\n@@ -150,11 +150,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub(crate) fn copy_nonoverlapping(\n+    pub(crate) fn copy(\n         &mut self,\n-        src: OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        dst: OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        count: OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        src: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        nonoverlapping: bool,\n     ) -> InterpResult<'tcx> {\n         let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n         let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n@@ -170,7 +171,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         })?;\n \n         if let (Some(src), Some(dst)) = (src, dst) {\n-            self.memory.copy(src, dst, size, /*nonoverlapping*/ true)?;\n+            self.memory.copy(src, dst, size, nonoverlapping)?;\n         }\n         Ok(())\n     }"}, {"sha": "d009b0b1b238425386c8c026a565ca4e8cbcb17f", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bceb294f419066e98cab9a953a43ddeaea5494a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=4bceb294f419066e98cab9a953a43ddeaea5494a", "patch": "@@ -294,7 +294,49 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            _ => {}\n+            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ref src,\n+                ref dst,\n+                ref count,\n+            }) => {\n+                let src_ty = src.ty(&self.body.local_decls, self.tcx);\n+                let op_src_ty = if let Some(src_deref) = src_ty.builtin_deref(true) {\n+                    src_deref.ty\n+                } else {\n+                    self.fail(\n+                        location,\n+                        format!(\"Expected src to be ptr in copy_nonoverlapping, got: {}\", src_ty),\n+                    );\n+                    return;\n+                };\n+                let dst_ty = dst.ty(&self.body.local_decls, self.tcx);\n+                let op_dst_ty = if let Some(dst_deref) = dst_ty.builtin_deref(true) {\n+                    dst_deref.ty\n+                } else {\n+                    self.fail(\n+                        location,\n+                        format!(\"Expected dst to be ptr in copy_nonoverlapping, got: {}\", dst_ty),\n+                    );\n+                    return;\n+                };\n+                // since CopyNonOverlapping is parametrized by 1 type,\n+                // we only need to check that they are equal and not keep an extra parameter.\n+                if op_src_ty != op_dst_ty {\n+                    self.fail(location, format!(\"bad arg ({:?} != {:?})\", op_src_ty, op_dst_ty));\n+                }\n+\n+                let op_cnt_ty = count.ty(&self.body.local_decls, self.tcx);\n+                if op_cnt_ty != self.tcx.types.usize {\n+                    self.fail(location, format!(\"bad arg ({:?} != usize)\", op_cnt_ty))\n+                }\n+            }\n+            StatementKind::SetDiscriminant { .. }\n+            | StatementKind::StorageLive(..)\n+            | StatementKind::StorageDead(..)\n+            | StatementKind::LlvmInlineAsm(..)\n+            | StatementKind::Retag(_, _)\n+            | StatementKind::Coverage(_)\n+            | StatementKind::Nop => {}\n         }\n \n         self.super_statement(statement, location);"}]}