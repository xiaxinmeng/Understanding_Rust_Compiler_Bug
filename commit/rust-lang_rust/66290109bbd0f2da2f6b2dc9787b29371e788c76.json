{"sha": "66290109bbd0f2da2f6b2dc9787b29371e788c76", "node_id": "C_kwDOAAsO6NoAKDY2MjkwMTA5YmJkMGYyZGEyZjZiMmRjOTc4N2IyOTM3MWU3ODhjNzY", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-05-11T09:12:22Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-06-06T11:19:18Z"}, "message": "Address reviewer comments\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "b4911699f2059891a0a075df8fe2b916287aa2c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4911699f2059891a0a075df8fe2b916287aa2c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66290109bbd0f2da2f6b2dc9787b29371e788c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66290109bbd0f2da2f6b2dc9787b29371e788c76", "html_url": "https://github.com/rust-lang/rust/commit/66290109bbd0f2da2f6b2dc9787b29371e788c76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66290109bbd0f2da2f6b2dc9787b29371e788c76/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "843f90cbb72758a091db25653ac515098f18399d", "url": "https://api.github.com/repos/rust-lang/rust/commits/843f90cbb72758a091db25653ac515098f18399d", "html_url": "https://github.com/rust-lang/rust/commit/843f90cbb72758a091db25653ac515098f18399d"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "5eda860264c6c6fd3be104aea99c2c24e8c40f88", "filename": "library/core/src/any.rs", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/66290109bbd0f2da2f6b2dc9787b29371e788c76/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66290109bbd0f2da2f6b2dc9787b29371e788c76/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=66290109bbd0f2da2f6b2dc9787b29371e788c76", "patch": "@@ -93,7 +93,9 @@\n //! trait for objects which can provide data, and the [`request_value`] and [`request_ref`]\n //! functions for requesting data from an object which implements `Provider`. Generally, end users\n //! should not call `request_*` directly, they are helper functions for intermediate implementers\n-//! to use to implement a user-facing interface.\n+//! to use to implement a user-facing interface. This is purely for the sake of ergonomics, there is\n+//! safety concern here; intermediate implementers can typically support methods rather than\n+//! free functions and use more specific names.\n //!\n //! Typically, a data provider is a trait object of a trait which extends `Provider`. A user will\n //! request data from a trait object by specifying the type of the data.\n@@ -155,7 +157,6 @@\n \n use crate::fmt;\n use crate::intrinsics;\n-use crate::mem::transmute;\n \n ///////////////////////////////////////////////////////////////////////////////\n // Any trait\n@@ -781,18 +782,24 @@ pub trait Provider {\n     /// Data providers should implement this method to provide *all* values they are able to\n     /// provide by using `demand`.\n     ///\n+    /// Note that the `provide_*` methods on `Demand` have short-circuit semantics: if an earlier\n+    /// method has successfully provided a value, then later methods will not get an opportunity to\n+    /// provide.\n+    ///\n     /// # Examples\n     ///\n-    /// Provides a reference to a field with type `String` as a `&str`.\n+    /// Provides a reference to a field with type `String` as a `&str`, and a value of\n+    /// type `i32`.\n     ///\n     /// ```rust\n     /// # #![feature(provide_any)]\n     /// use std::any::{Provider, Demand};\n-    /// # struct SomeConcreteType { field: String }\n+    /// # struct SomeConcreteType { field: String, num_field: i32 }\n     ///\n     /// impl Provider for SomeConcreteType {\n     ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-    ///         demand.provide_ref::<str>(&self.field);\n+    ///         demand.provide_ref::<str>(&self.field)\n+    ///             .provide_value::<i32, _>(|| self.num_field);\n     ///     }\n     /// }\n     /// ```\n@@ -864,12 +871,18 @@ where\n /// A helper object for providing data by type.\n ///\n /// A data provider provides values by calling this type's provide methods.\n-#[allow(missing_debug_implementations)]\n #[unstable(feature = \"provide_any\", issue = \"96024\")]\n #[repr(transparent)]\n pub struct Demand<'a>(dyn Erased<'a> + 'a);\n \n impl<'a> Demand<'a> {\n+    /// Create a new `&mut Demand` from a `&mut dyn Erased` trait object.\n+    fn new<'b>(erased: &'b mut (dyn Erased<'a> + 'a)) -> &'b mut Demand<'a> {\n+        // SAFETY: transmuting `&mut (dyn Erased<'a> + 'a)` to `&mut Demand<'a>` is safe since\n+        // `Demand` is repr(transparent).\n+        unsafe { &mut *(erased as *mut dyn Erased<'a> as *mut Demand<'a>) }\n+    }\n+\n     /// Provide a value or other type with only static lifetimes.\n     ///\n     /// # Examples\n@@ -943,6 +956,13 @@ impl<'a> Demand<'a> {\n     }\n }\n \n+#[unstable(feature = \"provide_any\", issue = \"96024\")]\n+impl<'a> fmt::Debug for Demand<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"Demand\").finish_non_exhaustive()\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////////\n // Type tags\n ///////////////////////////////////////////////////////////////////////////////\n@@ -951,9 +971,9 @@ mod tags {\n     //! Type tags are used to identify a type using a separate value. This module includes type tags\n     //! for some very common types.\n     //!\n-    //! Many users of the provider APIs will not need to use type tags at all. But if you want to\n-    //! use them with more complex types (typically those including lifetime parameters), you will\n-    //! need to write your own tags.\n+    //! Currently type tags are not exposed to the user. But in the future, if you want to use the\n+    //! Provider API with more complex types (typically those including lifetime parameters), you\n+    //! will need to write your own tags.\n \n     use crate::marker::PhantomData;\n \n@@ -970,7 +990,7 @@ mod tags {\n     }\n \n     /// Similar to the [`Type`] trait, but represents a type which may be unsized (i.e., has a\n-    /// `'Sized` bound). E.g., `str`.\n+    /// `?Sized` bound). E.g., `str`.\n     pub trait MaybeSizedType<'a>: Sized + 'static {\n         type Reified: 'a + ?Sized;\n     }\n@@ -995,7 +1015,8 @@ mod tags {\n         type Reified = T;\n     }\n \n-    /// Type-based tag for `&'a T` types.\n+    /// Type-based tag for reference types (`&'a T`, where T is represented by\n+    /// `<I as MaybeSizedType<'a>>::Reified`.\n     #[derive(Debug)]\n     pub struct Ref<I>(PhantomData<I>);\n \n@@ -1014,28 +1035,26 @@ struct TaggedOption<'a, I: tags::Type<'a>>(Option<I::Reified>);\n \n impl<'a, I: tags::Type<'a>> TaggedOption<'a, I> {\n     fn as_demand(&mut self) -> &mut Demand<'a> {\n-        // SAFETY: transmuting `&mut (dyn Erased<'a> + 'a)` to `&mut Demand<'a>` is safe since\n-        // `Demand` is repr(transparent) and holds only a `dyn Erased<'a> + 'a`.\n-        unsafe { transmute(self as &mut (dyn Erased<'a> + 'a)) }\n+        Demand::new(self as &mut (dyn Erased<'a> + 'a))\n     }\n }\n \n /// Represents a type-erased but identifiable object.\n ///\n /// This trait is exclusively implemented by the `TaggedOption` type.\n-trait Erased<'a>: 'a {\n+unsafe trait Erased<'a>: 'a {\n     /// The `TypeId` of the erased type.\n     fn tag_id(&self) -> TypeId;\n }\n \n-impl<'a, I: tags::Type<'a>> Erased<'a> for TaggedOption<'a, I> {\n+unsafe impl<'a, I: tags::Type<'a>> Erased<'a> for TaggedOption<'a, I> {\n     fn tag_id(&self) -> TypeId {\n         TypeId::of::<I>()\n     }\n }\n \n #[unstable(feature = \"provide_any\", issue = \"96024\")]\n-impl<'a> dyn Erased<'a> {\n+impl<'a> dyn Erased<'a> + 'a {\n     /// Returns some reference to the dynamic value if it is tagged with `I`,\n     /// or `None` otherwise.\n     #[inline]\n@@ -1045,7 +1064,7 @@ impl<'a> dyn Erased<'a> {\n     {\n         if self.tag_id() == TypeId::of::<I>() {\n             // SAFETY: Just checked whether we're pointing to an I.\n-            Some(unsafe { &mut *(self as *mut Self as *mut TaggedOption<'a, I>) })\n+            Some(unsafe { &mut *(self as *mut Self).cast::<TaggedOption<'a, I>>() })\n         } else {\n             None\n         }"}]}