{"sha": "39a0969e64c06e7c6e5447b5633b02e4e4e931df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YTA5NjllNjRjMDZlN2M2ZTU0NDdiNTYzM2IwMmU0ZTRlOTMxZGY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-07T09:08:41Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T09:29:53Z"}, "message": "Make `NodeId` a `newtype_index` to enable niche optimizations", "tree": {"sha": "c7116613324f2ca4f3b54a21803f6d6a5cb63c9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7116613324f2ca4f3b54a21803f6d6a5cb63c9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a0969e64c06e7c6e5447b5633b02e4e4e931df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a0969e64c06e7c6e5447b5633b02e4e4e931df", "html_url": "https://github.com/rust-lang/rust/commit/39a0969e64c06e7c6e5447b5633b02e4e4e931df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a0969e64c06e7c6e5447b5633b02e4e4e931df/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1d79ae3ad36e82e2be33bea108d6a4e98ddce0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d79ae3ad36e82e2be33bea108d6a4e98ddce0b", "html_url": "https://github.com/rust-lang/rust/commit/d1d79ae3ad36e82e2be33bea108d6a4e98ddce0b"}], "stats": {"total": 72, "additions": 26, "deletions": 46}, "files": [{"sha": "d9963f23a1593c09aeade3ebb3777b1d42b7bf97", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=39a0969e64c06e7c6e5447b5633b02e4e4e931df", "patch": "@@ -49,7 +49,6 @@ use hir::map::{self, Map};\n use super::itemlikevisit::DeepVisitor;\n \n use std::cmp;\n-use std::u32;\n \n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n@@ -1152,8 +1151,8 @@ pub struct IdRange {\n impl IdRange {\n     pub fn max() -> IdRange {\n         IdRange {\n-            min: NodeId::from_u32(u32::MAX),\n-            max: NodeId::from_u32(u32::MIN),\n+            min: NodeId::MAX,\n+            max: NodeId::from_u32(0),\n         }\n     }\n "}, {"sha": "501c17867f0393ead30dc1452bbf37c84cf8a0ed", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=39a0969e64c06e7c6e5447b5633b02e4e4e931df", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n                                        .enumerate()\n                                        .find(|&(_, &entry)| hir_id == entry)\n                                        .expect(\"no node_to_hir_id entry\");\n-                let node_id = NodeId::new(node_id);\n+                let node_id = NodeId::from_usize(node_id);\n                 missing_items.push(format!(\"[local_id: {}, node:{}]\",\n                                            local_id,\n                                            self.hir_map.node_to_string(node_id)));"}, {"sha": "8582900b72c83c5b120a7cf5ee33a374cd174425", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=39a0969e64c06e7c6e5447b5633b02e4e4e931df", "patch": "@@ -393,7 +393,7 @@ impl Session {\n \n         match id.as_usize().checked_add(count) {\n             Some(next) => {\n-                self.next_node_id.set(ast::NodeId::new(next));\n+                self.next_node_id.set(ast::NodeId::from_usize(next));\n             }\n             None => bug!(\"Input too large, ran out of node ids!\"),\n         }\n@@ -1160,7 +1160,7 @@ pub fn build_session_(\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: 100,\n-        next_node_id: OneThread::new(Cell::new(NodeId::new(1))),\n+        next_node_id: OneThread::new(Cell::new(NodeId::from_u32(1))),\n         allocator_kind: Once::new(),\n         injected_panic_runtime: Once::new(),\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),"}, {"sha": "b26d4fd09e90b00a3368b97288d566fec50d1e6d", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=39a0969e64c06e7c6e5447b5633b02e4e4e931df", "patch": "@@ -566,7 +566,7 @@ impl FromStr for UserIdentifiedItem {\n     type Err = ();\n     fn from_str(s: &str) -> Result<UserIdentifiedItem, ()> {\n         Ok(s.parse()\n-            .map(ast::NodeId::new)\n+            .map(ast::NodeId::from_u32)\n             .map(ItemViaNode)\n             .unwrap_or_else(|_| ItemViaPath(s.split(\"::\").map(|s| s.to_string()).collect())))\n     }"}, {"sha": "5a91b50f6bcc9d1bbad31decd56904f167eb57b1", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=39a0969e64c06e7c6e5447b5633b02e4e4e931df", "patch": "@@ -663,7 +663,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let mut errors = false;\n         let mut seen_spans = FxHashSet::default();\n         let mut error_vec = Vec::new();\n-        let mut prev_root_id: NodeId = NodeId::new(0);\n+        let mut prev_root_id: NodeId = NodeId::from_u32(0);\n         for i in 0 .. self.determined_imports.len() {\n             let import = self.determined_imports[i];\n             let error = self.finalize_import(import);"}, {"sha": "b5ef14689f93abcf4ec2cb3ddcc6ad2e415049c9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=39a0969e64c06e7c6e5447b5633b02e4e4e931df", "patch": "@@ -18,7 +18,6 @@ pub use util::parser::ExprPrecedence;\n use ext::hygiene::{Mark, SyntaxContext};\n use print::pprust;\n use ptr::P;\n-use rustc_data_structures::indexed_vec;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_target::spec::abi::Abi;\n use source_map::{dummy_spanned, respan, Spanned};\n@@ -31,7 +30,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use serialize::{self, Decoder, Encoder};\n use std::fmt;\n-use std::u32;\n \n pub use rustc_target::abi::FloatTy;\n \n@@ -213,71 +211,53 @@ pub struct ParenthesisedArgs {\n     pub output: Option<P<Ty>>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-pub struct NodeId(u32);\n-\n-impl NodeId {\n-    pub fn new(x: usize) -> NodeId {\n-        assert!(x < (u32::MAX as usize));\n-        NodeId(x as u32)\n-    }\n-\n-    pub fn from_u32(x: u32) -> NodeId {\n-        NodeId(x)\n-    }\n-\n-    pub fn as_usize(&self) -> usize {\n-        self.0 as usize\n+// hack to ensure that we don't try to access the private parts of `NodeId` in this module\n+mod node_id_inner {\n+    use rustc_data_structures::indexed_vec::Idx;\n+    newtype_index! {\n+        pub struct NodeId {\n+            ENCODABLE = custom\n+        }\n     }\n+}\n \n-    pub fn as_u32(&self) -> u32 {\n-        self.0\n-    }\n+pub use self::node_id_inner::NodeId;\n \n+impl NodeId {\n     pub fn placeholder_from_mark(mark: Mark) -> Self {\n-        NodeId(mark.as_u32())\n+        NodeId::from_u32(mark.as_u32())\n     }\n \n     pub fn placeholder_to_mark(self) -> Mark {\n-        Mark::from_u32(self.0)\n+        Mark::from_u32(self.as_u32())\n     }\n }\n \n impl fmt::Display for NodeId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&self.0, f)\n+        fmt::Display::fmt(&self.as_u32(), f)\n     }\n }\n \n impl serialize::UseSpecializedEncodable for NodeId {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u32(self.0)\n+        s.emit_u32(self.as_u32())\n     }\n }\n \n impl serialize::UseSpecializedDecodable for NodeId {\n     fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n-        d.read_u32().map(NodeId)\n-    }\n-}\n-\n-impl indexed_vec::Idx for NodeId {\n-    fn new(idx: usize) -> Self {\n-        NodeId::new(idx)\n-    }\n-\n-    fn index(self) -> usize {\n-        self.as_usize()\n+        d.read_u32().map(NodeId::from_u32)\n     }\n }\n \n /// Node id used to represent the root of the crate.\n-pub const CRATE_NODE_ID: NodeId = NodeId(0);\n+pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n \n /// When parsing and doing expansions, we initially give all AST nodes this AST\n /// node value. Then later, in the renumber pass, we renumber them to have\n /// small, positive ids.\n-pub const DUMMY_NODE_ID: NodeId = NodeId(!0);\n+pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;\n \n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here."}, {"sha": "9bbd59e09be158710092ccd5d7ad8a7b36ba60f7", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a0969e64c06e7c6e5447b5633b02e4e4e931df/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=39a0969e64c06e7c6e5447b5633b02e4e4e931df", "patch": "@@ -26,6 +26,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(str_escape)]\n+#![feature(step_trait)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]\n \n@@ -37,7 +38,7 @@ extern crate serialize;\n #[macro_use] extern crate log;\n pub extern crate rustc_errors as errors;\n extern crate syntax_pos;\n-extern crate rustc_data_structures;\n+#[macro_use] extern crate rustc_data_structures;\n extern crate rustc_target;\n #[macro_use] extern crate scoped_tls;\n #[macro_use]"}]}