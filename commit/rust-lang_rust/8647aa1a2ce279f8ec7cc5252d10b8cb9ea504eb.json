{"sha": "8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDdhYTFhMmNlMjc5ZjhlYzdjYzUyNTJkMTBiOGNiOWVhNTA0ZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-24T23:04:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-24T23:04:54Z"}, "message": "Auto merge of #68526 - JohnTitor:rollup-3mmljof, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #68111 (Print constants in `type_name` for const generics)\n - #68374 (Fix invalid link to the C++ Exception Handling ABI documentation)\n - #68504 (Use check-pass mode for lint tests and nll tests)\n - #68509 (Clean up error codes E0223 and E0225 explanations)\n - #68511 (Remove unused ignore-license directives)\n - #68515 (Support feature process_set_argv0 for VxWorks)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ea761455fe8821274ff5db691e789a91a206631d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea761455fe8821274ff5db691e789a91a206631d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "html_url": "https://github.com/rust-lang/rust/commit/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d141df59703393c0c683abc259f9a8c3be041a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d141df59703393c0c683abc259f9a8c3be041a", "html_url": "https://github.com/rust-lang/rust/commit/c2d141df59703393c0c683abc259f9a8c3be041a"}, {"sha": "f998e275cae5320e75871c626c0f88eaef83d5e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f998e275cae5320e75871c626c0f88eaef83d5e4", "html_url": "https://github.com/rust-lang/rust/commit/f998e275cae5320e75871c626c0f88eaef83d5e4"}], "stats": {"total": 221, "additions": 131, "deletions": 90}, "files": [{"sha": "591ff9d7fdcaa3c24f7097b22b177d29063a0dcf", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -4,7 +4,7 @@\n //! \"Exception Handling in LLVM\" (llvm.org/docs/ExceptionHandling.html) and\n //! documents linked from it.\n //! These are also good reads:\n-//!     http://mentorembedded.github.io/cxx-abi/abi-eh.html\n+//!     https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html\n //!     http://monoinfinito.wordpress.com/series/exception-handling-in-c/\n //!     http://www.airs.com/blog/index.php?s=exception+frames\n //!"}, {"sha": "7dd3c8f4a72951d68c5a8f54c2c0a8ea2ac6c2fb", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -831,14 +831,27 @@ pub trait PrettyPrinter<'tcx>:\n         Ok(self)\n     }\n \n-    fn pretty_print_const(mut self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+    fn pretty_print_const(\n+        mut self,\n+        ct: &'tcx ty::Const<'tcx>,\n+        print_ty: bool,\n+    ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n         if self.tcx().sess.verbose() {\n             p!(write(\"Const({:?}: {:?})\", ct.val, ct.ty));\n             return Ok(self);\n         }\n \n+        macro_rules! print_underscore {\n+            () => {{\n+                p!(write(\"_\"));\n+                if print_ty {\n+                    p!(write(\": \"), print(ct.ty));\n+                }\n+            }};\n+        }\n+\n         match (ct.val, &ct.ty.kind) {\n             (_, ty::FnDef(did, substs)) => p!(print_value_path(*did, substs)),\n             (ty::ConstKind::Unevaluated(did, substs, promoted), _) => {\n@@ -857,22 +870,27 @@ pub trait PrettyPrinter<'tcx>:\n                                 {\n                                     p!(write(\"{}\", snip))\n                                 } else {\n-                                    p!(write(\"_: \"), print(ct.ty))\n+                                    print_underscore!()\n                                 }\n                             } else {\n-                                p!(write(\"_: \"), print(ct.ty))\n+                                print_underscore!()\n                             }\n                         }\n                     }\n                 }\n             }\n-            (ty::ConstKind::Infer(..), _) => p!(write(\"_: \"), print(ct.ty)),\n+            (ty::ConstKind::Infer(..), _) => print_underscore!(),\n             (ty::ConstKind::Param(ParamConst { name, .. }), _) => p!(write(\"{}\", name)),\n-            (ty::ConstKind::Value(value), _) => return self.pretty_print_const_value(value, ct.ty),\n+            (ty::ConstKind::Value(value), _) => {\n+                return self.pretty_print_const_value(value, ct.ty, print_ty);\n+            }\n \n             _ => {\n                 // fallback\n-                p!(write(\"{:?} : \", ct.val), print(ct.ty))\n+                p!(write(\"{:?}\", ct.val));\n+                if print_ty {\n+                    p!(write(\" : \"), print(ct.ty));\n+                }\n             }\n         };\n         Ok(self)\n@@ -882,6 +900,7 @@ pub trait PrettyPrinter<'tcx>:\n         mut self,\n         ct: ConstValue<'tcx>,\n         ty: Ty<'tcx>,\n+        print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n@@ -988,7 +1007,10 @@ pub trait PrettyPrinter<'tcx>:\n                 };\n                 if !printed {\n                     // fallback\n-                    p!(write(\"{:?} : \", ct), print(ty))\n+                    p!(write(\"{:?}\", ct));\n+                    if print_ty {\n+                        p!(write(\" : \"), print(ty));\n+                    }\n                 }\n             }\n         };\n@@ -1162,7 +1184,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     }\n \n     fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n-        self.pretty_print_const(ct)\n+        self.pretty_print_const(ct, true)\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {"}, {"sha": "0dedda9bb6b73e67c0017ab9f063dd494124dd3f", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -237,7 +237,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n         // only print integers\n         if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { .. })) = ct.val {\n             if ct.ty.is_integral() {\n-                return self.pretty_print_const(ct);\n+                return self.pretty_print_const(ct, true);\n             }\n         }\n         self.write_str(\"_\")?;"}, {"sha": "0d49f514ccf4d06d7fd9c176e694ad8817fda370", "filename": "src/librustc_error_codes/error_codes/E0223.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0223.md", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0223.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0223.md?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,5 +1,6 @@\n An attempt was made to retrieve an associated type, but the type was ambiguous.\n-For example:\n+\n+Erroneous code example:\n \n ```compile_fail,E0223\n trait MyTrait {type X; }"}, {"sha": "c306e710097157f994828a52f43e5c43dff0cc29", "filename": "src/librustc_error_codes/error_codes/E0225.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0225.md", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0225.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0225.md?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,12 +1,15 @@\n-You attempted to use multiple types as bounds for a closure or trait object.\n-Rust does not currently support this. A simple example that causes this error:\n+Multiple types were used as bounds for a closure or trait object.\n+\n+Erroneous code example:\n \n ```compile_fail,E0225\n fn main() {\n     let _: Box<dyn std::io::Read + std::io::Write>;\n }\n ```\n \n+Rust does not currently support this.\n+\n Auto traits such as Send and Sync are an exception to this rule:\n It's possible to have bounds of one non-builtin trait, plus any number of\n auto traits. For example, the following compiles correctly:"}, {"sha": "cd8bf7085d1b1c4fb8c383e730373027caeb3e08", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -69,9 +69,8 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n         }\n     }\n \n-    fn print_const(self, _: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n-        // don't print constants to the user\n-        Ok(self)\n+    fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+        self.pretty_print_const(ct, false)\n     }\n \n     fn print_dyn_existential("}, {"sha": "2383277ad7284adb92ab4d66104e4d9ec59656e6", "filename": "src/libstd/sys/cloudabi/abi/bitflags.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fbitflags.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -21,9 +21,6 @@\n // OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n // SUCH DAMAGE.\n \n-// Appease Rust's tidy.\n-// ignore-license\n-\n #[cfg(feature = \"bitflags\")]\n use bitflags::bitflags;\n "}, {"sha": "b02faf1830c53ac1edc1ca476d40fdfb7e350b1d", "filename": "src/libstd/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -26,7 +26,6 @@\n // Source: https://github.com/NuxiNL/cloudabi\n \n // Appease Rust's tidy.\n-// ignore-license\n // ignore-tidy-linelength\n \n //! **PLEASE NOTE: This entire crate including this"}, {"sha": "31e691dd1360b53df94ed31b3793d521f4efc812", "filename": "src/libstd/sys/vxworks/ext/process.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Fprocess.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -2,6 +2,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::ffi::OsStr;\n use crate::io;\n use crate::process;\n use crate::sys;\n@@ -105,6 +106,15 @@ pub trait CommandExt {\n     /// cross-platform `spawn` instead.\n     #[stable(feature = \"process_exec2\", since = \"1.9.0\")]\n     fn exec(&mut self) -> io::Error;\n+\n+    /// Set executable argument\n+    ///\n+    /// Set the first process argument, `argv[0]`, to something other than the\n+    /// default executable path.\n+    #[unstable(feature = \"process_set_argv0\", issue = \"66510\")]\n+    fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n+    where\n+        S: AsRef<OsStr>;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -130,6 +140,14 @@ impl CommandExt for process::Command {\n     fn exec(&mut self) -> io::Error {\n         self.as_inner_mut().exec(sys::process::Stdio::Inherit)\n     }\n+\n+    fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n+    where\n+        S: AsRef<OsStr>,\n+    {\n+        self.as_inner_mut().set_arg_0(arg.as_ref());\n+        self\n+    }\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`]."}, {"sha": "6d5506bec5f7dbceaa14217dafa77ce009f7b59b", "filename": "src/libstd/sys/vxworks/process/process_common.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -90,8 +90,8 @@ impl Command {\n         let program = os2c(program, &mut saw_nul);\n         Command {\n             argv: Argv(vec![program.as_ptr(), ptr::null()]),\n+            args: vec![program.clone()],\n             program,\n-            args: Vec::new(),\n             env: Default::default(),\n             cwd: None,\n             uid: None,\n@@ -104,11 +104,19 @@ impl Command {\n         }\n     }\n \n+    pub fn set_arg_0(&mut self, arg: &OsStr) {\n+        // Set a new arg0\n+        let arg = os2c(arg, &mut self.saw_nul);\n+        debug_assert!(self.argv.0.len() > 1);\n+        self.argv.0[0] = arg.as_ptr();\n+        self.args[0] = arg;\n+    }\n+\n     pub fn arg(&mut self, arg: &OsStr) {\n         // Overwrite the trailing NULL pointer in `argv` and then add a new null\n         // pointer.\n         let arg = os2c(arg, &mut self.saw_nul);\n-        self.argv.0[self.args.len() + 1] = arg.as_ptr();\n+        self.argv.0[self.args.len()] = arg.as_ptr();\n         self.argv.0.push(ptr::null());\n \n         // Also make sure we keep track of the owned value to schedule a\n@@ -133,6 +141,10 @@ impl Command {\n         &self.argv.0\n     }\n \n+    pub fn get_program(&self) -> &CStr {\n+        &*self.program\n+    }\n+\n     #[allow(dead_code)]\n     pub fn get_cwd(&self) -> &Option<CString> {\n         &self.cwd\n@@ -315,8 +327,12 @@ impl ChildStdio {\n \n impl fmt::Debug for Command {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}\", self.program)?;\n-        for arg in &self.args {\n+        if self.program != self.args[0] {\n+            write!(f, \"[{:?}] \", self.program)?;\n+        }\n+        write!(f, \"{:?}\", self.args[0])?;\n+\n+        for arg in &self.args[1..] {\n             write!(f, \" {:?}\", arg)?;\n         }\n         Ok(())"}, {"sha": "f7e84ae3de9c78ab328b2e9eba61a3e75fde2430", "filename": "src/libstd/sys/vxworks/process/process_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -67,7 +67,7 @@ impl Command {\n             let _lock = sys::os::env_lock();\n \n             let ret = libc::rtpSpawn(\n-                self.get_argv()[0],                             // executing program\n+                self.get_program().as_ptr(),\n                 self.get_argv().as_ptr() as *mut *const c_char, // argv\n                 c_envp as *mut *const c_char,\n                 100 as c_int, // initial priority"}, {"sha": "b97927124c30f0e6c99628cef67cd1be123a0825", "filename": "src/test/pretty/top-level-doc-comments.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fpretty%2Ftop-level-doc-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fpretty%2Ftop-level-doc-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftop-level-doc-comments.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,11 +1,6 @@\n /// Some doc comment.\n struct X;\n \n-// ignore-license\n-\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-\n // pp-exact\n \n // Test that rust can properly pretty print a doc comment if it's the first line in a file.  some"}, {"sha": "fea490cf9b45fb6347a8afa71a98636e8845914a", "filename": "src/test/run-make-fulldeps/c-dynamic-dylib/cfoo.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Fcfoo.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n #ifdef _WIN32\n __declspec(dllexport)\n #endif"}, {"sha": "fea490cf9b45fb6347a8afa71a98636e8845914a", "filename": "src/test/run-make-fulldeps/c-dynamic-rlib/cfoo.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Fcfoo.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,5 +1,3 @@\n-// ignore-license\n-\n #ifdef _WIN32\n __declspec(dllexport)\n #endif"}, {"sha": "bb4036b06e13b79a32ec78ae04db97590f54b2cc", "filename": "src/test/run-make-fulldeps/c-link-to-rust-dylib/bar.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2Fbar.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n void foo();\n \n int main() {"}, {"sha": "bb4036b06e13b79a32ec78ae04db97590f54b2cc", "filename": "src/test/run-make-fulldeps/c-link-to-rust-staticlib/bar.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2Fbar.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n void foo();\n \n int main() {"}, {"sha": "9fe07f82f9ed1495b13e4e4dcd2e092115b01b25", "filename": "src/test/run-make-fulldeps/c-static-dylib/cfoo.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Fcfoo.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,2 +1 @@\n-// ignore-license\n int foo() { return 0; }"}, {"sha": "9fe07f82f9ed1495b13e4e4dcd2e092115b01b25", "filename": "src/test/run-make-fulldeps/c-static-rlib/cfoo.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Fcfoo.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,2 +1 @@\n-// ignore-license\n int foo() { return 0; }"}, {"sha": "4c2fb9cdb8782b69d62487cd9f27db134cf2592f", "filename": "src/test/run-make-fulldeps/compiler-rt-works-on-mingw/foo.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.cpp?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n extern \"C\" void foo() {\n     int *a = new int(3);\n     delete a;"}, {"sha": "a8504ff2afb06077bd2262fffc3fea5bf6084fe3", "filename": "src/test/run-make-fulldeps/extern-fn-generic/test.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n #include <stdint.h>\n \n typedef struct TestStruct {"}, {"sha": "e94d75083b8ffd7bdf72fed6d9f814bb90c0ad0f", "filename": "src/test/run-make-fulldeps/extern-fn-mangle/test.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n #include <stdint.h>\n \n uint32_t foo();"}, {"sha": "3b6fb4cfce984ebb83879f9cf8fae81dc5ca5280", "filename": "src/test/run-make-fulldeps/extern-fn-with-extern-types/ctest.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Fctest.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Fctest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Fctest.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n #include <stdio.h>\n #include <stdint.h>\n "}, {"sha": "52af3dceb109c83d1d176e467401058596793a89", "filename": "src/test/run-make-fulldeps/extern-fn-with-packed-struct/test.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n // Pragma needed cause of gcc bug on windows: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52991\n \n #include <assert.h>"}, {"sha": "86cb64537236e1611f877a64a32a1b52d06c5904", "filename": "src/test/run-make-fulldeps/extern-fn-with-union/ctest.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Fctest.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Fctest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Fctest.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n #include <stdio.h>\n #include <stdint.h>\n "}, {"sha": "30f6974b75086ac6c67b50621f65832e1c3e8bce", "filename": "src/test/run-make-fulldeps/glibc-staticlib-args/program.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Fprogram.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Fprogram.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Fprogram.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n void args_check();\n \n int main() {"}, {"sha": "812c97535287233599c6f936f6cd97be7f3ea5e6", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/bar.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n void foo();\n \n void bar() { foo(); }"}, {"sha": "85e6cd8c3909a7e67c41750f5210b1463dd7a90c", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/foo.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,2 +1 @@\n-// ignore-license\n void foo() {}"}, {"sha": "52fbf78510a88f98951ec1ca0fbf53883329b307", "filename": "src/test/run-make-fulldeps/issue-25581/test.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fissue-25581%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fissue-25581%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-25581%2Ftest.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n #include <stddef.h>\n #include <stdint.h>\n "}, {"sha": "3064af952f898dd0af82955b866136b66867c114", "filename": "src/test/run-make-fulldeps/link-path-order/correct.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fcorrect.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fcorrect.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fcorrect.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,2 +1 @@\n-// ignore-license\n int should_return_one() { return 1; }"}, {"sha": "64275b3ad6bb0f78f4edd2abee386e200c445bff", "filename": "src/test/run-make-fulldeps/link-path-order/wrong.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fwrong.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fwrong.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fwrong.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,2 +1 @@\n-// ignore-license\n int should_return_one() { return 0; }"}, {"sha": "78a6934f57f76766182836819f92e94c3d513a4c", "filename": "src/test/run-make-fulldeps/linkage-attr-on-static/foo.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Flinkage-attr-on-static%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Flinkage-attr-on-static%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flinkage-attr-on-static%2Ffoo.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n #include <stdint.h>\n \n extern int32_t BAZ;"}, {"sha": "bb4036b06e13b79a32ec78ae04db97590f54b2cc", "filename": "src/test/run-make-fulldeps/lto-smoke-c/bar.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Flto-smoke-c%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Flto-smoke-c%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flto-smoke-c%2Fbar.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n void foo();\n \n int main() {"}, {"sha": "e42599986781fe984a2c1427a3373cf439a34f60", "filename": "src/test/run-make-fulldeps/manual-link/bar.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fmanual-link%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fmanual-link%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fmanual-link%2Fbar.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,2 +1 @@\n-// ignore-license\n void bar() {}"}, {"sha": "e42599986781fe984a2c1427a3373cf439a34f60", "filename": "src/test/run-make-fulldeps/manual-link/foo.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fmanual-link%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fmanual-link%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fmanual-link%2Ffoo.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,2 +1 @@\n-// ignore-license\n void bar() {}"}, {"sha": "735e2b147fd9e91f8b0a7cd508dd860f4a96c094", "filename": "src/test/run-make-fulldeps/sanitizer-staticlib-link/program.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Fprogram.c", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Fprogram.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Fprogram.c?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,3 @@\n-// ignore-license\n void overflow();\n \n int main() {"}, {"sha": "3b0dc096f58fb681b30ce22172286cdbc8da6ff4", "filename": "src/test/ui/attr-shebang.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fattr-shebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fattr-shebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-shebang.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -3,4 +3,3 @@\n #![allow(stable_features)]\n #![feature(rust1)]\n pub fn main() { }\n-// ignore-license"}, {"sha": "28586426b44e9f736951a6dc297774ef81b4f6a8", "filename": "src/test/ui/const-generics/const-generic-type_name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+#[derive(Debug)]\n+struct S<const N: usize>;\n+\n+fn main() {\n+    assert_eq!(std::any::type_name::<S<3>>(), \"const_generic_type_name::S<3usize>\");\n+}"}, {"sha": "6b60a77effea50bc665db39c09fd8f04302caa22", "filename": "src/test/ui/const-generics/const-generic-type_name.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-generic-type_name.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "802be7f5afb5741a972b9894c3b0a14fb16fa0bd", "filename": "src/test/ui/lexer-crlf-line-endings-string-literal-doc-comment.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer-crlf-line-endings-string-literal-doc-comment.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,11 +1,8 @@\n // run-pass\r\n-// ignore-tidy-cr ignore-license\r\n+// ignore-tidy-cr\r\n // ignore-tidy-cr (repeated again because of tidy bug)\r\n // license is ignored because tidy can't handle the CRLF here properly.\r\n \r\n-// http://rust-lang.org/COPYRIGHT.\r\n-//\r\n-\r\n // N.B., this file needs CRLF line endings. The .gitattributes file in\r\n // this directory should enforce it.\r\n \r"}, {"sha": "21c0df0288fa0020ed4c21d897fa7f5e3a6e268d", "filename": "src/test/ui/lint/command-line-lint-group-allow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-allow.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -A bad-style\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn main() {\n     let _InappropriateCamelCasing = true;"}, {"sha": "c8fd32c64d6db757c16ce36778c26bc56b41faec", "filename": "src/test/ui/lint/dead-code/tuple-struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(dead_code)]\n "}, {"sha": "d6e5033a0c4c2451d887836958192a7351c78f31", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // run-rustfix\n \n #![warn(ellipsis_inclusive_range_patterns)]"}, {"sha": "773eea14fd790c8131d3f16400b764ed870250c1", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // run-rustfix\n \n #![warn(ellipsis_inclusive_range_patterns)]"}, {"sha": "d085db43aa94a61f354808b2b017a2a29e0c46d0", "filename": "src/test/ui/lint/lint-lowercase-static-const-pattern-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern-rename.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // Issue #7526: lowercase static constants in patterns look like bindings\n \n // This is similar to lint-lowercase-static-const-pattern.rs, except it"}, {"sha": "2b1a52f25be87de2c36151a86e422defea3724cd", "filename": "src/test/ui/lint/lint-non-camel-case-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-variant.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(non_camel_case_types)]\n "}, {"sha": "b832e4bcd62232a71091cc144bed378c470341a2", "filename": "src/test/ui/lint/lint-non-camel-case-with-trailing-underscores.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-with-trailing-underscores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-with-trailing-underscores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-with-trailing-underscores.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(dead_code)]\n // This is ok because we often use the trailing underscore to mean 'prime'"}, {"sha": "710eebe4b6525edca7d6c9d4abcd37bd5906639b", "filename": "src/test/ui/lint/lint-non-snake-case-no-lowercase-equivalent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(dead_code)]\n // pretty-expanded FIXME #23616"}, {"sha": "9f16cb20fb32cf029024a160814a53e7fd0ecd6e", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(dead_code)]\n "}, {"sha": "521472d99b17d9fe12901f70c528cbb5fe2c0a57", "filename": "src/test/ui/lint/lint-output-format-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,7 +1,7 @@\n // aux-build:lint_output_format.rs\n \n #![feature(unstable_test_feature)]\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n extern crate lint_output_format;\n use lint_output_format::{foo, bar};"}, {"sha": "4b407a29f64b385b5fc32448782adadd0212c1b0", "filename": "src/test/ui/lint/lint-stability-deprecated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // aux-build:lint_stability.rs\n // aux-build:inherited_stability.rs\n // aux-build:stability_cfg1.rs"}, {"sha": "c96b8f1a5cf4a3798e5cbca1cac776f268c18311", "filename": "src/test/ui/lint/lints-in-foreign-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,5 +1,5 @@\n // aux-build:lints-in-foreign-macros.rs\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(unused_imports)] //~ missing documentation for crate [missing_docs]\n #![warn(missing_docs)]"}, {"sha": "4722e85673c2bb97846a3df9cf5cb810394085ff", "filename": "src/test/ui/lint/reasons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Freasons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Freasons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(lint_reasons)]\n "}, {"sha": "e40321e56bf150c7d0f7b8330ddc626be6264089", "filename": "src/test/ui/lint/type-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![warn(overflowing_literals)]\n \n fn main() {"}, {"sha": "8a3568f65f63e078c48aaecfba8ac3d633bd1036", "filename": "src/test/ui/lint/unused_labels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_labels.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -2,7 +2,7 @@\n // should also deal with the edge cases where a label is shadowed,\n // within nested loops\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(label_break_value)]\n #![warn(unused_labels)]"}, {"sha": "53315dcf638aea6924f7a92ab9d2b6d33cad292c", "filename": "src/test/ui/lint/use-redundant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![warn(unused_imports)]\n \n use crate::foo::Bar;"}, {"sha": "ac182be15560785ebf68b81618176a00c9cb4393", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -4,7 +4,7 @@\n // regions is erased.\n \n // compile-flags:-Zborrowck=mir -Zverbose\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n "}, {"sha": "039b6aaaf0a70e09c60dc7667025e0864183aa98", "filename": "src/test/ui/nll/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fconstant.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -2,7 +2,7 @@\n // arbitrary types without ICEs.\n \n // compile-flags:-Zborrowck=mir\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n const HI: &str = \"hi\";\n "}, {"sha": "1897589bd588572c6a5b689d16c9d5d305e1c0e3", "filename": "src/test/ui/nll/drop-may-dangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fdrop-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fdrop-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-may-dangle.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -3,7 +3,7 @@\n // including) the call to `use_x`. The `else` branch is not included.\n \n // compile-flags:-Zborrowck=mir\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(warnings)]\n #![feature(dropck_eyepatch)]"}, {"sha": "db056a22855092a4da6341094f7278ba1e746366", "filename": "src/test/ui/nll/extra-unused-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fextra-unused-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fextra-unused-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fextra-unused-mut.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,6 +1,6 @@\n // extra unused mut lint tests for #51918\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(generators, nll)]\n #![deny(unused_mut)]"}, {"sha": "3102562cd0ab2bd19908e3b0498ab20df6602a7e", "filename": "src/test/ui/nll/generator-distinct-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fgenerator-distinct-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fgenerator-distinct-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fgenerator-distinct-lifetime.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -6,7 +6,7 @@\n // over a yield -- because the data that is borrowed (`*x`) is not\n // stored on the stack.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn foo(x: &mut u32) {\n     move || {"}, {"sha": "e81479495c4d7ec857aa09eae9a7772bf9042a04", "filename": "src/test/ui/nll/maybe-initialized-drop-uninitialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-uninitialized.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Zborrowck=mir\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(warnings)]\n "}, {"sha": "017f53d1457d828e3f6de0ed04a03d578f7f05e8", "filename": "src/test/ui/nll/projection-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fprojection-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fprojection-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fprojection-return.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Zborrowck=mir\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n "}, {"sha": "527cca133956c39e09d31a02374c7e7c491bdc75", "filename": "src/test/ui/nll/relate_tys/hr-fn-aau-eq-abu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aau-eq-abu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aau-eq-abu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aau-eq-abu.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -6,7 +6,7 @@\n // another -- effectively, the single lifetime `'a` is just inferred\n // to be the intersection of the two distinct lifetimes.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags:-Zno-leak-check\n \n #![feature(nll)]"}, {"sha": "3a46188d119116e20837316000feedb32bc2b639", "filename": "src/test/ui/nll/relate_tys/hr-fn-aba-as-aaa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -2,7 +2,7 @@\n // function returning always its first argument can be upcast to one\n // that returns either first or second argument.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags:-Zno-leak-check\n \n #![feature(nll)]"}, {"sha": "b03a539ebdbe9c562f35c2a4fe135d04f633697c", "filename": "src/test/ui/nll/ty-outlives/projection-body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,7 +1,7 @@\n // Test that when we infer the lifetime to a subset of the fn body, it\n // works out.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n trait MyTrait<'a> {\n     type Output;"}, {"sha": "be1b653c384b78eff6a1d434787d461e3b87629e", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -3,7 +3,7 @@\n // we don't even propagate constraints from the closures to the callers.\n \n // compile-flags:-Zborrowck=mir -Zverbose\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "a411162325dc4a8b9f6f6b9480bd06b791c58ab5", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -4,7 +4,7 @@\n //\n // Regression test for #53121.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n trait MyTrait<'a> {\n     type Output;"}, {"sha": "8d0c10a639ee5d9a32d327efab6c16819dd4f47d", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-trait.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -4,7 +4,7 @@\n // MyTrait<'a>>::Output: 'a` outlives `'a` (because the trait says\n // so).\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n trait MyTrait<'a> {\n     type Output: 'a;"}, {"sha": "6547ae39817734f68789cc1c9a35acc4a604f15e", "filename": "src/test/ui/nll/ty-outlives/ty-param-implied-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Zborrowck=mir -Zverbose\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // Test that we assume that universal types like `T` outlive the\n // function body."}, {"sha": "b27429f4d190f3fe2f63e1baff4110b27c5533da", "filename": "src/test/ui/nll/user-annotations/downcast-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdowncast-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdowncast-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdowncast-infer.rs?ref=8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // Check that we don't try to downcast `_` when type-checking the annotation.\n fn main() {"}]}