{"sha": "9c166cb6713e1cbeed1db6efc4f7eb1dfa150294", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMTY2Y2I2NzEzZTFjYmVlZDFkYjZlZmM0ZjdlYjFkZmExNTAyOTQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-29T23:34:58Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-03T23:40:46Z"}, "message": "Remove unneeded borrows and slices", "tree": {"sha": "1616a876e42426ce32893bf833191a311305b0a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1616a876e42426ce32893bf833191a311305b0a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294", "html_url": "https://github.com/rust-lang/rust/commit/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc71b45066bb9714dc1a1ab91e989b735f8cdef", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc71b45066bb9714dc1a1ab91e989b735f8cdef", "html_url": "https://github.com/rust-lang/rust/commit/9fc71b45066bb9714dc1a1ab91e989b735f8cdef"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "6bc73194aa98b5cc220f509dcd44bd7143fc5fa3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9c166cb6713e1cbeed1db6efc4f7eb1dfa150294", "patch": "@@ -297,7 +297,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     let external_module = self.new_extern_crate_module(parent_link, def);\n                     self.define(parent, name, TypeNS, (external_module, sp));\n \n-                    self.build_reduced_graph_for_external_crate(&external_module);\n+                    self.build_reduced_graph_for_external_crate(external_module);\n                 }\n                 parent\n             }\n@@ -353,7 +353,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 for variant in &(*enum_definition).variants {\n                     let item_def_id = self.ast_map.local_def_id(item.id);\n                     self.build_reduced_graph_for_variant(variant, item_def_id,\n-                                                         &module, variant_modifiers);\n+                                                         module, variant_modifiers);\n                 }\n                 parent\n             }\n@@ -409,7 +409,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     };\n \n                     let modifiers = DefModifiers::PUBLIC; // NB: not DefModifiers::IMPORTABLE\n-                    self.define(&module_parent, item.name, ns, (def, item.span, modifiers));\n+                    self.define(module_parent, item.name, ns, (def, item.span, modifiers));\n \n                     self.trait_item_map.insert((item.name, def_id), item_def_id);\n                 }"}, {"sha": "64973bd791634f11f92773320bf05b39296b1660", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9c166cb6713e1cbeed1db6efc4f7eb1dfa150294", "patch": "@@ -1262,7 +1262,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     let segment_name = name.as_str();\n                     let module_name = module_to_string(search_module);\n                     let mut span = span;\n-                    let msg = if \"???\" == &module_name[..] {\n+                    let msg = if \"???\" == &module_name {\n                         span.hi = span.lo + Pos::from_usize(segment_name.len());\n \n                         match search_parent_externals(name, &self.current_module) {\n@@ -1568,7 +1568,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                module_to_string(&*module_));\n \n         // First, check the direct children of the module.\n-        build_reduced_graph::populate_module_if_necessary(self, &module_);\n+        build_reduced_graph::populate_module_if_necessary(self, module_);\n \n         if let Some(binding) = module_.get_child(name, namespace) {\n             debug!(\"(resolving name in module) found node as child\");\n@@ -1609,7 +1609,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         // Descend into children and anonymous children.\n-        build_reduced_graph::populate_module_if_necessary(self, &module_);\n+        build_reduced_graph::populate_module_if_necessary(self, module_);\n \n         module_.for_each_local_child(|_, _, child_node| {\n             match child_node.module() {\n@@ -2947,7 +2947,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let containing_module;\n         let last_private;\n         match self.resolve_module_path_from_root(root_module,\n-                                                 &module_path[..],\n+                                                 &module_path,\n                                                  0,\n                                                  span,\n                                                  LastMod(AllPublic)) {\n@@ -2956,7 +2956,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     Some((span, msg)) => (span, msg),\n                     None => {\n                         let msg = format!(\"Use of undeclared module `::{}`\",\n-                                          names_to_string(&module_path[..]));\n+                                          names_to_string(&module_path));\n                         (span, msg)\n                     }\n                 };"}, {"sha": "3d2300e44c46893484a9f0ef897856089a26f4da", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c166cb6713e1cbeed1db6efc4f7eb1dfa150294/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=9c166cb6713e1cbeed1db6efc4f7eb1dfa150294", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         errors.extend(self.resolve_imports_for_module(module_));\n         self.resolver.current_module = orig_module;\n \n-        build_reduced_graph::populate_module_if_necessary(self.resolver, &module_);\n+        build_reduced_graph::populate_module_if_necessary(self.resolver, module_);\n         module_.for_each_local_child(|_, _, child_node| {\n             match child_node.module() {\n                 None => {\n@@ -345,14 +345,14 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                 // We found the module that the target is contained\n                 // within. Attempt to resolve the import within it.\n                 if let SingleImport(target, source) = import_directive.subclass {\n-                    self.resolve_single_import(&module_,\n+                    self.resolve_single_import(module_,\n                                                containing_module,\n                                                target,\n                                                source,\n                                                import_directive,\n                                                lp)\n                 } else {\n-                    self.resolve_glob_import(&module_, containing_module, import_directive, lp)\n+                    self.resolve_glob_import(module_, containing_module, import_directive, lp)\n                 }\n             })\n             .and_then(|()| {\n@@ -465,9 +465,9 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n         // We need to resolve both namespaces for this to succeed.\n         let (value_result, value_used_reexport) =\n-            self.resolve_name_in_module(&target_module, source, ValueNS, module_);\n+            self.resolve_name_in_module(target_module, source, ValueNS, module_);\n         let (type_result, type_used_reexport) =\n-            self.resolve_name_in_module(&target_module, source, TypeNS, module_);\n+            self.resolve_name_in_module(target_module, source, TypeNS, module_);\n \n         match (&value_result, &type_result) {\n             (&Success((_, ref name_binding)), _) if !value_used_reexport &&\n@@ -585,7 +585,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         if let (&Failed(_), &Failed(_)) = (&value_result, &type_result) {\n             let msg = format!(\"There is no `{}` in `{}`{}\",\n                               source,\n-                              module_to_string(&target_module), lev_suggestion);\n+                              module_to_string(target_module), lev_suggestion);\n             return Failed(Some((directive.span, msg)));\n         }\n \n@@ -711,7 +711,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n \n         // Add all children from the containing module.\n-        build_reduced_graph::populate_module_if_necessary(self.resolver, &target_module);\n+        build_reduced_graph::populate_module_if_necessary(self.resolver, target_module);\n \n         target_module.for_each_local_child(|name, ns, name_binding| {\n             self.merge_import_resolution(module_,"}]}