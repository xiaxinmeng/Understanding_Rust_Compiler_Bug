{"sha": "5d2a935e6cf25e0bc86354962929ee02513549b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMmE5MzVlNmNmMjVlMGJjODYzNTQ5NjI5MjllZTAyNTEzNTQ5Yjc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-18T23:44:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-09-12T00:05:18Z"}, "message": "Make suggestion more complete", "tree": {"sha": "5aa142ae8d0ede521ca5275de1f0538f7edb3b3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aa142ae8d0ede521ca5275de1f0538f7edb3b3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d2a935e6cf25e0bc86354962929ee02513549b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2a935e6cf25e0bc86354962929ee02513549b7", "html_url": "https://github.com/rust-lang/rust/commit/5d2a935e6cf25e0bc86354962929ee02513549b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d2a935e6cf25e0bc86354962929ee02513549b7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "html_url": "https://github.com/rust-lang/rust/commit/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c"}], "stats": {"total": 89, "additions": 75, "deletions": 14}, "files": [{"sha": "ca6f4243c2880daa8374f14c3492a434aa0a564a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a935e6cf25e0bc86354962929ee02513549b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a935e6cf25e0bc86354962929ee02513549b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5d2a935e6cf25e0bc86354962929ee02513549b7", "patch": "@@ -749,7 +749,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             })\n             .collect::<Vec<_>>();\n         err.multipart_suggestion(\n-            \"if you change the return type to expect trait objects box the returned expressions\",\n+            \"if you change the return type to expect trait objects, box the returned expressions\",\n             sugg,\n             Applicability::MaybeIncorrect,\n         );"}, {"sha": "4addee1a4c97643c1d094b4d646c163005ae12cf", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a935e6cf25e0bc86354962929ee02513549b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a935e6cf25e0bc86354962929ee02513549b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=5d2a935e6cf25e0bc86354962929ee02513549b7", "patch": "@@ -1459,14 +1459,15 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             }\n         }\n         if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.borrow().as_ref(), fn_output) {\n-            self.add_impl_trait_explanation(&mut err, fcx, expected, *sp, fn_output);\n+            self.add_impl_trait_explanation(&mut err, cause, fcx, expected, *sp, fn_output);\n         }\n         err\n     }\n \n     fn add_impl_trait_explanation<'a>(\n         &self,\n         err: &mut DiagnosticBuilder<'a>,\n+        cause: &ObligationCause<'tcx>,\n         fcx: &FnCtxt<'a, 'tcx>,\n         expected: Ty<'tcx>,\n         sp: Span,\n@@ -1531,6 +1532,22 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     ],\n                     Applicability::MachineApplicable,\n                 );\n+                let sugg = vec![sp, cause.span]\n+                    .into_iter()\n+                    .flat_map(|sp| {\n+                        vec![\n+                            (sp.shrink_to_lo(), \"Box::new(\".to_string()),\n+                            (sp.shrink_to_hi(), \")\".to_string()),\n+                        ]\n+                        .into_iter()\n+                    })\n+                    .collect::<Vec<_>>();\n+                err.multipart_suggestion(\n+                    \"if you change the return type to expect trait objects, box the returned \\\n+                     expressions\",\n+                    sugg,\n+                    Applicability::MaybeIncorrect,\n+                );\n             } else {\n                 err.help(&format!(\n                     \"if the trait `{}` were object safe, you could return a boxed trait object\",\n@@ -1539,7 +1556,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             }\n             err.note(trait_obj_msg);\n         }\n-        err.help(\"alternatively, create a new `enum` with a variant for each returned type\");\n+        err.help(\"you could instead create a new `enum` with a variant for each returned type\");\n     }\n \n     fn is_return_ty_unsized(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {"}, {"sha": "cdaa61ac323dd490fda9c16c930992a0f9487454", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a935e6cf25e0bc86354962929ee02513549b7/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a935e6cf25e0bc86354962929ee02513549b7/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=5d2a935e6cf25e0bc86354962929ee02513549b7", "patch": "@@ -23,7 +23,7 @@ LL |     0_u32\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = help: if the trait `Foo` were object safe, you could return a boxed trait object\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = help: alternatively, create a new `enum` with a variant for each returned type\n+   = help: you could instead create a new `enum` with a variant for each returned type\n \n error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:24:11"}, {"sha": "66043267f91cd71979f72ae93fabbba300952e0c", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a935e6cf25e0bc86354962929ee02513549b7/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a935e6cf25e0bc86354962929ee02513549b7/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=5d2a935e6cf25e0bc86354962929ee02513549b7", "patch": "@@ -14,7 +14,7 @@ LL |     B\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = help: if the trait `NotObjectSafe` were object safe, you could return a boxed trait object\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = help: alternatively, create a new `enum` with a variant for each returned type\n+   = help: you could instead create a new `enum` with a variant for each returned type\n \n error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:43:5\n@@ -31,11 +31,17 @@ LL |     B\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = help: alternatively, create a new `enum` with a variant for each returned type\n+   = help: you could instead create a new `enum` with a variant for each returned type\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn cat() -> Box<dyn ObjectSafe> {\n    |             ^^^^^^^           ^\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL |         return Box::new(A);\n+LL |     }\n+LL |     Box::new(B)\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4265381eb401c6a77a7a396a7fced5e9406b91d9", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5d2a935e6cf25e0bc86354962929ee02513549b7/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d2a935e6cf25e0bc86354962929ee02513549b7/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=5d2a935e6cf25e0bc86354962929ee02513549b7", "patch": "@@ -13,11 +13,17 @@ LL |     1u32\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = help: alternatively, create a new `enum` with a variant for each returned type\n+   = help: you could instead create a new `enum` with a variant for each returned type\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn foo() -> Box<dyn std::fmt::Display> {\n    |             ^^^^^^^                  ^\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL |         return Box::new(0i32);\n+LL |     }\n+LL |     Box::new(1u32)\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:12:16\n@@ -34,11 +40,17 @@ LL |         return 1u32;\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = help: alternatively, create a new `enum` with a variant for each returned type\n+   = help: you could instead create a new `enum` with a variant for each returned type\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn bar() -> Box<dyn std::fmt::Display> {\n    |             ^^^^^^^                  ^\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL |         return Box::new(0i32);\n+LL |     } else {\n+LL |         return Box::new(1u32);\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:20:9\n@@ -55,11 +67,17 @@ LL |         1u32\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = help: alternatively, create a new `enum` with a variant for each returned type\n+   = help: you could instead create a new `enum` with a variant for each returned type\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn baz() -> Box<dyn std::fmt::Display> {\n    |             ^^^^^^^                  ^\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL |         return Box::new(0i32);\n+LL |     } else {\n+LL |         Box::new(1u32)\n+   |\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:28:9\n@@ -77,7 +95,7 @@ help: you could change the return type to be a boxed trait object\n    |\n LL | fn qux() -> Box<dyn std::fmt::Display> {\n    |             ^^^^^^^                  ^\n-help: if you change the return type to expect trait objects box the returned expressions\n+help: if you change the return type to expect trait objects, box the returned expressions\n    |\n LL |         Box::new(0i32)\n LL |     } else {\n@@ -98,11 +116,16 @@ LL |         _ => 1u32,\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = help: alternatively, create a new `enum` with a variant for each returned type\n+   = help: you could instead create a new `enum` with a variant for each returned type\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn bat() -> Box<dyn std::fmt::Display> {\n    |             ^^^^^^^                  ^\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL |         0 => return Box::new(0i32),\n+LL |         _ => Box::new(1u32),\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:40:5\n@@ -120,11 +143,19 @@ LL | |     }\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = help: alternatively, create a new `enum` with a variant for each returned type\n+   = help: you could instead create a new `enum` with a variant for each returned type\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn can() -> Box<dyn std::fmt::Display> {\n    |             ^^^^^^^                  ^\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL |     Box::new(match 13 {\n+LL |         0 => return Box::new(0i32),\n+LL |         1 => 1u32,\n+LL |         _ => 2u32,\n+LL |     })\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:53:13\n@@ -141,11 +172,18 @@ LL |             1u32\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-   = help: alternatively, create a new `enum` with a variant for each returned type\n+   = help: you could instead create a new `enum` with a variant for each returned type\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn cat() -> Box<dyn std::fmt::Display> {\n    |             ^^^^^^^                  ^\n+help: if you change the return type to expect trait objects, box the returned expressions\n+   |\n+LL |             return Box::new(0i32);\n+LL |         }\n+LL |         _ => {\n+LL |             Box::new(1u32)\n+   |\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:61:14\n@@ -163,7 +201,7 @@ help: you could change the return type to be a boxed trait object\n    |\n LL | fn dog() -> Box<dyn std::fmt::Display> {\n    |             ^^^^^^^                  ^\n-help: if you change the return type to expect trait objects box the returned expressions\n+help: if you change the return type to expect trait objects, box the returned expressions\n    |\n LL |         0 => Box::new(0i32),\n LL |         1 => Box::new(1u32),"}]}