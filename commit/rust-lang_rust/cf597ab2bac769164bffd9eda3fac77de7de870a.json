{"sha": "cf597ab2bac769164bffd9eda3fac77de7de870a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNTk3YWIyYmFjNzY5MTY0YmZmZDllZGEzZmFjNzdkZTdkZTg3MGE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-08-25T08:22:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-08-25T11:38:01Z"}, "message": "Rollup merge of #35955 - frewsxcv:idiomatic-methods, r=eddyb\n\nUse idiomatic names for string-related methods names.\n\nNone", "tree": {"sha": "04bb552c5227ce77dbe47421b4d5bc4a3726386d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04bb552c5227ce77dbe47421b4d5bc4a3726386d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf597ab2bac769164bffd9eda3fac77de7de870a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf597ab2bac769164bffd9eda3fac77de7de870a", "html_url": "https://github.com/rust-lang/rust/commit/cf597ab2bac769164bffd9eda3fac77de7de870a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf597ab2bac769164bffd9eda3fac77de7de870a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5deee46e25ec769da32595c7b99b3db316f2b2c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5deee46e25ec769da32595c7b99b3db316f2b2c4", "html_url": "https://github.com/rust-lang/rust/commit/5deee46e25ec769da32595c7b99b3db316f2b2c4"}, {"sha": "19aae8e06990af5821c450594a340d90a746fa1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/19aae8e06990af5821c450594a340d90a746fa1b", "html_url": "https://github.com/rust-lang/rust/commit/19aae8e06990af5821c450594a340d90a746fa1b"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "1825a892cf55415d0832167c03310faa0a921541", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=cf597ab2bac769164bffd9eda3fac77de7de870a", "patch": "@@ -173,12 +173,12 @@ impl<'doc> Doc<'doc> {\n         self.start == self.end\n     }\n \n-    pub fn as_str_slice(&self) -> &'doc str {\n+    pub fn as_str(&self) -> &'doc str {\n         str::from_utf8(&self.data[self.start..self.end]).unwrap()\n     }\n \n-    pub fn as_str(&self) -> String {\n-        self.as_str_slice().to_string()\n+    pub fn to_string(&self) -> String {\n+        self.as_str().to_string()\n     }\n }\n \n@@ -773,7 +773,7 @@ pub mod reader {\n             Ok(char::from_u32(doc_as_u32(self.next_doc(EsChar)?)).unwrap())\n         }\n         fn read_str(&mut self) -> DecodeResult<String> {\n-            Ok(self.next_doc(EsStr)?.as_str())\n+            Ok(self.next_doc(EsStr)?.to_string())\n         }\n \n         // Compound types:"}, {"sha": "29bcc1257fd3182c78f0bfdde13aa25444c7f2b3", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=cf597ab2bac769164bffd9eda3fac77de7de870a", "patch": "@@ -601,7 +601,7 @@ pub trait LintContext: Sized {\n             for (lint_id, level, span) in v {\n                 let (now, now_source) = self.lints().get_level_source(lint_id);\n                 if now == Forbid && level != Forbid {\n-                    let lint_name = lint_id.as_str();\n+                    let lint_name = lint_id.to_string();\n                     let mut diag_builder = struct_span_err!(self.sess(), span, E0453,\n                                                             \"{}({}) overruled by outer forbid({})\",\n                                                             level.as_str(), lint_name,\n@@ -1216,7 +1216,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         for &(lint, span, ref msg) in v {\n             span_bug!(span,\n                       \"unprocessed lint {} at {}: {}\",\n-                      lint.as_str(), tcx.map.node_to_string(*id), *msg)\n+                      lint.to_string(), tcx.map.node_to_string(*id), *msg)\n         }\n     }\n \n@@ -1252,7 +1252,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // in the iteration code.\n     for (_, v) in sess.lints.borrow().iter() {\n         for &(lint, span, ref msg) in v {\n-            span_bug!(span, \"unprocessed lint {}: {}\", lint.as_str(), *msg)\n+            span_bug!(span, \"unprocessed lint {}: {}\", lint.to_string(), *msg)\n         }\n     }\n }"}, {"sha": "0938086b000c037b1c22ac592ceb12deb8390c37", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=cf597ab2bac769164bffd9eda3fac77de7de870a", "patch": "@@ -263,7 +263,7 @@ impl LintId {\n     }\n \n     /// Get the name of the lint.\n-    pub fn as_str(&self) -> String {\n+    pub fn to_string(&self) -> String {\n         self.lint.name_lower()\n     }\n }"}, {"sha": "4e87c931cc19daf47c55c3d65e77a3fea4a1f5d7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=cf597ab2bac769164bffd9eda3fac77de7de870a", "patch": "@@ -861,7 +861,7 @@ Available lint options:\n         for (name, to) in lints {\n             let name = name.to_lowercase().replace(\"_\", \"-\");\n             let desc = to.into_iter()\n-                         .map(|x| x.as_str().replace(\"_\", \"-\"))\n+                         .map(|x| x.to_string().replace(\"_\", \"-\"))\n                          .collect::<Vec<String>>()\n                          .join(\", \");\n             println!(\"    {}  {}\", padded(&name[..]), desc);"}, {"sha": "b0335258b4041d8e1e6afe95125fd1a265d427fc", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf597ab2bac769164bffd9eda3fac77de7de870a/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=cf597ab2bac769164bffd9eda3fac77de7de870a", "patch": "@@ -86,7 +86,7 @@ pub fn load_index(data: &[u8]) -> index::Index {\n \n pub fn crate_rustc_version(data: &[u8]) -> Option<String> {\n     let doc = rbml::Doc::new(data);\n-    reader::maybe_get_doc(doc, tag_rustc_version).map(|s| s.as_str())\n+    reader::maybe_get_doc(doc, tag_rustc_version).map(|s| s.to_string())\n }\n \n pub fn load_xrefs(data: &[u8]) -> index::DenseIndex {\n@@ -207,7 +207,7 @@ fn item_defaultness(item: rbml::Doc) -> hir::Defaultness {\n \n fn item_sort(item: rbml::Doc) -> Option<char> {\n     reader::tagged_docs(item, tag_item_trait_item_sort).nth(0).map(|doc| {\n-        doc.as_str_slice().as_bytes()[0] as char\n+        doc.as_str().as_bytes()[0] as char\n     })\n }\n \n@@ -282,7 +282,7 @@ fn item_name(item: rbml::Doc) -> ast::Name {\n \n fn maybe_item_name(item: rbml::Doc) -> Option<ast::Name> {\n     reader::maybe_get_doc(item, tag_paths_data_name).map(|name| {\n-        let string = name.as_str_slice();\n+        let string = name.as_str();\n         token::intern(string)\n     })\n }\n@@ -368,7 +368,7 @@ fn parse_polarity(item_doc: rbml::Doc) -> hir::ImplPolarity {\n fn parse_associated_type_names(item_doc: rbml::Doc) -> Vec<ast::Name> {\n     let names_doc = reader::get_doc(item_doc, tag_associated_type_names);\n     reader::tagged_docs(names_doc, tag_associated_type_name)\n-        .map(|name_doc| token::intern(name_doc.as_str_slice()))\n+        .map(|name_doc| token::intern(name_doc.as_str()))\n         .collect()\n }\n \n@@ -682,7 +682,7 @@ fn each_child_of_item_or_crate<F, G>(cdata: Cmd,\n \n         let name_doc = reader::get_doc(reexport_doc,\n                                        tag_items_data_item_reexport_name);\n-        let name = name_doc.as_str_slice();\n+        let name = name_doc.as_str();\n \n         // This reexport may be in yet another crate.\n         let crate_data = if child_def_id.krate == cdata.cnum {\n@@ -869,7 +869,7 @@ fn get_explicit_self(item: rbml::Doc) -> ty::ExplicitSelfCategory {\n     }\n \n     let explicit_self_doc = reader::get_doc(item, tag_item_trait_method_explicit_self);\n-    let string = explicit_self_doc.as_str_slice();\n+    let string = explicit_self_doc.as_str();\n \n     let explicit_self_kind = string.as_bytes()[0];\n     match explicit_self_kind as char {\n@@ -1124,19 +1124,19 @@ pub fn get_struct_field_names(cdata: Cmd, id: DefIndex) -> Vec<ast::Name> {\n fn get_meta_items(md: rbml::Doc) -> Vec<P<ast::MetaItem>> {\n     reader::tagged_docs(md, tag_meta_item_word).map(|meta_item_doc| {\n         let nd = reader::get_doc(meta_item_doc, tag_meta_item_name);\n-        let n = token::intern_and_get_ident(nd.as_str_slice());\n+        let n = token::intern_and_get_ident(nd.as_str());\n         attr::mk_word_item(n)\n     }).chain(reader::tagged_docs(md, tag_meta_item_name_value).map(|meta_item_doc| {\n         let nd = reader::get_doc(meta_item_doc, tag_meta_item_name);\n         let vd = reader::get_doc(meta_item_doc, tag_meta_item_value);\n-        let n = token::intern_and_get_ident(nd.as_str_slice());\n-        let v = token::intern_and_get_ident(vd.as_str_slice());\n+        let n = token::intern_and_get_ident(nd.as_str());\n+        let v = token::intern_and_get_ident(vd.as_str());\n         // FIXME (#623): Should be able to decode MetaItemKind::NameValue variants,\n         // but currently the encoder just drops them\n         attr::mk_name_value_item_str(n, v)\n     })).chain(reader::tagged_docs(md, tag_meta_item_list).map(|meta_item_doc| {\n         let nd = reader::get_doc(meta_item_doc, tag_meta_item_name);\n-        let n = token::intern_and_get_ident(nd.as_str_slice());\n+        let n = token::intern_and_get_ident(nd.as_str());\n         let subitems = get_meta_items(meta_item_doc);\n         attr::mk_list_item(n, subitems)\n     })).collect()\n@@ -1191,7 +1191,7 @@ pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> {\n \n     fn docstr(doc: rbml::Doc, tag_: usize) -> String {\n         let d = reader::get_doc(doc, tag_);\n-        d.as_str_slice().to_string()\n+        d.as_str().to_string()\n     }\n \n     reader::tagged_docs(depsdoc, tag_crate_dep).enumerate().map(|(crate_num, depdoc)| {\n@@ -1233,14 +1233,14 @@ pub fn get_crate_hash(data: &[u8]) -> Svh {\n pub fn maybe_get_crate_name(data: &[u8]) -> Option<&str> {\n     let cratedoc = rbml::Doc::new(data);\n     reader::maybe_get_doc(cratedoc, tag_crate_crate_name).map(|doc| {\n-        doc.as_str_slice()\n+        doc.as_str()\n     })\n }\n \n pub fn get_crate_disambiguator<'a>(data: &'a [u8]) -> &'a str {\n     let crate_doc = rbml::Doc::new(data);\n     let disambiguator_doc = reader::get_doc(crate_doc, tag_crate_disambiguator);\n-    let slice: &'a str = disambiguator_doc.as_str_slice();\n+    let slice: &'a str = disambiguator_doc.as_str();\n     slice\n }\n \n@@ -1446,11 +1446,12 @@ pub fn get_dylib_dependency_formats(cdata: Cmd)\n                                   tag_dylib_dependency_formats);\n     let mut result = Vec::new();\n \n-    debug!(\"found dylib deps: {}\", formats.as_str_slice());\n-    for spec in formats.as_str_slice().split(',') {\n+    debug!(\"found dylib deps: {}\", formats.as_str());\n+    for spec in formats.as_str().split(',') {\n         if spec.is_empty() { continue }\n-        let cnum = spec.split(':').nth(0).unwrap();\n-        let link = spec.split(':').nth(1).unwrap();\n+        let mut split = spec.split(':');\n+        let cnum = split.next().unwrap();\n+        let link = split.next().unwrap();\n         let cnum: ast::CrateNum = cnum.parse().unwrap();\n         let cnum = cdata.cnum_map.borrow()[cnum];\n         result.push((cnum, if link == \"d\" {\n@@ -1476,7 +1477,7 @@ pub fn get_method_arg_names(cdata: Cmd, id: DefIndex) -> Vec<String> {\n     match reader::maybe_get_doc(method_doc, tag_method_argument_names) {\n         Some(args_doc) => {\n             reader::tagged_docs(args_doc, tag_method_argument_name).map(|name_doc| {\n-                name_doc.as_str_slice().to_string()\n+                name_doc.as_str().to_string()\n             }).collect()\n         },\n         None => vec![],\n@@ -1641,7 +1642,7 @@ fn item_def_key(item_doc: rbml::Doc) -> hir_map::DefKey {\n             let mut decoder = reader::Decoder::new(def_key_doc);\n             let simple_key = def_key::DefKey::decode(&mut decoder).unwrap();\n             let name = reader::maybe_get_doc(item_doc, tag_paths_data_name).map(|name| {\n-                token::intern(name.as_str_slice()).as_str()\n+                token::intern(name.as_str()).as_str()\n             });\n             def_key::recover_def_key(simple_key, name)\n         }"}]}