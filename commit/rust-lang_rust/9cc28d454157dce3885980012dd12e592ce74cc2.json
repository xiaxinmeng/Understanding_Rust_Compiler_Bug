{"sha": "9cc28d454157dce3885980012dd12e592ce74cc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYzI4ZDQ1NDE1N2RjZTM4ODU5ODAwMTJkZDEyZTU5MmNlNzRjYzI=", "commit": {"author": {"name": "Christian Poveda", "email": "cpovedar@fnal.gov", "date": "2019-06-20T19:07:34Z"}, "committer": {"name": "Christian Poveda", "email": "cpovedar@fnal.gov", "date": "2019-06-20T19:07:34Z"}, "message": "Replace MemoryExtra by Memory in intptrcast methods", "tree": {"sha": "c7a7fb3cde863a23a8f2fb235f190278da5216ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7a7fb3cde863a23a8f2fb235f190278da5216ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cc28d454157dce3885980012dd12e592ce74cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc28d454157dce3885980012dd12e592ce74cc2", "html_url": "https://github.com/rust-lang/rust/commit/9cc28d454157dce3885980012dd12e592ce74cc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cc28d454157dce3885980012dd12e592ce74cc2/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25ee644971a168287ee166edbd11642dbcfeab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25ee644971a168287ee166edbd11642dbcfeab8", "html_url": "https://github.com/rust-lang/rust/commit/b25ee644971a168287ee166edbd11642dbcfeab8"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "f06c0314919aa31f079ed62953e82fe710047874", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9cc28d454157dce3885980012dd12e592ce74cc2/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc28d454157dce3885980012dd12e592ce74cc2/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=9cc28d454157dce3885980012dd12e592ce74cc2", "patch": "@@ -11,8 +11,7 @@ use rustc::ty::{self, query::TyCtxtAt};\n \n use super::{\n     Allocation, AllocId, InterpResult, Scalar, AllocationExtra,\n-    InterpretCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer,\n-    InterpErrorInfo, InterpError\n+    InterpretCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer, Memory\n };\n \n /// Whether this kind of memory is allowed to leak\n@@ -212,19 +211,19 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     fn int_to_ptr(\n         int: u64,\n-        _extra: &Self::MemoryExtra,\n+        _mem: &Memory<'mir, 'tcx, Self>,\n     ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n         if int == 0 {\n-            Err(InterpErrorInfo::from(InterpError::InvalidNullPointerUsage))\n+            err!(InvalidNullPointerUsage)\n         } else {\n-            Err(InterpErrorInfo::from(InterpError::ReadBytesAsPointer))\n+            err!(ReadBytesAsPointer)\n         }\n     }\n \n     fn ptr_to_int(\n         _ptr: Pointer<Self::PointerTag>,\n-        _extra: &Self::MemoryExtra,\n+        _mem: &Memory<'mir, 'tcx, Self>,\n     ) -> InterpResult<'tcx, u64> {\n-        Err(InterpErrorInfo::from(InterpError::ReadPointerAsBytes))\n+        err!(ReadPointerAsBytes)\n     }\n }"}, {"sha": "1351d154df7c0311a6186b751616388c028d5ab2", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cc28d454157dce3885980012dd12e592ce74cc2/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc28d454157dce3885980012dd12e592ce74cc2/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9cc28d454157dce3885980012dd12e592ce74cc2", "patch": "@@ -881,7 +881,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         match scalar {\n             Scalar::Ptr(ptr) => Ok(ptr),\n-            _ => M::int_to_ptr(scalar.to_usize(self)?, &self.extra)\n+            _ => M::int_to_ptr(scalar.to_usize(self)?, self)\n         }\n     }\n \n@@ -892,7 +892,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, u128> {\n         match scalar.to_bits_or_ptr(size, self) {\n             Ok(bits) => Ok(bits),\n-            Err(ptr) => Ok(M::ptr_to_int(ptr, &self.extra)? as u128)\n+            Err(ptr) => Ok(M::ptr_to_int(ptr, self)? as u128)\n         }\n     }\n }"}]}