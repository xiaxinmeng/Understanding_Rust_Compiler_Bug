{"sha": "361bfce305b8829eda7f3d133fe82a118685de1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MWJmY2UzMDViODgyOWVkYTdmM2QxMzNmZTgyYTExODY4NWRlMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-07T20:44:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-07T20:44:37Z"}, "message": "Auto merge of #82451 - jyn514:defaults, r=Mark-Simulacrum\n\nCleanup option parsing and config.toml.example\n\n- Add an assertion that `link-shared = true` when `thin-lto = true`.\n  Previously, link-shared would be silently overwritten.\n\n- Get rid of `Option<bool>` in bootstrap/config.rs. Set defaults\n  immediately instead of delaying until later in bootstrap. This makes\n  it easier to find what the default value is.\n\n- Remove redundant `config.x = false` when the default was already false\n- Set defaults for `bindir` in `default_opts()` instead of `parse()`\n- Update `download-ci-llvm = if-supported` option to match bootstrap.py\n- Remove redundant check for link_shared. Previously, it was checked twice.\n\n- Update various options in config.toml.example to their defaults.\n  Previously, some options showed an example value instead of the\n  default value.\n\n- Fix incorrect defaults in config.toml.example\n  + `use-libcxx` defaults to false\n  + Add missing `check-stage = 0`\n  + Update several defaults to be conditional (e.g. `if incremental { 10 } else { 100 }`)\n\n- Remove redundant defaults in prose\n- Use the same comment for the default and target-dependent `musl-root`\n- Fix typos\n- Link to `cc_detect` for `cc` and `cxx`, since the logic is ... complicated.\n- Update more defaults to better reflect how they actually get set\n- Remove ignored `gpg-password-file` option\n\n  This stopped being used in\n  7704d35,\n  but was never removed from config.toml.\n\n- Remove unused flags from `config.toml`\n    + Disallow `infodir` and `localstatedir` in `config.toml`\n    + Allow the flags in `./configure`, but give a warning that they will be\n      ignored.\n    + Fix incorrect comment that `datadir` will be ignored.\n\n    Example output:\n\n    ```\n    $ ./configure --set install.infodir=xxx\n    configure: processing command line\n    configure:\n    configure: install.infodir      := xxx\n    configure: build.configure-args := ['--set', 'install.infodir=xxx']\n    warning: infodir will be ignored\n    configure:\n    configure: writing `config.toml` in current directory\n    configure:\n    configure: run `python /home/joshua/rustc3/x.py --help`\n    configure:\n    ```\n\n- Update CHANGELOG\n\ncc https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/bootstrap.20defaults", "tree": {"sha": "04838af2533f95f2402980646b0ce964ec11b9fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04838af2533f95f2402980646b0ce964ec11b9fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/361bfce305b8829eda7f3d133fe82a118685de1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/361bfce305b8829eda7f3d133fe82a118685de1f", "html_url": "https://github.com/rust-lang/rust/commit/361bfce305b8829eda7f3d133fe82a118685de1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/361bfce305b8829eda7f3d133fe82a118685de1f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef2ef926a53baaa9d7a1b73b516d399af7e9aedb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2ef926a53baaa9d7a1b73b516d399af7e9aedb", "html_url": "https://github.com/rust-lang/rust/commit/ef2ef926a53baaa9d7a1b73b516d399af7e9aedb"}, {"sha": "28e83a47164db25bd818c73dbc3d64695bf197e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e83a47164db25bd818c73dbc3d64695bf197e0", "html_url": "https://github.com/rust-lang/rust/commit/28e83a47164db25bd818c73dbc3d64695bf197e0"}], "stats": {"total": 202, "additions": 106, "deletions": 96}, "files": [{"sha": "6e5584797b559da998633f0cf8585fc2b0c268c3", "filename": "config.toml.example", "status": "modified", "additions": 67, "deletions": 69, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/361bfce305b8829eda7f3d133fe82a118685de1f/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/361bfce305b8829eda7f3d133fe82a118685de1f/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=361bfce305b8829eda7f3d133fe82a118685de1f", "patch": "@@ -112,6 +112,7 @@ changelog-seen = 2\n \n # When invoking `llvm-config` this configures whether the `--shared` argument is\n # passed to prefer linking to shared libraries.\n+# NOTE: `thin-lto = true` requires this to be `true` and will give an error otherwise.\n #link-shared = false\n \n # When building llvm, this configures what is being appended to the version.\n@@ -120,22 +121,23 @@ changelog-seen = 2\n #version-suffix = \"-rust-dev\"\n \n # On MSVC you can compile LLVM with clang-cl, but the test suite doesn't pass\n-# with clang-cl, so this is special in that it only compiles LLVM with clang-cl\n-#clang-cl = '/path/to/clang-cl.exe'\n+# with clang-cl, so this is special in that it only compiles LLVM with clang-cl.\n+# Note that this takes a /path/to/clang-cl, not a boolean.\n+#clang-cl = cc\n \n # Pass extra compiler and linker flags to the LLVM CMake build.\n-#cflags = \"-fextra-flag\"\n-#cxxflags = \"-fextra-flag\"\n-#ldflags = \"-Wl,extra-flag\"\n+#cflags = \"\"\n+#cxxflags = \"\"\n+#ldflags = \"\"\n \n # Use libc++ when building LLVM instead of libstdc++. This is the default on\n # platforms already use libc++ as the default C++ library, but this option\n # allows you to use libc++ even on platforms when it's not. You need to ensure\n # that your host compiler ships with libc++.\n-#use-libcxx = true\n+#use-libcxx = false\n \n # The value specified here will be passed as `-DLLVM_USE_LINKER` to CMake.\n-#use-linker = \"lld\"\n+#use-linker = <none> (path)\n \n # Whether or not to specify `-DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=YES`\n #allow-old-toolchain = false\n@@ -147,6 +149,9 @@ changelog-seen = 2\n # General build configuration options\n # =============================================================================\n [build]\n+# The default stage to use for the `check` subcommand\n+#check-stage = 0\n+\n # The default stage to use for the `doc` subcommand\n #doc-stage = 0\n \n@@ -170,38 +175,38 @@ changelog-seen = 2\n # binaries of this build triple and the nightly will be used to bootstrap the\n # first compiler.\n #\n-# Defaults to host platform\n-#build = \"x86_64-unknown-linux-gnu\"\n+# Defaults to platform where `x.py` is run.\n+#build = \"x86_64-unknown-linux-gnu\" (as an example)\n \n # Which triples to produce a compiler toolchain for. Each of these triples will\n # be bootstrapped from the build triple themselves.\n #\n-# Defaults to just the build triple\n-#host = [\"x86_64-unknown-linux-gnu\"]\n+# Defaults to just the build triple.\n+#host = [\"x86_64-unknown-linux-gnu\"] (as an example)\n \n # Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of\n # these triples will be bootstrapped from the build triple themselves.\n #\n # Defaults to `host`. If you set this explicitly, you likely want to add all\n # host triples to this list as well in order for those host toolchains to be\n # able to compile programs for their native target.\n-#target = [\"x86_64-unknown-linux-gnu\"]\n+#target = [\"x86_64-unknown-linux-gnu\"] (as an example)\n \n # Use this directory to store build artifacts.\n # You can use \"$ROOT\" to indicate the root of the git repository.\n #build-dir = \"build\"\n \n # Instead of downloading the src/stage0.txt version of Cargo specified, use\n # this Cargo binary instead to build all Rust code\n-#cargo = \"/path/to/bin/cargo\"\n+#cargo = \"/path/to/cargo\"\n \n # Instead of downloading the src/stage0.txt version of the compiler\n # specified, use this rustc binary instead as the stage0 snapshot compiler.\n-#rustc = \"/path/to/bin/rustc\"\n+#rustc = \"/path/to/rustc\"\n \n # Instead of download the src/stage0.txt version of rustfmt specified,\n # use this rustfmt binary instead as the stage0 snapshot rustfmt.\n-#rustfmt = \"/path/to/bin/rustfmt\"\n+#rustfmt = \"/path/to/rustfmt\"\n \n # Flag to specify whether any documentation is built. If false, rustdoc and\n # friends will still be compiled but they will not be used to generate any\n@@ -326,16 +331,9 @@ changelog-seen = 2\n # Where to install man pages in `prefix` above\n #mandir = \"share/man\"\n \n-# Where to install data in `prefix` above (currently unused)\n+# Where to install data in `prefix` above\n #datadir = \"share\"\n \n-# Where to install additional info in `prefix` above (currently unused)\n-#infodir = \"share/info\"\n-\n-# Where to install local state (currently unused)\n-# If this is a relative path, it will get installed in `prefix` above\n-#localstatedir = \"/var/lib\"\n-\n # =============================================================================\n # Options for compiling Rust code itself\n # =============================================================================\n@@ -387,7 +385,9 @@ changelog-seen = 2\n \n # Sets the number of codegen units to build the standard library with,\n # regardless of what the codegen-unit setting for the rest of the compiler is.\n-#codegen-units-std = 1\n+# NOTE: building with anything other than 1 is known to occasionally have bugs.\n+# See https://github.com/rust-lang/rust/issues/83600.\n+#codegen-units-std = codegen-units\n \n # Whether or not debug assertions are enabled for the compiler and standard\n # library. Debug assertions control the maximum log level used by rustc. When\n@@ -430,19 +430,13 @@ changelog-seen = 2\n #debuginfo-level = 0\n \n # Debuginfo level for the compiler.\n-#\n-# Defaults to rust.debuginfo-level value\n-#debuginfo-level-rustc = 0\n+#debuginfo-level-rustc = debuginfo-level\n \n # Debuginfo level for the standard library.\n-#\n-# Defaults to rust.debuginfo-level value\n-#debuginfo-level-std = 0\n+#debuginfo-level-std = debuginfo-level\n \n # Debuginfo level for the tools.\n-#\n-# Defaults to rust.debuginfo-level value\n-#debuginfo-level-tools = 0\n+#debuginfo-level-tools = debuginfo-level\n \n # Debuginfo level for the test suites run with compiletest.\n # FIXME(#61117): Some tests fail when this option is enabled.\n@@ -469,7 +463,9 @@ changelog-seen = 2\n # The default linker that will be hard-coded into the generated compiler for\n # targets that don't specify linker explicitly in their target specifications.\n # Note that this is not the linker used to link said compiler.\n-#default-linker = \"cc\"\n+#\n+# See https://doc.rust-lang.org/rustc/codegen-options/index.html#linker for more information.\n+#default-linker = <none> (path)\n \n # The \"channel\" for the Rust build to produce. The stable/beta channels only\n # allow using stable features, whereas the nightly and dev channels allow using\n@@ -479,10 +475,15 @@ changelog-seen = 2\n # A descriptive string to be appended to `rustc --version` output, which is\n # also used in places like debuginfo `DW_AT_producer`. This may be useful for\n # supplementary build information, like distro-specific package versions.\n-#description = \"\"\n+#description = <none> (string)\n \n-# The root location of the musl installation directory.\n-#musl-root = \"...\"\n+# The root location of the musl installation directory. The library directory\n+# will also need to contain libunwind.a for an unwinding implementation. Note\n+# that this option only makes sense for musl targets that produce statically\n+# linked binaries.\n+#\n+# Defaults to /usr on musl hosts. Has no default otherwise.\n+#musl-root = <platform specific> (path)\n \n # By default the `rustc` executable is built with `-Wl,-rpath` flags on Unix\n # platforms to ensure that the compiler is usable by default from the build\n@@ -505,14 +506,14 @@ changelog-seen = 2\n # Having the git information can cause a lot of rebuilds during development.\n # Note: If this attribute is not explicitly set (e.g. if left commented out) it\n # will default to true if channel = \"dev\", but will default to false otherwise.\n-#ignore-git = true\n+#ignore-git = if channel == \"dev\" { true } else { false }\n \n # When creating source tarballs whether or not to create a source tarball.\n-#dist-src = false\n+#dist-src = true\n \n # After building or testing extended tools (e.g. clippy and rustfmt), append the\n # result (broken, compiling, testing) into this JSON file.\n-#save-toolstates = \"/path/to/toolstates.json\"\n+#save-toolstates = <none> (path)\n \n # This is an array of the codegen backends that will be compiled for the rustc\n # that's being compiled. The default is to only build the LLVM codegen backend,\n@@ -548,9 +549,7 @@ changelog-seen = 2\n # Compile the compiler with a non-default ThinLTO import limit. This import\n # limit controls the maximum size of functions imported by ThinLTO. Decreasing\n # will make code compile faster at the expense of lower runtime performance.\n-# If `incremental` is set to true above, the import limit will default to 10\n-# instead of LLVM's default of 100.\n-#thin-lto-import-instr-limit = 100\n+#thin-lto-import-instr-limit = if incremental { 10 } else { LLVM default (currently 100) }\n \n # Map debuginfo paths to `/rust/$sha/...`, generally only set for releases\n #remap-debuginfo = false\n@@ -584,75 +583,78 @@ changelog-seen = 2\n # =============================================================================\n [target.x86_64-unknown-linux-gnu]\n \n-# C compiler to be used to compiler C code. Note that the\n+# C compiler to be used to compile C code. Note that the\n # default value is platform specific, and if not specified it may also depend on\n # what platform is crossing to what platform.\n-#cc = \"cc\"\n+# See `src/bootstrap/cc_detect.rs` for details.\n+#cc = \"cc\" (path)\n \n-# C++ compiler to be used to compiler C++ code (e.g. LLVM and our LLVM shims).\n+# C++ compiler to be used to compile C++ code (e.g. LLVM and our LLVM shims).\n # This is only used for host targets.\n-#cxx = \"c++\"\n+# See `src/bootstrap/cc_detect.rs` for details.\n+#cxx = \"c++\" (path)\n \n # Archiver to be used to assemble static libraries compiled from C/C++ code.\n # Note: an absolute path should be used, otherwise LLVM build will break.\n-#ar = \"ar\"\n+#ar = \"ar\" (path)\n \n # Ranlib to be used to assemble static libraries compiled from C/C++ code.\n # Note: an absolute path should be used, otherwise LLVM build will break.\n-#ranlib = \"ranlib\"\n+#ranlib = \"ranlib\" (path)\n \n-# Linker to be used to link Rust code. Note that the\n+# Linker to be used to bootstrap Rust code. Note that the\n # default value is platform specific, and if not specified it may also depend on\n # what platform is crossing to what platform.\n # Setting this will override the `use-lld` option for Rust code when targeting MSVC.\n-#linker = \"cc\"\n+#linker = \"cc\" (path)\n \n # Path to the `llvm-config` binary of the installation of a custom LLVM to link\n # against. Note that if this is specified we don't compile LLVM at all for this\n # target.\n-#llvm-config = \"../path/to/llvm/root/bin/llvm-config\"\n+#llvm-config = <none> (path)\n \n # Normally the build system can find LLVM's FileCheck utility, but if\n # not, you can specify an explicit file name for it.\n-#llvm-filecheck = \"/path/to/FileCheck\"\n+#llvm-filecheck = \"/path/to/llvm-version/bin/FileCheck\"\n \n # If this target is for Android, this option will be required to specify where\n # the NDK for the target lives. This is used to find the C compiler to link and\n # build native code.\n-#android-ndk = \"/path/to/ndk\"\n+# See `src/bootstrap/cc_detect.rs` for details.\n+#android-ndk = <none> (path)\n \n # Build the sanitizer runtimes for this target.\n # This option will override the same option under [build] section.\n-#sanitizers = false\n+#sanitizers = build.sanitizers (bool)\n \n # Build the profiler runtime for this target(required when compiling with options that depend\n # on this runtime, such as `-C profile-generate` or `-Z instrument-coverage`).\n # This option will override the same option under [build] section.\n-#profiler = false\n+#profiler = build.profiler (bool)\n \n # Force static or dynamic linkage of the standard library for this target. If\n # this target is a host for rustc, this will also affect the linkage of the\n # compiler itself. This is useful for building rustc on targets that normally\n # only use static libraries. If unset, the target's default linkage is used.\n-#crt-static = false\n+#crt-static = <platform-specific> (bool)\n \n # The root location of the musl installation directory. The library directory\n # will also need to contain libunwind.a for an unwinding implementation. Note\n # that this option only makes sense for musl targets that produce statically\n-# linked binaries\n-#musl-root = \"...\"\n+# linked binaries.\n+#musl-root = build.musl-root (path)\n \n # The full path to the musl libdir.\n #musl-libdir = musl-root/lib\n \n # The root location of the `wasm32-wasi` sysroot. Only used for the\n # `wasm32-wasi` target. If you are building wasm32-wasi target, make sure to\n # create a `[target.wasm32-wasi]` section and move this field there.\n-#wasi-root = \"...\"\n+#wasi-root = <none> (path)\n \n # Used in testing for configuring where the QEMU images are located, you\n # probably don't want to use this.\n-#qemu-rootfs = \"...\"\n+#qemu-rootfs = <none> (path)\n \n # =============================================================================\n # Distribution options\n@@ -669,31 +671,27 @@ changelog-seen = 2\n #\n # This folder should be populated ahead of time before the build system is\n # invoked.\n-#sign-folder = \"path/to/folder/to/sign\"\n-\n-# This is a file which contains the password of the default gpg key. This will\n-# be passed to `gpg` down the road when signing all files in `sign-folder`\n-# above. This should be stored in plaintext.\n-#gpg-password-file = \"path/to/gpg/password\"\n+#sign-folder = <none> (path)\n \n # The remote address that all artifacts will eventually be uploaded to. The\n # build system generates manifests which will point to these urls, and for the\n # manifests to be correct they'll have to have the right URLs encoded.\n #\n # Note that this address should not contain a trailing slash as file names will\n # be appended to it.\n-#upload-addr = \"https://example.com/folder\"\n+#upload-addr = <none> (URL)\n \n # Whether to build a plain source tarball to upload\n # We disable that on Windows not to override the one already uploaded on S3\n # as the one built on Windows will contain backslashes in paths causing problems\n # on linux\n #src-tarball = true\n-#\n \n # Whether to allow failures when building tools\n #missing-tools = false\n \n # List of compression formats to use when generating dist tarballs. The list of\n # formats is provided to rust-installer, which must support all of them.\n+#\n+# This list must be non-empty.\n #compression-formats = [\"gz\", \"xz\"]"}, {"sha": "8437a10426b71dd8a0c8c1e2c99df5e1cb0b460c", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=361bfce305b8829eda7f3d133fe82a118685de1f", "patch": "@@ -8,6 +8,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n ## [Changes since the last major version]\n \n - `llvm-libunwind` now accepts `in-tree` (formerly true), `system` or `no` (formerly false) [#77703](https://github.com/rust-lang/rust/pull/77703)\n+- The options `infodir`, `localstatedir`, and `gpg-password-file` are no longer allowed in config.toml. Previously, they were ignored without warning. Note that `infodir` and `localstatedir` are still accepted by `./configure`, with a warning. [#82451](https://github.com/rust-lang/rust/pull/82451)\n \n ### Non-breaking changes\n "}, {"sha": "483816b98d689e34594df52e9a688017d4c2706b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=361bfce305b8829eda7f3d133fe82a118685de1f", "patch": "@@ -67,7 +67,7 @@ pub struct Config {\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n     pub test_compare_mode: bool,\n-    pub llvm_libunwind: Option<LlvmLibunwind>,\n+    pub llvm_libunwind: LlvmLibunwind,\n     pub color: Color,\n \n     pub on_fail: Option<String>,\n@@ -101,8 +101,8 @@ pub struct Config {\n     pub llvm_link_jobs: Option<u32>,\n     pub llvm_version_suffix: Option<String>,\n     pub llvm_use_linker: Option<String>,\n-    pub llvm_allow_old_toolchain: Option<bool>,\n-    pub llvm_polly: Option<bool>,\n+    pub llvm_allow_old_toolchain: bool,\n+    pub llvm_polly: bool,\n     pub llvm_from_ci: bool,\n \n     pub use_lld: bool,\n@@ -149,7 +149,6 @@ pub struct Config {\n     // dist misc\n     pub dist_sign_folder: Option<PathBuf>,\n     pub dist_upload_addr: Option<String>,\n-    pub dist_gpg_password_file: Option<PathBuf>,\n     pub dist_compression_formats: Option<Vec<String>>,\n \n     // libstd features\n@@ -404,10 +403,6 @@ struct Install {\n     libdir: Option<String>,\n     mandir: Option<String>,\n     datadir: Option<String>,\n-\n-    // standard paths, currently unused\n-    infodir: Option<String>,\n-    localstatedir: Option<String>,\n }\n \n /// TOML representation of how the LLVM build is configured.\n@@ -564,11 +559,10 @@ impl Config {\n         config.rust_rpath = true;\n         config.channel = \"dev\".to_string();\n         config.codegen_tests = true;\n-        config.ignore_git = false;\n         config.rust_dist_src = true;\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n         config.deny_warnings = true;\n-        config.missing_tools = false;\n+        config.bindir = \"bin\".into();\n \n         // set by build.rs\n         config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n@@ -598,7 +592,6 @@ impl Config {\n         config.dry_run = flags.dry_run;\n         config.keep_stage = flags.keep_stage;\n         config.keep_stage_std = flags.keep_stage_std;\n-        config.bindir = \"bin\".into(); // default\n         config.color = flags.color;\n         if let Some(value) = flags.deny_warnings {\n             config.deny_warnings = value;\n@@ -748,12 +741,25 @@ impl Config {\n             config.llvm_ldflags = llvm.ldflags.clone();\n             set(&mut config.llvm_use_libcxx, llvm.use_libcxx);\n             config.llvm_use_linker = llvm.use_linker.clone();\n-            config.llvm_allow_old_toolchain = llvm.allow_old_toolchain;\n-            config.llvm_polly = llvm.polly;\n+            config.llvm_allow_old_toolchain = llvm.allow_old_toolchain.unwrap_or(false);\n+            config.llvm_polly = llvm.polly.unwrap_or(false);\n             config.llvm_from_ci = match llvm.download_ci_llvm {\n                 Some(StringOrBool::String(s)) => {\n                     assert!(s == \"if-available\", \"unknown option `{}` for download-ci-llvm\", s);\n-                    config.build.triple == \"x86_64-unknown-linux-gnu\"\n+                    // This is currently all tier 1 targets (since others may not have CI artifacts)\n+                    // https://doc.rust-lang.org/rustc/platform-support.html#tier-1\n+                    // FIXME: this is duplicated in bootstrap.py\n+                    let supported_platforms = [\n+                        \"aarch64-unknown-linux-gnu\",\n+                        \"i686-pc-windows-gnu\",\n+                        \"i686-pc-windows-msvc\",\n+                        \"i686-unknown-linux-gnu\",\n+                        \"x86_64-unknown-linux-gnu\",\n+                        \"x86_64-apple-darwin\",\n+                        \"x86_64-pc-windows-gnu\",\n+                        \"x86_64-pc-windows-msvc\",\n+                    ];\n+                    supported_platforms.contains(&&*config.build.triple)\n                 }\n                 Some(StringOrBool::Bool(b)) => b,\n                 None => false,\n@@ -774,7 +780,6 @@ impl Config {\n                 check_ci_llvm!(llvm.targets);\n                 check_ci_llvm!(llvm.experimental_targets);\n                 check_ci_llvm!(llvm.link_jobs);\n-                check_ci_llvm!(llvm.link_shared);\n                 check_ci_llvm!(llvm.clang_cl);\n                 check_ci_llvm!(llvm.version_suffix);\n                 check_ci_llvm!(llvm.cflags);\n@@ -795,6 +800,11 @@ impl Config {\n                 // If we're building with ThinLTO on, we want to link to LLVM\n                 // shared, to avoid re-doing ThinLTO (which happens in the link\n                 // step) with each stage.\n+                assert_ne!(\n+                    llvm.link_shared,\n+                    Some(false),\n+                    \"setting link-shared=false is incompatible with thin-lto=true\"\n+                );\n                 config.llvm_link_shared = true;\n             }\n         }\n@@ -820,7 +830,8 @@ impl Config {\n             set(&mut config.test_compare_mode, rust.test_compare_mode);\n             config.llvm_libunwind = rust\n                 .llvm_libunwind\n-                .map(|v| v.parse().expect(\"failed to parse rust.llvm-libunwind\"));\n+                .map(|v| v.parse().expect(\"failed to parse rust.llvm-libunwind\"))\n+                .unwrap_or_default();\n             set(&mut config.backtrace, rust.backtrace);\n             set(&mut config.channel, rust.channel);\n             config.description = rust.description;\n@@ -908,7 +919,6 @@ impl Config {\n \n         if let Some(t) = toml.dist {\n             config.dist_sign_folder = t.sign_folder.map(PathBuf::from);\n-            config.dist_gpg_password_file = t.gpg_password_file.map(PathBuf::from);\n             config.dist_upload_addr = t.upload_addr;\n             config.dist_compression_formats = t.compression_formats;\n             set(&mut config.rust_dist_src, t.src_tarball);\n@@ -932,12 +942,8 @@ impl Config {\n         // default values for all options that we haven't otherwise stored yet.\n \n         config.llvm_skip_rebuild = llvm_skip_rebuild.unwrap_or(false);\n-\n-        let default = false;\n-        config.llvm_assertions = llvm_assertions.unwrap_or(default);\n-\n-        let default = true;\n-        config.rust_optimize = optimize.unwrap_or(default);\n+        config.llvm_assertions = llvm_assertions.unwrap_or(false);\n+        config.rust_optimize = optimize.unwrap_or(true);\n \n         let default = debug == Some(true);\n         config.rust_debug_assertions = debug_assertions.unwrap_or(default);"}, {"sha": "999882a1c04b0526525c21f4600e3dc0830868fc", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=361bfce305b8829eda7f3d133fe82a118685de1f", "patch": "@@ -439,7 +439,12 @@ def configure_section(lines, config):\n             lines[i] = \"{} = {}\".format(key, to_toml(value))\n             break\n         if not found:\n-            raise RuntimeError(\"failed to find config line for {}\".format(key))\n+            # These are used by rpm, but aren't accepted by x.py.\n+            # Give a warning that they're ignored, but not a hard error.\n+            if key in [\"infodir\", \"localstatedir\"]:\n+                print(\"warning: {} will be ignored\".format(key))\n+            else:\n+                raise RuntimeError(\"failed to find config line for {}\".format(key))\n \n \n for section_key in config:"}, {"sha": "24da44b933abc9c8a6b92185a9011b797e42d1c3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=361bfce305b8829eda7f3d133fe82a118685de1f", "patch": "@@ -547,7 +547,7 @@ impl Build {\n     fn std_features(&self, target: TargetSelection) -> String {\n         let mut features = \"panic-unwind\".to_string();\n \n-        match self.config.llvm_libunwind.unwrap_or_default() {\n+        match self.config.llvm_libunwind {\n             LlvmLibunwind::InTree => features.push_str(\" llvm-libunwind\"),\n             LlvmLibunwind::System => features.push_str(\" system-llvm-libunwind\"),\n             LlvmLibunwind::No => {}"}, {"sha": "c06ceb80c6ae028e425f4f07c3ae3a9083462516", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361bfce305b8829eda7f3d133fe82a118685de1f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=361bfce305b8829eda7f3d133fe82a118685de1f", "patch": "@@ -256,7 +256,7 @@ impl Step for Llvm {\n             enabled_llvm_projects.push(\"compiler-rt\");\n         }\n \n-        if let Some(true) = builder.config.llvm_polly {\n+        if builder.config.llvm_polly {\n             enabled_llvm_projects.push(\"polly\");\n         }\n \n@@ -311,7 +311,7 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_USE_LINKER\", linker);\n         }\n \n-        if let Some(true) = builder.config.llvm_allow_old_toolchain {\n+        if builder.config.llvm_allow_old_toolchain {\n             cfg.define(\"LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN\", \"YES\");\n         }\n "}]}