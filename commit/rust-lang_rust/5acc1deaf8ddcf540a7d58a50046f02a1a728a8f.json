{"sha": "5acc1deaf8ddcf540a7d58a50046f02a1a728a8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhY2MxZGVhZjhkZGNmNTQwYTdkNThhNTAwNDZmMDJhMWE3MjhhOGY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-27T21:07:56Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-29T07:51:11Z"}, "message": "Improve long error explanations for E0620 and E0621", "tree": {"sha": "1364cf4dd1d91ad56d83e6240813e9e33a75a8b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1364cf4dd1d91ad56d83e6240813e9e33a75a8b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5acc1deaf8ddcf540a7d58a50046f02a1a728a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5acc1deaf8ddcf540a7d58a50046f02a1a728a8f", "html_url": "https://github.com/rust-lang/rust/commit/5acc1deaf8ddcf540a7d58a50046f02a1a728a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5acc1deaf8ddcf540a7d58a50046f02a1a728a8f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0fb9d906444aa054c6203506350cf752e5bea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0fb9d906444aa054c6203506350cf752e5bea3", "html_url": "https://github.com/rust-lang/rust/commit/ff0fb9d906444aa054c6203506350cf752e5bea3"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "1b17faccc87f810d193bd59a19e8969c114d231f", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5acc1deaf8ddcf540a7d58a50046f02a1a728a8f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acc1deaf8ddcf540a7d58a50046f02a1a728a8f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5acc1deaf8ddcf540a7d58a50046f02a1a728a8f", "patch": "@@ -4666,28 +4666,41 @@ i_am_a_function();\n \"##,\n \n E0619: r##\"\n-A not (yet) known type was used.\n+The type-checker needed to know the type of an expression, but that type had not\n+yet been inferred.\n \n Erroneous code example:\n \n ```compile_fail,E0619\n-let x;\n-\n-match x {\n-    (..) => {} // error: the type of this value must be known in this context\n-    _ => {}\n+let mut x = vec![];\n+match x.pop() {\n+    Some(v) => {\n+        // Here, the type of `v` is not (yet) known, so we\n+        // cannot resolve this method call:\n+        v.to_uppercase(); // error: the type of this value must be known in\n+                          //        this context\n+    }\n+    None => {}\n }\n ```\n \n+Type inference typically proceeds from the top of the function to the bottom,\n+figuring out types as it goes. In some cases -- notably method calls and\n+overloadable operators like `*` -- the type checker may not have enough\n+information *yet* to make progress. This can be true even if the rest of the\n+function provides enough context (because the type-checker hasn't looked that\n+far ahead yet). In this case, type annotations can be used to help it along.\n+\n To fix this error, just specify the type of the variable. Example:\n \n ```\n-let x: i32 = 0; // Here, we say that `x` is an `i32` (and give it a value to\n-                // avoid another compiler error).\n-\n-match x {\n-    0 => {} // ok!\n-    _ => {}\n+let mut x: Vec<String> = vec![]; // We precise the type of the vec elements.\n+match x.pop() {\n+    Some(v) => {\n+        v.to_uppercase(); // Since rustc now knows the type of the vec elements,\n+                          // we can use `v`'s methods.\n+    }\n+    None => {}\n }\n ```\n \"##,\n@@ -4702,9 +4715,11 @@ let x = &[1_usize, 2] as [usize]; // error: cast to unsized type: `&[usize; 2]`\n                                   //        as `[usize]`\n ```\n \n-In Rust, some types don't have a size at compile-time (like slices and traits\n-for example). Therefore, you can't cast into them directly. Try casting to a\n-reference instead:\n+In Rust, some types don't have a known size at compile-time. For example, in a\n+slice type like `[u32]`, the number of elements is not known at compile-time and\n+hence the overall size cannot be computed. As a result, such types can only be\n+manipulated through a reference (e.g., `&T` or `&mut T`) or other pointer-type\n+(e.g., `Box` or `Rc`). Try casting to a reference instead:\n \n ```\n let x = &[1_usize, 2] as &[usize]; // ok!\n@@ -4782,5 +4797,4 @@ register_diagnostics! {\n     E0568, // auto-traits can not have predicates,\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`\n-    E0619, // intrinsic must be a function\n }"}]}