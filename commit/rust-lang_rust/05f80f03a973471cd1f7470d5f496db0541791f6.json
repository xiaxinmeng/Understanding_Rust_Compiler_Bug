{"sha": "05f80f03a973471cd1f7470d5f496db0541791f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZjgwZjAzYTk3MzQ3MWNkMWY3NDcwZDVmNDk2ZGIwNTQxNzkxZjY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-30T09:00:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-30T09:00:56Z"}, "message": "Rollup merge of #78545 - jackh726:anonymous, r=oli-obk\n\nMake anonymous binders start at 0\n\nA few changes to some test outputs, but these actually look *more* correct to me.", "tree": {"sha": "7c10971343017f35999eb3cbfe698133c66a3a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c10971343017f35999eb3cbfe698133c66a3a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05f80f03a973471cd1f7470d5f496db0541791f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfm9ZICRBK7hj4Ov3rIwAAdHIIAH70rgSLaW1TuuTPjpNCOiT7\nsoQsJ4wusA2jXFdM5UH3mk1nPERmBzeui1/4e/QoudjHow9/w8bqx3IPwrKWWgsO\nqNocWizYsqTxRS/3af3NsiMe8IkhQXTmmyZXoS6SIkNyFu11sbuKzQ32g0XOOidl\n5V9CBQTO9XDP7IXqFsiMkPT4fe47atMx2FD2Hk2jF/wFi69nyoRENuwpurDn25OF\nz/YRplc7lg+e5tl76i5RcSSrNebR5NlCQS+cpEXBGe7/1+sLwI5FhrJPFBmJolzd\n5IRWNUYTTSBafRTs/5IrMhxTT+sx5fVyBLHDFpEbmb0cJXvuqhxkiFFcPexwdRc=\n=z5KN\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c10971343017f35999eb3cbfe698133c66a3a60\nparent f8539221d073cf0f4b28ba3dff5cae8a63ae5243\nparent 41ce3979902a1b1f02679b224b968c6c4cf12554\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1604048456 +0900\ncommitter GitHub <noreply@github.com> 1604048456 +0900\n\nRollup merge of #78545 - jackh726:anonymous, r=oli-obk\n\nMake anonymous binders start at 0\n\nA few changes to some test outputs, but these actually look *more* correct to me.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05f80f03a973471cd1f7470d5f496db0541791f6", "html_url": "https://github.com/rust-lang/rust/commit/05f80f03a973471cd1f7470d5f496db0541791f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05f80f03a973471cd1f7470d5f496db0541791f6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8539221d073cf0f4b28ba3dff5cae8a63ae5243", "html_url": "https://github.com/rust-lang/rust/commit/f8539221d073cf0f4b28ba3dff5cae8a63ae5243"}, {"sha": "41ce3979902a1b1f02679b224b968c6c4cf12554", "url": "https://api.github.com/repos/rust-lang/rust/commits/41ce3979902a1b1f02679b224b968c6c4cf12554", "html_url": "https://github.com/rust-lang/rust/commit/41ce3979902a1b1f02679b224b968c6c4cf12554"}], "stats": {"total": 56, "additions": 24, "deletions": 32}, "files": [{"sha": "13bf24bf8cffb75cf01578cb36c303257901e8ed", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -684,7 +684,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Rewrite any late-bound regions so that they are anonymous. Region numbers are\n-    /// assigned starting at 1 and increasing monotonically in the order traversed\n+    /// assigned starting at 0 and increasing monotonically in the order traversed\n     /// by the fold operation.\n     ///\n     /// The chief purpose of this function is to canonicalize regions so that two\n@@ -698,8 +698,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut counter = 0;\n         Binder::bind(\n             self.replace_late_bound_regions(sig, |_| {\n+                let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(counter)));\n                 counter += 1;\n-                self.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(counter)))\n+                r\n             })\n             .0,\n         )"}, {"sha": "1ff043ae91ffb946ab1dc46b7707ff51750bb8a6", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -200,15 +200,9 @@ impl SymbolMangler<'tcx> {\n \n         let lifetimes = regions\n             .into_iter()\n-            .map(|br| {\n-                match br {\n-                    ty::BrAnon(i) => {\n-                        // FIXME(eddyb) for some reason, `anonymize_late_bound_regions` starts at `1`.\n-                        assert_ne!(i, 0);\n-                        i - 1\n-                    }\n-                    _ => bug!(\"symbol_names: non-anonymized region `{:?}` in `{:?}`\", br, value),\n-                }\n+            .map(|br| match br {\n+                ty::BrAnon(i) => i,\n+                _ => bug!(\"symbol_names: non-anonymized region `{:?}` in `{:?}`\", br, value),\n             })\n             .max()\n             .map_or(0, |max| max + 1);\n@@ -327,10 +321,6 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             // Late-bound lifetimes use indices starting at 1,\n             // see `BinderLevel` for more details.\n             ty::ReLateBound(debruijn, ty::BrAnon(i)) => {\n-                // FIXME(eddyb) for some reason, `anonymize_late_bound_regions` starts at `1`.\n-                assert_ne!(i, 0);\n-                let i = i - 1;\n-\n                 let binder = &self.binders[self.binders.len() - 1 - debruijn.index()];\n                 let depth = binder.lifetime_depths.start + i;\n "}, {"sha": "5bd8ff6cde7bd6d76ecf50d8dcf57674d34db911", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -186,8 +186,9 @@ pub fn resolve_interior<'a, 'tcx>(\n                 // which means that none of the regions inside relate to any other, even if\n                 // typeck had previously found constraints that would cause them to be related.\n                 let folded = fcx.tcx.fold_regions(&erased, &mut false, |_, current_depth| {\n+                    let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)));\n                     counter += 1;\n-                    fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)))\n+                    r\n                 });\n \n                 cause.ty = folded;"}, {"sha": "7a4ff779410528d996dc624ce435e43f0f352c99", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -6,7 +6,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n-note: the anonymous lifetime #2 defined on the body at 16:48...\n+note: the anonymous lifetime #1 defined on the body at 16:48...\n   --> $DIR/expect-fn-supply-fn.rs:16:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n@@ -30,7 +30,7 @@ note: the lifetime `'x` as defined on the function body at 13:36...\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 16:48\n+note: ...does not necessarily outlive the anonymous lifetime #1 defined on the body at 16:48\n   --> $DIR/expect-fn-supply-fn.rs:16:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});"}, {"sha": "07a67a6183462aa2a316120d1997f442e58ade5b", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -6,7 +6,7 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |\n    = note: expected reference `&u32`\n               found reference `&'x u32`\n-note: the anonymous lifetime #2 defined on the body at 14:29...\n+note: the anonymous lifetime #1 defined on the body at 14:29...\n   --> $DIR/expect-region-supply-region-2.rs:14:29\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {\n@@ -37,7 +37,7 @@ note: the lifetime `'x` as defined on the function body at 9:30...\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 14:29\n+note: ...does not necessarily outlive the anonymous lifetime #1 defined on the body at 14:29\n   --> $DIR/expect-region-supply-region-2.rs:14:29\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {"}, {"sha": "ff51aa3acf4d4a9004de0ada6e7f5547e9ccaf8e", "filename": "src/test/ui/issues/issue-10291.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -4,7 +4,7 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         x\n    |         ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 2:69...\n+note: ...the reference is valid for the anonymous lifetime #1 defined on the body at 2:69...\n   --> $DIR/issue-10291.rs:2:69\n    |\n LL |       drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {"}, {"sha": "4247d551565c80eb5619feeb59126bea43deb2cd", "filename": "src/test/ui/issues/issue-52533-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -6,12 +6,12 @@ LL |     gimme(|x, y| y)\n    |\n    = note: expected reference `&Foo<'_, '_, u32>`\n               found reference `&Foo<'_, '_, u32>`\n-note: the anonymous lifetime #4 defined on the body at 9:11...\n+note: the anonymous lifetime #3 defined on the body at 9:11...\n   --> $DIR/issue-52533-1.rs:9:11\n    |\n LL |     gimme(|x, y| y)\n    |           ^^^^^^^^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the body at 9:11\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 9:11\n   --> $DIR/issue-52533-1.rs:9:11\n    |\n LL |     gimme(|x, y| y)"}, {"sha": "4e41620eecfdd7af50e96b01a6195e4006d91811", "filename": "src/test/ui/issues/issue-52533.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |     foo(|a, b| b)\n    |                ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 5:9...\n+note: ...the reference is valid for the anonymous lifetime #1 defined on the body at 5:9...\n   --> $DIR/issue-52533.rs:5:9\n    |\n LL |     foo(|a, b| b)\n    |         ^^^^^^^^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined on the body at 5:9\n+note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the body at 5:9\n   --> $DIR/issue-52533.rs:5:9\n    |\n LL |     foo(|a, b| b)"}, {"sha": "eeec0cc786267c6492eecf6d2dad915cb9efbfc7", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     let mut ay = &y;\n    |                  ^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 7:58...\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 7:58...\n   --> $DIR/regions-nested-fns.rs:7:58\n    |\n LL |       ignore::<Box<dyn for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n@@ -19,7 +19,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         ay = z;\n    |              ^\n-note: but, the lifetime must be valid for the anonymous lifetime #2 defined on the body at 13:72...\n+note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the body at 13:72...\n   --> $DIR/regions-nested-fns.rs:13:72\n    |\n LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n@@ -48,7 +48,7 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         if false { return x; }\n    |                           ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 13:72...\n+note: ...the reference is valid for the anonymous lifetime #1 defined on the body at 13:72...\n   --> $DIR/regions-nested-fns.rs:13:72\n    |\n LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {"}, {"sha": "bba968cfde43c1906db1cbb9b8808eb2c85e4854", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     with(|o| o)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 10:10...\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 10:10...\n   --> $DIR/regions-ret-borrowed-1.rs:10:10\n    |\n LL |     with(|o| o)"}, {"sha": "4b93ca0ae67346b6f8f7d5f1008a19c58eefbd60", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     with(|o| o)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 13:10...\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 13:10...\n   --> $DIR/regions-ret-borrowed.rs:13:10\n    |\n LL |     with(|o| o)"}, {"sha": "bd20fd26180cbb7145464cc35b8f04f7b882a997", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f80f03a973471cd1f7470d5f496db0541791f6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr?ref=05f80f03a973471cd1f7470d5f496db0541791f6", "patch": "@@ -4,15 +4,15 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         x.set(y);\n    |               ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #3 defined on the body at 16:14...\n+note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 16:14...\n   --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n    |\n LL |       doit(0, &|x, y| {\n    |  ______________^\n LL | |         x.set(y);\n LL | |     });\n    | |_____^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #4 defined on the body at 16:14\n+note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined on the body at 16:14\n   --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n    |\n LL |       doit(0, &|x, y| {"}]}