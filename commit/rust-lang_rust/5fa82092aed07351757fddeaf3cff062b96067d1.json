{"sha": "5fa82092aed07351757fddeaf3cff062b96067d1", "node_id": "C_kwDOAAsO6NoAKDVmYTgyMDkyYWVkMDczNTE3NTdmZGRlYWYzY2ZmMDYyYjk2MDY3ZDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-19T23:04:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-26T21:54:30Z"}, "message": "Clear response values for overflow in new solver", "tree": {"sha": "d0cbcac419fcbd64e99533c8abc19a2cb605ac63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0cbcac419fcbd64e99533c8abc19a2cb605ac63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa82092aed07351757fddeaf3cff062b96067d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa82092aed07351757fddeaf3cff062b96067d1", "html_url": "https://github.com/rust-lang/rust/commit/5fa82092aed07351757fddeaf3cff062b96067d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa82092aed07351757fddeaf3cff062b96067d1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c42cb4ef0544fbfaa500216e53382d6b079c001", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c42cb4ef0544fbfaa500216e53382d6b079c001", "html_url": "https://github.com/rust-lang/rust/commit/1c42cb4ef0544fbfaa500216e53382d6b079c001"}], "stats": {"total": 97, "additions": 88, "deletions": 9}, "files": [{"sha": "63a73f8d50d93b62f1b51e7027609b2ac7b552e9", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5fa82092aed07351757fddeaf3cff062b96067d1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa82092aed07351757fddeaf3cff062b96067d1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=5fa82092aed07351757fddeaf3cff062b96067d1", "patch": "@@ -3,7 +3,8 @@ use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::canonical::CanonicalVarValues;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{\n-    DefineOpaqueTypes, InferCtxt, InferOk, LateBoundRegionConversionTime, TyCtxtInferExt,\n+    DefineOpaqueTypes, InferCtxt, InferOk, LateBoundRegionConversionTime, RegionVariableOrigin,\n+    TyCtxtInferExt,\n };\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::ObligationCause;\n@@ -223,18 +224,20 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         {\n             debug!(\"rerunning goal to check result is stable\");\n             let (_orig_values, canonical_goal) = self.canonicalize_goal(goal);\n-            let canonical_response =\n+            let new_canonical_response =\n                 EvalCtxt::evaluate_canonical_goal(self.tcx(), self.search_graph, canonical_goal)?;\n-            if !canonical_response.value.var_values.is_identity() {\n+            if !new_canonical_response.value.var_values.is_identity() {\n                 bug!(\n                     \"unstable result: re-canonicalized goal={canonical_goal:#?} \\\n-                     response={canonical_response:#?}\"\n+                    first_response={canonical_response:#?} \\\n+                    second_response={new_canonical_response:#?}\"\n                 );\n             }\n-            if certainty != canonical_response.value.certainty {\n+            if certainty != new_canonical_response.value.certainty {\n                 bug!(\n                     \"unstable certainty: {certainty:#?} re-canonicalized goal={canonical_goal:#?} \\\n-                     response={canonical_response:#?}\"\n+                     first_response={canonical_response:#?} \\\n+                     second_response={new_canonical_response:#?}\"\n                 );\n             }\n         }\n@@ -434,6 +437,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         })\n     }\n \n+    pub(super) fn next_region_infer(&self) -> ty::Region<'tcx> {\n+        self.infcx.next_region_var(RegionVariableOrigin::MiscVariable(DUMMY_SP))\n+    }\n+\n     pub(super) fn next_const_infer(&self, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n         self.infcx.next_const_var(\n             ty,"}, {"sha": "5b94709a5a6ff8929ee33586af46e6c30ce6c509", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5fa82092aed07351757fddeaf3cff062b96067d1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa82092aed07351757fddeaf3cff062b96067d1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=5fa82092aed07351757fddeaf3cff062b96067d1", "patch": "@@ -16,7 +16,7 @@ use rustc_infer::infer::canonical::query_response::make_query_region_constraints\n use rustc_infer::infer::canonical::CanonicalVarValues;\n use rustc_infer::infer::canonical::{CanonicalExt, QueryRegionConstraints};\n use rustc_middle::traits::query::NoSolution;\n-use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n+use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData, MaybeCause};\n use rustc_middle::ty::{self, BoundVar, GenericArgKind};\n use rustc_span::DUMMY_SP;\n use std::iter;\n@@ -60,9 +60,38 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n \n         let certainty = certainty.unify_with(goals_certainty);\n \n-        let external_constraints = self.compute_external_query_constraints()?;\n+        let response = match certainty {\n+            Certainty::Yes | Certainty::Maybe(MaybeCause::Ambiguity) => {\n+                let external_constraints = self.compute_external_query_constraints()?;\n+                Response { var_values: self.var_values, external_constraints, certainty }\n+            }\n+            Certainty::Maybe(MaybeCause::Overflow) => {\n+                // If we have overflow, it's probable that we're substituting a type\n+                // into itself infinitely and any partial substitutions in the query\n+                // response are probably not useful anyways, so just return an empty\n+                // query response.\n+                Response {\n+                    var_values: CanonicalVarValues {\n+                        var_values: self.tcx().mk_substs_from_iter(\n+                            self.var_values.var_values.iter().map(|arg| -> ty::GenericArg<'tcx> {\n+                                match arg.unpack() {\n+                                    GenericArgKind::Lifetime(_) => self.next_region_infer().into(),\n+                                    GenericArgKind::Type(_) => self.next_ty_infer().into(),\n+                                    GenericArgKind::Const(ct) => {\n+                                        self.next_const_infer(ct.ty()).into()\n+                                    }\n+                                }\n+                            }),\n+                        ),\n+                    },\n+                    external_constraints: self\n+                        .tcx()\n+                        .mk_external_constraints(ExternalConstraintsData::default()),\n+                    certainty,\n+                }\n+            }\n+        };\n \n-        let response = Response { var_values: self.var_values, external_constraints, certainty };\n         let canonical = Canonicalizer::canonicalize(\n             self.infcx,\n             CanonicalizeMode::Response { max_input_universe: self.max_input_universe },"}, {"sha": "b37f09ee185e9a29da8ff54f9df30dc687a95ba8", "filename": "tests/ui/traits/new-solver/exponential-trait-goals.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fa82092aed07351757fddeaf3cff062b96067d1/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa82092aed07351757fddeaf3cff062b96067d1/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.rs?ref=5fa82092aed07351757fddeaf3cff062b96067d1", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+trait Trait {}\n+\n+struct W<T>(T);\n+\n+impl<T, U> Trait for W<(W<T>, W<U>)>\n+where\n+    W<T>: Trait,\n+    W<U>: Trait,\n+{\n+}\n+\n+fn impls<T: Trait>() {}\n+\n+fn main() {\n+    impls::<W<_>>();\n+    //~^ ERROR type annotations needed\n+    //~| ERROR overflow evaluating the requirement `W<_>: Trait`\n+}"}, {"sha": "28a99cbbca6a18a7eaad521d1d4449d7f86910ee", "filename": "tests/ui/traits/new-solver/exponential-trait-goals.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5fa82092aed07351757fddeaf3cff062b96067d1/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fa82092aed07351757fddeaf3cff062b96067d1/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.stderr?ref=5fa82092aed07351757fddeaf3cff062b96067d1", "patch": "@@ -0,0 +1,23 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/exponential-trait-goals.rs:17:5\n+   |\n+LL |     impls::<W<_>>();\n+   |     ^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `impls`\n+\n+error[E0275]: overflow evaluating the requirement `W<_>: Trait`\n+  --> $DIR/exponential-trait-goals.rs:17:5\n+   |\n+LL |     impls::<W<_>>();\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`exponential_trait_goals`)\n+note: required by a bound in `impls`\n+  --> $DIR/exponential-trait-goals.rs:14:13\n+   |\n+LL | fn impls<T: Trait>() {}\n+   |             ^^^^^ required by this bound in `impls`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0275, E0282.\n+For more information about an error, try `rustc --explain E0275`."}]}