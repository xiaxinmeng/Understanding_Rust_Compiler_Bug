{"sha": "bb178237c5539c75e1b85ab78a8ab902b1f333d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMTc4MjM3YzU1MzljNzVlMWI4NWFiNzhhOGFiOTAyYjFmMzMzZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-25T18:25:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-25T18:25:48Z"}, "message": "Auto merge of #80235 - RalfJung:validate-promoteds, r=oli-obk\n\nvalidate promoteds\n\nTurn on const-value validation for promoteds. This is made possible now that https://github.com/rust-lang/rust/issues/67534 is resolved.\n\nI don't think this is a breaking change. We don't promote any unsafe operation any more (since https://github.com/rust-lang/rust/pull/77526 landed). We *do* promote `const fn` calls under some circumstances (in `const`/`static` initializers), but union field access and similar operations are not allowed in `const fn`. So now is a perfect time to add this check. :D\n\nr? `@oli-obk`\nFixes https://github.com/rust-lang/rust/issues/67465", "tree": {"sha": "82b10769936f0e32f1895937c78a63aa487810bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b10769936f0e32f1895937c78a63aa487810bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb178237c5539c75e1b85ab78a8ab902b1f333d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb178237c5539c75e1b85ab78a8ab902b1f333d5", "html_url": "https://github.com/rust-lang/rust/commit/bb178237c5539c75e1b85ab78a8ab902b1f333d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb178237c5539c75e1b85ab78a8ab902b1f333d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1832bdd7de93573464e1536e3ea17d5fd7d2888b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1832bdd7de93573464e1536e3ea17d5fd7d2888b", "html_url": "https://github.com/rust-lang/rust/commit/1832bdd7de93573464e1536e3ea17d5fd7d2888b"}, {"sha": "97cae9c555016cfa02a3aa1e41a41157525f8cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/97cae9c555016cfa02a3aa1e41a41157525f8cf4", "html_url": "https://github.com/rust-lang/rust/commit/97cae9c555016cfa02a3aa1e41a41157525f8cf4"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "df163f6562842d1be5387996021df23c8c2fed46", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bb178237c5539c75e1b85ab78a8ab902b1f333d5/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb178237c5539c75e1b85ab78a8ab902b1f333d5/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=bb178237c5539c75e1b85ab78a8ab902b1f333d5", "patch": "@@ -383,25 +383,19 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n         Ok(mplace) => {\n             // Since evaluation had no errors, valiate the resulting constant:\n             let validation = try {\n-                // FIXME do not validate promoteds until a decision on\n-                // https://github.com/rust-lang/rust/issues/67465 and\n-                // https://github.com/rust-lang/rust/issues/67534 is made.\n-                // Promoteds can contain unexpected `UnsafeCell` and reference `static`s, but their\n-                // otherwise restricted form ensures that this is still sound. We just lose the\n-                // extra safety net of some of the dynamic checks. They can also contain invalid\n-                // values, but since we do not usually check intermediate results of a computation\n-                // for validity, it might be surprising to do that here.\n-                if cid.promoted.is_none() {\n-                    let mut ref_tracking = RefTracking::new(mplace);\n-                    let mut inner = false;\n-                    while let Some((mplace, path)) = ref_tracking.todo.pop() {\n-                        let mode = match tcx.static_mutability(cid.instance.def_id()) {\n-                            Some(_) => CtfeValidationMode::Regular, // a `static`\n-                            None => CtfeValidationMode::Const { inner },\n-                        };\n-                        ecx.const_validate_operand(mplace.into(), path, &mut ref_tracking, mode)?;\n-                        inner = true;\n-                    }\n+                let mut ref_tracking = RefTracking::new(mplace);\n+                let mut inner = false;\n+                while let Some((mplace, path)) = ref_tracking.todo.pop() {\n+                    let mode = match tcx.static_mutability(cid.instance.def_id()) {\n+                        Some(_) if cid.promoted.is_some() => {\n+                            // Promoteds in statics are allowed to point to statics.\n+                            CtfeValidationMode::Const { inner, allow_static_ptrs: true }\n+                        }\n+                        Some(_) => CtfeValidationMode::Regular, // a `static`\n+                        None => CtfeValidationMode::Const { inner, allow_static_ptrs: false },\n+                    };\n+                    ecx.const_validate_operand(mplace.into(), path, &mut ref_tracking, mode)?;\n+                    inner = true;\n                 }\n             };\n             if let Err(error) = validation {"}, {"sha": "57aec0953b8c29e24e228465f0f94d6c42db8afb", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb178237c5539c75e1b85ab78a8ab902b1f333d5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb178237c5539c75e1b85ab78a8ab902b1f333d5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=bb178237c5539c75e1b85ab78a8ab902b1f333d5", "patch": "@@ -117,11 +117,12 @@ pub enum PathElem {\n pub enum CtfeValidationMode {\n     /// Regular validation, nothing special happening.\n     Regular,\n-    /// Validation of a `const`. `inner` says if this is an inner, indirect allocation (as opposed\n-    /// to the top-level const allocation).\n-    /// Being an inner allocation makes a difference because the top-level allocation of a `const`\n-    /// is copied for each use, but the inner allocations are implicitly shared.\n-    Const { inner: bool },\n+    /// Validation of a `const`.\n+    /// `inner` says if this is an inner, indirect allocation (as opposed to the top-level const\n+    /// allocation). Being an inner allocation makes a difference because the top-level allocation\n+    /// of a `const` is copied for each use, but the inner allocations are implicitly shared.\n+    /// `allow_static_ptrs` says if pointers to statics are permitted (which is the case for promoteds in statics).\n+    Const { inner: bool, allow_static_ptrs: bool },\n }\n \n /// State for tracking recursive validation of references\n@@ -437,7 +438,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 if let Some(GlobalAlloc::Static(did)) = alloc_kind {\n                     assert!(!self.ecx.tcx.is_thread_local_static(did));\n                     assert!(self.ecx.tcx.is_static(did));\n-                    if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { .. })) {\n+                    if matches!(\n+                        self.ctfe_mode,\n+                        Some(CtfeValidationMode::Const { allow_static_ptrs: false, .. })\n+                    ) {\n                         // See const_eval::machine::MemoryExtra::can_access_statics for why\n                         // this check is so important.\n                         // This check is reachable when the const just referenced the static,\n@@ -742,9 +746,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         // Sanity check: `builtin_deref` does not know any pointers that are not primitive.\n         assert!(op.layout.ty.builtin_deref(true).is_none());\n \n-        // Special check preventing `UnsafeCell` in constants\n+        // Special check preventing `UnsafeCell` in the inner part of constants\n         if let Some(def) = op.layout.ty.ty_adt_def() {\n-            if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true }))\n+            if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true, .. }))\n                 && Some(def.did) == self.ecx.tcx.lang_items().unsafe_cell_type()\n             {\n                 throw_validation_failure!(self.path, { \"`UnsafeCell` in a `const`\" });"}]}