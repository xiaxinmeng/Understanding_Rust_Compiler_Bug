{"sha": "a852ebb0842257239aa0b2e37693e60a46e5a666", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NTJlYmIwODQyMjU3MjM5YWEwYjJlMzc2OTNlNjBhNDZlNWE2NjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-06T07:36:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-06T07:36:44Z"}, "message": "Rollup merge of #64174 - GuillaumeGomez:missing-iterator-examples, r=sfackler\n\nAdd missing code examples on Iterator trait\n\nFixes #63865\n\ncc @rust-lang/docs", "tree": {"sha": "158a25c28ddaade9e54a5ffc0463dc1988a09dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/158a25c28ddaade9e54a5ffc0463dc1988a09dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a852ebb0842257239aa0b2e37693e60a46e5a666", "comment_count": 1, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcgyMCRBK7hj4Ov3rIwAAdHIIADud782korowaj5eDflbBwmf\nhsb8hLe3t/znoBpp5Y8XO+wJt3+oR/kaaM3dbj6yKVlHBu0x/L5fyMd26ck2rNB3\n++rT9DCSM0sV1Y7gozkFqasVOg3O5EVVI/CXnhf+AWeUvgN/+0nH1ZHwxjmfJCJf\na+Jd6ENT6U5h1X1ZGoAvXkTNhr/GQAG9h89QnVcZF82Y5fu2tvnXxeL64woThVBJ\nuVSf8ibJZsy+bWgOY9umyGwuu4PJoOwKlJkcTyUc0qGAxisfs/Qs3CyB8lZcUK3F\npNl/OYPBYq1T7WRpTxaxDfTbLklUU+agQbDOrQDm1yip5FUCi6r0TPglHflkbrg=\n=jDgT\n-----END PGP SIGNATURE-----\n", "payload": "tree 158a25c28ddaade9e54a5ffc0463dc1988a09dc9\nparent 6968e53a5c4e6d883ae4683d76bb5a8ca444aedb\nparent c9bd2f73a37df377e2c778690756f0dcf9f25ce1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567755404 +0200\ncommitter GitHub <noreply@github.com> 1567755404 +0200\n\nRollup merge of #64174 - GuillaumeGomez:missing-iterator-examples, r=sfackler\n\nAdd missing code examples on Iterator trait\n\nFixes #63865\n\ncc @rust-lang/docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a852ebb0842257239aa0b2e37693e60a46e5a666", "html_url": "https://github.com/rust-lang/rust/commit/a852ebb0842257239aa0b2e37693e60a46e5a666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a852ebb0842257239aa0b2e37693e60a46e5a666/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6968e53a5c4e6d883ae4683d76bb5a8ca444aedb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6968e53a5c4e6d883ae4683d76bb5a8ca444aedb", "html_url": "https://github.com/rust-lang/rust/commit/6968e53a5c4e6d883ae4683d76bb5a8ca444aedb"}, {"sha": "c9bd2f73a37df377e2c778690756f0dcf9f25ce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bd2f73a37df377e2c778690756f0dcf9f25ce1", "html_url": "https://github.com/rust-lang/rust/commit/c9bd2f73a37df377e2c778690756f0dcf9f25ce1"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "8fd5fe0653eedcafa4515648e296d8b90956524c", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a852ebb0842257239aa0b2e37693e60a46e5a666/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a852ebb0842257239aa0b2e37693e60a46e5a666/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=a852ebb0842257239aa0b2e37693e60a46e5a666", "patch": "@@ -2546,6 +2546,16 @@ pub trait Iterator {\n \n     /// Lexicographically compares the elements of this `Iterator` with those\n     /// of another.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// assert_eq!([1].iter().cmp([1].iter()), Ordering::Equal);\n+    /// assert_eq!([1].iter().cmp([1, 2].iter()), Ordering::Less);\n+    /// assert_eq!([1, 2].iter().cmp([1].iter()), Ordering::Greater);\n+    /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn cmp<I>(mut self, other: I) -> Ordering where\n         I: IntoIterator<Item = Self::Item>,\n@@ -2578,6 +2588,18 @@ pub trait Iterator {\n \n     /// Lexicographically compares the elements of this `Iterator` with those\n     /// of another.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// assert_eq!([1.].iter().partial_cmp([1.].iter()), Some(Ordering::Equal));\n+    /// assert_eq!([1.].iter().partial_cmp([1., 2.].iter()), Some(Ordering::Less));\n+    /// assert_eq!([1., 2.].iter().partial_cmp([1.].iter()), Some(Ordering::Greater));\n+    ///\n+    /// assert_eq!([std::f64::NAN].iter().partial_cmp([1.].iter()), None);\n+    /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn partial_cmp<I>(mut self, other: I) -> Option<Ordering> where\n         I: IntoIterator,\n@@ -2610,6 +2632,13 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are equal to those of\n     /// another.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!([1].iter().eq([1].iter()), true);\n+    /// assert_eq!([1].iter().eq([1, 2].iter()), false);\n+    /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn eq<I>(mut self, other: I) -> bool where\n         I: IntoIterator,\n@@ -2635,6 +2664,13 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are unequal to those of\n     /// another.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!([1].iter().ne([1].iter()), false);\n+    /// assert_eq!([1].iter().ne([1, 2].iter()), true);\n+    /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn ne<I>(self, other: I) -> bool where\n         I: IntoIterator,\n@@ -2646,6 +2682,14 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// less than those of another.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!([1].iter().lt([1].iter()), false);\n+    /// assert_eq!([1].iter().lt([1, 2].iter()), true);\n+    /// assert_eq!([1, 2].iter().lt([1].iter()), false);\n+    /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn lt<I>(self, other: I) -> bool where\n         I: IntoIterator,\n@@ -2657,6 +2701,14 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// less or equal to those of another.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!([1].iter().le([1].iter()), true);\n+    /// assert_eq!([1].iter().le([1, 2].iter()), true);\n+    /// assert_eq!([1, 2].iter().le([1].iter()), false);\n+    /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn le<I>(self, other: I) -> bool where\n         I: IntoIterator,\n@@ -2671,6 +2723,14 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// greater than those of another.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!([1].iter().gt([1].iter()), false);\n+    /// assert_eq!([1].iter().gt([1, 2].iter()), false);\n+    /// assert_eq!([1, 2].iter().gt([1].iter()), true);\n+    /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn gt<I>(self, other: I) -> bool where\n         I: IntoIterator,\n@@ -2682,6 +2742,14 @@ pub trait Iterator {\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// greater than or equal to those of another.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!([1].iter().ge([1].iter()), true);\n+    /// assert_eq!([1].iter().ge([1, 2].iter()), false);\n+    /// assert_eq!([1, 2].iter().ge([1].iter()), true);\n+    /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn ge<I>(self, other: I) -> bool where\n         I: IntoIterator,\n@@ -2730,6 +2798,18 @@ pub trait Iterator {\n     /// function to determine the ordering of two elements. Apart from that, it's equivalent to\n     /// [`is_sorted`]; see its documentation for more information.\n     ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(is_sorted)]\n+    ///\n+    /// assert!([1, 2, 2, 9].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n+    /// assert!(![1, 3, 2, 4].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n+    /// assert!([0].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n+    /// assert!(std::iter::empty::<i32>().is_sorted_by(|a, b| a.partial_cmp(b)));\n+    /// assert!(![0.0, 1.0, std::f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n+    /// ```\n+    ///\n     /// [`is_sorted`]: trait.Iterator.html#method.is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     fn is_sorted_by<F>(mut self, mut compare: F) -> bool"}]}