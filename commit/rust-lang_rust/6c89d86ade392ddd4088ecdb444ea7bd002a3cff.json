{"sha": "6c89d86ade392ddd4088ecdb444ea7bd002a3cff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjODlkODZhZGUzOTJkZGQ0MDg4ZWNkYjQ0NGVhN2JkMDAyYTNjZmY=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-01-05T00:25:29Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-01-10T20:14:19Z"}, "message": "Tweaks", "tree": {"sha": "752e9568d763e237559c3f8cec21957f6e689859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752e9568d763e237559c3f8cec21957f6e689859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c89d86ade392ddd4088ecdb444ea7bd002a3cff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c89d86ade392ddd4088ecdb444ea7bd002a3cff", "html_url": "https://github.com/rust-lang/rust/commit/6c89d86ade392ddd4088ecdb444ea7bd002a3cff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c89d86ade392ddd4088ecdb444ea7bd002a3cff/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d993f329a01deb3cdc011c3eb1dfd859302fec04", "url": "https://api.github.com/repos/rust-lang/rust/commits/d993f329a01deb3cdc011c3eb1dfd859302fec04", "html_url": "https://github.com/rust-lang/rust/commit/d993f329a01deb3cdc011c3eb1dfd859302fec04"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "7d31ef6bddc63b74c883b9b349eccb571cbe849f", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6c89d86ade392ddd4088ecdb444ea7bd002a3cff/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c89d86ade392ddd4088ecdb444ea7bd002a3cff/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=6c89d86ade392ddd4088ecdb444ea7bd002a3cff", "patch": "@@ -232,22 +232,26 @@ fn access_mode(kind: NameKind, name_ref: &ast::NameRef) -> Option<ReferenceAcces\n                 match_ast! {\n                     match (node) {\n                         ast::BinExpr(expr) => {\n-                            match expr.op_kind() {\n-                                Some(kind) if kind.is_assignment() => {\n-                                    if let Some(lhs) = expr.lhs() {\n-                                        if lhs.syntax().text_range() == name_ref.syntax().text_range() {\n-                                            return Some(ReferenceAccess::Write);\n-                                        }\n+                            if expr.op_kind()?.is_assignment() {\n+                                // If the variable or field ends on the LHS's end then it's a Write (covers fields and locals).\n+                                // FIXME: This is not terribly accurate.\n+                                if let Some(lhs) = expr.lhs() {\n+                                    if lhs.syntax().text_range().end() == name_ref.syntax().text_range().end() {\n+                                        return Some(ReferenceAccess::Write);\n+                                    } else if name_ref.syntax().text_range().is_subrange(&lhs.syntax().text_range()) {\n+                                        return Some(ReferenceAccess::Read);\n                                     }\n+                                }\n \n-                                    if let Some(rhs) = expr.rhs() {\n-                                        if rhs.syntax().text_range().is_subrange(&name_ref.syntax().text_range()) {\n-                                            return Some(ReferenceAccess::Read);\n-                                        }\n+                                // If the variable is on the RHS then it's a Read.\n+                                if let Some(rhs) = expr.rhs() {\n+                                    if name_ref.syntax().text_range().is_subrange(&rhs.syntax().text_range()) {\n+                                        return Some(ReferenceAccess::Read);\n                                     }\n-                                },\n-                                _ => { return Some(ReferenceAccess::Read) },\n+                                }\n                             }\n+\n+                            // Cannot determine access\n                             None\n                         },\n                         _ => {None}\n@@ -565,7 +569,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_basic_highlight_read() {\n+    fn test_basic_highlight_read_write() {\n         let code = r#\"\n         fn foo() {\n             let i<|> = 0;\n@@ -578,6 +582,24 @@ mod tests {\n         assert_eq!(refs.references[1].access, Some(ReferenceAccess::Read));\n     }\n \n+    #[test]\n+    fn test_basic_highlight_field_read_write() {\n+        let code = r#\"\n+        struct S {\n+            f: u32,\n+        }\n+\n+        fn foo() {\n+            let mut s = S{f: 0};\n+            s.f<|> = 0;\n+        }\"#;\n+\n+        let refs = get_all_refs(code);\n+        assert_eq!(refs.len(), 3);\n+        //assert_eq!(refs.references[0].access, Some(ReferenceAccess::Write));\n+        assert_eq!(refs.references[1].access, Some(ReferenceAccess::Write));\n+    }\n+\n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position, None).unwrap().unwrap()"}]}