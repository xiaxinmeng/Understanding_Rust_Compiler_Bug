{"sha": "cdd6bba8f662b25d52a58d5ffebbe5c3eac60220", "node_id": "C_kwDOAAsO6NoAKGNkZDZiYmE4ZjY2MmIyNWQ1MmE1OGQ1ZmZlYmJlNWMzZWFjNjAyMjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T14:23:32Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T14:23:32Z"}, "message": "Simplify size checking", "tree": {"sha": "cf124750055e64348d921a03e11bd0ebed164a5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf124750055e64348d921a03e11bd0ebed164a5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd6bba8f662b25d52a58d5ffebbe5c3eac60220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd6bba8f662b25d52a58d5ffebbe5c3eac60220", "html_url": "https://github.com/rust-lang/rust/commit/cdd6bba8f662b25d52a58d5ffebbe5c3eac60220", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd6bba8f662b25d52a58d5ffebbe5c3eac60220/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d935c70afa464dcf16db532e39ae53621debd096", "url": "https://api.github.com/repos/rust-lang/rust/commits/d935c70afa464dcf16db532e39ae53621debd096", "html_url": "https://github.com/rust-lang/rust/commit/d935c70afa464dcf16db532e39ae53621debd096"}], "stats": {"total": 70, "additions": 31, "deletions": 39}, "files": [{"sha": "9e80a708f2fd786df550ebb447735bdf4c31871b", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "modified", "additions": 31, "deletions": 39, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cdd6bba8f662b25d52a58d5ffebbe5c3eac60220/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd6bba8f662b25d52a58d5ffebbe5c3eac60220/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=cdd6bba8f662b25d52a58d5ffebbe5c3eac60220", "patch": "@@ -23,58 +23,50 @@ struct NoNiche<T>(UnsafeCell<T>);\n struct Size<const S: usize>;\n \n // Overwriting the runtime assertion and making it a compile-time assertion\n-macro_rules! assert_size {\n-    ($a:ty, $b:expr) => {\n-        const _: Size::<{$b}> = Size::<{size_of::<$a>()}>;\n+macro_rules! assert_size_eq {\n+    ($ty:ty, $size:expr) => {\n+        const _: Size::<{$size}> = Size::<{size_of::<$ty>()}>;\n+    };\n+    ($ty:ty, $size:expr, $optioned_size:expr) => {\n+        assert_size_eq!($ty, $size);\n+        assert_size_eq!(Option<$ty>, $optioned_size);\n+        const _: () = assert!($size == $optioned_size || size_of::<$ty>() < size_of::<Option<$ty>>());\n     };\n }\n \n const PTR_SIZE: usize = std::mem::size_of::<*const ()>();\n \n-assert_size!(Option<Wrapper<u32>>,     8);\n-assert_size!(Option<Wrapper<N32>>,     4); // (\u2713 niche opt)\n-assert_size!(Option<Transparent<u32>>, 8);\n-assert_size!(Option<Transparent<N32>>, 4); // (\u2713 niche opt)\n-assert_size!(Option<NoNiche<u32>>,     8);\n-assert_size!(Option<NoNiche<N32>>,     8); // (\u2717 niche opt)\n-\n-assert_size!(Option<UnsafeCell<u32>>,  8);\n-assert_size!(Option<UnsafeCell<N32>>,  8); // (\u2717 niche opt)\n-\n-assert_size!(       UnsafeCell<&()> , PTR_SIZE);\n-assert_size!(Option<UnsafeCell<&()>>, PTR_SIZE * 2); // (\u2717 niche opt)\n-assert_size!(             Cell<&()> , PTR_SIZE);\n-assert_size!(Option<      Cell<&()>>, PTR_SIZE * 2); // (\u2717 niche opt)\n-assert_size!(          RefCell<&()> , PTR_SIZE * 2);\n-assert_size!(Option<   RefCell<&()>>, PTR_SIZE * 3); // (\u2717 niche opt)\n-assert_size!(\n+assert_size_eq!(Wrapper<u32>,     4, 8);\n+assert_size_eq!(Wrapper<N32>,     4, 4); // (\u2713 niche opt)\n+assert_size_eq!(Transparent<u32>, 4, 8);\n+assert_size_eq!(Transparent<N32>, 4, 4); // (\u2713 niche opt)\n+assert_size_eq!(NoNiche<u32>,     4, 8);\n+assert_size_eq!(NoNiche<N32>,     4, 8);\n+\n+assert_size_eq!(UnsafeCell<u32>,  4, 8);\n+assert_size_eq!(UnsafeCell<N32>,  4, 8);\n+\n+assert_size_eq!(UnsafeCell<&()> , PTR_SIZE, PTR_SIZE * 2);\n+assert_size_eq!(      Cell<&()> , PTR_SIZE, PTR_SIZE * 2);\n+assert_size_eq!(   RefCell<&()> , PTR_SIZE * 2, PTR_SIZE * 3);\n+assert_size_eq!(\n     RwLock<&()>,\n-    if cfg!(target_pointer_width = \"32\") { 16 } else { 24 }\n-);\n-assert_size!(\n-    Option<RwLock<&()>>,\n+    if cfg!(target_pointer_width = \"32\") { 16 } else { 24 },\n     if cfg!(target_pointer_width = \"32\") { 20 } else { 32 }\n-); // (\u2717 niche opt)\n-assert_size!(\n-    Mutex<&()> ,\n-    if cfg!(target_pointer_width = \"32\") { 12 } else { 16 }\n );\n-assert_size!(\n-    Option<Mutex<&()>>,\n+assert_size_eq!(\n+    Mutex<&()> ,\n+    if cfg!(target_pointer_width = \"32\") { 12 } else { 16 },\n     if cfg!(target_pointer_width = \"32\") { 16 } else { 24 }\n-); // (\u2717 niche opt)\n+);\n \n-assert_size!(       UnsafeCell<&[i32]> , PTR_SIZE * 2);\n-assert_size!(Option<UnsafeCell<&[i32]>>, PTR_SIZE * 3); // (\u2717 niche opt)\n-assert_size!(       UnsafeCell<(&(), &())> , PTR_SIZE * 2);\n-assert_size!(Option<UnsafeCell<(&(), &())>>, PTR_SIZE * 3); // (\u2717 niche opt)\n+assert_size_eq!(UnsafeCell<&[i32]> , PTR_SIZE * 2, PTR_SIZE * 3);\n+assert_size_eq!(UnsafeCell<(&(), &())> , PTR_SIZE * 2, PTR_SIZE * 3);\n \n trait Trait {}\n-assert_size!(       UnsafeCell<&dyn Trait> , PTR_SIZE * 2);\n-assert_size!(Option<UnsafeCell<&dyn Trait>>, PTR_SIZE * 3); // (\u2717 niche opt)\n+assert_size_eq!(UnsafeCell<&dyn Trait> , PTR_SIZE * 2, PTR_SIZE * 3);\n \n #[repr(simd)]\n pub struct Vec4<T>([T; 4]);\n \n-assert_size!(       UnsafeCell<Vec4<N32>> , 16);\n-assert_size!(Option<UnsafeCell<Vec4<N32>>>, 32); // (\u2717 niche opt)\n+assert_size_eq!(UnsafeCell<Vec4<N32>> , 16, 32);"}]}