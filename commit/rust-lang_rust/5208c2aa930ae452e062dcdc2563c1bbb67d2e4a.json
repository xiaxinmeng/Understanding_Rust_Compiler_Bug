{"sha": "5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDhjMmFhOTMwYWU0NTJlMDYyZGNkYzI1NjNjMWJiYjY3ZDJlNGE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-19T20:23:26Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-01T21:14:34Z"}, "message": "Sketching the resolver API", "tree": {"sha": "9d6c6868485a8013c420a7ba74a29930d9c85737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d6c6868485a8013c420a7ba74a29930d9c85737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "html_url": "https://github.com/rust-lang/rust/commit/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b5c226e86892113bcab478cdf4c9adaf1e7b2f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5c226e86892113bcab478cdf4c9adaf1e7b2f6", "html_url": "https://github.com/rust-lang/rust/commit/2b5c226e86892113bcab478cdf4c9adaf1e7b2f6"}], "stats": {"total": 145, "additions": 134, "deletions": 11}, "files": [{"sha": "73541a8c38aff988786173ff57baaedfa5173302", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "patch": "@@ -9,14 +9,15 @@ use crate::{\n     type_ref::TypeRef,\n     nameres::{ModuleScope, lower::ImportId},\n     HirDatabase, PersistentHirDatabase,\n-    expr::BodySyntaxMapping,\n-    ty::{InferenceResult},\n+    expr::{Body, BodySyntaxMapping},\n+    ty::InferenceResult,\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::GenericParams,\n     docs::{Documentation, Docs, docs_from_ast},\n     module_tree::ModuleId,\n     ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeId},\n     impl_block::ImplId,\n+    resolve::Resolver,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -175,12 +176,18 @@ impl Module {\n     }\n \n     pub fn resolve_path(&self, db: &impl PersistentHirDatabase, path: &Path) -> PerNs<ModuleDef> {\n+        // TODO replace by Resolver::resolve_path\n         db.item_map(self.krate).resolve_path(db, *self, path)\n     }\n \n     pub fn problems(&self, db: &impl HirDatabase) -> Vec<(TreeArc<SyntaxNode>, Problem)> {\n         self.problems_impl(db)\n     }\n+\n+    #[allow(unused_variables)]\n+    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+        unimplemented!()\n+    }\n }\n \n impl Docs for Module {\n@@ -449,6 +456,10 @@ impl Function {\n         db.body_syntax_mapping(*self)\n     }\n \n+    pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n+        db.body_hir(*self)\n+    }\n+\n     pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSyntaxMapping {\n         let scopes = db.expr_scopes(*self);\n         let syntax_mapping = db.body_syntax_mapping(*self);"}, {"sha": "8326c02c783b5a22f155afdf765cbebc39157d7d", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "patch": "@@ -5,14 +5,12 @@ use ra_syntax::ast::{self, NameOwner};\n use crate::{\n     HirDatabase, Name, AsName, Function, FnSignature,\n     type_ref::{TypeRef, Mutability},\n-    expr::Body, PersistentHirDatabase,\n+    PersistentHirDatabase,\n     impl_block::ImplBlock,\n };\n \n impl Function {\n-    pub(crate) fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body_hir(*self)\n-    }\n+    // TODO impl_block should probably also be part of the code model API?\n \n     /// The containing impl block, if this is a method.\n     pub(crate) fn impl_block(&self, db: &impl HirDatabase) -> Option<ImplBlock> {"}, {"sha": "6d124fe2f728be8b7cbda841ff546bd8f53ee642", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "patch": "@@ -10,15 +10,15 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Path, Name, Function,\n-    name::AsName, HirDatabase,\n+    Path, Name, HirDatabase, Function, Resolver,\n+    name::AsName,\n     type_ref::{Mutability, TypeRef},\n };\n use crate::ty::primitive::{UintTy, UncertainIntTy, UncertainFloatTy};\n \n pub use self::scope::{ExprScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n \n-mod scope;\n+pub(crate) mod scope;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct ExprId(RawId);\n@@ -62,6 +62,11 @@ impl Body {\n     pub fn body_expr(&self) -> ExprId {\n         self.body_expr\n     }\n+\n+    #[allow(unused_variables)]\n+    pub fn resolver_for_expr(&self, expr_id: ExprId) -> Resolver {\n+        unimplemented!()\n+    }\n }\n \n impl Index<ExprId> for Body {"}, {"sha": "504a087a3901731e6729f5a3106cb0334283dc41", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "patch": "@@ -73,6 +73,7 @@ impl ExprScopes {\n         context_expr: ExprId,\n         name: Name,\n     ) -> Option<&'a ScopeEntry> {\n+        // TODO replace by Resolver::resolve_name\n         let mut shadowed = FxHashSet::default();\n         let ret = self\n             .scope_chain_for(context_expr)\n@@ -179,6 +180,7 @@ impl ScopesWithSyntaxMapping {\n \n     // XXX: during completion, cursor might be outside of any particular\n     // expression. Try to figure out the correct scope...\n+    // TODO: move this to source binder?\n     fn adjust(&self, ptr: SyntaxNodePtr, original_scope: ScopeId, offset: TextUnit) -> ScopeId {\n         let r = ptr.range();\n         let child_scopes = self"}, {"sha": "e58658378a7e4ad0288d1095868444b8894786d3", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "patch": "@@ -36,6 +36,7 @@ mod impl_block;\n mod expr;\n mod generics;\n mod docs;\n+mod resolve;\n \n mod code_model_api;\n mod code_model_impl;\n@@ -60,6 +61,7 @@ pub use self::{\n     docs::{Docs, Documentation},\n     adt::AdtDef,\n     expr::{ExprScopes, ScopesWithSyntaxMapping},\n+    resolve::Resolver,\n };\n \n pub use self::code_model_api::{"}, {"sha": "e825ec089670f60dd167c8a5498e0266aa583c28", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "patch": "@@ -30,7 +30,7 @@ use crate::{\n     nameres::lower::{ImportId, LoweredModule, ImportData},\n };\n \n-/// `ItemMap` is the result of name resolution. It contains, for each\n+/// `ItemMap` is the result of module name resolution. It contains, for each\n /// module, the set of visible items.\n #[derive(Default, Debug, PartialEq, Eq)]\n pub struct ItemMap {"}, {"sha": "41fcb35bc8a70d62f8d6bb49dae2f88e4c191631", "filename": "crates/ra_hir/src/resolve.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "patch": "@@ -0,0 +1,100 @@\n+#![allow(unused_variables, dead_code)]\n+//! Name resolution.\n+use std::sync::Arc;\n+\n+use rustc_hash::FxHashMap;\n+\n+use crate::{\n+    ModuleDef,\n+    name::Name,\n+    nameres::{PerNs, lower::ImportId, ItemMap},\n+    module_tree::ModuleId,\n+    generics::GenericParams,\n+    expr::{Body, scope::{ExprScopes, ScopeId}, PatId},\n+    impl_block::ImplBlock,\n+    path::Path,\n+};\n+\n+#[derive(Debug, Clone)]\n+pub struct Resolver {\n+    scopes: Vec<Scope>, // maybe a 'linked list' of scopes? or allow linking a Resolver to a parent Resolver? that's an optimization that might not be necessary, though\n+}\n+\n+// TODO how to store these best\n+#[derive(Debug, Clone)]\n+pub(crate) struct ModuleItemMap {\n+    item_map: Arc<ItemMap>,\n+    module_id: ModuleId,\n+}\n+\n+#[derive(Debug, Clone)]\n+pub(crate) struct ExprScope {\n+    expr_scopes: Arc<ExprScopes>,\n+    scope_id: ScopeId,\n+}\n+\n+#[derive(Debug, Clone)]\n+pub(crate) enum Scope {\n+    /// All the items and imported names of a module\n+    ModuleScope(ModuleItemMap),\n+    /// Brings the generic parameters of an item into scope\n+    GenericParams(Arc<GenericParams>),\n+    /// Brings the function parameters into scope\n+    FunctionParams(Arc<Body>),\n+    /// Brings `Self` into scope\n+    ImplBlockScope(ImplBlock),\n+    /// Local bindings\n+    ExprScope(ExprScope),\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum Resolution {\n+    /// An item\n+    Def {\n+        def: ModuleDef,\n+        import: Option<ImportId>,\n+    },\n+    /// A local binding (only value namespace)\n+    LocalBinding { pat: PatId },\n+    /// A generic parameter\n+    GenericParam { idx: u32 },\n+    // TODO how does `Self` resolve?\n+}\n+\n+impl Resolver {\n+    pub fn resolve_name(&self, name: &Name) -> PerNs<Resolution> {\n+        for scope in self.scopes.iter().rev() {\n+            let resolution = scope.resolve_name(name);\n+            if !resolution.is_none() {\n+                return resolution;\n+            }\n+        }\n+        PerNs::none()\n+    }\n+\n+    pub fn resolve_path(&self, path: &Path) -> PerNs<Resolution> {\n+        unimplemented!()\n+    }\n+\n+    pub fn all_names(&self) -> FxHashMap<Name, Resolution> {\n+        unimplemented!()\n+    }\n+}\n+\n+impl Resolver {\n+    pub(crate) fn push_scope(mut self, scope: Scope) -> Resolver {\n+        self.scopes.push(scope);\n+        self\n+    }\n+\n+    pub(crate) fn pop_scope(mut self) -> Resolver {\n+        self.scopes.pop();\n+        self\n+    }\n+}\n+\n+impl Scope {\n+    fn resolve_name(&self, name: &Name) -> PerNs<Resolution> {\n+        unimplemented!()\n+    }\n+}"}, {"sha": "1fdd7d087a33fd480270cd8b2ffbd714a5faf7b3", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5208c2aa930ae452e062dcdc2563c1bbb67d2e4a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=5208c2aa930ae452e062dcdc2563c1bbb67d2e4a", "patch": "@@ -14,7 +14,7 @@ use ra_syntax::{\n \n use crate::{\n     HirDatabase, Function, ModuleDef, Struct, Enum,\n-    AsName, Module, HirFileId, Crate, Trait,\n+    AsName, Module, HirFileId, Crate, Trait, Resolver,\n     ids::{LocationCtx, SourceFileItemId},\n };\n \n@@ -201,3 +201,8 @@ pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, Te\n \n     res\n }\n+\n+#[allow(unused_variables)]\n+pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> Resolver {\n+    unimplemented!()\n+}"}]}