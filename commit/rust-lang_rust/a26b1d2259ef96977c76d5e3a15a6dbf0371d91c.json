{"sha": "a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "node_id": "C_kwDOAAsO6NoAKGEyNmIxZDIyNTllZjk2OTc3Yzc2ZDVlM2ExNWE2ZGJmMDM3MWQ5MWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-31T08:20:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-31T08:20:24Z"}, "message": "Rollup merge of #89835 - jkugelman:must-use-expensive-computations, r=joshtriplett\n\nAdd #[must_use] to expensive computations\n\nThe unifying theme for this commit is weak, admittedly. I put together a list of \"expensive\" functions when I originally proposed this whole effort, but nobody's cared about that criterion. Still, it's a decent way to bite off a not-too-big chunk of work.\n\nGiven the grab bag nature of this commit, the messages I used vary quite a bit. I'm open to wording changes.\n\nFor some reason clippy flagged four `BTreeSet` methods but didn't say boo about equivalent ones on `HashSet`. I stared at them for a while but I can't figure out the difference so I added the `HashSet` ones in.\n\n```rust\n// Flagged by clippy.\nalloc::collections::btree_set::BTreeSet<T>   fn difference<'a>(&'a self, other: &'a BTreeSet<T>) -> Difference<'a, T>;\nalloc::collections::btree_set::BTreeSet<T>   fn symmetric_difference<'a>(&'a self, other: &'a BTreeSet<T>) -> SymmetricDifference<'a, T>\nalloc::collections::btree_set::BTreeSet<T>   fn intersection<'a>(&'a self, other: &'a BTreeSet<T>) -> Intersection<'a, T>;\nalloc::collections::btree_set::BTreeSet<T>   fn union<'a>(&'a self, other: &'a BTreeSet<T>) -> Union<'a, T>;\n\n// Ignored by clippy, but not by me.\nstd::collections::HashSet<T, S>              fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S>;\nstd::collections::HashSet<T, S>              fn symmetric_difference<'a>(&'a self, other: &'a HashSet<T, S>) -> SymmetricDifference<'a, T, S>\nstd::collections::HashSet<T, S>              fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S>;\nstd::collections::HashSet<T, S>              fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S>;\n```\n\nParent issue: #89692\n\nr? ```@joshtriplett```", "tree": {"sha": "c2d00361e0b9138c14309eaeb3564e6630e717e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2d00361e0b9138c14309eaeb3564e6630e717e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhflHICRBK7hj4Ov3rIwAAEaUIAGlENPXKvrOAZbg2bg0R4Vfq\nw8N2DTmviegQEBqKlUUUBTOrfIvhHbxAzmOgQJjrnMmnjP3xO7ytI/xcSEl77ULw\nqWHlAsFfO1yXy7NrLxjSS/oWhqLxxt+knCBLWafOo/D+qJd7WiheRM1FFfLnfnsy\nYs7D/txifQxT821FiRagZIl2NKRd9BVAcYFa+bpFJCViE1wsVu9PKjcPHNzwhSCV\nErdBAubbe5vxI2ZGAXPqHQkgHdzPSgwcsav6zNy1DvMl8dCh1jTZ9aQgqWid30l4\n9DrFST6jdyI4lm6110s7p7/Qsy4KnMdmyey/hjEYD1iMqRqOKXffw0GOMi3PTnQ=\n=gGBR\n-----END PGP SIGNATURE-----\n", "payload": "tree c2d00361e0b9138c14309eaeb3564e6630e717e4\nparent 3cf3910c15a3c33dde3c380ac57501d37aa58e71\nparent 21f467774415b9f237bf1d0ece7236beb2e198a3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635668424 +0100\ncommitter GitHub <noreply@github.com> 1635668424 +0100\n\nRollup merge of #89835 - jkugelman:must-use-expensive-computations, r=joshtriplett\n\nAdd #[must_use] to expensive computations\n\nThe unifying theme for this commit is weak, admittedly. I put together a list of \"expensive\" functions when I originally proposed this whole effort, but nobody's cared about that criterion. Still, it's a decent way to bite off a not-too-big chunk of work.\n\nGiven the grab bag nature of this commit, the messages I used vary quite a bit. I'm open to wording changes.\n\nFor some reason clippy flagged four `BTreeSet` methods but didn't say boo about equivalent ones on `HashSet`. I stared at them for a while but I can't figure out the difference so I added the `HashSet` ones in.\n\n```rust\n// Flagged by clippy.\nalloc::collections::btree_set::BTreeSet<T>   fn difference<'a>(&'a self, other: &'a BTreeSet<T>) -> Difference<'a, T>;\nalloc::collections::btree_set::BTreeSet<T>   fn symmetric_difference<'a>(&'a self, other: &'a BTreeSet<T>) -> SymmetricDifference<'a, T>\nalloc::collections::btree_set::BTreeSet<T>   fn intersection<'a>(&'a self, other: &'a BTreeSet<T>) -> Intersection<'a, T>;\nalloc::collections::btree_set::BTreeSet<T>   fn union<'a>(&'a self, other: &'a BTreeSet<T>) -> Union<'a, T>;\n\n// Ignored by clippy, but not by me.\nstd::collections::HashSet<T, S>              fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S>;\nstd::collections::HashSet<T, S>              fn symmetric_difference<'a>(&'a self, other: &'a HashSet<T, S>) -> SymmetricDifference<'a, T, S>\nstd::collections::HashSet<T, S>              fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S>;\nstd::collections::HashSet<T, S>              fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S>;\n```\n\nParent issue: #89692\n\nr? ```@joshtriplett```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "html_url": "https://github.com/rust-lang/rust/commit/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cf3910c15a3c33dde3c380ac57501d37aa58e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf3910c15a3c33dde3c380ac57501d37aa58e71", "html_url": "https://github.com/rust-lang/rust/commit/3cf3910c15a3c33dde3c380ac57501d37aa58e71"}, {"sha": "21f467774415b9f237bf1d0ece7236beb2e198a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f467774415b9f237bf1d0ece7236beb2e198a3", "html_url": "https://github.com/rust-lang/rust/commit/21f467774415b9f237bf1d0ece7236beb2e198a3"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "59f1ca76b0b928b915e3feb8e2d10354737020f1", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -137,6 +137,8 @@ pub struct Range<'a, T: 'a> {\n /// See its documentation for more.\n ///\n /// [`difference`]: BTreeSet::difference\n+#[must_use = \"this returns the difference as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a> {\n     inner: DifferenceInner<'a, T>,\n@@ -169,6 +171,8 @@ impl<T: fmt::Debug> fmt::Debug for Difference<'_, T> {\n /// [`BTreeSet`]. See its documentation for more.\n ///\n /// [`symmetric_difference`]: BTreeSet::symmetric_difference\n+#[must_use = \"this returns the difference as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a>(MergeIterInner<Iter<'a, T>>);\n \n@@ -185,6 +189,8 @@ impl<T: fmt::Debug> fmt::Debug for SymmetricDifference<'_, T> {\n /// See its documentation for more.\n ///\n /// [`intersection`]: BTreeSet::intersection\n+#[must_use = \"this returns the intersection as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a> {\n     inner: IntersectionInner<'a, T>,\n@@ -217,6 +223,8 @@ impl<T: fmt::Debug> fmt::Debug for Intersection<'_, T> {\n /// See its documentation for more.\n ///\n /// [`union`]: BTreeSet::union\n+#[must_use = \"this returns the union as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a>(MergeIterInner<Iter<'a, T>>);\n "}, {"sha": "677942a1820c94e23588dff87bf526e236d82099", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -552,6 +552,7 @@ impl String {\n     ///\n     /// assert_eq!(\"Hello \ufffdWorld\", output);\n     /// ```\n+    #[must_use]\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {\n@@ -646,6 +647,7 @@ impl String {\n     ///            String::from_utf16_lossy(v));\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf16_lossy(v: &[u16]) -> String {"}, {"sha": "080256f493f5ffe95d2148d88f4f2ab384fb49c0", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -11,6 +11,7 @@ use crate::ops;\n impl [u8] {\n     /// Checks if all bytes in this slice are within the ASCII range.\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         is_ascii(self)\n@@ -21,6 +22,7 @@ impl [u8] {\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\n     /// but without allocating and copying temporaries.\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: &[u8]) -> bool {\n         self.len() == other.len() && iter::zip(self, other).all(|(a, b)| a.eq_ignore_ascii_case(b))"}, {"sha": "6da99055f2d5af887c03997e0f90e7880d561a89", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -37,6 +37,7 @@ fn repeat_byte(b: u8) -> usize {\n }\n \n /// Returns the first index matching the byte `x` in `text`.\n+#[must_use]\n #[inline]\n pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n     // Fast path for small slices\n@@ -91,6 +92,7 @@ fn memchr_general_case(x: u8, text: &[u8]) -> Option<usize> {\n }\n \n /// Returns the last index matching the byte `x` in `text`.\n+#[must_use]\n pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {\n     // Scan for a single byte value by reading two `usize` words at a time.\n     //"}, {"sha": "3efb9560b15e57decb284ad4b5f91286ee7f9ec4", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -27,6 +27,7 @@ use super::{IsAsciiWhitespace, IsNotEmpty, IsWhitespace};\n /// [`char`]: prim@char\n /// [`chars`]: str::chars\n #[derive(Clone)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chars<'a> {\n     pub(super) iter: slice::Iter<'a, u8>,\n@@ -125,6 +126,7 @@ impl<'a> Chars<'a> {\n /// [`char`]: prim@char\n /// [`char_indices`]: str::char_indices\n #[derive(Clone, Debug)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CharIndices<'a> {\n     pub(super) front_offset: usize,\n@@ -1089,6 +1091,7 @@ generate_pattern_iterators! {\n ///\n /// [`lines`]: str::lines\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n pub struct Lines<'a>(pub(super) Map<SplitTerminator<'a, char>, LinesAnyMap>);\n \n@@ -1128,6 +1131,7 @@ impl FusedIterator for Lines<'_> {}\n /// [`lines_any`]: str::lines_any\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n #[allow(deprecated)]\n pub struct LinesAny<'a>(pub(super) Lines<'a>);"}, {"sha": "6c21a5e802026b858073de5ebe0f2abdc27377cc", "filename": "library/core/src/str/lossy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -29,6 +29,7 @@ impl Utf8Lossy {\n }\n \n /// Iterator over lossy UTF-8 string\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[unstable(feature = \"str_internals\", issue = \"none\")]\n #[allow(missing_debug_implementations)]\n pub struct Utf8LossyChunksIter<'a> {"}, {"sha": "9c76b350d8342142aa7ab7db3838467172514894", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -2255,6 +2255,7 @@ impl str {\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         // We can treat each byte as character here: all multibyte characters\n@@ -2276,6 +2277,7 @@ impl str {\n     /// assert!(!\"Ferr\u00f6s\".eq_ignore_ascii_case(\"FERR\u00d6S\"));\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: &str) -> bool {\n         self.as_bytes().eq_ignore_ascii_case(other.as_bytes())"}, {"sha": "6d2cf3e83bce9683bbf9fea9dbd510072cb79c6c", "filename": "library/core/tests/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fascii.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -115,7 +115,7 @@ fn test_eq_ignore_ascii_case() {\n #[test]\n fn inference_works() {\n     let x = \"a\".to_string();\n-    x.eq_ignore_ascii_case(\"A\");\n+    let _ = x.eq_ignore_ascii_case(\"A\");\n }\n \n // Shorthands used by the is_ascii_* tests."}, {"sha": "1fc1d39b1816e63cd3e48c19defd8b486169ffed", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -1320,6 +1320,8 @@ where\n ///\n /// let mut intersection = a.intersection(&b);\n /// ```\n+#[must_use = \"this returns the intersection as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1345,6 +1347,8 @@ pub struct Intersection<'a, T: 'a, S: 'a> {\n ///\n /// let mut difference = a.difference(&b);\n /// ```\n+#[must_use = \"this returns the difference as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1370,6 +1374,8 @@ pub struct Difference<'a, T: 'a, S: 'a> {\n ///\n /// let mut intersection = a.symmetric_difference(&b);\n /// ```\n+#[must_use = \"this returns the difference as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n     iter: Chain<Difference<'a, T, S>, Difference<'a, T, S>>,\n@@ -1392,6 +1398,8 @@ pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n ///\n /// let mut union_iter = a.union(&b);\n /// ```\n+#[must_use = \"this returns the union as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,"}, {"sha": "49e268eb99bc85c503e1e5b17dbd83afa638b1ab", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -829,6 +829,7 @@ impl OsStr {\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"osstring_ascii\", since = \"1.53.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         self.inner.is_ascii()"}, {"sha": "96a9da24c7e5520ab9bf179d3cfa3291d9027fb3", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26b1d2259ef96977c76d5e3a15a6dbf0371d91c/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=a26b1d2259ef96977c76d5e3a15a6dbf0371d91c", "patch": "@@ -487,6 +487,7 @@ impl Stdin {\n     ///     println!(\"got a chunk: {}\", String::from_utf8_lossy(&split.unwrap()));\n     /// }\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n     pub fn split(self, byte: u8) -> Split<StdinLock<'static>> {\n         self.into_locked().split(byte)"}]}