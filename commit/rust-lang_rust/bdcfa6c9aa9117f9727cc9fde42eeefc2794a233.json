{"sha": "bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "node_id": "C_kwDOAAsO6NoAKGJkY2ZhNmM5YWE5MTE3Zjk3MjdjYzlmZGU0MmVlZWZjMjc5NGEyMzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-22T04:20:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-22T04:20:58Z"}, "message": "Rollup merge of #103418 - Aaron1011:macro-semicolon-future-incompat, r=davidtwco\n\nAdd `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` to future-incompat report\n\nSee https://github.com/rust-lang/rust/issues/79813 for a discussion of this lint. This has been warn-by-default for over a year, so adding it to the future-incompat report should help to find libraries that haven't yet updated.", "tree": {"sha": "6042dc0b3097d59c251a2194a704c40886b0bff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6042dc0b3097d59c251a2194a704c40886b0bff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjzLmqCRBK7hj4Ov3rIwAAnukIAAdSNfwL5GZ4rUtTG9cALSfy\n7LSMlYuxpb+LuQEKMjuSKP5U/bsrI4l6ItK0M58Z1BYAJ20Rzxxt80IC+wirajbA\n21b8+acYURTCInDk9+BeyDsaxMP/4Y3BrPwligwgKiMGejfbFHaKg4K5fbufiogu\nLZZ/w8ITq+40mFc1u10vahepneo6jlevkY6nvZipWAdoROYXqlUy4v271obCJB1p\nanhDxn/BGEZUivKAu7oBmVbDl7D3UoSOenGzvKXK83mYe9yvt/OvnlYYubbbeT9i\n4eW1XfEYlXnVX3hCBdiMVOG1DP+WIBuipvXHMuCpzCn7uokRXIm631+jO2Cb1Js=\n=m0kn\n-----END PGP SIGNATURE-----\n", "payload": "tree 6042dc0b3097d59c251a2194a704c40886b0bff5\nparent 1c394e1b9abf83f26d68f441e9f0ef0062bde703\nparent dc8876196b7d0a219a02f479abb5876b71270eeb\nauthor Michael Goulet <michael@errs.io> 1674361258 -0500\ncommitter GitHub <noreply@github.com> 1674361258 -0500\n\nRollup merge of #103418 - Aaron1011:macro-semicolon-future-incompat, r=davidtwco\n\nAdd `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` to future-incompat report\n\nSee https://github.com/rust-lang/rust/issues/79813 for a discussion of this lint. This has been warn-by-default for over a year, so adding it to the future-incompat report should help to find libraries that haven't yet updated.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "html_url": "https://github.com/rust-lang/rust/commit/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c394e1b9abf83f26d68f441e9f0ef0062bde703", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c394e1b9abf83f26d68f441e9f0ef0062bde703", "html_url": "https://github.com/rust-lang/rust/commit/1c394e1b9abf83f26d68f441e9f0ef0062bde703"}, {"sha": "dc8876196b7d0a219a02f479abb5876b71270eeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8876196b7d0a219a02f479abb5876b71270eeb", "html_url": "https://github.com/rust-lang/rust/commit/dc8876196b7d0a219a02f479abb5876b71270eeb"}], "stats": {"total": 221, "additions": 221, "deletions": 0}, "files": [{"sha": "357b00b1a995849676c4f94062dd2fb2ad957bd0", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "patch": "@@ -2948,6 +2948,7 @@ declare_lint! {\n     \"trailing semicolon in macro body used as expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #79813 <https://github.com/rust-lang/rust/issues/79813>\",\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n     };\n }\n "}, {"sha": "c60120061643da4f595aef35afbc4279bb0d0693", "filename": "tests/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr?ref=bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "patch": "@@ -46,3 +46,140 @@ LL |     let _ = #[allow(semicolon_in_expressions_from_macros)] foo!(allow_does_\n \n warning: 3 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         foo!(first)\n+   |         ----------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:24:13\n+   |\n+LL |     #[allow(semicolon_in_expressions_from_macros)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |     let _ = foo!(second);\n+   |             ------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:29:13\n+   |\n+LL |     #[allow(semicolon_in_expressions_from_macros)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         let _ = foo!(third);\n+   |                 ----------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:32:13\n+   |\n+LL |     #[allow(semicolon_in_expressions_from_macros)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         let _ = foo!(fourth);\n+   |                 ------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:37:13\n+   |\n+LL |     #[allow(semicolon_in_expressions_from_macros)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         foo!(warn_in_block)\n+   |         ------------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:4:9\n+   |\n+LL | #![warn(semicolon_in_expressions_from_macros)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |     let _ = foo!(warn_in_expr);\n+   |             ------------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:4:9\n+   |\n+LL | #![warn(semicolon_in_expressions_from_macros)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |     let _ = #[allow(semicolon_in_expressions_from_macros)] foo!(allow_does_not_work);\n+   |                                                            ------------------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:4:9\n+   |\n+LL | #![warn(semicolon_in_expressions_from_macros)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "0fec4996f1a0ae16dbce4848a7f7ec446730170f", "filename": "tests/ui/lint/semicolon-in-expressions-from-macros/warn-semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr?ref=bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "patch": "@@ -14,3 +14,18 @@ LL |         _ => foo!()\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/warn-semicolon-in-expressions-from-macros.rs:6:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         _ => foo!()\n+   |              ------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "29ccd17e06999abf8a20e0c01dd8eb5775d75e1d", "filename": "tests/ui/macros/issue-84195-lint-anon-const.stderr", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Fmacros%2Fissue-84195-lint-anon-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Fmacros%2Fissue-84195-lint-anon-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-84195-lint-anon-const.stderr?ref=bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "patch": "@@ -18,3 +18,22 @@ LL | #![deny(semicolon_in_expressions_from_macros)]\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: trailing semicolon in macro used in expression position\n+  --> $DIR/issue-84195-lint-anon-const.rs:8:14\n+   |\n+LL |     () => { 0; };\n+   |              ^\n+...\n+LL |     let val: [u8; len!()] = [];\n+   |                   ------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/issue-84195-lint-anon-const.rs:5:9\n+   |\n+LL | #![deny(semicolon_in_expressions_from_macros)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `len` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "13cecc3a31d233cb662a6f6a1b62596452fd8a5b", "filename": "tests/ui/macros/lint-trailing-macro-call.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr?ref=bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "patch": "@@ -16,3 +16,20 @@ LL |     expand_it!()\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/lint-trailing-macro-call.rs:9:25\n+   |\n+LL |         #[cfg(FALSE)] 25;\n+   |                         ^\n+...\n+LL |     expand_it!()\n+   |     ------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `expand_it`\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = note: this warning originates in the macro `expand_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "7785f415946277401d7cc61e4d8b0b11af93d987", "filename": "tests/ui/macros/macro-context.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-context.stderr?ref=bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "patch": "@@ -82,3 +82,18 @@ error: aborting due to 6 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0412, E0425.\n For more information about an error, try `rustc --explain E0412`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-context.rs:3:15\n+   |\n+LL |     () => ( i ; typeof );\n+   |               ^\n+...\n+LL |     let i = m!();\n+   |             ---- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "3f492b141a5f5949875f5c9f33d728ab2c83ddca", "filename": "tests/ui/macros/macro-in-expression-context.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdcfa6c9aa9117f9727cc9fde42eeefc2794a233/tests%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr?ref=bdcfa6c9aa9117f9727cc9fde42eeefc2794a233", "patch": "@@ -31,3 +31,20 @@ LL |     foo!()\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-in-expression-context.rs:5:29\n+   |\n+LL |         assert_eq!(\"A\", \"A\");\n+   |                             ^\n+...\n+LL |     foo!()\n+   |     ------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}]}