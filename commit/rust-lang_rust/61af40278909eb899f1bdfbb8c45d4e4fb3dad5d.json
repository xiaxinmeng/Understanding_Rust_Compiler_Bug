{"sha": "61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYWY0MDI3ODkwOWViODk5ZjFiZGZiYjhjNDVkNGU0ZmIzZGFkNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-26T08:42:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-26T08:42:09Z"}, "message": "auto merge of #19169 : aturon/rust/fds, r=alexcrichton\n\nThis PR adds some internal infrastructure to allow the private `std::sys` module to access internal representation details of `std::io`.\r\n\r\nIt then exposes those details in two new, platform-specific API surfaces: `std::os::unix` and `std::os::windows`.\r\n\r\nTo start with, these will provide the ability to extract file descriptors, HANDLEs, SOCKETs, and so on from `std::io` types.\r\n\r\nMore functionality, and more specific platforms (e.g. `std::os::linux`) will be added over time.\r\n\r\nCloses #18897", "tree": {"sha": "87d901e82bb5e19ed4e49216f2114c9ca060aee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87d901e82bb5e19ed4e49216f2114c9ca060aee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "html_url": "https://github.com/rust-lang/rust/commit/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d7b3199d9a285b66b4f9a49d97234c956cb5e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7b3199d9a285b66b4f9a49d97234c956cb5e6c", "html_url": "https://github.com/rust-lang/rust/commit/8d7b3199d9a285b66b4f9a49d97234c956cb5e6c"}, {"sha": "1e661642105a1033f1c155ceb1b2335dd11cb40a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e661642105a1033f1c155ceb1b2335dd11cb40a", "html_url": "https://github.com/rust-lang/rust/commit/1e661642105a1033f1c155ceb1b2335dd11cb40a"}], "stats": {"total": 306, "additions": 287, "deletions": 19}, "files": [{"sha": "6d29f3d25382c9f4602ce693ade253c1e4afc57d", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -88,8 +88,8 @@ pub struct File {\n     last_nread: int,\n }\n \n-impl sys_common::AsFileDesc for File {\n-    fn as_fd(&self) -> &fs_imp::FileDesc {\n+impl sys_common::AsInner<fs_imp::FileDesc> for File {\n+    fn as_inner(&self) -> &fs_imp::FileDesc {\n         &self.fd\n     }\n }"}, {"sha": "2984fa5963147c8b865ddf83dfbd4c19bf89d1ac", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -33,6 +33,8 @@ use sys::pipe::UnixStream as UnixStreamImp;\n use sys::pipe::UnixListener as UnixListenerImp;\n use sys::pipe::UnixAcceptor as UnixAcceptorImp;\n \n+use sys_common;\n+\n /// A stream which communicates over a named pipe.\n pub struct UnixStream {\n     inner: UnixStreamImp,\n@@ -145,6 +147,12 @@ impl Writer for UnixStream {\n     }\n }\n \n+impl sys_common::AsInner<UnixStreamImp> for UnixStream {\n+    fn as_inner(&self) -> &UnixStreamImp {\n+        &self.inner\n+    }\n+}\n+\n /// A value that can listen for incoming named pipe connection requests.\n pub struct UnixListener {\n     /// The internal, opaque runtime Unix listener.\n@@ -186,6 +194,12 @@ impl Listener<UnixStream, UnixAcceptor> for UnixListener {\n     }\n }\n \n+impl sys_common::AsInner<UnixListenerImp> for UnixListener {\n+    fn as_inner(&self) -> &UnixListenerImp {\n+        &self.inner\n+    }\n+}\n+\n /// A value that can accept named pipe connections, returned from `listen()`.\n pub struct UnixAcceptor {\n     /// The internal, opaque runtime Unix acceptor.\n@@ -247,6 +261,12 @@ impl Clone for UnixAcceptor {\n     }\n }\n \n+impl sys_common::AsInner<UnixAcceptorImp> for UnixAcceptor {\n+    fn as_inner(&self) -> &UnixAcceptorImp {\n+        &self.inner\n+    }\n+}\n+\n #[cfg(test)]\n #[allow(experimental)]\n mod tests {"}, {"sha": "a989be758c3ae948422a152ff8ac3b2d08da05b0", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -31,6 +31,8 @@ use sys::tcp::TcpStream as TcpStreamImp;\n use sys::tcp::TcpListener as TcpListenerImp;\n use sys::tcp::TcpAcceptor as TcpAcceptorImp;\n \n+use sys_common;\n+\n /// A structure which represents a TCP stream between a local socket and a\n /// remote socket.\n ///\n@@ -260,6 +262,12 @@ impl Writer for TcpStream {\n     }\n }\n \n+impl sys_common::AsInner<TcpStreamImp> for TcpStream {\n+    fn as_inner(&self) -> &TcpStreamImp {\n+        &self.inner\n+    }\n+}\n+\n /// A structure representing a socket server. This listener is used to create a\n /// `TcpAcceptor` which can be used to accept sockets on a local port.\n ///\n@@ -329,6 +337,12 @@ impl Listener<TcpStream, TcpAcceptor> for TcpListener {\n     }\n }\n \n+impl sys_common::AsInner<TcpListenerImp> for TcpListener {\n+    fn as_inner(&self) -> &TcpListenerImp {\n+        &self.inner\n+    }\n+}\n+\n /// The accepting half of a TCP socket server. This structure is created through\n /// a `TcpListener`'s `listen` method, and this object can be used to accept new\n /// `TcpStream` instances.\n@@ -456,6 +470,12 @@ impl Clone for TcpAcceptor {\n     }\n }\n \n+impl sys_common::AsInner<TcpAcceptorImp> for TcpAcceptor {\n+    fn as_inner(&self) -> &TcpAcceptorImp {\n+        &self.inner\n+    }\n+}\n+\n #[cfg(test)]\n #[allow(experimental)]\n mod test {"}, {"sha": "a7239ca0f2f984b7d607cc9f0884954bb196b913", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -21,6 +21,7 @@ use io::{Reader, Writer, IoResult};\n use option::Option;\n use result::{Ok, Err};\n use sys::udp::UdpSocket as UdpSocketImp;\n+use sys_common;\n \n /// A User Datagram Protocol socket.\n ///\n@@ -184,6 +185,12 @@ impl Clone for UdpSocket {\n     }\n }\n \n+impl sys_common::AsInner<UdpSocketImp> for UdpSocket {\n+    fn as_inner(&self) -> &UdpSocketImp {\n+        &self.inner\n+    }\n+}\n+\n /// A type that allows convenient usage of a UDP stream connected to one\n /// address via the `Reader` and `Writer` traits.\n ///"}, {"sha": "41676cdf6e9cc704e8fc3d1d6014dfd05e51c328", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -86,8 +86,8 @@ impl PipeStream {\n     }\n }\n \n-impl sys_common::AsFileDesc for PipeStream {\n-    fn as_fd(&self) -> &sys::fs::FileDesc {\n+impl sys_common::AsInner<sys::fs::FileDesc> for PipeStream {\n+    fn as_inner(&self) -> &sys::fs::FileDesc {\n         &*self.inner\n     }\n }"}, {"sha": "33c9f38da9b5b3e37148075ce64f3728887ccd05", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -62,6 +62,11 @@ use vec::Vec;\n #[cfg(unix)] use c_str::ToCStr;\n #[cfg(unix)] use libc::c_char;\n \n+#[cfg(unix)]\n+pub use sys::ext as unix;\n+#[cfg(windows)]\n+pub use sys::ext as windows;\n+\n /// Get the number of cores available\n pub fn num_cpus() -> uint {\n     unsafe {"}, {"sha": "e382ec261a0b403ab2c91de501c61e50918c5e29", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -13,7 +13,7 @@\n \n use io::{mod, IoError, IoResult};\n use prelude::*;\n-use sys::{last_error, retry, fs};\n+use sys::{last_error, retry};\n use c_str::CString;\n use num::Int;\n use path::BytesContainer;\n@@ -84,10 +84,9 @@ pub fn keep_going(data: &[u8], f: |*const u8, uint| -> i64) -> i64 {\n     return (origamt - amt) as i64;\n }\n \n-// traits for extracting representations from\n-\n-pub trait AsFileDesc {\n-    fn as_fd(&self) -> &fs::FileDesc;\n+// A trait for extracting representations from std::io types\n+pub trait AsInner<Inner> {\n+    fn as_inner(&self) -> &Inner;\n }\n \n pub trait ProcessConfig<K: BytesContainer, V: BytesContainer> {"}, {"sha": "ae3c939bf78bde334f417a208bfc7d09a1720407", "filename": "src/libstd/sys/unix/ext.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -0,0 +1,107 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Experimental extensions to `std` for Unix platforms.\n+//!\n+//! For now, this module is limited to extracting file descriptors,\n+//! but its functionality will grow over time.\n+//!\n+//! # Example\n+//!\n+//! ```rust,ignore\n+//! #![feature(globs)]\n+//!\n+//! use std::io::fs::File;\n+//! use std::os::unix::prelude::*;\n+//!\n+//! fn main() {\n+//!     let f = File::create(&Path::new(\"foo.txt\")).unwrap();\n+//!     let fd = f.as_raw_fd();\n+//!\n+//!     // use fd with native unix bindings\n+//! }\n+//! ```\n+\n+#![experimental]\n+\n+use sys_common::AsInner;\n+use libc;\n+\n+use io;\n+\n+/// Raw file descriptors.\n+pub type Fd = libc::c_int;\n+\n+/// Extract raw file descriptor\n+pub trait AsRawFd {\n+    /// Extract the raw file descriptor, without taking any ownership.\n+    fn as_raw_fd(&self) -> Fd;\n+}\n+\n+impl AsRawFd for io::fs::File {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::pipe::PipeStream {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::pipe::UnixStream {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::pipe::UnixListener {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::pipe::UnixAcceptor {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::tcp::TcpStream {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::tcp::TcpListener {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::tcp::TcpAcceptor {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::udp::UdpSocket {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+/// A prelude for conveniently writing platform-specific code.\n+///\n+/// Includes all extension traits, and some important type definitions.\n+pub mod prelude {\n+    pub use super::{Fd, AsRawFd};\n+}"}, {"sha": "af2389051190d98b2566d2afa640f6931e3fb5d1", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -33,6 +33,7 @@ macro_rules! helper_init( (static $name:ident: Helper<$m:ty>) => (\n ) )\n \n pub mod c;\n+pub mod ext;\n pub mod fs;\n pub mod helper_signal;\n pub mod os;"}, {"sha": "3f70fb5c1a56cf996b66de3ea386f7b35a59e154", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -133,7 +133,7 @@ impl UnixStream {\n         }\n     }\n \n-    fn fd(&self) -> fd_t { self.inner.fd }\n+    pub fn fd(&self) -> fd_t { self.inner.fd }\n \n     #[cfg(target_os = \"linux\")]\n     fn lock_nonblocking(&self) {}\n@@ -222,7 +222,7 @@ impl UnixListener {\n         })\n     }\n \n-    fn fd(&self) -> fd_t { self.inner.fd }\n+    pub fn fd(&self) -> fd_t { self.inner.fd }\n \n     pub fn listen(self) -> IoResult<UnixAcceptor> {\n         match unsafe { libc::listen(self.fd(), 128) } {\n@@ -260,7 +260,7 @@ struct AcceptorInner {\n }\n \n impl UnixAcceptor {\n-    fn fd(&self) -> fd_t { self.inner.listener.fd() }\n+    pub fn fd(&self) -> fd_t { self.inner.listener.fd() }\n \n     pub fn accept(&mut self) -> IoResult<UnixStream> {\n         let deadline = if self.deadline == 0 {None} else {Some(self.deadline)};"}, {"sha": "76c316076f93e9a5af84548a48074f73c4f4096a", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -24,7 +24,7 @@ use hash::Hash;\n use sys::{mod, retry, c, wouldblock, set_nonblocking, ms_to_timeval};\n use sys::fs::FileDesc;\n use sys_common::helper_thread::Helper;\n-use sys_common::{AsFileDesc, mkerr_libc, timeout};\n+use sys_common::{AsInner, mkerr_libc, timeout};\n \n pub use sys_common::ProcessConfig;\n \n@@ -56,7 +56,7 @@ impl Process {\n     pub fn spawn<K, V, C, P>(cfg: &C, in_fd: Option<P>,\n                               out_fd: Option<P>, err_fd: Option<P>)\n                               -> IoResult<Process>\n-        where C: ProcessConfig<K, V>, P: AsFileDesc,\n+        where C: ProcessConfig<K, V>, P: AsInner<FileDesc>,\n               K: BytesContainer + Eq + Hash, V: BytesContainer\n     {\n         use libc::funcs::posix88::unistd::{fork, dup2, close, chdir, execvp};\n@@ -183,7 +183,7 @@ impl Process {\n                             libc::open(devnull.as_ptr(), flags, 0)\n                         }\n                         Some(obj) => {\n-                            let fd = obj.as_fd().fd();\n+                            let fd = obj.as_inner().fd();\n                             // Leak the memory and the file descriptor. We're in the\n                             // child now an all our resources are going to be\n                             // cleaned up very soon"}, {"sha": "2c58ee69e8b7c37c922b53fcc8cf3dc2c3d5a90c", "filename": "src/libstd/sys/windows/ext.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Experimental extensions to `std` for Windows.\n+//!\n+//! For now, this module is limited to extracting handles, file\n+//! descriptors, and sockets, but its functionality will grow over\n+//! time.\n+\n+#![experimental]\n+\n+use sys_common::AsInner;\n+use libc;\n+\n+use io;\n+\n+/// Raw HANDLEs.\n+pub type Handle = libc::HANDLE;\n+\n+/// Raw SOCKETs.\n+pub type Socket = libc::SOCKET;\n+\n+/// Extract raw handles.\n+pub trait AsRawHandle {\n+    /// Extract the raw handle, without taking any ownership.\n+    fn as_raw_handle(&self) -> Handle;\n+}\n+\n+impl AsRawHandle for io::fs::File {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+impl AsRawHandle for io::pipe::PipeStream {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+impl AsRawHandle for io::net::pipe::UnixStream {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+impl AsRawHandle for io::net::pipe::UnixListener {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+impl AsRawHandle for io::net::pipe::UnixAcceptor {\n+    fn as_raw_handle(&self) -> Handle {\n+        self.as_inner().handle()\n+    }\n+}\n+\n+/// Extract raw sockets.\n+pub trait AsRawSocket {\n+    fn as_raw_socket(&self) -> Socket;\n+}\n+\n+impl AsRawSocket for io::net::tcp::TcpStream {\n+    fn as_raw_socket(&self) -> Socket {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawSocket for io::net::tcp::TcpListener {\n+    fn as_raw_socket(&self) -> Socket {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawSocket for io::net::tcp::TcpAcceptor {\n+    fn as_raw_socket(&self) -> Socket {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawSocket for io::net::udp::UdpSocket {\n+    fn as_raw_socket(&self) -> Socket {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+/// A prelude for conveniently writing platform-specific code.\n+///\n+/// Includes all extension traits, and some important type definitions.\n+pub mod prelude {\n+    pub use super::{Socket, Handle, AsRawSocket, AsRawHandle};\n+}"}, {"sha": "6b9555c52cec7cdb73dfc20954a23d1209f7901d", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -34,6 +34,7 @@ macro_rules! helper_init( (static $name:ident: Helper<$m:ty>) => (\n ) )\n \n pub mod c;\n+pub mod ext;\n pub mod fs;\n pub mod helper_signal;\n pub mod os;"}, {"sha": "ca7985aa35bf8f94ba2af6a2066ce5bdc4b47661", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -329,7 +329,7 @@ impl UnixStream {\n         }\n     }\n \n-    fn handle(&self) -> libc::HANDLE { self.inner.handle }\n+    pub fn handle(&self) -> libc::HANDLE { self.inner.handle }\n \n     fn read_closed(&self) -> bool {\n         self.inner.read_closed.load(atomic::SeqCst)\n@@ -585,6 +585,10 @@ impl UnixListener {\n             }),\n         })\n     }\n+\n+    pub fn handle(&self) -> libc::HANDLE {\n+        self.handle\n+    }\n }\n \n impl Drop for UnixListener {\n@@ -729,6 +733,10 @@ impl UnixAcceptor {\n             Ok(())\n         }\n     }\n+\n+    pub fn handle(&self) -> libc::HANDLE {\n+        self.listener.handle()\n+    }\n }\n \n impl Clone for UnixAcceptor {"}, {"sha": "eddb89c673d3e96998e28531506fb23b3b64a4e9", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af40278909eb899f1bdfbb8c45d4e4fb3dad5d/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=61af40278909eb899f1bdfbb8c45d4e4fb3dad5d", "patch": "@@ -26,7 +26,7 @@ use sys::fs;\n use sys::{mod, retry, c, wouldblock, set_nonblocking, ms_to_timeval, timer};\n use sys::fs::FileDesc;\n use sys_common::helper_thread::Helper;\n-use sys_common::{AsFileDesc, mkerr_libc, timeout};\n+use sys_common::{AsInner, mkerr_libc, timeout};\n \n use io::fs::PathExtensions;\n use string::String;\n@@ -105,7 +105,7 @@ impl Process {\n     pub fn spawn<K, V, C, P>(cfg: &C, in_fd: Option<P>,\n                               out_fd: Option<P>, err_fd: Option<P>)\n                               -> IoResult<Process>\n-        where C: ProcessConfig<K, V>, P: AsFileDesc,\n+        where C: ProcessConfig<K, V>, P: AsInner<FileDesc>,\n               K: BytesContainer + Eq + Hash, V: BytesContainer\n     {\n         use libc::types::os::arch::extra::{DWORD, HANDLE, STARTUPINFO};\n@@ -195,7 +195,7 @@ impl Process {\n                         }\n                     }\n                     Some(ref fd) => {\n-                        let orig = get_osfhandle(fd.as_fd().fd()) as HANDLE;\n+                        let orig = get_osfhandle(fd.as_inner().fd()) as HANDLE;\n                         if orig == INVALID_HANDLE_VALUE {\n                             return Err(super::last_error())\n                         }"}]}