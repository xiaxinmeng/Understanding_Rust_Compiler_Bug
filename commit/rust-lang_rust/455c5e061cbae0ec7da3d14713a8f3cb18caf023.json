{"sha": "455c5e061cbae0ec7da3d14713a8f3cb18caf023", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NWM1ZTA2MWNiYWUwZWM3ZGEzZDE0NzEzYThmM2NiMThjYWYwMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-11T02:41:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-11T02:41:38Z"}, "message": "Auto merge of #85165 - JohnTitor:rollup-ew1ls7x, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #84777 (Apply `--cfg parallel_compiler` when documenting)\n - #84783 (Allow formatting specific subdirectories)\n - #84998 (Show nicer error when an 'unstable fingerprints' error occurs)\n - #85002 (RELEASES.md: Use broken_intra_doc_links as an example, not nightly lint)\n - #85051 (Allow checking miri and RLS with `x.py check src/tools/{miri,rls}`)\n - #85114 (Remove outdated FIXME for download-rustc)\n - #85143 (Document Rc::from)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3a2e60a8405e301615c32c20c8adbbb4fe39f8ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a2e60a8405e301615c32c20c8adbbb4fe39f8ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/455c5e061cbae0ec7da3d14713a8f3cb18caf023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/455c5e061cbae0ec7da3d14713a8f3cb18caf023", "html_url": "https://github.com/rust-lang/rust/commit/455c5e061cbae0ec7da3d14713a8f3cb18caf023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/455c5e061cbae0ec7da3d14713a8f3cb18caf023/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4d129d566689d33294161fbdb7e4ed647c5b6fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d129d566689d33294161fbdb7e4ed647c5b6fb", "html_url": "https://github.com/rust-lang/rust/commit/d4d129d566689d33294161fbdb7e4ed647c5b6fb"}, {"sha": "081dd99fb37c48ccca429f5e56743585670815db", "url": "https://api.github.com/repos/rust-lang/rust/commits/081dd99fb37c48ccca429f5e56743585670815db", "html_url": "https://github.com/rust-lang/rust/commit/081dd99fb37c48ccca429f5e56743585670815db"}], "stats": {"total": 82, "additions": 58, "deletions": 24}, "files": [{"sha": "92312d8d556ee53d730b60ed05b87d7a67afe75a", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -58,7 +58,7 @@ The following previously stable APIs are now `const`.\n Rustdoc\n -------\n - [Rustdoc lints are now treated as a tool lint, meaning that\n-  lints are now prefixed with `rustdoc::` (e.g. `#[warn(rustdoc::non_autolinks)]`).][80527]\n+  lints are now prefixed with `rustdoc::` (e.g. `#[warn(rustdoc::broken_intra_doc_links)]`).][80527]\n   Using the old style is still allowed, and will become a warning in\n   a future release.\n - [Rustdoc now supports argument files.][82261]"}, {"sha": "068f81486118a7098ce673adad17c8383f23a391", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -232,6 +232,7 @@ macro_rules! define_callbacks {\n         }\n \n         pub trait QueryEngine<'tcx>: rustc_data_structures::sync::Sync {\n+            #[cfg(parallel_compiler)]\n             unsafe fn deadlock(&'tcx self, tcx: TyCtxt<'tcx>, registry: &rustc_rayon_core::Registry);\n \n             fn encode_query_results("}, {"sha": "c789aa2fa596e996c6fb889bc02a34e911bcacde", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -550,12 +550,10 @@ macro_rules! define_queries_struct {\n         }\n \n         impl QueryEngine<'tcx> for Queries<'tcx> {\n-            unsafe fn deadlock(&'tcx self, _tcx: TyCtxt<'tcx>, _registry: &rustc_rayon_core::Registry) {\n-                #[cfg(parallel_compiler)]\n-                {\n-                    let tcx = QueryCtxt { tcx: _tcx, queries: self };\n-                    rustc_query_system::query::deadlock(tcx, _registry)\n-                }\n+            #[cfg(parallel_compiler)]\n+            unsafe fn deadlock(&'tcx self, tcx: TyCtxt<'tcx>, registry: &rustc_rayon_core::Registry) {\n+                let tcx = QueryCtxt { tcx, queries: self };\n+                rustc_query_system::query::deadlock(tcx, registry)\n             }\n \n             fn encode_query_results("}, {"sha": "39dfdd78cc4f5613a85153303e9dcc3aae9bf01f", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -605,13 +605,19 @@ fn incremental_verify_ich<CTX, K, V: Debug>(\n \n     let old_hash = tcx.dep_graph().prev_fingerprint_of(dep_node);\n \n-    assert_eq!(\n-        Some(new_hash),\n-        old_hash,\n-        \"found unstable fingerprints for {:?}: {:?}\",\n-        dep_node,\n-        result\n-    );\n+    if Some(new_hash) != old_hash {\n+        let run_cmd = if let Some(crate_name) = &tcx.sess().opts.crate_name {\n+            format!(\"`cargo clean -p {}` or `cargo clean`\", crate_name)\n+        } else {\n+            \"`cargo clean`\".to_string()\n+        };\n+        tcx.sess().struct_err(&format!(\"internal compiler error: encountered incremental compilation error with {:?}\", dep_node))\n+            .help(&format!(\"This is a known issue with the compiler. Run {} to allow your project to compile\", run_cmd))\n+            .note(&format!(\"Please follow the instructions below to create a bug report with the provided information\"))\n+            .note(&format!(\"See <https://github.com/rust-lang/rust/issues/84970> for more information\"))\n+            .emit();\n+        panic!(\"Found unstable fingerprints for {:?}: {:?}\", dep_node, result);\n+    }\n }\n \n fn force_query_with_job<C, CTX>("}, {"sha": "16952a5ced83e5d2c508770e3c9e45a837c096d2", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -372,8 +372,6 @@ changelog-seen = 2\n # This is mostly useful for tools; if you have changes to `compiler/` they will be ignored.\n #\n # You can set this to \"if-unchanged\" to only download if `compiler/` has not been modified.\n-#\n-# FIXME(#82739): currently, this also uses the downloaded compiler for stage0, but that causes unnecessary rebuilds.\n #download-rustc = false\n \n # Number of codegen units to use for each compiler invocation. A value of 0"}, {"sha": "800952f7a5eced39724f32dd3fc2f7675c8e6a61", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -1733,6 +1733,19 @@ impl<T: ?Sized> fmt::Pointer for Rc<T> {\n \n #[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n impl<T> From<T> for Rc<T> {\n+    /// Converts a generic type `T` into a `Rc<T>`\n+    ///\n+    /// The conversion allocates on the heap and moves `t`\n+    /// from the stack into it.\n+    ///\n+    /// # Example\n+    /// ```rust\n+    /// # use std::rc::Rc;\n+    /// let x = 5;\n+    /// let rc = Rc::new(5);\n+    ///\n+    /// assert_eq!(Rc::from(x), rc);\n+    /// ```\n     fn from(t: T) -> Self {\n         Rc::new(t)\n     }"}, {"sha": "789267aa880fa5415c8aed425cb50a9798f21069", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -377,6 +377,8 @@ impl<'a> Builder<'a> {\n                 check::Rustdoc,\n                 check::CodegenBackend,\n                 check::Clippy,\n+                check::Miri,\n+                check::Rls,\n                 check::Bootstrap\n             ),\n             Kind::Test => describe!("}, {"sha": "3e9d921d0f52616b35b776cc5bcf00bf09389c89", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -289,7 +289,8 @@ macro_rules! tool_check_step {\n         impl Step for $name {\n             type Output = ();\n             const ONLY_HOSTS: bool = true;\n-            const DEFAULT: bool = true $( && $default )?;\n+            // don't ever check out-of-tree tools by default, they'll fail when toolstate is broken\n+            const DEFAULT: bool = matches!($source_type, SourceType::InTree) $( && $default )?;\n \n             fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n                 run.paths(&[ $path, $($alias),* ])\n@@ -367,6 +368,8 @@ tool_check_step!(Rustdoc, \"src/tools/rustdoc\", \"src/librustdoc\", SourceType::InT\n // behavior, treat it as in-tree so that any new warnings in clippy will be\n // rejected.\n tool_check_step!(Clippy, \"src/tools/clippy\", SourceType::InTree);\n+tool_check_step!(Miri, \"src/tools/miri\", SourceType::Submodule);\n+tool_check_step!(Rls, \"src/tools/rls\", SourceType::Submodule);\n \n tool_check_step!(Bootstrap, \"src/bootstrap\", SourceType::InTree, false);\n "}, {"sha": "2676b3bf8e0059e467fa00c9779711ec2c368f84", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -648,6 +648,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n     }\n     if builder.config.rustc_parallel {\n         cargo.rustflag(\"--cfg=parallel_compiler\");\n+        cargo.rustdocflag(\"--cfg=parallel_compiler\");\n     }\n     if builder.config.rust_verify_llvm_ir {\n         cargo.env(\"RUSTC_VERIFY_LLVM_IR\", \"1\");"}, {"sha": "80a60c79edfe4c0801e54eb59a6fd2ce8d3e8d5c", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -91,6 +91,7 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Format {\n+        paths: Vec<PathBuf>,\n         check: bool,\n     },\n     Doc {\n@@ -581,7 +582,7 @@ Arguments:\n \n                 Subcommand::Clean { all: matches.opt_present(\"all\") }\n             }\n-            \"fmt\" => Subcommand::Format { check: matches.opt_present(\"check\") },\n+            \"fmt\" => Subcommand::Format { check: matches.opt_present(\"check\"), paths },\n             \"dist\" => Subcommand::Dist { paths },\n             \"install\" => Subcommand::Install { paths },\n             \"run\" | \"r\" => {"}, {"sha": "2408344487bb1f8044b9d601bd8047dcf0e7f661", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -42,7 +42,7 @@ struct RustfmtConfig {\n     ignore: Vec<String>,\n }\n \n-pub fn format(build: &Build, check: bool) {\n+pub fn format(build: &Build, check: bool, paths: &[PathBuf]) {\n     if build.config.dry_run {\n         return;\n     }\n@@ -118,8 +118,19 @@ pub fn format(build: &Build, check: bool) {\n         .to_path_buf();\n     let src = build.src.clone();\n     let (tx, rx): (SyncSender<PathBuf>, _) = std::sync::mpsc::sync_channel(128);\n-    let walker =\n-        WalkBuilder::new(src.clone()).types(matcher).overrides(ignore_fmt).build_parallel();\n+    let walker = match paths.get(0) {\n+        Some(first) => {\n+            let mut walker = WalkBuilder::new(first);\n+            for path in &paths[1..] {\n+                walker.add(path);\n+            }\n+            walker\n+        }\n+        None => WalkBuilder::new(src.clone()),\n+    }\n+    .types(matcher)\n+    .overrides(ignore_fmt)\n+    .build_parallel();\n \n     // there is a lot of blocking involved in spawning a child process and reading files to format.\n     // spawn more processes than available concurrency to keep the CPU busy"}, {"sha": "2960dd3df6bf48b81a98cbd0ee8c80e42a6176f2", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -478,8 +478,8 @@ impl Build {\n             job::setup(self);\n         }\n \n-        if let Subcommand::Format { check } = self.config.cmd {\n-            return format::format(self, check);\n+        if let Subcommand::Format { check, paths } = &self.config.cmd {\n+            return format::format(self, *check, &paths);\n         }\n \n         if let Subcommand::Clean { all } = self.config.cmd {"}, {"sha": "78163651158ed3452bb5d42640722a55787e5a06", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -889,7 +889,7 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n                 );\n                 std::process::exit(1);\n             }\n-            crate::format::format(&builder.build, !builder.config.cmd.bless());\n+            crate::format::format(&builder.build, !builder.config.cmd.bless(), &[]);\n         }\n     }\n "}]}