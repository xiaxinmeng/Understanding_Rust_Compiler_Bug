{"sha": "924cd135b6ab0fe48dae26d9ae30eaadebcd066d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNGNkMTM1YjZhYjBmZTQ4ZGFlMjZkOWFlMzBlYWFkZWJjZDA2NmQ=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-09-05T21:16:56Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-09-19T23:12:02Z"}, "message": "Added benchmarks for BinaryHeap", "tree": {"sha": "14ca72070afee3a1d48f3a49804d12b3c6f01107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14ca72070afee3a1d48f3a49804d12b3c6f01107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/924cd135b6ab0fe48dae26d9ae30eaadebcd066d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/924cd135b6ab0fe48dae26d9ae30eaadebcd066d", "html_url": "https://github.com/rust-lang/rust/commit/924cd135b6ab0fe48dae26d9ae30eaadebcd066d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/924cd135b6ab0fe48dae26d9ae30eaadebcd066d/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "html_url": "https://github.com/rust-lang/rust/commit/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "5b6538ea6c6b34fdfaff70121aaa21c9b10b7fc5", "filename": "library/alloc/benches/binary_heap.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/924cd135b6ab0fe48dae26d9ae30eaadebcd066d/library%2Falloc%2Fbenches%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924cd135b6ab0fe48dae26d9ae30eaadebcd066d/library%2Falloc%2Fbenches%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbinary_heap.rs?ref=924cd135b6ab0fe48dae26d9ae30eaadebcd066d", "patch": "@@ -0,0 +1,91 @@\n+use std::collections::BinaryHeap;\n+\n+use rand::{seq::SliceRandom, thread_rng};\n+use test::{black_box, Bencher};\n+\n+#[bench]\n+fn bench_find_smallest_1000(b: &mut Bencher) {\n+    let mut rng = thread_rng();\n+    let mut vec: Vec<u32> = (0..100_000).collect();\n+    vec.shuffle(&mut rng);\n+\n+    b.iter(|| {\n+        let mut iter = vec.iter().copied();\n+        let mut heap: BinaryHeap<_> = iter.by_ref().take(1000).collect();\n+\n+        for x in iter {\n+            let mut max = heap.peek_mut().unwrap();\n+            // This comparison should be true only 1% of the time.\n+            // Unnecessary `sift_down`s will degrade performance\n+            if x < *max {\n+                *max = x;\n+            }\n+        }\n+\n+        heap\n+    })\n+}\n+\n+#[bench]\n+fn bench_peek_mut_deref_mut(b: &mut Bencher) {\n+    let mut bheap = BinaryHeap::from(vec![42]);\n+    let vec: Vec<u32> = (0..1_000_000).collect();\n+\n+    b.iter(|| {\n+        let vec = black_box(&vec);\n+        let mut peek_mut = bheap.peek_mut().unwrap();\n+        // The compiler shouldn't be able to optimize away the `sift_down`\n+        // assignment in `PeekMut`'s `DerefMut` implementation since\n+        // the loop may not run.\n+        for &i in vec.iter() {\n+            *peek_mut = i;\n+        }\n+        // Remove the already minimal overhead of the sift_down\n+        std::mem::forget(peek_mut);\n+    })\n+}\n+\n+#[bench]\n+fn bench_from_vec(b: &mut Bencher) {\n+    let mut rng = thread_rng();\n+    let mut vec: Vec<u32> = (0..100_000).collect();\n+    vec.shuffle(&mut rng);\n+\n+    b.iter(|| BinaryHeap::from(vec.clone()))\n+}\n+\n+#[bench]\n+fn bench_into_sorted_vec(b: &mut Bencher) {\n+    let bheap: BinaryHeap<i32> = (0..10_000).collect();\n+\n+    b.iter(|| bheap.clone().into_sorted_vec())\n+}\n+\n+#[bench]\n+fn bench_push(b: &mut Bencher) {\n+    let mut bheap = BinaryHeap::with_capacity(50_000);\n+    let mut rng = thread_rng();\n+    let mut vec: Vec<u32> = (0..50_000).collect();\n+    vec.shuffle(&mut rng);\n+\n+    b.iter(|| {\n+        for &i in vec.iter() {\n+            bheap.push(i);\n+        }\n+        black_box(&mut bheap);\n+        bheap.clear();\n+    })\n+}\n+\n+#[bench]\n+fn bench_pop(b: &mut Bencher) {\n+    let mut bheap = BinaryHeap::with_capacity(10_000);\n+\n+    b.iter(|| {\n+        bheap.extend((0..10_000).rev());\n+        black_box(&mut bheap);\n+        while let Some(elem) = bheap.pop() {\n+            black_box(elem);\n+        }\n+    })\n+}"}, {"sha": "32edb86d10119a0f436687826a123cf6bdf85076", "filename": "library/alloc/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/924cd135b6ab0fe48dae26d9ae30eaadebcd066d/library%2Falloc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924cd135b6ab0fe48dae26d9ae30eaadebcd066d/library%2Falloc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Flib.rs?ref=924cd135b6ab0fe48dae26d9ae30eaadebcd066d", "patch": "@@ -8,6 +8,7 @@\n \n extern crate test;\n \n+mod binary_heap;\n mod btree;\n mod linked_list;\n mod slice;"}]}