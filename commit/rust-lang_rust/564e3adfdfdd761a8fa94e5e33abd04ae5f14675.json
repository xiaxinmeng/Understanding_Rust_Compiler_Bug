{"sha": "564e3adfdfdd761a8fa94e5e33abd04ae5f14675", "node_id": "C_kwDOAAsO6NoAKDU2NGUzYWRmZGZkZDc2MWE4ZmE5NGU1ZTMzYWJkMDRhZTVmMTQ2NzU", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-25T00:39:16Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-29T18:26:44Z"}, "message": "Allow checking individual crates\n\nThis is useful for profiling metadata generation.\n\nThis comes very close to removing all_krates, but doesn't quite -\nthere's one last usage left in `doc`.", "tree": {"sha": "abb7d46495346c66604684caf6ae3c4e475c24c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb7d46495346c66604684caf6ae3c4e475c24c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564e3adfdfdd761a8fa94e5e33abd04ae5f14675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564e3adfdfdd761a8fa94e5e33abd04ae5f14675", "html_url": "https://github.com/rust-lang/rust/commit/564e3adfdfdd761a8fa94e5e33abd04ae5f14675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564e3adfdfdd761a8fa94e5e33abd04ae5f14675/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c571558fd948f22bda9b91e541e72ec1cb189c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/c571558fd948f22bda9b91e541e72ec1cb189c80", "html_url": "https://github.com/rust-lang/rust/commit/c571558fd948f22bda9b91e541e72ec1cb189c80"}], "stats": {"total": 77, "additions": 60, "deletions": 17}, "files": [{"sha": "a4fcaa5e196eaa69d86462aa2bcaa4e1aaeaf0db", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 60, "deletions": 17, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/564e3adfdfdd761a8fa94e5e33abd04ae5f14675/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564e3adfdfdd761a8fa94e5e33abd04ae5f14675/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=564e3adfdfdd761a8fa94e5e33abd04ae5f14675", "patch": "@@ -1,6 +1,6 @@\n //! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n-use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n+use crate::builder::{crate_description, Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n use crate::compile::{add_to_sysroot, run_cargo, rustc_cargo, rustc_cargo_env, std_cargo};\n use crate::config::TargetSelection;\n@@ -12,6 +12,12 @@ use std::path::{Path, PathBuf};\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n     pub target: TargetSelection,\n+    /// Whether to build only a subset of crates.\n+    ///\n+    /// This shouldn't be used from other steps; see the comment on [`compile::Rustc`].\n+    ///\n+    /// [`compile::Rustc`]: crate::compile::Rustc\n+    crates: Interned<Vec<String>>,\n }\n \n /// Returns args for the subcommand itself (not for cargo)\n@@ -66,16 +72,24 @@ fn cargo_subcommand(kind: Kind) -> &'static str {\n     }\n }\n \n+impl Std {\n+    pub fn new(target: TargetSelection) -> Self {\n+        Self { target, crates: INTERNER.intern_list(vec![]) }\n+    }\n+}\n+\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"sysroot\").path(\"library\")\n+        let crates = run.builder.in_tree_crates(\"sysroot\", None);\n+        run.crates(crates).path(\"library\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Std { target: run.target });\n+        let crates = run.cargo_crates_in_set();\n+        run.builder.ensure(Std { target: run.target, crates });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -97,7 +111,14 @@ impl Step for Std {\n             cargo.arg(\"--lib\");\n         }\n \n-        let _guard = builder.msg_check(\"library artifacts\", target);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n+        }\n+\n+        let _guard = builder.msg_check(\n+            format_args!(\"library artifacts{}\", crate_description(&self.crates)),\n+            target,\n+        );\n         run_cargo(\n             builder,\n             cargo,\n@@ -117,7 +138,8 @@ impl Step for Std {\n         }\n \n         // don't run on std twice with x.py clippy\n-        if builder.kind == Kind::Clippy {\n+        // don't check test dependencies if we haven't built libtest\n+        if builder.kind == Kind::Clippy || !self.crates.is_empty() {\n             return;\n         }\n \n@@ -147,8 +169,8 @@ impl Step for Std {\n         // Explicitly pass -p for all dependencies krates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n         // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"test\", Some(target)) {\n-            cargo.arg(\"-p\").arg(krate.name);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n         }\n \n         let _guard = builder.msg_check(\"library test/bench/example targets\", target);\n@@ -167,6 +189,22 @@ impl Step for Std {\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Rustc {\n     pub target: TargetSelection,\n+    /// Whether to build only a subset of crates.\n+    ///\n+    /// This shouldn't be used from other steps; see the comment on [`compile::Rustc`].\n+    ///\n+    /// [`compile::Rustc`]: crate::compile::Rustc\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl Rustc {\n+    pub fn new(target: TargetSelection, builder: &Builder<'_>) -> Self {\n+        let mut crates = vec![];\n+        for krate in builder.in_tree_crates(\"rustc-main\", None) {\n+            crates.push(krate.name.to_string());\n+        }\n+        Self { target, crates: INTERNER.intern_list(crates) }\n+    }\n }\n \n impl Step for Rustc {\n@@ -175,11 +213,13 @@ impl Step for Rustc {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"rustc-main\").path(\"compiler\")\n+        let crates = run.builder.in_tree_crates(\"rustc-main\", None);\n+        run.crates(crates).path(\"compiler\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Rustc { target: run.target });\n+        let crates = run.cargo_crates_in_set();\n+        run.builder.ensure(Rustc { target: run.target, crates });\n     }\n \n     /// Builds the compiler.\n@@ -200,7 +240,7 @@ impl Step for Rustc {\n             builder.ensure(crate::compile::Std::new(compiler, compiler.host));\n             builder.ensure(crate::compile::Std::new(compiler, target));\n         } else {\n-            builder.ensure(Std { target });\n+            builder.ensure(Std::new(target));\n         }\n \n         let mut cargo = builder.cargo(\n@@ -218,14 +258,17 @@ impl Step for Rustc {\n             cargo.arg(\"--all-targets\");\n         }\n \n-        // Explicitly pass -p for all compiler krates -- this will force cargo\n+        // Explicitly pass -p for all compiler crates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n         // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"rustc-main\", Some(target)) {\n-            cargo.arg(\"-p\").arg(krate.name);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n         }\n \n-        let _guard = builder.msg_check(\"compiler artifacts\", target);\n+        let _guard = builder.msg_check(\n+            format_args!(\"compiler artifacts{}\", crate_description(&self.crates)),\n+            target,\n+        );\n         run_cargo(\n             builder,\n             cargo,\n@@ -268,7 +311,7 @@ impl Step for CodegenBackend {\n         let target = self.target;\n         let backend = self.backend;\n \n-        builder.ensure(Rustc { target });\n+        builder.ensure(Rustc::new(target, builder));\n \n         let mut cargo = builder.cargo(\n             compiler,\n@@ -318,7 +361,7 @@ impl Step for RustAnalyzer {\n         let compiler = builder.compiler(builder.top_stage, builder.config.build);\n         let target = self.target;\n \n-        builder.ensure(Std { target });\n+        builder.ensure(Std::new(target));\n \n         let mut cargo = prepare_tool_cargo(\n             builder,\n@@ -386,7 +429,7 @@ macro_rules! tool_check_step {\n                 let compiler = builder.compiler(builder.top_stage, builder.config.build);\n                 let target = self.target;\n \n-                builder.ensure(Rustc { target });\n+                builder.ensure(Rustc::new(target, builder));\n \n                 let mut cargo = prepare_tool_cargo(\n                     builder,"}]}