{"sha": "01327384370b81e3a155dc70a2533935c4495db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMzI3Mzg0MzcwYjgxZTNhMTU1ZGM3MGEyNTMzOTM1YzQ0OTVkYjg=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-09T13:05:49Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-10T03:19:09Z"}, "message": "Reifying callers of Instance::resolve use resolve_for_fn_ptr.", "tree": {"sha": "8b72a702f928798f4c129b70637ec0ab124db020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b72a702f928798f4c129b70637ec0ab124db020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01327384370b81e3a155dc70a2533935c4495db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01327384370b81e3a155dc70a2533935c4495db8", "html_url": "https://github.com/rust-lang/rust/commit/01327384370b81e3a155dc70a2533935c4495db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01327384370b81e3a155dc70a2533935c4495db8/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f67e78bb3bfbc391699021c89b07f1aff3aa26", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f67e78bb3bfbc391699021c89b07f1aff3aa26", "html_url": "https://github.com/rust-lang/rust/commit/f5f67e78bb3bfbc391699021c89b07f1aff3aa26"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "471bd1637546cfabb237dc038d1203945c87655e", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=01327384370b81e3a155dc70a2533935c4495db8", "patch": "@@ -1,3 +1,4 @@\n+// use crate::hir::CodegenFnAttrFlags;\n use crate::hir::Unsafety;\n use crate::hir::def::Namespace;\n use crate::hir::def_id::DefId;\n@@ -304,12 +305,8 @@ impl<'tcx> Instance<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n-        let fn_sig = tcx.fn_sig(def_id);\n-        // let is_reify_shim = fn_sig.inputs().skip_binder().len() > 0\n-        //     && fn_sig.input(0).skip_binder().is_param(0)\n-        //     && tcx.generics_of(def_id).has_self;\n-        if is_reify_shim {\n-            debug!(\" => fn ptr with implicit caller location\");\n+        if false {\n+            debug!(\" => fn pointer created for function with #[track_caller]\");\n             Some(Instance {\n                 def: InstanceDef::ReifyShim(def_id),\n                 substs,"}, {"sha": "6ba6774cbf881cb72210a0595d34c17880ec6cff", "filename": "src/librustc_codegen_ssa/callee.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcallee.rs?ref=01327384370b81e3a155dc70a2533935c4495db8", "patch": "@@ -18,6 +18,23 @@ pub fn resolve_and_get_fn<'tcx, Cx: CodegenMethods<'tcx>>(\n     )\n }\n \n+pub fn resolve_and_get_fn_for_ptr<'tcx,\n+    Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n+>(\n+    cx: &Cx,\n+    def_id: DefId,\n+    substs: SubstsRef<'tcx>,\n+) -> Cx::Value {\n+    cx.get_fn(\n+        ty::Instance::resolve_for_fn_ptr(\n+            cx.tcx(),\n+            ty::ParamEnv::reveal_all(),\n+            def_id,\n+            substs\n+        ).unwrap()\n+    )\n+}\n+\n pub fn resolve_and_get_fn_for_vtable<'tcx,\n     Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n >("}, {"sha": "978e7218aa745f1afb7f53e986b337c319c34148", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=01327384370b81e3a155dc70a2533935c4495db8", "patch": "@@ -190,7 +190,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     bug!(\"reifying a fn ptr that requires const arguments\");\n                                 }\n                                 OperandValue::Immediate(\n-                                    callee::resolve_and_get_fn(bx.cx(), def_id, substs))\n+                                    callee::resolve_and_get_fn_for_ptr(bx.cx(), def_id, substs))\n                             }\n                             _ => {\n                                 bug!(\"{} cannot be reified to a fn ptr\", operand.layout.ty)"}, {"sha": "a1f5562035c69028703d112634e5c0f87d5bdb24", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=01327384370b81e3a155dc70a2533935c4495db8", "patch": "@@ -721,10 +721,12 @@ fn visit_fn_use<'tcx>(\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n     if let ty::FnDef(def_id, substs) = ty.kind {\n-        let instance = ty::Instance::resolve(tcx,\n-                                             ty::ParamEnv::reveal_all(),\n-                                             def_id,\n-                                             substs).unwrap();\n+        let resolver = if is_direct_call {\n+            ty::Instance::resolve\n+        } else {\n+            ty::Instance::resolve_for_fn_ptr\n+        };\n+        let instance = resolver(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap();\n         visit_instance_use(tcx, instance, is_direct_call, output);\n     }\n }"}, {"sha": "eced7eb09ae874285f8e7ab9bc26c54757201e5c", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01327384370b81e3a155dc70a2533935c4495db8/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=01327384370b81e3a155dc70a2533935c4495db8", "patch": "@@ -45,7 +45,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n             build_call_shim(\n                 tcx,\n                 def_id,\n-                Adjustment::DerefMove,\n+                Adjustment::Identity, // TODO(anp) is this the right kind of adjustment?\n                 CallKind::Direct(def_id),\n                 None,\n             )"}]}