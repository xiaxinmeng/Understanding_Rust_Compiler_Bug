{"sha": "161d289cc75259b49db773a6890a8848afd81ffa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MWQyODljYzc1MjU5YjQ5ZGI3NzNhNjg5MGE4ODQ4YWZkODFmZmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-17T03:56:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-17T03:56:09Z"}, "message": "Long lines", "tree": {"sha": "649e577dda9f41819308317b2ca44ca78e22ade7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/649e577dda9f41819308317b2ca44ca78e22ade7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/161d289cc75259b49db773a6890a8848afd81ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/161d289cc75259b49db773a6890a8848afd81ffa", "html_url": "https://github.com/rust-lang/rust/commit/161d289cc75259b49db773a6890a8848afd81ffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/161d289cc75259b49db773a6890a8848afd81ffa/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cbf817c2c9b541d4711d0d67e74be218a440640", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cbf817c2c9b541d4711d0d67e74be218a440640", "html_url": "https://github.com/rust-lang/rust/commit/8cbf817c2c9b541d4711d0d67e74be218a440640"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "59d15c8b4c26dee6360664206e2e1fa63b7c46e4", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/161d289cc75259b49db773a6890a8848afd81ffa/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161d289cc75259b49db773a6890a8848afd81ffa/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=161d289cc75259b49db773a6890a8848afd81ffa", "patch": "@@ -87,7 +87,8 @@ impl <T: Ord> PriorityQueue<T> {\n     #[cfg(stage3)]\n     pure fn to_vec(self) -> ~[T] { let PriorityQueue{data: v} = self; v }\n \n-    /// Consume the PriorityQueue and return a vector in sorted (ascending) order\n+    /// Consume the PriorityQueue and return a vector in sorted\n+    /// (ascending) order\n     #[cfg(stage0)]\n     pure fn to_sorted_vec(self) -> ~[T] { fail }\n     #[cfg(stage1)]\n@@ -115,11 +116,11 @@ impl <T: Ord> PriorityQueue<T> {\n         q\n     }\n \n-    // The implementations of siftup and siftdown use unsafe blocks in order to\n-    // move an element out of the vector (leaving behind a junk element), shift\n-    // along the others and move it back into the vector over the junk element.\n-    // This reduces the constant factor compared to using swaps, which involves\n-    // twice as many moves.\n+    // The implementations of siftup and siftdown use unsafe blocks in\n+    // order to move an element out of the vector (leaving behind a\n+    // junk element), shift along the others and move it back into the\n+    // vector over the junk element.  This reduces the constant factor\n+    // compared to using swaps, which involves twice as many moves.\n \n     priv fn siftup(&mut self, start: uint, pos: uint) unsafe {\n         let mut pos = pos;"}]}