{"sha": "c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjI2YzIxNTUxZmRiYjgxNTZmZDg2ZjAwZTVlOGZlY2M2YzExODk=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-10-01T16:07:04Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:55:42Z"}, "message": "Beginning of moving all backend-agnostic code to rustc_codegen_ssa", "tree": {"sha": "8f0dca5f6a905d25f671dfe526096a0f55313d92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f0dca5f6a905d25f671dfe526096a0f55313d92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "html_url": "https://github.com/rust-lang/rust/commit/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02e5cce169212bd4efe5857bc719d6ed47a53fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02e5cce169212bd4efe5857bc719d6ed47a53fc", "html_url": "https://github.com/rust-lang/rust/commit/b02e5cce169212bd4efe5857bc719d6ed47a53fc"}], "stats": {"total": 407, "additions": 233, "deletions": 174}, "files": [{"sha": "031dac88df13e39be9a2795d9fa6de2a3dab493a", "filename": "src/Cargo.lock", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -2122,9 +2122,14 @@ dependencies = [\n  \"memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_codegen_ssa 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_codegen_ssa\"\n+version = \"0.0.0\"\n+\n [[package]]\n name = \"rustc_codegen_utils\"\n version = \"0.0.0\""}, {"sha": "34017009c2838eae75707709b2e53e02dc2cc58e", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -13,6 +13,7 @@ test = false\n cc = \"1.0.1\"\n num_cpus = \"1.0\"\n rustc-demangle = \"0.1.4\"\n+rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n memmap = \"0.6\"\n "}, {"sha": "0f62ea6d35714deaba52221322cb65811064b5b9", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -25,7 +25,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_codegen_utils::symbol_export;\n use time_graph::Timeline;\n use ModuleLlvm;\n-use rustc_codegen_utils::{ModuleCodegen, ModuleKind};\n+use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n \n use libc;\n "}, {"sha": "60cfe203e402b91cb57fae1c239516d8ea7f1923", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -27,7 +27,7 @@ use time_graph::{self, TimeGraph, Timeline};\n use llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n use llvm_util;\n use {CodegenResults, ModuleLlvm};\n-use rustc_codegen_utils::{ModuleCodegen, ModuleKind, CachedModuleCodegen, CompiledModule};\n+use rustc_codegen_ssa::{ModuleCodegen, ModuleKind, CachedModuleCodegen, CompiledModule};\n use CrateInfo;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::ty::TyCtxt;"}, {"sha": "4e69bf8e8b3974da5579726dd685e43f3bb9a436", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -24,7 +24,7 @@\n //!     int) and rec(x=int, y=int, z=int) will have the same llvm::Type.\n \n use super::ModuleLlvm;\n-use rustc_codegen_utils::{ModuleCodegen, ModuleKind, CachedModuleCodegen};\n+use rustc_codegen_ssa::{ModuleCodegen, ModuleKind, CachedModuleCodegen};\n use super::LlvmCodegenBackend;\n \n use abi;\n@@ -52,7 +52,7 @@ use builder::{Builder, MemFlags};\n use callee;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n use common;\n-use rustc_codegen_utils::common::{RealPredicate, TypeKind, IntPredicate};\n+use rustc_codegen_ssa::common::{RealPredicate, TypeKind, IntPredicate};\n use meth;\n use mir;\n use context::CodegenCx;"}, {"sha": "efd2e146f357fa4aad4303edfde8f5db10945a4b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -10,8 +10,8 @@\n \n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n use llvm::{self, False, BasicBlock};\n-use rustc_codegen_utils::common::{IntPredicate, TypeKind, RealPredicate};\n-use rustc_codegen_utils;\n+use rustc_codegen_ssa::common::{IntPredicate, TypeKind, RealPredicate};\n+use rustc_codegen_ssa;\n use common::Funclet;\n use context::CodegenCx;\n use type_::Type;\n@@ -527,7 +527,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn atomic_load(\n         &self,\n         ptr: &'ll Value,\n-        order: rustc_codegen_utils::common::AtomicOrdering,\n+        order: rustc_codegen_ssa::common::AtomicOrdering,\n         size: Size,\n     ) -> &'ll Value {\n         self.count_insn(\"load.atomic\");\n@@ -681,7 +681,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n    fn atomic_store(&self, val: &'ll Value, ptr: &'ll Value,\n-                   order: rustc_codegen_utils::common::AtomicOrdering, size: Size) {\n+                   order: rustc_codegen_ssa::common::AtomicOrdering, size: Size) {\n         debug!(\"Store {:?} -> {:?}\", val, ptr);\n         self.count_insn(\"store.atomic\");\n         let ptr = self.check_store(val, ptr);\n@@ -1204,8 +1204,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         dst: &'ll Value,\n         cmp: &'ll Value,\n         src: &'ll Value,\n-        order: rustc_codegen_utils::common::AtomicOrdering,\n-        failure_order: rustc_codegen_utils::common::AtomicOrdering,\n+        order: rustc_codegen_ssa::common::AtomicOrdering,\n+        failure_order: rustc_codegen_ssa::common::AtomicOrdering,\n         weak: bool,\n     ) -> &'ll Value {\n         let weak = if weak { llvm::True } else { llvm::False };\n@@ -1223,10 +1223,10 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n     fn atomic_rmw(\n         &self,\n-        op: rustc_codegen_utils::common::AtomicRmwBinOp,\n+        op: rustc_codegen_ssa::common::AtomicRmwBinOp,\n         dst: &'ll Value,\n         src: &'ll Value,\n-        order: rustc_codegen_utils::common::AtomicOrdering,\n+        order: rustc_codegen_ssa::common::AtomicOrdering,\n     ) -> &'ll Value {\n         unsafe {\n             llvm::LLVMBuildAtomicRMW(\n@@ -1241,8 +1241,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn atomic_fence(\n         &self,\n-        order: rustc_codegen_utils::common::AtomicOrdering,\n-        scope: rustc_codegen_utils::common::SynchronizationScope\n+        order: rustc_codegen_ssa::common::AtomicOrdering,\n+        scope: rustc_codegen_ssa::common::SynchronizationScope\n     ) {\n         unsafe {\n             llvm::LLVMRustBuildAtomicFence("}, {"sha": "7dc4b00f79449cb2ff472da18ffaa43dd1a90cfd", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -29,7 +29,7 @@ use rustc::mir::interpret::{Scalar, AllocType, Allocation};\n use rustc::hir;\n use mir::constant::const_alloc_to_llvm;\n use mir::place::PlaceRef;\n-use rustc_codegen_utils::common::TypeKind;\n+use rustc_codegen_ssa::common::TypeKind;\n \n use libc::{c_uint, c_char};\n "}, {"sha": "5e1a03031dde6b7494558c9ae83880f63245b0f4", "filename": "src/librustc_codegen_llvm/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fglue.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -14,7 +14,7 @@\n \n use std;\n \n-use rustc_codegen_utils::common::IntPredicate;\n+use rustc_codegen_ssa::common::IntPredicate;\n use meth;\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, Ty};"}, {"sha": "2e1abb12e168825c133c45e94e669f654d2443f6", "filename": "src/librustc_codegen_llvm/interfaces/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -19,7 +19,7 @@ use libc::c_char;\n use mir::operand::OperandRef;\n use mir::place::PlaceRef;\n use rustc::ty::layout::{Align, Size};\n-use rustc_codegen_utils::common::{\n+use rustc_codegen_ssa::common::{\n     AtomicOrdering, AtomicRmwBinOp, IntPredicate, RealPredicate, SynchronizationScope,\n };\n "}, {"sha": "0547ce7ce4c45f0e98ff3d897d70cb8325425b55", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -31,7 +31,7 @@ pub use self::statics::StaticMethods;\n pub use self::type_::{\n     ArgTypeMethods, BaseTypeMethods, DerivedTypeMethods, LayoutTypeMethods, TypeMethods,\n };\n-pub use rustc_codegen_utils::interfaces::{Backend, BackendMethods, BackendTypes, CodegenObject};\n+pub use rustc_codegen_ssa::interfaces::{Backend, BackendMethods, BackendTypes, CodegenObject};\n \n pub trait CodegenMethods<'tcx>:\n     Backend<'tcx>"}, {"sha": "fe4b7a0b8525357a716863a37c4adff99c929e29", "filename": "src/librustc_codegen_llvm/interfaces/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -15,7 +15,7 @@ use rustc::ty::layout::TyLayout;\n use rustc::ty::layout::{self, Align, Size};\n use rustc::ty::Ty;\n use rustc::util::nodemap::FxHashMap;\n-use rustc_codegen_utils::common::TypeKind;\n+use rustc_codegen_ssa::common::TypeKind;\n use rustc_target::abi::call::{ArgType, CastTarget, FnType, Reg};\n use std::cell::RefCell;\n use syntax::ast;"}, {"sha": "c7b36cc58918062eec2f20e6831647cb166c1628", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -24,7 +24,7 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n-use rustc_codegen_utils::common::TypeKind;\n+use rustc_codegen_ssa::common::TypeKind;\n use rustc::hir;\n use syntax::ast;\n use syntax::symbol::Symbol;\n@@ -463,8 +463,8 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             // This requires that atomic intrinsics follow a specific naming pattern:\n             // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n             name if name.starts_with(\"atomic_\") => {\n-                use rustc_codegen_utils::common::AtomicOrdering::*;\n-                use rustc_codegen_utils::common::\n+                use rustc_codegen_ssa::common::AtomicOrdering::*;\n+                use rustc_codegen_ssa::common::\n                     {SynchronizationScope, AtomicRmwBinOp};\n \n                 let split: Vec<&str> = name.split('_').collect();"}, {"sha": "8d5214ce376f79d8fa57fff977be30d3b7db1934", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -55,6 +55,7 @@ extern crate rustc_incremental;\n extern crate rustc_llvm;\n extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_codegen_utils;\n+extern crate rustc_codegen_ssa;\n extern crate rustc_fs_util;\n \n #[macro_use] extern crate log;\n@@ -91,7 +92,7 @@ use rustc::util::time_graph;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::util::profiling::ProfileCategory;\n use rustc_mir::monomorphize;\n-use rustc_codegen_utils::{ModuleCodegen, CompiledModule};\n+use rustc_codegen_ssa::{ModuleCodegen, CompiledModule};\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::svh::Svh;\n "}, {"sha": "f1a966d7654388c1389e0a5b37c1cb007b25c829", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -19,8 +19,8 @@ use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_ulonglong, c_void};\n \n use std::marker::PhantomData;\n-use rustc_codegen_utils;\n use syntax;\n+use rustc_codegen_ssa;\n \n use super::RustString;\n \n@@ -144,18 +144,18 @@ pub enum IntPredicate {\n }\n \n impl IntPredicate {\n-    pub fn from_generic(intpre: rustc_codegen_utils::common::IntPredicate) -> Self {\n+    pub fn from_generic(intpre: rustc_codegen_ssa::common::IntPredicate) -> Self {\n         match intpre {\n-            rustc_codegen_utils::common::IntPredicate::IntEQ => IntPredicate::IntEQ,\n-            rustc_codegen_utils::common::IntPredicate::IntNE => IntPredicate::IntNE,\n-            rustc_codegen_utils::common::IntPredicate::IntUGT => IntPredicate::IntUGT,\n-            rustc_codegen_utils::common::IntPredicate::IntUGE => IntPredicate::IntUGE,\n-            rustc_codegen_utils::common::IntPredicate::IntULT => IntPredicate::IntULT,\n-            rustc_codegen_utils::common::IntPredicate::IntULE => IntPredicate::IntULE,\n-            rustc_codegen_utils::common::IntPredicate::IntSGT => IntPredicate::IntSGT,\n-            rustc_codegen_utils::common::IntPredicate::IntSGE => IntPredicate::IntSGE,\n-            rustc_codegen_utils::common::IntPredicate::IntSLT => IntPredicate::IntSLT,\n-            rustc_codegen_utils::common::IntPredicate::IntSLE => IntPredicate::IntSLE,\n+            rustc_codegen_ssa::common::IntPredicate::IntEQ => IntPredicate::IntEQ,\n+            rustc_codegen_ssa::common::IntPredicate::IntNE => IntPredicate::IntNE,\n+            rustc_codegen_ssa::common::IntPredicate::IntUGT => IntPredicate::IntUGT,\n+            rustc_codegen_ssa::common::IntPredicate::IntUGE => IntPredicate::IntUGE,\n+            rustc_codegen_ssa::common::IntPredicate::IntULT => IntPredicate::IntULT,\n+            rustc_codegen_ssa::common::IntPredicate::IntULE => IntPredicate::IntULE,\n+            rustc_codegen_ssa::common::IntPredicate::IntSGT => IntPredicate::IntSGT,\n+            rustc_codegen_ssa::common::IntPredicate::IntSGE => IntPredicate::IntSGE,\n+            rustc_codegen_ssa::common::IntPredicate::IntSLT => IntPredicate::IntSLT,\n+            rustc_codegen_ssa::common::IntPredicate::IntSLE => IntPredicate::IntSLE,\n         }\n     }\n }\n@@ -183,25 +183,25 @@ pub enum RealPredicate {\n }\n \n impl RealPredicate {\n-    pub fn from_generic(realpred: rustc_codegen_utils::common::RealPredicate) -> Self {\n+    pub fn from_generic(realpred: rustc_codegen_ssa::common::RealPredicate) -> Self {\n         match realpred {\n-            rustc_codegen_utils::common::RealPredicate::RealPredicateFalse =>\n+            rustc_codegen_ssa::common::RealPredicate::RealPredicateFalse =>\n                 RealPredicate::RealPredicateFalse,\n-            rustc_codegen_utils::common::RealPredicate::RealOEQ => RealPredicate::RealOEQ,\n-            rustc_codegen_utils::common::RealPredicate::RealOGT => RealPredicate::RealOGT,\n-            rustc_codegen_utils::common::RealPredicate::RealOGE => RealPredicate::RealOGE,\n-            rustc_codegen_utils::common::RealPredicate::RealOLT => RealPredicate::RealOLT,\n-            rustc_codegen_utils::common::RealPredicate::RealOLE => RealPredicate::RealOLE,\n-            rustc_codegen_utils::common::RealPredicate::RealONE => RealPredicate::RealONE,\n-            rustc_codegen_utils::common::RealPredicate::RealORD => RealPredicate::RealORD,\n-            rustc_codegen_utils::common::RealPredicate::RealUNO => RealPredicate::RealUNO,\n-            rustc_codegen_utils::common::RealPredicate::RealUEQ => RealPredicate::RealUEQ,\n-            rustc_codegen_utils::common::RealPredicate::RealUGT => RealPredicate::RealUGT,\n-            rustc_codegen_utils::common::RealPredicate::RealUGE => RealPredicate::RealUGE,\n-            rustc_codegen_utils::common::RealPredicate::RealULT => RealPredicate::RealULT,\n-            rustc_codegen_utils::common::RealPredicate::RealULE => RealPredicate::RealULE,\n-            rustc_codegen_utils::common::RealPredicate::RealUNE => RealPredicate::RealUNE,\n-            rustc_codegen_utils::common::RealPredicate::RealPredicateTrue =>\n+            rustc_codegen_ssa::common::RealPredicate::RealOEQ => RealPredicate::RealOEQ,\n+            rustc_codegen_ssa::common::RealPredicate::RealOGT => RealPredicate::RealOGT,\n+            rustc_codegen_ssa::common::RealPredicate::RealOGE => RealPredicate::RealOGE,\n+            rustc_codegen_ssa::common::RealPredicate::RealOLT => RealPredicate::RealOLT,\n+            rustc_codegen_ssa::common::RealPredicate::RealOLE => RealPredicate::RealOLE,\n+            rustc_codegen_ssa::common::RealPredicate::RealONE => RealPredicate::RealONE,\n+            rustc_codegen_ssa::common::RealPredicate::RealORD => RealPredicate::RealORD,\n+            rustc_codegen_ssa::common::RealPredicate::RealUNO => RealPredicate::RealUNO,\n+            rustc_codegen_ssa::common::RealPredicate::RealUEQ => RealPredicate::RealUEQ,\n+            rustc_codegen_ssa::common::RealPredicate::RealUGT => RealPredicate::RealUGT,\n+            rustc_codegen_ssa::common::RealPredicate::RealUGE => RealPredicate::RealUGE,\n+            rustc_codegen_ssa::common::RealPredicate::RealULT => RealPredicate::RealULT,\n+            rustc_codegen_ssa::common::RealPredicate::RealULE => RealPredicate::RealULE,\n+            rustc_codegen_ssa::common::RealPredicate::RealUNE => RealPredicate::RealUNE,\n+            rustc_codegen_ssa::common::RealPredicate::RealPredicateTrue =>\n                 RealPredicate::RealPredicateTrue\n         }\n     }\n@@ -231,25 +231,25 @@ pub enum TypeKind {\n }\n \n impl TypeKind {\n-    pub fn to_generic(self) -> rustc_codegen_utils::common::TypeKind {\n+    pub fn to_generic(self) -> rustc_codegen_ssa::common::TypeKind {\n         match self {\n-            TypeKind::Void => rustc_codegen_utils::common::TypeKind::Void,\n-            TypeKind::Half => rustc_codegen_utils::common::TypeKind::Half,\n-            TypeKind::Float => rustc_codegen_utils::common::TypeKind::Float,\n-            TypeKind::Double => rustc_codegen_utils::common::TypeKind::Double,\n-            TypeKind::X86_FP80 => rustc_codegen_utils::common::TypeKind::X86_FP80,\n-            TypeKind::FP128 => rustc_codegen_utils::common::TypeKind::FP128,\n-            TypeKind::PPC_FP128 => rustc_codegen_utils::common::TypeKind::PPC_FP128,\n-            TypeKind::Label => rustc_codegen_utils::common::TypeKind::Label,\n-            TypeKind::Integer => rustc_codegen_utils::common::TypeKind::Integer,\n-            TypeKind::Function => rustc_codegen_utils::common::TypeKind::Function,\n-            TypeKind::Struct => rustc_codegen_utils::common::TypeKind::Struct,\n-            TypeKind::Array => rustc_codegen_utils::common::TypeKind::Array,\n-            TypeKind::Pointer => rustc_codegen_utils::common::TypeKind::Pointer,\n-            TypeKind::Vector => rustc_codegen_utils::common::TypeKind::Vector,\n-            TypeKind::Metadata => rustc_codegen_utils::common::TypeKind::Metadata,\n-            TypeKind::X86_MMX => rustc_codegen_utils::common::TypeKind::X86_MMX,\n-            TypeKind::Token => rustc_codegen_utils::common::TypeKind::Token,\n+            TypeKind::Void => rustc_codegen_ssa::common::TypeKind::Void,\n+            TypeKind::Half => rustc_codegen_ssa::common::TypeKind::Half,\n+            TypeKind::Float => rustc_codegen_ssa::common::TypeKind::Float,\n+            TypeKind::Double => rustc_codegen_ssa::common::TypeKind::Double,\n+            TypeKind::X86_FP80 => rustc_codegen_ssa::common::TypeKind::X86_FP80,\n+            TypeKind::FP128 => rustc_codegen_ssa::common::TypeKind::FP128,\n+            TypeKind::PPC_FP128 => rustc_codegen_ssa::common::TypeKind::PPC_FP128,\n+            TypeKind::Label => rustc_codegen_ssa::common::TypeKind::Label,\n+            TypeKind::Integer => rustc_codegen_ssa::common::TypeKind::Integer,\n+            TypeKind::Function => rustc_codegen_ssa::common::TypeKind::Function,\n+            TypeKind::Struct => rustc_codegen_ssa::common::TypeKind::Struct,\n+            TypeKind::Array => rustc_codegen_ssa::common::TypeKind::Array,\n+            TypeKind::Pointer => rustc_codegen_ssa::common::TypeKind::Pointer,\n+            TypeKind::Vector => rustc_codegen_ssa::common::TypeKind::Vector,\n+            TypeKind::Metadata => rustc_codegen_ssa::common::TypeKind::Metadata,\n+            TypeKind::X86_MMX => rustc_codegen_ssa::common::TypeKind::X86_MMX,\n+            TypeKind::Token => rustc_codegen_ssa::common::TypeKind::Token,\n         }\n     }\n }\n@@ -272,19 +272,19 @@ pub enum AtomicRmwBinOp {\n }\n \n impl AtomicRmwBinOp {\n-    pub fn from_generic(op: rustc_codegen_utils::common::AtomicRmwBinOp) -> Self {\n+    pub fn from_generic(op: rustc_codegen_ssa::common::AtomicRmwBinOp) -> Self {\n         match op {\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicXchg => AtomicRmwBinOp::AtomicXchg,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicAdd => AtomicRmwBinOp::AtomicAdd,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicSub => AtomicRmwBinOp::AtomicSub,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicAnd => AtomicRmwBinOp::AtomicAnd,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicNand => AtomicRmwBinOp::AtomicNand,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicOr => AtomicRmwBinOp::AtomicOr,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicXor => AtomicRmwBinOp::AtomicXor,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicMax => AtomicRmwBinOp::AtomicMax,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicMin => AtomicRmwBinOp::AtomicMin,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicUMax => AtomicRmwBinOp::AtomicUMax,\n-            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicUMin => AtomicRmwBinOp::AtomicUMin\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicXchg => AtomicRmwBinOp::AtomicXchg,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicAdd => AtomicRmwBinOp::AtomicAdd,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicSub => AtomicRmwBinOp::AtomicSub,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicAnd => AtomicRmwBinOp::AtomicAnd,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicNand => AtomicRmwBinOp::AtomicNand,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicOr => AtomicRmwBinOp::AtomicOr,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicXor => AtomicRmwBinOp::AtomicXor,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicMax => AtomicRmwBinOp::AtomicMax,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicMin => AtomicRmwBinOp::AtomicMin,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicUMax => AtomicRmwBinOp::AtomicUMax,\n+            rustc_codegen_ssa::common::AtomicRmwBinOp::AtomicUMin => AtomicRmwBinOp::AtomicUMin\n         }\n     }\n }\n@@ -305,16 +305,16 @@ pub enum AtomicOrdering {\n }\n \n impl AtomicOrdering {\n-    pub fn from_generic(ao: rustc_codegen_utils::common::AtomicOrdering) -> Self {\n+    pub fn from_generic(ao: rustc_codegen_ssa::common::AtomicOrdering) -> Self {\n         match ao {\n-            rustc_codegen_utils::common::AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n-            rustc_codegen_utils::common::AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n-            rustc_codegen_utils::common::AtomicOrdering::Monotonic => AtomicOrdering::Monotonic,\n-            rustc_codegen_utils::common::AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n-            rustc_codegen_utils::common::AtomicOrdering::Release => AtomicOrdering::Release,\n-            rustc_codegen_utils::common::AtomicOrdering::AcquireRelease =>\n+            rustc_codegen_ssa::common::AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n+            rustc_codegen_ssa::common::AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n+            rustc_codegen_ssa::common::AtomicOrdering::Monotonic => AtomicOrdering::Monotonic,\n+            rustc_codegen_ssa::common::AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n+            rustc_codegen_ssa::common::AtomicOrdering::Release => AtomicOrdering::Release,\n+            rustc_codegen_ssa::common::AtomicOrdering::AcquireRelease =>\n                 AtomicOrdering::AcquireRelease,\n-            rustc_codegen_utils::common::AtomicOrdering::SequentiallyConsistent =>\n+            rustc_codegen_ssa::common::AtomicOrdering::SequentiallyConsistent =>\n                 AtomicOrdering::SequentiallyConsistent\n         }\n     }\n@@ -333,12 +333,12 @@ pub enum SynchronizationScope {\n }\n \n impl SynchronizationScope {\n-    pub fn from_generic(sc: rustc_codegen_utils::common::SynchronizationScope) -> Self {\n+    pub fn from_generic(sc: rustc_codegen_ssa::common::SynchronizationScope) -> Self {\n         match sc {\n-            rustc_codegen_utils::common::SynchronizationScope::Other => SynchronizationScope::Other,\n-            rustc_codegen_utils::common::SynchronizationScope::SingleThread =>\n+            rustc_codegen_ssa::common::SynchronizationScope::Other => SynchronizationScope::Other,\n+            rustc_codegen_ssa::common::SynchronizationScope::SingleThread =>\n                 SynchronizationScope::SingleThread,\n-            rustc_codegen_utils::common::SynchronizationScope::CrossThread =>\n+            rustc_codegen_ssa::common::SynchronizationScope::CrossThread =>\n                 SynchronizationScope::CrossThread,\n         }\n     }"}, {"sha": "d72fdb2fb236e0d7ebbab2a7981050c1066c4a5f", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -18,7 +18,7 @@ use rustc_target::abi::call::ArgType;\n use base;\n use builder::MemFlags;\n use common;\n-use rustc_codegen_utils::common::IntPredicate;\n+use rustc_codegen_ssa::common::IntPredicate;\n use meth;\n use monomorphize;\n "}, {"sha": "8fa35d3aaf27423fba11f218649c6d7793c98a9e", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -13,7 +13,7 @@ use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx, HasTyCtxt};\n use rustc::mir;\n use rustc::mir::tcx::PlaceTy;\n use builder::MemFlags;\n-use rustc_codegen_utils::common::IntPredicate;\n+use rustc_codegen_ssa::common::IntPredicate;\n use type_of::LayoutLlvmExt;\n use glue;\n "}, {"sha": "9870c93a5088141edc9ea4e69131fee09ceda667", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -20,7 +20,7 @@ use base;\n use builder::MemFlags;\n use callee;\n use common;\n-use rustc_codegen_utils::common::{RealPredicate, IntPredicate};\n+use rustc_codegen_ssa::common::{RealPredicate, IntPredicate};\n use monomorphize;\n use type_of::LayoutLlvmExt;\n "}, {"sha": "00dd3be8c9fd4a2760ca5736420e0ac028265c3d", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -27,8 +27,8 @@ use rustc::ty::layout::TyLayout;\n use rustc_target::abi::call::{CastTarget, FnType, Reg};\n use rustc_data_structures::small_c_str::SmallCStr;\n use common;\n-use rustc_codegen_utils;\n-use rustc_codegen_utils::common::TypeKind;\n+use rustc_codegen_ssa;\n+use rustc_codegen_ssa::common::TypeKind;\n use type_of::LayoutLlvmExt;\n use abi::{LlvmType, FnTypeExt};\n \n@@ -364,15 +364,15 @@ impl DerivedTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool {\n-        rustc_codegen_utils::common::type_needs_drop(self.tcx(), ty)\n+        rustc_codegen_ssa::common::type_needs_drop(self.tcx(), ty)\n     }\n \n     fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        rustc_codegen_utils::common::type_is_sized(self.tcx(), ty)\n+        rustc_codegen_ssa::common::type_is_sized(self.tcx(), ty)\n     }\n \n     fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        rustc_codegen_utils::common::type_is_freeze(self.tcx(), ty)\n+        rustc_codegen_ssa::common::type_is_freeze(self.tcx(), ty)\n     }\n \n     fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {"}, {"sha": "ae187c5e3e05fcd6c5d5a254b003eb009cdc1468", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_codegen_ssa\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_codegen_ssa\"\n+path = \"lib.rs\"\n+test = false\n+\n+[dependencies]"}, {"sha": "3f4389913ae49bad346b661eb61f8c050520f68f", "filename": "src/librustc_codegen_ssa/common.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "previous_filename": "src/librustc_codegen_utils/common.rs"}, {"sha": "3cdb1c6a0dde1ba03cb34da543950c4711209bcf", "filename": "src/librustc_codegen_ssa/interfaces/backend.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fbackend.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "previous_filename": "src/librustc_codegen_utils/interfaces/backend.rs"}, {"sha": "f958dbabe68ad506ffcefb2bf35dc6cb3bb7a5c4", "filename": "src/librustc_codegen_ssa/interfaces/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fmod.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "previous_filename": "src/librustc_codegen_utils/interfaces/mod.rs"}, {"sha": "e8e6222f87c12bb6d6ff6c7d50b238c8dbb7c175", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -0,0 +1,113 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! # Note\n+//!\n+//! This API is completely unstable and subject to change.\n+\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n+#![feature(custom_attribute)]\n+#![feature(nll)]\n+#![allow(unused_attributes)]\n+#![allow(dead_code)]\n+#![feature(quote)]\n+#![feature(rustc_diagnostic_macros)]\n+\n+#![recursion_limit=\"256\"]\n+\n+extern crate rustc;\n+extern crate rustc_target;\n+extern crate rustc_mir;\n+extern crate syntax;\n+extern crate syntax_pos;\n+extern crate rustc_data_structures;\n+\n+use std::path::PathBuf;\n+use rustc::dep_graph::WorkProduct;\n+use rustc::session::config::{OutputFilenames, OutputType};\n+\n+pub mod common;\n+pub mod interfaces;\n+\n+pub struct ModuleCodegen<M> {\n+    /// The name of the module. When the crate may be saved between\n+    /// compilations, incremental compilation requires that name be\n+    /// unique amongst **all** crates.  Therefore, it should contain\n+    /// something unique to this crate (e.g., a module path) as well\n+    /// as the crate name and disambiguator.\n+    /// We currently generate these names via CodegenUnit::build_cgu_name().\n+    pub name: String,\n+    pub module_llvm: M,\n+    pub kind: ModuleKind,\n+}\n+\n+pub const RLIB_BYTECODE_EXTENSION: &str = \"bc.z\";\n+\n+impl<M> ModuleCodegen<M> {\n+    pub fn into_compiled_module(self,\n+                            emit_obj: bool,\n+                            emit_bc: bool,\n+                            emit_bc_compressed: bool,\n+                            outputs: &OutputFilenames) -> CompiledModule {\n+        let object = if emit_obj {\n+            Some(outputs.temp_path(OutputType::Object, Some(&self.name)))\n+        } else {\n+            None\n+        };\n+        let bytecode = if emit_bc {\n+            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name)))\n+        } else {\n+            None\n+        };\n+        let bytecode_compressed = if emit_bc_compressed {\n+            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name))\n+                    .with_extension(RLIB_BYTECODE_EXTENSION))\n+        } else {\n+            None\n+        };\n+\n+        CompiledModule {\n+            name: self.name.clone(),\n+            kind: self.kind,\n+            object,\n+            bytecode,\n+            bytecode_compressed,\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct CompiledModule {\n+    pub name: String,\n+    pub kind: ModuleKind,\n+    pub object: Option<PathBuf>,\n+    pub bytecode: Option<PathBuf>,\n+    pub bytecode_compressed: Option<PathBuf>,\n+}\n+\n+pub struct CachedModuleCodegen {\n+    pub name: String,\n+    pub source: WorkProduct,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum ModuleKind {\n+    Regular,\n+    Metadata,\n+    Allocator,\n+}\n+\n+\n+__build_diagnostic_array! { librustc_codegen_ssa, DIAGNOSTICS }"}, {"sha": "8d85c6691c2709b3c334be860a532c4f0237e9e6", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f26c21551fdbb8156fd86f00e5e8fecc6c1189/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=c9f26c21551fdbb8156fd86f00e5e8fecc6c1189", "patch": "@@ -47,86 +47,14 @@ use std::path::PathBuf;\n \n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n-use rustc::dep_graph::WorkProduct;\n-use rustc::session::config::{OutputFilenames, OutputType};\n \n pub mod command;\n-pub mod interfaces;\n pub mod link;\n pub mod linker;\n pub mod codegen_backend;\n pub mod symbol_export;\n pub mod symbol_names;\n pub mod symbol_names_test;\n-pub mod common;\n-\n-pub struct ModuleCodegen<M> {\n-    /// The name of the module. When the crate may be saved between\n-    /// compilations, incremental compilation requires that name be\n-    /// unique amongst **all** crates.  Therefore, it should contain\n-    /// something unique to this crate (e.g., a module path) as well\n-    /// as the crate name and disambiguator.\n-    /// We currently generate these names via CodegenUnit::build_cgu_name().\n-    pub name: String,\n-    pub module_llvm: M,\n-    pub kind: ModuleKind,\n-}\n-\n-pub const RLIB_BYTECODE_EXTENSION: &str = \"bc.z\";\n-\n-impl<M> ModuleCodegen<M> {\n-    pub fn into_compiled_module(self,\n-                            emit_obj: bool,\n-                            emit_bc: bool,\n-                            emit_bc_compressed: bool,\n-                            outputs: &OutputFilenames) -> CompiledModule {\n-        let object = if emit_obj {\n-            Some(outputs.temp_path(OutputType::Object, Some(&self.name)))\n-        } else {\n-            None\n-        };\n-        let bytecode = if emit_bc {\n-            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name)))\n-        } else {\n-            None\n-        };\n-        let bytecode_compressed = if emit_bc_compressed {\n-            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name))\n-                    .with_extension(RLIB_BYTECODE_EXTENSION))\n-        } else {\n-            None\n-        };\n-\n-        CompiledModule {\n-            name: self.name.clone(),\n-            kind: self.kind,\n-            object,\n-            bytecode,\n-            bytecode_compressed,\n-        }\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct CompiledModule {\n-    pub name: String,\n-    pub kind: ModuleKind,\n-    pub object: Option<PathBuf>,\n-    pub bytecode: Option<PathBuf>,\n-    pub bytecode_compressed: Option<PathBuf>,\n-}\n-\n-pub struct CachedModuleCodegen {\n-    pub name: String,\n-    pub source: WorkProduct,\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq)]\n-pub enum ModuleKind {\n-    Regular,\n-    Metadata,\n-    Allocator,\n-}\n \n /// check for the #[rustc_error] annotation, which forces an\n /// error in codegen. This is used to write compile-fail tests"}]}