{"sha": "86927eddafd362709c6b2a7b41d8f4344d8036c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OTI3ZWRkYWZkMzYyNzA5YzZiMmE3YjQxZDhmNDM0NGQ4MDM2YzM=", "commit": {"author": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2020-04-23T16:25:28Z"}, "committer": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2020-04-28T04:44:50Z"}, "message": "Allow Locals to be propagated into and from, but restricted to their own block", "tree": {"sha": "1fac610e81dd78c550000d5a8290937c6dc690f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fac610e81dd78c550000d5a8290937c6dc690f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86927eddafd362709c6b2a7b41d8f4344d8036c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86927eddafd362709c6b2a7b41d8f4344d8036c3", "html_url": "https://github.com/rust-lang/rust/commit/86927eddafd362709c6b2a7b41d8f4344d8036c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86927eddafd362709c6b2a7b41d8f4344d8036c3/comments", "author": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851", "html_url": "https://github.com/rust-lang/rust/commit/3fd2d4aaa6fa07a673b7c46c8253c5f69b23d851"}], "stats": {"total": 229, "additions": 197, "deletions": 32}, "files": [{"sha": "b5c2fa24e64616654b5d470ba4bdaff9e1665f11", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -326,6 +326,8 @@ struct ConstPropagator<'mir, 'tcx> {\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n+    // Locals we need to forget at the end of the current block\n+    locals_of_current_block: BitSet<Local>,\n }\n \n impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n@@ -395,6 +397,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n             source_info: None,\n+            locals_of_current_block: BitSet::new_empty(body.local_decls.len()),\n         }\n     }\n \n@@ -409,8 +412,10 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn remove_const(&mut self, local: Local) {\n-        self.ecx.frame_mut().locals[local] =\n+    /// Remove `local` from the pool of `Locals`. Allows writing to them,\n+    /// but not reading from them anymore.\n+    fn remove_const(ecx: &mut InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>, local: Local) {\n+        ecx.frame_mut().locals[local] =\n             LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };\n     }\n \n@@ -756,6 +761,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n enum ConstPropMode {\n     /// The `Local` can be propagated into and reads of this `Local` can also be propagated.\n     FullConstProp,\n+    /// The `Local` can only be propagated into and from its own block.\n+    OnlyInsideOwnBlock,\n     /// The `Local` can be propagated into but reads cannot be propagated.\n     OnlyPropagateInto,\n     /// No propagation is allowed at all.\n@@ -787,10 +794,18 @@ impl CanConstProp {\n             //        lint for x != y\n             // FIXME(oli-obk): lint variables until they are used in a condition\n             // FIXME(oli-obk): lint if return value is constant\n-            if cpv.local_kinds[local] == LocalKind::Arg || cpv.local_kinds[local] == LocalKind::Var\n-            {\n+            if cpv.local_kinds[local] == LocalKind::Arg {\n                 *val = ConstPropMode::OnlyPropagateInto;\n-                trace!(\"local {:?} can't be const propagated because it's not a temporary\", local);\n+                trace!(\n+                    \"local {:?} can't be const propagated because it's a function argument\",\n+                    local\n+                );\n+            } else if cpv.local_kinds[local] == LocalKind::Var {\n+                *val = ConstPropMode::OnlyInsideOwnBlock;\n+                trace!(\n+                    \"local {:?} will only be propagated inside its block, because it's a user variable\",\n+                    local\n+                );\n             }\n         }\n         cpv.visit_body(&body);\n@@ -858,25 +873,35 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                 if let Some(local) = place.as_local() {\n                     let can_const_prop = self.can_const_prop[local];\n                     if let Some(()) = self.const_prop(rval, place_layout, source_info, place) {\n-                        if can_const_prop == ConstPropMode::FullConstProp\n-                            || can_const_prop == ConstPropMode::OnlyPropagateInto\n-                        {\n+                        if can_const_prop != ConstPropMode::NoPropagation {\n+                            // This will return None for Locals that are from other blocks,\n+                            // so it should be okay to propagate from here on down.\n                             if let Some(value) = self.get_const(local) {\n                                 if self.should_const_prop(value) {\n                                     trace!(\"replacing {:?} with {:?}\", rval, value);\n                                     self.replace_with_const(rval, value, statement.source_info);\n-\n-                                    if can_const_prop == ConstPropMode::FullConstProp {\n+                                    if can_const_prop == ConstPropMode::FullConstProp\n+                                        || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n+                                    {\n                                         trace!(\"propagated into {:?}\", local);\n                                     }\n                                 }\n+                                if can_const_prop == ConstPropMode::OnlyInsideOwnBlock {\n+                                    trace!(\n+                                        \"found local restricted to its block. Will remove it from const-prop after block is finished. Local: {:?}\",\n+                                        local\n+                                    );\n+                                    self.locals_of_current_block.insert(local);\n+                                }\n                             }\n                         }\n                     }\n-                    if self.can_const_prop[local] != ConstPropMode::FullConstProp {\n+                    if self.can_const_prop[local] == ConstPropMode::OnlyPropagateInto\n+                        || self.can_const_prop[local] == ConstPropMode::NoPropagation\n+                    {\n                         trace!(\"can't propagate into {:?}\", local);\n                         if local != RETURN_PLACE {\n-                            self.remove_const(local);\n+                            Self::remove_const(&mut self.ecx, local);\n                         }\n                     }\n                 }\n@@ -915,7 +940,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                         // doesn't use the invalid value\n                         match cond {\n                             Operand::Move(ref place) | Operand::Copy(ref place) => {\n-                                self.remove_const(place.local);\n+                                Self::remove_const(&mut self.ecx, place.local);\n                             }\n                             Operand::Constant(_) => {}\n                         }\n@@ -992,5 +1017,13 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             //FIXME(wesleywiser) Call does have Operands that could be const-propagated\n             TerminatorKind::Call { .. } => {}\n         }\n+        // We remove all Locals which are restricted in propagation to their containing blocks.\n+        // We wouldn't need to clone, but the borrow checker can't see that we're not aliasing\n+        // the locals_of_current_block field, so we need to clone it first.\n+        // let ecx = &mut self.ecx;\n+        for local in self.locals_of_current_block.iter() {\n+            Self::remove_const(&mut self.ecx, local);\n+        }\n+        self.locals_of_current_block.clear();\n     }\n }"}, {"sha": "0183ff7716cbb6853a8bdfa5132ed040c26978ef", "filename": "src/test/mir-opt/const_prop/scalar_literal_propagation/rustc.main.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -21,7 +21,14 @@\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n           StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n-          _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n+-         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n++         _3 = const 1u32;                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/scalar_literal_propagation.rs:4:13: 4:14\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n           _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n                                            // ty::Const\n                                            // + ty: fn(u32) {consume}"}, {"sha": "1511b361f587ff0db022d899797cc7dc9a7b6960", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation/rustc.main.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation%2Frustc.main.ConstProp.diff?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -29,7 +29,20 @@\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n           StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n-          _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n+-         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n++         _3 = (const 1u32, const 2u32);   // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/tuple_literal_propagation.rs:5:13: 5:14\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/tuple_literal_propagation.rs:5:13: 5:14\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n                                            // ty::Const\n                                            // + ty: fn((u32, u32)) {consume}"}, {"sha": "24e91b3ff611c484c3ad91596c6f663296486d75", "filename": "src/test/mir-opt/simplify-arm-identity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -2,6 +2,7 @@\n // Regression test for issue #66856.\n //\n // compile-flags: -Zmir-opt-level=2\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n enum Src {\n     Foo(u8),"}, {"sha": "bf24bfb2c57411797fb45814663a742d56ac3fb0", "filename": "src/test/mir-opt/simplify-arm-identity/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `main` before SimplifyArmIdentity\n++ // MIR for `main` after SimplifyArmIdentity\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-arm-identity.rs:17:11: 17:11\n+      let _1: Src as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+      let mut _2: Dst;                     // in scope 0 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+      let mut _3: isize;                   // in scope 0 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+      let mut _5: u8;                      // in scope 0 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+      scope 1 {\n+          debug e => _1;                   // in scope 1 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+          let _4: u8;                      // in scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n+          scope 2 {\n+          }\n+          scope 3 {\n+              debug x => _4;               // in scope 3 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+          ((_1 as Foo).0: u8) = const 0u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:18:27: 18:28\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+          _3 = const 0isize;               // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+                                           // ty::Const\n+                                           // + ty: isize\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:20:9: 20:20\n+                                           // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n+          _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n+          ((_2 as Foo).0: u8) = move _4;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n+          discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n+          StorageDead(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:22:6: 22:7\n+          _0 = const ();                   // scope 0 at $DIR/simplify-arm-identity.rs:17:11: 23:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:17:11: 23:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:23:1: 23:2\n+          return;                          // scope 0 at $DIR/simplify-arm-identity.rs:23:2: 23:2\n+      }\n+  }\n+  "}, {"sha": "ff7183e57d2cfd46e8158d6606a53ca33d482a4f", "filename": "src/test/mir-opt/simplify-arm-identity/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `main` before SimplifyArmIdentity\n++ // MIR for `main` after SimplifyArmIdentity\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-arm-identity.rs:17:11: 17:11\n+      let _1: Src as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+      let mut _2: Dst;                     // in scope 0 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+      let mut _3: isize;                   // in scope 0 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+      let mut _5: u8;                      // in scope 0 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+      scope 1 {\n+          debug e => _1;                   // in scope 1 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+          let _4: u8;                      // in scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n+          scope 2 {\n+          }\n+          scope 3 {\n+              debug x => _4;               // in scope 3 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+          ((_1 as Foo).0: u8) = const 0u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:18:27: 18:28\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+          _3 = const 0isize;               // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+                                           // ty::Const\n+                                           // + ty: isize\n+                                           // + val: Value(Scalar(0x0000000000000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:20:9: 20:20\n+                                           // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n+          _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n+          ((_2 as Foo).0: u8) = move _4;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n+          discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n+          StorageDead(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:22:6: 22:7\n+          _0 = const ();                   // scope 0 at $DIR/simplify-arm-identity.rs:17:11: 23:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:17:11: 23:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:23:1: 23:2\n+          return;                          // scope 0 at $DIR/simplify-arm-identity.rs:23:2: 23:2\n+      }\n+  }\n+  "}, {"sha": "ae6dfae30b97b64f8826d46c2aaddf8e58a11f2d", "filename": "src/test/mir-opt/simplify_match/rustc.main.SimplifyBranches-after-copy-prop.diff", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -10,19 +10,24 @@\n       }\n   \n       bb0: {\n-          nop;                             // scope 0 at $DIR/simplify_match.rs:6:11: 6:31\n-          nop;                             // scope 0 at $DIR/simplify_match.rs:6:17: 6:18\n-          nop;                             // scope 0 at $DIR/simplify_match.rs:6:21: 6:26\n-          nop;                             // scope 1 at $DIR/simplify_match.rs:6:28: 6:29\n-          nop;                             // scope 0 at $DIR/simplify_match.rs:6:30: 6:31\n--         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n--                                          // ty::Const\n--                                          // + ty: bool\n--                                          // + val: Value(Scalar(0x00))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify_match.rs:6:21: 6:26\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify_match.rs:6:11: 6:31\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_match.rs:6:17: 6:18\n+          _2 = const false;                // scope 0 at $DIR/simplify_match.rs:6:21: 6:26\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_match.rs:6:21: 6:26\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _1 = const false;                // scope 1 at $DIR/simplify_match.rs:6:28: 6:29\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_match.rs:6:28: 6:29\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_match.rs:6:30: 6:31\n+          goto -> bb1;                     // scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n       }\n   \n       bb1: {\n@@ -47,7 +52,7 @@\n       }\n   \n       bb3: {\n-          nop;                             // scope 0 at $DIR/simplify_match.rs:10:1: 10:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify_match.rs:10:1: 10:2\n           return;                          // scope 0 at $DIR/simplify_match.rs:10:2: 10:2\n       }\n   }"}, {"sha": "ba93563154a3b3958189e8d5fd82cadb58dfad3f", "filename": "src/test/run-fail/divide-by-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:attempt to divide by zero\n-\n+#[allow(unconditional_panic)]\n fn main() {\n     let y = 0;\n     let _z = 1 / y;"}, {"sha": "2575de7cc58336fbd85028a9be61dd0cb1c060c8", "filename": "src/test/run-fail/dst-raw-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Frun-fail%2Fdst-raw-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Frun-fail%2Fdst-raw-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdst-raw-slice.rs?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -1,6 +1,6 @@\n // Test bounds checking for DST raw slices\n // error-pattern:index out of bounds\n-\n+#[allow(unconditional_panic)]\n fn main() {\n     let a: *const [_] = &[1, 2, 3];\n     unsafe {"}, {"sha": "f70b3ac920c6116258ae0ccd79ece1d8171b1171", "filename": "src/test/run-fail/mod-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86927eddafd362709c6b2a7b41d8f4344d8036c3/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmod-zero.rs?ref=86927eddafd362709c6b2a7b41d8f4344d8036c3", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:attempt to calculate the remainder with a divisor of zero\n-\n+#[allow(unconditional_panic)]\n fn main() {\n     let y = 0;\n     let _z = 1 % y;"}]}