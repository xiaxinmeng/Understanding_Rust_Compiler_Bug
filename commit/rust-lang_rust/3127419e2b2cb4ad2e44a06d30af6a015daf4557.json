{"sha": "3127419e2b2cb4ad2e44a06d30af6a015daf4557", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMjc0MTllMmIyY2I0YWQyZTQ0YTA2ZDMwYWY2YTAxNWRhZjQ1NTc=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-05-26T16:02:07Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-06-02T14:23:12Z"}, "message": "Respond to review feedback", "tree": {"sha": "9a21fcf84ff04e4d747ae57ab26a6f13ba9ea945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a21fcf84ff04e4d747ae57ab26a6f13ba9ea945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3127419e2b2cb4ad2e44a06d30af6a015daf4557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3127419e2b2cb4ad2e44a06d30af6a015daf4557", "html_url": "https://github.com/rust-lang/rust/commit/3127419e2b2cb4ad2e44a06d30af6a015daf4557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3127419e2b2cb4ad2e44a06d30af6a015daf4557/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef053fd6f0faa848097ff8b924ac859c667c8d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef053fd6f0faa848097ff8b924ac859c667c8d15", "html_url": "https://github.com/rust-lang/rust/commit/ef053fd6f0faa848097ff8b924ac859c667c8d15"}], "stats": {"total": 159, "additions": 61, "deletions": 98}, "files": [{"sha": "1e70664e64d707dbc3aa9af04669b0c416a68c88", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 28, "deletions": 62, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/3127419e2b2cb4ad2e44a06d30af6a015daf4557/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127419e2b2cb4ad2e44a06d30af6a015daf4557/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=3127419e2b2cb4ad2e44a06d30af6a015daf4557", "patch": "@@ -1485,8 +1485,8 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n             _ => bug!(),\n         };\n \n-        // This will always find the metadata in the type map.\n         let fallback = use_enum_fallback(cx);\n+        // This will always find the metadata in the type map.\n         let self_metadata = type_metadata(cx, self.enum_type, self.span);\n \n         match self.layout.variants {\n@@ -1541,11 +1541,11 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     //   struct {variant 0 name} {\n                     //     tag$ variant$;\n                     //     <variant 0 fields>\n-                    //   } Variant0;\n+                    //   } variant0;\n                     //   <other variant structs>\n                     // }\n                     // ```\n-                    // The natvis in `intrinsic.nativs` then matches on `this.Variant0.variant$` to\n+                    // The natvis in `intrinsic.nativs` then matches on `this.variant0.variant$` to\n                     // determine which variant is active and then displays it.\n                     Some(DirectTag {\n                         tag_field: Field::from(tag_field),\n@@ -1582,7 +1582,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n \n                         MemberDescription {\n                             name: if fallback {\n-                                format!(\"Variant{}\", i.as_u32())\n+                                format!(\"variant{}\", i.as_u32())\n                             } else {\n                                 variant_info.variant_name()\n                             },\n@@ -1623,43 +1623,27 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     }\n                 };\n \n-                // For MSVC, we will generate a union of two structs, one for the dataful variant and one that just points to\n-                // the discriminant field. We also create an enum that contains tag values for the non-dataful variants and\n-                // make the discriminant field that type. We then use natvis to render the enum type correctly in Windbg/VS.\n+                // For MSVC, we will generate a union of two fields, one for the dataful variant\n+                // and one that just points to the discriminant. We also create an enum that\n+                // contains tag values for the non-dataful variants and make the discriminant field\n+                // that type. We then use natvis to render the enum type correctly in Windbg/VS.\n                 // This will generate debuginfo roughly equivalent to the following C:\n                 // ```c\n-                // union enum$<{name}, {min niche}, {max niche}, {dataful variant name} {\n-                //   struct dataful_variant {\n+                // union enum$<{name}, {min niche}, {max niche}, {dataful variant name}> {\n+                //   struct <dataful variant name> {\n                 //     <fields in dataful variant>\n-                //   },\n-                //   struct discriminant$ {\n-                //     enum tag$ {\n-                //       <non-dataful variants>\n-                //     } discriminant;\n-                //   }\n+                //   } dataful_variant;\n+                //   enum Discriminant$ {\n+                //     <non-dataful variants>\n+                //   } discriminant;\n                 // }\n                 // ```\n                 // The natvis in `intrinsic.natvis` matches on the type name `enum$<*, *, *, *>`\n-                // and evaluates `this.discriminant$.discriminant`. If the value is between\n-                // the min niche and max niche, then the enum is in the dataful variant and\n-                // `this.dataful_variant` is rendered. Otherwise, the enum is in one of the\n-                // non-dataful variants. In that case, we just need to render the name of the\n-                // `this.discriminant$.discriminant` enum.\n+                // and evaluates `this.discriminant`. If the value is between the min niche and max\n+                // niche, then the enum is in the dataful variant and `this.dataful_variant` is\n+                // rendered. Otherwise, the enum is in one of the non-dataful variants. In that\n+                // case, we just need to render the name of the `this.discriminant` enum.\n                 if fallback {\n-                    let unique_type_id = debug_context(cx)\n-                        .type_map\n-                        .borrow_mut()\n-                        .get_unique_type_id_of_enum_variant(cx, self.enum_type, \"discriminant$\");\n-\n-                    let variant_metadata = create_struct_stub(\n-                        cx,\n-                        self.layout.ty,\n-                        &\"discriminant$\",\n-                        unique_type_id,\n-                        Some(self_metadata),\n-                        DIFlags::FlagArtificial,\n-                    );\n-\n                     let dataful_variant_layout = self.layout.for_variant(cx, dataful_variant);\n \n                     let mut discr_enum_ty = tag.value.to_ty(cx.tcx);\n@@ -1694,8 +1678,8 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         llvm::LLVMRustDIBuilderCreateEnumerationType(\n                             DIB(cx),\n                             self_metadata,\n-                            \"tag$\".as_ptr().cast(),\n-                            \"tag$\".len(),\n+                            \"Discriminant$\".as_ptr().cast(),\n+                            \"Discriminant$\".len(),\n                             unknown_file_metadata(cx),\n                             UNKNOWN_LINE_NUMBER,\n                             tag.value.size(cx).bits(),\n@@ -1706,27 +1690,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         )\n                     };\n \n-                    let (size, align) =\n-                        cx.size_and_align_of(dataful_variant_layout.field(cx, tag_field).ty);\n-                    let members = vec![MemberDescription {\n-                        name: \"discriminant\".to_string(),\n-                        type_metadata: discr_enum,\n-                        offset: dataful_variant_layout.fields.offset(tag_field),\n-                        size,\n-                        align,\n-                        flags: DIFlags::FlagArtificial,\n-                        discriminant: None,\n-                        source_info: None,\n-                    }];\n-\n-                    set_members_of_composite_type(\n-                        cx,\n-                        self.enum_type,\n-                        variant_metadata,\n-                        members,\n-                        None,\n-                    );\n-\n                     let variant_info = variant_info_for(dataful_variant);\n                     let (variant_type_metadata, member_desc_factory) = describe_enum_variant(\n                         cx,\n@@ -1747,6 +1710,9 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         Some(&self.common_members),\n                     );\n \n+                    let (size, align) =\n+                        cx.size_and_align_of(dataful_variant_layout.field(cx, tag_field).ty);\n+\n                     vec![\n                         MemberDescription {\n                             // Name the dataful variant so that we can identify it for natvis\n@@ -1760,11 +1726,11 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             source_info: variant_info.source_info(cx),\n                         },\n                         MemberDescription {\n-                            name: \"discriminant$\".into(),\n-                            type_metadata: variant_metadata,\n-                            offset: Size::ZERO,\n-                            size: self.layout.size,\n-                            align: self.layout.align.abi,\n+                            name: \"discriminant\".into(),\n+                            type_metadata: discr_enum,\n+                            offset: dataful_variant_layout.fields.offset(tag_field),\n+                            size,\n+                            align,\n                             flags: DIFlags::FlagZero,\n                             discriminant: None,\n                             source_info: None,"}, {"sha": "7b4b0821c4be8017c75e66434cc2bed946e6bd03", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3127419e2b2cb4ad2e44a06d30af6a015daf4557/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127419e2b2cb4ad2e44a06d30af6a015daf4557/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=3127419e2b2cb4ad2e44a06d30af6a015daf4557", "patch": "@@ -238,6 +238,10 @@ pub fn push_debuginfo_type_name<'tcx>(\n         }\n     }\n \n+    /// MSVC names enums differently than other platforms so that the debugging visualization\n+    // format (natvis) is able to understand enums and render the active variant correctly in the\n+    // debugger. For more information, look in `src/etc/natvis/intrinsic.natvis` and\n+    // `EnumMemberDescriptionFactor::create_member_descriptions`.\n     fn msvc_enum_fallback(\n         tcx: TyCtxt<'tcx>,\n         ty: Ty<'tcx>,"}, {"sha": "89280149a035140cd8943ab18a8664040d97aaeb", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3127419e2b2cb4ad2e44a06d30af6a015daf4557/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/3127419e2b2cb4ad2e44a06d30af6a015daf4557/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=3127419e2b2cb4ad2e44a06d30af6a015daf4557", "patch": "@@ -150,7 +150,7 @@\n     </Expand>\n   </Type>\n   <Type Name=\"enum$&lt;*&gt;\">\n-    <Intrinsic Name=\"tag\" Expression=\"Variant0.variant$\" />\n+    <Intrinsic Name=\"tag\" Expression=\"variant0.variant$\" />\n     <DisplayString Condition=\"tag() == 0\">{tag(),en}</DisplayString>\n     <DisplayString Condition=\"tag() == 1\" Optional=\"true\">{tag(),en}</DisplayString>\n     <DisplayString Condition=\"tag() == 2\" Optional=\"true\">{tag(),en}</DisplayString>\n@@ -169,31 +169,32 @@\n     <DisplayString Condition=\"tag() == 15\" Optional=\"true\">{tag(),en}</DisplayString>\n \n     <Expand>\n-      <ExpandedItem Condition=\"tag() == 0\">Variant0</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 1\" Optional=\"true\">Variant1</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 2\" Optional=\"true\">Variant2</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 3\" Optional=\"true\">Variant3</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 4\" Optional=\"true\">Variant4</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 5\" Optional=\"true\">Variant5</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 6\" Optional=\"true\">Variant6</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 7\" Optional=\"true\">Variant7</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 8\" Optional=\"true\">Variant8</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 9\" Optional=\"true\">Variant9</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 10\" Optional=\"true\">Variant10</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 11\" Optional=\"true\">Variant11</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 12\" Optional=\"true\">Variant12</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 13\" Optional=\"true\">Variant13</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 14\" Optional=\"true\">Variant14</ExpandedItem>\n-      <ExpandedItem Condition=\"tag() == 15\" Optional=\"true\">Variant15</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 0\">variant0</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 1\" Optional=\"true\">variant1</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 2\" Optional=\"true\">variant2</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 3\" Optional=\"true\">variant3</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 4\" Optional=\"true\">variant4</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 5\" Optional=\"true\">variant5</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 6\" Optional=\"true\">variant6</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 7\" Optional=\"true\">variant7</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 8\" Optional=\"true\">variant8</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 9\" Optional=\"true\">variant9</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 10\" Optional=\"true\">variant10</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 11\" Optional=\"true\">variant11</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 12\" Optional=\"true\">variant12</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 13\" Optional=\"true\">variant13</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 14\" Optional=\"true\">variant14</ExpandedItem>\n+      <ExpandedItem Condition=\"tag() == 15\" Optional=\"true\">variant15</ExpandedItem>\n     </Expand>\n   </Type>\n \n-  <!-- $T1 is the name of the enum, $T2 is the low value of the dataful variant tag, $T3 is the high value of the dataful variant tag, $T4 is the name of the dataful variant -->\n+  <!-- $T1 is the name of the enum, $T2 is the low value of the dataful variant tag,\n+       $T3 is the high value of the dataful variant tag, $T4 is the name of the dataful variant -->\n   <Type Name=\"enum$&lt;*, *, *, *&gt;\">\n-    <Intrinsic Name=\"tag\" Expression=\"discriminant$.discriminant\" />\n+    <Intrinsic Name=\"tag\" Expression=\"discriminant\" />\n     <Intrinsic Name=\"is_dataful\" Expression=\"tag() &gt;= $T2 &amp;&amp; tag() &lt;= $T3\" />\n     <DisplayString Condition=\"is_dataful()\">{\"$T4\",sb}({dataful_variant})</DisplayString>\n-    <DisplayString Condition=\"!is_dataful()\">{discriminant$.discriminant,en}</DisplayString>\n+    <DisplayString Condition=\"!is_dataful()\">{discriminant,en}</DisplayString>\n     <Expand>\n       <ExpandedItem Condition=\"is_dataful()\">dataful_variant</ExpandedItem>\n       <Synthetic Condition=\"is_dataful()\" Name=\"[variant]\">"}, {"sha": "550cc66f3899c01407419469880ccffc6c7a34ff", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3127419e2b2cb4ad2e44a06d30af6a015daf4557/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3127419e2b2cb4ad2e44a06d30af6a015daf4557/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=3127419e2b2cb4ad2e44a06d30af6a015daf4557", "patch": "@@ -11,50 +11,43 @@\n // cdb-check:a,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n // cdb-check:        [+0x000] __0              : Low (0x2) [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : 0x2 [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::tag$]\n+// cdb-check:    [+0x000] discriminant     : 0x2 [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Discriminant$]\n \n // cdb-command: dx -r2 b,!\n // cdb-check:b,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : None (0x11) [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::tag$]\n+// cdb-check:    [+0x000] discriminant     : None (0x11) [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Discriminant$]\n \n // cdb-command: dx -r2 c,!\n // cdb-check:c,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n // cdb-check:        [+0x000] my_data          : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : Tag1 (0x11) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n+// cdb-check:    [+0x000] discriminant     : Tag1 (0x11) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n \n // cdb-command: dx -r2 d,!\n // cdb-check:d,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n // cdb-check:        [+0x000] my_data          : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : 0x10 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n+// cdb-check:    [+0x000] discriminant     : 0x10 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n \n // cdb-command: dx -r2 e,!\n // cdb-check:e,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n // cdb-check:        [+0x000] my_data          : 0x13 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : Tag2 (0x13) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n+// cdb-check:    [+0x000] discriminant     : Tag2 (0x13) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n \n // cdb-command: dx -r2 f,!\n // cdb-check:f,!              [Type: enum$<core::option::Option<u32*>, 1, [...], Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x[...] : 0x1 [Type: unsigned int *]\n-// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::tag$]\n+// cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Discriminant$]\n \n // cdb-command: dx -r2 g,!\n // cdb-check:g,!              [Type: enum$<core::option::Option<u32*>, 1, [...], Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x0 [Type: unsigned int *]\n-// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : None (0x0) [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::tag$]\n+// cdb-check:    [+0x000] discriminant     : None (0x0) [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Discriminant$]\n \n // cdb-command: dx h\n // cdb-check:h                : Some [Type: enum$<core::option::Option<u32>>]\n@@ -72,8 +65,7 @@\n // cdb-check:k,!              [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              [Type: alloc::string::String]\n-// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::tag$]\n+// cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Discriminant$]\n \n pub enum CStyleEnum {\n     Low = 2,"}]}