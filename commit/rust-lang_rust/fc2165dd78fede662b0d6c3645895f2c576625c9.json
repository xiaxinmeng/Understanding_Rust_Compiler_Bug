{"sha": "fc2165dd78fede662b0d6c3645895f2c576625c9", "node_id": "C_kwDOAAsO6NoAKGZjMjE2NWRkNzhmZWRlNjYyYjBkNmMzNjQ1ODk1ZjJjNTc2NjI1Yzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-04T00:01:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-04T00:01:53Z"}, "message": "Auto merge of #2048 - RalfJung:rustup, r=RalfJung\n\nrustup", "tree": {"sha": "aa6a692b8d498db09d66d3bf144679dd5a935d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa6a692b8d498db09d66d3bf144679dd5a935d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2165dd78fede662b0d6c3645895f2c576625c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2165dd78fede662b0d6c3645895f2c576625c9", "html_url": "https://github.com/rust-lang/rust/commit/fc2165dd78fede662b0d6c3645895f2c576625c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2165dd78fede662b0d6c3645895f2c576625c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "732461b4cd2c4bfd8b229ad43fbc32c193b4049d", "url": "https://api.github.com/repos/rust-lang/rust/commits/732461b4cd2c4bfd8b229ad43fbc32c193b4049d", "html_url": "https://github.com/rust-lang/rust/commit/732461b4cd2c4bfd8b229ad43fbc32c193b4049d"}, {"sha": "830cc58f8a10598f4caa337ca97be51741945499", "url": "https://api.github.com/repos/rust-lang/rust/commits/830cc58f8a10598f4caa337ca97be51741945499", "html_url": "https://github.com/rust-lang/rust/commit/830cc58f8a10598f4caa337ca97be51741945499"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8e4cdeddfccb5f143760574db5b73fb011fcafa3", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2165dd78fede662b0d6c3645895f2c576625c9/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/fc2165dd78fede662b0d6c3645895f2c576625c9/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=fc2165dd78fede662b0d6c3645895f2c576625c9", "patch": "@@ -1 +1 @@\n-297a8018b525c28ef10ee6a91d61954839b508b9\n+6af09d2505f38e4f1df291df56d497fb2ad935ed"}, {"sha": "7a63bb03dfe7feddf4e8403a0e35ae17145d974b", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=fc2165dd78fede662b0d6c3645895f2c576625c9", "patch": "@@ -510,7 +510,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         let target = &this.tcx.sess.target;\n         let target_os = &target.os;\n-        let last_error = if target.families.contains(&\"unix\".to_owned()) {\n+        let last_error = if target.families.iter().any(|f| f == \"unix\") {\n             this.eval_libc(match err_kind {\n                 ConnectionRefused => \"ECONNREFUSED\",\n                 ConnectionReset => \"ECONNRESET\",\n@@ -534,7 +534,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     )\n                 }\n             })?\n-        } else if target.families.contains(&\"windows\".to_owned()) {\n+        } else if target.families.iter().any(|f| f == \"windows\") {\n             // FIXME: we have to finish implementing the Windows equivalent of this.\n             this.eval_windows(\n                 \"c\","}, {"sha": "b4b07a61a8b4947b47f3d9c776c123b0485dc5c1", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=fc2165dd78fede662b0d6c3645895f2c576625c9", "patch": "@@ -227,7 +227,7 @@ impl MemoryExtra {\n     pub fn init_extern_statics<'tcx, 'mir>(\n         this: &mut MiriEvalContext<'mir, 'tcx>,\n     ) -> InterpResult<'tcx> {\n-        match this.tcx.sess.target.os.as_str() {\n+        match this.tcx.sess.target.os.as_ref() {\n             \"linux\" => {\n                 // \"environ\"\n                 Self::add_extern_static("}, {"sha": "822bef56ce682e4f7a841005d143020b21d91e89", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=fc2165dd78fede662b0d6c3645895f2c576625c9", "patch": "@@ -41,7 +41,7 @@ impl<'tcx> EnvVars<'tcx> {\n         mut excluded_env_vars: Vec<String>,\n         forwarded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n-        let target_os = ecx.tcx.sess.target.os.as_str();\n+        let target_os = ecx.tcx.sess.target.os.as_ref();\n         // HACK: Exclude `TERM` var to avoid terminfo trying to open the termcap file.\n         // This is (a) very slow and (b) does not work on Windows.\n         excluded_env_vars.push(\"TERM\".to_owned());"}, {"sha": "d9e4d9382246c7d65c68539e0fc5e1e45f1cf4a1", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=fc2165dd78fede662b0d6c3645895f2c576625c9", "patch": "@@ -46,7 +46,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn min_align(&self, size: u64, kind: MiriMemoryKind) -> Align {\n         let this = self.eval_context_ref();\n         // List taken from `libstd/sys_common/alloc.rs`.\n-        let min_align = match this.tcx.sess.target.arch.as_str() {\n+        let min_align = match this.tcx.sess.target.arch.as_ref() {\n             \"x86\" | \"arm\" | \"mips\" | \"powerpc\" | \"powerpc64\" | \"asmjs\" | \"wasm32\" => 8,\n             \"x86_64\" | \"aarch64\" | \"mips64\" | \"s390x\" | \"sparc64\" => 16,\n             arch => bug!(\"Unsupported target architecture: {}\", arch),\n@@ -695,7 +695,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Platform-specific shims\n-            _ => match this.tcx.sess.target.os.as_str() {\n+            _ => match this.tcx.sess.target.os.as_ref() {\n                 \"linux\" | \"macos\" => return shims::posix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                 \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                 target => throw_unsup_format!(\"the target `{}` is not supported\", target),"}, {"sha": "36bf530599299103995f422346ca410142f317ad", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2165dd78fede662b0d6c3645895f2c576625c9/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=fc2165dd78fede662b0d6c3645895f2c576625c9", "patch": "@@ -462,7 +462,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Platform-specific shims\n             _ => {\n-                match this.tcx.sess.target.os.as_str() {\n+                match this.tcx.sess.target.os.as_ref() {\n                     \"linux\" => return shims::posix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                     \"macos\" => return shims::posix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                     _ => unreachable!(),"}]}