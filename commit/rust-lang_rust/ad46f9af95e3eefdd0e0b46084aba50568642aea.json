{"sha": "ad46f9af95e3eefdd0e0b46084aba50568642aea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDZmOWFmOTVlM2VlZmRkMGUwYjQ2MDg0YWJhNTA1Njg2NDJhZWE=", "commit": {"author": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2017-01-09T02:58:06Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-01-09T02:58:06Z"}, "message": "Do not ignore space_before_bound in where clause (#1267)", "tree": {"sha": "cb2b849b0c3401508fc4ed7ab59a743474b028d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb2b849b0c3401508fc4ed7ab59a743474b028d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad46f9af95e3eefdd0e0b46084aba50568642aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad46f9af95e3eefdd0e0b46084aba50568642aea", "html_url": "https://github.com/rust-lang/rust/commit/ad46f9af95e3eefdd0e0b46084aba50568642aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad46f9af95e3eefdd0e0b46084aba50568642aea/comments", "author": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c22d85db5c25c4f8dc573cd08bd75330a564cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c22d85db5c25c4f8dc573cd08bd75330a564cdb", "html_url": "https://github.com/rust-lang/rust/commit/1c22d85db5c25c4f8dc573cd08bd75330a564cdb"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "950a63adafc0dcb3d717709a448a67df0d9a0e87", "filename": "src/types.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ad46f9af95e3eefdd0e0b46084aba50568642aea/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad46f9af95e3eefdd0e0b46084aba50568642aea/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ad46f9af95e3eefdd0e0b46084aba50568642aea", "patch": "@@ -325,6 +325,15 @@ fn format_function_type<'a, I>(inputs: I,\n     })\n }\n \n+fn type_bound_colon(context: &RewriteContext) -> &'static str {\n+    match (context.config.space_before_bound, context.config.space_after_bound_colon) {\n+        (true, true) => \" : \",\n+        (true, false) => \" :\",\n+        (false, true) => \": \",\n+        (false, false) => \":\",\n+    }\n+}\n+\n impl Rewrite for ast::WherePredicate {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         // TODO: dead spans?\n@@ -335,6 +344,8 @@ impl Rewrite for ast::WherePredicate {\n                                                                            .. }) => {\n                 let type_str = try_opt!(bounded_ty.rewrite(context, width, offset));\n \n+                let colon = type_bound_colon(context);\n+\n                 if !bound_lifetimes.is_empty() {\n                     let lifetime_str: String = try_opt!(bound_lifetimes.iter()\n                                                                .map(|lt| {\n@@ -345,8 +356,8 @@ impl Rewrite for ast::WherePredicate {\n                                                                .intersperse(Some(\", \".to_string()))\n                                                                .collect());\n \n-                    // 8 = \"for<> : \".len()\n-                    let used_width = lifetime_str.len() + type_str.len() + 8;\n+                    // 6 = \"for<> \".len()\n+                    let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n                     let budget = try_opt!(width.checked_sub(used_width));\n                     let bounds_str: String = try_opt!(bounds.iter()\n                                                     .map(|ty_bound| {\n@@ -358,13 +369,12 @@ impl Rewrite for ast::WherePredicate {\n                                                     .collect());\n \n                     if context.config.spaces_within_angle_brackets && lifetime_str.len() > 0 {\n-                        format!(\"for< {} > {}: {}\", lifetime_str, type_str, bounds_str)\n+                        format!(\"for< {} > {}{}{}\", lifetime_str, type_str, colon, bounds_str)\n                     } else {\n-                        format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n+                        format!(\"for<{}> {}{}{}\", lifetime_str, type_str, colon, bounds_str)\n                     }\n                 } else {\n-                    // 2 = \": \".len()\n-                    let used_width = type_str.len() + 2;\n+                    let used_width = type_str.len() + colon.len();\n                     let budget = try_opt!(width.checked_sub(used_width));\n                     let bounds_str: String = try_opt!(bounds.iter()\n                                                     .map(|ty_bound| {\n@@ -375,7 +385,7 @@ impl Rewrite for ast::WherePredicate {\n                                                     .intersperse(Some(\" + \".to_string()))\n                                                     .collect());\n \n-                    format!(\"{}: {}\", type_str, bounds_str)\n+                    format!(\"{}{}{}\", type_str, colon, bounds_str)\n                 }\n             }\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate { ref lifetime,\n@@ -420,21 +430,8 @@ fn rewrite_bounded_lifetime<'b, I>(lt: &ast::Lifetime,\n         let appendix: Vec<_> = try_opt!(bounds.into_iter()\n             .map(|b| b.rewrite(context, width, offset))\n             .collect());\n-        let bound_spacing_before = if context.config.space_before_bound {\n-            \" \"\n-        } else {\n-            \"\"\n-        };\n-        let bound_spacing_after = if context.config.space_after_bound_colon {\n-            \" \"\n-        } else {\n-            \"\"\n-        };\n-        let result = format!(\"{}{}:{}{}\",\n-                             result,\n-                             bound_spacing_before,\n-                             bound_spacing_after,\n-                             appendix.join(\" + \"));\n+        let colon = type_bound_colon(context);\n+        let result = format!(\"{}{}{}\", result, colon, appendix.join(\" + \"));\n         wrap_str(result, context.config.max_width, width, offset)\n     }\n }"}, {"sha": "2a77eb2d2f921860dd6b5188f858417a93385bff", "filename": "tests/source/space-before-bound.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad46f9af95e3eefdd0e0b46084aba50568642aea/tests%2Fsource%2Fspace-before-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad46f9af95e3eefdd0e0b46084aba50568642aea/tests%2Fsource%2Fspace-before-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspace-before-bound.rs?ref=ad46f9af95e3eefdd0e0b46084aba50568642aea", "patch": "@@ -1,4 +1,10 @@\n // rustfmt-space_before_bound: true\n \n trait Trait {}\n-fn f<'a, 'b: 'a, T: Trait>() {}\n+trait Trait2 {}\n+fn f<'a, 'b: 'a, T: Trait, U>() where U: Trait2 {}\n+\n+// should fit on the line\n+fn f2<'a, 'b: 'a, Ttttttttttttttttttttttttttttttttttttttttttttttt: Trait, U>() where U: Trait2 {}\n+// should be wrapped\n+fn f2<'a, 'b: 'a, Tttttttttttttttttttttttttttttttttttttttttttttttt: Trait, U>() where U: Trait2 {}"}, {"sha": "0a226e1d58502f6653a5617ff164aeb71944e8e2", "filename": "tests/target/space-before-bound.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad46f9af95e3eefdd0e0b46084aba50568642aea/tests%2Ftarget%2Fspace-before-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad46f9af95e3eefdd0e0b46084aba50568642aea/tests%2Ftarget%2Fspace-before-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-before-bound.rs?ref=ad46f9af95e3eefdd0e0b46084aba50568642aea", "patch": "@@ -1,4 +1,11 @@\n // rustfmt-space_before_bound: true\n \n trait Trait {}\n-fn f<'a, 'b : 'a, T : Trait>() {}\n+trait Trait2 {}\n+fn f<'a, 'b : 'a, T : Trait, U>() where U : Trait2 {}\n+\n+// should fit on the line\n+fn f2<'a, 'b : 'a, Ttttttttttttttttttttttttttttttttttttttttttttttt : Trait, U>() where U : Trait2 {}\n+// should be wrapped\n+fn f2<'a, 'b : 'a, Tttttttttttttttttttttttttttttttttttttttttttttttt : Trait, U>() where U : Trait2 {\n+}"}]}