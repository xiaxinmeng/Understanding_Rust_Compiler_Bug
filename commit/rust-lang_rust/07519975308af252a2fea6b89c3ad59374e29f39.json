{"sha": "07519975308af252a2fea6b89c3ad59374e29f39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NTE5OTc1MzA4YWYyNTJhMmZlYTZiODljM2FkNTkzNzRlMjlmMzk=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-25T13:40:06Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-03T10:41:55Z"}, "message": "Rename `as_bound_var` to `assert_bound_var`", "tree": {"sha": "6972040f4ce992e1da0c5f5e914430eeb5950c88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6972040f4ce992e1da0c5f5e914430eeb5950c88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07519975308af252a2fea6b89c3ad59374e29f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07519975308af252a2fea6b89c3ad59374e29f39", "html_url": "https://github.com/rust-lang/rust/commit/07519975308af252a2fea6b89c3ad59374e29f39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07519975308af252a2fea6b89c3ad59374e29f39/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8196b9d3b2e613c3a550a30445309d5feeb764", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8196b9d3b2e613c3a550a30445309d5feeb764", "html_url": "https://github.com/rust-lang/rust/commit/af8196b9d3b2e613c3a550a30445309d5feeb764"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "5154abd6ce544f60cdaa716f9d29745571d369bf", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07519975308af252a2fea6b89c3ad59374e29f39/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07519975308af252a2fea6b89c3ad59374e29f39/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=07519975308af252a2fea6b89c3ad59374e29f39", "patch": "@@ -448,7 +448,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n                         // We only allow a `ty::INNERMOST` index in substitutions.\n                         assert_eq!(index, ty::INNERMOST);\n-                        opt_values[br.as_bound_var()] = Some(*original_value);\n+                        opt_values[br.assert_bound_var()] = Some(*original_value);\n                     }\n                 }\n             }"}, {"sha": "b8c1ed236c0ba17aededa8aff24c46641052eb22", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07519975308af252a2fea6b89c3ad59374e29f39/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07519975308af252a2fea6b89c3ad59374e29f39/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=07519975308af252a2fea6b89c3ad59374e29f39", "patch": "@@ -67,7 +67,7 @@ where\n         value.clone()\n     } else {\n         let fld_r = |br: ty::BoundRegion| {\n-            match var_values.var_values[br.as_bound_var()].unpack() {\n+            match var_values.var_values[br.assert_bound_var()].unpack() {\n                 UnpackedKind::Lifetime(l) => l,\n                 r => bug!(\"{:?} is a region but value is {:?}\", br, r),\n             }"}, {"sha": "6929cb988d0519458cbd50f02d78dada048a82f2", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07519975308af252a2fea6b89c3ad59374e29f39/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07519975308af252a2fea6b89c3ad59374e29f39/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=07519975308af252a2fea6b89c3ad59374e29f39", "patch": "@@ -82,7 +82,7 @@ impl BoundRegion {\n     /// regions with anonymous late bound regions. This method asserts that\n     /// we have an anonymous late bound region, which hence may refer to\n     /// a canonical variable.\n-    pub fn as_bound_var(&self) -> BoundVar {\n+    pub fn assert_bound_var(&self) -> BoundVar {\n         match *self {\n             BoundRegion::BrAnon(var) => BoundVar::from_u32(var),\n             _ => bug!(\"bound region is not anonymous\"),"}, {"sha": "c1aed36c92ddf3bfd60170781ea85bf88ff9bb82", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07519975308af252a2fea6b89c3ad59374e29f39/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07519975308af252a2fea6b89c3ad59374e29f39/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=07519975308af252a2fea6b89c3ad59374e29f39", "patch": "@@ -568,7 +568,7 @@ impl CanonicalUserSubsts<'tcx> {\n                     ty::ReLateBound(index, br) => {\n                         // We only allow a `ty::INNERMOST` index in substitutions.\n                         assert_eq!(*index, ty::INNERMOST);\n-                        cvar == br.as_bound_var()\n+                        cvar == br.assert_bound_var()\n                     }\n                     _ => false,\n                 },"}]}