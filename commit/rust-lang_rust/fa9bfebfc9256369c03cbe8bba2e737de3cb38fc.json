{"sha": "fa9bfebfc9256369c03cbe8bba2e737de3cb38fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOWJmZWJmYzkyNTYzNjljMDNjYmU4YmJhMmU3MzdkZTNjYjM4ZmM=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-02-04T21:19:05Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-02-04T21:35:43Z"}, "message": "Fix and test implementation of BTreeMap's first_entry, last_entry, pop_first, pop_last", "tree": {"sha": "8b101d58c999b4ab5fdeeb42437c46145bc30e83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b101d58c999b4ab5fdeeb42437c46145bc30e83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc", "html_url": "https://github.com/rust-lang/rust/commit/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc07615c49259b16e1d1789e23050e71b744c652", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc07615c49259b16e1d1789e23050e71b744c652", "html_url": "https://github.com/rust-lang/rust/commit/fc07615c49259b16e1d1789e23050e71b744c652"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "c1778f2065d408a8f0dc7ea321fca9abb50953fa", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=fa9bfebfc9256369c03cbe8bba2e737de3cb38fc", "patch": "@@ -675,13 +675,15 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         T: Ord,\n         K: Borrow<T>,\n     {\n-        match self.length {\n-            0 => None,\n-            _ => Some(OccupiedEntry {\n-                handle: self.root.as_mut().first_kv(),\n+        let front = self.root.as_mut().first_leaf_edge();\n+        if let Ok(kv) = front.right_kv() {\n+            Some(OccupiedEntry {\n+                handle: kv.forget_node_type(),\n                 length: &mut self.length,\n                 _marker: PhantomData,\n-            }),\n+            })\n+        } else {\n+            None\n         }\n     }\n \n@@ -736,13 +738,15 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         T: Ord,\n         K: Borrow<T>,\n     {\n-        match self.length {\n-            0 => None,\n-            _ => Some(OccupiedEntry {\n-                handle: self.root.as_mut().last_kv(),\n+        let back = self.root.as_mut().last_leaf_edge();\n+        if let Ok(kv) = back.left_kv() {\n+            Some(OccupiedEntry {\n+                handle: kv.forget_node_type(),\n                 length: &mut self.length,\n                 _marker: PhantomData,\n-            }),\n+            })\n+        } else {\n+            None\n         }\n     }\n "}, {"sha": "0a26d7bf427ab019eb11850d76722493d225ed47", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=fa9bfebfc9256369c03cbe8bba2e737de3cb38fc", "patch": "@@ -23,6 +23,11 @@ fn test_basic_large() {\n         assert_eq!(map.len(), i + 1);\n     }\n \n+    assert_eq!(map.first_key_value(), Some((&0, &0)));\n+    assert_eq!(map.last_key_value(), Some((&(size - 1), &(10 * (size - 1)))));\n+    assert_eq!(map.first_entry().unwrap().key(), &0);\n+    assert_eq!(map.last_entry().unwrap().key(), &(size - 1));\n+\n     for i in 0..size {\n         assert_eq!(map.get(&i).unwrap(), &(i * 10));\n     }"}, {"sha": "1a2b62d026b2ec969a38ef9186e9eff027a26eeb", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=fa9bfebfc9256369c03cbe8bba2e737de3cb38fc", "patch": "@@ -487,21 +487,26 @@ fn test_first_last() {\n     a.insert(2);\n     assert_eq!(a.first(), Some(&1));\n     assert_eq!(a.last(), Some(&2));\n-    a.insert(3);\n+    for i in 3..=12 {\n+        a.insert(i);\n+    }\n     assert_eq!(a.first(), Some(&1));\n-    assert_eq!(a.last(), Some(&3));\n-\n-    assert_eq!(a.len(), 3);\n+    assert_eq!(a.last(), Some(&12));\n     assert_eq!(a.pop_first(), Some(1));\n-    assert_eq!(a.len(), 2);\n-    assert_eq!(a.pop_last(), Some(3));\n-    assert_eq!(a.len(), 1);\n+    assert_eq!(a.pop_last(), Some(12));\n     assert_eq!(a.pop_first(), Some(2));\n-    assert_eq!(a.len(), 0);\n-    assert_eq!(a.pop_last(), None);\n-    assert_eq!(a.len(), 0);\n+    assert_eq!(a.pop_last(), Some(11));\n+    assert_eq!(a.pop_first(), Some(3));\n+    assert_eq!(a.pop_last(), Some(10));\n+    assert_eq!(a.pop_first(), Some(4));\n+    assert_eq!(a.pop_first(), Some(5));\n+    assert_eq!(a.pop_first(), Some(6));\n+    assert_eq!(a.pop_first(), Some(7));\n+    assert_eq!(a.pop_first(), Some(8));\n+    assert_eq!(a.clone().pop_last(), Some(9));\n+    assert_eq!(a.pop_first(), Some(9));\n     assert_eq!(a.pop_first(), None);\n-    assert_eq!(a.len(), 0);\n+    assert_eq!(a.pop_last(), None);\n }\n \n fn rand_data(len: usize) -> Vec<u32> {"}]}