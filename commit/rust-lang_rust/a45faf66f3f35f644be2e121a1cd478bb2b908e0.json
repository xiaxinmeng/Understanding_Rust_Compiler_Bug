{"sha": "a45faf66f3f35f644be2e121a1cd478bb2b908e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NWZhZjY2ZjNmMzVmNjQ0YmUyZTEyMWExY2Q0NzhiYjJiOTA4ZTA=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-09T21:25:39Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-10T21:59:59Z"}, "message": "Deprecate filter_map", "tree": {"sha": "d300e45ac86f0f49eb4d33dc178cc3a661e01f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d300e45ac86f0f49eb4d33dc178cc3a661e01f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a45faf66f3f35f644be2e121a1cd478bb2b908e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a45faf66f3f35f644be2e121a1cd478bb2b908e0", "html_url": "https://github.com/rust-lang/rust/commit/a45faf66f3f35f644be2e121a1cd478bb2b908e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a45faf66f3f35f644be2e121a1cd478bb2b908e0/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75efc144e7e5ab30e634a1d616caf5bfdea51f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75efc144e7e5ab30e634a1d616caf5bfdea51f4a", "html_url": "https://github.com/rust-lang/rust/commit/75efc144e7e5ab30e634a1d616caf5bfdea51f4a"}], "stats": {"total": 184, "additions": 23, "deletions": 161}, "files": [{"sha": "6f61229e133d1b109c3f82c1db1fb23c3c690a1d", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a45faf66f3f35f644be2e121a1cd478bb2b908e0/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45faf66f3f35f644be2e121a1cd478bb2b908e0/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=a45faf66f3f35f644be2e121a1cd478bb2b908e0", "patch": "@@ -188,3 +188,12 @@ declare_deprecated_lint! {\n     pub FIND_MAP,\n     \"this lint has been replaced by `manual_find_map`, a more specific lint\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been replaced by `manual_filter_map`, a\n+    /// more specific lint.\n+    pub FILTER_MAP,\n+    \"this lint has been replaced by `manual_filter_map`, a more specific lint\"\n+}"}, {"sha": "03454271da5933a7070d2e1afe1372a6b62def06", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a45faf66f3f35f644be2e121a1cd478bb2b908e0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45faf66f3f35f644be2e121a1cd478bb2b908e0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a45faf66f3f35f644be2e121a1cd478bb2b908e0", "patch": "@@ -537,6 +537,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::find_map\",\n         \"this lint has been replaced by `manual_find_map`, a more specific lint\",\n     );\n+    store.register_removed(\n+        \"clippy::filter_map\",\n+        \"this lint has been replaced by `manual_filter_map`, a more specific lint\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -788,7 +792,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::EXPECT_FUN_CALL,\n         methods::EXPECT_USED,\n         methods::FILETYPE_IS_FILE,\n-        methods::FILTER_MAP,\n         methods::FILTER_MAP_IDENTITY,\n         methods::FILTER_MAP_NEXT,\n         methods::FILTER_NEXT,\n@@ -1404,7 +1407,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n         LintId::of(matches::MATCH_WILD_ERR_ARM),\n         LintId::of(matches::SINGLE_MATCH_ELSE),\n-        LintId::of(methods::FILTER_MAP),\n         LintId::of(methods::FILTER_MAP_NEXT),\n         LintId::of(methods::IMPLICIT_CLONE),\n         LintId::of(methods::INEFFICIENT_TO_STRING),"}, {"sha": "1588eec88824bfdfc97ebee00565fe846a81f179", "filename": "clippy_lints/src/methods/filter_flat_map.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs?ref=75efc144e7e5ab30e634a1d616caf5bfdea51f4a", "patch": "@@ -1,18 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_trait_method;\n-use rustc_hir as hir;\n-use rustc_lint::LateContext;\n-use rustc_span::sym;\n-\n-use super::FILTER_MAP;\n-\n-/// lint use of `filter().flat_map()` for `Iterators`\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-    // lint if caller of `.filter().flat_map()` is an Iterator\n-    if is_trait_method(cx, expr, sym::Iterator) {\n-        let msg = \"called `filter(..).flat_map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n-                    and filtering by returning `iter::empty()`\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n-    }\n-}"}, {"sha": "741b1e7e361255c09560bbdadd26ca46e32963b7", "filename": "clippy_lints/src/methods/filter_map_flat_map.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_flat_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_flat_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_flat_map.rs?ref=75efc144e7e5ab30e634a1d616caf5bfdea51f4a", "patch": "@@ -1,18 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_trait_method;\n-use rustc_hir as hir;\n-use rustc_lint::LateContext;\n-use rustc_span::sym;\n-\n-use super::FILTER_MAP;\n-\n-/// lint use of `filter_map().flat_map()` for `Iterators`\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-    // lint if caller of `.filter_map().flat_map()` is an Iterator\n-    if is_trait_method(cx, expr, sym::Iterator) {\n-        let msg = \"called `filter_map(..).flat_map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n-                    and filtering by returning `iter::empty()`\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n-    }\n-}"}, {"sha": "713bbf258370d9ac08b1cf67d288e173abe4dd14", "filename": "clippy_lints/src/methods/filter_map_map.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_map.rs?ref=75efc144e7e5ab30e634a1d616caf5bfdea51f4a", "patch": "@@ -1,17 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_trait_method;\n-use rustc_hir as hir;\n-use rustc_lint::LateContext;\n-use rustc_span::sym;\n-\n-use super::FILTER_MAP;\n-\n-/// lint use of `filter_map().map()` for `Iterators`\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-    // lint if caller of `.filter_map().map()` is an Iterator\n-    if is_trait_method(cx, expr, sym::Iterator) {\n-        let msg = \"called `filter_map(..).map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n-    }\n-}"}, {"sha": "fc18849b07c750aa41a52e90c20c9db6d81c5b30", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a45faf66f3f35f644be2e121a1cd478bb2b908e0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45faf66f3f35f644be2e121a1cd478bb2b908e0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a45faf66f3f35f644be2e121a1cd478bb2b908e0", "patch": "@@ -11,11 +11,8 @@ mod clone_on_ref_ptr;\n mod expect_fun_call;\n mod expect_used;\n mod filetype_is_file;\n-mod filter_flat_map;\n mod filter_map;\n-mod filter_map_flat_map;\n mod filter_map_identity;\n-mod filter_map_map;\n mod filter_map_next;\n mod filter_next;\n mod flat_map_identity;\n@@ -472,35 +469,6 @@ declare_clippy_lint! {\n     \"using combinations of `flatten` and `map` which can usually be written as a single method call\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.filter(_).map(_)`,\n-    /// `_.filter(_).flat_map(_)`, `_.filter_map(_).flat_map(_)` and similar.\n-    ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.filter_map(_)`.\n-    ///\n-    /// **Known problems:** Often requires a condition + Option/Iterator creation\n-    /// inside the closure.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// let vec = vec![1];\n-    ///\n-    /// // Bad\n-    /// vec.iter().filter(|x| **x == 0).map(|x| *x * 2);\n-    ///\n-    /// // Good\n-    /// vec.iter().filter_map(|x| if *x == 0 {\n-    ///     Some(*x * 2)\n-    /// } else {\n-    ///     None\n-    /// });\n-    /// ```\n-    pub FILTER_MAP,\n-    pedantic,\n-    \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.filter(_).map(_)` that can be written more simply\n     /// as `filter_map(_)`.\n@@ -1677,7 +1645,6 @@ impl_lint_pass!(Methods => [\n     SEARCH_IS_SOME,\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n-    FILTER_MAP,\n     FILTER_MAP_IDENTITY,\n     MANUAL_FILTER_MAP,\n     MANUAL_FIND_MAP,\n@@ -1965,11 +1932,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 unnecessary_filter_map::check(cx, expr, arg);\n                 filter_map_identity::check(cx, expr, arg, span);\n             },\n-            (\"flat_map\", [flm_arg]) => match method_call!(recv) {\n-                Some((\"filter\", [_, _], _)) => filter_flat_map::check(cx, expr),\n-                Some((\"filter_map\", [_, _], _)) => filter_map_flat_map::check(cx, expr),\n-                _ => flat_map_identity::check(cx, expr, flm_arg, span),\n-            },\n+            (\"flat_map\", [flm_arg]) => flat_map_identity::check(cx, expr, flm_arg, span),\n             (\"flatten\", []) => {\n                 if let Some((\"map\", [recv, map_arg], _)) = method_call!(recv) {\n                     map_flatten::check(cx, expr, recv, map_arg);\n@@ -1993,7 +1956,6 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                         (\"filter\", [f_arg]) => {\n                             filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, false)\n                         },\n-                        (\"filter_map\", [_]) => filter_map_map::check(cx, expr),\n                         (\"find\", [f_arg]) => filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, true),\n                         _ => {},\n                     }"}, {"sha": "5e44c7b3ee094048706f38e1f54b9698c14e40cb", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a45faf66f3f35f644be2e121a1cd478bb2b908e0/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45faf66f3f35f644be2e121a1cd478bb2b908e0/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=a45faf66f3f35f644be2e121a1cd478bb2b908e0", "patch": "@@ -151,7 +151,6 @@ pub fn is_proc_macro(sess: &Session, attrs: &[ast::Attribute]) -> bool {\n \n /// Return true if the attributes contain `#[doc(hidden)]`\n pub fn is_doc_hidden(attrs: &[ast::Attribute]) -> bool {\n-    #[allow(clippy::filter_map)]\n     attrs\n         .iter()\n         .filter(|attr| attr.has_name(sym::doc))"}, {"sha": "bfb0c3b3f74ec9b4baef4c517018f77b4d277ecf", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a45faf66f3f35f644be2e121a1cd478bb2b908e0/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45faf66f3f35f644be2e121a1cd478bb2b908e0/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=a45faf66f3f35f644be2e121a1cd478bb2b908e0", "patch": "@@ -5,7 +5,7 @@\n // When a new lint is introduced, we can search the results for new warnings and check for false\n // positives.\n \n-#![allow(clippy::filter_map, clippy::collapsible_else_if)]\n+#![allow(clippy::collapsible_else_if)]\n \n use std::ffi::OsStr;\n use std::process::Command;"}, {"sha": "dbf0b03af769ccc5ec9b36c18a27bf5e174573cb", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a45faf66f3f35f644be2e121a1cd478bb2b908e0/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45faf66f3f35f644be2e121a1cd478bb2b908e0/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=a45faf66f3f35f644be2e121a1cd478bb2b908e0", "patch": "@@ -11,5 +11,6 @@\n #[warn(clippy::panic_params)]\n #[warn(clippy::unknown_clippy_lints)]\n #[warn(clippy::find_map)]\n+#[warn(clippy::filter_map)]\n \n fn main() {}"}, {"sha": "aa3ed28d40b8c65fb04734e7cdd9a576e67155d6", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a45faf66f3f35f644be2e121a1cd478bb2b908e0/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a45faf66f3f35f644be2e121a1cd478bb2b908e0/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=a45faf66f3f35f644be2e121a1cd478bb2b908e0", "patch": "@@ -78,11 +78,17 @@ error: lint `clippy::find_map` has been removed: this lint has been replaced by\n LL | #[warn(clippy::find_map)]\n    |        ^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::filter_map` has been removed: this lint has been replaced by `manual_filter_map`, a more specific lint\n+  --> $DIR/deprecated.rs:14:8\n+   |\n+LL | #[warn(clippy::filter_map)]\n+   |        ^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "514502416192640890c0c436981abcdb800f4d5e", "filename": "tests/ui/filter_methods.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/tests%2Fui%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/tests%2Fui%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.rs?ref=75efc144e7e5ab30e634a1d616caf5bfdea51f4a", "patch": "@@ -1,25 +0,0 @@\n-#![warn(clippy::all, clippy::pedantic)]\n-#![allow(clippy::clippy::let_underscore_drop)]\n-#![allow(clippy::missing_docs_in_private_items)]\n-\n-fn main() {\n-    let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n-\n-    let _: Vec<_> = vec![5_i8; 6]\n-        .into_iter()\n-        .filter(|&x| x == 0)\n-        .flat_map(|x| x.checked_mul(2))\n-        .collect();\n-\n-    let _: Vec<_> = vec![5_i8; 6]\n-        .into_iter()\n-        .filter_map(|x| x.checked_mul(2))\n-        .flat_map(|x| x.checked_mul(2))\n-        .collect();\n-\n-    let _: Vec<_> = vec![5_i8; 6]\n-        .into_iter()\n-        .filter_map(|x| x.checked_mul(2))\n-        .map(|x| x.checked_mul(2))\n-        .collect();\n-}"}, {"sha": "c7b4f28be3a4454f5a01293c6bf0ba8d7b5a02ba", "filename": "tests/ui/filter_methods.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75efc144e7e5ab30e634a1d616caf5bfdea51f4a/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=75efc144e7e5ab30e634a1d616caf5bfdea51f4a", "patch": "@@ -1,39 +0,0 @@\n-error: called `filter(..).flat_map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:8:21\n-   |\n-LL |       let _: Vec<_> = vec![5_i8; 6]\n-   |  _____________________^\n-LL | |         .into_iter()\n-LL | |         .filter(|&x| x == 0)\n-LL | |         .flat_map(|x| x.checked_mul(2))\n-   | |_______________________________________^\n-   |\n-   = note: `-D clippy::filter-map` implied by `-D warnings`\n-   = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n-\n-error: called `filter_map(..).flat_map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:14:21\n-   |\n-LL |       let _: Vec<_> = vec![5_i8; 6]\n-   |  _____________________^\n-LL | |         .into_iter()\n-LL | |         .filter_map(|x| x.checked_mul(2))\n-LL | |         .flat_map(|x| x.checked_mul(2))\n-   | |_______________________________________^\n-   |\n-   = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n-\n-error: called `filter_map(..).map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:20:21\n-   |\n-LL |       let _: Vec<_> = vec![5_i8; 6]\n-   |  _____________________^\n-LL | |         .into_iter()\n-LL | |         .filter_map(|x| x.checked_mul(2))\n-LL | |         .map(|x| x.checked_mul(2))\n-   | |__________________________________^\n-   |\n-   = help: this is more succinctly expressed by only calling `.filter_map(..)` instead\n-\n-error: aborting due to 3 previous errors\n-"}]}