{"sha": "3d92100955ccca02dea7d775c91a954958582c74", "node_id": "C_kwDOAAsO6NoAKDNkOTIxMDA5NTVjY2NhMDJkZWE3ZDc3NWM5MWE5NTQ5NTg1ODJjNzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-02T16:14:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-02T16:14:08Z"}, "message": "Rollup merge of #107559 - WaffleLapkin:is_it_2015\u00bf, r=davidtwco\n\nRename `rust_2015` \u2192 `is_rust_2015`\n\nr? ```@compiler-errors```\nhttps://github.com/rust-lang/rust/pull/107508#discussion_r1092300088", "tree": {"sha": "858d504b3603d5913ff828b5009cdbf31a3fd585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/858d504b3603d5913ff828b5009cdbf31a3fd585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d92100955ccca02dea7d775c91a954958582c74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj2+FQCRBK7hj4Ov3rIwAAVlIIALDtJbkUdj58bfr82a5PsUdU\ndNkMg6Gwpv5XHNb5hPp0JMhpca9LXKvU2NocTtt4cOACNmnVlOtRl6CBpF71bw43\nJ1Rpw5z0PRBCLhXp705B0obCFJniJbQeYb8zwYUvaE0UUOmC/ZdxfZG6ySdZvsmR\noXwswB4bOV2fdYINKz1/TtQIHF+DZMJW37DICCqu2KBREKcESVSj/IaGmCOhEAUx\nSQoLoG/l1M+z/tiOoBQrodCcOxmYmtZyePgX1EKvQ3EFBZ6lo/v0+Pu/PAIYAAfZ\nbqP8Om/hgwlv9DFXfPiOtj47irdCpdQBgm4lJ0ULHPM30UqA02Wa8PY7mmBkY+Y=\n=ZzVf\n-----END PGP SIGNATURE-----\n", "payload": "tree 858d504b3603d5913ff828b5009cdbf31a3fd585\nparent 3e0995a440e66c01383d78c6adcb1cd9c1ae3a46\nparent a7f97a7689197e5d87fd26390cfdb387185a7376\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675354448 +0100\ncommitter GitHub <noreply@github.com> 1675354448 +0100\n\nRollup merge of #107559 - WaffleLapkin:is_it_2015\u00bf, r=davidtwco\n\nRename `rust_2015` \u2192 `is_rust_2015`\n\nr? ```@compiler-errors```\nhttps://github.com/rust-lang/rust/pull/107508#discussion_r1092300088\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d92100955ccca02dea7d775c91a954958582c74", "html_url": "https://github.com/rust-lang/rust/commit/3d92100955ccca02dea7d775c91a954958582c74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d92100955ccca02dea7d775c91a954958582c74/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e0995a440e66c01383d78c6adcb1cd9c1ae3a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0995a440e66c01383d78c6adcb1cd9c1ae3a46", "html_url": "https://github.com/rust-lang/rust/commit/3e0995a440e66c01383d78c6adcb1cd9c1ae3a46"}, {"sha": "a7f97a7689197e5d87fd26390cfdb387185a7376", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f97a7689197e5d87fd26390cfdb387185a7376", "html_url": "https://github.com/rust-lang/rust/commit/a7f97a7689197e5d87fd26390cfdb387185a7376"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "d7767efa9841bc65383b76767c821ddae74379d0", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -131,7 +131,7 @@ pub fn print_crate<'a>(\n \n         // Currently, in Rust 2018 we don't have `extern crate std;` at the crate\n         // root, so this is not needed, and actually breaks things.\n-        if edition.rust_2015() {\n+        if edition.is_rust_2015() {\n             // `#![no_std]`\n             let fake_attr = attr::mk_attr_word(g, ast::AttrStyle::Inner, sym::no_std, DUMMY_SP);\n             s.print_attribute(&fake_attr);"}, {"sha": "628e9d88cf1df27451b7811dc010fc9b08ed5cdd", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -2247,7 +2247,7 @@ impl<'a> Parser<'a> {\n         let ext = self.parse_extern(case);\n \n         if let Async::Yes { span, .. } = asyncness {\n-            if span.rust_2015() {\n+            if span.is_rust_2015() {\n                 self.sess.emit_err(AsyncFnIn2015 { span, help: HelpUseLatestEdition::new() });\n             }\n         }"}, {"sha": "a19ea04fa5e75e47128fa769952be3b6083a68c6", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -614,7 +614,7 @@ impl<'a> Parser<'a> {\n     /// Is a `dyn B0 + ... + Bn` type allowed here?\n     fn is_explicit_dyn_type(&mut self) -> bool {\n         self.check_keyword(kw::Dyn)\n-            && (!self.token.uninterpolated_span().rust_2015()\n+            && (self.token.uninterpolated_span().rust_2018()\n                 || self.look_ahead(1, |t| {\n                     (t.can_begin_bound() || t.kind == TokenKind::BinOp(token::Star))\n                         && !can_continue_type_after_non_fn_ident(t)"}, {"sha": "2fb62ce53ba6e357b0f4be8d04eef0fa949b949d", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -265,7 +265,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 let ident = path.segments.get(0).expect(\"empty path in visibility\").ident;\n                 let crate_root = if ident.is_path_segment_keyword() {\n                     None\n-                } else if ident.span.rust_2015() {\n+                } else if ident.span.is_rust_2015() {\n                     Some(Segment::from_ident(Ident::new(\n                         kw::PathRoot,\n                         path.span.shrink_to_lo().with_ctxt(ident.span.ctxt()),\n@@ -435,10 +435,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // appears, so imports in braced groups can have roots prepended independently.\n         let is_glob = matches!(use_tree.kind, ast::UseTreeKind::Glob);\n         let crate_root = match prefix_iter.peek() {\n-            Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.rust_2015() => {\n+            Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.is_rust_2015() => {\n                 Some(seg.ident.span.ctxt())\n             }\n-            None if is_glob && use_tree.span.rust_2015() => Some(use_tree.span.ctxt()),\n+            None if is_glob && use_tree.span.is_rust_2015() => Some(use_tree.span.ctxt()),\n             _ => None,\n         }\n         .map(|ctxt| {"}, {"sha": "a08ae0f184bb2f62cb7400353a063e6e417ed998", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -462,7 +462,9 @@ impl<'a> Resolver<'a> {\n \n         let first_name = match path.get(0) {\n             // In the 2018 edition this lint is a hard error, so nothing to do\n-            Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,\n+            Some(seg) if seg.ident.span.is_rust_2015() && self.session.is_rust_2015() => {\n+                seg.ident.name\n+            }\n             _ => return,\n         };\n \n@@ -1717,7 +1719,7 @@ impl<'a> Resolver<'a> {\n                         Applicability::MaybeIncorrect,\n                     )),\n                 )\n-            } else if self.session.rust_2015() {\n+            } else if self.session.is_rust_2015() {\n                 (\n                     format!(\"maybe a missing crate `{ident}`?\"),\n                     Some((\n@@ -1996,7 +1998,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n     ) -> Option<(Vec<Segment>, Option<String>)> {\n-        if path[1].ident.span.rust_2015() {\n+        if path[1].ident.span.is_rust_2015() {\n             return None;\n         }\n "}, {"sha": "d03ccf256fad79f2ddc6a1d48e002e821a67e7fe", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -85,7 +85,7 @@ impl<'a> Resolver<'a> {\n         // 4c. Standard library prelude (de-facto closed, controlled).\n         // 6. Language prelude: builtin attributes (closed, controlled).\n \n-        let rust_2015 = ctxt.edition().rust_2015();\n+        let rust_2015 = ctxt.edition().is_rust_2015();\n         let (ns, macro_kind, is_absolute_path) = match scope_set {\n             ScopeSet::All(ns, _) => (ns, None, false),\n             ScopeSet::AbsolutePath(ns) => (ns, None, true),\n@@ -1397,7 +1397,8 @@ impl<'a> Resolver<'a> {\n                         module = Some(ModuleOrUniformRoot::ExternPrelude);\n                         continue;\n                     }\n-                    if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {\n+                    if name == kw::PathRoot && ident.span.is_rust_2015() && self.session.rust_2018()\n+                    {\n                         // `::a::b` from 2015 macro on 2018 global edition\n                         module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);\n                         continue;"}, {"sha": "3ca10ac50baa6392ed0fcf47f46de5ad34b9871e", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -2145,7 +2145,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         let segments = &use_tree.prefix.segments;\n         if !segments.is_empty() {\n             let ident = segments[0].ident;\n-            if ident.is_path_segment_keyword() || ident.span.rust_2015() {\n+            if ident.is_path_segment_keyword() || ident.span.is_rust_2015() {\n                 return;\n             }\n "}, {"sha": "cee0a7f3c203d8e4eeb871f99f978ccfac100839", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -1343,7 +1343,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     \"!\",\n                     Applicability::MaybeIncorrect,\n                 );\n-                if path_str == \"try\" && span.rust_2015() {\n+                if path_str == \"try\" && span.is_rust_2015() {\n                     err.note(\"if you want the `try` keyword, you need Rust 2018 or later\");\n                 }\n             }"}, {"sha": "dbd419c1406f867c09644875e70b9231e8b355fd", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -919,8 +919,8 @@ impl Session {\n     }\n \n     /// Is this edition 2015?\n-    pub fn rust_2015(&self) -> bool {\n-        self.edition().rust_2015()\n+    pub fn is_rust_2015(&self) -> bool {\n+        self.edition().is_rust_2015()\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?"}, {"sha": "f16db69aae2323d6efef2998b64dc43ee307837a", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -77,7 +77,7 @@ impl Edition {\n     }\n \n     /// Is this edition 2015?\n-    pub fn rust_2015(self) -> bool {\n+    pub fn is_rust_2015(self) -> bool {\n         self == Edition::Edition2015\n     }\n "}, {"sha": "e095cf3fda20d53cef6edd184b5c29d998d74b99", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d92100955ccca02dea7d775c91a954958582c74/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=3d92100955ccca02dea7d775c91a954958582c74", "patch": "@@ -705,8 +705,8 @@ impl Span {\n     }\n \n     #[inline]\n-    pub fn rust_2015(self) -> bool {\n-        self.edition().rust_2015()\n+    pub fn is_rust_2015(self) -> bool {\n+        self.edition().is_rust_2015()\n     }\n \n     #[inline]"}]}