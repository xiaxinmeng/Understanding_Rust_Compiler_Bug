{"sha": "e55f73ae47dd3b508edaf8403ca26ca9dbb1097e", "node_id": "C_kwDOAAsO6NoAKGU1NWY3M2FlNDdkZDNiNTA4ZWRhZjg0MDNjYTI2Y2E5ZGJiMTA5N2U", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-09T21:53:18Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-23T18:51:30Z"}, "message": "Refine error spans for const args in hir typeck", "tree": {"sha": "7b1869fc623f8e3b4b460d50081952c8cc38e946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b1869fc623f8e3b4b460d50081952c8cc38e946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e", "html_url": "https://github.com/rust-lang/rust/commit/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7fd9995f10627f25ccb325f693a11b3395a73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7fd9995f10627f25ccb325f693a11b3395a73c", "html_url": "https://github.com/rust-lang/rust/commit/df7fd9995f10627f25ccb325f693a11b3395a73c"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "e0ddb90c33b990f0e075f24b71cfaa56830d649d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=e55f73ae47dd3b508edaf8403ca26ca9dbb1097e", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use rustc_span::{self, Span};\n+use rustc_span::{self, symbol::kw, Span};\n use rustc_trait_selection::traits;\n \n use std::ops::ControlFlow;\n@@ -25,17 +25,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let generics = self.tcx.generics_of(def_id);\n         let predicate_substs = match unsubstituted_pred.kind().skip_binder() {\n-            ty::PredicateKind::Clause(ty::Clause::Trait(pred)) => pred.trait_ref.substs,\n-            ty::PredicateKind::Clause(ty::Clause::Projection(pred)) => pred.projection_ty.substs,\n-            _ => ty::List::empty(),\n+            ty::PredicateKind::Clause(ty::Clause::Trait(pred)) => pred.trait_ref.substs.to_vec(),\n+            ty::PredicateKind::Clause(ty::Clause::Projection(pred)) => {\n+                pred.projection_ty.substs.to_vec()\n+            }\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(arg, ty)) => {\n+                vec![ty.into(), arg.into()]\n+            }\n+            ty::PredicateKind::ConstEvaluatable(e) => vec![e.into()],\n+            _ => return false,\n         };\n \n-        let find_param_matching = |matches: &dyn Fn(&ty::ParamTy) -> bool| {\n-            predicate_substs.types().find_map(|ty| {\n-                ty.walk().find_map(|arg| {\n+        let find_param_matching = |matches: &dyn Fn(ty::ParamTerm) -> bool| {\n+            predicate_substs.iter().find_map(|arg| {\n+                arg.walk().find_map(|arg| {\n                     if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                        && let ty::Param(param_ty) = ty.kind()\n-                        && matches(param_ty)\n+                        && let ty::Param(param_ty) = *ty.kind()\n+                        && matches(ty::ParamTerm::Ty(param_ty))\n+                    {\n+                        Some(arg)\n+                    } else if let ty::GenericArgKind::Const(ct) = arg.unpack()\n+                        && let ty::ConstKind::Param(param_ct) = ct.kind()\n+                        && matches(ty::ParamTerm::Const(param_ct))\n                     {\n                         Some(arg)\n                     } else {\n@@ -47,21 +58,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Prefer generics that are local to the fn item, since these are likely\n         // to be the cause of the unsatisfied predicate.\n-        let mut param_to_point_at = find_param_matching(&|param_ty| {\n-            self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) == def_id\n+        let mut param_to_point_at = find_param_matching(&|param_term| {\n+            self.tcx.parent(generics.param_at(param_term.index(), self.tcx).def_id) == def_id\n         });\n         // Fall back to generic that isn't local to the fn item. This will come\n         // from a trait or impl, for example.\n-        let mut fallback_param_to_point_at = find_param_matching(&|param_ty| {\n-            self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) != def_id\n-                && param_ty.name != rustc_span::symbol::kw::SelfUpper\n+        let mut fallback_param_to_point_at = find_param_matching(&|param_term| {\n+            self.tcx.parent(generics.param_at(param_term.index(), self.tcx).def_id) != def_id\n+                && !matches!(param_term, ty::ParamTerm::Ty(ty) if ty.name == kw::SelfUpper)\n         });\n         // Finally, the `Self` parameter is possibly the reason that the predicate\n         // is unsatisfied. This is less likely to be true for methods, because\n         // method probe means that we already kinda check that the predicates due\n         // to the `Self` type are true.\n-        let mut self_param_to_point_at =\n-            find_param_matching(&|param_ty| param_ty.name == rustc_span::symbol::kw::SelfUpper);\n+        let mut self_param_to_point_at = find_param_matching(\n+            &|param_term| matches!(param_term, ty::ParamTerm::Ty(ty) if ty.name == kw::SelfUpper),\n+        );\n \n         // Finally, for ambiguity-related errors, we actually want to look\n         // for a parameter that is the source of the inference type left\n@@ -225,14 +237,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .own_substs(ty::InternalSubsts::identity_for_item(self.tcx, def_id));\n         let Some((index, _)) = own_substs\n             .iter()\n-            .filter(|arg| matches!(arg.unpack(), ty::GenericArgKind::Type(_)))\n             .enumerate()\n             .find(|(_, arg)| **arg == param_to_point_at) else { return false };\n         let Some(arg) = segment\n             .args()\n             .args\n             .iter()\n-            .filter(|arg| matches!(arg, hir::GenericArg::Type(_)))\n             .nth(index) else { return false; };\n         error.obligation.cause.span = arg\n             .span()"}, {"sha": "e3cd5cca785aacf4bc6a1adf8b1db48f1b492df4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e55f73ae47dd3b508edaf8403ca26ca9dbb1097e", "patch": "@@ -1051,6 +1051,21 @@ impl<'tcx> TermKind<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum ParamTerm {\n+    Ty(ParamTy),\n+    Const(ParamConst),\n+}\n+\n+impl ParamTerm {\n+    pub fn index(self) -> usize {\n+        match self {\n+            ParamTerm::Ty(ty) => ty.index as usize,\n+            ParamTerm::Const(ct) => ct.index as usize,\n+        }\n+    }\n+}\n+\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///"}, {"sha": "6b3396a25cf97d6ce679d99b110aa8e0a6bdd974", "filename": "tests/ui/const-generics/generic_const_exprs/cross_crate_predicate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr?ref=e55f73ae47dd3b508edaf8403ca26ca9dbb1097e", "patch": "@@ -1,8 +1,8 @@\n error: unconstrained generic constant\n-  --> $DIR/cross_crate_predicate.rs:7:13\n+  --> $DIR/cross_crate_predicate.rs:7:44\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n note: required by a bound in `test1`\n@@ -12,10 +12,10 @@ LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n error: unconstrained generic constant\n-  --> $DIR/cross_crate_predicate.rs:7:13\n+  --> $DIR/cross_crate_predicate.rs:7:44\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n note: required by a bound in `test1`"}, {"sha": "2831577b132693abb7d5489a42f43c9912ea714f", "filename": "tests/ui/const-generics/type_mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e55f73ae47dd3b508edaf8403ca26ca9dbb1097e/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=e55f73ae47dd3b508edaf8403ca26ca9dbb1097e", "patch": "@@ -1,8 +1,8 @@\n error: the constant `N` is not of type `u8`\n-  --> $DIR/type_mismatch.rs:2:5\n+  --> $DIR/type_mismatch.rs:2:11\n    |\n LL |     bar::<N>()\n-   |     ^^^^^^^^\n+   |           ^\n    |\n note: required by a bound in `bar`\n   --> $DIR/type_mismatch.rs:6:8"}]}