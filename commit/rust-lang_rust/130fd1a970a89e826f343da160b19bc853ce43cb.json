{"sha": "130fd1a970a89e826f343da160b19bc853ce43cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMGZkMWE5NzBhODllODI2ZjM0M2RhMTYwYjE5YmM4NTNjZTQzY2I=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-27T19:22:11Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-09T18:24:59Z"}, "message": "Don't remove export items so that we can run lints on them", "tree": {"sha": "4861292a17b15270b725a2aac44c3bd696d1a7f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4861292a17b15270b725a2aac44c3bd696d1a7f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/130fd1a970a89e826f343da160b19bc853ce43cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/130fd1a970a89e826f343da160b19bc853ce43cb", "html_url": "https://github.com/rust-lang/rust/commit/130fd1a970a89e826f343da160b19bc853ce43cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/130fd1a970a89e826f343da160b19bc853ce43cb/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc3d8e3fccb86d6798ce89ca9eb28679908dc526", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3d8e3fccb86d6798ce89ca9eb28679908dc526", "html_url": "https://github.com/rust-lang/rust/commit/fc3d8e3fccb86d6798ce89ca9eb28679908dc526"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "ca9d76f4cf4357e7d1f4bc53a97dae1b1021136a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/130fd1a970a89e826f343da160b19bc853ce43cb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130fd1a970a89e826f343da160b19bc853ce43cb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=130fd1a970a89e826f343da160b19bc853ce43cb", "patch": "@@ -2232,6 +2232,12 @@ impl Clean<Vec<Item>> for doctree::ExternCrate<'_> {\n \n impl Clean<Vec<Item>> for doctree::Import<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Vec<Item> {\n+        // We need this comparison because some imports (for std types for example)\n+        // are \"inserted\" as well but directly by the compiler and they should not be\n+        // taken into account.\n+        if self.span.is_dummy() {\n+            return Vec::new();\n+        }\n         // We consider inlining the documentation of `pub use` statements, but we\n         // forcefully don't inline if this is not public or if the\n         // #[doc(no_inline)] attribute is present.\n@@ -2254,11 +2260,20 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n         let inner = if self.glob {\n             if !denied {\n                 let mut visited = FxHashSet::default();\n-                if let Some(items) = inline::try_inline_glob(cx, path.res, &mut visited) {\n+                if let Some(mut items) = inline::try_inline_glob(cx, path.res, &mut visited) {\n+                    items.push(Item {\n+                        name: None,\n+                        attrs: self.attrs.clean(cx),\n+                        source: self.span.clean(cx),\n+                        def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n+                        visibility: self.vis.clean(cx),\n+                        stability: None,\n+                        deprecation: None,\n+                        inner: ImportItem(Import::Glob(resolve_use_source(cx, path))),\n+                    });\n                     return items;\n                 }\n             }\n-\n             Import::Glob(resolve_use_source(cx, path))\n         } else {\n             let name = self.name;\n@@ -2273,14 +2288,28 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             }\n             if !denied {\n                 let mut visited = FxHashSet::default();\n-                if let Some(items) = inline::try_inline(\n+\n+                if let Some(mut items) = inline::try_inline(\n                     cx,\n                     cx.tcx.parent_module(self.id).to_def_id(),\n                     path.res,\n                     name,\n                     Some(self.attrs),\n                     &mut visited,\n                 ) {\n+                    items.push(Item {\n+                        name: None,\n+                        attrs: self.attrs.clean(cx),\n+                        source: self.span.clean(cx),\n+                        def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n+                        visibility: self.vis.clean(cx),\n+                        stability: None,\n+                        deprecation: None,\n+                        inner: ImportItem(Import::Simple(\n+                            self.name.clean(cx),\n+                            resolve_use_source(cx, path),\n+                        )),\n+                    });\n                     return items;\n                 }\n             }"}]}