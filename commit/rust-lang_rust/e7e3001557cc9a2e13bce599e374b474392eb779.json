{"sha": "e7e3001557cc9a2e13bce599e374b474392eb779", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTMwMDE1NTdjYzlhMmUxM2JjZTU5OWUzNzRiNDc0MzkyZWI3Nzk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-20T17:42:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-20T17:42:25Z"}, "message": "Remove some allocations in predicate evaluation", "tree": {"sha": "254556ab1416b94c4faf66f5c35ac6ef21e01520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254556ab1416b94c4faf66f5c35ac6ef21e01520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e3001557cc9a2e13bce599e374b474392eb779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e3001557cc9a2e13bce599e374b474392eb779", "html_url": "https://github.com/rust-lang/rust/commit/e7e3001557cc9a2e13bce599e374b474392eb779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e3001557cc9a2e13bce599e374b474392eb779/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c921c2c5f8bb4d3cdc100afd6494940f08d0798", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c921c2c5f8bb4d3cdc100afd6494940f08d0798", "html_url": "https://github.com/rust-lang/rust/commit/6c921c2c5f8bb4d3cdc100afd6494940f08d0798"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "55bea57f3e24330d1af5f106954d38bee589d6ab", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e7e3001557cc9a2e13bce599e374b474392eb779/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e3001557cc9a2e13bce599e374b474392eb779/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=e7e3001557cc9a2e13bce599e374b474392eb779", "patch": "@@ -149,21 +149,20 @@ impl Elaborator<'tcx> {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let obligations = predicates.predicates.iter().map(|(pred, span)| {\n+                let obligations = predicates.predicates.into_iter().map(|(pred, span)| {\n                     predicate_obligation(\n                         pred.subst_supertrait(tcx, &data.to_poly_trait_ref()),\n                         Some(*span),\n                     )\n                 });\n-                debug!(\"super_predicates: data={:?} predicates={:?}\", data, &obligations);\n+                debug!(\"super_predicates: data={:?}\", data);\n \n                 // Only keep those bounds that we haven't already seen.\n                 // This is necessary to prevent infinite recursion in some\n                 // cases. One common case is when people define\n                 // `trait Sized: Sized { }` rather than `trait Sized { }`.\n                 let visited = &mut self.visited;\n-                let obligations =\n-                    obligations.filter(|obligation| visited.insert(&obligation.predicate));\n+                let obligations = obligations.filter(|o| visited.insert(&o.predicate));\n \n                 self.stack.extend(obligations);\n             }"}, {"sha": "6326a87c5edc366014692dc5aeb4ab8f3254347f", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7e3001557cc9a2e13bce599e374b474392eb779/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e3001557cc9a2e13bce599e374b474392eb779/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=e7e3001557cc9a2e13bce599e374b474392eb779", "patch": "@@ -281,7 +281,7 @@ impl AutoTraitFinder<'tcx> {\n             },\n         }));\n \n-        let mut computed_preds: FxHashSet<_> = param_env.caller_bounds.iter().cloned().collect();\n+        let computed_preds = param_env.caller_bounds.iter().cloned();\n         let mut user_computed_preds: FxHashSet<_> =\n             user_env.caller_bounds.iter().cloned().collect();\n \n@@ -358,9 +358,11 @@ impl AutoTraitFinder<'tcx> {\n                 _ => panic!(\"Unexpected error for '{:?}': {:?}\", ty, result),\n             };\n \n-            computed_preds.extend(user_computed_preds.iter().cloned());\n-            let normalized_preds =\n-                elaborate_predicates(tcx, computed_preds.iter().cloned()).map(|o| o.predicate);\n+            let normalized_preds = elaborate_predicates(\n+                tcx,\n+                computed_preds.clone().chain(user_computed_preds.iter().cloned()),\n+            )\n+            .map(|o| o.predicate);\n             new_env =\n                 ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal, None);\n         }\n@@ -738,7 +740,7 @@ impl AutoTraitFinder<'tcx> {\n                             if p.ty().skip_binder().has_infer_types() {\n                                 if !self.evaluate_nested_obligations(\n                                     ty,\n-                                    v.clone().iter().cloned(),\n+                                    v.into_iter(),\n                                     computed_preds,\n                                     fresh_preds,\n                                     predicates,"}]}