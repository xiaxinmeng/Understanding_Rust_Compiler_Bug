{"sha": "7864c3f5fa709b854aeee4c45fd00f834ed75449", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NjRjM2Y1ZmE3MDliODU0YWVlZTRjNDVmZDAwZjgzNGVkNzU0NDk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-27T16:20:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-27T16:20:15Z"}, "message": "Rollup merge of #73858 - tspiteri:const-methods, r=oli-obk\n\nMake more primitive integer methods const\n\nNow that #72437 has been merged and `const_if_match` is stable, these methods can be stabilized const. The methods are grouped in commits according to feature names:\n\n* `const_nonzero_int_methods`\n    - `NonZero*::new`\n* some `const_checked_int_methods`\n    - `{i*,u*}::checked_add`\n    - `{i*,u*}::checked_sub`\n    - `{i*,u*}::checked_mul`\n    - `{i*,u*}::checked_neg`\n    - `{i*,u*}::checked_shl`\n    - `{i*,u*}::checked_shr`\n    - `i*::checked_abs`\n* `const_saturating_int_methods`\n    - `{i*,u*}::saturating_add`\n    - `{i*,u*}::saturating_sub`\n    - `{i*,u*}::saturating_mul`\n    - `i*::saturating_neg`\n    - `i*::saturating_abs`\n* `const_int_sign`\n    - `i*::signum`\n* `const_ascii_ctype_on_intrinsics`\n    - `{char,u8}::is_ascii_alphabetic`\n    - `{char,u8}::is_ascii_uppercase`\n    - `{char,u8}::is_ascii_lowercase`\n    - `{char,u8}::is_ascii_alphanumeric`\n    - `{char,u8}::is_ascii_digit`\n    - `{char,u8}::is_ascii_hexdigit`\n    - `{char,u8}::is_ascii_punctuation`\n    - `{char,u8}::is_ascii_graphic`\n    - `{char,u8}::is_ascii_whitespace`\n    - `{char,u8}::is_ascii_control`", "tree": {"sha": "ebbd864e5f1c453e09879b615e159e2ae011e3d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebbd864e5f1c453e09879b615e159e2ae011e3d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7864c3f5fa709b854aeee4c45fd00f834ed75449", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfHv6/CRBK7hj4Ov3rIwAAdHIIAKYEzsU1nawU037Y+b3FE9PQ\nJjiOSMPqnKQoAPQMVI8hGn1yaCcMjC4S5C/goQuaaw+psmqckQQNmjZmWeX6kpC2\nYaZ6PqwpvCErUbwHZXRjNR6FNrY8J7iRHy7zGSRfE8xbXN8/o54fI83iM9+hD1ie\noRUUP4B5xZHkS+jQByHWyU8Sb5Hazzt0cCBRuck2WCO1SmtcIdFwSJbTHVZ5os+R\nMd6/neyGB8NelwxMyuzrCLFJwjyb3RFOC94fFIfOzN4YCt426mNH/kY/R0hr0zYy\nBVc7QNHgi1Pmx028Ws3bICFs73R0epmNRrBCjR6XHC+9i/ST7Jry9mZScsplMJI=\n=c5f2\n-----END PGP SIGNATURE-----\n", "payload": "tree ebbd864e5f1c453e09879b615e159e2ae011e3d8\nparent 4a90e36c85336d1d4b209556c1a9733210bbff19\nparent d6cf128b45b4e7b370357b9497d68426719b0d5a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595866815 -0700\ncommitter GitHub <noreply@github.com> 1595866815 -0700\n\nRollup merge of #73858 - tspiteri:const-methods, r=oli-obk\n\nMake more primitive integer methods const\n\nNow that #72437 has been merged and `const_if_match` is stable, these methods can be stabilized const. The methods are grouped in commits according to feature names:\n\n* `const_nonzero_int_methods`\n    - `NonZero*::new`\n* some `const_checked_int_methods`\n    - `{i*,u*}::checked_add`\n    - `{i*,u*}::checked_sub`\n    - `{i*,u*}::checked_mul`\n    - `{i*,u*}::checked_neg`\n    - `{i*,u*}::checked_shl`\n    - `{i*,u*}::checked_shr`\n    - `i*::checked_abs`\n* `const_saturating_int_methods`\n    - `{i*,u*}::saturating_add`\n    - `{i*,u*}::saturating_sub`\n    - `{i*,u*}::saturating_mul`\n    - `i*::saturating_neg`\n    - `i*::saturating_abs`\n* `const_int_sign`\n    - `i*::signum`\n* `const_ascii_ctype_on_intrinsics`\n    - `{char,u8}::is_ascii_alphabetic`\n    - `{char,u8}::is_ascii_uppercase`\n    - `{char,u8}::is_ascii_lowercase`\n    - `{char,u8}::is_ascii_alphanumeric`\n    - `{char,u8}::is_ascii_digit`\n    - `{char,u8}::is_ascii_hexdigit`\n    - `{char,u8}::is_ascii_punctuation`\n    - `{char,u8}::is_ascii_graphic`\n    - `{char,u8}::is_ascii_whitespace`\n    - `{char,u8}::is_ascii_control`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7864c3f5fa709b854aeee4c45fd00f834ed75449", "html_url": "https://github.com/rust-lang/rust/commit/7864c3f5fa709b854aeee4c45fd00f834ed75449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7864c3f5fa709b854aeee4c45fd00f834ed75449/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a90e36c85336d1d4b209556c1a9733210bbff19", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a90e36c85336d1d4b209556c1a9733210bbff19", "html_url": "https://github.com/rust-lang/rust/commit/4a90e36c85336d1d4b209556c1a9733210bbff19"}, {"sha": "d6cf128b45b4e7b370357b9497d68426719b0d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6cf128b45b4e7b370357b9497d68426719b0d5a", "html_url": "https://github.com/rust-lang/rust/commit/d6cf128b45b4e7b370357b9497d68426719b0d5a"}], "stats": {"total": 96, "additions": 43, "deletions": 53}, "files": [{"sha": "2603ecf428c7d36a5a98a92d99ef69fda64eba6b", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=7864c3f5fa709b854aeee4c45fd00f834ed75449", "patch": "@@ -1226,7 +1226,7 @@ impl char {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n         match *self {\n@@ -1262,7 +1262,7 @@ impl char {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n         match *self {\n@@ -1298,7 +1298,7 @@ impl char {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n         match *self {\n@@ -1337,7 +1337,7 @@ impl char {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n         match *self {\n@@ -1373,7 +1373,7 @@ impl char {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n         match *self {\n@@ -1412,7 +1412,7 @@ impl char {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n         match *self {\n@@ -1452,7 +1452,7 @@ impl char {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n         match *self {\n@@ -1488,7 +1488,7 @@ impl char {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n         match *self {\n@@ -1541,7 +1541,7 @@ impl char {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n         match *self {\n@@ -1579,7 +1579,7 @@ impl char {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n         match *self {"}, {"sha": "edc3fdceb4ff99778f468059e713a3b01dae8428", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=7864c3f5fa709b854aeee4c45fd00f834ed75449", "patch": "@@ -70,13 +70,11 @@\n #![feature(bound_cloned)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n-#![feature(const_ascii_ctype_on_intrinsics)]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]\n-#![feature(const_saturating_int_methods)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_int_pow)]\n #![feature(constctlz)]"}, {"sha": "048c9c5ddaaee7a2183367b7f8f2d2ad75df83ee", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7864c3f5fa709b854aeee4c45fd00f834ed75449", "patch": "@@ -87,7 +87,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n \n                 /// Creates a non-zero if the given value is not zero.\n                 #[$stability]\n-                #[rustc_const_unstable(feature = \"const_nonzero_int_methods\", issue = \"53718\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_int_methods\", since = \"1.47.0\")]\n                 #[inline]\n                 pub const fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n@@ -747,7 +747,7 @@ assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -791,7 +791,7 @@ assert_eq!((\", stringify!($SelfT), \"::MIN + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -835,7 +835,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -993,7 +993,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -1015,7 +1015,7 @@ assert_eq!(0x1\", stringify!($SelfT), \".checked_shl(129), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1039,7 +1039,7 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(128), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1064,7 +1064,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn checked_abs(self) -> Option<Self> {\n                 if self.is_negative() {\n@@ -1134,7 +1134,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1160,7 +1160,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_sub(-1), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1188,7 +1188,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_neg(self) -> Self {\n                 intrinsics::saturating_sub(0, self)\n@@ -1214,7 +1214,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_abs(self) -> Self {\n                 if self.is_negative() {\n@@ -1241,7 +1241,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2203,7 +2203,7 @@ assert_eq!((-10\", stringify!($SelfT), \").signum(), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_sign\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_sign\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn signum(self) -> Self {\n                 match self {\n@@ -2985,7 +2985,7 @@ Basic usage:\n assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3027,7 +3027,7 @@ Basic usage:\n assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3069,7 +3069,7 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3222,7 +3222,7 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_neg(), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -3243,7 +3243,7 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3266,7 +3266,7 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3334,7 +3334,7 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n                 intrinsics::saturating_add(self, rhs)\n@@ -3356,7 +3356,7 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n                 intrinsics::saturating_sub(self, rhs)\n@@ -3378,7 +3378,7 @@ assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($Se\n \"::MAX);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -4672,7 +4672,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n         matches!(*self, b'A'..=b'Z' | b'a'..=b'z')\n@@ -4705,7 +4705,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n         matches!(*self, b'A'..=b'Z')\n@@ -4738,7 +4738,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n         matches!(*self, b'a'..=b'z')\n@@ -4774,7 +4774,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z')\n@@ -4807,7 +4807,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n         matches!(*self, b'0'..=b'9')\n@@ -4843,7 +4843,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f')\n@@ -4880,7 +4880,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n         matches!(*self, b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~')\n@@ -4913,7 +4913,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n         matches!(*self, b'!'..=b'~')\n@@ -4963,7 +4963,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n         matches!(*self, b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ')\n@@ -4998,7 +4998,7 @@ impl u8 {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n         matches!(*self, b'\\0'..=b'\\x1F' | b'\\x7F')"}, {"sha": "ef2f7322f2718941fb27767fb5d3b4efa84b1aee", "filename": "src/test/ui/consts/ascii_ctype.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs?ref=7864c3f5fa709b854aeee4c45fd00f834ed75449", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_ascii_ctype_on_intrinsics)]\n-\n macro_rules! suite {\n     ( $( $fn:ident => [$a:ident, $A:ident, $nine:ident, $dot:ident, $space:ident]; )* ) => {\n         $("}, {"sha": "9b2e30961aae601efce00c830a0d5038bd0e239d", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=7864c3f5fa709b854aeee4c45fd00f834ed75449", "patch": "@@ -3,7 +3,6 @@\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]\n-#![feature(const_saturating_int_methods)]\n #![feature(const_wrapping_int_methods)]\n \n use std::{i8, i128};"}, {"sha": "7edbdd4cec5a549c603f806b3de7c53b8a4cfc74", "filename": "src/test/ui/consts/const-int-saturating-arith.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs?ref=7864c3f5fa709b854aeee4c45fd00f834ed75449", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_saturating_int_methods)]\n \n const INT_U32_NO: u32 = (42 as u32).saturating_add(2);\n const INT_U32: u32 = u32::MAX.saturating_add(1);"}, {"sha": "63c191d422716e9a903a2e3a37bdbc3eebaf5c5a", "filename": "src/test/ui/consts/const-int-sign-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs?ref=7864c3f5fa709b854aeee4c45fd00f834ed75449", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_int_sign)]\n-\n const NEGATIVE_A: bool = (-10i32).is_negative();\n const NEGATIVE_B: bool = 10i32.is_negative();\n const POSITIVE_A: bool = (-10i32).is_positive();"}, {"sha": "cf6f8c8d69a26b92ff4014eaf2812d1e7302ee84", "filename": "src/test/ui/consts/const-nonzero.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7864c3f5fa709b854aeee4c45fd00f834ed75449/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs?ref=7864c3f5fa709b854aeee4c45fd00f834ed75449", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_nonzero_int_methods)]\n-\n use std::num::NonZeroU8;\n \n const X: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(5) };"}]}