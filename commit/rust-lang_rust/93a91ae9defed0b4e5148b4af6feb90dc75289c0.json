{"sha": "93a91ae9defed0b4e5148b4af6feb90dc75289c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYTkxYWU5ZGVmZWQwYjRlNTE0OGI0YWY2ZmViOTBkYzc1Mjg5YzA=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-06-27T07:31:50Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-06-29T03:34:45Z"}, "message": "Add a simple SSR subcommand to the rust-analyzer command line binary", "tree": {"sha": "5d301b5201d5efc8b592adb236b48be74261d424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d301b5201d5efc8b592adb236b48be74261d424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93a91ae9defed0b4e5148b4af6feb90dc75289c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93a91ae9defed0b4e5148b4af6feb90dc75289c0", "html_url": "https://github.com/rust-lang/rust/commit/93a91ae9defed0b4e5148b4af6feb90dc75289c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93a91ae9defed0b4e5148b4af6feb90dc75289c0/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "html_url": "https://github.com/rust-lang/rust/commit/ca31b1d63ae91a69f1ce9c0b075403834ba19f38"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "cf0479f0b7f40b8152d5b188c28aba687f090510", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93a91ae9defed0b4e5148b4af6feb90dc75289c0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/93a91ae9defed0b4e5148b4af6feb90dc75289c0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=93a91ae9defed0b4e5148b4af6feb90dc75289c0", "patch": "@@ -1464,10 +1464,12 @@ dependencies = [\n  \"ra_hir_def\",\n  \"ra_hir_ty\",\n  \"ra_ide\",\n+ \"ra_ide_db\",\n  \"ra_mbe\",\n  \"ra_proc_macro_srv\",\n  \"ra_prof\",\n  \"ra_project_model\",\n+ \"ra_ssr\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"ra_toolchain\","}, {"sha": "97d9bf5d4dfe4709f9ad62b4881804a66986a609", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=93a91ae9defed0b4e5148b4af6feb90dc75289c0", "patch": "@@ -34,8 +34,10 @@ stdx = { path = \"../stdx\" }\n lsp-server = \"0.3.3\"\n flycheck = { path = \"../flycheck\" }\n ra_ide = { path = \"../ra_ide\" }\n+ra_ide_db = { path = \"../ra_ide_db\" }\n ra_prof = { path = \"../ra_prof\" }\n ra_project_model = { path = \"../ra_project_model\" }\n+ra_ssr = { path = \"../ra_ssr\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n vfs = { path = \"../vfs\" }"}, {"sha": "3f0bb3865f65e2aef43f130f8aa0473e83ccee96", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=93a91ae9defed0b4e5148b4af6feb90dc75289c0", "patch": "@@ -5,6 +5,7 @@\n \n use anyhow::{bail, Result};\n use pico_args::Arguments;\n+use ra_ssr::SsrRule;\n use rust_analyzer::cli::{BenchWhat, Position, Verbosity};\n \n use std::{fmt::Write, path::PathBuf};\n@@ -45,6 +46,9 @@ pub(crate) enum Command {\n         /// this would include the parser test files.\n         all: bool,\n     },\n+    Ssr {\n+        rules: Vec<SsrRule>,\n+    },\n     ProcMacro,\n     RunServer,\n     Version,\n@@ -270,6 +274,32 @@ ARGS:\n                 Command::Diagnostics { path, load_output_dirs, with_proc_macro, all }\n             }\n             \"proc-macro\" => Command::ProcMacro,\n+            \"ssr\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n+rust-analyzer ssr\n+\n+USAGE:\n+    rust-analyzer ssr [FLAGS] [RULE...]\n+\n+EXAMPLE:\n+    rust-analyzer ssr '$a.foo($b) ==> bar($a, $b)'\n+\n+FLAGS:\n+    -h, --help          Prints help information\n+\n+ARGS:\n+    <RULE>              A structured search replace rule\"\n+                    );\n+                    return Ok(Err(HelpPrinted));\n+                }\n+                let mut rules = Vec::new();\n+                while let Some(rule) = matches.free_from_str()? {\n+                    rules.push(rule);\n+                }\n+                Command::Ssr { rules }\n+            }\n             _ => {\n                 print_subcommands();\n                 return Ok(Err(HelpPrinted));\n@@ -297,6 +327,7 @@ SUBCOMMANDS:\n     diagnostics\n     proc-macro\n     parse\n+    ssr\n     symbols\"\n     )\n }"}, {"sha": "16882fc137662af1680d232f5e35d2d7c81fc2b9", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=93a91ae9defed0b4e5148b4af6feb90dc75289c0", "patch": "@@ -60,6 +60,9 @@ fn main() -> Result<()> {\n         args::Command::Diagnostics { path, load_output_dirs, with_proc_macro, all } => {\n             cli::diagnostics(path.as_ref(), load_output_dirs, with_proc_macro, all)?\n         }\n+        args::Command::Ssr { rules } => {\n+            cli::apply_ssr_rules(rules)?;\n+        }\n         args::Command::Version => println!(\"rust-analyzer {}\", env!(\"REV\")),\n     }\n     Ok(())"}, {"sha": "13e3d75be111d10af503db45b92dadafcfa9ded1", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=93a91ae9defed0b4e5148b4af6feb90dc75289c0", "patch": "@@ -5,6 +5,7 @@ mod analysis_stats;\n mod analysis_bench;\n mod diagnostics;\n mod progress_report;\n+mod ssr;\n \n use std::io::Read;\n \n@@ -17,6 +18,7 @@ pub use analysis_bench::{analysis_bench, BenchWhat, Position};\n pub use analysis_stats::analysis_stats;\n pub use diagnostics::diagnostics;\n pub use load_cargo::load_cargo;\n+pub use ssr::apply_ssr_rules;\n \n #[derive(Clone, Copy)]\n pub enum Verbosity {"}, {"sha": "a5265ac1587fbb335992d0d7c3d20c7916b266ae", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a91ae9defed0b4e5148b4af6feb90dc75289c0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=93a91ae9defed0b4e5148b4af6feb90dc75289c0", "patch": "@@ -0,0 +1,33 @@\n+//! Applies structured search replace rules from the command line.\n+\n+use crate::cli::{load_cargo::load_cargo, Result};\n+use ra_ide::SourceFileEdit;\n+use ra_ssr::{MatchFinder, SsrRule};\n+\n+pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n+    use ra_db::SourceDatabaseExt;\n+    use ra_ide_db::symbol_index::SymbolsDatabase;\n+    let (host, vfs) = load_cargo(&std::env::current_dir()?, true, true)?;\n+    let db = host.raw_database();\n+    let mut match_finder = MatchFinder::new(db);\n+    for rule in rules {\n+        match_finder.add_rule(rule);\n+    }\n+    let mut edits = Vec::new();\n+    for &root in db.local_roots().iter() {\n+        let sr = db.source_root(root);\n+        for file_id in sr.iter() {\n+            if let Some(edit) = match_finder.edits_for_file(file_id) {\n+                edits.push(SourceFileEdit { file_id, edit });\n+            }\n+        }\n+    }\n+    for edit in edits {\n+        if let Some(path) = vfs.file_path(edit.file_id).as_path() {\n+            let mut contents = db.file_text(edit.file_id).to_string();\n+            edit.edit.apply(&mut contents);\n+            std::fs::write(path, contents)?;\n+        }\n+    }\n+    Ok(())\n+}"}]}