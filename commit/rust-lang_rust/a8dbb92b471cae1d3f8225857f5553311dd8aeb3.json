{"sha": "a8dbb92b471cae1d3f8225857f5553311dd8aeb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZGJiOTJiNDcxY2FlMWQzZjgyMjU4NTdmNTU1MzMxMWRkOGFlYjM=", "commit": {"author": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-06-11T20:23:57Z"}, "committer": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-06-22T04:55:42Z"}, "message": "Fix build on Android API levels below 21\n\nsignal(), sigemptyset(), and sigaddset() are only available as inline\nfunctions until Android API 21. liblibc already handles signal()\nappropriately, so drop it from c.rs; translate sigemptyset() and\nsigaddset() (which is only used in a test) by hand from the C inlines.\n\nWe probably want to revert this commit when we bump Android API level.", "tree": {"sha": "fc42147eab5e968a570e22f83adbd35fae7937d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc42147eab5e968a570e22f83adbd35fae7937d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8dbb92b471cae1d3f8225857f5553311dd8aeb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8dbb92b471cae1d3f8225857f5553311dd8aeb3", "html_url": "https://github.com/rust-lang/rust/commit/a8dbb92b471cae1d3f8225857f5553311dd8aeb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8dbb92b471cae1d3f8225857f5553311dd8aeb3/comments", "author": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae005162d1d7aea6cffdc299fedf0d2bb2a4b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae005162d1d7aea6cffdc299fedf0d2bb2a4b28", "html_url": "https://github.com/rust-lang/rust/commit/cae005162d1d7aea6cffdc299fedf0d2bb2a4b28"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "99a6731c57d95317d597a8ddf4ac2c02f8ff03d8", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8dbb92b471cae1d3f8225857f5553311dd8aeb3/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dbb92b471cae1d3f8225857f5553311dd8aeb3/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=a8dbb92b471cae1d3f8225857f5553311dd8aeb3", "patch": "@@ -135,7 +135,9 @@ extern {\n     pub fn sigaltstack(ss: *const sigaltstack,\n                        oss: *mut sigaltstack) -> libc::c_int;\n \n+    #[cfg(not(target_os = \"android\"))]\n     pub fn sigemptyset(set: *mut sigset_t) -> libc::c_int;\n+\n     pub fn pthread_sigmask(how: libc::c_int, set: *const sigset_t,\n                            oldset: *mut sigset_t) -> libc::c_int;\n \n@@ -155,6 +157,14 @@ extern {\n                     -> *mut libc::c_char;\n }\n \n+// Ugh. This is only available as an inline until Android API 21.\n+#[cfg(target_os = \"android\")]\n+pub unsafe fn sigemptyset(set: *mut sigset_t) -> libc::c_int {\n+    use intrinsics;\n+    intrinsics::write_bytes(set, 0, 1);\n+    return 0;\n+}\n+\n #[cfg(any(target_os = \"linux\",\n           target_os = \"android\"))]\n mod signal_os {"}, {"sha": "695d0ddfaaf61f455cbb4faa23d3b276d91418c6", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8dbb92b471cae1d3f8225857f5553311dd8aeb3/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dbb92b471cae1d3f8225857f5553311dd8aeb3/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=a8dbb92b471cae1d3f8225857f5553311dd8aeb3", "patch": "@@ -446,12 +446,22 @@ mod tests {\n     use mem;\n     use ptr;\n     use libc;\n+    use slice;\n     use sys::{self, c, cvt, pipe};\n \n+    #[cfg(not(target_os = \"android\"))]\n     extern {\n         fn sigaddset(set: *mut c::sigset_t, signum: libc::c_int) -> libc::c_int;\n     }\n \n+    #[cfg(target_os = \"android\")]\n+    unsafe fn sigaddset(set: *mut c::sigset_t, signum: libc::c_int) -> libc::c_int {\n+        let raw = slice::from_raw_parts_mut(set as *mut u8, mem::size_of::<c::sigset_t>());\n+        let bit = (signum - 1) as usize;\n+        raw[bit / 8] |= 1 << (bit % 8);\n+        return 0;\n+    }\n+\n     #[test]\n     fn test_process_mask() {\n         unsafe {"}]}