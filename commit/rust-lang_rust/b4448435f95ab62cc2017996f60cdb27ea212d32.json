{"sha": "b4448435f95ab62cc2017996f60cdb27ea212d32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDQ4NDM1Zjk1YWI2MmNjMjAxNzk5NmY2MGNkYjI3ZWEyMTJkMzI=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-11-29T22:05:38Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-11-29T22:05:38Z"}, "message": "rustdoc: Fix issues with cross-crate inlined associated items\n\n* Visibility was missing from impl items.\n* Attributes and docs were missing from consts and types in impls.\n* Const default values were missing from traits.\n\nThis unifies the code that handles associated items from impls and traits.", "tree": {"sha": "5bdb69a82378b603970da6052b580ad780dc4fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bdb69a82378b603970da6052b580ad780dc4fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4448435f95ab62cc2017996f60cdb27ea212d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4448435f95ab62cc2017996f60cdb27ea212d32", "html_url": "https://github.com/rust-lang/rust/commit/b4448435f95ab62cc2017996f60cdb27ea212d32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4448435f95ab62cc2017996f60cdb27ea212d32/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a2e9ade83ff253bb489c63a95b1f499c5e0916f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2e9ade83ff253bb489c63a95b1f499c5e0916f", "html_url": "https://github.com/rust-lang/rust/commit/0a2e9ade83ff253bb489c63a95b1f499c5e0916f"}], "stats": {"total": 253, "additions": 157, "deletions": 96}, "files": [{"sha": "85c1796ecef399336887e8a4474c3013786e7b59", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 68, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b4448435f95ab62cc2017996f60cdb27ea212d32", "patch": "@@ -332,74 +332,10 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n \n     let predicates = tcx.predicates_of(did);\n     let trait_items = tcx.associated_items(did).filter_map(|item| {\n-        match item.kind {\n-            ty::AssociatedKind::Const => {\n-                let default = if item.defaultness.has_value() {\n-                    Some(print_inlined_const(cx, item.def_id))\n-                } else {\n-                    None\n-                };\n-                Some(clean::Item {\n-                    name: Some(item.name.clean(cx)),\n-                    inner: clean::AssociatedConstItem(\n-                        tcx.type_of(item.def_id).clean(cx),\n-                        default,\n-                    ),\n-                    source: tcx.def_span(item.def_id).clean(cx),\n-                    attrs: clean::Attributes::default(),\n-                    visibility: None,\n-                    stability: tcx.lookup_stability(item.def_id).clean(cx),\n-                    deprecation: tcx.lookup_deprecation(item.def_id).clean(cx),\n-                    def_id: item.def_id\n-                })\n-            }\n-            ty::AssociatedKind::Method => {\n-                if item.vis != ty::Visibility::Public && associated_trait.is_none() {\n-                    return None\n-                }\n-                let mut cleaned = item.clean(cx);\n-                cleaned.inner = match cleaned.inner.clone() {\n-                    clean::TyMethodItem(clean::TyMethod {\n-                        unsafety, decl, generics, abi\n-                    }) => {\n-                        let constness = if tcx.is_const_fn(item.def_id) {\n-                            hir::Constness::Const\n-                        } else {\n-                            hir::Constness::NotConst\n-                        };\n-\n-                        clean::MethodItem(clean::Method {\n-                            unsafety,\n-                            constness,\n-                            decl,\n-                            generics,\n-                            abi,\n-                        })\n-                    }\n-                    ref r => panic!(\"not a tymethod: {:?}\", r),\n-                };\n-                Some(cleaned)\n-            }\n-            ty::AssociatedKind::Type => {\n-                let typedef = clean::Typedef {\n-                    type_: tcx.type_of(item.def_id).clean(cx),\n-                    generics: clean::Generics {\n-                        lifetimes: vec![],\n-                        type_params: vec![],\n-                        where_predicates: vec![]\n-                    }\n-                };\n-                Some(clean::Item {\n-                    name: Some(item.name.clean(cx)),\n-                    inner: clean::TypedefItem(typedef, true),\n-                    source: tcx.def_span(item.def_id).clean(cx),\n-                    attrs: clean::Attributes::default(),\n-                    visibility: None,\n-                    stability: tcx.lookup_stability(item.def_id).clean(cx),\n-                    deprecation: tcx.lookup_deprecation(item.def_id).clean(cx),\n-                    def_id: item.def_id\n-                })\n-            }\n+        if associated_trait.is_some() || item.vis == ty::Visibility::Public {\n+            Some(item.clean(cx))\n+        } else {\n+            None\n         }\n     }).collect::<Vec<_>>();\n     let polarity = tcx.impl_polarity(did);"}, {"sha": "be7bd3d5510ef08400bd4284e574ea5a1990d5b0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 46, "deletions": 27, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b4448435f95ab62cc2017996f60cdb27ea212d32", "patch": "@@ -1595,7 +1595,12 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n         let inner = match self.kind {\n             ty::AssociatedKind::Const => {\n                 let ty = cx.tcx.type_of(self.def_id);\n-                AssociatedConstItem(ty.clean(cx), None)\n+                let default = if self.defaultness.has_value() {\n+                    Some(inline::print_inlined_const(cx, self.def_id))\n+                } else {\n+                    None\n+                };\n+                AssociatedConstItem(ty.clean(cx), default)\n             }\n             ty::AssociatedKind::Method => {\n                 let generics = (cx.tcx.generics_of(self.def_id),\n@@ -1626,18 +1631,21 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                 }\n \n                 let provided = match self.container {\n-                    ty::ImplContainer(_) => false,\n+                    ty::ImplContainer(_) => true,\n                     ty::TraitContainer(_) => self.defaultness.has_value()\n                 };\n                 if provided {\n+                    let constness = if cx.tcx.is_const_fn(self.def_id) {\n+                        hir::Constness::Const\n+                    } else {\n+                        hir::Constness::NotConst\n+                    };\n                     MethodItem(Method {\n                         unsafety: sig.unsafety(),\n                         generics,\n                         decl,\n                         abi: sig.abi(),\n-\n-                        // trait methods cannot (currently, at least) be const\n-                        constness: hir::Constness::NotConst,\n+                        constness,\n                     })\n                 } else {\n                     TyMethodItem(TyMethod {\n@@ -1651,14 +1659,14 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n             ty::AssociatedKind::Type => {\n                 let my_name = self.name.clean(cx);\n \n-                let mut bounds = if let ty::TraitContainer(did) = self.container {\n+                if let ty::TraitContainer(did) = self.container {\n                     // When loading a cross-crate associated type, the bounds for this type\n                     // are actually located on the trait/impl itself, so we need to load\n                     // all of the generics from there and then look for bounds that are\n                     // applied to this associated type in question.\n                     let predicates = cx.tcx.predicates_of(did);\n                     let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n-                    generics.where_predicates.iter().filter_map(|pred| {\n+                    let mut bounds = generics.where_predicates.iter().filter_map(|pred| {\n                         let (name, self_type, trait_, bounds) = match *pred {\n                             WherePredicate::BoundPredicate {\n                                 ty: QPath { ref name, ref self_type, ref trait_ },\n@@ -1676,34 +1684,45 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                             _ => return None,\n                         }\n                         Some(bounds)\n-                    }).flat_map(|i| i.iter().cloned()).collect::<Vec<_>>()\n-                } else {\n-                    vec![]\n-                };\n+                    }).flat_map(|i| i.iter().cloned()).collect::<Vec<_>>();\n+                    // Our Sized/?Sized bound didn't get handled when creating the generics\n+                    // because we didn't actually get our whole set of bounds until just now\n+                    // (some of them may have come from the trait). If we do have a sized\n+                    // bound, we remove it, and if we don't then we add the `?Sized` bound\n+                    // at the end.\n+                    match bounds.iter().position(|b| b.is_sized_bound(cx)) {\n+                        Some(i) => { bounds.remove(i); }\n+                        None => bounds.push(TyParamBound::maybe_sized(cx)),\n+                    }\n \n-                // Our Sized/?Sized bound didn't get handled when creating the generics\n-                // because we didn't actually get our whole set of bounds until just now\n-                // (some of them may have come from the trait). If we do have a sized\n-                // bound, we remove it, and if we don't then we add the `?Sized` bound\n-                // at the end.\n-                match bounds.iter().position(|b| b.is_sized_bound(cx)) {\n-                    Some(i) => { bounds.remove(i); }\n-                    None => bounds.push(TyParamBound::maybe_sized(cx)),\n-                }\n+                    let ty = if self.defaultness.has_value() {\n+                        Some(cx.tcx.type_of(self.def_id))\n+                    } else {\n+                        None\n+                    };\n \n-                let ty = if self.defaultness.has_value() {\n-                    Some(cx.tcx.type_of(self.def_id))\n+                    AssociatedTypeItem(bounds, ty.clean(cx))\n                 } else {\n-                    None\n-                };\n-\n-                AssociatedTypeItem(bounds, ty.clean(cx))\n+                    TypedefItem(Typedef {\n+                        type_: cx.tcx.type_of(self.def_id).clean(cx),\n+                        generics: Generics {\n+                            lifetimes: Vec::new(),\n+                            type_params: Vec::new(),\n+                            where_predicates: Vec::new(),\n+                        },\n+                    }, true)\n+                }\n             }\n         };\n \n+        let visibility = match self.container {\n+            ty::ImplContainer(_) => self.vis.clean(cx),\n+            ty::TraitContainer(_) => None,\n+        };\n+\n         Item {\n             name: Some(self.name.clean(cx)),\n-            visibility: Some(Inherited),\n+            visibility,\n             stability: get_stability(cx, self.def_id),\n             deprecation: get_deprecation(cx, self.def_id),\n             def_id: self.def_id,"}, {"sha": "b8a0b334b86af20737e90696450864717ba00f08", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b4448435f95ab62cc2017996f60cdb27ea212d32", "patch": "@@ -2621,7 +2621,8 @@ fn assoc_const(w: &mut fmt::Formatter,\n                ty: &clean::Type,\n                _default: Option<&String>,\n                link: AssocItemLink) -> fmt::Result {\n-    write!(w, \"const <a href='{}' class=\\\"constant\\\"><b>{}</b></a>: {}\",\n+    write!(w, \"{}const <a href='{}' class=\\\"constant\\\"><b>{}</b></a>: {}\",\n+           VisSpace(&it.visibility),\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap(),\n            ty)?;"}, {"sha": "95d936883ffa9b7a81ddfaeea53620b6319b7987", "filename": "src/test/rustdoc/inline_cross/assoc-items.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc-items.rs?ref=b4448435f95ab62cc2017996f60cdb27ea212d32", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:assoc-items.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate assoc_items;\n+\n+// @has foo/struct.MyStruct.html\n+// @!has - 'PrivateConst'\n+// @has - '//*[@id=\"associatedconstant.PublicConst\"]' 'pub const PublicConst: u8'\n+// @has - '//*[@class=\"docblock\"]' 'PublicConst: u8 = 123'\n+// @has - '//*[@class=\"docblock\"]' 'docs for PublicConst'\n+// @!has - 'private_method'\n+// @has - '//*[@id=\"method.public_method\"]' 'pub fn public_method()'\n+// @has - '//*[@class=\"docblock\"]' 'docs for public_method'\n+// @has - '//*[@id=\"associatedconstant.ConstNoDefault\"]' 'const ConstNoDefault: i16'\n+// @has - '//*[@class=\"docblock\"]' 'ConstNoDefault: i16 = -123'\n+// @has - '//*[@class=\"docblock\"]' 'dox for ConstNoDefault'\n+// @has - '//*[@id=\"associatedconstant.ConstWithDefault\"]' 'const ConstWithDefault: u16'\n+// @has - '//*[@class=\"docblock\"]' 'ConstWithDefault: u16 = 12345'\n+// @has - '//*[@class=\"docblock\"]' 'docs for ConstWithDefault'\n+// @has - '//*[@id=\"associatedtype.TypeNoDefault\"]' 'type TypeNoDefault = i32'\n+// @has - '//*[@class=\"docblock\"]' 'dox for TypeNoDefault'\n+// @has - '//*[@id=\"associatedtype.TypeWithDefault\"]' 'type TypeWithDefault = u32'\n+// @has - '//*[@class=\"docblock\"]' 'docs for TypeWithDefault'\n+// @has - '//*[@id=\"method.method_no_default\"]' 'fn method_no_default()'\n+// @has - '//*[@class=\"docblock\"]' 'dox for method_no_default'\n+// @has - '//*[@id=\"method.method_with_default\"]' 'fn method_with_default()'\n+// @has - '//*[@class=\"docblock\"]' 'docs for method_with_default'\n+pub use assoc_items::MyStruct;\n+\n+// @has foo/trait.MyTrait.html\n+// @has - '//*[@id=\"associatedconstant.ConstNoDefault\"]' 'const ConstNoDefault: i16'\n+// @has - '//*[@class=\"docblock\"]' 'docs for ConstNoDefault'\n+// @has - '//*[@id=\"associatedconstant.ConstWithDefault\"]' 'const ConstWithDefault: u16'\n+// @has - '//*[@class=\"docblock\"]' 'ConstWithDefault: u16 = 12345'\n+// @has - '//*[@class=\"docblock\"]' 'docs for ConstWithDefault'\n+// @has - '//*[@id=\"associatedtype.TypeNoDefault\"]' 'type TypeNoDefault'\n+// @has - '//*[@class=\"docblock\"]' 'docs for TypeNoDefault'\n+// @has - '//*[@id=\"associatedtype.TypeWithDefault\"]' 'type TypeWithDefault = u32'\n+// @has - '//*[@class=\"docblock\"]' 'docs for TypeWithDefault'\n+// @has - '//*[@id=\"tymethod.method_no_default\"]' 'fn method_no_default()'\n+// @has - '//*[@class=\"docblock\"]' 'docs for method_no_default'\n+// @has - '//*[@id=\"method.method_with_default\"]' 'fn method_with_default()'\n+// @has - '//*[@class=\"docblock\"]' 'docs for method_with_default'\n+pub use assoc_items::MyTrait;"}, {"sha": "e955526900e99f77e7d4fa41deb9eb5991c16842", "filename": "src/test/rustdoc/inline_cross/auxiliary/assoc-items.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4448435f95ab62cc2017996f60cdb27ea212d32/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc-items.rs?ref=b4448435f95ab62cc2017996f60cdb27ea212d32", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_type_defaults)]\n+\n+pub struct MyStruct;\n+\n+impl MyStruct {\n+    /// docs for PrivateConst\n+    const PrivateConst: i8 = -123;\n+    /// docs for PublicConst\n+    pub const PublicConst: u8 = 123;\n+    /// docs for private_method\n+    fn private_method() {}\n+    /// docs for public_method\n+    pub fn public_method() {}\n+}\n+\n+pub trait MyTrait {\n+    /// docs for ConstNoDefault\n+    const ConstNoDefault: i16;\n+    /// docs for ConstWithDefault\n+    const ConstWithDefault: u16 = 12345;\n+    /// docs for TypeNoDefault\n+    type TypeNoDefault;\n+    /// docs for TypeWithDefault\n+    type TypeWithDefault = u32;\n+    /// docs for method_no_default\n+    fn method_no_default();\n+    /// docs for method_with_default\n+    fn method_with_default() {}\n+}\n+\n+impl MyTrait for MyStruct {\n+    /// dox for ConstNoDefault\n+    const ConstNoDefault: i16 = -12345;\n+    /// dox for TypeNoDefault\n+    type TypeNoDefault = i32;\n+    /// dox for method_no_default\n+    fn method_no_default() {}\n+}"}]}