{"sha": "111d0798d622ceef65cc112e93eda87f3b9c760c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMWQwNzk4ZDYyMmNlZWY2NWNjMTEyZTkzZWRhODdmM2I5Yzc2MGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-13T23:43:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-13T23:43:01Z"}, "message": "Merge #9597\n\n9597: Use Type::walk for goto_type_definition r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "0667ab1363182ece06e5a1f50b239bd98cdfe825", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0667ab1363182ece06e5a1f50b239bd98cdfe825"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111d0798d622ceef65cc112e93eda87f3b9c760c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7iUFCRBK7hj4Ov3rIwAAaDUIAKP8LSOZ1h/zEG0E/HAY53bv\nxcKW6vzSooCOic5RufOr8g3C7UwmSMe0HBWNdzU8D8XMs6Tdyf7yDXoEqMYkZNQG\nHCqk8UbYjX/qvZMg9rbpzroiFi66GDMTI+UguQ1r9gcRP6kMf/lM5vlwn9p1bLXi\nt5aXYikcYH+IPh+1oS4ZSV7Wcy6gYf6Kce6Fqsif7MkUtsJU1J4anIEjIenkVKnR\nCGIfpUFPLdw48uSELYotd6KNCVsUYwyPscxo/Kuu5xmPkMzC5qJ55cNpz4yUWbLQ\nE537bmTw/KwW0wnvctP103+ncd3DouPKfDtORY5cmrN23ZrzDkZQoXjbacyYd+U=\n=fG98\n-----END PGP SIGNATURE-----\n", "payload": "tree 0667ab1363182ece06e5a1f50b239bd98cdfe825\nparent 9bd6836513608481dbb86c5949044eb0caf8f26b\nparent 12fe48c04d2390891b3bb73716dbf3d999e9f3ea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626219781 +0000\ncommitter GitHub <noreply@github.com> 1626219781 +0000\n\nMerge #9597\n\n9597: Use Type::walk for goto_type_definition r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111d0798d622ceef65cc112e93eda87f3b9c760c", "html_url": "https://github.com/rust-lang/rust/commit/111d0798d622ceef65cc112e93eda87f3b9c760c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111d0798d622ceef65cc112e93eda87f3b9c760c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bd6836513608481dbb86c5949044eb0caf8f26b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd6836513608481dbb86c5949044eb0caf8f26b", "html_url": "https://github.com/rust-lang/rust/commit/9bd6836513608481dbb86c5949044eb0caf8f26b"}, {"sha": "12fe48c04d2390891b3bb73716dbf3d999e9f3ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/12fe48c04d2390891b3bb73716dbf3d999e9f3ea", "html_url": "https://github.com/rust-lang/rust/commit/12fe48c04d2390891b3bb73716dbf3d999e9f3ea"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "d51f154c6ce7de93a9c06926758c4ab19bddd3e3", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/111d0798d622ceef65cc112e93eda87f3b9c760c/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111d0798d622ceef65cc112e93eda87f3b9c760c/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=111d0798d622ceef65cc112e93eda87f3b9c760c", "patch": "@@ -1,5 +1,4 @@\n use ide_db::{base_db::Upcast, helpers::pick_best_token, RootDatabase};\n-use rustc_hash::FxHashSet;\n use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, T};\n \n use crate::{display::TryToNav, FilePosition, NavigationTarget, RangeInfo};\n@@ -55,19 +54,29 @@ pub(crate) fn goto_type_definition(\n         Some((ty, node))\n     })?;\n \n-    let mut res = FxHashSet::default();\n-    let mut workload = vec![ty.strip_references()];\n-    while let Some(ty) = workload.pop() {\n-        if let Some(adt) = ty.as_adt() {\n-            res.insert(adt);\n+    let mut res = Vec::new();\n+    let mut push = |def: hir::ModuleDef| {\n+        if let Some(nav) = def.try_to_nav(db) {\n+            if !res.contains(&nav) {\n+                res.push(nav);\n+            }\n         }\n-        workload.extend(ty.strip_references().type_arguments());\n-    }\n+    };\n+\n+    let ty = ty.strip_references();\n+    ty.walk(db, |t| {\n+        if let Some(adt) = t.as_adt() {\n+            push(adt.into());\n+        } else if let Some(trait_) = t.as_dyn_trait() {\n+            push(trait_.into());\n+        } else if let Some(traits) = t.as_impl_traits(db) {\n+            traits.into_iter().for_each(|it| push(it.into()));\n+        } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n+            push(trait_.into());\n+        }\n+    });\n \n-    Some(RangeInfo::new(\n-        node.text_range(),\n-        res.into_iter().flat_map(|adt| adt.try_to_nav(db)).collect(),\n-    ))\n+    Some(RangeInfo::new(node.text_range(), res))\n }\n \n #[cfg(test)]"}]}