{"sha": "bf2e63104ddb2e596f74b21502a71f9540f11d2e", "node_id": "C_kwDOAAsO6NoAKGJmMmU2MzEwNGRkYjJlNTk2Zjc0YjIxNTAyYTcxZjk1NDBmMTFkMmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T00:19:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T00:19:36Z"}, "message": "Auto merge of #8807 - Jarcho:cmp_owned, r=giraffate\n\nFix `cmp_owned` on copy types\n\nfixes #8803\nfixes #7365\n\nchangelog: Don't lint `cmp_owned` on `From::from` for copy types", "tree": {"sha": "11f3992547a249aeea0bdf31b3e034ccf1e2f105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f3992547a249aeea0bdf31b3e034ccf1e2f105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf2e63104ddb2e596f74b21502a71f9540f11d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2e63104ddb2e596f74b21502a71f9540f11d2e", "html_url": "https://github.com/rust-lang/rust/commit/bf2e63104ddb2e596f74b21502a71f9540f11d2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf2e63104ddb2e596f74b21502a71f9540f11d2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d901079ca1176f87c8baaed0662db117c805c9e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d901079ca1176f87c8baaed0662db117c805c9e1", "html_url": "https://github.com/rust-lang/rust/commit/d901079ca1176f87c8baaed0662db117c805c9e1"}, {"sha": "993b4016db6684eeac1d5e9e986d18bd7f2fe1a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/993b4016db6684eeac1d5e9e986d18bd7f2fe1a3", "html_url": "https://github.com/rust-lang/rust/commit/993b4016db6684eeac1d5e9e986d18bd7f2fe1a3"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "7fdc28c5a062d3376472f4e2834f30d3934139ef", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bf2e63104ddb2e596f74b21502a71f9540f11d2e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2e63104ddb2e596f74b21502a71f9540f11d2e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=bf2e63104ddb2e596f74b21502a71f9540f11d2e", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::{snippet, snippet_opt};\n-use clippy_utils::ty::implements_trait;\n+use clippy_utils::ty::{implements_trait, is_copy};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -20,8 +20,8 @@ use rustc_span::symbol::sym;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::{\n-    get_item_name, get_parent_expr, in_constant, is_diag_trait_item, is_integer_const, iter_input_pats,\n-    last_path_segment, match_any_def_paths, path_def_id, paths, unsext, SpanlessEq,\n+    get_item_name, get_parent_expr, in_constant, is_integer_const, iter_input_pats, last_path_segment,\n+    match_any_def_paths, path_def_id, paths, unsext, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -569,33 +569,34 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n         })\n     }\n \n-    let (arg_ty, snip) = match expr.kind {\n-        ExprKind::MethodCall(.., args, _) if args.len() == 1 => {\n-            if_chain!(\n-                if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-                if is_diag_trait_item(cx, expr_def_id, sym::ToString)\n-                    || is_diag_trait_item(cx, expr_def_id, sym::ToOwned);\n-                then {\n-                    (cx.typeck_results().expr_ty(&args[0]), snippet(cx, args[0].span, \"..\"))\n-                } else {\n-                    return;\n-                }\n-            )\n+    let typeck = cx.typeck_results();\n+    let (arg, arg_span) = match expr.kind {\n+        ExprKind::MethodCall(.., [arg], _)\n+            if typeck\n+                .type_dependent_def_id(expr.hir_id)\n+                .and_then(|id| cx.tcx.trait_of_item(id))\n+                .map_or(false, |id| {\n+                    matches!(cx.tcx.get_diagnostic_name(id), Some(sym::ToString | sym::ToOwned))\n+                }) =>\n+        {\n+            (arg, arg.span)\n         },\n-        ExprKind::Call(path, [arg]) => {\n+        ExprKind::Call(path, [arg])\n             if path_def_id(cx, path)\n                 .and_then(|id| match_any_def_paths(cx, id, &[&paths::FROM_STR_METHOD, &paths::FROM_FROM]))\n-                .is_some()\n-            {\n-                (cx.typeck_results().expr_ty(arg), snippet(cx, arg.span, \"..\"))\n-            } else {\n-                return;\n-            }\n+                .map_or(false, |idx| match idx {\n+                    0 => true,\n+                    1 => !is_copy(cx, typeck.expr_ty(expr)),\n+                    _ => false,\n+                }) =>\n+        {\n+            (arg, arg.span)\n         },\n         _ => return,\n     };\n \n-    let other_ty = cx.typeck_results().expr_ty(other);\n+    let arg_ty = typeck.expr_ty(arg);\n+    let other_ty = typeck.expr_ty(other);\n \n     let without_deref = symmetric_partial_eq(cx, arg_ty, other_ty).unwrap_or_default();\n     let with_deref = arg_ty\n@@ -627,13 +628,14 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n                 return;\n             }\n \n+            let arg_snip = snippet(cx, arg_span, \"..\");\n             let expr_snip;\n             let eq_impl;\n             if with_deref.is_implemented() {\n-                expr_snip = format!(\"*{}\", snip);\n+                expr_snip = format!(\"*{}\", arg_snip);\n                 eq_impl = with_deref;\n             } else {\n-                expr_snip = snip.to_string();\n+                expr_snip = arg_snip.to_string();\n                 eq_impl = without_deref;\n             };\n "}, {"sha": "d8a202cb6a1c6ba37e4fa0e459caf7a91eb3b7cf", "filename": "tests/ui/cmp_owned/without_suggestion.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf2e63104ddb2e596f74b21502a71f9540f11d2e/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2e63104ddb2e596f74b21502a71f9540f11d2e/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs?ref=bf2e63104ddb2e596f74b21502a71f9540f11d2e", "patch": "@@ -9,6 +9,10 @@ fn main() {\n     let x = &&Baz;\n     let y = &Baz;\n     y.to_owned() == **x;\n+\n+    let x = 0u32;\n+    let y = U32Wrapper(x);\n+    let _ = U32Wrapper::from(x) == y;\n }\n \n struct Foo;\n@@ -51,3 +55,21 @@ impl std::borrow::Borrow<Foo> for Bar {\n         &FOO\n     }\n }\n+\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+struct U32Wrapper(u32);\n+impl From<u32> for U32Wrapper {\n+    fn from(x: u32) -> Self {\n+        Self(x)\n+    }\n+}\n+impl PartialEq<u32> for U32Wrapper {\n+    fn eq(&self, other: &u32) -> bool {\n+        self.0 == *other\n+    }\n+}\n+impl PartialEq<U32Wrapper> for u32 {\n+    fn eq(&self, other: &U32Wrapper) -> bool {\n+        *self == other.0\n+    }\n+}"}, {"sha": "d2dd14d8edbb8120561875ddaec7054f6534b1ff", "filename": "tests/ui/cmp_owned/without_suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf2e63104ddb2e596f74b21502a71f9540f11d2e/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf2e63104ddb2e596f74b21502a71f9540f11d2e/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr?ref=bf2e63104ddb2e596f74b21502a71f9540f11d2e", "patch": "@@ -13,7 +13,7 @@ LL |     y.to_owned() == **x;\n    |     ^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/without_suggestion.rs:18:9\n+  --> $DIR/without_suggestion.rs:22:9\n    |\n LL |         self.to_owned() == *other\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating"}]}