{"sha": "aa81d32165dc9f0952bc520f223503aedd755b31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhODFkMzIxNjVkYzlmMDk1MmJjNTIwZjIyMzUwM2FlZGQ3NTViMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-06T12:34:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-06T12:34:31Z"}, "message": "Auto merge of #76128 - poliorcetics:doc-use-arc-clone, r=KodrAus\n\nUse Arc::clone and Rc::clone in documentation\n\nThis PR replaces uses of `x.clone()` by `Rc::clone(&x)` (or `Arc::clone(&x)`) to better match the documentation for those types.\n\n@rustbot modify labels: T-doc", "tree": {"sha": "2d3c11d80c535b04ccf3dd35b4b9ba4f978d6611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d3c11d80c535b04ccf3dd35b4b9ba4f978d6611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa81d32165dc9f0952bc520f223503aedd755b31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa81d32165dc9f0952bc520f223503aedd755b31", "html_url": "https://github.com/rust-lang/rust/commit/aa81d32165dc9f0952bc520f223503aedd755b31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa81d32165dc9f0952bc520f223503aedd755b31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23e49ddafbe6765d117d3c7e2485d7ac73d9d79e", "url": "https://api.github.com/repos/rust-lang/rust/commits/23e49ddafbe6765d117d3c7e2485d7ac73d9d79e", "html_url": "https://github.com/rust-lang/rust/commit/23e49ddafbe6765d117d3c7e2485d7ac73d9d79e"}, {"sha": "6b75e3d11b89671df0a3f284252584414bfe17d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b75e3d11b89671df0a3f284252584414bfe17d9", "html_url": "https://github.com/rust-lang/rust/commit/6b75e3d11b89671df0a3f284252584414bfe17d9"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "3c3bb68c671443345fd5eaa2b8ba68778eebd90e", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=aa81d32165dc9f0952bc520f223503aedd755b31", "patch": "@@ -541,7 +541,7 @@ impl<P: Deref> Pin<P> {\n     /// use std::pin::Pin;\n     ///\n     /// fn move_pinned_rc<T>(mut x: Rc<T>) {\n-    ///     let pinned = unsafe { Pin::new_unchecked(x.clone()) };\n+    ///     let pinned = unsafe { Pin::new_unchecked(Rc::clone(&x)) };\n     ///     {\n     ///         let p: Pin<&T> = pinned.as_ref();\n     ///         // This should mean the pointee can never move again."}, {"sha": "38eabaaa396e0df3bea563d46b4d5f82ea01454c", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=aa81d32165dc9f0952bc520f223503aedd755b31", "patch": "@@ -76,7 +76,7 @@\n //! fn main() {\n //!     let spinlock = Arc::new(AtomicUsize::new(1));\n //!\n-//!     let spinlock_clone = spinlock.clone();\n+//!     let spinlock_clone = Arc::clone(&spinlock);\n //!     let thread = thread::spawn(move|| {\n //!         spinlock_clone.store(0, Ordering::SeqCst);\n //!     });"}, {"sha": "57cb179a4244a4fd6e46d6783f28227d244d8108", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=aa81d32165dc9f0952bc520f223503aedd755b31", "patch": "@@ -2382,15 +2382,15 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// use std::rc::Rc;\n     ///\n     /// let mut map: HashMap<Rc<String>, u32> = HashMap::new();\n-    /// let mut known_strings: Vec<Rc<String>> = Vec::new();\n+    /// let known_strings: Vec<Rc<String>> = Vec::new();\n     ///\n     /// // Initialise known strings, run program, etc.\n     ///\n     /// reclaim_memory(&mut map, &known_strings);\n     ///\n     /// fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {\n     ///     for s in known_strings {\n-    ///         if let Entry::Occupied(entry) = map.entry(s.clone()) {\n+    ///         if let Entry::Occupied(entry) = map.entry(Rc::clone(s)) {\n     ///             // Replaces the entry's key with our version of it in `known_strings`.\n     ///             entry.replace_key();\n     ///         }"}, {"sha": "204d7f3084f03a8f6fe3e55339e505f95382adb5", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=aa81d32165dc9f0952bc520f223503aedd755b31", "patch": "@@ -16,7 +16,7 @@ use crate::sync::{Condvar, Mutex};\n /// let mut handles = Vec::with_capacity(10);\n /// let barrier = Arc::new(Barrier::new(10));\n /// for _ in 0..10 {\n-///     let c = barrier.clone();\n+///     let c = Arc::clone(&barrier);\n ///     // The same messages will be printed together.\n ///     // You will NOT see any interleaving.\n ///     handles.push(thread::spawn(move|| {\n@@ -113,7 +113,7 @@ impl Barrier {\n     /// let mut handles = Vec::with_capacity(10);\n     /// let barrier = Arc::new(Barrier::new(10));\n     /// for _ in 0..10 {\n-    ///     let c = barrier.clone();\n+    ///     let c = Arc::clone(&barrier);\n     ///     // The same messages will be printed together.\n     ///     // You will NOT see any interleaving.\n     ///     handles.push(thread::spawn(move|| {"}, {"sha": "bc01c26a86aced8603896c7a931272a2877fb1cd", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=aa81d32165dc9f0952bc520f223503aedd755b31", "patch": "@@ -36,7 +36,7 @@ impl WaitTimeoutResult {\n     /// use std::time::Duration;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move || {\n     ///     let (lock, cvar) = &*pair2;\n@@ -93,7 +93,7 @@ impl WaitTimeoutResult {\n /// use std::thread;\n ///\n /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-/// let pair2 = pair.clone();\n+/// let pair2 = Arc::clone(&pair);\n ///\n /// // Inside of our lock, spawn a new thread, and then wait for it to start.\n /// thread::spawn(move|| {\n@@ -176,7 +176,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -232,7 +232,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(true), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -291,7 +291,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -363,7 +363,7 @@ impl Condvar {\n     /// use std::time::Duration;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -432,7 +432,7 @@ impl Condvar {\n     /// use std::time::Duration;\n     ///\n     /// let pair = Arc::new((Mutex::new(true), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -496,7 +496,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -536,7 +536,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;"}, {"sha": "240155b06b4117f6f97ede9bd9304791da6f7a8d", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=aa81d32165dc9f0952bc520f223503aedd755b31", "patch": "@@ -88,7 +88,7 @@ use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n /// use std::thread;\n ///\n /// let lock = Arc::new(Mutex::new(0_u32));\n-/// let lock2 = lock.clone();\n+/// let lock2 = Arc::clone(&lock);\n ///\n /// let _ = thread::spawn(move || -> () {\n ///     // This thread will acquire the mutex first, unwrapping the result of\n@@ -259,7 +259,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// use std::thread;\n     ///\n     /// let mutex = Arc::new(Mutex::new(0));\n-    /// let c_mutex = mutex.clone();\n+    /// let c_mutex = Arc::clone(&mutex);\n     ///\n     /// thread::spawn(move || {\n     ///     *c_mutex.lock().unwrap() = 10;\n@@ -295,7 +295,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// use std::thread;\n     ///\n     /// let mutex = Arc::new(Mutex::new(0));\n-    /// let c_mutex = mutex.clone();\n+    /// let c_mutex = Arc::clone(&mutex);\n     ///\n     /// thread::spawn(move || {\n     ///     let mut lock = c_mutex.try_lock();\n@@ -331,7 +331,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// use std::thread;\n     ///\n     /// let mutex = Arc::new(Mutex::new(0));\n-    /// let c_mutex = mutex.clone();\n+    /// let c_mutex = Arc::clone(&mutex);\n     ///\n     /// let _ = thread::spawn(move || {\n     ///     let _lock = c_mutex.lock().unwrap();"}, {"sha": "f38d6101da0d3f9589cd44024fbdf966ee267905", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=aa81d32165dc9f0952bc520f223503aedd755b31", "patch": "@@ -165,7 +165,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// use std::thread;\n     ///\n     /// let lock = Arc::new(RwLock::new(1));\n-    /// let c_lock = lock.clone();\n+    /// let c_lock = Arc::clone(&lock);\n     ///\n     /// let n = lock.read().unwrap();\n     /// assert_eq!(*n, 1);\n@@ -321,7 +321,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// use std::thread;\n     ///\n     /// let lock = Arc::new(RwLock::new(0));\n-    /// let c_lock = lock.clone();\n+    /// let c_lock = Arc::clone(&lock);\n     ///\n     /// let _ = thread::spawn(move || {\n     ///     let _lock = c_lock.write().unwrap();"}, {"sha": "2ab2c700a1bf16d4677c9370a36055063082beb9", "filename": "library/std/src/sys_common/poison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa81d32165dc9f0952bc520f223503aedd755b31/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs?ref=aa81d32165dc9f0952bc520f223503aedd755b31", "patch": "@@ -65,7 +65,7 @@ pub struct Guard {\n /// let mutex = Arc::new(Mutex::new(1));\n ///\n /// // poison the mutex\n-/// let c_mutex = mutex.clone();\n+/// let c_mutex = Arc::clone(&mutex);\n /// let _ = thread::spawn(move || {\n ///     let mut data = c_mutex.lock().unwrap();\n ///     *data = 2;\n@@ -168,7 +168,7 @@ impl<T> PoisonError<T> {\n     /// let mutex = Arc::new(Mutex::new(HashSet::new()));\n     ///\n     /// // poison the mutex\n-    /// let c_mutex = mutex.clone();\n+    /// let c_mutex = Arc::clone(&mutex);\n     /// let _ = thread::spawn(move || {\n     ///     let mut data = c_mutex.lock().unwrap();\n     ///     data.insert(10);"}]}