{"sha": "606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNmZlYmE1YmJmYTYxZWY5NTYyZmQyZjU4MzgzM2VkNWMxM2ZmZGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-09T03:04:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-09T03:04:03Z"}, "message": "Rollup merge of #85957 - BoxyUwU:rustdoc-const-generic-defaults, r=oli-obk\n\nDisplay defaults on const params- rustdoc\n\npreviously rustdoc would render this struct declaration:\n`pub struct Foo<const N: usize = 10>;`\nas:\n`pub struct Foo<const N: usize>;`\nthis PR changes it to render correctly", "tree": {"sha": "e88bf1670e03fe13197c73408a9a523897d4a3b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e88bf1670e03fe13197c73408a9a523897d4a3b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwC+jCRBK7hj4Ov3rIwAAy4UIAE4k7y6HZN+RZbOsYBUVxE1L\nr+4fpbGODT5i6O0uB/wom0x5XsnInd/LKpupzE9kicI2dz3h7kKIS3Ov1j6QKsrb\nWwte1dSvW5xImtS2sFnGgwZUVS4EuUiggFrKUPyZrTPs9wShGtB4zwrXBbvl5J9W\nH/SI2bPggO3kliD88VgOe+5vgHkYxvmi0sxra7GHEbwZEQrf8BSYCJW3Ruxl0SyC\niPlv8H83O8fDimy/1XvLoBkornh1oZ3cZ869CgnNXxIX7w7YoV9/2auQkZ9FLOgn\nBYoU1mrGOKsMtr9VMlXnMvEU/laxh3EoBMfGDWlnwBl4xA++A+UXYKsdwh7bweo=\n=L9Qh\n-----END PGP SIGNATURE-----\n", "payload": "tree e88bf1670e03fe13197c73408a9a523897d4a3b6\nparent 3bc822155807e3915a5455f8d08a06d0a8698086\nparent f7117f8c177c63d6aadfb569550839b4add617a9\nauthor Yuki Okushi <jtitor@2k36.org> 1623207843 +0900\ncommitter GitHub <noreply@github.com> 1623207843 +0900\n\nRollup merge of #85957 - BoxyUwU:rustdoc-const-generic-defaults, r=oli-obk\n\nDisplay defaults on const params- rustdoc\n\npreviously rustdoc would render this struct declaration:\n`pub struct Foo<const N: usize = 10>;`\nas:\n`pub struct Foo<const N: usize>;`\nthis PR changes it to render correctly\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "html_url": "https://github.com/rust-lang/rust/commit/606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc822155807e3915a5455f8d08a06d0a8698086", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc822155807e3915a5455f8d08a06d0a8698086", "html_url": "https://github.com/rust-lang/rust/commit/3bc822155807e3915a5455f8d08a06d0a8698086"}, {"sha": "f7117f8c177c63d6aadfb569550839b4add617a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7117f8c177c63d6aadfb569550839b4add617a9", "html_url": "https://github.com/rust-lang/rust/commit/f7117f8c177c63d6aadfb569550839b4add617a9"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "a3f63ea1046e32c45859b3340634a2f793d591e4", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "patch": "@@ -664,7 +664,10 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     }\n                 }\n                 GenericParamDefKind::Lifetime => {}\n-                GenericParamDefKind::Const { .. } => {}\n+                GenericParamDefKind::Const { ref mut default, .. } => {\n+                    // We never want something like `impl<const N: usize = 10>`\n+                    default.take();\n+                }\n             }\n         }\n "}, {"sha": "d1c18821ea644f9defcf73b72029c422141b0a53", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "patch": "@@ -445,11 +445,15 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     },\n                 )\n             }\n-            ty::GenericParamDefKind::Const { .. } => (\n+            ty::GenericParamDefKind::Const { has_default, .. } => (\n                 self.name,\n                 GenericParamDefKind::Const {\n                     did: self.def_id,\n                     ty: cx.tcx.type_of(self.def_id).clean(cx),\n+                    default: match has_default {\n+                        true => Some(cx.tcx.const_param_default(self.def_id).to_string()),\n+                        false => None,\n+                    },\n                 },\n             ),\n         };\n@@ -487,12 +491,15 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                     synthetic,\n                 },\n             ),\n-            hir::GenericParamKind::Const { ref ty, default: _ } => (\n+            hir::GenericParamKind::Const { ref ty, default } => (\n                 self.name.ident().name,\n                 GenericParamDefKind::Const {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n                     ty: ty.clean(cx),\n-                    // FIXME(const_generics_defaults): add `default` field here for docs\n+                    default: default.map(|ct| {\n+                        let def_id = cx.tcx.hir().local_def_id(ct.hir_id);\n+                        ty::Const::from_anon_const(cx.tcx, def_id).to_string()\n+                    }),\n                 },\n             ),\n         };"}, {"sha": "6a7c3f8caa49fdd80a8a4382eb0bdb3ed0b45330", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "patch": "@@ -1220,6 +1220,7 @@ crate enum GenericParamDefKind {\n     Const {\n         did: DefId,\n         ty: Type,\n+        default: Option<String>,\n     },\n }\n "}, {"sha": "918a5cb5094305c4c9b68bb6b6425495c75c58b6", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "patch": "@@ -177,12 +177,22 @@ impl clean::GenericParamDef {\n \n                 Ok(())\n             }\n-            clean::GenericParamDefKind::Const { ref ty, .. } => {\n+            clean::GenericParamDefKind::Const { ref ty, ref default, .. } => {\n                 if f.alternate() {\n-                    write!(f, \"const {}: {:#}\", self.name, ty.print(cx))\n+                    write!(f, \"const {}: {:#}\", self.name, ty.print(cx))?;\n                 } else {\n-                    write!(f, \"const {}:&nbsp;{}\", self.name, ty.print(cx))\n+                    write!(f, \"const {}:&nbsp;{}\", self.name, ty.print(cx))?;\n                 }\n+\n+                if let Some(default) = default {\n+                    if f.alternate() {\n+                        write!(f, \" = {:#}\", default)?;\n+                    } else {\n+                        write!(f, \"&nbsp;=&nbsp;{}\", default)?;\n+                    }\n+                }\n+\n+                Ok(())\n             }\n         })\n     }"}, {"sha": "7086dd8c4d25832c2ceee26ff955f727bf6c9fb9", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "patch": "@@ -317,7 +317,9 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n                 default: default.map(|x| x.into_tcx(tcx)),\n             },\n-            Const { did: _, ty } => GenericParamDefKind::Const(ty.into_tcx(tcx)),\n+            Const { did: _, ty, default } => {\n+                GenericParamDefKind::Const { ty: ty.into_tcx(tcx), default }\n+            }\n         }\n     }\n }"}, {"sha": "0d84bf250c9e3016705e26f6526e548b9ef9118e", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "patch": "@@ -234,7 +234,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 5,\n+            format_version: 6,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "6d9a5cb515a480420aa521320303988678c8f408", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "patch": "@@ -324,7 +324,7 @@ pub struct GenericParamDef {\n pub enum GenericParamDefKind {\n     Lifetime,\n     Type { bounds: Vec<GenericBound>, default: Option<Type> },\n-    Const(Type),\n+    Const { ty: Type, default: Option<String> },\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "efe35bf7aa4422e1b274ba49e09d8a5ae930bc08", "filename": "src/test/rustdoc/const-generics/const-generic-defaults.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606feba5bbfa61ef9562fd2f583833ed5c13ffdc/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs?ref=606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "patch": "@@ -0,0 +1,6 @@\n+#![crate_name = \"foo\"]\n+#![feature(const_generics_defaults)]\n+\n+// @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n+//      'pub struct Foo<const M: usize = 10_usize, const N: usize = M, T = i32>(_);'\n+pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(T);"}]}