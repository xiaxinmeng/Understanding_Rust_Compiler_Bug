{"sha": "4ddedd521418d67e845ecb43dc02c09b0af53022", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZGVkZDUyMTQxOGQ2N2U4NDVlY2I0M2RjMDJjMDliMGFmNTMwMjI=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-08-14T20:39:04Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-08-14T20:41:13Z"}, "message": "perform copy_file_range until EOF is reached instead of basing things on file size\n\nThis solves several problems\n\n- race conditions where a file is truncated while copying from it. if we blindly trusted\n  the file size this would lead to an infinite loop\n- proc files appearing empty to copy_file_range but not to read/write\n  https://github.com/coreutils/coreutils/commit/4b04a0c\n- copy_file_range returning 0 for some filesystems (overlay? bind mounts?)\n  inside docker, again leading to an infinite loop", "tree": {"sha": "d7f8149d8fa529b0c85e65c9265916e0768ccf4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7f8149d8fa529b0c85e65c9265916e0768ccf4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ddedd521418d67e845ecb43dc02c09b0af53022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ddedd521418d67e845ecb43dc02c09b0af53022", "html_url": "https://github.com/rust-lang/rust/commit/4ddedd521418d67e845ecb43dc02c09b0af53022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ddedd521418d67e845ecb43dc02c09b0af53022/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0783632d315db90c0ca34d79d56207d132f3764", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0783632d315db90c0ca34d79d56207d132f3764", "html_url": "https://github.com/rust-lang/rust/commit/f0783632d315db90c0ca34d79d56207d132f3764"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "566ac0920dc8f5762842b3585c20fc1cb5fc6d06", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ddedd521418d67e845ecb43dc02c09b0af53022/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ddedd521418d67e845ecb43dc02c09b0af53022/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=4ddedd521418d67e845ecb43dc02c09b0af53022", "patch": "@@ -1140,14 +1140,14 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     }\n \n     let (mut reader, reader_metadata) = open_from(from)?;\n-    let len = reader_metadata.len();\n+    let max_len = u64::MAX;\n     let (mut writer, _) = open_to_and_set_permissions(to, reader_metadata)?;\n \n     let has_copy_file_range = HAS_COPY_FILE_RANGE.load(Ordering::Relaxed);\n     let mut written = 0u64;\n-    while written < len {\n+    while written < max_len {\n         let copy_result = if has_copy_file_range {\n-            let bytes_to_copy = cmp::min(len - written, usize::MAX as u64) as usize;\n+            let bytes_to_copy = cmp::min(max_len - written, usize::MAX as u64) as usize;\n             let copy_result = unsafe {\n                 // We actually don't have to adjust the offsets,\n                 // because copy_file_range adjusts the file offset automatically\n@@ -1173,6 +1173,15 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n             Err(io::Error::from_raw_os_error(libc::ENOSYS))\n         };\n         match copy_result {\n+            Ok(0) if written == 0 => {\n+                // fallback to work around several kernel bugs where copy_file_range will fail to\n+                // copy any bytes and return 0 instead of an error if\n+                // - reading virtual files from the proc filesystem which appear to have 0 size\n+                //   but are not empty. noted in coreutils to affect kernels at least up to 5.6.19.\n+                // - copying from an overlay filesystem in docker. reported to occur on fedora 32.\n+                return io::copy(&mut reader, &mut writer);\n+            }\n+            Ok(0) => return Ok(written), // reached EOF\n             Ok(ret) => written += ret as u64,\n             Err(err) => {\n                 match err.raw_os_error() {"}]}