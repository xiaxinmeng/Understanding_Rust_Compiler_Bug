{"sha": "44e2c6ea9207264a86d05344b67999d77687edb6", "node_id": "C_kwDOAAsO6NoAKDQ0ZTJjNmVhOTIwNzI2NGE4NmQwNTM0NGI2Nzk5OWQ3NzY4N2VkYjY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-03T09:41:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-03T09:42:49Z"}, "message": "Don't emit two type mismatches for literal pattern mismatches", "tree": {"sha": "8492aa0b56c639dbf087f6b44275d30d7ef5f1d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8492aa0b56c639dbf087f6b44275d30d7ef5f1d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e2c6ea9207264a86d05344b67999d77687edb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e2c6ea9207264a86d05344b67999d77687edb6", "html_url": "https://github.com/rust-lang/rust/commit/44e2c6ea9207264a86d05344b67999d77687edb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e2c6ea9207264a86d05344b67999d77687edb6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec273c3d12b7393f6b81e793ce1c7abd59e3dc67", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec273c3d12b7393f6b81e793ce1c7abd59e3dc67", "html_url": "https://github.com/rust-lang/rust/commit/ec273c3d12b7393f6b81e793ce1c7abd59e3dc67"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "4c97eabd9ce0117a4dfd69f93e7764f6b3721987", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44e2c6ea9207264a86d05344b67999d77687edb6/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e2c6ea9207264a86d05344b67999d77687edb6/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=44e2c6ea9207264a86d05344b67999d77687edb6", "patch": "@@ -181,8 +181,8 @@ impl<'a> InferenceContext<'a> {\n             .intern(Interner)\n     }\n \n-    pub(super) fn infer_top_pat(&mut self, pat: PatId, expected: &Ty) -> Ty {\n-        self.infer_pat(pat, expected, BindingMode::default())\n+    pub(super) fn infer_top_pat(&mut self, pat: PatId, expected: &Ty) {\n+        self.infer_pat(pat, expected, BindingMode::default());\n     }\n \n     fn infer_pat(&mut self, pat: PatId, expected: &Ty, mut default_bm: BindingMode) -> Ty {\n@@ -260,7 +260,12 @@ impl<'a> InferenceContext<'a> {\n                 let start_ty = self.infer_expr(*start, &Expectation::has_type(expected.clone()));\n                 self.infer_expr(*end, &Expectation::has_type(start_ty))\n             }\n-            &Pat::Lit(expr) => self.infer_lit_pat(expr, &expected),\n+            &Pat::Lit(expr) => {\n+                // Don't emit type mismatches again, the expression lowering already did that.\n+                let ty = self.infer_lit_pat(expr, &expected);\n+                self.write_pat_ty(pat, ty.clone());\n+                return ty;\n+            }\n             Pat::Box { inner } => match self.resolve_boxed_box() {\n                 Some(box_adt) => {\n                     let (inner_ty, alloc_ty) = match expected.as_adt() {"}, {"sha": "2026a2d4b8a0ced962a92dd7d755033fef6b8a58", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44e2c6ea9207264a86d05344b67999d77687edb6/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e2c6ea9207264a86d05344b67999d77687edb6/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=44e2c6ea9207264a86d05344b67999d77687edb6", "patch": "@@ -54,7 +54,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch) -> Option<Vec<Assi\n             remove_semicolon(ctx, d, expr_ptr, &mut fixes);\n             str_ref_to_owned(ctx, d, expr_ptr, &mut fixes);\n         }\n-        Either::Right(_pat_ptr) => (),\n+        Either::Right(_pat_ptr) => {}\n     }\n \n     if fixes.is_empty() {\n@@ -63,14 +63,6 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch) -> Option<Vec<Assi\n         Some(fixes)\n     }\n }\n-fn add_reference_pat(\n-    ctx: &DiagnosticsContext<'_>,\n-    d: &hir::TypeMismatch,\n-    expr_ptr: &InFile<AstPtr<ast::Pat>>,\n-    acc: &mut Vec<Assist>,\n-) -> Option<()> {\n-    None\n-}\n \n fn add_reference(\n     ctx: &DiagnosticsContext<'_>,\n@@ -630,7 +622,6 @@ fn f() {\n         &9 => ()\n       //^^ error: expected &(), found &i32\n        //^ error: expected (), found i32\n-       //^ error: expected (), found i32\n     }\n }\n \"#,"}]}