{"sha": "83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZDJjMGI4YTZmNmMyY2UyNWZlNDhiNTQxZjE3NmVhODhiZThkOTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-08T21:31:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:22:00Z"}, "message": "rustc: Disallow importing through use statements\n\nResolve is currently erroneously allowing imports through private `use`\nstatements in some circumstances, even across module boundaries. For example,\nthis code compiles successfully today:\n\n    use std::c_str;\n    mod test {\n        use c_str::CString;\n    }\n\nThis should not be allowed because it was explicitly decided that private `use`\nstatements are purely bringing local names into scope, they are not\nparticipating further in name resolution.\n\nAs a consequence of this patch, this code, while valid today, is now invalid:\n\n    mod test {\n        use std::c_str;\n\n        unsafe fn foo() {\n            ::test::c_str::CString::new(0 as *u8, false);\n        }\n    }\n\nWhile plausibly acceptable, I found it to be more consistent if private imports\nwere only considered candidates to resolve the first component in a path, and no\nothers.\n\nCloses #12612", "tree": {"sha": "c3fe31457b4a636e8ff9745f5a86fb5734677fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3fe31457b4a636e8ff9745f5a86fb5734677fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "html_url": "https://github.com/rust-lang/rust/commit/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bf4e900d421f011d7c68016308aab4998f9084e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf4e900d421f011d7c68016308aab4998f9084e", "html_url": "https://github.com/rust-lang/rust/commit/0bf4e900d421f011d7c68016308aab4998f9084e"}], "stats": {"total": 119, "additions": 101, "deletions": 18}, "files": [{"sha": "de515659bf7adc3c87d94899a92191f5f5aaf8c4", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "patch": "@@ -324,7 +324,7 @@ pub fn mkdir(p: &CString, _mode: io::FilePermission) -> IoResult<()> {\n }\n \n pub fn readdir(p: &CString) -> IoResult<Vec<Path>> {\n-    use rt::global_heap::malloc_raw;\n+    use std::rt::global_heap::malloc_raw;\n \n     fn prune(root: &CString, dirs: Vec<Path>) -> Vec<Path> {\n         let root = unsafe { CString::new(root.with_ref(|p| p), false) };"}, {"sha": "dff3d8b03bcbf6709f843c14da5050a92ed9ceb7", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "patch": "@@ -297,20 +297,22 @@ mod __test {\n \n fn mk_std(cx: &TestCtxt) -> ast::ViewItem {\n     let id_test = token::str_to_ident(\"test\");\n-    let vi = if cx.is_test_crate {\n-        ast::ViewItemUse(\n+    let (vi, vis) = if cx.is_test_crate {\n+        (ast::ViewItemUse(\n             vec!(@nospan(ast::ViewPathSimple(id_test,\n                                              path_node(vec!(id_test)),\n-                                             ast::DUMMY_NODE_ID))))\n+                                             ast::DUMMY_NODE_ID)))),\n+         ast::Public)\n     } else {\n-        ast::ViewItemExternCrate(id_test,\n+        (ast::ViewItemExternCrate(id_test,\n                                with_version(\"test\"),\n-                               ast::DUMMY_NODE_ID)\n+                               ast::DUMMY_NODE_ID),\n+         ast::Inherited)\n     };\n     ast::ViewItem {\n         node: vi,\n         attrs: Vec::new(),\n-        vis: ast::Inherited,\n+        vis: vis,\n         span: DUMMY_SP\n     }\n }"}, {"sha": "cfacf0ee3df979edf0de24178afa370959e8e730", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "patch": "@@ -2286,10 +2286,12 @@ impl<'a> Resolver<'a> {\n             }\n             Some(child_name_bindings) => {\n                 if child_name_bindings.defined_in_namespace(ValueNS) {\n+                    debug!(\"(resolving single import) found value binding\");\n                     value_result = BoundResult(containing_module,\n                                                *child_name_bindings);\n                 }\n                 if child_name_bindings.defined_in_namespace(TypeNS) {\n+                    debug!(\"(resolving single import) found type binding\");\n                     type_result = BoundResult(containing_module,\n                                               *child_name_bindings);\n                 }\n@@ -2320,6 +2322,7 @@ impl<'a> Resolver<'a> {\n                                                           .borrow();\n                 match import_resolutions.find(&source.name) {\n                     None => {\n+                        debug!(\"(resolving single import) no import\");\n                         // The containing module definitely doesn't have an\n                         // exported import with the name in question. We can\n                         // therefore accurately report that the names are\n@@ -2353,6 +2356,8 @@ impl<'a> Resolver<'a> {\n                                     return UnboundResult;\n                                 }\n                                 Some(target) => {\n+                                    debug!(\"(resolving single import) found \\\n+                                            import in ns {:?}\", namespace);\n                                     let id = import_resolution.id(namespace);\n                                     this.used_imports.insert((id, namespace));\n                                     return BoundResult(target.target_module,\n@@ -2396,6 +2401,8 @@ impl<'a> Resolver<'a> {\n                                        .find_copy(&source.name) {\n                     None => {} // Continue.\n                     Some(module) => {\n+                        debug!(\"(resolving single import) found external \\\n+                                module\");\n                         let name_bindings =\n                             @Resolver::create_name_bindings_from_module(\n                                 module);\n@@ -2669,7 +2676,8 @@ impl<'a> Resolver<'a> {\n             match self.resolve_name_in_module(search_module,\n                                               name,\n                                               TypeNS,\n-                                              name_search_type) {\n+                                              name_search_type,\n+                                              false) {\n                 Failed => {\n                     let segment_name = token::get_ident(name);\n                     let module_name = self.module_to_str(search_module);\n@@ -2977,7 +2985,8 @@ impl<'a> Resolver<'a> {\n             match self.resolve_name_in_module(search_module,\n                                               name,\n                                               namespace,\n-                                              PathSearch) {\n+                                              PathSearch,\n+                                              true) {\n                 Failed => {\n                     // Continue up the search chain.\n                 }\n@@ -3141,7 +3150,8 @@ impl<'a> Resolver<'a> {\n                               module_: @Module,\n                               name: Ident,\n                               namespace: Namespace,\n-                              name_search_type: NameSearchType)\n+                              name_search_type: NameSearchType,\n+                              allow_private_imports: bool)\n                               -> ResolveResult<(Target, bool)> {\n         debug!(\"(resolving name in module) resolving `{}` in `{}`\",\n                token::get_ident(name),\n@@ -3172,7 +3182,9 @@ impl<'a> Resolver<'a> {\n \n         // Check the list of resolved imports.\n         match module_.import_resolutions.borrow().find(&name.name) {\n-            Some(import_resolution) => {\n+            Some(import_resolution) if allow_private_imports ||\n+                                       import_resolution.is_public.get() => {\n+\n                 if import_resolution.is_public.get() &&\n                         import_resolution.outstanding_references.get() != 0 {\n                     debug!(\"(resolving name in module) import \\\n@@ -3193,7 +3205,7 @@ impl<'a> Resolver<'a> {\n                     }\n                 }\n             }\n-            None => {} // Continue.\n+            Some(..) | None => {} // Continue.\n         }\n \n         // Finally, search through external children."}, {"sha": "a0234c1185a9789f8e449952538dba150886f0fa", "filename": "src/test/auxiliary/issue-12612-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Fauxiliary%2Fissue-12612-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Fauxiliary%2Fissue-12612-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-12612-1.rs?ref=83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod bar {\n+    pub fn foo() {}\n+}"}, {"sha": "b4ae4374b2e58001196decbb9e3cc814eb30f5f8", "filename": "src/test/auxiliary/issue-12612-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Fauxiliary%2Fissue-12612-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Fauxiliary%2Fissue-12612-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-12612-2.rs?ref=83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn baz() {}"}, {"sha": "9d6eb42567893e382c0b529d791bdc90a645006f", "filename": "src/test/compile-fail/issue-12612.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs?ref=83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-12612-1.rs\n+\n+extern crate foo = \"issue-12612-1\";\n+\n+use foo::bar;\n+\n+mod test {\n+    use bar::foo;\n+    //~^ ERROR: unresolved import\n+    //~^^ ERROR: failed to resolve import\n+}\n+\n+fn main() {}\n+"}, {"sha": "7e51c6ad2aebbe2cd1679392047a5a13c884816d", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate ser = \"serialize\";\n+extern crate serialize;\n \n-use serialize = self::ser;\n- //necessary for deriving(Encodable)\n-use ser::{Encodable, Encoder};\n-use ser::json;\n-use ser::ebml::writer;\n+use serialize::{Encodable, Encoder};\n+use serialize::json;\n+use serialize::ebml::writer;\n use std::io::MemWriter;\n use std::str::from_utf8_owned;\n "}, {"sha": "fcb658036b6b1e0ac6ac2e275ba90616f6249ffa", "filename": "src/test/run-pass/issue-12612.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Frun-pass%2Fissue-12612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99/src%2Ftest%2Frun-pass%2Fissue-12612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12612.rs?ref=83d2c0b8a6f6c2ce25fe48b541f176ea88be8d99", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-12612-1.rs\n+// aux-build:issue-12612-2.rs\n+\n+extern crate foo = \"issue-12612-1\";\n+extern crate bar = \"issue-12612-2\";\n+\n+use foo::bar;\n+\n+mod test {\n+    use bar::baz;\n+}\n+\n+fn main() {}"}]}