{"sha": "b885e6bdeeb1023df53b3f292cfe301448eeaeef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ODVlNmJkZWViMTAyM2RmNTNiM2YyOTJjZmUzMDE0NDhlZWFlZWY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-09T18:09:02Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-09T18:09:02Z"}, "message": "Delete `ContainerId`", "tree": {"sha": "e2f4fc606210a3adaa9d43e58e822ac4d5cec988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2f4fc606210a3adaa9d43e58e822ac4d5cec988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b885e6bdeeb1023df53b3f292cfe301448eeaeef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b885e6bdeeb1023df53b3f292cfe301448eeaeef", "html_url": "https://github.com/rust-lang/rust/commit/b885e6bdeeb1023df53b3f292cfe301448eeaeef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b885e6bdeeb1023df53b3f292cfe301448eeaeef/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "html_url": "https://github.com/rust-lang/rust/commit/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de"}], "stats": {"total": 161, "additions": 61, "deletions": 100}, "files": [{"sha": "4ef38c0f0d605f7ce21fa1351ff2bea5a71bba7c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -535,7 +535,7 @@ pub struct Struct {\n \n impl Struct {\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n-        Module { id: self.id.lookup(db.upcast()).container.module(db.upcast()) }\n+        Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n     pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n@@ -556,11 +556,7 @@ impl Struct {\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n-        Type::from_def(\n-            db,\n-            self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n-            self.id,\n-        )\n+        Type::from_def(db, self.id.lookup(db.upcast()).container.krate(), self.id)\n     }\n \n     pub fn repr(self, db: &dyn HirDatabase) -> Option<ReprKind> {\n@@ -587,15 +583,11 @@ impl Union {\n     }\n \n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n-        Module { id: self.id.lookup(db.upcast()).container.module(db.upcast()) }\n+        Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n-        Type::from_def(\n-            db,\n-            self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n-            self.id,\n-        )\n+        Type::from_def(db, self.id.lookup(db.upcast()).container.krate(), self.id)\n     }\n \n     pub fn fields(self, db: &dyn HirDatabase) -> Vec<Field> {\n@@ -619,7 +611,7 @@ pub struct Enum {\n \n impl Enum {\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n-        Module { id: self.id.lookup(db.upcast()).container.module(db.upcast()) }\n+        Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n     pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n@@ -635,11 +627,7 @@ impl Enum {\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n-        Type::from_def(\n-            db,\n-            self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n-            self.id,\n-        )\n+        Type::from_def(db, self.id.lookup(db.upcast()).container.krate(), self.id)\n     }\n }\n \n@@ -1001,7 +989,7 @@ pub struct Trait {\n \n impl Trait {\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n-        Module { id: self.id.lookup(db.upcast()).container.module(db.upcast()) }\n+        Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n@@ -1510,7 +1498,7 @@ impl Impl {\n     pub fn target_ty(self, db: &dyn HirDatabase) -> Type {\n         let impl_data = db.impl_data(self.id);\n         let resolver = self.id.resolver(db.upcast());\n-        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n+        let krate = self.id.lookup(db.upcast()).container.krate();\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let ty = Ty::from_hir(&ctx, &impl_data.target_type);\n         Type::new_with_resolver_inner(db, krate, &resolver, ty)\n@@ -1525,7 +1513,7 @@ impl Impl {\n     }\n \n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n-        self.id.lookup(db.upcast()).container.module(db.upcast()).into()\n+        self.id.lookup(db.upcast()).container.into()\n     }\n \n     pub fn krate(self, db: &dyn HirDatabase) -> Crate {"}, {"sha": "efbde17d887df42d74c12b0a541b4e7f6a753adf", "filename": "crates/hir_def/src/adt.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fadt.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -21,8 +21,7 @@ use crate::{\n     trace::Trace,\n     type_ref::TypeRef,\n     visibility::RawVisibility,\n-    EnumId, HasModule, LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StructId, UnionId,\n-    VariantId,\n+    EnumId, LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StructId, UnionId, VariantId,\n };\n use cfg::CfgOptions;\n \n@@ -92,10 +91,10 @@ fn parse_repr_tt(tt: &Subtree) -> Option<ReprKind> {\n impl StructData {\n     pub(crate) fn struct_data_query(db: &dyn DefDatabase, id: StructId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n-        let krate = loc.container.module(db).krate;\n+        let krate = loc.container.krate;\n         let item_tree = db.item_tree(loc.id.file_id);\n         let repr = repr_from_value(db, krate, &item_tree, ModItem::from(loc.id.value).into());\n-        let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n+        let cfg_options = db.crate_graph()[loc.container.krate].cfg_options.clone();\n \n         let strukt = &item_tree[loc.id.value];\n         let variant_data = lower_fields(db, krate, &item_tree, &cfg_options, &strukt.fields, None);\n@@ -107,10 +106,10 @@ impl StructData {\n     }\n     pub(crate) fn union_data_query(db: &dyn DefDatabase, id: UnionId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n-        let krate = loc.container.module(db).krate;\n+        let krate = loc.container.krate;\n         let item_tree = db.item_tree(loc.id.file_id);\n         let repr = repr_from_value(db, krate, &item_tree, ModItem::from(loc.id.value).into());\n-        let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n+        let cfg_options = db.crate_graph()[loc.container.krate].cfg_options.clone();\n \n         let union = &item_tree[loc.id.value];\n         let variant_data = lower_fields(db, krate, &item_tree, &cfg_options, &union.fields, None);\n@@ -126,7 +125,7 @@ impl StructData {\n impl EnumData {\n     pub(crate) fn enum_data_query(db: &dyn DefDatabase, e: EnumId) -> Arc<EnumData> {\n         let loc = e.lookup(db);\n-        let krate = loc.container.module(db).krate;\n+        let krate = loc.container.krate;\n         let item_tree = db.item_tree(loc.id.file_id);\n         let cfg_options = db.crate_graph()[krate].cfg_options.clone();\n \n@@ -168,7 +167,7 @@ impl HasChildSource<LocalEnumVariantId> for EnumId {\n     ) -> InFile<ArenaMap<LocalEnumVariantId, Self::Value>> {\n         let src = self.lookup(db).source(db);\n         let mut trace = Trace::new_for_map();\n-        lower_enum(db, &mut trace, &src, self.lookup(db).container.module(db));\n+        lower_enum(db, &mut trace, &src, self.lookup(db).container);\n         src.with_value(trace.into_map())\n     }\n }\n@@ -238,18 +237,18 @@ impl HasChildSource<LocalFieldId> for VariantId {\n                 // I don't really like the fact that we call into parent source\n                 // here, this might add to more queries then necessary.\n                 let src = it.parent.child_source(db);\n-                (src.map(|map| map[it.local_id].kind()), it.parent.lookup(db).container.module(db))\n+                (src.map(|map| map[it.local_id].kind()), it.parent.lookup(db).container)\n             }\n             VariantId::StructId(it) => {\n-                (it.lookup(db).source(db).map(|it| it.kind()), it.lookup(db).container.module(db))\n+                (it.lookup(db).source(db).map(|it| it.kind()), it.lookup(db).container)\n             }\n             VariantId::UnionId(it) => (\n                 it.lookup(db).source(db).map(|it| {\n                     it.record_field_list()\n                         .map(ast::StructKind::Record)\n                         .unwrap_or(ast::StructKind::Unit)\n                 }),\n-                it.lookup(db).container.module(db),\n+                it.lookup(db).container,\n             ),\n         };\n         let mut expander = CfgExpander::new(db, src.file_id, module_id.krate);"}, {"sha": "97cdbbb9e966ae227ead4887f827079cfa2f680a", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -267,7 +267,7 @@ impl Attrs {\n         db: &dyn DefDatabase,\n         e: EnumId,\n     ) -> Arc<ArenaMap<LocalEnumVariantId, Attrs>> {\n-        let krate = e.lookup(db).container.module(db).krate;\n+        let krate = e.lookup(db).container.krate;\n         let src = e.child_source(db);\n         let mut res = ArenaMap::default();\n "}, {"sha": "aea53d527e14dc2964b837d272903442ce3506f8", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -97,7 +97,7 @@ impl TraitData {\n         let tr_def = &item_tree[tr_loc.id.value];\n         let name = tr_def.name.clone();\n         let auto = tr_def.auto;\n-        let module_id = tr_loc.container.module(db);\n+        let module_id = tr_loc.container;\n         let container = AssocContainerId::TraitId(tr);\n         let mut expander = Expander::new(db, tr_loc.id.file_id, module_id);\n \n@@ -147,7 +147,7 @@ impl ImplData {\n         let target_trait = impl_def.target_trait.map(|id| item_tree[id].clone());\n         let target_type = item_tree[impl_def.target_type].clone();\n         let is_negative = impl_def.is_negative;\n-        let module_id = impl_loc.container.module(db);\n+        let module_id = impl_loc.container;\n         let container = AssocContainerId::ImplId(id);\n         let mut expander = Expander::new(db, impl_loc.id.file_id, module_id);\n "}, {"sha": "6d11c5be415d67015af772d18f8e9e2497391ac2", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 17, "deletions": 33, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -108,7 +108,7 @@ pub type LocalModuleId = Idx<nameres::ModuleData>;\n \n #[derive(Debug)]\n pub struct ItemLoc<N: ItemTreeNode> {\n-    pub container: ContainerId,\n+    pub container: ModuleId,\n     pub id: ItemTreeId<N>,\n }\n \n@@ -278,12 +278,6 @@ pub struct ConstParamId {\n }\n pub type LocalConstParamId = Idx<generics::ConstParamData>;\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum ContainerId {\n-    ModuleId(ModuleId),\n-    DefWithBodyId(DefWithBodyId),\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum AssocContainerId {\n     ModuleId(ModuleId),\n@@ -447,21 +441,12 @@ pub trait HasModule {\n     fn module(&self, db: &dyn db::DefDatabase) -> ModuleId;\n }\n \n-impl HasModule for ContainerId {\n-    fn module(&self, db: &dyn db::DefDatabase) -> ModuleId {\n-        match *self {\n-            ContainerId::ModuleId(it) => it,\n-            ContainerId::DefWithBodyId(it) => it.module(db),\n-        }\n-    }\n-}\n-\n impl HasModule for AssocContainerId {\n     fn module(&self, db: &dyn db::DefDatabase) -> ModuleId {\n         match *self {\n             AssocContainerId::ModuleId(it) => it,\n-            AssocContainerId::ImplId(it) => it.lookup(db).container.module(db),\n-            AssocContainerId::TraitId(it) => it.lookup(db).container.module(db),\n+            AssocContainerId::ImplId(it) => it.lookup(db).container,\n+            AssocContainerId::TraitId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -479,16 +464,15 @@ impl HasModule for AdtId {\n             AdtId::UnionId(it) => it.lookup(db).container,\n             AdtId::EnumId(it) => it.lookup(db).container,\n         }\n-        .module(db)\n     }\n }\n \n impl HasModule for VariantId {\n     fn module(&self, db: &dyn db::DefDatabase) -> ModuleId {\n         match self {\n-            VariantId::EnumVariantId(it) => it.parent.lookup(db).container.module(db),\n-            VariantId::StructId(it) => it.lookup(db).container.module(db),\n-            VariantId::UnionId(it) => it.lookup(db).container.module(db),\n+            VariantId::EnumVariantId(it) => it.parent.lookup(db).container,\n+            VariantId::StructId(it) => it.lookup(db).container,\n+            VariantId::UnionId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -518,18 +502,18 @@ impl HasModule for GenericDefId {\n         match self {\n             GenericDefId::FunctionId(it) => it.lookup(db).module(db),\n             GenericDefId::AdtId(it) => it.module(db),\n-            GenericDefId::TraitId(it) => it.lookup(db).container.module(db),\n+            GenericDefId::TraitId(it) => it.lookup(db).container,\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n-            GenericDefId::ImplId(it) => it.lookup(db).container.module(db),\n-            GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container.module(db),\n+            GenericDefId::ImplId(it) => it.lookup(db).container,\n+            GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container,\n             GenericDefId::ConstId(it) => it.lookup(db).module(db),\n         }\n     }\n }\n \n impl HasModule for StaticLoc {\n-    fn module(&self, db: &dyn db::DefDatabase) -> ModuleId {\n-        self.container.module(db)\n+    fn module(&self, _db: &dyn db::DefDatabase) -> ModuleId {\n+        self.container\n     }\n }\n \n@@ -542,10 +526,10 @@ impl ModuleDefId {\n             ModuleDefId::ModuleId(id) => *id,\n             ModuleDefId::FunctionId(id) => id.lookup(db).module(db),\n             ModuleDefId::AdtId(id) => id.module(db),\n-            ModuleDefId::EnumVariantId(id) => id.parent.lookup(db).container.module(db),\n+            ModuleDefId::EnumVariantId(id) => id.parent.lookup(db).container,\n             ModuleDefId::ConstId(id) => id.lookup(db).container.module(db),\n-            ModuleDefId::StaticId(id) => id.lookup(db).container.module(db),\n-            ModuleDefId::TraitId(id) => id.lookup(db).container.module(db),\n+            ModuleDefId::StaticId(id) => id.lookup(db).container,\n+            ModuleDefId::TraitId(id) => id.lookup(db).container,\n             ModuleDefId::TypeAliasId(id) => id.lookup(db).module(db),\n             ModuleDefId::BuiltinType(_) => return None,\n         })\n@@ -559,12 +543,12 @@ impl AttrDefId {\n             AttrDefId::FieldId(it) => it.parent.module(db).krate,\n             AttrDefId::AdtId(it) => it.module(db).krate,\n             AttrDefId::FunctionId(it) => it.lookup(db).module(db).krate,\n-            AttrDefId::EnumVariantId(it) => it.parent.lookup(db).container.module(db).krate,\n+            AttrDefId::EnumVariantId(it) => it.parent.lookup(db).container.krate,\n             AttrDefId::StaticId(it) => it.lookup(db).module(db).krate,\n             AttrDefId::ConstId(it) => it.lookup(db).module(db).krate,\n-            AttrDefId::TraitId(it) => it.lookup(db).container.module(db).krate,\n+            AttrDefId::TraitId(it) => it.lookup(db).container.krate,\n             AttrDefId::TypeAliasId(it) => it.lookup(db).module(db).krate,\n-            AttrDefId::ImplId(it) => it.lookup(db).container.module(db).krate,\n+            AttrDefId::ImplId(it) => it.lookup(db).container.krate,\n             AttrDefId::GenericParamId(it) => {\n                 match it {\n                     GenericParamId::TypeParamId(it) => it.parent,"}, {"sha": "9ed48c506c30063baa6ffce3b55aa91b75bd68d4", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -37,9 +37,9 @@ use crate::{\n     path::{ImportAlias, ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n-    AdtId, AstId, AstIdWithPath, ConstLoc, ContainerId, EnumLoc, EnumVariantId, FunctionLoc,\n-    ImplLoc, Intern, LocalModuleId, ModuleDefId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc,\n-    UnionLoc, UnresolvedMacro,\n+    AdtId, AstId, AstIdWithPath, ConstLoc, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n+    LocalModuleId, ModuleDefId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n+    UnresolvedMacro,\n };\n \n const GLOB_RECURSION_LIMIT: usize = 100;\n@@ -1042,7 +1042,6 @@ impl ModCollector<'_, '_> {\n                 }\n             }\n             let module = self.def_collector.def_map.module_id(self.module_id);\n-            let container = ContainerId::ModuleId(module);\n \n             let mut def = None;\n             match item {\n@@ -1109,9 +1108,9 @@ impl ModCollector<'_, '_> {\n                 }\n                 ModItem::Impl(imp) => {\n                     let module = self.def_collector.def_map.module_id(self.module_id);\n-                    let container = ContainerId::ModuleId(module);\n-                    let impl_id = ImplLoc { container, id: ItemTreeId::new(self.file_id, imp) }\n-                        .intern(self.def_collector.db);\n+                    let impl_id =\n+                        ImplLoc { container: module, id: ItemTreeId::new(self.file_id, imp) }\n+                            .intern(self.def_collector.db);\n                     self.def_collector.def_map.modules[self.module_id].scope.define_impl(impl_id)\n                 }\n                 ModItem::Function(id) => {\n@@ -1140,7 +1139,7 @@ impl ModCollector<'_, '_> {\n                     self.collect_derives(&attrs, it.ast_id.upcast());\n \n                     def = Some(DefData {\n-                        id: StructLoc { container, id: ItemTreeId::new(self.file_id, id) }\n+                        id: StructLoc { container: module, id: ItemTreeId::new(self.file_id, id) }\n                             .intern(self.def_collector.db)\n                             .into(),\n                         name: &it.name,\n@@ -1157,7 +1156,7 @@ impl ModCollector<'_, '_> {\n                     self.collect_derives(&attrs, it.ast_id.upcast());\n \n                     def = Some(DefData {\n-                        id: UnionLoc { container, id: ItemTreeId::new(self.file_id, id) }\n+                        id: UnionLoc { container: module, id: ItemTreeId::new(self.file_id, id) }\n                             .intern(self.def_collector.db)\n                             .into(),\n                         name: &it.name,\n@@ -1174,7 +1173,7 @@ impl ModCollector<'_, '_> {\n                     self.collect_derives(&attrs, it.ast_id.upcast());\n \n                     def = Some(DefData {\n-                        id: EnumLoc { container, id: ItemTreeId::new(self.file_id, id) }\n+                        id: EnumLoc { container: module, id: ItemTreeId::new(self.file_id, id) }\n                             .intern(self.def_collector.db)\n                             .into(),\n                         name: &it.name,\n@@ -1203,7 +1202,7 @@ impl ModCollector<'_, '_> {\n                     let it = &self.item_tree[id];\n \n                     def = Some(DefData {\n-                        id: StaticLoc { container, id: ItemTreeId::new(self.file_id, id) }\n+                        id: StaticLoc { container: module, id: ItemTreeId::new(self.file_id, id) }\n                             .intern(self.def_collector.db)\n                             .into(),\n                         name: &it.name,\n@@ -1215,7 +1214,7 @@ impl ModCollector<'_, '_> {\n                     let it = &self.item_tree[id];\n \n                     def = Some(DefData {\n-                        id: TraitLoc { container, id: ItemTreeId::new(self.file_id, id) }\n+                        id: TraitLoc { container: module, id: ItemTreeId::new(self.file_id, id) }\n                             .intern(self.def_collector.db)\n                             .into(),\n                         name: &it.name,"}, {"sha": "42736171eb9398eecca66f0615239d3a7e17aed0", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -19,10 +19,10 @@ use crate::{\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n-    AdtId, AssocContainerId, ConstId, ConstParamId, ContainerId, DefWithBodyId, EnumId,\n-    EnumVariantId, FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, LifetimeParamId,\n-    LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n-    TypeParamId, VariantId,\n+    AdtId, AssocContainerId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId,\n+    FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, LifetimeParamId, LocalModuleId,\n+    Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n+    VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -688,15 +688,6 @@ impl HasResolver for DefWithBodyId {\n     }\n }\n \n-impl HasResolver for ContainerId {\n-    fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n-        match self {\n-            ContainerId::ModuleId(it) => it.resolver(db),\n-            ContainerId::DefWithBodyId(it) => it.module(db).resolver(db),\n-        }\n-    }\n-}\n-\n impl HasResolver for AssocContainerId {\n     fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n         match self {"}, {"sha": "ab51cb0a6ee4b42ac939b7545d43179fb4d3dc80", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -6,7 +6,7 @@ use arrayvec::ArrayVec;\n use chalk_ir::Mutability;\n use hir_def::{\n     db::DefDatabase, find_path, generics::TypeParamProvenance, item_scope::ItemInNs,\n-    AssocContainerId, HasModule, Lookup, ModuleId, TraitId,\n+    AssocContainerId, Lookup, ModuleId, TraitId,\n };\n use hir_expand::name::Name;\n \n@@ -611,7 +611,7 @@ impl HirDisplay for CallableSig {\n }\n \n fn fn_traits(db: &dyn DefDatabase, trait_: TraitId) -> impl Iterator<Item = TraitId> {\n-    let krate = trait_.lookup(db).container.module(db).krate();\n+    let krate = trait_.lookup(db).container.krate();\n     let fn_traits = [\n         db.lang_item(krate, \"fn\".into()),\n         db.lang_item(krate, \"fn_mut\".into()),"}, {"sha": "5fa83567b330f4a3d087d5c479356ced4bf4a4db", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -1130,8 +1130,8 @@ impl CallableDefId {\n         let db = db.upcast();\n         match self {\n             CallableDefId::FunctionId(f) => f.lookup(db).module(db),\n-            CallableDefId::StructId(s) => s.lookup(db).container.module(db),\n-            CallableDefId::EnumVariantId(e) => e.parent.lookup(db).container.module(db),\n+            CallableDefId::StructId(s) => s.lookup(db).container,\n+            CallableDefId::EnumVariantId(e) => e.parent.lookup(db).container,\n         }\n         .krate()\n     }"}, {"sha": "ccc12c07574d077d78545487a697c85172660750", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -267,7 +267,7 @@ impl Ty {\n                 LangItemTarget::ImplDefId(it) => Some(it),\n                 _ => None,\n             })\n-            .map(|it| it.lookup(db.upcast()).container.module(db.upcast()).krate())\n+            .map(|it| it.lookup(db.upcast()).container.krate())\n             .collect();\n         Some(res)\n     }"}, {"sha": "565672b6bff83c330df953876fbb2a873782a3fe", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b885e6bdeeb1023df53b3f292cfe301448eeaeef/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=b885e6bdeeb1023df53b3f292cfe301448eeaeef", "patch": "@@ -424,7 +424,7 @@ pub(crate) fn trait_datum_query(\n     let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n     let flags = rust_ir::TraitFlags {\n         auto: trait_data.auto,\n-        upstream: trait_.lookup(db.upcast()).container.module(db.upcast()).krate() != krate,\n+        upstream: trait_.lookup(db.upcast()).container.krate() != krate,\n         non_enumerable: true,\n         coinductive: false, // only relevant for Chalk testing\n         // FIXME: set these flags correctly\n@@ -548,7 +548,7 @@ fn impl_def_datum(\n     let generic_params = generics(db.upcast(), impl_id.into());\n     let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n     let trait_ = trait_ref.trait_;\n-    let impl_type = if impl_id.lookup(db.upcast()).container.module(db.upcast()).krate() == krate {\n+    let impl_type = if impl_id.lookup(db.upcast()).container.krate() == krate {\n         rust_ir::ImplType::Local\n     } else {\n         rust_ir::ImplType::External"}]}