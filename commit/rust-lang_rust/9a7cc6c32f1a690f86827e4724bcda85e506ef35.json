{"sha": "9a7cc6c32f1a690f86827e4724bcda85e506ef35", "node_id": "C_kwDOAAsO6NoAKDlhN2NjNmMzMmYxYTY5MGY4NjgyN2U0NzI0YmNkYTg1ZTUwNmVmMzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T19:21:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T19:21:02Z"}, "message": "Auto merge of #108127 - matthiaskrgr:rollup-kpzfc6j, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106347 (More accurate spans for arg removal suggestion)\n - #108057 (Prevent some attributes from being merged with others on reexports)\n - #108090 (`if $c:expr { Some($r:expr) } else { None }` =>> `$c.then(|| $r)`)\n - #108092 (note issue for feature(packed_bundled_libs))\n - #108099 (use chars instead of strings where applicable)\n - #108115 (Do not ICE on unmet trait alias bounds)\n - #108125 (Add new people to the compiletest review rotation)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "97da19845e89b50ae3476d641883686852d8edc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97da19845e89b50ae3476d641883686852d8edc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a7cc6c32f1a690f86827e4724bcda85e506ef35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7cc6c32f1a690f86827e4724bcda85e506ef35", "html_url": "https://github.com/rust-lang/rust/commit/9a7cc6c32f1a690f86827e4724bcda85e506ef35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a7cc6c32f1a690f86827e4724bcda85e506ef35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d1b3ea9665e77e3af2f17b311bf65469eedc19", "html_url": "https://github.com/rust-lang/rust/commit/c5d1b3ea9665e77e3af2f17b311bf65469eedc19"}, {"sha": "eb9f9c70854e981641080ec026697f71f354d47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9f9c70854e981641080ec026697f71f354d47c", "html_url": "https://github.com/rust-lang/rust/commit/eb9f9c70854e981641080ec026697f71f354d47c"}], "stats": {"total": 1235, "additions": 677, "deletions": 558}, "files": [{"sha": "1535837fd052562128e658f9f2f08a5b6a88d9f8", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -271,7 +271,7 @@ impl<'a> AstValidator<'a> {\n \n         self.session.emit_err(InvalidVisibility {\n             span: vis.span,\n-            implied: if vis.kind.is_pub() { Some(vis.span) } else { None },\n+            implied: vis.kind.is_pub().then_some(vis.span),\n             note,\n         });\n     }"}, {"sha": "9e90ca3b92c8131ee054b829d9a335ab81ba9cee", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -1186,11 +1186,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 return None;\n             };\n             debug!(\"checking call args for uses of inner_param: {:?}\", args);\n-            if args.contains(&Operand::Move(inner_param)) {\n-                Some((loc, term))\n-            } else {\n-                None\n-            }\n+            args.contains(&Operand::Move(inner_param)).then_some((loc, term))\n         }) else {\n             debug!(\"no uses of inner_param found as a by-move call arg\");\n             return;"}, {"sha": "0033dc70c704c63a896d80d06c1619c9ed3fc552", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -280,17 +280,10 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         debug!(\"give_region_a_name: error_region = {:?}\", error_region);\n         match *error_region {\n-            ty::ReEarlyBound(ebr) => {\n-                if ebr.has_name() {\n-                    let span = tcx.hir().span_if_local(ebr.def_id).unwrap_or(DUMMY_SP);\n-                    Some(RegionName {\n-                        name: ebr.name,\n-                        source: RegionNameSource::NamedEarlyBoundRegion(span),\n-                    })\n-                } else {\n-                    None\n-                }\n-            }\n+            ty::ReEarlyBound(ebr) => ebr.has_name().then(|| {\n+                let span = tcx.hir().span_if_local(ebr.def_id).unwrap_or(DUMMY_SP);\n+                RegionName { name: ebr.name, source: RegionNameSource::NamedEarlyBoundRegion(span) }\n+            }),\n \n             ty::ReStatic => {\n                 Some(RegionName { name: kw::StaticLifetime, source: RegionNameSource::Static })"}, {"sha": "a411aec518e93cd832f381e99f1bd8e26642905c", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -50,13 +50,11 @@ pub(super) fn generate<'mir, 'tcx>(\n         compute_relevant_live_locals(typeck.tcx(), &free_regions, &body);\n     let facts_enabled = use_polonius || AllFacts::enabled(typeck.tcx());\n \n-    let polonius_drop_used = if facts_enabled {\n+    let polonius_drop_used = facts_enabled.then(|| {\n         let mut drop_used = Vec::new();\n         polonius::populate_access_facts(typeck, body, location_table, move_data, &mut drop_used);\n-        Some(drop_used)\n-    } else {\n-        None\n-    };\n+        drop_used\n+    });\n \n     trace::trace(\n         typeck,"}, {"sha": "d30e8ba4b93d63fda025fd8043405458c5341d01", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -135,19 +135,17 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         }\n \n         // `let names: &'static _ = &[\"field1\", \"field2\"];`\n-        let names_let = if is_struct {\n+        let names_let = is_struct.then(|| {\n             let lt_static = Some(cx.lifetime_static(span));\n             let ty_static_ref = cx.ty_ref(span, cx.ty_infer(span), lt_static, ast::Mutability::Not);\n-            Some(cx.stmt_let_ty(\n+            cx.stmt_let_ty(\n                 span,\n                 false,\n                 Ident::new(sym::names, span),\n                 Some(ty_static_ref),\n                 cx.expr_array_ref(span, name_exprs),\n-            ))\n-        } else {\n-            None\n-        };\n+            )\n+        });\n \n         // `let values: &[&dyn Debug] = &[&&self.field1, &&self.field2];`\n         let path_debug = cx.path_global(span, cx.std_path(&[sym::fmt, sym::Debug]));"}, {"sha": "7fc735dbafa70bddb5b79e79d81b0080390921e4", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -942,13 +942,11 @@ impl<'a> MethodDef<'a> {\n         let mut nonself_arg_tys = Vec::new();\n         let span = trait_.span;\n \n-        let explicit_self = if self.explicit_self {\n+        let explicit_self = self.explicit_self.then(|| {\n             let (self_expr, explicit_self) = ty::get_explicit_self(cx, span);\n             selflike_args.push(self_expr);\n-            Some(explicit_self)\n-        } else {\n-            None\n-        };\n+            explicit_self\n+        });\n \n         for (ty, name) in self.nonself_args.iter() {\n             let ast_ty = ty.to_ty(cx, span, type_ident, generics);"}, {"sha": "e67c0dba68597087f4e2d6800646a6ebb61031be", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -62,7 +62,7 @@ pub fn inject(\n     // the one with the prelude.\n     let name = names[0];\n \n-    let root = (edition == Edition2015).then(|| kw::PathRoot);\n+    let root = (edition == Edition2015).then_some(kw::PathRoot);\n \n     let import_path = root\n         .iter()"}, {"sha": "7c6fd9f6f1ec185de1ebdeb30ca238c14a6f6683", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -248,17 +248,13 @@ fn reuse_workproduct_for_cgu(\n             dwarf_object: None,\n             bytecode: None,\n         },\n-        module_global_asm: if has_global_asm {\n-            Some(CompiledModule {\n-                name: cgu.name().to_string(),\n-                kind: ModuleKind::Regular,\n-                object: Some(obj_out_global_asm),\n-                dwarf_object: None,\n-                bytecode: None,\n-            })\n-        } else {\n-            None\n-        },\n+        module_global_asm: has_global_asm.then(|| CompiledModule {\n+            name: cgu.name().to_string(),\n+            kind: ModuleKind::Regular,\n+            object: Some(obj_out_global_asm),\n+            dwarf_object: None,\n+            bytecode: None,\n+        }),\n         existing_work_product: Some((cgu.work_product_id(), work_product)),\n     })\n }"}, {"sha": "fb1606694366a210bc5790b90ff861a5a87af876", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -412,11 +412,7 @@ fn get_pgo_sample_use_path(config: &ModuleConfig) -> Option<CString> {\n }\n \n fn get_instr_profile_output_path(config: &ModuleConfig) -> Option<CString> {\n-    if config.instrument_coverage {\n-        Some(CString::new(\"default_%m_%p.profraw\").unwrap())\n-    } else {\n-        None\n-    }\n+    config.instrument_coverage.then(|| CString::new(\"default_%m_%p.profraw\").unwrap())\n }\n \n pub(crate) unsafe fn llvm_optimize(\n@@ -451,11 +447,10 @@ pub(crate) unsafe fn llvm_optimize(\n         None\n     };\n \n-    let mut llvm_profiler = if cgcx.prof.llvm_recording_enabled() {\n-        Some(LlvmSelfProfiler::new(cgcx.prof.get_self_profiler().unwrap()))\n-    } else {\n-        None\n-    };\n+    let mut llvm_profiler = cgcx\n+        .prof\n+        .llvm_recording_enabled()\n+        .then(|| LlvmSelfProfiler::new(cgcx.prof.get_self_profiler().unwrap()));\n \n     let llvm_selfprofiler =\n         llvm_profiler.as_mut().map(|s| s as *mut _ as *mut c_void).unwrap_or(std::ptr::null_mut());"}, {"sha": "8848ea3bb9aee80825d017e4705754f112bebfc5", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -402,12 +402,8 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n \n         let (llcx, llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n \n-        let coverage_cx = if tcx.sess.instrument_coverage() {\n-            let covctx = coverageinfo::CrateCoverageContext::new();\n-            Some(covctx)\n-        } else {\n-            None\n-        };\n+        let coverage_cx =\n+            tcx.sess.instrument_coverage().then(coverageinfo::CrateCoverageContext::new);\n \n         let dbg_cx = if tcx.sess.opts.debuginfo != DebugInfo::None {\n             let dctx = debuginfo::CodegenUnitDebugContext::new(llmod);"}, {"sha": "cc8ff947fc31f9eb67fea52c3c57dce7aa63b0b4", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -154,7 +154,7 @@ fn struct_llfields<'a, 'tcx>(\n     } else {\n         debug!(\"struct_llfields: offset: {:?} stride: {:?}\", offset, layout.size);\n     }\n-    let field_remapping = if padding_used { Some(field_remapping) } else { None };\n+    let field_remapping = padding_used.then_some(field_remapping);\n     (result, packed, field_remapping)\n }\n "}, {"sha": "8aa744ce93531e4c578d4d88c4592b8c7a2c44c9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2024,7 +2024,7 @@ fn linker_with_args<'a>(\n         .native_libraries\n         .iter()\n         .filter_map(|(cnum, libraries)| {\n-            (dependency_linkage[cnum.as_usize() - 1] != Linkage::Static).then(|| libraries)\n+            (dependency_linkage[cnum.as_usize() - 1] != Linkage::Static).then_some(libraries)\n         })\n         .flatten();\n     for (raw_dylib_name, raw_dylib_imports) in"}, {"sha": "023d38e931284279a8531c548be883eb649879e1", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -579,7 +579,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         }\n     }\n \n-    let metadata_module = if need_metadata_module {\n+    let metadata_module = need_metadata_module.then(|| {\n         // Emit compressed metadata object.\n         let metadata_cgu_name =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"metadata\")).to_string();\n@@ -594,17 +594,15 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             if let Err(error) = std::fs::write(&file_name, data) {\n                 tcx.sess.emit_fatal(errors::MetadataObjectFileWrite { error });\n             }\n-            Some(CompiledModule {\n+            CompiledModule {\n                 name: metadata_cgu_name,\n                 kind: ModuleKind::Metadata,\n                 object: Some(file_name),\n                 dwarf_object: None,\n                 bytecode: None,\n-            })\n+            }\n         })\n-    } else {\n-        None\n-    };\n+    });\n \n     let ongoing_codegen = start_async_codegen(\n         backend.clone(),"}, {"sha": "eec91ffa44a0bb353f0908f0db69cab7da81f76c", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -167,8 +167,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         start_bx.set_personality_fn(cx.eh_personality());\n     }\n \n-    let cleanup_kinds =\n-        if base::wants_msvc_seh(cx.tcx().sess) { Some(analyze::cleanup_kinds(&mir)) } else { None };\n+    let cleanup_kinds = base::wants_msvc_seh(cx.tcx().sess).then(|| analyze::cleanup_kinds(&mir));\n \n     let cached_llbbs: IndexVec<mir::BasicBlock, CachedLlbb<Bx::BasicBlock>> =\n         mir.basic_blocks"}, {"sha": "44331683694b06754643cdde30349089bf70367c", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -207,8 +207,7 @@ impl SelfProfilerRef {\n     /// a measureme event, \"verbose\" generic activities also print a timing entry to\n     /// stderr if the compiler is invoked with -Ztime-passes.\n     pub fn verbose_generic_activity(&self, event_label: &'static str) -> VerboseTimingGuard<'_> {\n-        let message =\n-            if self.print_verbose_generic_activities { Some(event_label.to_owned()) } else { None };\n+        let message = self.print_verbose_generic_activities.then(|| event_label.to_owned());\n \n         VerboseTimingGuard::start(message, self.generic_activity(event_label))\n     }\n@@ -222,11 +221,9 @@ impl SelfProfilerRef {\n     where\n         A: Borrow<str> + Into<String>,\n     {\n-        let message = if self.print_verbose_generic_activities {\n-            Some(format!(\"{}({})\", event_label, event_arg.borrow()))\n-        } else {\n-            None\n-        };\n+        let message = self\n+            .print_verbose_generic_activities\n+            .then(|| format!(\"{}({})\", event_label, event_arg.borrow()));\n \n         VerboseTimingGuard::start(message, self.generic_activity_with_arg(event_label, event_arg))\n     }"}, {"sha": "211bbf4f50e68ee18a35b23f0dd031359c438ec3", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -1768,7 +1768,7 @@ impl EmitterWriter {\n \n         // Render the replacements for each suggestion\n         let suggestions = suggestion.splice_lines(sm);\n-        debug!(\"emit_suggestion_default: suggestions={:?}\", suggestions);\n+        debug!(?suggestions);\n \n         if suggestions.is_empty() {\n             // Suggestions coming from macros can have malformed spans. This is a heavy handed\n@@ -1797,6 +1797,7 @@ impl EmitterWriter {\n         for (complete, parts, highlights, only_capitalization) in\n             suggestions.iter().take(MAX_SUGGESTIONS)\n         {\n+            debug!(?complete, ?parts, ?highlights);\n             notice_capitalization |= only_capitalization;\n \n             let has_deletion = parts.iter().any(|p| p.is_deletion(sm));"}, {"sha": "4b3c0c055adfd4f59cb962e5ffb1a48766efd1bf", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -1066,29 +1066,26 @@ impl Handler {\n     }\n \n     pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().has_errors() { Some(ErrorGuaranteed(())) } else { None }\n+        self.inner.borrow().has_errors().then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n     }\n \n     pub fn has_errors_or_lint_errors(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().has_errors_or_lint_errors() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-        } else {\n-            None\n-        }\n+        self.inner\n+            .borrow()\n+            .has_errors_or_lint_errors()\n+            .then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n     }\n     pub fn has_errors_or_delayed_span_bugs(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().has_errors_or_delayed_span_bugs() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-        } else {\n-            None\n-        }\n+        self.inner\n+            .borrow()\n+            .has_errors_or_delayed_span_bugs()\n+            .then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n     }\n     pub fn is_compilation_going_to_fail(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().is_compilation_going_to_fail() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-        } else {\n-            None\n-        }\n+        self.inner\n+            .borrow()\n+            .is_compilation_going_to_fail()\n+            .then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n     }\n \n     pub fn print_error_count(&self, registry: &Registry) {"}, {"sha": "5c845ae6d0bef4e8977fa1d690dc2eea22f7493b", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -238,12 +238,10 @@ macro_rules! configure {\n impl<'a> StripUnconfigured<'a> {\n     pub fn configure<T: HasAttrs + HasTokens>(&self, mut node: T) -> Option<T> {\n         self.process_cfg_attrs(&mut node);\n-        if self.in_cfg(node.attrs()) {\n+        self.in_cfg(node.attrs()).then(|| {\n             self.try_configure_tokens(&mut node);\n-            Some(node)\n-        } else {\n-            None\n-        }\n+            node\n+        })\n     }\n \n     fn try_configure_tokens<T: HasTokens>(&self, node: &mut T) {\n@@ -257,7 +255,7 @@ impl<'a> StripUnconfigured<'a> {\n \n     fn configure_krate_attrs(&self, mut attrs: ast::AttrVec) -> Option<ast::AttrVec> {\n         attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n-        if self.in_cfg(&attrs) { Some(attrs) } else { None }\n+        self.in_cfg(&attrs).then_some(attrs)\n     }\n \n     /// Performs cfg-expansion on `stream`, producing a new `AttrTokenStream`."}, {"sha": "5267f73efc8db0ee10dd4705b6581ffd83a713bd", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -164,8 +164,6 @@ declare_features! (\n     (active, multiple_supertrait_upcastable, \"CURRENT_RUSTC_VERSION\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n-    /// Allows using `+bundled,+whole-archive` native libs.\n-    (active, packed_bundled_libs, \"1.67.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items.\n     (active, prelude_import, \"1.2.0\", None, None),\n     /// Used to identify crates that contain the profiler runtime.\n@@ -217,6 +215,8 @@ declare_features! (\n     (active, linkage, \"1.0.0\", Some(29603), None),\n     /// Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n     (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n+    /// Allows using `+bundled,+whole-archive` native libs.\n+    (active, packed_bundled_libs, \"CURRENT_RUSTC_VERSION\", Some(108081), None),\n     /// Allows using the `#![panic_runtime]` attribute.\n     (active, panic_runtime, \"1.10.0\", Some(32837), None),\n     /// Allows using `#[rustc_allow_const_fn_unstable]`."}, {"sha": "80ec1caf521e1d59cd2b613f0326a599199a2bc3", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -574,14 +574,11 @@ impl<'hir> Generics<'hir> {\n \n     /// If there are generic parameters, return where to introduce a new one.\n     pub fn span_for_param_suggestion(&self) -> Option<Span> {\n-        if self.params.iter().any(|p| self.span.contains(p.span)) {\n+        self.params.iter().any(|p| self.span.contains(p.span)).then(|| {\n             // `fn foo<A>(t: impl Trait)`\n             //          ^ suggest `, T: Trait` here\n-            let span = self.span.with_lo(self.span.hi() - BytePos(1)).shrink_to_lo();\n-            Some(span)\n-        } else {\n-            None\n-        }\n+            self.span.with_lo(self.span.hi() - BytePos(1)).shrink_to_lo()\n+        })\n     }\n \n     /// `Span` where further predicates would be suggested, accounting for trailing commas, like\n@@ -639,7 +636,7 @@ impl<'hir> Generics<'hir> {\n                 // We include bounds that come from a `#[derive(_)]` but point at the user's code,\n                 // as we use this method to get a span appropriate for suggestions.\n                 let bs = bound.span();\n-                if bs.can_be_used_for_suggestions() { Some(bs.shrink_to_hi()) } else { None }\n+                bs.can_be_used_for_suggestions().then(|| bs.shrink_to_hi())\n             },\n         )\n     }"}, {"sha": "600a4efd3085aa05a644b403ea0e874cfd571340", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -259,13 +259,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n             TraitItemKind::Const(ty, body_id) => body_id\n                 .and_then(|body_id| {\n-                    if is_suggestable_infer_ty(ty) {\n-                        Some(infer_placeholder_type(\n-                            tcx, def_id, body_id, ty.span, item.ident, \"constant\",\n-                        ))\n-                    } else {\n-                        None\n-                    }\n+                    is_suggestable_infer_ty(ty)\n+                        .then(|| infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident, \"constant\",))\n                 })\n                 .unwrap_or_else(|| icx.to_ty(ty)),\n             TraitItemKind::Type(_, Some(ty)) => icx.to_ty(ty),"}, {"sha": "a0f738a279907422a703e2038972b360d1d4d901", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -204,7 +204,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n         match tcx.hir().find(hir_id) {\n             Some(Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. })) => {\n-                generics.params.is_empty().not().then(|| generics.span)\n+                generics.params.is_empty().not().then_some(generics.span)\n             }\n             _ => {\n                 span_bug!(tcx.def_span(def_id), \"main has a non-function type\");"}, {"sha": "dbd0c5abeac1e6375833657d65cd775bf69b7965", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -74,15 +74,13 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n     // (as it's created inside the body itself, not passed in from outside).\n-    let maybe_va_list = if fn_sig.c_variadic {\n+    let maybe_va_list = fn_sig.c_variadic.then(|| {\n         let span = body.params.last().unwrap().span;\n         let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(span));\n         let region = fcx.next_region_var(RegionVariableOrigin::MiscVariable(span));\n \n-        Some(tcx.bound_type_of(va_list_did).subst(tcx, &[region.into()]))\n-    } else {\n-        None\n-    };\n+        tcx.bound_type_of(va_list_did).subst(tcx, &[region.into()])\n+    });\n \n     // Add formal parameters.\n     let inputs_hir = hir.fn_decl_by_hir_id(fn_id).map(|decl| &decl.inputs);"}, {"sha": "ba503bf47e70eb63b26cd95f7cf4d8cc0855ad0e", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -1046,7 +1046,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.param_env,\n                 )\n                 .may_apply()\n-                .then(|| deref_ty)\n+                .then_some(deref_ty)\n         })\n     }\n "}, {"sha": "d13d8ff8270a9caade57d38768ffada85074ea0e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -477,12 +477,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This is the \"trait\" (meaning, the predicate \"proved\" by this `impl`) which provides the `Self` type we care about.\n         // For the purposes of this function, we hope that it is a `struct` type, and that our current `expr` is a literal of\n         // that struct type.\n-        let impl_trait_self_ref: Option<ty::TraitRef<'tcx>> =\n-            self.tcx.impl_trait_ref(obligation.impl_def_id).map(|impl_def| impl_def.skip_binder());\n-\n-        let Some(impl_trait_self_ref) = impl_trait_self_ref else {\n-            // It is possible that this is absent. In this case, we make no progress.\n-            return Err(expr);\n+        let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_def_id) {\n+            self.tcx.mk_trait_ref(\n+                obligation.impl_def_id,\n+                ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_def_id),\n+            )\n+        } else {\n+            self.tcx\n+                .impl_trait_ref(obligation.impl_def_id)\n+                .map(|impl_def| impl_def.skip_binder())\n+                // It is possible that this is absent. In this case, we make no progress.\n+                .ok_or(expr)?\n         };\n \n         // We only really care about the `Self` type itself, which we extract from the ref."}, {"sha": "63b170a3c63b1d5abc12cafa12855a345d3d7e5f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 96, "deletions": 25, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -755,15 +755,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         errors.drain_filter(|error| {\n-                let Error::Invalid(provided_idx, expected_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n-                let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n-                let trace = mk_trace(provided_span, formal_and_expected_inputs[*expected_idx], provided_ty);\n-                if !matches!(trace.cause.as_failure_code(*e), FailureCode::Error0308(_)) {\n-                    self.err_ctxt().report_and_explain_type_error(trace, *e).emit();\n-                    return true;\n-                }\n-                false\n-            });\n+            let Error::Invalid(\n+                provided_idx,\n+                expected_idx,\n+                Compatibility::Incompatible(Some(e)),\n+            ) = error else { return false };\n+            let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n+            let trace =\n+                mk_trace(provided_span, formal_and_expected_inputs[*expected_idx], provided_ty);\n+            if !matches!(trace.cause.as_failure_code(*e), FailureCode::Error0308(_)) {\n+                self.err_ctxt().report_and_explain_type_error(trace, *e).emit();\n+                return true;\n+            }\n+            false\n+        });\n \n         // We're done if we found errors, but we already emitted them.\n         if errors.is_empty() {\n@@ -864,7 +869,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let mut suggestion_text = SuggestionText::None;\n \n+        let ty_to_snippet = |ty: Ty<'tcx>, expected_idx: ExpectedIdx| {\n+            if ty.is_unit() {\n+                \"()\".to_string()\n+            } else if ty.is_suggestable(tcx, false) {\n+                format!(\"/* {} */\", ty)\n+            } else if let Some(fn_def_id) = fn_def_id\n+                && self.tcx.def_kind(fn_def_id).is_fn_like()\n+                && let self_implicit =\n+                    matches!(call_expr.kind, hir::ExprKind::MethodCall(..)) as usize\n+                && let Some(arg) = self.tcx.fn_arg_names(fn_def_id)\n+                    .get(expected_idx.as_usize() + self_implicit)\n+                && arg.name != kw::SelfLower\n+            {\n+                format!(\"/* {} */\", arg.name)\n+            } else {\n+                \"/* value */\".to_string()\n+            }\n+        };\n+\n         let mut errors = errors.into_iter().peekable();\n+        let mut suggestions = vec![];\n         while let Some(error) = errors.next() {\n             match error {\n                 Error::Invalid(provided_idx, expected_idx, compatibility) => {\n@@ -905,7 +930,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"\".to_string()\n                     };\n                     labels\n-                        .push((provided_span, format!(\"argument{} unexpected\", provided_ty_name)));\n+                        .push((provided_span, format!(\"unexpected argument{}\", provided_ty_name)));\n+                    let mut span = provided_span;\n+                    if arg_idx.index() > 0\n+                        && let Some((_, prev)) = provided_arg_tys\n+                            .get(ProvidedIdx::from_usize(arg_idx.index() - 1)\n+                    ) {\n+                        // Include previous comma\n+                        span = span.with_lo(prev.hi());\n+                    } else if let Some((_, next)) = provided_arg_tys.get(\n+                        ProvidedIdx::from_usize(arg_idx.index() + 1),\n+                    ) {\n+                        // Include next comma\n+                        span = span.until(*next);\n+                    }\n+                    suggestions.push((span, String::new()));\n+\n                     suggestion_text = match suggestion_text {\n                         SuggestionText::None => SuggestionText::Remove(false),\n                         SuggestionText::Remove(_) => SuggestionText::Remove(true),\n@@ -1095,6 +1135,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n+        // Incorporate the argument changes in the removal suggestion.\n+        // When a type is *missing*, and the rest are additional, we want to suggest these with a\n+        // multipart suggestion, but in order to do so we need to figure out *where* the arg that\n+        // was provided but had the wrong type should go, because when looking at `expected_idx`\n+        // that is the position in the argument list in the definition, while `provided_idx` will\n+        // not be present. So we have to look at what the *last* provided position was, and point\n+        // one after to suggest the replacement. FIXME(estebank): This is hacky, and there's\n+        // probably a better more involved change we can make to make this work.\n+        // For example, if we have\n+        // ```\n+        // fn foo(i32, &'static str) {}\n+        // foo((), (), ());\n+        // ```\n+        // what should be suggested is\n+        // ```\n+        // foo(/* i32 */, /* &str */);\n+        // ```\n+        // which includes the replacement of the first two `()` for the correct type, and the\n+        // removal of the last `()`.\n+        let mut prev = -1;\n+        for (expected_idx, provided_idx) in matched_inputs.iter_enumerated() {\n+            // We want to point not at the *current* argument expression index, but rather at the\n+            // index position where it *should have been*, which is *after* the previous one.\n+            if let Some(provided_idx) = provided_idx {\n+                prev = provided_idx.index() as i64;\n+            }\n+            let idx = ProvidedIdx::from_usize((prev + 1) as usize);\n+            if let None = provided_idx\n+                && let Some((_, arg_span)) = provided_arg_tys.get(idx)\n+            {\n+                // There is a type that was *not* found anywhere, so it isn't a move, but a\n+                // replacement and we look at what type it should have been. This will allow us\n+                // To suggest a multipart suggestion when encountering `foo(1, \"\")` where the def\n+                // was `fn foo(())`.\n+                let (_, expected_ty) = formal_and_expected_inputs[expected_idx];\n+                suggestions.push((*arg_span, ty_to_snippet(expected_ty, expected_idx)));\n+            }\n+        }\n+\n         // If we have less than 5 things to say, it would be useful to call out exactly what's wrong\n         if labels.len() <= 5 {\n             for (span, label) in labels {\n@@ -1112,7 +1191,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(format!(\"provide the argument{}\", if plural { \"s\" } else { \"\" }))\n             }\n             SuggestionText::Remove(plural) => {\n-                Some(format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }))\n+                err.multipart_suggestion(\n+                    &format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }),\n+                    suggestions,\n+                    Applicability::HasPlaceholders,\n+                );\n+                None\n             }\n             SuggestionText::Swap => Some(\"swap these arguments\".to_string()),\n             SuggestionText::Reorder => Some(\"reorder these arguments\".to_string()),\n@@ -1151,20 +1235,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     // Propose a placeholder of the correct type\n                     let (_, expected_ty) = formal_and_expected_inputs[expected_idx];\n-                    if expected_ty.is_unit() {\n-                        \"()\".to_string()\n-                    } else if expected_ty.is_suggestable(tcx, false) {\n-                        format!(\"/* {} */\", expected_ty)\n-                    } else if let Some(fn_def_id) = fn_def_id\n-                        && self.tcx.def_kind(fn_def_id).is_fn_like()\n-                        && let self_implicit = matches!(call_expr.kind, hir::ExprKind::MethodCall(..)) as usize\n-                        && let Some(arg) = self.tcx.fn_arg_names(fn_def_id).get(expected_idx.as_usize() + self_implicit)\n-                        && arg.name != kw::SelfLower\n-                    {\n-                        format!(\"/* {} */\", arg.name)\n-                    } else {\n-                        \"/* value */\".to_string()\n-                    }\n+                    ty_to_snippet(expected_ty, expected_idx)\n                 };\n                 suggestion += &suggestion_text;\n             }"}, {"sha": "3f61a1a83e5aeb80f0c79d4de9aa2c0ab74fa964", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -274,12 +274,10 @@ pub fn resolve_interior<'a, 'tcx>(\n                 let r = fcx.tcx.mk_re_late_bound(current_depth, br);\n                 r\n             });\n-            if captured_tys.insert(ty) {\n+            captured_tys.insert(ty).then(|| {\n                 cause.ty = ty;\n-                Some(cause)\n-            } else {\n-                None\n-            }\n+                cause\n+            })\n         })\n         .collect();\n "}, {"sha": "5643d1d9f74aaa0b245b5745a9e6e9da409f7daa", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -90,20 +90,18 @@ pub fn find_param_with_region<'tcx>(\n                     r\n                 }\n             });\n-            if found_anon_region {\n+            found_anon_region.then(|| {\n                 let ty_hir_id = fn_decl.inputs[index].hir_id;\n                 let param_ty_span = hir.span(ty_hir_id);\n                 let is_first = index == 0;\n-                Some(AnonymousParamInfo {\n+                AnonymousParamInfo {\n                     param,\n                     param_ty: new_param_ty,\n                     param_ty_span,\n                     bound_region,\n                     is_first,\n-                })\n-            } else {\n-                None\n-            }\n+                }\n+            })\n         })\n }\n "}, {"sha": "34cf17d25a964cc385eaf0a6beb4116f01441d49", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2308,11 +2308,8 @@ impl EarlyLintPass for IncompleteFeatures {\n             .for_each(|(&name, &span)| {\n                 let note = rustc_feature::find_feature_issue(name, GateIssue::Language)\n                     .map(|n| BuiltinIncompleteFeaturesNote { n });\n-                let help = if HAS_MIN_FEATURES.contains(&name) {\n-                    Some(BuiltinIncompleteFeaturesHelp)\n-                } else {\n-                    None\n-                };\n+                let help =\n+                    HAS_MIN_FEATURES.contains(&name).then_some(BuiltinIncompleteFeaturesHelp);\n                 cx.emit_spanned_lint(\n                     INCOMPLETE_FEATURES,\n                     span,"}, {"sha": "9a9e2de7b5c7f561cfcf5890b0b19ba4a2e0dc76", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -487,7 +487,7 @@ impl LintStore {\n         let mut groups: Vec<_> = self\n             .lint_groups\n             .iter()\n-            .filter_map(|(k, LintGroup { depr, .. })| if depr.is_none() { Some(k) } else { None })\n+            .filter_map(|(k, LintGroup { depr, .. })| depr.is_none().then_some(k))\n             .collect();\n         groups.sort();\n         let groups = groups.iter().map(|k| Symbol::intern(k));\n@@ -1112,11 +1112,9 @@ impl<'tcx> LateContext<'tcx> {\n                 .maybe_typeck_results()\n                 .filter(|typeck_results| typeck_results.hir_owner == id.owner)\n                 .or_else(|| {\n-                    if self.tcx.has_typeck_results(id.owner.to_def_id()) {\n-                        Some(self.tcx.typeck(id.owner.def_id))\n-                    } else {\n-                        None\n-                    }\n+                    self.tcx\n+                        .has_typeck_results(id.owner.to_def_id())\n+                        .then(|| self.tcx.typeck(id.owner.def_id))\n                 })\n                 .and_then(|typeck_results| typeck_results.type_dependent_def(id))\n                 .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),"}, {"sha": "a3367ae4a9f15061eaf6a95d14c497f0d506b19e", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -65,11 +65,8 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n             } else {\n                 ForLoopsOverFalliblesLoopSub::UseWhileLet { start_span: expr.span.with_hi(pat.span.lo()), end_span: pat.span.between(arg.span), var }\n             } ;\n-        let question_mark = if suggest_question_mark(cx, adt, substs, expr.span) {\n-            Some(ForLoopsOverFalliblesQuestionMark { suggestion: arg.span.shrink_to_hi() })\n-        } else {\n-            None\n-        };\n+        let question_mark = suggest_question_mark(cx, adt, substs, expr.span)\n+            .then(|| ForLoopsOverFalliblesQuestionMark { suggestion: arg.span.shrink_to_hi() });\n         let suggestion = ForLoopsOverFalliblesSuggestion {\n             var,\n             start_span: expr.span.with_hi(pat.span.lo()),"}, {"sha": "2eafc356dc3fa75ecf0055aa620ed392bd10d3b8", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -1062,7 +1062,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn span_if_local(self, id: DefId) -> Option<Span> {\n-        if id.is_local() { Some(self.tcx.def_span(id)) } else { None }\n+        id.is_local().then(|| self.tcx.def_span(id))\n     }\n \n     pub fn res_span(self, res: Res) -> Option<Span> {"}, {"sha": "3cb07b5b41eb8c9b4ec8a00d26375267511b4094", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -414,7 +414,7 @@ impl<'tcx> Body<'tcx> {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];\n-            (decl.is_user_variable() && decl.mutability.is_mut()).then(|| local)\n+            (decl.is_user_variable() && decl.mutability.is_mut()).then_some(local)\n         })\n     }\n "}, {"sha": "3687c836fb474352c6f0eb8e8ad2af353ad7636f", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -1154,13 +1154,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             ty::FnDef(_, _) => {\n                 let sig = ret_ty.fn_sig(self);\n                 let output = self.erase_late_bound_regions(sig.output());\n-                if output.is_impl_trait() {\n+                output.is_impl_trait().then(|| {\n                     let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n                     let fn_decl = self.hir().fn_decl_by_hir_id(hir_id).unwrap();\n-                    Some((output, fn_decl.output.span()))\n-                } else {\n-                    None\n-                }\n+                    (output, fn_decl.output.span())\n+                })\n             }\n             _ => None,\n         }\n@@ -1266,13 +1264,12 @@ macro_rules! nop_lift {\n         impl<'a, 'tcx> Lift<'tcx> for $ty {\n             type Lifted = $lifted;\n             fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-                if tcx.interners.$set.contains_pointer_to(&InternedInSet(&*self.0.0)) {\n+                tcx.interners\n+                    .$set\n+                    .contains_pointer_to(&InternedInSet(&*self.0.0))\n                     // SAFETY: `self` is interned and therefore valid\n                     // for the entire lifetime of the `TyCtxt`.\n-                    Some(unsafe { mem::transmute(self) })\n-                } else {\n-                    None\n-                }\n+                    .then(|| unsafe { mem::transmute(self) })\n             }\n         }\n     };\n@@ -1287,13 +1284,13 @@ impl<'a, 'tcx> Lift<'tcx> for &'a List<Ty<'a>> {\n         if self.is_empty() {\n             return Some(List::empty());\n         }\n-        if tcx.interners.substs.contains_pointer_to(&InternedInSet(self.as_substs())) {\n+\n+        tcx.interners\n+            .substs\n+            .contains_pointer_to(&InternedInSet(self.as_substs()))\n             // SAFETY: `self` is interned and therefore valid\n             // for the entire lifetime of the `TyCtxt`.\n-            Some(unsafe { mem::transmute::<&'a List<Ty<'a>>, &'tcx List<Ty<'tcx>>>(self) })\n-        } else {\n-            None\n-        }\n+            .then(|| unsafe { mem::transmute::<&'a List<Ty<'a>>, &'tcx List<Ty<'tcx>>>(self) })\n     }\n }\n \n@@ -1305,11 +1302,10 @@ macro_rules! nop_list_lift {\n                 if self.is_empty() {\n                     return Some(List::empty());\n                 }\n-                if tcx.interners.$set.contains_pointer_to(&InternedInSet(self)) {\n-                    Some(unsafe { mem::transmute(self) })\n-                } else {\n-                    None\n-                }\n+                tcx.interners\n+                    .$set\n+                    .contains_pointer_to(&InternedInSet(self))\n+                    .then(|| unsafe { mem::transmute(self) })\n             }\n         }\n     };"}, {"sha": "c6c3c1f08deabc80210671e239d1fe237ef96e87", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -584,7 +584,7 @@ impl<'tcx> Instance<'tcx> {\n     /// this function returns `None`, then the MIR body does not require substitution during\n     /// codegen.\n     fn substs_for_mir_body(&self) -> Option<SubstsRef<'tcx>> {\n-        if self.def.has_polymorphic_mir_body() { Some(self.substs) } else { None }\n+        self.def.has_polymorphic_mir_body().then_some(self.substs)\n     }\n \n     pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: &T) -> T"}, {"sha": "6b4a6a17aef5fb356337b36bc23946019eda2398", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -267,13 +267,11 @@ pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;\n impl<'tcx> InternalSubsts<'tcx> {\n     /// Checks whether all elements of this list are types, if so, transmute.\n     pub fn try_as_type_list(&'tcx self) -> Option<&'tcx List<Ty<'tcx>>> {\n-        if self.iter().all(|arg| matches!(arg.unpack(), GenericArgKind::Type(_))) {\n+        self.iter().all(|arg| matches!(arg.unpack(), GenericArgKind::Type(_))).then(|| {\n             assert_eq!(TYPE_TAG, 0);\n             // SAFETY: All elements are types, see `List<Ty<'tcx>>::as_substs`.\n-            Some(unsafe { &*(self as *const List<GenericArg<'tcx>> as *const List<Ty<'tcx>>) })\n-        } else {\n-            None\n-        }\n+            unsafe { &*(self as *const List<GenericArg<'tcx>> as *const List<Ty<'tcx>>) }\n+        })\n     }\n \n     /// Interpret these substitutions as the substitutions of a closure type."}, {"sha": "dac9bf0a88350e5505af0c5137ca8ac64eb39c6a", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -319,7 +319,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // See the notes for `ExprKind::Array` in `as_rvalue` and for\n                 // `ExprKind::Borrow` above.\n                 let is_union = adt_def.is_union();\n-                let active_field_index = if is_union { Some(fields[0].name.index()) } else { None };\n+                let active_field_index = is_union.then(|| fields[0].name.index());\n \n                 let scope = this.local_scope();\n "}, {"sha": "8859f5002e465c4adcf7d9d1b547997195c2e3d6", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -563,14 +563,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let not_contained =\n                     self.values_not_contained_in_range(&*range, options).unwrap_or(false);\n \n-                if not_contained {\n+                not_contained.then(|| {\n                     // No switch values are contained in the pattern range,\n                     // so the pattern can be matched only if this test fails.\n-                    let otherwise = options.len();\n-                    Some(otherwise)\n-                } else {\n-                    None\n-                }\n+                    options.len()\n+                })\n             }\n \n             (&TestKind::SwitchInt { .. }, _) => None,"}, {"sha": "e5b7d685c499b72b16c8dfa23a8691774120edb6", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -172,7 +172,7 @@ impl IntRange {\n         ty: Ty<'tcx>,\n         end: &RangeEnd,\n     ) -> Option<IntRange> {\n-        if Self::is_integral(ty) {\n+        Self::is_integral(ty).then(|| {\n             // Perform a shift if the underlying types are signed,\n             // which makes the interval arithmetic simpler.\n             let bias = IntRange::signed_bias(tcx, ty);\n@@ -182,10 +182,8 @@ impl IntRange {\n                 // This should have been caught earlier by E0030.\n                 bug!(\"malformed range pattern: {}..={}\", lo, (hi - offset));\n             }\n-            Some(IntRange { range: lo..=(hi - offset), bias })\n-        } else {\n-            None\n-        }\n+            IntRange { range: lo..=(hi - offset), bias }\n+        })\n     }\n \n     // The return value of `signed_bias` should be XORed with an endpoint to encode/decode it."}, {"sha": "41306dd80fbdd4b83d8833f00adcf35a310f22b6", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -203,11 +203,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 if !lower_overflow && !higher_overflow {\n                     self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanOrEqualToUpper {\n                         span,\n-                        teach: if self.tcx.sess.teach(&error_code!(E0030)) {\n-                            Some(())\n-                        } else {\n-                            None\n-                        },\n+                        teach: self.tcx.sess.teach(&error_code!(E0030)).then_some(()),\n                     });\n                 }\n                 PatKind::Wild"}, {"sha": "633a5674f1f96da223c3fe6527fd805d2b445e17", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -254,13 +254,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     ) {\n         // Compute the place that we are storing to, if any\n         let destination = match &statement.kind {\n-            StatementKind::Assign(assign) => {\n-                if assign.1.is_safe_to_remove() {\n-                    Some(assign.0)\n-                } else {\n-                    None\n-                }\n-            }\n+            StatementKind::Assign(assign) => assign.1.is_safe_to_remove().then_some(assign.0),\n             StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => {\n                 Some(**place)\n             }"}, {"sha": "66d32b954e473d8eb774d39a80668197934b918e", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -111,11 +111,9 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n     /// If the given predicate is the trait `fmt::Pointer`, returns the bound parameter type.\n     fn is_pointer_trait(&self, bound: &PredicateKind<'tcx>) -> Option<Ty<'tcx>> {\n         if let ty::PredicateKind::Clause(ty::Clause::Trait(predicate)) = bound {\n-            if self.tcx.is_diagnostic_item(sym::Pointer, predicate.def_id()) {\n-                Some(predicate.trait_ref.self_ty())\n-            } else {\n-                None\n-            }\n+            self.tcx\n+                .is_diagnostic_item(sym::Pointer, predicate.def_id())\n+                .then(|| predicate.trait_ref.self_ty())\n         } else {\n             None\n         }"}, {"sha": "a74f408d774120734c8e81c2e99b29223d3d1961", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -1283,22 +1283,16 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_delim_args_inner(&mut self) -> Option<DelimArgs> {\n-        if self.check(&token::OpenDelim(Delimiter::Parenthesis))\n+        let delimited = self.check(&token::OpenDelim(Delimiter::Parenthesis))\n             || self.check(&token::OpenDelim(Delimiter::Bracket))\n-            || self.check(&token::OpenDelim(Delimiter::Brace))\n-        {\n-            match self.parse_token_tree() {\n-                // We've confirmed above that there is a delimiter so unwrapping is OK.\n-                TokenTree::Delimited(dspan, delim, tokens) => Some(DelimArgs {\n-                    dspan,\n-                    delim: MacDelimiter::from_token(delim).unwrap(),\n-                    tokens,\n-                }),\n-                _ => unreachable!(),\n-            }\n-        } else {\n-            None\n-        }\n+            || self.check(&token::OpenDelim(Delimiter::Brace));\n+\n+        delimited.then(|| {\n+            // We've confirmed above that there is a delimiter so unwrapping is OK.\n+            let TokenTree::Delimited(dspan, delim, tokens) = self.parse_token_tree() else { unreachable!() };\n+\n+            DelimArgs { dspan, delim: MacDelimiter::from_token(delim).unwrap(), tokens }\n+        })\n     }\n \n     fn parse_or_use_outer_attributes("}, {"sha": "49959a8981c6530283a681920a897bb79fa452e0", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -404,7 +404,7 @@ impl<'a> Parser<'a> {\n \n         let is_first_invocation = style == PathStyle::Expr;\n         // Take a snapshot before attempting to parse - we can restore this later.\n-        let snapshot = if is_first_invocation { Some(self.clone()) } else { None };\n+        let snapshot = is_first_invocation.then(|| self.clone());\n \n         debug!(\"parse_generic_args_with_leading_angle_bracket_recovery: (snapshotting)\");\n         match self.parse_angle_args(ty_generics) {"}, {"sha": "4f4252b532edf7c07cb379755e2149d93f416cdb", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -450,8 +450,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_borrowed_pointee(&mut self) -> PResult<'a, TyKind> {\n         let and_span = self.prev_token.span;\n-        let mut opt_lifetime =\n-            if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n+        let mut opt_lifetime = self.check_lifetime().then(|| self.expect_lifetime());\n         let mut mutbl = self.parse_mutability();\n         if self.token.is_lifetime() && mutbl == Mutability::Mut && opt_lifetime.is_none() {\n             // A lifetime is invalid here: it would be part of a bare trait bound, which requires\n@@ -871,7 +870,7 @@ impl<'a> Parser<'a> {\n             None\n         };\n \n-        let maybe = if self.eat(&token::Question) { Some(self.prev_token.span) } else { None };\n+        let maybe = self.eat(&token::Question).then_some(self.prev_token.span);\n \n         Ok(BoundModifiers { maybe, maybe_const })\n     }"}, {"sha": "8a3cedfee7952997ec427ac1e748c39991213404", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -835,7 +835,7 @@ impl<'a> Parser<'a> {\n             );\n         }\n \n-        if found { Some(cur) } else { None }\n+        found.then_some(cur)\n     }\n \n     fn suggest_format(&mut self) {"}, {"sha": "0ae7096642cf164fcfa4e5d2907b496b96058290", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -32,11 +32,8 @@ fn collect_item(tcx: TyCtxt<'_>, items: &mut DiagnosticItems, name: Symbol, item\n     if let Some(original_def_id) = items.name_to_id.insert(name, item_def_id) {\n         if original_def_id != item_def_id {\n             let orig_span = tcx.hir().span_if_local(original_def_id);\n-            let orig_crate_name = if orig_span.is_some() {\n-                None\n-            } else {\n-                Some(tcx.crate_name(original_def_id.krate))\n-            };\n+            let orig_crate_name =\n+                orig_span.is_none().then(|| tcx.crate_name(original_def_id.krate));\n             match tcx.hir().span_if_local(item_def_id) {\n                 Some(span) => tcx.sess.emit_err(DuplicateDiagnosticItem { span, name }),\n                 None => tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {"}, {"sha": "13a576014a2ee1787273d775906b480f535ba5ec", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -281,7 +281,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         self.recurse_with_stability_attrs(\n             depr.map(|(d, _)| DeprecationEntry::local(d, def_id)),\n             stab,\n-            if inherit_const_stability.yes() { const_stab } else { None },\n+            inherit_const_stability.yes().then_some(const_stab).flatten(),\n             visit_children,\n         );\n     }"}, {"sha": "29513df460fffe081624257ed65631265f607191", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -242,8 +242,7 @@ impl<K: DepKind + Encodable<FileEncoder>> GraphEncoder<K> {\n         record_graph: bool,\n         record_stats: bool,\n     ) -> Self {\n-        let record_graph =\n-            if record_graph { Some(Lock::new(DepGraphQuery::new(prev_node_count))) } else { None };\n+        let record_graph = record_graph.then(|| Lock::new(DepGraphQuery::new(prev_node_count)));\n         let status = Lock::new(EncoderState::new(encoder, record_stats));\n         GraphEncoder { status, record_graph }\n     }"}, {"sha": "5205d055cf9ad7b871cfd7b4327641c8e2556425", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -1700,11 +1700,9 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                                         let crate_mod =\n                                             Res::Def(DefKind::Mod, crate_id.as_def_id());\n \n-                                        if filter_fn(crate_mod) {\n-                                            Some(TypoSuggestion::typo_from_ident(*ident, crate_mod))\n-                                        } else {\n-                                            None\n-                                        }\n+                                        filter_fn(crate_mod).then(|| {\n+                                            TypoSuggestion::typo_from_ident(*ident, crate_mod)\n+                                        })\n                                     })\n                             }));\n "}, {"sha": "3425e24585cdd0ff51c4fdfcd35dc1224656a9af", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -344,7 +344,7 @@ fn preprocess_link(link: &str) -> String {\n     let link = link.strip_suffix(\"()\").unwrap_or(link);\n     let link = link.strip_suffix(\"{}\").unwrap_or(link);\n     let link = link.strip_suffix(\"[]\").unwrap_or(link);\n-    let link = if link != \"!\" { link.strip_suffix(\"!\").unwrap_or(link) } else { link };\n+    let link = if link != \"!\" { link.strip_suffix('!').unwrap_or(link) } else { link };\n     strip_generics_from_path(link).unwrap_or_else(|_| link.to_string())\n }\n "}, {"sha": "4da6acad2c02148ced4638c1228e1229a7c56514", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2544,7 +2544,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n \n         // Only use this directory if it has a file we can expect to always find.\n-        if candidate.join(\"library/std/src/lib.rs\").is_file() { Some(candidate) } else { None }\n+        candidate.join(\"library/std/src/lib.rs\").is_file().then_some(candidate)\n     };\n \n     let working_dir = std::env::current_dir().unwrap_or_else(|e| {"}, {"sha": "093698f3b35ab35807a80481e3aae148743341a8", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -322,11 +322,7 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n                 .take_while(|c| *c != 'i' && *c != 'u')\n                 .all(|c| c.to_digit(base).is_some());\n \n-        if valid {\n-            Some(format!(\"0{}{}\", base_char.to_ascii_lowercase(), &suffix[1..]))\n-        } else {\n-            None\n-        }\n+        valid.then(|| format!(\"0{}{}\", base_char.to_ascii_lowercase(), &suffix[1..]))\n     }\n \n     let token::Lit { kind, symbol, suffix, .. } = lit;"}, {"sha": "2075ed57a94db4b73ac2d9b42a3e723f5acd51a8", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -217,7 +217,7 @@ pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n                 // Look for the target rustlib directory in the suspected sysroot.\n                 let mut rustlib_path = rustc_target::target_rustlib_path(&p, \"dummy\");\n                 rustlib_path.pop(); // pop off the dummy target.\n-                if rustlib_path.exists() { Some(p) } else { None }\n+                rustlib_path.exists().then_some(p)\n             }\n             None => None,\n         }"}, {"sha": "c784582012a471e33e6dbe1ad8d78c724906db25", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -809,7 +809,7 @@ mod parse {\n         if v.is_some() {\n             let mut bool_arg = None;\n             if parse_opt_bool(&mut bool_arg, v) {\n-                *slot = if bool_arg.unwrap() { Some(MirSpanview::Statement) } else { None };\n+                *slot = bool_arg.unwrap().then_some(MirSpanview::Statement);\n                 return true;\n             }\n         }\n@@ -850,7 +850,7 @@ mod parse {\n         if v.is_some() {\n             let mut bool_arg = None;\n             if parse_opt_bool(&mut bool_arg, v) {\n-                *slot = if bool_arg.unwrap() { Some(InstrumentCoverage::All) } else { None };\n+                *slot = bool_arg.unwrap().then_some(InstrumentCoverage::All);\n                 return true;\n             }\n         }"}, {"sha": "2340d501d5a6600c4343d171fbf45b0c33f1ed1c", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -299,7 +299,7 @@ impl DefId {\n \n     #[inline]\n     pub fn as_local(self) -> Option<LocalDefId> {\n-        if self.is_local() { Some(LocalDefId { local_def_index: self.index }) } else { None }\n+        self.is_local().then(|| LocalDefId { local_def_index: self.index })\n     }\n \n     #[inline]\n@@ -320,7 +320,7 @@ impl DefId {\n \n     #[inline]\n     pub fn as_crate_root(self) -> Option<CrateNum> {\n-        if self.is_crate_root() { Some(self.krate) } else { None }\n+        self.is_crate_root().then_some(self.krate)\n     }\n \n     #[inline]"}, {"sha": "d81722e59a66e18ea59f01e9287efaccf460f390", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -244,8 +244,7 @@ fn compute_symbol_name<'tcx>(\n     // project.\n     let avoid_cross_crate_conflicts = is_generic(substs) || is_globally_shared_function;\n \n-    let instantiating_crate =\n-        if avoid_cross_crate_conflicts { Some(compute_instantiating_crate()) } else { None };\n+    let instantiating_crate = avoid_cross_crate_conflicts.then(compute_instantiating_crate);\n \n     // Pick the crate responsible for the symbol mangling version, which has to:\n     // 1. be stable for each instance, whether it's being defined or imported"}, {"sha": "8041066d5d573ad07a68b45a93b42d1f27837fe2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -82,11 +82,8 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n                     upvars.iter().find_map(|(upvar_id, upvar)| {\n                         let upvar_ty = typeck_results.node_type(*upvar_id);\n                         let upvar_ty = infer_context.resolve_vars_if_possible(upvar_ty);\n-                        if ty_matches(ty::Binder::dummy(upvar_ty)) {\n-                            Some(GeneratorInteriorOrUpvar::Upvar(upvar.span))\n-                        } else {\n-                            None\n-                        }\n+                        ty_matches(ty::Binder::dummy(upvar_ty))\n+                            .then(|| GeneratorInteriorOrUpvar::Upvar(upvar.span))\n                     })\n                 })\n             }\n@@ -770,15 +767,13 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             obligation.param_env,\n                             real_trait_pred_and_ty,\n                         );\n-                        if obligations\n+                        let may_hold = obligations\n                             .iter()\n                             .chain([&obligation])\n                             .all(|obligation| self.predicate_may_hold(obligation))\n-                        {\n-                            Some(steps)\n-                        } else {\n-                            None\n-                        }\n+                            .then_some(steps);\n+\n+                        may_hold\n                     })\n                 {\n                     if steps > 0 {"}, {"sha": "2d299486ee6858e5ee80587f3a32450610ffa238", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -523,16 +523,14 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n \n     let mut visitor = ReferencesOnlyParentGenerics { tcx, generics, trait_item_def_id };\n     let predicates_for_trait = predicates.predicates.iter().filter_map(|(pred, span)| {\n-        if pred.visit_with(&mut visitor).is_continue() {\n-            Some(Obligation::new(\n+        pred.visit_with(&mut visitor).is_continue().then(|| {\n+            Obligation::new(\n                 tcx,\n                 ObligationCause::dummy_with_span(*span),\n                 param_env,\n                 ty::EarlyBinder(*pred).subst(tcx, impl_trait_ref.substs),\n-            ))\n-        } else {\n-            None\n-        }\n+            )\n+        })\n     });\n \n     let infcx = tcx.infer_ctxt().ignoring_regions().build();"}, {"sha": "4963f2d75faab1eb896bf1b099eb98009d9e94ff", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -307,7 +307,7 @@ fn predicate_references_self<'tcx>(\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Clause(ty::Clause::Trait(ref data)) => {\n             // In the case of a trait predicate, we can skip the \"self\" type.\n-            if data.trait_ref.substs[1..].iter().any(has_self_ty) { Some(sp) } else { None }\n+            data.trait_ref.substs[1..].iter().any(has_self_ty).then_some(sp)\n         }\n         ty::PredicateKind::Clause(ty::Clause::Projection(ref data)) => {\n             // And similarly for projections. This should be redundant with\n@@ -325,7 +325,7 @@ fn predicate_references_self<'tcx>(\n             //\n             // This is ALT2 in issue #56288, see that for discussion of the\n             // possible alternatives.\n-            if data.projection_ty.substs[1..].iter().any(has_self_ty) { Some(sp) } else { None }\n+            data.projection_ty.substs[1..].iter().any(has_self_ty).then_some(sp)\n         }\n         ty::PredicateKind::AliasEq(..) => bug!(\"`AliasEq` not allowed as assumption\"),\n "}, {"sha": "21ef4e24fdb05c21b851782e0753fc58935a5dca", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -21,11 +21,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse> {\n-        if trivial_dropck_outlives(tcx, key.value.dropped_ty) {\n-            Some(DropckOutlivesResult::default())\n-        } else {\n-            None\n-        }\n+        trivial_dropck_outlives(tcx, key.value.dropped_ty).then(DropckOutlivesResult::default)\n     }\n \n     fn perform_query("}, {"sha": "27feedc48be0f9cfcf63e3d8fd44cdfe4a1db48e", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -378,11 +378,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             let self_ty = trait_ref.self_ty();\n                             let (trait_desc, self_desc) = with_no_trimmed_paths!({\n                                 let trait_desc = trait_ref.print_only_trait_path().to_string();\n-                                let self_desc = if self_ty.has_concrete_skeleton() {\n-                                    Some(self_ty.to_string())\n-                                } else {\n-                                    None\n-                                };\n+                                let self_desc =\n+                                    self_ty.has_concrete_skeleton().then(|| self_ty.to_string());\n                                 (trait_desc, self_desc)\n                             });\n                             let cause = if let Conflict::Upstream = conflict {"}, {"sha": "c3dcd64b2c2461438ce5b0edf44177f9979b5f4d", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n                     // Only report the `Self` type if it has at least\n                     // some outer concrete shell; otherwise, it's\n                     // not adding much information.\n-                    self_ty: if self_ty.has_concrete_skeleton() { Some(self_ty) } else { None },\n+                    self_ty: self_ty.has_concrete_skeleton().then_some(self_ty),\n                     intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n                     involves_placeholder: overlap.involves_placeholder,\n                 }"}, {"sha": "8b32c0119e0e3b2a6a0aa9ec041856bc9d85a6fc", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -206,11 +206,8 @@ fn fn_abi_of_instance<'tcx>(\n \n     let sig = fn_sig_for_fn_abi(tcx, instance, param_env);\n \n-    let caller_location = if instance.def.requires_caller_location(tcx) {\n-        Some(tcx.caller_location_ty())\n-    } else {\n-        None\n-    };\n+    let caller_location =\n+        instance.def.requires_caller_location(tcx).then(|| tcx.caller_location_ty());\n \n     fn_abi_new_uncached(\n         &LayoutCx { tcx, param_env },"}, {"sha": "54c8f156f9da7d3b99b827b87679d287789aa2ae", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 145, "deletions": 27, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -11,6 +11,8 @@ pub(crate) mod types;\n pub(crate) mod utils;\n \n use rustc_ast as ast;\n+use rustc_ast::token::{Token, TokenKind};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet, IndexEntry};\n use rustc_hir as hir;\n@@ -2079,8 +2081,8 @@ impl<'hir> hir::intravisit::Visitor<'hir> for OneLevelVisitor<'hir> {\n     fn visit_item(&mut self, item: &'hir hir::Item<'hir>) {\n         if self.item.is_none()\n             && item.ident == self.looking_for\n-            && matches!(item.kind, hir::ItemKind::Use(_, _))\n-            || item.owner_id.def_id == self.target_def_id\n+            && (matches!(item.kind, hir::ItemKind::Use(_, _))\n+                || item.owner_id.def_id == self.target_def_id)\n         {\n             self.item = Some(item);\n         }\n@@ -2096,34 +2098,149 @@ fn get_all_import_attributes<'hir>(\n     tcx: TyCtxt<'hir>,\n     target_def_id: LocalDefId,\n     attributes: &mut Vec<ast::Attribute>,\n+    is_inline: bool,\n ) {\n     let hir_map = tcx.hir();\n     let mut visitor = OneLevelVisitor::new(hir_map, target_def_id);\n     let mut visited = FxHashSet::default();\n     // If the item is an import and has at least a path with two parts, we go into it.\n-    while let hir::ItemKind::Use(path, _) = item.kind &&\n-        path.segments.len() > 1 &&\n-        let hir::def::Res::Def(_, def_id) = path.segments[path.segments.len() - 2].res &&\n-        visited.insert(def_id)\n-    {\n-        if let Some(hir::Node::Item(parent_item)) = hir_map.get_if_local(def_id) {\n-            // We add the attributes from this import into the list.\n-            attributes.extend_from_slice(hir_map.attrs(item.hir_id()));\n-            // We get the `Ident` we will be looking for into `item`.\n-            let looking_for = path.segments[path.segments.len() - 1].ident;\n-            visitor.reset(looking_for);\n-            hir::intravisit::walk_item(&mut visitor, parent_item);\n-            if let Some(i) = visitor.item {\n-                item = i;\n-            } else {\n-                break;\n+    while let hir::ItemKind::Use(path, _) = item.kind && visited.insert(item.hir_id()) {\n+        // We add the attributes from this import into the list.\n+        add_without_unwanted_attributes(attributes, hir_map.attrs(item.hir_id()), is_inline);\n+\n+        let def_id = if path.segments.len() > 1 {\n+            match path.segments[path.segments.len() - 2].res {\n+                hir::def::Res::Def(_, def_id) => def_id,\n+                _ => break,\n+            }\n+        } else {\n+            // If the path doesn't have a parent, then the parent is the current module.\n+            tcx.parent(item.owner_id.def_id.to_def_id())\n+        };\n+\n+        let Some(parent) = hir_map.get_if_local(def_id) else { break };\n+\n+        // We get the `Ident` we will be looking for into `item`.\n+        let looking_for = path.segments[path.segments.len() - 1].ident;\n+        visitor.reset(looking_for);\n+\n+        match parent {\n+            hir::Node::Item(parent_item) => {\n+                hir::intravisit::walk_item(&mut visitor, parent_item);\n+            }\n+            hir::Node::Crate(m) => {\n+                hir::intravisit::walk_mod(\n+                    &mut visitor,\n+                    m,\n+                    tcx.local_def_id_to_hir_id(def_id.as_local().unwrap()),\n+                );\n             }\n+            _ => break,\n+        }\n+        if let Some(i) = visitor.item {\n+            item = i;\n         } else {\n             break;\n         }\n     }\n }\n \n+fn filter_tokens_from_list(\n+    args_tokens: TokenStream,\n+    should_retain: impl Fn(&TokenTree) -> bool,\n+) -> Vec<TokenTree> {\n+    let mut tokens = Vec::with_capacity(args_tokens.len());\n+    let mut skip_next_comma = false;\n+    for token in args_tokens.into_trees() {\n+        match token {\n+            TokenTree::Token(Token { kind: TokenKind::Comma, .. }, _) if skip_next_comma => {\n+                skip_next_comma = false;\n+            }\n+            token if should_retain(&token) => {\n+                skip_next_comma = false;\n+                tokens.push(token);\n+            }\n+            _ => {\n+                skip_next_comma = true;\n+            }\n+        }\n+    }\n+    tokens\n+}\n+\n+/// When inlining items, we merge its attributes (and all the reexports attributes too) with the\n+/// final reexport. For example:\n+///\n+/// ```ignore (just an example)\n+/// #[doc(hidden, cfg(feature = \"foo\"))]\n+/// pub struct Foo;\n+///\n+/// #[doc(cfg(feature = \"bar\"))]\n+/// #[doc(hidden, no_inline)]\n+/// pub use Foo as Foo1;\n+///\n+/// #[doc(inline)]\n+/// pub use Foo2 as Bar;\n+/// ```\n+///\n+/// So `Bar` at the end will have both `cfg(feature = \"...\")`. However, we don't want to merge all\n+/// attributes so we filter out the following ones:\n+/// * `doc(inline)`\n+/// * `doc(no_inline)`\n+/// * `doc(hidden)`\n+fn add_without_unwanted_attributes(\n+    attrs: &mut Vec<ast::Attribute>,\n+    new_attrs: &[ast::Attribute],\n+    is_inline: bool,\n+) {\n+    // If it's `#[doc(inline)]`, we don't want all attributes, otherwise we keep everything.\n+    if !is_inline {\n+        attrs.extend_from_slice(new_attrs);\n+        return;\n+    }\n+    for attr in new_attrs {\n+        let mut attr = attr.clone();\n+        match attr.kind {\n+            ast::AttrKind::Normal(ref mut normal) => {\n+                if let [ident] = &*normal.item.path.segments &&\n+                    let ident = ident.ident.name &&\n+                    ident == sym::doc\n+                {\n+                    match normal.item.args {\n+                        ast::AttrArgs::Delimited(ref mut args) => {\n+                            let tokens =\n+                                filter_tokens_from_list(args.tokens.clone(), |token| {\n+                                    !matches!(\n+                                        token,\n+                                        TokenTree::Token(\n+                                            Token {\n+                                                kind: TokenKind::Ident(\n+                                                    sym::hidden | sym::inline | sym::no_inline,\n+                                                    _,\n+                                                ),\n+                                                ..\n+                                            },\n+                                            _,\n+                                        ),\n+                                    )\n+                                });\n+                            args.tokens = TokenStream::new(tokens);\n+                            attrs.push(attr);\n+                        }\n+                        ast::AttrArgs::Empty | ast::AttrArgs::Eq(..) => {\n+                            attrs.push(attr);\n+                            continue;\n+                        }\n+                    }\n+                }\n+            }\n+            ast::AttrKind::DocComment(..) => {\n+                attrs.push(attr);\n+            }\n+        }\n+    }\n+}\n+\n fn clean_maybe_renamed_item<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     item: &hir::Item<'tcx>,\n@@ -2212,19 +2329,20 @@ fn clean_maybe_renamed_item<'tcx>(\n         {\n             // First, we add the attributes from the current import.\n             extra_attrs.extend_from_slice(inline::load_attrs(cx, import_id.to_def_id()));\n+            let is_inline = extra_attrs.lists(sym::doc).get_word_attr(sym::inline).is_some();\n             // Then we get all the various imports' attributes.\n-            get_all_import_attributes(use_node, cx.tcx, item.owner_id.def_id, &mut extra_attrs);\n+            get_all_import_attributes(use_node, cx.tcx, item.owner_id.def_id, &mut extra_attrs, is_inline);\n+            add_without_unwanted_attributes(&mut extra_attrs, inline::load_attrs(cx, def_id), is_inline);\n+        } else {\n+            // We only keep the item's attributes.\n+            extra_attrs.extend_from_slice(inline::load_attrs(cx, def_id));\n         }\n \n-        let mut item = if !extra_attrs.is_empty() {\n-            extra_attrs.extend_from_slice(inline::load_attrs(cx, def_id));\n-            let attrs = Attributes::from_ast(&extra_attrs);\n-            let cfg = extra_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg);\n+        let attrs = Attributes::from_ast(&extra_attrs);\n+        let cfg = extra_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg);\n \n-            Item::from_def_id_and_attrs_and_parts(def_id, Some(name), kind, Box::new(attrs), cfg)\n-        } else {\n-            Item::from_def_id_and_parts(def_id, Some(name), kind, cx)\n-        };\n+        let mut item =\n+            Item::from_def_id_and_attrs_and_parts(def_id, Some(name), kind, Box::new(attrs), cfg);\n         item.inline_stmt_id = import_id.map(|def_id| def_id.to_def_id());\n         vec![item]\n     })"}, {"sha": "aa406f30cbe63d16c11fd5596b6cedeb2c7d128f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -361,7 +361,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n             for _ in 0..padding_amout {\n                 br_with_padding.push_str(\" \");\n             }\n-            let where_preds = where_preds.to_string().replace(\"\\n\", &br_with_padding);\n+            let where_preds = where_preds.to_string().replace('\\n', &br_with_padding);\n \n             if ending == Ending::Newline {\n                 let mut clause = \" \".repeat(indent.saturating_sub(1));\n@@ -1419,12 +1419,12 @@ impl clean::FnDecl {\n             format!(\n                 \"({pad}{args}{close}){arrow}\",\n                 pad = if self.inputs.values.is_empty() { \"\" } else { &full_pad },\n-                args = args.replace(\"\\n\", &full_pad),\n+                args = args.replace('\\n', &full_pad),\n                 close = close_pad,\n                 arrow = arrow\n             )\n         } else {\n-            format!(\"({args}){arrow}\", args = args.replace(\"\\n\", \" \"), arrow = arrow)\n+            format!(\"({args}){arrow}\", args = args.replace('\\n', \" \"), arrow = arrow)\n         };\n \n         write!(f, \"{}\", output)"}, {"sha": "f6c23a1365f46ea389b706ea4b4bc1b1231a1799", "filename": "tests/rustdoc/reexport-attr-merge.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Frustdoc%2Freexport-attr-merge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Frustdoc%2Freexport-attr-merge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexport-attr-merge.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -0,0 +1,33 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/59368>.\n+// The goal is to ensure that `doc(hidden)`, `doc(inline)` and `doc(no_inline)`\n+// are not copied from an item when inlined.\n+\n+#![crate_name = \"foo\"]\n+#![feature(doc_cfg)]\n+\n+// @has 'foo/index.html'\n+\n+#[doc(hidden, cfg(feature = \"foo\"))]\n+pub struct Foo;\n+\n+#[doc(hidden, no_inline, cfg(feature = \"bar\"))]\n+pub use Foo as Foo1;\n+\n+#[doc(hidden, inline)]\n+pub use Foo1 as Foo2;\n+\n+// First we ensure that only the reexport `Bar2` and the inlined struct `Bar`\n+// are inlined.\n+// @count - '//a[@class=\"struct\"]' 2\n+// Then we check that both `cfg` are displayed.\n+// @has - '//*[@class=\"stab portability\"]' 'foo'\n+// @has - '//*[@class=\"stab portability\"]' 'bar'\n+// And finally we check that the only element displayed is `Bar`.\n+// @has - '//a[@class=\"struct\"]' 'Bar'\n+#[doc(inline)]\n+pub use Foo2 as Bar;\n+\n+// This one should appear but `Bar2` won't be linked because there is no\n+// `#[doc(inline)]`.\n+// @has - '//*[@id=\"reexport.Bar2\"]' 'pub use Foo2 as Bar2;'\n+pub use Foo2 as Bar2;"}, {"sha": "d1b9d7a40b47b7cb245812660d498ff4d187f8a4", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -7,18 +7,17 @@ LL |   fn oom() -> ! {\n    |  _-^^^^^^^^^^^^\n LL | |     loop {}\n LL | | }\n-   | |_- argument of type `core::alloc::Layout` unexpected\n+   | | -\n+   | | |\n+   | |_unexpected argument of type `core::alloc::Layout`\n+   |   help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/alloc-error-handler-bad-signature-3.rs:10:4\n    |\n LL | fn oom() -> ! {\n    |    ^^^\n    = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: remove the extra argument\n-   |\n-LL | fn oom() -> !() {\n-   |              ++\n \n error: aborting due to previous error\n "}, {"sha": "c74186285f9f08560355849adce977f599333491", "filename": "tests/ui/argument-suggestions/basic.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fbasic.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -16,17 +16,16 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/basic.rs:21:5\n    |\n LL |     extra(\"\");\n-   |     ^^^^^ -- argument of type `&'static str` unexpected\n+   |     ^^^^^ --\n+   |           |\n+   |           unexpected argument of type `&'static str`\n+   |           help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/basic.rs:14:4\n    |\n LL | fn extra() {}\n    |    ^^^^^\n-help: remove the extra argument\n-   |\n-LL |     extra();\n-   |          ~~\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/basic.rs:22:5"}, {"sha": "ff795b507f218db0eb7e2c0387852f7ec517f6f1", "filename": "tests/ui/argument-suggestions/exotic-calls.stderr", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fexotic-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fexotic-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fexotic-calls.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,65 +2,61 @@ error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:2:5\n    |\n LL |     t(1i32);\n-   |     ^ ---- argument of type `i32` unexpected\n+   |     ^ ----\n+   |       |\n+   |       unexpected argument of type `i32`\n+   |       help: remove the extra argument\n    |\n note: callable defined here\n   --> $DIR/exotic-calls.rs:1:11\n    |\n LL | fn foo<T: Fn()>(t: T) {\n    |           ^^^^\n-help: remove the extra argument\n-   |\n-LL |     t();\n-   |      ~~\n \n error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:7:5\n    |\n LL |     t(1i32);\n-   |     ^ ---- argument of type `i32` unexpected\n+   |     ^ ----\n+   |       |\n+   |       unexpected argument of type `i32`\n+   |       help: remove the extra argument\n    |\n note: type parameter defined here\n   --> $DIR/exotic-calls.rs:6:11\n    |\n LL | fn bar(t: impl Fn()) {\n    |           ^^^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |     t();\n-   |      ~~\n \n error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:16:5\n    |\n LL |     baz()(1i32)\n-   |     ^^^^^ ---- argument of type `i32` unexpected\n+   |     ^^^^^ ----\n+   |           |\n+   |           unexpected argument of type `i32`\n+   |           help: remove the extra argument\n    |\n note: opaque type defined here\n   --> $DIR/exotic-calls.rs:11:13\n    |\n LL | fn baz() -> impl Fn() {\n    |             ^^^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |     baz()()\n-   |          ~~\n \n error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:22:5\n    |\n LL |     x(1i32);\n-   |     ^ ---- argument of type `i32` unexpected\n+   |     ^ ----\n+   |       |\n+   |       unexpected argument of type `i32`\n+   |       help: remove the extra argument\n    |\n note: closure defined here\n   --> $DIR/exotic-calls.rs:21:13\n    |\n LL |     let x = || {};\n    |             ^^\n-help: remove the extra argument\n-   |\n-LL |     x();\n-   |      ~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0911685b4280a3e2dd65f497182b7f7ecd7e3e21", "filename": "tests/ui/argument-suggestions/extra_arguments.stderr", "status": "modified", "additions": 70, "deletions": 75, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,57 +2,54 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/extra_arguments.rs:7:3\n    |\n LL |   empty(\"\");\n-   |   ^^^^^ -- argument of type `&'static str` unexpected\n+   |   ^^^^^ --\n+   |         |\n+   |         unexpected argument of type `&'static str`\n+   |         help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:1:4\n    |\n LL | fn empty() {}\n    |    ^^^^^\n-help: remove the extra argument\n-   |\n-LL |   empty();\n-   |        ~~\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/extra_arguments.rs:9:3\n    |\n LL |   one_arg(1, 1);\n-   |   ^^^^^^^    - argument of type `{integer}` unexpected\n+   |   ^^^^^^^  ---\n+   |            | |\n+   |            | unexpected argument of type `{integer}`\n+   |            help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:2:4\n    |\n LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n-help: remove the extra argument\n-   |\n-LL |   one_arg(1);\n-   |          ~~~\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/extra_arguments.rs:10:3\n    |\n LL |   one_arg(1, \"\");\n-   |   ^^^^^^^    -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^  ----\n+   |            | |\n+   |            | unexpected argument of type `&'static str`\n+   |            help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:2:4\n    |\n LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n-help: remove the extra argument\n-   |\n-LL |   one_arg(1);\n-   |          ~~~\n \n error[E0061]: this function takes 1 argument but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:11:3\n    |\n LL |   one_arg(1, \"\", 1.0);\n-   |   ^^^^^^^    --  --- argument of type `{float}` unexpected\n+   |   ^^^^^^^    --  --- unexpected argument of type `{float}`\n    |              |\n-   |              argument of type `&'static str` unexpected\n+   |              unexpected argument of type `&'static str`\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:2:4\n@@ -61,80 +58,77 @@ LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n help: remove the extra arguments\n    |\n-LL |   one_arg(1);\n-   |          ~~~\n+LL -   one_arg(1, \"\", 1.0);\n+LL +   one_arg(1);\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:13:3\n    |\n LL |   two_arg_same(1, 1, 1);\n-   |   ^^^^^^^^^^^^       - argument of type `{integer}` unexpected\n+   |   ^^^^^^^^^^^^     ---\n+   |                    | |\n+   |                    | unexpected argument of type `{integer}`\n+   |                    help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:3:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:14:3\n    |\n LL |   two_arg_same(1, 1, 1.0);\n-   |   ^^^^^^^^^^^^       --- argument of type `{float}` unexpected\n+   |   ^^^^^^^^^^^^     -----\n+   |                    | |\n+   |                    | unexpected argument of type `{float}`\n+   |                    help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:3:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:16:3\n    |\n LL |   two_arg_diff(1, 1, \"\");\n-   |   ^^^^^^^^^^^^    - argument of type `{integer}` unexpected\n+   |   ^^^^^^^^^^^^  ---\n+   |                 | |\n+   |                 | unexpected argument of type `{integer}`\n+   |                 help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:17:3\n    |\n LL |   two_arg_diff(1, \"\", \"\");\n-   |   ^^^^^^^^^^^^        -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^^^      ----\n+   |                     | |\n+   |                     | unexpected argument of type `&'static str`\n+   |                     help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n \n error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n   --> $DIR/extra_arguments.rs:18:3\n    |\n LL |   two_arg_diff(1, 1, \"\", \"\");\n-   |   ^^^^^^^^^^^^    -      -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^^^    -      -- unexpected argument of type `&'static str`\n    |                   |\n-   |                   argument of type `{integer}` unexpected\n+   |                   unexpected argument of type `{integer}`\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n@@ -143,16 +137,17 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra arguments\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -   two_arg_diff(1, 1, \"\", \"\");\n+LL +   two_arg_diff(1, \"\");\n+   |\n \n error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n   --> $DIR/extra_arguments.rs:19:3\n    |\n LL |   two_arg_diff(1, \"\", 1, \"\");\n-   |   ^^^^^^^^^^^^        -  -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^^^        -  -- unexpected argument of type `&'static str`\n    |                       |\n-   |                       argument of type `{integer}` unexpected\n+   |                       unexpected argument of type `{integer}`\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n@@ -161,78 +156,78 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra arguments\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -   two_arg_diff(1, \"\", 1, \"\");\n+LL +   two_arg_diff(1, \"\");\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:22:3\n    |\n LL |   two_arg_same(1, 1,     \"\");\n-   |   ^^^^^^^^^^^^           -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^^^     --------\n+   |                    |     |\n+   |                    |     unexpected argument of type `&'static str`\n+   |                    help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:3:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:23:3\n    |\n LL |   two_arg_diff(1, 1,     \"\");\n-   |   ^^^^^^^^^^^^    - argument of type `{integer}` unexpected\n+   |   ^^^^^^^^^^^^  ---\n+   |                 | |\n+   |                 | unexpected argument of type `{integer}`\n+   |                 help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:24:3\n    |\n-LL |   two_arg_same(\n-   |   ^^^^^^^^^^^^\n-...\n-LL |     \"\"\n-   |     -- argument of type `&'static str` unexpected\n+LL |     two_arg_same(\n+   |     ^^^^^^^^^^^^\n+LL |       1,\n+LL |       1,\n+   |  ______-\n+LL | |     \"\"\n+   | |     --\n+   | |_____||\n+   |       |help: remove the extra argument\n+   |       unexpected argument of type `&'static str`\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:3:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:30:3\n    |\n-LL |   two_arg_diff(\n-   |   ^^^^^^^^^^^^\n-LL |     1,\n-LL |     1,\n-   |     - argument of type `{integer}` unexpected\n+LL |     two_arg_diff(\n+   |     ^^^^^^^^^^^^\n+LL |       1,\n+   |  ______-\n+LL | |     1,\n+   | |     -\n+   | |     |\n+   | |_____unexpected argument of type `{integer}`\n+   |       help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/extra_arguments.rs:4:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n-help: remove the extra argument\n-   |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n \n error: aborting due to 14 previous errors\n "}, {"sha": "061f510144bda630423bbecc95277adef416d6a2", "filename": "tests/ui/argument-suggestions/issue-101097.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this function takes 6 arguments but 7 arguments were supplied\n LL |     f(C, A, A, A, B, B, C);\n    |     ^ -     -  -  - expected `C`, found `B`\n    |       |     |  |\n-   |       |     |  argument of type `A` unexpected\n+   |       |     |  unexpected argument of type `A`\n    |       |     expected `B`, found `A`\n    |       expected `A`, found `C`\n    |\n@@ -64,8 +64,8 @@ error[E0308]: arguments to this function are incorrect\n LL |     f(A, A, D, D, B, B);\n    |     ^       -  -  ---- two arguments of type `C` and `C` are missing\n    |             |  |\n-   |             |  argument of type `D` unexpected\n-   |             argument of type `D` unexpected\n+   |             |  unexpected argument of type `D`\n+   |             unexpected argument of type `D`\n    |\n note: function defined here\n   --> $DIR/issue-101097.rs:6:4"}, {"sha": "a86cbbf1802e17d66cea042c9255441bb338962e", "filename": "tests/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,11 +2,11 @@ error[E0061]: this function takes 4 arguments but 7 arguments were supplied\n   --> $DIR/issue-97484.rs:12:5\n    |\n LL |     foo(&&A, B, C, D, E, F, G);\n-   |     ^^^      -  -     -  - argument of type `F` unexpected\n+   |     ^^^      -  -     -  - unexpected argument of type `F`\n    |              |  |     |\n    |              |  |     expected `&E`, found `E`\n-   |              |  argument of type `C` unexpected\n-   |              argument of type `B` unexpected\n+   |              |  unexpected argument of type `C`\n+   |              unexpected argument of type `B`\n    |\n note: function defined here\n   --> $DIR/issue-97484.rs:9:4\n@@ -19,8 +19,9 @@ LL |     foo(&&A, B, C, D, &E, F, G);\n    |                       ~~\n help: remove the extra arguments\n    |\n-LL |     foo(&&A, D, /* &E */, G);\n-   |        ~~~~~~~~~~~~~~~~~~~~~\n+LL -     foo(&&A, B, C, D, E, F, G);\n+LL +     foo(&&A, D, /* &E */, G);\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c645dd381792953442bc300a50b0bd440aa07780", "filename": "tests/ui/argument-suggestions/mixed_cases.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/mixed_cases.rs:10:3\n    |\n LL |   two_args(1, \"\", X {});\n-   |   ^^^^^^^^    --  ---- argument of type `X` unexpected\n+   |   ^^^^^^^^    --  ---- unexpected argument of type `X`\n    |               |\n    |               expected `f32`, found `&str`\n    |\n@@ -13,16 +13,17 @@ LL | fn two_args(_a: i32, _b: f32) {}\n    |    ^^^^^^^^ -------  -------\n help: remove the extra argument\n    |\n-LL |   two_args(1, /* f32 */);\n-   |           ~~~~~~~~~~~~~~\n+LL -   two_args(1, \"\", X {});\n+LL +   two_args(1, /* f32 */);\n+   |\n \n error[E0061]: this function takes 3 arguments but 4 arguments were supplied\n   --> $DIR/mixed_cases.rs:11:3\n    |\n LL |   three_args(1, \"\", X {}, \"\");\n-   |   ^^^^^^^^^^    --  ----  -- argument of type `&'static str` unexpected\n+   |   ^^^^^^^^^^    --  ----  -- unexpected argument of type `&'static str`\n    |                 |   |\n-   |                 |   argument of type `X` unexpected\n+   |                 |   unexpected argument of type `X`\n    |                 an argument of type `f32` is missing\n    |\n note: function defined here\n@@ -58,7 +59,7 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/mixed_cases.rs:17:3\n    |\n LL |   three_args(1, \"\", X {});\n-   |   ^^^^^^^^^^    --  ---- argument of type `X` unexpected\n+   |   ^^^^^^^^^^    --  ---- unexpected argument of type `X`\n    |                 |\n    |                 an argument of type `f32` is missing\n    |"}, {"sha": "9b0cf069824a6155691a9e29dff53cae8cab205c", "filename": "tests/ui/error-codes/E0057.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0057.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -18,17 +18,16 @@ error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/E0057.rs:5:13\n    |\n LL |     let c = f(2, 3);\n-   |             ^    - argument of type `{integer}` unexpected\n+   |             ^  ---\n+   |                | |\n+   |                | unexpected argument of type `{integer}`\n+   |                help: remove the extra argument\n    |\n note: closure defined here\n   --> $DIR/E0057.rs:2:13\n    |\n LL |     let f = |x| x * 3;\n    |             ^^^\n-help: remove the extra argument\n-   |\n-LL |     let c = f(2);\n-   |              ~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6db29bc61b12aa716d19e2060a9371963d9d96b4", "filename": "tests/ui/issues/issue-16939.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fissues%2Fissue-16939.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fissues%2Fissue-16939.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16939.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,17 +2,16 @@ error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/issue-16939.rs:5:9\n    |\n LL |     |t| f(t);\n-   |         ^ - argument unexpected\n+   |         ^ -\n+   |           |\n+   |           unexpected argument\n+   |           help: remove the extra argument\n    |\n note: callable defined here\n   --> $DIR/issue-16939.rs:4:12\n    |\n LL | fn _foo<F: Fn()> (f: F) {\n    |            ^^^^\n-help: remove the extra argument\n-   |\n-LL |     |t| f();\n-   |          ~~\n \n error: aborting due to previous error\n "}, {"sha": "abf3543ddb9f8c85f4d2def2baaf3865229960f5", "filename": "tests/ui/issues/issue-26094.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fissues%2Fissue-26094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fissues%2Fissue-26094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-26094.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -1,6 +1,6 @@\n macro_rules! some_macro {\n     ($other: expr) => ({\n-        $other(None) //~ NOTE argument of type `Option<_>` unexpected\n+        $other(None) //~ NOTE unexpected argument of type `Option<_>`\n     })\n }\n "}, {"sha": "608d2c7aff93f59ac2722183559f3864ec5aa667", "filename": "tests/ui/issues/issue-26094.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-26094.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,7 +2,10 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/issue-26094.rs:10:17\n    |\n LL |         $other(None)\n-   |                ---- argument of type `Option<_>` unexpected\n+   |                ----\n+   |                |\n+   |                unexpected argument of type `Option<_>`\n+   |                help: remove the extra argument\n ...\n LL |     some_macro!(some_function);\n    |                 ^^^^^^^^^^^^^\n@@ -12,10 +15,6 @@ note: function defined here\n    |\n LL | fn some_function() {}\n    |    ^^^^^^^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |         some_function()\n-   |         ~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "e544e4244034df0cd69c4bc407ae3d0e9c6a4b90", "filename": "tests/ui/issues/issue-4935.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fissues%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fissues%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4935.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,17 +2,16 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/issue-4935.rs:5:13\n    |\n LL | fn main() { foo(5, 6) }\n-   |             ^^^    - argument of type `{integer}` unexpected\n+   |             ^^^  ---\n+   |                  | |\n+   |                  | unexpected argument of type `{integer}`\n+   |                  help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/issue-4935.rs:3:4\n    |\n LL | fn foo(a: usize) {}\n    |    ^^^ --------\n-help: remove the extra argument\n-   |\n-LL | fn main() { foo(5) }\n-   |                ~~~\n \n error: aborting due to previous error\n "}, {"sha": "0f37e8f09a964153b9d4972eea114c40dbee3ac0", "filename": "tests/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,17 +2,16 @@ error[E0061]: this method takes 0 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:13:7\n    |\n LL |     x.zero(0)\n-   |       ^^^^ - argument of type `{integer}` unexpected\n+   |       ^^^^ -\n+   |            |\n+   |            unexpected argument of type `{integer}`\n+   |            help: remove the extra argument\n    |\n note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:5:8\n    |\n LL |     fn zero(self) -> Foo { self }\n    |        ^^^^\n-help: remove the extra argument\n-   |\n-LL |     x.zero()\n-   |           ~~\n \n error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:14:7"}, {"sha": "cd483e7ad2c6470984b1df1c5600b004fb5e2256", "filename": "tests/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -32,7 +32,7 @@ error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:37:15\n    |\n LL |     let ans = s(\"burma\", \"shave\");\n-   |               ^ -------  ------- argument of type `&'static str` unexpected\n+   |               ^ -------  ------- unexpected argument of type `&'static str`\n    |                 |\n    |                 expected `isize`, found `&str`\n    |\n@@ -43,8 +43,9 @@ LL | impl FnMut<(isize,)> for S {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: remove the extra argument\n    |\n-LL |     let ans = s(/* isize */);\n-   |                ~~~~~~~~~~~~~\n+LL -     let ans = s(\"burma\", \"shave\");\n+LL +     let ans = s(/* isize */);\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/overloaded-calls-bad.rs:40:7"}, {"sha": "f803f9da2af1a5f08cb68455d13c223f72fd68b2", "filename": "tests/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -24,14 +24,13 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5\n    |\n LL |     std::mem::size_of(u16);\n-   |     ^^^^^^^^^^^^^^^^^ --- argument unexpected\n+   |     ^^^^^^^^^^^^^^^^^ ---\n+   |                       |\n+   |                       unexpected argument\n+   |                       help: remove the extra argument\n    |\n note: function defined here\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-help: remove the extra argument\n-   |\n-LL |     std::mem::size_of();\n-   |                      ~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f0dea66f6128d77c94f59359198e6f873a04eaed", "filename": "tests/ui/span/issue-34264.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-34264.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -54,17 +54,16 @@ error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:7:5\n    |\n LL |     foo(Some(42), 2, \"\");\n-   |     ^^^              -- argument of type `&'static str` unexpected\n+   |     ^^^            ----\n+   |                    | |\n+   |                    | unexpected argument of type `&'static str`\n+   |                    help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/issue-34264.rs:1:4\n    |\n LL | fn foo(Option<i32>, String) {}\n    |    ^^^ -----------  ------\n-help: remove the extra argument\n-   |\n-LL |     foo(Some(42), 2);\n-   |        ~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:8:13\n@@ -84,17 +83,16 @@ error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:10:5\n    |\n LL |     bar(1, 2, 3);\n-   |     ^^^       - argument of type `{integer}` unexpected\n+   |     ^^^     ---\n+   |             | |\n+   |             | unexpected argument of type `{integer}`\n+   |             help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/issue-34264.rs:3:4\n    |\n LL | fn bar(x, y: usize) {}\n    |    ^^^ -  --------\n-help: remove the extra argument\n-   |\n-LL |     bar(1, 2);\n-   |        ~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "510b99bb5af73f5d3295519fbaccfd431e36ebb7", "filename": "tests/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:6:34\n    |\n LL |     let _: Option<(i32, bool)> = Some(1, 2);\n-   |                                  ^^^^    - argument of type `{integer}` unexpected\n+   |                                  ^^^^    - unexpected argument of type `{integer}`\n    |\n note: expected `(i32, bool)`, found integer\n   --> $DIR/args-instead-of-tuple-errors.rs:6:39\n@@ -22,14 +22,15 @@ note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n help: remove the extra argument\n    |\n-LL |     let _: Option<(i32, bool)> = Some(/* (i32, bool) */);\n-   |                                      ~~~~~~~~~~~~~~~~~~~\n+LL -     let _: Option<(i32, bool)> = Some(1, 2);\n+LL +     let _: Option<(i32, bool)> = Some(/* (i32, bool) */);\n+   |\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:8:5\n    |\n LL |     int_bool(1, 2);\n-   |     ^^^^^^^^    - argument of type `{integer}` unexpected\n+   |     ^^^^^^^^    - unexpected argument of type `{integer}`\n    |\n note: expected `(i32, bool)`, found integer\n   --> $DIR/args-instead-of-tuple-errors.rs:8:14\n@@ -45,8 +46,9 @@ LL | fn int_bool(_: (i32, bool)) {\n    |    ^^^^^^^^ --------------\n help: remove the extra argument\n    |\n-LL |     int_bool(/* (i32, bool) */);\n-   |             ~~~~~~~~~~~~~~~~~~~\n+LL -     int_bool(1, 2);\n+LL +     int_bool(/* (i32, bool) */);\n+   |\n \n error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:11:28"}, {"sha": "d254c0ae3ef92ce070e54de23857ad294a6fabf0", "filename": "tests/ui/traits/alias/issue-108072-unmet-trait-alias-bound.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.rs?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for #108072: do not ICE upon unmet trait alias constraint\n+\n+#![feature(trait_alias)]\n+\n+trait IteratorAlias = Iterator;\n+\n+fn f(_: impl IteratorAlias) {}\n+\n+fn main() {\n+    f(()) //~ `()` is not an iterator\n+}"}, {"sha": "39f974f962c2ba893e34408102e467402af6361f", "filename": "tests/ui/traits/alias/issue-108072-unmet-trait-alias-bound.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-108072-unmet-trait-alias-bound.rs:10:7\n+   |\n+LL |     f(())\n+   |     - ^^ `()` is not an iterator\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+   = note: required for `()` to implement `IteratorAlias`\n+note: required by a bound in `f`\n+  --> $DIR/issue-108072-unmet-trait-alias-bound.rs:7:14\n+   |\n+LL | fn f(_: impl IteratorAlias) {}\n+   |              ^^^^^^^^^^^^^ required by this bound in `f`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7143c959478b47d4df505125c071a3f797c7a00d", "filename": "tests/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this method takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n LL |         groups.push(new_group, vec![process]);\n-   |                ^^^^            ------------- argument of type `Vec<&Process>` unexpected\n+   |                ^^^^            ------------- unexpected argument of type `Vec<&Process>`\n    |\n note: expected `(Vec<String>, Vec<Process>)`, found `Vec<String>`\n   --> $DIR/wrong_argument_ice-3.rs:9:21\n@@ -15,8 +15,9 @@ note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n help: remove the extra argument\n    |\n-LL |         groups.push(/* (Vec<String>, Vec<Process>) */);\n-   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL -         groups.push(new_group, vec![process]);\n+LL +         groups.push(/* (Vec<String>, Vec<Process>) */);\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "d8569ebf6b6e29fa38f163a50a24d9c31250717c", "filename": "tests/ui/tuple/wrong_argument_ice-4.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -6,17 +6,16 @@ LL |       (|| {})(|| {\n LL | |\n LL | |         let b = 1;\n LL | |     });\n-   | |_____- argument of type `[closure@$DIR/wrong_argument_ice-4.rs:2:13: 2:15]` unexpected\n+   | |     -\n+   | |     |\n+   | |_____unexpected argument of type `[closure@$DIR/wrong_argument_ice-4.rs:2:13: 2:15]`\n+   |       help: remove the extra argument\n    |\n note: closure defined here\n   --> $DIR/wrong_argument_ice-4.rs:2:6\n    |\n LL |     (|| {})(|| {\n    |      ^^\n-help: remove the extra argument\n-   |\n-LL |     (|| {})();\n-   |            ~~\n \n error: aborting due to previous error\n "}, {"sha": "429501c2762fc61ba27a017d5b32a81ad1ecde27", "filename": "tests/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -11,14 +11,13 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/type-ascription-instead-of-initializer.rs:2:12\n    |\n LL |     let x: Vec::with_capacity(10, 20);\n-   |            ^^^^^^^^^^^^^^^^^^     -- argument of type `{integer}` unexpected\n+   |            ^^^^^^^^^^^^^^^^^^   ----\n+   |                                 | |\n+   |                                 | unexpected argument of type `{integer}`\n+   |                                 help: remove the extra argument\n    |\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-help: remove the extra argument\n-   |\n-LL |     let x: Vec::with_capacity(10);\n-   |                              ~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "72ddebab486ce07820a0a9f3d388612d17adefb0", "filename": "tests/ui/typeck/remove-extra-argument.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftypeck%2Fremove-extra-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftypeck%2Fremove-extra-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fremove-extra-argument.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,17 +2,16 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/remove-extra-argument.rs:6:5\n    |\n LL |     l(vec![], vec![])\n-   |     ^         ------ argument of type `Vec<_>` unexpected\n+   |     ^       --------\n+   |             | |\n+   |             | unexpected argument of type `Vec<_>`\n+   |             help: remove the extra argument\n    |\n note: function defined here\n   --> $DIR/remove-extra-argument.rs:3:4\n    |\n LL | fn l(_a: Vec<u8>) {}\n    |    ^ -----------\n-help: remove the extra argument\n-   |\n-LL |     l(vec![])\n-   |      ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "57cbd1d2005c3411905b9a28ce864db7f13c7ca7", "filename": "tests/ui/typeck/struct-enum-wrong-args.stderr", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/tests%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -2,29 +2,29 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:6:13\n    |\n LL |     let _ = Some(3, 2);\n-   |             ^^^^    - argument of type `{integer}` unexpected\n+   |             ^^^^  ---\n+   |                   | |\n+   |                   | unexpected argument of type `{integer}`\n+   |                   help: remove the extra argument\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-help: remove the extra argument\n-   |\n-LL |     let _ = Some(3);\n-   |                 ~~~\n \n error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:7:13\n    |\n LL |     let _ = Ok(3, 6, 2);\n-   |             ^^    -  - argument of type `{integer}` unexpected\n+   |             ^^    -  - unexpected argument of type `{integer}`\n    |                   |\n-   |                   argument of type `{integer}` unexpected\n+   |                   unexpected argument of type `{integer}`\n    |\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n help: remove the extra arguments\n    |\n-LL |     let _ = Ok(3);\n-   |               ~~~\n+LL -     let _ = Ok(3, 6, 2);\n+LL +     let _ = Ok(3);\n+   |\n \n error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:8:13\n@@ -59,17 +59,16 @@ error[E0061]: this struct takes 1 argument but 2 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:10:13\n    |\n LL |     let _ = Wrapper(5, 2);\n-   |             ^^^^^^^    - argument of type `{integer}` unexpected\n+   |             ^^^^^^^  ---\n+   |                      | |\n+   |                      | unexpected argument of type `{integer}`\n+   |                      help: remove the extra argument\n    |\n note: tuple struct defined here\n   --> $DIR/struct-enum-wrong-args.rs:2:8\n    |\n LL | struct Wrapper(i32);\n    |        ^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |     let _ = Wrapper(5);\n-   |                    ~~~\n \n error[E0061]: this struct takes 2 arguments but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:11:13\n@@ -107,17 +106,16 @@ error[E0061]: this struct takes 2 arguments but 3 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:13:13\n    |\n LL |     let _ = DoubleWrapper(5, 2, 7);\n-   |             ^^^^^^^^^^^^^       - argument of type `{integer}` unexpected\n+   |             ^^^^^^^^^^^^^     ---\n+   |                               | |\n+   |                               | unexpected argument of type `{integer}`\n+   |                               help: remove the extra argument\n    |\n note: tuple struct defined here\n   --> $DIR/struct-enum-wrong-args.rs:3:8\n    |\n LL | struct DoubleWrapper(i32, i32);\n    |        ^^^^^^^^^^^^^\n-help: remove the extra argument\n-   |\n-LL |     let _ = DoubleWrapper(5, 2);\n-   |                          ~~~~~~\n \n error: aborting due to 8 previous errors\n "}, {"sha": "8a9d9403366d86df06dfec2da8ea1fb6151e57aa", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7cc6c32f1a690f86827e4724bcda85e506ef35/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9a7cc6c32f1a690f86827e4724bcda85e506ef35/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=9a7cc6c32f1a690f86827e4724bcda85e506ef35", "patch": "@@ -630,7 +630,7 @@ style-team = [\n \"/src/stage0.json\" =                         [\"bootstrap\"]\n \"/tests/ui\" =                                [\"compiler\"]\n \"/src/tools/cargo\" =                         [\"@ehuss\", \"@joshtriplett\"]\n-\"/src/tools/compiletest\" =                   [\"bootstrap\"]\n+\"/src/tools/compiletest\" =                   [\"bootstrap\", \"@wesleywiser\", \"@oli-obk\"]\n \"/src/tools/linkchecker\" =                   [\"@ehuss\"]\n \"/src/tools/rust-installer\" =                [\"bootstrap\"]\n \"/src/tools/rustbook\" =                      [\"@ehuss\"]"}]}