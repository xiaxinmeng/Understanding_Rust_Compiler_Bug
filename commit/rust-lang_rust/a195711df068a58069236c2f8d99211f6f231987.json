{"sha": "a195711df068a58069236c2f8d99211f6f231987", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOTU3MTFkZjA2OGE1ODA2OTIzNmMyZjhkOTkyMTFmNmYyMzE5ODc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-10T08:29:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-10T08:37:22Z"}, "message": "Resolve TupleStructPat in SourceAnalyzer::resolve_path", "tree": {"sha": "289f52f343cbe0dfb99b1b6ad282c98c0000e26e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289f52f343cbe0dfb99b1b6ad282c98c0000e26e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a195711df068a58069236c2f8d99211f6f231987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a195711df068a58069236c2f8d99211f6f231987", "html_url": "https://github.com/rust-lang/rust/commit/a195711df068a58069236c2f8d99211f6f231987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a195711df068a58069236c2f8d99211f6f231987/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36465b34b3b7f991ebf85680924acdb809b0494e", "url": "https://api.github.com/repos/rust-lang/rust/commits/36465b34b3b7f991ebf85680924acdb809b0494e", "html_url": "https://github.com/rust-lang/rust/commit/36465b34b3b7f991ebf85680924acdb809b0494e"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "bed3fa50fdf73bf352a257283678ebffbf25f49b", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a195711df068a58069236c2f8d99211f6f231987/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a195711df068a58069236c2f8d99211f6f231987/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=a195711df068a58069236c2f8d99211f6f231987", "patch": "@@ -222,8 +222,9 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         path: &ast::Path,\n     ) -> Option<PathResolution> {\n+        let parent = || path.syntax().parent();\n         let mut prefer_value_ns = false;\n-        if let Some(path_expr) = path.syntax().parent().and_then(ast::PathExpr::cast) {\n+        if let Some(path_expr) = parent().and_then(ast::PathExpr::cast) {\n             let expr_id = self.expr_id(db, &path_expr.into())?;\n             let infer = self.infer.as_ref()?;\n             if let Some(assoc) = infer.assoc_resolutions_for_expr(expr_id) {\n@@ -237,7 +238,7 @@ impl SourceAnalyzer {\n             prefer_value_ns = true;\n         }\n \n-        if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n+        if let Some(path_pat) = parent().and_then(ast::PathPat::cast) {\n             let pat_id = self.pat_id(&path_pat.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n                 return Some(PathResolution::AssocItem(assoc.into()));\n@@ -249,7 +250,7 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        if let Some(rec_lit) = path.syntax().parent().and_then(ast::RecordExpr::cast) {\n+        if let Some(rec_lit) = parent().and_then(ast::RecordExpr::cast) {\n             let expr_id = self.expr_id(db, &rec_lit.into())?;\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n@@ -258,8 +259,12 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        if let Some(rec_pat) = path.syntax().parent().and_then(ast::RecordPat::cast) {\n-            let pat_id = self.pat_id(&rec_pat.into())?;\n+        if let Some(pat) = parent()\n+            .and_then(ast::RecordPat::cast)\n+            .map(ast::Pat::from)\n+            .or_else(|| parent().and_then(ast::TupleStructPat::cast).map(ast::Pat::from))\n+        {\n+            let pat_id = self.pat_id(&pat)?;\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n             {\n@@ -272,7 +277,7 @@ impl SourceAnalyzer {\n \n         // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we\n         // trying to resolve foo::bar.\n-        if let Some(outer_path) = path.syntax().parent().and_then(ast::Path::cast) {\n+        if let Some(outer_path) = parent().and_then(ast::Path::cast) {\n             if let Some(qualifier) = outer_path.qualifier() {\n                 if path == &qualifier {\n                     return resolve_hir_path_qualifier(db, &self.resolver, &hir_path);"}, {"sha": "6999dacee3aae0b2dbf9c5c31f7c8c4d5dbaeb1b", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a195711df068a58069236c2f8d99211f6f231987/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a195711df068a58069236c2f8d99211f6f231987/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=a195711df068a58069236c2f8d99211f6f231987", "patch": "@@ -1114,4 +1114,27 @@ trait Foo {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_self_variant_with_payload() {\n+        check(\n+            r#\"\n+enum Foo { Bar() }\n+\n+impl Foo {\n+    fn foo(self) {\n+        match self {\n+            Self::Bar$0() => (),\n+        }\n+    }\n+}\n+\n+\"#,\n+            expect![[r#\"\n+                Bar Variant FileId(0) 11..16 11..14 Other\n+\n+                FileId(0) 89..92 Other\n+            \"#]],\n+        );\n+    }\n }"}]}