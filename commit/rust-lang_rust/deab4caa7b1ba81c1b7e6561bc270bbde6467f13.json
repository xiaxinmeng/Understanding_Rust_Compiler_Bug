{"sha": "deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYWI0Y2FhN2IxYmE4MWMxYjdlNjU2MWJjMjcwYmJkZTY0NjdmMTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-12T16:41:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-12T16:41:13Z"}, "message": "make Parse fields private\n\nthis is in preparation for the new rowan API", "tree": {"sha": "af552549d828905294f4f3c109cdc339c12020ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af552549d828905294f4f3c109cdc339c12020ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "html_url": "https://github.com/rust-lang/rust/commit/deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e466bb365813620de15afd5e04736a92fffdca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e466bb365813620de15afd5e04736a92fffdca9", "html_url": "https://github.com/rust-lang/rust/commit/2e466bb365813620de15afd5e04736a92fffdca9"}], "stats": {"total": 208, "additions": 109, "deletions": 99}, "files": [{"sha": "34b2071540079a40d8891c6de0a3d1b943b29b67", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -71,11 +71,11 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n     where\n         F: FnOnce(AssistCtx<DB>) -> T,\n     {\n-        let source_file = &db.parse(frange.file_id).tree;\n+        let parse = db.parse(frange.file_id);\n         let assist =\n             if should_compute_edit { Assist::Resolved(vec![]) } else { Assist::Unresolved(vec![]) };\n \n-        let ctx = AssistCtx { db, frange, source_file, should_compute_edit, assist };\n+        let ctx = AssistCtx { db, frange, source_file: parse.tree(), should_compute_edit, assist };\n         f(ctx)\n     }\n "}, {"sha": "7b743c9f0938d387e91c16c48acce04f60ffc0f4", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -278,16 +278,17 @@ impl AstBuilder<ast::NameRef> {\n }\n \n fn ast_node_from_file_text<N: AstNode>(text: &str) -> TreeArc<N> {\n-    let file = SourceFile::parse(text).tree;\n-    let res = file.syntax().descendants().find_map(N::cast).unwrap().to_owned();\n+    let parse = SourceFile::parse(text);\n+    let res = parse.tree().syntax().descendants().find_map(N::cast).unwrap().to_owned();\n     res\n }\n \n mod tokens {\n     use once_cell::sync::Lazy;\n     use ra_syntax::{AstNode, SourceFile, SyntaxKind::*, SyntaxToken, TreeArc, T};\n \n-    static SOURCE_FILE: Lazy<TreeArc<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\").tree);\n+    static SOURCE_FILE: Lazy<TreeArc<SourceFile>> =\n+        Lazy::new(|| SourceFile::parse(\",\\n; ;\").tree().to_owned());\n \n     pub(crate) fn comma() -> SyntaxToken<'static> {\n         SOURCE_FILE"}, {"sha": "b063193cfad626c2096dc41474421f5697ffbdf5", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -102,7 +102,7 @@ fn main() -> Result<()> {\n \n fn file() -> Result<TreeArc<SourceFile>> {\n     let text = read_stdin()?;\n-    Ok(SourceFile::parse(&text).tree)\n+    Ok(SourceFile::parse(&text).tree().to_owned())\n }\n \n fn read_stdin() -> Result<String> {"}, {"sha": "4fb5844f46c4db9a84d0d15936dab62b3ce42c91", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -167,7 +167,7 @@ impl ModuleSource {\n     ) -> ModuleSource {\n         match (file_id, decl_id) {\n             (Some(file_id), _) => {\n-                let source_file = db.parse(file_id).tree;\n+                let source_file = db.parse(file_id).tree().to_owned();\n                 ModuleSource::SourceFile(source_file)\n             }\n             (None, Some(item_id)) => {"}, {"sha": "c2a10a0b5c29c3fa0ffa8826bf1b92de98805019", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -71,7 +71,8 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n         let source_map = self.func.body_source_map(db);\n         let file_id = self.func.source(db).file_id;\n-        let source_file = db.parse(file_id.original_file(db)).tree;\n+        let parse = db.parse(file_id.original_file(db));\n+        let source_file = parse.tree();\n         if let Some(field_list_node) = source_map\n             .expr_syntax(id)\n             .map(|ptr| ptr.to_node(source_file.syntax()))"}, {"sha": "80e9cccd638dfe7e808f15eb3eb373ff446a69bd", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -60,7 +60,7 @@ impl HirFileId {\n         file_id: HirFileId,\n     ) -> Option<TreeArc<SyntaxNode>> {\n         match file_id.0 {\n-            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).tree.syntax().to_owned()),\n+            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).tree().syntax().to_owned()),\n             HirFileIdRepr::Macro(macro_file) => db.parse_macro(macro_file),\n         }\n     }"}, {"sha": "573add7da5a49a57bf4d3ccf31e2f118e74d8f58", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -49,8 +49,8 @@ pub fn module_from_declaration(\n \n /// Locates the module by position in the source code.\n pub fn module_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Module> {\n-    let file = db.parse(position.file_id).tree;\n-    match find_node_at_offset::<ast::Module>(file.syntax(), position.offset) {\n+    let parse = db.parse(position.file_id);\n+    match find_node_at_offset::<ast::Module>(parse.tree().syntax(), position.offset) {\n         Some(m) if !m.has_semi() => module_from_inline(db, position.file_id, m),\n         _ => module_from_file_id(db, position.file_id),\n     }"}, {"sha": "11dea7c1463c1a58756fc36d5b1cb4fef70a08f8", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -10,8 +10,8 @@ use crate::{db::RootDatabase, CallInfo, FilePosition, FunctionSignature};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n-    let file = db.parse(position.file_id).tree;\n-    let syntax = file.syntax();\n+    let parse = db.parse(position.file_id);\n+    let syntax = parse.tree().syntax();\n \n     // Find the calling expression and it's NameRef\n     let calling_node = FnCallNode::with_node(syntax, position.offset)?;"}, {"sha": "1ba818197f885c6d74aef0206c9a39628fdc7025", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -135,8 +135,8 @@ impl LibraryData {\n         files: Vec<(FileId, RelativePathBuf, Arc<String>)>,\n     ) -> LibraryData {\n         let symbol_index = SymbolIndex::for_files(files.par_iter().map(|(file_id, _, text)| {\n-            let file = SourceFile::parse(text).tree;\n-            (*file_id, file)\n+            let parse = SourceFile::parse(text);\n+            (*file_id, parse)\n         }));\n         let mut root_change = RootChange::default();\n         root_change.added = files"}, {"sha": "f6584cdd67cb1b8c4efbf47b5fd41ce895b07a35", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -48,7 +48,7 @@ impl<'a> CompletionContext<'a> {\n     ) -> Option<CompletionContext<'a>> {\n         let module = source_binder::module_from_position(db, position);\n         let token =\n-            find_token_at_offset(original_parse.tree.syntax(), position.offset).left_biased()?;\n+            find_token_at_offset(original_parse.tree().syntax(), position.offset).left_biased()?;\n         let analyzer =\n             hir::SourceAnalyzer::new(db, position.file_id, token.parent(), Some(position.offset));\n         let mut ctx = CompletionContext {\n@@ -89,7 +89,7 @@ impl<'a> CompletionContext<'a> {\n         // actual completion.\n         let file = {\n             let edit = AtomTextEdit::insert(offset, \"intellijRulezz\".to_string());\n-            original_parse.reparse(&edit).tree\n+            original_parse.reparse(&edit).tree().to_owned()\n         };\n \n         // First, let's try to complete a reference to some declaration.\n@@ -100,7 +100,7 @@ impl<'a> CompletionContext<'a> {\n                 self.is_param = true;\n                 return;\n             }\n-            self.classify_name_ref(&original_parse.tree, name_ref);\n+            self.classify_name_ref(original_parse.tree(), name_ref);\n         }\n \n         // Otherwise, see if this is a declaration. We can use heuristics to"}, {"sha": "3f5b9e0a0de5a40bf53ceb3062e5e63790d69ffa", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -27,14 +27,14 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     let parse = db.parse(file_id);\n     let mut res = Vec::new();\n \n-    res.extend(parse.errors.iter().map(|err| Diagnostic {\n+    res.extend(parse.errors().iter().map(|err| Diagnostic {\n         range: location_to_range(err.location()),\n         message: format!(\"Syntax Error: {}\", err),\n         severity: Severity::Error,\n         fix: None,\n     }));\n \n-    for node in parse.tree.syntax().descendants() {\n+    for node in parse.tree().syntax().descendants() {\n         check_unnecessary_braces_in_use_statement(&mut res, file_id, node);\n         check_struct_shorthand_initialization(&mut res, file_id, node);\n     }\n@@ -181,18 +181,18 @@ mod tests {\n     type DiagnosticChecker = fn(&mut Vec<Diagnostic>, FileId, &SyntaxNode) -> Option<()>;\n \n     fn check_not_applicable(code: &str, func: DiagnosticChecker) {\n-        let file = SourceFile::parse(code).tree;\n+        let parse = SourceFile::parse(code);\n         let mut diagnostics = Vec::new();\n-        for node in file.syntax().descendants() {\n+        for node in parse.tree().syntax().descendants() {\n             func(&mut diagnostics, FileId(0), node);\n         }\n         assert!(diagnostics.is_empty());\n     }\n \n     fn check_apply(before: &str, after: &str, func: DiagnosticChecker) {\n-        let file = SourceFile::parse(before).tree;\n+        let parse = SourceFile::parse(before);\n         let mut diagnostics = Vec::new();\n-        for node in file.syntax().descendants() {\n+        for node in parse.tree().syntax().descendants() {\n             func(&mut diagnostics, FileId(0), node);\n         }\n         let diagnostic ="}, {"sha": "20a8d418e904c6e9dddcea0791462565041e6218", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -93,8 +93,8 @@ impl NavigationTarget {\n         file_id: FileId,\n         pat: AstPtr<ast::Pat>,\n     ) -> NavigationTarget {\n-        let file = db.parse(file_id).tree;\n-        let (name, full_range) = match pat.to_node(file.syntax()).kind() {\n+        let parse = db.parse(file_id);\n+        let (name, full_range) = match pat.to_node(parse.tree().syntax()).kind() {\n             ast::PatKind::BindPat(pat) => return NavigationTarget::from_bind_pat(file_id, &pat),\n             _ => (\"_\".into(), pat.syntax_node_ptr().range()),\n         };\n@@ -315,8 +315,8 @@ impl NavigationTarget {\n }\n \n pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n-    let file = db.parse(symbol.file_id).tree;\n-    let node = symbol.ptr.to_node(file.syntax()).to_owned();\n+    let parse = db.parse(symbol.file_id);\n+    let node = symbol.ptr.to_node(parse.tree().syntax()).to_owned();\n \n     fn doc_comments<N: ast::DocCommentsOwner>(node: &N) -> Option<String> {\n         node.doc_comment_text()\n@@ -341,8 +341,8 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n ///\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n-    let file = db.parse(symbol.file_id).tree;\n-    let node = symbol.ptr.to_node(file.syntax()).to_owned();\n+    let parse = db.parse(symbol.file_id);\n+    let node = symbol.ptr.to_node(parse.tree().syntax()).to_owned();\n \n     visitor()\n         .visit(|node: &ast::FnDef| node.short_label())"}, {"sha": "491b157020891518d49904d0a25450e06d215ea5", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -11,8 +11,8 @@ use crate::{db::RootDatabase, FileRange};\n \n // FIXME: restore macro support\n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n-    let source_file = db.parse(frange.file_id).tree;\n-    try_extend_selection(source_file.syntax(), frange.range).unwrap_or(frange.range)\n+    let parse = db.parse(frange.file_id);\n+    try_extend_selection(parse.tree().syntax(), frange.range).unwrap_or(frange.range)\n }\n \n fn try_extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange> {\n@@ -212,10 +212,10 @@ mod tests {\n \n     fn do_check(before: &str, afters: &[&str]) {\n         let (cursor, before) = extract_offset(before);\n-        let file = SourceFile::parse(&before).tree;\n+        let parse = SourceFile::parse(&before);\n         let mut range = TextRange::offset_len(cursor, 0.into());\n         for &after in afters {\n-            range = try_extend_selection(file.syntax(), range).unwrap();\n+            range = try_extend_selection(parse.tree().syntax(), range).unwrap();\n             let actual = &before[range];\n             assert_eq!(after, actual);\n         }"}, {"sha": "9d4855a64893f92a32bc3234be1db1adfb328409", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -192,8 +192,8 @@ mod tests {\n \n     fn do_check(text: &str, fold_kinds: &[FoldKind]) {\n         let (ranges, text) = extract_ranges(text, \"fold\");\n-        let file = SourceFile::parse(&text).tree;\n-        let folds = folding_ranges(&file);\n+        let parse = SourceFile::parse(&text);\n+        let folds = folding_ranges(parse.tree());\n \n         assert_eq!(\n             folds.len(),"}, {"sha": "1066bf1557a92c4942a49e5dfdea8d5fd9457de0", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -19,8 +19,8 @@ pub(crate) fn goto_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.parse(position.file_id).tree;\n-    let syntax = file.syntax();\n+    let parse = db.parse(position.file_id);\n+    let syntax = parse.tree().syntax();\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n         let navs = reference_definition(db, position.file_id, name_ref).to_vec();\n         return Some(RangeInfo::new(name_ref.syntax().range(), navs.to_vec()));"}, {"sha": "6ce5e214f06f19831fbb2e3e0654e50d19ca7ce7", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -7,9 +7,9 @@ pub(crate) fn goto_type_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.parse(position.file_id).tree;\n+    let parse = db.parse(position.file_id);\n \n-    let node = find_token_at_offset(file.syntax(), position.offset).find_map(|token| {\n+    let node = find_token_at_offset(parse.tree().syntax(), position.offset).find_map(|token| {\n         token\n             .parent()\n             .ancestors()"}, {"sha": "253d21f48d271d790e7df9476255c6dd28201306", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -94,7 +94,8 @@ fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n }\n \n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n-    let file = db.parse(position.file_id).tree;\n+    let parse = db.parse(position.file_id);\n+    let file = parse.tree();\n     let mut res = HoverResult::new();\n \n     let mut range = None;\n@@ -241,8 +242,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n }\n \n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n-    let file = db.parse(frange.file_id).tree;\n-    let syntax = file.syntax();\n+    let parse = db.parse(frange.file_id);\n+    let syntax = parse.tree().syntax();\n     let leaf_node = find_covering_element(syntax, frange.range);\n     // if we picked identifier, expand to pattern/expression\n     let node = leaf_node"}, {"sha": "6d69f36aa9753e7048a58aec832ac75d4c6419e8", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -8,8 +8,8 @@ pub(crate) fn goto_implementation(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.parse(position.file_id).tree;\n-    let syntax = file.syntax();\n+    let parse = db.parse(position.file_id);\n+    let syntax = parse.tree().syntax();\n \n     let module = source_binder::module_from_position(db, position)?;\n "}, {"sha": "e20cb137081bf7541f5fcec4811f1a5cb2006cf7", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -503,8 +503,8 @@ fn foo() {\n \n     fn check_join_lines_sel(before: &str, after: &str) {\n         let (sel, before) = extract_range(before);\n-        let file = SourceFile::parse(&before).tree;\n-        let result = join_lines(&file, sel);\n+        let parse = SourceFile::parse(&before);\n+        let result = join_lines(parse.tree(), sel);\n         let actual = result.apply(&before);\n         assert_eq_text!(after, &actual);\n     }"}, {"sha": "9f3b18d9d150ae8e557cb54b19a9b35419c33e64", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -326,7 +326,7 @@ impl Analysis {\n \n     /// Gets the syntax tree of the file.\n     pub fn parse(&self, file_id: FileId) -> TreeArc<SourceFile> {\n-        self.db.parse(file_id).tree\n+        self.db.parse(file_id).tree().to_owned()\n     }\n \n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n@@ -343,7 +343,8 @@ impl Analysis {\n     /// Returns position of the matching brace (all types of braces are\n     /// supported).\n     pub fn matching_brace(&self, position: FilePosition) -> Option<TextUnit> {\n-        let file = self.db.parse(position.file_id).tree;\n+        let parse = self.db.parse(position.file_id);\n+        let file = parse.tree();\n         matching_brace::matching_brace(&file, position.offset)\n     }\n \n@@ -356,10 +357,10 @@ impl Analysis {\n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n     pub fn join_lines(&self, frange: FileRange) -> SourceChange {\n-        let file = self.db.parse(frange.file_id).tree;\n+        let parse = self.db.parse(frange.file_id);\n         let file_edit = SourceFileEdit {\n             file_id: frange.file_id,\n-            edit: join_lines::join_lines(&file, frange.range),\n+            edit: join_lines::join_lines(parse.tree(), frange.range),\n         };\n         SourceChange::source_file_edit(\"join lines\", file_edit)\n     }\n@@ -374,7 +375,8 @@ impl Analysis {\n     /// this works when adding `let =`.\n     // FIXME: use a snippet completion instead of this hack here.\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.db.parse(position.file_id).tree;\n+        let parse = self.db.parse(position.file_id);\n+        let file = parse.tree();\n         let edit = typing::on_eq_typed(&file, position.offset)?;\n         Some(SourceChange::source_file_edit(\n             \"add semicolon\",\n@@ -390,14 +392,14 @@ impl Analysis {\n     /// Returns a tree representation of symbols in the file. Useful to draw a\n     /// file outline.\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n-        let file = self.db.parse(file_id).tree;\n-        file_structure(&file)\n+        let parse = self.db.parse(file_id);\n+        file_structure(parse.tree())\n     }\n \n     /// Returns the set of folding ranges.\n     pub fn folding_ranges(&self, file_id: FileId) -> Vec<Fold> {\n-        let file = self.db.parse(file_id).tree;\n-        folding_ranges::folding_ranges(&file)\n+        let parse = self.db.parse(file_id);\n+        folding_ranges::folding_ranges(parse.tree())\n     }\n \n     /// Fuzzy searches for a symbol."}, {"sha": "455a5c891b610ea3844be6097c6c91ae05ecfe73", "filename": "crates/ra_ide_api/src/matching_brace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -25,8 +25,8 @@ mod tests {\n     fn test_matching_brace() {\n         fn do_check(before: &str, after: &str) {\n             let (pos, before) = extract_offset(before);\n-            let file = SourceFile::parse(&before).tree;\n-            let new_pos = match matching_brace(&file, pos) {\n+            let parse = SourceFile::parse(&before);\n+            let new_pos = match matching_brace(parse.tree(), pos) {\n                 None => pos,\n                 Some(pos) => pos,\n             };"}, {"sha": "0af1ae811fb53244f9c3ee36e2d99bef811b2f7e", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -49,8 +49,8 @@ pub(crate) fn find_all_refs(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<ReferenceSearchResult> {\n-    let file = db.parse(position.file_id).tree;\n-    let (binding, analyzer) = find_binding(db, &file, position)?;\n+    let parse = db.parse(position.file_id);\n+    let (binding, analyzer) = find_binding(db, parse.tree(), position)?;\n     let declaration = NavigationTarget::from_bind_pat(position.file_id, binding);\n \n     let references = analyzer\n@@ -88,8 +88,8 @@ pub(crate) fn rename(\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<SourceChange> {\n-    let source_file = db.parse(position.file_id).tree;\n-    let syntax = source_file.syntax();\n+    let parse = db.parse(position.file_id);\n+    let syntax = parse.tree().syntax();\n \n     if let Some((ast_name, ast_module)) = find_name_and_module_at_offset(syntax, position) {\n         rename_mod(db, ast_name, ast_module, position, new_name)"}, {"sha": "8cb859b373526260c333f40f410f5057d9869fb9", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -22,8 +22,8 @@ pub enum RunnableKind {\n }\n \n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n-    let source_file = db.parse(file_id).tree;\n-    source_file.syntax().descendants().filter_map(|i| runnable(db, file_id, i)).collect()\n+    let parse = db.parse(file_id);\n+    parse.tree().syntax().descendants().filter_map(|i| runnable(db, file_id, i)).collect()\n }\n \n fn runnable(db: &RootDatabase, file_id: FileId, item: &SyntaxNode) -> Option<Runnable> {"}, {"sha": "ce27f5ae2e7e894615b71e79be9e9a21bf97de1a", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -87,7 +87,7 @@ impl FromIterator<TableEntry<FileId, Parse>> for SyntaxTreeStats {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {\n             res.total += 1;\n-            if let Some(tree) = entry.value.as_ref().map(|it| &it.tree) {\n+            if let Some(tree) = entry.value.as_ref().map(|it| it.tree()) {\n                 res.retained += 1;\n                 res.retained_size += tree.syntax().memory_size_of_subtree();\n             }"}, {"sha": "1f2ba954e9581db10096f49599e1d01664de9cbe", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -34,9 +34,9 @@ use ra_db::{\n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n     ast::{self, NameOwner},\n-    AstNode, SmolStr, SourceFile,\n+    AstNode, Parse, SmolStr, SourceFile,\n     SyntaxKind::{self, *},\n-    SyntaxNode, SyntaxNodePtr, TextRange, TreeArc, WalkEvent,\n+    SyntaxNode, SyntaxNodePtr, TextRange, WalkEvent,\n };\n use rayon::prelude::*;\n \n@@ -59,9 +59,9 @@ pub(crate) trait SymbolsDatabase: hir::db::HirDatabase {\n \n fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n     db.check_canceled();\n-    let source_file = db.parse(file_id).tree;\n+    let parse = db.parse(file_id);\n \n-    let symbols = source_file_to_file_symbols(&source_file, file_id);\n+    let symbols = source_file_to_file_symbols(parse.tree(), file_id);\n \n     // FIXME: add macros here\n \n@@ -169,11 +169,9 @@ impl SymbolIndex {\n         self.map.as_fst().size() + self.symbols.len() * mem::size_of::<FileSymbol>()\n     }\n \n-    pub(crate) fn for_files(\n-        files: impl ParallelIterator<Item = (FileId, TreeArc<SourceFile>)>,\n-    ) -> SymbolIndex {\n+    pub(crate) fn for_files(files: impl ParallelIterator<Item = (FileId, Parse)>) -> SymbolIndex {\n         let symbols = files\n-            .flat_map(|(file_id, file)| source_file_to_file_symbols(&file, file_id))\n+            .flat_map(|(file_id, file)| source_file_to_file_symbols(file.tree(), file_id))\n             .collect::<Vec<_>>();\n         SymbolIndex::new(symbols)\n     }"}, {"sha": "d70ceb7d15ebe146d8beb9f63f610e7bec871232", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -32,7 +32,8 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n \n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n-    let source_file = db.parse(file_id).tree;\n+    let parse = db.parse(file_id);\n+    let root = parse.tree().syntax();\n \n     fn calc_binding_hash(file_id: FileId, text: &SmolStr, shadow_count: u32) -> u64 {\n         fn hash<T: std::hash::Hash + std::fmt::Debug>(x: T) -> u64 {\n@@ -51,7 +52,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n     let mut bindings_shadow_count: FxHashMap<SmolStr, u32> = FxHashMap::default();\n \n     let mut res = Vec::new();\n-    for node in source_file.syntax().descendants_with_tokens() {\n+    for node in root.descendants_with_tokens() {\n         if highlighted.contains(&node) {\n             continue;\n         }\n@@ -89,11 +90,8 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                         Some(SelfType(_)) => \"type\",\n                         Some(Pat(ptr)) => {\n                             binding_hash = Some({\n-                                let text = ptr\n-                                    .syntax_node_ptr()\n-                                    .to_node(&source_file.syntax())\n-                                    .text()\n-                                    .to_smol_string();\n+                                let text =\n+                                    ptr.syntax_node_ptr().to_node(root).text().to_smol_string();\n                                 let shadow_count =\n                                     bindings_shadow_count.entry(text.clone()).or_default();\n                                 calc_binding_hash(file_id, &text, *shadow_count)\n@@ -178,7 +176,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n }\n \n pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: bool) -> String {\n-    let source_file = db.parse(file_id).tree;\n+    let parse = db.parse(file_id);\n \n     fn rainbowify(seed: u64) -> String {\n         use rand::prelude::*;\n@@ -200,7 +198,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     let mut buf = String::new();\n     buf.push_str(&STYLE);\n     buf.push_str(\"<pre><code>\");\n-    let tokens = source_file.syntax().descendants_with_tokens().filter_map(|it| it.as_token());\n+    let tokens = parse.tree().syntax().descendants_with_tokens().filter_map(|it| it.as_token());\n     for token in tokens {\n         could_intersect.retain(|it| token.range().start() <= it.range.end());\n         while let Some(r) = ranges.get(frontier) {"}, {"sha": "b3e08c041114421b18ee9f85ab8c917fc3e49cd2", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -13,9 +13,9 @@ pub(crate) fn syntax_tree(\n     file_id: FileId,\r\n     text_range: Option<TextRange>,\r\n ) -> String {\r\n+    let parse = db.parse(file_id);\r\n     if let Some(text_range) = text_range {\r\n-        let file = db.parse(file_id).tree;\r\n-        let node = match algo::find_covering_element(file.syntax(), text_range) {\r\n+        let node = match algo::find_covering_element(parse.tree().syntax(), text_range) {\r\n             SyntaxElement::Node(node) => node,\r\n             SyntaxElement::Token(token) => {\r\n                 if let Some(tree) = syntax_tree_for_string(token, text_range) {\r\n@@ -27,7 +27,7 @@ pub(crate) fn syntax_tree(\n \r\n         node.debug_dump()\r\n     } else {\r\n-        db.parse(file_id).tree.syntax().debug_dump()\r\n+        parse.tree().syntax().debug_dump()\r\n     }\r\n }\r\n \r\n@@ -84,8 +84,8 @@ fn syntax_tree_for_token(node: SyntaxToken, text_range: TextRange) -> Option<Str\n \r\n     // If the \"file\" parsed without errors,\r\n     // return its syntax\r\n-    if parsed.errors.is_empty() {\r\n-        return Some(parsed.tree.syntax().debug_dump());\r\n+    if parsed.errors().is_empty() {\r\n+        return Some(parsed.tree().syntax().debug_dump());\r\n     }\r\n \r\n     None\r"}, {"sha": "01eb32b2fb5bb6ba3f28979b3ebf72bc590a3b41", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -11,7 +11,8 @@ use ra_syntax::{\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n-    let file = db.parse(position.file_id).tree;\n+    let parse = db.parse(position.file_id);\n+    let file = parse.tree();\n     let comment = find_token_at_offset(file.syntax(), position.offset)\n         .left_biased()\n         .and_then(ast::Comment::cast)?;\n@@ -86,10 +87,10 @@ pub fn on_eq_typed(file: &SourceFile, eq_offset: TextUnit) -> Option<TextEdit> {\n }\n \n pub(crate) fn on_dot_typed(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n-    let file = db.parse(position.file_id).tree;\n-    assert_eq!(file.syntax().text().char_at(position.offset), Some('.'));\n+    let parse = db.parse(position.file_id);\n+    assert_eq!(parse.tree().syntax().text().char_at(position.offset), Some('.'));\n \n-    let whitespace = find_token_at_offset(file.syntax(), position.offset)\n+    let whitespace = find_token_at_offset(parse.tree().syntax(), position.offset)\n         .left_biased()\n         .and_then(ast::Whitespace::cast)?;\n \n@@ -139,8 +140,8 @@ mod tests {\n             let mut edit = TextEditBuilder::default();\n             edit.insert(offset, \"=\".to_string());\n             let before = edit.finish().apply(&before);\n-            let file = SourceFile::parse(&before).tree;\n-            if let Some(result) = on_eq_typed(&file, offset) {\n+            let parse = SourceFile::parse(&before);\n+            if let Some(result) = on_eq_typed(parse.tree(), offset) {\n                 let actual = result.apply(&before);\n                 assert_eq_text!(after, &actual);\n             } else {"}, {"sha": "5a1494feecd53416d3ef0c4a381273c401e06771", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -95,8 +95,8 @@ pub(crate) fn expand_to_expr(\n pub(crate) fn text_to_tokentree(text: &str) -> tt::Subtree {\n     // wrap the given text to a macro call\n     let wrapped = format!(\"wrap_macro!( {} )\", text);\n-    let wrapped = ast::SourceFile::parse(&wrapped).tree;\n-    let wrapped = wrapped.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n+    let wrapped = ast::SourceFile::parse(&wrapped);\n+    let wrapped = wrapped.tree().syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n     let mut wrapped = ast_to_token_tree(wrapped).unwrap().0;\n     wrapped.delimiter = tt::Delimiter::None;\n "}, {"sha": "06d3ea7275bba6778ff408b86ba49d71462b6a5d", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -59,11 +59,19 @@ pub use rowan::{SmolStr, TextRange, TextUnit};\n /// files.\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Parse {\n-    pub tree: TreeArc<SourceFile>,\n-    pub errors: Arc<Vec<SyntaxError>>,\n+    tree: TreeArc<SourceFile>,\n+    errors: Arc<Vec<SyntaxError>>,\n }\n \n impl Parse {\n+    pub fn tree(&self) -> &SourceFile {\n+        &*self.tree\n+    }\n+\n+    pub fn errors(&self) -> &[SyntaxError] {\n+        &*self.errors\n+    }\n+\n     pub fn ok(self) -> Result<TreeArc<SourceFile>, Arc<Vec<SyntaxError>>> {\n         if self.errors.is_empty() {\n             Ok(self.tree)"}, {"sha": "cabd3e9bd9f5554eefbf15aeb6a80fddfc50eb04", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deab4caa7b1ba81c1b7e6561bc270bbde6467f13/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=deab4caa7b1ba81c1b7e6561bc270bbde6467f13", "patch": "@@ -22,7 +22,7 @@ fn lexer_tests() {\n fn parser_tests() {\n     dir_tests(&test_data_dir(), &[\"parser/inline/ok\", \"parser/ok\"], |text, path| {\n         let parse = SourceFile::parse(text);\n-        let errors = parse.errors.as_slice();\n+        let errors = parse.errors();\n         assert_eq!(\n             errors,\n             &[] as &[ra_syntax::SyntaxError],\n@@ -33,7 +33,7 @@ fn parser_tests() {\n     });\n     dir_tests(&test_data_dir(), &[\"parser/err\", \"parser/inline/err\"], |text, path| {\n         let parse = SourceFile::parse(text);\n-        let errors = parse.errors.as_slice();\n+        let errors = parse.errors();\n         assert!(!errors.is_empty(), \"There should be errors in the file {:?}\", path.display());\n         parse.debug_dump()\n     });"}]}