{"sha": "ee32615df112e9491b583cdd3b6dc8763d2fa155", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMzI2MTVkZjExMmU5NDkxYjU4M2NkZDNiNmRjODc2M2QyZmExNTU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-02-01T19:12:50Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-02-01T19:12:50Z"}, "message": "Merge pull request #792 from kamalmarhubi/project-file-lookup-error-handling\n\nbin: Improve error handling in project file lookup", "tree": {"sha": "384d16e16808769b444a00b46021bfe07784943a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/384d16e16808769b444a00b46021bfe07784943a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee32615df112e9491b583cdd3b6dc8763d2fa155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee32615df112e9491b583cdd3b6dc8763d2fa155", "html_url": "https://github.com/rust-lang/rust/commit/ee32615df112e9491b583cdd3b6dc8763d2fa155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee32615df112e9491b583cdd3b6dc8763d2fa155/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86572d455be34b4df8a81e5daac9b51539277963", "url": "https://api.github.com/repos/rust-lang/rust/commits/86572d455be34b4df8a81e5daac9b51539277963", "html_url": "https://github.com/rust-lang/rust/commit/86572d455be34b4df8a81e5daac9b51539277963"}, {"sha": "0f254bb343074ae69b3e14963ffe1cc4c23ceae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f254bb343074ae69b3e14963ffe1cc4c23ceae7", "html_url": "https://github.com/rust-lang/rust/commit/0f254bb343074ae69b3e14963ffe1cc4c23ceae7"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "14cb63db7d506729db60c65b95d950f4ba835366", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 42, "deletions": 28, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ee32615df112e9491b583cdd3b6dc8763d2fa155/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee32615df112e9491b583cdd3b6dc8763d2fa155/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=ee32615df112e9491b583cdd3b6dc8763d2fa155", "patch": "@@ -22,7 +22,7 @@ use rustfmt::config::{Config, WriteMode};\n \n use std::env;\n use std::fs::{self, File};\n-use std::io::{self, Read, Write};\n+use std::io::{self, ErrorKind, Read, Write};\n use std::path::{Path, PathBuf};\n \n use getopts::{Matches, Options};\n@@ -43,39 +43,56 @@ enum Operation {\n     Stdin(String, WriteMode),\n }\n \n-/// Try to find a project file in the input file directory and its parents.\n-fn lookup_project_file(input_file: &Path) -> io::Result<PathBuf> {\n-    let mut current = if input_file.is_relative() {\n-        try!(env::current_dir()).join(input_file)\n+/// Try to find a project file in the given directory and its parents. Returns the path of a the\n+/// nearest project file if one exists, or `None` if no project file was found.\n+fn lookup_project_file(dir: &Path) -> io::Result<Option<PathBuf>> {\n+    let mut current = if dir.is_relative() {\n+        try!(env::current_dir()).join(dir)\n     } else {\n-        input_file.to_path_buf()\n+        dir.to_path_buf()\n     };\n \n     current = try!(fs::canonicalize(current));\n \n     loop {\n         let config_file = current.join(\"rustfmt.toml\");\n-        if let Ok(md) = fs::metadata(&config_file) {\n-            // Properly handle unlikely situation of a directory named `rustfmt.toml`.\n-            if md.is_file() {\n-                return Ok(config_file);\n+        match fs::metadata(&config_file) {\n+            Ok(md) => {\n+                // Properly handle unlikely situation of a directory named `rustfmt.toml`.\n+                if md.is_file() {\n+                    return Ok(Some(config_file));\n+                }\n+            }\n+            // If it's not found, we continue searching; otherwise something went wrong and we\n+            // return the error.\n+            Err(e) => {\n+                if e.kind() != ErrorKind::NotFound {\n+                    return Err(e);\n+                }\n             }\n         }\n \n         // If the current directory has no parent, we're done searching.\n         if !current.pop() {\n-            return Err(io::Error::new(io::ErrorKind::NotFound, \"Config not found\"));\n+            return Ok(None);\n         }\n     }\n }\n \n-/// Try to find a project file. If it's found, read it.\n-fn lookup_and_read_project_file(input_file: &Path) -> io::Result<(PathBuf, String)> {\n-    let path = try!(lookup_project_file(input_file));\n+/// Resolve the config for input in `dir`.\n+///\n+/// Returns the `Config` to use, and the path of the project file if there was\n+/// one.\n+fn resolve_config(dir: &Path) -> io::Result<(Config, Option<PathBuf>)> {\n+    let path = try!(lookup_project_file(dir));\n+    if path.is_none() {\n+        return Ok((Config::default(), None));\n+    }\n+    let path = path.unwrap();\n     let mut file = try!(File::open(&path));\n     let mut toml = String::new();\n     try!(file.read_to_string(&mut toml));\n-    Ok((path, toml))\n+    Ok((Config::from_toml(&toml), Some(path)))\n }\n \n fn update_config(config: &mut Config, matches: &Matches) {\n@@ -127,25 +144,22 @@ fn execute() -> i32 {\n         }\n         Operation::Stdin(input, write_mode) => {\n             // try to read config from local directory\n-            let config = match lookup_and_read_project_file(&Path::new(\".\")) {\n-                Ok((_, toml)) => Config::from_toml(&toml),\n-                Err(_) => Default::default(),\n-            };\n+            let (config, _) = resolve_config(&env::current_dir().unwrap())\n+                                  .expect(\"Error resolving config\");\n \n             run_from_stdin(input, write_mode, &config);\n             0\n         }\n         Operation::Format(files, write_mode) => {\n             for file in files {\n-                let mut config = match lookup_and_read_project_file(&file) {\n-                    Ok((path, toml)) => {\n-                        println!(\"Using rustfmt config file {} for {}\",\n-                                 path.display(),\n-                                 file.display());\n-                        Config::from_toml(&toml)\n-                    }\n-                    Err(_) => Default::default(),\n-                };\n+                let (mut config, path) = resolve_config(file.parent().unwrap())\n+                                             .expect(&format!(\"Error resolving config for {}\",\n+                                                              file.display()));\n+                if let Some(path) = path {\n+                    println!(\"Using rustfmt config file {} for {}\",\n+                             path.display(),\n+                             file.display());\n+                }\n \n                 update_config(&mut config, &matches);\n                 run(&file, write_mode, &config);"}]}