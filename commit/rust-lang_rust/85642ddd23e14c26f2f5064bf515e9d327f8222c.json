{"sha": "85642ddd23e14c26f2f5064bf515e9d327f8222c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NjQyZGRkMjNlMTRjMjZmMmY1MDY0YmY1MTVlOWQzMjdmODIyMmM=", "commit": {"author": {"name": "TomasKralCZ", "email": "tomas@kral.hk", "date": "2018-02-10T20:13:17Z"}, "committer": {"name": "TomasKralCZ", "email": "tomas@kral.hk", "date": "2018-02-10T21:52:31Z"}, "message": "Implement redundant field names lint #2244", "tree": {"sha": "e83fcff29bfa1ef1aed6397643c4935956b99644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e83fcff29bfa1ef1aed6397643c4935956b99644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85642ddd23e14c26f2f5064bf515e9d327f8222c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85642ddd23e14c26f2f5064bf515e9d327f8222c", "html_url": "https://github.com/rust-lang/rust/commit/85642ddd23e14c26f2f5064bf515e9d327f8222c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85642ddd23e14c26f2f5064bf515e9d327f8222c/comments", "author": {"login": "TomasKralCZ", "id": 23663355, "node_id": "MDQ6VXNlcjIzNjYzMzU1", "avatar_url": "https://avatars.githubusercontent.com/u/23663355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomasKralCZ", "html_url": "https://github.com/TomasKralCZ", "followers_url": "https://api.github.com/users/TomasKralCZ/followers", "following_url": "https://api.github.com/users/TomasKralCZ/following{/other_user}", "gists_url": "https://api.github.com/users/TomasKralCZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomasKralCZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomasKralCZ/subscriptions", "organizations_url": "https://api.github.com/users/TomasKralCZ/orgs", "repos_url": "https://api.github.com/users/TomasKralCZ/repos", "events_url": "https://api.github.com/users/TomasKralCZ/events{/privacy}", "received_events_url": "https://api.github.com/users/TomasKralCZ/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TomasKralCZ", "id": 23663355, "node_id": "MDQ6VXNlcjIzNjYzMzU1", "avatar_url": "https://avatars.githubusercontent.com/u/23663355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomasKralCZ", "html_url": "https://github.com/TomasKralCZ", "followers_url": "https://api.github.com/users/TomasKralCZ/followers", "following_url": "https://api.github.com/users/TomasKralCZ/following{/other_user}", "gists_url": "https://api.github.com/users/TomasKralCZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomasKralCZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomasKralCZ/subscriptions", "organizations_url": "https://api.github.com/users/TomasKralCZ/orgs", "repos_url": "https://api.github.com/users/TomasKralCZ/repos", "events_url": "https://api.github.com/users/TomasKralCZ/events{/privacy}", "received_events_url": "https://api.github.com/users/TomasKralCZ/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b3487a916b22312cc67fef0d3ec49985fc1197b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3487a916b22312cc67fef0d3ec49985fc1197b", "html_url": "https://github.com/rust-lang/rust/commit/6b3487a916b22312cc67fef0d3ec49985fc1197b"}], "stats": {"total": 304, "additions": 210, "deletions": 94}, "files": [{"sha": "1f78bee00e7c2e09d5aa7f903868b61b73c222e0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85642ddd23e14c26f2f5064bf515e9d327f8222c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85642ddd23e14c26f2f5064bf515e9d327f8222c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=85642ddd23e14c26f2f5064bf515e9d327f8222c", "patch": "@@ -152,6 +152,7 @@ pub mod ptr;\n pub mod question_mark;\n pub mod ranges;\n pub mod reference;\n+pub mod redundant_field_names;\n pub mod regex;\n pub mod replace_consts;\n pub mod returns;\n@@ -373,6 +374,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box types::UnitArg);\n     reg.register_late_lint_pass(box double_comparison::DoubleComparisonPass);\n     reg.register_late_lint_pass(box question_mark::QuestionMarkPass);\n+    reg.register_late_lint_pass(box redundant_field_names::RedundantFieldNames);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -591,6 +593,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         ranges::ITERATOR_STEP_BY_ZERO,\n         ranges::RANGE_MINUS_ONE,\n         ranges::RANGE_ZIP_WITH_LEN,\n+        redundant_field_names::REDUNDANT_FIELD_NAMES,\n         reference::DEREF_ADDROF,\n         regex::INVALID_REGEX,\n         regex::REGEX_MACRO,"}, {"sha": "d6164e2115255fa92f4adb96bf9d0cb6db1bbd78", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/85642ddd23e14c26f2f5064bf515e9d327f8222c/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85642ddd23e14c26f2f5064bf515e9d327f8222c/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=85642ddd23e14c26f2f5064bf515e9d327f8222c", "patch": "@@ -0,0 +1,68 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use utils::{span_lint_and_sugg};\n+\n+/// **What it does:** Checks for redundnat field names where shorthands\n+/// can be used.\n+/// \n+/// **Why is this bad?** If the field and variable names are the same,\n+/// the field name is redundant.\n+/// \n+/// **Known problems:** None.\n+/// \n+/// **Example:**\n+/// ```rust\n+/// let bar: u8 = 123;\n+/// \n+/// struct Foo {\n+///     bar: u8,\n+/// }\n+/// \n+/// let foo = Foo{ bar: bar }\n+/// ```\n+declare_lint! {\n+    pub REDUNDANT_FIELD_NAMES,\n+    Warn,\n+    \"using same name for field and variable ,where shorthand can be used\"\n+}\n+\n+pub struct RedundantFieldNames;\n+\n+impl LintPass for RedundantFieldNames {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(REDUNDANT_FIELD_NAMES)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if let ExprStruct(_, ref fields, _) = expr.node {\n+            for field in fields {\n+                let name = field.name.node;\n+                if let ExprPath(ref qpath) = field.expr.node {\n+                    if let &QPath::Resolved(_, ref path) = qpath {\n+                        let segments = &path.segments;\n+\n+                        if segments.len() == 1 {\n+                            let expr_name = segments[0].name;\n+\n+                            if name == expr_name {\n+                                span_lint_and_sugg(\n+                                    cx,\n+                                    REDUNDANT_FIELD_NAMES,\n+                                    path.span,\n+                                    \"redundant field names in struct initialization\",\n+                                    &format!(\n+                                        \"replace '{0}: {0}' with '{0}'\",\n+                                        name,\n+                                    ),\n+                                    \"\".to_string()\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "a782063e3919d2af20030e28c9376c3d667f779f", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85642ddd23e14c26f2f5064bf515e9d327f8222c/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85642ddd23e14c26f2f5064bf515e9d327f8222c/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=85642ddd23e14c26f2f5064bf515e9d327f8222c", "patch": "@@ -5,6 +5,7 @@\n #![allow(dead_code)]\n #![allow(path_statements)]\n #![allow(deref_addrof)]\n+#![allow(redundant_field_names)]\n #![feature(untagged_unions)]\n \n struct Unit;"}, {"sha": "64c0267a8b80515792ece4a062ce7c9a898d3218", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 94, "deletions": 94, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/85642ddd23e14c26f2f5064bf515e9d327f8222c/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85642ddd23e14c26f2f5064bf515e9d327f8222c/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=85642ddd23e14c26f2f5064bf515e9d327f8222c", "patch": "@@ -1,281 +1,281 @@\n error: statement with no effect\n-  --> $DIR/no_effect.rs:58:5\n+  --> $DIR/no_effect.rs:59:5\n    |\n-58 |     0;\n+59 |     0;\n    |     ^^\n    |\n    = note: `-D no-effect` implied by `-D warnings`\n \n-error: statement with no effect\n-  --> $DIR/no_effect.rs:59:5\n-   |\n-59 |     s2;\n-   |     ^^^\n-\n error: statement with no effect\n   --> $DIR/no_effect.rs:60:5\n    |\n-60 |     Unit;\n-   |     ^^^^^\n+60 |     s2;\n+   |     ^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:61:5\n    |\n-61 |     Tuple(0);\n-   |     ^^^^^^^^^\n+61 |     Unit;\n+   |     ^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:62:5\n    |\n-62 |     Struct { field: 0 };\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+62 |     Tuple(0);\n+   |     ^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:63:5\n    |\n-63 |     Struct { ..s };\n-   |     ^^^^^^^^^^^^^^^\n+63 |     Struct { field: 0 };\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:64:5\n    |\n-64 |     Union { a: 0 };\n+64 |     Struct { ..s };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:65:5\n    |\n-65 |     Enum::Tuple(0);\n+65 |     Union { a: 0 };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:66:5\n    |\n-66 |     Enum::Struct { field: 0 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+66 |     Enum::Tuple(0);\n+   |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:67:5\n    |\n-67 |     5 + 6;\n-   |     ^^^^^^\n+67 |     Enum::Struct { field: 0 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:68:5\n    |\n-68 |     *&42;\n-   |     ^^^^^\n+68 |     5 + 6;\n+   |     ^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:69:5\n    |\n-69 |     &6;\n-   |     ^^^\n+69 |     *&42;\n+   |     ^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:70:5\n    |\n-70 |     (5, 6, 7);\n-   |     ^^^^^^^^^^\n+70 |     &6;\n+   |     ^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:71:5\n    |\n-71 |     box 42;\n-   |     ^^^^^^^\n+71 |     (5, 6, 7);\n+   |     ^^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:72:5\n    |\n-72 |     ..;\n-   |     ^^^\n+72 |     box 42;\n+   |     ^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:73:5\n    |\n-73 |     5..;\n-   |     ^^^^\n+73 |     ..;\n+   |     ^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:74:5\n    |\n-74 |     ..5;\n+74 |     5..;\n    |     ^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:75:5\n    |\n-75 |     5..6;\n-   |     ^^^^^\n+75 |     ..5;\n+   |     ^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:76:5\n    |\n-76 |     5..=6;\n-   |     ^^^^^^\n+76 |     5..6;\n+   |     ^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:77:5\n    |\n-77 |     [42, 55];\n-   |     ^^^^^^^^^\n+77 |     5..=6;\n+   |     ^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:78:5\n    |\n-78 |     [42, 55][1];\n-   |     ^^^^^^^^^^^^\n+78 |     [42, 55];\n+   |     ^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:79:5\n    |\n-79 |     (42, 55).1;\n-   |     ^^^^^^^^^^^\n+79 |     [42, 55][1];\n+   |     ^^^^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:80:5\n    |\n-80 |     [42; 55];\n-   |     ^^^^^^^^^\n+80 |     (42, 55).1;\n+   |     ^^^^^^^^^^^\n \n error: statement with no effect\n   --> $DIR/no_effect.rs:81:5\n    |\n-81 |     [42; 55][13];\n+81 |     [42; 55];\n+   |     ^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:82:5\n+   |\n+82 |     [42; 55][13];\n    |     ^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:83:5\n+  --> $DIR/no_effect.rs:84:5\n    |\n-83 |     || x += 5;\n+84 |     || x += 5;\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:85:5\n+  --> $DIR/no_effect.rs:86:5\n    |\n-85 |     FooString { s: s };\n+86 |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: statement can be reduced\n-  --> $DIR/no_effect.rs:96:5\n+  --> $DIR/no_effect.rs:97:5\n    |\n-96 |     Tuple(get_number());\n+97 |     Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n    |\n    = note: `-D unnecessary-operation` implied by `-D warnings`\n \n-error: statement can be reduced\n-  --> $DIR/no_effect.rs:97:5\n-   |\n-97 |     Struct { field: get_number() };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n-\n error: statement can be reduced\n   --> $DIR/no_effect.rs:98:5\n    |\n-98 |     Struct { ..get_struct() };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_struct();`\n+98 |     Struct { field: get_number() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n   --> $DIR/no_effect.rs:99:5\n    |\n-99 |     Enum::Tuple(get_number());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+99 |     Struct { ..get_struct() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_struct();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:100:5\n     |\n-100 |     Enum::Struct { field: get_number() };\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+100 |     Enum::Tuple(get_number());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:101:5\n     |\n-101 |     5 + get_number();\n-    |     ^^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n+101 |     Enum::Struct { field: get_number() };\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:102:5\n     |\n-102 |     *&get_number();\n-    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+102 |     5 + get_number();\n+    |     ^^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:103:5\n     |\n-103 |     &get_number();\n-    |     ^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+103 |     *&get_number();\n+    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:104:5\n     |\n-104 |     (5, 6, get_number());\n-    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `5;6;get_number();`\n+104 |     &get_number();\n+    |     ^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:105:5\n     |\n-105 |     box get_number();\n-    |     ^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+105 |     (5, 6, get_number());\n+    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `5;6;get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:106:5\n     |\n-106 |     get_number()..;\n-    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+106 |     box get_number();\n+    |     ^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:107:5\n     |\n-107 |     ..get_number();\n+107 |     get_number()..;\n     |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:108:5\n     |\n-108 |     5..get_number();\n-    |     ^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n+108 |     ..get_number();\n+    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:109:5\n     |\n-109 |     [42, get_number()];\n-    |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n+109 |     5..get_number();\n+    |     ^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:110:5\n     |\n-110 |     [42, 55][get_number() as usize];\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42, 55];get_number() as usize;`\n+110 |     [42, get_number()];\n+    |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:111:5\n     |\n-111 |     (42, get_number()).1;\n-    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n+111 |     [42, 55][get_number() as usize];\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42, 55];get_number() as usize;`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:112:5\n     |\n-112 |     [get_number(); 55];\n-    |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+112 |     (42, get_number()).1;\n+    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:113:5\n     |\n-113 |     [42; 55][get_number() as usize];\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42; 55];get_number() as usize;`\n+113 |     [get_number(); 55];\n+    |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:114:5\n     |\n-114 |     {get_number()};\n-    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+114 |     [42; 55][get_number() as usize];\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42; 55];get_number() as usize;`\n \n error: statement can be reduced\n    --> $DIR/no_effect.rs:115:5\n     |\n-115 |     FooString { s: String::from(\"blah\"), };\n+115 |     {get_number()};\n+    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:116:5\n+    |\n+116 |     FooString { s: String::from(\"blah\"), };\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `String::from(\"blah\");`\n \n error: aborting due to 46 previous errors"}, {"sha": "d562fa44f830bb38482f6fcb0699309738dcb036", "filename": "tests/ui/redundant_field_names.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/85642ddd23e14c26f2f5064bf515e9d327f8222c/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85642ddd23e14c26f2f5064bf515e9d327f8222c/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=85642ddd23e14c26f2f5064bf515e9d327f8222c", "patch": "@@ -0,0 +1,28 @@\n+#![warn(redundant_field_names)]\n+#![allow(unused_variables)]\n+\n+mod foo {\n+    pub const BAR: u8 = 0;\n+}\n+\n+struct Person {\n+    gender: u8,\n+    age: u8,\n+\n+    buzz: u64,\n+    foo: u8,\n+}\n+\n+fn main() {\n+    let gender: u8 = 42;\n+    let age = 0;\n+    let fizz: u64 = 0;\n+\n+    let me = Person {\n+        gender: gender,\n+        age: age,\n+\n+        buzz: fizz, //should be ok\n+        foo: foo::BAR, //should be ok\n+    };\n+}"}, {"sha": "594282d23093d18802e10b30962a357778d23293", "filename": "tests/ui/redundant_field_names.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85642ddd23e14c26f2f5064bf515e9d327f8222c/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85642ddd23e14c26f2f5064bf515e9d327f8222c/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=85642ddd23e14c26f2f5064bf515e9d327f8222c", "patch": "@@ -0,0 +1,16 @@\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:22:17\n+   |\n+22 |         gender: gender,\n+   |                 ^^^^^^ help: replace 'gender: gender' with 'gender'\n+   |\n+   = note: `-D redundant-field-names` implied by `-D warnings`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:23:14\n+   |\n+23 |         age: age,\n+   |              ^^^ help: replace 'age: age' with 'age'\n+\n+error: aborting due to 2 previous errors\n+"}]}