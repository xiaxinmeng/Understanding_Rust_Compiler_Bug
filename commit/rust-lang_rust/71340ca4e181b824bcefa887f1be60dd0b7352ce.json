{"sha": "71340ca4e181b824bcefa887f1be60dd0b7352ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMzQwY2E0ZTE4MWI4MjRiY2VmYTg4N2YxYmU2MGRkMGI3MzUyY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-28T17:58:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-28T17:58:58Z"}, "message": "Auto merge of #46291 - alexcrichton:wasm-tests, r=kennytm\n\nci: Start running wasm32 tests on Travis\n\nThis commit allocates a builder to running wasm32 tests on Travis. Not all test\nsuites pass right now so this is starting out with just the run-pass and the\nlibcore test suites. This'll hopefully give us a pretty broad set of coverage\nfor integration in rustc itself as well as a somewhat broad coverage of the llvm\nbackend itself through integration/unit tests.", "tree": {"sha": "dfff87c0583208025944813532cbe3f0361926f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfff87c0583208025944813532cbe3f0361926f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71340ca4e181b824bcefa887f1be60dd0b7352ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71340ca4e181b824bcefa887f1be60dd0b7352ce", "html_url": "https://github.com/rust-lang/rust/commit/71340ca4e181b824bcefa887f1be60dd0b7352ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71340ca4e181b824bcefa887f1be60dd0b7352ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a59704525963a135359fdbcba78da796b64ab5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a59704525963a135359fdbcba78da796b64ab5c", "html_url": "https://github.com/rust-lang/rust/commit/5a59704525963a135359fdbcba78da796b64ab5c"}, {"sha": "73970bf6f287b93ebd9775783652217e1aca02d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/73970bf6f287b93ebd9775783652217e1aca02d3", "html_url": "https://github.com/rust-lang/rust/commit/73970bf6f287b93ebd9775783652217e1aca02d3"}], "stats": {"total": 118, "additions": 84, "deletions": 34}, "files": [{"sha": "278d98673db66d7de8ac5c7daecbbad77c2729f6", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -161,8 +161,8 @@ matrix:\n       if: branch = auto\n     - env: IMAGE=i686-gnu-nopt\n       if: branch = auto\n-    # - env: IMAGE=wasm32 issue 42646\n-    #   if: branch = auto\n+    - env: IMAGE=wasm32-unknown\n+      if: branch = auto\n     - env: IMAGE=x86_64-gnu\n       if: branch = auto\n     - env: IMAGE=x86_64-gnu-full-bootstrap"}, {"sha": "103d7f2ba1850580fa20f1b8e427a4695aa3ba40", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -1245,6 +1245,17 @@ impl Step for Crate {\n         if target.contains(\"emscripten\") {\n             cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target)),\n                       build.config.nodejs.as_ref().expect(\"nodejs not configured\"));\n+        } else if target.starts_with(\"wasm32\") {\n+            // On the wasm32-unknown-unknown target we're using LTO which is\n+            // incompatible with `-C prefer-dynamic`, so disable that here\n+            cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+\n+            let node = build.config.nodejs.as_ref()\n+                .expect(\"nodejs not configured\");\n+            let runner = format!(\"{} {}/src/etc/wasm32-shim.js\",\n+                                 node.display(),\n+                                 build.src.display());\n+            cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target)), &runner);\n         } else if build.remote_tested(target) {\n             cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target)),\n                       format!(\"{} run\","}, {"sha": "dc1727b7014c33a6d1999411f976e71f304be069", "filename": "src/ci/docker/wasm32-unknown/Dockerfile", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -0,0 +1,36 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils\n+\n+RUN curl -sL https://nodejs.org/dist/v9.2.0/node-v9.2.0-linux-x64.tar.xz | \\\n+    tar -xJ\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV TARGETS=wasm32-unknown-unknown\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+  --target=$TARGETS \\\n+  --set build.nodejs=/node-v9.2.0-linux-x64/bin/node\n+\n+ENV SCRIPT python2.7 /checkout/x.py test --target $TARGETS \\\n+  src/test/ui \\\n+  src/test/run-pass \\\n+  src/test/compile-fail \\\n+  src/test/parse-fail \\\n+  src/test/mir-opt \\\n+  src/test/codegen-units \\\n+  src/libcore \\\n+  src/libstd_unicode/ \\"}, {"sha": "d55083e0f8e03490aa23dea88ea1acfc810fe169", "filename": "src/etc/wasm32-shim.js", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Fetc%2Fwasm32-shim.js", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Fetc%2Fwasm32-shim.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fwasm32-shim.js?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -45,8 +45,8 @@ imports.env = {\n   exp2f: function(x) { return Math.pow(2, x); },\n   ldexp: function(x, y) { return x * Math.pow(2, y); },\n   ldexpf: function(x, y) { return x * Math.pow(2, y); },\n-  log10: function(x) { return Math.log10(x); },\n-  log10f: function(x) { return Math.log10(x); },\n+  log10: Math.log10,\n+  log10f: Math.log10,\n \n   // These are called in src/libstd/sys/wasm/stdio.rs and are used when\n   // debugging is enabled.\n@@ -71,14 +71,12 @@ imports.env = {\n     return process.argv.length - 2;\n   },\n   rust_wasm_args_arg_size: function(i) {\n-    return process.argv[i + 2].length;\n+    return Buffer.byteLength(process.argv[i + 2]);\n   },\n   rust_wasm_args_arg_fill: function(idx, ptr) {\n     let arg = process.argv[idx + 2];\n     let view = new Uint8Array(memory.buffer);\n-    for (var i = 0; i < arg.length; i++) {\n-      view[ptr + i] = arg.charCodeAt(i);\n-    }\n+    Buffer.from(arg).copy(view, ptr);\n   },\n \n   // These are called in src/libstd/sys/wasm/os.rs and are used when\n@@ -91,15 +89,13 @@ imports.env = {\n     if (!(key in process.env)) {\n       return -1;\n     }\n-    return process.env[key].length;\n+    return Buffer.byteLength(process.env[key]);\n   },\n   rust_wasm_getenv_data: function(a, b, ptr) {\n     let key = copystr(a, b);\n     let value = process.env[key];\n     let view = new Uint8Array(memory.buffer);\n-    for (var i = 0; i < value.length; i++) {\n-      view[ptr + i] = value.charCodeAt(i);\n-    }\n+    Buffer.from(value).copy(view, ptr);\n   },\n };\n "}, {"sha": "487c636342ea1abe64d6387eade963a91a152aa9", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -1 +1 @@\n-Subproject commit e45c75de1148456a9eb1a67c14a66df4dfb50c94\n+Subproject commit 487c636342ea1abe64d6387eade963a91a152aa9"}, {"sha": "7fa937e93b34b7a16bfe2346e3289d4872834d99", "filename": "src/test/compile-fail/auxiliary/issue_5844_aux.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_5844_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_5844_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_5844_aux.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(libc)]\n-\n-extern crate libc;\n-\n extern \"C\" {\n-    pub fn rand() -> libc::c_int;\n+    pub fn rand() -> u32;\n }"}, {"sha": "87faff2719519ad02cc9c85cbbe5f7b45108e699", "filename": "src/test/compile-fail/issue-10755.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fissue-10755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fissue-10755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10755.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -C linker=llllll\n+// compile-flags: -C linker=llllll -Z linker-flavor=ld\n // error-pattern: the linker `llllll`\n \n fn main() {"}, {"sha": "fd825563eba197cb10960ec650f4030ce4688a8f", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -52,8 +52,6 @@ extern {\n     pub fn fn_type2(p: fn()); //~ ERROR found function pointer with Rust\n     pub fn fn_contained(p: RustBadRet); //~ ERROR: found struct without\n \n-    pub fn good1(size: *const libc::c_int);\n-    pub fn good2(size: *const libc::c_uint);\n     pub fn good3(fptr: Option<extern fn()>);\n     pub fn good4(aptr: &[u8; 4 as usize]);\n     pub fn good5(s: StructWithProjection);\n@@ -66,5 +64,11 @@ extern {\n     pub fn good12(size: usize);\n }\n \n+#[cfg(not(target_arch = \"wasm32\"))]\n+extern {\n+    pub fn good1(size: *const libc::c_int);\n+    pub fn good2(size: *const libc::c_uint);\n+}\n+\n fn main() {\n }"}, {"sha": "f680e3954493371a237e4a31808941c0cc6142a1", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -11,11 +11,9 @@\n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n #![deny(dead_code)]\n-#![feature(libc)]\n \n #![crate_type=\"lib\"]\n \n-extern crate libc;\n \n pub use extern_foo as x;\n extern {\n@@ -54,14 +52,13 @@ pub fn pub_fn() {\n }\n \n mod blah {\n-    use libc::size_t;\n     // not warned because it's used in the parameter of `free` and return of\n     // `malloc` below, which are also used.\n     enum c_void {}\n \n     extern {\n         fn free(p: *const c_void);\n-        fn malloc(size: size_t) -> *const c_void;\n+        fn malloc(size: usize) -> *const c_void;\n     }\n \n     pub fn baz() {"}, {"sha": "6dfd74f541e6ecf872113751580ace99727ecf9e", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:aFdEfSeVEE\n+// compile-flags: -Z linker-flavor=ld\n \n /* We're testing that link_args are indeed passed when nolink is specified.\n So we try to compile with junk link_args and make sure they are visible in"}, {"sha": "63e5f963754e2410c93fe2c441c1efc1d64a51b4", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-wasm32-bare no libc to test ffi with\n+\n #![feature(libc)]\n \n extern crate libc;"}, {"sha": "71751034c39b92000e8ef0f943443e52a05b510a", "filename": "src/test/compile-fail/panic-runtime/libtest-unwinds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Flibtest-unwinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Flibtest-unwinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Flibtest-unwinds.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -10,6 +10,7 @@\n \n // error-pattern:is not compiled with this crate's panic strategy `abort`\n // compile-flags:-C panic=abort\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(test)]\n "}, {"sha": "f886aac9a1041e192ccca2ced0908dab9b0af842", "filename": "src/test/compile-fail/panic-runtime/transitive-link-a-bunch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -14,6 +14,7 @@\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n // error-pattern: is not compiled with this crate's panic strategy `unwind`\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n "}, {"sha": "dda92d9a560741154ccd833afe2954a1f54de215", "filename": "src/test/compile-fail/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -11,6 +11,7 @@\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n "}, {"sha": "49f719057d2ff05d1415c2c9f9ca184b2bbe6eb3", "filename": "src/test/compile-fail/panic-runtime/want-unwind-got-abort2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -12,6 +12,7 @@\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n "}, {"sha": "c6d744fa64d363ebca95c7151c80722c64616393", "filename": "src/test/compile-fail/static-mut-foreign-requires-unsafe.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -8,12 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(libc)]\n-\n-extern crate libc;\n-\n extern {\n-    static mut a: libc::c_int;\n+    static mut a: i32;\n }\n \n fn main() {"}, {"sha": "5137663a269f46d3978c1a34043cb1668aba946a", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -10,10 +10,8 @@\n \n // error-pattern:casting\n \n-#![feature(libc)]\n-\n-extern crate libc;\n+struct A;\n \n fn main() {\n-  println!(\"{:?}\", 1.0 as *const libc::FILE); // Can't cast float to foreign.\n+  println!(\"{:?}\", 1.0 as *const A); // Can't cast float to foreign.\n }"}, {"sha": "8579611b9380af5ffee245d7e9db593c2f9e5bc9", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -11,6 +11,7 @@\n // aux-build:weak-lang-items.rs\n // error-pattern: language item required, but not found: `panic_fmt`\n // error-pattern: language item required, but not found: `eh_personality`\n+// ignore-wasm32-bare compiled with panic=abort, personality not required\n \n #![no_std]\n "}, {"sha": "74e07d5e864759b4e0dd691a6c3f64fd7fa677a7", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n #![feature(box_syntax)]\n \n fn main() {"}, {"sha": "f7f447cc6ba641b8ea93c6af0051af5793acf7f8", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n // check that we don't emit multiple drop flags when they are not needed.\n \n fn main() {"}, {"sha": "0706f185d3163da489b90651170bd545ec3d023a", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));\n     x.0 = Aligned(Droppy(0));"}, {"sha": "2782f8c2a598ce2a8e7c116565f8dd3e013a8045", "filename": "src/test/run-pass/next-power-of-two-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-debug.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -C debug_assertions=yes\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(i128_type)]\n "}, {"sha": "4cd171f0ac089195815ec45b1eb26edec2261d7e", "filename": "src/test/run-pass/saturating-float-casts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71340ca4e181b824bcefa887f1be60dd0b7352ce/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs?ref=71340ca4e181b824bcefa887f1be60dd0b7352ce", "patch": "@@ -10,6 +10,7 @@\n \n // Tests saturating float->int casts. See u128-as-f32.rs for the opposite direction.\n // compile-flags: -Z saturating-float-casts\n+// ignore-wasm32-bare FIXME(#46298) needs upstream llvm fixes\n \n #![feature(test, i128, i128_type, stmt_expr_attributes)]\n #![deny(overflowing_literals)]"}]}