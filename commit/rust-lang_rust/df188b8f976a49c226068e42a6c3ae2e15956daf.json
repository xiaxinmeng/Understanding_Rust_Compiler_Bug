{"sha": "df188b8f976a49c226068e42a6c3ae2e15956daf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMTg4YjhmOTc2YTQ5YzIyNjA2OGU0MmE2YzNhZTJlMTU5NTZkYWY=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-11T08:26:07Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-13T14:02:29Z"}, "message": "Add lint for unused macros", "tree": {"sha": "ab3ba0ff5418ec021df14d24e0c0a9efec7f2705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab3ba0ff5418ec021df14d24e0c0a9efec7f2705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df188b8f976a49c226068e42a6c3ae2e15956daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df188b8f976a49c226068e42a6c3ae2e15956daf", "html_url": "https://github.com/rust-lang/rust/commit/df188b8f976a49c226068e42a6c3ae2e15956daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df188b8f976a49c226068e42a6c3ae2e15956daf/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef3ec5ece5bdf8950810225a9a3bc3cd1926e3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3ec5ece5bdf8950810225a9a3bc3cd1926e3d5", "html_url": "https://github.com/rust-lang/rust/commit/ef3ec5ece5bdf8950810225a9a3bc3cd1926e3d5"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "07140f71aebaa1b68253f71e3aef28372800d397", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=df188b8f976a49c226068e42a6c3ae2e15956daf", "patch": "@@ -76,6 +76,12 @@ declare_lint! {\n     \"detects unreachable patterns\"\n }\n \n+declare_lint! {\n+    pub UNUSED_MACROS,\n+    Warn,\n+    \"detects macros that were not used\"\n+}\n+\n declare_lint! {\n     pub WARNINGS,\n     Warn,\n@@ -259,6 +265,7 @@ impl LintPass for HardwiredLints {\n             DEAD_CODE,\n             UNREACHABLE_CODE,\n             UNREACHABLE_PATTERNS,\n+            UNUSED_MACROS,\n             WARNINGS,\n             UNUSED_FEATURES,\n             STABLE_FEATURES,"}, {"sha": "eff5d2b2f37f1bbc6b00eab1985f83884f8e5329", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=df188b8f976a49c226068e42a6c3ae2e15956daf", "patch": "@@ -699,6 +699,8 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n         let krate = ecx.monotonic_expander().expand_crate(krate);\n \n+        ecx.check_unused_macros();\n+\n         let mut missing_fragment_specifiers: Vec<_> =\n             ecx.parse_sess.missing_fragment_specifiers.borrow().iter().cloned().collect();\n         missing_fragment_specifiers.sort();"}, {"sha": "479c7206cb4cb95b150c5b0adcb0b40daf86c0de", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=df188b8f976a49c226068e42a6c3ae2e15956daf", "patch": "@@ -171,7 +171,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_MUST_USE,\n                     UNUSED_UNSAFE,\n                     PATH_STATEMENTS,\n-                    UNUSED_ATTRIBUTES);\n+                    UNUSED_ATTRIBUTES,\n+                    UNUSED_MACROS);\n \n     // Guidelines for creating a future incompatibility lint:\n     //"}, {"sha": "f78dd4890e2ce6c467cceebaa39280cf89e9395c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=df188b8f976a49c226068e42a6c3ae2e15956daf", "patch": "@@ -1195,6 +1195,12 @@ pub struct Resolver<'a> {\n     pub whitelisted_legacy_custom_derives: Vec<Name>,\n     pub found_unresolved_macro: bool,\n \n+    // List of macros that we need to warn about as being unused.\n+    // The bool is true if the macro is unused, and false if its used.\n+    // Setting a bool to false should be much faster than removing a single\n+    // element from a FxHashSet.\n+    unused_macros: FxHashMap<DefId, bool>,\n+\n     // Maps the `Mark` of an expansion to its containing module or block.\n     invocations: FxHashMap<Mark, &'a InvocationData<'a>>,\n \n@@ -1400,6 +1406,7 @@ impl<'a> Resolver<'a> {\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: DefIdMap(),\n             found_unresolved_macro: false,\n+            unused_macros: FxHashMap(),\n         }\n     }\n "}, {"sha": "29ca163b0b4b7b02b6b12577ccf411718ddfc460", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=df188b8f976a49c226068e42a6c3ae2e15956daf", "patch": "@@ -16,7 +16,7 @@ use resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::def::{Def, Export};\n use rustc::hir::map::{self, DefCollector};\n-use rustc::ty;\n+use rustc::{ty, lint};\n use syntax::ast::{self, Name, Ident};\n use syntax::attr::{self, HasAttrs};\n use syntax::errors::DiagnosticBuilder;\n@@ -291,12 +291,35 @@ impl<'a> base::Resolver for Resolver<'a> {\n             },\n         };\n         self.macro_defs.insert(invoc.expansion_data.mark, def.def_id());\n+        self.unused_macros.get_mut(&def.def_id()).map(|m| *m = false);\n         Ok(Some(self.get_macro(def)))\n     }\n \n     fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy> {\n-        self.resolve_macro_to_def(scope, path, kind, force).map(|def| self.get_macro(def))\n+        self.resolve_macro_to_def(scope, path, kind, force).map(|def| {\n+            self.unused_macros.get_mut(&def.def_id()).map(|m| *m = false);\n+            self.get_macro(def)\n+        })\n+    }\n+\n+    fn check_unused_macros(&self) {\n+        for (did, _) in self.unused_macros.iter().filter(|&(_, b)| *b) {\n+            let span = match *self.macro_map[did] {\n+                           SyntaxExtension::NormalTT(_, sp, _) => sp,\n+                           SyntaxExtension::IdentTT(_, sp, _) => sp,\n+                           _ => None\n+                       };\n+            if let Some(span) = span {\n+                let lint = lint::builtin::UNUSED_MACROS;\n+                let msg = \"unused macro\".to_string();\n+                // We are using CRATE_NODE_ID here even though its inaccurate, as we\n+                // sadly don't have the NodeId of the macro definition.\n+                self.session.add_lint(lint, ast::CRATE_NODE_ID, span, msg);\n+            } else {\n+                bug!(\"attempted to create unused macro error, but span not available\");\n+            }\n+        }\n     }\n }\n \n@@ -687,6 +710,8 @@ impl<'a> Resolver<'a> {\n         if attr::contains_name(&item.attrs, \"macro_export\") {\n             let def = Def::Macro(def_id, MacroKind::Bang);\n             self.macro_exports.push(Export { name: ident.name, def: def, span: item.span });\n+        } else {\n+            self.unused_macros.insert(def_id, true);\n         }\n     }\n "}, {"sha": "b0253ec3905c931f96374c00c51fa48d61166ef5", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df188b8f976a49c226068e42a6c3ae2e15956daf/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=df188b8f976a49c226068e42a6c3ae2e15956daf", "patch": "@@ -589,6 +589,7 @@ pub trait Resolver {\n                      -> Result<Option<Rc<SyntaxExtension>>, Determinacy>;\n     fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy>;\n+    fn check_unused_macros(&self);\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -618,6 +619,7 @@ impl Resolver for DummyResolver {\n                      _force: bool) -> Result<Rc<SyntaxExtension>, Determinacy> {\n         Err(Determinacy::Determined)\n     }\n+    fn check_unused_macros(&self) {}\n }\n \n #[derive(Clone)]\n@@ -800,6 +802,10 @@ impl<'a> ExtCtxt<'a> {\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         Symbol::intern(st)\n     }\n+\n+    pub fn check_unused_macros(&self) {\n+        self.resolver.check_unused_macros();\n+    }\n }\n \n /// Extract a string literal from the macro expanded version of `expr`,"}]}