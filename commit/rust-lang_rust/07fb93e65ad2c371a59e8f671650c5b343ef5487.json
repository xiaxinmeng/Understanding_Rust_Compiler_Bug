{"sha": "07fb93e65ad2c371a59e8f671650c5b343ef5487", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZmI5M2U2NWFkMmMzNzFhNTllOGY2NzE2NTBjNWIzNDNlZjU0ODc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T22:21:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T22:38:23Z"}, "message": "make `write_metadata` take `tcx` intead of `SharedCrateContext`", "tree": {"sha": "2c50e5725ef1ebab8793eef77e0bdb3d3662e63d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c50e5725ef1ebab8793eef77e0bdb3d3662e63d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07fb93e65ad2c371a59e8f671650c5b343ef5487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07fb93e65ad2c371a59e8f671650c5b343ef5487", "html_url": "https://github.com/rust-lang/rust/commit/07fb93e65ad2c371a59e8f671650c5b343ef5487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07fb93e65ad2c371a59e8f671650c5b343ef5487/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2487b81523a4f39a5ad27a9d28b198e4cc4dfda", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2487b81523a4f39a5ad27a9d28b198e4cc4dfda", "html_url": "https://github.com/rust-lang/rust/commit/f2487b81523a4f39a5ad27a9d28b198e4cc4dfda"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "c770bbdb90f72569b46571cb3d18d769d4f395a9", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07fb93e65ad2c371a59e8f671650c5b343ef5487/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fb93e65ad2c371a59e8f671650c5b343ef5487/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=07fb93e65ad2c371a59e8f671650c5b343ef5487", "patch": "@@ -725,14 +725,14 @@ fn contains_null(s: &str) -> bool {\n     s.bytes().any(|b| b == 0)\n }\n \n-fn write_metadata(cx: &SharedCrateContext,\n-                  link_meta: &LinkMeta,\n-                  exported_symbols: &NodeSet)\n-                  -> (ContextRef, ModuleRef, EncodedMetadata) {\n+fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n+                            link_meta: &LinkMeta,\n+                            exported_symbols: &NodeSet)\n+                            -> (ContextRef, ModuleRef, EncodedMetadata) {\n     use flate;\n \n     let (metadata_llcx, metadata_llmod) = unsafe {\n-        context::create_context_and_module(cx.sess(), \"metadata\")\n+        context::create_context_and_module(tcx.sess, \"metadata\")\n     };\n \n     #[derive(PartialEq, Eq, PartialOrd, Ord)]\n@@ -742,7 +742,7 @@ fn write_metadata(cx: &SharedCrateContext,\n         Compressed\n     }\n \n-    let kind = cx.sess().crate_types.borrow().iter().map(|ty| {\n+    let kind = tcx.sess.crate_types.borrow().iter().map(|ty| {\n         match *ty {\n             config::CrateTypeExecutable |\n             config::CrateTypeStaticlib |\n@@ -762,8 +762,8 @@ fn write_metadata(cx: &SharedCrateContext,\n         });\n     }\n \n-    let cstore = &cx.tcx().sess.cstore;\n-    let metadata = cstore.encode_metadata(cx.tcx(),\n+    let cstore = &tcx.sess.cstore;\n+    let metadata = cstore.encode_metadata(tcx,\n                                           &link_meta,\n                                           exported_symbols);\n     if kind == MetadataKind::Uncompressed {\n@@ -776,15 +776,15 @@ fn write_metadata(cx: &SharedCrateContext,\n \n     let llmeta = C_bytes_in_context(metadata_llcx, &compressed);\n     let llconst = C_struct_in_context(metadata_llcx, &[llmeta], false);\n-    let name = symbol_export::metadata_symbol_name(cx.tcx());\n+    let name = symbol_export::metadata_symbol_name(tcx);\n     let buf = CString::new(name).unwrap();\n     let llglobal = unsafe {\n         llvm::LLVMAddGlobal(metadata_llmod, val_ty(llconst).to_ref(), buf.as_ptr())\n     };\n     unsafe {\n         llvm::LLVMSetInitializer(llglobal, llconst);\n         let section_name =\n-            cx.tcx().sess.cstore.metadata_section_name(&cx.sess().target.target);\n+            tcx.sess.cstore.metadata_section_name(&tcx.sess.target.target);\n         let name = CString::new(section_name).unwrap();\n         llvm::LLVMSetSection(llglobal, name.as_ptr());\n \n@@ -1078,7 +1078,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Translate the metadata.\n     let (metadata_llcx, metadata_llmod, metadata) =\n         time(tcx.sess.time_passes(), \"write metadata\", || {\n-            write_metadata(&shared_ccx, &link_meta, shared_ccx.exported_symbols())\n+            write_metadata(tcx, &link_meta, shared_ccx.exported_symbols())\n         });\n \n     let metadata_module = ModuleTranslation {"}]}