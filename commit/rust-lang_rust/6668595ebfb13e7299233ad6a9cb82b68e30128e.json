{"sha": "6668595ebfb13e7299233ad6a9cb82b68e30128e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Njg1OTVlYmZiMTNlNzI5OTIzM2FkNmE5Y2I4MmI2OGUzMDEyOGU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T19:21:06Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T19:21:06Z"}, "message": "Include all lval-writing statements in stmt_is_init calculation, not just \"copy-like\". Un-XFAIL generic-tag-alt.rs", "tree": {"sha": "37df6b6b4bc03515f7e2acc250d33a1001a80908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37df6b6b4bc03515f7e2acc250d33a1001a80908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6668595ebfb13e7299233ad6a9cb82b68e30128e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6668595ebfb13e7299233ad6a9cb82b68e30128e", "html_url": "https://github.com/rust-lang/rust/commit/6668595ebfb13e7299233ad6a9cb82b68e30128e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6668595ebfb13e7299233ad6a9cb82b68e30128e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d44ee7c3ccd051ec6e205fc07b1bd63cf58a9f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d44ee7c3ccd051ec6e205fc07b1bd63cf58a9f6", "html_url": "https://github.com/rust-lang/rust/commit/7d44ee7c3ccd051ec6e205fc07b1bd63cf58a9f6"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "d70da0ce06ca39b3c15bc6c3a24cfce624c796d1", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=6668595ebfb13e7299233ad6a9cb82b68e30128e", "patch": "@@ -357,7 +357,6 @@ TEST_XFAILS_X86 :=  test/run-pass/bind-obj-ctor.rs \\\n                     test/run-pass/vec-slice.rs \\\n                     test/run-pass/fn-lval.rs \\\n                     test/run-pass/generic-fn-infer.rs \\\n-                    test/run-pass/generic-tag-alt.rs \\\n                     test/run-pass/generic-recursive-tag.rs \\\n                     test/run-pass/iter-ret.rs \\\n                     test/run-pass/mlist-cycle.rs \\"}, {"sha": "fba08256afd28992078c5c483294641673bcef89", "filename": "src/boot/me/effect.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2Fboot%2Fme%2Feffect.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2Fboot%2Fme%2Feffect.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Feffect.ml?ref=6668595ebfb13e7299233ad6a9cb82b68e30128e", "patch": "@@ -45,7 +45,7 @@ let mutability_checking_visitor\n           Ast.TY_mutable _ -> true\n         | _ -> false\n     in\n-      if (is_mutable or (Hashtbl.mem cx.ctxt_copy_stmt_is_init s.id))\n+      if (is_mutable or (Hashtbl.mem cx.ctxt_stmt_is_init s.id))\n       then ()\n       else err (Some s.id)\n         \"writing to non-mutable slot of type %a in statement %a\""}, {"sha": "ef73753df5d36b8d32017ac1ad30c368a3572eea", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=6668595ebfb13e7299233ad6a9cb82b68e30128e", "patch": "@@ -129,7 +129,7 @@ type ctxt =\n       ctxt_prestates: (node_id,Bits.t) Hashtbl.t;\n       ctxt_poststates: (node_id,Bits.t) Hashtbl.t;\n       ctxt_call_lval_params: (node_id,Ast.ty array) Hashtbl.t;\n-      ctxt_copy_stmt_is_init: (node_id,unit) Hashtbl.t;\n+      ctxt_stmt_is_init: (node_id,unit) Hashtbl.t;\n       ctxt_post_stmt_slot_drops: (node_id,node_id list) Hashtbl.t;\n \n       (* Translation-y stuff. *)\n@@ -202,7 +202,7 @@ let new_ctxt sess abi crate =\n     ctxt_postconditions = Hashtbl.create 0;\n     ctxt_prestates = Hashtbl.create 0;\n     ctxt_poststates = Hashtbl.create 0;\n-    ctxt_copy_stmt_is_init = Hashtbl.create 0;\n+    ctxt_stmt_is_init = Hashtbl.create 0;\n     ctxt_post_stmt_slot_drops = Hashtbl.create 0;\n     ctxt_call_lval_params = Hashtbl.create 0;\n "}, {"sha": "069fdb59f53da7a9f3179298751239057133337f", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=6668595ebfb13e7299233ad6a9cb82b68e30128e", "patch": "@@ -4199,7 +4199,7 @@ let trans_visitor\n \n \n   and maybe_init (id:node_id) (action:string) (dst:Ast.lval) : bool =\n-    let b = Hashtbl.mem cx.ctxt_copy_stmt_is_init id in\n+    let b = Hashtbl.mem cx.ctxt_stmt_is_init id in\n     let act = if b then (\"initializing-\" ^ action) else action in\n       iflog\n         (fun _ ->"}, {"sha": "72df6e38fe02ae911c88a6c095fcf478644351ad", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6668595ebfb13e7299233ad6a9cb82b68e30128e/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=6668595ebfb13e7299233ad6a9cb82b68e30128e", "patch": "@@ -1074,7 +1074,14 @@ let lifecycle_visitor\n           | Ast.STMT_call (lv_dst, _, _)\n           | Ast.STMT_spawn (lv_dst, _, _, _)\n           | Ast.STMT_recv (lv_dst, _)\n-          | Ast.STMT_bind (lv_dst, _, _) ->\n+          | Ast.STMT_bind (lv_dst, _, _)\n+          | Ast.STMT_new_rec (lv_dst, _, _)\n+          | Ast.STMT_new_tup (lv_dst, _)\n+          | Ast.STMT_new_vec (lv_dst, _, _)\n+          | Ast.STMT_new_str (lv_dst, _)\n+          | Ast.STMT_new_port lv_dst\n+          | Ast.STMT_new_chan (lv_dst, _)\n+          | Ast.STMT_new_box (lv_dst, _, _) ->\n               let prestate = Hashtbl.find cx.ctxt_prestates s.id in\n               let poststate = Hashtbl.find cx.ctxt_poststates s.id in\n               let dst_slots = lval_slots cx lv_dst in\n@@ -1097,26 +1104,18 @@ let lifecycle_visitor\n                           log cx \"noting lval %a init at stmt %a\"\n                             Ast.sprintf_lval lv_dst Ast.sprintf_stmt s\n                       end;\n-                    Hashtbl.replace cx.ctxt_copy_stmt_is_init s.id ();\n+                    Hashtbl.replace cx.ctxt_stmt_is_init s.id ();\n                     mark_lval_live lv_dst\n                   end;\n \n           | Ast.STMT_decl (Ast.DECL_slot (_, sloti)) ->\n               push_slot sloti.id\n \n-          | Ast.STMT_new_rec (lv_dst, _, _)\n-          | Ast.STMT_new_tup (lv_dst, _)\n-          | Ast.STMT_new_vec (lv_dst, _, _)\n-          | Ast.STMT_new_str (lv_dst, _)\n-          | Ast.STMT_new_port lv_dst\n-          | Ast.STMT_new_chan (lv_dst, _)\n-          | Ast.STMT_new_box (lv_dst, _, _) ->\n-              mark_lval_live lv_dst\n-\n           | Ast.STMT_for f ->\n               log cx \"noting implicit init for slot %d in for-block %d\"\n                 (int_of_node (fst f.Ast.for_slot).id)\n                 (int_of_node (f.Ast.for_body.id));\n+              Hashtbl.replace cx.ctxt_stmt_is_init s.id ();\n               htab_put implicit_init_block_slots\n                 f.Ast.for_body.id\n                 (fst f.Ast.for_slot).id\n@@ -1125,6 +1124,7 @@ let lifecycle_visitor\n               log cx \"noting implicit init for slot %d in for_each-block %d\"\n                 (int_of_node (fst f.Ast.for_each_slot).id)\n                 (int_of_node (f.Ast.for_each_body.id));\n+              Hashtbl.replace cx.ctxt_stmt_is_init s.id ();\n               htab_put implicit_init_block_slots\n                 f.Ast.for_each_body.id\n                 (fst f.Ast.for_each_slot).id"}]}