{"sha": "7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMjc1YTdlZDIyNTNmYzdiZDhiNDZjNjg1YTc1NGM0ZDRlOWRlZTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T18:08:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T18:34:12Z"}, "message": "Remove hir/adt.rs", "tree": {"sha": "5d26637cbfa8d03ef5f1aed41121ff0db1b75607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d26637cbfa8d03ef5f1aed41121ff0db1b75607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "html_url": "https://github.com/rust-lang/rust/commit/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ec946216a3637685f30ae359bc955313595a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ec946216a3637685f30ae359bc955313595a22", "html_url": "https://github.com/rust-lang/rust/commit/12ec946216a3637685f30ae359bc955313595a22"}], "stats": {"total": 113, "additions": 47, "deletions": 66}, "files": [{"sha": "945f236c22e7ac2a5ed1f472e2c3468564a44628", "filename": "crates/ra_hir/src/adt.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ec946216a3637685f30ae359bc955313595a22/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=12ec946216a3637685f30ae359bc955313595a22", "patch": "@@ -1,54 +0,0 @@\n-//! This module contains the implementation details of the HIR for ADTs, i.e.\n-//! structs and enums (and unions).\n-\n-use std::sync::Arc;\n-\n-use hir_def::adt::VariantData;\n-\n-use crate::{\n-    db::{DefDatabase, HirDatabase},\n-    EnumVariant, Module, Name, Struct, StructField,\n-};\n-\n-impl Struct {\n-    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.struct_data(self.id.into()).variant_data.clone()\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum VariantDef {\n-    Struct(Struct),\n-    EnumVariant(EnumVariant),\n-}\n-impl_froms!(VariantDef: Struct, EnumVariant);\n-\n-impl VariantDef {\n-    pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n-        match self {\n-            VariantDef::Struct(it) => it.fields(db),\n-            VariantDef::EnumVariant(it) => it.fields(db),\n-        }\n-    }\n-\n-    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n-        match self {\n-            VariantDef::Struct(it) => it.field(db, name),\n-            VariantDef::EnumVariant(it) => it.field(db, name),\n-        }\n-    }\n-\n-    pub fn module(self, db: &impl HirDatabase) -> Module {\n-        match self {\n-            VariantDef::Struct(it) => it.module(db),\n-            VariantDef::EnumVariant(it) => it.module(db),\n-        }\n-    }\n-\n-    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        match self {\n-            VariantDef::Struct(it) => it.variant_data(db),\n-            VariantDef::EnumVariant(it) => it.variant_data(db),\n-        }\n-    }\n-}"}, {"sha": "9b6276b51bc504e05bdaa268ab34acb763ac96b9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "patch": "@@ -23,7 +23,6 @@ use ra_db::{CrateId, Edition};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     expr::{BindingAnnotation, Body, BodySourceMap, ExprValidator, Pat, PatId},\n     generics::{GenericDef, HasGenericParams},\n@@ -324,6 +323,10 @@ impl Struct {\n         // ...and add generic params, if present\n         r.push_generic_params_scope(db, self.into())\n     }\n+\n+    fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n+        db.struct_data(self.id.into()).variant_data.clone()\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -482,6 +485,43 @@ impl Adt {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum VariantDef {\n+    Struct(Struct),\n+    EnumVariant(EnumVariant),\n+}\n+impl_froms!(VariantDef: Struct, EnumVariant);\n+\n+impl VariantDef {\n+    pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n+        match self {\n+            VariantDef::Struct(it) => it.fields(db),\n+            VariantDef::EnumVariant(it) => it.fields(db),\n+        }\n+    }\n+\n+    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n+        match self {\n+            VariantDef::Struct(it) => it.field(db, name),\n+            VariantDef::EnumVariant(it) => it.field(db, name),\n+        }\n+    }\n+\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n+        match self {\n+            VariantDef::Struct(it) => it.module(db),\n+            VariantDef::EnumVariant(it) => it.module(db),\n+        }\n+    }\n+\n+    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n+        match self {\n+            VariantDef::Struct(it) => it.variant_data(db),\n+            VariantDef::EnumVariant(it) => it.variant_data(db),\n+        }\n+    }\n+}\n+\n /// The defs which have a body.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum DefWithBody {"}, {"sha": "4aa427de43bd3f0e6e1985cac882ef1e9f2743f1", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "patch": "@@ -4,11 +4,10 @@ use hir_def::{HasSource as _, Lookup};\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n-    adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::AstItemDef,\n     Const, Either, Enum, EnumVariant, FieldSource, Function, HasBody, HirFileId, MacroDef, Module,\n-    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union, VariantDef,\n };\n \n pub use hir_expand::Source;"}, {"sha": "31da74d2f3b66312def365ddfd630adc346739d6", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "patch": "@@ -32,7 +32,6 @@ pub mod db;\n pub mod source_binder;\n \n mod ids;\n-mod adt;\n mod type_alias;\n mod ty;\n mod impl_block;\n@@ -56,15 +55,14 @@ mod marks;\n use crate::resolve::Resolver;\n \n pub use crate::{\n-    adt::VariantDef,\n-    code_model::ImplBlock,\n     code_model::{\n         attrs::{AttrDef, Attrs},\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-        EnumVariant, FieldSource, FnData, Function, GenericParam, HasBody, Local, MacroDef, Module,\n-        ModuleDef, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+        EnumVariant, FieldSource, FnData, Function, GenericParam, HasBody, ImplBlock, Local,\n+        MacroDef, Module, ModuleDef, ModuleSource, Static, Struct, StructField, Trait, TypeAlias,\n+        Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,"}, {"sha": "092bc3a3f2b10c07251b55c47fcdcd15e269213f", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "patch": "@@ -37,14 +37,13 @@ use super::{\n     TypeCtor, TypeWalk, Uncertain,\n };\n use crate::{\n-    adt::VariantDef,\n     code_model::TypeAlias,\n     db::HirDatabase,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n     resolve::{Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n     Adt, AssocItem, ConstData, DefWithBody, FloatTy, FnData, Function, HasBody, IntTy, Path,\n-    StructField,\n+    StructField, VariantDef,\n };\n \n macro_rules! ty_app {"}, {"sha": "91e60b5ab4cb273063c8b31be2e9b30bc5eb0ee8", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "patch": "@@ -19,7 +19,6 @@ use super::{\n     TypeWalk,\n };\n use crate::{\n-    adt::VariantDef,\n     db::HirDatabase,\n     generics::HasGenericParams,\n     generics::{GenericDef, WherePredicate},\n@@ -30,7 +29,7 @@ use crate::{\n     },\n     util::make_mut_slice,\n     Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField, Trait,\n-    TypeAlias, Union,\n+    TypeAlias, Union, VariantDef,\n };\n \n // FIXME: this is only really used in `type_for_def`, which contains a bunch of"}]}