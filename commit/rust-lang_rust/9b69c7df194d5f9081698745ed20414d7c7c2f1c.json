{"sha": "9b69c7df194d5f9081698745ed20414d7c7c2f1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNjljN2RmMTk0ZDVmOTA4MTY5ODc0NWVkMjA0MTRkN2M3YzJmMWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-26T16:04:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-26T16:04:44Z"}, "message": "fix curly braces parsing", "tree": {"sha": "23e4c98b4acea9bb73f03ba57b46f4b7d5dd3903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e4c98b4acea9bb73f03ba57b46f4b7d5dd3903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b69c7df194d5f9081698745ed20414d7c7c2f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b69c7df194d5f9081698745ed20414d7c7c2f1c", "html_url": "https://github.com/rust-lang/rust/commit/9b69c7df194d5f9081698745ed20414d7c7c2f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b69c7df194d5f9081698745ed20414d7c7c2f1c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71722c047f96cb754c958c52591ca53f2a9c4d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/71722c047f96cb754c958c52591ca53f2a9c4d3c", "html_url": "https://github.com/rust-lang/rust/commit/71722c047f96cb754c958c52591ca53f2a9c4d3c"}], "stats": {"total": 251, "additions": 248, "deletions": 3}, "files": [{"sha": "351781ec49658e94c7b7731d3d66441bc374b53a", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9b69c7df194d5f9081698745ed20414d7c7c2f1c/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b69c7df194d5f9081698745ed20414d7c7c2f1c/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=9b69c7df194d5f9081698745ed20414d7c7c2f1c", "patch": "@@ -1,5 +1,7 @@\n+use std::collections::HashMap;\n+\n use libsyntax2::{\n-    File, TextUnit, AstNode, SyntaxNodeRef,\n+    File, TextUnit, AstNode, SyntaxNodeRef, SyntaxNode, SmolStr,\n     ast::{self, NameOwner},\n     algo::{\n         ancestors,\n@@ -59,3 +61,52 @@ fn process_scope(node: SyntaxNodeRef, sink: &mut Vec<CompletionItem>) {\n         sink.extend(items);\n     }\n }\n+\n+// fn compute_scopes(fn_def: ast::FnDef) -> FnScopes {\n+//     let mut scopes = FnScopes::new();\n+// }\n+\n+// type ScopeId = usize;\n+\n+// struct FnScopes {\n+//     scopes: Vec<ScopeData>,\n+//     scope_for_expr: HashMap<SyntaxNode, ScopeId>,\n+// }\n+\n+// impl FnScopes {\n+//     fn new() -> FnScopes {\n+//         FnScopes {\n+//             scopes: vec![],\n+//             scope_for_expr: HashMap::new(),\n+//         }\n+//     }\n+\n+//     fn new_scope(&mut Self) -> ScopeId {\n+//         let res = self.scopes.len();\n+//         self.scopes.push(ScopeData { parent: None, entries: vec![] })\n+//     }\n+\n+//     fn set_parent\n+// }\n+\n+// struct ScopeData {\n+//     parent: Option<ScopeId>,\n+//     entries: Vec<ScopeEntry>\n+// }\n+\n+// struct ScopeEntry {\n+//     syntax: SyntaxNode\n+// }\n+\n+// impl ScopeEntry {\n+//     fn name(&self) -> SmolStr {\n+//         self.ast().name()\n+//             .unwrap()\n+//             .text()\n+//     }\n+\n+//     fn ast(&self) -> ast::BindPat {\n+//         ast::BindPat::cast(self.syntax.borrowed())\n+//             .unwrap()\n+//     }\n+// }"}, {"sha": "1149646518ff505320a2954c2b589dda15edb78d", "filename": "crates/libsyntax2/src/grammar/patterns.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b69c7df194d5f9081698745ed20414d7c7c2f1c/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b69c7df194d5f9081698745ed20414d7c7c2f1c/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=9b69c7df194d5f9081698745ed20414d7c7c2f1c", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n pub(super) const PATTERN_FIRST: TokenSet =\n     token_set_union![\n-        token_set![REF_KW, MUT_KW, L_PAREN, L_BRACK, AMP],\n+        token_set![REF_KW, MUT_KW, L_PAREN, L_BRACK, AMP, UNDERSCORE],\n         expressions::LITERAL_FIRST,\n         paths::PATH_FIRST,\n     ];\n@@ -97,7 +97,13 @@ fn tuple_pat_fields(p: &mut Parser) {\n     while !p.at(EOF) && !p.at(R_PAREN) {\n         match p.current() {\n             DOTDOT => p.bump(),\n-            _ => pattern(p),\n+            _ => {\n+                if !PATTERN_FIRST.contains(p.current()) {\n+                    p.error(\"expected a pattern\");\n+                    break;\n+                }\n+                pattern(p)\n+            }\n         }\n         if !p.at(R_PAREN) {\n             p.expect(COMMA);\n@@ -125,6 +131,7 @@ fn field_pat_list(p: &mut Parser) {\n                 p.bump();\n                 pattern(p);\n             }\n+            L_CURLY => error_block(p, \"expected ident\"),\n             _ => {\n                 bind_pat(p, false);\n             }"}, {"sha": "fe604006c9ec011bc7543d1a7acf55aa6583ace8", "filename": "crates/libsyntax2/tests/data/parser/err/0018_incomplete_fn.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b69c7df194d5f9081698745ed20414d7c7c2f1c/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b69c7df194d5f9081698745ed20414d7c7c2f1c/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.rs?ref=9b69c7df194d5f9081698745ed20414d7c7c2f1c", "patch": "@@ -0,0 +1,8 @@\n+impl FnScopes {\n+    fn new_scope(&) -> ScopeId {\n+        let res = self.scopes.len();\n+        self.scopes.push(ScopeData { parent: None, entries: vec![] })\n+    }\n+\n+    fn set_parent\n+}"}, {"sha": "3f3a7784b096110c6f025c7b2bcde24435e738c1", "filename": "crates/libsyntax2/tests/data/parser/err/0018_incomplete_fn.txt", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/9b69c7df194d5f9081698745ed20414d7c7c2f1c/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9b69c7df194d5f9081698745ed20414d7c7c2f1c/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt?ref=9b69c7df194d5f9081698745ed20414d7c7c2f1c", "patch": "@@ -0,0 +1,179 @@\n+ROOT@[0; 183)\n+  IMPL_ITEM@[0; 182)\n+    IMPL_KW@[0; 4)\n+    WHITESPACE@[4; 5)\n+    PATH_TYPE@[5; 13)\n+      PATH@[5; 13)\n+        PATH_SEGMENT@[5; 13)\n+          NAME_REF@[5; 13)\n+            IDENT@[5; 13) \"FnScopes\"\n+    WHITESPACE@[13; 14)\n+    ITEM_LIST@[14; 182)\n+      L_CURLY@[14; 15)\n+      WHITESPACE@[15; 20)\n+      FN_DEF@[20; 181)\n+        FN_KW@[20; 22)\n+        WHITESPACE@[22; 23)\n+        NAME@[23; 32)\n+          IDENT@[23; 32) \"new_scope\"\n+        PARAM_LIST@[32; 181)\n+          L_PAREN@[32; 33)\n+          PARAM@[33; 38)\n+            REF_PAT@[33; 35)\n+              AMP@[33; 34)\n+              err: `expected pattern`\n+              ERROR@[34; 35)\n+                R_PAREN@[34; 35)\n+                err: `expected COLON`\n+            WHITESPACE@[35; 36)\n+            err: `expected type`\n+            ERROR@[36; 38)\n+              THIN_ARROW@[36; 38)\n+              err: `expected COMMA`\n+          WHITESPACE@[38; 39)\n+          PARAM@[39; 169)\n+            STRUCT_PAT@[39; 161)\n+              PATH@[39; 46)\n+                PATH_SEGMENT@[39; 46)\n+                  NAME_REF@[39; 46)\n+                    IDENT@[39; 46) \"ScopeId\"\n+              WHITESPACE@[46; 47)\n+              FIELD_PAT_LIST@[47; 161)\n+                L_CURLY@[47; 48)\n+                WHITESPACE@[48; 57)\n+                err: `expected a name`\n+                BIND_PAT@[57; 60)\n+                  ERROR@[57; 60)\n+                    LET_KW@[57; 60)\n+                    err: `expected COMMA`\n+                WHITESPACE@[60; 61)\n+                BIND_PAT@[61; 64)\n+                  NAME@[61; 64)\n+                    IDENT@[61; 64) \"res\"\n+                    err: `expected COMMA`\n+                WHITESPACE@[64; 65)\n+                err: `expected a name`\n+                BIND_PAT@[65; 66)\n+                  ERROR@[65; 66)\n+                    EQ@[65; 66)\n+                    err: `expected COMMA`\n+                WHITESPACE@[66; 67)\n+                err: `expected a name`\n+                BIND_PAT@[67; 71)\n+                  ERROR@[67; 71)\n+                    SELF_KW@[67; 71)\n+                    err: `expected COMMA`\n+                    err: `expected a name`\n+                BIND_PAT@[71; 72)\n+                  ERROR@[71; 72)\n+                    DOT@[71; 72)\n+                    err: `expected COMMA`\n+                BIND_PAT@[72; 78)\n+                  NAME@[72; 78)\n+                    IDENT@[72; 78) \"scopes\"\n+                    err: `expected COMMA`\n+                    err: `expected a name`\n+                BIND_PAT@[78; 79)\n+                  ERROR@[78; 79)\n+                    DOT@[78; 79)\n+                    err: `expected COMMA`\n+                BIND_PAT@[79; 82)\n+                  NAME@[79; 82)\n+                    IDENT@[79; 82) \"len\"\n+                    err: `expected COMMA`\n+                    err: `expected a name`\n+                BIND_PAT@[82; 83)\n+                  ERROR@[82; 83)\n+                    L_PAREN@[82; 83)\n+                    err: `expected COMMA`\n+                    err: `expected a name`\n+                BIND_PAT@[83; 84)\n+                  ERROR@[83; 84)\n+                    R_PAREN@[83; 84)\n+                    err: `expected COMMA`\n+                    err: `expected a name`\n+                BIND_PAT@[84; 85)\n+                  ERROR@[84; 85)\n+                    SEMI@[84; 85)\n+                    err: `expected COMMA`\n+                WHITESPACE@[85; 94)\n+                err: `expected a name`\n+                BIND_PAT@[94; 98)\n+                  ERROR@[94; 98)\n+                    SELF_KW@[94; 98)\n+                    err: `expected COMMA`\n+                    err: `expected a name`\n+                BIND_PAT@[98; 99)\n+                  ERROR@[98; 99)\n+                    DOT@[98; 99)\n+                    err: `expected COMMA`\n+                BIND_PAT@[99; 105)\n+                  NAME@[99; 105)\n+                    IDENT@[99; 105) \"scopes\"\n+                    err: `expected COMMA`\n+                    err: `expected a name`\n+                BIND_PAT@[105; 106)\n+                  ERROR@[105; 106)\n+                    DOT@[105; 106)\n+                    err: `expected COMMA`\n+                BIND_PAT@[106; 110)\n+                  NAME@[106; 110)\n+                    IDENT@[106; 110) \"push\"\n+                    err: `expected COMMA`\n+                    err: `expected a name`\n+                BIND_PAT@[110; 111)\n+                  ERROR@[110; 111)\n+                    L_PAREN@[110; 111)\n+                    err: `expected COMMA`\n+                BIND_PAT@[111; 120)\n+                  NAME@[111; 120)\n+                    IDENT@[111; 120) \"ScopeData\"\n+                    err: `expected COMMA`\n+                WHITESPACE@[120; 121)\n+                err: `expected ident`\n+                ERROR@[121; 154)\n+                  L_CURLY@[121; 122)\n+                  WHITESPACE@[122; 123)\n+                  IDENT@[123; 129) \"parent\"\n+                  COLON@[129; 130)\n+                  WHITESPACE@[130; 131)\n+                  IDENT@[131; 135) \"None\"\n+                  COMMA@[135; 136)\n+                  WHITESPACE@[136; 137)\n+                  IDENT@[137; 144) \"entries\"\n+                  COLON@[144; 145)\n+                  WHITESPACE@[145; 146)\n+                  IDENT@[146; 149) \"vec\"\n+                  EXCL@[149; 150)\n+                  L_BRACK@[150; 151)\n+                  R_BRACK@[151; 152)\n+                  WHITESPACE@[152; 153)\n+                  R_CURLY@[153; 154)\n+                  err: `expected COMMA`\n+                  err: `expected a name`\n+                BIND_PAT@[154; 155)\n+                  ERROR@[154; 155)\n+                    R_PAREN@[154; 155)\n+                WHITESPACE@[155; 160)\n+                R_CURLY@[160; 161)\n+                err: `expected COLON`\n+            WHITESPACE@[161; 167)\n+            FN_POINTER_TYPE@[167; 169)\n+              FN_KW@[167; 169)\n+              err: `expected parameters`\n+              err: `expected COMMA`\n+          WHITESPACE@[169; 170)\n+          PARAM@[170; 181)\n+            BIND_PAT@[170; 180)\n+              NAME@[170; 180)\n+                IDENT@[170; 180) \"set_parent\"\n+                err: `expected COLON`\n+            WHITESPACE@[180; 181)\n+            err: `expected type`\n+            err: `expected COMMA`\n+            err: `expected value parameter`\n+            err: `expected R_PAREN`\n+            err: `expected a block`\n+            ERROR@[181; 181)\n+      R_CURLY@[181; 182)\n+  WHITESPACE@[182; 183)"}]}