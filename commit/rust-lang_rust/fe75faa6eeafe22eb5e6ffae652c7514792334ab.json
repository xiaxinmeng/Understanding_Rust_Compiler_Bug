{"sha": "fe75faa6eeafe22eb5e6ffae652c7514792334ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNzVmYWE2ZWVhZmUyMmViNWU2ZmZhZTY1MmM3NTE0NzkyMzM0YWI=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-07-31T02:59:20Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-07-31T04:11:46Z"}, "message": "Fix `while_let_on_iterator`\nReborrow mutable references rather then take a reference to them.", "tree": {"sha": "6caa157420ca6e15e6a06726aeb91fc46c510dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6caa157420ca6e15e6a06726aeb91fc46c510dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe75faa6eeafe22eb5e6ffae652c7514792334ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmEEzYQACgkQ2lnoZDo37Qa6MAEAvP8X72ySj2b37Mti7qtI2Vts\njtOR2Ud6xAUOxYV+af4BANQ6LXfro4Hd+MVoLY+tcby5JmkY9tu0juklmjsMBhcI\n=QbxA\n-----END PGP SIGNATURE-----", "payload": "tree 6caa157420ca6e15e6a06726aeb91fc46c510dcd\nparent f6a5889ffad5f819b80f07b40988ba2576f79296\nauthor Jason Newcomb <jsnewcomb@pm.me> 1627700360 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1627704706 -0400\n\nFix `while_let_on_iterator`\nReborrow mutable references rather then take a reference to them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe75faa6eeafe22eb5e6ffae652c7514792334ab", "html_url": "https://github.com/rust-lang/rust/commit/fe75faa6eeafe22eb5e6ffae652c7514792334ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe75faa6eeafe22eb5e6ffae652c7514792334ab/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a5889ffad5f819b80f07b40988ba2576f79296", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a5889ffad5f819b80f07b40988ba2576f79296", "html_url": "https://github.com/rust-lang/rust/commit/f6a5889ffad5f819b80f07b40988ba2576f79296"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "6655e2e445c2fb6ca17b634d116d8f32dc024a02", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fe75faa6eeafe22eb5e6ffae652c7514792334ab/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe75faa6eeafe22eb5e6ffae652c7514792334ab/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=fe75faa6eeafe22eb5e6ffae652c7514792334ab", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor};\n-use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, MatchSource, Node, PatKind, QPath, UnOp};\n+use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, MatchSource, Mutability, Node, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::{symbol::sym, Span, Symbol};\n \n@@ -48,7 +48,12 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     // borrowed mutably. TODO: If the struct can be partially moved from and the struct isn't used\n     // afterwards a mutable borrow of a field isn't necessary.\n     let ref_mut = if !iter_expr.fields.is_empty() || needs_mutable_borrow(cx, &iter_expr, loop_expr) {\n-        \"&mut \"\n+        if cx.typeck_results().node_type(iter_expr.hir_id).ref_mutability() == Some(Mutability::Mut) {\n+            // Reborrow for mutable references. It may not be possible to get a mutable reference here.\n+            \"&mut *\"\n+        } else {\n+            \"&mut \"\n+        }\n     } else {\n         \"\"\n     };\n@@ -69,6 +74,8 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n struct IterExpr {\n     /// The span of the whole expression, not just the path and fields stored here.\n     span: Span,\n+    /// The HIR id of the whole expression, not just the path and fields stored here.\n+    hir_id: HirId,\n     /// The fields used, in order of child to parent.\n     fields: Vec<Symbol>,\n     /// The path being used.\n@@ -78,12 +85,14 @@ struct IterExpr {\n /// the expression might have side effects.\n fn try_parse_iter_expr(cx: &LateContext<'_>, mut e: &Expr<'_>) -> Option<IterExpr> {\n     let span = e.span;\n+    let hir_id = e.hir_id;\n     let mut fields = Vec::new();\n     loop {\n         match e.kind {\n             ExprKind::Path(ref path) => {\n                 break Some(IterExpr {\n                     span,\n+                    hir_id,\n                     fields,\n                     path: cx.qpath_res(path, e.hir_id),\n                 });"}, {"sha": "52c70ced2bd88cefb91025fe708024b612a601be", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fe75faa6eeafe22eb5e6ffae652c7514792334ab/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fe75faa6eeafe22eb5e6ffae652c7514792334ab/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=fe75faa6eeafe22eb5e6ffae652c7514792334ab", "patch": "@@ -334,6 +334,29 @@ fn issue7249() {\n     x();\n }\n \n+fn issue7510() {\n+    let mut it = 0..10;\n+    let it = &mut it;\n+    // Needs to reborrow `it` as the binding isn't mutable\n+    for x in &mut *it {\n+        if x % 2 == 0 {\n+            break;\n+        }\n+    }\n+    println!(\"{}\", it.next().unwrap());\n+\n+    struct S<T>(T);\n+    let mut it = 0..10;\n+    let it = S(&mut it);\n+    // Needs to reborrow `it.0` as the binding isn't mutable\n+    for x in &mut *it.0 {\n+        if x % 2 == 0 {\n+            break;\n+        }\n+    }\n+    println!(\"{}\", it.0.next().unwrap());\n+}\n+\n fn main() {\n     let mut it = 0..20;\n     for _ in it {"}, {"sha": "8434acaf582f41792f39232648b8081ed5613c9d", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fe75faa6eeafe22eb5e6ffae652c7514792334ab/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe75faa6eeafe22eb5e6ffae652c7514792334ab/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=fe75faa6eeafe22eb5e6ffae652c7514792334ab", "patch": "@@ -334,6 +334,29 @@ fn issue7249() {\n     x();\n }\n \n+fn issue7510() {\n+    let mut it = 0..10;\n+    let it = &mut it;\n+    // Needs to reborrow `it` as the binding isn't mutable\n+    while let Some(x) = it.next() {\n+        if x % 2 == 0 {\n+            break;\n+        }\n+    }\n+    println!(\"{}\", it.next().unwrap());\n+\n+    struct S<T>(T);\n+    let mut it = 0..10;\n+    let it = S(&mut it);\n+    // Needs to reborrow `it.0` as the binding isn't mutable\n+    while let Some(x) = it.0.next() {\n+        if x % 2 == 0 {\n+            break;\n+        }\n+    }\n+    println!(\"{}\", it.0.next().unwrap());\n+}\n+\n fn main() {\n     let mut it = 0..20;\n     while let Some(..) = it.next() {"}, {"sha": "50bcc26cec2304ccb92f7f9652ca586cd8612429", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe75faa6eeafe22eb5e6ffae652c7514792334ab/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe75faa6eeafe22eb5e6ffae652c7514792334ab/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=fe75faa6eeafe22eb5e6ffae652c7514792334ab", "patch": "@@ -111,10 +111,22 @@ LL |         while let Some(x) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:339:5\n+  --> $DIR/while_let_on_iterator.rs:341:5\n+   |\n+LL |     while let Some(x) = it.next() {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut *it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:352:5\n+   |\n+LL |     while let Some(x) = it.0.next() {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut *it.0`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:362:5\n    |\n LL |     while let Some(..) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in it`\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 21 previous errors\n "}]}