{"sha": "85080fa81d3ae6770eb228a982670746e55bf4d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MDgwZmE4MWQzYWU2NzcwZWIyMjhhOTgyNjcwNzQ2ZTU1YmY0ZDk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-03-13T12:09:34Z"}, "committer": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-03-13T12:09:34Z"}, "message": "fix tests", "tree": {"sha": "0f41bb05c5a0f1779a765e559e97073b51c01a4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f41bb05c5a0f1779a765e559e97073b51c01a4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85080fa81d3ae6770eb228a982670746e55bf4d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85080fa81d3ae6770eb228a982670746e55bf4d9", "html_url": "https://github.com/rust-lang/rust/commit/85080fa81d3ae6770eb228a982670746e55bf4d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85080fa81d3ae6770eb228a982670746e55bf4d9/comments", "author": null, "committer": null, "parents": [{"sha": "6584ae54917a74d8bf83c1047f273d5210d2a015", "url": "https://api.github.com/repos/rust-lang/rust/commits/6584ae54917a74d8bf83c1047f273d5210d2a015", "html_url": "https://github.com/rust-lang/rust/commit/6584ae54917a74d8bf83c1047f273d5210d2a015"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "f1d41a0f422167fa26da0e90a61353b96ee90f9a", "filename": "src/test/run-pass/method-mut-self-modifies-mut-slice-lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85080fa81d3ae6770eb228a982670746e55bf4d9/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85080fa81d3ae6770eb228a982670746e55bf4d9/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs?ref=85080fa81d3ae6770eb228a982670746e55bf4d9", "patch": "@@ -26,8 +26,8 @@ impl<'a> MyWriter for &'a mut [u8] {\n \n         let write_len = buf.len();\n         unsafe {\n-            *self = slice::from_raw_parts(\n-                self.as_ptr().offset(write_len as int),\n+            *self = slice::from_raw_parts_mut(\n+                self.as_mut_ptr().offset(write_len as isize),\n                 self.len() - write_len\n             );\n         }"}, {"sha": "f9185cd2642eeb3e344d83afc147fdc6fe8ee02e", "filename": "src/test/run-pass/unsized3.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85080fa81d3ae6770eb228a982670746e55bf4d9/src%2Ftest%2Frun-pass%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85080fa81d3ae6770eb228a982670746e55bf4d9/src%2Ftest%2Frun-pass%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized3.rs?ref=85080fa81d3ae6770eb228a982670746e55bf4d9", "patch": "@@ -15,31 +15,32 @@\n \n use std::mem;\n use std::raw;\n+use std::slice;\n \n struct Foo<T> {\n     f: [T],\n }\n \n struct Bar {\n-    f1: uint,\n-    f2: [uint],\n+    f1: usize,\n+    f2: [usize],\n }\n \n struct Baz {\n-    f1: uint,\n+    f1: usize,\n     f2: str,\n }\n \n trait Tr {\n-    fn foo(&self) -> uint;\n+    fn foo(&self) -> usize;\n }\n \n struct St {\n-    f: uint\n+    f: usize\n }\n \n impl Tr for St {\n-    fn foo(&self) -> uint {\n+    fn foo(&self) -> usize {\n         self.f\n     }\n }\n@@ -67,18 +68,18 @@ pub fn main() {\n         }\n \n         let data: Box<Foo_<i32>> = box Foo_{f: [1, 2, 3] };\n-        let x: &Foo<i32> = slice::from_raw_parts(&*data, 3);\n+        let x: &Foo<i32> = mem::transmute(slice::from_raw_parts(&*data, 3));\n         assert!(x.f.len() == 3);\n         assert!(x.f[0] == 1);\n \n         struct Baz_ {\n-            f1: uint,\n+            f1: usize,\n             f2: [u8; 5],\n         }\n \n         let data: Box<_> = box Baz_ {\n             f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };\n-        let x: &Baz = slice::from_raw_parts(&*data, 5);\n+        let x: &Baz = mem::transmute(slice::from_raw_parts(&*data, 5));\n         assert!(x.f1 == 42);\n         let chs: Vec<char> = x.f2.chars().collect();\n         assert!(chs.len() == 5);"}]}