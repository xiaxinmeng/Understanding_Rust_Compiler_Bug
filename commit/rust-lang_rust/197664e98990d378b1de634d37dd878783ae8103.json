{"sha": "197664e98990d378b1de634d37dd878783ae8103", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NzY2NGU5ODk5MGQzNzhiMWRlNjM0ZDM3ZGQ4Nzg3ODNhZTgxMDM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-16T02:27:24Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-16T02:27:24Z"}, "message": "Add suggestion to needless_borrow", "tree": {"sha": "821b8bb56e50874d405e9abfa9ded534c4103f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821b8bb56e50874d405e9abfa9ded534c4103f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/197664e98990d378b1de634d37dd878783ae8103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/197664e98990d378b1de634d37dd878783ae8103", "html_url": "https://github.com/rust-lang/rust/commit/197664e98990d378b1de634d37dd878783ae8103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/197664e98990d378b1de634d37dd878783ae8103/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f64bae4ae385172fd27ce03e74e0c0f2bf738159", "url": "https://api.github.com/repos/rust-lang/rust/commits/f64bae4ae385172fd27ce03e74e0c0f2bf738159", "html_url": "https://github.com/rust-lang/rust/commit/f64bae4ae385172fd27ce03e74e0c0f2bf738159"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "d8f892d40735855c5f0dfc4aa5877abeeda93490", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/197664e98990d378b1de634d37dd878783ae8103/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/197664e98990d378b1de634d37dd878783ae8103/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=197664e98990d378b1de634d37dd878783ae8103", "patch": "@@ -6,7 +6,7 @@ use rustc::lint::*;\n use rustc::hir::{BindingAnnotation, Expr, ExprAddrOf, MutImmutable, Pat, PatKind};\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n-use utils::{in_macro, span_lint};\n+use utils::{in_macro, snippet_opt, span_lint_and_then};\n \n /// **What it does:** Checks for address of operations (`&`) that are going to\n /// be dereferenced immediately by the compiler.\n@@ -54,12 +54,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                         ..\n                     }] = *adj3\n                     {\n-                        span_lint(\n+                        span_lint_and_then(\n                             cx,\n                             NEEDLESS_BORROW,\n                             e.span,\n-                            \"this expression borrows a reference that is immediately dereferenced by the \\\n-                             compiler\",\n+                            \"this expression borrows a reference that is immediately dereferenced \\\n+                             by the compiler\",\n+                            |db| {\n+                                if let Some(snippet) = snippet_opt(cx, inner.span) {\n+                                    db.span_suggestion(e.span, \"change this to\", snippet);\n+                                }\n+                            }\n                         );\n                     }\n                 }\n@@ -71,14 +76,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n             return;\n         }\n         if_let_chain! {[\n-            let PatKind::Binding(BindingAnnotation::Ref, _, _, _) = pat.node,\n+            let PatKind::Binding(BindingAnnotation::Ref, _, name, _) = pat.node,\n             let ty::TyRef(_, ref tam) = cx.tables.pat_ty(pat).sty,\n             tam.mutbl == MutImmutable,\n             let ty::TyRef(_, ref tam) = tam.ty.sty,\n             // only lint immutable refs, because borrowed `&mut T` cannot be moved out\n             tam.mutbl == MutImmutable,\n         ], {\n-            span_lint(cx, NEEDLESS_BORROW, pat.span, \"this pattern creates a reference to a reference\")\n+            span_lint_and_then(\n+                cx,\n+                NEEDLESS_BORROW,\n+                pat.span,\n+                \"this pattern creates a reference to a reference\",\n+                |db| {\n+                    if let Some(snippet) = snippet_opt(cx, name.span) {\n+                        db.span_suggestion(pat.span, \"change this to\", snippet);\n+                    }\n+                }\n+            )\n         }}\n     }\n }"}]}