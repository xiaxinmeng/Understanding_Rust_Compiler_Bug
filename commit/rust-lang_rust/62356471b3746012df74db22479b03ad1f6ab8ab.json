{"sha": "62356471b3746012df74db22479b03ad1f6ab8ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMzU2NDcxYjM3NDYwMTJkZjc0ZGIyMjQ3OWIwM2FkMWY2YWI4YWI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-16T20:41:00Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-27T11:46:28Z"}, "message": "Replaced multi-byte character handling in end_point with potentially more performant variant.", "tree": {"sha": "41b3d10a012c6a373218c2d5f5a290576d472a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41b3d10a012c6a373218c2d5f5a290576d472a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62356471b3746012df74db22479b03ad1f6ab8ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlpsZpQACgkQAXYLT59T\n8VT49Q//VnvdEVFRN3dF/9nTzL/jl4FHvVlm9v5ogASz+9WW+YiNHsPv8m56uUMm\n0pYR2muzrlt4Zp3KkbZMLN7XB3kZI1ZhQM+VT5yYFqHT9EtkdNMU5gyMvJu7HbXk\nRch5B8Aomb053zAz3ZusLwOPhQbvrGMdhJGyh98QPcOqc2+P6Xu0MJjiZCbEAL9V\nZdJg0pKSzHekxC5YyqTuLBGmhmsCIabUPXEd1aY3BH/pKV95PwfU5YycbqkgcUmZ\nt2akqe4OEPqWYZxZzd2vtsCPNPKjbZIsvuXysudJhxgtTOq30CQjXirG+zQXHsFY\nWoLNB5JTd19COzGv8pu2vtAmQIUqkMJ7XaPshjUscnh39LN+AzwHxWXHdiwt9eoI\nXK9uQmN3ZCDLRq34wr88kymWHKy3eLGxmv5X/PqwtnMSLxZTQibX6A6JPnWzK1N5\n6TsSbdyyeX6L31Yc9BxG3dw14rAM92YYjHmxBE61r/yFZ4z784hfvm9nP75oI3l/\nsHTFJAGlrlUUc7DQ/Eyf3hZfam1FugCSo2TaXkUM+kixHUHYedCH3PnO74o7oHiy\nSXGtuqBgNGeMQ6aRXY+2YkhnfJiFjr+5++fZ2dHrj3MajaQEIgYJa3LQNYFmpfqT\nVl+O2jQyo3JaMuz0rCHoWt1BEq0aqOoqCzRft5JZC2OePhc6uWs=\n=OUlF\n-----END PGP SIGNATURE-----", "payload": "tree 41b3d10a012c6a373218c2d5f5a290576d472a49\nparent c71cec8834bf30032a8e49d2949f6d8d4080b639\nauthor David Wood <david@davidtw.co> 1516135260 +0000\ncommitter David Wood <david@davidtw.co> 1517053588 +0000\n\nReplaced multi-byte character handling in end_point with potentially more performant variant.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62356471b3746012df74db22479b03ad1f6ab8ab", "html_url": "https://github.com/rust-lang/rust/commit/62356471b3746012df74db22479b03ad1f6ab8ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62356471b3746012df74db22479b03ad1f6ab8ab/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c71cec8834bf30032a8e49d2949f6d8d4080b639", "url": "https://api.github.com/repos/rust-lang/rust/commits/c71cec8834bf30032a8e49d2949f6d8d4080b639", "html_url": "https://github.com/rust-lang/rust/commit/c71cec8834bf30032a8e49d2949f6d8d4080b639"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "76050f8dc09f08134bd82da60484be7af1700c94", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/62356471b3746012df74db22479b03ad1f6ab8ab/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62356471b3746012df74db22479b03ad1f6ab8ab/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=62356471b3746012df74db22479b03ad1f6ab8ab", "patch": "@@ -610,38 +610,74 @@ impl CodeMap {\n \n     /// Returns a new span representing just the end-point of this span\n     pub fn end_point(&self, sp: Span) -> Span {\n-        let hi = sp.hi().0.checked_sub(1).unwrap_or(sp.hi().0);\n-        let hi = self.get_start_of_char_bytepos(BytePos(hi));\n-        let lo = cmp::max(hi.0, sp.lo().0);\n-        sp.with_lo(BytePos(lo))\n+        let pos = sp.hi().0;\n+\n+        let width = self.find_width_of_character_at_span(sp, false);\n+        let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);\n+\n+        let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));\n+        sp.with_lo(end_point)\n     }\n \n     /// Returns a new span representing the next character after the end-point of this span\n     pub fn next_point(&self, sp: Span) -> Span {\n-        let hi = sp.lo().0.checked_add(1).unwrap_or(sp.lo().0);\n-        let hi = self.get_start_of_char_bytepos(BytePos(hi));\n-        let lo = cmp::max(sp.hi().0, hi.0);\n-        Span::new(BytePos(lo), BytePos(lo), sp.ctxt())\n+        let pos = sp.lo().0;\n+\n+        let width = self.find_width_of_character_at_span(sp, true);\n+        let corrected_next_position = pos.checked_add(width).unwrap_or(pos);\n+\n+        let next_point = BytePos(cmp::max(sp.hi().0, corrected_next_position));\n+        Span::new(next_point, next_point, sp.ctxt())\n     }\n \n-    fn get_start_of_char_bytepos(&self, bpos: BytePos) -> BytePos {\n-        let idx = self.lookup_filemap_idx(bpos);\n-        let files = self.files.borrow();\n-        let map = &(*files)[idx];\n+    /// Finds the width of a character, either before or after the provided span.\n+    fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {\n+        // Disregard malformed spans and assume a one-byte wide character.\n+        if sp.lo() > sp.hi() {\n+            return 1;\n+        }\n \n-        for mbc in map.multibyte_chars.borrow().iter() {\n-            if mbc.pos < bpos {\n-                if bpos.to_usize() >= mbc.pos.to_usize() + mbc.bytes {\n-                    // If we do, then return the start of the character.\n-                    return mbc.pos;\n-                }\n-            } else {\n-                break;\n-            }\n+        let local_begin = self.lookup_byte_offset(sp.lo());\n+        let local_end = self.lookup_byte_offset(sp.hi());\n+\n+        let start_index = local_begin.pos.to_usize();\n+        let end_index = local_end.pos.to_usize();\n+\n+        // Disregard indexes that are at the start or end of their spans, they can't fit bigger\n+        // characters.\n+        if (!forwards && end_index == usize::min_value()) ||\n+            (forwards && start_index == usize::max_value()) {\n+            return 1;\n+        }\n+\n+        let source_len = (local_begin.fm.end_pos - local_begin.fm.start_pos).to_usize();\n+        // Ensure indexes are also not malformed.\n+        if start_index > end_index || end_index > source_len {\n+            return 1;\n         }\n \n-        // If this isn't a multibyte character, return the original position.\n-        return bpos;\n+        // We need to extend the snippet to the end of the src rather than to end_index so when\n+        // searching forwards for boundaries we've got somewhere to search.\n+        let snippet = if let Some(ref src) = local_begin.fm.src {\n+            let len = src.len();\n+            (&src[start_index..len]).to_string()\n+        } else if let Some(src) = local_begin.fm.external_src.borrow().get_source() {\n+            let len = src.len();\n+            (&src[start_index..len]).to_string()\n+        } else {\n+            return 1;\n+        };\n+\n+        let mut target = if forwards { end_index + 1 } else { end_index - 1 };\n+        while !snippet.is_char_boundary(target - start_index) {\n+            target = if forwards { target + 1 } else { target - 1 };\n+        }\n+\n+        if forwards {\n+            (target - end_index) as u32\n+        } else {\n+            (end_index - target) as u32\n+        }\n     }\n \n     pub fn get_filemap(&self, filename: &FileName) -> Option<Rc<FileMap>> {"}]}