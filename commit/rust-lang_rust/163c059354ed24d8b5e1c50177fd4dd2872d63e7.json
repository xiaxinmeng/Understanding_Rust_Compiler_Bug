{"sha": "163c059354ed24d8b5e1c50177fd4dd2872d63e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2M2MwNTkzNTRlZDI0ZDhiNWUxYzUwMTc3ZmQ0ZGQyODcyZDYzZTc=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-07T14:04:43Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-07T14:04:43Z"}, "message": "Only omit StorageLive/Dead for variable that are never initialized\n\nWith `feature(never_type)`, it's not guaranteed that any variable with\ntype `!` isn't ever assigned to.", "tree": {"sha": "3b14434b03b25144f9b4737ecdea080f145f9a3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b14434b03b25144f9b4737ecdea080f145f9a3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/163c059354ed24d8b5e1c50177fd4dd2872d63e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/163c059354ed24d8b5e1c50177fd4dd2872d63e7", "html_url": "https://github.com/rust-lang/rust/commit/163c059354ed24d8b5e1c50177fd4dd2872d63e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/163c059354ed24d8b5e1c50177fd4dd2872d63e7/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89188815ed1ec2d6fa498e8dc1eeecdc26e355e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/89188815ed1ec2d6fa498e8dc1eeecdc26e355e4", "html_url": "https://github.com/rust-lang/rust/commit/89188815ed1ec2d6fa498e8dc1eeecdc26e355e4"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "dbcc330eca382cc2e1d444fcb8e6856f23d3f037", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/163c059354ed24d8b5e1c50177fd4dd2872d63e7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163c059354ed24d8b5e1c50177fd4dd2872d63e7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=163c059354ed24d8b5e1c50177fd4dd2872d63e7", "patch": "@@ -3,6 +3,7 @@\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::scope::DropKind;\n use crate::hair::*;\n+use rustc::hir;\n use rustc::middle::region;\n use rustc::mir::*;\n \n@@ -66,32 +67,46 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         };\n         let temp_place = &Place::from(temp);\n \n-        if !expr_ty.is_never() {\n-            this.cfg.push(\n-                block,\n-                Statement {\n-                    source_info,\n-                    kind: StatementKind::StorageLive(temp),\n-                },\n-            );\n-\n-            // In constants, `temp_lifetime` is `None` for temporaries that live for the\n-            // `'static` lifetime. Thus we do not drop these temporaries and simply leak them.\n-            // This is equivalent to what `let x = &foo();` does in functions. The temporary\n-            // is lifted to their surrounding scope. In a function that means the temporary lives\n-            // until just before the function returns. In constants that means it outlives the\n-            // constant's initialization value computation. Anything outliving a constant\n-            // must have the `'static` lifetime and live forever.\n-            // Anything with a shorter lifetime (e.g the `&foo()` in `bar(&foo())` or anything\n-            // within a block will keep the regular drops just like runtime code.\n-            if let Some(temp_lifetime) = temp_lifetime {\n-                this.schedule_drop(\n-                    expr_span,\n-                    temp_lifetime,\n-                    temp,\n-                    expr_ty,\n-                    DropKind::Storage,\n+        match expr.kind {\n+            // Don't bother with StorageLive and Dead for these temporaries,\n+            // they are never assigned.\n+            ExprKind::Break { .. } |\n+            ExprKind::Continue { .. } |\n+            ExprKind::Return { .. } => (),\n+            ExprKind::Block {\n+                body: hir::Block { expr: None, targeted_by_break: false, .. }\n+            } if expr_ty.is_never() => (),\n+            _ => {\n+                this.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::StorageLive(temp),\n+                    },\n                 );\n+\n+                // In constants, `temp_lifetime` is `None` for temporaries that\n+                // live for the `'static` lifetime. Thus we do not drop these\n+                // temporaries and simply leak them.\n+                // This is equivalent to what `let x = &foo();` does in\n+                // functions. The temporary is lifted to their surrounding\n+                // scope. In a function that means the temporary lives until\n+                // just before the function returns. In constants that means it\n+                // outlives the constant's initialization value computation.\n+                // Anything outliving a constant must have the `'static`\n+                // lifetime and live forever.\n+                // Anything with a shorter lifetime (e.g the `&foo()` in\n+                // `bar(&foo())` or anything within a block will keep the\n+                // regular drops just like runtime code.\n+                if let Some(temp_lifetime) = temp_lifetime {\n+                    this.schedule_drop(\n+                        expr_span,\n+                        temp_lifetime,\n+                        temp,\n+                        expr_ty,\n+                        DropKind::Storage,\n+                    );\n+                }\n             }\n         }\n "}, {"sha": "418febbdc01ebc8b5a59fb8c6997d51ad17fa0e6", "filename": "src/test/mir-opt/loop_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/163c059354ed24d8b5e1c50177fd4dd2872d63e7/src%2Ftest%2Fmir-opt%2Floop_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163c059354ed24d8b5e1c50177fd4dd2872d63e7/src%2Ftest%2Fmir-opt%2Floop_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.rs?ref=163c059354ed24d8b5e1c50177fd4dd2872d63e7", "patch": "@@ -26,6 +26,7 @@ fn main() {\n //        _1 = ();\n //        StorageDead(_2);\n //        StorageDead(_1);\n+//        StorageLive(_4);\n //        goto -> bb5;\n //    }\n //    ..."}, {"sha": "4f30ea1467023a0e0f38d8de88228b4ff6486ab7", "filename": "src/test/ui/borrowck/assign-never-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/163c059354ed24d8b5e1c50177fd4dd2872d63e7/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163c059354ed24d8b5e1c50177fd4dd2872d63e7/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs?ref=163c059354ed24d8b5e1c50177fd4dd2872d63e7", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for issue 62165\n+\n+// check-pass\n+\n+#![feature(never_type)]\n+\n+pub fn main() {\n+    loop {\n+        match None {\n+            None => return,\n+            Some(val) => val,\n+        };\n+    };\n+}"}]}