{"sha": "d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZTJmNDhjOGNiM2VlMzJmZWNmNWE3YTUyNWZhNTFkMTBhYjQwMzU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-23T15:37:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:08Z"}, "message": "More const eval sanity checks (invalid slice fat pointers)", "tree": {"sha": "4d9a2a4389f57305d5f6c1c3e2e47ff2c2a708f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9a2a4389f57305d5f6c1c3e2e47ff2c2a708f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53AACgkQpp+NIls6\n19nKZw/+KuLE06MQiEyXE475U14UXoSfyEONi/SULVLgjtjq8XnLsNxhaVQ5NfGJ\nvxUMaz0EMJanK/a4DvSGXI5HHKjzcd76o+gpRNKIV64VYfa81iqCepB7I3cQ7HM9\nS46g13Uvvyns3uB6LUeg81tVjsh+od9i8XOU8V47LZYwJ4XmQjNwV0x2CAE/Asup\nJbnGBzVsMvWlFJMh+tdRA1kTBa+R4HdUKtlNQnXwH/8p4ioqK9kWfIBdfzJN38y2\nCHkvmj9t2GpYOby0oHkzIgYNbKGgIMskRmwtac423evm8cVeVTEROq7nnOo5asta\nJi6/0zgC13cgrqj9IhzS1rVV3KnIkxS0Ziq2dsMqouYIYOrOjjrNfVjKMTVMRY8h\nUSGZi3zXSiHiFjnQaj4Elfom+BFTKHawlGWWUlDhBK+Pkisj1IFMx6WDUsN59th8\nJwCLSvCT76qO9ERpiV/yG4PB5mEWdBUQYwi0skxTuOQb1/oTqpbeTjJcsHiUD43B\nodHVDpzxuWkLcSjxjqFREnMtCdzHw9qtTCwHQx0QhE2zxiyxfxt3fh4dsuo6G4wL\nNUZEPp8Goe6ll79Z8aoi5X7T1mboLWBO/2gtSTW/ANsUO83Z/GvcoI2NlKtidvBQ\ncCyv8xAvX/C9d3EYUNfnzx52hC8nt00WQJxyTBfUV+XZlTZeIgI=\n=LE5j\n-----END PGP SIGNATURE-----", "payload": "tree 4d9a2a4389f57305d5f6c1c3e2e47ff2c2a708f1\nparent f14e746b2fb11c638904247ef6764f83448de641\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516721859 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494448 +0100\n\nMore const eval sanity checks (invalid slice fat pointers)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035", "html_url": "https://github.com/rust-lang/rust/commit/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f14e746b2fb11c638904247ef6764f83448de641", "url": "https://api.github.com/repos/rust-lang/rust/commits/f14e746b2fb11c638904247ef6764f83448de641", "html_url": "https://github.com/rust-lang/rust/commit/f14e746b2fb11c638904247ef6764f83448de641"}], "stats": {"total": 49, "additions": 11, "deletions": 38}, "files": [{"sha": "3b9fbc5c867a10e4bb7749acaa89e4c3332c812e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035", "patch": "@@ -173,39 +173,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Convert a byte array or byte slice to a byte slice.\n-    fn to_slice_operand(&mut self,\n-                        block: BasicBlock,\n-                        source_info: SourceInfo,\n-                        operand: Operand<'tcx>)\n-                        -> Operand<'tcx>\n-    {\n-        let tcx = self.hir.tcx();\n-        let ty = operand.ty(&self.local_decls, tcx);\n-        debug!(\"to_slice_operand({:?}, {:?}: {:?})\", block, operand, ty);\n-        match ty.sty {\n-            ty::TyRef(region, mt) => match mt.ty.sty {\n-                ty::TyArray(ety, _) => {\n-                    let ty = tcx.mk_imm_ref(region, tcx.mk_slice(ety));\n-                    let temp = self.temp(ty, source_info.span);\n-                    self.cfg.push_assign(block, source_info, &temp,\n-                                         Rvalue::Cast(CastKind::Unsize, operand, ty));\n-                    Operand::Move(temp)\n-                }\n-                ty::TySlice(_) => operand,\n-                _ => {\n-                    span_bug!(source_info.span,\n-                              \"bad operand {:?}: {:?} to `to_slice_operand`\", operand, ty)\n-                }\n-            }\n-            _ => {\n-                span_bug!(source_info.span,\n-                          \"bad operand {:?}: {:?} to `to_slice_operand`\", operand, ty)\n-            }\n-        }\n-\n-    }\n-\n     /// Generates the code to perform a test.\n     pub fn perform_test(&mut self,\n                         block: BasicBlock,\n@@ -292,8 +259,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ret\n             }\n \n-            TestKind::Eq { value, ty } => {\n-                let tcx = self.hir.tcx();\n+            TestKind::Eq { value, mut ty } => {\n                 let mut val = Operand::Copy(place.clone());\n                 let mut expect = self.literal_operand(test.span, ty, Literal::Value {\n                     value"}, {"sha": "dc66365bccb57635e94a5daeb272a99af9678a5d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=d3e2f48c8cb3ee32fecf5a7a525fa51d10ab4035", "patch": "@@ -1263,9 +1263,16 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 ty::TyDynamic(..) => Ok(p.to_value_with_vtable(\n                     self.memory.read_ptr_sized_unsigned(extra, ptr_align)?.to_ptr()?,\n                 )),\n-                ty::TySlice(..) | ty::TyStr => Ok(\n-                    p.to_value_with_len(self.memory.read_ptr_sized_unsigned(extra, ptr_align)?.to_bytes()? as u64),\n-                ),\n+                ty::TySlice(..) | ty::TyStr => {\n+                    match p.primval {\n+                        PrimVal::Bytes(b) => bug!(\"slice ptr: {:x}\", b),\n+                        PrimVal::Undef => bug!(\"undef slice ptr\"),\n+                        _ => {},\n+                    }\n+                    Ok(\n+                        p.to_value_with_len(self.memory.read_ptr_sized_unsigned(extra, ptr_align)?.to_bytes()? as u64),\n+                    )\n+                },\n                 _ => bug!(\"unsized primval ptr read from {:?}\", pointee_ty),\n             }\n         }"}]}