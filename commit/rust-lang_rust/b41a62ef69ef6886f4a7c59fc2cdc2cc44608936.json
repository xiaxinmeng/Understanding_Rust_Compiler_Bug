{"sha": "b41a62ef69ef6886f4a7c59fc2cdc2cc44608936", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MWE2MmVmNjllZjY4ODZmNGE3YzU5ZmMyY2RjMmNjNDQ2MDg5MzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-05T18:26:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-05T18:26:55Z"}, "message": "Rollup merge of #62158 - christianpoveda:ecx-memory-extra, r=RalfJung\n\nAdd MemoryExtra in InterpretCx constructor params\n\nThis is to avoid modifying `MemoryExtra` inside `InterpretCx` after initialization. Related miri PR: https://github.com/rust-lang/miri/pull/792\n\nr? @RalfJung", "tree": {"sha": "bb6b895325c3367e33ba9bba3f7da3b142ea6e08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb6b895325c3367e33ba9bba3f7da3b142ea6e08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdH5ZvCRBK7hj4Ov3rIwAAdHIIAFZf40HRbkvHo4gnsSuDtDmO\nW+ym6v7heflz4l0ULSmEbgR/YNxwSxekArqjGpzY75jEGE0dZR8eVJT1H+ut2q4b\nDLe0LHV/OtRGKBQcle+yv4ZZ1P2W4ONIaSZQ02uEsE3aTUjb+j7Op3a/0j9HJ2QR\n7pXQH+8ErbNl+f+M3eMm4pRwqCUkWJWZPtUqf7EgVyjqKeQUp4/JhXOAwtW/aKwf\no4j8BNp2IDQzuqqwt8eKCWVCvUvPqetiR2U5tbP2YG/dOnxngZN9RDjJfyNfu/nG\newHV14Zvit4e0yAVwRrAhgDJQRW7ZKOwwCVkAhX2fwcZ2ORfFI96aQNVEWaue3E=\n=cyI5\n-----END PGP SIGNATURE-----\n", "payload": "tree bb6b895325c3367e33ba9bba3f7da3b142ea6e08\nparent 02245324932950eb2f96fa4e61c4a02b06770aee\nparent e45bbaf48c9fb0439426967009d837f0fe4f74ce\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562351215 +0200\ncommitter GitHub <noreply@github.com> 1562351215 +0200\n\nRollup merge of #62158 - christianpoveda:ecx-memory-extra, r=RalfJung\n\nAdd MemoryExtra in InterpretCx constructor params\n\nThis is to avoid modifying `MemoryExtra` inside `InterpretCx` after initialization. Related miri PR: https://github.com/rust-lang/miri/pull/792\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936", "html_url": "https://github.com/rust-lang/rust/commit/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02245324932950eb2f96fa4e61c4a02b06770aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/02245324932950eb2f96fa4e61c4a02b06770aee", "html_url": "https://github.com/rust-lang/rust/commit/02245324932950eb2f96fa4e61c4a02b06770aee"}, {"sha": "e45bbaf48c9fb0439426967009d837f0fe4f74ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45bbaf48c9fb0439426967009d837f0fe4f74ce", "html_url": "https://github.com/rust-lang/rust/commit/e45bbaf48c9fb0439426967009d837f0fe4f74ce"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "e95ef0caaafaff626f1802cc7f7444336b172e43", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=b41a62ef69ef6886f4a7c59fc2cdc2cc44608936", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn mk_eval_cx<'mir, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> CompileTimeEvalContext<'mir, 'tcx> {\n     debug!(\"mk_eval_cx: {:?}\", param_env);\n-    InterpCx::new(tcx.at(span), param_env, CompileTimeInterpreter::new())\n+    InterpCx::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), Default::default())\n }\n \n pub(crate) fn eval_promoted<'mir, 'tcx>(\n@@ -632,7 +632,12 @@ pub fn const_eval_raw_provider<'tcx>(\n     }\n \n     let span = tcx.def_span(cid.instance.def_id());\n-    let mut ecx = InterpCx::new(tcx.at(span), key.param_env, CompileTimeInterpreter::new());\n+    let mut ecx = InterpCx::new(\n+        tcx.at(span),\n+        key.param_env,\n+        CompileTimeInterpreter::new(),\n+        Default::default()\n+    );\n \n     let res = ecx.load_mir(cid.instance.def);\n     res.map(|body| {"}, {"sha": "fd5290ee0400c52f467171a4f97241d8a8fa3594", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b41a62ef69ef6886f4a7c59fc2cdc2cc44608936", "patch": "@@ -196,12 +196,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n }\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n-    pub fn new(tcx: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>, machine: M) -> Self {\n+    pub fn new(\n+        tcx: TyCtxtAt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        machine: M,\n+        memory_extra: M::MemoryExtra,\n+    ) -> Self {\n         InterpCx {\n             machine,\n             tcx,\n             param_env,\n-            memory: Memory::new(tcx),\n+            memory: Memory::new(tcx, memory_extra),\n             stack: Vec::new(),\n             vtables: FxHashMap::default(),\n         }"}, {"sha": "ff560360f0ad1f186bc97eefec465a2b1d89e178", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=b41a62ef69ef6886f4a7c59fc2cdc2cc44608936", "patch": "@@ -73,7 +73,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Extra data stored in memory. A reference to this is available when `AllocExtra`\n     /// gets initialized, so you can e.g., have an `Rc` here if there is global state you\n     /// need access to in the `AllocExtra` hooks.\n-    type MemoryExtra: Default;\n+    type MemoryExtra;\n \n     /// Extra data stored in every allocation.\n     type AllocExtra: AllocationExtra<Self::PointerTag> + 'static;"}, {"sha": "f5d912595337bcad06be6ba0e8c5bd06023f5c83", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41a62ef69ef6886f4a7c59fc2cdc2cc44608936/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b41a62ef69ef6886f4a7c59fc2cdc2cc44608936", "patch": "@@ -106,11 +106,11 @@ where\n }\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n-    pub fn new(tcx: TyCtxtAt<'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxtAt<'tcx>, extra: M::MemoryExtra) -> Self {\n         Memory {\n             alloc_map: M::MemoryMap::default(),\n             dead_alloc_map: FxHashMap::default(),\n-            extra: M::MemoryExtra::default(),\n+            extra,\n             tcx,\n         }\n     }"}]}