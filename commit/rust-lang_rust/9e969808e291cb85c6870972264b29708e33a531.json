{"sha": "9e969808e291cb85c6870972264b29708e33a531", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOTY5ODA4ZTI5MWNiODVjNjg3MDk3MjI2NGIyOTcwOGUzM2E1MzE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-01-26T13:36:34Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-01-26T15:17:54Z"}, "message": "Add caching of external MIR in trans::collector", "tree": {"sha": "f0a14d1bacaa92054bced6ca03653e79d9335681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0a14d1bacaa92054bced6ca03653e79d9335681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e969808e291cb85c6870972264b29708e33a531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e969808e291cb85c6870972264b29708e33a531", "html_url": "https://github.com/rust-lang/rust/commit/9e969808e291cb85c6870972264b29708e33a531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e969808e291cb85c6870972264b29708e33a531/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862911df9af8216edc94458df2084143aad7be5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/862911df9af8216edc94458df2084143aad7be5b", "html_url": "https://github.com/rust-lang/rust/commit/862911df9af8216edc94458df2084143aad7be5b"}], "stats": {"total": 133, "additions": 87, "deletions": 46}, "files": [{"sha": "0fe39dcb7f9ec5d8458d4e7f6a74c2f3a7ea0555", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=9e969808e291cb85c6870972264b29708e33a531", "patch": "@@ -25,7 +25,7 @@ use std::{iter, u32};\n use std::ops::{Index, IndexMut};\n \n /// Lowered representation of a single function.\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Mir<'tcx> {\n     /// List of basic blocks. References to basic block use a newtyped index type `BasicBlock`\n     /// that indexes into this vector.\n@@ -146,7 +146,7 @@ pub enum BorrowKind {\n \n // A \"variable\" is a binding declared by the user as part of the fn\n // decl, a let, etc.\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct VarDecl<'tcx> {\n     pub mutability: Mutability,\n     pub name: Name,\n@@ -155,7 +155,7 @@ pub struct VarDecl<'tcx> {\n \n // A \"temp\" is a temporary that we place on the stack. They are\n // anonymous, always mutable, and have only a type.\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct TempDecl<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n@@ -171,7 +171,7 @@ pub struct TempDecl<'tcx> {\n //\n // there is only one argument, of type `(i32, u32)`, but two bindings\n // (`x` and `y`).\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct ArgDecl<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n@@ -207,14 +207,14 @@ impl Debug for BasicBlock {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock and Terminator\n \n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct BasicBlockData<'tcx> {\n     pub statements: Vec<Statement<'tcx>>,\n     pub terminator: Option<Terminator<'tcx>>,\n     pub is_cleanup: bool,\n }\n \n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum Terminator<'tcx> {\n     /// block should have one successor in the graph; we jump there\n     Goto {\n@@ -481,13 +481,13 @@ impl<'tcx> Terminator<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Statements\n \n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Statement<'tcx> {\n     pub span: Span,\n     pub kind: StatementKind<'tcx>,\n }\n \n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum StatementKind<'tcx> {\n     Assign(Lvalue<'tcx>, Rvalue<'tcx>),\n     Drop(DropKind, Lvalue<'tcx>),"}, {"sha": "76b1bad12146989c51b5681b0faa1d6ff7f95bd8", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=9e969808e291cb85c6870972264b29708e33a531", "patch": "@@ -2110,6 +2110,10 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     fn record_translation_item_as_generated<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                       node_id: ast::NodeId,\n                                                       param_substs: &'tcx Substs<'tcx>) {\n+        if !collector::collecting_debug_information(ccx) {\n+            return;\n+        }\n+\n         let def_id = match ccx.tcx().node_id_to_type(node_id).sty {\n             ty::TyClosure(def_id, _) => def_id,\n             _ => ccx.external_srcs()"}, {"sha": "f8aaa2fcdcab782911f3e1f2f37978389fc7648e", "filename": "src/librustc_trans/trans/collector.rs", "status": "modified", "additions": 65, "deletions": 32, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs?ref=9e969808e291cb85c6870972264b29708e33a531", "patch": "@@ -217,6 +217,7 @@ use trans::monomorphize;\n use util::nodemap::{FnvHashSet, FnvHashMap, DefIdMap};\n \n use std::hash::{Hash, Hasher};\n+use std::rc::Rc;\n \n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum TransItemCollectionMode {\n@@ -281,9 +282,14 @@ pub fn collect_crate_translation_items<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         debug!(\"Building translation item graph, beginning at roots\");\n         let mut visited = FnvHashSet();\n         let mut recursion_depths = DefIdMap();\n+        let mut mir_cache = DefIdMap();\n \n         for root in roots {\n-            collect_items_rec(ccx, root, &mut visited, &mut recursion_depths);\n+            collect_items_rec(ccx,\n+                              root,\n+                              &mut visited,\n+                              &mut recursion_depths,\n+                              &mut mir_cache);\n         }\n \n         visited\n@@ -313,11 +319,27 @@ fn collect_roots<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     roots\n }\n \n+#[derive(Clone)]\n+enum CachedMir<'mir, 'tcx: 'mir> {\n+    Ref(&'mir mir::Mir<'tcx>),\n+    Owned(Rc<mir::Mir<'tcx>>)\n+}\n+\n+impl<'mir, 'tcx: 'mir> CachedMir<'mir, 'tcx> {\n+    fn get_ref<'a>(&'a self) -> &'a mir::Mir<'tcx> {\n+        match *self {\n+            CachedMir::Ref(r) => r,\n+            CachedMir::Owned(ref rc) => &**rc,\n+        }\n+    }\n+}\n+\n // Collect all monomorphized translation items reachable from `starting_point`\n fn collect_items_rec<'a, 'tcx: 'a>(ccx: &CrateContext<'a, 'tcx>,\n                                    starting_point: TransItem<'tcx>,\n                                    visited: &mut FnvHashSet<TransItem<'tcx>>,\n-                                   recursion_depths: &mut DefIdMap<usize>) {\n+                                   recursion_depths: &mut DefIdMap<usize>,\n+                                   mir_cache: &mut DefIdMap<CachedMir<'a, 'tcx>>) {\n     if !visited.insert(starting_point.clone()) {\n         // We've been here already, no need to search again.\n         return;\n@@ -343,42 +365,21 @@ fn collect_items_rec<'a, 'tcx: 'a>(ccx: &CrateContext<'a, 'tcx>,\n \n             // Scan the MIR in order to find function calls, closures, and\n             // drop-glue\n-            let mir_not_found_error_message = || {\n-                format!(\"Could not find MIR for function: {}\",\n-                        ccx.tcx().item_path_str(def_id))\n-            };\n-\n-            let external_mir = if !def_id.is_local() {\n-                ccx.sess().cstore.maybe_get_item_mir(ccx.tcx(), def_id)\n-            } else {\n-                None\n-            };\n-\n-            let mir_opt = match external_mir {\n-                Some(ref mir) => Some(mir),\n-                None => {\n-                    let node_id = ccx.tcx().map.as_local_node_id(def_id).unwrap();\n-                    ccx.mir_map().get(&node_id)\n-                }\n-            };\n-\n-            let mir = errors::expect(ccx.sess().diagnostic(),\n-                                     mir_opt,\n-                                     mir_not_found_error_message);\n+            let mir = load_mir(ccx, def_id, mir_cache);\n \n             let mut visitor = MirNeighborCollector {\n                 ccx: ccx,\n-                mir: mir,\n+                mir: mir.get_ref(),\n                 output: &mut neighbors,\n                 param_substs: param_substs\n             };\n \n-            visitor.visit_mir(mir);\n+            visitor.visit_mir(mir.get_ref());\n         }\n     }\n \n     for neighbour in neighbors {\n-        collect_items_rec(ccx, neighbour, visited, recursion_depths);\n+        collect_items_rec(ccx, neighbour, visited, recursion_depths, mir_cache);\n     }\n \n     if let Some((def_id, depth)) = recursion_depth_reset {\n@@ -388,6 +389,37 @@ fn collect_items_rec<'a, 'tcx: 'a>(ccx: &CrateContext<'a, 'tcx>,\n     debug!(\"END collect_items_rec({})\", starting_point.to_string(ccx));\n }\n \n+fn load_mir<'a, 'tcx: 'a>(ccx: &CrateContext<'a, 'tcx>,\n+                          def_id: DefId,\n+                          mir_cache: &mut DefIdMap<CachedMir<'a, 'tcx>>)\n+                          -> CachedMir<'a, 'tcx> {\n+    let mir_not_found_error_message = || {\n+        format!(\"Could not find MIR for function: {}\",\n+                ccx.tcx().item_path_str(def_id))\n+    };\n+\n+    if def_id.is_local() {\n+        let node_id = ccx.tcx().map.as_local_node_id(def_id).unwrap();\n+        let mir_opt = ccx.mir_map().get(&node_id);\n+        let mir = errors::expect(ccx.sess().diagnostic(),\n+                             mir_opt,\n+                             mir_not_found_error_message);\n+        CachedMir::Ref(mir)\n+    } else {\n+        if let Some(mir) = mir_cache.get(&def_id) {\n+            return mir.clone();\n+        }\n+\n+        let mir_opt = ccx.sess().cstore.maybe_get_item_mir(ccx.tcx(), def_id);\n+        let mir = errors::expect(ccx.sess().diagnostic(),\n+                                 mir_opt,\n+                                 mir_not_found_error_message);\n+        let cached = CachedMir::Owned(Rc::new(mir));\n+        mir_cache.insert(def_id, cached.clone());\n+        cached\n+    }\n+}\n+\n fn check_recursion_limit<'a, 'tcx: 'a>(ccx: &CrateContext<'a, 'tcx>,\n                                        def_id: DefId,\n                                        recursion_depths: &mut DefIdMap<usize>)\n@@ -1488,14 +1520,15 @@ pub enum TransItemState {\n     NotPredictedButGenerated,\n }\n \n+pub fn collecting_debug_information(ccx: &CrateContext) -> bool {\n+    return cfg!(debug_assertions) &&\n+           ccx.sess().opts.debugging_opts.print_trans_items.is_some();\n+}\n+\n pub fn print_collection_results<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>) {\n     use std::hash::{Hash, SipHasher, Hasher};\n \n-    if !cfg!(debug_assertions) {\n-        return;\n-    }\n-\n-    if ccx.sess().opts.debugging_opts.print_trans_items.is_none() {\n+    if !collecting_debug_information(ccx) {\n         return;\n     }\n "}, {"sha": "0d6324f3e899aba5fd49b838599022ad270a918e", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=9e969808e291cb85c6870972264b29708e33a531", "patch": "@@ -30,7 +30,7 @@ use middle::def::Def;\n use middle::def_id::DefId;\n use trans::{adt, closure, debuginfo, expr, inline, machine};\n use trans::base::{self, push_ctxt};\n-use trans::collector::TransItem;\n+use trans::collector::{self, TransItem};\n use trans::common::{self, type_is_sized, ExprOrMethodCall, node_id_substs, C_nil, const_get_elt};\n use trans::common::{CrateContext, C_integral, C_floating, C_bool, C_str_slice, C_bytes, val_ty};\n use trans::common::{C_struct, C_undef, const_to_opt_int, const_to_opt_uint, VariantInfo, C_uint};\n@@ -1018,7 +1018,9 @@ pub fn trans_static(ccx: &CrateContext,\n                     attrs: &[ast::Attribute])\n                     -> Result<ValueRef, ConstEvalErr> {\n \n-    ccx.record_translation_item_as_generated(TransItem::Static(id));\n+    if collector::collecting_debug_information(ccx) {\n+        ccx.record_translation_item_as_generated(TransItem::Static(id));\n+    }\n \n     unsafe {\n         let _icx = push_ctxt(\"trans_static\");"}, {"sha": "de4867398b99eba46b3a4e5aeede0b980c38e0c7", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e969808e291cb85c6870972264b29708e33a531/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=9e969808e291cb85c6870972264b29708e33a531", "patch": "@@ -28,7 +28,7 @@ use trans::build::*;\n use trans::callee;\n use trans::cleanup;\n use trans::cleanup::CleanupMethods;\n-use trans::collector::TransItem;\n+use trans::collector::{self, TransItem};\n use trans::common::*;\n use trans::debuginfo::DebugLoc;\n use trans::declare;\n@@ -498,9 +498,11 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n                               -> Block<'blk, 'tcx> {\n     let t = g.ty();\n \n-    bcx.ccx()\n-       .record_translation_item_as_generated(TransItem::DropGlue(bcx.tcx()\n-                                                                    .erase_regions(&t)));\n+    if collector::collecting_debug_information(bcx.ccx()) {\n+        bcx.ccx()\n+           .record_translation_item_as_generated(TransItem::DropGlue(bcx.tcx()\n+                                                                        .erase_regions(&t)));\n+    }\n \n     let skip_dtor = match g { DropGlueKind::Ty(_) => false, DropGlueKind::TyContents(_) => true };\n     // NB: v0 is an *alias* of type t here, not a direct value."}]}