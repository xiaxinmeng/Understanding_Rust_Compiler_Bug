{"sha": "dbc9b7f46eb95d2583fc60c09220c0803ba541ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYzliN2Y0NmViOTVkMjU4M2ZjNjBjMDkyMjBjMDgwM2JhNTQxZWU=", "commit": {"author": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T20:44:40Z"}, "committer": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T20:44:40Z"}, "message": "Reworked the error messages for more heplfulness.\n\nRenamed the cast_possible_overflow lint to cast_possible_truncation,\nand updated the error message, readme and crate root accordingly.\nAdded some more information to the message for the cast_precision_loss\nlint.\nUpdated the test case to reflect changes.", "tree": {"sha": "0a4408a8e345b684e3fad22353eacbce79e08fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a4408a8e345b684e3fad22353eacbce79e08fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbc9b7f46eb95d2583fc60c09220c0803ba541ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc9b7f46eb95d2583fc60c09220c0803ba541ee", "html_url": "https://github.com/rust-lang/rust/commit/dbc9b7f46eb95d2583fc60c09220c0803ba541ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbc9b7f46eb95d2583fc60c09220c0803ba541ee/comments", "author": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab481e5cb1cb54005a19044709ac9bebabd74aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab481e5cb1cb54005a19044709ac9bebabd74aae", "html_url": "https://github.com/rust-lang/rust/commit/ab481e5cb1cb54005a19044709ac9bebabd74aae"}], "stats": {"total": 139, "additions": 70, "deletions": 69}, "files": [{"sha": "fbb16fcb17048ea233f853a40ad119fba6f779b2", "filename": "README.md", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9b7f46eb95d2583fc60c09220c0803ba541ee/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9b7f46eb95d2583fc60c09220c0803ba541ee/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=dbc9b7f46eb95d2583fc60c09220c0803ba541ee", "patch": "@@ -6,50 +6,50 @@ A collection of lints that give helpful tips to newbies and catch oversights.\n ##Lints\n Lints included in this crate:\n \n-name                   | default | meaning\n------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n-approx_constant        | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n-bad_bit_mask           | deny    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n-box_vec                | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n-cast_possible_overflow | allow   | casts that may cause overflow, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n-cast_precision_loss    | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n-cast_sign_loss         | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n-cmp_nan                | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n-cmp_owned              | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n-collapsible_if         | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n-eq_op                  | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n-explicit_iter_loop     | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n-float_cmp              | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n-identity_op            | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n-ineffective_bit_mask   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n-inline_always          | warn    | `#[inline(always)]` is a bad idea in most cases\n-iter_next_loop         | warn    | for-looping over `_.next()` which is probably not intended\n-len_without_is_empty   | warn    | traits and impls that have `.len()` but not `.is_empty()`\n-len_zero               | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n-let_and_return         | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n-let_unit_value         | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n-linkedlist             | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n-modulo_one             | warn    | taking a number modulo 1, which always returns 0\n-mut_mut                | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n-needless_bool          | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n-needless_lifetimes     | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n-needless_range_loop    | warn    | for-looping over a range of indices where an iterator over items would do\n-needless_return        | warn    | using a return statement like `return expr;` where an expression would suffice\n-non_ascii_literal      | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n-option_unwrap_used     | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n-precedence             | warn    | expressions where precedence may trip up the unwary reader of the source; suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n-ptr_arg                | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n-range_step_by_zero     | warn    | using Range::step_by(0), which produces an infinite iterator\n-redundant_closure      | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n-result_unwrap_used     | allow   | using `Result.unwrap()`, which might be better handled\n-single_match           | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n-str_to_string          | warn    | using `to_string()` on a str, which should be `to_owned()`\n-string_add             | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n-string_add_assign      | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n-string_to_string       | warn    | calling `String.to_string()` which is a no-op\n-toplevel_ref_arg       | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n-unit_cmp               | warn    | comparing unit values (which is always `true` or `false`, respectively)\n-zero_width_space       | deny    | using a zero-width space in a string literal, which is confusing\n+name                     | default | meaning\n+-------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+approx_constant          | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n+bad_bit_mask             | deny    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+box_vec                  | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n+cast_possible_truncation | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n+cast_precision_loss      | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n+cast_sign_loss           | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n+cmp_nan                  | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n+cmp_owned                | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n+collapsible_if           | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n+eq_op                    | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n+explicit_iter_loop       | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n+float_cmp                | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+identity_op              | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+ineffective_bit_mask     | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n+inline_always            | warn    | `#[inline(always)]` is a bad idea in most cases\n+iter_next_loop           | warn    | for-looping over `_.next()` which is probably not intended\n+len_without_is_empty     | warn    | traits and impls that have `.len()` but not `.is_empty()`\n+len_zero                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n+let_and_return           | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n+let_unit_value           | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n+linkedlist               | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n+modulo_one               | warn    | taking a number modulo 1, which always returns 0\n+mut_mut                  | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n+needless_bool            | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n+needless_lifetimes       | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n+needless_range_loop      | warn    | for-looping over a range of indices where an iterator over items would do\n+needless_return          | warn    | using a return statement like `return expr;` where an expression would suffice\n+non_ascii_literal        | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n+option_unwrap_used       | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n+precedence               | warn    | expressions where precedence may trip up the unwary reader of the source; suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n+ptr_arg                  | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n+range_step_by_zero       | warn    | using Range::step_by(0), which produces an infinite iterator\n+redundant_closure        | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n+result_unwrap_used       | allow   | using `Result.unwrap()`, which might be better handled\n+single_match             | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n+str_to_string            | warn    | using `to_string()` on a str, which should be `to_owned()`\n+string_add               | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n+string_add_assign        | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n+string_to_string         | warn    | calling `String.to_string()` which is a no-op\n+toplevel_ref_arg         | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n+unit_cmp                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n+zero_width_space         | deny    | using a zero-width space in a string literal, which is confusing\n \n To use, add the following lines to your Cargo.toml:\n "}, {"sha": "bdb3cb3471a5f3ee1a387dace91dca3926cc4b2b", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9b7f46eb95d2583fc60c09220c0803ba541ee/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9b7f46eb95d2583fc60c09220c0803ba541ee/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dbc9b7f46eb95d2583fc60c09220c0803ba541ee", "patch": "@@ -106,7 +106,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         strings::STRING_ADD,\n         strings::STRING_ADD_ASSIGN,\n         types::BOX_VEC,\n-        types::CAST_POSSIBLE_OVERFLOW,\n+        types::CAST_POSSIBLE_TRUNCATION,\n         types::CAST_PRECISION_LOSS,\n         types::CAST_SIGN_LOSS,\n         types::LET_UNIT_VALUE,"}, {"sha": "f9949a7b5633b70c21e2621107e75bd2ed162302", "filename": "src/types.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9b7f46eb95d2583fc60c09220c0803ba541ee/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9b7f46eb95d2583fc60c09220c0803ba541ee/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=dbc9b7f46eb95d2583fc60c09220c0803ba541ee", "patch": "@@ -143,14 +143,14 @@ declare_lint!(pub CAST_PRECISION_LOSS, Allow,\n               \"casts that cause loss of precision, e.g `x as f32` where `x: u64`\");\n declare_lint!(pub CAST_SIGN_LOSS, Allow,\n               \"casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\");\n-declare_lint!(pub CAST_POSSIBLE_OVERFLOW, Allow,\n-              \"casts that may cause overflow, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\");\n+declare_lint!(pub CAST_POSSIBLE_TRUNCATION, Allow,\n+              \"casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\");\n \n impl LintPass for CastPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CAST_PRECISION_LOSS,\n                     CAST_SIGN_LOSS,\n-                    CAST_POSSIBLE_OVERFLOW)\n+                    CAST_POSSIBLE_TRUNCATION)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n@@ -170,17 +170,18 @@ impl LintPass for CastPass {\n                             _ => 0\n                         };\n                         if from_nbits != 4 {\n-                            // Handle TyIs/TyUs separately (size is arch dependant)\n+                            // Handle TyIs/TyUs separately (pointer size is arch dependant)\n                             if from_nbits >= to_nbits {\n                                 span_lint(cx, CAST_PRECISION_LOSS, expr.span,\n-                                          &format!(\"converting from {} to {}, which causes a loss of precision\",\n-                                                   cast_from, cast_to));\n+                                          &format!(\"converting from {0} to {1}, which causes a loss of precision \\\n+                                          \t\t\t({0} is {2} bits wide, but {1}'s mantissa is only {3} bits wide)\",\n+                                                   cast_from, cast_to, from_nbits, if to_nbits == 64 {52} else {23} ));\n                             }\n                         }\n                     },\n                     (false, true) => {\n-                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n-                                  &format!(\"the contents of a {} may overflow a {}\", cast_from, cast_to));\n+                        span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span,\n+                                  &format!(\"casting {} to {} may cause truncation of the value\", cast_from, cast_to));\n                         if !cast_to.is_signed() {\n                             span_lint(cx, CAST_SIGN_LOSS, expr.span,\n                                       &format!(\"casting from {} to {} loses the sign of the value\", cast_from, cast_to));\n@@ -203,14 +204,14 @@ impl LintPass for CastPass {\n                         };\n                         if to_nbits < from_nbits ||\n                            (!cast_from.is_signed() && cast_to.is_signed() && to_nbits <= from_nbits) {\n-                                span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n-                                          &format!(\"the contents of a {} may overflow a {}\", cast_from, cast_to));\n+                                span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span,\n+                                          &format!(\"casting {} to {} may cause truncation of the value\", cast_from, cast_to));\n                         }\n                     }\n                     (false, false) => {\n                         if let (&ty::TyFloat(ast::TyF64),\n                                 &ty::TyFloat(ast::TyF32)) = (&cast_from.sty, &cast_to.sty) {\n-                            span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span, \"the contents of a f64 may overflow a f32\");\n+                            span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span, \"casting f64 to f32 may cause truncation of the value\");\n                         }\n                     }\n                 }"}, {"sha": "af6e6089fbfcd6eb443abd525c4850730bc9f43a", "filename": "tests/compile-fail/cast.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9b7f46eb95d2583fc60c09220c0803ba541ee/tests%2Fcompile-fail%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9b7f46eb95d2583fc60c09220c0803ba541ee/tests%2Fcompile-fail%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast.rs?ref=dbc9b7f46eb95d2583fc60c09220c0803ba541ee", "patch": "@@ -1,30 +1,30 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[deny(cast_precision_loss, cast_possible_overflow, cast_sign_loss)]\n+#[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss)]\n fn main() {\n     let i : i32 = 42;\n     let u : u32 = 42;\n     let f : f32 = 42.0;\n \n     // Test cast_precision_loss\n-    i as f32; //~ERROR converting from i32 to f32, which causes a loss of precision\n-    (i as i64) as f32; //~ERROR converting from i64 to f32, which causes a loss of precision\n-    (i as i64) as f64; //~ERROR converting from i64 to f64, which causes a loss of precision\n-    u as f32; //~ERROR converting from u32 to f32, which causes a loss of precision\n-    (u as u64) as f32; //~ERROR converting from u64 to f32, which causes a loss of precision\n-    (u as u64) as f64; //~ERROR converting from u64 to f64, which causes a loss of precision\n+    i as f32; //~ERROR converting from i32 to f32, which causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+    (i as i64) as f32; //~ERROR converting from i64 to f32, which causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+    (i as i64) as f64; //~ERROR converting from i64 to f64, which causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+    u as f32; //~ERROR converting from u32 to f32, which causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+    (u as u64) as f32; //~ERROR converting from u64 to f32, which causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+    (u as u64) as f64; //~ERROR converting from u64 to f64, which causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n     i as f64; // Should not trigger the lint\n     u as f64; // Should not trigger the lint\n     \n-    // Test cast_possible_overflow\n-    f as i32; //~ERROR the contents of a f32 may overflow a i32\n-    f as u32; //~ERROR the contents of a f32 may overflow a u32\n+    // Test cast_possible_truncation\n+    f as i32; //~ERROR casting f32 to i32 may cause truncation of the value\n+    f as u32; //~ERROR casting f32 to u32 may cause truncation of the value\n               //~^ERROR casting from f32 to u32 loses the sign of the value\n-    i as u8;  //~ERROR the contents of a i32 may overflow a u8\n+    i as u8;  //~ERROR casting i32 to u8 may cause truncation of the value\n               //~^ERROR casting from i32 to u8 loses the sign of the value\n-    (f as f64) as f32; //~ERROR the contents of a f64 may overflow a f32\n-    i as i8;  //~ERROR the contents of a i32 may overflow a i8\n+    (f as f64) as f32; //~ERROR casting f64 to f32 may cause truncation of the value\n+    i as i8;  //~ERROR casting i32 to i8 may cause truncation of the value\n     \n     // Test cast_sign_loss\n     i as u32; //~ERROR casting from i32 to u32 loses the sign of the value"}]}