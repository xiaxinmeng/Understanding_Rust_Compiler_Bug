{"sha": "d4b063de86a061041285bd97af7c059fc7168fab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YjA2M2RlODZhMDYxMDQxMjg1YmQ5N2FmN2MwNTlmYzcxNjhmYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-14T15:28:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-14T15:28:11Z"}, "message": "Auto merge of #38952 - nrc:save-impl-fix, r=eddyb\n\nsave-analysis: handle paths in type/trait context more correctly\n\nTBH, this is still not perfect, witness the FIXME, but it is an improvement. In particular it means we get information about trait references in impls.", "tree": {"sha": "57bf18179e8583de8b9f9a56636b1131ce41b767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57bf18179e8583de8b9f9a56636b1131ce41b767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4b063de86a061041285bd97af7c059fc7168fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b063de86a061041285bd97af7c059fc7168fab", "html_url": "https://github.com/rust-lang/rust/commit/d4b063de86a061041285bd97af7c059fc7168fab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4b063de86a061041285bd97af7c059fc7168fab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef04fc82b198487b0ffb1832304714519f9f1a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef04fc82b198487b0ffb1832304714519f9f1a35", "html_url": "https://github.com/rust-lang/rust/commit/ef04fc82b198487b0ffb1832304714519f9f1a35"}, {"sha": "745a5e8d3b0e6f69cafa198d0a3e5511809c6af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/745a5e8d3b0e6f69cafa198d0a3e5511809c6af9", "html_url": "https://github.com/rust-lang/rust/commit/745a5e8d3b0e6f69cafa198d0a3e5511809c6af9"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "4e4b35702898d064599346585161e24eae10ae44", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4b063de86a061041285bd97af7c059fc7168fab/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b063de86a061041285bd97af7c059fc7168fab/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d4b063de86a061041285bd97af7c059fc7168fab", "patch": "@@ -470,9 +470,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             if !self.span.filter_generated(Some(trait_ref_data.span), trait_ref.path.span) {\n                 self.dumper.type_ref(trait_ref_data.lower(self.tcx));\n             }\n-\n-            visit::walk_path(self, &trait_ref.path);\n         }\n+        self.process_path(trait_ref.ref_id, &trait_ref.path, Some(recorder::TypeRef));\n     }\n \n     fn process_struct_field_def(&mut self, field: &ast::StructField, parent_id: NodeId) {\n@@ -756,8 +755,6 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 if !self.span.filter_generated(Some(trait_ref_data.span), item.span) {\n                     self.dumper.type_ref(trait_ref_data.clone().lower(self.tcx));\n                 }\n-\n-                visit::walk_path(self, &trait_ref.as_ref().unwrap().path);\n             }\n \n             if !self.span.filter_generated(Some(impl_data.span), item.span) {\n@@ -773,6 +770,9 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         if !has_self_ref {\n             self.visit_ty(&typ);\n         }\n+        if let &Some(ref trait_ref) = trait_ref {\n+            self.process_path(trait_ref.ref_id, &trait_ref.path, Some(recorder::TypeRef));\n+        }\n         self.process_generic_params(type_parameters, item.span, \"\", item.id);\n         for impl_item in impl_items {\n             let map = &self.tcx.map;\n@@ -1001,8 +1001,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n \n     fn process_pat(&mut self, p: &'l ast::Pat) {\n         match p.node {\n-            PatKind::Struct(ref path, ref fields, _) => {\n-                visit::walk_path(self, path);\n+            PatKind::Struct(ref _path, ref fields, _) => {\n+                // FIXME do something with _path?\n                 let adt = match self.save_ctxt.tables.node_id_to_type_opt(p.id) {\n                     Some(ty) => ty.ty_adt_def().unwrap(),\n                     None => {\n@@ -1359,8 +1359,6 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                 }\n \n                 self.write_sub_paths_truncated(path);\n-\n-                visit::walk_path(self, path);\n             }\n             ast::TyKind::Array(ref element, ref length) => {\n                 self.visit_ty(element);"}]}