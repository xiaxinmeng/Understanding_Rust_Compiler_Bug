{"sha": "470dbef29a3df65b6b7a7c7c46a28696eda1d031", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MGRiZWYyOWEzZGY2NWI2YjdhN2M3YzQ2YTI4Njk2ZWRhMWQwMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-25T09:31:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-25T09:31:10Z"}, "message": "auto merge of #15957 : pcwalton/rust/builtin-bound-impl-checking, r=huonw,pnkfelix\n\nmethod calls are involved.\r\n\r\nThis breaks code like:\r\n\r\n    impl<T:Copy> Foo for T { ... }\r\n\r\n    fn take_param<T:Foo>(foo: &T) { ... }\r\n\r\n    fn main() {\r\n        let x = box 3i; // note no `Copy` bound\r\n        take_param(&x);\r\n    }\r\n\r\nChange this code to not contain a type error. For example:\r\n\r\n    impl<T:Copy> Foo for T { ... }\r\n\r\n    fn take_param<T:Foo>(foo: &T) { ... }\r\n\r\n    fn main() {\r\n        let x = 3i; // satisfies `Copy` bound\r\n        take_param(&x);\r\n    }\r\n\r\nCloses #15860.\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton", "tree": {"sha": "47ba4e4f65e25493914abdd249c9695a16fdc122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47ba4e4f65e25493914abdd249c9695a16fdc122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/470dbef29a3df65b6b7a7c7c46a28696eda1d031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/470dbef29a3df65b6b7a7c7c46a28696eda1d031", "html_url": "https://github.com/rust-lang/rust/commit/470dbef29a3df65b6b7a7c7c46a28696eda1d031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/470dbef29a3df65b6b7a7c7c46a28696eda1d031/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5984640e63d2e9f613d857ad2d48ff57b310655", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5984640e63d2e9f613d857ad2d48ff57b310655", "html_url": "https://github.com/rust-lang/rust/commit/e5984640e63d2e9f613d857ad2d48ff57b310655"}, {"sha": "f1520ea0cfa2a96731475cea221cd9ab70cf5588", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1520ea0cfa2a96731475cea221cd9ab70cf5588", "html_url": "https://github.com/rust-lang/rust/commit/f1520ea0cfa2a96731475cea221cd9ab70cf5588"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "297da495799e7319d3f94d92bb96b68d3c233dd4", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470dbef29a3df65b6b7a7c7c46a28696eda1d031/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470dbef29a3df65b6b7a7c7c46a28696eda1d031/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=470dbef29a3df65b6b7a7c7c46a28696eda1d031", "patch": "@@ -55,7 +55,7 @@\n //! }\n //!\n //! // This function wants to log its parameter out prior to doing work with it.\n-//! fn do_work<T: Show>(value: &T) {\n+//! fn do_work<T: Show+'static>(value: &T) {\n //!     log(value);\n //!     // ...do some other work\n //! }"}, {"sha": "e2e3081eb2d16595f670f93cdc220124750c80bb", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/470dbef29a3df65b6b7a7c7c46a28696eda1d031/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470dbef29a3df65b6b7a7c7c46a28696eda1d031/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=470dbef29a3df65b6b7a7c7c46a28696eda1d031", "patch": "@@ -324,7 +324,8 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n \n fn check_bounds_on_type_parameters(cx: &mut Context, e: &Expr) {\n     let method_map = cx.tcx.method_map.borrow();\n-    let method = method_map.find(&typeck::MethodCall::expr(e.id));\n+    let method_call = typeck::MethodCall::expr(e.id);\n+    let method = method_map.find(&method_call);\n \n     // Find the values that were provided (if any)\n     let item_substs = cx.tcx.item_substs.borrow();\n@@ -393,6 +394,14 @@ fn check_bounds_on_type_parameters(cx: &mut Context, e: &Expr) {\n                type_param_def.space, type_param_def.index, ty.repr(cx.tcx));\n         check_typaram_bounds(cx, e.span, ty, type_param_def)\n     }\n+\n+    // Check the vtable.\n+    let vtable_map = cx.tcx.vtable_map.borrow();\n+    let vtable_res = match vtable_map.find(&method_call) {\n+        None => return,\n+        Some(vtable_res) => vtable_res,\n+    };\n+    check_type_parameter_bounds_in_vtable_result(cx, e.span, vtable_res);\n }\n \n fn check_type_parameter_bounds_in_vtable_result("}, {"sha": "a034e252d31dc4d0e51308614b67845d25eacef6", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/470dbef29a3df65b6b7a7c7c46a28696eda1d031/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470dbef29a3df65b6b7a7c7c46a28696eda1d031/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=470dbef29a3df65b6b7a7c7c46a28696eda1d031", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+}\n+\n+impl<T:Copy> Foo for T {\n+}\n+\n+fn take_param<T:Foo>(foo: &T) { }\n+\n+fn main() {\n+    let x = box 3i;\n+    take_param(&x);\n+    //~^ ERROR instantiating a type parameter with an incompatible type\n+}"}]}