{"sha": "7b973ba827076fcee194521b21a3b30caab41012", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOTczYmE4MjcwNzZmY2VlMTk0NTIxYjIxYTNiMzBjYWFiNDEwMTI=", "commit": {"author": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-04T20:48:12Z"}, "committer": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-06T11:03:46Z"}, "message": "Update to last version, remove \"[]\" as much as possible", "tree": {"sha": "3533b7aba112b9c40f3b1c3ff768af6ba799f65a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3533b7aba112b9c40f3b1c3ff768af6ba799f65a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b973ba827076fcee194521b21a3b30caab41012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b973ba827076fcee194521b21a3b30caab41012", "html_url": "https://github.com/rust-lang/rust/commit/7b973ba827076fcee194521b21a3b30caab41012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b973ba827076fcee194521b21a3b30caab41012/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93fe5c82bfc58019cd799d9ceca8e22b380cfa60", "url": "https://api.github.com/repos/rust-lang/rust/commits/93fe5c82bfc58019cd799d9ceca8e22b380cfa60", "html_url": "https://github.com/rust-lang/rust/commit/93fe5c82bfc58019cd799d9ceca8e22b380cfa60"}], "stats": {"total": 229, "additions": 114, "deletions": 115}, "files": [{"sha": "44e40ee297f989f6c9ba696c468dc65cf178b452", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -801,10 +801,10 @@ impl LintPass for UnusedResults {\n                         None => {}\n                         Some(s) => {\n                             msg.push_str(\": \");\n-                            msg.push_str(&s[]);\n+                            msg.push_str(&s);\n                         }\n                     }\n-                    cx.span_lint(UNUSED_MUST_USE, sp, &msg[]);\n+                    cx.span_lint(UNUSED_MUST_USE, sp, &msg);\n                     return true;\n                 }\n             }\n@@ -844,7 +844,7 @@ impl NonCamelCaseTypes {\n         let s = token::get_ident(ident);\n \n         if !is_camel_case(ident) {\n-            let c = to_camel_case(&s[]);\n+            let c = to_camel_case(&s);\n             let m = if c.is_empty() {\n                 format!(\"{} `{}` should have a camel case name such as `CamelCase`\", sort, s)\n             } else {\n@@ -996,7 +996,7 @@ impl NonSnakeCase {\n         let s = token::get_ident(ident);\n \n         if !is_snake_case(ident) {\n-            let sc = NonSnakeCase::to_snake_case(&s[]);\n+            let sc = NonSnakeCase::to_snake_case(&s);\n             if sc != &s[] {\n                 cx.span_lint(NON_SNAKE_CASE, span,\n                     &*format!(\"{} `{}` should have a snake case name such as `{}`\",\n@@ -1078,7 +1078,7 @@ impl NonUpperCaseGlobals {\n         let s = token::get_ident(ident);\n \n         if s.chars().any(|c| c.is_lowercase()) {\n-            let uc: String = NonSnakeCase::to_snake_case(&s[]).chars()\n+            let uc: String = NonSnakeCase::to_snake_case(&s).chars()\n                                            .map(|c| c.to_uppercase()).collect();\n             if uc != &s[] {\n                 cx.span_lint(NON_UPPER_CASE_GLOBALS, span,\n@@ -1241,7 +1241,7 @@ impl LintPass for UnusedImportBraces {\n                             match items[0].node {\n                                 ast::PathListIdent {ref name, ..} => {\n                                     let m = format!(\"braces around {} is unnecessary\",\n-                                                    &token::get_ident(*name)[]);\n+                                                    &token::get_ident(*name));\n                                     cx.span_lint(UNUSED_IMPORT_BRACES, item.span,\n                                                  &m[]);\n                                 },"}, {"sha": "18628f6903f5deabb57a3e446b5bbdc4ec0610cb", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -341,7 +341,7 @@ pub fn gather_attrs(attrs: &[ast::Attribute])\n                     -> Vec<Result<(InternedString, Level, Span), Span>> {\n     let mut out = vec!();\n     for attr in attrs {\n-        let level = match Level::from_str(&attr.name()[]) {\n+        let level = match Level::from_str(&attr.name()) {\n             None => continue,\n             Some(lvl) => lvl,\n         };\n@@ -499,7 +499,7 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n                     continue;\n                 }\n                 Ok((lint_name, level, span)) => {\n-                    match self.lints.find_lint(&lint_name[], &self.tcx.sess, Some(span)) {\n+                    match self.lints.find_lint(&lint_name, &self.tcx.sess, Some(span)) {\n                         Some(lint_id) => vec![(lint_id, level, span)],\n                         None => {\n                             match self.lints.lint_groups.get(&lint_name[]) {"}, {"sha": "d15c902c7e1e3921840012713b7b81abe76e7727", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -170,7 +170,7 @@ impl<'a> CrateReader<'a> {\n     fn process_crate(&self, c: &ast::Crate) {\n         for a in c.attrs.iter().filter(|m| m.name() == \"link_args\") {\n             match a.value_str() {\n-                Some(ref linkarg) => self.sess.cstore.add_used_link_args(&linkarg[]),\n+                Some(ref linkarg) => self.sess.cstore.add_used_link_args(&linkarg),\n                 None => { /* fallthrough */ }\n             }\n         }\n@@ -237,7 +237,7 @@ impl<'a> CrateReader<'a> {\n                     .collect::<Vec<&ast::Attribute>>();\n                 for m in &link_args {\n                     match m.value_str() {\n-                        Some(linkarg) => self.sess.cstore.add_used_link_args(&linkarg[]),\n+                        Some(linkarg) => self.sess.cstore.add_used_link_args(&linkarg),\n                         None => { /* fallthrough */ }\n                     }\n                 }"}, {"sha": "37055f851b41ae743d2b145421f1469601ad2012", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -86,7 +86,7 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n }\n \n fn encode_name(rbml_w: &mut Encoder, name: ast::Name) {\n-    rbml_w.wr_tagged_str(tag_paths_data_name, &token::get_name(name)[]);\n+    rbml_w.wr_tagged_str(tag_paths_data_name, &token::get_name(name));\n }\n \n fn encode_impl_type_basename(rbml_w: &mut Encoder, name: ast::Ident) {\n@@ -372,7 +372,7 @@ fn encode_path<PI: Iterator<Item=PathElem>>(rbml_w: &mut Encoder, path: PI) {\n             ast_map::PathMod(_) => tag_path_elem_mod,\n             ast_map::PathName(_) => tag_path_elem_name\n         };\n-        rbml_w.wr_tagged_str(tag, &token::get_name(pe.name())[]);\n+        rbml_w.wr_tagged_str(tag, &token::get_name(pe.name()));\n     }\n     rbml_w.end_tag();\n }\n@@ -1695,7 +1695,7 @@ fn encode_paren_sugar(rbml_w: &mut Encoder, paren_sugar: bool) {\n fn encode_associated_type_names(rbml_w: &mut Encoder, names: &[ast::Name]) {\n     rbml_w.start_tag(tag_associated_type_names);\n     for &name in names {\n-        rbml_w.wr_tagged_str(tag_associated_type_name, &token::get_name(name)[]);\n+        rbml_w.wr_tagged_str(tag_associated_type_name, &token::get_name(name));\n     }\n     rbml_w.end_tag();\n }"}, {"sha": "dda34426bfc45b66225b35e88d6e8856815dd50c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -249,11 +249,11 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n                             span_warn!(cx.tcx.sess, p.span, E0170,\n                                 \"pattern binding `{}` is named the same as one \\\n                                  of the variants of the type `{}`\",\n-                                &token::get_ident(ident.node)[], ty_to_string(cx.tcx, pat_ty));\n+                                &token::get_ident(ident.node), ty_to_string(cx.tcx, pat_ty));\n                             span_help!(cx.tcx.sess, p.span,\n                                 \"if you meant to match on a variant, \\\n                                  consider making the path in the pattern qualified: `{}::{}`\",\n-                                ty_to_string(cx.tcx, pat_ty), &token::get_ident(ident.node)[]);\n+                                ty_to_string(cx.tcx, pat_ty), &token::get_ident(ident.node));\n                         }\n                     }\n                 }"}, {"sha": "1b513a13588c9360bf2d628cc73c0c0598c79842", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -1439,7 +1439,7 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             infer::BoundRegionInCoherence(name) => {\n                 format!(\" for lifetime parameter `{}` in coherence check\",\n-                        &token::get_name(name)[])\n+                        &token::get_name(name))\n             }\n             infer::UpvarRegion(ref upvar_id, _) => {\n                 format!(\" for capture of `{}` by closure\","}, {"sha": "e817573b89cc74f38c900c8d8454bf11c59450e6", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -239,12 +239,12 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 if !self.active_features.contains(feature) {\n                     let msg = match *reason {\n                         Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n-                                               &feature[], &r[]),\n-                        None => format!(\"use of unstable library feature '{}'\", &feature[])\n+                                               &feature, &r),\n+                        None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n \n                     emit_feature_warn(&self.tcx.sess.parse_sess.span_diagnostic,\n-                                      &feature[], span, &msg[]);\n+                                      &feature, span, &msg);\n                 }\n             }\n             Some(..) => {"}, {"sha": "2197cbeb85db4afb7ead1629b4cc500a468ea140", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -86,7 +86,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                               }).collect::<HashMap<String, String>>();\n                 generic_map.insert(\"Self\".to_string(),\n                                    trait_ref.self_ty().user_string(infcx.tcx));\n-                let parser = Parser::new(&istring[]);\n+                let parser = Parser::new(&istring);\n                 let mut errored = false;\n                 let err: String = parser.filter_map(|p| {\n                     match p {"}, {"sha": "ee3fd681a005223af9a6df5537ce566c1b99f1bc", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n         match lang_items::extract(&i.attrs) {\n             None => {}\n-            Some(lang_item) => self.register(&lang_item[], i.span),\n+            Some(lang_item) => self.register(&lang_item, i.span),\n         }\n         visit::walk_foreign_item(self, i)\n     }"}, {"sha": "c72b7fdf7ad4d63c04fbd526f62571365abc4bf1", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -277,7 +277,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         match ident {\n             Some(i) => {\n                 s.push(' ');\n-                s.push_str(&token::get_ident(i)[]);\n+                s.push_str(&token::get_ident(i));\n             }\n             _ => { }\n         }"}, {"sha": "3abb1b694e6ae85a735ce46f808a388e0b651095", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -907,7 +907,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         match loan_path.kind {\n             LpUpvar(ty::UpvarId{ var_id: id, closure_expr_id: _ }) |\n             LpVar(id) => {\n-                out.push_str(&ty::local_var_name_str(self.tcx, id)[]);\n+                out.push_str(&ty::local_var_name_str(self.tcx, id));\n             }\n \n             LpDowncast(ref lp_base, variant_def_id) => {\n@@ -924,7 +924,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 match fname {\n                     mc::NamedField(fname) => {\n                         out.push('.');\n-                        out.push_str(&token::get_name(fname)[]);\n+                        out.push_str(&token::get_name(fname));\n                     }\n                     mc::PositionalField(idx) => {\n                         out.push('.');"}, {"sha": "2f25f34a92ad07434340f8a6ab5b5fdaa85a910e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -1020,7 +1020,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         self.handle_external_def(def,\n                                                  def_visibility,\n                                                  &*child_name_bindings,\n-                                                 &token::get_name(name)[],\n+                                                 &token::get_name(name),\n                                                  name,\n                                                  root);\n                     }"}, {"sha": "a261599a70656877ab8bc01597956f520f599f4a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -1093,7 +1093,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             } else {\n                 result.push_str(\"::\")\n             }\n-            result.push_str(&token::get_name(*name)[]);\n+            result.push_str(&token::get_name(*name));\n         };\n         result\n     }\n@@ -1708,7 +1708,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         debug!(\"(resolving glob import) writing resolution `{}` in `{}` \\\n                to `{}`\",\n-               &token::get_name(name)[],\n+               &token::get_name(name),\n                self.module_to_string(&*containing_module),\n                self.module_to_string(module_));\n \n@@ -1725,7 +1725,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         let msg = format!(\"a {} named `{}` has already been imported \\\n                                            in this module\",\n                                           namespace_name,\n-                                          &token::get_name(name)[]);\n+                                          &token::get_name(name));\n                         span_err!(self.session, import_directive.span, E0251, \"{}\", msg);\n                     } else {\n                         let target = Target::new(containing_module.clone(),\n@@ -1757,7 +1757,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     name: Name,\n                                     namespace: Namespace) {\n         debug!(\"check_for_conflicting_import: {}; target exists: {}\",\n-               &token::get_name(name)[],\n+               &token::get_name(name),\n                target.is_some());\n \n         match *target {\n@@ -1768,7 +1768,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     TypeNS => \"type\",\n                                     ValueNS => \"value\",\n                                   },\n-                                  &token::get_name(name)[]);\n+                                  &token::get_name(name));\n                 span_err!(self.session, import_span, E0252, \"{}\", &msg[]);\n             }\n             Some(_) | None => {}\n@@ -1804,7 +1804,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     let msg = format!(\"import `{0}` conflicts with imported \\\n                                        crate in this module \\\n                                        (maybe you meant `use {0}::*`?)\",\n-                                      &token::get_name(name)[]);\n+                                      &token::get_name(name));\n                     span_err!(self.session, import_span, E0254, \"{}\", &msg[]);\n                 }\n                 Some(_) | None => {}\n@@ -1826,7 +1826,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if let Some(ref value) = *name_bindings.value_def.borrow() {\n                     let msg = format!(\"import `{}` conflicts with value \\\n                                        in this module\",\n-                                      &token::get_name(name)[]);\n+                                      &token::get_name(name));\n                     span_err!(self.session, import_span, E0255, \"{}\", &msg[]);\n                     if let Some(span) = value.value_span {\n                         self.session.span_note(span,\n@@ -1844,7 +1844,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         None => {\n                             let msg = format!(\"import `{}` conflicts with type in \\\n                                                this module\",\n-                                              &token::get_name(name)[]);\n+                                              &token::get_name(name));\n                             span_err!(self.session, import_span, E0256, \"{}\", &msg[]);\n                             if let Some(span) = ty.type_span {\n                                 self.session.span_note(span,\n@@ -1866,7 +1866,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 _ => {\n                                     let msg = format!(\"import `{}` conflicts with existing \\\n                                                        submodule\",\n-                                                      &token::get_name(name)[]);\n+                                                      &token::get_name(name));\n                                     span_err!(self.session, import_span, E0258, \"{}\", &msg[]);\n                                     if let Some(span) = ty.type_span {\n                                         self.session.span_note(span,\n@@ -1892,7 +1892,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 span_err!(self.session, span, E0259,\n                           \"an external crate named `{}` has already \\\n                                    been imported into this module\",\n-                                  &token::get_name(name)[]);\n+                                  &token::get_name(name));\n         }\n     }\n \n@@ -1906,7 +1906,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                           \"the name `{}` conflicts with an external \\\n                                    crate that has been imported into this \\\n                                    module\",\n-                                  &token::get_name(name)[]);\n+                                  &token::get_name(name));\n         }\n     }\n \n@@ -2417,7 +2417,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                               allow_private_imports: bool)\n                               -> ResolveResult<(Target, bool)> {\n         debug!(\"(resolving name in module) resolving `{}` in `{}`\",\n-               &token::get_name(name)[],\n+               &token::get_name(name),\n                self.module_to_string(&*module_));\n \n         // First, check the direct children of the module.\n@@ -2493,7 +2493,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         // We're out of luck.\n         debug!(\"(resolving name in module) failed to resolve `{}`\",\n-               &token::get_name(name)[]);\n+               &token::get_name(name));\n         return Failed(None);\n     }\n \n@@ -4372,7 +4372,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         let mut smallest = 0;\n         for (i, other) in maybes.iter().enumerate() {\n-            values[i] = lev_distance(name, &other[]);\n+            values[i] = lev_distance(name, &other);\n \n             if values[i] <= values[smallest] {\n                 smallest = i;"}, {"sha": "9f26e9182ab1e5d04e820dd4fa9bfba46f71ce46", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -293,7 +293,7 @@ pub fn mangle<PI: Iterator<Item=PathElem>>(path: PI,\n \n     // First, connect each component with <len, name> pairs.\n     for e in path {\n-        push(&mut n, &token::get_name(e.name())[])\n+        push(&mut n, &token::get_name(e.name()))\n     }\n \n     match hash {"}, {"sha": "e80564097df2302148bb4c390567652504354cdd", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -355,7 +355,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             },\n         };\n \n-        let qualname = format!(\"{}::{}\", qualname, &get_ident(method.pe_ident())[]);\n+        let qualname = format!(\"{}::{}\", qualname, &get_ident(method.pe_ident()));\n         let qualname = &qualname[];\n \n         // record the decl for this def (if it has one)\n@@ -525,7 +525,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         self.fmt.static_str(item.span,\n                             sub_span,\n                             item.id,\n-                            &get_ident(item.ident)[],\n+                            &get_ident(item.ident),\n                             &qualname[],\n                             &value[],\n                             &ty_to_string(&*typ)[],\n@@ -548,7 +548,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         self.fmt.static_str(item.span,\n                             sub_span,\n                             item.id,\n-                            &get_ident(item.ident)[],\n+                            &get_ident(item.ident),\n                             &qualname[],\n                             \"\",\n                             &ty_to_string(&*typ)[],\n@@ -607,7 +607,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         }\n         for variant in &enum_definition.variants {\n             let name = get_ident(variant.node.name);\n-            let name = &name[];\n+            let name = &name;\n             let mut qualname = enum_name.clone();\n             qualname.push_str(\"::\");\n             qualname.push_str(name);\n@@ -1094,7 +1094,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                                                sub_span,\n                                                item.id,\n                                                mod_id,\n-                                               &get_ident(ident)[],\n+                                               &get_ident(ident),\n                                                self.cur_scope);\n                         self.write_sub_paths_truncated(path, true);\n                     }\n@@ -1149,7 +1149,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n             }\n             ast::ItemExternCrate(ref s) => {\n                 let name = get_ident(item.ident);\n-                let name = &name[];\n+                let name = &name;\n                 let location = match *s {\n                     Some((ref s, _)) => s.to_string(),\n                     None => name.to_string(),\n@@ -1259,7 +1259,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                     },\n                 };\n \n-                qualname.push_str(&get_ident(method_type.ident)[]);\n+                qualname.push_str(&get_ident(method_type.ident));\n                 let qualname = &qualname[];\n \n                 let sub_span = self.span.sub_span_after_keyword(method_type.span, keywords::Fn);"}, {"sha": "e419be65fc4cc33f1a141aff8bf5e2dbf775d8c1", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -83,7 +83,7 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n                                      .connect(\",\");\n \n     let mut clobbers = ia.clobbers.iter()\n-                                  .map(|s| format!(\"~{{{}}}\", &s[]))\n+                                  .map(|s| format!(\"~{{{}}}\", &s))\n                                   .collect::<Vec<String>>()\n                                   .connect(\",\");\n     let more_clobbers = get_clobbers();"}, {"sha": "6a97d393ba8fc3850e3b7063e94c5e99c31370fb", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -2248,7 +2248,7 @@ pub fn update_linkage(ccx: &CrateContext,\n         let item = ccx.tcx().map.get(id);\n         if let ast_map::NodeItem(i) = item {\n             if let Some(name) = attr::first_attr_value_str_by_name(&i.attrs, \"linkage\") {\n-                if let Some(linkage) = llvm_linkage_by_name(&name[]) {\n+                if let Some(linkage) = llvm_linkage_by_name(&name) {\n                     llvm::SetLinkage(llval, linkage);\n                 } else {\n                     ccx.sess().span_fatal(i.span, \"invalid linkage specified\");\n@@ -2824,9 +2824,9 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n             match attr::first_attr_value_str_by_name(&i.attrs[],\n                                                      \"link_section\") {\n                 Some(sect) => {\n-                    if contains_null(&sect[]) {\n+                    if contains_null(&sect) {\n                         ccx.sess().fatal(&format!(\"Illegal null byte in link_section value: `{}`\",\n-                                                 &sect[])[]);\n+                                                 &sect)[]);\n                     }\n                     unsafe {\n                         let buf = CString::from_slice(sect.as_bytes());\n@@ -2869,7 +2869,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     let abi = ccx.tcx().map.get_foreign_abi(id);\n                     let ty = ty::node_id_to_type(ccx.tcx(), ni.id);\n                     let name = foreign::link_name(&*ni);\n-                    foreign::register_foreign_item_fn(ccx, abi, ty, &name[])\n+                    foreign::register_foreign_item_fn(ccx, abi, ty, &name)\n                 }\n                 ast::ForeignItemStatic(..) => {\n                     foreign::register_static(ccx, &*ni)"}, {"sha": "15fa566d5484c7db4850d30dbd6dcd0d54bb5410", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -58,13 +58,13 @@ pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: &ast::Lit)\n             }\n         }\n         ast::LitFloat(ref fs, t) => {\n-            C_floating(&fs[], Type::float_from_ty(cx, t))\n+            C_floating(&fs, Type::float_from_ty(cx, t))\n         }\n         ast::LitFloatUnsuffixed(ref fs) => {\n             let lit_float_ty = ty::node_id_to_type(cx.tcx(), e.id);\n             match lit_float_ty.sty {\n                 ty::ty_float(t) => {\n-                    C_floating(&fs[], Type::float_from_ty(cx, t))\n+                    C_floating(&fs, Type::float_from_ty(cx, t))\n                 }\n                 _ => {\n                     cx.sess().span_bug(lit.span,"}, {"sha": "c57afcf2adac4dbaf2cb28b5607a54658ff68cd4", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -1350,7 +1350,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     // Get_template_parameters() will append a `<...>` clause to the function\n     // name if necessary.\n-    let mut function_name = String::from_str(&token::get_ident(ident)[]);\n+    let mut function_name = String::from_str(&token::get_ident(ident));\n     let template_parameters = get_template_parameters(cx,\n                                                       generics,\n                                                       param_substs,\n@@ -2237,13 +2237,13 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                                                       .get_unique_type_id_of_enum_variant(\n                                                           cx,\n                                                           self.enum_type,\n-                                                          &non_null_variant_name[]);\n+                                                          &non_null_variant_name);\n \n                 // Now we can create the metadata of the artificial struct\n                 let artificial_struct_metadata =\n                     composite_type_metadata(cx,\n                                             artificial_struct_llvm_type,\n-                                            &non_null_variant_name[],\n+                                            &non_null_variant_name,\n                                             unique_type_id,\n                                             &[sole_struct_member_description],\n                                             self.containing_scope,\n@@ -2373,7 +2373,7 @@ fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     // Could do some consistency checks here: size, align, field count, discr type\n \n     let variant_name = token::get_name(variant_info.name);\n-    let variant_name = &variant_name[];\n+    let variant_name = &variant_name;\n     let unique_type_id = debug_context(cx).type_map\n                                           .borrow_mut()\n                                           .get_unique_type_id_of_enum_variant(\n@@ -3847,7 +3847,7 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 let mut path_element_count = 0;\n                 for path_element in path {\n                     let name = token::get_name(path_element.name());\n-                    output.push_str(&name[]);\n+                    output.push_str(&name);\n                     output.push_str(\"::\");\n                     path_element_count += 1;\n                 }\n@@ -3862,7 +3862,7 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 let name = token::get_name(path.last()\n                                                .expect(\"debuginfo: Empty item path?\")\n                                                .name());\n-                output.push_str(&name[]);\n+                output.push_str(&name);\n             }\n         });\n     }\n@@ -3913,7 +3913,7 @@ impl NamespaceTreeNode {\n             }\n             let string = token::get_name(node.name);\n             output.push_str(&format!(\"{}\", string.len())[]);\n-            output.push_str(&string[]);\n+            output.push_str(&string);\n         }\n \n         let mut name = String::from_str(\"_ZN\");"}, {"sha": "80b27a8b9859f4c85f4a961b459d23b09fe6db2e", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -118,7 +118,7 @@ pub fn register_static(ccx: &CrateContext,\n         // static and call it a day. Some linkages (like weak) will make it such\n         // that the static actually has a null value.\n         Some(name) => {\n-            let linkage = match llvm_linkage_by_name(&name[]) {\n+            let linkage = match llvm_linkage_by_name(&name) {\n                 Some(linkage) => linkage,\n                 None => {\n                     ccx.sess().span_fatal(foreign_item.span,\n@@ -146,7 +146,7 @@ pub fn register_static(ccx: &CrateContext,\n                 // `extern_with_linkage_foo` will instead be initialized to\n                 // zero.\n                 let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n-                real_name.push_str(&ident[]);\n+                real_name.push_str(&ident);\n                 let real_name = CString::from_vec(real_name.into_bytes());\n                 let g2 = llvm::LLVMAddGlobal(ccx.llmod(), llty.to_ref(),\n                                              real_name.as_ptr());\n@@ -468,7 +468,7 @@ pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &ast::ForeignMod) {\n                     }\n \n                     register_foreign_item_fn(ccx, abi, ty,\n-                                             &lname[]);\n+                                             &lname);\n                     // Unlike for other items, we shouldn't call\n                     // `base::update_linkage` here.  Foreign items have\n                     // special linkage requirements, which are handled"}, {"sha": "60771d126b51bc1274778fc9a39d7a632c7f19ef", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -1164,8 +1164,7 @@ pub fn ast_ty_to_ty<'tcx>(\n                                                       path.segments\n                                                           .last()\n                                                           .unwrap()\n-                                                          .identifier)\n-                                                  []);\n+                                                          .identifier));\n                         this.tcx().types.err\n                     }\n                     def::DefAssociatedPath(provenance, assoc_ident) => {"}, {"sha": "9c0d6f7dae386c48de85dc3c8e9d325661121d6c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -805,7 +805,7 @@ fn check_trait_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         a.check_name(\"rustc_on_unimplemented\")\n     }) {\n         if let Some(ref istring) = attr.value_str() {\n-            let parser = Parser::new(&istring[]);\n+            let parser = Parser::new(&istring);\n             let types = &*generics.ty_params;\n             for token in parser {\n                 match token {\n@@ -3104,7 +3104,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                  tcx : &ty::ctxt<'tcx>,\n                                  skip : Vec<&str>) {\n         let ident = token::get_ident(field.node);\n-        let name = &ident[];\n+        let name = &ident;\n         // only find fits with at least one matching letter\n         let mut best_dist = name.len();\n         let fields = ty::lookup_struct_fields(tcx, id);\n@@ -3286,7 +3286,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                     let (_, seen) = class_field_map[name];\n                     if !seen {\n                         missing_fields.push(\n-                            format!(\"`{}`\", &token::get_name(name)[]))\n+                            format!(\"`{}`\", &token::get_name(name)))\n                     }\n                 }\n "}, {"sha": "7e1bf7a2230b892261f6fe520cf8fc2b5a84879e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -118,7 +118,7 @@ impl fmt::Debug for Name {\n \n impl fmt::Display for Name {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&token::get_name(*self)[], f)\n+        fmt::Display::fmt(&token::get_name(*self), f)\n     }\n }\n \n@@ -174,7 +174,7 @@ impl Name {\n     pub fn as_str<'a>(&'a self) -> &'a str {\n         unsafe {\n             // FIXME #12938: can't use copy_lifetime since &str isn't a &T\n-            ::std::mem::transmute::<&str,&str>(&token::get_name(*self)[])\n+            ::std::mem::transmute::<&str,&str>(&token::get_name(*self))\n         }\n     }\n \n@@ -193,7 +193,7 @@ pub type Mrk = u32;\n \n impl Encodable for Ident {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(&token::get_ident(*self)[])\n+        s.emit_str(&token::get_ident(*self))\n     }\n }\n "}, {"sha": "a3afe5780d0d509cf7109e2b4e20bb56f2cf2215", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -142,7 +142,7 @@ impl AttributeMethods for Attribute {\n             let meta = mk_name_value_item_str(\n                 InternedString::new(\"doc\"),\n                 token::intern_and_get_ident(&strip_doc_comment_decoration(\n-                        &comment[])[]));\n+                        &comment)[]));\n             if self.node.style == ast::AttrOuter {\n                 f(&mk_attr_outer(self.node.id, meta))\n             } else {\n@@ -209,7 +209,7 @@ pub fn mk_attr_outer(id: AttrId, item: P<MetaItem>) -> Attribute {\n pub fn mk_sugared_doc_attr(id: AttrId, text: InternedString, lo: BytePos,\n                            hi: BytePos)\n                            -> Attribute {\n-    let style = doc_comment_style(&text[]);\n+    let style = doc_comment_style(&text);\n     let lit = spanned(lo, hi, ast::LitStr(text, ast::CookedStr));\n     let attr = Attribute_ {\n         id: id,\n@@ -525,7 +525,7 @@ pub fn find_repr_attrs(diagnostic: &SpanHandler, attr: &Attribute) -> Vec<ReprAt\n                             // Can't use \"extern\" because it's not a lexical identifier.\n                             \"C\" => Some(ReprExtern),\n                             \"packed\" => Some(ReprPacked),\n-                            _ => match int_type_of_word(&word[]) {\n+                            _ => match int_type_of_word(&word) {\n                                 Some(ity) => Some(ReprInt(item.span, ity)),\n                                 None => {\n                                     // Not a word we recognize"}, {"sha": "833a6d52acb9798ef77c766aa69ee65535b298e6", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -58,7 +58,7 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n         match diagnostics.insert(code.name, span) {\n             Some(previous_span) => {\n                 ecx.span_warn(span, &format!(\n-                    \"diagnostic code {} already used\", &token::get_ident(code)[]\n+                    \"diagnostic code {} already used\", &token::get_ident(code)\n                 )[]);\n                 ecx.span_note(previous_span, \"previous invocation\");\n             },\n@@ -69,7 +69,7 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n     with_registered_diagnostics(|diagnostics| {\n         if !diagnostics.contains_key(&code.name) {\n             ecx.span_err(span, &format!(\n-                \"used diagnostic code {} not registered\", &token::get_ident(code)[]\n+                \"used diagnostic code {} not registered\", &token::get_ident(code)\n             )[]);\n         }\n     });\n@@ -94,12 +94,12 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     with_registered_diagnostics(|diagnostics| {\n         if diagnostics.insert(code.name, description).is_some() {\n             ecx.span_err(span, &format!(\n-                \"diagnostic code {} already registered\", &token::get_ident(*code)[]\n+                \"diagnostic code {} already registered\", &token::get_ident(*code)\n             )[]);\n         }\n     });\n     let sym = Ident::new(token::gensym(&(\n-        \"__register_diagnostic_\".to_string() + &token::get_ident(*code)[]\n+        \"__register_diagnostic_\".to_string() + &token::get_ident(*code)\n     )[]));\n     MacItems::new(vec![quote_item!(ecx, mod $sym {}).unwrap()].into_iter())\n }"}, {"sha": "1ceda2e08dd8219663623d3457689c5ea71114b5", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -213,7 +213,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     MacExpr::new(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprInlineAsm(ast::InlineAsm {\n-            asm: token::intern_and_get_ident(&asm[]),\n+            asm: token::intern_and_get_ident(&asm),\n             asm_str_style: asm_str_style.unwrap(),\n             outputs: outputs,\n             inputs: inputs,"}, {"sha": "80d128959eaf3a652632f6748fdddb330a68a4cb", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -32,7 +32,7 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                     ast::LitStr(ref s, _) |\n                     ast::LitFloat(ref s, _) |\n                     ast::LitFloatUnsuffixed(ref s) => {\n-                        accumulator.push_str(&s[]);\n+                        accumulator.push_str(&s);\n                     }\n                     ast::LitChar(c) => {\n                         accumulator.push(c);"}, {"sha": "364cacd735cc73386c45e4ea0e540f277914f795", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -31,7 +31,7 @@ pub fn expand_syntax_ext<'cx>(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]\n         } else {\n             match *e {\n                 ast::TtToken(_, token::Ident(ident, _)) => {\n-                    res_str.push_str(&token::get_ident(ident)[])\n+                    res_str.push_str(&token::get_ident(ident))\n                 },\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! requires ident args.\");"}, {"sha": "821fdeaa86a1fadc41f0cda6b3d1d9e93db3a823", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -72,7 +72,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n         }\n     };\n \n-    let mut format_string = String::from_str(&token::get_ident(name)[]);\n+    let mut format_string = String::from_str(&token::get_ident(name));\n     // the internal fields we're actually formatting\n     let mut exprs = Vec::new();\n \n@@ -107,7 +107,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n \n                     let name = token::get_ident(field.name.unwrap());\n                     format_string.push_str(\" \");\n-                    format_string.push_str(&name[]);\n+                    format_string.push_str(&name);\n                     format_string.push_str(\": {:?}\");\n \n                     exprs.push(field.self_.clone());"}, {"sha": "8f3c9177b9c7b2bb1807a922cbda09072092b2d3", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -102,12 +102,12 @@ pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n     }\n \n-    let e = match os::getenv(&var[]) {\n+    let e = match os::getenv(&var) {\n         None => {\n-            cx.span_err(sp, &msg[]);\n+            cx.span_err(sp, &msg);\n             cx.expr_usize(sp, 0)\n         }\n-        Some(s) => cx.expr_str(sp, token::intern_and_get_ident(&s[]))\n+        Some(s) => cx.expr_str(sp, token::intern_and_get_ident(&s))\n     };\n     MacExpr::new(e)\n }"}, {"sha": "61aae4e98b4a46e775724485f4168b539e9792ba", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -375,7 +375,7 @@ fn expand_mac_invoc<T, F, G>(mac: ast::Mac, span: codemap::Span,\n                     fld.cx.span_err(\n                         pth.span,\n                         &format!(\"macro undefined: '{}!'\",\n-                                &extnamestr[])[]);\n+                                &extnamestr)[]);\n \n                     // let compilation continue\n                     None\n@@ -422,7 +422,7 @@ fn expand_mac_invoc<T, F, G>(mac: ast::Mac, span: codemap::Span,\n                         fld.cx.span_err(\n                             pth.span,\n                             &format!(\"'{}' is not a tt-style macro\",\n-                                    &extnamestr[])[]);\n+                                    &extnamestr)[]);\n                         None\n                     }\n                 }\n@@ -506,7 +506,7 @@ fn expand_item_modifiers(mut it: P<ast::Item>, fld: &mut MacroExpander)\n     for attr in &modifiers {\n         let mname = attr.name();\n \n-        match fld.cx.syntax_env.find(&intern(&mname[])) {\n+        match fld.cx.syntax_env.find(&intern(&mname)) {\n             Some(rc) => match *rc {\n                 Modifier(ref mac) => {\n                     attr::mark_used(attr);\n@@ -626,7 +626,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                     if it.ident.name == parse::token::special_idents::invalid.name {\n                         fld.cx.span_err(path_span,\n                                         &format!(\"macro {}! expects an ident argument\",\n-                                                &extnamestr[])[]);\n+                                                &extnamestr)[]);\n                         return SmallVector::zero();\n                     }\n                     fld.cx.bt_push(ExpnInfo {\n@@ -677,7 +677,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                 _ => {\n                     fld.cx.span_err(it.span,\n                                     &format!(\"{}! is not legal in item position\",\n-                                            &extnamestr[])[]);\n+                                            &extnamestr)[]);\n                     return SmallVector::zero();\n                 }\n             }\n@@ -696,7 +696,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n         None => {\n             fld.cx.span_err(path_span,\n                             &format!(\"non-item macro in item position: {}\",\n-                                    &extnamestr[])[]);\n+                                    &extnamestr)[]);\n             return SmallVector::zero();\n         }\n     };\n@@ -968,7 +968,7 @@ fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> {\n                                 pth.span,\n                                 &format!(\n                                     \"non-pattern macro in pattern position: {}\",\n-                                    &extnamestr[]\n+                                    &extnamestr\n                                     )[]\n                             );\n                             return DummyResult::raw_pat(span);\n@@ -981,7 +981,7 @@ fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> {\n                 _ => {\n                     fld.cx.span_err(span,\n                                     &format!(\"{}! is not legal in pattern position\",\n-                                            &extnamestr[])[]);\n+                                            &extnamestr)[]);\n                     return DummyResult::raw_pat(span);\n                 }\n             }\n@@ -1065,7 +1065,7 @@ fn expand_annotatable(a: Annotatable,\n     for attr in a.attrs() {\n         let mname = attr.name();\n \n-        match fld.cx.syntax_env.find(&intern(&mname[])) {\n+        match fld.cx.syntax_env.find(&intern(&mname)) {\n             Some(rc) => match *rc {\n                 Decorator(ref dec) => {\n                     let it = match a {\n@@ -1180,7 +1180,7 @@ fn modifiers(attrs: &Vec<ast::Attribute>,\n              fld: &MacroExpander)\n              -> (Vec<ast::Attribute>, Vec<ast::Attribute>) {\n     attrs.iter().cloned().partition(|attr| {\n-        match fld.cx.syntax_env.find(&intern(&attr.name()[])) {\n+        match fld.cx.syntax_env.find(&intern(&attr.name())) {\n             Some(rc) => match *rc {\n                 Modifier(_) => true,\n                 _ => false\n@@ -1195,7 +1195,7 @@ fn multi_modifiers(attrs: &[ast::Attribute],\n                    fld: &MacroExpander)\n                    -> (Vec<ast::Attribute>, Vec<ast::Attribute>) {\n     attrs.iter().cloned().partition(|attr| {\n-        match fld.cx.syntax_env.find(&intern(&attr.name()[])) {\n+        match fld.cx.syntax_env.find(&intern(&attr.name())) {\n             Some(rc) => match *rc {\n                 MultiModifier(_) => true,\n                 _ => false\n@@ -1220,7 +1220,7 @@ fn expand_item_multi_modifier(mut it: Annotatable,\n     for attr in &modifiers {\n         let mname = attr.name();\n \n-        match fld.cx.syntax_env.find(&intern(&mname[])) {\n+        match fld.cx.syntax_env.find(&intern(&mname)) {\n             Some(rc) => match *rc {\n                 MultiModifier(ref mac) => {\n                     attr::mark_used(attr);"}, {"sha": "96055e3635a60e43afe1be8504171e4200dcff42", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -673,7 +673,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         None => return DummyResult::raw_expr(sp)\n     };\n \n-    let mut parser = parse::Parser::new(&fmt[]);\n+    let mut parser = parse::Parser::new(&fmt);\n \n     loop {\n         match parser.next() {"}, {"sha": "d752e34c11253c149318013f13e1c02269a205f9", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -229,7 +229,7 @@ pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n                         p_s.span_diagnostic\n                            .span_fatal(sp,\n                                        &format!(\"duplicated bind name: {}\",\n-                                               &string[])[])\n+                                               &string)[])\n                     }\n                 }\n             }\n@@ -487,7 +487,7 @@ pub fn parse(sess: &ParseSess,\n                     let name_string = token::get_ident(name);\n                     let match_cur = ei.match_cur;\n                     (&mut ei.matches[match_cur]).push(Rc::new(MatchedNonterminal(\n-                        parse_nt(&mut rust_parser, span, &name_string[]))));\n+                        parse_nt(&mut rust_parser, span, &name_string))));\n                     ei.idx += 1us;\n                     ei.match_cur += 1;\n                   }"}, {"sha": "39bc7f6f5af538088147616ff4402f4d349840a9", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -639,7 +639,7 @@ impl BytesContainer for InternedString {\n         // of `BytesContainer`, which is itself a workaround for the lack of\n         // DST.\n         unsafe {\n-            let this = &self[];\n+            let this = &self;\n             mem::transmute::<&[u8],&[u8]>(this.container_as_bytes())\n         }\n     }"}, {"sha": "c177cd1fafa55985ef7d3218eedceacb7c20a051", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -1313,7 +1313,7 @@ impl<'a> State<'a> {\n         try!(self.hardbreak_if_not_bol());\n         try!(self.maybe_print_comment(attr.span.lo));\n         if attr.node.is_sugared_doc {\n-            word(&mut self.s, &attr.value_str().unwrap()[])\n+            word(&mut self.s, &attr.value_str().unwrap())\n         } else {\n             match attr.node.style {\n                 ast::AttrInner => try!(word(&mut self.s, \"#![\")),\n@@ -1847,7 +1847,7 @@ impl<'a> State<'a> {\n             ast::ExprInlineAsm(ref a) => {\n                 try!(word(&mut self.s, \"asm!\"));\n                 try!(self.popen());\n-                try!(self.print_string(&a.asm[], a.asm_str_style));\n+                try!(self.print_string(&a.asm, a.asm_str_style));\n                 try!(self.word_space(\":\"));\n \n                 try!(self.commasep(Inconsistent, &a.outputs[],\n@@ -1857,7 +1857,7 @@ impl<'a> State<'a> {\n                             try!(s.print_string(&format!(\"+{}\", operand)[],\n                                                 ast::CookedStr))\n                         }\n-                        _ => try!(s.print_string(&co[], ast::CookedStr))\n+                        _ => try!(s.print_string(&co, ast::CookedStr))\n                     }\n                     try!(s.popen());\n                     try!(s.print_expr(&**o));\n@@ -1869,7 +1869,7 @@ impl<'a> State<'a> {\n \n                 try!(self.commasep(Inconsistent, &a.inputs[],\n                                    |s, &(ref co, ref o)| {\n-                    try!(s.print_string(&co[], ast::CookedStr));\n+                    try!(s.print_string(&co, ast::CookedStr));\n                     try!(s.popen());\n                     try!(s.print_expr(&**o));\n                     try!(s.pclose());\n@@ -1880,7 +1880,7 @@ impl<'a> State<'a> {\n \n                 try!(self.commasep(Inconsistent, &a.clobbers[],\n                                    |s, co| {\n-                    try!(s.print_string(&co[], ast::CookedStr));\n+                    try!(s.print_string(&co, ast::CookedStr));\n                     Ok(())\n                 }));\n \n@@ -1954,7 +1954,7 @@ impl<'a> State<'a> {\n             let encoded = ident.encode_with_hygiene();\n             try!(word(&mut self.s, &encoded[]))\n         } else {\n-            try!(word(&mut self.s, &token::get_ident(ident)[]))\n+            try!(word(&mut self.s, &token::get_ident(ident)))\n         }\n         self.ann.post(self, NodeIdent(&ident))\n     }\n@@ -1964,7 +1964,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_name(&mut self, name: ast::Name) -> IoResult<()> {\n-        try!(word(&mut self.s, &token::get_name(name)[]));\n+        try!(word(&mut self.s, &token::get_name(name)));\n         self.ann.post(self, NodeName(&name))\n     }\n \n@@ -2532,15 +2532,15 @@ impl<'a> State<'a> {\n         try!(self.ibox(indent_unit));\n         match item.node {\n             ast::MetaWord(ref name) => {\n-                try!(word(&mut self.s, &name[]));\n+                try!(word(&mut self.s, &name));\n             }\n             ast::MetaNameValue(ref name, ref value) => {\n                 try!(self.word_space(&name[]));\n                 try!(self.word_space(\"=\"));\n                 try!(self.print_literal(value));\n             }\n             ast::MetaList(ref name, ref items) => {\n-                try!(word(&mut self.s, &name[]));\n+                try!(word(&mut self.s, &name));\n                 try!(self.popen());\n                 try!(self.commasep(Consistent,\n                                    &items[],\n@@ -2731,7 +2731,7 @@ impl<'a> State<'a> {\n             _ => ()\n         }\n         match lit.node {\n-            ast::LitStr(ref st, style) => self.print_string(&st[], style),\n+            ast::LitStr(ref st, style) => self.print_string(&st, style),\n             ast::LitByte(byte) => {\n                 let mut res = String::from_str(\"b'\");\n                 ascii::escape_default(byte, |c| res.push(c as char));\n@@ -2772,7 +2772,7 @@ impl<'a> State<'a> {\n                 word(&mut self.s,\n                      &format!(\n                          \"{}{}\",\n-                         &f[],\n+                         &f,\n                          &ast_util::float_ty_to_string(t)[])[])\n             }\n             ast::LitFloatUnsuffixed(ref f) => word(&mut self.s, &f[]),"}, {"sha": "1a8cb2b376aeb1e9fe73271f34b56c65022562eb", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b973ba827076fcee194521b21a3b30caab41012/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=7b973ba827076fcee194521b21a3b30caab41012", "patch": "@@ -512,7 +512,7 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n     });\n     let reexport = cx.reexport_test_harness_main.as_ref().map(|s| {\n         // building `use <ident> = __test::main`\n-        let reexport_ident = token::str_to_ident(&s[]);\n+        let reexport_ident = token::str_to_ident(&s);\n \n         let use_path =\n             nospan(ast::ViewPathSimple(reexport_ident,"}]}