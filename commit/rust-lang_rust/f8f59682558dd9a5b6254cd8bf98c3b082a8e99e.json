{"sha": "f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZjU5NjgyNTU4ZGQ5YTViNjI1NGNkOGJmOThjM2IwODJhOGU5OWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-25T23:24:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-25T23:24:14Z"}, "message": "Auto merge of #84564 - Dylan-DPC:rollup-wxa2yr0, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #84235 (refactor StyledBuffer)\n - #84450 (Give a better error when `std` or `core` are missing)\n - #84486 (Handle pretty printing of `else if let` clauses without ICEing)\n - #84499 (Tweak trait not `use`d suggestion)\n - #84516 (Add suggestion to \"use break\" when attempting to implicit-break a loop)\n - #84520 (Improve diagnostics for function passed when a type was expected.)\n - #84541 (Inline most raw socket, fd and handle conversions)\n - #84547 (Get rid of is_min_const_fn)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bb82f8154cc0eda993d682b982e3956e3e0a2d98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb82f8154cc0eda993d682b982e3956e3e0a2d98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "html_url": "https://github.com/rust-lang/rust/commit/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3709ae324c9daabbdabe048faa6fbedbeccf27ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3709ae324c9daabbdabe048faa6fbedbeccf27ec", "html_url": "https://github.com/rust-lang/rust/commit/3709ae324c9daabbdabe048faa6fbedbeccf27ec"}, {"sha": "000a630110d0691055330ba68527e8828ea458a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/000a630110d0691055330ba68527e8828ea458a8", "html_url": "https://github.com/rust-lang/rust/commit/000a630110d0691055330ba68527e8828ea458a8"}], "stats": {"total": 820, "additions": 623, "deletions": 197}, "files": [{"sha": "e262d95bb70f251bc4caf76bbaf7f823d9b5c084", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 55, "deletions": 35, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -1,39 +1,52 @@\n // Code for creating styled buffers\n \n use crate::snippet::{Style, StyledString};\n-use std::iter;\n \n #[derive(Debug)]\n pub struct StyledBuffer {\n-    text: Vec<Vec<char>>,\n-    styles: Vec<Vec<Style>>,\n+    lines: Vec<Vec<StyledChar>>,\n+}\n+\n+#[derive(Debug, Clone)]\n+struct StyledChar {\n+    chr: char,\n+    style: Style,\n+}\n+\n+impl StyledChar {\n+    const SPACE: Self = StyledChar::new(' ', Style::NoStyle);\n+\n+    const fn new(chr: char, style: Style) -> Self {\n+        StyledChar { chr, style }\n+    }\n }\n \n impl StyledBuffer {\n     pub fn new() -> StyledBuffer {\n-        StyledBuffer { text: vec![], styles: vec![] }\n+        StyledBuffer { lines: vec![] }\n     }\n \n+    /// Returns content of `StyledBuffer` splitted by lines and line styles\n     pub fn render(&self) -> Vec<Vec<StyledString>> {\n         // Tabs are assumed to have been replaced by spaces in calling code.\n-        debug_assert!(self.text.iter().all(|r| !r.contains(&'\\t')));\n+        debug_assert!(self.lines.iter().all(|r| !r.iter().any(|sc| sc.chr == '\\t')));\n \n         let mut output: Vec<Vec<StyledString>> = vec![];\n         let mut styled_vec: Vec<StyledString> = vec![];\n \n-        for (row, row_style) in iter::zip(&self.text, &self.styles) {\n+        for styled_line in &self.lines {\n             let mut current_style = Style::NoStyle;\n             let mut current_text = String::new();\n \n-            for (&c, &s) in iter::zip(row, row_style) {\n-                if s != current_style {\n+            for sc in styled_line {\n+                if sc.style != current_style {\n                     if !current_text.is_empty() {\n                         styled_vec.push(StyledString { text: current_text, style: current_style });\n                     }\n-                    current_style = s;\n+                    current_style = sc.style;\n                     current_text = String::new();\n                 }\n-                current_text.push(c);\n+                current_text.push(sc.chr);\n             }\n             if !current_text.is_empty() {\n                 styled_vec.push(StyledString { text: current_text, style: current_style });\n@@ -49,29 +62,25 @@ impl StyledBuffer {\n     }\n \n     fn ensure_lines(&mut self, line: usize) {\n-        while line >= self.text.len() {\n-            self.text.push(vec![]);\n-            self.styles.push(vec![]);\n+        if line >= self.lines.len() {\n+            self.lines.resize(line + 1, Vec::new());\n         }\n     }\n \n+    /// Sets `chr` with `style` for given `line`, `col`.\n+    /// If `line` does not exist in our buffer, adds empty lines up to the given\n+    /// and fills the last line with unstyled whitespace.\n     pub fn putc(&mut self, line: usize, col: usize, chr: char, style: Style) {\n         self.ensure_lines(line);\n-        if col < self.text[line].len() {\n-            self.text[line][col] = chr;\n-            self.styles[line][col] = style;\n-        } else {\n-            let mut i = self.text[line].len();\n-            while i < col {\n-                self.text[line].push(' ');\n-                self.styles[line].push(Style::NoStyle);\n-                i += 1;\n-            }\n-            self.text[line].push(chr);\n-            self.styles[line].push(style);\n+        if col >= self.lines[line].len() {\n+            self.lines[line].resize(col + 1, StyledChar::SPACE);\n         }\n+        self.lines[line][col] = StyledChar::new(chr, style);\n     }\n \n+    /// Sets `string` with `style` for given `line`, starting from `col`.\n+    /// If `line` does not exist in our buffer, adds empty lines up to the given\n+    /// and fills the last line with unstyled whitespace.\n     pub fn puts(&mut self, line: usize, col: usize, string: &str, style: Style) {\n         let mut n = col;\n         for c in string.chars() {\n@@ -80,32 +89,40 @@ impl StyledBuffer {\n         }\n     }\n \n+    /// For given `line` inserts `string` with `style` before old content of that line,\n+    /// adding lines if needed\n     pub fn prepend(&mut self, line: usize, string: &str, style: Style) {\n         self.ensure_lines(line);\n         let string_len = string.chars().count();\n \n-        // Push the old content over to make room for new content\n-        for _ in 0..string_len {\n-            self.styles[line].insert(0, Style::NoStyle);\n-            self.text[line].insert(0, ' ');\n+        if !self.lines[line].is_empty() {\n+            // Push the old content over to make room for new content\n+            for _ in 0..string_len {\n+                self.lines[line].insert(0, StyledChar::SPACE);\n+            }\n         }\n \n         self.puts(line, 0, string, style);\n     }\n \n+    /// For given `line` inserts `string` with `style` after old content of that line,\n+    /// adding lines if needed\n     pub fn append(&mut self, line: usize, string: &str, style: Style) {\n-        if line >= self.text.len() {\n+        if line >= self.lines.len() {\n             self.puts(line, 0, string, style);\n         } else {\n-            let col = self.text[line].len();\n+            let col = self.lines[line].len();\n             self.puts(line, col, string, style);\n         }\n     }\n \n     pub fn num_lines(&self) -> usize {\n-        self.text.len()\n+        self.lines.len()\n     }\n \n+    /// Set `style` for `line`, `col_start..col_end` range if:\n+    /// 1. That line and column range exist in `StyledBuffer`\n+    /// 2. `overwrite` is `true` or existing style is `Style::NoStyle` or `Style::Quotation`\n     pub fn set_style_range(\n         &mut self,\n         line: usize,\n@@ -119,10 +136,13 @@ impl StyledBuffer {\n         }\n     }\n \n+    /// Set `style` for `line`, `col` if:\n+    /// 1. That line and column exist in `StyledBuffer`\n+    /// 2. `overwrite` is `true` or existing style is `Style::NoStyle` or `Style::Quotation`\n     pub fn set_style(&mut self, line: usize, col: usize, style: Style, overwrite: bool) {\n-        if let Some(ref mut line) = self.styles.get_mut(line) {\n-            if let Some(s) = line.get_mut(col) {\n-                if *s == Style::NoStyle || *s == Style::Quotation || overwrite {\n+        if let Some(ref mut line) = self.lines.get_mut(line) {\n+            if let Some(StyledChar { style: s, .. }) = line.get_mut(col) {\n+                if overwrite || *s == Style::NoStyle || *s == Style::Quotation {\n                     *s = style;\n                 }\n             }"}, {"sha": "77d083fc5e967b4cae32fd111f2efdc40646c105", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -1095,8 +1095,8 @@ impl<'a> State<'a> {\n \n     fn print_else(&mut self, els: Option<&hir::Expr<'_>>) {\n         match els {\n-            Some(_else) => {\n-                match _else.kind {\n+            Some(else_) => {\n+                match else_.kind {\n                     // \"another else-if\"\n                     hir::ExprKind::If(ref i, ref then, ref e) => {\n                         self.cbox(INDENT_UNIT - 1);\n@@ -1114,6 +1114,26 @@ impl<'a> State<'a> {\n                         self.s.word(\" else \");\n                         self.print_block(&b)\n                     }\n+                    hir::ExprKind::Match(ref expr, arms, _) => {\n+                        // else if let desugared to match\n+                        assert!(arms.len() == 2, \"if let desugars to match with two arms\");\n+\n+                        self.s.word(\" else \");\n+                        self.s.word(\"{\");\n+\n+                        self.cbox(INDENT_UNIT);\n+                        self.ibox(INDENT_UNIT);\n+                        self.word_nbsp(\"match\");\n+                        self.print_expr_as_cond(&expr);\n+                        self.s.space();\n+                        self.bopen();\n+                        for arm in arms {\n+                            self.print_arm(arm);\n+                        }\n+                        self.bclose(expr.span);\n+\n+                        self.s.word(\"}\");\n+                    }\n                     // BLEAH, constraints would be great here\n                     _ => {\n                         panic!(\"print_if saw if with weird alternative\");"}, {"sha": "e9ae22f8cedbc47926fd0ed4aa39e9ae0469fa10", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -511,8 +511,11 @@ impl<'a> CrateLoader<'a> {\n         if dep.is_none() {\n             self.used_extern_options.insert(name);\n         }\n-        self.maybe_resolve_crate(name, dep_kind, dep)\n-            .unwrap_or_else(|err| err.report(self.sess, span))\n+        self.maybe_resolve_crate(name, dep_kind, dep).unwrap_or_else(|err| {\n+            let missing_core =\n+                self.maybe_resolve_crate(sym::core, CrateDepKind::Explicit, None).is_err();\n+            err.report(&self.sess, span, missing_core)\n+        })\n     }\n \n     fn maybe_resolve_crate<'b>("}, {"sha": "6e7360950908e9dbd164ff0c7f7ecfebb93f4b91", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -790,7 +790,8 @@ pub fn find_plugin_registrar(\n ) -> (PathBuf, CrateDisambiguator) {\n     match find_plugin_registrar_impl(sess, metadata_loader, name) {\n         Ok(res) => res,\n-        Err(err) => err.report(sess, span),\n+        // `core` is always available if we got as far as loading plugins.\n+        Err(err) => err.report(sess, span, false),\n     }\n }\n \n@@ -883,7 +884,7 @@ crate enum CrateError {\n }\n \n impl CrateError {\n-    crate fn report(self, sess: &Session, span: Span) -> ! {\n+    crate fn report(self, sess: &Session, span: Span, missing_core: bool) -> ! {\n         let mut err = match self {\n             CrateError::NonAsciiName(crate_name) => sess.struct_span_err(\n                 span,\n@@ -1068,7 +1069,37 @@ impl CrateError {\n                     if (crate_name == sym::std || crate_name == sym::core)\n                         && locator.triple != TargetTriple::from_triple(config::host_triple())\n                     {\n-                        err.note(&format!(\"the `{}` target may not be installed\", locator.triple));\n+                        if missing_core {\n+                            err.note(&format!(\n+                                \"the `{}` target may not be installed\",\n+                                locator.triple\n+                            ));\n+                        } else {\n+                            err.note(&format!(\n+                                \"the `{}` target may not support the standard library\",\n+                                locator.triple\n+                            ));\n+                        }\n+                        if missing_core && std::env::var(\"RUSTUP_HOME\").is_ok() {\n+                            err.help(&format!(\n+                                \"consider downloading the target with `rustup target add {}`\",\n+                                locator.triple\n+                            ));\n+                        }\n+                        // Suggest using #![no_std]. #[no_core] is unstable and not really supported anyway.\n+                        // NOTE: this is a dummy span if `extern crate std` was injected by the compiler.\n+                        // If it's not a dummy, that means someone added `extern crate std` explicitly and `#![no_std]` won't help.\n+                        if !missing_core && span.is_dummy() {\n+                            let current_crate =\n+                                sess.opts.crate_name.as_deref().unwrap_or(\"<unknown>\");\n+                            err.note(&format!(\n+                                \"`std` is required by `{}` because it does not declare `#![no_std]`\",\n+                                current_crate\n+                            ));\n+                        }\n+                        if sess.is_nightly_build() && std::env::var(\"CARGO\").is_ok() {\n+                            err.help(\"consider building the standard library from source with `cargo build -Zbuild-std`\");\n+                        }\n                     } else if crate_name == sym::profiler_builtins {\n                         err.note(&\"the compiler may have been built without the profiler runtime\");\n                     }"}, {"sha": "fdd874c6f68224064e486c8cfe8a3ee9c46f3907", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -19,10 +19,8 @@ use super::{Field, SourceInfo};\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationKind {\n-    /// Only permitted in regular `fn`s, prohibited in `const fn`s.\n+    /// Unsafe operation outside `unsafe`.\n     General,\n-    /// Permitted both in `const fn`s and regular `fn`s.\n-    GeneralAndConstFn,\n     /// Unsafe operation in an `unsafe fn` but outside an `unsafe` block.\n     /// Has to be handled as a lint for backwards compatibility.\n     UnsafeFn,"}, {"sha": "40419a4d201ac0b198ab799ebf509a020ea23b7e", "filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -1,4 +1,3 @@\n-use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n@@ -34,54 +33,6 @@ pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     }\n }\n \n-/// Returns `true` if this function must conform to `min_const_fn`\n-pub fn is_min_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    // Bail out if the signature doesn't contain `const`\n-    if !tcx.is_const_fn_raw(def_id) {\n-        return false;\n-    }\n-\n-    if tcx.features().staged_api {\n-        // In order for a libstd function to be considered min_const_fn\n-        // it needs to be stable and have no `rustc_const_unstable` attribute.\n-        match tcx.lookup_const_stability(def_id) {\n-            // `rustc_const_unstable` functions don't need to conform.\n-            Some(&attr::ConstStability { ref level, .. }) if level.is_unstable() => false,\n-            None => {\n-                if let Some(stab) = tcx.lookup_stability(def_id) {\n-                    if stab.level.is_stable() {\n-                        tcx.sess.delay_span_bug(\n-                            tcx.def_span(def_id),\n-                            \"stable const functions must have either `rustc_const_stable` or \\\n-                             `rustc_const_unstable` attribute\",\n-                        );\n-                        // While we errored above, because we don't know if we need to conform, we\n-                        // err on the \"safe\" side and require min_const_fn.\n-                        true\n-                    } else {\n-                        // Unstable functions need not conform to min_const_fn.\n-                        false\n-                    }\n-                } else {\n-                    // Internal functions are forced to conform to min_const_fn.\n-                    // Annotate the internal function with a const stability attribute if\n-                    // you need to use unstable features.\n-                    // Note: this is an arbitrary choice that does not affect stability or const\n-                    // safety or anything, it just changes whether we need to annotate some\n-                    // internal functions with `rustc_const_stable` or with `rustc_const_unstable`\n-                    true\n-                }\n-            }\n-            // Everything else needs to conform, because it would be callable from\n-            // other `min_const_fn` functions.\n-            _ => true,\n-        }\n-    } else {\n-        // users enabling the `const_fn` feature gate can do what they want\n-        !tcx.features().const_fn\n-    }\n-}\n-\n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     let parent_id = tcx.hir().get_parent_did(hir_id);\n     if !parent_id.is_top_level_module() { is_const_impl_raw(tcx, parent_id) } else { false }"}, {"sha": "955be8cc81e18285502b650f541130e7db5375b6", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 17, "deletions": 50, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -15,13 +15,10 @@ use rustc_session::lint::Level;\n \n use std::ops::Bound;\n \n-use crate::const_eval::is_min_const_fn;\n-\n pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     body_did: LocalDefId,\n     const_context: bool,\n-    min_const_fn: bool,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'tcx>,\n@@ -34,21 +31,15 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(\n         const_context: bool,\n-        min_const_fn: bool,\n         body: &'a Body<'tcx>,\n         body_did: LocalDefId,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n-        // sanity check\n-        if min_const_fn {\n-            assert!(const_context);\n-        }\n         Self {\n             body,\n             body_did,\n             const_context,\n-            min_const_fn,\n             violations: vec![],\n             source_info: SourceInfo::outermost(body.span),\n             tcx,\n@@ -84,7 +75,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let sig = func_ty.fn_sig(self.tcx);\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\n-                        UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationKind::General,\n                         UnsafetyViolationDetails::CallToUnsafeFunction,\n                     )\n                 }\n@@ -134,7 +125,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     match self.tcx.layout_scalar_valid_range(def.did) {\n                         (Bound::Unbounded, Bound::Unbounded) => {}\n                         _ => self.require_unsafe(\n-                            UnsafetyViolationKind::GeneralAndConstFn,\n+                            UnsafetyViolationKind::General,\n                             UnsafetyViolationDetails::InitializingTypeWith,\n                         ),\n                     }\n@@ -213,7 +204,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let base_ty = base.ty(self.body, self.tcx).ty;\n                 if base_ty.is_unsafe_ptr() {\n                     self.require_unsafe(\n-                        UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationKind::General,\n                         UnsafetyViolationDetails::DerefOfRawPointer,\n                     )\n                 }\n@@ -258,15 +249,15 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         );\n                     if !nodrop {\n                         self.require_unsafe(\n-                            UnsafetyViolationKind::GeneralAndConstFn,\n+                            UnsafetyViolationKind::General,\n                             UnsafetyViolationDetails::AssignToDroppingUnionField,\n                         );\n                     } else {\n                         // write to non-drop union field, safe\n                     }\n                 } else {\n                     self.require_unsafe(\n-                        UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationKind::General,\n                         UnsafetyViolationDetails::AccessToUnionField,\n                     )\n                 }\n@@ -277,6 +268,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn require_unsafe(&mut self, kind: UnsafetyViolationKind, details: UnsafetyViolationDetails) {\n+        // Violations can turn out to be `UnsafeFn` during analysis, but they should not start out as such.\n+        assert_ne!(kind, UnsafetyViolationKind::UnsafeFn);\n+\n         let source_info = self.source_info;\n         let lint_root = self.body.source_scopes[self.source_info.scope]\n             .local_data\n@@ -304,8 +298,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             Safety::Safe => {\n                 for violation in violations {\n                     match violation.kind {\n-                        UnsafetyViolationKind::GeneralAndConstFn\n-                        | UnsafetyViolationKind::General => {}\n+                        UnsafetyViolationKind::General => {}\n                         UnsafetyViolationKind::UnsafeFn => {\n                             bug!(\"`UnsafetyViolationKind::UnsafeFn` in an `Safe` context\")\n                         }\n@@ -334,29 +327,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 if !violations.is_empty() {\n                     self.used_unsafe.insert(hir_id);\n                 }\n-                // only some unsafety is allowed in const fn\n-                if self.min_const_fn {\n-                    for violation in violations {\n-                        match violation.kind {\n-                            // these unsafe things are stable in const fn\n-                            UnsafetyViolationKind::GeneralAndConstFn => {}\n-                            // these things are forbidden in const fns\n-                            UnsafetyViolationKind::General => {\n-                                let mut violation = *violation;\n-                                // const fns don't need to be backwards compatible and can\n-                                // emit these violations as a hard error instead of a backwards\n-                                // compat lint\n-                                violation.kind = UnsafetyViolationKind::General;\n-                                if !self.violations.contains(&violation) {\n-                                    self.violations.push(violation)\n-                                }\n-                            }\n-                            UnsafetyViolationKind::UnsafeFn => bug!(\n-                                \"`UnsafetyViolationKind::UnsafeFn` in an `ExplicitUnsafe` context\"\n-                            ),\n-                        }\n-                    }\n-                }\n                 true\n             }\n         };\n@@ -394,7 +364,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             } else {\n                                 continue;\n                             };\n-                            self.require_unsafe(UnsafetyViolationKind::GeneralAndConstFn, details);\n+                            self.require_unsafe(UnsafetyViolationKind::General, details);\n                         }\n                     }\n                 }\n@@ -412,7 +382,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         // Is `callee_features` a subset of `calling_features`?\n         if !callee_features.iter().all(|feature| self_features.contains(feature)) {\n             self.require_unsafe(\n-                UnsafetyViolationKind::GeneralAndConstFn,\n+                UnsafetyViolationKind::General,\n                 UnsafetyViolationDetails::CallToFunctionWith,\n             )\n         }\n@@ -494,15 +464,12 @@ fn unsafety_check_result<'tcx>(\n     let param_env = tcx.param_env(def.did);\n \n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    let (const_context, min_const_fn) = match tcx.hir().body_owner_kind(id) {\n-        hir::BodyOwnerKind::Closure => (false, false),\n-        hir::BodyOwnerKind::Fn => {\n-            (tcx.is_const_fn_raw(def.did.to_def_id()), is_min_const_fn(tcx, def.did.to_def_id()))\n-        }\n-        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => (true, false),\n+    let const_context = match tcx.hir().body_owner_kind(id) {\n+        hir::BodyOwnerKind::Closure => false,\n+        hir::BodyOwnerKind::Fn => tcx.is_const_fn_raw(def.did.to_def_id()),\n+        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => true,\n     };\n-    let mut checker =\n-        UnsafetyChecker::new(const_context, min_const_fn, body, def.did, tcx, param_env);\n+    let mut checker = UnsafetyChecker::new(const_context, body, def.did, tcx, param_env);\n     checker.visit_body(&body);\n \n     check_unused_unsafe(tcx, def.did, &checker.used_unsafe, &mut checker.inherited_blocks);\n@@ -577,7 +544,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n             if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) { \" function or\" } else { \"\" };\n \n         match kind {\n-            UnsafetyViolationKind::GeneralAndConstFn | UnsafetyViolationKind::General => {\n+            UnsafetyViolationKind::General => {\n                 // once\n                 struct_span_err!(\n                     tcx.sess,"}, {"sha": "a3804e468da2da74b0e159948fe23ca8f74cc180", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -109,6 +109,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     );\n                 }\n             }\n+            (GenericArg::Const(cnst), GenericParamDefKind::Type { .. }) => {\n+                let body = tcx.hir().body(cnst.value.body);\n+                if let rustc_hir::ExprKind::Path(rustc_hir::QPath::Resolved(_, path)) =\n+                    body.value.kind\n+                {\n+                    if let Res::Def(DefKind::Fn { .. }, id) = path.res {\n+                        err.help(&format!(\n+                            \"`{}` is a function item, not a type\",\n+                            tcx.item_name(id)\n+                        ));\n+                        err.help(\"function item types cannot be named directly\");\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n "}, {"sha": "236fec94bdba79fc0e28bd9d3adc9fcade141fb0", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -1494,7 +1494,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         if let (Some((expr, _)), Some((fn_decl, _, _))) =\n             (expression, fcx.get_node_fn_decl(parent_item))\n         {\n-            fcx.suggest_missing_return_expr(&mut err, expr, fn_decl, expected, found, parent_id);\n+            fcx.suggest_missing_break_or_return_expr(\n+                &mut err, expr, fn_decl, expected, found, id, parent_id,\n+            );\n         }\n \n         if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.get(), fn_output) {"}, {"sha": "d6b1e56316b3751d20cf1e5b07a5b33d208c9493", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, ItemKind, Node};\n+use rustc_hir::{Expr, ExprKind, ItemKind, Node, Stmt, StmtKind};\n use rustc_infer::infer;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, Ty};\n@@ -55,7 +55,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             pointing_at_return_type =\n                 self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n             let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n-            self.suggest_missing_return_expr(err, expr, &fn_decl, expected, found, fn_id);\n+            self.suggest_missing_break_or_return_expr(\n+                err, expr, &fn_decl, expected, found, blk_id, fn_id,\n+            );\n         }\n         pointing_at_return_type\n     }\n@@ -472,22 +474,46 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub(in super::super) fn suggest_missing_return_expr(\n+    pub(in super::super) fn suggest_missing_break_or_return_expr(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         expr: &'tcx hir::Expr<'tcx>,\n         fn_decl: &hir::FnDecl<'_>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         id: hir::HirId,\n+        fn_id: hir::HirId,\n     ) {\n         if !expected.is_unit() {\n             return;\n         }\n         let found = self.resolve_vars_with_obligations(found);\n+\n+        let in_loop = self.is_loop(id)\n+            || self.tcx.hir().parent_iter(id).any(|(parent_id, _)| self.is_loop(parent_id));\n+\n+        let in_local_statement = self.is_local_statement(id)\n+            || self\n+                .tcx\n+                .hir()\n+                .parent_iter(id)\n+                .any(|(parent_id, _)| self.is_local_statement(parent_id));\n+\n+        if in_loop && in_local_statement {\n+            err.multipart_suggestion(\n+                \"you might have meant to break the loop with this value\",\n+                vec![\n+                    (expr.span.shrink_to_lo(), \"break \".to_string()),\n+                    (expr.span.shrink_to_hi(), \";\".to_string()),\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n+            return;\n+        }\n+\n         if let hir::FnRetTy::Return(ty) = fn_decl.output {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n-            let bound_vars = self.tcx.late_bound_vars(id);\n+            let bound_vars = self.tcx.late_bound_vars(fn_id);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n             let ty = self.normalize_associated_types_in(expr.span, ty);\n             if self.can_coerce(found, ty) {\n@@ -514,4 +540,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.sess.parse_sess.expr_parentheses_needed(err, *sp, None);\n         }\n     }\n+\n+    fn is_loop(&self, id: hir::HirId) -> bool {\n+        let node = self.tcx.hir().get(id);\n+        matches!(node, Node::Expr(Expr { kind: ExprKind::Loop(..), .. }))\n+    }\n+\n+    fn is_local_statement(&self, id: hir::HirId) -> bool {\n+        let node = self.tcx.hir().get(id);\n+        matches!(node, Node::Stmt(Stmt { kind: StmtKind::Local(..), .. }))\n+    }\n }"}, {"sha": "73e35f0171aa773b21358c50652487073c8887e4", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -988,6 +988,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut alt_rcvr_sugg = false;\n         if let SelfSource::MethodCall(rcvr) = source {\n             debug!(?span, ?item_name, ?rcvr_ty, ?rcvr);\n+            let skippable = [\n+                self.tcx.lang_items().clone_trait(),\n+                self.tcx.lang_items().deref_trait(),\n+                self.tcx.lang_items().deref_mut_trait(),\n+                self.tcx.lang_items().drop_trait(),\n+            ];\n             // Try alternative arbitrary self types that could fulfill this call.\n             // FIXME: probe for all types that *could* be arbitrary self-types, not\n             // just this list.\n@@ -996,6 +1002,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (self.tcx.mk_mut_ref(&ty::ReErased, rcvr_ty), \"&mut \"),\n                 (self.tcx.mk_imm_ref(&ty::ReErased, rcvr_ty), \"&\"),\n             ] {\n+                if let Ok(pick) = self.lookup_probe(\n+                    span,\n+                    item_name,\n+                    rcvr_ty,\n+                    rcvr,\n+                    crate::check::method::probe::ProbeScope::AllTraits,\n+                ) {\n+                    // If the method is defined for the receiver we have, it likely wasn't `use`d.\n+                    // We point at the method, but we just skip the rest of the check for arbitrary\n+                    // self types and rely on the suggestion to `use` the trait from\n+                    // `suggest_valid_traits`.\n+                    let did = Some(pick.item.container.id());\n+                    let skip = skippable.contains(&did);\n+                    if pick.autoderefs == 0 && !skip {\n+                        err.span_label(\n+                            pick.item.ident.span,\n+                            &format!(\"the method is available for `{}` here\", rcvr_ty),\n+                        );\n+                    }\n+                    break;\n+                }\n                 for (rcvr_ty, pre) in &[\n                     (self.tcx.mk_lang_item(rcvr_ty, LangItem::OwnedBox), \"Box::new\"),\n                     (self.tcx.mk_lang_item(rcvr_ty, LangItem::Pin), \"Pin::new\"),\n@@ -1015,13 +1042,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // We don't want to suggest a container type when the missing\n                             // method is `.clone()` or `.deref()` otherwise we'd suggest\n                             // `Arc::new(foo).clone()`, which is far from what the user wants.\n-                            let skip = [\n-                                self.tcx.lang_items().clone_trait(),\n-                                self.tcx.lang_items().deref_trait(),\n-                                self.tcx.lang_items().deref_mut_trait(),\n-                                self.tcx.lang_items().drop_trait(),\n-                            ]\n-                            .contains(&did);\n+                            let skip = skippable.contains(&did);\n                             // Make sure the method is defined for the *actual* receiver: we don't\n                             // want to treat `Box<Self>` as a receiver if it only works because of\n                             // an autoderef to `&self`\n@@ -1047,7 +1068,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n         }\n-        if !alt_rcvr_sugg && self.suggest_valid_traits(err, valid_out_of_scope_traits) {\n+        if self.suggest_valid_traits(err, valid_out_of_scope_traits) {\n             return;\n         }\n "}, {"sha": "fe87a97bac1284bc690c9879fcd0474200cbf70d", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -53,17 +53,11 @@ pub struct RawVec<T, A: Allocator = Global> {\n }\n \n impl<T> RawVec<T, Global> {\n-    /// HACK(Centril): This exists because `#[unstable]` `const fn`s needn't conform\n-    /// to `min_const_fn` and so they cannot be called in `min_const_fn`s either.\n+    /// HACK(Centril): This exists because stable `const fn` can only call stable `const fn`, so\n+    /// they cannot call `Self::new()`.\n     ///\n-    /// If you change `RawVec<T>::new` or dependencies, please take care to not\n-    /// introduce anything that would truly violate `min_const_fn`.\n-    ///\n-    /// NOTE: We could avoid this hack and check conformance with some\n-    /// `#[rustc_force_min_const_fn]` attribute which requires conformance\n-    /// with `min_const_fn` but does not necessarily allow calling it in\n-    /// `stable(...) const fn` / user code not enabling `foo` when\n-    /// `#[rustc_const_unstable(feature = \"foo\", issue = \"01234\")]` is present.\n+    /// If you change `RawVec<T>::new` or dependencies, please take care to not introduce anything\n+    /// that would truly const-call something unstable.\n     pub const NEW: Self = Self::new();\n \n     /// Creates the biggest possible `RawVec` (on the system heap)"}, {"sha": "7223ade68158fd1a84a489437462ae81cb73b07b", "filename": "library/std/src/sys/sgx/ext/io.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -63,12 +63,14 @@ pub trait TryIntoRawFd: Sized {\n }\n \n impl AsRawFd for net::TcpStream {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.as_inner().as_inner().as_inner().as_inner()\n     }\n }\n \n impl AsRawFd for net::TcpListener {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.as_inner().as_inner().as_inner().as_inner()\n     }\n@@ -87,6 +89,7 @@ pub struct TcpStreamMetadata {\n impl FromRawFd for net::TcpStream {\n     type Metadata = TcpStreamMetadata;\n \n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd, metadata: Self::Metadata) -> net::TcpStream {\n         let fd = sys::fd::FileDesc::from_inner(fd);\n         let socket = sys::net::Socket::from_inner((fd, metadata.local_addr));\n@@ -105,6 +108,7 @@ pub struct TcpListenerMetadata {\n impl FromRawFd for net::TcpListener {\n     type Metadata = TcpListenerMetadata;\n \n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd, metadata: Self::Metadata) -> net::TcpListener {\n         let fd = sys::fd::FileDesc::from_inner(fd);\n         let socket = sys::net::Socket::from_inner((fd, metadata.local_addr));\n@@ -113,6 +117,7 @@ impl FromRawFd for net::TcpListener {\n }\n \n impl TryIntoRawFd for net::TcpStream {\n+    #[inline]\n     fn try_into_raw_fd(self) -> Result<RawFd, Self> {\n         let (socket, peer_addr) = self.into_inner().into_inner();\n         match socket.try_into_inner() {\n@@ -126,6 +131,7 @@ impl TryIntoRawFd for net::TcpStream {\n }\n \n impl TryIntoRawFd for net::TcpListener {\n+    #[inline]\n     fn try_into_raw_fd(self) -> Result<RawFd, Self> {\n         match self.into_inner().into_inner().try_into_inner() {\n             Ok(fd) => Ok(fd.into_inner()),"}, {"sha": "07c30bfa9ed154b6b9add61ecbcbf0f7089a3d31", "filename": "library/std/src/sys/unix/ext/io.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fio.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -104,79 +104,91 @@ pub trait IntoRawFd {\n \n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl AsRawFd for RawFd {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self\n     }\n }\n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl IntoRawFd for RawFd {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self\n     }\n }\n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl FromRawFd for RawFd {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> RawFd {\n         fd\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawFd for fs::File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for fs::File {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n         fs::File::from_inner(sys::fs::File::from_inner(fd))\n     }\n }\n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for fs::File {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawFd for io::Stdin {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDIN_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawFd for io::Stdout {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDOUT_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawFd for io::Stderr {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDERR_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawFd for io::StdinLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDIN_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawFd for io::StdoutLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDOUT_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawFd for io::StderrLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDERR_FILENO\n     }"}, {"sha": "9e39f70f68e698ab594df22812f5097b53d0a3eb", "filename": "library/std/src/sys/unix/ext/net/datagram.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -879,20 +879,23 @@ impl UnixDatagram {\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl AsRawFd for UnixDatagram {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.0.as_inner()\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl FromRawFd for UnixDatagram {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixDatagram {\n         UnixDatagram(Socket::from_inner(fd))\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl IntoRawFd for UnixDatagram {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_inner()\n     }"}, {"sha": "bdd08fe8380fa56e2cf5bd2a738319e43b7a0725", "filename": "library/std/src/sys/unix/ext/net/listener.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Flistener.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -240,20 +240,23 @@ impl UnixListener {\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl AsRawFd for UnixListener {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.0.as_inner()\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl FromRawFd for UnixListener {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixListener {\n         UnixListener(Socket::from_inner(fd))\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl IntoRawFd for UnixListener {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_inner()\n     }"}, {"sha": "b3f12844101241db0d322a28f06a07f73a3ea95c", "filename": "library/std/src/sys/unix/ext/net/raw_fd.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fraw_fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fraw_fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fraw_fd.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -6,6 +6,7 @@ macro_rules! impl_as_raw_fd {\n     ($($t:ident)*) => {$(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl AsRawFd for net::$t {\n+            #[inline]\n             fn as_raw_fd(&self) -> RawFd {\n                 *self.as_inner().socket().as_inner()\n             }\n@@ -18,6 +19,7 @@ macro_rules! impl_from_raw_fd {\n     ($($t:ident)*) => {$(\n         #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n         impl FromRawFd for net::$t {\n+            #[inline]\n             unsafe fn from_raw_fd(fd: RawFd) -> net::$t {\n                 let socket = sys::net::Socket::from_inner(fd);\n                 net::$t::from_inner(sys_common::net::$t::from_inner(socket))\n@@ -31,6 +33,7 @@ macro_rules! impl_into_raw_fd {\n     ($($t:ident)*) => {$(\n         #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n         impl IntoRawFd for net::$t {\n+            #[inline]\n             fn into_raw_fd(self) -> RawFd {\n                 self.into_inner().into_socket().into_inner()\n             }"}, {"sha": "a6f6e091305d51cb7c7a41f228ac248d693a1919", "filename": "library/std/src/sys/unix/ext/net/stream.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -654,20 +654,23 @@ impl<'a> io::Write for &'a UnixStream {\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl AsRawFd for UnixStream {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.0.as_inner()\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl FromRawFd for UnixStream {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixStream {\n         UnixStream(Socket::from_inner(fd))\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl IntoRawFd for UnixStream {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_inner()\n     }"}, {"sha": "355855bcd10e203d6921f3560833bc3270fa4513", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -274,6 +274,7 @@ impl ExitStatusExt for process::ExitStatus {\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawFd for process::Stdio {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> process::Stdio {\n         let fd = sys::fd::FileDesc::new(fd);\n         let io = sys::process::Stdio::Fd(fd);\n@@ -283,41 +284,47 @@ impl FromRawFd for process::Stdio {\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawFd for process::ChildStdin {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawFd for process::ChildStdout {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawFd for process::ChildStderr {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStdin {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStdout {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStderr {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }"}, {"sha": "b2e79cc1b4a9d59c59d680e2f22aa038c0f1d97f", "filename": "library/std/src/sys/wasi/ext/io.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -54,126 +54,147 @@ pub trait IntoRawFd {\n \n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl AsRawFd for RawFd {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self\n     }\n }\n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl IntoRawFd for RawFd {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self\n     }\n }\n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl FromRawFd for RawFd {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> RawFd {\n         fd\n     }\n }\n \n impl AsRawFd for net::TcpStream {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().as_raw()\n     }\n }\n \n impl FromRawFd for net::TcpStream {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n         net::TcpStream::from_inner(sys::net::TcpStream::from_inner(fd))\n     }\n }\n \n impl IntoRawFd for net::TcpStream {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n impl AsRawFd for net::TcpListener {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().as_raw()\n     }\n }\n \n impl FromRawFd for net::TcpListener {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n         net::TcpListener::from_inner(sys::net::TcpListener::from_inner(fd))\n     }\n }\n \n impl IntoRawFd for net::TcpListener {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n impl AsRawFd for net::UdpSocket {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().as_raw()\n     }\n }\n \n impl FromRawFd for net::UdpSocket {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n         net::UdpSocket::from_inner(sys::net::UdpSocket::from_inner(fd))\n     }\n }\n \n impl IntoRawFd for net::UdpSocket {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n impl AsRawFd for fs::File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().as_raw()\n     }\n }\n \n impl FromRawFd for fs::File {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n         fs::File::from_inner(sys::fs::File::from_inner(fd))\n     }\n }\n \n impl IntoRawFd for fs::File {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n impl AsRawFd for io::Stdin {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDIN_FILENO as RawFd\n     }\n }\n \n impl AsRawFd for io::Stdout {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDOUT_FILENO as RawFd\n     }\n }\n \n impl AsRawFd for io::Stderr {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDERR_FILENO as RawFd\n     }\n }\n \n impl<'a> AsRawFd for io::StdinLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDIN_FILENO as RawFd\n     }\n }\n \n impl<'a> AsRawFd for io::StdoutLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDOUT_FILENO as RawFd\n     }\n }\n \n impl<'a> AsRawFd for io::StderrLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDERR_FILENO as RawFd\n     }"}, {"sha": "31b5d015ed0c31a94b52f6c7b409f71d5c0c8b90", "filename": "library/std/src/sys/windows/ext/io.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -59,6 +59,7 @@ pub trait IntoRawHandle {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawHandle for fs::File {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as RawHandle\n     }\n@@ -108,6 +109,7 @@ impl<'a> AsRawHandle for io::StderrLock<'a> {\n \n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawHandle for fs::File {\n+    #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> fs::File {\n         let handle = handle as c::HANDLE;\n         fs::File::from_inner(sys::fs::File::from_inner(handle))\n@@ -116,6 +118,7 @@ impl FromRawHandle for fs::File {\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for fs::File {\n+    #[inline]\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }\n@@ -161,39 +164,45 @@ pub trait IntoRawSocket {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawSocket for net::TcpStream {\n+    #[inline]\n     fn as_raw_socket(&self) -> RawSocket {\n         *self.as_inner().socket().as_inner()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawSocket for net::TcpListener {\n+    #[inline]\n     fn as_raw_socket(&self) -> RawSocket {\n         *self.as_inner().socket().as_inner()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawSocket for net::UdpSocket {\n+    #[inline]\n     fn as_raw_socket(&self) -> RawSocket {\n         *self.as_inner().socket().as_inner()\n     }\n }\n \n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::TcpStream {\n+    #[inline]\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpStream {\n         let sock = sys::net::Socket::from_inner(sock);\n         net::TcpStream::from_inner(sys_common::net::TcpStream::from_inner(sock))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::TcpListener {\n+    #[inline]\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpListener {\n         let sock = sys::net::Socket::from_inner(sock);\n         net::TcpListener::from_inner(sys_common::net::TcpListener::from_inner(sock))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::UdpSocket {\n+    #[inline]\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::UdpSocket {\n         let sock = sys::net::Socket::from_inner(sock);\n         net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(sock))\n@@ -202,20 +211,23 @@ impl FromRawSocket for net::UdpSocket {\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawSocket for net::TcpStream {\n+    #[inline]\n     fn into_raw_socket(self) -> RawSocket {\n         self.into_inner().into_socket().into_inner()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawSocket for net::TcpListener {\n+    #[inline]\n     fn into_raw_socket(self) -> RawSocket {\n         self.into_inner().into_socket().into_inner()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawSocket for net::UdpSocket {\n+    #[inline]\n     fn into_raw_socket(self) -> RawSocket {\n         self.into_inner().into_socket().into_inner()\n     }"}, {"sha": "67756b15531bf360b9d5bc8995e240f713a29cb6", "filename": "library/std/src/sys/windows/ext/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -19,6 +19,7 @@ impl FromRawHandle for process::Stdio {\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::Child {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n@@ -33,20 +34,23 @@ impl IntoRawHandle for process::Child {\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStdin {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStdout {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStderr {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }"}, {"sha": "6bd02054f7150ba5e662a1810bf3f046952fc225", "filename": "library/std/src/sys/windows/ext/thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fthread.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -8,13 +8,15 @@ use crate::thread;\n \n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n impl<T> AsRawHandle for thread::JoinHandle<T> {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n \n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n impl<T> IntoRawHandle for thread::JoinHandle<T> {\n+    #[inline]\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }"}, {"sha": "3986167bac8d3f7b3a52d4489d2275d6c5623e67", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n@@ -210,7 +209,7 @@ fn build_external_function(cx: &mut DocContext<'_>, did: DefId) -> clean::Functi\n     let sig = cx.tcx.fn_sig(did);\n \n     let constness =\n-        if is_min_const_fn(cx.tcx, did) { hir::Constness::Const } else { hir::Constness::NotConst };\n+        if cx.tcx.is_const_fn_raw(did) { hir::Constness::Const } else { hir::Constness::NotConst };\n     let asyncness = cx.tcx.asyncness(did);\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {"}, {"sha": "6b04157d9530fa26dc2858b02637e654d1891fc2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n-use rustc_mir::const_eval::{is_const_fn, is_min_const_fn, is_unstable_const_fn};\n+use rustc_mir::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExpnKind};\n@@ -1048,7 +1048,7 @@ impl Clean<Item> for ty::AssocItem {\n                     ty::TraitContainer(_) => self.defaultness.has_value(),\n                 };\n                 if provided {\n-                    let constness = if is_min_const_fn(tcx, self.def_id) {\n+                    let constness = if tcx.is_const_fn_raw(self.def_id) {\n                         hir::Constness::Const\n                     } else {\n                         hir::Constness::NotConst"}, {"sha": "aed099a53eaf4b2f3295bf9bb75bcaf800767697", "filename": "src/test/ui/cast/cast-ptr-to-int-const.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -1,11 +1,25 @@\n // gate-test-const_raw_ptr_to_usize_cast\n+// revisions: with_feature without_feature\n+\n+#![cfg_attr(with_feature, feature(const_raw_ptr_to_usize_cast))]\n \n fn main() {\n-    const X: u32 = unsafe {\n-        main as u32 //~ ERROR casting pointers to integers in constants is unstable\n+    const X: usize = unsafe {\n+        main as usize //[without_feature]~ ERROR casting pointers to integers in constants is unstable\n     };\n     const Y: u32 = 0;\n-    const Z: u32 = unsafe {\n-        &Y as *const u32 as u32 //~ ERROR is unstable\n+    const Z: usize = unsafe {\n+        &Y as *const u32 as usize //[without_feature]~ ERROR is unstable\n+    };\n+    // Cast in `const` without `unsafe` block\n+    const SAFE: usize = {\n+        &Y as *const u32 as usize //[without_feature]~ ERROR is unstable\n+        //[with_feature]~^ ERROR cast of pointer to int is unsafe and requires unsafe\n     };\n }\n+\n+// Cast in `const fn` without `unsafe` block\n+const fn test() -> usize {\n+    &0 as *const i32 as usize //[without_feature]~ ERROR is unstable\n+    //[with_feature]~^ ERROR cast of pointer to int is unsafe and requires unsafe\n+}"}, {"sha": "f523b14a98c00dac52140e64b0b59b27138ea9b3", "filename": "src/test/ui/cast/cast-ptr-to-int-const.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3709ae324c9daabbdabe048faa6fbedbeccf27ec/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3709ae324c9daabbdabe048faa6fbedbeccf27ec/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr?ref=3709ae324c9daabbdabe048faa6fbedbeccf27ec", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/cast-ptr-to-int-const.rs:5:9\n-   |\n-LL |         main as u32\n-   |         ^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/cast-ptr-to-int-const.rs:9:9\n-   |\n-LL |         &Y as *const u32 as u32\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "8282bc3db05073882bca837ac9fc7f19c0e7ff29", "filename": "src/test/ui/cast/cast-ptr-to-int-const.with_feature.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.with_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.with_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.with_feature.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:16:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:23:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "c87fa1a14a4c87a33ea29dba24cc6d387ab3946a", "filename": "src/test/ui/cast/cast-ptr-to-int-const.without_feature.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.without_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.without_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.without_feature.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/cast-ptr-to-int-const.rs:8:9\n+   |\n+LL |         main as usize\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/cast-ptr-to-int-const.rs:12:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/cast-ptr-to-int-const.rs:16:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constant functions is unstable\n+  --> $DIR/cast-ptr-to-int-const.rs:23:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "442a7c01e5a69421da5a91fe10f859624c202912", "filename": "src/test/ui/crate-loading/missing-std.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: --target x86_64-unknown-uefi\n+// rustc-env:CARGO=/usr/bin/cargo\n+// rustc-env:RUSTUP_HOME=/home/bors/.rustup\n+#![no_core]\n+extern crate core;\n+//~^ ERROR can't find crate for `core`\n+//~| NOTE can't find crate\n+//~| NOTE target may not be installed\n+//~| HELP consider building the standard library from source with `cargo build -Zbuild-std`\n+//~| HELP consider downloading the target with `rustup target add x86_64-unknown-uefi`\n+fn main() {}"}, {"sha": "25808efdfa6993e94c45af96bfd0878e1598f4ad", "filename": "src/test/ui/crate-loading/missing-std.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,13 @@\n+error[E0463]: can't find crate for `core`\n+  --> $DIR/missing-std.rs:5:1\n+   |\n+LL | extern crate core;\n+   | ^^^^^^^^^^^^^^^^^^ can't find crate\n+   |\n+   = note: the `x86_64-unknown-uefi` target may not be installed\n+   = help: consider downloading the target with `rustup target add x86_64-unknown-uefi`\n+   = help: consider building the standard library from source with `cargo build -Zbuild-std`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0463`."}, {"sha": "e1b0578cadbe96d32ea3e2c03c6ee774c24405cb", "filename": "src/test/ui/generics/generic-function-item-where-type.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-function-item-where-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-function-item-where-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-function-item-where-type.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,6 @@\n+fn foo<U>() {}\n+\n+fn main() {\n+    foo::<main>()\n+    //~^ ERROR constant provided when a type was expected\n+}"}, {"sha": "88594129caabac4ca6591b2301dfa3751f48dc2b", "filename": "src/test/ui/generics/generic-function-item-where-type.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-function-item-where-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-function-item-where-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-function-item-where-type.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,12 @@\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/generic-function-item-where-type.rs:4:11\n+   |\n+LL |     foo::<main>()\n+   |           ^^^^\n+   |\n+   = help: `main` is a function item, not a type\n+   = help: function item types cannot be named directly\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "2913a955dce1b2cf37ff2c61d62528093fb1f549", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -1,6 +1,9 @@\n error[E0599]: no method named `f` found for unit type `()` in the current scope\n   --> $DIR/trait_items.rs:17:24\n    |\n+LL |         fn f(&self) {}\n+   |            - the method is available for `()` here\n+...\n LL |     fn f() { ::baz::m!(); }\n    |              ------------ in this macro invocation\n ..."}, {"sha": "b993115502fd5f8cde39577ec156aa9a5e18824c", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -37,6 +37,9 @@ LL | use no_method_suggested_traits::Reexported;\n error[E0599]: no method named `method` found for type `char` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:30:9\n    |\n+LL |         fn method(&self) {}\n+   |            ------ the method is available for `char` here\n+...\n LL |     'a'.method();\n    |         ^^^^^^ method not found in `char`\n    |\n@@ -63,6 +66,11 @@ error[E0599]: no method named `method` found for type `i32` in the current scope\n    |\n LL |     1i32.method();\n    |          ^^^^^^ method not found in `i32`\n+   | \n+  ::: $DIR/auxiliary/no_method_suggested_traits.rs:8:12\n+   |\n+LL |         fn method(&self) {}\n+   |            ------ the method is available for `i32` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "3a3767c349d651a65d7dd877b67aa1198de0005d", "filename": "src/test/ui/issues/issue-43189.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -3,6 +3,11 @@ error[E0599]: no method named `a` found for unit type `()` in the current scope\n    |\n LL |     ().a();\n    |        ^ method not found in `()`\n+   | \n+  ::: $DIR/auxiliary/xcrate-issue-43189-a.rs:5:8\n+   |\n+LL |     fn a(&self) {}\n+   |        - the method is available for `()` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "e6b0fffce663dae0044dc9299e3126767d43178a", "filename": "src/test/ui/issues/issue-56175.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -3,6 +3,11 @@ error[E0599]: no method named `trait_method` found for struct `FooStruct` in the\n    |\n LL |     reexported_trait::FooStruct.trait_method();\n    |                                 ^^^^^^^^^^^^ method not found in `FooStruct`\n+   | \n+  ::: $DIR/auxiliary/reexported-trait.rs:3:12\n+   |\n+LL |         fn trait_method(&self) {\n+   |            ------------ the method is available for `FooStruct` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n@@ -15,6 +20,11 @@ error[E0599]: no method named `trait_method_b` found for struct `FooStruct` in t\n    |\n LL |     reexported_trait::FooStruct.trait_method_b();\n    |                                 ^^^^^^^^^^^^^^ method not found in `FooStruct`\n+   | \n+  ::: $DIR/auxiliary/reexported-trait.rs:7:12\n+   |\n+LL |         fn trait_method_b(&self) {\n+   |            -------------- the method is available for `FooStruct` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "93078cb4b144beddda2329566c1383c223316689", "filename": "src/test/ui/loops/loop-no-implicit-break.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,31 @@\n+fn main() {\n+    let a: i8 = loop {\n+        1 //~ ERROR mismatched types\n+    };\n+\n+    let b: i8 = loop {\n+        break 1;\n+    };\n+}\n+\n+fn foo() -> i8 {\n+    let a: i8 = loop {\n+        1 //~ ERROR mismatched types\n+    };\n+\n+    let b: i8 = loop {\n+        break 1;\n+    };\n+\n+    loop {\n+        1 //~ ERROR mismatched types\n+    }\n+\n+    loop {\n+        return 1;\n+    }\n+\n+    loop {\n+        1 //~ ERROR mismatched types\n+    }\n+}"}, {"sha": "5087662e7bfa4c879c687f504ba354c14b4e4048", "filename": "src/test/ui/loops/loop-no-implicit-break.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,47 @@\n+error[E0308]: mismatched types\n+  --> $DIR/loop-no-implicit-break.rs:3:9\n+   |\n+LL |         1\n+   |         ^ expected `()`, found integer\n+   |\n+help: you might have meant to break the loop with this value\n+   |\n+LL |         break 1;\n+   |         ^^^^^  ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/loop-no-implicit-break.rs:13:9\n+   |\n+LL |         1\n+   |         ^ expected `()`, found integer\n+   |\n+help: you might have meant to break the loop with this value\n+   |\n+LL |         break 1;\n+   |         ^^^^^  ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/loop-no-implicit-break.rs:21:9\n+   |\n+LL |         1\n+   |         ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |         return 1;\n+   |         ^^^^^^  ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/loop-no-implicit-break.rs:29:9\n+   |\n+LL |         1\n+   |         ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |         return 1;\n+   |         ^^^^^^  ^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d26d883040b485e9a1122234152ffdaec2fa5152", "filename": "src/test/ui/match/issue-82392.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,9 @@\n+// https://github.com/rust-lang/rust/issues/82329\n+// compile-flags: -Zunpretty=hir,typed\n+// check-pass\n+\n+pub fn main() {\n+    if true {\n+    } else if let Some(a) = Some(3) {\n+    }\n+}"}, {"sha": "8ff76c64fc789f907633a8c3d186daaeb3ae5b22", "filename": "src/test/ui/match/issue-82392.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,20 @@\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// https://github.com/rust-lang/rust/issues/82329\n+// compile-flags: -Zunpretty=hir,typed\n+// check-pass\n+\n+pub fn main() ({\n+                   (if (true as bool)\n+                       ({ } as\n+                           ()) else {match ((Some as\n+                                                fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n+                                                                                                  as\n+                                                                                                  i32))\n+                                               as Option<i32>) {\n+                                         Some(a) => { }\n+                                         _ => { }\n+                                     }} as ())\n+                    } as ())"}, {"sha": "423481fd5f02d0f461fb4ac41dcedafbd12793d8", "filename": "src/test/ui/match/issue-84434.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fmatch%2Fissue-84434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fmatch%2Fissue-84434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-84434.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,18 @@\n+// https://github.com/rust-lang/rust/issues/84434\n+// check-pass\n+\n+use std::path::Path;\n+struct A {\n+    pub func: fn(check: bool, a: &Path, b: Option<&Path>),\n+}\n+const MY_A: A = A {\n+    func: |check, a, b| {\n+        if check {\n+            let _ = ();\n+        } else if let Some(parent) = b.and_then(|p| p.parent()) {\n+            let _ = ();\n+        }\n+    },\n+};\n+\n+fn main() {}"}, {"sha": "d09a8aae7480108eee0c477cc6e7493bdbd71d3c", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -57,6 +57,9 @@ error[E0747]: constant provided when a type was expected\n    |\n LL |     let _x: Box<Bar>;\n    |                 ^^^\n+   |\n+   = help: `Bar` is a function item, not a type\n+   = help: function item types cannot be named directly\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fdf0549cf50bc5fd5dcf4318b9a1f7a28d581fb1", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -83,12 +83,18 @@ error[E0747]: constant provided when a type was expected\n    |\n LL |     let _x : Box<Bar>;\n    |                  ^^^\n+   |\n+   = help: `Bar` is a function item, not a type\n+   = help: function item types cannot be named directly\n \n error[E0747]: constant provided when a type was expected\n   --> $DIR/privacy-ns2.rs:48:17\n    |\n LL |     let _x: Box<Bar>;\n    |                 ^^^\n+   |\n+   = help: `Bar` is a function item, not a type\n+   = help: function item types cannot be named directly\n \n error: aborting due to 8 previous errors\n "}, {"sha": "2cf5a073fe5c22334a30fb79d4f5b1c06f826b5f", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -1,6 +1,9 @@\n error[E0599]: no method named `foobar` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:22:11\n    |\n+LL |             fn foobar(&self) { }\n+   |                ------ the method is available for `u32` here\n+...\n LL |         x.foobar();\n    |           ^^^^^^ method not found in `u32`\n    |\n@@ -11,6 +14,9 @@ LL |         x.foobar();\n error[E0599]: no method named `bar` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:28:7\n    |\n+LL |         fn bar(&self) { }\n+   |            --- the method is available for `u32` here\n+...\n LL |     x.bar();\n    |       ^^^ method not found in `u32`\n    |"}, {"sha": "c3b9084affdb3cbabf6f24cd57e1adeee6414d52", "filename": "src/test/ui/shadowed/shadowed-trait-methods.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -1,6 +1,9 @@\n error[E0599]: no method named `f` found for unit type `()` in the current scope\n   --> $DIR/shadowed-trait-methods.rs:13:8\n    |\n+LL |     pub trait T { fn f(&self) {} }\n+   |                      - the method is available for `()` here\n+...\n LL |     ().f()\n    |        ^ method not found in `()`\n    |"}, {"sha": "646f68dea14e869e8c248c72e0a7b453776cf513", "filename": "src/test/ui/suggestions/import-trait-for-method-call.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,9 @@\n+use std::hash::BuildHasher;\n+\n+fn next_u64() -> u64 {\n+    let bh = std::collections::hash_map::RandomState::new();\n+    let h = bh.build_hasher();\n+    h.finish() //~ ERROR no method named `finish` found for struct `DefaultHasher`\n+}\n+\n+fn main() {}"}, {"sha": "f3ae20552f3d53c2293d1d0300f1aa71f01370e6", "filename": "src/test/ui/suggestions/import-trait-for-method-call.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -0,0 +1,20 @@\n+error[E0599]: no method named `finish` found for struct `DefaultHasher` in the current scope\n+  --> $DIR/import-trait-for-method-call.rs:6:7\n+   |\n+LL |     h.finish()\n+   |       ^^^^^^ method not found in `DefaultHasher`\n+   | \n+  ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n+   |\n+LL |     fn finish(&self) -> u64;\n+   |        ------ the method is available for `DefaultHasher` here\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL | use std::hash::Hasher;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "30daf8e27702441b0504987446bc7d6c30d70a38", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -20,6 +20,9 @@ error[E0599]: no method named `b` found for struct `S` in the current scope\n LL | struct S;\n    | --------- method `b` not found for this\n ...\n+LL |         fn b(&self) { }\n+   |            - the method is available for `S` here\n+...\n LL |     S.b();\n    |       ^ method not found in `S`\n    |"}, {"sha": "60425ff853b7ea4690ecd404e38d42b799227ffb", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f59682558dd9a5b6254cd8bf98c3b082a8e99e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=f8f59682558dd9a5b6254cd8bf98c3b082a8e99e", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {\n-            if rustc_mir::const_eval::is_min_const_fn(cx.tcx, def_id.to_def_id()) {\n+            if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, &err);\n             }\n         } else {"}]}