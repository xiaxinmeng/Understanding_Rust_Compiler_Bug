{"sha": "4fbb43e70f7d4d35702f0b5b3069931123262b71", "node_id": "C_kwDOAAsO6NoAKDRmYmI0M2U3MGY3ZDRkMzU3MDJmMGI1YjMwNjk5MzExMjMyNjJiNzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-01T19:56:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-02T22:07:57Z"}, "message": "No more TyCtxt::lazy_normalization", "tree": {"sha": "3d6f4d6db856c82b98b2268f7c82f87588decbf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d6f4d6db856c82b98b2268f7c82f87588decbf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fbb43e70f7d4d35702f0b5b3069931123262b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbb43e70f7d4d35702f0b5b3069931123262b71", "html_url": "https://github.com/rust-lang/rust/commit/4fbb43e70f7d4d35702f0b5b3069931123262b71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fbb43e70f7d4d35702f0b5b3069931123262b71/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "794249d768a4f112519f22502ade032dc03b9fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/794249d768a4f112519f22502ade032dc03b9fde", "html_url": "https://github.com/rust-lang/rust/commit/794249d768a4f112519f22502ade032dc03b9fde"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "c6481022d75073221f07d0801d392ce5ae98a4d6", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=4fbb43e70f7d4d35702f0b5b3069931123262b71", "patch": "@@ -50,7 +50,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                 // We do not allow generic parameters in anon consts if we are inside\n                 // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n-            } else if tcx.lazy_normalization() {\n+            } else if tcx.features().generic_const_exprs {\n                 let parent_node = tcx.hir().get_parent(hir_id);\n                 if let Node::Variant(Variant { disr_expr: Some(constant), .. }) = parent_node\n                     && constant.hir_id == hir_id"}, {"sha": "dcb57902928793e7561dd04c9ed78b7d6a656f1b", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=4fbb43e70f7d4d35702f0b5b3069931123262b71", "patch": "@@ -463,7 +463,7 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             }\n         }\n     } else {\n-        if matches!(def_kind, DefKind::AnonConst) && tcx.lazy_normalization() {\n+        if matches!(def_kind, DefKind::AnonConst) && tcx.features().generic_const_exprs {\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n             let parent_def_id = tcx.hir().get_parent_item(hir_id);\n "}, {"sha": "fdbb890ce3d47289bde90c61607e768ca01d396f", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=4fbb43e70f7d4d35702f0b5b3069931123262b71", "patch": "@@ -20,7 +20,8 @@ pub fn provide(providers: &mut Providers) {\n fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[(ty::Clause<'_>, Span)] {\n     let id = tcx.hir().local_def_id_to_hir_id(item_def_id);\n \n-    if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n+    if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst)\n+        && tcx.features().generic_const_exprs\n     {\n         if tcx.hir().opt_const_param_default_param_def_id(id).is_some() {\n             // In `generics_of` we set the generics' parent to be our parent's parent which means that"}, {"sha": "94a72e5a4bda66471138edca9033d3e073e765ea", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=4fbb43e70f7d4d35702f0b5b3069931123262b71", "patch": "@@ -227,7 +227,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 return self.unify_const_variable(vid, a, relation.param_env());\n             }\n             (ty::ConstKind::Unevaluated(..), _) | (_, ty::ConstKind::Unevaluated(..))\n-                if self.tcx.lazy_normalization() =>\n+                if self.tcx.features().generic_const_exprs =>\n             {\n                 relation.register_const_equate_obligation(a, b);\n                 return Ok(b);"}, {"sha": "bf6f21968d71b7f04ce733b50882d4498a495af0", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4fbb43e70f7d4d35702f0b5b3069931123262b71", "patch": "@@ -1015,15 +1015,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.query_system.on_disk_cache.as_ref().map_or(Ok(0), |c| c.serialize(self, encoder))\n     }\n \n-    /// If `true`, we should use lazy normalization for constants, otherwise\n-    /// we still evaluate them eagerly.\n-    #[inline]\n-    pub fn lazy_normalization(self) -> bool {\n-        let features = self.features();\n-        // Note: We only use lazy normalization for generic const expressions.\n-        features.generic_const_exprs\n-    }\n-\n     #[inline]\n     pub fn local_crate_exports_generics(self) -> bool {\n         debug_assert!(self.sess.opts.share_generics());"}, {"sha": "563cc257e034981c82dcfa3ca92926f3979e3172", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbb43e70f7d4d35702f0b5b3069931123262b71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=4fbb43e70f7d4d35702f0b5b3069931123262b71", "patch": "@@ -672,7 +672,9 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n     #[instrument(skip(self), level = \"debug\")]\n     fn fold_const(&mut self, constant: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         let tcx = self.selcx.tcx();\n-        if tcx.lazy_normalization() || !needs_normalization(&constant, self.param_env.reveal()) {\n+        if tcx.features().generic_const_exprs\n+            || !needs_normalization(&constant, self.param_env.reveal())\n+        {\n             constant\n         } else {\n             let constant = constant.super_fold_with(self);"}]}