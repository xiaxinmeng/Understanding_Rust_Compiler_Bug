{"sha": "6165cccf7e43cf4ca2234e84dcf7060c7d89ef45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjVjY2NmN2U0M2NmNGNhMjIzNGU4NGRjZjcwNjBjN2Q4OWVmNDU=", "commit": {"author": {"name": "Pierre-Andre Gagnon", "email": "pagagnon@gmail.com", "date": "2021-02-17T21:41:50Z"}, "committer": {"name": "Pierre-Andre Gagnon", "email": "pagagnon@gmail.com", "date": "2021-02-17T21:41:50Z"}, "message": "Added detailled suggs for new case", "tree": {"sha": "87612c6e9cdd64b2db84e16c543ecffcd16e8784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87612c6e9cdd64b2db84e16c543ecffcd16e8784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6165cccf7e43cf4ca2234e84dcf7060c7d89ef45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6165cccf7e43cf4ca2234e84dcf7060c7d89ef45", "html_url": "https://github.com/rust-lang/rust/commit/6165cccf7e43cf4ca2234e84dcf7060c7d89ef45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6165cccf7e43cf4ca2234e84dcf7060c7d89ef45/comments", "author": {"login": "pag4k", "id": 32080686, "node_id": "MDQ6VXNlcjMyMDgwNjg2", "avatar_url": "https://avatars.githubusercontent.com/u/32080686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pag4k", "html_url": "https://github.com/pag4k", "followers_url": "https://api.github.com/users/pag4k/followers", "following_url": "https://api.github.com/users/pag4k/following{/other_user}", "gists_url": "https://api.github.com/users/pag4k/gists{/gist_id}", "starred_url": "https://api.github.com/users/pag4k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pag4k/subscriptions", "organizations_url": "https://api.github.com/users/pag4k/orgs", "repos_url": "https://api.github.com/users/pag4k/repos", "events_url": "https://api.github.com/users/pag4k/events{/privacy}", "received_events_url": "https://api.github.com/users/pag4k/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pag4k", "id": 32080686, "node_id": "MDQ6VXNlcjMyMDgwNjg2", "avatar_url": "https://avatars.githubusercontent.com/u/32080686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pag4k", "html_url": "https://github.com/pag4k", "followers_url": "https://api.github.com/users/pag4k/followers", "following_url": "https://api.github.com/users/pag4k/following{/other_user}", "gists_url": "https://api.github.com/users/pag4k/gists{/gist_id}", "starred_url": "https://api.github.com/users/pag4k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pag4k/subscriptions", "organizations_url": "https://api.github.com/users/pag4k/orgs", "repos_url": "https://api.github.com/users/pag4k/repos", "events_url": "https://api.github.com/users/pag4k/events{/privacy}", "received_events_url": "https://api.github.com/users/pag4k/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e51e418906916123b3bd15c175d80d3dc74bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e51e418906916123b3bd15c175d80d3dc74bf2", "html_url": "https://github.com/rust-lang/rust/commit/e0e51e418906916123b3bd15c175d80d3dc74bf2"}], "stats": {"total": 162, "additions": 97, "deletions": 65}, "files": [{"sha": "b097d531bc4deaba441deb4ad813752e0c56afef", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 46, "deletions": 54, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6165cccf7e43cf4ca2234e84dcf7060c7d89ef45/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6165cccf7e43cf4ca2234e84dcf7060c7d89ef45/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=6165cccf7e43cf4ca2234e84dcf7060c7d89ef45", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::{\n-    contains_return, in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_sugg,\n-    span_lint_and_then, visitors::find_all_ret_expressions,\n+    contains_return, in_macro, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n+    visitors::find_all_ret_expressions,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, ExprKind, FnDecl, HirId, Impl, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -85,46 +85,44 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n             }\n         }\n \n-        // Check if return type is Option or Result. If neither, abort.\n-        let return_ty = return_ty(cx, hir_id);\n-        let (return_type_label, path) = if is_type_diagnostic_item(cx, return_ty, sym::option_type) {\n-            (\"Option\", &paths::OPTION_SOME)\n-        } else if is_type_diagnostic_item(cx, return_ty, sym::result_type) {\n-            (\"Result\", &paths::RESULT_OK)\n-        } else {\n-            return;\n-        };\n-\n-        // Take the first inner type of the Option or Result. If can't, abort.\n-        let inner_ty = if_chain! {\n-            // Skip Option or Result and take the first outermost inner type.\n-            if let Some(inner_ty) = return_ty.walk().nth(1);\n-            if let GenericArgKind::Type(inner_ty) = inner_ty.unpack();\n-            then {\n-                inner_ty\n+        // Get the wrapper and inner types, if can't, abort.\n+        let (return_type_label, path, inner_type) = if let ty::Adt(adt_def, subst) = return_ty(cx, hir_id).kind() {\n+            if cx.tcx.is_diagnostic_item(sym::option_type, adt_def.did) {\n+                (\"Option\", &paths::OPTION_SOME, subst.type_at(0))\n+            } else if cx.tcx.is_diagnostic_item(sym::result_type, adt_def.did) {\n+                (\"Result\", &paths::RESULT_OK, subst.type_at(0))\n             } else {\n                 return;\n             }\n+        } else {\n+            return;\n         };\n \n         // Check if all return expression respect the following condition and collect them.\n         let mut suggs = Vec::new();\n         let can_sugg = find_all_ret_expressions(cx, &body.value, |ret_expr| {\n             if_chain! {\n-                // Abort if in macro.\n                 if !in_macro(ret_expr.span);\n                 // Check if a function call.\n                 if let ExprKind::Call(ref func, ref args) = ret_expr.kind;\n                 // Get the Path of the function call.\n                 if let ExprKind::Path(ref qpath) = func.kind;\n                 // Check if OPTION_SOME or RESULT_OK, depending on return type.\n                 if match_qpath(qpath, path);\n-                // Make sure the function call has only one argument.\n                 if args.len() == 1;\n                 // Make sure the function argument does not contain a return expression.\n                 if !contains_return(&args[0]);\n                 then {\n-                    suggs.push((ret_expr.span, snippet(cx, args[0].span.source_callsite(), \"..\").to_string()));\n+                    suggs.push(\n+                        (\n+                            ret_expr.span,\n+                            if inner_type.is_unit() {\n+                                \"\".to_string()\n+                            } else {\n+                                snippet(cx, args[0].span.source_callsite(), \"..\").to_string()\n+                            }\n+                        )\n+                    );\n                     true\n                 } else {\n                     false\n@@ -133,42 +131,36 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         });\n \n         if can_sugg && !suggs.is_empty() {\n-            // Issue 6640: If the inner type is Unit, emit lint similar to clippy::unused_unit.\n-            if inner_ty.is_unit() {\n-                span_lint_and_sugg(\n-                    cx,\n-                    UNNECESSARY_WRAPS,\n-                    fn_decl.output.span(),\n-                    \"unneeded wrapped unit return type\",\n-                    format!(\"remove the `-> {}<[...]>`\", return_type_label).as_str(),\n-                    String::new(),\n-                    Applicability::MaybeIncorrect,\n-                );\n+            let (lint_msg, return_type_suggestion_msg, return_type_suggestion) = if inner_type.is_unit() {\n+                (\n+                    \"this function's return value is unnecessary\".to_string(),\n+                    \"remove the return type...\".to_string(),\n+                    snippet(cx, fn_decl.output.span(), \"..\").to_string(),\n+                )\n             } else {\n-                span_lint_and_then(\n-                    cx,\n-                    UNNECESSARY_WRAPS,\n-                    span,\n+                (\n                     format!(\n                         \"this function's return value is unnecessarily wrapped by `{}`\",\n                         return_type_label\n-                    )\n-                    .as_str(),\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            fn_decl.output.span(),\n-                            format!(\"remove `{}` from the return type...\", return_type_label).as_str(),\n-                            inner_ty.to_string(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        diag.multipart_suggestion(\n-                            \"...and change the returning expressions\",\n-                            suggs,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    },\n+                    ),\n+                    format!(\"remove `{}` from the return type...\", return_type_label),\n+                    inner_type.to_string(),\n+                )\n+            };\n+\n+            span_lint_and_then(cx, UNNECESSARY_WRAPS, span, lint_msg.as_str(), |diag| {\n+                diag.span_suggestion(\n+                    fn_decl.output.span(),\n+                    return_type_suggestion_msg.as_str(),\n+                    return_type_suggestion,\n+                    Applicability::MaybeIncorrect,\n                 );\n-            }\n+                diag.multipart_suggestion(\n+                    \"...and then change the returning expressions\",\n+                    suggs,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            });\n         }\n     }\n }"}, {"sha": "40effb894990ecff2a9ca4159ee527039c729b6a", "filename": "tests/ui/unnecessary_wraps.stderr", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6165cccf7e43cf4ca2234e84dcf7060c7d89ef45/tests%2Fui%2Funnecessary_wraps.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6165cccf7e43cf4ca2234e84dcf7060c7d89ef45/tests%2Fui%2Funnecessary_wraps.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.stderr?ref=6165cccf7e43cf4ca2234e84dcf7060c7d89ef45", "patch": "@@ -15,7 +15,7 @@ help: remove `Option` from the return type...\n    |\n LL | fn func1(a: bool, b: bool) -> i32 {\n    |                               ^^^\n-help: ...and change the returning expressions\n+help: ...and then change the returning expressions\n    |\n LL |         return 42;\n LL |     }\n@@ -41,7 +41,7 @@ help: remove `Option` from the return type...\n    |\n LL | fn func2(a: bool, b: bool) -> i32 {\n    |                               ^^^\n-help: ...and change the returning expressions\n+help: ...and then change the returning expressions\n    |\n LL |         return 10;\n LL |     }\n@@ -63,7 +63,7 @@ help: remove `Option` from the return type...\n    |\n LL | fn func5() -> i32 {\n    |               ^^^\n-help: ...and change the returning expressions\n+help: ...and then change the returning expressions\n    |\n LL |     1\n    |\n@@ -80,7 +80,7 @@ help: remove `Result` from the return type...\n    |\n LL | fn func7() -> i32 {\n    |               ^^^\n-help: ...and change the returning expressions\n+help: ...and then change the returning expressions\n    |\n LL |     1\n    |\n@@ -97,22 +97,62 @@ help: remove `Option` from the return type...\n    |\n LL |     fn func12() -> i32 {\n    |                    ^^^\n-help: ...and change the returning expressions\n+help: ...and then change the returning expressions\n    |\n LL |         1\n    |\n \n-error: unneeded wrapped unit return type\n-  --> $DIR/unnecessary_wraps.rs:120:38\n+error: this function's return value is unnecessary\n+  --> $DIR/unnecessary_wraps.rs:120:1\n+   |\n+LL | / fn issue_6640_1(a: bool, b: bool) -> Option<()> {\n+LL | |     if a && b {\n+LL | |         return Some(());\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+help: remove the return type...\n    |\n LL | fn issue_6640_1(a: bool, b: bool) -> Option<()> {\n-   |                                      ^^^^^^^^^^ help: remove the `-> Option<[...]>`\n+   |                                      ^^^^^^^^^^\n+help: ...and then change the returning expressions\n+   |\n+LL |         return ;\n+LL |     }\n+LL |     if a {\n+LL |         Some(());\n+LL |         \n+LL |     } else {\n+ ...\n \n-error: unneeded wrapped unit return type\n-  --> $DIR/unnecessary_wraps.rs:133:38\n+error: this function's return value is unnecessary\n+  --> $DIR/unnecessary_wraps.rs:133:1\n+   |\n+LL | / fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {\n+LL | |     if a && b {\n+LL | |         return Ok(());\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+help: remove the return type...\n    |\n LL | fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {\n-   |                                      ^^^^^^^^^^^^^^^ help: remove the `-> Result<[...]>`\n+   |                                      ^^^^^^^^^^^^^^^\n+help: ...and then change the returning expressions\n+   |\n+LL |         return ;\n+LL |     }\n+LL |     if a {\n+LL |         \n+LL |     } else {\n+LL |         return ;\n+   |\n \n error: aborting due to 7 previous errors\n "}]}