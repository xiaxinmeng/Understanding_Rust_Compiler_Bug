{"sha": "ade0176c20f7e4159a0cb81ae8034acacc915310", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZTAxNzZjMjBmN2U0MTU5YTBjYjgxYWU4MDM0YWNhY2M5MTUzMTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-26T12:24:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-26T12:26:53Z"}, "message": "Remove dead code", "tree": {"sha": "e6eae489689f0d9ffca3a02f910af900585488fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6eae489689f0d9ffca3a02f910af900585488fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ade0176c20f7e4159a0cb81ae8034acacc915310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ade0176c20f7e4159a0cb81ae8034acacc915310", "html_url": "https://github.com/rust-lang/rust/commit/ade0176c20f7e4159a0cb81ae8034acacc915310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ade0176c20f7e4159a0cb81ae8034acacc915310/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bc7ca74dc920a01db32b2a29f70eb9f10c9853", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bc7ca74dc920a01db32b2a29f70eb9f10c9853", "html_url": "https://github.com/rust-lang/rust/commit/09bc7ca74dc920a01db32b2a29f70eb9f10c9853"}], "stats": {"total": 34, "additions": 9, "deletions": 25}, "files": [{"sha": "4a85e7e36d6f76a8ac747490547318edf9e733cf", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade0176c20f7e4159a0cb81ae8034acacc915310/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade0176c20f7e4159a0cb81ae8034acacc915310/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=ade0176c20f7e4159a0cb81ae8034acacc915310", "patch": "@@ -47,7 +47,7 @@ pub use crate::{\n     },\n     has_source::HasSource,\n     semantics::{original_range, Semantics, SemanticsScope},\n-    source_analyzer::{PathResolution, ScopeEntryWithSyntax},\n+    source_analyzer::PathResolution,\n };\n \n pub use hir_def::{"}, {"sha": "b655e2c3204b0691f2e29735150d3fa6279921e0", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ade0176c20f7e4159a0cb81ae8034acacc915310/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade0176c20f7e4159a0cb81ae8034acacc915310/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=ade0176c20f7e4159a0cb81ae8034acacc915310", "patch": "@@ -25,8 +25,8 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, Adt, Const, EnumVariant, Function, Local, MacroDef, Name, Path, Static,\n-    Struct, Trait, Type, TypeAlias, TypeParam,\n+    db::HirDatabase, Adt, Const, EnumVariant, Function, Local, MacroDef, Path, Static, Struct,\n+    Trait, Type, TypeAlias, TypeParam,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -53,22 +53,6 @@ pub enum PathResolution {\n     AssocItem(crate::AssocItem),\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct ScopeEntryWithSyntax {\n-    pub(crate) name: Name,\n-    pub(crate) ptr: Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>,\n-}\n-\n-impl ScopeEntryWithSyntax {\n-    pub fn name(&self) -> &Name {\n-        &self.name\n-    }\n-\n-    pub fn ptr(&self) -> Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>> {\n-        self.ptr\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct ReferenceDescriptor {\n     pub range: TextRange,\n@@ -235,16 +219,16 @@ impl SourceAnalyzer {\n         resolve_hir_path(db, &self.resolver, &hir_path)\n     }\n \n-    fn resolve_local_name(&self, name_ref: &ast::NameRef) -> Option<ScopeEntryWithSyntax> {\n+    fn resolve_local_name(\n+        &self,\n+        name_ref: &ast::NameRef,\n+    ) -> Option<Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>> {\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;\n         let scopes = self.scopes.as_ref()?;\n         let scope = scope_for(scopes, source_map, InFile::new(self.file_id, name_ref.syntax()))?;\n         let entry = scopes.resolve_name_in_scope(scope, &name)?;\n-        Some(ScopeEntryWithSyntax {\n-            name: entry.name().clone(),\n-            ptr: source_map.pat_syntax(entry.pat())?.value,\n-        })\n+        Some(source_map.pat_syntax(entry.pat())?.value)\n     }\n \n     // FIXME: we only use this in `inline_local_variable` assist, ideally, we\n@@ -258,7 +242,7 @@ impl SourceAnalyzer {\n             .filter_map(ast::NameRef::cast)\n             .filter(|name_ref| match self.resolve_local_name(&name_ref) {\n                 None => false,\n-                Some(entry) => entry.ptr() == ptr,\n+                Some(d_ptr) => d_ptr == ptr,\n             })\n             .map(|name_ref| ReferenceDescriptor {\n                 name: name_ref.text().to_string(),"}]}