{"sha": "422ae477ce2a52c8d004ce629318f0b7c1d89638", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMmFlNDc3Y2UyYTUyYzhkMDA0Y2U2MjkzMThmMGI3YzFkODk2Mzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-16T20:19:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-16T20:35:50Z"}, "message": "Unmix error handling when discovering workspaces\n\nHitting an io::Error is a legit problem. Finding more than one\nCargo.toml is not.", "tree": {"sha": "50b9ce2048599e53d68936ba317aa28c6231b4b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b9ce2048599e53d68936ba317aa28c6231b4b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422ae477ce2a52c8d004ce629318f0b7c1d89638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422ae477ce2a52c8d004ce629318f0b7c1d89638", "html_url": "https://github.com/rust-lang/rust/commit/422ae477ce2a52c8d004ce629318f0b7c1d89638", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422ae477ce2a52c8d004ce629318f0b7c1d89638/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be2654b0ed3e4eb51bc3745b2329d6264588549f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be2654b0ed3e4eb51bc3745b2329d6264588549f", "html_url": "https://github.com/rust-lang/rust/commit/be2654b0ed3e4eb51bc3745b2329d6264588549f"}], "stats": {"total": 116, "additions": 41, "deletions": 75}, "files": [{"sha": "03f2629dae0c76f970e503d92b0bd544d28e449e", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 23, "deletions": 55, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/422ae477ce2a52c8d004ce629318f0b7c1d89638/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422ae477ce2a52c8d004ce629318f0b7c1d89638/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=422ae477ce2a52c8d004ce629318f0b7c1d89638", "patch": "@@ -5,9 +5,8 @@ mod json_project;\n mod sysroot;\n \n use std::{\n-    error::Error,\n     fs::{read_dir, File, ReadDir},\n-    io::BufReader,\n+    io::{self, BufReader},\n     path::{Path, PathBuf},\n     process::Command,\n };\n@@ -25,25 +24,6 @@ pub use crate::{\n };\n pub use ra_proc_macro::ProcMacroClient;\n \n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-pub struct CargoTomlNotFoundError {\n-    pub searched_at: PathBuf,\n-    pub reason: String,\n-}\n-\n-impl std::fmt::Display for CargoTomlNotFoundError {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(\n-            fmt,\n-            \"can't find Cargo.toml at {}, due to {}\",\n-            self.searched_at.display(),\n-            self.reason\n-        )\n-    }\n-}\n-\n-impl Error for CargoTomlNotFoundError {}\n-\n #[derive(Debug, Clone)]\n pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`.\n@@ -94,11 +74,25 @@ impl ProjectRoot {\n         bail!(\"project root must point to Cargo.toml or rust-project.json: {}\", path.display())\n     }\n \n-    pub fn discover(path: &Path) -> Result<ProjectRoot, CargoTomlNotFoundError> {\n+    pub fn discover_single(path: &Path) -> Result<ProjectRoot> {\n+        let mut candidates = ProjectRoot::discover(path)?;\n+        let res = match candidates.pop() {\n+            None => bail!(\"no projects\"),\n+            Some(it) => it,\n+        };\n+\n+        if !candidates.is_empty() {\n+            bail!(\"more than one project\")\n+        }\n+        Ok(res)\n+    }\n+\n+    pub fn discover(path: &Path) -> io::Result<Vec<ProjectRoot>> {\n         if let Some(project_json) = find_rust_project_json(path) {\n-            return Ok(ProjectRoot::ProjectJson(project_json));\n+            return Ok(vec![ProjectRoot::ProjectJson(project_json)]);\n         }\n-        return find_cargo_toml(path).map(ProjectRoot::CargoToml);\n+        return find_cargo_toml(path)\n+            .map(|paths| paths.into_iter().map(ProjectRoot::CargoToml).collect());\n \n         fn find_rust_project_json(path: &Path) -> Option<PathBuf> {\n             if path.ends_with(\"rust-project.json\") {\n@@ -117,43 +111,17 @@ impl ProjectRoot {\n             None\n         }\n \n-        fn find_cargo_toml(path: &Path) -> Result<PathBuf, CargoTomlNotFoundError> {\n+        fn find_cargo_toml(path: &Path) -> io::Result<Vec<PathBuf>> {\n             if path.ends_with(\"Cargo.toml\") {\n-                return Ok(path.to_path_buf());\n+                return Ok(vec![path.to_path_buf()]);\n             }\n \n             if let Some(p) = find_cargo_toml_in_parent_dir(path) {\n-                return Ok(p);\n+                return Ok(vec![p]);\n             }\n \n-            let entities = match read_dir(path) {\n-                Ok(entities) => entities,\n-                Err(e) => {\n-                    return Err(CargoTomlNotFoundError {\n-                        searched_at: path.to_path_buf(),\n-                        reason: format!(\"file system error: {}\", e),\n-                    }\n-                    .into());\n-                }\n-            };\n-\n-            let mut valid_canditates = find_cargo_toml_in_child_dir(entities);\n-            return match valid_canditates.len() {\n-                1 => Ok(valid_canditates.remove(0)),\n-                0 => Err(CargoTomlNotFoundError {\n-                    searched_at: path.to_path_buf(),\n-                    reason: \"no Cargo.toml file found\".to_string(),\n-                }\n-                .into()),\n-                _ => Err(CargoTomlNotFoundError {\n-                    searched_at: path.to_path_buf(),\n-                    reason: format!(\n-                        \"multiple equally valid Cargo.toml files found: {:?}\",\n-                        valid_canditates\n-                    ),\n-                }\n-                .into()),\n-            };\n+            let entities = read_dir(path)?;\n+            Ok(find_cargo_toml_in_child_dir(entities))\n         }\n \n         fn find_cargo_toml_in_parent_dir(path: &Path) -> Option<PathBuf> {"}, {"sha": "e620712add63178a65d47df08102e658ce54f410", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422ae477ce2a52c8d004ce629318f0b7c1d89638/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422ae477ce2a52c8d004ce629318f0b7c1d89638/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=422ae477ce2a52c8d004ce629318f0b7c1d89638", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn load_cargo(\n     load_out_dirs_from_check: bool,\n ) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n-    let root = ProjectRoot::discover(&root)?;\n+    let root = ProjectRoot::discover_single(&root)?;\n     let ws = ProjectWorkspace::load(\n         root,\n         &CargoConfig { load_out_dirs_from_check, ..Default::default() },"}, {"sha": "fc4c77f8aa5cab89b926cff3c0c468cb9574d3f7", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/422ae477ce2a52c8d004ce629318f0b7c1d89638/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422ae477ce2a52c8d004ce629318f0b7c1d89638/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=422ae477ce2a52c8d004ce629318f0b7c1d89638", "patch": "@@ -15,6 +15,7 @@ use std::{\n };\n \n use crossbeam_channel::{never, select, unbounded, RecvError, Sender};\n+use itertools::Itertools;\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{\n     NumberOrString, WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressCreateParams,\n@@ -93,27 +94,24 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n             let mut visited = FxHashSet::default();\n             let project_roots = ws_roots\n                 .iter()\n-                .map(|it| ra_project_model::ProjectRoot::discover(it))\n-                .filter_map(|dir| {\n-                    dir.map_err(|cargo_toml_not_found| {\n-                        log::error!(\"discovering workspace failed: {:?}\", cargo_toml_not_found);\n-\n-                        if config.notifications.cargo_toml_not_found {\n-                            show_message(\n-                                req::MessageType::Error,\n-                                format!(\n-                                    \"rust-analyzer failed to discover workspace: {:?}\",\n-                                    cargo_toml_not_found\n-                                ),\n-                                &connection.sender,\n-                            );\n-                        }\n-                    })\n-                    .ok()\n-                })\n-                .filter(|it| visited.insert(it.clone()));\n+                .filter_map(|it| ra_project_model::ProjectRoot::discover(it).ok())\n+                .flatten()\n+                .filter(|it| visited.insert(it.clone()))\n+                .collect::<Vec<_>>();\n+\n+            if project_roots.is_empty() && config.notifications.cargo_toml_not_found {\n+                show_message(\n+                        req::MessageType::Error,\n+                        format!(\n+                            \"rust-analyzer failed to discover workspace, no Cargo.toml found, dirs searched: {}\",\n+                            ws_roots.iter().format_with(\", \", |it, f| f(&it.display()))\n+                        ),\n+                        &connection.sender,\n+                    );\n+            };\n \n             project_roots\n+                .into_iter()\n                 .filter_map(|root| {\n                     ra_project_model::ProjectWorkspace::load(\n                         root,"}]}