{"sha": "1e19fc969ed553934d51b565d5d9ad010cf3b569", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMTlmYzk2OWVkNTUzOTM0ZDUxYjU2NWQ1ZDlhZDAxMGNmM2I1Njk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-13T22:34:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-13T22:34:18Z"}, "message": "Use \"friendly\" types throughout the typechecker", "tree": {"sha": "b21638e156e1cef854dd2f8476c00e19a4a21d40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b21638e156e1cef854dd2f8476c00e19a4a21d40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e19fc969ed553934d51b565d5d9ad010cf3b569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e19fc969ed553934d51b565d5d9ad010cf3b569", "html_url": "https://github.com/rust-lang/rust/commit/1e19fc969ed553934d51b565d5d9ad010cf3b569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e19fc969ed553934d51b565d5d9ad010cf3b569/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45a61b519106e51bf6b83c735eba39488bd0aa23", "url": "https://api.github.com/repos/rust-lang/rust/commits/45a61b519106e51bf6b83c735eba39488bd0aa23", "html_url": "https://github.com/rust-lang/rust/commit/45a61b519106e51bf6b83c735eba39488bd0aa23"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "e93c8fc42c167ebae9b3760e5de72b725b70bb2c", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1e19fc969ed553934d51b565d5d9ad010cf3b569/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/1e19fc969ed553934d51b565d5d9ad010cf3b569/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=1e19fc969ed553934d51b565d5d9ad010cf3b569", "patch": "@@ -244,6 +244,8 @@ let type_error expected actual =\n (* We explicitly curry [cx] like this to avoid threading it through all the\n  * inner functions. *)\n let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n+  let friendly_string_of_ty = friendly_stringify cx (Ast.sprintf_ty ()) in\n+\n   (* Returns the part of the type that matters for typechecking. *)\n   let rec fundamental_ty (ty:Ast.ty) : Ast.ty =\n     match ty with\n@@ -253,7 +255,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n \n   let sprintf_ltype _ (lty:ltype) : string =\n     match lty with\n-        LTYPE_mono ty | LTYPE_poly (_, ty) -> Ast.sprintf_ty () ty\n+        LTYPE_mono ty | LTYPE_poly (_, ty) -> friendly_string_of_ty ty\n       | LTYPE_module items -> Ast.sprintf_mod_items () items\n   in\n \n@@ -529,23 +531,23 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n     let base_ity =\n       match internal_check_lval TYPAT_wild base with\n           LTYPE_poly (_, ty) ->\n-            Common.err None \"can't index the polymorphic type '%a'\"\n-              Ast.sprintf_ty ty\n+            Common.err None \"can't index the polymorphic type '%s'\"\n+              (friendly_string_of_ty ty)\n         | LTYPE_mono ty -> `Type (fundamental_ty ty)\n         | LTYPE_module items -> `Module items\n     in\n \n-    let sprintf_itype chan () =\n+    let string_of_itype () =\n       match base_ity with\n-          `Type ty -> Ast.sprintf_ty chan ty\n-        | `Module items -> Ast.sprintf_mod_items chan items\n+          `Type ty -> friendly_string_of_ty ty\n+        | `Module items -> Ast.sprintf_mod_items () items\n     in\n \n     let _ =\n       iflog cx\n         (fun _ ->\n-           log cx \"base lval %a, base type %a\"\n-             Ast.sprintf_lval base sprintf_itype ())\n+           log cx \"base lval %a, base type %s\"\n+             Ast.sprintf_lval base (string_of_itype ()))\n     in\n \n     let rec typecheck base_ity =\n@@ -558,15 +560,15 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n                 | None ->\n                     Common.err\n                       None\n-                      \"field '%s' is not one of the fields of '%a'\"\n+                      \"field '%s' is not one of the fields of '%s'\"\n                       id\n-                      sprintf_itype ()\n+                      (string_of_itype ())\n             in\n             LTYPE_mono comp_ty\n \n         | `Type (Ast.TY_rec _), _ ->\n-            Common.err None \"the record type '%a' must be indexed by name\"\n-              sprintf_itype ()\n+            Common.err None \"the record type '%s' must be indexed by name\"\n+              (string_of_itype ())\n \n         | `Type (Ast.TY_obj ty_obj), Ast.COMP_named (Ast.COMP_ident id) ->\n             let comp_ty =\n@@ -575,17 +577,17 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n               with Not_found ->\n                 Common.err\n                   None\n-                  \"method '%s' is not one of the methods of '%a'\"\n+                  \"method '%s' is not one of the methods of '%s'\"\n                   id\n-                  sprintf_itype ()\n+                  (string_of_itype ())\n             in\n             LTYPE_mono comp_ty\n \n         | `Type (Ast.TY_obj _), _ ->\n             Common.err\n               None\n-              \"the object type '%a' must be indexed by name\"\n-              sprintf_itype ()\n+              \"the object type '%s' must be indexed by name\"\n+              (string_of_itype ())\n \n         | `Type (Ast.TY_tup ty_tup), Ast.COMP_named (Ast.COMP_idx idx)\n               when idx < Array.length ty_tup ->\n@@ -594,24 +596,24 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n         | `Type (Ast.TY_tup _), Ast.COMP_named (Ast.COMP_idx idx) ->\n             Common.err\n               None\n-              \"member '_%d' is not one of the members of '%a'\"\n+              \"member '_%d' is not one of the members of '%s'\"\n               idx\n-              sprintf_itype ()\n+              (string_of_itype ())\n \n         | `Type (Ast.TY_tup _), _ ->\n             Common.err\n               None\n-              \"the tuple type '%a' must be indexed by tuple index\"\n-              sprintf_itype ()\n+              \"the tuple type '%s' must be indexed by tuple index\"\n+              (string_of_itype ())\n \n         | `Type (Ast.TY_vec ty_vec), Ast.COMP_atom atom ->\n             demand_integer (check_atom atom);\n             LTYPE_mono ty_vec\n \n         | `Type (Ast.TY_vec _), _ ->\n             Common.err None\n-              \"the vector type '%a' must be indexed by an integral type\"\n-              sprintf_itype ()\n+              \"the vector type '%s' must be indexed by an integral type\"\n+              (string_of_itype ())\n \n         | `Type Ast.TY_str, Ast.COMP_atom atom ->\n             demand_integer (check_atom atom);\n@@ -626,15 +628,15 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n             typecheck (`Type ty_box)  (* automatically dereference! *)\n \n         | `Type ty, Ast.COMP_named (Ast.COMP_ident _) ->\n-            Common.err None \"the type '%a' can't be indexed by name\"\n-              Ast.sprintf_ty ty\n+            Common.err None \"the type '%s' can't be indexed by name\"\n+              (friendly_string_of_ty ty)\n \n         | `Type ty, Ast.COMP_named (Ast.COMP_app _) ->\n             Common.err\n               None\n-              \"the type '%a' has no type parameters, so it can't be applied \\\n+              \"the type '%s' has no type parameters, so it can't be applied \\\n               to types\"\n-              Ast.sprintf_ty ty\n+              (friendly_string_of_ty ty)\n \n         | `Module items, Ast.COMP_named ((Ast.COMP_ident id) as name_comp)\n         | `Module items, Ast.COMP_named ((Ast.COMP_app (id, _))\n@@ -666,21 +668,21 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n         | _, Ast.COMP_named (Ast.COMP_idx _) ->\n             Common.err\n               None\n-              \"%a isn't a tuple, so it can't be indexed by tuple index\"\n-              sprintf_itype ()\n+              \"%s isn't a tuple, so it can't be indexed by tuple index\"\n+              (string_of_itype ())\n \n         | _, Ast.COMP_atom atom ->\n             Common.err\n               None\n-              \"%a can't by indexed by the type '%a'\"\n-              sprintf_itype ()\n-              Ast.sprintf_ty (check_atom atom)\n+              \"%s can't by indexed by the type '%s'\"\n+              (string_of_itype ())\n+              (friendly_string_of_ty (check_atom atom))\n \n         | _, Ast.COMP_deref ->\n             Common.err\n               None\n-              \"%a isn't a box and can't be dereferenced\"\n-              sprintf_itype ()\n+              \"%s isn't a box and can't be dereferenced\"\n+              (string_of_itype ())\n     in\n     typecheck base_ity\n \n@@ -749,10 +751,10 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n       | TYPAT_ty expected, (LTYPE_poly _ as lty) ->\n           Common.err\n             None\n-            \"not enough context to automatically instantiate '%a' to '%a'; \\\n+            \"not enough context to automatically instantiate '%a' to '%s'; \\\n             please supply type parameters explicitly\"\n             sprintf_ltype lty\n-            Ast.sprintf_ty expected\n+            (friendly_string_of_ty expected)\n       | _, LTYPE_module _ ->\n           Common.err None \"can't refer to a module as a first-class value\"\n \n@@ -1033,9 +1035,9 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n                     then ()\n                     else\n                       Common.err None\n-                        \"mismatched types in vec-append: %a += %a\"\n-                        Ast.sprintf_ty dst_ty\n-                        Ast.sprintf_ty src_ty\n+                        \"mismatched types in vec-append: %s += %s\"\n+                        (friendly_string_of_ty dst_ty)\n+                        (friendly_string_of_ty src_ty)\n                 | Ast.TY_str, (Ast.TY_mach Common.TY_u8)\n                 | Ast.TY_str, Ast.TY_str -> ()\n                 | _ ->"}]}