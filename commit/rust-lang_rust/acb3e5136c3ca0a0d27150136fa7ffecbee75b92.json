{"sha": "acb3e5136c3ca0a0d27150136fa7ffecbee75b92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYjNlNTEzNmMzY2EwYTBkMjcxNTAxMzZmYTdmZmVjYmVlNzViOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-11T11:06:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-11T11:06:14Z"}, "message": "Auto merge of #24268 - pnkfelix:regression-tests, r=alexcrichton\n\nA pair of regression tests for issues that seem to have been fixed since they were originally filed.", "tree": {"sha": "18233e0a741a7eb541f3ccc251bea3a99ad1a00c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18233e0a741a7eb541f3ccc251bea3a99ad1a00c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb3e5136c3ca0a0d27150136fa7ffecbee75b92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb3e5136c3ca0a0d27150136fa7ffecbee75b92", "html_url": "https://github.com/rust-lang/rust/commit/acb3e5136c3ca0a0d27150136fa7ffecbee75b92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb3e5136c3ca0a0d27150136fa7ffecbee75b92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0be4e0ec504c02b21f92c257b5de3658962373fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be4e0ec504c02b21f92c257b5de3658962373fe", "html_url": "https://github.com/rust-lang/rust/commit/0be4e0ec504c02b21f92c257b5de3658962373fe"}, {"sha": "fb6d780dbeb78c88e1cc6668d29f0892cf7da5ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6d780dbeb78c88e1cc6668d29f0892cf7da5ef", "html_url": "https://github.com/rust-lang/rust/commit/fb6d780dbeb78c88e1cc6668d29f0892cf7da5ef"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "cd55b9fbaa345e83ca6cc0324cf3713741b694e2", "filename": "src/test/run-pass/issue-21400.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/acb3e5136c3ca0a0d27150136fa7ffecbee75b92/src%2Ftest%2Frun-pass%2Fissue-21400.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3e5136c3ca0a0d27150136fa7ffecbee75b92/src%2Ftest%2Frun-pass%2Fissue-21400.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21400.rs?ref=acb3e5136c3ca0a0d27150136fa7ffecbee75b92", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #21400 which itself was extracted from\n+// stackoverflow.com/questions/28031155/is-my-borrow-checker-drunk/28031580\n+\n+fn main() {\n+    let mut t = Test;\n+    assert_eq!(t.method1(\"one\"), Ok(1));\n+    assert_eq!(t.method2(\"two\"), Ok(2));\n+    assert_eq!(t.test(), Ok(2));\n+}\n+\n+struct Test;\n+\n+impl Test {\n+    fn method1(&mut self, _arg: &str) -> Result<usize, &str> {\n+        Ok(1)\n+    }\n+\n+    fn method2(self: &mut Test, _arg: &str) -> Result<usize, &str> {\n+        Ok(2)\n+    }\n+\n+    fn test(self: &mut Test) -> Result<usize, &str> {\n+        let s = format!(\"abcde\");\n+        // (Originally, this invocation of method2 was saying that `s`\n+        // does not live long enough.)\n+        let data = match self.method2(&*s) {\n+            Ok(r) => r,\n+            Err(e) => return Err(e)\n+        };\n+        Ok(data)\n+    }\n+}\n+\n+// Below is a closer match for the original test that was failing to compile\n+\n+pub struct GitConnect;\n+\n+impl GitConnect {\n+    fn command(self: &mut GitConnect, _s: &str) -> Result<Vec<Vec<u8>>, &str> {\n+        unimplemented!()\n+    }\n+\n+    pub fn git_upload_pack(self: &mut GitConnect) -> Result<String, &str> {\n+        let c = format!(\"git-upload-pack\");\n+\n+        let mut out = String::new();\n+        let data = try!(self.command(&c));\n+\n+        for line in data.iter() {\n+            out.push_str(&format!(\"{:?}\", line));\n+        }\n+\n+        Ok(out)\n+    }\n+}\n+"}, {"sha": "7f8bd7a95f7a7e5e48f5aaaf9e8c43c06d62b462", "filename": "src/test/run-pass/issue-21486.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/acb3e5136c3ca0a0d27150136fa7ffecbee75b92/src%2Ftest%2Frun-pass%2Fissue-21486.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3e5136c3ca0a0d27150136fa7ffecbee75b92/src%2Ftest%2Frun-pass%2Fissue-21486.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21486.rs?ref=acb3e5136c3ca0a0d27150136fa7ffecbee75b92", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #21486: Make sure that all structures are dropped, even when\n+// created via FRU and control-flow breaks in the middle of\n+// construction.\n+\n+\n+use std::sync::atomic::{Ordering, AtomicUsize, ATOMIC_USIZE_INIT};\n+\n+#[derive(Debug)]\n+struct Noisy(u8);\n+impl Drop for Noisy {\n+    fn drop(&mut self) {\n+        // println!(\"splat #{}\", self.0);\n+        event(self.0);\n+    }\n+}\n+\n+#[allow(dead_code)]\n+#[derive(Debug)]\n+struct Foo { n0: Noisy, n1: Noisy }\n+impl Foo {\n+    fn vals(&self) -> (u8, u8) { (self.n0.0, self.n1.0) }\n+}\n+\n+fn leak_1_ret() -> Foo {\n+    let _old_foo = Foo { n0: Noisy(1), n1: Noisy(2) };\n+    Foo { n0: { return Foo { n0: Noisy(3), n1: Noisy(4) } },\n+          .._old_foo\n+    };\n+}\n+\n+fn leak_2_ret() -> Foo {\n+    let _old_foo = Foo { n0: Noisy(1), n1: Noisy(2) };\n+    Foo { n1: { return Foo { n0: Noisy(3), n1: Noisy(4) } },\n+          .._old_foo\n+    };\n+}\n+\n+// In this case, the control flow break happens *before* we construct\n+// `Foo(Noisy(1),Noisy(2))`, so there should be no record of it in the\n+// event log.\n+fn leak_3_ret() -> Foo {\n+    let _old_foo = || Foo { n0: Noisy(1), n1: Noisy(2) };\n+    Foo { n1: { return Foo { n0: Noisy(3), n1: Noisy(4) } },\n+          .._old_foo()\n+    };\n+}\n+\n+pub fn main() {\n+    reset_log();\n+    assert_eq!(leak_1_ret().vals(), (3,4));\n+    assert_eq!(0x01_02_03_04, event_log());\n+\n+    reset_log();\n+    assert_eq!(leak_2_ret().vals(), (3,4));\n+    assert_eq!(0x01_02_03_04, event_log());\n+\n+    reset_log();\n+    assert_eq!(leak_3_ret().vals(), (3,4));\n+    assert_eq!(0x03_04, event_log());\n+}\n+\n+static LOG: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+fn reset_log() {\n+    LOG.store(0, Ordering::SeqCst);\n+}\n+\n+fn event_log() -> usize {\n+    LOG.load(Ordering::SeqCst)\n+}\n+\n+fn event(tag: u8) {\n+    let old_log = LOG.load(Ordering::SeqCst);\n+    let new_log = (old_log << 8) + tag as usize;\n+    LOG.store(new_log, Ordering::SeqCst);\n+}"}]}