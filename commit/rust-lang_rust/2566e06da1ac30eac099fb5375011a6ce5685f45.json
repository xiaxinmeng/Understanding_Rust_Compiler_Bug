{"sha": "2566e06da1ac30eac099fb5375011a6ce5685f45", "node_id": "C_kwDOAAsO6NoAKDI1NjZlMDZkYTFhYzMwZWFjMDk5ZmI1Mzc1MDExYTZjZTU2ODVmNDU", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-11-25T11:01:49Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-11-25T11:01:49Z"}, "message": "Merge commit '8e38833c3674c1be7d81c6069c62e6ed52b18b27' into HEAD", "tree": {"sha": "09fac559dcc647f17f68a871f86f18462525264f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09fac559dcc647f17f68a871f86f18462525264f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2566e06da1ac30eac099fb5375011a6ce5685f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2566e06da1ac30eac099fb5375011a6ce5685f45", "html_url": "https://github.com/rust-lang/rust/commit/2566e06da1ac30eac099fb5375011a6ce5685f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2566e06da1ac30eac099fb5375011a6ce5685f45/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d2cb42a413e51deb50b36794a2e1605381878fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2cb42a413e51deb50b36794a2e1605381878fc", "html_url": "https://github.com/rust-lang/rust/commit/9d2cb42a413e51deb50b36794a2e1605381878fc"}, {"sha": "8e38833c3674c1be7d81c6069c62e6ed52b18b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e38833c3674c1be7d81c6069c62e6ed52b18b27", "html_url": "https://github.com/rust-lang/rust/commit/8e38833c3674c1be7d81c6069c62e6ed52b18b27"}], "stats": {"total": 105, "additions": 95, "deletions": 10}, "files": [{"sha": "ca8eb1309de3dce3d92aa96a3e03a14ded9c781a", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2566e06da1ac30eac099fb5375011a6ce5685f45/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/2566e06da1ac30eac099fb5375011a6ce5685f45/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=2566e06da1ac30eac099fb5375011a6ce5685f45", "patch": "@@ -18,6 +18,7 @@ env:\n   FETCH_DEPTH: 0 # pull in the tags for the version string\n   MACOSX_DEPLOYMENT_TARGET: 10.15\n   CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc\n+  CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc\n \n jobs:\n   dist:\n@@ -36,6 +37,9 @@ jobs:\n           - os: ubuntu-18.04\n             target: aarch64-unknown-linux-gnu\n             code-target: linux-arm64\n+          - os: ubuntu-18.04\n+            target: arm-unknown-linux-gnueabihf\n+            code-target: linux-armhf\n           - os: macos-11\n             target: x86_64-apple-darwin\n             code-target: darwin-x64\n@@ -67,13 +71,17 @@ jobs:\n           node-version: 14.x\n \n       - name: Update apt repositories\n-        if: matrix.target == 'aarch64-unknown-linux-gnu'\n+        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'arm-unknown-linux-gnueabihf'\n         run: sudo apt-get update\n \n-      - name: Install target toolchain\n+      - name: Install AArch64 target toolchain\n         if: matrix.target == 'aarch64-unknown-linux-gnu'\n         run: sudo apt-get install gcc-aarch64-linux-gnu\n \n+      - name: Install ARM target toolchain\n+        if: matrix.target == 'arm-unknown-linux-gnueabihf'\n+        run: sudo apt-get install gcc-arm-linux-gnueabihf\n+\n       - name: Dist\n         run: cargo xtask dist --client-patch-version ${{ github.run_number }}\n \n@@ -204,6 +212,10 @@ jobs:\n         with:\n           name: dist-aarch64-unknown-linux-gnu\n           path: dist\n+      - uses: actions/download-artifact@v1\n+        with:\n+          name: dist-arm-unknown-linux-gnueabihf\n+          path: dist\n       - uses: actions/download-artifact@v1\n         with:\n           name: dist-x86_64-pc-windows-msvc"}, {"sha": "05e0ceb05a9a307a5dfa037fe71935534d906c37", "filename": "crates/hir-def/src/import_map.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2566e06da1ac30eac099fb5375011a6ce5685f45/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566e06da1ac30eac099fb5375011a6ce5685f45/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fimport_map.rs?ref=2566e06da1ac30eac099fb5375011a6ce5685f45", "patch": "@@ -167,7 +167,11 @@ fn collect_import_map(db: &dyn DefDatabase, krate: CrateId) -> ImportMap {\n \n         let visible_items = mod_data.scope.entries().filter_map(|(name, per_ns)| {\n             let per_ns = per_ns.filter_visibility(|vis| vis == Visibility::Public);\n-            if per_ns.is_none() { None } else { Some((name, per_ns)) }\n+            if per_ns.is_none() {\n+                None\n+            } else {\n+                Some((name, per_ns))\n+            }\n         });\n \n         for (name, per_ns) in visible_items {"}, {"sha": "bc83ad5494bfb56bd7209049fed03026e9e0c319", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2566e06da1ac30eac099fb5375011a6ce5685f45/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566e06da1ac30eac099fb5375011a6ce5685f45/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=2566e06da1ac30eac099fb5375011a6ce5685f45", "patch": "@@ -349,7 +349,11 @@ impl DefMap {\n \n     pub(crate) fn crate_root(&self, db: &dyn DefDatabase) -> ModuleId {\n         self.with_ancestor_maps(db, self.root, &mut |def_map, _module| {\n-            if def_map.block.is_none() { Some(def_map.module_id(def_map.root)) } else { None }\n+            if def_map.block.is_none() {\n+                Some(def_map.module_id(def_map.root))\n+            } else {\n+                None\n+            }\n         })\n         .expect(\"DefMap chain without root\")\n     }"}, {"sha": "3155f97f258dcfa82a22b95fa8dd85c87287ac06", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 71, "deletions": 6, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2566e06da1ac30eac099fb5375011a6ce5685f45/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566e06da1ac30eac099fb5375011a6ce5685f45/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=2566e06da1ac30eac099fb5375011a6ce5685f45", "patch": "@@ -373,11 +373,13 @@ pub(crate) fn runnable_impl(\n     let adt_name = ty.as_adt()?.name(sema.db);\n     let mut ty_args = ty.type_arguments().peekable();\n     let params = if ty_args.peek().is_some() {\n-        format!(\"<{}>\", ty_args.format_with(\", \", |ty, cb| cb(&ty.display(sema.db))))\n+        format!(\"<{}>\", ty_args.format_with(\",\", |ty, cb| cb(&ty.display(sema.db))))\n     } else {\n         String::new()\n     };\n-    let test_id = TestId::Path(format!(\"{}{}\", adt_name, params));\n+    let mut test_id = format!(\"{}{}\", adt_name, params);\n+    test_id.retain(|c| c != ' ');\n+    let test_id = TestId::Path(test_id);\n \n     Some(Runnable { use_name_in_title: false, nav, kind: RunnableKind::DocTest { test_id }, cfg })\n }\n@@ -441,10 +443,11 @@ fn module_def_doctest(db: &RootDatabase, def: Definition) -> Option<Runnable> {\n                         format_to!(\n                             path,\n                             \"<{}>\",\n-                            ty_args.format_with(\", \", |ty, cb| cb(&ty.display(db)))\n+                            ty_args.format_with(\",\", |ty, cb| cb(&ty.display(db)))\n                         );\n                     }\n                     format_to!(path, \"::{}\", def_name);\n+                    path.retain(|c| c != ' ');\n                     return Some(path);\n                 }\n             }\n@@ -2067,13 +2070,23 @@ mod tests {\n $0\n struct Foo<T, U>;\n \n+/// ```\n+/// ```\n impl<T, U> Foo<T, U> {\n     /// ```rust\n     /// ````\n     fn t() {}\n }\n+\n+/// ```\n+/// ```\n+impl Foo<Foo<(), ()>, ()> {\n+    /// ```\n+    /// ```\n+    fn t() {}\n+}\n \"#,\n-            &[DocTest],\n+            &[DocTest, DocTest, DocTest, DocTest],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -2082,12 +2095,64 @@ impl<T, U> Foo<T, U> {\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 47..85,\n+                            full_range: 20..103,\n+                            focus_range: 47..56,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Foo<T,U>\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 63..101,\n+                            name: \"t\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Foo<T,U>::t\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 105..188,\n+                            focus_range: 126..146,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Foo<Foo<(),()>,()>\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 153..186,\n                             name: \"t\",\n                         },\n                         kind: DocTest {\n                             test_id: Path(\n-                                \"Foo<T, U>::t\",\n+                                \"Foo<Foo<(),()>,()>::t\",\n                             ),\n                         },\n                         cfg: None,"}]}