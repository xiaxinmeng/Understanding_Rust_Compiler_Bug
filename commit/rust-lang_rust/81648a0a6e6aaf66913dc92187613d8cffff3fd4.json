{"sha": "81648a0a6e6aaf66913dc92187613d8cffff3fd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjQ4YTBhNmU2YWFmNjY5MTNkYzkyMTg3NjEzZDhjZmZmZjNmZDQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-02-07T01:45:37Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-02-14T11:36:51Z"}, "message": "rustc_mir: rename qualify_consts::Qualifier to ConstCx and keep in Checker as a field.", "tree": {"sha": "dbb0bb56a877dcc426115f09de7b723b92d3c8bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb0bb56a877dcc426115f09de7b723b92d3c8bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81648a0a6e6aaf66913dc92187613d8cffff3fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81648a0a6e6aaf66913dc92187613d8cffff3fd4", "html_url": "https://github.com/rust-lang/rust/commit/81648a0a6e6aaf66913dc92187613d8cffff3fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81648a0a6e6aaf66913dc92187613d8cffff3fd4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99fc3eff5795024b6d1bb510b06dfd4cb2049b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/99fc3eff5795024b6d1bb510b06dfd4cb2049b72", "html_url": "https://github.com/rust-lang/rust/commit/99fc3eff5795024b6d1bb510b06dfd4cb2049b72"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "3a103e62297c4b260008191f2096fe6d95fb92eb", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/81648a0a6e6aaf66913dc92187613d8cffff3fd4/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81648a0a6e6aaf66913dc92187613d8cffff3fd4/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=81648a0a6e6aaf66913dc92187613d8cffff3fd4", "patch": "@@ -25,6 +25,7 @@ use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n+use std::ops::Deref;\n use std::usize;\n \n use crate::transform::{MirPass, MirSource};\n@@ -106,16 +107,16 @@ impl fmt::Display for Mode {\n     }\n }\n \n-struct Qualifier<'a, 'tcx> {\n+struct ConstCx<'a, 'tcx> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     mode: Mode,\n     mir: &'a Mir<'tcx>,\n \n-    local_qualif: &'a IndexVec<Local, Qualif>,\n+    local_qualif: IndexVec<Local, Qualif>,\n }\n \n-impl<'a, 'tcx> Qualifier<'a, 'tcx> {\n+impl<'a, 'tcx> ConstCx<'a, 'tcx> {\n     fn qualify_any_value_of_ty(&self, ty: Ty<'tcx>) -> Qualif {\n         Qualif::any_value_of_ty(ty, self.tcx, self.param_env)\n     }\n@@ -436,15 +437,12 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx> {\n }\n \n struct Checker<'a, 'tcx> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    mode: Mode,\n+    cx: ConstCx<'a, 'tcx>,\n+\n     span: Span,\n     def_id: DefId,\n-    mir: &'a Mir<'tcx>,\n     rpo: ReversePostorder<'a, 'tcx>,\n \n-    local_qualif: IndexVec<Local, Qualif>,\n     temp_promotion_state: IndexVec<Local, TempState>,\n     promotion_candidates: Vec<Candidate>,\n }\n@@ -458,6 +456,14 @@ macro_rules! unleash_miri {\n     }}\n }\n \n+impl Deref for Checker<'a, 'tcx> {\n+    type Target = ConstCx<'a, 'tcx>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.cx\n+    }\n+}\n+\n impl<'a, 'tcx> Checker<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            def_id: DefId,\n@@ -489,29 +495,21 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         }).collect();\n \n         Checker {\n-            mode,\n+            cx: ConstCx {\n+                tcx,\n+                param_env,\n+                mode,\n+                mir,\n+                local_qualif,\n+            },\n             span: mir.span,\n             def_id,\n-            mir,\n             rpo,\n-            tcx,\n-            param_env,\n-            local_qualif,\n             temp_promotion_state: temps,\n             promotion_candidates: vec![]\n         }\n     }\n \n-    fn qualifier(&'a self) -> Qualifier<'a, 'tcx> {\n-        Qualifier {\n-            tcx: self.tcx,\n-            param_env: self.param_env,\n-            mode: self.mode,\n-            mir: self.mir,\n-            local_qualif: &self.local_qualif,\n-        }\n-    }\n-\n     // FIXME(eddyb) we could split the errors into meaningful\n     // categories, but enabling full miri would make that\n     // slightly pointless (even with feature-gating).\n@@ -545,7 +543,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 if self.mir.local_kind(index) == LocalKind::Temp\n                 && self.temp_promotion_state[index].is_promotable() {\n                     debug!(\"store to promotable temp {:?} ({:?})\", index, qualif);\n-                    let slot = &mut self.local_qualif[index];\n+                    let slot = &mut self.cx.local_qualif[index];\n                     if !slot.is_empty() {\n                         span_bug!(self.span, \"multiple assignments to {:?}\", dest);\n                     }\n@@ -586,20 +584,23 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 }\n             }\n         };\n-        debug!(\"store to var {:?}\", index);\n+\n+        let kind = self.mir.local_kind(index);\n+        debug!(\"store to {:?} {:?}\", kind, index);\n+\n         // this is overly restrictive, because even full assignments do not clear the qualif\n         // While we could special case full assignments, this would be inconsistent with\n         // aggregates where we overwrite all fields via assignments, which would not get\n         // that feature.\n-        let slot = &mut self.local_qualif[index];\n+        let slot = &mut self.cx.local_qualif[index];\n         *slot = *slot | qualif;\n \n         // Ensure we keep the `NOT_PROMOTABLE` flag is preserved.\n         // NOTE(eddyb) this is actually unnecessary right now, as\n         // we never replace the local's qualif (but we might in\n         // the future) - also, if `NOT_PROMOTABLE` only matters\n         // for `Mode::Fn`, then this is also pointless.\n-        if self.mir.local_kind(index) == LocalKind::Temp {\n+        if kind == LocalKind::Temp {\n             if !self.temp_promotion_state[index].is_promotable() {\n                 *slot = *slot | Qualif::NOT_PROMOTABLE;\n             }\n@@ -664,7 +665,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         // Account for errors in consts by using the\n         // conservative type qualification instead.\n         if qualif.intersects(Qualif::NOT_CONST) {\n-            qualif = self.qualifier().qualify_any_value_of_ty(mir.return_ty());\n+            qualif = self.qualify_any_value_of_ty(mir.return_ty());\n         }\n \n \n@@ -690,7 +691,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n     }\n }\n \n-/// Checks MIR for const-correctness, using `Qualifier`\n+/// Checks MIR for const-correctness, using `ConstCx`\n /// for value qualifications, and accumulates writes of\n /// rvalue/call results to locals, in `local_qualif`.\n /// For functions (constant or not), it also records\n@@ -821,7 +822,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             Operand::Move(ref place) => {\n                 // Mark the consumed locals to indicate later drops are noops.\n                 if let Place::Local(local) = *place {\n-                    let slot = &mut self.local_qualif[local];\n+                    let slot = &mut self.cx.local_qualif[local];\n                     *slot = *slot - Qualif::NEEDS_DROP;\n                 }\n             }\n@@ -960,7 +961,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         if let TerminatorKind::Call { ref func, ref args, ref destination, .. } = *kind {\n             if let Some((ref dest, _)) = *destination {\n                 let ty = dest.ty(self.mir, self.tcx).to_ty(self.tcx);\n-                let qualif = self.qualifier().qualify_call(func, args, ty);\n+                let qualif = self.qualify_call(func, args, ty);\n                 self.assign(dest, qualif, location);\n             }\n \n@@ -1013,7 +1014,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                                     // stable const fns or unstable const fns\n                                     // with their feature gate active\n                                     // FIXME(eddyb) move stability checks from `is_const_fn` here.\n-                                } else if self.qualifier().is_const_panic_fn(def_id) {\n+                                } else if self.is_const_panic_fn(def_id) {\n                                     // Check the const_panic feature gate.\n                                     // FIXME: cannot allow this inside `allow_internal_unstable`\n                                     // because that would make `panic!` insta stable in constants,\n@@ -1093,7 +1094,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     // which happens even without the user requesting it.\n                     // We can error out with a hard error if the argument is not\n                     // constant here.\n-                    let arg_qualif = self.qualifier().qualify_operand(arg);\n+                    let arg_qualif = self.qualify_operand(arg);\n                     if (arg_qualif - Qualif::NOT_PROMOTABLE).is_empty() {\n                         debug!(\"visit_terminator_kind: candidate={:?}\", candidate);\n                         self.promotion_candidates.push(candidate);\n@@ -1157,7 +1158,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n         debug!(\"visit_assign: dest={:?} rvalue={:?} location={:?}\", dest, rvalue, location);\n-        let mut qualif = self.qualifier().qualify_rvalue(rvalue);\n+        let mut qualif = self.qualify_rvalue(rvalue);\n \n         if let Rvalue::Ref(_, kind, ref place) = *rvalue {\n             // Getting `MUTABLE_INTERIOR` from `qualify_rvalue` means"}]}