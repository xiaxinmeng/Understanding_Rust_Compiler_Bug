{"sha": "e7c94697867a9fe9e2956195f3235dbf2b0fec27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3Yzk0Njk3ODY3YTlmZTllMjk1NjE5NWYzMjM1ZGJmMmIwZmVjMjc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-27T01:02:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T01:02:09Z"}, "message": "Rollup merge of #85583 - cjgillot:no-previous-dg, r=petrochenkov\n\nGet rid of PreviousDepGraph.\n\nIts only role is to access the `SerializedDepGraph`.", "tree": {"sha": "b07628805c21032ca44c1543863d8bed5144597c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b07628805c21032ca44c1543863d8bed5144597c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c94697867a9fe9e2956195f3235dbf2b0fec27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgru+RCRBK7hj4Ov3rIwAA9wcIAKAkNAvSeeh8TvJXQbXuVvSR\nWOse/0CIoJyP4lbUQISF/VRH4HLqsXUx/XUek3rY+oCmpojgNDJzudsjgHArKkhW\nQCVTDPr3VDT6koK3SnJCzhGTwvY/iU5tGmP5Jt8kFDYjKwnZrGSYPqRjgMDHOhQ8\np+AVG5KWsM5YgHGU2N5DKVG55oo3iaM4m/TC99GRbCLOS+OMiWYuxbaUgIUfcw/l\nVSKYR5hLdz1mfSFkUjCMoDQB3sPYrmYEdvehibY8R5QFOU4WF4QQRstvhkE4tC65\nBHuvTa3wmtj3tyl0W0FvNe1DGRL/aRMvSnbxyvffh2u53hkcVyE2kAAZX15qzl0=\n=iJOV\n-----END PGP SIGNATURE-----\n", "payload": "tree b07628805c21032ca44c1543863d8bed5144597c\nparent 9d4a6449db6624e18373cea10f1def6cb670f063\nparent a50f1e949b4f7b3b35ee0be041cbf490d6e21314\nauthor Dylan DPC <dylan.dpc@gmail.com> 1622077329 +0200\ncommitter GitHub <noreply@github.com> 1622077329 +0200\n\nRollup merge of #85583 - cjgillot:no-previous-dg, r=petrochenkov\n\nGet rid of PreviousDepGraph.\n\nIts only role is to access the `SerializedDepGraph`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c94697867a9fe9e2956195f3235dbf2b0fec27", "html_url": "https://github.com/rust-lang/rust/commit/e7c94697867a9fe9e2956195f3235dbf2b0fec27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c94697867a9fe9e2956195f3235dbf2b0fec27/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d4a6449db6624e18373cea10f1def6cb670f063", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4a6449db6624e18373cea10f1def6cb670f063", "html_url": "https://github.com/rust-lang/rust/commit/9d4a6449db6624e18373cea10f1def6cb670f063"}, {"sha": "a50f1e949b4f7b3b35ee0be041cbf490d6e21314", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50f1e949b4f7b3b35ee0be041cbf490d6e21314", "html_url": "https://github.com/rust-lang/rust/commit/a50f1e949b4f7b3b35ee0be041cbf490d6e21314"}], "stats": {"total": 128, "additions": 49, "deletions": 79}, "files": [{"sha": "303c39a39a9209b7a1c8f1a3c60aeb49052ca40f", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=e7c94697867a9fe9e2956195f3235dbf2b0fec27", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::definitions::DefPathTable;\n-use rustc_middle::dep_graph::{PreviousDepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n+use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::query::OnDiskCache;\n use rustc_serialize::opaque::Decoder;\n use rustc_serialize::Decodable;\n@@ -22,8 +22,8 @@ pub enum LoadResult<T> {\n     Error { message: String },\n }\n \n-impl LoadResult<(PreviousDepGraph, WorkProductMap)> {\n-    pub fn open(self, sess: &Session) -> (PreviousDepGraph, WorkProductMap) {\n+impl LoadResult<(SerializedDepGraph, WorkProductMap)> {\n+    pub fn open(self, sess: &Session) -> (SerializedDepGraph, WorkProductMap) {\n         match self {\n             LoadResult::Error { message } => {\n                 sess.warn(&message);\n@@ -84,7 +84,7 @@ impl<T> MaybeAsync<T> {\n     }\n }\n \n-pub type DepGraphFuture = MaybeAsync<LoadResult<(PreviousDepGraph, WorkProductMap)>>;\n+pub type DepGraphFuture = MaybeAsync<LoadResult<(SerializedDepGraph, WorkProductMap)>>;\n \n /// Launch a thread and load the dependency graph in the background.\n pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n@@ -185,7 +185,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n                 let dep_graph = SerializedDepGraph::decode(&mut decoder)\n                     .expect(\"Error reading cached dep-graph\");\n \n-                LoadResult::Ok { data: (PreviousDepGraph::new(dep_graph), prev_work_products) }\n+                LoadResult::Ok { data: (dep_graph, prev_work_products) }\n             }\n         }\n     }))"}, {"sha": "9603b102cbc5d73aa6cc7788a299d16c1162b1a8", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=e7c94697867a9fe9e2956195f3235dbf2b0fec27", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::join;\n-use rustc_middle::dep_graph::{DepGraph, PreviousDepGraph, WorkProduct, WorkProductId};\n+use rustc_middle::dep_graph::{DepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_serialize::Encodable as RustcEncodable;\n@@ -186,7 +186,7 @@ fn encode_query_cache(tcx: TyCtxt<'_>, encoder: &mut FileEncoder) -> FileEncodeR\n \n pub fn build_dep_graph(\n     sess: &Session,\n-    prev_graph: PreviousDepGraph,\n+    prev_graph: SerializedDepGraph,\n     prev_work_products: FxHashMap<WorkProductId, WorkProduct>,\n ) -> Option<DepGraph> {\n     if sess.opts.incremental.is_none() {"}, {"sha": "aa61219ad789e9f523e3c01bd9abd30453435db9", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=e7c94697867a9fe9e2956195f3235dbf2b0fec27", "patch": "@@ -18,7 +18,6 @@ crate use dep_node::{make_compile_codegen_unit, make_compile_mono_item};\n pub type DepGraph = rustc_query_system::dep_graph::DepGraph<DepKind>;\n pub type TaskDeps = rustc_query_system::dep_graph::TaskDeps<DepKind>;\n pub type DepGraphQuery = rustc_query_system::dep_graph::DepGraphQuery<DepKind>;\n-pub type PreviousDepGraph = rustc_query_system::dep_graph::PreviousDepGraph<DepKind>;\n pub type SerializedDepGraph = rustc_query_system::dep_graph::SerializedDepGraph<DepKind>;\n pub type EdgeFilter = rustc_query_system::dep_graph::debug::EdgeFilter<DepKind>;\n "}, {"sha": "38010b7786814e6d0e0d2e428ce1e3393e125983", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=e7c94697867a9fe9e2956195f3235dbf2b0fec27", "patch": "@@ -19,9 +19,8 @@ use std::marker::PhantomData;\n use std::mem;\n use std::sync::atomic::Ordering::Relaxed;\n \n-use super::prev::PreviousDepGraph;\n use super::query::DepGraphQuery;\n-use super::serialized::{GraphEncoder, SerializedDepNodeIndex};\n+use super::serialized::{GraphEncoder, SerializedDepGraph, SerializedDepNodeIndex};\n use super::{DepContext, DepKind, DepNode, HasDepContext, WorkProductId};\n use crate::query::QueryContext;\n \n@@ -78,7 +77,7 @@ struct DepGraphData<K: DepKind> {\n \n     /// The dep-graph from the previous compilation session. It contains all\n     /// nodes and edges as well as all fingerprints of nodes that have them.\n-    previous: PreviousDepGraph<K>,\n+    previous: SerializedDepGraph<K>,\n \n     colors: DepNodeColorMap,\n \n@@ -109,7 +108,7 @@ where\n \n impl<K: DepKind> DepGraph<K> {\n     pub fn new(\n-        prev_graph: PreviousDepGraph<K>,\n+        prev_graph: SerializedDepGraph<K>,\n         prev_work_products: FxHashMap<WorkProductId, WorkProduct>,\n         encoder: FileEncoder,\n         record_graph: bool,\n@@ -857,7 +856,7 @@ rustc_index::newtype_index! {\n /// For this reason, we avoid storing `DepNode`s more than once as map\n /// keys. The `new_node_to_index` map only contains nodes not in the previous\n /// graph, and we map nodes in the previous graph to indices via a two-step\n-/// mapping. `PreviousDepGraph` maps from `DepNode` to `SerializedDepNodeIndex`,\n+/// mapping. `SerializedDepGraph` maps from `DepNode` to `SerializedDepNodeIndex`,\n /// and the `prev_index_to_index` vector (which is more compact and faster than\n /// using a map) maps from `SerializedDepNodeIndex` to `DepNodeIndex`.\n ///\n@@ -982,7 +981,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n     fn intern_node(\n         &self,\n         profiler: &SelfProfilerRef,\n-        prev_graph: &PreviousDepGraph<K>,\n+        prev_graph: &SerializedDepGraph<K>,\n         key: DepNode<K>,\n         edges: EdgesVec,\n         fingerprint: Option<Fingerprint>,\n@@ -1080,7 +1079,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n     fn promote_node_and_deps_to_current(\n         &self,\n         profiler: &SelfProfilerRef,\n-        prev_graph: &PreviousDepGraph<K>,\n+        prev_graph: &SerializedDepGraph<K>,\n         prev_index: SerializedDepNodeIndex,\n     ) -> DepNodeIndex {\n         self.debug_assert_not_in_new_nodes(prev_graph, prev_index);\n@@ -1112,7 +1111,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n     #[inline]\n     fn debug_assert_not_in_new_nodes(\n         &self,\n-        prev_graph: &PreviousDepGraph<K>,\n+        prev_graph: &SerializedDepGraph<K>,\n         prev_index: SerializedDepNodeIndex,\n     ) {\n         let node = &prev_graph.index_to_node(prev_index);"}, {"sha": "15e2633c4f12e79b46da54dd784f04a4a1807f0a", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=e7c94697867a9fe9e2956195f3235dbf2b0fec27", "patch": "@@ -1,13 +1,11 @@\n pub mod debug;\n mod dep_node;\n mod graph;\n-mod prev;\n mod query;\n mod serialized;\n \n pub use dep_node::{DepNode, DepNodeParams, WorkProductId};\n pub use graph::{hash_result, DepGraph, DepNodeColor, DepNodeIndex, TaskDeps, WorkProduct};\n-pub use prev::PreviousDepGraph;\n pub use query::DepGraphQuery;\n pub use serialized::{SerializedDepGraph, SerializedDepNodeIndex};\n "}, {"sha": "6303bbf53b9c45ffc7187c4db9dc64c4dbfa085a", "filename": "compiler/rustc_query_system/src/dep_graph/prev.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9d4a6449db6624e18373cea10f1def6cb670f063/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fprev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4a6449db6624e18373cea10f1def6cb670f063/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fprev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fprev.rs?ref=9d4a6449db6624e18373cea10f1def6cb670f063", "patch": "@@ -1,56 +0,0 @@\n-use super::serialized::{SerializedDepGraph, SerializedDepNodeIndex};\n-use super::{DepKind, DepNode};\n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::FxHashMap;\n-\n-#[derive(Debug)]\n-pub struct PreviousDepGraph<K: DepKind> {\n-    data: SerializedDepGraph<K>,\n-    index: FxHashMap<DepNode<K>, SerializedDepNodeIndex>,\n-}\n-\n-impl<K: DepKind> Default for PreviousDepGraph<K> {\n-    fn default() -> Self {\n-        PreviousDepGraph { data: Default::default(), index: Default::default() }\n-    }\n-}\n-\n-impl<K: DepKind> PreviousDepGraph<K> {\n-    pub fn new(data: SerializedDepGraph<K>) -> PreviousDepGraph<K> {\n-        let index: FxHashMap<_, _> =\n-            data.nodes.iter_enumerated().map(|(idx, &dep_node)| (dep_node, idx)).collect();\n-        PreviousDepGraph { data, index }\n-    }\n-\n-    #[inline]\n-    pub fn edge_targets_from(\n-        &self,\n-        dep_node_index: SerializedDepNodeIndex,\n-    ) -> &[SerializedDepNodeIndex] {\n-        self.data.edge_targets_from(dep_node_index)\n-    }\n-\n-    #[inline]\n-    pub fn index_to_node(&self, dep_node_index: SerializedDepNodeIndex) -> DepNode<K> {\n-        self.data.nodes[dep_node_index]\n-    }\n-\n-    #[inline]\n-    pub fn node_to_index_opt(&self, dep_node: &DepNode<K>) -> Option<SerializedDepNodeIndex> {\n-        self.index.get(dep_node).cloned()\n-    }\n-\n-    #[inline]\n-    pub fn fingerprint_of(&self, dep_node: &DepNode<K>) -> Option<Fingerprint> {\n-        self.index.get(dep_node).map(|&node_index| self.data.fingerprints[node_index])\n-    }\n-\n-    #[inline]\n-    pub fn fingerprint_by_index(&self, dep_node_index: SerializedDepNodeIndex) -> Fingerprint {\n-        self.data.fingerprints[dep_node_index]\n-    }\n-\n-    pub fn node_count(&self) -> usize {\n-        self.index.len()\n-    }\n-}"}, {"sha": "6a84a28be66563b07baf348fd89a3a0a563dd40a", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c94697867a9fe9e2956195f3235dbf2b0fec27/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=e7c94697867a9fe9e2956195f3235dbf2b0fec27", "patch": "@@ -37,17 +37,19 @@ rustc_index::newtype_index! {\n #[derive(Debug)]\n pub struct SerializedDepGraph<K: DepKind> {\n     /// The set of all DepNodes in the graph\n-    pub nodes: IndexVec<SerializedDepNodeIndex, DepNode<K>>,\n+    nodes: IndexVec<SerializedDepNodeIndex, DepNode<K>>,\n     /// The set of all Fingerprints in the graph. Each Fingerprint corresponds to\n     /// the DepNode at the same index in the nodes vector.\n-    pub fingerprints: IndexVec<SerializedDepNodeIndex, Fingerprint>,\n+    fingerprints: IndexVec<SerializedDepNodeIndex, Fingerprint>,\n     /// For each DepNode, stores the list of edges originating from that\n     /// DepNode. Encoded as a [start, end) pair indexing into edge_list_data,\n     /// which holds the actual DepNodeIndices of the target nodes.\n-    pub edge_list_indices: IndexVec<SerializedDepNodeIndex, (u32, u32)>,\n+    edge_list_indices: IndexVec<SerializedDepNodeIndex, (u32, u32)>,\n     /// A flattened list of all edge targets in the graph. Edge sources are\n     /// implicit in edge_list_indices.\n-    pub edge_list_data: Vec<SerializedDepNodeIndex>,\n+    edge_list_data: Vec<SerializedDepNodeIndex>,\n+    /// Reciprocal map to `nodes`.\n+    index: FxHashMap<DepNode<K>, SerializedDepNodeIndex>,\n }\n \n impl<K: DepKind> Default for SerializedDepGraph<K> {\n@@ -57,6 +59,7 @@ impl<K: DepKind> Default for SerializedDepGraph<K> {\n             fingerprints: Default::default(),\n             edge_list_indices: Default::default(),\n             edge_list_data: Default::default(),\n+            index: Default::default(),\n         }\n     }\n }\n@@ -67,6 +70,30 @@ impl<K: DepKind> SerializedDepGraph<K> {\n         let targets = self.edge_list_indices[source];\n         &self.edge_list_data[targets.0 as usize..targets.1 as usize]\n     }\n+\n+    #[inline]\n+    pub fn index_to_node(&self, dep_node_index: SerializedDepNodeIndex) -> DepNode<K> {\n+        self.nodes[dep_node_index]\n+    }\n+\n+    #[inline]\n+    pub fn node_to_index_opt(&self, dep_node: &DepNode<K>) -> Option<SerializedDepNodeIndex> {\n+        self.index.get(dep_node).cloned()\n+    }\n+\n+    #[inline]\n+    pub fn fingerprint_of(&self, dep_node: &DepNode<K>) -> Option<Fingerprint> {\n+        self.index.get(dep_node).map(|&node_index| self.fingerprints[node_index])\n+    }\n+\n+    #[inline]\n+    pub fn fingerprint_by_index(&self, dep_node_index: SerializedDepNodeIndex) -> Fingerprint {\n+        self.fingerprints[dep_node_index]\n+    }\n+\n+    pub fn node_count(&self) -> usize {\n+        self.index.len()\n+    }\n }\n \n impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<'a>>\n@@ -121,7 +148,10 @@ impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<\n             })?;\n         }\n \n-        Ok(SerializedDepGraph { nodes, fingerprints, edge_list_indices, edge_list_data })\n+        let index: FxHashMap<_, _> =\n+            nodes.iter_enumerated().map(|(idx, &dep_node)| (dep_node, idx)).collect();\n+\n+        Ok(SerializedDepGraph { nodes, fingerprints, edge_list_indices, edge_list_data, index })\n     }\n }\n "}]}