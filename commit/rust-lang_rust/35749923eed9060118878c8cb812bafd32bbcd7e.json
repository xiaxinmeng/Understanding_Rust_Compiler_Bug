{"sha": "35749923eed9060118878c8cb812bafd32bbcd7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NzQ5OTIzZWVkOTA2MDExODg3OGM4Y2I4MTJiYWZkMzJiYmNkN2U=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-26T18:10:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-19T08:41:09Z"}, "message": "Fix the fallout", "tree": {"sha": "2ea8e1f90d568141e4a7dd6e59f3413bd78b7e95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ea8e1f90d568141e4a7dd6e59f3413bd78b7e95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35749923eed9060118878c8cb812bafd32bbcd7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35749923eed9060118878c8cb812bafd32bbcd7e", "html_url": "https://github.com/rust-lang/rust/commit/35749923eed9060118878c8cb812bafd32bbcd7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35749923eed9060118878c8cb812bafd32bbcd7e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f8519c341a53a4697f839041bc0a14dd6c6e773", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8519c341a53a4697f839041bc0a14dd6c6e773", "html_url": "https://github.com/rust-lang/rust/commit/0f8519c341a53a4697f839041bc0a14dd6c6e773"}], "stats": {"total": 90, "additions": 40, "deletions": 50}, "files": [{"sha": "48d7f44063ec361db0684114fd867a0d44ac0714", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -225,11 +225,10 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n                 intravisit::walk_fn(self, fk, fd, b, s);\n                 self.param_envs.pop();\n             }\n-            FnKind::Closure(..) => {\n+            FnKind::Closure => {\n                 intravisit::walk_fn(self, fk, fd, b, s);\n             }\n         }\n-\n     }\n \n     fn visit_expr(&mut self, expr: &hir::Expr) {"}, {"sha": "70ef112efbaaba872032ad1298e77fddc4f7a990", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -1424,7 +1424,7 @@ impl<'tcx> cmt_<'tcx> {\n                 NonAliasable\n             }\n \n-            Categorization::StaticItem(..) => {\n+            Categorization::StaticItem => {\n                 if self.mutbl.is_mutable() {\n                     FreelyAliasable(AliasableStaticMut)\n                 } else {"}, {"sha": "4425a24590c83328b76d07cdd2e08d59afdcb601", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     this.walk_fn(fk, fd, b, s)\n                 })\n             }\n-            FnKind::Closure(..) => {\n+            FnKind::Closure => {\n                 self.walk_fn(fk, fd, b, s)\n             }\n         }\n@@ -479,7 +479,7 @@ impl<'a> LifetimeContext<'a> {\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n             }\n-            FnKind::Closure(..) => {\n+            FnKind::Closure => {\n                 intravisit::walk_fn_decl(self, fd);\n             }\n         }"}, {"sha": "4323b153c5fda832916f5d7ea5b6b05c82de2999", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -301,7 +301,7 @@ fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>,\n         ty::TyInt(..) |\n         ty::TyUint(..) |\n         ty::TyFloat(..) |\n-        ty::TyStr(..) |\n+        ty::TyStr |\n         ty::TyBareFn(..) |\n         ty::TyArray(..) |\n         ty::TySlice(..) |"}, {"sha": "d63d80c4ff83278cf98c6729036476c83043f36b", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -1563,7 +1563,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         match other {\n-            &ObjectCandidate(..) |\n+            &ObjectCandidate |\n             &ParamCandidate(_) | &ProjectionCandidate => match victim {\n                 &DefaultImplCandidate(..) => {\n                     self.tcx().sess.bug(\n@@ -1572,16 +1572,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n                 &ImplCandidate(..) |\n                 &ClosureCandidate(..) |\n-                &FnPointerCandidate(..) |\n-                &BuiltinObjectCandidate(..) |\n-                &BuiltinUnsizeCandidate(..) |\n+                &FnPointerCandidate |\n+                &BuiltinObjectCandidate |\n+                &BuiltinUnsizeCandidate |\n                 &DefaultImplObjectCandidate(..) |\n                 &BuiltinCandidate(..) => {\n                     // We have a where-clause so don't go around looking\n                     // for impls.\n                     true\n                 }\n-                &ObjectCandidate(..) |\n+                &ObjectCandidate |\n                 &ProjectionCandidate => {\n                     // Arbitrarily give param candidates priority\n                     // over projection and object candidates."}, {"sha": "ea092ed977edaa11f044c618c8a20402a8e01d64", "filename": "src/librustc/middle/ty/outlives.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -188,21 +188,21 @@ fn compute_components<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n         // the type and then visits the types that are lexically\n         // contained within. (The comments refer to relevant rules\n         // from RFC1214.)\n-        ty::TyBool(..) |        // OutlivesScalar\n-        ty::TyChar(..) |        // OutlivesScalar\n+        ty::TyBool |            // OutlivesScalar\n+        ty::TyChar |            // OutlivesScalar\n         ty::TyInt(..) |         // OutlivesScalar\n         ty::TyUint(..) |        // OutlivesScalar\n         ty::TyFloat(..) |       // OutlivesScalar\n         ty::TyEnum(..) |        // OutlivesNominalType\n         ty::TyStruct(..) |      // OutlivesNominalType\n         ty::TyBox(..) |         // OutlivesNominalType (ish)\n-        ty::TyStr(..) |         // OutlivesScalar (ish)\n+        ty::TyStr |             // OutlivesScalar (ish)\n         ty::TyArray(..) |       // ...\n         ty::TySlice(..) |       // ...\n         ty::TyRawPtr(..) |      // ...\n         ty::TyRef(..) |         // OutlivesReference\n         ty::TyTuple(..) |       // ...\n-        ty::TyError(..) => {\n+        ty::TyError => {\n             push_region_constraints(out, ty.regions());\n             for subty in ty.walk_shallow() {\n                 compute_components(infcx, subty, out);"}, {"sha": "f6bb51a26adc9a8bd76546f1997720d555d4c6a5", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -540,14 +540,14 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                             ol, old_loan_msg)\n                 }\n \n-                euv::OverloadedOperator(..) |\n-                euv::AddrOf(..) |\n-                euv::AutoRef(..) |\n-                euv::AutoUnsafe(..) |\n-                euv::ClosureInvocation(..) |\n-                euv::ForLoop(..) |\n-                euv::RefBinding(..) |\n-                euv::MatchDiscriminant(..) => {\n+                euv::OverloadedOperator |\n+                euv::AddrOf |\n+                euv::AutoRef |\n+                euv::AutoUnsafe |\n+                euv::ClosureInvocation |\n+                euv::ForLoop |\n+                euv::RefBinding |\n+                euv::MatchDiscriminant => {\n                     format!(\"previous borrow of `{}` occurs here{}\",\n                             ol, old_loan_msg)\n                 }"}, {"sha": "e7ce93972633be7216b6315b8b157860eb31b981", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 self.extend(result, &cmt, LpInterior(i.cleaned()))\n             }\n \n-            Categorization::StaticItem(..) => {\n+            Categorization::StaticItem => {\n                 Safe\n             }\n "}, {"sha": "162c91ee4e9b59bf54bb81ae67667f12de084e3a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -942,8 +942,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                            \"consider changing this closure to take self by mutable reference\");\n                 }\n             }\n-            mc::AliasableStatic(..) |\n-            mc::AliasableStaticMut(..) => {\n+            mc::AliasableStatic |\n+            mc::AliasableStaticMut => {\n                 span_err!(\n                     self.tcx.sess, span, E0388,\n                     \"{} in a static location\", prefix);\n@@ -998,7 +998,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     pub fn note_and_explain_bckerr(&self, err: BckError<'tcx>) {\n         let code = err.code;\n         match code {\n-            err_mutbl(..) => {\n+            err_mutbl => {\n                 match err.cmt.note {\n                     mc::NoteClosureEnv(upvar_id) | mc::NoteUpvarRef(upvar_id) => {\n                         // If this is an `Fn` closure, it simply can't mutate upvars."}, {"sha": "b9637addccf691ecd7439a4ac1f7be9b0921efc3", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -66,7 +66,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                                  candidate: &mut Candidate<'pat, 'tcx>)\n                                  -> Result<BasicBlock, MatchPair<'pat, 'tcx>> {\n         match *match_pair.pattern.kind {\n-            PatternKind::Wild(..) => {\n+            PatternKind::Wild => {\n                 // nothing left to do\n                 Ok(block)\n             }"}, {"sha": "4390bac7ac1f0ce8889f2df62ff5578f5f498a65", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -625,7 +625,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n                 self.visit_explicit_self(&sig.explicit_self);\n                 MethodRibKind\n             }\n-            FnKind::Closure(..) => ClosureRibKind(node_id),\n+            FnKind::Closure => ClosureRibKind(node_id),\n         };\n         self.resolve_function(rib_kind, declaration, block);\n     }"}, {"sha": "e65a212e41b130e01cac5d5dc4d5807b341a4cdf", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -247,7 +247,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n             }\n         }\n \n-        ty::TyProjection(..) | ty::TyInfer(..) | ty::TyParam(..) | ty::TyError(..) => {\n+        ty::TyProjection(..) | ty::TyInfer(..) | ty::TyParam(..) | ty::TyError => {\n             cx.sess().bug(&format!(\"fictitious type {:?} in sizing_type_of()\",\n                                    t))\n         }\n@@ -451,7 +451,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TyInfer(..) => cx.sess().bug(\"type_of with TyInfer\"),\n       ty::TyProjection(..) => cx.sess().bug(\"type_of with TyProjection\"),\n       ty::TyParam(..) => cx.sess().bug(\"type_of with ty_param\"),\n-      ty::TyError(..) => cx.sess().bug(\"type_of with TyError\"),\n+      ty::TyError => cx.sess().bug(\"type_of with TyError\"),\n     };\n \n     debug!(\"--> mapped t={:?} to llty={}\","}, {"sha": "3d2f80ec8bbec684a6ee067630e53e247ab4d8e0", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -1052,7 +1052,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                     (impl_def_id, substs, ref_obligations)\n                 }\n \n-                ObjectCandidate(..) |\n+                ObjectCandidate |\n                 TraitCandidate |\n                 WhereClauseCandidate(..) => {\n                     // These have no additional conditions to check."}, {"sha": "cbf213600447bc2b7662365f3df20c4046df4f7a", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -69,7 +69,7 @@ fn get_base_type_def_id<'a, 'tcx>(inference_context: &InferCtxt<'a, 'tcx>,\n         }\n \n         TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-        TyStr(..) | TyArray(..) | TySlice(..) | TyBareFn(..) | TyTuple(..) |\n+        TyStr | TyArray(..) | TySlice(..) | TyBareFn(..) | TyTuple(..) |\n         TyParam(..) | TyError |\n         TyRawPtr(_) | TyRef(_, _) | TyProjection(..) => {\n             None"}, {"sha": "9e838970940413d2f45e0d8fa99b893d76fe30b7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -776,7 +776,7 @@ impl Clean<Option<Lifetime>> for ty::Region {\n             ty::ReScope(..) |\n             ty::ReVar(..) |\n             ty::ReSkolemized(..) |\n-            ty::ReEmpty(..) => None\n+            ty::ReEmpty => None\n         }\n     }\n }\n@@ -1609,7 +1609,7 @@ impl Clean<Type> for hir::Ty {\n             TyPolyTraitRef(ref bounds) => {\n                 PolyTraitRef(bounds.clean(cx))\n             },\n-            TyInfer(..) => {\n+            TyInfer => {\n                 Infer\n             },\n             TyTypeof(..) => {"}, {"sha": "15c28ec2713e967d160e67bd20c1f047407afd53", "filename": "src/test/compile-fail/move-fragments-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -32,7 +32,7 @@ pub fn test_match_partial(p: Lonely<D, D>) {\n     //~^ ERROR                 parent_of_fragments: `$(local p)`\n     //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n         _ => {}\n     }\n }\n@@ -44,7 +44,7 @@ pub fn test_match_full(p: Lonely<D, D>) {\n     //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::One)`\n     //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Two)`\n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n         One(..) => {}\n         Two(..) => {}\n     }\n@@ -59,7 +59,7 @@ pub fn test_match_bind_one(p: Lonely<D, D>) {\n     //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Two)`\n     //~| ERROR                  assigned_leaf_path: `$(local data)`\n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n         One(data) => {}\n         Two(..) => {}\n     }\n@@ -78,7 +78,7 @@ pub fn test_match_bind_many(p: Lonely<D, D>) {\n     //~| ERROR                  assigned_leaf_path: `$(local left)`\n     //~| ERROR                  assigned_leaf_path: `$(local right)`\n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n         One(data) => {}\n         Two(left, right) => {}\n     }"}, {"sha": "a1152333900a0f455b4d096acf7b3b4b6e5a69a1", "filename": "src/test/compile-fail/move-fragments-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -38,7 +38,7 @@ pub fn test_match_bind_and_underscore(p: Lonely<D, D>) {\n     //~| ERROR                  assigned_leaf_path: `$(local left)`\n \n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n \n         One(_) => {}       // <-- does not fragment `($(local p) as One)` ...\n "}, {"sha": "74936411da2c9f30b65876eb4a4853144f755b01", "filename": "src/test/run-pass/issue-14308.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Ftest%2Frun-pass%2Fissue-14308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Ftest%2Frun-pass%2Fissue-14308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14308.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -10,7 +10,6 @@\n \n \n struct A(isize);\n-struct B;\n \n fn main() {\n     let x = match A(3) {\n@@ -22,12 +21,4 @@ fn main() {\n         A(..) => 2\n     };\n     assert_eq!(x, 2);\n-\n-    // This next test uses a (..) wildcard match on a nullary struct.\n-    // There's no particularly good reason to support this, but it's currently allowed,\n-    // and this makes sure it doesn't ICE or break LLVM.\n-    let x = match B {\n-        B(..) => 3\n-    };\n-    assert_eq!(x, 3);\n }"}, {"sha": "49ee99b22a1202655fd863906529597bb9fdc08a", "filename": "src/test/run-pass/issue-1701.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Ftest%2Frun-pass%2Fissue-1701.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35749923eed9060118878c8cb812bafd32bbcd7e/src%2Ftest%2Frun-pass%2Fissue-1701.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1701.rs?ref=35749923eed9060118878c8cb812bafd32bbcd7e", "patch": "@@ -20,7 +20,7 @@ fn noise(a: animal) -> Option<String> {\n       animal::cat(..)    => { Some(\"meow\".to_string()) }\n       animal::dog(..)    => { Some(\"woof\".to_string()) }\n       animal::rabbit(..) => { None }\n-      animal::tiger(..)  => { Some(\"roar\".to_string()) }\n+      animal::tiger  => { Some(\"roar\".to_string()) }\n     }\n }\n "}]}