{"sha": "08efbac758aa75f710b8018d8974bde5c7a149c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZWZiYWM3NThhYTc1ZjcxMGI4MDE4ZDg5NzRiZGU1YzdhMTQ5YzE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-04-12T12:48:41Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-04-18T15:03:53Z"}, "message": "Implement event filtering for self-profiler.", "tree": {"sha": "7f6f8ff9673da974ac0c324af872415de2356941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f6f8ff9673da974ac0c324af872415de2356941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08efbac758aa75f710b8018d8974bde5c7a149c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08efbac758aa75f710b8018d8974bde5c7a149c1", "html_url": "https://github.com/rust-lang/rust/commit/08efbac758aa75f710b8018d8974bde5c7a149c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08efbac758aa75f710b8018d8974bde5c7a149c1/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e", "html_url": "https://github.com/rust-lang/rust/commit/e577e49b9f5ba0f1e9c3e66d67ef7cf82dc11c0e"}], "stats": {"total": 125, "additions": 97, "deletions": 28}, "files": [{"sha": "97a1c83dbffb600982990504bb5968efdcc1497e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08efbac758aa75f710b8018d8974bde5c7a149c1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08efbac758aa75f710b8018d8974bde5c7a149c1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=08efbac758aa75f710b8018d8974bde5c7a149c1", "patch": "@@ -1467,6 +1467,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"inject the given attribute in the crate\"),\n     self_profile: bool = (false, parse_bool, [UNTRACKED],\n         \"run the self profiler and output the raw event data\"),\n+    self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\n+        \"specifies which kinds of events get recorded by the self profiler\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"emits a section containing stack size metadata\"),\n     plt: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "eecd5cba6d3580b2fdd3b6fa2452dede236a872b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08efbac758aa75f710b8018d8974bde5c7a149c1/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08efbac758aa75f710b8018d8974bde5c7a149c1/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=08efbac758aa75f710b8018d8974bde5c7a149c1", "patch": "@@ -1138,7 +1138,7 @@ fn build_session_(\n ) -> Session {\n     let self_profiler =\n         if sopts.debugging_opts.self_profile {\n-            let profiler = SelfProfiler::new();\n+            let profiler = SelfProfiler::new(&sopts.debugging_opts.self_profile_events);\n             match profiler {\n                 Ok(profiler) => {\n                     crate::ty::query::QueryName::register_with_profiler(&profiler);"}, {"sha": "585970e64df8d65b1a73636af3a4dd688fe71a17", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 94, "deletions": 27, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/08efbac758aa75f710b8018d8974bde5c7a149c1/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08efbac758aa75f710b8018d8974bde5c7a149c1/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=08efbac758aa75f710b8018d8974bde5c7a149c1", "patch": "@@ -27,26 +27,42 @@ pub enum ProfileCategory {\n     Other,\n }\n \n-#[derive(Clone, Debug, Eq, PartialEq)]\n-pub enum ProfilerEvent {\n-    QueryStart { query_name: &'static str, category: ProfileCategory, time: u64 },\n-    QueryEnd { query_name: &'static str, category: ProfileCategory, time: u64 },\n-    GenericActivityStart { category: ProfileCategory, label: Cow<'static, str>, time: u64 },\n-    GenericActivityEnd { category: ProfileCategory, label: Cow<'static, str>, time: u64 },\n-    IncrementalLoadResultStart { query_name: &'static str, time: u64 },\n-    IncrementalLoadResultEnd { query_name: &'static str, time: u64 },\n-    QueryCacheHit { query_name: &'static str, category: ProfileCategory, time: u64 },\n-    QueryCount { query_name: &'static str, category: ProfileCategory, count: usize, time: u64 },\n-    QueryBlockedStart { query_name: &'static str, category: ProfileCategory, time: u64 },\n-    QueryBlockedEnd { query_name: &'static str, category: ProfileCategory, time: u64 },\n+bitflags! {\n+    struct EventFilter: u32 {\n+        const GENERIC_ACTIVITIES = 1 << 0;\n+        const QUERY_PROVIDERS    = 1 << 1;\n+        const QUERY_CACHE_HITS   = 1 << 2;\n+        const QUERY_BLOCKED      = 1 << 3;\n+        const INCR_CACHE_LOADS   = 1 << 4;\n+\n+        const DEFAULT = Self::GENERIC_ACTIVITIES.bits |\n+                        Self::QUERY_PROVIDERS.bits |\n+                        Self::QUERY_BLOCKED.bits |\n+                        Self::INCR_CACHE_LOADS.bits;\n+\n+        // empty() and none() aren't const-fns unfortunately\n+        const NONE = 0;\n+        const ALL  = !Self::NONE.bits;\n+    }\n }\n \n+const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n+    (\"none\", EventFilter::NONE),\n+    (\"all\", EventFilter::ALL),\n+    (\"generic-activity\", EventFilter::GENERIC_ACTIVITIES),\n+    (\"query-provider\", EventFilter::QUERY_PROVIDERS),\n+    (\"query-cache-hit\", EventFilter::QUERY_CACHE_HITS),\n+    (\"query-blocked\" , EventFilter::QUERY_BLOCKED),\n+    (\"incr-cache-load\", EventFilter::INCR_CACHE_LOADS),\n+];\n+\n fn thread_id_to_u64(tid: ThreadId) -> u64 {\n     unsafe { mem::transmute::<ThreadId, u64>(tid) }\n }\n \n pub struct SelfProfiler {\n     profiler: Profiler,\n+    event_filter_mask: EventFilter,\n     query_event_kind: StringId,\n     generic_activity_event_kind: StringId,\n     incremental_load_result_event_kind: StringId,\n@@ -55,7 +71,7 @@ pub struct SelfProfiler {\n }\n \n impl SelfProfiler {\n-    pub fn new() -> Result<SelfProfiler, Box<dyn Error>> {\n+    pub fn new(event_filters: &Option<Vec<String>>) -> Result<SelfProfiler, Box<dyn Error>> {\n         let filename = format!(\"pid-{}.rustc_profile\", process::id());\n         let path = std::path::Path::new(&filename);\n         let profiler = Profiler::new(path)?;\n@@ -66,8 +82,38 @@ impl SelfProfiler {\n         let query_blocked_event_kind = profiler.alloc_string(\"QueryBlocked\");\n         let query_cache_hit_event_kind = profiler.alloc_string(\"QueryCacheHit\");\n \n+        let mut event_filter_mask = EventFilter::empty();\n+\n+        if let Some(ref event_filters) = *event_filters {\n+            let mut unknown_events = vec![];\n+            for item in event_filters {\n+                if let Some(&(_, mask)) = EVENT_FILTERS_BY_NAME.iter()\n+                                                               .find(|&(name, _)| name == item) {\n+                    event_filter_mask |= mask;\n+                } else {\n+                    unknown_events.push(item.clone());\n+                }\n+            }\n+\n+            // Warn about any unknown event names\n+            if unknown_events.len() > 0 {\n+                unknown_events.sort();\n+                unknown_events.dedup();\n+\n+                warn!(\"Unknown self-profiler events specified: {}. Available options are: {}.\",\n+                    unknown_events.join(\", \"),\n+                    EVENT_FILTERS_BY_NAME.iter()\n+                                         .map(|&(name, _)| name.to_string())\n+                                         .collect::<Vec<_>>()\n+                                         .join(\", \"));\n+            }\n+        } else {\n+            event_filter_mask = EventFilter::DEFAULT;\n+        }\n+\n         Ok(SelfProfiler {\n             profiler,\n+            event_filter_mask,\n             query_event_kind,\n             generic_activity_event_kind,\n             incremental_load_result_event_kind,\n@@ -86,7 +132,6 @@ impl SelfProfiler {\n \n     pub fn register_query_name(&self, query_name: QueryName) {\n         let id = SelfProfiler::get_query_name_string_id(query_name);\n-\n         self.profiler.alloc_string_with_reserved_id(id, query_name.as_str());\n     }\n \n@@ -95,54 +140,76 @@ impl SelfProfiler {\n         &self,\n         label: impl Into<Cow<'static, str>>,\n     ) {\n-        self.record(&label.into(), self.generic_activity_event_kind, TimestampKind::Start);\n+        if self.event_filter_mask.contains(EventFilter::GENERIC_ACTIVITIES) {\n+            self.record(&label.into(), self.generic_activity_event_kind, TimestampKind::Start);\n+        }\n     }\n \n     #[inline]\n     pub fn end_activity(\n         &self,\n         label: impl Into<Cow<'static, str>>,\n     ) {\n-        self.record(&label.into(), self.generic_activity_event_kind, TimestampKind::End);\n+        if self.event_filter_mask.contains(EventFilter::GENERIC_ACTIVITIES) {\n+            self.record(&label.into(), self.generic_activity_event_kind, TimestampKind::End);\n+        }\n     }\n \n     #[inline]\n     pub fn record_query_hit(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_cache_hit_event_kind, TimestampKind::Instant);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_CACHE_HITS) {\n+            self.record_query(query_name, self.query_cache_hit_event_kind, TimestampKind::Instant);\n+        }\n     }\n \n     #[inline]\n     pub fn start_query(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_event_kind, TimestampKind::Start);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_PROVIDERS) {\n+            self.record_query(query_name, self.query_event_kind, TimestampKind::Start);\n+        }\n     }\n \n     #[inline]\n     pub fn end_query(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_event_kind, TimestampKind::End);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_PROVIDERS) {\n+            self.record_query(query_name, self.query_event_kind, TimestampKind::End);\n+        }\n     }\n \n     #[inline]\n     pub fn incremental_load_result_start(&self, query_name: QueryName) {\n-        self.record_query(\n-            query_name,\n-            self.incremental_load_result_event_kind,\n-            TimestampKind::Start\n-        );\n+        if self.event_filter_mask.contains(EventFilter::INCR_CACHE_LOADS) {\n+            self.record_query(\n+                query_name,\n+                self.incremental_load_result_event_kind,\n+                TimestampKind::Start\n+            );\n+        }\n     }\n \n     #[inline]\n     pub fn incremental_load_result_end(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.incremental_load_result_event_kind, TimestampKind::End);\n+        if self.event_filter_mask.contains(EventFilter::INCR_CACHE_LOADS) {\n+            self.record_query(\n+                query_name,\n+                self.incremental_load_result_event_kind,\n+                TimestampKind::End\n+            );\n+        }\n     }\n \n     #[inline]\n     pub fn query_blocked_start(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_blocked_event_kind, TimestampKind::Start);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_BLOCKED) {\n+            self.record_query(query_name, self.query_blocked_event_kind, TimestampKind::Start);\n+        }\n     }\n \n     #[inline]\n     pub fn query_blocked_end(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_blocked_event_kind, TimestampKind::End);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_BLOCKED) {\n+            self.record_query(query_name, self.query_blocked_event_kind, TimestampKind::End);\n+        }\n     }\n \n     #[inline]"}]}