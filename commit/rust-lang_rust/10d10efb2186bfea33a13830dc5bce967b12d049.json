{"sha": "10d10efb2186bfea33a13830dc5bce967b12d049", "node_id": "C_kwDOAAsO6NoAKDEwZDEwZWZiMjE4NmJmZWEzM2ExMzgzMGRjNWJjZTk2N2IxMmQwNDk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-13T14:40:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-23T07:53:45Z"}, "message": "Stop visiting visibility.", "tree": {"sha": "b238b4ea3e30e5231bc9f1b83dbf75ccd8e13419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b238b4ea3e30e5231bc9f1b83dbf75ccd8e13419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d10efb2186bfea33a13830dc5bce967b12d049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d10efb2186bfea33a13830dc5bce967b12d049", "html_url": "https://github.com/rust-lang/rust/commit/10d10efb2186bfea33a13830dc5bce967b12d049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d10efb2186bfea33a13830dc5bce967b12d049/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c5deb0e3a22b93ed1fe5e2a7f2e8d91eea63b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c5deb0e3a22b93ed1fe5e2a7f2e8d91eea63b9", "html_url": "https://github.com/rust-lang/rust/commit/64c5deb0e3a22b93ed1fe5e2a7f2e8d91eea63b9"}], "stats": {"total": 124, "additions": 29, "deletions": 95}, "files": [{"sha": "0f90239f4c8b39aa07822c2eed1c893bc733e997", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -290,18 +290,6 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         self.insert(lifetime.span, lifetime.hir_id, Node::Lifetime(lifetime));\n     }\n \n-    fn visit_vis(&mut self, visibility: &'hir Visibility<'hir>) {\n-        match visibility.node {\n-            VisibilityKind::Public | VisibilityKind::Crate(_) | VisibilityKind::Inherited => {}\n-            VisibilityKind::Restricted { hir_id, .. } => {\n-                self.insert(visibility.span, hir_id, Node::Visibility(visibility));\n-                self.with_parent(hir_id, |this| {\n-                    intravisit::walk_vis(this, visibility);\n-                });\n-            }\n-        }\n-    }\n-\n     fn visit_variant(&mut self, v: &'hir Variant<'hir>, g: &'hir Generics<'hir>, item_id: HirId) {\n         self.insert(v.span, v.id, Node::Variant(v));\n         self.with_parent(v.id, |this| {"}, {"sha": "a73f10de94b1378e2e5d78da26a0069003b4b5de", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -3210,7 +3210,6 @@ pub enum Node<'hir> {\n \n     Lifetime(&'hir Lifetime),\n     GenericParam(&'hir GenericParam<'hir>),\n-    Visibility(&'hir Visibility<'hir>),\n \n     Crate(&'hir Mod<'hir>),\n \n@@ -3253,7 +3252,6 @@ impl<'hir> Node<'hir> {\n             | Node::Binding(..)\n             | Node::Arm(..)\n             | Node::Local(..)\n-            | Node::Visibility(..)\n             | Node::Crate(..)\n             | Node::Ty(..)\n             | Node::TraitRef(..)\n@@ -3318,18 +3316,18 @@ impl<'hir> Node<'hir> {\n         match self {\n             Node::Item(i) => match i.kind {\n                 ItemKind::Fn(ref sig, ref generics, _) => {\n-                    Some(FnKind::ItemFn(i.ident, generics, sig.header, &i.vis))\n+                    Some(FnKind::ItemFn(i.ident, generics, sig.header))\n                 }\n                 _ => None,\n             },\n             Node::TraitItem(ti) => match ti.kind {\n                 TraitItemKind::Fn(ref sig, TraitFn::Provided(_)) => {\n-                    Some(FnKind::Method(ti.ident, sig, None))\n+                    Some(FnKind::Method(ti.ident, sig))\n                 }\n                 _ => None,\n             },\n             Node::ImplItem(ii) => match ii.kind {\n-                ImplItemKind::Fn(ref sig, _) => Some(FnKind::Method(ii.ident, sig, Some(&ii.vis))),\n+                ImplItemKind::Fn(ref sig, _) => Some(FnKind::Method(ii.ident, sig)),\n                 _ => None,\n             },\n             Node::Expr(e) => match e.kind {"}, {"sha": "3b77f00c34403f4defc26e6553db7c0d60666030", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -100,10 +100,10 @@ where\n #[derive(Copy, Clone, Debug)]\n pub enum FnKind<'a> {\n     /// `#[xxx] pub async/const/extern \"Abi\" fn foo()`\n-    ItemFn(Ident, &'a Generics<'a>, FnHeader, &'a Visibility<'a>),\n+    ItemFn(Ident, &'a Generics<'a>, FnHeader),\n \n     /// `fn foo(&self)`\n-    Method(Ident, &'a FnSig<'a>, Option<&'a Visibility<'a>>),\n+    Method(Ident, &'a FnSig<'a>),\n \n     /// `|x, y| {}`\n     Closure,\n@@ -112,8 +112,8 @@ pub enum FnKind<'a> {\n impl<'a> FnKind<'a> {\n     pub fn header(&self) -> Option<&FnHeader> {\n         match *self {\n-            FnKind::ItemFn(_, _, ref header, _) => Some(header),\n-            FnKind::Method(_, ref sig, _) => Some(&sig.header),\n+            FnKind::ItemFn(_, _, ref header) => Some(header),\n+            FnKind::Method(_, ref sig) => Some(&sig.header),\n             FnKind::Closure => None,\n         }\n     }\n@@ -475,9 +475,6 @@ pub trait Visitor<'v>: Sized {\n         walk_assoc_type_binding(self, type_binding)\n     }\n     fn visit_attribute(&mut self, _id: HirId, _attr: &'v Attribute) {}\n-    fn visit_vis(&mut self, vis: &'v Visibility<'v>) {\n-        walk_vis(self, vis)\n-    }\n     fn visit_associated_item_kind(&mut self, kind: &'v AssocItemKind) {\n         walk_associated_item_kind(self, kind);\n     }\n@@ -554,7 +551,6 @@ pub fn walk_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Param<'v>) {\n }\n \n pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n-    visitor.visit_vis(&item.vis);\n     visitor.visit_ident(item.ident);\n     match item.kind {\n         ItemKind::ExternCrate(orig_name) => {\n@@ -572,7 +568,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             visitor.visit_nested_body(body);\n         }\n         ItemKind::Fn(ref sig, ref generics, body_id) => visitor.visit_fn(\n-            FnKind::ItemFn(item.ident, generics, sig.header, &item.vis),\n+            FnKind::ItemFn(item.ident, generics, sig.header),\n             &sig.decl,\n             body_id,\n             item.span,\n@@ -859,7 +855,6 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {\n \n pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem<'v>) {\n     visitor.visit_id(foreign_item.hir_id());\n-    visitor.visit_vis(&foreign_item.vis);\n     visitor.visit_ident(foreign_item.ident);\n \n     match foreign_item.kind {\n@@ -999,7 +994,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n         }\n         TraitItemKind::Fn(ref sig, TraitFn::Provided(body_id)) => {\n             visitor.visit_fn(\n-                FnKind::Method(trait_item.ident, sig, None),\n+                FnKind::Method(trait_item.ident, sig),\n                 &sig.decl,\n                 body_id,\n                 trait_item.span,\n@@ -1025,10 +1020,9 @@ pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref:\n \n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem<'v>) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let ImplItem { def_id: _, ident, ref vis, ref generics, ref kind, span: _ } = *impl_item;\n+    let ImplItem { def_id: _, ident, ref generics, ref kind, span: _, vis: _ } = *impl_item;\n \n     visitor.visit_ident(ident);\n-    visitor.visit_vis(vis);\n     visitor.visit_generics(generics);\n     match *kind {\n         ImplItemKind::Const(ref ty, body) => {\n@@ -1038,7 +1032,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n         }\n         ImplItemKind::Fn(ref sig, body_id) => {\n             visitor.visit_fn(\n-                FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis)),\n+                FnKind::Method(impl_item.ident, sig),\n                 &sig.decl,\n                 body_id,\n                 impl_item.span,\n@@ -1082,7 +1076,6 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(\n \n pub fn walk_field_def<'v, V: Visitor<'v>>(visitor: &mut V, field: &'v FieldDef<'v>) {\n     visitor.visit_id(field.hir_id);\n-    visitor.visit_vis(&field.vis);\n     visitor.visit_ident(field.ident);\n     visitor.visit_ty(&field.ty);\n }\n@@ -1250,13 +1243,6 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {\n     visitor.visit_expr(&arm.body);\n }\n \n-pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility<'v>) {\n-    if let VisibilityKind::Restricted { ref path, hir_id } = vis.node {\n-        visitor.visit_id(hir_id);\n-        visitor.visit_path(path, hir_id)\n-    }\n-}\n-\n pub fn walk_associated_item_kind<'v, V: Visitor<'v>>(_: &mut V, _: &'v AssocItemKind) {\n     // No visitable content here: this fn exists so you can call it if\n     // the right thing to do, should content be added in the future,"}, {"sha": "951dbba416e3940b3283717249168caf84224965", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -98,7 +98,6 @@ impl<'a> State<'a> {\n                 self.print_block(&a)\n             }\n             Node::Lifetime(a) => self.print_lifetime(&a),\n-            Node::Visibility(a) => self.print_visibility(&a),\n             Node::GenericParam(_) => panic!(\"cannot print Node::GenericParam\"),\n             Node::Field(_) => panic!(\"cannot print Node::Field\"),\n             // These cases do not carry enough information in the"}, {"sha": "e1507d0fbb48ff0525d7f68f08c44008e84dae33", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -406,7 +406,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n                 }\n                 _ => (),\n             },\n-            FnKind::ItemFn(ident, _, header, _) => {\n+            FnKind::ItemFn(ident, _, header) => {\n                 // Skip foreign-ABI #[no_mangle] functions (Issue #31924)\n                 if header.abi != Abi::Rust && cx.sess().contains_name(attrs, sym::no_mangle) {\n                     return;"}, {"sha": "0d34fbcb2ce8a101a8cf08722b08ff36915a8031", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -14,7 +14,6 @@ use rustc_hir::*;\n use rustc_index::vec::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_span::def_id::StableCrateId;\n-use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n@@ -304,7 +303,6 @@ impl<'hir> Map<'hir> {\n             | Node::Param(_)\n             | Node::Arm(_)\n             | Node::Lifetime(_)\n-            | Node::Visibility(_)\n             | Node::Block(_) => return None,\n         };\n         Some(def_kind)\n@@ -1000,12 +998,7 @@ impl<'hir> Map<'hir> {\n             },\n             Node::Lifetime(lifetime) => lifetime.span,\n             Node::GenericParam(param) => param.span,\n-            Node::Visibility(&Spanned {\n-                node: VisibilityKind::Restricted { ref path, .. },\n-                ..\n-            }) => path.span,\n             Node::Infer(i) => i.span,\n-            Node::Visibility(v) => bug!(\"unexpected Visibility {:?}\", v),\n             Node::Local(local) => local.span,\n             Node::Crate(item) => item.spans.inner_span,\n         };\n@@ -1232,7 +1225,6 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         Some(Node::Ctor(..)) => format!(\"ctor {}{}\", path_str(), id_str),\n         Some(Node::Lifetime(_)) => node_str(\"lifetime\"),\n         Some(Node::GenericParam(ref param)) => format!(\"generic_param {:?}{}\", param, id_str),\n-        Some(Node::Visibility(ref vis)) => format!(\"visibility {:?}{}\", vis, id_str),\n         Some(Node::Crate(..)) => String::from(\"root_crate\"),\n         None => format!(\"unknown node{}\", id_str),\n     }"}, {"sha": "ac7f05875e032b1b66c4d25595d9c2b89cc9d54d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -295,28 +295,6 @@ fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visib\n     if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n-/// Visitor used to determine if pub(restricted) is used anywhere in the crate.\n-///\n-/// This is done so that `private_in_public` warnings can be turned into hard errors\n-/// in crates that have been updated to use pub(restricted).\n-////////////////////////////////////////////////////////////////////////////////\n-struct PubRestrictedVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    has_pub_restricted: bool,\n-}\n-\n-impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n-    type NestedFilter = nested_filter::All;\n-\n-    fn nested_visit_map(&mut self) -> Self::Map {\n-        self.tcx.hir()\n-    }\n-    fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {\n-        self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();\n-    }\n-}\n-\n ////////////////////////////////////////////////////////////////////////////////\n /// Visitor used to determine impl visibility and reachability.\n ////////////////////////////////////////////////////////////////////////////////\n@@ -2083,11 +2061,12 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n     };\n     tcx.hir().walk_toplevel_module(&mut visitor);\n \n-    let has_pub_restricted = {\n-        let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };\n-        tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);\n-        pub_restricted_visitor.has_pub_restricted\n-    };\n+    let has_pub_restricted = tcx.resolutions(()).visibilities.iter().any(|(&def_id, &v)| match v {\n+        ty::Visibility::Public | ty::Visibility::Invisible => false,\n+        ty::Visibility::Restricted(module) => {\n+            module != tcx.parent_module_from_def_id(def_id).to_def_id()\n+        }\n+    });\n \n     let mut old_error_set_ancestry = HirIdSet::default();\n     for mut id in visitor.old_error_set.iter().copied() {"}, {"sha": "ce3069265d0206381b1c29dda43f0258a8af8428", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -685,8 +685,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         hir_id: hir::HirId,\n     ) {\n         let name = match fk {\n-            intravisit::FnKind::ItemFn(id, _, _, _) => id.name,\n-            intravisit::FnKind::Method(id, _, _) => id.name,\n+            intravisit::FnKind::ItemFn(id, _, _) => id.name,\n+            intravisit::FnKind::Method(id, _) => id.name,\n             intravisit::FnKind::Closure => sym::closure,\n         };\n         let name = name.as_str();"}, {"sha": "15fa9b2abad2e86fbe93e21a5cc8a94f2d9e70df", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -27,7 +27,6 @@ use rustc_middle::{bug, span_bug};\n use rustc_session::config::{CrateType, Input, OutputType};\n use rustc_session::cstore::ExternCrate;\n use rustc_session::output::{filename_for_metadata, out_filename};\n-use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Ident;\n use rustc_span::*;\n \n@@ -595,11 +594,6 @@ impl<'tcx> SaveContext<'tcx> {\n             Node::TraitRef(tr) => tr.path.res,\n \n             Node::Item(&hir::Item { kind: hir::ItemKind::Use(path, _), .. }) => path.res,\n-            Node::Visibility(&Spanned {\n-                node: hir::VisibilityKind::Restricted { ref path, .. },\n-                ..\n-            }) => path.res,\n-\n             Node::PathSegment(seg) => match seg.res {\n                 Some(res) if res != Res::Err => res,\n                 _ => {"}, {"sha": "721f251650f54656a68497be907d8abfa01561b0", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -257,7 +257,6 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n                 | hir::Node::Ctor(..)\n                 | hir::Node::Lifetime(..)\n                 | hir::Node::GenericParam(..)\n-                | hir::Node::Visibility(..)\n                 | hir::Node::Crate(..)\n                 | hir::Node::Infer(..) => bug!(\"Unsupported branch target: {:?}\", node),\n             }"}, {"sha": "2bf7f868905458be690ecf5d3d39e80fcd404470", "filename": "src/tools/clippy/clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -82,7 +82,7 @@ impl CognitiveComplexity {\n \n         if rust_cc > self.limit.limit() {\n             let fn_span = match kind {\n-                FnKind::ItemFn(ident, _, _, _) | FnKind::Method(ident, _, _) => ident.span,\n+                FnKind::ItemFn(ident, _, _) | FnKind::Method(ident, _) => ident.span,\n                 FnKind::Closure => {\n                     let header_span = body_span.with_hi(decl.output.span().lo());\n                     let pos = snippet_opt(cx, header_span).and_then(|snip| {"}, {"sha": "565a1c871d7580458b633285ea8a84aa913e0410", "filename": "src/tools/clippy/clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -17,8 +17,8 @@ pub(super) fn check_fn<'tcx>(\n     hir_id: hir::HirId,\n ) {\n     let unsafety = match kind {\n-        intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _) => unsafety,\n-        intravisit::FnKind::Method(_, sig, _) => sig.header.unsafety,\n+        intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }) => unsafety,\n+        intravisit::FnKind::Method(_, sig) => sig.header.unsafety,\n         intravisit::FnKind::Closure => return,\n     };\n "}, {"sha": "5c8d8b8e7552c9e15f23b53a60f891a94357bf8a", "filename": "src/tools/clippy/clippy_lints/src/functions/too_many_arguments.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -26,9 +26,8 @@ pub(super) fn check_fn(\n                     header: hir::FnHeader { abi: Abi::Rust, .. },\n                     ..\n                 },\n-                _,\n             )\n-            | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _) => check_arg_number(\n+            | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }) => check_arg_number(\n                 cx,\n                 decl,\n                 span.with_hi(decl.output.span().hi()),"}, {"sha": "9c734221ebcea4989523b48545b88bb7e7916927", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -85,7 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _) => {\n+            FnKind::ItemFn(.., header) => {\n                 let attrs = cx.tcx.hir().attrs(hir_id);\n                 if header.abi != Abi::Rust || requires_exact_signature(attrs) {\n                     return;"}, {"sha": "9af3059a37f93c9f7137de24778a71a0cada764a", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -251,7 +251,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _) => {\n+            FnKind::ItemFn(.., header) => {\n                 if header.abi != Abi::Rust {\n                     return;\n                 }"}, {"sha": "91e5e1e8b289288ae9c2e8d653f28484bfd8db36", "filename": "src/tools/clippy/clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n     ) {\n         if_chain! {\n             // We are only interested in methods, not in functions or associated functions.\n-            if matches!(kind, FnKind::Method(_, _, _));\n+            if matches!(kind, FnKind::Method(_, _));\n             if let Some(fn_def) = cx.tcx.hir().opt_local_def_id(hir_id);\n             if let Some(impl_def) = cx.tcx.impl_of_method(fn_def.to_def_id());\n             // We don't want this method to be te implementation of a trait because the"}, {"sha": "41333bb2addf7bbf70dfffc8a4fff632993348a3", "filename": "src/tools/clippy/clippy_lints/src/unused_async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if let FnKind::ItemFn(_, _, FnHeader { asyncness, .. }, _) = &fn_kind {\n+        if let FnKind::ItemFn(_, _, FnHeader { asyncness, .. }) = &fn_kind {\n             if matches!(asyncness, IsAsync::Async) {\n                 let mut visitor = AsyncFnVisitor { cx, found_await: false };\n                 walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), span, hir_id);"}, {"sha": "74978720424d46e3f64f6970383b53c11c724e53", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d10efb2186bfea33a13830dc5bce967b12d049/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=10d10efb2186bfea33a13830dc5bce967b12d049", "patch": "@@ -1690,7 +1690,7 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n \n /// Checks if the given function kind is an async function.\n pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n-    matches!(kind, FnKind::ItemFn(_, _, header, _) if header.asyncness == IsAsync::Async)\n+    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness == IsAsync::Async)\n }\n \n /// Peels away all the compiler generated code surrounding the body of an async function,"}]}