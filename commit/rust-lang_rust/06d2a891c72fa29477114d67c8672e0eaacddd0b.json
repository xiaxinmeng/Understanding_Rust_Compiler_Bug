{"sha": "06d2a891c72fa29477114d67c8672e0eaacddd0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZDJhODkxYzcyZmEyOTQ3NzExNGQ2N2M4NjcyZTBlYWFjZGRkMGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-18T23:52:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-18T23:52:01Z"}, "message": "Rollup merge of #61748 - estebank:transparent-span, r=Centril\n\nTweak transparent enums and unions diagnostic spans", "tree": {"sha": "2fe2b4750f475d713c22a999346d95768cdff14d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fe2b4750f475d713c22a999346d95768cdff14d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d2a891c72fa29477114d67c8672e0eaacddd0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdCXkhCRBK7hj4Ov3rIwAAdHIIAHbNfEzC1mjM0SIkseLRANvr\nS6dIlzRSAJC6sg58YykmQW2ouayLGQRY8KgeraFThwzFOb1FOwfOG5cy1TXq4r1u\n/XX2IwydnWFK2qFaHCP3FXM8Cu0eGAy2Eo5PcnHAssM4s2YK8oyAThRePZlkjslK\nSQFvRdsDOjgzIoTljvWFW+eoB59vxPKbECz6MuCjX4nW4YbcnPOGOg1FSbWHmDPx\nchm8LpVv6QHtxqsisijgKSgL861lZRDOOCqAQZ3CKnE7J/7K+FwTzj+q9OJWH2Tg\nlLhvA7jw36PMPZNY5zaOkRNT96BT1GOsBWvPR7VSIuXqXs8QrEU2sWQUyPB+h7E=\n=WokF\n-----END PGP SIGNATURE-----\n", "payload": "tree 2fe2b4750f475d713c22a999346d95768cdff14d\nparent 65da792afa91b9b2c981d3da23681f4a2b168276\nparent f06b76122cde7ddd4f6778d77952b63baa70bdfe\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560901921 +0200\ncommitter GitHub <noreply@github.com> 1560901921 +0200\n\nRollup merge of #61748 - estebank:transparent-span, r=Centril\n\nTweak transparent enums and unions diagnostic spans\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d2a891c72fa29477114d67c8672e0eaacddd0b", "html_url": "https://github.com/rust-lang/rust/commit/06d2a891c72fa29477114d67c8672e0eaacddd0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d2a891c72fa29477114d67c8672e0eaacddd0b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65da792afa91b9b2c981d3da23681f4a2b168276", "url": "https://api.github.com/repos/rust-lang/rust/commits/65da792afa91b9b2c981d3da23681f4a2b168276", "html_url": "https://github.com/rust-lang/rust/commit/65da792afa91b9b2c981d3da23681f4a2b168276"}, {"sha": "f06b76122cde7ddd4f6778d77952b63baa70bdfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f06b76122cde7ddd4f6778d77952b63baa70bdfe", "html_url": "https://github.com/rust-lang/rust/commit/f06b76122cde7ddd4f6778d77952b63baa70bdfe"}], "stats": {"total": 208, "additions": 106, "deletions": 102}, "files": [{"sha": "d09f6683d0e558ce0fe7401dcfe5bfb93ef92d40", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 68, "deletions": 33, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/06d2a891c72fa29477114d67c8672e0eaacddd0b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d2a891c72fa29477114d67c8672e0eaacddd0b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=06d2a891c72fa29477114d67c8672e0eaacddd0b", "patch": "@@ -1788,32 +1788,71 @@ fn check_packed_inner<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, stack: &mut Vec<De\n     false\n }\n \n+/// Emit an error when encountering more or less than one variant in a transparent enum.\n+fn bad_variant_count<'tcx>(tcx: TyCtxt<'tcx>, adt: &'tcx ty::AdtDef, sp: Span, did: DefId) {\n+    let variant_spans: Vec<_> = adt.variants.iter().map(|variant| {\n+        tcx.hir().span_if_local(variant.def_id).unwrap()\n+    }).collect();\n+    let msg = format!(\n+        \"needs exactly one variant, but has {}\",\n+        adt.variants.len(),\n+    );\n+    let mut err = struct_span_err!(tcx.sess, sp, E0731, \"transparent enum {}\", msg);\n+    err.span_label(sp, &msg);\n+    if let &[ref start.., ref end] = &variant_spans[..] {\n+        for variant_span in start {\n+            err.span_label(*variant_span, \"\");\n+        }\n+        err.span_label(*end, &format!(\"too many variants in `{}`\", tcx.def_path_str(did)));\n+    }\n+    err.emit();\n+}\n+\n+/// Emit an error when encountering more or less than one non-zero-sized field in a transparent\n+/// enum.\n+fn bad_non_zero_sized_fields<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    adt: &'tcx ty::AdtDef,\n+    field_count: usize,\n+    field_spans: impl Iterator<Item = Span>,\n+    sp: Span,\n+) {\n+    let msg = format!(\"needs exactly one non-zero-sized field, but has {}\", field_count);\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        sp,\n+        E0690,\n+        \"{}transparent {} {}\",\n+        if adt.is_enum() { \"the variant of a \" } else { \"\" },\n+        adt.descr(),\n+        msg,\n+    );\n+    err.span_label(sp, &msg);\n+    for sp in field_spans {\n+        err.span_label(sp, \"this field is non-zero-sized\");\n+    }\n+    err.emit();\n+}\n+\n fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n     let adt = tcx.adt_def(def_id);\n     if !adt.repr.transparent() {\n         return;\n     }\n+    let sp = tcx.sess.source_map().def_span(sp);\n \n     if adt.is_enum() {\n         if !tcx.features().transparent_enums {\n-            emit_feature_err(&tcx.sess.parse_sess,\n-                             sym::transparent_enums,\n-                             sp,\n-                             GateIssue::Language,\n-                             \"transparent enums are unstable\");\n+            emit_feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::transparent_enums,\n+                sp,\n+                GateIssue::Language,\n+                \"transparent enums are unstable\",\n+            );\n         }\n         if adt.variants.len() != 1 {\n-            let variant_spans: Vec<_> = adt.variants.iter().map(|variant| {\n-                tcx.hir().span_if_local(variant.def_id).unwrap()\n-            }).collect();\n-            let mut err = struct_span_err!(tcx.sess, sp, E0731,\n-                            \"transparent enum needs exactly one variant, but has {}\",\n-                            adt.variants.len());\n-            if !variant_spans.is_empty() {\n-                err.span_note(variant_spans, &format!(\"the following variants exist on `{}`\",\n-                                                      tcx.def_path_str(def_id)));\n-            }\n-            err.emit();\n+            bad_variant_count(tcx, adt, sp, def_id);\n             if adt.variants.is_empty() {\n                 // Don't bother checking the fields. No variants (and thus no fields) exist.\n                 return;\n@@ -1841,28 +1880,24 @@ fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n         (span, zst, align1)\n     });\n \n-    let non_zst_fields = field_infos.clone().filter(|(_span, zst, _align1)| !*zst);\n+    let non_zst_fields = field_infos.clone().filter_map(|(span, zst, _align1)| if !zst {\n+        Some(span)\n+    } else {\n+        None\n+    });\n     let non_zst_count = non_zst_fields.clone().count();\n     if non_zst_count != 1 {\n-        let field_spans: Vec<_> = non_zst_fields.map(|(span, _zst, _align1)| span).collect();\n-\n-        let mut err = struct_span_err!(tcx.sess, sp, E0690,\n-                         \"{}transparent {} needs exactly one non-zero-sized field, but has {}\",\n-                         if adt.is_enum() { \"the variant of a \" } else { \"\" },\n-                         adt.descr(),\n-                         non_zst_count);\n-        if !field_spans.is_empty() {\n-            err.span_note(field_spans,\n-                          &format!(\"the following non-zero-sized fields exist on `{}`:\",\n-                                   tcx.def_path_str(def_id)));\n-        }\n-        err.emit();\n+        bad_non_zero_sized_fields(tcx, adt, non_zst_count, non_zst_fields, sp);\n     }\n     for (span, zst, align1) in field_infos {\n         if zst && !align1 {\n-            span_err!(tcx.sess, span, E0691,\n-                      \"zero-sized field in transparent {} has alignment larger than 1\",\n-                      adt.descr());\n+            struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0691,\n+                \"zero-sized field in transparent {} has alignment larger than 1\",\n+                adt.descr(),\n+            ).span_label(span, \"has alignment larger than 1\").emit();\n         }\n     }\n }"}, {"sha": "8ba079b89f50952841fc9f304fe4895c23d6c914", "filename": "src/test/ui/feature-gates/feature-gate-transparent_enums.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06d2a891c72fa29477114d67c8672e0eaacddd0b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06d2a891c72fa29477114d67c8672e0eaacddd0b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr?ref=06d2a891c72fa29477114d67c8672e0eaacddd0b", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: transparent enums are unstable\n   --> $DIR/feature-gate-transparent_enums.rs:2:1\n    |\n-LL | / enum OkButUnstableEnum {\n-LL | |     Foo((), String, ()),\n-LL | | }\n-   | |_^\n+LL | enum OkButUnstableEnum {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/60405\n    = help: add #![feature(transparent_enums)] to the crate attributes to enable"}, {"sha": "341324c3d6764f87b38c02bba96add7fcede6594", "filename": "src/test/ui/feature-gates/feature-gate-transparent_unions.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/06d2a891c72fa29477114d67c8672e0eaacddd0b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06d2a891c72fa29477114d67c8672e0eaacddd0b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr?ref=06d2a891c72fa29477114d67c8672e0eaacddd0b", "patch": "@@ -1,11 +1,8 @@\n error[E0658]: transparent unions are unstable\n   --> $DIR/feature-gate-transparent_unions.rs:2:1\n    |\n-LL | / union OkButUnstableUnion {\n-LL | |     field: u8,\n-LL | |     zst: (),\n-LL | | }\n-   | |_^\n+LL | union OkButUnstableUnion {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/60405\n    = help: add #![feature(transparent_unions)] to the crate attributes to enable"}, {"sha": "f0c1fbe8ac9e1ba1df67730e303384df3c6eb45c", "filename": "src/test/ui/repr/repr-transparent.stderr", "status": "modified", "additions": 34, "deletions": 60, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/06d2a891c72fa29477114d67c8672e0eaacddd0b/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06d2a891c72fa29477114d67c8672e0eaacddd0b/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr?ref=06d2a891c72fa29477114d67c8672e0eaacddd0b", "patch": "@@ -2,61 +2,57 @@ error[E0690]: transparent struct needs exactly one non-zero-sized field, but has\n   --> $DIR/repr-transparent.rs:11:1\n    |\n LL | struct NoFields;\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:14:1\n    |\n LL | struct ContainsOnlyZst(());\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:17:1\n    |\n LL | struct ContainsOnlyZstArray([bool; 0]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:20:1\n    |\n LL | struct ContainsMultipleZst(PhantomData<*const i32>, NoFields);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 2\n   --> $DIR/repr-transparent.rs:24:1\n    |\n LL | struct MultipleNonZst(u8, u8);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the following non-zero-sized fields exist on `MultipleNonZst`:\n-  --> $DIR/repr-transparent.rs:24:23\n-   |\n-LL | struct MultipleNonZst(u8, u8);\n-   |                       ^^  ^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^--^^--^^\n+   | |                     |   |\n+   | |                     |   this field is non-zero-sized\n+   | |                     this field is non-zero-sized\n+   | needs exactly one non-zero-sized field, but has 2\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 2\n   --> $DIR/repr-transparent.rs:30:1\n    |\n LL | pub struct StructWithProjection(f32, <f32 as Mirror>::It);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the following non-zero-sized fields exist on `StructWithProjection`:\n-  --> $DIR/repr-transparent.rs:30:33\n-   |\n-LL | pub struct StructWithProjection(f32, <f32 as Mirror>::It);\n-   |                                 ^^^  ^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^^-------------------^^\n+   | |                               |    |\n+   | |                               |    this field is non-zero-sized\n+   | |                               this field is non-zero-sized\n+   | needs exactly one non-zero-sized field, but has 2\n \n error[E0691]: zero-sized field in transparent struct has alignment larger than 1\n   --> $DIR/repr-transparent.rs:34:32\n    |\n LL | struct NontrivialAlignZst(u32, [u16; 0]);\n-   |                                ^^^^^^^^\n+   |                                ^^^^^^^^ has alignment larger than 1\n \n error[E0691]: zero-sized field in transparent struct has alignment larger than 1\n   --> $DIR/repr-transparent.rs:40:24\n    |\n LL | struct GenericAlign<T>(ZstAlign32<T>, u32);\n-   |                        ^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^^^^ has alignment larger than 1\n \n error[E0084]: unsupported representation for zero-variant enum\n   --> $DIR/repr-transparent.rs:42:1\n@@ -70,71 +66,49 @@ error[E0731]: transparent enum needs exactly one variant, but has 0\n   --> $DIR/repr-transparent.rs:43:1\n    |\n LL | enum Void {}\n-   | ^^^^^^^^^^^^\n+   | ^^^^^^^^^ needs exactly one variant, but has 0\n \n error[E0690]: the variant of a transparent enum needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:47:1\n    |\n-LL | / enum FieldlessEnum {\n-LL | |     Foo,\n-LL | | }\n-   | |_^\n+LL | enum FieldlessEnum {\n+   | ^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: the variant of a transparent enum needs exactly one non-zero-sized field, but has 2\n   --> $DIR/repr-transparent.rs:52:1\n    |\n-LL | / enum TooManyFieldsEnum {\n-LL | |     Foo(u32, String),\n-LL | | }\n-   | |_^\n-   |\n-note: the following non-zero-sized fields exist on `TooManyFieldsEnum`:\n-  --> $DIR/repr-transparent.rs:53:9\n-   |\n+LL | enum TooManyFieldsEnum {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 2\n LL |     Foo(u32, String),\n-   |         ^^^  ^^^^^^\n+   |         ---  ------ this field is non-zero-sized\n+   |         |\n+   |         this field is non-zero-sized\n \n error[E0731]: transparent enum needs exactly one variant, but has 2\n   --> $DIR/repr-transparent.rs:58:1\n    |\n-LL | / enum TooManyVariants {\n-LL | |     Foo(String),\n-LL | |     Bar,\n-LL | | }\n-   | |_^\n-   |\n-note: the following variants exist on `TooManyVariants`\n-  --> $DIR/repr-transparent.rs:59:5\n-   |\n+LL | enum TooManyVariants {\n+   | ^^^^^^^^^^^^^^^^^^^^ needs exactly one variant, but has 2\n LL |     Foo(String),\n-   |     ^^^^^^^^^^^\n+   |     -----------\n LL |     Bar,\n-   |     ^^^\n+   |     --- too many variants in `TooManyVariants`\n \n error[E0690]: transparent union needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:64:1\n    |\n-LL | / union UnitUnion {\n-LL | |     u: (),\n-LL | | }\n-   | |_^\n+LL | union UnitUnion {\n+   | ^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent union needs exactly one non-zero-sized field, but has 2\n   --> $DIR/repr-transparent.rs:69:1\n    |\n-LL | / union TooManyFields {\n-LL | |     u: u32,\n-LL | |     s: i32\n-LL | | }\n-   | |_^\n-   |\n-note: the following non-zero-sized fields exist on `TooManyFields`:\n-  --> $DIR/repr-transparent.rs:70:5\n-   |\n+LL | union TooManyFields {\n+   | ^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 2\n LL |     u: u32,\n-   |     ^^^^^^\n+   |     ------ this field is non-zero-sized\n LL |     s: i32\n-   |     ^^^^^^\n+   |     ------ this field is non-zero-sized\n \n error: aborting due to 15 previous errors\n "}]}