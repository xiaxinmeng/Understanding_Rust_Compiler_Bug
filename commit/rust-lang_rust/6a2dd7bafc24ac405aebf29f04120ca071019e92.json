{"sha": "6a2dd7bafc24ac405aebf29f04120ca071019e92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMmRkN2JhZmMyNGFjNDA1YWViZjI5ZjA0MTIwY2EwNzEwMTllOTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-03T14:13:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-03T14:13:15Z"}, "message": "Merge #3836\n\n3836: Macro patterns are not confused with expressions. r=matklad a=matklad\n\nWe treat macro calls as expressions (there's appropriate Into impl),\nwhich causes problem if there's expresison and non-expression macro in\nthe same node (like in the match arm).\n\nWe fix this problem by nesting macor patterns into another node (the\nsame way we nest path into PathExpr or PathPat). Ideally, we probably\nshould add a similar nesting for macro expressions, but that needs\nsome careful thinking about macros in blocks: `{ am_i_expression!() }`.\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ac21306c7bf9dc816f4b0e9b50322f57256eddfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac21306c7bf9dc816f4b0e9b50322f57256eddfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2dd7bafc24ac405aebf29f04120ca071019e92", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeh0R7CRBK7hj4Ov3rIwAAdHIIABQvs4+22TQwsgz6e6U5H2VV\nwnwclYplhV4gRQehcGHmaw+GRe1oojsWRcpHnGp7Hk1yqL3WvLrbLF0/g9UfylOC\nzd7LiWV6Ux8A7Bf3co4kwe6O2DGiw4bmVHDh3HOFQBhm4y6bOG/VHm/KZ9mMYRvw\n34JnxZ9TdiWAV5HstC6A+L6lTc7JfC/J9gZ+u457COCWKxLvdUxSQ5Ecd5V0so37\nQ4yT7Ye0T/0GqtrpCTLY9E7/QBgJEjJVCfFDNRrQtFFFI6ytfOfHk/aJ6IR4YJge\n+0wv2tnzleea2t5d5tK3eBWkRlxYeq5dz8UH46S+zzHXuidojMlY1YwbxkgSXGc=\n=W/V3\n-----END PGP SIGNATURE-----\n", "payload": "tree ac21306c7bf9dc816f4b0e9b50322f57256eddfa\nparent 795b8cf9c5a6f3be4117823c896f41d1a4455079\nparent da8eb29a2f70a58122903bf087bd6c1d0fbd6d3f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585923195 +0000\ncommitter GitHub <noreply@github.com> 1585923195 +0000\n\nMerge #3836\n\n3836: Macro patterns are not confused with expressions. r=matklad a=matklad\n\nWe treat macro calls as expressions (there's appropriate Into impl),\nwhich causes problem if there's expresison and non-expression macro in\nthe same node (like in the match arm).\n\nWe fix this problem by nesting macor patterns into another node (the\nsame way we nest path into PathExpr or PathPat). Ideally, we probably\nshould add a similar nesting for macro expressions, but that needs\nsome careful thinking about macros in blocks: `{ am_i_expression!() }`.\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2dd7bafc24ac405aebf29f04120ca071019e92", "html_url": "https://github.com/rust-lang/rust/commit/6a2dd7bafc24ac405aebf29f04120ca071019e92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2dd7bafc24ac405aebf29f04120ca071019e92/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795b8cf9c5a6f3be4117823c896f41d1a4455079", "url": "https://api.github.com/repos/rust-lang/rust/commits/795b8cf9c5a6f3be4117823c896f41d1a4455079", "html_url": "https://github.com/rust-lang/rust/commit/795b8cf9c5a6f3be4117823c896f41d1a4455079"}, {"sha": "da8eb29a2f70a58122903bf087bd6c1d0fbd6d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/da8eb29a2f70a58122903bf087bd6c1d0fbd6d3f", "html_url": "https://github.com/rust-lang/rust/commit/da8eb29a2f70a58122903bf087bd6c1d0fbd6d3f"}], "stats": {"total": 130, "additions": 100, "deletions": 30}, "files": [{"sha": "8d4b8b0f0fbe78ca16a89f29e6e1c29ec740ab0d", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=6a2dd7bafc24ac405aebf29f04120ca071019e92", "patch": "@@ -672,8 +672,7 @@ impl ExprCollector<'_> {\n             }\n \n             // FIXME: implement\n-            ast::Pat::BoxPat(_) => Pat::Missing,\n-            ast::Pat::RangePat(_) => Pat::Missing,\n+            ast::Pat::BoxPat(_) | ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n         self.alloc_pat(pattern, Either::Left(ptr))"}, {"sha": "ff4599b7128f55dbf0306cb16b57f9385919295e", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=6a2dd7bafc24ac405aebf29f04120ca071019e92", "patch": "@@ -1,8 +1,10 @@\n-use super::{infer, type_at, type_at_pos};\n-use crate::test_db::TestDB;\n use insta::assert_snapshot;\n use ra_db::fixture::WithFixture;\n \n+use super::{infer, type_at, type_at_pos};\n+\n+use crate::test_db::TestDB;\n+\n #[test]\n fn cfg_impl_def() {\n     let (db, pos) = TestDB::with_position(\n@@ -658,3 +660,28 @@ fn test() {\n     );\n     assert_eq!(\"S\", type_at_pos(&db, pos));\n }\n+\n+#[test]\n+fn macro_in_arm() {\n+    assert_snapshot!(\n+        infer(r#\"\n+macro_rules! unit {\n+    () => { () };\n+}\n+\n+fn main() {\n+    let x = match () {\n+        unit!() => 92u32,\n+    };\n+}\n+\"#),\n+        @r###\"\n+    [52; 111) '{     ...  }; }': ()\n+    [62; 63) 'x': u32\n+    [66; 108) 'match ...     }': u32\n+    [72; 74) '()': ()\n+    [85; 92) 'unit!()': ()\n+    [96; 101) '92u32': u32\n+    \"###\n+    );\n+}"}, {"sha": "c486c02113ec8e4a4b4fb5047cf0225f56157480", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=6a2dd7bafc24ac405aebf29f04120ca071019e92", "patch": "@@ -79,8 +79,6 @@ fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n }\n \n pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n-    // test block_items\n-    // fn a() { fn b() {} }\n     let m = p.start();\n     // test attr_on_expr_stmt\n     // fn foo() {\n@@ -97,6 +95,8 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n         return;\n     }\n \n+    // test block_items\n+    // fn a() { fn b() {} }\n     let m = match items::maybe_item(p, m, items::ItemFlavor::Mod) {\n         Ok(()) => return,\n         Err(m) => m,"}, {"sha": "936d27575c9ae7a7b1f1c3afefadda19965ec95c", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=6a2dd7bafc24ac405aebf29f04120ca071019e92", "patch": "@@ -70,15 +70,6 @@ fn pattern_single_r(p: &mut Parser, recovery_set: TokenSet) {\n                 return;\n             }\n         }\n-        // test marco_pat\n-        // fn main() {\n-        //     let m!(x) = 0;\n-        // }\n-        if lhs.kind() == PATH_PAT && p.at(T![!]) {\n-            let m = lhs.undo_completion(p);\n-            items::macro_call_after_excl(p);\n-            m.complete(p, MACRO_CALL);\n-        }\n     }\n }\n \n@@ -92,12 +83,12 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n         IDENT => match p.nth(1) {\n             // Checks the token after an IDENT to see if a pattern is a path (Struct { .. }) or macro\n             // (T![x]).\n-            T!['('] | T!['{'] | T![!] => path_pat(p),\n-            T![:] if p.nth_at(1, T![::]) => path_pat(p),\n+            T!['('] | T!['{'] | T![!] => path_or_macro_pat(p),\n+            T![:] if p.nth_at(1, T![::]) => path_or_macro_pat(p),\n             _ => bind_pat(p, true),\n         },\n \n-        _ if paths::is_use_path_start(p) => path_pat(p),\n+        _ if paths::is_use_path_start(p) => path_or_macro_pat(p),\n         _ if is_literal_pat_start(p) => literal_pat(p),\n \n         T![.] if p.at(T![..]) => dot_dot_pat(p),\n@@ -146,7 +137,7 @@ fn literal_pat(p: &mut Parser) -> CompletedMarker {\n //     let Bar { .. } = ();\n //     let Bar(..) = ();\n // }\n-fn path_pat(p: &mut Parser) -> CompletedMarker {\n+fn path_or_macro_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(paths::is_use_path_start(p));\n     let m = p.start();\n     paths::expr_path(p);\n@@ -159,6 +150,14 @@ fn path_pat(p: &mut Parser) -> CompletedMarker {\n             record_field_pat_list(p);\n             RECORD_PAT\n         }\n+        // test marco_pat\n+        // fn main() {\n+        //     let m!(x) = 0;\n+        // }\n+        T![!] => {\n+            items::macro_call_after_excl(p);\n+            return m.complete(p, MACRO_CALL).precede(p).complete(p, MACRO_PAT);\n+        }\n         _ => PATH_PAT,\n     };\n     m.complete(p, kind)"}, {"sha": "4c16cf1cd9a4273c3a3e491d94af5d7d9cea429c", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=6a2dd7bafc24ac405aebf29f04120ca071019e92", "patch": "@@ -167,6 +167,7 @@ pub enum SyntaxKind {\n     SLICE_PAT,\n     RANGE_PAT,\n     LITERAL_PAT,\n+    MACRO_PAT,\n     TUPLE_EXPR,\n     ARRAY_EXPR,\n     PAREN_EXPR,"}, {"sha": "0c339b9879d4c7262add801a170bf1548f8f5262", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=6a2dd7bafc24ac405aebf29f04120ca071019e92", "patch": "@@ -2563,6 +2563,38 @@ impl LiteralPat {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct MacroPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl std::fmt::Display for MacroPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl AstNode for MacroPat {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            MACRO_PAT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl MacroPat {\n+    pub fn macro_call(&self) -> Option<MacroCall> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordPat {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -4600,6 +4632,7 @@ pub enum Pat {\n     SlicePat(SlicePat),\n     RangePat(RangePat),\n     LiteralPat(LiteralPat),\n+    MacroPat(MacroPat),\n }\n impl From<OrPat> for Pat {\n     fn from(node: OrPat) -> Pat {\n@@ -4671,6 +4704,11 @@ impl From<LiteralPat> for Pat {\n         Pat::LiteralPat(node)\n     }\n }\n+impl From<MacroPat> for Pat {\n+    fn from(node: MacroPat) -> Pat {\n+        Pat::MacroPat(node)\n+    }\n+}\n impl std::fmt::Display for Pat {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4681,7 +4719,7 @@ impl AstNode for Pat {\n         match kind {\n             OR_PAT | PAREN_PAT | REF_PAT | BOX_PAT | BIND_PAT | PLACEHOLDER_PAT | DOT_DOT_PAT\n             | PATH_PAT | RECORD_PAT | TUPLE_STRUCT_PAT | TUPLE_PAT | SLICE_PAT | RANGE_PAT\n-            | LITERAL_PAT => true,\n+            | LITERAL_PAT | MACRO_PAT => true,\n             _ => false,\n         }\n     }\n@@ -4701,6 +4739,7 @@ impl AstNode for Pat {\n             SLICE_PAT => Pat::SlicePat(SlicePat { syntax }),\n             RANGE_PAT => Pat::RangePat(RangePat { syntax }),\n             LITERAL_PAT => Pat::LiteralPat(LiteralPat { syntax }),\n+            MACRO_PAT => Pat::MacroPat(MacroPat { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -4721,6 +4760,7 @@ impl AstNode for Pat {\n             Pat::SlicePat(it) => &it.syntax,\n             Pat::RangePat(it) => &it.syntax,\n             Pat::LiteralPat(it) => &it.syntax,\n+            Pat::MacroPat(it) => &it.syntax,\n         }\n     }\n }"}, {"sha": "36d8f4a5f5cc4bb7e59c878cc42884c289a2995c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0129_marco_pat.txt", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0129_marco_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6a2dd7bafc24ac405aebf29f04120ca071019e92/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0129_marco_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0129_marco_pat.txt?ref=6a2dd7bafc24ac405aebf29f04120ca071019e92", "patch": "@@ -15,16 +15,17 @@ SOURCE_FILE@[0; 33)\n         LET_STMT@[16; 30)\n           LET_KW@[16; 19) \"let\"\n           WHITESPACE@[19; 20) \" \"\n-          MACRO_CALL@[20; 25)\n-            PATH@[20; 21)\n-              PATH_SEGMENT@[20; 21)\n-                NAME_REF@[20; 21)\n-                  IDENT@[20; 21) \"m\"\n-            EXCL@[21; 22) \"!\"\n-            TOKEN_TREE@[22; 25)\n-              L_PAREN@[22; 23) \"(\"\n-              IDENT@[23; 24) \"x\"\n-              R_PAREN@[24; 25) \")\"\n+          MACRO_PAT@[20; 25)\n+            MACRO_CALL@[20; 25)\n+              PATH@[20; 21)\n+                PATH_SEGMENT@[20; 21)\n+                  NAME_REF@[20; 21)\n+                    IDENT@[20; 21) \"m\"\n+              EXCL@[21; 22) \"!\"\n+              TOKEN_TREE@[22; 25)\n+                L_PAREN@[22; 23) \"(\"\n+                IDENT@[23; 24) \"x\"\n+                R_PAREN@[24; 25) \")\"\n           WHITESPACE@[25; 26) \" \"\n           EQ@[26; 27) \"=\"\n           WHITESPACE@[27; 28) \" \""}, {"sha": "d9f51ec39942c650aac08ef3cee985047f9729b2", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a2dd7bafc24ac405aebf29f04120ca071019e92/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2dd7bafc24ac405aebf29f04120ca071019e92/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=6a2dd7bafc24ac405aebf29f04120ca071019e92", "patch": "@@ -138,6 +138,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"SLICE_PAT\",\n         \"RANGE_PAT\",\n         \"LITERAL_PAT\",\n+        \"MACRO_PAT\",\n         // atoms\n         \"TUPLE_EXPR\",\n         \"ARRAY_EXPR\",\n@@ -440,6 +441,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct SlicePat { args: [Pat] }\n         struct RangePat {}\n         struct LiteralPat { Literal }\n+        struct MacroPat { MacroCall }\n \n         struct RecordPat { RecordFieldPatList, Path }\n         struct RecordFieldPatList {\n@@ -622,6 +624,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             SlicePat,\n             RangePat,\n             LiteralPat,\n+            MacroPat,\n         }\n \n         enum AttrInput { Literal, TokenTree }"}]}