{"sha": "d642c3b6f8d9679ee4fab5ffc6899f96071a0df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NDJjM2I2ZjhkOTY3OWVlNGZhYjVmZmM2ODk5Zjk2MDcxYTBkZjA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-07-22T14:59:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-08-06T19:13:11Z"}, "message": "Fix clippy", "tree": {"sha": "de7c49299394718b6df5377b621f0094c2fcc6e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7c49299394718b6df5377b621f0094c2fcc6e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0", "html_url": "https://github.com/rust-lang/rust/commit/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52a9c157d04808b61d245c251c223a81ae2dcb70", "url": "https://api.github.com/repos/rust-lang/rust/commits/52a9c157d04808b61d245c251c223a81ae2dcb70", "html_url": "https://github.com/rust-lang/rust/commit/52a9c157d04808b61d245c251c223a81ae2dcb70"}], "stats": {"total": 88, "additions": 39, "deletions": 49}, "files": [{"sha": "94371b7d23e3406d76e908f39c2bce8198d41a26", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=d642c3b6f8d9679ee4fab5ffc6899f96071a0df0", "patch": "@@ -2,6 +2,7 @@ use crate::utils::{implements_trait, is_entrypoint_fn, is_type_diagnostic_item,\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_ast::ast::{AttrKind, Attribute};\n+use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -249,62 +250,52 @@ fn lint_for_missing_headers<'tcx>(\n     }\n }\n \n-/// Cleanup documentation decoration (`///` and such).\n+/// Cleanup documentation decoration.\n ///\n /// We can't use `rustc_ast::attr::AttributeMethods::with_desugared_doc` or\n /// `rustc_ast::parse::lexer::comments::strip_doc_comment_decoration` because we\n /// need to keep track of\n /// the spans but this function is inspired from the later.\n #[allow(clippy::cast_possible_truncation)]\n #[must_use]\n-pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(usize, Span)>) {\n+pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span: Span) -> (String, Vec<(usize, Span)>) {\n     // one-line comments lose their prefix\n-    const ONELINERS: &[&str] = &[\"///!\", \"///\", \"//!\", \"//\"];\n-    for prefix in ONELINERS {\n-        if comment.starts_with(*prefix) {\n-            let doc = &comment[prefix.len()..];\n-            let mut doc = doc.to_owned();\n-            doc.push('\\n');\n-            return (\n-                doc.to_owned(),\n-                vec![(doc.len(), span.with_lo(span.lo() + BytePos(prefix.len() as u32)))],\n-            );\n-        }\n+    if comment_kind == CommentKind::Line {\n+        let mut doc = doc.to_owned();\n+        doc.push('\\n');\n+        let len = doc.len();\n+        return (doc, vec![(len, span.with_lo(span.lo() + BytePos(3)))]);\n     }\n \n-    if comment.starts_with(\"/*\") {\n-        let doc = &comment[3..comment.len() - 2];\n-        let mut sizes = vec![];\n-        let mut contains_initial_stars = false;\n-        for line in doc.lines() {\n-            let offset = line.as_ptr() as usize - comment.as_ptr() as usize;\n-            debug_assert_eq!(offset as u32 as usize, offset);\n-            contains_initial_stars |= line.trim_start().starts_with('*');\n-            // +1 for the newline\n-            sizes.push((line.len() + 1, span.with_lo(span.lo() + BytePos(offset as u32))));\n-        }\n-        if !contains_initial_stars {\n-            return (doc.to_string(), sizes);\n-        }\n-        // remove the initial '*'s if any\n-        let mut no_stars = String::with_capacity(doc.len());\n-        for line in doc.lines() {\n-            let mut chars = line.chars();\n-            while let Some(c) = chars.next() {\n-                if c.is_whitespace() {\n-                    no_stars.push(c);\n-                } else {\n-                    no_stars.push(if c == '*' { ' ' } else { c });\n-                    break;\n-                }\n+    let mut sizes = vec![];\n+    let mut contains_initial_stars = false;\n+    for line in doc.lines() {\n+        let offset = line.as_ptr() as usize - doc.as_ptr() as usize;\n+        debug_assert_eq!(offset as u32 as usize, offset);\n+        contains_initial_stars |= line.trim_start().starts_with('*');\n+        // +1 for the newline\n+        sizes.push((line.len() + 1, span.with_lo(span.lo() + BytePos(3 + offset as u32))));\n+    }\n+    if !contains_initial_stars {\n+        return (doc.to_string(), sizes);\n+    }\n+    // remove the initial '*'s if any\n+    let mut no_stars = String::with_capacity(doc.len());\n+    for line in doc.lines() {\n+        let mut chars = line.chars();\n+        while let Some(c) = chars.next() {\n+            if c.is_whitespace() {\n+                no_stars.push(c);\n+            } else {\n+                no_stars.push(if c == '*' { ' ' } else { c });\n+                break;\n             }\n-            no_stars.push_str(chars.as_str());\n-            no_stars.push('\\n');\n         }\n-        return (no_stars, sizes);\n+        no_stars.push_str(chars.as_str());\n+        no_stars.push('\\n');\n     }\n \n-    panic!(\"not a doc-comment: {}\", comment);\n+    (no_stars, sizes)\n }\n \n #[derive(Copy, Clone)]\n@@ -318,9 +309,8 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n     let mut spans = vec![];\n \n     for attr in attrs {\n-        if let AttrKind::DocComment(ref comment) = attr.kind {\n-            let comment = comment.to_string();\n-            let (comment, current_spans) = strip_doc_comment_decoration(&comment, attr.span);\n+        if let AttrKind::DocComment(comment_kind, comment) = attr.kind {\n+            let (comment, current_spans) = strip_doc_comment_decoration(&comment.as_str(), comment_kind, attr.span);\n             spans.extend_from_slice(&current_spans);\n             doc.push_str(&comment);\n         } else if attr.has_name(sym!(doc)) {"}, {"sha": "d00114eed696ad40fa9875eb44bf387f5c9d6fd2", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=d642c3b6f8d9679ee4fab5ffc6899f96071a0df0", "patch": "@@ -60,13 +60,13 @@ declare_lint_pass!(TabsInDocComments => [TABS_IN_DOC_COMMENTS]);\n \n impl TabsInDocComments {\n     fn warn_if_tabs_in_doc(cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n-        if let ast::AttrKind::DocComment(comment) = attr.kind {\n+        if let ast::AttrKind::DocComment(_, comment) = attr.kind {\n             let comment = comment.as_str();\n \n             for (lo, hi) in get_chunks_of_tabs(&comment) {\n                 let new_span = Span::new(\n-                    attr.span.lo() + BytePos(lo),\n-                    attr.span.lo() + BytePos(hi),\n+                    attr.span.lo() + BytePos(3 + lo),\n+                    attr.span.lo() + BytePos(3 + hi),\n                     attr.span.ctxt(),\n                 );\n                 span_lint_and_sugg("}, {"sha": "ad02bc5fd8e7dba9d784c048e4edea729cc59cbb", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d642c3b6f8d9679ee4fab5ffc6899f96071a0df0/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=d642c3b6f8d9679ee4fab5ffc6899f96071a0df0", "patch": "@@ -506,7 +506,7 @@ pub fn eq_attr(l: &Attribute, r: &Attribute) -> bool {\n     use AttrKind::*;\n     l.style == r.style\n         && match (&l.kind, &r.kind) {\n-            (DocComment(l), DocComment(r)) => l == r,\n+            (DocComment(l1, l2), DocComment(r1, r2)) => l1 == r1 && l2 == r2,\n             (Normal(l), Normal(r)) => eq_path(&l.path, &r.path) && eq_mac_args(&l.args, &r.args),\n             _ => false,\n         }"}]}