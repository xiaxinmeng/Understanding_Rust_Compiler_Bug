{"sha": "b764b2a7aaef7af093f18aeed6e53a8287c05914", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjRiMmE3YWFlZjdhZjA5M2YxOGFlZWQ2ZTUzYTgyODdjMDU5MTQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-01-14T23:31:20Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-01-14T23:31:20Z"}, "message": "extend or_fun_call lint to cover methods", "tree": {"sha": "7e3daae85f410f48f2b028888013222856aed530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e3daae85f410f48f2b028888013222856aed530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b764b2a7aaef7af093f18aeed6e53a8287c05914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b764b2a7aaef7af093f18aeed6e53a8287c05914", "html_url": "https://github.com/rust-lang/rust/commit/b764b2a7aaef7af093f18aeed6e53a8287c05914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b764b2a7aaef7af093f18aeed6e53a8287c05914/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e056dfc701f3b0157c4a40a96cc5edc5e2e6ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e056dfc701f3b0157c4a40a96cc5edc5e2e6ca", "html_url": "https://github.com/rust-lang/rust/commit/57e056dfc701f3b0157c4a40a96cc5edc5e2e6ca"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "4d48ff45c9288de56fcc3b4acc67e98281db4166", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b764b2a7aaef7af093f18aeed6e53a8287c05914/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764b2a7aaef7af093f18aeed6e53a8287c05914/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=b764b2a7aaef7af093f18aeed6e53a8287c05914", "patch": "@@ -724,7 +724,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n     fn check_general_case(\n         cx: &LateContext,\n         name: &str,\n-        fun: &hir::Expr,\n+        fun_span: Span,\n         self_expr: &hir::Expr,\n         arg: &hir::Expr,\n         or_has_args: bool,\n@@ -765,7 +765,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n         let sugg: Cow<_> = match (fn_has_arguments, !or_has_args) {\n             (true, _) => format!(\"|_| {}\", snippet(cx, arg.span, \"..\")).into(),\n             (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")).into(),\n-            (false, true) => snippet(cx, fun.span, \"..\"),\n+            (false, true) => snippet(cx, fun_span, \"..\"),\n         };\n \n         span_lint_and_then(cx,\n@@ -780,11 +780,17 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n     }\n \n     if args.len() == 2 {\n-        if let hir::ExprCall(ref fun, ref or_args) = args[1].node {\n-            let or_has_args = !or_args.is_empty();\n-            if !check_unwrap_or_default(cx, name, fun, &args[0], &args[1], or_has_args, expr.span) {\n-                check_general_case(cx, name, fun, &args[0], &args[1], or_has_args, expr.span);\n+        match args[1].node {\n+            hir::ExprCall(ref fun, ref or_args) => {\n+                let or_has_args = !or_args.is_empty();\n+                if !check_unwrap_or_default(cx, name, fun, &args[0], &args[1], or_has_args, expr.span) {\n+                    check_general_case(cx, name, fun.span, &args[0], &args[1], or_has_args, expr.span);\n+                }\n+            }\n+            hir::ExprMethodCall(fun, _, ref or_args) => {\n+                check_general_case(cx, name, fun.span, &args[0], &args[1], !or_args.is_empty(), expr.span)\n             }\n+            _ => {}\n         }\n     }\n }"}, {"sha": "cd04a3b6b973dff2b23ba044317da38d632f79e3", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b764b2a7aaef7af093f18aeed6e53a8287c05914/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764b2a7aaef7af093f18aeed6e53a8287c05914/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=b764b2a7aaef7af093f18aeed6e53a8287c05914", "patch": "@@ -127,7 +127,6 @@ fn option_methods() {\n                 );\n     // macro case\n     let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0); // should not lint\n-\n }\n \n /// Struct to generate false positives for things with .iter()\n@@ -340,6 +339,12 @@ fn or_fun_call() {\n     //~^ERROR use of `or_insert` followed by a function call\n     //~|HELP try this\n     //~|SUGGESTION btree.entry(42).or_insert_with(String::new);\n+\n+    let stringy = Some(String::from(\"\"));\n+    let _ = stringy.unwrap_or(\"\".to_owned());\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION stringy.unwrap_or_else(|| \"\".to_owned());\n }\n \n /// Checks implementation of `ITER_NTH` lint"}]}