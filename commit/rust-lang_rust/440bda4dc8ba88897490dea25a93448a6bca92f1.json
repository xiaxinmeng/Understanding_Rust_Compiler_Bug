{"sha": "440bda4dc8ba88897490dea25a93448a6bca92f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MGJkYTRkYzhiYTg4ODk3NDkwZGVhMjVhOTM0NDhhNmJjYTkyZjE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-30T17:57:34Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-30T18:03:59Z"}, "message": "Rollup merge of #56365 - alexreg:stabilise-self_struct_ctor, r=Centril\n\nStabilize self_struct_ctor feature.\n\n[**Tracking Issue**](https://github.com/rust-lang/rust/issues/51994)", "tree": {"sha": "8637289d8d0b1f36c305f50e6d64f05e5ded1d07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8637289d8d0b1f36c305f50e6d64f05e5ded1d07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/440bda4dc8ba88897490dea25a93448a6bca92f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlwBe5AACgkQ/vbIBR0O\nATwfaQ/+NdegfdRhrrVmCFlL/hwZFS0AWQVTuZg/8prrybwajGACuTRezXLC0ywk\n/TIKVvIA1bdqZONVqpCnRSwKUgsgKeJ5HoRIDQvv3bEZs5Jm//HmXQU3JrT5A4hx\nvKp/jnEL9vH/x5pTCXQBhd5wHP/cX/yQrb/MvTSd4pUwonZdT4/zglsk/MEKGc6O\nyTmghmyxqLwXG6A8+NbURjlljhVAPOgwyYutbDhb2DavIve3XXRTOMJKjGLTBJdW\nQG/a6alblM6wNGCGl+J4MPr0SfP+I2QoNN6OKcsmxIw0Ofcw7KEgf7NuCQmekNRl\n+XQXrS1h5ptldPtilfQKxhNXnPjJS66G1t0bBtxbpt9ZqCbKg0z8EjJ3oPSaeBNo\n7YR6M1pySdF5P0EFxagg5Wo1VXmnIva80ersY6+PO3e/ay7sVX0uqqURg7Ebljwz\nvF4CKORObIhaPVj42r6aJcHF6X8CIY9Wfw4vyedupr6OTeukcowjk3Gifb8VGeYD\nrLUl19SgZFhgyd8MyUGqWCk+hC/jUNaZEPYyjbXPThcIwk6CTRKMArLhRiSfhtbn\nHypzUzUlmbzs2wA6LzFKTB+LszcdcetVn5CU/ut5L4qtH7BOMwo/+fRTJsT3zsQs\nuUBsMFVsJzgRUIrNmasDxzXS8qyd7AyXvgKPKyzdr95xGQgmKdk=\n=Khif\n-----END PGP SIGNATURE-----", "payload": "tree 8637289d8d0b1f36c305f50e6d64f05e5ded1d07\nparent 8641b8d1e254121623620778557b3422f2d460d9\nparent 24717fdaa106ffe1cea7826bdaa8377e0268a183\nauthor kennytm <kennytm@gmail.com> 1543600654 +0800\ncommitter kennytm <kennytm@gmail.com> 1543601039 +0800\n\nRollup merge of #56365 - alexreg:stabilise-self_struct_ctor, r=Centril\n\nStabilize self_struct_ctor feature.\n\n[**Tracking Issue**](https://github.com/rust-lang/rust/issues/51994)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/440bda4dc8ba88897490dea25a93448a6bca92f1", "html_url": "https://github.com/rust-lang/rust/commit/440bda4dc8ba88897490dea25a93448a6bca92f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/440bda4dc8ba88897490dea25a93448a6bca92f1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8641b8d1e254121623620778557b3422f2d460d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8641b8d1e254121623620778557b3422f2d460d9", "html_url": "https://github.com/rust-lang/rust/commit/8641b8d1e254121623620778557b3422f2d460d9"}, {"sha": "24717fdaa106ffe1cea7826bdaa8377e0268a183", "url": "https://api.github.com/repos/rust-lang/rust/commits/24717fdaa106ffe1cea7826bdaa8377e0268a183", "html_url": "https://github.com/rust-lang/rust/commit/24717fdaa106ffe1cea7826bdaa8377e0268a183"}], "stats": {"total": 170, "additions": 29, "deletions": 141}, "files": [{"sha": "b4742c48a32ff7f13f26d536a2677b031f94a882", "filename": "src/doc/unstable-book/src/language-features/self-struct-ctor.md", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8641b8d1e254121623620778557b3422f2d460d9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-struct-ctor.md", "raw_url": "https://github.com/rust-lang/rust/raw/8641b8d1e254121623620778557b3422f2d460d9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-struct-ctor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-struct-ctor.md?ref=8641b8d1e254121623620778557b3422f2d460d9", "patch": "@@ -1,33 +0,0 @@\n-# `self_struct_ctor`\n-\n-The tracking issue for this feature is: [#51994]\n-[#51994]: https://github.com/rust-lang/rust/issues/51994\n-\n-------------------------\n-\n-The `self_struct_ctor` feature gate lets you use the special `Self`\n-identifier as a constructor and a pattern.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(self_struct_ctor)]\n-\n-struct ST(i32, i32);\n-\n-impl ST {\n-    fn new() -> Self {\n-        ST(0, 1)\n-    }\n-\n-    fn ctor() -> Self {\n-        Self(1,2)           // constructed by `Self`, it is the same as `ST(1, 2)`\n-    }\n-\n-    fn pattern(self) {\n-        match self {\n-            Self(x, y) => println!(\"{} {}\", x, y), // used as a pattern\n-        }\n-    }\n-}\n-```"}, {"sha": "dc8baa112bb59a79ec38d1dbb81a6dc8369bd822", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=440bda4dc8ba88897490dea25a93448a6bca92f1", "patch": "@@ -67,7 +67,6 @@ use syntax::ast;\n use syntax::ast::*;\n use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::source_map::{self, respan, CompilerDesugaringKind, Spanned};\n@@ -3628,7 +3627,6 @@ impl<'a> LoweringContext<'a> {\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n                 );\n-                self.check_self_struct_ctor_feature(&qpath);\n                 hir::PatKind::TupleStruct(\n                     qpath,\n                     pats.iter().map(|x| self.lower_pat(x)).collect(),\n@@ -3643,7 +3641,6 @@ impl<'a> LoweringContext<'a> {\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n                 );\n-                self.check_self_struct_ctor_feature(&qpath);\n                 hir::PatKind::Path(qpath)\n             }\n             PatKind::Struct(ref path, ref fields, etc) => {\n@@ -4039,7 +4036,6 @@ impl<'a> LoweringContext<'a> {\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n                 );\n-                self.check_self_struct_ctor_feature(&qpath);\n                 hir::ExprKind::Path(qpath)\n             }\n             ExprKind::Break(opt_label, ref opt_expr) => {\n@@ -5102,18 +5098,6 @@ impl<'a> LoweringContext<'a> {\n                                             ThinVec::new()));\n         P(self.expr_call(e.span, from_err, hir_vec![e]))\n     }\n-\n-    fn check_self_struct_ctor_feature(&self, qp: &hir::QPath) {\n-        if let hir::QPath::Resolved(_, ref p) = qp {\n-            if p.segments.len() == 1 &&\n-               p.segments[0].ident.name == keywords::SelfType.name() &&\n-               !self.sess.features_untracked().self_struct_ctor {\n-                emit_feature_err(&self.sess.parse_sess, \"self_struct_ctor\",\n-                                 p.span, GateIssue::Language,\n-                                 \"`Self` struct constructors are unstable\");\n-            }\n-        }\n-    }\n }\n \n fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body>) -> Vec<hir::BodyId> {"}, {"sha": "ab0094df0e219b8349d95e7450feca01890ee756", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=440bda4dc8ba88897490dea25a93448a6bca92f1", "patch": "@@ -117,8 +117,9 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n                 self.reachable_symbols.insert(node_id);\n             }\n             Some(def) => {\n-                let def_id = def.def_id();\n-                if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n+                if let Some((node_id, def_id)) = def.opt_def_id().and_then(|def_id| {\n+                    self.tcx.hir.as_local_node_id(def_id).map(|node_id| (node_id, def_id))\n+                }) {\n                     if self.def_id_represents_local_inlined_item(def_id) {\n                         self.worklist.push(node_id);\n                     } else {"}, {"sha": "2402de5a816b71492afb8e7707cfd0a0cd135015", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=440bda4dc8ba88897490dea25a93448a6bca92f1", "patch": "@@ -475,9 +475,6 @@ declare_features! (\n     // Non-builtin attributes in inner attribute position\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    // Self struct constructor  (RFC 2302)\n-    (active, self_struct_ctor, \"1.30.0\", Some(51994), None),\n-\n     // allow mixing of bind-by-move in patterns and references to\n     // those identifiers in guards, *if* we are using MIR-borrowck\n     // (aka NLL). Essentially this means you need to be on\n@@ -688,9 +685,11 @@ declare_features! (\n     (accepted, macro_literal_matcher, \"1.31.0\", Some(35625), None),\n     // Use `?` as the Kleene \"at most one\" operator\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n+    // Self struct constructor  (RFC 2302)\n+    (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n );\n \n-// If you change this, please modify src/doc/unstable-book as well. You must\n+// If you change this, please modify `src/doc/unstable-book` as well. You must\n // move that documentation into the relevant place in the other docs, and\n // remove the chapter on the flag.\n "}, {"sha": "1ec20c50034bdc4bfe5b0af0b620885349a14cd1", "filename": "src/test/run-pass/rfcs/rfc-2302-self-struct-ctor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2302-self-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2302-self-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2302-self-struct-ctor.rs?ref=440bda4dc8ba88897490dea25a93448a6bca92f1", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(self_struct_ctor)]\n-\n #![allow(dead_code)]\n \n use std::fmt::Display;"}, {"sha": "98eab3949132046005f628d9dc0dd95455c91a21", "filename": "src/test/ui/feature-gates/feature-gate-self-struct-ctor.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8641b8d1e254121623620778557b3422f2d460d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8641b8d1e254121623620778557b3422f2d460d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.rs?ref=8641b8d1e254121623620778557b3422f2d460d9", "patch": "@@ -1,22 +0,0 @@\n-struct ST1(i32, i32);\n-\n-impl ST1 {\n-    fn ctor() -> Self {\n-        Self(1,2)\n-        //~^ ERROR: `Self` struct constructors are unstable (see issue #51994) [E0658]\n-    }\n-}\n-\n-struct ST2;\n-\n-impl ST2 {\n-    fn ctor() -> Self {\n-        Self\n-        //~^ ERROR: `Self` struct constructors are unstable (see issue #51994) [E0658]\n-    }\n-}\n-\n-fn main() {\n-    let _ = ST1::ctor();\n-    let _ = ST2::ctor();\n-}"}, {"sha": "6061a0db76ec54a38f31f07300b80456072915a6", "filename": "src/test/ui/feature-gates/feature-gate-self-struct-ctor.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8641b8d1e254121623620778557b3422f2d460d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8641b8d1e254121623620778557b3422f2d460d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.stderr?ref=8641b8d1e254121623620778557b3422f2d460d9", "patch": "@@ -1,19 +0,0 @@\n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/feature-gate-self-struct-ctor.rs:5:9\n-   |\n-LL |         Self(1,2)\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/feature-gate-self-struct-ctor.rs:14:9\n-   |\n-LL |         Self\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "bd222b7fe980ed64acc1101c8ac92c62a8d6ac46", "filename": "src/test/ui/issues/issue-56202.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fissues%2Fissue-56202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fissues%2Fissue-56202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56202.rs?ref=440bda4dc8ba88897490dea25a93448a6bca92f1", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+\n+trait FooTrait {}\n+\n+trait BarTrait {\n+    fn foo<T: FooTrait>(_: T) -> Self;\n+}\n+\n+struct FooStruct(u32);\n+\n+impl BarTrait for FooStruct {\n+    fn foo<T: FooTrait>(_: T) -> Self {\n+        Self(u32::default())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b50fc68bed6be587c24f1d525165931dfd543fb6", "filename": "src/test/ui/keyword/keyword-self-as-identifier.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs?ref=440bda4dc8ba88897490dea25a93448a6bca92f1", "patch": "@@ -10,5 +10,4 @@\n \n fn main() {\n     let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-        //~^ ERROR `Self` struct constructors are unstable (see issue #51994)\n }"}, {"sha": "c47f4aeabefd81f2cdcf53cceaef157cc3fdbefe", "filename": "src/test/ui/keyword/keyword-self-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr?ref=440bda4dc8ba88897490dea25a93448a6bca92f1", "patch": "@@ -4,15 +4,6 @@ error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n LL |     let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n    |         ^^^^ not found in this scope\n \n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/keyword-self-as-identifier.rs:12:9\n-   |\n-LL |     let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0531, E0658.\n-For more information about an error, try `rustc --explain E0531`.\n+For more information about this error, try `rustc --explain E0531`."}, {"sha": "8331ae0b307d95ebd222685fdf2147be7be246c8", "filename": "src/test/ui/self/self_type_keyword-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs?ref=440bda4dc8ba88897490dea25a93448a6bca92f1", "patch": "@@ -13,14 +13,11 @@ use self::Self as Foo; //~ ERROR unresolved import `self::Self`\n pub fn main() {\n     let Self = 5;\n     //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-    //~^^ ERROR `Self` struct constructors are unstable (see issue #51994)\n \n     match 15 {\n         Self => (),\n         //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-        //~^^ ERROR `Self` struct constructors are unstable (see issue #51994)\n         Foo { x: Self } => (),\n         //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-        //~^^ ERROR `Self` struct constructors are unstable (see issue #51994)\n     }\n }"}, {"sha": "972e5bdddc6733493e530b2b1015c11bbac8336b", "filename": "src/test/ui/self/self_type_keyword-2.stderr", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/440bda4dc8ba88897490dea25a93448a6bca92f1/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr?ref=440bda4dc8ba88897490dea25a93448a6bca92f1", "patch": "@@ -11,42 +11,18 @@ LL |     let Self = 5;\n    |         ^^^^ not found in this scope\n \n error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n-  --> $DIR/self_type_keyword-2.rs:19:9\n+  --> $DIR/self_type_keyword-2.rs:18:9\n    |\n LL |         Self => (),\n    |         ^^^^ not found in this scope\n \n error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n-  --> $DIR/self_type_keyword-2.rs:22:18\n+  --> $DIR/self_type_keyword-2.rs:20:18\n    |\n LL |         Foo { x: Self } => (),\n    |                  ^^^^ not found in this scope\n \n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/self_type_keyword-2.rs:14:9\n-   |\n-LL |     let Self = 5;\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/self_type_keyword-2.rs:19:9\n-   |\n-LL |         Self => (),\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/self_type_keyword-2.rs:22:18\n-   |\n-LL |         Foo { x: Self } => (),\n-   |                  ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0432, E0531, E0658.\n+Some errors occurred: E0432, E0531.\n For more information about an error, try `rustc --explain E0432`."}]}