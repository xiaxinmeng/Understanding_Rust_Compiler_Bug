{"sha": "344df76fed727b565b905f3f32ee467f8e3aec2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NGRmNzZmZWQ3MjdiNTY1YjkwNWYzZjMyZWU0NjdmOGUzYWVjMmQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-26T18:58:34Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-17T22:42:45Z"}, "message": "ty::layout: intern `FnAbi`s as `&'tcx`.", "tree": {"sha": "2501400a33f4aff6b319e7be71240f3cb1a2cfed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2501400a33f4aff6b319e7be71240f3cb1a2cfed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/344df76fed727b565b905f3f32ee467f8e3aec2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/344df76fed727b565b905f3f32ee467f8e3aec2d", "html_url": "https://github.com/rust-lang/rust/commit/344df76fed727b565b905f3f32ee467f8e3aec2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/344df76fed727b565b905f3f32ee467f8e3aec2d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c02e3f550dbebe297f897b03be4e9dd3454695e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c02e3f550dbebe297f897b03be4e9dd3454695e", "html_url": "https://github.com/rust-lang/rust/commit/0c02e3f550dbebe297f897b03be4e9dd3454695e"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "06d1fc717cc926e0a72802c3374391494354cf0d", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=344df76fed727b565b905f3f32ee467f8e3aec2d", "patch": "@@ -239,7 +239,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) instance: Instance<'tcx>,\n     pub(crate) symbol_name: SymbolName<'tcx>,\n     pub(crate) mir: &'tcx Body<'tcx>,\n-    pub(crate) fn_abi: Option<FnAbi<'tcx, Ty<'tcx>>>,\n+    pub(crate) fn_abi: Option<&'tcx FnAbi<'tcx, Ty<'tcx>>>,\n \n     pub(crate) bcx: FunctionBuilder<'clif>,\n     pub(crate) block_map: IndexVec<BasicBlock, Block>,"}, {"sha": "c557946afbc4b399c3a3161449d0f911257c2b69", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=344df76fed727b565b905f3f32ee467f8e3aec2d", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         &self,\n         fx: &mut FunctionCx<'a, 'tcx, Bx>,\n         bx: &mut Bx,\n-        fn_abi: FnAbi<'tcx, Ty<'tcx>>,\n+        fn_abi: &'tcx FnAbi<'tcx, Ty<'tcx>>,\n         fn_ptr: Bx::Value,\n         llargs: &[Bx::Value],\n         destination: Option<(ReturnDest<'tcx, Bx::Value>, mir::BasicBlock)>,"}, {"sha": "2c7636f1913dd8cf238feda0f72ef0fb1fdc4b60", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=344df76fed727b565b905f3f32ee467f8e3aec2d", "patch": "@@ -29,7 +29,7 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n \n     cx: &'a Bx::CodegenCx,\n \n-    fn_abi: FnAbi<'tcx, Ty<'tcx>>,\n+    fn_abi: &'tcx FnAbi<'tcx, Ty<'tcx>>,\n \n     /// When unwinding is initiated, we have to store this personality\n     /// value somewhere so that we can load it and re-use it in the"}, {"sha": "2dd43a4e8522d0e0a3dacb3828d80c88c3dd3bf6", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=344df76fed727b565b905f3f32ee467f8e3aec2d", "patch": "@@ -11,7 +11,8 @@\n macro_rules! arena_types {\n     ($macro:path, $tcx:lifetime) => (\n         $macro!([\n-            [] layouts: rustc_target::abi::Layout,\n+            [] layout: rustc_target::abi::Layout,\n+            [] fn_abi: rustc_target::abi::call::FnAbi<$tcx, rustc_middle::ty::Ty<$tcx>>,\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef,\n             [] steal_thir: rustc_data_structures::steal::Steal<rustc_middle::thir::Thir<$tcx>>,"}, {"sha": "e803a667879a1b4548d6b9f368795163dcbe82bc", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=344df76fed727b565b905f3f32ee467f8e3aec2d", "patch": "@@ -55,6 +55,7 @@ use rustc_span::def_id::{DefPathHash, StableCrateId};\n use rustc_span::source_map::{MultiSpan, SourceMap};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Layout, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n \n@@ -135,6 +136,7 @@ pub struct CtxtInterners<'tcx> {\n     const_allocation: InternedSet<'tcx, Allocation>,\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, Layout>,\n+    fn_abi: InternedSet<'tcx, FnAbi<'tcx, Ty<'tcx>>>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -155,6 +157,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             const_allocation: Default::default(),\n             bound_variable_kinds: Default::default(),\n             layout: Default::default(),\n+            fn_abi: Default::default(),\n         }\n     }\n \n@@ -1959,6 +1962,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     self.0.interners.const_allocation.len()\n                 )?;\n                 writeln!(fmt, \"Layout interner: #{}\", self.0.interners.layout.len())?;\n+                writeln!(fmt, \"FnAbi interner: #{}\", self.0.interners.fn_abi.len())?;\n \n                 Ok(())\n             }\n@@ -2083,6 +2087,7 @@ direct_interners! {\n     const_: mk_const(Const<'tcx>),\n     const_allocation: intern_const_alloc(Allocation),\n     layout: intern_layout(Layout),\n+    fn_abi: intern_fn_abi(FnAbi<'tcx, Ty<'tcx>>),\n }\n \n macro_rules! slice_interners {"}, {"sha": "42ac77054190a1ce84d853b36f9e8cdf5f17235f", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=344df76fed727b565b905f3f32ee467f8e3aec2d", "patch": "@@ -2838,21 +2838,21 @@ where\n     ///\n     /// NB: this doesn't handle virtual calls - those should use `FnAbi::of_instance`\n     /// instead, where the instance is an `InstanceDef::Virtual`.\n-    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n+    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> &'tcx Self;\n \n     /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n     /// direct calls to an `fn`.\n     ///\n     /// NB: that includes virtual calls, which are represented by \"direct calls\"\n     /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).\n-    fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n+    fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> &'tcx Self;\n }\n \n impl<'tcx, C> FnAbiExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n where\n     C: HasTyCtxt<'tcx> + HasParamEnv<'tcx>,\n {\n-    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n+    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> &'tcx Self {\n         call::FnAbi::new_internal(\n             &LayoutCx { tcx: cx.tcx(), param_env: cx.param_env() },\n             sig,\n@@ -2872,7 +2872,7 @@ where\n         })\n     }\n \n-    fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n+    fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> &'tcx Self {\n         let sig = instance.fn_sig_for_fn_abi(cx.tcx());\n \n         let caller_location = if instance.def.requires_caller_location(cx.tcx()) {\n@@ -2912,7 +2912,7 @@ where\n /// Implementation detail of computing `FnAbi`s, shouldn't be exported.\n // FIXME(eddyb) move this off of being generic on `C: LayoutOf`, and\n // explicitly take `LayoutCx` *or* `TyCtxt` and `ParamEnvAnd<...>`.\n-trait FnAbiInternalExt<'tcx, C>: Sized\n+trait FnAbiInternalExt<'tcx, C>\n where\n     C: LayoutOf<'tcx, LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>>\n         + HasTargetSpec,\n@@ -2927,7 +2927,7 @@ where\n         codegen_fn_attr_flags: CodegenFnAttrFlags,\n         // FIXME(eddyb) replace this with something typed, like an `enum`.\n         make_self_ptr_thin: bool,\n-    ) -> Result<Self, FnAbiError<'tcx>>;\n+    ) -> Result<&'tcx Self, FnAbiError<'tcx>>;\n     fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi) -> Result<(), FnAbiError<'tcx>>;\n }\n \n@@ -2943,7 +2943,7 @@ where\n         caller_location: Option<Ty<'tcx>>,\n         codegen_fn_attr_flags: CodegenFnAttrFlags,\n         force_thin_self_ptr: bool,\n-    ) -> Result<Self, FnAbiError<'tcx>> {\n+    ) -> Result<&'tcx Self, FnAbiError<'tcx>> {\n         debug!(\"FnAbi::new_internal({:?}, {:?})\", sig, extra_args);\n \n         let sig = cx.tcx().normalize_erasing_late_bound_regions(cx.param_env(), sig);\n@@ -3106,7 +3106,7 @@ where\n         };\n         fn_abi.adjust_for_abi(cx, sig.abi)?;\n         debug!(\"FnAbi::new_internal = {:?}\", fn_abi);\n-        Ok(fn_abi)\n+        Ok(cx.tcx().intern_fn_abi(fn_abi))\n     }\n \n     fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi) -> Result<(), FnAbiError<'tcx>> {"}, {"sha": "6f06f2b56ada6b4603d0d41d7f507d8bf42fb75b", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344df76fed727b565b905f3f32ee467f8e3aec2d/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=344df76fed727b565b905f3f32ee467f8e3aec2d", "patch": "@@ -25,7 +25,7 @@ mod x86;\n mod x86_64;\n mod x86_win64;\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum PassMode {\n     /// Ignore the argument.\n     ///\n@@ -60,7 +60,7 @@ pub use attr_impl::ArgAttribute;\n mod attr_impl {\n     // The subset of llvm::Attribute needed for arguments, packed into a bitfield.\n     bitflags::bitflags! {\n-        #[derive(Default)]\n+        #[derive(Default, HashStable_Generic)]\n         pub struct ArgAttribute: u16 {\n             const NoAlias   = 1 << 1;\n             const NoCapture = 1 << 2;\n@@ -77,7 +77,7 @@ mod attr_impl {\n /// Sometimes an ABI requires small integers to be extended to a full or partial register. This enum\n /// defines if this extension should be zero-extension or sign-extension when necessary. When it is\n /// not necessary to extend the argument, this enum is ignored.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum ArgExtension {\n     None,\n     Zext,\n@@ -86,7 +86,7 @@ pub enum ArgExtension {\n \n /// A compact representation of LLVM attributes (at least those relevant for this module)\n /// that can be manipulated without interacting with LLVM's Attribute machinery.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct ArgAttributes {\n     pub regular: ArgAttribute,\n     pub arg_ext: ArgExtension,\n@@ -127,14 +127,14 @@ impl ArgAttributes {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum RegKind {\n     Integer,\n     Float,\n     Vector,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct Reg {\n     pub kind: RegKind,\n     pub size: Size,\n@@ -184,7 +184,7 @@ impl Reg {\n \n /// An argument passed entirely registers with the\n /// same kind (e.g., HFA / HVA on PPC64 and AArch64).\n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct Uniform {\n     pub unit: Reg,\n \n@@ -209,7 +209,7 @@ impl Uniform {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct CastTarget {\n     pub prefix: [Option<RegKind>; 8],\n     pub prefix_chunk_size: Size,\n@@ -437,7 +437,7 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n \n /// Information about how to pass an argument to,\n /// or return a value from, a function, under some ABI.\n-#[derive(Debug)]\n+#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct ArgAbi<'a, Ty> {\n     pub layout: TyAndLayout<'a, Ty>,\n \n@@ -545,7 +545,7 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum Conv {\n     // General language calling conventions, for which every target\n     // should have its own backend (e.g. LLVM) support.\n@@ -579,7 +579,7 @@ pub enum Conv {\n ///\n /// I will do my best to describe this structure, but these\n /// comments are reverse-engineered and may be inaccurate. -NDM\n-#[derive(Debug)]\n+#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct FnAbi<'a, Ty> {\n     /// The LLVM types of each argument.\n     pub args: Vec<ArgAbi<'a, Ty>>,"}]}