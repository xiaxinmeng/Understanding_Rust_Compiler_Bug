{"sha": "f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "node_id": "C_kwDOAAsO6NoAKGYzMGQ3YzI0OTViMzE4OGJmYTBjZjhiZDZkYmJmNzY0OTRjOTg0NWU", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-07-19T20:08:03Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-08-08T19:04:44Z"}, "message": "Improve suggestions", "tree": {"sha": "2c0e78bd7376dee06ce8d38b70f6ecc4a0c515d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c0e78bd7376dee06ce8d38b70f6ecc4a0c515d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "html_url": "https://github.com/rust-lang/rust/commit/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "html_url": "https://github.com/rust-lang/rust/commit/f3f86d8fd96dfa5986ffe10d0837169e473b9b83"}], "stats": {"total": 112, "additions": 59, "deletions": 53}, "files": [{"sha": "82fafb8a45ee0e05eb2d51df5180d87fb8e33e84", "filename": "clippy_lints/src/methods/iter_once_empty.rs", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e/clippy_lints%2Fsrc%2Fmethods%2Fiter_once_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e/clippy_lints%2Fsrc%2Fmethods%2Fiter_once_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_once_empty.rs?ref=f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::is_lang_ctor;\n+use clippy_utils::is_no_std_crate;\n use clippy_utils::source::snippet;\n \n use rustc_errors::Applicability;\n@@ -9,6 +10,22 @@ use rustc_lint::LateContext;\n \n use super::{ITER_EMPTY, ITER_ONCE};\n \n+enum IterType {\n+    Iter,\n+    IterMut,\n+    IntoIter,\n+}\n+\n+impl IterType {\n+    fn ref_prefix(&self) -> &'static str {\n+        match self {\n+            Self::Iter => \"&\",\n+            Self::IterMut => \"&mut \",\n+            Self::IntoIter => \"\",\n+        }\n+    }\n+}\n+\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, method_name: &str, recv: &Expr<'_>) {\n     let item = match &recv.kind {\n         ExprKind::Array(v) if v.len() <= 1 => v.first(),\n@@ -32,39 +49,42 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, method_name:\n         },\n         _ => return,\n     };\n+    let iter_type = match method_name {\n+        \"iter\" => IterType::Iter,\n+        \"iter_mut\" => IterType::IterMut,\n+        \"into_iter\" => IterType::IntoIter,\n+        _ => return,\n+    };\n \n     if let Some(i) = item {\n-        let (sugg, msg) = match method_name {\n-            \"iter\" => (\n-                format!(\"std::iter::once(&{})\", snippet(cx, i.span, \"...\")),\n-                \"this `iter` call can be replaced with std::iter::once\",\n-            ),\n-            \"iter_mut\" => (\n-                format!(\"std::iter::once(&mut {})\", snippet(cx, i.span, \"...\")),\n-                \"this `iter_mut` call can be replaced with std::iter::once\",\n-            ),\n-            \"into_iter\" => (\n-                format!(\"std::iter::once({})\", snippet(cx, i.span, \"...\")),\n-                \"this `into_iter` call can be replaced with std::iter::once\",\n-            ),\n-            _ => return,\n-        };\n-        span_lint_and_sugg(cx, ITER_ONCE, expr.span, msg, \"try\", sugg, Applicability::Unspecified);\n+        let sugg = format!(\n+            \"{}::iter::once({}{})\",\n+            if is_no_std_crate(cx) { \"core\" } else { \"std\" },\n+            iter_type.ref_prefix(),\n+            snippet(cx, i.span, \"...\")\n+        );\n+        span_lint_and_sugg(\n+            cx,\n+            ITER_ONCE,\n+            expr.span,\n+            &format!(\"`{method_name}` call on a collection with only one item\"),\n+            \"try\",\n+            sugg,\n+            Applicability::MaybeIncorrect,\n+        );\n     } else {\n-        let msg = match method_name {\n-            \"iter\" => \"this `iter call` can be replaced with std::iter::empty\",\n-            \"iter_mut\" => \"this `iter_mut` call can be replaced with std::iter::empty\",\n-            \"into_iter\" => \"this `into_iter` call can be replaced with std::iter::empty\",\n-            _ => return,\n-        };\n         span_lint_and_sugg(\n             cx,\n             ITER_EMPTY,\n             expr.span,\n-            msg,\n+            &format!(\"`{method_name}` call on an empty collection\"),\n             \"try\",\n-            \"std::iter::empty()\".to_string(),\n-            Applicability::Unspecified,\n+            if is_no_std_crate(cx) {\n+                \"core::iter::empty()\".to_string()\n+            } else {\n+                \"std::iter::empty()\".to_string()\n+            },\n+            Applicability::MaybeIncorrect,\n         );\n     }\n }"}, {"sha": "015cd094a9e0897437c91c2bb20405dd17350de5", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "patch": "@@ -2308,14 +2308,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// ### What it does\n     ///\n-    /// Checks for usage of:\n-    ///\n-    /// - `[foo].iter()`\n-    /// - `[foo].iter_mut()`\n-    /// - `[foo].into_iter()`\n-    /// - `Some(foo).iter()`\n-    /// - `Some(foo).iter_mut()`\n-    /// - `Some(foo).into_iter()`\n+    /// Checks for calls to `iter`, `iter_mut` or `into_iter` on collections containing a single item\n     ///\n     /// ### Why is this bad?\n     ///\n@@ -2346,14 +2339,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// ### What it does\n     ///\n-    /// Checks for usage of:\n-    ///\n-    /// - `[].iter()`\n-    /// - `[].iter_mut()`\n-    /// - `[].into_iter()`\n-    /// - `None.iter()`\n-    /// - `None.iter_mut()`\n-    /// - `None.into_iter()`\n+    /// Checks for calls to `iter`, `iter_mut` or `into_iter` on empty collections\n     ///\n     /// ### Why is this bad?\n     ///"}, {"sha": "40c08e6f82bd7d8e6b3410951d421c2a2a68a44b", "filename": "tests/ui/iter_empty.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e/tests%2Fui%2Fiter_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e/tests%2Fui%2Fiter_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_empty.stderr?ref=f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "patch": "@@ -1,36 +1,36 @@\n-error: this `into_iter` call can be replaced with std::iter::empty\n+error: `into_iter` call on an empty collection\n   --> $DIR/iter_empty.rs:6:16\n    |\n LL |     assert_eq!([].into_iter().next(), Option::<i32>::None);\n    |                ^^^^^^^^^^^^^^ help: try: `std::iter::empty()`\n    |\n    = note: `-D clippy::iter-empty` implied by `-D warnings`\n \n-error: this `iter_mut` call can be replaced with std::iter::empty\n+error: `iter_mut` call on an empty collection\n   --> $DIR/iter_empty.rs:7:16\n    |\n LL |     assert_eq!([].iter_mut().next(), Option::<&mut i32>::None);\n    |                ^^^^^^^^^^^^^ help: try: `std::iter::empty()`\n \n-error: this `iter call` can be replaced with std::iter::empty\n+error: `iter` call on an empty collection\n   --> $DIR/iter_empty.rs:8:16\n    |\n LL |     assert_eq!([].iter().next(), Option::<&i32>::None);\n    |                ^^^^^^^^^ help: try: `std::iter::empty()`\n \n-error: this `into_iter` call can be replaced with std::iter::empty\n+error: `into_iter` call on an empty collection\n   --> $DIR/iter_empty.rs:9:16\n    |\n LL |     assert_eq!(None.into_iter().next(), Option::<i32>::None);\n    |                ^^^^^^^^^^^^^^^^ help: try: `std::iter::empty()`\n \n-error: this `iter_mut` call can be replaced with std::iter::empty\n+error: `iter_mut` call on an empty collection\n   --> $DIR/iter_empty.rs:10:16\n    |\n LL |     assert_eq!(None.iter_mut().next(), Option::<&mut i32>::None);\n    |                ^^^^^^^^^^^^^^^ help: try: `std::iter::empty()`\n \n-error: this `iter call` can be replaced with std::iter::empty\n+error: `iter` call on an empty collection\n   --> $DIR/iter_empty.rs:11:16\n    |\n LL |     assert_eq!(None.iter().next(), Option::<&i32>::None);"}, {"sha": "b22c8a99f10b5737e4c5b074cbb67fc3831da60d", "filename": "tests/ui/iter_once.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e/tests%2Fui%2Fiter_once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e/tests%2Fui%2Fiter_once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_once.stderr?ref=f30d7c2495b3188bfa0cf8bd6dbbf76494c9845e", "patch": "@@ -1,36 +1,36 @@\n-error: this `into_iter` call can be replaced with std::iter::once\n+error: `into_iter` call on a collection with only one item\n   --> $DIR/iter_once.rs:6:16\n    |\n LL |     assert_eq!([123].into_iter().next(), Some(123));\n    |                ^^^^^^^^^^^^^^^^^ help: try: `std::iter::once(123)`\n    |\n    = note: `-D clippy::iter-once` implied by `-D warnings`\n \n-error: this `iter_mut` call can be replaced with std::iter::once\n+error: `iter_mut` call on a collection with only one item\n   --> $DIR/iter_once.rs:7:16\n    |\n LL |     assert_eq!([123].iter_mut().next(), Some(&mut 123));\n    |                ^^^^^^^^^^^^^^^^ help: try: `std::iter::once(&mut 123)`\n \n-error: this `iter` call can be replaced with std::iter::once\n+error: `iter` call on a collection with only one item\n   --> $DIR/iter_once.rs:8:16\n    |\n LL |     assert_eq!([123].iter().next(), Some(&123));\n    |                ^^^^^^^^^^^^ help: try: `std::iter::once(&123)`\n \n-error: this `into_iter` call can be replaced with std::iter::once\n+error: `into_iter` call on a collection with only one item\n   --> $DIR/iter_once.rs:9:16\n    |\n LL |     assert_eq!(Some(123).into_iter().next(), Some(123));\n    |                ^^^^^^^^^^^^^^^^^^^^^ help: try: `std::iter::once(123)`\n \n-error: this `iter_mut` call can be replaced with std::iter::once\n+error: `iter_mut` call on a collection with only one item\n   --> $DIR/iter_once.rs:10:16\n    |\n LL |     assert_eq!(Some(123).iter_mut().next(), Some(&mut 123));\n    |                ^^^^^^^^^^^^^^^^^^^^ help: try: `std::iter::once(&mut 123)`\n \n-error: this `iter` call can be replaced with std::iter::once\n+error: `iter` call on a collection with only one item\n   --> $DIR/iter_once.rs:11:16\n    |\n LL |     assert_eq!(Some(123).iter().next(), Some(&123));"}]}