{"sha": "e0d42266770dcdb3578a2ea7e14ee91967156a2e", "node_id": "C_kwDOAAsO6NoAKGUwZDQyMjY2NzcwZGNkYjM1NzhhMmVhN2UxNGVlOTE5NjcxNTZhMmU", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-04-02T14:50:08Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-04-02T14:50:08Z"}, "message": "Include a header in .rlink files to provide nicer error messages when a wrong file is parsed as .rlink", "tree": {"sha": "8be4cc0839f644789c21bf27a4d2d90f36cb97ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8be4cc0839f644789c21bf27a4d2d90f36cb97ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0d42266770dcdb3578a2ea7e14ee91967156a2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEg8FrwI85f934CWFa28VT5UDC9hkFAmJIYqAACgkQ28VT5UDC\n9hnSYQwAyeaZHIOUVY5z9Sdji/aMGBknj5JBePjLBG+6+JdOjlfaQktC+rbHWFIe\nTLoToAfe9jtxPBHRL0AqkmZTh5Azwp2FUsdfsGxsjEQqI3I1L+z4dspwilwAslV7\nrLFXGqKJK9zaLT+s1ebR/uvaOrDz/jBskQ/06dzSALi8unNCGtkH/9Lrd81u0Jqy\nvsxcZCNb0cxhcnSEJsUifY18jHuFiWfxVbiOV1njA0R59rYLMnpvY8ruU3cxiA4c\n6dQkkv7Sdl/RN7gKuWdDh4OUqGabE9RFdS8+IDHMTxj0EmfIUYxMhpjCCaeo3Iel\nhEAYqU05w0NCchh5tKhQdk+sPZiODdgSKILbvHcXh/cMl3NBkft8IqQxYM2cm31a\nQW9XEnr0JkVlxcm55zrCJl1NUmSwQhwQEpyvnWqASkYOi1W5ajrptQyOANlCZTbh\nh22JF3r3B68WO13abKJd+7g79z26N4PzmSDAMM3SLAQRrFUuXw8XTiQcP/dlkzVc\nfs9tOre6\n=cCeQ\n-----END PGP SIGNATURE-----", "payload": "tree 8be4cc0839f644789c21bf27a4d2d90f36cb97ba\nparent 07a461ad52b8485b184397b453b5436c70f9f460\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1648911008 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1648911008 +0200\n\nInclude a header in .rlink files to provide nicer error messages when a wrong file is parsed as .rlink\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d42266770dcdb3578a2ea7e14ee91967156a2e", "html_url": "https://github.com/rust-lang/rust/commit/e0d42266770dcdb3578a2ea7e14ee91967156a2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0d42266770dcdb3578a2ea7e14ee91967156a2e/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a461ad52b8485b184397b453b5436c70f9f460", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a461ad52b8485b184397b453b5436c70f9f460", "html_url": "https://github.com/rust-lang/rust/commit/07a461ad52b8485b184397b453b5436c70f9f460"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "38d76afc0e66ecb052e3fe627f1071dfaae588eb", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e0d42266770dcdb3578a2ea7e14ee91967156a2e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d42266770dcdb3578a2ea7e14ee91967156a2e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=e0d42266770dcdb3578a2ea7e14ee91967156a2e", "patch": "@@ -34,6 +34,7 @@ use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n use rustc_span::symbol::Symbol;\n use std::path::{Path, PathBuf};\n+use rustc_serialize::{Decodable, Decoder, Encoder, opaque};\n \n pub mod back;\n pub mod base;\n@@ -190,3 +191,33 @@ pub fn looks_like_rust_object_file(filename: &str) -> bool {\n     // Check if the \"inner\" extension\n     ext2 == Some(RUST_CGU_EXT)\n }\n+\n+const RLINK_MAGIC: &'static [u8; 5] = b\"rlink\";\n+const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n+\n+impl CodegenResults {\n+    pub fn serialize_rlink(codegen_results: &CodegenResults) -> Vec<u8> {\n+        let mut encoder = opaque::Encoder::new(vec![]);\n+        encoder.emit_raw_bytes(RLINK_MAGIC).unwrap();\n+        encoder.emit_str(RUSTC_VERSION.unwrap()).unwrap();\n+\n+        let mut encoder = rustc_serialize::opaque::Encoder::new(encoder.into_inner());\n+        rustc_serialize::Encodable::encode(codegen_results, &mut encoder).unwrap();\n+        encoder.into_inner()\n+    }\n+\n+    pub fn deserialize_rlink(data: Vec<u8>) -> Result<Self, String> {\n+        if !data.starts_with(RLINK_MAGIC) {\n+            return Err(\"The input does not look like a .rlink file\".to_string());\n+        }\n+        let mut decoder = opaque::Decoder::new(&data[RLINK_MAGIC.len()..], 0);\n+        let rustc_version = decoder.read_str();\n+        let current_version = RUSTC_VERSION.unwrap();\n+        if rustc_version != current_version {\n+            return Err(format!(\".rlink file was produced by rustc version {rustc_version}, but the current version is {current_version}.\"));\n+        }\n+\n+        let codegen_results = CodegenResults::decode(&mut decoder);\n+        Ok(codegen_results)\n+    }\n+}"}, {"sha": "a788ee26647e2bbe9850d6eefb0240a5402c9e15", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0d42266770dcdb3578a2ea7e14ee91967156a2e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d42266770dcdb3578a2ea7e14ee91967156a2e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=e0d42266770dcdb3578a2ea7e14ee91967156a2e", "patch": "@@ -588,8 +588,8 @@ pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Comp\n             let rlink_data = fs::read(file).unwrap_or_else(|err| {\n                 sess.fatal(&format!(\"failed to read rlink file: {}\", err));\n             });\n-            let mut decoder = rustc_serialize::opaque::Decoder::new(&rlink_data, 0);\n-            let codegen_results: CodegenResults = rustc_serialize::Decodable::decode(&mut decoder);\n+            let codegen_results = CodegenResults::deserialize_rlink(rlink_data)\n+                .expect(\"Could not deserialize .rlink file\");\n             let result = compiler.codegen_backend().link(sess, codegen_results, &outputs);\n             abort_on_err(result, sess);\n         } else {"}, {"sha": "930715bba267683c97b67b12606f05ab1857b892", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0d42266770dcdb3578a2ea7e14ee91967156a2e/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d42266770dcdb3578a2ea7e14ee91967156a2e/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=e0d42266770dcdb3578a2ea7e14ee91967156a2e", "patch": "@@ -18,6 +18,7 @@ use rustc_span::symbol::sym;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::rc::Rc;\n+use rustc_codegen_ssa::CodegenResults;\n \n /// Represent the result of a query.\n ///\n@@ -360,10 +361,9 @@ impl Linker {\n         }\n \n         if sess.opts.debugging_opts.no_link {\n-            let mut encoder = rustc_serialize::opaque::Encoder::new(Vec::new());\n-            rustc_serialize::Encodable::encode(&codegen_results, &mut encoder).unwrap();\n+            let encoded = CodegenResults::serialize_rlink(&codegen_results);\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n-            std::fs::write(&rlink_file, encoder.into_inner()).map_err(|err| {\n+            std::fs::write(&rlink_file, encoded).map_err(|err| {\n                 sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n             })?;\n             return Ok(());"}]}