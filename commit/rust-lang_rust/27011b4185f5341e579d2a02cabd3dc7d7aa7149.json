{"sha": "27011b4185f5341e579d2a02cabd3dc7d7aa7149", "node_id": "C_kwDOAAsO6NoAKDI3MDExYjQxODVmNTM0MWU1NzlkMmEwMmNhYmQzZGM3ZDdhYTcxNDk", "commit": {"author": {"name": "Michael Benfield", "email": "mbenfield@google.com", "date": "2022-12-06T20:58:33Z"}, "committer": {"name": "Michael Benfield", "email": "mbenfield@google.com", "date": "2022-12-07T19:58:04Z"}, "message": "Use more LFS functions.\n\nOn Linux, use mmap64, open64, openat64, and sendfile64 in place of their\nnon-LFS counterparts.\n\nThis is relevant to #94173.\n\nWith these changes (together with rust-lang/backtrace-rs#501), the\nsimple binaries I produce with rustc seem to have no non-LFS functions,\nso maybe #94173 is fixed. But I can't be sure if I've missed something\nand maybe some non-LFS functions could sneak in somehow.", "tree": {"sha": "0642739ee1b9c6315c2b7ae89c8f328bf1ca95f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0642739ee1b9c6315c2b7ae89c8f328bf1ca95f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27011b4185f5341e579d2a02cabd3dc7d7aa7149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27011b4185f5341e579d2a02cabd3dc7d7aa7149", "html_url": "https://github.com/rust-lang/rust/commit/27011b4185f5341e579d2a02cabd3dc7d7aa7149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27011b4185f5341e579d2a02cabd3dc7d7aa7149/comments", "author": {"login": "mikebenfield", "id": 543755, "node_id": "MDQ6VXNlcjU0Mzc1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikebenfield", "html_url": "https://github.com/mikebenfield", "followers_url": "https://api.github.com/users/mikebenfield/followers", "following_url": "https://api.github.com/users/mikebenfield/following{/other_user}", "gists_url": "https://api.github.com/users/mikebenfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikebenfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikebenfield/subscriptions", "organizations_url": "https://api.github.com/users/mikebenfield/orgs", "repos_url": "https://api.github.com/users/mikebenfield/repos", "events_url": "https://api.github.com/users/mikebenfield/events{/privacy}", "received_events_url": "https://api.github.com/users/mikebenfield/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikebenfield", "id": 543755, "node_id": "MDQ6VXNlcjU0Mzc1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikebenfield", "html_url": "https://github.com/mikebenfield", "followers_url": "https://api.github.com/users/mikebenfield/followers", "following_url": "https://api.github.com/users/mikebenfield/following{/other_user}", "gists_url": "https://api.github.com/users/mikebenfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikebenfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikebenfield/subscriptions", "organizations_url": "https://api.github.com/users/mikebenfield/orgs", "repos_url": "https://api.github.com/users/mikebenfield/repos", "events_url": "https://api.github.com/users/mikebenfield/events{/privacy}", "received_events_url": "https://api.github.com/users/mikebenfield/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "html_url": "https://github.com/rust-lang/rust/commit/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "70fd7525225bf9bf5dd2cd84cc05ea4397fbb066", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=27011b4185f5341e579d2a02cabd3dc7d7aa7149", "patch": "@@ -1743,8 +1743,13 @@ mod remove_dir_impl {\n     use crate::sys::common::small_c_string::run_path_with_cstr;\n     use crate::sys::{cvt, cvt_r};\n \n-    #[cfg(not(all(target_os = \"macos\", not(target_arch = \"aarch64\")),))]\n+    #[cfg(not(any(\n+        target_os = \"linux\",\n+        all(target_os = \"macos\", not(target_arch = \"aarch64\"))\n+    )))]\n     use libc::{fdopendir, openat, unlinkat};\n+    #[cfg(target_os = \"linux\")]\n+    use libc::{fdopendir, openat64 as openat, unlinkat};\n     #[cfg(all(target_os = \"macos\", not(target_arch = \"aarch64\")))]\n     use macos_weak::{fdopendir, openat, unlinkat};\n "}, {"sha": "6fa85e859c05b303495ac8e2d808832a13fd0e5b", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=27011b4185f5341e579d2a02cabd3dc7d7aa7149", "patch": "@@ -61,6 +61,10 @@ use crate::ptr;\n use crate::sync::atomic::{AtomicBool, AtomicU8, Ordering};\n use crate::sys::cvt;\n use crate::sys::weak::syscall;\n+#[cfg(not(target_os = \"linux\"))]\n+use libc::sendfile as sendfile64;\n+#[cfg(target_os = \"linux\")]\n+use libc::sendfile64;\n use libc::{EBADF, EINVAL, ENOSYS, EOPNOTSUPP, EOVERFLOW, EPERM, EXDEV};\n \n #[cfg(test)]\n@@ -647,7 +651,7 @@ fn sendfile_splice(mode: SpliceMode, reader: RawFd, writer: RawFd, len: u64) ->\n \n         let result = match mode {\n             SpliceMode::Sendfile => {\n-                cvt(unsafe { libc::sendfile(writer, reader, ptr::null_mut(), chunk_size) })\n+                cvt(unsafe { sendfile64(writer, reader, ptr::null_mut(), chunk_size) })\n             }\n             SpliceMode::Splice => cvt(unsafe {\n                 splice(reader, ptr::null_mut(), writer, ptr::null_mut(), chunk_size, 0)"}, {"sha": "3d60941e84e393c0a7fac39d1fb70f736ed448db", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=27011b4185f5341e579d2a02cabd3dc7d7aa7149", "patch": "@@ -95,6 +95,10 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n         )))]\n         'poll: {\n             use crate::sys::os::errno;\n+            #[cfg(not(target_os = \"linux\"))]\n+            use libc::open as open64;\n+            #[cfg(target_os = \"linux\")]\n+            use libc::open64;\n             let pfds: &mut [_] = &mut [\n                 libc::pollfd { fd: 0, events: 0, revents: 0 },\n                 libc::pollfd { fd: 1, events: 0, revents: 0 },\n@@ -116,7 +120,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n                 if pfd.revents & libc::POLLNVAL == 0 {\n                     continue;\n                 }\n-                if libc::open(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                if open64(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n                     // If the stream is closed but we failed to reopen it, abort the\n                     // process. Otherwise we wouldn't preserve the safety of\n                     // operations on the corresponding Rust object Stdin, Stdout, or\n@@ -139,9 +143,13 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n         )))]\n         {\n             use crate::sys::os::errno;\n+            #[cfg(not(target_os = \"linux\"))]\n+            use libc::open as open64;\n+            #[cfg(target_os = \"linux\")]\n+            use libc::open64;\n             for fd in 0..3 {\n                 if libc::fcntl(fd, libc::F_GETFD) == -1 && errno() == libc::EBADF {\n-                    if libc::open(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                    if open64(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n                         // If the stream is closed but we failed to reopen it, abort the\n                         // process. Otherwise we wouldn't preserve the safety of\n                         // operations on the corresponding Rust object Stdin, Stdout, or"}, {"sha": "957e086798fd3cd786acd7f01970f42b813f2231", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=27011b4185f5341e579d2a02cabd3dc7d7aa7149", "patch": "@@ -45,7 +45,10 @@ mod imp {\n     use crate::thread;\n \n     use libc::MAP_FAILED;\n-    use libc::{mmap, munmap};\n+    #[cfg(not(target_os = \"linux\"))]\n+    use libc::{mmap as mmap64, munmap};\n+    #[cfg(target_os = \"linux\")]\n+    use libc::{mmap64, munmap};\n     use libc::{sigaction, sighandler_t, SA_ONSTACK, SA_SIGINFO, SIGBUS, SIG_DFL};\n     use libc::{sigaltstack, SIGSTKSZ, SS_DISABLE};\n     use libc::{MAP_ANON, MAP_PRIVATE, PROT_NONE, PROT_READ, PROT_WRITE, SIGSEGV};\n@@ -135,7 +138,7 @@ mod imp {\n         #[cfg(not(any(target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"linux\",)))]\n         let flags = MAP_PRIVATE | MAP_ANON;\n         let stackp =\n-            mmap(ptr::null_mut(), SIGSTKSZ + page_size(), PROT_READ | PROT_WRITE, flags, -1, 0);\n+            mmap64(ptr::null_mut(), SIGSTKSZ + page_size(), PROT_READ | PROT_WRITE, flags, -1, 0);\n         if stackp == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack: {}\", io::Error::last_os_error());\n         }"}, {"sha": "3f1568cbcc7e452ef8cee7bf80d23e091e6303b4", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27011b4185f5341e579d2a02cabd3dc7d7aa7149/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=27011b4185f5341e579d2a02cabd3dc7d7aa7149", "patch": "@@ -658,7 +658,10 @@ pub mod guard {\n ))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    use libc::{mmap, mprotect};\n+    #[cfg(not(target_os = \"linux\"))]\n+    use libc::{mmap as mmap64, mprotect};\n+    #[cfg(target_os = \"linux\")]\n+    use libc::{mmap64, mprotect};\n     use libc::{MAP_ANON, MAP_FAILED, MAP_FIXED, MAP_PRIVATE, PROT_NONE, PROT_READ, PROT_WRITE};\n \n     use crate::io;\n@@ -808,7 +811,7 @@ pub mod guard {\n             // read/write permissions and only then mprotect() it to\n             // no permissions at all. See issue #50313.\n             let stackptr = get_stack_start_aligned()?;\n-            let result = mmap(\n+            let result = mmap64(\n                 stackptr,\n                 page_size,\n                 PROT_READ | PROT_WRITE,"}]}