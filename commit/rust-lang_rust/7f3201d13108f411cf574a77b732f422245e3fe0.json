{"sha": "7f3201d13108f411cf574a77b732f422245e3fe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMzIwMWQxMzEwOGY0MTFjZjU3NGE3N2I3MzJmNDIyMjQ1ZTNmZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-31T09:40:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-31T09:40:02Z"}, "message": "Auto merge of #30641 - tsion:match-range, r=eddyb\n\nThe previous version using `PartialOrd::le` was broken since it passed `T` arguments where `&T` was expected.\n\nIt makes sense to use primitive comparisons since range patterns can only be used with chars and numeric types.\n\nr? @eddyb", "tree": {"sha": "2046794916b3d4eeb68bc877282040902b714002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2046794916b3d4eeb68bc877282040902b714002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3201d13108f411cf574a77b732f422245e3fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3201d13108f411cf574a77b732f422245e3fe0", "html_url": "https://github.com/rust-lang/rust/commit/7f3201d13108f411cf574a77b732f422245e3fe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3201d13108f411cf574a77b732f422245e3fe0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73c0a82ecd28feab1c7328d8659f6d75bd60679", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73c0a82ecd28feab1c7328d8659f6d75bd60679", "html_url": "https://github.com/rust-lang/rust/commit/f73c0a82ecd28feab1c7328d8659f6d75bd60679"}, {"sha": "78526fcfd18ed65cc61af21fc2687174563aec8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/78526fcfd18ed65cc61af21fc2687174563aec8b", "html_url": "https://github.com/rust-lang/rust/commit/78526fcfd18ed65cc61af21fc2687174563aec8b"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "7591e80e85f19666e91e0383aa37b6c466ef8643", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7f3201d13108f411cf574a77b732f422245e3fe0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3201d13108f411cf574a77b732f422245e3fe0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=7f3201d13108f411cf574a77b732f422245e3fe0", "patch": "@@ -185,28 +185,16 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n \n             TestKind::Range { ref lo, ref hi, ty } => {\n-                // Test `v` by computing `PartialOrd::le(lo, v) && PartialOrd::le(v, hi)`.\n+                // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.\n                 let lo = self.literal_operand(test.span, ty.clone(), lo.clone());\n                 let hi = self.literal_operand(test.span, ty.clone(), hi.clone());\n-                let item_ref = self.hir.partial_le(ty);\n+                let val = Operand::Consume(lvalue.clone());\n \n-                let lo_blocks = self.call_comparison_fn(block,\n-                                                        test.span,\n-                                                        item_ref.clone(),\n-                                                        lo,\n-                                                        Operand::Consume(lvalue.clone()));\n+                let fail = self.cfg.start_new_block();\n+                let block = self.compare(block, fail, test.span, BinOp::Le, lo, val.clone());\n+                let block = self.compare(block, fail, test.span, BinOp::Le, val, hi);\n \n-                let hi_blocks = self.call_comparison_fn(lo_blocks[0],\n-                                                        test.span,\n-                                                        item_ref,\n-                                                        Operand::Consume(lvalue.clone()),\n-                                                        hi);\n-\n-                let failure = self.cfg.start_new_block();\n-                self.cfg.terminate(lo_blocks[1], Terminator::Goto { target: failure });\n-                self.cfg.terminate(hi_blocks[1], Terminator::Goto { target: failure });\n-\n-                vec![hi_blocks[0], failure]\n+                vec![block, fail]\n             }\n \n             TestKind::Len { len, op } => {\n@@ -240,6 +228,29 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         }\n     }\n \n+    fn compare(&mut self,\n+               block: BasicBlock,\n+               fail_block: BasicBlock,\n+               span: Span,\n+               op: BinOp,\n+               left: Operand<'tcx>,\n+               right: Operand<'tcx>) -> BasicBlock {\n+        let bool_ty = self.hir.bool_ty();\n+        let result = self.temp(bool_ty);\n+\n+        // result = op(left, right)\n+        self.cfg.push_assign(block, span, &result, Rvalue::BinaryOp(op, left, right));\n+\n+        // branch based on result\n+        let target_block = self.cfg.start_new_block();\n+        self.cfg.terminate(block, Terminator::If {\n+            cond: Operand::Consume(result),\n+            targets: (target_block, fail_block)\n+        });\n+\n+        target_block\n+    }\n+\n     fn call_comparison_fn(&mut self,\n                           block: BasicBlock,\n                           span: Span,"}, {"sha": "d24d0985355c2bb24e0d87208a0714f86c421232", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3201d13108f411cf574a77b732f422245e3fe0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3201d13108f411cf574a77b732f422245e3fe0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=7f3201d13108f411cf574a77b732f422245e3fe0", "patch": "@@ -88,11 +88,6 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         self.cmp_method_ref(eq_def_id, \"eq\", ty)\n     }\n \n-    pub fn partial_le(&mut self, ty: Ty<'tcx>) -> ItemRef<'tcx> {\n-        let ord_def_id = self.tcx.lang_items.ord_trait().unwrap();\n-        self.cmp_method_ref(ord_def_id, \"le\", ty)\n-    }\n-\n     pub fn num_variants(&mut self, adt_def: ty::AdtDef<'tcx>) -> usize {\n         adt_def.variants.len()\n     }"}, {"sha": "14184bd356b459274c6588346e987c4379c14fc4", "filename": "src/test/run-pass/mir_trans_match_range.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7f3201d13108f411cf574a77b732f422245e3fe0/src%2Ftest%2Frun-pass%2Fmir_trans_match_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3201d13108f411cf574a77b732f422245e3fe0/src%2Ftest%2Frun-pass%2Fmir_trans_match_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_match_range.rs?ref=7f3201d13108f411cf574a77b732f422245e3fe0", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_mir]\n+pub fn foo(x: i8) -> i32 {\n+  match x {\n+    1...10 => 0,\n+    _ => 1,\n+  }\n+}\n+\n+fn main() {\n+  assert_eq!(foo(0), 1);\n+  assert_eq!(foo(1), 0);\n+  assert_eq!(foo(2), 0);\n+  assert_eq!(foo(5), 0);\n+  assert_eq!(foo(9), 0);\n+  assert_eq!(foo(10), 0);\n+  assert_eq!(foo(11), 1);\n+  assert_eq!(foo(20), 1);\n+}"}]}