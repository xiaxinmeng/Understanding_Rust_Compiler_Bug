{"sha": "a62a67cc6a8bb3e69b81eebf1265fb1c19103c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MmE2N2NjNmE4YmIzZTY5YjgxZWViZjEyNjVmYjFjMTkxMDNjMzI=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2016-11-09T01:22:09Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2016-11-09T03:03:27Z"}, "message": "Add documentation for some of the add/sub/mul intrinsics\n\nPart of #34338", "tree": {"sha": "de206c789a09a37b34fd9163639183411b696f14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de206c789a09a37b34fd9163639183411b696f14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a62a67cc6a8bb3e69b81eebf1265fb1c19103c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a62a67cc6a8bb3e69b81eebf1265fb1c19103c32", "html_url": "https://github.com/rust-lang/rust/commit/a62a67cc6a8bb3e69b81eebf1265fb1c19103c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a62a67cc6a8bb3e69b81eebf1265fb1c19103c32/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f75fb07222c3c6d7efe0c4252f413deb489246", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f75fb07222c3c6d7efe0c4252f413deb489246", "html_url": "https://github.com/rust-lang/rust/commit/a3f75fb07222c3c6d7efe0c4252f413deb489246"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "3726eee9a93c6d5b6e33a73d6ae7a0444edd80ec", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a62a67cc6a8bb3e69b81eebf1265fb1c19103c32/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a67cc6a8bb3e69b81eebf1265fb1c19103c32/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=a62a67cc6a8bb3e69b81eebf1265fb1c19103c32", "patch": "@@ -1166,12 +1166,21 @@ extern \"rust-intrinsic\" {\n     pub fn bswap<T>(x: T) -> T;\n \n     /// Performs checked integer addition.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `overflowing_add` method. For example,\n+    /// [`std::u32::overflowing_add`](../../std/primitive.u32.html#method.overflowing_add)\n     pub fn add_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer subtraction\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `overflowing_sub` method. For example,\n+    /// [`std::u32::overflowing_sub`](../../std/primitive.u32.html#method.overflowing_sub)\n     pub fn sub_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer multiplication\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `overflowing_mul` method. For example,\n+    /// [`std::u32::overflowing_mul`](../../std/primitive.u32.html#method.overflowing_mul)\n     pub fn mul_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs an unchecked division, resulting in undefined behavior\n@@ -1182,10 +1191,19 @@ extern \"rust-intrinsic\" {\n     pub fn unchecked_rem<T>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2^N, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_add` method. For example,\n+    /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n     pub fn overflowing_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2^N, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_sub` method. For example,\n+    /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n     pub fn overflowing_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2^N, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_mul` method. For example,\n+    /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n     pub fn overflowing_mul<T>(a: T, b: T) -> T;\n \n     /// Returns the value of the discriminant for the variant in 'v',"}]}