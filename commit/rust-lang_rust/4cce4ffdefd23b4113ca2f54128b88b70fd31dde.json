{"sha": "4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjY2U0ZmZkZWZkMjNiNDExM2NhMmY1NDEyOGI4OGI3MGZkMzFkZGU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-11-29T20:13:04Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-11-29T21:11:02Z"}, "message": "Add inline attributes and add unit to CommonTypes", "tree": {"sha": "c216f16a1b8ec4c976b5ce5a60f2c7109afa2a26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c216f16a1b8ec4c976b5ce5a60f2c7109afa2a26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "html_url": "https://github.com/rust-lang/rust/commit/4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dde9e132207b5a40e12f8d5a1a363ebea60e0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dde9e132207b5a40e12f8d5a1a363ebea60e0b0", "html_url": "https://github.com/rust-lang/rust/commit/3dde9e132207b5a40e12f8d5a1a363ebea60e0b0"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "c87dcbe500cbaa2940bca8f060d171ebc2552463", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "patch": "@@ -3614,6 +3614,7 @@ assert_eq!(3\", stringify!($SelfT), \".checked_next_power_of_two(), Some(4));\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_next_power_of_two(), None);\",\n $EndFeature, \"\n ```\"),\n+            #[inline]\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             pub fn checked_next_power_of_two(self) -> Option<Self> {\n                 self.one_less_than_next_power_of_two().checked_add(1)"}, {"sha": "70e922c6676e13262c3695332acc2fd06f67efa5", "filename": "src/librustc/infer/at.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fat.rs?ref=4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "patch": "@@ -52,6 +52,7 @@ pub struct Trace<'a, 'gcx: 'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n+    #[inline]\n     pub fn at(&'a self,\n               cause: &'a ObligationCause<'tcx>,\n               param_env: ty::ParamEnv<'tcx>)"}, {"sha": "7a1ee85acd42c809003ba72dd45b811b4205aaa4", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "patch": "@@ -25,6 +25,7 @@ pub struct OpportunisticTypeResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> OpportunisticTypeResolver<'a, 'gcx, 'tcx> {\n+    #[inline]\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>) -> Self {\n         OpportunisticTypeResolver { infcx }\n     }"}, {"sha": "ab2fa68ab5f8927acb15cd992b53a3fc3160edbf", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "patch": "@@ -1052,6 +1052,7 @@ impl<'tcx,O> Obligation<'tcx,O> {\n }\n \n impl<'tcx> ObligationCause<'tcx> {\n+    #[inline]\n     pub fn new(span: Span,\n                body_id: ast::NodeId,\n                code: ObligationCauseCode<'tcx>)"}, {"sha": "ebcf83cb8ecad158a99707f90b351d17cf8a697a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "patch": "@@ -155,6 +155,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n     }\n \n     /// Intern a type\n+    #[inline(never)]\n     fn intern_ty(\n         local: &CtxtInterners<'tcx>,\n         global: &CtxtInterners<'gcx>,\n@@ -216,6 +217,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n }\n \n pub struct CommonTypes<'tcx> {\n+    pub unit: Ty<'tcx>,\n     pub bool: Ty<'tcx>,\n     pub char: Ty<'tcx>,\n     pub isize: Ty<'tcx>,\n@@ -832,7 +834,9 @@ impl<'tcx> CommonTypes<'tcx> {\n             interners.region.borrow_mut().insert(Interned(r));\n             &*r\n         };\n+\n         CommonTypes {\n+            unit: mk(Tuple(List::empty())),\n             bool: mk(Bool),\n             char: mk(Char),\n             never: mk(Never),\n@@ -885,6 +889,7 @@ pub struct TyCtxt<'a, 'gcx: 'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> Deref for TyCtxt<'a, 'gcx, 'tcx> {\n     type Target = &'a GlobalCtxt<'gcx>;\n+    #[inline(always)]\n     fn deref(&self) -> &Self::Target {\n         &self.gcx\n     }\n@@ -2515,6 +2520,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_fn_ptr(converted_sig)\n     }\n \n+    #[inline]\n     pub fn mk_ty(&self, st: TyKind<'tcx>) -> Ty<'tcx> {\n         CtxtInterners::intern_ty(&self.interners, &self.global_interners, st)\n     }\n@@ -2548,19 +2554,23 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn mk_str(self) -> Ty<'tcx> {\n         self.mk_ty(Str)\n     }\n \n+    #[inline]\n     pub fn mk_static_str(self) -> Ty<'tcx> {\n         self.mk_imm_ref(self.types.re_static, self.mk_str())\n     }\n \n+    #[inline]\n     pub fn mk_adt(self, def: &'tcx AdtDef, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n         // take a copy of substs so that we own the vectors inside\n         self.mk_ty(Adt(def, substs))\n     }\n \n+    #[inline]\n     pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {\n         self.mk_ty(Foreign(def_id))\n     }\n@@ -2584,42 +2594,52 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(Adt(adt_def, substs))\n     }\n \n+    #[inline]\n     pub fn mk_ptr(self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(RawPtr(tm))\n     }\n \n+    #[inline]\n     pub fn mk_ref(self, r: Region<'tcx>, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(Ref(r, tm.ty, tm.mutbl))\n     }\n \n+    #[inline]\n     pub fn mk_mut_ref(self, r: Region<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n         self.mk_ref(r, TypeAndMut {ty: ty, mutbl: hir::MutMutable})\n     }\n \n+    #[inline]\n     pub fn mk_imm_ref(self, r: Region<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n         self.mk_ref(r, TypeAndMut {ty: ty, mutbl: hir::MutImmutable})\n     }\n \n+    #[inline]\n     pub fn mk_mut_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         self.mk_ptr(TypeAndMut {ty: ty, mutbl: hir::MutMutable})\n     }\n \n+    #[inline]\n     pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         self.mk_ptr(TypeAndMut {ty: ty, mutbl: hir::MutImmutable})\n     }\n \n+    #[inline]\n     pub fn mk_nil_ptr(self) -> Ty<'tcx> {\n         self.mk_imm_ptr(self.mk_unit())\n     }\n \n+    #[inline]\n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n         self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))\n     }\n \n+    #[inline]\n     pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(Slice(ty))\n     }\n \n+    #[inline]\n     pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n         self.mk_ty(Tuple(self.intern_type_list(ts)))\n     }\n@@ -2628,10 +2648,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         iter.intern_with(|ts| self.mk_ty(Tuple(self.intern_type_list(ts))))\n     }\n \n+    #[inline]\n     pub fn mk_unit(self) -> Ty<'tcx> {\n-        self.intern_tup(&[])\n+        self.types.unit\n     }\n \n+    #[inline]\n     pub fn mk_diverging_default(self) -> Ty<'tcx> {\n         if self.features().never_type {\n             self.types.never\n@@ -2640,19 +2662,23 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn mk_bool(self) -> Ty<'tcx> {\n         self.mk_ty(Bool)\n     }\n \n+    #[inline]\n     pub fn mk_fn_def(self, def_id: DefId,\n                      substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(FnDef(def_id, substs))\n     }\n \n+    #[inline]\n     pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(FnPtr(fty))\n     }\n \n+    #[inline]\n     pub fn mk_dynamic(\n         self,\n         obj: ty::Binder<&'tcx List<ExistentialPredicate<'tcx>>>,\n@@ -2661,6 +2687,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(Dynamic(obj, reg))\n     }\n \n+    #[inline]\n     pub fn mk_projection(self,\n                          item_def_id: DefId,\n                          substs: &'tcx Substs<'tcx>)\n@@ -2671,11 +2698,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }))\n         }\n \n+    #[inline]\n     pub fn mk_closure(self, closure_id: DefId, closure_substs: ClosureSubsts<'tcx>)\n                       -> Ty<'tcx> {\n         self.mk_ty(Closure(closure_id, closure_substs))\n     }\n \n+    #[inline]\n     pub fn mk_generator(self,\n                         id: DefId,\n                         generator_substs: GeneratorSubsts<'tcx>,\n@@ -2684,32 +2713,39 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(Generator(id, generator_substs, movability))\n     }\n \n+    #[inline]\n     pub fn mk_generator_witness(self, types: ty::Binder<&'tcx List<Ty<'tcx>>>) -> Ty<'tcx> {\n         self.mk_ty(GeneratorWitness(types))\n     }\n \n+    #[inline]\n     pub fn mk_var(self, v: TyVid) -> Ty<'tcx> {\n         self.mk_infer(TyVar(v))\n     }\n \n+    #[inline]\n     pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {\n         self.mk_infer(IntVar(v))\n     }\n \n+    #[inline]\n     pub fn mk_float_var(self, v: FloatVid) -> Ty<'tcx> {\n         self.mk_infer(FloatVar(v))\n     }\n \n+    #[inline]\n     pub fn mk_infer(self, it: InferTy) -> Ty<'tcx> {\n         self.mk_ty(Infer(it))\n     }\n \n+    #[inline]\n     pub fn mk_ty_param(self,\n                        index: u32,\n                        name: InternedString) -> Ty<'tcx> {\n         self.mk_ty(Param(ParamTy { idx: index, name: name }))\n     }\n \n+    #[inline]\n     pub fn mk_self_type(self) -> Ty<'tcx> {\n         self.mk_ty_param(0, keywords::SelfType.name().as_interned_str())\n     }\n@@ -2723,6 +2759,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn mk_opaque(self, def_id: DefId, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(Opaque(def_id, substs))\n     }"}, {"sha": "1bc7d64879267fa9f8b6939f781269876e68156c", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "patch": "@@ -374,6 +374,7 @@ pub struct RegionFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> RegionFolder<'a, 'gcx, 'tcx> {\n+    #[inline]\n     pub fn new(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         skipped_regions: &'a mut bool,"}, {"sha": "4633ab11663472df322e5b73b54b364889150771", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "patch": "@@ -1275,6 +1275,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n         self.skip_binder().projection_ty.item_def_id\n     }\n \n+    #[inline]\n     pub fn to_poly_trait_ref(&self, tcx: TyCtxt<'_, '_, '_>) -> PolyTraitRef<'tcx> {\n         // Note: unlike with `TraitRef::to_poly_trait_ref()`,\n         // `self.0.trait_ref` is permitted to have escaping regions.\n@@ -1633,6 +1634,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// there are no where clauses in scope. Hidden types (like `impl\n     /// Trait`) are left hidden, so this is suitable for ordinary\n     /// type-checking.\n+    #[inline]\n     pub fn empty() -> Self {\n         Self::new(List::empty(), Reveal::UserFacing)\n     }\n@@ -1644,11 +1646,13 @@ impl<'tcx> ParamEnv<'tcx> {\n     ///\n     /// N.B. If you want to have predicates in scope, use `ParamEnv::new`,\n     /// or invoke `param_env.with_reveal_all()`.\n+    #[inline]\n     pub fn reveal_all() -> Self {\n         Self::new(List::empty(), Reveal::All)\n     }\n \n     /// Construct a trait environment with the given set of predicates.\n+    #[inline]\n     pub fn new(caller_bounds: &'tcx List<ty::Predicate<'tcx>>,\n                reveal: Reveal)\n                -> Self {\n@@ -2148,6 +2152,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         }\n     }\n \n+    #[inline]\n     pub fn variant_descr(&self) -> &'static str {\n         match self.adt_kind() {\n             AdtKind::Struct => \"struct\","}, {"sha": "1416cb17feaedf9832f70e4783a9d5ecd0f5f9a1", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "patch": "@@ -667,6 +667,7 @@ impl<'tcx> TraitRef<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn self_ty(&self) -> Ty<'tcx> {\n         self.substs.type_at(0)\n     }\n@@ -978,15 +979,18 @@ impl<'tcx> FnSig<'tcx> {\n pub type PolyFnSig<'tcx> = Binder<FnSig<'tcx>>;\n \n impl<'tcx> PolyFnSig<'tcx> {\n+    #[inline]\n     pub fn inputs(&self) -> Binder<&'tcx [Ty<'tcx>]> {\n         self.map_bound_ref(|fn_sig| fn_sig.inputs())\n     }\n+    #[inline]\n     pub fn input(&self, index: usize) -> ty::Binder<Ty<'tcx>> {\n         self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])\n     }\n     pub fn inputs_and_output(&self) -> ty::Binder<&'tcx List<Ty<'tcx>>> {\n         self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)\n     }\n+    #[inline]\n     pub fn output(&self) -> ty::Binder<Ty<'tcx>> {\n         self.map_bound_ref(|fn_sig| fn_sig.output())\n     }\n@@ -1548,6 +1552,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_ty_var(&self) -> bool {\n         match self.sty {\n             Infer(TyVar(_)) => true,\n@@ -1732,6 +1737,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_integral(&self) -> bool {\n         match self.sty {\n             Infer(IntVar(_)) | Int(_) | Uint(_) => true,\n@@ -1762,6 +1768,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn is_fp(&self) -> bool {\n         match self.sty {\n             Infer(FloatVar(_)) | Float(_) => true,\n@@ -1845,6 +1852,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {\n         match self.sty {\n             Adt(adt, _) => Some(adt),"}, {"sha": "34fb71e4ddf68242380b2823d29049bc46a3a6a9", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cce4ffdefd23b4113ca2f54128b88b70fd31dde/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=4cce4ffdefd23b4113ca2f54128b88b70fd31dde", "patch": "@@ -587,6 +587,7 @@ impl fmt::Debug for SpanData {\n }\n \n impl MultiSpan {\n+    #[inline]\n     pub fn new() -> MultiSpan {\n         MultiSpan {\n             primary_spans: vec![],"}]}