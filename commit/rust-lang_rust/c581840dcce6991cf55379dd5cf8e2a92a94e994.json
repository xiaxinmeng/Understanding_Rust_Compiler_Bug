{"sha": "c581840dcce6991cf55379dd5cf8e2a92a94e994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ODE4NDBkY2NlNjk5MWNmNTUzNzlkZDVjZjhlMmE5MmE5NGU5OTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-16T10:07:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-31T13:51:17Z"}, "message": "Make union-find helper fns private, change to u32.", "tree": {"sha": "03f4f6dad3d4451318fd0a877438ab60adc99924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03f4f6dad3d4451318fd0a877438ab60adc99924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c581840dcce6991cf55379dd5cf8e2a92a94e994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c581840dcce6991cf55379dd5cf8e2a92a94e994", "html_url": "https://github.com/rust-lang/rust/commit/c581840dcce6991cf55379dd5cf8e2a92a94e994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c581840dcce6991cf55379dd5cf8e2a92a94e994/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c62640458f1b8ac0f4d3871a265ea9555b3c3c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c62640458f1b8ac0f4d3871a265ea9555b3c3c8", "html_url": "https://github.com/rust-lang/rust/commit/7c62640458f1b8ac0f4d3871a265ea9555b3c3c8"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "15c30847031593bc460cb75076a42fb43f64f8c0", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c581840dcce6991cf55379dd5cf8e2a92a94e994/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c581840dcce6991cf55379dd5cf8e2a92a94e994/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=c581840dcce6991cf55379dd5cf8e2a92a94e994", "patch": "@@ -456,15 +456,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         use middle::ty::UnconstrainedNumeric::{Neither, UnconstrainedInt, UnconstrainedFloat};\n         match ty.sty {\n             ty::ty_infer(ty::IntVar(vid)) => {\n-                match self.int_unification_table.borrow_mut().get(vid).value {\n-                    None => UnconstrainedInt,\n-                    _ => Neither,\n+                if self.int_unification_table.borrow_mut().has_value(vid) {\n+                    Neither\n+                } else {\n+                    UnconstrainedInt\n                 }\n             },\n             ty::ty_infer(ty::FloatVar(vid)) => {\n-                match self.float_unification_table.borrow_mut().get(vid).value {\n-                    None => UnconstrainedFloat,\n-                    _ => Neither,\n+                if self.float_unification_table.borrow_mut().has_value(vid) {\n+                    Neither\n+                } else {\n+                    UnconstrainedFloat\n                 }\n             },\n             _ => Neither,"}, {"sha": "5effaca32b1235b43a3d188a633604d223953f45", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c581840dcce6991cf55379dd5cf8e2a92a94e994/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c581840dcce6991cf55379dd5cf8e2a92a94e994/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=c581840dcce6991cf55379dd5cf8e2a92a94e994", "patch": "@@ -33,9 +33,9 @@ use util::snapshot_vec as sv;\n pub trait UnifyKey : Clone + Debug + PartialEq {\n     type Value : UnifyValue;\n \n-    fn index(&self) -> usize;\n+    fn index(&self) -> u32;\n \n-    fn from_index(u: usize) -> Self;\n+    fn from_index(u: u32) -> Self;\n \n     fn tag(k: Option<Self>) -> &'static str;\n }\n@@ -123,7 +123,7 @@ impl<K:UnifyKey> UnificationTable<K> {\n \n     pub fn new_key(&mut self, value: K::Value) -> K {\n         let index = self.values.push(Root(value, 0));\n-        let k = UnifyKey::from_index(index);\n+        let k = UnifyKey::from_index(index as u32);\n         debug!(\"{}: created new key: {:?}\",\n                UnifyKey::tag(None::<K>),\n                k);\n@@ -136,8 +136,8 @@ impl<K:UnifyKey> UnificationTable<K> {\n     ///\n     /// NB. This is a building-block operation and you would probably\n     /// prefer to call `probe` below.\n-    pub fn get(&mut self, vid: K) -> Node<K> {\n-        let index = vid.index();\n+    fn get(&mut self, vid: K) -> Node<K> {\n+        let index = vid.index() as usize;\n         let value = (*self.values.get(index)).clone();\n         match value {\n             Redirect(redirect) => {\n@@ -155,7 +155,8 @@ impl<K:UnifyKey> UnificationTable<K> {\n     }\n \n     fn is_root(&self, key: &K) -> bool {\n-        match *self.values.get(key.index()) {\n+        let index = key.index() as usize;\n+        match *self.values.get(index) {\n             Redirect(..) => false,\n             Root(..) => true,\n         }\n@@ -169,7 +170,8 @@ impl<K:UnifyKey> UnificationTable<K> {\n         debug!(\"Updating variable {:?} to {:?}\",\n                key, new_value);\n \n-        self.values.set(key.index(), new_value);\n+        let index = key.index() as usize;\n+        self.values.set(index, new_value);\n     }\n \n     /// Either redirects `node_a` to `node_b` or vice versa, depending\n@@ -180,7 +182,7 @@ impl<K:UnifyKey> UnificationTable<K> {\n     /// really more of a building block. If the values associated with\n     /// your key are non-trivial, you would probably prefer to call\n     /// `unify_var_var` below.\n-    pub fn unify(&mut self, node_a: &Node<K>, node_b: &Node<K>, new_value: K::Value) {\n+    fn unify(&mut self, node_a: &Node<K>, node_b: &Node<K>, new_value: K::Value) {\n         debug!(\"unify(node_a(id={:?}, rank={:?}), node_b(id={:?}, rank={:?}))\",\n                node_a.key,\n                node_a.rank,\n@@ -307,6 +309,10 @@ impl<'tcx,K,V> UnificationTable<K>\n         }\n     }\n \n+    pub fn has_value(&mut self, id: K) -> bool {\n+        self.get(id).value.is_some()\n+    }\n+\n     pub fn probe(&mut self, tcx: &ty::ctxt<'tcx>, a_id: K) -> Option<Ty<'tcx>> {\n         let node_a = self.get(a_id);\n         match node_a.value {\n@@ -322,8 +328,8 @@ impl<'tcx,K,V> UnificationTable<K>\n \n impl UnifyKey for ty::IntVid {\n     type Value = Option<IntVarValue>;\n-    fn index(&self) -> usize { self.index as usize }\n-    fn from_index(i: usize) -> ty::IntVid { ty::IntVid { index: i as u32 } }\n+    fn index(&self) -> u32 { self.index }\n+    fn from_index(i: u32) -> ty::IntVid { ty::IntVid { index: i } }\n     fn tag(_: Option<ty::IntVid>) -> &'static str { \"IntVid\" }\n }\n \n@@ -346,8 +352,8 @@ impl UnifyValue for Option<IntVarValue> { }\n \n impl UnifyKey for ty::FloatVid {\n     type Value = Option<ast::FloatTy>;\n-    fn index(&self) -> usize { self.index as usize }\n-    fn from_index(i: usize) -> ty::FloatVid { ty::FloatVid { index: i as u32 } }\n+    fn index(&self) -> u32 { self.index }\n+    fn from_index(i: u32) -> ty::FloatVid { ty::FloatVid { index: i } }\n     fn tag(_: Option<ty::FloatVid>) -> &'static str { \"FloatVid\" }\n }\n "}]}