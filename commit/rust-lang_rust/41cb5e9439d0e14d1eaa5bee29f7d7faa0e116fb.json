{"sha": "41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "node_id": "C_kwDOAAsO6NoAKDQxY2I1ZTk0MzlkMGUxNGQxZWFhNWJlZTI5ZjdkN2ZhYTBlMTE2ZmI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-23T21:39:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-23T21:39:08Z"}, "message": "Rollup merge of #98283 - TaKO8Ki:point-at-private-fields-in-struct-literal, r=compiler-errors\n\nPoint at private fields in struct literal\n\ncloses #95872", "tree": {"sha": "93de7fad0460bb0c0be502f3389c91b048784306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93de7fad0460bb0c0be502f3389c91b048784306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitN18CRBK7hj4Ov3rIwAAcsoIAFppS7hRpr91Ga3rhB2rVuUC\nZUn+3NBQ8ef7UHyIVWDNLNAS1fVAbg52X0VbhcO8NGtKWgaUcDZ9Onui80dmc0Db\nIAdLqkG2qe53yNehZE08X85KZrL/Vo4lJ4o8rAn3/GdfUYn7s1Mgu+IMAkdwsNL2\n+1wjtT+CRgg8oI13UigRj/sDM8n6CJDrt3hPR/7RWF4WQhJd2xTTgo78MZEHqADB\n/LNyeIxeY6VwwJZrCBDs67TDp/N4toFv7HaLkY3sB0RYsSASGrj0PlGsOMhviR4L\nAcMTbPrhYaf6SO6S32DkokgJM78BVpiZpPp1r5UsJDweGl0BkpphP+1knQfOwXk=\n=+Qjk\n-----END PGP SIGNATURE-----\n", "payload": "tree 93de7fad0460bb0c0be502f3389c91b048784306\nparent 3b68700d0ce297e48c6448f27d156d5f461d64e9\nparent eb86daa1383d5330a18aa4e78270a6ca5b4ea469\nauthor Michael Goulet <michael@errs.io> 1656020348 -0700\ncommitter GitHub <noreply@github.com> 1656020348 -0700\n\nRollup merge of #98283 - TaKO8Ki:point-at-private-fields-in-struct-literal, r=compiler-errors\n\nPoint at private fields in struct literal\n\ncloses #95872\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "html_url": "https://github.com/rust-lang/rust/commit/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b68700d0ce297e48c6448f27d156d5f461d64e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b68700d0ce297e48c6448f27d156d5f461d64e9", "html_url": "https://github.com/rust-lang/rust/commit/3b68700d0ce297e48c6448f27d156d5f461d64e9"}, {"sha": "eb86daa1383d5330a18aa4e78270a6ca5b4ea469", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb86daa1383d5330a18aa4e78270a6ca5b4ea469", "html_url": "https://github.com/rust-lang/rust/commit/eb86daa1383d5330a18aa4e78270a6ca5b4ea469"}], "stats": {"total": 126, "additions": 107, "deletions": 19}, "files": [{"sha": "1cd19c7eaab35c61cd6eb12b7ff6681ea916ccee", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -26,6 +26,9 @@ macro_rules! pluralize {\n     (\"is\", $x:expr) => {\n         if $x == 1 { \"is\" } else { \"are\" }\n     };\n+    (\"was\", $x:expr) => {\n+        if $x == 1 { \"was\" } else { \"were\" }\n+    };\n     (\"this\", $x:expr) => {\n         if $x == 1 { \"this\" } else { \"these\" }\n     };"}, {"sha": "b4476d5c59b2bb0f0baee7eb9fb1aabdcfb1b425", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -26,10 +26,10 @@ use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructEx\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::Diagnostic;\n-use rustc_errors::EmissionGuarantee;\n-use rustc_errors::ErrorGuaranteed;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n+    EmissionGuarantee, ErrorGuaranteed,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -1701,12 +1701,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n             self.typeck_results.borrow_mut().fru_field_types_mut().insert(expr_id, fru_tys);\n         } else if adt_kind != AdtKind::Union && !remaining_fields.is_empty() {\n-            let inaccessible_remaining_fields = remaining_fields.iter().any(|(_, (_, field))| {\n-                !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n-            });\n+            debug!(?remaining_fields);\n+            let private_fields: Vec<&ty::FieldDef> = variant\n+                .fields\n+                .iter()\n+                .filter(|field| {\n+                    !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n+                })\n+                .collect();\n \n-            if inaccessible_remaining_fields {\n-                self.report_inaccessible_fields(adt_ty, span);\n+            if !private_fields.is_empty() {\n+                self.report_private_fields(adt_ty, span, private_fields, ast_fields);\n             } else {\n                 self.report_missing_fields(\n                     adt_ty,\n@@ -1830,21 +1835,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Report an error for a struct field expression when there are invisible fields.\n     ///\n     /// ```text\n-    /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    /// error: cannot construct `Foo` with struct literal syntax due to private fields\n     ///  --> src/main.rs:8:5\n     ///   |\n     /// 8 |     foo::Foo {};\n     ///   |     ^^^^^^^^\n     ///\n     /// error: aborting due to previous error\n     /// ```\n-    fn report_inaccessible_fields(&self, adt_ty: Ty<'tcx>, span: Span) {\n-        self.tcx.sess.span_err(\n+    fn report_private_fields(\n+        &self,\n+        adt_ty: Ty<'tcx>,\n+        span: Span,\n+        private_fields: Vec<&ty::FieldDef>,\n+        used_fields: &'tcx [hir::ExprField<'tcx>],\n+    ) {\n+        let mut err = self.tcx.sess.struct_span_err(\n             span,\n             &format!(\n-                \"cannot construct `{adt_ty}` with struct literal syntax due to inaccessible fields\",\n+                \"cannot construct `{adt_ty}` with struct literal syntax due to private fields\",\n             ),\n         );\n+        let (used_private_fields, remaining_private_fields): (\n+            Vec<(Symbol, Span, bool)>,\n+            Vec<(Symbol, Span, bool)>,\n+        ) = private_fields\n+            .iter()\n+            .map(|field| {\n+                match used_fields.iter().find(|used_field| field.name == used_field.ident.name) {\n+                    Some(used_field) => (field.name, used_field.span, true),\n+                    None => (field.name, self.tcx.def_span(field.did), false),\n+                }\n+            })\n+            .partition(|field| field.2);\n+        err.span_labels(used_private_fields.iter().map(|(_, span, _)| *span), \"private field\");\n+        if !remaining_private_fields.is_empty() {\n+            let remaining_private_fields_len = remaining_private_fields.len();\n+            let names = match &remaining_private_fields\n+                .iter()\n+                .map(|(name, _, _)| name.to_string())\n+                .collect::<Vec<_>>()[..]\n+            {\n+                _ if remaining_private_fields_len > 6 => String::new(),\n+                [name] => format!(\"`{name}` \"),\n+                [names @ .., last] => {\n+                    let names = names.iter().map(|name| format!(\"`{name}`\")).collect::<Vec<_>>();\n+                    format!(\"{} and `{last}` \", names.join(\", \"))\n+                }\n+                [] => unreachable!(),\n+            };\n+            err.note(format!(\n+                \"... and other private field{s} {names}that {were} not provided\",\n+                s = pluralize!(remaining_private_fields_len),\n+                were = pluralize!(\"was\", remaining_private_fields_len),\n+            ));\n+        }\n+        err.emit();\n     }\n \n     fn report_unknown_field("}, {"sha": "2d29093b01b02e5b6635f70d6c662e183235d81c", "filename": "src/test/ui/issues/issue-76077.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -6,5 +6,5 @@ pub mod foo {\n \n fn main() {\n     foo::Foo {};\n-    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to private fields\n }"}, {"sha": "197ca8d5a7b25ca280caaacc10107564abef3adf", "filename": "src/test/ui/issues/issue-76077.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -1,8 +1,10 @@\n-error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+error: cannot construct `Foo` with struct literal syntax due to private fields\n   --> $DIR/issue-76077.rs:8:5\n    |\n LL |     foo::Foo {};\n    |     ^^^^^^^^\n+   |\n+   = note: ... and other private field `you_cant_use_this_field` that was not provided\n \n error: aborting due to previous error\n "}, {"sha": "39c222f7c3414c052fab7b5ecb4d55c93cd53a23", "filename": "src/test/ui/privacy/issue-79593.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -16,7 +16,7 @@ mod foo {\n \n fn correct() {\n     foo::Pub {};\n-    //~^ ERROR cannot construct `Pub` with struct literal syntax due to inaccessible fields\n+    //~^ ERROR cannot construct `Pub` with struct literal syntax due to private fields\n }\n \n fn wrong() {"}, {"sha": "21ba760ad0bcc3e438ba4cf7ac0e13dc1a2ae664", "filename": "src/test/ui/privacy/issue-79593.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -10,11 +10,13 @@ error[E0063]: missing field `y` in initializer of `Enum`\n LL |         Enum::Variant { x: () };\n    |         ^^^^^^^^^^^^^ missing `y`\n \n-error: cannot construct `Pub` with struct literal syntax due to inaccessible fields\n+error: cannot construct `Pub` with struct literal syntax due to private fields\n   --> $DIR/issue-79593.rs:18:5\n    |\n LL |     foo::Pub {};\n    |     ^^^^^^^^\n+   |\n+   = note: ... and other private field `private` that was not provided\n \n error[E0063]: missing field `y` in initializer of `Enum`\n   --> $DIR/issue-79593.rs:23:5"}, {"sha": "326e958aaa94f55fe83226c3b636ceb0814f0c9a", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -7,5 +7,5 @@ pub mod foo {\n \n fn main() {\n     foo::Foo {};\n-    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to private fields\n }"}, {"sha": "f0bd3e0ddf768002cf8af4d82fa92e4843666675", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-literal.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -1,8 +1,10 @@\n-error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+error: cannot construct `Foo` with struct literal syntax due to private fields\n   --> $DIR/issue-87872-missing-inaccessible-field-literal.rs:9:5\n    |\n LL |     foo::Foo {};\n    |     ^^^^^^^^\n+   |\n+   = note: ... and other private field `you_cant_use_this_field` that was not provided\n \n error: aborting due to previous error\n "}, {"sha": "9f1560bfb8dfeebfad9e75b6ba2cc459d40fbdad", "filename": "src/test/ui/typeck/missing-private-fields-in-struct-literal.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.rs?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -0,0 +1,18 @@\n+pub mod m {\n+    pub struct S {\n+        pub visible: bool,\n+        a: (),\n+        b: (),\n+        c: (),\n+        d: (),\n+        e: (),\n+    }\n+}\n+\n+fn main() {\n+    let _ = m::S { //~ ERROR cannot construct `S` with struct literal syntax due to private fields\n+        visible: true,\n+        a: (),\n+        b: (),\n+    };\n+}"}, {"sha": "234110f31f79c5a41e4e311615f39bd7e4923a63", "filename": "src/test/ui/typeck/missing-private-fields-in-struct-literal.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr?ref=41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "patch": "@@ -0,0 +1,15 @@\n+error: cannot construct `S` with struct literal syntax due to private fields\n+  --> $DIR/missing-private-fields-in-struct-literal.rs:13:13\n+   |\n+LL |     let _ = m::S {\n+   |             ^^^^\n+LL |         visible: true,\n+LL |         a: (),\n+   |         ----- private field\n+LL |         b: (),\n+   |         ----- private field\n+   |\n+   = note: ... and other private fields `c`, `d` and `e` that were not provided\n+\n+error: aborting due to previous error\n+"}]}