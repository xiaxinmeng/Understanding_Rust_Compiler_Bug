{"sha": "5e498546e8275c86e0b3f711b069b2787c6385f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNDk4NTQ2ZTgyNzVjODZlMGIzZjcxMWIwNjliMjc4N2M2Mzg1ZjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T08:40:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T08:40:55Z"}, "message": "Fix non-linux compilation", "tree": {"sha": "dd5c7e319b1a9cb3ac77572e20a93b089be9d12b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd5c7e319b1a9cb3ac77572e20a93b089be9d12b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e498546e8275c86e0b3f711b069b2787c6385f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e498546e8275c86e0b3f711b069b2787c6385f2", "html_url": "https://github.com/rust-lang/rust/commit/5e498546e8275c86e0b3f711b069b2787c6385f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e498546e8275c86e0b3f711b069b2787c6385f2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9983f98a964a940bfe5283b02f0f2dc16d3095a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9983f98a964a940bfe5283b02f0f2dc16d3095a", "html_url": "https://github.com/rust-lang/rust/commit/e9983f98a964a940bfe5283b02f0f2dc16d3095a"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "c82b9f76d4817873319ec5098738802e405d2c69", "filename": "crates/ra_prof/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e498546e8275c86e0b3f711b069b2787c6385f2/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5e498546e8275c86e0b3f711b069b2787c6385f2/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=5e498546e8275c86e0b3f711b069b2787c6385f2", "patch": "@@ -15,6 +15,8 @@ once_cell = \"1.3.1\"\n backtrace = { version = \"0.3.44\", optional = true }\n cfg-if = \"0.1.10\"\n libc = \"0.2.73\"\n+\n+[target.'cfg(target_os = \"linux\")'.dependencies]\n perf-event = \"0.4\"\n \n [features]"}, {"sha": "c52c92ce5c9f5cd4f985df16895724332d0b4f44", "filename": "crates/ra_prof/src/stop_watch.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5e498546e8275c86e0b3f711b069b2787c6385f2/crates%2Fra_prof%2Fsrc%2Fstop_watch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e498546e8275c86e0b3f711b069b2787c6385f2/crates%2Fra_prof%2Fsrc%2Fstop_watch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fstop_watch.rs?ref=5e498546e8275c86e0b3f711b069b2787c6385f2", "patch": "@@ -1,11 +1,13 @@\n-use crate::MemoryUsage;\n use std::{\n     fmt,\n     time::{Duration, Instant},\n };\n \n+use crate::MemoryUsage;\n+\n pub struct StopWatch {\n     time: Instant,\n+    #[cfg(target_os = \"linux\")]\n     counter: Option<perf_event::Counter>,\n     memory: Option<MemoryUsage>,\n }\n@@ -18,12 +20,21 @@ pub struct StopWatchSpan {\n \n impl StopWatch {\n     pub fn start() -> StopWatch {\n-        let mut counter = perf_event::Builder::new().build().ok();\n-        if let Some(counter) = &mut counter {\n-            let _ = counter.enable();\n-        }\n+        #[cfg(target_os = \"linux\")]\n+        let counter = {\n+            let mut counter = perf_event::Builder::new().build().ok();\n+            if let Some(counter) = &mut counter {\n+                let _ = counter.enable();\n+            }\n+            counter\n+        };\n         let time = Instant::now();\n-        StopWatch { time, counter, memory: None }\n+        StopWatch {\n+            time,\n+            #[cfg(target_os = \"linux\")]\n+            counter,\n+            memory: None,\n+        }\n     }\n     pub fn memory(mut self, yes: bool) -> StopWatch {\n         if yes {\n@@ -33,7 +44,12 @@ impl StopWatch {\n     }\n     pub fn elapsed(&mut self) -> StopWatchSpan {\n         let time = self.time.elapsed();\n+\n+        #[cfg(target_os = \"linux\")]\n         let instructions = self.counter.as_mut().and_then(|it| it.read().ok());\n+        #[cfg(not(target_os = \"linux\"))]\n+        let instructions = None;\n+\n         let memory = self.memory.map(|it| MemoryUsage::current() - it);\n         StopWatchSpan { time, instructions, memory }\n     }\n@@ -65,6 +81,7 @@ impl fmt::Display for StopWatchSpan {\n // https://github.com/jimblandy/perf-event/issues/8\n impl Drop for StopWatch {\n     fn drop(&mut self) {\n+        #[cfg(target_os = \"linux\")]\n         if let Some(mut counter) = self.counter.take() {\n             let _ = counter.disable();\n         }"}]}