{"sha": "9a6fa4f118d88991458549464d960aa1e495541b", "node_id": "C_kwDOAAsO6NoAKDlhNmZhNGYxMThkODg5OTE0NTg1NDk0NjRkOTYwYWExZTQ5NTU0MWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T22:55:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T22:55:22Z"}, "message": "Auto merge of #98781 - GuillaumeGomez:rollup-798kb8u, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97249 (`<details>`/`<summary>` UI fixes)\n - #98418 (Allow macOS to build LLVM as shared library)\n - #98460 (Use CSS variables to handle theming)\n - #98497 (Improve some inference diagnostics)\n - #98708 (rustdoc: fix 98690 Panic if invalid path for -Z persist-doctests)\n\nFailed merges:\n\n - #98761 (more `need_type_info` improvements)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0d4e854cc8c350758b7259abdfe03a506eb02a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d4e854cc8c350758b7259abdfe03a506eb02a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6fa4f118d88991458549464d960aa1e495541b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6fa4f118d88991458549464d960aa1e495541b", "html_url": "https://github.com/rust-lang/rust/commit/9a6fa4f118d88991458549464d960aa1e495541b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6fa4f118d88991458549464d960aa1e495541b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f", "html_url": "https://github.com/rust-lang/rust/commit/46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f"}, {"sha": "00d68a7890cdd4dc9a1752d02f7b18e0eab88e39", "url": "https://api.github.com/repos/rust-lang/rust/commits/00d68a7890cdd4dc9a1752d02f7b18e0eab88e39", "html_url": "https://github.com/rust-lang/rust/commit/00d68a7890cdd4dc9a1752d02f7b18e0eab88e39"}], "stats": {"total": 737, "additions": 366, "deletions": 371}, "files": [{"sha": "07dcf3876c8066d336908106958df6553c5efe29", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -313,11 +313,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn emit_inference_failure_err(\n         &self,\n         body_id: Option<hir::BodyId>,\n-        span: Span,\n+        failure_span: Span,\n         arg: GenericArg<'tcx>,\n         // FIXME(#94483): Either use this or remove it.\n         _impl_candidates: Vec<ty::TraitRef<'tcx>>,\n         error_code: TypeAnnotationNeeded,\n+        should_label_span: bool,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let arg = self.resolve_vars_if_possible(arg);\n         let arg_data = self.extract_inference_diagnostics_data(arg, None);\n@@ -326,7 +327,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // If we don't have any typeck results we're outside\n             // of a body, so we won't be able to get better info\n             // here.\n-            return self.bad_inference_failure_err(span, arg_data, error_code);\n+            return self.bad_inference_failure_err(failure_span, arg_data, error_code);\n         };\n         let typeck_results = typeck_results.borrow();\n         let typeck_results = &typeck_results;\n@@ -338,7 +339,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         let Some(InferSource { span, kind }) = local_visitor.infer_source else {\n-            return self.bad_inference_failure_err(span, arg_data, error_code)\n+            return self.bad_inference_failure_err(failure_span, arg_data, error_code)\n         };\n \n         let error_code = error_code.into();\n@@ -347,6 +348,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             &format!(\"type annotations needed{}\", kind.ty_msg(self)),\n             error_code,\n         );\n+\n+        if should_label_span && !failure_span.overlaps(span) {\n+            err.span_label(failure_span, \"type must be known at this point\");\n+        }\n+\n         match kind {\n             InferSourceKind::LetBinding { insert_span, pattern_name, ty } => {\n                 let suggestion_msg = if let Some(name) = pattern_name {"}, {"sha": "f73eca5bf612cd4b888e3ec9cc69b727eb00e7fa", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -914,9 +914,17 @@ impl<'tcx> Term<'tcx> {\n     pub fn ty(&self) -> Option<Ty<'tcx>> {\n         if let Term::Ty(ty) = self { Some(*ty) } else { None }\n     }\n+\n     pub fn ct(&self) -> Option<Const<'tcx>> {\n         if let Term::Const(c) = self { Some(*c) } else { None }\n     }\n+\n+    pub fn into_arg(self) -> GenericArg<'tcx> {\n+        match self {\n+            Term::Ty(ty) => ty.into(),\n+            Term::Const(c) => c.into(),\n+        }\n+    }\n }\n \n /// This kind of predicate has no *direct* correspondent in the"}, {"sha": "fa56219b409d173779d5ddd7c593af02156c66a6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 59, "deletions": 40, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1958,26 +1958,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 if predicate.references_error() {\n                     return;\n                 }\n-                // Typically, this ambiguity should only happen if\n-                // there are unresolved type inference variables\n-                // (otherwise it would suggest a coherence\n-                // failure). But given #21974 that is not necessarily\n-                // the case -- we can have multiple where clauses that\n-                // are only distinguished by a region, which results\n-                // in an ambiguity even when all types are fully\n-                // known, since we don't dispatch based on region\n-                // relationships.\n-\n-                // Pick the first substitution that still contains inference variables as the one\n-                // we're going to emit an error for. If there are none (see above), fall back to\n-                // the substitution for `Self`.\n-                let subst = {\n-                    let substs = data.trait_ref.substs;\n-                    substs\n-                        .iter()\n-                        .find(|s| s.has_infer_types_or_consts())\n-                        .unwrap_or_else(|| substs[0])\n-                };\n \n                 // This is kind of a hack: it frequently happens that some earlier\n                 // error prevents types from being fully inferred, and then we get\n@@ -1999,27 +1979,54 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         self.emit_inference_failure_err(\n                             body_id,\n                             span,\n-                            subst,\n+                            trait_ref.self_ty().skip_binder().into(),\n                             vec![],\n                             ErrorCode::E0282,\n+                            false,\n                         )\n                         .emit();\n                     }\n                     return;\n                 }\n \n-                let impl_candidates = self\n-                    .find_similar_impl_candidates(trait_ref)\n-                    .into_iter()\n-                    .map(|candidate| candidate.trait_ref)\n-                    .collect();\n-                let mut err = self.emit_inference_failure_err(\n-                    body_id,\n-                    span,\n-                    subst,\n-                    impl_candidates,\n-                    ErrorCode::E0283,\n-                );\n+                // Typically, this ambiguity should only happen if\n+                // there are unresolved type inference variables\n+                // (otherwise it would suggest a coherence\n+                // failure). But given #21974 that is not necessarily\n+                // the case -- we can have multiple where clauses that\n+                // are only distinguished by a region, which results\n+                // in an ambiguity even when all types are fully\n+                // known, since we don't dispatch based on region\n+                // relationships.\n+\n+                // Pick the first substitution that still contains inference variables as the one\n+                // we're going to emit an error for. If there are none (see above), fall back to\n+                // a more general error.\n+                let subst = data.trait_ref.substs.iter().find(|s| s.has_infer_types_or_consts());\n+\n+                let mut err = if let Some(subst) = subst {\n+                    let impl_candidates = self\n+                        .find_similar_impl_candidates(trait_ref)\n+                        .into_iter()\n+                        .map(|candidate| candidate.trait_ref)\n+                        .collect();\n+                    self.emit_inference_failure_err(\n+                        body_id,\n+                        span,\n+                        subst,\n+                        impl_candidates,\n+                        ErrorCode::E0283,\n+                        true,\n+                    )\n+                } else {\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0283,\n+                        \"type annotations needed: cannot satisfy `{}`\",\n+                        predicate,\n+                    )\n+                };\n \n                 let obligation = Obligation::new(\n                     obligation.cause.clone(),\n@@ -2110,7 +2117,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                self.emit_inference_failure_err(body_id, span, arg, vec![], ErrorCode::E0282)\n+                self.emit_inference_failure_err(body_id, span, arg, vec![], ErrorCode::E0282, false)\n             }\n \n             ty::PredicateKind::Subtype(data) => {\n@@ -2124,26 +2131,38 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 let SubtypePredicate { a_is_expected: _, a, b } = data;\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.emit_inference_failure_err(body_id, span, a.into(), vec![], ErrorCode::E0282)\n+                self.emit_inference_failure_err(\n+                    body_id,\n+                    span,\n+                    a.into(),\n+                    vec![],\n+                    ErrorCode::E0282,\n+                    true,\n+                )\n             }\n             ty::PredicateKind::Projection(data) => {\n-                let self_ty = data.projection_ty.self_ty();\n-                let term = data.term;\n                 if predicate.references_error() || self.is_tainted_by_errors() {\n                     return;\n                 }\n-                if self_ty.needs_infer() && term.needs_infer() {\n-                    // We do this for the `foo.collect()?` case to produce a suggestion.\n+                let subst = data\n+                    .projection_ty\n+                    .substs\n+                    .iter()\n+                    .chain(Some(data.term.into_arg()))\n+                    .find(|g| g.has_infer_types_or_consts());\n+                if let Some(subst) = subst {\n                     let mut err = self.emit_inference_failure_err(\n                         body_id,\n                         span,\n-                        self_ty.into(),\n+                        subst,\n                         vec![],\n                         ErrorCode::E0284,\n+                        true,\n                     );\n                     err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                     err\n                 } else {\n+                    // If we can't find a substitution, just print a generic error\n                     let mut err = struct_span_err!(\n                         self.tcx.sess,\n                         span,"}, {"sha": "bce2e85de845da5d623a075666afa53a59e124eb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1538,9 +1538,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty\n         } else {\n             if !self.is_tainted_by_errors() {\n-                self.emit_inference_failure_err((**self).body_id, sp, ty.into(), vec![], E0282)\n-                    .note(\"type must be known at this point\")\n-                    .emit();\n+                self.emit_inference_failure_err(\n+                    (**self).body_id,\n+                    sp,\n+                    ty.into(),\n+                    vec![],\n+                    E0282,\n+                    true,\n+                )\n+                .emit();\n             }\n             let err = self.tcx.ty_error();\n             self.demand_suptype(sp, err, ty);"}, {"sha": "67160b98b9dc0c679ccbedb470481c38e00e4a21", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -694,6 +694,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     t.into(),\n                     vec![],\n                     E0282,\n+                    false,\n                 )\n                 .emit();\n         }\n@@ -708,6 +709,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     c.into(),\n                     vec![],\n                     E0282,\n+                    false,\n                 )\n                 .emit();\n         }"}, {"sha": "40ff0381c8bc16e5f563cc5d7c6c2af3e8247fbc", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -107,15 +107,11 @@ use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs::{self, File};\n+use std::io;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n use std::str;\n \n-#[cfg(unix)]\n-use std::os::unix::fs::symlink as symlink_file;\n-#[cfg(windows)]\n-use std::os::windows::fs::symlink_file;\n-\n use filetime::FileTime;\n use once_cell::sync::OnceCell;\n \n@@ -1460,7 +1456,7 @@ impl Build {\n                 src = t!(fs::canonicalize(src));\n             } else {\n                 let link = t!(fs::read_link(src));\n-                t!(symlink_file(link, dst));\n+                t!(self.symlink_file(link, dst));\n                 return;\n             }\n         }\n@@ -1585,6 +1581,14 @@ impl Build {\n         iter.map(|e| t!(e)).collect::<Vec<_>>().into_iter()\n     }\n \n+    fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(&self, src: P, link: Q) -> io::Result<()> {\n+        #[cfg(unix)]\n+        use std::os::unix::fs::symlink as symlink_file;\n+        #[cfg(windows)]\n+        use std::os::windows::fs::symlink_file;\n+        if !self.config.dry_run { symlink_file(src.as_ref(), link.as_ref()) } else { Ok(()) }\n+    }\n+\n     fn remove(&self, f: &Path) {\n         if self.config.dry_run {\n             return;"}, {"sha": "8395be40f9b525e5ea2fd6c414602b0c1dbcef9a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -251,9 +251,7 @@ impl Step for Llvm {\n             };\n \n         builder.update_submodule(&Path::new(\"src\").join(\"llvm-project\"));\n-        if builder.llvm_link_shared()\n-            && (target.contains(\"windows\") || target.contains(\"apple-darwin\"))\n-        {\n+        if builder.llvm_link_shared() && target.contains(\"windows\") {\n             panic!(\"shared linking to LLVM is not currently supported on {}\", target.triple);\n         }\n \n@@ -359,7 +357,9 @@ impl Step for Llvm {\n         //\n         // If we're not linking rustc to a dynamic LLVM, though, then don't link\n         // tools to it.\n-        if builder.llvm_link_tools_dynamically(target) && builder.llvm_link_shared() {\n+        let llvm_link_shared =\n+            builder.llvm_link_tools_dynamically(target) && builder.llvm_link_shared();\n+        if llvm_link_shared {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n@@ -438,18 +438,18 @@ impl Step for Llvm {\n             );\n         }\n \n-        if let Some(ref suffix) = builder.config.llvm_version_suffix {\n+        let llvm_version_suffix = if let Some(ref suffix) = builder.config.llvm_version_suffix {\n             // Allow version-suffix=\"\" to not define a version suffix at all.\n-            if !suffix.is_empty() {\n-                cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n-            }\n+            if !suffix.is_empty() { Some(suffix.to_string()) } else { None }\n         } else if builder.config.channel == \"dev\" {\n             // Changes to a version suffix require a complete rebuild of the LLVM.\n             // To avoid rebuilds during a time of version bump, don't include rustc\n             // release number on the dev channel.\n-            cfg.define(\"LLVM_VERSION_SUFFIX\", \"-rust-dev\");\n+            Some(\"-rust-dev\".to_string())\n         } else {\n-            let suffix = format!(\"-rust-{}-{}\", builder.version, builder.config.channel);\n+            Some(format!(\"-rust-{}-{}\", builder.version, builder.config.channel))\n+        };\n+        if let Some(ref suffix) = llvm_version_suffix {\n             cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n         }\n \n@@ -478,6 +478,27 @@ impl Step for Llvm {\n \n         cfg.build();\n \n+        // When building LLVM with LLVM_LINK_LLVM_DYLIB for macOS, an unversioned\n+        // libLLVM.dylib will be built. However, llvm-config will still look\n+        // for a versioned path like libLLVM-14.dylib. Manually create a symbolic\n+        // link to make llvm-config happy.\n+        if llvm_link_shared && target.contains(\"apple-darwin\") {\n+            let mut cmd = Command::new(&build_llvm_config);\n+            let version = output(cmd.arg(\"--version\"));\n+            let major = version.split('.').next().unwrap();\n+            let lib_name = match llvm_version_suffix {\n+                Some(s) => format!(\"lib/libLLVM-{}{}.dylib\", major, s),\n+                None => format!(\"lib/libLLVM-{}.dylib\", major),\n+            };\n+\n+            // The reason why we build the library path from llvm-config is because\n+            // the output of llvm-config depends on its location in the file system.\n+            // Make sure we create the symlink exactly where it's needed.\n+            let llvm_base = build_llvm_config.parent().unwrap().parent().unwrap();\n+            let lib_llvm = llvm_base.join(lib_name);\n+            t!(builder.symlink_file(\"libLLVM.dylib\", &lib_llvm));\n+        }\n+\n         t!(stamp.write());\n \n         build_llvm_config"}, {"sha": "509c4253f0f76427c2f476483732ef8efb0f31d9", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1003,8 +1003,10 @@ impl Tester for Collector {\n         let outdir = if let Some(mut path) = rustdoc_options.persist_doctests.clone() {\n             path.push(&test_id);\n \n-            std::fs::create_dir_all(&path)\n-                .expect(\"Couldn't create directory for doctest executables\");\n+            if let Err(err) = std::fs::create_dir_all(&path) {\n+                eprintln!(\"Couldn't create directory for doctest executables: {}\", err);\n+                panic::resume_unwind(box ());\n+            }\n \n             DirState::Perm(path)\n         } else {"}, {"sha": "f7b4fdb736c500b3ba5d3094683ecf6b5c7ee89c", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -114,6 +114,9 @@ body {\n \t-webkit-font-feature-settings: \"kern\", \"liga\";\n \t-moz-font-feature-settings: \"kern\", \"liga\";\n \tfont-feature-settings: \"kern\", \"liga\";\n+\n+\tbackground-color: var(--main-background-color);\n+\tcolor: var(--main-color);\n }\n \n h1 {\n@@ -158,8 +161,8 @@ h1.fqn {\n \tUnderlines elsewhere in the documentation break up visual flow and tend to invert\n \tsection hierarchies. */\n h2,\n-.top-doc h3,\n-.top-doc h4 {\n+.top-doc .docblock > h3,\n+.top-doc .docblock > h4 {\n \tborder-bottom: 1px solid;\n }\n h3.code-header {\n@@ -214,6 +217,26 @@ a.srclink,\n \tfont-family: \"Fira Sans\", Arial, NanumBarunGothic, sans-serif;\n }\n \n+h1, h2, h3, h4,\n+a#toggle-all-docs,\n+a.anchor,\n+.small-section-header a,\n+#source-sidebar a,\n+pre.rust a,\n+.sidebar h2 a,\n+.sidebar h3 a,\n+.mobile-topbar h2 a,\n+.in-band a,\n+.search-results a,\n+.module-item .stab,\n+.import-item .stab,\n+.result-name .primitive > i, .result-name .keyword > i,\n+.content .method .where,\n+.content .fn .where,\n+.content .where.fmt-newline {\n+\tcolor: var(--main-color);\n+}\n+\n ol, ul {\n \tpadding-left: 24px;\n }\n@@ -391,6 +414,14 @@ nav.sub {\n \tdisplay: none;\n }\n \n+.source .sidebar, #sidebar-toggle, #source-sidebar {\n+\tbackground-color: var(--sidebar-background-color);\n+}\n+\n+#sidebar-toggle:hover {\n+\tbackground-color: var(--sidebar-background-color-hover);\n+}\n+\n .source .sidebar > *:not(#sidebar-toggle) {\n \topacity: 0;\n \tvisibility: hidden;\n@@ -629,11 +660,6 @@ h2.location a {\n \tdisplay: block;\n }\n \n-.invisible {\n-\twidth: 100%;\n-\tdisplay: inline-block;\n-}\n-\n .content .in-band {\n \tflex-grow: 1;\n \tmargin: 0px;\n@@ -1008,6 +1034,11 @@ table,\n \ttop: -5px;\n }\n \n+.popover, .popover::before {\n+\tbackground-color: var(--main-background-color);\n+\tcolor: var(--main-color);\n+}\n+\n #help-button .popover {\n \tmax-width: 600px;\n }\n@@ -1428,6 +1459,25 @@ pre.rust {\n \tanimation: rotating 2s linear infinite;\n }\n \n+.setting-line .radio-line input:checked {\n+\tbox-shadow: inset 0 0 0 3px var(--main-background-color);\n+\tbackground-color: var(--settings-input-color);\n+}\n+.setting-line .radio-line input:focus {\n+\tbox-shadow: 0 0 1px 1px var(--settings-input-color);\n+}\n+/* In here we combine both `:focus` and `:checked` properties. */\n+.setting-line .radio-line input:checked:focus {\n+\tbox-shadow: inset 0 0 0 3px var(--main-background-color),\n+\t\t0 0 2px 2px var(--settings-input-color);\n+}\n+.setting-line .radio-line input:hover {\n+\tborder-color: var(--settings-input-color) !important;\n+}\n+input:checked + .slider {\n+\tbackground-color: var(--settings-input-color);\n+}\n+\n #help-button > button {\n \tfont-family: \"Fira Sans\", Arial, sans-serif;\n \ttext-align: center;\n@@ -1681,6 +1731,11 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \tcontent: \"Collapse\";\n }\n \n+/* This is needed in docblocks to have the \"\u25b6\" element to be on the same line. */\n+.docblock summary > * {\n+\tdisplay: inline-block;\n+}\n+\n /* Media Queries */\n \n @media (min-width: 701px) {"}, {"sha": "7756e877ef791f2922e7c4ab1ed63a283ba64777", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 6, "deletions": 61, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,30 +3,12 @@ Based off of the Ayu theme\n Original by Dempfi (https://github.com/dempfi/ayu)\n */\n \n-/* General structure and fonts */\n-\n-body, .popover, .popover::before {\n-\tbackground-color: #0f1419;\n-\tcolor: #c5c5c5;\n-}\n-\n-.setting-line .radio-line input {\n-\tborder-color: #c5c5c5;\n-}\n-.setting-line .radio-line input:checked {\n-\tbox-shadow: inset 0 0 0 3px #0f1419;\n-\tbackground-color: #ffb454;\n-}\n-.setting-line .radio-line input:focus {\n-\tbox-shadow: 0 0 1px 1px #ffb454;\n-}\n-/* In here we combine both `:focus` and `:checked` properties. */\n-.setting-line .radio-line input:checked:focus {\n-\tbox-shadow: inset 0 0 0 3px 0f1419,\n-\t\t0 0 2px 2px #ffb454;\n-}\n-.setting-line .radio-line input:hover {\n-\tborder-color: #ffb454 !important;\n+:root {\n+\t--main-background-color: #0f1419;\n+\t--main-color: #c5c5c5;\n+\t--settings-input-color: #ffb454;\n+\t--sidebar-background-color: #14191f;\n+\t--sidebar-background-color-hover: rgba(70, 70, 70, 0.33);\n }\n \n .slider {\n@@ -35,9 +17,6 @@ body, .popover, .popover::before {\n .slider:before {\n \tbackground-color: white;\n }\n-input:checked + .slider {\n-\tbackground-color: #ffb454;\n-}\n input:focus + .slider {\n \tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n }\n@@ -62,10 +41,6 @@ h4 {\n \tbackground-color: #0f1419;\n }\n \n-.invisible {\n-\tbackground: rgba(0, 0, 0, 0);\n-}\n-\n .docblock code {\n \tcolor: #ffb454;\n }\n@@ -129,10 +104,6 @@ pre, .rustdoc.source .example-wrap {\n \tcolor: #ffb44c;\n }\n \n-.source .sidebar {\n-\tbackground-color: #14191f;\n-}\n-\n .sidebar-elems .location {\n \tcolor: #ff7733;\n }\n@@ -153,12 +124,6 @@ pre, .rustdoc.source .example-wrap {\n \tborder-color: #5c6773;\n }\n \n-.content .method .where,\n-.content .fn .where,\n-.content .where.fmt-newline {\n-\tcolor: #c5c5c5;\n-}\n-\n .search-results a:hover {\n \tbackground-color: #777;\n }\n@@ -233,17 +198,6 @@ a {\n \tcolor: #39AFD7;\n }\n \n-a#toggle-all-docs,\n-a.anchor,\n-.small-section-header a,\n-#source-sidebar a,\n-pre.rust a,\n-.sidebar h2 a,\n-.sidebar h3 a,\n-.mobile-topbar h2 a,\n-.in-band a {\n-\tcolor: #c5c5c5;\n-}\n .sidebar h2 a,\n .sidebar h3 a {\n \tcolor: white;\n@@ -617,15 +571,6 @@ kbd {\n \tcolor: #999;\n }\n \n-#sidebar-toggle {\n-\tbackground-color: #14191f;\n-}\n-#sidebar-toggle:hover {\n-\tbackground-color: rgba(70, 70, 70, 0.33);\n-}\n-#source-sidebar {\n-\tbackground-color: #14191f;\n-}\n #source-sidebar > .title {\n \tcolor: #fff;\n \tborder-bottom-color: #5c6773;"}, {"sha": "04d5778f59c6c08b05bf20ee4e214e648ad982e6", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 6, "deletions": 74, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,25 +1,9 @@\n-body, .popover, .popover::before {\n-\tbackground-color: #353535;\n-\tcolor: #ddd;\n-}\n-\n-.setting-line .radio-line input {\n-\tborder-color: #ddd;\n-}\n-.setting-line .radio-line input:checked {\n-\tbox-shadow: inset 0 0 0 3px #353535;\n-\tbackground-color: #2196f3;\n-}\n-.setting-line .radio-line input:focus {\n-\tbox-shadow: 0 0 1px 1px #2196f3;\n-}\n-/* In here we combine both `:focus` and `:checked` properties. */\n-.setting-line .radio-line input:checked:focus {\n-\tbox-shadow: inset 0 0 0 3px #353535,\n-\t\t0 0 2px 2px #2196f3;\n-}\n-.setting-line .radio-line input:hover {\n-\tborder-color: #2196f3 !important;\n+:root {\n+\t--main-background-color: #353535;\n+\t--main-color: #ddd;\n+\t--settings-input-color: #2196f3;\n+\t--sidebar-background-color: #565656;\n+\t--sidebar-background-color-hover: #676767;\n }\n \n .slider {\n@@ -28,16 +12,10 @@ body, .popover, .popover::before {\n .slider:before {\n \tbackground-color: white;\n }\n-input:checked + .slider {\n-\tbackground-color: #2196F3;\n-}\n input:focus + .slider {\n \tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n }\n \n-h1, h2, h3, h4 {\n-\tcolor: #ddd;\n-}\n h1.fqn {\n \tborder-bottom-color: #d2d2d2;\n }\n@@ -49,10 +27,6 @@ h2, h3, h4 {\n \tbackground-color: #353535;\n }\n \n-.invisible {\n-\tbackground: rgba(0, 0, 0, 0);\n-}\n-\n .docblock code, .docblock-short code {\n \tbackground-color: #2A2A2A;\n }\n@@ -98,10 +72,6 @@ pre, .rustdoc.source .example-wrap {\n \tbackground: #444;\n }\n \n-.source .sidebar {\n-\tbackground-color: #565656;\n-}\n-\n .line-numbers span { color: #3B91E2; }\n .line-numbers .line-highlighted {\n \tbackground-color: #0a042f !important;\n@@ -115,12 +85,6 @@ pre, .rustdoc.source .example-wrap {\n \tborder-color: #ddd;\n }\n \n-.content .method .where,\n-.content .fn .where,\n-.content .where.fmt-newline {\n-\tcolor: #ddd;\n-}\n-\n .search-results a:hover {\n \tbackground-color: #777;\n }\n@@ -214,20 +178,6 @@ a {\n \tcolor: #D2991D;\n }\n \n-a#toggle-all-docs,\n-a.anchor,\n-.small-section-header a,\n-#source-sidebar a,\n-pre.rust a,\n-.sidebar h2 a,\n-.sidebar h3 a,\n-.mobile-topbar h2 a,\n-.in-band a {\n-\tcolor: #ddd;\n-}\n-.search-results a {\n-\tcolor: #ddd;\n-}\n a.test-arrow {\n \tcolor: #dedede;\n }\n@@ -261,11 +211,6 @@ details.undocumented > summary::before {\n \tborder-color: #008dfd;\n }\n \n-.module-item .stab,\n-.import-item .stab {\n-\tcolor: #ddd;\n-}\n-\n .stab.empty-impl { background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n .stab.deprecated { background: #ffc4c4; border-color: #db7b7b; color: #2f2f2f; }\n@@ -291,10 +236,6 @@ details.undocumented > summary::before {\n \tcolor: grey;\n }\n \n-.result-name .primitive > i, .result-name .keyword > i {\n-\tcolor: #ddd;\n-}\n-\n .line-numbers :target { background-color: transparent; }\n \n /* Code highlighting */\n@@ -488,15 +429,6 @@ kbd {\n \tcolor: #ccc;\n }\n \n-#sidebar-toggle {\n-\tbackground-color: #565656;\n-}\n-#sidebar-toggle:hover {\n-\tbackground-color: #676767;\n-}\n-#source-sidebar {\n-\tbackground-color: #565656;\n-}\n #source-sidebar > .title {\n \tborder-bottom-color: #ccc;\n }"}, {"sha": "5310736037a7395e6285f5a23755f1915fcc74cc", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 6, "deletions": 76, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,27 +1,9 @@\n-/* General structure and fonts */\n-\n-body, .popover, .popover::before {\n-\tbackground-color: white;\n-\tcolor: black;\n-}\n-\n-.setting-line .radio-line input {\n-\tborder-color: black;\n-}\n-.setting-line .radio-line input:checked {\n-\tbox-shadow: inset 0 0 0 3px white;\n-\tbackground-color: #2196f3;\n-}\n-.setting-line .radio-line input:focus {\n-\tbox-shadow: 0 0 1px 1px #2196f3;\n-}\n-/* In here we combine both `:focus` and `:checked` properties. */\n-.setting-line .radio-line input:checked:focus {\n-\tbox-shadow: inset 0 0 0 3px white,\n-\t\t0 0 2px 2px #2196f3;\n-}\n-.setting-line .radio-line input:hover {\n-\tborder-color: #2196f3 !important;\n+:root {\n+\t--main-background-color: white;\n+\t--main-color: black;\n+\t--settings-input-color: #2196f3;\n+\t--sidebar-background-color: #F5F5F5;\n+\t--sidebar-background-color-hover: #E0E0E0;\n }\n \n .slider {\n@@ -30,16 +12,10 @@ body, .popover, .popover::before {\n .slider:before {\n \tbackground-color: white;\n }\n-input:checked + .slider {\n-\tbackground-color: #2196F3;\n-}\n input:focus + .slider {\n \tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n }\n \n-h1, h2, h3, h4 {\n-\tcolor: black;\n-}\n h1.fqn {\n \tborder-bottom-color: #DDDDDD;\n }\n@@ -51,10 +27,6 @@ h2, h3, h4 {\n \tbackground-color: white;\n }\n \n-.invisible {\n-\tbackground: rgba(0, 0, 0, 0);\n-}\n-\n .docblock code, .docblock-short code {\n \tbackground-color: #F5F5F5;\n }\n@@ -100,10 +72,6 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #fff;\n }\n \n-.source .sidebar {\n-\tbackground-color: #f1f1f1;\n-}\n-\n .line-numbers span { color: #c67e2d; }\n .line-numbers .line-highlighted {\n \tbackground-color: #FDFFD3 !important;\n@@ -117,12 +85,6 @@ pre, .rustdoc.source .example-wrap {\n \tborder-color: #ddd;\n }\n \n-.content .method .where,\n-.content .fn .where,\n-.content .where.fmt-newline {\n-\tcolor: #4E4C4C;\n-}\n-\n .search-results a:hover {\n \tbackground-color: #ddd;\n }\n@@ -213,20 +175,6 @@ a {\n \tcolor: #3873AD;\n }\n \n-a#toggle-all-docs,\n-a.anchor,\n-.small-section-header a,\n-#source-sidebar a,\n-pre.rust a,\n-.sidebar h2 a,\n-.sidebar h3 a,\n-.mobile-topbar h2 a,\n-.in-band a {\n-\tcolor: #000;\n-}\n-.search-results a {\n-\tcolor: initial;\n-}\n a.test-arrow {\n \tcolor: #f5f5f5;\n }\n@@ -250,11 +198,6 @@ details.undocumented > summary::before {\n \tborder-color: #66afe9;\n }\n \n-.module-item .stab,\n-.import-item .stab {\n-\tcolor: #000;\n-}\n-\n .stab.empty-impl { background: #FFF5D6; border-color: #FFC600; }\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; }\n .stab.deprecated { background: #ffc4c4; border-color: #db7b7b; }\n@@ -275,10 +218,6 @@ details.undocumented > summary::before {\n \tcolor: grey;\n }\n \n-.result-name .primitive > i, .result-name .keyword > i {\n-\tcolor: black;\n-}\n-\n .line-numbers :target { background-color: transparent; }\n \n /* Code highlighting */\n@@ -472,15 +411,6 @@ kbd {\n \tcolor: #999;\n }\n \n-#sidebar-toggle {\n-\tbackground-color: #F5F5F5;\n-}\n-#sidebar-toggle:hover {\n-\tbackground-color: #E0E0E0;\n-}\n-#source-sidebar {\n-\tbackground-color: #F5F5F5;\n-}\n #source-sidebar > .title {\n \tborder-bottom-color: #ccc;\n }"}, {"sha": "2edbf1e4e2d8cce2d8b5dd0ced8daaf74af7f708", "filename": "src/test/rustdoc-gui/docblock-details.goml", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Frustdoc-gui%2Fdocblock-details.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Frustdoc-gui%2Fdocblock-details.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-details.goml?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -0,0 +1,23 @@\n+// This ensures that the `<details>`/`<summary>` elements are displayed as expected.\n+goto: file://|DOC_PATH|/test_docs/details/struct.Details.html\n+show-text: true\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+// We first check that the headers in the `.top-doc` doc block still have their\n+// bottom border.\n+assert-text: (\".top-doc .docblock > h3\", \"Hello\")\n+assert-css: (\n+    \".top-doc .docblock > h3\",\n+    {\"border-bottom\": \"1px solid rgb(221, 221, 221)\"},\n+)\n+// We now check that the `<summary>` doesn't have a bottom border and has the correct display.\n+assert-css: (\n+    \".top-doc .docblock summary h4\",\n+    {\"border-bottom\": \"0px none rgb(221, 221, 221)\"},\n+)\n+// This allows to ensure that summary is on one line only!\n+assert-property: (\".top-doc .docblock summary h4\", {\"offsetHeight\": \"33\"})\n+assert-css: (\".top-doc .docblock summary h4\", {\"margin-top\": \"15px\", \"margin-bottom\": \"5px\"})\n+// So `33 + 15 + 5` == `53`\n+assert-property: (\".top-doc .docblock summary\", {\"offsetHeight\": \"53\"})"}, {"sha": "aa2f78289bea283296307ff64c0f6a5304aea1c8", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -277,3 +277,15 @@ pub use macros::*;\n \n #[doc(alias = \"AliasForTheStdReexport\")]\n pub use ::std as TheStdReexport;\n+\n+pub mod details {\n+    /// We check the appearance of the `<details>`/`<summary>` in here.\n+    ///\n+    /// ## Hello\n+    ///\n+    /// <details>\n+    /// <summary><h4>I'm a summary</h4></summary>\n+    /// <div>I'm the content of the details!</div>\n+    /// </details>\n+    pub struct Details;\n+}"}, {"sha": "fe9bd87ab28e6452601fe462369a15b16a31f348", "filename": "src/test/rustdoc-ui/issue-98690.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Frustdoc-ui%2Fissue-98690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Frustdoc-ui%2Fissue-98690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-98690.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: --test --persist-doctests /../../ -Z unstable-options\n+// failure-status: 101\n+// only-linux\n+\n+#![crate_name = \"foo\"]\n+\n+//! ```rust\n+//! use foo::dummy;\n+//! dummy();\n+//! ```"}, {"sha": "47d94f99a4563e2064a1cfb4d4e3cd60357e06f0", "filename": "src/test/rustdoc-ui/issue-98690.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Frustdoc-ui%2Fissue-98690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Frustdoc-ui%2Fissue-98690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-98690.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -0,0 +1 @@\n+Couldn't create directory for doctest executables: Permission denied (os error 13)"}, {"sha": "919550cac3087df1ee0e968f8c56eeb6c78d4215", "filename": "src/test/ui/array-slice-vec/infer_array_len.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -4,7 +4,6 @@ error[E0282]: type annotations needed\n LL |     let [_, _] = a.into();\n    |         ^^^^^^\n    |\n-   = note: type must be known at this point\n help: consider giving this pattern a type\n    |\n LL |     let [_, _]: _ = a.into();"}, {"sha": "70a4cbebeee98084de7f398aa1ee101ba2e5641c", "filename": "src/test/ui/array-slice-vec/slice-pat-type-mismatches.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -27,8 +27,6 @@ error[E0282]: type annotations needed\n    |\n LL |         [] => {}\n    |         ^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ed8a6fc62e9dd454c8470540b4550d95fb198886", "filename": "src/test/ui/cast/issue-85586.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fcast%2Fissue-85586.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fcast%2Fissue-85586.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-85586.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |     let b = (a + 1) as usize;\n    |             ^^^^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to previous error\n "}, {"sha": "e324c1e799f9e20eb16942fbda3b2b43b1deae2b", "filename": "src/test/ui/coherence/coherence-overlap-trait-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `u32: C`\n   --> $DIR/coherence-overlap-trait-alias.rs:15:6\n    |\n LL | impl C for u32 {}\n-   |      ^ cannot infer type for type `u32`\n+   |      ^\n    |\n note: multiple `impl`s satisfying `u32: C` found\n   --> $DIR/coherence-overlap-trait-alias.rs:14:1"}, {"sha": "688db695fa848cc4b7761acf444292bbe0fc2785", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,7 @@ error[E0283]: type annotations needed for `Mask<_, LANES>`\n   --> $DIR/issue-91614.rs:6:9\n    |\n LL |     let y = Mask::<_, _>::splat(false);\n-   |         ^\n+   |         ^   ------------------- type must be known at this point\n    |\n    = note: cannot satisfy `_: MaskElement`\n note: required by a bound in `Mask::<T, LANES>::splat`"}, {"sha": "41afaec86b6e47881641ac0db817c2bcf41f8604", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -34,19 +34,19 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: const parameters may only be used as standalone arguments, i.e. `J`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n   --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n+   |                          ^^^^\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n \n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n   --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n+   |                          ^^^^\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n "}, {"sha": "c651bf1c8de9d2fd79a9740b6d72a8fc26105ae4", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -19,8 +19,8 @@ struct S<const I: u32, const J: u32>;\n impl<const I: u32, const J: u32> S<I, J>\n where\n     IsLessOrEqual<I, 8>: True,\n-//[min]~^ Error type annotations needed [E0283]\n-//[min]~| Error type annotations needed [E0283]\n+//[min]~^ Error type annotations needed\n+//[min]~| Error type annotations needed\n     IsLessOrEqual<J, 8>: True,\n     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n //[min]~^ Error generic parameters may not be used in const operations"}, {"sha": "957052feba95b202f3c81de6c7be1b9e8579671e", "filename": "src/test/ui/impl-trait/hidden-type-is-opaque-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,16 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |         cont.reify_as();\n    |         ^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error[E0282]: type annotations needed\n   --> $DIR/hidden-type-is-opaque-2.rs:18:9\n    |\n LL |         cont.reify_as();\n    |         ^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c1e43f0b721f50a7e5c3fa33951d1f60aa1d64bd", "filename": "src/test/ui/inference/cannot-infer-partial-try-return.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,6 +3,9 @@ error[E0282]: type annotations needed for `Result<(), QualifiedError<_>>`\n    |\n LL |     let x = || -> Result<_, QualifiedError<_>> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |         infallible()?;\n+   |         ------------- type must be known at this point\n    |\n help: try giving this closure an explicit return type\n    |"}, {"sha": "7bb281802d2cebd74d392b6e2db4011f17178ae0", "filename": "src/test/ui/inference/erase-type-params-in-label.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,7 @@ error[E0283]: type annotations needed for `Foo<i32, &str, W, Z>`\n   --> $DIR/erase-type-params-in-label.rs:2:9\n    |\n LL |     let foo = foo(1, \"\");\n-   |         ^^^\n+   |         ^^^   --- type must be known at this point\n    |\n    = note: cannot satisfy `_: Default`\n note: required by a bound in `foo`\n@@ -23,7 +23,7 @@ error[E0283]: type annotations needed for `Bar<i32, &str, Z>`\n   --> $DIR/erase-type-params-in-label.rs:5:9\n    |\n LL |     let bar = bar(1, \"\");\n-   |         ^^^\n+   |         ^^^   --- type must be known at this point\n    |\n    = note: cannot satisfy `_: Default`\n note: required by a bound in `bar`"}, {"sha": "a71ce9a8ef27af725cbd111f92027f71ee94288d", "filename": "src/test/ui/inference/issue-72616.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fissue-72616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fissue-72616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72616.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72616.rs:20:37\n    |\n LL |         if String::from(\"a\") == \"a\".try_into().unwrap() {}\n-   |                                     ^^^^^^^^\n+   |                              --     ^^^^^^^^\n+   |                              |\n+   |                              type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `String: PartialEq<_>` found in the `alloc` crate:\n            - impl PartialEq for String;"}, {"sha": "d4eeda07366a8015c2a4c04374f6ee6b4fc32bf7", "filename": "src/test/ui/inference/issue-72690.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -55,7 +55,7 @@ error[E0283]: type annotations needed for `&T`\n   --> $DIR/issue-72690.rs:17:9\n    |\n LL |     let _ = \"x\".as_ref();\n-   |         ^\n+   |         ^       ------ type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;"}, {"sha": "e395e65fad066acc6142cbea61b08523aca2414f", "filename": "src/test/ui/inference/issue-86162-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-86162-1.rs:7:9\n    |\n LL |     foo(gen()); //<- Do not suggest `foo::<impl Clone>()`!\n-   |         ^^^ cannot infer type of the type parameter `T` declared on the function `gen`\n+   |     --- ^^^ cannot infer type of the type parameter `T` declared on the function `gen`\n+   |     |\n+   |     type must be known at this point\n    |\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `foo`"}, {"sha": "30e6e10eaa2fd07a09fba9e3c544a89e6e3d6d19", "filename": "src/test/ui/inference/issue-86162-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-86162-2.rs:12:14\n    |\n LL |     Foo::bar(gen()); //<- Do not suggest `Foo::bar::<impl Clone>()`!\n-   |              ^^^ cannot infer type of the type parameter `T` declared on the function `gen`\n+   |     -------- ^^^ cannot infer type of the type parameter `T` declared on the function `gen`\n+   |     |\n+   |     type must be known at this point\n    |\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `Foo::bar`"}, {"sha": "8d6b81c24b682e5dd0a66fc424c2e6e6aea7012c", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,14 @@\n-error[E0284]: type annotations needed: cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+error[E0284]: type annotations needed\n   --> $DIR/issue-12028.rs:27:14\n    |\n LL |         self.input_stream(&mut stream);\n-   |              ^^^^^^^^^^^^ cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+   |              ^^^^^^^^^^^^\n+   |\n+   = note: cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |         <u8 as StreamHash<H>>::input_stream(self, &mut stream);\n+   |         ++++++++++++++++++++++++++++++++++++    ~\n \n error: aborting due to previous error\n "}, {"sha": "fe06810b8dff4aa643e0eb825f13dd9f39ce8e0a", "filename": "src/test/ui/issues/issue-15965.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-15965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-15965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15965.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -5,8 +5,6 @@ LL | /         { return () }\n LL | |\n LL | |     ()\n    | |______^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to previous error\n "}, {"sha": "9ac751e4dc437ccad0c2a92a15eb39870ad37d76", "filename": "src/test/ui/issues/issue-20261.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |         i.clone();\n    |           ^^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to previous error\n "}, {"sha": "31a8ca5fbfac887a3b0b01e5eab249ac87b113da", "filename": "src/test/ui/issues/issue-2151.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,9 @@ error[E0282]: type annotations needed\n    |\n LL |     let x = panic!();\n    |         ^\n+LL |     x.clone();\n+   |     - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `x` an explicit type\n    |\n LL |     let x: _ = panic!();"}, {"sha": "4e010a13653e7796c0723c35125c33bdb5ce60b1", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `&'a T: Foo`\n   --> $DIR/issue-21974.rs:11:19\n    |\n LL |     where &'a T : Foo,\n-   |                   ^^^ cannot infer type for reference `&'a T`\n+   |                   ^^^\n    |\n    = note: cannot satisfy `&'a T: Foo`\n "}, {"sha": "8f3b2ac73199ccec1afced236ae6f1c0f0452522", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `T0: Trait0<'l0>`\n   --> $DIR/issue-24424.rs:4:57\n    |\n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n-   |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`\n+   |                                                         ^^^^^^^^^^^\n    |\n    = note: cannot satisfy `T0: Trait0<'l0>`\n "}, {"sha": "4c21cbfc61d435188236154561f7ff20b7e7a681", "filename": "src/test/ui/issues/issue-51116.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-51116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-51116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51116.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -5,7 +5,6 @@ fn main() {\n             *tile = 0;\n             //~^ ERROR type annotations needed\n             //~| NOTE cannot infer type\n-            //~| NOTE type must be known at this point\n         }\n     }\n "}, {"sha": "c07f8735eb2c781bced02763b9a84dbf5e6a1c40", "filename": "src/test/ui/issues/issue-51116.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-51116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-51116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51116.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |             *tile = 0;\n    |             ^^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to previous error\n "}, {"sha": "9be6c2f8564ffb35f6a95168fdb0d31b41e0af4d", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -14,7 +14,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-69455.rs:29:41\n    |\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n-   |                                         ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |                          ----           ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |                          |\n+   |                          type must be known at this point\n    |\n note: multiple `impl`s satisfying `u64: Test<_>` found\n   --> $DIR/issue-69455.rs:11:1"}, {"sha": "193de1a35cf1a7e56e84059977202e5b49b98ef4", "filename": "src/test/ui/issues/issue-69683.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,14 @@\n-error[E0284]: type annotations needed: cannot satisfy `<u8 as Element<_>>::Array == [u8; 3]`\n+error[E0284]: type annotations needed\n   --> $DIR/issue-69683.rs:30:10\n    |\n LL |     0u16.foo(b);\n-   |          ^^^ cannot satisfy `<u8 as Element<_>>::Array == [u8; 3]`\n+   |          ^^^\n+   |\n+   = note: cannot satisfy `<u8 as Element<_>>::Array == [u8; 3]`\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     <u16 as Foo<I>>::foo(0u16, b);\n+   |     +++++++++++++++++++++    ~\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-69683.rs:30:10"}, {"sha": "6ddb7657301cd29fdd8ca59007d13042d39093df", "filename": "src/test/ui/issues/issue-71584.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-71584.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-71584.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71584.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,16 @@\n-error[E0284]: type annotations needed: cannot satisfy `<u64 as Rem<_>>::Output == u64`\n-  --> $DIR/issue-71584.rs:4:11\n+error[E0284]: type annotations needed\n+  --> $DIR/issue-71584.rs:4:15\n    |\n LL |     d = d % n.into();\n-   |           ^ cannot satisfy `<u64 as Rem<_>>::Output == u64`\n+   |           -   ^^^^\n+   |           |\n+   |           type must be known at this point\n+   |\n+   = note: cannot satisfy `<u64 as Rem<_>>::Output == u64`\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     d = d % <u32 as Into<T>>::into(n);\n+   |             +++++++++++++++++++++++ ~\n \n error: aborting due to previous error\n "}, {"sha": "2a747f679a84daa430aad2bbb4920e363b9f471e", "filename": "src/test/ui/issues/issue-7813.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `&[_; 0]`\n   --> $DIR/issue-7813.rs:2:9\n    |\n LL |     let v = &[];\n-   |         ^\n+   |         ^   --- type must be known at this point\n    |\n help: consider giving `v` an explicit type, where the placeholders `_` are specified\n    |"}, {"sha": "420104e526d9b8dbb889f23550535e6ca56cf5b7", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches3.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,9 +2,8 @@ error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:8:10\n    |\n LL |         |s| s.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |s: _| s.len()\n@@ -14,9 +13,8 @@ error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:15:10\n    |\n LL |         |s| s.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |s: _| s.len()\n@@ -26,9 +24,8 @@ error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:23:10\n    |\n LL |         |s| s.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |s: _| s.len()\n@@ -38,9 +35,8 @@ error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:30:10\n    |\n LL |         |s| s.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |s: _| s.len()"}, {"sha": "5832c4d173c10245c4574f5c47a058be2ad345eb", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `&'a (): Foo`\n   --> $DIR/issue-34979.rs:6:13\n    |\n LL |     &'a (): Foo,\n-   |             ^^^ cannot infer type for reference `&'a ()`\n+   |             ^^^\n    |\n    = note: cannot satisfy `&'a (): Foo`\n "}, {"sha": "6631fe987e275d44da48a06c9f4289fb365c1f73", "filename": "src/test/ui/marker_trait_attr/region-overlap.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `(&'static (), &'a ()): A`\n   --> $DIR/region-overlap.rs:5:10\n    |\n LL | impl<'a> A for (&'static (), &'a ()) {}\n-   |          ^ cannot infer type for tuple `(&'static (), &'a ())`\n+   |          ^\n    |\n note: multiple `impl`s satisfying `(&'static (), &'a ()): A` found\n   --> $DIR/region-overlap.rs:5:1\n@@ -12,11 +12,11 @@ LL | impl<'a> A for (&'static (), &'a ()) {}\n LL | impl<'a> A for (&'a (), &'static ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `(&'a (), &'static ()): A`\n   --> $DIR/region-overlap.rs:6:10\n    |\n LL | impl<'a> A for (&'a (), &'static ()) {}\n-   |          ^ cannot infer type for tuple `(&'a (), &'static ())`\n+   |          ^\n    |\n note: multiple `impl`s satisfying `(&'a (), &'static ()): A` found\n   --> $DIR/region-overlap.rs:5:1"}, {"sha": "8e528f8c1db94c5198a8099ae26e4cf17db1b4ea", "filename": "src/test/ui/pattern/issue-88074-pat-range-type-inference-err.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -12,8 +12,6 @@ error[E0282]: type annotations needed\n    |\n LL |         Zero::ZERO ..= Zero::ZERO => {},\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3342b8e4002b909ce770b6aceeef2b8aaec128a9", "filename": "src/test/ui/pattern/pat-tuple-bad-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,10 @@ error[E0282]: type annotations needed\n    |\n LL |     let x;\n    |         ^\n+...\n+LL |         (..) => {}\n+   |         ---- type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `x` an explicit type\n    |\n LL |     let x: _;"}, {"sha": "2b178990850200cf60e1aa10f1c758c89ed61510", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,9 @@ error[E0282]: type annotations needed\n    |\n LL |     let x: Option<_> = None;\n    |                        ^^^^ cannot infer type of the type parameter `T` declared on the enum `Option`\n+LL |     x.unwrap().method_that_could_exist_on_some_type();\n+   |     ---------- type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |     let x: Option<_> = None::<T>;\n@@ -16,7 +17,6 @@ error[E0282]: type annotations needed\n LL |         .sum::<_>()\n    |          ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |         .sum::<_>()"}, {"sha": "d93d54e878bc8ab53b7ac1937509db9652582962", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.generic_arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,9 @@ error[E0282]: type annotations needed\n    |\n LL |     let x: Option<_> = None;\n    |                        ^^^^ cannot infer type of the type parameter `T` declared on the enum `Option`\n+LL |     x.unwrap().method_that_could_exist_on_some_type();\n+   |     ---------- type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |     let x: Option<_> = None::<T>;\n@@ -16,7 +17,6 @@ error[E0282]: type annotations needed\n LL |         .sum::<_>()\n    |          ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |         .sum::<S>()"}, {"sha": "7d240589a3f133647b2b85ccfe61f504d6f47bf7", "filename": "src/test/ui/span/method-and-field-eager-resolution.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,10 @@ error[E0282]: type annotations needed\n    |\n LL |     let mut x = Default::default();\n    |         ^^^^^\n+LL |\n+LL |     x.0;\n+   |     - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `x` an explicit type\n    |\n LL |     let mut x: _ = Default::default();\n@@ -15,8 +17,10 @@ error[E0282]: type annotations needed\n    |\n LL |     let mut x = Default::default();\n    |         ^^^^^\n+LL |\n+LL |     x[0];\n+   |     - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `x` an explicit type\n    |\n LL |     let mut x: _ = Default::default();"}, {"sha": "9dff6c64db46f93411770b051ebf84af056ad4ef", "filename": "src/test/ui/span/type-annotations-needed-expr.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -4,7 +4,6 @@ error[E0282]: type annotations needed\n LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n    |                                       ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |     let _ = (vec![1,2,3]).into_iter().sum::<S>() as f64;"}, {"sha": "f4c2eb7ff34ae1e76d66f454df31a557abc0f1c4", "filename": "src/test/ui/suggestions/suggest-closure-return-type-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-1.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `[_; 0]`\n   --> $DIR/suggest-closure-return-type-1.rs:4:18\n    |\n LL |     unbound_drop(|| -> _ { [] });\n-   |                  ^^^^^^^\n+   |                  ^^^^^^^   -- type must be known at this point\n    |\n help: try giving this closure an explicit return type\n    |"}, {"sha": "88bf263043d2c4745c206a0888218569cc2ce843", "filename": "src/test/ui/suggestions/suggest-closure-return-type-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-2.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `[_; 0]`\n   --> $DIR/suggest-closure-return-type-2.rs:4:18\n    |\n LL |     unbound_drop(|| { [] })\n-   |                  ^^\n+   |                  ^^   -- type must be known at this point\n    |\n help: try giving this closure an explicit return type\n    |"}, {"sha": "bc4107528d2745f06a48efc44194ba5b5284c3a0", "filename": "src/test/ui/suggestions/suggest-closure-return-type-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-3.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `[_; 0]`\n   --> $DIR/suggest-closure-return-type-3.rs:4:18\n    |\n LL |     unbound_drop(|| []);\n-   |                  ^^\n+   |                  ^^ -- type must be known at this point\n    |\n help: try giving this closure an explicit return type\n    |"}, {"sha": "a2d23c4e9dfad0497417f2f70bcd26bede39e065", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -26,7 +26,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:8:10\n    |\n LL |     opts.get(opt.as_ref());\n-   |          ^^^ cannot infer type of the type parameter `Q` declared on the associated function `get`\n+   |          ^^^     ------ type must be known at this point\n+   |          |\n+   |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n    |\n    = note: multiple `impl`s satisfying `String: AsRef<_>` found in the following crates: `alloc`, `std`:\n            - impl AsRef<OsStr> for String;\n@@ -42,7 +44,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:13:59\n    |\n LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n-   |                                                           ^^^^\n+   |                                            ---------      ^^^^\n+   |                                            |\n+   |                                            type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `u32: From<_>` found in the following crates: `core`, `std`:\n            - impl From<Ipv4Addr> for u32;\n@@ -59,7 +63,7 @@ error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:36:9\n    |\n LL |     let _ = ().foo();\n-   |         ^\n+   |         ^      --- type must be known at this point\n    |\n note: multiple `impl`s satisfying `(): Foo<'_, _>` found\n   --> $DIR/issue-77982.rs:29:1\n@@ -77,7 +81,7 @@ error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:40:9\n    |\n LL |     let _ = (&()).bar();\n-   |         ^\n+   |         ^         --- type must be known at this point\n    |\n note: multiple `impl`s satisfying `&(): Bar<'_, _>` found\n   --> $DIR/issue-77982.rs:32:1"}, {"sha": "fb387a9c909657066c9d9fbe0a617ae46f03d05d", "filename": "src/test/ui/traits/issue-85735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.rs?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -5,7 +5,7 @@ trait Foo {}\n impl<'a, 'b, T> Foo for T\n where\n     T: FnMut(&'a ()),\n-    //~^ ERROR: type annotations needed [E0283]\n+    //~^ ERROR: type annotations needed\n     T: FnMut(&'b ()),\n {\n }"}, {"sha": "fa280135beb2d98a99f1605dc79ea8c33b57b7fa", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `T: FnMut<(&'a (),)>`\n   --> $DIR/issue-85735.rs:7:8\n    |\n LL |     T: FnMut(&'a ()),\n-   |        ^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n+   |        ^^^^^^^^^^^^^\n    |\n    = note: cannot satisfy `T: FnMut<(&'a (),)>`\n "}, {"sha": "48b7946ea820e8b6d328520786965cef37fecbdf", "filename": "src/test/ui/type-alias-impl-trait/closures_in_branches.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,9 +2,8 @@ error[E0282]: type annotations needed\n   --> $DIR/closures_in_branches.rs:7:10\n    |\n LL |         |x| x.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |x: _| x.len()\n@@ -14,9 +13,8 @@ error[E0282]: type annotations needed\n   --> $DIR/closures_in_branches.rs:21:10\n    |\n LL |         |x| x.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |x: _| x.len()"}, {"sha": "e767bfdb08b6b44e470b3d689eeab7c52d787660", "filename": "src/test/ui/type-alias-impl-trait/fallback.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,6 +1,8 @@\n error[E0283]: type annotations needed\n   --> $DIR/fallback.rs:24:5\n    |\n+LL | fn unconstrained_foo() -> Wrapper<Foo> {\n+   |                           ------------ type must be known at this point\n LL |     Wrapper::Second\n    |     ^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the enum `Wrapper`\n    |"}, {"sha": "e823bad2668ae554ee92b18b80ccd95a58e996f3", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `[_; 0]`\n   --> $DIR/cannot_infer_local_or_array.rs:2:9\n    |\n LL |     let x = [];\n-   |         ^\n+   |         ^   -- type must be known at this point\n    |\n help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |"}, {"sha": "75feb5698eb630ea2e868cfb5cf4ea6d0e0b1eb5", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `&'a T: Foo`\n   --> $DIR/issue-40294.rs:6:19\n    |\n LL |     where &'a T : Foo,\n-   |                   ^^^ cannot infer type for reference `&'a T`\n+   |                   ^^^\n    |\n    = note: cannot satisfy `&'a T: Foo`\n "}, {"sha": "003c630790d2c79a53c95c99938cec7a81360cc2", "filename": "src/test/ui/typeck/issue-65611.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |     let x = buffer.last().unwrap().0.clone();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n-   |\n-   = note: type must be known at this point\n \n error[E0609]: no field `0` on type `&_`\n   --> $DIR/issue-65611.rs:59:36"}, {"sha": "ff2a597bed065aa6e33d2c274454de1b9210c816", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a6fa4f118d88991458549464d960aa1e495541b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr?ref=9a6fa4f118d88991458549464d960aa1e495541b", "patch": "@@ -3,8 +3,10 @@ error[E0282]: type annotations needed for `Option<T>`\n    |\n LL |     let mut closure0 = None;\n    |         ^^^^^^^^^^^^\n+...\n+LL |                         return c();\n+   |                                --- type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `closure0` an explicit type, where the placeholders `_` are specified\n    |\n LL |     let mut closure0: Option<T> = None;"}]}