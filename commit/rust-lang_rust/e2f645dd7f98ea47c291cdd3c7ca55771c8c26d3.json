{"sha": "e2f645dd7f98ea47c291cdd3c7ca55771c8c26d3", "node_id": "C_kwDOAAsO6NoAKGUyZjY0NWRkN2Y5OGVhNDdjMjkxY2RkM2M3Y2E1NTc3MWM4YzI2ZDM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T18:51:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T18:51:17Z"}, "message": "Let LtoModuleCodegen::optimize take self by value", "tree": {"sha": "4b4d3492a1f400e798c2a4c7769889e73dbd7f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b4d3492a1f400e798c2a4c7769889e73dbd7f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f645dd7f98ea47c291cdd3c7ca55771c8c26d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f645dd7f98ea47c291cdd3c7ca55771c8c26d3", "html_url": "https://github.com/rust-lang/rust/commit/e2f645dd7f98ea47c291cdd3c7ca55771c8c26d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f645dd7f98ea47c291cdd3c7ca55771c8c26d3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758a7da13bc253783847d75c52f6118e40d8276c", "url": "https://api.github.com/repos/rust-lang/rust/commits/758a7da13bc253783847d75c52f6118e40d8276c", "html_url": "https://github.com/rust-lang/rust/commit/758a7da13bc253783847d75c52f6118e40d8276c"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "72da59a1bf808871bfa193f77348ccb1ace71ce4", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f645dd7f98ea47c291cdd3c7ca55771c8c26d3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f645dd7f98ea47c291cdd3c7ca55771c8c26d3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e2f645dd7f98ea47c291cdd3c7ca55771c8c26d3", "patch": "@@ -213,7 +213,7 @@ impl WriteBackendMethods for GccCodegenBackend {\n                     unimplemented!();\n                 }\n             };\n-        Ok(LtoModuleCodegen::Fat { module: Some(module), _serialized_bitcode: vec![] })\n+        Ok(LtoModuleCodegen::Fat { module, _serialized_bitcode: vec![] })\n     }\n \n     fn run_thin_lto(_cgcx: &CodegenContext<Self>, _modules: Vec<(String, Self::ThinBuffer)>, _cached_modules: Vec<(SerializedModule<Self::ModuleBuffer>, WorkProduct)>) -> Result<(Vec<LtoModuleCodegen<Self>>, Vec<WorkProduct>), FatalError> {\n@@ -234,7 +234,7 @@ impl WriteBackendMethods for GccCodegenBackend {\n         Ok(())\n     }\n \n-    unsafe fn optimize_thin(_cgcx: &CodegenContext<Self>, _thin: &mut ThinModule<Self>) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n+    unsafe fn optimize_thin(_cgcx: &CodegenContext<Self>, _thin: ThinModule<Self>) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n         unimplemented!();\n     }\n "}]}