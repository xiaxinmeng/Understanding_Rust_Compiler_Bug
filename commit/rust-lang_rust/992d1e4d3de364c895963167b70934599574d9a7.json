{"sha": "992d1e4d3de364c895963167b70934599574d9a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MmQxZTRkM2RlMzY0Yzg5NTk2MzE2N2I3MDkzNDU5OTU3NGQ5YTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-20T06:34:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-20T06:34:22Z"}, "message": "Auto merge of #54241 - vi:suggest_with_applicability, r=estebank\n\nRemove usages of span_suggestion without Applicability\n\nUse `Applicability::Unspecified` for all of them instead.\n\nShall deprecations for the non-`_with_applicability` functions be added?\n\nShall clippy be addressed somehow?\n\nr? @estebank", "tree": {"sha": "4766e0608291ff78f47f76fc90a52e1e9e40e9e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4766e0608291ff78f47f76fc90a52e1e9e40e9e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992d1e4d3de364c895963167b70934599574d9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992d1e4d3de364c895963167b70934599574d9a7", "html_url": "https://github.com/rust-lang/rust/commit/992d1e4d3de364c895963167b70934599574d9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992d1e4d3de364c895963167b70934599574d9a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d16f27f89a3a439467533066ff794f41aa63f28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d16f27f89a3a439467533066ff794f41aa63f28f", "html_url": "https://github.com/rust-lang/rust/commit/d16f27f89a3a439467533066ff794f41aa63f28f"}, {"sha": "d0790c490a2233d04375072123e70ed158eb3848", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0790c490a2233d04375072123e70ed158eb3848", "html_url": "https://github.com/rust-lang/rust/commit/d0790c490a2233d04375072123e70ed158eb3848"}], "stats": {"total": 354, "additions": 258, "deletions": 96}, "files": [{"sha": "6ff008919e52cab9a627165020d7a1b77ec92b22", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -13,6 +13,7 @@\n use infer::error_reporting::nice_region_error::NiceRegionError;\n use ty;\n use util::common::ErrorReported;\n+use errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n@@ -111,13 +112,14 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             E0621,\n             \"explicit lifetime required in {}\",\n             error_var\n-        ).span_suggestion(\n+        ).span_suggestion_with_applicability(\n             new_ty_span,\n             &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-            new_ty.to_string()\n+            new_ty.to_string(),\n+            Applicability::Unspecified,\n         )\n-            .span_label(span, format!(\"lifetime `{}` required\", named))\n-            .emit();\n+        .span_label(span, format!(\"lifetime `{}` required\", named))\n+        .emit();\n         return Some(ErrorReported);\n     }\n "}, {"sha": "3393eb65089c05a55e3b6cf337ff6cd98b0860c0", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -14,6 +14,7 @@ use infer::error_reporting::nice_region_error::NiceRegionError;\n use infer::lexical_region_resolve::RegionResolutionError;\n use ty::{BoundRegion, FreeRegion, RegionKind};\n use util::common::ErrorReported;\n+use errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait.\n@@ -61,14 +62,15 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                             _ => \"'_\".to_owned(),\n                         };\n                         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(return_sp) {\n-                            err.span_suggestion(\n+                            err.span_suggestion_with_applicability(\n                                 return_sp,\n                                 &format!(\n                                     \"you can add a constraint to the return type to make it last \\\n                                      less than `'static` and match {}\",\n                                     lifetime,\n                                 ),\n                                 format!(\"{} + {}\", snippet, lifetime_name),\n+                                Applicability::Unspecified,\n                             );\n                         }\n                         err.emit();"}, {"sha": "7bf0d8ecec854264f4ee51fccb74b701c37b2897", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{self, Lrc, Lock, LockCell, OneThread, Once, RwLock};\n \n use syntax::ast::NodeId;\n-use errors::{self, DiagnosticBuilder, DiagnosticId};\n+use errors::{self, DiagnosticBuilder, DiagnosticId, Applicability};\n use errors::emitter::{Emitter, EmitterWriter};\n use syntax::edition::Edition;\n use syntax::json::JsonEmitter;\n@@ -431,8 +431,13 @@ impl Session {\n                     diag_builder.span_note(span, message);\n                 }\n                 DiagnosticBuilderMethod::SpanSuggestion(suggestion) => {\n-                    let span = span_maybe.expect(\"span_suggestion needs a span\");\n-                    diag_builder.span_suggestion(span, message, suggestion);\n+                    let span = span_maybe.expect(\"span_suggestion_* needs a span\");\n+                    diag_builder.span_suggestion_with_applicability(\n+                        span,\n+                        message,\n+                        suggestion,\n+                        Applicability::Unspecified,\n+                    );\n                 }\n             }\n         }"}, {"sha": "fb8744e4d96d6ecb1d2685c3ed8ec9dcaad8bf03", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -867,10 +867,20 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                         }) = cmt.cat {\n                                             db.note(fn_closure_msg);\n                                         } else {\n-                                            db.span_suggestion(sp, msg, suggestion);\n+                                            db.span_suggestion_with_applicability(\n+                                                sp,\n+                                                msg,\n+                                                suggestion,\n+                                                Applicability::Unspecified,\n+                                            );\n                                         }\n                                     } else {\n-                                        db.span_suggestion(sp, msg, suggestion);\n+                                        db.span_suggestion_with_applicability(\n+                                            sp,\n+                                            msg,\n+                                            suggestion,\n+                                            Applicability::Unspecified,\n+                                        );\n                                     }\n                                 }\n                                 _ => {\n@@ -1236,10 +1246,16 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         let let_span = self.tcx.hir.span(node_id);\n                         let suggestion = suggest_ref_mut(self.tcx, let_span);\n                         if let Some(replace_str) = suggestion {\n-                            db.span_suggestion(\n+                            db.span_suggestion_with_applicability(\n                                 let_span,\n                                 \"use a mutable reference instead\",\n                                 replace_str,\n+                                // I believe this can be machine applicable,\n+                                // but if there are multiple attempted uses of an immutable\n+                                // reference, I don't know how rustfix handles it, it might\n+                                // attempt fixing them multiple times.\n+                                //                              @estebank\n+                                Applicability::Unspecified,\n                             );\n                         }\n                     }\n@@ -1292,11 +1308,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 )) = ty.map(|t| &t.node)\n                 {\n                     let borrow_expr_id = self.tcx.hir.get_parent_node(borrowed_node_id);\n-                    db.span_suggestion(\n+                    db.span_suggestion_with_applicability(\n                         self.tcx.hir.span(borrow_expr_id),\n                         \"consider removing the `&mut`, as it is an \\\n                         immutable binding to a mutable reference\",\n-                        snippet\n+                        snippet,\n+                        Applicability::MachineApplicable,\n                     );\n                 } else {\n                     db.span_suggestion_with_applicability(\n@@ -1326,12 +1343,15 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                   &cmt_path_or_string,\n                                                   capture_span,\n                                                   Origin::Ast)\n-            .span_suggestion(err.span,\n-                             &format!(\"to force the closure to take ownership of {} \\\n-                                       (and any other referenced variables), \\\n-                                       use the `move` keyword\",\n-                                       cmt_path_or_string),\n-                             suggestion)\n+            .span_suggestion_with_applicability(\n+                 err.span,\n+                 &format!(\"to force the closure to take ownership of {} \\\n+                           (and any other referenced variables), \\\n+                           use the `move` keyword\",\n+                           cmt_path_or_string),\n+                 suggestion,\n+                 Applicability::MachineApplicable,\n+            )\n             .emit();\n         self.signal_error();\n     }"}, {"sha": "2799f2cc81f5ab0648d078f0d19d6fdc387356ce", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -232,6 +232,7 @@ impl Diagnostic {\n     /// inline it will only show the text message and not the text.\n     ///\n     /// See `CodeSuggestion` for more information.\n+    #[deprecated(note = \"Use `span_suggestion_short_with_applicability`\")]\n     pub fn span_suggestion_short(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n@@ -263,6 +264,7 @@ impl Diagnostic {\n     /// * may contain a name of a function, variable or type, but not whole expressions\n     ///\n     /// See `CodeSuggestion` for more information.\n+    #[deprecated(note = \"Use `span_suggestion_with_applicability`\")]\n     pub fn span_suggestion(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n@@ -278,10 +280,11 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn multipart_suggestion(\n+    pub fn multipart_suggestion_with_applicability(\n         &mut self,\n         msg: &str,\n         suggestion: Vec<(Span, String)>,\n+        applicability: Applicability,\n     ) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n@@ -292,12 +295,26 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n-            applicability: Applicability::Unspecified,\n+            applicability,\n         });\n         self\n     }\n \n+    #[deprecated(note = \"Use `multipart_suggestion_with_applicability`\")]\n+    pub fn multipart_suggestion(\n+        &mut self,\n+        msg: &str,\n+        suggestion: Vec<(Span, String)>,\n+    ) -> &mut Self {\n+        self.multipart_suggestion_with_applicability(\n+            msg,\n+            suggestion,\n+            Applicability::Unspecified,\n+        )\n+    }\n+\n     /// Prints out a message with multiple suggested edits of the code.\n+    #[deprecated(note = \"Use `span_suggestions_with_applicability`\")]\n     pub fn span_suggestions(&mut self, sp: Span, msg: &str, suggestions: Vec<String>) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: suggestions.into_iter().map(|snippet| Substitution {"}, {"sha": "60a68b1e496620a64106ff82659a8a90ebf1867e", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -43,25 +43,31 @@ pub struct DiagnosticBuilder<'a> {\n /// it easy to declare such methods on the builder.\n macro_rules! forward {\n     // Forward pattern for &self -> &Self\n-    (pub fn $n:ident(&self, $($name:ident: $ty:ty),*) -> &Self) => {\n+    (pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)*) -> &Self) => {\n         pub fn $n(&self, $($name: $ty),*) -> &Self {\n+            #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n             self\n         }\n     };\n \n     // Forward pattern for &mut self -> &mut Self\n-    (pub fn $n:ident(&mut self, $($name:ident: $ty:ty),*) -> &mut Self) => {\n+    (pub fn $n:ident(&mut self, $($name:ident: $ty:ty),* $(,)*) -> &mut Self) => {\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n+            #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n             self\n         }\n     };\n \n     // Forward pattern for &mut self -> &mut Self, with S: Into<MultiSpan>\n     // type parameter. No obvious way to make this more generic.\n-    (pub fn $n:ident<S: Into<MultiSpan>>(&mut self, $($name:ident: $ty:ty),*) -> &mut Self) => {\n+    (pub fn $n:ident<S: Into<MultiSpan>>(\n+                    &mut self,\n+                    $($name:ident: $ty:ty),*\n+                    $(,)*) -> &mut Self) => {\n         pub fn $n<S: Into<MultiSpan>>(&mut self, $($name: $ty),*) -> &mut Self {\n+            #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n             self\n         }\n@@ -157,49 +163,75 @@ impl<'a> DiagnosticBuilder<'a> {\n     forward!(pub fn note_expected_found(&mut self,\n                                         label: &dyn fmt::Display,\n                                         expected: DiagnosticStyledString,\n-                                        found: DiagnosticStyledString)\n-                                        -> &mut Self);\n+                                        found: DiagnosticStyledString,\n+                                        ) -> &mut Self);\n \n     forward!(pub fn note_expected_found_extra(&mut self,\n                                               label: &dyn fmt::Display,\n                                               expected: DiagnosticStyledString,\n                                               found: DiagnosticStyledString,\n                                               expected_extra: &dyn fmt::Display,\n-                                              found_extra: &dyn fmt::Display)\n-                                              -> &mut Self);\n+                                              found_extra: &dyn fmt::Display,\n+                                              ) -> &mut Self);\n \n     forward!(pub fn note(&mut self, msg: &str) -> &mut Self);\n     forward!(pub fn span_note<S: Into<MultiSpan>>(&mut self,\n                                                   sp: S,\n-                                                  msg: &str)\n-                                                  -> &mut Self);\n+                                                  msg: &str,\n+                                                  ) -> &mut Self);\n     forward!(pub fn warn(&mut self, msg: &str) -> &mut Self);\n     forward!(pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self);\n     forward!(pub fn help(&mut self , msg: &str) -> &mut Self);\n     forward!(pub fn span_help<S: Into<MultiSpan>>(&mut self,\n                                                   sp: S,\n-                                                  msg: &str)\n-                                                  -> &mut Self);\n-    forward!(pub fn span_suggestion_short(&mut self,\n-                                          sp: Span,\n-                                          msg: &str,\n-                                          suggestion: String)\n-                                          -> &mut Self);\n+                                                  msg: &str,\n+                                                  ) -> &mut Self);\n+\n+    #[deprecated(note = \"Use `span_suggestion_short_with_applicability`\")]\n+    forward!(pub fn span_suggestion_short(\n+                                      &mut self,\n+                                      sp: Span,\n+                                      msg: &str,\n+                                      suggestion: String,\n+                                      ) -> &mut Self);\n+\n+    #[deprecated(note = \"Use `multipart_suggestion_with_applicability`\")]\n     forward!(pub fn multipart_suggestion(\n         &mut self,\n         msg: &str,\n-        suggestion: Vec<(Span, String)>\n+        suggestion: Vec<(Span, String)>,\n     ) -> &mut Self);\n+\n+    #[deprecated(note = \"Use `span_suggestion_with_applicability`\")]\n     forward!(pub fn span_suggestion(&mut self,\n                                     sp: Span,\n                                     msg: &str,\n-                                    suggestion: String)\n-                                    -> &mut Self);\n+                                    suggestion: String,\n+                                    ) -> &mut Self);\n+\n+    #[deprecated(note = \"Use `span_suggestions_with_applicability`\")]\n     forward!(pub fn span_suggestions(&mut self,\n                                      sp: Span,\n                                      msg: &str,\n-                                     suggestions: Vec<String>)\n-                                     -> &mut Self);\n+                                     suggestions: Vec<String>,\n+                                     ) -> &mut Self);\n+\n+    pub fn multipart_suggestion_with_applicability(&mut self,\n+                                              msg: &str,\n+                                              suggestion: Vec<(Span, String)>,\n+                                              applicability: Applicability,\n+                                              ) -> &mut Self {\n+        if !self.allow_suggestions {\n+            return self\n+        }\n+        self.diagnostic.multipart_suggestion_with_applicability(\n+            msg,\n+            suggestion,\n+            applicability,\n+        );\n+        self\n+    }\n+\n     pub fn span_suggestion_with_applicability(&mut self,\n                                               sp: Span,\n                                               msg: &str,"}, {"sha": "52d051ebe7ba0cf13ce648519b26b13ef9c0e97c", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -11,7 +11,7 @@\n use core::unicode::property::Pattern_White_Space;\n use rustc::mir::*;\n use rustc::ty;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{DiagnosticBuilder,Applicability};\n use syntax_pos::Span;\n \n use borrow_check::MirBorrowckCtxt;\n@@ -350,16 +350,18 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     // expressions `a[b]`, which roughly desugar to\n                     // `*Index::index(&a, b)` or\n                     // `*IndexMut::index_mut(&mut a, b)`.\n-                    err.span_suggestion(\n+                    err.span_suggestion_with_applicability(\n                         span,\n                         \"consider removing the `*`\",\n                         snippet[1..].to_owned(),\n+                        Applicability::Unspecified,\n                     );\n                 } else {\n-                    err.span_suggestion(\n+                    err.span_suggestion_with_applicability(\n                         span,\n                         \"consider borrowing here\",\n                         format!(\"&{}\", snippet),\n+                        Applicability::Unspecified,\n                     );\n                 }\n \n@@ -420,10 +422,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         suggestions.sort_unstable_by_key(|&(span, _, _)| span);\n         suggestions.dedup_by_key(|&mut (span, _, _)| span);\n         for (span, to_remove, suggestion) in suggestions {\n-            err.span_suggestion(\n+            err.span_suggestion_with_applicability(\n                 span,\n                 &format!(\"consider removing the `{}`\", to_remove),\n-                suggestion\n+                suggestion,\n+                Applicability::MachineApplicable,\n             );\n         }\n     }"}, {"sha": "a078aa59a7d5b4bf37624ba5eaa2735d1c69b253", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -22,6 +22,7 @@ use borrow_check::MirBorrowckCtxt;\n use util::borrowck_errors::{BorrowckErrors, Origin};\n use util::collect_writes::FindAssignments;\n use util::suggest_ref_mut;\n+use rustc_errors::Applicability;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(super) enum AccessKind {\n@@ -227,10 +228,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 assert_eq!(local_decl.mutability, Mutability::Not);\n \n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n-                err.span_suggestion(\n+                err.span_suggestion_with_applicability(\n                     local_decl.source_info.span,\n                     \"consider changing this to be mutable\",\n                     format!(\"mut {}\", local_decl.name.unwrap()),\n+                    Applicability::MachineApplicable,\n                 );\n             }\n \n@@ -257,10 +259,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         _,\n                     ) = pat.node\n                     {\n-                        err.span_suggestion(\n+                        err.span_suggestion_with_applicability(\n                             upvar_ident.span,\n                             \"consider changing this to be mutable\",\n                             format!(\"mut {}\", upvar_ident.name),\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n                 }\n@@ -351,10 +354,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 };\n \n                 if let Some((err_help_span, suggested_code)) = suggestion {\n-                    err.span_suggestion(\n+                    err.span_suggestion_with_applicability(\n                         err_help_span,\n                         &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n                         suggested_code,\n+                        Applicability::MachineApplicable,\n                     );\n                 }\n "}, {"sha": "f6ace57f5e0fb52b36a93ac795cdc23426f2a53a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -182,8 +182,9 @@ impl<'a> AstValidator<'a> {\n             );\n \n             if let Ok(snippet) = self.session.source_map().span_to_snippet(span) {\n-                err.span_suggestion(\n+                err.span_suggestion_with_applicability(\n                     span, \"consider adding parentheses\", format!(\"({})\", snippet),\n+                    Applicability::MachineApplicable,\n                 );\n             }\n "}, {"sha": "a87e86aee0cf0d395c8b87503d1903096c7f0d84", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -16,6 +16,7 @@ use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Node, Destination};\n use syntax::ast;\n use syntax_pos::Span;\n+use errors::Applicability;\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n enum LoopKind {\n@@ -140,11 +141,16 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                 .span_label(e.span,\n                                             \"can only break with a value inside \\\n                                             `loop` or breakable block\")\n-                                .span_suggestion(e.span,\n-                                                 &format!(\"instead, use `break` on its own \\\n-                                                           without a value inside this `{}` loop\",\n-                                                          kind.name()),\n-                                                 \"break\".to_string())\n+                                .span_suggestion_with_applicability(\n+                                    e.span,\n+                                    &format!(\n+                                        \"instead, use `break` on its own \\\n+                                        without a value inside this `{}` loop\",\n+                                        kind.name()\n+                                    ),\n+                                    \"break\".to_string(),\n+                                    Applicability::MaybeIncorrect,\n+                                )\n                                 .emit();\n                         }\n                     }"}, {"sha": "343ef067a6ce86aac59e251bb1e3dd7d58dd8ec8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -3292,9 +3292,12 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         err.span_label(base_span,\n                                        \"expecting a type here because of type ascription\");\n                         if line_sp != line_base_sp {\n-                            err.span_suggestion_short(sp,\n-                                                      \"did you mean to use `;` here instead?\",\n-                                                      \";\".to_string());\n+                            err.span_suggestion_short_with_applicability(\n+                                sp,\n+                                \"did you mean to use `;` here instead?\",\n+                                \";\".to_string(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                         }\n                         break;\n                     } else if snippet.trim().len() != 0  {\n@@ -4818,7 +4821,12 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n             *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n         }\n \n-        err.span_suggestions(span, &msg, path_strings);\n+        err.span_suggestions_with_applicability(\n+            span,\n+            &msg,\n+            path_strings,\n+            Applicability::Unspecified,\n+        );\n     } else {\n         let mut msg = msg;\n         msg.push(':');"}, {"sha": "85641854e6e2d1d7275f9f12aa110c9b9791692c", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -40,7 +40,7 @@\n \n use super::FnCtxt;\n \n-use errors::DiagnosticBuilder;\n+use errors::{DiagnosticBuilder,Applicability};\n use hir::def_id::DefId;\n use lint;\n use rustc::hir;\n@@ -299,9 +299,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                 err.note(\"The type information given here is insufficient to check whether \\\n                           the pointer cast is valid\");\n                 if unknown_cast_to {\n-                    err.span_suggestion_short(self.cast_span,\n-                                              \"consider giving more type information\",\n-                                              String::new());\n+                    err.span_suggestion_short_with_applicability(\n+                        self.cast_span,\n+                        \"consider giving more type information\",\n+                        String::new(),\n+                        Applicability::Unspecified,\n+                    );\n                 }\n                 err.emit();\n             }\n@@ -327,9 +330,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                 if self.cast_ty.is_trait() {\n                     match fcx.tcx.sess.source_map().span_to_snippet(self.cast_span) {\n                         Ok(s) => {\n-                            err.span_suggestion(self.cast_span,\n-                                                \"try casting to a reference instead\",\n-                                                format!(\"&{}{}\", mtstr, s));\n+                            err.span_suggestion_with_applicability(\n+                                self.cast_span,\n+                                \"try casting to a reference instead\",\n+                                format!(\"&{}{}\", mtstr, s),\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n                         Err(_) => {\n                             span_help!(err, self.cast_span, \"did you mean `&{}{}`?\", mtstr, tstr)\n@@ -346,9 +352,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             ty::Adt(def, ..) if def.is_box() => {\n                 match fcx.tcx.sess.source_map().span_to_snippet(self.cast_span) {\n                     Ok(s) => {\n-                        err.span_suggestion(self.cast_span,\n-                                            \"try casting to a `Box` instead\",\n-                                            format!(\"Box<{}>\", s));\n+                        err.span_suggestion_with_applicability(\n+                            self.cast_span,\n+                            \"try casting to a `Box` instead\",\n+                            format!(\"Box<{}>\", s),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                     Err(_) => span_help!(err, self.cast_span, \"did you mean `Box<{}>`?\", tstr),\n                 }"}, {"sha": "a192068d28f202c5fa4f321d83f0e455cfdc9836", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -16,6 +16,7 @@ use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::util::common::ErrorReported;\n+use errors::Applicability;\n \n use syntax_pos::Span;\n \n@@ -321,10 +322,11 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 if let Some(trait_err_span) = trait_err_span {\n                     if let Ok(trait_err_str) = tcx.sess.source_map().\n                                                span_to_snippet(trait_err_span) {\n-                        diag.span_suggestion(\n+                        diag.span_suggestion_with_applicability(\n                             impl_err_span,\n                             \"consider change the type to match the mutability in trait\",\n                             format!(\"{}\", trait_err_str),\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n                 }\n@@ -799,7 +801,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             .span_to_snippet(trait_m.generics.span)\n                             .ok()?;\n \n-                        err.multipart_suggestion(\n+                        err.multipart_suggestion_with_applicability(\n                             \"try changing the `impl Trait` argument to a generic parameter\",\n                             vec![\n                                 // replace `impl Trait` with `T`\n@@ -809,6 +811,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 // of the generics, but it works for the common case\n                                 (generics_span, new_generics),\n                             ],\n+                            Applicability::MaybeIncorrect,\n                         );\n                         Some(())\n                     })();\n@@ -870,14 +873,15 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             .span_to_snippet(bounds)\n                             .ok()?;\n \n-                        err.multipart_suggestion(\n+                        err.multipart_suggestion_with_applicability(\n                             \"try removing the generic parameter and using `impl Trait` instead\",\n                             vec![\n                                 // delete generic parameters\n                                 (impl_m.generics.span, String::new()),\n                                 // replace param usage with `impl Trait`\n                                 (span, format!(\"impl {}\", bounds)),\n                             ],\n+                            Applicability::MaybeIncorrect,\n                         );\n                         Some(())\n                     })();"}, {"sha": "ee19574dc4e95b2a9308291b9b625dd37a7c491b", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -132,9 +132,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n                 let suggestions = compatible_variants.iter()\n                     .map(|v| format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n-                err.span_suggestions(expr.span,\n-                                     \"try using a variant of the expected type\",\n-                                     suggestions);\n+                err.span_suggestions_with_applicability(\n+                     expr.span,\n+                     \"try using a variant of the expected type\",\n+                     suggestions,\n+                     Applicability::MaybeIncorrect,\n+                );\n             }\n         }\n "}, {"sha": "499daccf5e80f101e20e294c60979ed028502219", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -1064,7 +1064,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             \"a method with this name may be added to the standard library in the future\",\n         );\n \n-        // FIXME: This should be a `span_suggestion` instead of `help`. However `self.span` only\n+        // FIXME: This should be a `span_suggestion_with_applicability` instead of `help`\n+        // However `self.span` only\n         // highlights the method name, so we can't use it. Also consider reusing the code from\n         // `report_method_error()`.\n         diag.help(&format!("}, {"sha": "fe5128a695845fb65555dc0260858de620667729", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -251,13 +251,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 let snippet = tcx.sess.source_map().span_to_snippet(lit.span)\n                                     .unwrap_or(\"<numeric literal>\".to_string());\n \n-                                err.span_suggestion(lit.span,\n+                                err.span_suggestion_with_applicability(\n+                                                    lit.span,\n                                                     &format!(\"you must specify a concrete type for \\\n                                                               this numeric value, like `{}`\",\n                                                              concrete_type),\n                                                     format!(\"{}_{}\",\n                                                             snippet,\n-                                                            concrete_type));\n+                                                            concrete_type),\n+                                                    Applicability::MaybeIncorrect,\n+                                );\n                             }\n                             hir::ExprKind::Path(ref qpath) => {  // local binding\n                                 if let &hir::QPath::Resolved(_, ref path) = &qpath {\n@@ -281,13 +284,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                 ty,\n                                                 ..\n                                             })) => {\n-                                                err.span_suggestion(\n+                                                err.span_suggestion_with_applicability(\n                                                     // account for `let x: _ = 42;`\n                                                     //                  ^^^^\n                                                     span.to(ty.as_ref().map(|ty| ty.span)\n                                                         .unwrap_or(span)),\n                                                     &msg,\n                                                     format!(\"{}: {}\", snippet, concrete_type),\n+                                                    Applicability::MaybeIncorrect,\n                                                 );\n                                             }\n                                             _ => {\n@@ -516,7 +520,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 format!(\"use {};\\n{}\", self.tcx.item_path_str(*did), additional_newline)\n             }).collect();\n \n-            err.span_suggestions(span, &msg, path_strings);\n+            err.span_suggestions_with_applicability(\n+                                                    span,\n+                                                    &msg,\n+                                                    path_strings,\n+                                                    Applicability::MaybeIncorrect,\n+            );\n         } else {\n             let limit = if candidates.len() == 5 { 5 } else { 4 };\n             for (i, trait_did) in candidates.iter().take(limit).enumerate() {"}, {"sha": "80df7faf39d22cb588db659d4b41d88821b913bb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -3351,7 +3351,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let base = self.tcx.hir.node_to_pretty_string(base.id);\n                         let msg = format!(\"`{}` is a native pointer; try dereferencing it\", base);\n                         let suggestion = format!(\"(*{}).{}\", base, field);\n-                        err.span_suggestion(field.span, &msg, suggestion);\n+                        err.span_suggestion_with_applicability(\n+                            field.span,\n+                            &msg,\n+                            suggestion,\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n                     _ => {}\n                 }\n@@ -4719,7 +4724,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         found: Ty<'tcx>,\n     ) {\n         if let Some((sp, msg, suggestion)) = self.check_ref(expr, found, expected) {\n-            err.span_suggestion(sp, msg, suggestion);\n+            err.span_suggestion_with_applicability(\n+                sp,\n+                msg,\n+                suggestion,\n+                Applicability::MachineApplicable,\n+            );\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n@@ -4749,7 +4759,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }) .collect::<Vec<_>>();\n                 if !suggestions.is_empty() {\n-                    err.span_suggestions(expr.span, \"try using a conversion method\", suggestions);\n+                    err.span_suggestions_with_applicability(\n+                        expr.span,\n+                        \"try using a conversion method\",\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n             }\n         }"}, {"sha": "5969f288d732070ade1260148782dce99c3897fb", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::TyKind::{Ref, Adt, Str, Uint, Never, Tuple, Char, Array};\n use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::infer::type_variable::TypeVariableOrigin;\n-use errors;\n+use errors::{self,Applicability};\n use syntax_pos::Span;\n use syntax::ast::Ident;\n use rustc::hir;\n@@ -444,9 +444,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     err.span_label(expr.span,\n                                    \"`+` can't be used to concatenate two `&str` strings\");\n                     match source_map.span_to_snippet(lhs_expr.span) {\n-                        Ok(lstring) => err.span_suggestion(lhs_expr.span,\n-                                                           msg,\n-                                                           format!(\"{}.to_owned()\", lstring)),\n+                        Ok(lstring) => err.span_suggestion_with_applicability(\n+                            lhs_expr.span,\n+                            msg,\n+                            format!(\"{}.to_owned()\", lstring),\n+                            Applicability::MachineApplicable,\n+                        ),\n                         _ => err.help(msg),\n                     };\n                 }\n@@ -462,10 +465,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     is_assign,\n                 ) {\n                     (Ok(l), Ok(r), false) => {\n-                        err.multipart_suggestion(msg, vec![\n-                            (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n-                            (rhs_expr.span, format!(\"&{}\", r)),\n-                        ]);\n+                        err.multipart_suggestion_with_applicability(\n+                            msg,\n+                            vec![\n+                                (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n+                                (rhs_expr.span, format!(\"&{}\", r)),\n+                            ],\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                     _ => {\n                         err.help(msg);"}, {"sha": "5d978b6b9e6623789db80d537d430b5ecda880fd", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -16,6 +16,7 @@ use source_map::Spanned;\n use edition::Edition;\n use parse::{token, ParseSess};\n use OneVector;\n+use errors::Applicability;\n \n use ptr::P;\n \n@@ -123,7 +124,12 @@ impl<'a> StripUnconfigured<'a> {\n             let error = |span, msg, suggestion: &str| {\n                 let mut err = self.sess.span_diagnostic.struct_span_err(span, msg);\n                 if !suggestion.is_empty() {\n-                    err.span_suggestion(span, \"expected syntax is\", suggestion.into());\n+                    err.span_suggestion_with_applicability(\n+                        span,\n+                        \"expected syntax is\",\n+                        suggestion.into(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n                 err.emit();\n                 true"}, {"sha": "214bc9cffc4836ece1530718ef2c5730aa9a659e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -32,6 +32,7 @@ use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n \n use rustc_data_structures::sync::Lrc;\n+use errors::Applicability;\n \n pub struct ParserAnyMacro<'a> {\n     parser: Parser<'a>,\n@@ -187,10 +188,11 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                     if comma_span == DUMMY_SP {\n                         err.note(\"you might be missing a comma\");\n                     } else {\n-                        err.span_suggestion_short(\n+                        err.span_suggestion_short_with_applicability(\n                             comma_span,\n                             \"missing comma here\",\n                             \", \".to_string(),\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n                 }"}, {"sha": "6ec1ad969ee708de179210966587bbf46c6bc006", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -3882,7 +3882,12 @@ impl<'a> Parser<'a> {\n                 if self.token == token::CloseDelim(token::Brace) {\n                     // If the struct looks otherwise well formed, recover and continue.\n                     if let Some(sp) = comma_sp {\n-                        err.span_suggestion_short(sp, \"remove this comma\", String::new());\n+                        err.span_suggestion_short_with_applicability(\n+                            sp,\n+                            \"remove this comma\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                     err.emit();\n                     break;"}, {"sha": "31e608de1f840d282eb777af314db5b3acfe097f", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d1e4d3de364c895963167b70934599574d9a7/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=992d1e4d3de364c895963167b70934599574d9a7", "patch": "@@ -996,9 +996,10 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                         ));\n                     }\n                     if suggestions.len() > 0 {\n-                        diag.multipart_suggestion(\n+                        diag.multipart_suggestion_with_applicability(\n                             \"format specifiers use curly braces\",\n                             suggestions,\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n                 }};"}]}