{"sha": "ac061dc5c8497c03e14c82b7fe349ca863924fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMDYxZGM1Yzg0OTdjMDNlMTRjODJiN2ZlMzQ5Y2E4NjM5MjRmYWU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-16T02:39:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-16T02:39:21Z"}, "message": "Fix some out-of-date names of things in comments.", "tree": {"sha": "fbb5e9b41f8bf00800b4a2ab01fc6f93a109080d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb5e9b41f8bf00800b4a2ab01fc6f93a109080d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac061dc5c8497c03e14c82b7fe349ca863924fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac061dc5c8497c03e14c82b7fe349ca863924fae", "html_url": "https://github.com/rust-lang/rust/commit/ac061dc5c8497c03e14c82b7fe349ca863924fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac061dc5c8497c03e14c82b7fe349ca863924fae/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fda9578e08680b00db87c031940c907e54d1cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fda9578e08680b00db87c031940c907e54d1cc3", "html_url": "https://github.com/rust-lang/rust/commit/3fda9578e08680b00db87c031940c907e54d1cc3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3bf65b5739afbb22dbea5de73021b260aa0cf311", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac061dc5c8497c03e14c82b7fe349ca863924fae/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac061dc5c8497c03e14c82b7fe349ca863924fae/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=ac061dc5c8497c03e14c82b7fe349ca863924fae", "patch": "@@ -9,7 +9,7 @@\n //! `ObligationForest` supports two main public operations (there are a\n //! few others not discussed here):\n //!\n-//! 1. Add a new root obligations (`push_tree`).\n+//! 1. Add a new root obligations (`register_obligation`).\n //! 2. Process the pending obligations (`process_obligations`).\n //!\n //! When a new obligation `N` is added, it becomes the root of an\n@@ -20,21 +20,21 @@\n //! with every pending obligation (so that will include `N`, the first\n //! time). The callback also receives a (mutable) reference to the\n //! per-tree state `T`. The callback should process the obligation `O`\n-//! that it is given and return one of three results:\n+//! that it is given and return a `ProcessResult`:\n //!\n-//! - `Ok(None)` -> ambiguous result. Obligation was neither a success\n+//! - `Unchanged` -> ambiguous result. Obligation was neither a success\n //!   nor a failure. It is assumed that further attempts to process the\n //!   obligation will yield the same result unless something in the\n //!   surrounding environment changes.\n-//! - `Ok(Some(C))` - the obligation was *shallowly successful*. The\n+//! - `Changed(C)` - the obligation was *shallowly successful*. The\n //!   vector `C` is a list of subobligations. The meaning of this is that\n //!   `O` was successful on the assumption that all the obligations in `C`\n //!   are also successful. Therefore, `O` is only considered a \"true\"\n //!   success if `C` is empty. Otherwise, `O` is put into a suspended\n //!   state and the obligations in `C` become the new pending\n //!   obligations. They will be processed the next time you call\n //!   `process_obligations`.\n-//! - `Err(E)` -> obligation failed with error `E`. We will collect this\n+//! - `Error(E)` -> obligation failed with error `E`. We will collect this\n //!   error and return it from `process_obligations`, along with the\n //!   \"backtrace\" of obligations (that is, the list of obligations up to\n //!   and including the root of the failed obligation). No further\n@@ -47,14 +47,14 @@\n //! - `completed`: a list of obligations where processing was fully\n //!   completed without error (meaning that all transitive subobligations\n //!   have also been completed). So, for example, if the callback from\n-//!   `process_obligations` returns `Ok(Some(C))` for some obligation `O`,\n+//!   `process_obligations` returns `Changed(C)` for some obligation `O`,\n //!   then `O` will be considered completed right away if `C` is the\n //!   empty vector. Otherwise it will only be considered completed once\n //!   all the obligations in `C` have been found completed.\n //! - `errors`: a list of errors that occurred and associated backtraces\n //!   at the time of error, which can be used to give context to the user.\n //! - `stalled`: if true, then none of the existing obligations were\n-//!   *shallowly successful* (that is, no callback returned `Ok(Some(_))`).\n+//!   *shallowly successful* (that is, no callback returned `Changed(_)`).\n //!   This implies that all obligations were either errors or returned an\n //!   ambiguous result, which means that any further calls to\n //!   `process_obligations` would simply yield back further ambiguous"}]}