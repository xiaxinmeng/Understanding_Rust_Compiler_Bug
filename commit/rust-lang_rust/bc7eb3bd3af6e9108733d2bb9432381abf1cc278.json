{"sha": "bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjN2ViM2JkM2FmNmU5MTA4NzMzZDJiYjk0MzIzODFhYmYxY2MyNzg=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-01T10:16:26Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-06T20:08:05Z"}, "message": "Changing error message for interior mutability, adding ui test", "tree": {"sha": "ccd7241b904c6781b80580b22596375982aea24e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccd7241b904c6781b80580b22596375982aea24e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "html_url": "https://github.com/rust-lang/rust/commit/bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a032cb89c5d9b436c1c57f8a6d5961d898f5c2b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a032cb89c5d9b436c1c57f8a6d5961d898f5c2b6", "html_url": "https://github.com/rust-lang/rust/commit/a032cb89c5d9b436c1c57f8a6d5961d898f5c2b6"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "0edd5d44b606624180478e2a9679c88a31419377", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "patch": "@@ -309,8 +309,8 @@ use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n \n const A: AtomicUsize = ATOMIC_USIZE_INIT;\n static B: &'static AtomicUsize = &A;\n-// error: cannot borrow a constant which contains interior mutability, create a\n-//        static instead\n+// error: cannot borrow a constant which may contain interior mutability,  \n+//        create a static instead\n ```\n \n A `const` represents a constant value that should never change. If one takes\n@@ -338,8 +338,8 @@ use std::cell::Cell;\n \n const A: Cell<usize> = Cell::new(1);\n const B: &'static Cell<usize> = &A;\n-// error: cannot borrow a constant which contains interior mutability, create\n-//        a static instead\n+// error: cannot borrow a constant which may contain interior mutability, \n+//        create a static instead\n \n // or:\n struct C { a: Cell<usize> }"}, {"sha": "793cffdec89e36699d17852282337f40905b45b0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "patch": "@@ -663,7 +663,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         self.add(Qualif::NOT_CONST);\n                         if self.mode != Mode::Fn {\n                             span_err!(self.tcx.sess, self.span, E0492,\n-                                      \"cannot borrow a constant which contains \\\n+                                      \"cannot borrow a constant which may contain \\\n                                        interior mutability, create a static instead\");\n                         }\n                     }"}, {"sha": "58356bc43eebc8ab8aa93c37dbd613d8b192fa39", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "patch": "@@ -112,7 +112,7 @@ pub trait UnwindSafe {}\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n /// `UnwindSafe` trait, for more information see that documentation.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[rustc_on_unimplemented = \"the type {Self} contains interior mutability \\\n+#[rustc_on_unimplemented = \"the type {Self} may contain interior mutability \\\n                             and a reference may not be safely transferrable \\\n                             across a catch_unwind boundary\"]\n pub trait RefUnwindSafe {}"}, {"sha": "327b6946822987d1c0ed16ed71164a583e4b04eb", "filename": "src/test/compile-fail/issue-17718-const-borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs?ref=bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "patch": "@@ -14,13 +14,13 @@ use std::cell::UnsafeCell;\n \n const A: UnsafeCell<usize> = UnsafeCell::new(1);\n const B: &'static UnsafeCell<usize> = &A;\n-//~^ ERROR: cannot borrow a constant which contains interior mutability\n+//~^ ERROR: cannot borrow a constant which may contain interior mutability\n \n struct C { a: UnsafeCell<usize> }\n const D: C = C { a: UnsafeCell::new(1) };\n const E: &'static UnsafeCell<usize> = &D.a;\n-//~^ ERROR: cannot borrow a constant which contains interior mutability\n+//~^ ERROR: cannot borrow a constant which may contain interior mutability\n const F: &'static C = &D;\n-//~^ ERROR: cannot borrow a constant which contains interior mutability\n+//~^ ERROR: cannot borrow a constant which may contain interior mutability\n \n fn main() {}"}, {"sha": "60d85d1b3b787c3144beba792858bc10c1f8f2b2", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::Cell;\n+use std::panic::catch_unwind;\n+fn main() {\n+    let mut x = Cell::new(22);\n+    catch_unwind(|| { x.set(23); });\n+}"}, {"sha": "a9535f1c8303884ff6e63919c0e16a2c7543b0eb", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc7eb3bd3af6e9108733d2bb9432381abf1cc278/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=bc7eb3bd3af6e9108733d2bb9432381abf1cc278", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `std::cell::UnsafeCell<i32>: std::panic::RefUnwindSafe` is not satisfied in `std::cell::Cell<i32>`\n+  --> $DIR/interior-mutability.rs:15:5\n+   |\n+15 |     catch_unwind(|| { x.set(23); });\n+   |     ^^^^^^^^^^^^ the type std::cell::UnsafeCell<i32> may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |\n+   = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n+   = note: required because it appears within the type `std::cell::Cell<i32>`\n+   = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<i32>`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:15:18: 15:35 x:&std::cell::Cell<i32>]`\n+   = note: required by `std::panic::catch_unwind`\n+\n+error: aborting due to previous error(s)\n+"}]}