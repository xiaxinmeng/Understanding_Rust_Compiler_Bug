{"sha": "1c0287830e0fb3c4007afea2819ba03766da6e9c", "node_id": "C_kwDOAAsO6NoAKDFjMDI4NzgzMGUwZmIzYzQwMDdhZmVhMjgxOWJhMDM3NjZkYTZlOWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-30T10:45:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-30T10:45:22Z"}, "message": "Auto merge of #91388 - JohnTitor:rollup-640o1e5, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #91243 (Don't treat unnormalized function arguments as well-formed)\n - #91250 (Refactor EmitterWriter::emit_suggestion_default )\n - #91317 (tests: Ignore `test/debuginfo/rc_arc.rs` on windows-gnu)\n - #91323 (CTFE: support assert_zero_valid and assert_uninit_valid)\n - #91358 (Fix small typo)\n - #91360 (:arrow_up: rust-analyzer)\n - #91368 (Don't re-export `MirPass`)\n - #91383 (Add `drop_while` as doc alias to `Iterator::skip_while`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a28f8ff7c5ae1797a1c5fc95db85b31018e47c8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a28f8ff7c5ae1797a1c5fc95db85b31018e47c8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c0287830e0fb3c4007afea2819ba03766da6e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0287830e0fb3c4007afea2819ba03766da6e9c", "html_url": "https://github.com/rust-lang/rust/commit/1c0287830e0fb3c4007afea2819ba03766da6e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c0287830e0fb3c4007afea2819ba03766da6e9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90912e68ab0b9e7ba4f91ef9654e8b41c203a95d", "url": "https://api.github.com/repos/rust-lang/rust/commits/90912e68ab0b9e7ba4f91ef9654e8b41c203a95d", "html_url": "https://github.com/rust-lang/rust/commit/90912e68ab0b9e7ba4f91ef9654e8b41c203a95d"}, {"sha": "28176a4a33dfa04b63d5494a0726be8befc4dcb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/28176a4a33dfa04b63d5494a0726be8befc4dcb9", "html_url": "https://github.com/rust-lang/rust/commit/28176a4a33dfa04b63d5494a0726be8befc4dcb9"}], "stats": {"total": 272, "additions": 172, "deletions": 100}, "files": [{"sha": "8d97c3cbb0b0ebd406fa9301d91827a36c08617d", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -256,7 +256,6 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                 debug!(\"build: input_or_output={:?}\", ty);\n                 // We add implied bounds from both the unnormalized and normalized ty\n                 // See issue #87748\n-                let constraints_implied_1 = self.add_implied_bounds(ty);\n                 let TypeOpOutput { output: norm_ty, constraints: constraints1, .. } = self\n                     .param_env\n                     .and(type_op::normalize::Normalize::new(ty))\n@@ -284,10 +283,9 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                 // }\n                 // ```\n                 // Both &Self::Bar and &() are WF\n-                let constraints_implied_2 =\n-                    if ty != norm_ty { self.add_implied_bounds(norm_ty) } else { None };\n+                let constraints_implied = self.add_implied_bounds(norm_ty);\n                 normalized_inputs_and_output.push(norm_ty);\n-                constraints1.into_iter().chain(constraints_implied_1).chain(constraints_implied_2)\n+                constraints1.into_iter().chain(constraints_implied)\n             })\n             .collect();\n "}, {"sha": "025d2998b00525e4ee1a1e99ea8143ee365393d7", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -394,10 +394,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::transmute => {\n                 self.copy_op_transmute(&args[0], dest)?;\n             }\n-            sym::assert_inhabited => {\n+            sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n                 let ty = instance.substs.type_at(0);\n                 let layout = self.layout_of(ty)?;\n \n+                // For *all* intrinsics we first check `is_uninhabited` to give a more specific\n+                // error message.\n                 if layout.abi.is_uninhabited() {\n                     // The run-time intrinsic panics just to get a good backtrace; here we abort\n                     // since there is no problem showing a backtrace even for aborts.\n@@ -409,6 +411,28 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         ),\n                     )?;\n                 }\n+                if intrinsic_name == sym::assert_zero_valid\n+                    && !layout.might_permit_raw_init(self, /*zero:*/ true)\n+                {\n+                    M::abort(\n+                        self,\n+                        format!(\n+                            \"aborted execution: attempted to zero-initialize type `{}`, which is invalid\",\n+                            ty\n+                        ),\n+                    )?;\n+                }\n+                if intrinsic_name == sym::assert_uninit_valid\n+                    && !layout.might_permit_raw_init(self, /*zero:*/ false)\n+                {\n+                    M::abort(\n+                        self,\n+                        format!(\n+                            \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n+                            ty\n+                        ),\n+                    )?;\n+                }\n             }\n             sym::simd_insert => {\n                 let index = u64::from(self.read_scalar(&args[1])?.to_u32()?);"}, {"sha": "a2928bdf51b83195e9f553e6ce249cdf33b42965", "filename": "compiler/rustc_const_eval/src/transform/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fmod.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -1,5 +1,3 @@\n pub mod check_consts;\n pub mod promote_consts;\n pub mod validate;\n-\n-pub use rustc_middle::mir::MirPass;"}, {"sha": "464155db89f488f6d2c8492243966998c1ed8e6f", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -27,7 +27,6 @@ use std::cell::Cell;\n use std::{cmp, iter, mem};\n \n use crate::transform::check_consts::{qualifs, ConstCx};\n-use crate::transform::MirPass;\n \n /// A `MirPass` for promotion.\n ///"}, {"sha": "c86c8f81dbd96e206946fc384053d342d3bef6e6", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -1,14 +1,13 @@\n //! Validates the MIR to ensure that invariants are upheld.\n \n-use super::MirPass;\n use rustc_index::bit_set::BitSet;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n-    AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, PlaceElem,\n-    PlaceRef, ProjectionElem, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n+    AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPass, MirPhase, Operand,\n+    PlaceElem, PlaceRef, ProjectionElem, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n     TerminatorKind, START_BLOCK,\n };\n use rustc_middle::ty::fold::BottomUpFolder;"}, {"sha": "3104bc185e7568966c72de3c40e8a3346fc3ac60", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -214,7 +214,7 @@ pub trait Emitter {\n \n     /// Formats the substitutions of the primary_span\n     ///\n-    /// The are a lot of conditions to this method, but in short:\n+    /// There are a lot of conditions to this method, but in short:\n     ///\n     /// * If the current `Diagnostic` has only one visible `CodeSuggestion`,\n     ///   we format the `help` suggestion depending on the content of the\n@@ -736,7 +736,9 @@ impl EmitterWriter {\n \n         let line_offset = buffer.num_lines();\n \n-        let left = margin.left(source_string.len()); // Left trim\n+        // Left trim\n+        let left = margin.left(source_string.len());\n+\n         // Account for unicode characters of width !=0 that were removed.\n         let left = source_string\n             .chars()\n@@ -1623,18 +1625,27 @@ impl EmitterWriter {\n             suggestions.iter().take(MAX_SUGGESTIONS)\n         {\n             notice_capitalization |= only_capitalization;\n-            // Only show underline if the suggestion spans a single line and doesn't cover the\n-            // entirety of the code output. If you have multiple replacements in the same line\n-            // of code, show the underline.\n-            let show_underline = !(parts.len() == 1 && parts[0].snippet.trim() == complete.trim())\n-                && complete.lines().count() == 1;\n \n             let has_deletion = parts.iter().any(|p| p.is_deletion());\n             let is_multiline = complete.lines().count() > 1;\n \n-            let show_diff = has_deletion && !is_multiline;\n+            enum DisplaySuggestion {\n+                Underline,\n+                Diff,\n+                None,\n+            }\n+\n+            let show_code_change = if has_deletion && !is_multiline {\n+                DisplaySuggestion::Diff\n+            } else if (parts.len() != 1 || parts[0].snippet.trim() != complete.trim())\n+                && !is_multiline\n+            {\n+                DisplaySuggestion::Underline\n+            } else {\n+                DisplaySuggestion::None\n+            };\n \n-            if show_diff {\n+            if let DisplaySuggestion::Diff = show_code_change {\n                 row_num += 1;\n             }\n \n@@ -1657,7 +1668,7 @@ impl EmitterWriter {\n                     &self.maybe_anonymized(line_start + line_pos),\n                     Style::LineNumber,\n                 );\n-                if show_diff {\n+                if let DisplaySuggestion::Diff = show_code_change {\n                     // Add the line number for both addition and removal to drive the point home.\n                     //\n                     // N - fn foo<A: T>(bar: A) {\n@@ -1727,7 +1738,7 @@ impl EmitterWriter {\n             let mut offsets: Vec<(usize, isize)> = Vec::new();\n             // Only show an underline in the suggestions if the suggestion is not the\n             // entirety of the code being shown and the displayed code is not multiline.\n-            if show_underline {\n+            if let DisplaySuggestion::Diff | DisplaySuggestion::Underline = show_code_change {\n                 draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n                 for part in parts {\n                     let span_start_pos = sm.lookup_char_pos(part.span.lo()).col_display;\n@@ -1755,7 +1766,7 @@ impl EmitterWriter {\n                     assert!(underline_start >= 0 && underline_end >= 0);\n                     let padding: usize = max_line_num_len + 3;\n                     for p in underline_start..underline_end {\n-                        if !show_diff {\n+                        if let DisplaySuggestion::Underline = show_code_change {\n                             // If this is a replacement, underline with `^`, if this is an addition\n                             // underline with `+`.\n                             buffer.putc(\n@@ -1766,7 +1777,7 @@ impl EmitterWriter {\n                             );\n                         }\n                     }\n-                    if show_diff {\n+                    if let DisplaySuggestion::Diff = show_code_change {\n                         // Colorize removal with red in diff format.\n                         buffer.set_style_range(\n                             row_num - 2,\n@@ -1797,7 +1808,7 @@ impl EmitterWriter {\n             // if we elided some lines, add an ellipsis\n             if lines.next().is_some() {\n                 buffer.puts(row_num, max_line_num_len - 1, \"...\", Style::LineNumber);\n-            } else if !show_underline {\n+            } else if let DisplaySuggestion::None = show_code_change {\n                 draw_col_separator_no_space(&mut buffer, row_num, max_line_num_len + 1);\n                 row_num += 1;\n             }\n@@ -2083,7 +2094,7 @@ const OUTPUT_REPLACEMENTS: &[(char, &str)] = &[\n     ('\\t', \"    \"),   // We do our own tab replacement\n     ('\\u{200D}', \"\"), // Replace ZWJ with nothing for consistent terminal output of grapheme clusters.\n     ('\\u{202A}', \"\"), // The following unicode text flow control characters are inconsistently\n-    ('\\u{202B}', \"\"), // supported accross CLIs and can cause confusion due to the bytes on disk\n+    ('\\u{202B}', \"\"), // supported across CLIs and can cause confusion due to the bytes on disk\n     ('\\u{202D}', \"\"), // not corresponding to the visible source code, so we replace them always.\n     ('\\u{202E}', \"\"),\n     ('\\u{2066}', \"\"),"}, {"sha": "b0bea7312a7ebac251e6bdbdca8bbbb4c14edf9d", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -27,7 +27,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n-use rustc_middle::mir::{dump_mir, traversal, Body, ConstQualifs, MirPhase, Promoted};\n+use rustc_middle::mir::{dump_mir, traversal, Body, ConstQualifs, MirPass, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::{Span, Symbol};\n@@ -78,7 +78,6 @@ mod unreachable_prop;\n use rustc_const_eval::transform::check_consts;\n use rustc_const_eval::transform::promote_consts;\n use rustc_const_eval::transform::validate;\n-pub use rustc_const_eval::transform::MirPass;\n use rustc_mir_dataflow::rustc_peek;\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "44fc81a889d1732b404cee3674066f1e1f2744e4", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -264,14 +264,9 @@ fn compare_predicate_entailment<'tcx>(\n         // First liberate late bound regions and subst placeholders\n         let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, tcx.fn_sig(trait_m.def_id));\n         let trait_sig = trait_sig.subst(tcx, trait_to_placeholder_substs);\n-        // Next, add all inputs and output as well-formed tys. Importantly,\n-        // we have to do this before normalization, since the normalized ty may\n-        // not contain the input parameters. See issue #87748.\n-        wf_tys.extend(trait_sig.inputs_and_output.iter());\n         let trait_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, trait_sig);\n-        // Also add the resulting inputs and output as well-formed.\n-        // This probably isn't strictly necessary.\n+        // Add the resulting inputs and output as well-formed.\n         wf_tys.extend(trait_sig.inputs_and_output.iter());\n         let trait_fty = tcx.mk_fn_ptr(ty::Binder::dummy(trait_sig));\n "}, {"sha": "7bfd3f0ee804733ba763844cd99d693e55478724", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -391,7 +391,6 @@ fn typeck_with_fallback<'tcx>(\n             let mut wf_tys = FxHashSet::default();\n             // Compute the fty from point of view of inside the fn.\n             let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), fn_sig);\n-            wf_tys.extend(fn_sig.inputs_and_output.iter());\n             let fn_sig = inh.normalize_associated_types_in(\n                 body.value.span,\n                 body_id.hir_id,"}, {"sha": "33a0c3275ca2a4d412a1daa19475f885c5287254", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -1334,11 +1334,6 @@ fn check_fn_or_method<'fcx, 'tcx>(\n ) {\n     let sig = fcx.tcx.liberate_late_bound_regions(def_id, sig);\n \n-    // Unnormalized types in signature are WF too\n-    implied_bounds.extend(sig.inputs());\n-    // FIXME(#27579) return types should not be implied bounds\n-    implied_bounds.insert(sig.output());\n-\n     // Normalize the input and output types one at a time, using a different\n     // `WellFormedLoc` for each. We cannot call `normalize_associated_types`\n     // on the entire `FnSig`, since this would use the same `WellFormedLoc`"}, {"sha": "edbc250eb0d0c2a243da0244046d1cfad5c82c48", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -860,12 +860,14 @@ extern \"rust-intrinsic\" {\n     /// zero-initialization: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n     pub fn assert_zero_valid<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n     /// bit patterns: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n     pub fn assert_uninit_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called."}, {"sha": "35ce9400f8f4d4ab1496ad87f9ca96c8cf54b8ad", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -1023,6 +1023,7 @@ pub trait Iterator {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[inline]\n+    #[doc(alias = \"drop_while\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P>\n     where"}, {"sha": "8470ace24b845beef405b8330b11968ca76e76aa", "filename": "src/test/debuginfo/rc_arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frc_arc.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -1,4 +1,4 @@\n-// pretty-printers are not loaded\n+// ignore-windows-gnu: pretty-printers are not loaded\n // compile-flags:-g\n \n // min-gdb-version: 8.1"}, {"sha": "31ff6aed03b2fd733b682adf59747d3fb12eb076", "filename": "src/test/ui/consts/assert-type-intrinsics.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -0,0 +1,22 @@\n+// error-pattern: any use of this value will cause an error\n+\n+#![feature(never_type)]\n+#![feature(const_maybe_uninit_assume_init, const_assert_type2)]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics;\n+\n+#[allow(invalid_value)]\n+fn main() {\n+    use std::mem::MaybeUninit;\n+\n+    const _BAD1: () = unsafe {\n+        MaybeUninit::<!>::uninit().assume_init();\n+    };\n+    const _BAD2: () = unsafe {\n+        intrinsics::assert_uninit_valid::<bool>();\n+    };\n+    const _BAD3: () = unsafe {\n+        intrinsics::assert_zero_valid::<&'static i32>();\n+    };\n+}"}, {"sha": "bb57ee82cc16f973dfb448490a2992d87cafbad5", "filename": "src/test/ui/consts/assert-type-intrinsics.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -0,0 +1,39 @@\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:14:9\n+   |\n+LL | /     const _BAD1: () = unsafe {\n+LL | |         MaybeUninit::<!>::uninit().assume_init();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n+LL | |     };\n+   | |______-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:17:9\n+   |\n+LL | /     const _BAD2: () = unsafe {\n+LL | |         intrinsics::assert_uninit_valid::<bool>();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n+LL | |     };\n+   | |______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:20:9\n+   |\n+LL | /     const _BAD3: () = unsafe {\n+LL | |         intrinsics::assert_zero_valid::<&'static i32>();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n+LL | |     };\n+   | |______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "77370e1ccc59e2e74d8d27ed7b6a59765264b4d1", "filename": "src/test/ui/consts/assume-type-intrinsics.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90912e68ab0b9e7ba4f91ef9654e8b41c203a95d/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90912e68ab0b9e7ba4f91ef9654e8b41c203a95d/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.rs?ref=90912e68ab0b9e7ba4f91ef9654e8b41c203a95d", "patch": "@@ -1,13 +0,0 @@\n-// error-pattern: any use of this value will cause an error\n-\n-#![feature(never_type)]\n-#![feature(const_maybe_uninit_assume_init)]\n-\n-#[allow(invalid_value)]\n-fn main() {\n-    use std::mem::MaybeUninit;\n-\n-    const _BAD: () = unsafe {\n-        MaybeUninit::<!>::uninit().assume_init();\n-    };\n-}"}, {"sha": "e660730396fa1c97e8e0ca197a9a04f13585ad34", "filename": "src/test/ui/consts/assume-type-intrinsics.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/90912e68ab0b9e7ba4f91ef9654e8b41c203a95d/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90912e68ab0b9e7ba4f91ef9654e8b41c203a95d/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr?ref=90912e68ab0b9e7ba4f91ef9654e8b41c203a95d", "patch": "@@ -1,15 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/assume-type-intrinsics.rs:11:9\n-   |\n-LL | /     const _BAD: () = unsafe {\n-LL | |         MaybeUninit::<!>::uninit().assume_init();\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n-LL | |     };\n-   | |______-\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to previous error\n-"}, {"sha": "e37ec7f26651c27fe2ce0948318dc52fa63a279b", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n+   |\n+LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     s\n+   |     ^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "2e5ac7d7398eb41e7b36194919ab1c151818ae1d", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -0,0 +1,22 @@\n+// check-fail\n+// See issue #91068. Types in the substs of an associated type can't be implied\n+// to be WF, since they don't actually have to be constructed.\n+\n+trait Trait {\n+    type Type;\n+}\n+\n+impl<T> Trait for T {\n+    type Type = ();\n+}\n+\n+fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n+    s //~ ERROR lifetime mismatch [E0623]\n+}\n+\n+fn main() {\n+    let x = String::from(\"Hello World!\");\n+    let y = f(&x, ());\n+    drop(x);\n+    println!(\"{}\", y);\n+}"}, {"sha": "93ab5dceee9477fd5671029b68ea3e58ccde423c", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c0287830e0fb3c4007afea2819ba03766da6e9c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -0,0 +1,13 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n+   |\n+LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n+   |                 -------      ----------\n+   |                 |\n+   |                 these two types are declared with different lifetimes...\n+LL |     s\n+   |     ^ ...but data from `s` flows here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "93c3b3937cb814f060d4cc0a4dc0698f47b8cf1e", "filename": "src/test/ui/generic-associated-types/issue-87748.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/90912e68ab0b9e7ba4f91ef9654e8b41c203a95d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90912e68ab0b9e7ba4f91ef9654e8b41c203a95d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs?ref=90912e68ab0b9e7ba4f91ef9654e8b41c203a95d", "patch": "@@ -1,30 +0,0 @@\n-// Checks that we properly add implied bounds from unnormalized projections in\n-// inputs when typechecking functions.\n-\n-// check-pass\n-\n-#![feature(generic_associated_types)]\n-\n-trait MyTrait {\n-    type Assoc<'a, 'b> where 'b: 'a;\n-    fn do_sth(arg: Self::Assoc<'_, '_>);\n-}\n-\n-struct A;\n-struct B;\n-struct C;\n-\n-impl MyTrait for A {\n-    type Assoc<'a, 'b> where 'b: 'a = u32;\n-    fn do_sth(_: u32) {}\n-}\n-impl MyTrait for B {\n-    type Assoc<'a, 'b> where 'b: 'a = u32;\n-    fn do_sth(_: Self::Assoc<'_, '_>) {}\n-}\n-impl MyTrait for C {\n-    type Assoc<'a, 'b> where 'b: 'a = u32;\n-    fn do_sth(_: Self::Assoc<'static, 'static>) {}\n-}\n-\n-fn main () {}"}, {"sha": "d9b2291f546abc77d24499339a72a89127464b95", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=1c0287830e0fb3c4007afea2819ba03766da6e9c", "patch": "@@ -1 +1 @@\n-Subproject commit 183ef048f61ae36aa389d1d0345cde940fe788e9\n+Subproject commit d9b2291f546abc77d24499339a72a89127464b95"}]}