{"sha": "af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMWI2NWNiMThkNWZhMTM1OGQxYWU3YThlZDNiMWY3YzYzNWI2YjU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-08-26T10:46:01Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-08-27T09:50:44Z"}, "message": "Path remapping: Make behavior of diagnostics output dependent on presence of --remap-path-prefix.", "tree": {"sha": "afc0d0959aae2f267142807624136555545f4fd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afc0d0959aae2f267142807624136555545f4fd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "html_url": "https://github.com/rust-lang/rust/commit/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd6306d26af1a163aaaa1456b4594244ddd182f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd6306d26af1a163aaaa1456b4594244ddd182f", "html_url": "https://github.com/rust-lang/rust/commit/dfd6306d26af1a163aaaa1456b4594244ddd182f"}], "stats": {"total": 106, "additions": 65, "deletions": 41}, "files": [{"sha": "14a593a71ce7893cc446eaafd573434a3cef877f", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> DebugContext<'tcx> {\n             rustc_interface::util::version_str().unwrap_or(\"unknown version\"),\n             cranelift_codegen::VERSION,\n         );\n-        let comp_dir = tcx.sess.opts.working_dir.to_string_lossy(false).into_owned();\n+        let comp_dir = tcx.sess.opts.working_dir.to_string_lossy(FileNameDisplayPreference::Remapped).into_owned();\n         let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();"}, {"sha": "6c7c8cbc311f9f3fabe798685ff895b9d614980b", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -74,7 +74,7 @@ mod vtable;\n mod prelude {\n     pub(crate) use std::convert::{TryFrom, TryInto};\n \n-    pub(crate) use rustc_span::Span;\n+    pub(crate) use rustc_span::{Span, FileNameDisplayPreference};\n \n     pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n     pub(crate) use rustc_middle::bug;"}, {"sha": "346c51c5426d84b589cce74e3482ecf2340e29d6", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -35,6 +35,7 @@ use rustc_middle::ty::{self, AdtKind, GeneratorSubsts, ParamEnv, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::{Interner, Symbol};\n+use rustc_span::FileNameDisplayPreference;\n use rustc_span::{self, SourceFile, SourceFileHash, Span};\n use rustc_target::abi::{Abi, Align, HasDataLayout, Integer, LayoutOf, TagEncoding};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n@@ -771,7 +772,13 @@ pub fn file_metadata(cx: &CodegenCx<'ll, '_>, source_file: &SourceFile) -> &'ll\n     let hash = Some(&source_file.src_hash);\n     let file_name = Some(source_file.name.prefer_remapped().to_string());\n     let directory = if source_file.is_real_file() && !source_file.is_imported() {\n-        Some(cx.sess().opts.working_dir.to_string_lossy(false).to_string())\n+        Some(\n+            cx.sess()\n+                .opts\n+                .working_dir\n+                .to_string_lossy(FileNameDisplayPreference::Remapped)\n+                .to_string(),\n+        )\n     } else {\n         // If the path comes from an upstream crate we assume it has been made\n         // independent of the compiler's working directory one way or another.\n@@ -999,7 +1006,7 @@ pub fn compile_unit_metadata(\n     let producer = format!(\"clang LLVM ({})\", rustc_producer);\n \n     let name_in_debuginfo = name_in_debuginfo.to_string_lossy();\n-    let work_dir = tcx.sess.opts.working_dir.to_string_lossy(false);\n+    let work_dir = tcx.sess.opts.working_dir.to_string_lossy(FileNameDisplayPreference::Remapped);\n     let flags = \"\\0\";\n     let output_filenames = tcx.output_filenames(());\n     let out_dir = &output_filenames.out_directory;"}, {"sha": "1eb497460e63c053ceec0ea015227513c0dfa79a", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -126,7 +126,7 @@ impl AnnotateSnippetEmitterWriter {\n             }\n             // owned: line source, line index, annotations\n             type Owned = (String, usize, Vec<crate::snippet::Annotation>);\n-            let filename = primary_lo.file.name.prefer_local();\n+            let filename = source_map.filename_for_diagnostics(&primary_lo.file.name);\n             let origin = filename.to_string_lossy();\n             let annotated_files: Vec<Owned> = annotated_files\n                 .into_iter()"}, {"sha": "29f352ae58559bf05f68b617c79d569bc735df47", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -1320,7 +1320,7 @@ impl EmitterWriter {\n                         buffer_msg_line_offset,\n                         &format!(\n                             \"{}:{}:{}\",\n-                            loc.file.name.prefer_local(),\n+                            sm.filename_for_diagnostics(&loc.file.name),\n                             sm.doctest_offset_line(&loc.file.name, loc.line),\n                             loc.col.0 + 1,\n                         ),\n@@ -1334,7 +1334,7 @@ impl EmitterWriter {\n                         0,\n                         &format!(\n                             \"{}:{}:{}: \",\n-                            loc.file.name.prefer_local(),\n+                            sm.filename_for_diagnostics(&loc.file.name),\n                             sm.doctest_offset_line(&loc.file.name, loc.line),\n                             loc.col.0 + 1,\n                         ),\n@@ -1362,12 +1362,12 @@ impl EmitterWriter {\n                     };\n                     format!(\n                         \"{}:{}{}\",\n-                        annotated_file.file.name.prefer_local(),\n+                        sm.filename_for_diagnostics(&annotated_file.file.name),\n                         sm.doctest_offset_line(&annotated_file.file.name, first_line.line_index),\n                         col\n                     )\n                 } else {\n-                    format!(\"{}\", annotated_file.file.name.prefer_local())\n+                    format!(\"{}\", sm.filename_for_diagnostics(&annotated_file.file.name))\n                 };\n                 buffer.append(buffer_msg_line_offset + 1, &loc, Style::LineAndColumn);\n                 for _ in 0..max_line_num_len {"}, {"sha": "dde978cd8c6ceab4b1b7c2927cf8c303d2a0ccdc", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -464,7 +464,7 @@ impl DiagnosticSpan {\n         });\n \n         DiagnosticSpan {\n-            file_name: start.file.name.prefer_local().to_string(),\n+            file_name: je.sm.filename_for_diagnostics(&start.file.name).to_string(),\n             byte_start: start.file.original_relative_byte_pos(span.lo()).0,\n             byte_end: start.file.original_relative_byte_pos(span.hi()).0,\n             line_start: start.line,"}, {"sha": "1fd48309af9768734469340ccb8ae38f91466dd1", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -1113,7 +1113,7 @@ impl<'a> ExtCtxt<'a> {\n                         span,\n                         &format!(\n                             \"cannot resolve relative path in non-file source `{}`\",\n-                            other.prefer_local()\n+                            self.source_map().filename_for_diagnostics(&other)\n                         ),\n                     ));\n                 }"}, {"sha": "6a7c924aaef098a77ea46cb23e11a681fc200d7a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -1626,14 +1626,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 (TypeError::Sorts(values), extra) => {\n                     let sort_string = |ty: Ty<'tcx>| match (extra, ty.kind()) {\n                         (true, ty::Opaque(def_id, _)) => {\n-                            let pos = self\n-                                .tcx\n-                                .sess\n-                                .source_map()\n-                                .lookup_char_pos(self.tcx.def_span(*def_id).lo());\n+                            let sm = self.tcx.sess.source_map();\n+                            let pos = sm.lookup_char_pos(self.tcx.def_span(*def_id).lo());\n                             format!(\n                                 \" (opaque type at <{}:{}:{}>)\",\n-                                pos.file.name.prefer_local(),\n+                                sm.filename_for_diagnostics(&pos.file.name),\n                                 pos.line,\n                                 pos.col.to_usize() + 1,\n                             )"}, {"sha": "f62efea9612eee1b4abc48f950c6355f1333a330", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -272,11 +272,12 @@ impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n                 write!(f, \"inside `{}`\", self.instance)?;\n             }\n             if !self.span.is_dummy() {\n-                let lo = tcx.sess.source_map().lookup_char_pos(self.span.lo());\n+                let sm = tcx.sess.source_map();\n+                let lo = sm.lookup_char_pos(self.span.lo());\n                 write!(\n                     f,\n                     \" at {}:{}:{}\",\n-                    lo.file.name.prefer_local(),\n+                    sm.filename_for_diagnostics(&lo.file.name),\n                     lo.line,\n                     lo.col.to_usize() + 1\n                 )?;"}, {"sha": "bf76dedd252ca59cd021178e92bf1543c8bc0b15", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -190,7 +190,7 @@ pub fn maybe_file_to_stream(\n     let src = source_file.src.as_ref().unwrap_or_else(|| {\n         sess.span_diagnostic.bug(&format!(\n             \"cannot lex `source_file` without source: {}\",\n-            source_file.name.prefer_local()\n+            sess.source_map().filename_for_diagnostics(&source_file.name)\n         ));\n     });\n "}, {"sha": "73a626e653804d0534b3ef4d7e303d08ad96de80", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -260,11 +260,12 @@ impl RealFileName {\n         }\n     }\n \n-    pub fn to_string_lossy(&self, prefer_local: bool) -> Cow<'_, str> {\n-        if prefer_local {\n-            self.local_path_if_available().to_string_lossy()\n-        } else {\n-            self.remapped_path_if_available().to_string_lossy()\n+    pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {\n+        match display_pref {\n+            FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),\n+            FileNameDisplayPreference::Remapped => {\n+                self.remapped_path_if_available().to_string_lossy()\n+            }\n         }\n     }\n }\n@@ -300,17 +301,23 @@ impl From<PathBuf> for FileName {\n     }\n }\n \n+#[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]\n+pub enum FileNameDisplayPreference {\n+    Remapped,\n+    Local,\n+}\n+\n pub struct FileNameDisplay<'a> {\n     inner: &'a FileName,\n-    prefer_local: bool,\n+    display_pref: FileNameDisplayPreference,\n }\n \n impl fmt::Display for FileNameDisplay<'_> {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         use FileName::*;\n         match *self.inner {\n             Real(ref name) => {\n-                write!(fmt, \"{}\", name.to_string_lossy(self.prefer_local))\n+                write!(fmt, \"{}\", name.to_string_lossy(self.display_pref))\n             }\n             QuoteExpansion(_) => write!(fmt, \"<quote expansion>\"),\n             MacroExpansion(_) => write!(fmt, \"<macro expansion>\"),\n@@ -328,7 +335,7 @@ impl fmt::Display for FileNameDisplay<'_> {\n impl FileNameDisplay<'_> {\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         match self.inner {\n-            FileName::Real(ref inner) => inner.to_string_lossy(self.prefer_local),\n+            FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),\n             _ => Cow::from(format!(\"{}\", self)),\n         }\n     }\n@@ -352,13 +359,17 @@ impl FileName {\n     }\n \n     pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {\n-        FileNameDisplay { inner: self, prefer_local: false }\n+        FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }\n     }\n \n     // This may include transient local filesystem information.\n     // Must not be embedded in build outputs.\n     pub fn prefer_local(&self) -> FileNameDisplay<'_> {\n-        FileNameDisplay { inner: self, prefer_local: true }\n+        FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }\n+    }\n+\n+    pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {\n+        FileNameDisplay { inner: self, display_pref }\n     }\n \n     pub fn macro_expansion_source_code(src: &str) -> FileName {"}, {"sha": "dc06f02a64ce3637a05eea165dd9c1566b4c1698", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -427,7 +427,7 @@ impl SourceMap {\n         }\n     }\n \n-    fn span_to_string(&self, sp: Span, prefer_local: bool) -> String {\n+    fn span_to_string(&self, sp: Span, filename_display_pref: FileNameDisplayPreference) -> String {\n         if self.files.borrow().source_files.is_empty() || sp.is_dummy() {\n             return \"no-location\".to_string();\n         }\n@@ -436,7 +436,7 @@ impl SourceMap {\n         let hi = self.lookup_char_pos(sp.hi());\n         format!(\n             \"{}:{}:{}: {}:{}\",\n-            if prefer_local { lo.file.name.prefer_local() } else { lo.file.name.prefer_remapped() },\n+            lo.file.name.display(filename_display_pref),\n             lo.line,\n             lo.col.to_usize() + 1,\n             hi.line,\n@@ -446,20 +446,24 @@ impl SourceMap {\n \n     /// Format the span location suitable for embedding in build artifacts\n     pub fn span_to_embeddable_string(&self, sp: Span) -> String {\n-        self.span_to_string(sp, false)\n+        self.span_to_string(sp, FileNameDisplayPreference::Remapped)\n     }\n \n     /// Format the span location to be printed in diagnostics. Must not be emitted\n     /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string\n     /// for string suitable for embedding.\n     pub fn span_to_diagnostic_string(&self, sp: Span) -> String {\n-        self.span_to_string(sp, true)\n+        self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)\n     }\n \n     pub fn span_to_filename(&self, sp: Span) -> FileName {\n         self.lookup_char_pos(sp.lo()).file.name.clone()\n     }\n \n+    pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {\n+        filename.display(self.path_mapping.filename_display_for_diagnostics)\n+    }\n+\n     pub fn is_multiline(&self, sp: Span) -> bool {\n         let lo = self.lookup_source_file_idx(sp.lo());\n         let hi = self.lookup_source_file_idx(sp.hi());\n@@ -1002,15 +1006,22 @@ impl SourceMap {\n #[derive(Clone)]\n pub struct FilePathMapping {\n     mapping: Vec<(PathBuf, PathBuf)>,\n+    filename_display_for_diagnostics: FileNameDisplayPreference,\n }\n \n impl FilePathMapping {\n     pub fn empty() -> FilePathMapping {\n-        FilePathMapping { mapping: vec![] }\n+        FilePathMapping::new(Vec::new())\n     }\n \n     pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {\n-        FilePathMapping { mapping }\n+        let filename_display_for_diagnostics = if mapping.is_empty() {\n+            FileNameDisplayPreference::Local\n+        } else {\n+            FileNameDisplayPreference::Remapped\n+        };\n+\n+        FilePathMapping { mapping, filename_display_for_diagnostics }\n     }\n \n     /// Applies any path prefix substitution as defined by the mapping."}, {"sha": "39f7ade3f81f6cbbf8c824e9c58f9820b1d40d64", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=af1b65cb18d5fa1358d1ae7a8ed3b1f7c635b6b5", "patch": "@@ -47,11 +47,8 @@ pub struct MacroRefData {\n \n impl MacroRefData {\n     pub fn new(name: String, callee: Span, cx: &LateContext<'_>) -> Self {\n-        let mut path = cx\n-            .sess()\n-            .source_map()\n-            .span_to_filename(callee)\n-            .prefer_local()\n+        let sm = cx.sess().source_map();\n+        let mut path = sm.filename_for_diagnostics(&sm.span_to_filename(callee))\n             .to_string();\n \n         // std lib paths are <::std::module::file type>"}]}