{"sha": "375469149c123d72d188bed3fbe468304a1b6004", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NTQ2OTE0OWMxMjNkNzJkMTg4YmVkM2ZiZTQ2ODMwNGExYjYwMDQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-03T06:24:00Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-03T06:24:00Z"}, "message": "Reorder methods of Cell\n\nTo make `new` method appear first in documentation.", "tree": {"sha": "8608dc36670924dd2f223324000164b4b96f736d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8608dc36670924dd2f223324000164b4b96f736d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375469149c123d72d188bed3fbe468304a1b6004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375469149c123d72d188bed3fbe468304a1b6004", "html_url": "https://github.com/rust-lang/rust/commit/375469149c123d72d188bed3fbe468304a1b6004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375469149c123d72d188bed3fbe468304a1b6004/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6293e359848c8c7275330719b33ccd168df04c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6293e359848c8c7275330719b33ccd168df04c3", "html_url": "https://github.com/rust-lang/rust/commit/c6293e359848c8c7275330719b33ccd168df04c3"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "fda103a52d8bc851b8fa4d07f277eb27302d425f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/375469149c123d72d188bed3fbe468304a1b6004/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375469149c123d72d188bed3fbe468304a1b6004/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=375469149c123d72d188bed3fbe468304a1b6004", "patch": "@@ -229,52 +229,6 @@ pub struct Cell<T: ?Sized> {\n     value: UnsafeCell<T>,\n }\n \n-impl<T:Copy> Cell<T> {\n-    /// Returns a copy of the contained value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let five = c.get();\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn get(&self) -> T {\n-        unsafe{ *self.value.get() }\n-    }\n-\n-    /// Updates the contained value using a function and returns the new value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(cell_update)]\n-    ///\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    /// let new = c.update(|x| x + 1);\n-    ///\n-    /// assert_eq!(new, 6);\n-    /// assert_eq!(c.get(), 6);\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"cell_update\", issue = \"50186\")]\n-    pub fn update<F>(&self, f: F) -> T\n-    where\n-        F: FnOnce(T) -> T,\n-    {\n-        let old = self.get();\n-        let new = f(old);\n-        self.set(new);\n-        new\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized> Send for Cell<T> where T: Send {}\n \n@@ -448,6 +402,52 @@ impl<T> Cell<T> {\n     }\n }\n \n+impl<T:Copy> Cell<T> {\n+    /// Returns a copy of the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let five = c.get();\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn get(&self) -> T {\n+        unsafe{ *self.value.get() }\n+    }\n+\n+    /// Updates the contained value using a function and returns the new value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_update)]\n+    ///\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    /// let new = c.update(|x| x + 1);\n+    ///\n+    /// assert_eq!(new, 6);\n+    /// assert_eq!(c.get(), 6);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"cell_update\", issue = \"50186\")]\n+    pub fn update<F>(&self, f: F) -> T\n+    where\n+        F: FnOnce(T) -> T,\n+    {\n+        let old = self.get();\n+        let new = f(old);\n+        self.set(new);\n+        new\n+    }\n+}\n+\n impl<T: ?Sized> Cell<T> {\n     /// Returns a raw pointer to the underlying data in this cell.\n     ///"}]}