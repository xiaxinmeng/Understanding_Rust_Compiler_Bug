{"sha": "35d214afe6af62d1532135875e73b3218b85fbf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZDIxNGFmZTZhZjYyZDE1MzIxMzU4NzVlNzNiMzIxOGI4NWZiZjA=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-10-03T00:07:18Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-10-03T01:58:23Z"}, "message": "Remove redundant 'Variant' in variant names, stop reexporting.", "tree": {"sha": "47e98bb10fb83dcc40deda1eeec4656b7c908689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47e98bb10fb83dcc40deda1eeec4656b7c908689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35d214afe6af62d1532135875e73b3218b85fbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35d214afe6af62d1532135875e73b3218b85fbf0", "html_url": "https://github.com/rust-lang/rust/commit/35d214afe6af62d1532135875e73b3218b85fbf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35d214afe6af62d1532135875e73b3218b85fbf0/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d41441f6a283320a45502c2c1730f92d85a937", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d41441f6a283320a45502c2c1730f92d85a937", "html_url": "https://github.com/rust-lang/rust/commit/88d41441f6a283320a45502c2c1730f92d85a937"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "cf20572510b5c81eb49cda40bc89cf369976d6da", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/35d214afe6af62d1532135875e73b3218b85fbf0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d214afe6af62d1532135875e73b3218b85fbf0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=35d214afe6af62d1532135875e73b3218b85fbf0", "patch": "@@ -12,7 +12,6 @@\n //! that clean them.\n \n pub use self::Type::*;\n-pub use self::VariantKind::*;\n pub use self::Mutability::*;\n pub use self::ItemEnum::*;\n pub use self::Attribute::*;\n@@ -317,7 +316,7 @@ impl Item {\n         match self.inner {\n             StructItem(ref _struct) => Some(_struct.fields_stripped),\n             UnionItem(ref union) => Some(union.fields_stripped),\n-            VariantItem(Variant { kind: StructVariant(ref vstruct)} ) => {\n+            VariantItem(Variant { kind: VariantKind::Struct(ref vstruct)} ) => {\n                 Some(vstruct.fields_stripped)\n             },\n             _ => None,\n@@ -2034,14 +2033,14 @@ impl Clean<Item> for doctree::Variant {\n impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let kind = match self.kind {\n-            ty::VariantKind::Unit => CLikeVariant,\n+            ty::VariantKind::Unit => VariantKind::CLike,\n             ty::VariantKind::Tuple => {\n-                TupleVariant(\n+                VariantKind::Tuple(\n                     self.fields.iter().map(|f| f.unsubst_ty().clean(cx)).collect()\n                 )\n             }\n             ty::VariantKind::Struct => {\n-                StructVariant(VariantStruct {\n+                VariantKind::Struct(VariantStruct {\n                     struct_type: doctree::Plain,\n                     fields_stripped: false,\n                     fields: self.fields.iter().map(|field| {\n@@ -2074,19 +2073,19 @@ impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum VariantKind {\n-    CLikeVariant,\n-    TupleVariant(Vec<Type>),\n-    StructVariant(VariantStruct),\n+    CLike,\n+    Tuple(Vec<Type>),\n+    Struct(VariantStruct),\n }\n \n impl Clean<VariantKind> for hir::VariantData {\n     fn clean(&self, cx: &DocContext) -> VariantKind {\n         if self.is_struct() {\n-            StructVariant(self.clean(cx))\n+            VariantKind::Struct(self.clean(cx))\n         } else if self.is_unit() {\n-            CLikeVariant\n+            VariantKind::CLike\n         } else {\n-            TupleVariant(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n+            VariantKind::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n         }\n     }\n }\n@@ -2552,8 +2551,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n                 if remaining.is_empty() {\n                     return ret;\n                 }\n-                (ret, Import::List(resolve_use_source(cx, p.clean(cx), self.id),\n-                                   remaining))\n+                (ret, Import::List(resolve_use_source(cx, p.clean(cx), self.id), remaining))\n             }\n             hir::ViewPathSimple(name, ref p) => {\n                 if !denied {"}, {"sha": "e269d940bfabf8a79931f0b4a8869ca88f654da1", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35d214afe6af62d1532135875e73b3218b85fbf0/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d214afe6af62d1532135875e73b3218b85fbf0/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=35d214afe6af62d1532135875e73b3218b85fbf0", "patch": "@@ -74,12 +74,12 @@ pub trait DocFolder : Sized {\n             VariantItem(i) => {\n                 let i2 = i.clone(); // this clone is small\n                 match i.kind {\n-                    StructVariant(mut j) => {\n+                    VariantKind::Struct(mut j) => {\n                         let num_fields = j.fields.len();\n                         j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                         j.fields_stripped |= num_fields != j.fields.len() ||\n                                              j.fields.iter().any(|f| f.is_stripped());\n-                        VariantItem(Variant {kind: StructVariant(j), ..i2})\n+                        VariantItem(Variant {kind: VariantKind::Struct(j), ..i2})\n                     },\n                     _ => VariantItem(i2)\n                 }"}, {"sha": "5a6e167188226a660299e4b7593f745af05f0d8b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35d214afe6af62d1532135875e73b3218b85fbf0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d214afe6af62d1532135875e73b3218b85fbf0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=35d214afe6af62d1532135875e73b3218b85fbf0", "patch": "@@ -2378,8 +2378,8 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             match v.inner {\n                 clean::VariantItem(ref var) => {\n                     match var.kind {\n-                        clean::CLikeVariant => write!(w, \"{}\", name)?,\n-                        clean::TupleVariant(ref tys) => {\n+                        clean::VariantKind::CLike => write!(w, \"{}\", name)?,\n+                        clean::VariantKind::Tuple(ref tys) => {\n                             write!(w, \"{}(\", name)?;\n                             for (i, ty) in tys.iter().enumerate() {\n                                 if i > 0 {\n@@ -2389,7 +2389,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                             }\n                             write!(w, \")\")?;\n                         }\n-                        clean::StructVariant(ref s) => {\n+                        clean::VariantKind::Struct(ref s) => {\n                             render_struct(w,\n                                           v,\n                                           None,\n@@ -2429,7 +2429,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                    ns_id = ns_id,\n                    name = variant.name.as_ref().unwrap())?;\n             if let clean::VariantItem(ref var) = variant.inner {\n-                if let clean::TupleVariant(ref tys) = var.kind {\n+                if let clean::VariantKind::Tuple(ref tys) = var.kind {\n                     write!(w, \"(\")?;\n                     for (i, ty) in tys.iter().enumerate() {\n                         if i > 0 {\n@@ -2443,8 +2443,10 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             write!(w, \"</code></span></span>\")?;\n             document(w, cx, variant)?;\n \n-            use clean::{Variant, StructVariant};\n-            if let clean::VariantItem( Variant { kind: StructVariant(ref s) } ) = variant.inner {\n+            use clean::{Variant, VariantKind};\n+            if let clean::VariantItem(Variant {\n+                kind: VariantKind::Struct(ref s)\n+            }) = variant.inner {\n                 write!(w, \"<h3 class='fields'>Fields</h3>\\n\n                            <table>\")?;\n                 for field in &s.fields {"}, {"sha": "1cc4f9371cb68689e02b0b3339e8731b237474fc", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35d214afe6af62d1532135875e73b3218b85fbf0/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d214afe6af62d1532135875e73b3218b85fbf0/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=35d214afe6af62d1532135875e73b3218b85fbf0", "patch": "@@ -131,7 +131,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n             // Struct variant fields have inherited visibility\n             clean::VariantItem(clean::Variant {\n-                kind: clean::StructVariant(..)\n+                kind: clean::VariantKind::Struct(..)\n             }) => true,\n             _ => false,\n         };"}]}