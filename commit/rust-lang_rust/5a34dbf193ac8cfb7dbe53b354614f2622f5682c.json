{"sha": "5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "node_id": "C_kwDOAAsO6NoAKDVhMzRkYmYxOTNhYzhjZmI3ZGJlNTNiMzU0NjE0ZjI2MjJmNTY4MmM", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-11-28T05:23:39Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-11-30T03:27:26Z"}, "message": "Improve spans in custom mir", "tree": {"sha": "edf85bf3d6fc29aa4277c00594ca0c4772a5ab54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf85bf3d6fc29aa4277c00594ca0c4772a5ab54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "html_url": "https://github.com/rust-lang/rust/commit/5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ce1f7697924685ca7abf09be540bb21df46104", "url": "https://api.github.com/repos/rust-lang/rust/commits/52ce1f7697924685ca7abf09be540bb21df46104", "html_url": "https://github.com/rust-lang/rust/commit/52ce1f7697924685ca7abf09be540bb21df46104"}], "stats": {"total": 86, "additions": 47, "deletions": 39}, "files": [{"sha": "2412824efeb751c305af719d5fb4dccd3d2729e7", "filename": "compiler/rustc_mir_build/src/build/custom/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -74,7 +74,7 @@ pub(super) fn build_custom_mir<'tcx>(\n     let mut pctxt = ParseCtxt {\n         tcx,\n         thir,\n-        source_info: SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE },\n+        source_scope: OUTERMOST_SOURCE_SCOPE,\n         body: &mut body,\n         local_map: FxHashMap::default(),\n         block_map: FxHashMap::default(),\n@@ -128,7 +128,7 @@ fn parse_attribute(attr: &Attribute) -> MirPhase {\n struct ParseCtxt<'tcx, 'body> {\n     tcx: TyCtxt<'tcx>,\n     thir: &'body Thir<'tcx>,\n-    source_info: SourceInfo,\n+    source_scope: SourceScope,\n \n     body: &'body mut Body<'tcx>,\n     local_map: FxHashMap<LocalVarId, Local>,"}, {"sha": "d72770e70c7ece67e9f5d43b7251e1625311f227", "filename": "compiler/rustc_mir_build/src/build/custom/parse.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -233,15 +233,23 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n         let mut data = BasicBlockData::new(None);\n         for stmt_id in &*block.stmts {\n             let stmt = self.statement_as_expr(*stmt_id)?;\n+            let span = self.thir[stmt].span;\n             let statement = self.parse_statement(stmt)?;\n-            data.statements.push(Statement { source_info: self.source_info, kind: statement });\n+            data.statements.push(Statement {\n+                source_info: SourceInfo { span, scope: self.source_scope },\n+                kind: statement,\n+            });\n         }\n \n         let Some(trailing) = block.expr else {\n             return Err(self.expr_error(expr_id, \"terminator\"))\n         };\n+        let span = self.thir[trailing].span;\n         let terminator = self.parse_terminator(trailing)?;\n-        data.terminator = Some(Terminator { source_info: self.source_info, kind: terminator });\n+        data.terminator = Some(Terminator {\n+            source_info: SourceInfo { span, scope: self.source_scope },\n+            kind: terminator,\n+        });\n \n         Ok(data)\n     }"}, {"sha": "b456e2aa37a2791fae3f40a8868c9ff70bcea9b7", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -492,7 +492,7 @@ fn construct_fn<'tcx>(\n             arguments,\n             return_ty,\n             return_ty_span,\n-            span,\n+            span_with_body,\n             custom_mir_attr,\n         );\n     }"}, {"sha": "20dd251e7e3087602857da1f41e577d964767eb5", "filename": "src/test/mir-opt/building/custom/arbitrary_let.arbitrary_let.built.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Farbitrary_let.arbitrary_let.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Farbitrary_let.arbitrary_let.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Farbitrary_let.arbitrary_let.built.after.mir?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -6,17 +6,17 @@ fn arbitrary_let(_1: i32) -> i32 {\n     let mut _3: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        _2 = _1;                         // scope 0 at $DIR/arbitrary_let.rs:+0:1: +0:32\n-        goto -> bb2;                     // scope 0 at $DIR/arbitrary_let.rs:+0:1: +0:32\n+        _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        goto -> bb2;                     // scope 0 at $DIR/arbitrary_let.rs:+4:13: +4:25\n     }\n \n     bb1: {\n-        _0 = _3;                         // scope 0 at $DIR/arbitrary_let.rs:+0:1: +0:32\n-        return;                          // scope 0 at $DIR/arbitrary_let.rs:+0:1: +0:32\n+        _0 = _3;                         // scope 0 at $DIR/arbitrary_let.rs:+7:13: +7:20\n+        return;                          // scope 0 at $DIR/arbitrary_let.rs:+8:13: +8:21\n     }\n \n     bb2: {\n-        _3 = _2;                         // scope 0 at $DIR/arbitrary_let.rs:+0:1: +0:32\n-        goto -> bb1;                     // scope 0 at $DIR/arbitrary_let.rs:+0:1: +0:32\n+        _3 = _2;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        goto -> bb1;                     // scope 0 at $DIR/arbitrary_let.rs:+12:13: +12:24\n     }\n }"}, {"sha": "ba753cfc20ca2348096729f34a9eb729ffd27930", "filename": "src/test/mir-opt/building/custom/consts.consts.built.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.consts.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.consts.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.consts.built.after.mir?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -1,22 +1,22 @@\n // MIR for `consts` after built\n \n fn consts() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/consts.rs:10:27: 10:27\n+    let mut _0: ();                      // return place in scope 0 at $DIR/consts.rs:+0:27: +0:27\n     let mut _1: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n     let mut _2: i8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n     let mut _3: u32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n     let mut _4: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n     let mut _5: fn() {consts::<10>};     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        _1 = const 5_u8;                 // scope 0 at $DIR/consts.rs:+0:1: +0:26\n-        _2 = const _;                    // scope 0 at $DIR/consts.rs:+0:1: +0:26\n-        _3 = const C;                    // scope 0 at $DIR/consts.rs:+0:1: +0:26\n-        _4 = const _;                    // scope 0 at $DIR/consts.rs:+0:1: +0:26\n-        _5 = consts::<10>;               // scope 0 at $DIR/consts.rs:+0:1: +0:26\n+        _1 = const 5_u8;                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        _2 = const _;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        _3 = const C;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        _4 = const _;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        _5 = consts::<10>;               // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $DIR/consts.rs:16:18: 16:30\n                                          // + literal: Const { ty: fn() {consts::<10>}, val: Value(<ZST>) }\n-        return;                          // scope 0 at $DIR/consts.rs:+0:1: +0:26\n+        return;                          // scope 0 at $DIR/consts.rs:+7:9: +7:17\n     }\n }"}, {"sha": "ee768e263ecdf9d536a824f6600cd04194461847", "filename": "src/test/mir-opt/building/custom/consts.statics.built.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.statics.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.statics.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.statics.built.after.mir?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -1,20 +1,20 @@\n // MIR for `statics` after built\n \n fn statics() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/consts.rs:25:14: 25:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/consts.rs:+0:14: +0:14\n     let mut _1: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n     let mut _2: *mut i32;                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        _1 = const {alloc1: &i32};       // scope 0 at $DIR/consts.rs:+0:1: +0:13\n+        _1 = const {alloc1: &i32};       // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $DIR/consts.rs:27:31: 27:32\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n-        _2 = const {alloc2: *mut i32};   // scope 0 at $DIR/consts.rs:+0:1: +0:13\n+        _2 = const {alloc2: *mut i32};   // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $DIR/consts.rs:28:38: 28:39\n                                          // + literal: Const { ty: *mut i32, val: Value(Scalar(alloc2)) }\n-        return;                          // scope 0 at $DIR/consts.rs:+0:1: +0:13\n+        return;                          // scope 0 at $DIR/consts.rs:+4:9: +4:17\n     }\n }\n "}, {"sha": "4d38d45c0f47924eaa45b236916d5ebc21f55957", "filename": "src/test/mir-opt/building/custom/references.immut_ref.built.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.immut_ref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.immut_ref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.immut_ref.built.after.mir?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -5,10 +5,10 @@ fn immut_ref(_1: &i32) -> &i32 {\n     let mut _2: *const i32;              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        _2 = &raw const (*_1);           // scope 0 at $DIR/references.rs:+0:1: +0:34\n-        Retag([raw] _2);                 // scope 0 at $DIR/references.rs:+0:1: +0:34\n-        _0 = &(*_2);                     // scope 0 at $DIR/references.rs:+0:1: +0:34\n-        Retag(_0);                       // scope 0 at $DIR/references.rs:+0:1: +0:34\n-        return;                          // scope 0 at $DIR/references.rs:+0:1: +0:34\n+        _2 = &raw const (*_1);           // scope 0 at $DIR/references.rs:+5:13: +5:29\n+        Retag([raw] _2);                 // scope 0 at $DIR/references.rs:+6:13: +6:24\n+        _0 = &(*_2);                     // scope 0 at $DIR/references.rs:+7:13: +7:23\n+        Retag(_0);                       // scope 0 at $DIR/references.rs:+8:13: +8:23\n+        return;                          // scope 0 at $DIR/references.rs:+9:13: +9:21\n     }\n }"}, {"sha": "01bc8a9cd35802676f6e2c82bbf59462216c1b88", "filename": "src/test/mir-opt/building/custom/references.mut_ref.built.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.mut_ref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.mut_ref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.mut_ref.built.after.mir?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -5,10 +5,10 @@ fn mut_ref(_1: &mut i32) -> &mut i32 {\n     let mut _2: *mut i32;                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        _2 = &raw mut (*_1);             // scope 0 at $DIR/references.rs:+0:1: +0:40\n-        Retag([raw] _2);                 // scope 0 at $DIR/references.rs:+0:1: +0:40\n-        _0 = &mut (*_2);                 // scope 0 at $DIR/references.rs:+0:1: +0:40\n-        Retag(_0);                       // scope 0 at $DIR/references.rs:+0:1: +0:40\n-        return;                          // scope 0 at $DIR/references.rs:+0:1: +0:40\n+        _2 = &raw mut (*_1);             // scope 0 at $DIR/references.rs:+5:13: +5:33\n+        Retag([raw] _2);                 // scope 0 at $DIR/references.rs:+6:13: +6:24\n+        _0 = &mut (*_2);                 // scope 0 at $DIR/references.rs:+7:13: +7:26\n+        Retag(_0);                       // scope 0 at $DIR/references.rs:+8:13: +8:23\n+        return;                          // scope 0 at $DIR/references.rs:+9:13: +9:21\n     }\n }"}, {"sha": "d7560fde69c9500412035d2815c5995e57d659d0", "filename": "src/test/mir-opt/building/custom/simple_assign.simple.built.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -6,13 +6,13 @@ fn simple(_1: i32) -> i32 {\n     let mut _3: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        _2 = _1;                         // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n-        goto -> bb1;                     // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n+        _2 = _1;                         // scope 0 at $DIR/simple_assign.rs:+6:13: +6:22\n+        goto -> bb1;                     // scope 0 at $DIR/simple_assign.rs:+7:13: +7:23\n     }\n \n     bb1: {\n-        _3 = move _2;                    // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n-        _0 = _3;                         // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n-        return;                          // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n+        _3 = move _2;                    // scope 0 at $DIR/simple_assign.rs:+11:13: +11:32\n+        _0 = _3;                         // scope 0 at $DIR/simple_assign.rs:+12:13: +12:24\n+        return;                          // scope 0 at $DIR/simple_assign.rs:+13:13: +13:21\n     }\n }"}, {"sha": "2b0e8f1047b53d354cea365ad3afc1dcee6dae6d", "filename": "src/test/mir-opt/building/custom/simple_assign.simple_ref.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple_ref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5a34dbf193ac8cfb7dbe53b354614f2622f5682c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple_ref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple_ref.built.after.mir?ref=5a34dbf193ac8cfb7dbe53b354614f2622f5682c", "patch": "@@ -4,7 +4,7 @@ fn simple_ref(_1: &mut i32) -> &mut i32 {\n     let mut _0: &mut i32;                // return place in scope 0 at $DIR/simple_assign.rs:+0:35: +0:43\n \n     bb0: {\n-        _0 = move _1;                    // scope 0 at $DIR/simple_assign.rs:+0:1: +0:43\n-        return;                          // scope 0 at $DIR/simple_assign.rs:+0:1: +0:43\n+        _0 = move _1;                    // scope 0 at $DIR/simple_assign.rs:+2:9: +2:22\n+        return;                          // scope 0 at $DIR/simple_assign.rs:+3:9: +3:17\n     }\n }"}]}