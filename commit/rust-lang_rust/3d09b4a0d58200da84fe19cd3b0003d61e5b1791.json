{"sha": "3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMDliNGEwZDU4MjAwZGE4NGZlMTljZDNiMDAwM2Q2MWU1YjE3OTE=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-07-27T10:10:31Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-07-28T00:20:49Z"}, "message": "Rename `char::escape` to `char::escape_debug` and add tracking issue", "tree": {"sha": "05adac2c734028d0c3cb5a21c4d24d5e84accce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05adac2c734028d0c3cb5a21c4d24d5e84accce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "html_url": "https://github.com/rust-lang/rust/commit/3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68efea08fa1cf800b3b76683992ec77a89323d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/68efea08fa1cf800b3b76683992ec77a89323d53", "html_url": "https://github.com/rust-lang/rust/commit/68efea08fa1cf800b3b76683992ec77a89323d53"}], "stats": {"total": 98, "additions": 50, "deletions": 48}, "files": [{"sha": "7fc6e54d69f73216abdf303580980767e204e029", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -33,7 +33,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(char_escape)]\n+#![cfg_attr(not(test), feature(char_escape_debug))]\n #![feature(core_intrinsics)]\n #![feature(dropck_parametricity)]\n #![feature(fmt_internals)]"}, {"sha": "4c64019de097ef8a7c2a5295df19c60681f8c2ef", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -1697,12 +1697,12 @@ impl str {\n         return s;\n     }\n \n-    /// Escapes each char in `s` with `char::escape`.\n+    /// Escapes each char in `s` with `char::escape_debug`.\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\",\n                issue = \"27791\")]\n-    pub fn escape(&self) -> String {\n-        self.chars().flat_map(|c| c.escape()).collect()\n+    pub fn escape_debug(&self) -> String {\n+        self.chars().flat_map(|c| c.escape_debug()).collect()\n     }\n \n     /// Escapes each char in `s` with `char::escape_default`."}, {"sha": "a61925cd3be5a1637dcab91b0c0024a77d9330bd", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -704,17 +704,17 @@ fn test_escape_unicode() {\n }\n \n #[test]\n-fn test_escape() {\n-    assert_eq!(\"abc\".escape_default(), \"abc\");\n-    assert_eq!(\"a c\".escape_default(), \"a c\");\n-    assert_eq!(\"\u00e9\u00e8\u00ea\".escape_default(), \"\u00e9\u00e8\u00ea\");\n-    assert_eq!(\"\\r\\n\\t\".escape_default(), \"\\\\r\\\\n\\\\t\");\n-    assert_eq!(\"'\\\"\\\\\".escape_default(), \"\\\\'\\\\\\\"\\\\\\\\\");\n-    assert_eq!(\"\\u{7f}\\u{ff}\".escape_default(), \"\\\\u{7f}\\u{ff}\");\n-    assert_eq!(\"\\u{100}\\u{ffff}\".escape_default(), \"\\u{100}\\\\u{ffff}\");\n-    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default(), \"\\u{10000}\\\\u{10ffff}\");\n-    assert_eq!(\"ab\\u{200b}\".escape_default(), \"ab\\\\u{200b}\");\n-    assert_eq!(\"\\u{10d4ea}\\r\".escape_default(), \"\\\\u{10d4ea}\\\\r\");\n+fn test_escape_debug() {\n+    assert_eq!(\"abc\".escape_debug(), \"abc\");\n+    assert_eq!(\"a c\".escape_debug(), \"a c\");\n+    assert_eq!(\"\u00e9\u00e8\u00ea\".escape_debug(), \"\u00e9\u00e8\u00ea\");\n+    assert_eq!(\"\\r\\n\\t\".escape_debug(), \"\\\\r\\\\n\\\\t\");\n+    assert_eq!(\"'\\\"\\\\\".escape_debug(), \"\\\\'\\\\\\\"\\\\\\\\\");\n+    assert_eq!(\"\\u{7f}\\u{ff}\".escape_debug(), \"\\\\u{7f}\\u{ff}\");\n+    assert_eq!(\"\\u{100}\\u{ffff}\".escape_debug(), \"\\u{100}\\\\u{ffff}\");\n+    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_debug(), \"\\u{10000}\\\\u{10ffff}\");\n+    assert_eq!(\"ab\\u{200b}\".escape_debug(), \"ab\\\\u{200b}\");\n+    assert_eq!(\"\\u{10d4ea}\\r\".escape_debug(), \"\\\\u{10d4ea}\\\\r\");\n }\n \n #[test]"}, {"sha": "a3440fe8aa644883f9baad14bdc9102b911ccfd1", "filename": "src/libcore/char.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -264,8 +264,8 @@ pub trait CharExt {\n     fn escape_unicode(self) -> EscapeUnicode;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn escape_default(self) -> EscapeDefault;\n-    #[unstable(feature = \"char_escape\", issue = \"0\")]\n-    fn escape(self) -> Escape;\n+    #[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n+    fn escape_debug(self) -> EscapeDebug;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len_utf8(self) -> usize;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n@@ -330,7 +330,7 @@ impl CharExt for char {\n     }\n \n     #[inline]\n-    fn escape(self) -> Escape {\n+    fn escape_debug(self) -> EscapeDebug {\n         let init_state = match self {\n             '\\t' => EscapeDefaultState::Backslash('t'),\n             '\\r' => EscapeDefaultState::Backslash('r'),\n@@ -339,7 +339,7 @@ impl CharExt for char {\n             c if is_printable(c) => EscapeDefaultState::Char(c),\n             c => EscapeDefaultState::Unicode(c.escape_unicode()),\n         };\n-        Escape(EscapeDefault { state: init_state })\n+        EscapeDebug(EscapeDefault { state: init_state })\n     }\n \n     #[inline]\n@@ -618,24 +618,24 @@ impl ExactSizeIterator for EscapeDefault {\n \n /// An iterator that yields the literal escape code of a `char`.\n ///\n-/// This `struct` is created by the [`escape()`] method on [`char`]. See its\n+/// This `struct` is created by the [`escape_debug()`] method on [`char`]. See its\n /// documentation for more.\n ///\n-/// [`escape()`]: ../../std/primitive.char.html#method.escape\n+/// [`escape_debug()`]: ../../std/primitive.char.html#method.escape_debug\n /// [`char`]: ../../std/primitive.char.html\n-#[unstable(feature = \"char_escape\", issue = \"0\")]\n+#[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n #[derive(Clone, Debug)]\n-pub struct Escape(EscapeDefault);\n+pub struct EscapeDebug(EscapeDefault);\n \n-#[unstable(feature = \"char_escape\", issue = \"0\")]\n-impl Iterator for Escape {\n+#[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n+impl Iterator for EscapeDebug {\n     type Item = char;\n     fn next(&mut self) -> Option<char> { self.0.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.0.size_hint() }\n }\n \n-#[unstable(feature = \"char_escape\", issue = \"0\")]\n-impl ExactSizeIterator for Escape { }\n+#[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n+impl ExactSizeIterator for EscapeDebug { }\n \n /// An iterator over `u8` entries represending the UTF-8 encoding of a `char`\n /// value."}, {"sha": "173c55e35d51e5a680cd62c84929e22caa798193", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -1383,7 +1383,7 @@ impl Debug for str {\n         f.write_char('\"')?;\n         let mut from = 0;\n         for (i, c) in self.char_indices() {\n-            let esc = c.escape();\n+            let esc = c.escape_debug();\n             // If char needs escaping, flush backlog so far and write, else skip\n             if esc.len() != 1 {\n                 f.write_str(&self[from..i])?;\n@@ -1409,7 +1409,7 @@ impl Display for str {\n impl Debug for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.write_char('\\'')?;\n-        for c in self.escape() {\n+        for c in self.escape_debug() {\n             f.write_char(c)?\n         }\n         f.write_char('\\'')"}, {"sha": "4632419336d7f5f047e0057d02a3ce48d45a44b2", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -124,9 +124,9 @@ fn test_is_digit() {\n }\n \n #[test]\n-fn test_escape() {\n+fn test_escape_debug() {\n     fn string(c: char) -> String {\n-        c.escape().collect()\n+        c.escape_debug().collect()\n     }\n     let s = string('\\n');\n     assert_eq!(s, \"\\\\n\");"}, {"sha": "ef0042808f98b8bb3699a1709cea47f60bed74de", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -14,6 +14,7 @@\n #![feature(borrow_state)]\n #![feature(box_syntax)]\n #![feature(cell_extras)]\n+#![feature(char_escape_debug)]\n #![feature(const_fn)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n@@ -29,10 +30,10 @@\n #![feature(slice_patterns)]\n #![feature(step_by)]\n #![feature(test)]\n+#![feature(try_from)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n-#![feature(try_from)]\n \n extern crate core;\n extern crate test;"}, {"sha": "7e308684a25673cb49afe6b9fa690fecc62075ce", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -36,7 +36,7 @@ use tables::{conversions, derived_property, general_category, property};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{MAX, from_digit, from_u32, from_u32_unchecked};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::char::{EncodeUtf16, EncodeUtf8, Escape, EscapeDefault, EscapeUnicode};\n+pub use core::char::{EncodeUtf16, EncodeUtf8, EscapeDebug, EscapeDefault, EscapeUnicode};\n \n // unstable reexports\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n@@ -296,10 +296,10 @@ impl char {\n     ///\n     /// assert_eq!(quote, \"\\\\n\");\n     /// ```\n-    #[unstable(feature = \"char_escape\", issue = \"0\")]\n+    #[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n     #[inline]\n-    pub fn escape(self) -> Escape {\n-        C::escape(self)\n+    pub fn escape_debug(self) -> EscapeDebug {\n+        C::escape_debug(self)\n     }\n \n     /// Returns an iterator that yields the literal escape code of a `char`."}, {"sha": "3ae905eba279b7f3c1cce0607a0d75190f51094f", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -32,7 +32,7 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n #![no_std]\n \n-#![feature(char_escape)]\n+#![feature(char_escape_debug)]\n #![feature(core_char_ext)]\n #![feature(decode_utf8)]\n #![feature(lang_items)]"}, {"sha": "865d067cdb6dced4522f9873b87575ecfbb4aa0f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -218,8 +218,9 @@\n #![feature(associated_consts)]\n #![feature(borrow_state)]\n #![feature(box_syntax)]\n-#![feature(cfg_target_vendor)]\n #![feature(cfg_target_thread_local)]\n+#![feature(cfg_target_vendor)]\n+#![feature(char_escape_debug)]\n #![feature(char_internals)]\n #![feature(collections)]\n #![feature(collections_bound)]\n@@ -229,10 +230,10 @@\n #![feature(dropck_parametricity)]\n #![feature(float_extras)]\n #![feature(float_from_str_radix)]\n-#![feature(fnbox)]\n #![feature(fn_traits)]\n-#![feature(heap_api)]\n+#![feature(fnbox)]\n #![feature(hashmap_hasher)]\n+#![feature(heap_api)]\n #![feature(inclusive_range)]\n #![feature(int_error_internals)]\n #![feature(into_cow)]\n@@ -242,17 +243,19 @@\n #![feature(linkage)]\n #![feature(macro_reexport)]\n #![cfg_attr(test, feature(map_values_mut))]\n+#![feature(needs_panic_runtime)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]\n #![feature(oom)]\n #![feature(optin_builtin_traits)]\n #![feature(panic_unwind)]\n #![feature(placement_in_syntax)]\n+#![feature(question_mark)]\n #![feature(rand)]\n #![feature(raw)]\n-#![feature(repr_simd)]\n #![feature(reflect_marker)]\n+#![feature(repr_simd)]\n #![feature(rustc_attrs)]\n #![feature(shared)]\n #![feature(sip_hash_13)]\n@@ -266,16 +269,14 @@\n #![feature(str_utf16)]\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n+#![feature(try_from)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![feature(zero_one)]\n-#![feature(question_mark)]\n-#![feature(try_from)]\n-#![feature(needs_panic_runtime)]\n \n // Issue# 30592: Systematically use alloc_system during stage0 since jemalloc\n // might be unavailable or disabled"}, {"sha": "c0e6ec46b55b9537d4a152fc6318bca224730f34", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -390,7 +390,7 @@ impl fmt::Debug for Wtf8 {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         fn write_str_escaped(f: &mut fmt::Formatter, s: &str) -> fmt::Result {\n             use fmt::Write;\n-            for c in s.chars().flat_map(|c| c.escape_default()) {\n+            for c in s.chars().flat_map(|c| c.escape_debug()) {\n                 f.write_char(c)?\n             }\n             Ok(())\n@@ -1064,9 +1064,9 @@ mod tests {\n \n     #[test]\n     fn wtf8buf_show() {\n-        let mut string = Wtf8Buf::from_str(\"a\\t\u00e9 \ud83d\udca9\\r\");\n+        let mut string = Wtf8Buf::from_str(\"a\\t\u00e9 \\u{7f}\ud83d\udca9\\r\");\n         string.push(CodePoint::from_u32(0xD800).unwrap());\n-        assert_eq!(format!(\"{:?}\", string), r#\"\"a\\t\\u{e9} \\u{1f4a9}\\r\\u{D800}\"\"#);\n+        assert_eq!(format!(\"{:?}\", string), \"\\\"a\\\\t\u00e9 \\\\u{7f}\\u{1f4a9}\\\\r\\\\u{D800}\\\"\");\n     }\n \n     #[test]"}, {"sha": "d12bdf182fa4d781fb14a7063a4bbdb44d6bb742", "filename": "src/test/run-pass/sync-send-iterators-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09b4a0d58200da84fe19cd3b0003d61e5b1791/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs?ref=3d09b4a0d58200da84fe19cd3b0003d61e5b1791", "patch": "@@ -67,7 +67,7 @@ macro_rules! is_sync_send {\n \n fn main() {\n     // for char.rs\n-    all_sync_send!(\"\u042f\", escape_default, escape_unicode);\n+    all_sync_send!(\"\u042f\", escape_debug, escape_default, escape_unicode);\n \n     // for iter.rs\n     all_sync_send_mutable_ref!([1], iter);"}]}