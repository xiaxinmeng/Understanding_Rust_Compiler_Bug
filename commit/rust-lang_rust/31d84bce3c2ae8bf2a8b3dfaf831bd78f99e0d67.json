{"sha": "31d84bce3c2ae8bf2a8b3dfaf831bd78f99e0d67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZDg0YmNlM2MyYWU4YmYyYThiM2RmYWY4MzFiZDc4Zjk5ZTBkNjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-24T06:15:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-24T06:15:13Z"}, "message": "Merge #2053\n\n2053: show unaccounted for time in profiling r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2079abe97a89feaa06c7a56ffa9fdeba52e6bd97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2079abe97a89feaa06c7a56ffa9fdeba52e6bd97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d84bce3c2ae8bf2a8b3dfaf831bd78f99e0d67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsUFyCRBK7hj4Ov3rIwAAdHIIAJj/pH+BAfGGpaXI9ZDbKlkP\nPkmsaf0bguq2kvw9X9EBEc9K1YGchHMcYGmZ/aiQ1C6/pOGXGVq+znX/Mr6abYFr\n3qP1+CFBSLcBn5jfPLWgH1rnytTsuk8Duwf8hxXkSIS571zAxqwmjGzBHWdqNRpC\nmf3m9KwxoT4+OKJcz+V940ZhOGydg+buLxfiRMSPySbo0tn2lHDDb2UHMoOgjCH7\nQnh46zKoAZGx687lA2RApbIJFGoYi0mmdMhuKbZn9drOs9PSta0ngwugAqSJcCBu\nvQSdc9ZDkeAiAZl+IHZRdz169FzmcuP1E6lpaC2IjrfZp2WylH3Y0IK4+lo4ZCo=\n=I3DY\n-----END PGP SIGNATURE-----\n", "payload": "tree 2079abe97a89feaa06c7a56ffa9fdeba52e6bd97\nparent 2197205885f43441f14861f34449426295397dd9\nparent baa968e71cd09c4e9ca4bacbfdbdfa5abe6363a3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1571897713 +0000\ncommitter GitHub <noreply@github.com> 1571897713 +0000\n\nMerge #2053\n\n2053: show unaccounted for time in profiling r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d84bce3c2ae8bf2a8b3dfaf831bd78f99e0d67", "html_url": "https://github.com/rust-lang/rust/commit/31d84bce3c2ae8bf2a8b3dfaf831bd78f99e0d67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d84bce3c2ae8bf2a8b3dfaf831bd78f99e0d67/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2197205885f43441f14861f34449426295397dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2197205885f43441f14861f34449426295397dd9", "html_url": "https://github.com/rust-lang/rust/commit/2197205885f43441f14861f34449426295397dd9"}, {"sha": "baa968e71cd09c4e9ca4bacbfdbdfa5abe6363a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa968e71cd09c4e9ca4bacbfdbdfa5abe6363a3", "html_url": "https://github.com/rust-lang/rust/commit/baa968e71cd09c4e9ca4bacbfdbdfa5abe6363a3"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "e5385f51b25d7a3bac78fd59ecc43bee1f13a0ff", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/31d84bce3c2ae8bf2a8b3dfaf831bd78f99e0d67/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d84bce3c2ae8bf2a8b3dfaf831bd78f99e0d67/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=31d84bce3c2ae8bf2a8b3dfaf831bd78f99e0d67", "patch": "@@ -198,7 +198,7 @@ impl Drop for Profiler {\n                         let stdout = stderr();\n                         let longer_than = stack.filter_data.longer_than;\n                         if duration >= longer_than {\n-                            print(0, &stack.messages, &mut stdout.lock(), longer_than);\n+                            print(0, &stack.messages, &mut stdout.lock(), longer_than, None);\n                         }\n                         stack.messages.clear();\n                     }\n@@ -209,20 +209,28 @@ impl Drop for Profiler {\n     }\n }\n \n-fn print(lvl: usize, msgs: &[Message], out: &mut impl Write, longer_than: Duration) {\n+fn print(\n+    lvl: usize,\n+    msgs: &[Message],\n+    out: &mut impl Write,\n+    longer_than: Duration,\n+    total: Option<Duration>,\n+) {\n     let mut last = 0;\n     let indent = repeat(\"    \").take(lvl + 1).collect::<String>();\n     // We output hierarchy for long calls, but sum up all short calls\n     let mut short = Vec::new();\n+    let mut accounted_for = Duration::default();\n     for (i, &Message { level, duration, message: ref msg }) in msgs.iter().enumerate() {\n         if level != lvl {\n             continue;\n         }\n+        accounted_for += duration;\n         if duration >= longer_than {\n             writeln!(out, \"{} {:6}ms - {}\", indent, duration.as_millis(), msg)\n                 .expect(\"printing profiling info to stdout\");\n \n-            print(lvl + 1, &msgs[last..i], out, longer_than);\n+            print(lvl + 1, &msgs[last..i], out, longer_than, Some(duration));\n         } else {\n             short.push((msg, duration))\n         }\n@@ -240,6 +248,15 @@ fn print(lvl: usize, msgs: &[Message], out: &mut impl Write, longer_than: Durati\n         writeln!(out, \"{} {:6}ms - {} ({} calls)\", indent, total_duration.as_millis(), msg, count)\n             .expect(\"printing profiling info to stdout\");\n     }\n+\n+    if let Some(total) = total {\n+        if let Some(unaccounted) = total.checked_sub(accounted_for) {\n+            if unaccounted >= longer_than && last > 0 {\n+                writeln!(out, \"{} {:6}ms - ???\", indent, unaccounted.as_millis())\n+                    .expect(\"printing profiling info to stdout\");\n+            }\n+        }\n+    }\n }\n \n /// Prints backtrace to stderr, useful for debugging."}]}