{"sha": "22b36c70f936c647a589c266060651fb7cf1164f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYjM2YzcwZjkzNmM2NDdhNTg5YzI2NjA2MDY1MWZiN2NmMTE2NGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-05T10:12:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-05T10:12:38Z"}, "message": "Auto merge of #33999 - scottcarr:master, r=nikomatsakis\n\ngenerate fewer basic blocks for variant switches\n\nCC #33567\nAdds a new field to TestKind::Switch that tracks the variants that are actually matched against.  The other candidates target a common \"otherwise\" block.", "tree": {"sha": "854dde10da33410f58b3d882b03ebeb02507c256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/854dde10da33410f58b3d882b03ebeb02507c256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b36c70f936c647a589c266060651fb7cf1164f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b36c70f936c647a589c266060651fb7cf1164f", "html_url": "https://github.com/rust-lang/rust/commit/22b36c70f936c647a589c266060651fb7cf1164f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b36c70f936c647a589c266060651fb7cf1164f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f97c411548f2b64f74f2bcb84dcc37075c05e2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97c411548f2b64f74f2bcb84dcc37075c05e2a0", "html_url": "https://github.com/rust-lang/rust/commit/f97c411548f2b64f74f2bcb84dcc37075c05e2a0"}, {"sha": "d4551ece5f5a318f24c16368fcea9d67b64c41ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4551ece5f5a318f24c16368fcea9d67b64c41ff", "html_url": "https://github.com/rust-lang/rust/commit/d4551ece5f5a318f24c16368fcea9d67b64c41ff"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "79d3f0cf688465cf222ac99e4aec9d2046e5fe4b", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22b36c70f936c647a589c266060651fb7cf1164f/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b36c70f936c647a589c266060651fb7cf1164f/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=22b36c70f936c647a589c266060651fb7cf1164f", "patch": "@@ -11,7 +11,7 @@\n use std::iter::FromIterator;\n \n /// A very simple BitVector type.\n-#[derive(Clone)]\n+#[derive(Clone, Debug, PartialEq)]\n pub struct BitVector {\n     data: Vec<u64>,\n }"}, {"sha": "88d7e41bc616f0e07f642be80ac9e1d5bc343a81", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22b36c70f936c647a589c266060651fb7cf1164f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b36c70f936c647a589c266060651fb7cf1164f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=22b36c70f936c647a589c266060651fb7cf1164f", "patch": "@@ -15,6 +15,7 @@\n \n use build::{BlockAnd, BlockAndExtension, Builder};\n use rustc_data_structures::fnv::FnvHashMap;\n+use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{AdtDef, Ty};\n use rustc::mir::repr::*;\n@@ -266,6 +267,7 @@ enum TestKind<'tcx> {\n     // test the branches of enum\n     Switch {\n         adt_def: AdtDef<'tcx>,\n+        variants: BitVector,\n     },\n \n     // test the branches of enum\n@@ -391,9 +393,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn join_otherwise_blocks(&mut self,\n                              span: Span,\n-                             otherwise: Vec<BasicBlock>)\n+                             mut otherwise: Vec<BasicBlock>)\n                              -> BasicBlock\n     {\n+        otherwise.sort();\n+        otherwise.dedup(); // variant switches can introduce duplicate target blocks\n         let scope_id = self.innermost_scope_id();\n         if otherwise.len() == 1 {\n             otherwise[0]\n@@ -502,6 +506,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n+            TestKind::Switch { adt_def: _, ref mut variants} => {\n+                for candidate in candidates.iter() {\n+                    if !self.add_variants_to_switch(&match_pair.lvalue,\n+                                                    candidate,\n+                                                    variants) {\n+                        break;\n+                    }\n+                }\n+            }\n             _ => { }\n         }\n \n@@ -525,6 +538,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                                           &mut target_candidates))\n                       .count();\n         assert!(tested_candidates > 0); // at least the last candidate ought to be tested\n+        debug!(\"tested_candidates: {}\", tested_candidates);\n+        debug!(\"untested_candidates: {}\", candidates.len() - tested_candidates);\n \n         // For each outcome of test, process the candidates that still\n         // apply. Collect a list of blocks where control flow will"}, {"sha": "09c146537e7d4f9d02d3d27d999b9b8bbd2bab8c", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/22b36c70f936c647a589c266060651fb7cf1164f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b36c70f936c647a589c266060651fb7cf1164f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=22b36c70f936c647a589c266060651fb7cf1164f", "patch": "@@ -19,6 +19,7 @@ use build::Builder;\n use build::matches::{Candidate, MatchPair, Test, TestKind};\n use hair::*;\n use rustc_data_structures::fnv::FnvHashMap;\n+use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n use rustc::mir::repr::*;\n@@ -33,7 +34,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Variant { ref adt_def, variant_index: _, subpatterns: _ } => {\n                 Test {\n                     span: match_pair.pattern.span,\n-                    kind: TestKind::Switch { adt_def: adt_def.clone() },\n+                    kind: TestKind::Switch {\n+                        adt_def: adt_def.clone(),\n+                        variants: BitVector::new(self.hir.num_variants(adt_def)),\n+                    },\n                 }\n             }\n \n@@ -125,9 +129,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                        });\n                 true\n             }\n-\n+            PatternKind::Variant { .. } => {\n+                panic!(\"you should have called add_variants_to_switch instead!\");\n+            }\n             PatternKind::Range { .. } |\n-            PatternKind::Variant { .. } |\n             PatternKind::Slice { .. } |\n             PatternKind::Array { .. } |\n             PatternKind::Wild |\n@@ -140,6 +145,31 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn add_variants_to_switch<'pat>(&mut self,\n+                                        test_lvalue: &Lvalue<'tcx>,\n+                                        candidate: &Candidate<'pat, 'tcx>,\n+                                        variants: &mut BitVector)\n+                                        -> bool\n+    {\n+        let match_pair = match candidate.match_pairs.iter().find(|mp| mp.lvalue == *test_lvalue) {\n+            Some(match_pair) => match_pair,\n+            _ => { return false; }\n+        };\n+\n+        match *match_pair.pattern.kind {\n+            PatternKind::Variant { adt_def: _ , variant_index,  .. } => {\n+                // We have a pattern testing for variant `variant_index`\n+                // set the corresponding index to true\n+                variants.insert(variant_index);\n+                true\n+            }\n+            _ => {\n+                // don't know how to add these patterns to a switch\n+                false\n+            }\n+        }\n+    }\n+\n     /// Generates the code to perform a test.\n     pub fn perform_test(&mut self,\n                         block: BasicBlock,\n@@ -148,11 +178,21 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         -> Vec<BasicBlock> {\n         let scope_id = self.innermost_scope_id();\n         match test.kind {\n-            TestKind::Switch { adt_def } => {\n+            TestKind::Switch { adt_def, ref variants } => {\n                 let num_enum_variants = self.hir.num_variants(adt_def);\n-                let target_blocks: Vec<_> =\n-                    (0..num_enum_variants).map(|_| self.cfg.start_new_block())\n-                                          .collect();\n+                let mut otherwise_block = None;\n+                let target_blocks: Vec<_> = (0..num_enum_variants).map(|i| {\n+                    if variants.contains(i) {\n+                        self.cfg.start_new_block()\n+                    } else {\n+                        if otherwise_block.is_none() {\n+                            otherwise_block = Some(self.cfg.start_new_block());\n+                        }\n+                        otherwise_block.unwrap()\n+                    }\n+                }).collect();\n+                debug!(\"num_enum_variants: {}, num tested variants: {}, variants: {:?}\",\n+                       num_enum_variants, variants.iter().count(), variants);\n                 self.cfg.terminate(block, scope_id, test.span, TerminatorKind::Switch {\n                     discr: lvalue.clone(),\n                     adt_def: adt_def,\n@@ -415,7 +455,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         match test.kind {\n             // If we are performing a variant switch, then this\n             // informs variant patterns, but nothing else.\n-            TestKind::Switch { adt_def: tested_adt_def } => {\n+            TestKind::Switch { adt_def: tested_adt_def , .. } => {\n                 match *match_pair.pattern.kind {\n                     PatternKind::Variant { adt_def, variant_index, ref subpatterns } => {\n                         assert_eq!(adt_def, tested_adt_def);"}]}