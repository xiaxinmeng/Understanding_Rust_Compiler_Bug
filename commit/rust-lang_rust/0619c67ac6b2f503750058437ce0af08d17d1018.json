{"sha": "0619c67ac6b2f503750058437ce0af08d17d1018", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTljNjdhYzZiMmY1MDM3NTAwNTg0MzdjZTBhZjA4ZDE3ZDEwMTg=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-04-24T14:11:57Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-04-24T14:11:57Z"}, "message": "Support returning non-hierarchical symbols\n\nIf `hierarchicalDocumentSymbolSupport` is not true in the client capabilites\nthen it does not support the `DocumentSymbol[]` return type from the\n`textDocument/documentSymbol` request and we must fall back to `SymbolInformation[]`.\n\nThis is one of the few requests that use the client capabilities to\ndifferentiate between return types and could cause problems for clients.\n\nSee https://github.com/microsoft/language-server-protocol/pull/538#issuecomment-442510767 for more context.\n\nFound while looking at #144", "tree": {"sha": "8d3a9545087bce774d5cbec4216512c585c8eeb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d3a9545087bce774d5cbec4216512c585c8eeb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0619c67ac6b2f503750058437ce0af08d17d1018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0619c67ac6b2f503750058437ce0af08d17d1018", "html_url": "https://github.com/rust-lang/rust/commit/0619c67ac6b2f503750058437ce0af08d17d1018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0619c67ac6b2f503750058437ce0af08d17d1018/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae1f77e5e9aef59aed9cd5a146114e37a74e3316", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1f77e5e9aef59aed9cd5a146114e37a74e3316", "html_url": "https://github.com/rust-lang/rust/commit/ae1f77e5e9aef59aed9cd5a146114e37a74e3316"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "2460850059f9eaa08ac79d4a9bd606fe43f9f295", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0619c67ac6b2f503750058437ce0af08d17d1018/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0619c67ac6b2f503750058437ce0af08d17d1018/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=0619c67ac6b2f503750058437ce0af08d17d1018", "patch": "@@ -16,7 +16,7 @@ use lsp_types::{\n     Hover, HoverContents, Location, MarkupContent, MarkupKind, Position, PrepareRenameResponse,\n     Range, RenameParams, SemanticTokensParams, SemanticTokensRangeParams,\n     SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, TextDocumentIdentifier,\n-    TextEdit, WorkspaceEdit,\n+    TextEdit, Url, WorkspaceEdit,\n };\n use ra_ide::{\n     Assist, AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n@@ -219,6 +219,7 @@ pub fn handle_document_symbol(\n     let _p = profile(\"handle_document_symbol\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n+    let url = file_id.try_conv_with(&world)?;\n \n     let mut parents: Vec<(DocumentSymbol, Option<usize>)> = Vec::new();\n \n@@ -234,10 +235,10 @@ pub fn handle_document_symbol(\n         };\n         parents.push((doc_symbol, symbol.parent));\n     }\n-    let mut res = Vec::new();\n+    let mut document_symbols = Vec::new();\n     while let Some((node, parent)) = parents.pop() {\n         match parent {\n-            None => res.push(node),\n+            None => document_symbols.push(node),\n             Some(i) => {\n                 let children = &mut parents[i].0.children;\n                 if children.is_none() {\n@@ -248,7 +249,35 @@ pub fn handle_document_symbol(\n         }\n     }\n \n-    Ok(Some(res.into()))\n+    if world.config.client_caps.hierarchical_symbols {\n+        Ok(Some(document_symbols.into()))\n+    } else {\n+        let mut symbol_information = Vec::<SymbolInformation>::new();\n+        for symbol in document_symbols {\n+            flatten_document_symbol(&symbol, None, &url, &mut symbol_information);\n+        }\n+\n+        Ok(Some(symbol_information.into()))\n+    }\n+}\n+\n+fn flatten_document_symbol(\n+    symbol: &DocumentSymbol,\n+    container_name: Option<String>,\n+    url: &Url,\n+    res: &mut Vec<SymbolInformation>,\n+) {\n+    res.push(SymbolInformation {\n+        name: symbol.name.clone(),\n+        kind: symbol.kind,\n+        deprecated: symbol.deprecated,\n+        location: Location::new(url.clone(), symbol.range),\n+        container_name: container_name,\n+    });\n+\n+    for child in symbol.children.iter().flatten() {\n+        flatten_document_symbol(child, Some(symbol.name.clone()), url, res);\n+    }\n }\n \n pub fn handle_workspace_symbol("}]}