{"sha": "a9ad7be748d4bd146f05ae4dd9cbb0acb9431440", "node_id": "C_kwDOAAsO6NoAKGE5YWQ3YmU3NDhkNGJkMTQ2ZjA1YWU0ZGQ5Y2JiMGFjYjk0MzE0NDA", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2021-12-12T09:24:10Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2021-12-19T19:14:39Z"}, "message": "Respect binding mode of a binding pattern for exhaustiveness check", "tree": {"sha": "bd7205553a0061f84b663675b6d20f9ea2b65689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd7205553a0061f84b663675b6d20f9ea2b65689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440", "html_url": "https://github.com/rust-lang/rust/commit/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b17aefb83a09e9e298d560f9a270b7ca89790203", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17aefb83a09e9e298d560f9a270b7ca89790203", "html_url": "https://github.com/rust-lang/rust/commit/b17aefb83a09e9e298d560f9a270b7ca89790203"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "87a85797613b4079d30726b054da4361c5a7cf90", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=a9ad7be748d4bd146f05ae4dd9cbb0acb9431440", "patch": "@@ -11,8 +11,11 @@ pub(crate) mod deconstruct_pat;\n pub(crate) mod usefulness;\n \n use hir_def::{body::Body, expr::PatId, EnumVariantId, LocalFieldId, VariantId};\n+use stdx::never;\n \n-use crate::{db::HirDatabase, InferenceResult, Interner, Substitution, Ty, TyKind};\n+use crate::{\n+    db::HirDatabase, infer::BindingMode, InferenceResult, Interner, Substitution, Ty, TyKind,\n+};\n \n use self::pat_util::EnumerateAndAdjustIterator;\n \n@@ -21,6 +24,7 @@ pub(crate) use self::usefulness::MatchArm;\n #[derive(Clone, Debug)]\n pub(crate) enum PatternError {\n     Unimplemented,\n+    UnexpectedType,\n     UnresolvedVariant,\n     MissingField,\n     ExtraFields,\n@@ -129,9 +133,16 @@ impl<'a> PatCtxt<'a> {\n                 PatKind::Leaf { subpatterns }\n             }\n \n-            hir_def::expr::Pat::Bind { subpat, .. } => {\n-                if let TyKind::Ref(.., rty) = ty.kind(Interner) {\n-                    ty = rty;\n+            hir_def::expr::Pat::Bind { ref name, subpat, .. } => {\n+                let bm = self.infer.pat_binding_modes[&pat];\n+                match (bm, ty.kind(Interner)) {\n+                    (BindingMode::Ref(_), TyKind::Ref(.., rty)) => ty = rty,\n+                    (BindingMode::Ref(_), _) => {\n+                        never!(\"`ref {}` has wrong type {:?}\", name, ty);\n+                        self.errors.push(PatternError::UnexpectedType);\n+                        return Pat { ty: ty.clone(), kind: PatKind::Wild.into() };\n+                    }\n+                    _ => (),\n                 }\n                 PatKind::Binding { subpattern: self.lower_opt_pattern(subpat) }\n             }"}, {"sha": "54c3590f04bcb168769d827406fc08e3b75268b8", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=a9ad7be748d4bd146f05ae4dd9cbb0acb9431440", "patch": "@@ -100,7 +100,7 @@ impl_from!(ExprId, PatId for ExprOrPatId);\n /// Binding modes inferred for patterns.\n /// <https://doc.rust-lang.org/reference/patterns.html#binding-modes>\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-enum BindingMode {\n+pub enum BindingMode {\n     Move,\n     Ref(Mutability),\n }\n@@ -292,6 +292,7 @@ pub struct InferenceResult {\n     standard_types: InternedStandardTypes,\n     /// Stores the types which were implicitly dereferenced in pattern binding modes.\n     pub pat_adjustments: FxHashMap<PatId, Vec<Adjustment>>,\n+    pub pat_binding_modes: FxHashMap<PatId, BindingMode>,\n     pub expr_adjustments: FxHashMap<ExprId, Vec<Adjustment>>,\n }\n "}, {"sha": "50fd2dd7494973249efeb8659775b949532b5040", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=a9ad7be748d4bd146f05ae4dd9cbb0acb9431440", "patch": "@@ -204,6 +204,8 @@ impl<'a> InferenceContext<'a> {\n                 } else {\n                     BindingMode::convert(*mode)\n                 };\n+                self.result.pat_binding_modes.insert(pat, mode);\n+\n                 let inner_ty = match subpat {\n                     Some(subpat) => self.infer_pat(*subpat, &expected, default_bm),\n                     None => expected,"}, {"sha": "6e2764e59ff88ac9df1bc8efa28120f8e1ea4a50", "filename": "crates/ide_diagnostics/src/handlers/missing_match_arms.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ad7be748d4bd146f05ae4dd9cbb0acb9431440/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs?ref=a9ad7be748d4bd146f05ae4dd9cbb0acb9431440", "patch": "@@ -883,7 +883,20 @@ static __: () = {\n     match &n { Next(E::Foo | E::Bar) => {} }\n     match &n {      _ | Next(E::Bar) => {} }\n };\",\n+        );\n+    }\n \n+    #[test]\n+    fn binding_mode_by_ref() {\n+        check_diagnostics_no_bails(\n+            r\"\n+enum E{ A, B }\n+fn foo() {\n+    match &E::A {\n+        E::A => {}\n+        x => {}\n+    }\n+}\",\n         );\n     }\n "}]}