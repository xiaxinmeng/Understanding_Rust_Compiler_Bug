{"sha": "e3c6e46168758642f0bab64da374f93ed21b1cd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYzZlNDYxNjg3NTg2NDJmMGJhYjY0ZGEzNzRmOTNlZDIxYjFjZDA=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-18T17:23:50Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-18T17:23:50Z"}, "message": "Make some methods of `Pin<&mut T>` unstable const\n\nMake the following methods unstable const under the `const_pin` feature:\n- `into_ref`\n- `get_mut`\n- `get_unchecked_mut`", "tree": {"sha": "6f5f05858054e61218163ad3d06e8860e508bdbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5f05858054e61218163ad3d06e8860e508bdbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c6e46168758642f0bab64da374f93ed21b1cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c6e46168758642f0bab64da374f93ed21b1cd0", "html_url": "https://github.com/rust-lang/rust/commit/e3c6e46168758642f0bab64da374f93ed21b1cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c6e46168758642f0bab64da374f93ed21b1cd0/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f27e3cb1b4140d9124d60df0850ef734e73b884", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f27e3cb1b4140d9124d60df0850ef734e73b884", "html_url": "https://github.com/rust-lang/rust/commit/8f27e3cb1b4140d9124d60df0850ef734e73b884"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "9f0284d5d95425e0fd6a3d68ac1a23fd63dd47c5", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3c6e46168758642f0bab64da374f93ed21b1cd0/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c6e46168758642f0bab64da374f93ed21b1cd0/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=e3c6e46168758642f0bab64da374f93ed21b1cd0", "patch": "@@ -708,8 +708,9 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Converts this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n     #[inline(always)]\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    pub fn into_ref(self) -> Pin<&'a T> {\n+    pub const fn into_ref(self) -> Pin<&'a T> {\n         Pin { pointer: self.pointer }\n     }\n \n@@ -722,9 +723,10 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// that lives for as long as the borrow of the `Pin`, not the lifetime of\n     /// the `Pin` itself. This method allows turning the `Pin` into a reference\n     /// with the same lifetime as the original `Pin`.\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_mut(self) -> &'a mut T\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    pub const fn get_mut(self) -> &'a mut T\n     where\n         T: Unpin,\n     {\n@@ -741,9 +743,10 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     ///\n     /// If the underlying data is `Unpin`, `Pin::get_mut` should be used\n     /// instead.\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub unsafe fn get_unchecked_mut(self) -> &'a mut T {\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    pub const unsafe fn get_unchecked_mut(self) -> &'a mut T {\n         self.pointer\n     }\n "}, {"sha": "490f016ab8b2e6a6c322b6ecd84e784e810e4d29", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c6e46168758642f0bab64da374f93ed21b1cd0/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c6e46168758642f0bab64da374f93ed21b1cd0/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=e3c6e46168758642f0bab64da374f93ed21b1cd0", "patch": "@@ -39,6 +39,7 @@\n #![feature(iter_order_by)]\n #![feature(cmp_min_max_by)]\n #![feature(iter_map_while)]\n+#![feature(const_mut_refs)]\n #![feature(const_pin)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_raw_ptr_deref)]"}, {"sha": "6f617c8d0c2970b54d87a3038d07e1d837b85123", "filename": "library/core/tests/pin.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3c6e46168758642f0bab64da374f93ed21b1cd0/library%2Fcore%2Ftests%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c6e46168758642f0bab64da374f93ed21b1cd0/library%2Fcore%2Ftests%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fpin.rs?ref=e3c6e46168758642f0bab64da374f93ed21b1cd0", "patch": "@@ -17,5 +17,15 @@ fn pin_const() {\n     assert_eq!(INNER_UNCHECKED, POINTER);\n \n     const REF: &'static usize = PINNED.get_ref();\n-    assert_eq!(REF, POINTER)\n+    assert_eq!(REF, POINTER);\n+\n+    // Note: `pin_mut_const` tests that the methods of `Pin<&mut T>` are usable in a const context.\n+    // A const fn is used because `&mut` is not (yet) usable in constants.\n+    const fn pin_mut_const() {\n+        let _ = Pin::new(&mut 2).into_ref();\n+        let _ = Pin::new(&mut 2).get_mut();\n+        let _ = unsafe { Pin::new(&mut 2).get_unchecked_mut() };\n+    }\n+\n+    pin_mut_const();\n }"}]}