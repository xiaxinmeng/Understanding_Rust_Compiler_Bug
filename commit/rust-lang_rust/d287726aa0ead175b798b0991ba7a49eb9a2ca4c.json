{"sha": "d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "node_id": "C_kwDOAAsO6NoAKGQyODc3MjZhYTBlYWQxNzViNzk4YjA5OTFiYTdhNDllYjlhMmNhNGM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-02T06:53:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-02T06:53:38Z"}, "message": "Rollup merge of #98639 - camsteffen:no-node-binding, r=compiler-errors\n\nFactor out `hir::Node::Binding`", "tree": {"sha": "6db63d5c80285bda71db35f92c31217215e4d688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6db63d5c80285bda71db35f92c31217215e4d688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiv+tyCRBK7hj4Ov3rIwAAJGcIADM4iAhTdNHsBbvJm512548Z\n+2WCxXDZ4qzEH8AiSxKmYd1RIwqGcL7xWrAXmOJyjGaA2tOIa8xHTddpXyqwJHsH\n7xCQ+mu0D4bUt/W/mNVPjkDaz0Q4Aaw65St8LDd/hSUrnkfHRDy1A1jQ0w6RkEHb\nzZELkdTUEC/PCAVgwvCJLuYJC39z+XOE3YTWUa5xDn3ssPNBNZCSv9GBZntNdJg7\nByXzMfi4rSEsisg1TCdzvHzOPlyUus4Un8yHC+Ai2N+C1n/YUmxGBmW5KssfdCfX\nl58jvLTTBh4aAnIt5DpK5qFiStRYNg8mrSVq0tvIOAfysClVOsVDWw09hQS0uTc=\n=Buf/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6db63d5c80285bda71db35f92c31217215e4d688\nparent 9a6fa4f118d88991458549464d960aa1e495541b\nparent ec82bc199611e7f1cf3acd612a65eed81d22636b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656744818 +0530\ncommitter GitHub <noreply@github.com> 1656744818 +0530\n\nRollup merge of #98639 - camsteffen:no-node-binding, r=compiler-errors\n\nFactor out `hir::Node::Binding`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "html_url": "https://github.com/rust-lang/rust/commit/d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a6fa4f118d88991458549464d960aa1e495541b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6fa4f118d88991458549464d960aa1e495541b", "html_url": "https://github.com/rust-lang/rust/commit/9a6fa4f118d88991458549464d960aa1e495541b"}, {"sha": "ec82bc199611e7f1cf3acd612a65eed81d22636b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec82bc199611e7f1cf3acd612a65eed81d22636b", "html_url": "https://github.com/rust-lang/rust/commit/ec82bc199611e7f1cf3acd612a65eed81d22636b"}], "stats": {"total": 59, "additions": 22, "deletions": 37}, "files": [{"sha": "ddd54f7c2089dd906154b67b7bf6133a8cef3d6e", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -192,9 +192,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_pat(&mut self, pat: &'hir Pat<'hir>) {\n-        let node =\n-            if let PatKind::Binding(..) = pat.kind { Node::Binding(pat) } else { Node::Pat(pat) };\n-        self.insert(pat.span, pat.hir_id, node);\n+        self.insert(pat.span, pat.hir_id, Node::Pat(pat));\n \n         self.with_parent(pat.hir_id, |this| {\n             intravisit::walk_pat(this, pat);"}, {"sha": "3c5dd32d2816ecea37208d1bbac1aa0c80d13531", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -362,7 +362,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 let upvar_hir_id = captured_place.get_root_variable();\n \n-                if let Some(Node::Binding(pat)) = self.infcx.tcx.hir().find(upvar_hir_id)\n+                if let Some(Node::Pat(pat)) = self.infcx.tcx.hir().find(upvar_hir_id)\n                     && let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated,\n                         _,"}, {"sha": "847694cbd10cbaa2ad09859f5634cb15583a0fdb", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -244,7 +244,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                         // for a generator).\n                         let var_hir_id = captured_place.get_root_variable();\n                         let node = self.ecx.tcx.hir().get(var_hir_id);\n-                        if let hir::Node::Binding(pat) = node {\n+                        if let hir::Node::Pat(pat) = node {\n                             if let hir::PatKind::Binding(_, _, ident, _) = pat.kind {\n                                 name = Some(ident.name);\n                             }"}, {"sha": "a2ef158ce8d324cd1338fc704764954d4a617440", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -3326,7 +3326,6 @@ pub enum Node<'hir> {\n     Ty(&'hir Ty<'hir>),\n     TypeBinding(&'hir TypeBinding<'hir>),\n     TraitRef(&'hir TraitRef<'hir>),\n-    Binding(&'hir Pat<'hir>),\n     Pat(&'hir Pat<'hir>),\n     Arm(&'hir Arm<'hir>),\n     Block(&'hir Block<'hir>),\n@@ -3378,7 +3377,6 @@ impl<'hir> Node<'hir> {\n             | Node::Block(..)\n             | Node::Ctor(..)\n             | Node::Pat(..)\n-            | Node::Binding(..)\n             | Node::Arm(..)\n             | Node::Local(..)\n             | Node::Crate(..)"}, {"sha": "fd843b0c403a6f8af3c76412bd20b84c59f04fa2", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -87,7 +87,7 @@ impl<'a> State<'a> {\n             Node::Ty(a) => self.print_type(&a),\n             Node::TypeBinding(a) => self.print_type_binding(&a),\n             Node::TraitRef(a) => self.print_trait_ref(&a),\n-            Node::Binding(a) | Node::Pat(a) => self.print_pat(&a),\n+            Node::Pat(a) => self.print_pat(&a),\n             Node::Arm(a) => self.print_arm(&a),\n             Node::Infer(_) => self.word(\"_\"),\n             Node::Block(a) => {"}, {"sha": "26b4348840820517681f25114b76e1f1e628ae26", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -302,7 +302,6 @@ impl<'hir> Map<'hir> {\n             | Node::Infer(_)\n             | Node::TraitRef(_)\n             | Node::Pat(_)\n-            | Node::Binding(_)\n             | Node::Local(_)\n             | Node::Param(_)\n             | Node::Arm(_)\n@@ -901,7 +900,7 @@ impl<'hir> Map<'hir> {\n     #[inline]\n     fn opt_ident(self, id: HirId) -> Option<Ident> {\n         match self.get(id) {\n-            Node::Binding(&Pat { kind: PatKind::Binding(_, _, ident, _), .. }) => Some(ident),\n+            Node::Pat(&Pat { kind: PatKind::Binding(_, _, ident, _), .. }) => Some(ident),\n             // A `Ctor` doesn't have an identifier itself, but its parent\n             // struct/variant does. Compare with `hir::Map::opt_span`.\n             Node::Ctor(..) => match self.find(self.get_parent_node(id))? {\n@@ -1046,7 +1045,6 @@ impl<'hir> Map<'hir> {\n             Node::Ty(ty) => ty.span,\n             Node::TypeBinding(tb) => tb.span,\n             Node::TraitRef(tr) => tr.path.span,\n-            Node::Binding(pat) => pat.span,\n             Node::Pat(pat) => pat.span,\n             Node::Arm(arm) => arm.span,\n             Node::Block(block) => block.span,\n@@ -1263,7 +1261,6 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         Some(Node::Ty(_)) => node_str(\"type\"),\n         Some(Node::TypeBinding(_)) => node_str(\"type binding\"),\n         Some(Node::TraitRef(_)) => node_str(\"trait ref\"),\n-        Some(Node::Binding(_)) => node_str(\"local\"),\n         Some(Node::Pat(_)) => node_str(\"pat\"),\n         Some(Node::Param(_)) => node_str(\"param\"),\n         Some(Node::Arm(_)) => node_str(\"arm\"),"}, {"sha": "e27761381f6331b5d1d156230a8b7474870373ee", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -997,7 +997,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 continue;\n             };\n             let pat = match tcx.hir().get(arg.pat.hir_id) {\n-                Node::Pat(pat) | Node::Binding(pat) => pat,\n+                Node::Pat(pat) => pat,\n                 node => bug!(\"pattern became {:?}\", node),\n             };\n             let pattern = pat_from_hir(tcx, self.param_env, self.typeck_results, pat);"}, {"sha": "35a0afd6813a89c0e7195f87caa63b95ccfdb922", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> Cx<'tcx> {\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     pub(crate) fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Pat<'tcx> {\n         let p = match self.tcx.hir().get(p.hir_id) {\n-            Node::Pat(p) | Node::Binding(p) => p,\n+            Node::Pat(p) => p,\n             node => bug!(\"pattern became {:?}\", node),\n         };\n         pat_from_hir(self.tcx, self.param_env, self.typeck_results(), p)"}, {"sha": "0a0c674d179e9596ba3f779402297585cab68837", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -623,9 +623,9 @@ impl<'tcx> SaveContext<'tcx> {\n                 }\n             },\n \n-            Node::Binding(&hir::Pat {\n-                kind: hir::PatKind::Binding(_, canonical_id, ..), ..\n-            }) => Res::Local(canonical_id),\n+            Node::Pat(&hir::Pat { kind: hir::PatKind::Binding(_, canonical_id, ..), .. }) => {\n+                Res::Local(canonical_id)\n+            }\n \n             _ => Res::Err,\n         }"}, {"sha": "53ca027bb57f52f3dc5539560401426f6088fd88", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         None,\n                         hir::Path { res: hir::def::Res::Local(hir_id), .. },\n                     )) => {\n-                        if let Some(hir::Node::Binding(pat)) = self.tcx.hir().find(*hir_id) {\n+                        if let Some(hir::Node::Pat(pat)) = self.tcx.hir().find(*hir_id) {\n                             let parent = self.tcx.hir().get_parent_node(pat.hir_id);\n                             primary_span = pat.span;\n                             secondary_span = pat.span;"}, {"sha": "365ff429243f1ed1b0b8b2a68e7d56b3e4a86622", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -251,7 +251,6 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n                 | hir::Node::Ty(..)\n                 | hir::Node::TypeBinding(..)\n                 | hir::Node::TraitRef(..)\n-                | hir::Node::Binding(..)\n                 | hir::Node::Pat(..)\n                 | hir::Node::Arm(..)\n                 | hir::Node::Local(..)"}, {"sha": "1ac7bfba06ba217a38c4d23560be1ac841116126", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir;\n use clippy_utils::ty::contains_ty;\n use rustc_hir::intravisit;\n-use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n+use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node, Pat, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n@@ -132,7 +132,10 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n // TODO: Replace with Map::is_argument(..) when it's fixed\n fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n     match map.find(id) {\n-        Some(Node::Binding(_)) => (),\n+        Some(Node::Pat(Pat {\n+            kind: PatKind::Binding(..),\n+            ..\n+        })) => (),\n         _ => return false,\n     }\n \n@@ -144,15 +147,6 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n                 self.set.remove(&lid);\n-                let map = &self.cx.tcx.hir();\n-                if let Some(Node::Binding(_)) = map.find(cmt.hir_id) {\n-                    if self.set.contains(&lid) {\n-                        // let y = x where x is known\n-                        // remove x, insert y\n-                        self.set.insert(cmt.hir_id);\n-                        self.set.remove(&lid);\n-                    }\n-                }\n             }\n         }\n     }"}, {"sha": "5bf4313b41a49ae062fa7e8faf6f55ef83f52b9b", "filename": "src/tools/clippy/clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -125,7 +125,7 @@ fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>)\n         // Find id of the local that expr_end_of_block resolves to\n         if let ExprKind::Path(QPath::Resolved(None, expr_path)) = expr_end_of_block.kind;\n         if let Res::Local(expr_res) = expr_path.res;\n-        if let Some(Node::Binding(res_pat)) = cx.tcx.hir().find(expr_res);\n+        if let Some(Node::Pat(res_pat)) = cx.tcx.hir().find(expr_res);\n \n         // Find id of the local we found in the block\n         if let PatKind::Binding(BindingAnnotation::Unannotated, local_hir_id, _ident, None) = local.pat.kind;"}, {"sha": "aedf3810b23e95c88de5d867eea3c03d446d0e24", "filename": "src/tools/clippy/clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -43,7 +43,7 @@ fn mut_warn_with_span(cx: &LateContext<'_>, span: Option<Span>) {\n fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId> {\n     if_chain! {\n         if let Some(hir_id) = path_to_local(bound);\n-        if let Node::Binding(pat) = cx.tcx.hir().get(hir_id);\n+        if let Node::Pat(pat) = cx.tcx.hir().get(hir_id);\n         if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n         then {\n             return Some(hir_id);"}, {"sha": "1439f1f4c75d5b03555c10edc1c2d67166c46d86", "filename": "src/tools/clippy/clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -63,7 +63,7 @@ pub(super) fn check<'tcx>(\n                         Res::Local(hir_id) => {\n                             let node = cx.tcx.hir().get(hir_id);\n                             if_chain! {\n-                                if let Node::Binding(pat) = node;\n+                                if let Node::Pat(pat) = node;\n                                 if let PatKind::Binding(bind_ann, ..) = pat.kind;\n                                 if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n                                 let parent_node = cx.tcx.hir().get_parent_node(hir_id);"}, {"sha": "2ce9d0e77c1fd167f093fd0cb2613bfaf9bab27b", "filename": "src/tools/clippy/clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -71,8 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             && let Some(const3) = check_for_unsigned_int_constant(cx, right)\n             // Also ensures the const is nonzero since zero can't be a divisor\n             && const1 == const2 && const2 == const3\n-            && let Some(hir_id) = path_to_local(expr3)\n-            && let Some(Node::Binding(_)) = cx.tcx.hir().find(hir_id) {\n+            && let Some(hir_id) = path_to_local(expr3) {\n                 // Apply only to params or locals with annotated types\n                 match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n                     Some(Node::Param(..)) => (),"}, {"sha": "43e9451f7d37eb4f42b24e2b1bb39d2c5b8c74e8", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             |diag| {\n                 if_chain! {\n                     if let Some(id) = path_to_local(recv);\n-                    if let Node::Binding(pat) = cx.tcx.hir().get(id);\n+                    if let Node::Pat(pat) = cx.tcx.hir().get(id);\n                     if let PatKind::Binding(ann, _, _, _)  = pat.kind;\n                     if ann != BindingAnnotation::Mutable;\n                     then {"}, {"sha": "5cfd02232dec68e95e28ffd7d4e24f2712e90d34", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d287726aa0ead175b798b0991ba7a49eb9a2ca4c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=d287726aa0ead175b798b0991ba7a49eb9a2ca4c", "patch": "@@ -183,7 +183,7 @@ pub fn expr_or_init<'a, 'b, 'tcx: 'b>(cx: &LateContext<'tcx>, mut expr: &'a Expr\n pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx Expr<'tcx>> {\n     let hir = cx.tcx.hir();\n     if_chain! {\n-        if let Some(Node::Binding(pat)) = hir.find(hir_id);\n+        if let Some(Node::Pat(pat)) = hir.find(hir_id);\n         if matches!(pat.kind, PatKind::Binding(BindingAnnotation::Unannotated, ..));\n         let parent = hir.get_parent_node(hir_id);\n         if let Some(Node::Local(local)) = hir.find(parent);"}]}