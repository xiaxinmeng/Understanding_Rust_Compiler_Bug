{"sha": "8d2f80bab308b7abe62fc6d817f12f21e66bfa53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMmY4MGJhYjMwOGI3YWJlNjJmYzZkODE3ZjEyZjIxZTY2YmZhNTM=", "commit": {"author": {"name": "Petr Hosek", "email": "phosek@google.com", "date": "2019-07-02T00:32:43Z"}, "committer": {"name": "Petr Hosek", "email": "phosek@google.com", "date": "2019-07-02T23:18:06Z"}, "message": "Use link attributes on extern \"C\" blocks with llvm-libuwind\n\nWhen llvm-libunwind feature is enabled, we need to use link attribute on\nextern \"C\" blocks to make sure that symbols provided by LLVM's libunwind\nthat's built as part of Rust's libunwind crate are re-exported.\n\nThis addresses issue #62088.", "tree": {"sha": "08b3bdbdc609de4f321bcad87c1c80975969c83e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b3bdbdc609de4f321bcad87c1c80975969c83e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d2f80bab308b7abe62fc6d817f12f21e66bfa53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2f80bab308b7abe62fc6d817f12f21e66bfa53", "html_url": "https://github.com/rust-lang/rust/commit/8d2f80bab308b7abe62fc6d817f12f21e66bfa53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d2f80bab308b7abe62fc6d817f12f21e66bfa53/comments", "author": {"login": "petrhosek", "id": 283696, "node_id": "MDQ6VXNlcjI4MzY5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/283696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrhosek", "html_url": "https://github.com/petrhosek", "followers_url": "https://api.github.com/users/petrhosek/followers", "following_url": "https://api.github.com/users/petrhosek/following{/other_user}", "gists_url": "https://api.github.com/users/petrhosek/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrhosek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrhosek/subscriptions", "organizations_url": "https://api.github.com/users/petrhosek/orgs", "repos_url": "https://api.github.com/users/petrhosek/repos", "events_url": "https://api.github.com/users/petrhosek/events{/privacy}", "received_events_url": "https://api.github.com/users/petrhosek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrhosek", "id": 283696, "node_id": "MDQ6VXNlcjI4MzY5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/283696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrhosek", "html_url": "https://github.com/petrhosek", "followers_url": "https://api.github.com/users/petrhosek/followers", "following_url": "https://api.github.com/users/petrhosek/following{/other_user}", "gists_url": "https://api.github.com/users/petrhosek/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrhosek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrhosek/subscriptions", "organizations_url": "https://api.github.com/users/petrhosek/orgs", "repos_url": "https://api.github.com/users/petrhosek/repos", "events_url": "https://api.github.com/users/petrhosek/events{/privacy}", "received_events_url": "https://api.github.com/users/petrhosek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17e62f77f954bed97aae839624bfd6dd68342daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/17e62f77f954bed97aae839624bfd6dd68342daf", "html_url": "https://github.com/rust-lang/rust/commit/17e62f77f954bed97aae839624bfd6dd68342daf"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "e92c68f5b0c5736f974d57f640f2bdc16ae48895", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d2f80bab308b7abe62fc6d817f12f21e66bfa53/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2f80bab308b7abe62fc6d817f12f21e66bfa53/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=8d2f80bab308b7abe62fc6d817f12f21e66bfa53", "patch": "@@ -4,11 +4,13 @@ fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n-    if cfg!(feature = \"llvm-libunwind\") &&\n+    // FIXME: the not(bootstrap) part is needed because of the issue addressed by #62286,\n+    // and could be removed once that change is in beta.\n+    if cfg!(all(not(bootstrap), feature = \"llvm-libunwind\")) &&\n         (target.contains(\"linux\") ||\n          target.contains(\"fuchsia\")) {\n         // Build the unwinding from libunwind C/C++ source code.\n-        #[cfg(feature = \"llvm-libunwind\")]\n+        #[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n         llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n@@ -42,7 +44,7 @@ fn main() {\n     }\n }\n \n-#[cfg(feature = \"llvm-libunwind\")]\n+#[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n mod llvm_libunwind {\n     use std::env;\n     use std::path::Path;"}, {"sha": "7e640897af70559fbd6db9f526b4f64f9d4459a6", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d2f80bab308b7abe62fc6d817f12f21e66bfa53/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2f80bab308b7abe62fc6d817f12f21e66bfa53/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=8d2f80bab308b7abe62fc6d817f12f21e66bfa53", "patch": "@@ -67,6 +67,8 @@ pub enum _Unwind_Context {}\n \n pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                                                       exception: *mut _Unwind_Exception);\n+#[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+           link(name = \"unwind\", kind = \"static\"))]\n extern \"C\" {\n     #[unwind(allowed)]\n     pub fn _Unwind_Resume(exception: *mut _Unwind_Exception) -> !;\n@@ -91,6 +93,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     }\n     pub use _Unwind_Action::*;\n \n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+               link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         pub fn _Unwind_GetGR(ctx: *mut _Unwind_Context, reg_index: c_int) -> _Unwind_Word;\n         pub fn _Unwind_SetGR(ctx: *mut _Unwind_Context, reg_index: c_int, value: _Unwind_Word);\n@@ -144,6 +148,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     pub const UNWIND_POINTER_REG: c_int = 12;\n     pub const UNWIND_IP_REG: c_int = 15;\n \n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+               link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         fn _Unwind_VRS_Get(ctx: *mut _Unwind_Context,\n                            regclass: _Unwind_VRS_RegClass,\n@@ -206,6 +212,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n cfg_if::cfg_if! {\n if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     // Not 32-bit iOS\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+               link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]\n         pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n@@ -215,6 +223,8 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     }\n } else {\n     // 32-bit iOS uses SjLj and does not provide _Unwind_Backtrace()\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+               link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]\n         pub fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception) -> _Unwind_Reason_Code;"}]}