{"sha": "bb98791f5155f64eba0eb7f95a42b9278d961a9a", "node_id": "C_kwDOAAsO6NoAKGJiOTg3OTFmNTE1NWY2NGViYTBlYjdmOTVhNDJiOTI3OGQ5NjFhOWE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-16T10:52:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-16T10:52:31Z"}, "message": "Merge #10773\n\n10773: fix: Remove faulty logic for ascending test attributes for runnables r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10768\r\nbors r+\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "ddb8ddd6211bca3cec9e808e1f258d134194f16e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddb8ddd6211bca3cec9e808e1f258d134194f16e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb98791f5155f64eba0eb7f95a42b9278d961a9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhk41vCRBK7hj4Ov3rIwAAdQQIABjImUap9LqHXeEF01kzGQT1\ntxlhqWPL1jUbZt+YzUD5ae3bZ9OGweviByS8IWbZxzjXn3Gp/QqB3TgjjX15iSF/\nzUe70Nha1oo/k+MCr/VYtx9WEVULD6q77tTIXGYfhMdckwIRIcnrJlBY04M5lO+3\nTHdk1ZyElZ2QCHNU7kEkAQvFiN/yVQYLmgEbuGJAj0dVYpo1rrAoRo+AYmKRwBMC\nO52UQSBD6+pENvb9gj2vim5wdSIiZXcDD7L+9SSe/Sc+j1TUazmbmThCXVg2Ta8x\nrbZcUPiPwGeHmCJdLqJDCfFF/plptJhX82m12eLUi6heOcxyIZfMqUVFgnn5KFg=\n=0FjO\n-----END PGP SIGNATURE-----\n", "payload": "tree ddb8ddd6211bca3cec9e808e1f258d134194f16e\nparent 73668334f05c3446b04116ccc3156240d2d8ab19\nparent d2513deb62989ab6fa33bcf8747ac2dfa36ffdfa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637059951 +0000\ncommitter GitHub <noreply@github.com> 1637059951 +0000\n\nMerge #10773\n\n10773: fix: Remove faulty logic for ascending test attributes for runnables r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10768\r\nbors r+\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb98791f5155f64eba0eb7f95a42b9278d961a9a", "html_url": "https://github.com/rust-lang/rust/commit/bb98791f5155f64eba0eb7f95a42b9278d961a9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb98791f5155f64eba0eb7f95a42b9278d961a9a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73668334f05c3446b04116ccc3156240d2d8ab19", "url": "https://api.github.com/repos/rust-lang/rust/commits/73668334f05c3446b04116ccc3156240d2d8ab19", "html_url": "https://github.com/rust-lang/rust/commit/73668334f05c3446b04116ccc3156240d2d8ab19"}, {"sha": "d2513deb62989ab6fa33bcf8747ac2dfa36ffdfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2513deb62989ab6fa33bcf8747ac2dfa36ffdfa", "html_url": "https://github.com/rust-lang/rust/commit/d2513deb62989ab6fa33bcf8747ac2dfa36ffdfa"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "671fcb0ba8bc5911130eb820d2761ab05fa51a73", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb98791f5155f64eba0eb7f95a42b9278d961a9a/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb98791f5155f64eba0eb7f95a42b9278d961a9a/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=bb98791f5155f64eba0eb7f95a42b9278d961a9a", "patch": "@@ -701,6 +701,16 @@ impl<N: AstNode> InFile<N> {\n     }\n }\n \n+impl InFile<ast::Fn> {\n+    pub fn map_out_of_test_attr(self, db: &dyn db::AstDatabase) -> InFile<ast::Fn> {\n+        (|| {\n+            let InFile { file_id, value } = self.file_id.call_node(db)?;\n+            ast::Fn::cast(value).map(|n| InFile::new(file_id, n))\n+        })()\n+        .unwrap_or(self)\n+    }\n+}\n+\n /// In Rust, macros expand token trees to token trees. When we want to turn a\n /// token tree into an AST node, we need to figure out what kind of AST node we\n /// want: something like `foo` can be a type, an expression, or a pattern."}, {"sha": "00b60a390260e42d2e3cae5e3c8cc5f36503ce9d", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb98791f5155f64eba0eb7f95a42b9278d961a9a/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb98791f5155f64eba0eb7f95a42b9278d961a9a/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=bb98791f5155f64eba0eb7f95a42b9278d961a9a", "patch": "@@ -236,7 +236,9 @@ fn find_related_tests(\n                 .filter_map(|token| token.ancestors().find_map(ast::Fn::cast))\n                 .map(|f| hir::InFile::new(sema.hir_file_for(f.syntax()), f));\n \n-            for InFile { value: ref fn_def, .. } in functions {\n+            for fn_def in functions {\n+                // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n+                let InFile { value: fn_def, .. } = &fn_def.map_out_of_test_attr(sema.db);\n                 if let Some(runnable) = as_test_runnable(sema, fn_def) {\n                     // direct test\n                     tests.insert(runnable);\n@@ -292,7 +294,8 @@ fn parent_test_module(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Optio\n }\n \n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {\n-    let func = def.source(sema.db)?;\n+    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n+    let func = def.source(sema.db)?.map_out_of_test_attr(sema.db);\n     let name_string = def.name(sema.db).to_string();\n \n     let root = def.module(sema.db).krate().root_module(sema.db);\n@@ -501,6 +504,8 @@ fn has_test_function_or_multiple_test_submodules(\n         match item {\n             hir::ModuleDef::Function(f) => {\n                 if let Some(it) = f.source(sema.db) {\n+                    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n+                    let it = it.map_out_of_test_attr(sema.db);\n                     if test_related_attribute(&it.value).is_some() {\n                         return true;\n                     }"}]}