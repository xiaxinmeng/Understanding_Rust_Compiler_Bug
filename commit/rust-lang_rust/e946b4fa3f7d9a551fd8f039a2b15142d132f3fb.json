{"sha": "e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NDZiNGZhM2Y3ZDlhNTUxZmQ4ZjAzOWEyYjE1MTQyZDEzMmYzZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-29T04:01:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-29T04:01:53Z"}, "message": "auto merge of #6778 : Aatch/rust/pass-refactor, r=graydon\n\nRefactor the optimization passes to explicitly use the passes. This commit just re-implements the same passes as were already being run.\r\n\r\nIt also adds an option (behind `-Z`) to run the LLVM lint pass on the unoptimized IR.\r\n\r\nThis should close #2812. It is also the first step towards #2396\r\n\r\n----------------\r\n\r\nThis is pretty much just an initial \"get it out there\" PR. With finer control over the optimization passes coming later. I also just blindly copied the passes we were already doing, so there could almost certainly be some more work in paring it down.\r\n\r\nThe other thing is the addition of the `mergefunctions` pass, which is currently enabled at `--opt-level=3` and does have a small impact on the code size. However the fact that it is at the end of the optimization pipeline is probably not ideal, so some more experimentation is in order.", "tree": {"sha": "210f3adbe9945a3c10c6fe84c996c67aa91363a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/210f3adbe9945a3c10c6fe84c996c67aa91363a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "html_url": "https://github.com/rust-lang/rust/commit/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0d6486ed628cdf6e35939e7b0ccd796cbc5b6eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d6486ed628cdf6e35939e7b0ccd796cbc5b6eb", "html_url": "https://github.com/rust-lang/rust/commit/e0d6486ed628cdf6e35939e7b0ccd796cbc5b6eb"}, {"sha": "4ad0b8ac585487b6f29dd6d97bcfb7a1742f1eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad0b8ac585487b6f29dd6d97bcfb7a1742f1eb1", "html_url": "https://github.com/rust-lang/rust/commit/4ad0b8ac585487b6f29dd6d97bcfb7a1742f1eb1"}], "stats": {"total": 819, "additions": 719, "deletions": 100}, "files": [{"sha": "f6b50b5491a0028165afebab761fe8ee5a8fcd0e", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -275,7 +275,7 @@ DRIVER_CRATE := $(S)src/driver/driver.rs\n \n # FIXME: x86-ism\n LLVM_COMPONENTS=x86 arm mips ipo bitreader bitwriter linker asmparser jit mcjit \\\n-                interpreter\n+                interpreter instrumentation\n \n define DEF_LLVM_VARS\n # The configure script defines these variables with the target triples"}, {"sha": "ffe03598e5311ec28365e62cb8fdd13a5b74b5b7", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -22,7 +22,7 @@ LLVM_EXTRA_INCDIRS_$(1)= -iquote $(S)src/llvm/include \\\n                          -iquote llvm/$(1)/include\n endif\n \n-RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, RustWrapper.cpp)\n+RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, RustWrapper.cpp PassWrapper.cpp)\n \n RUSTLLVM_DEF_$(1) := rustllvm/rustllvm$(CFG_DEF_SUFFIX_$(1))\n "}, {"sha": "51d60437868868161c313f9e7f0558cb06e0f929", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 18, "deletions": 52, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -180,9 +180,11 @@ pub mod write {\n     use driver::session::Session;\n     use driver::session;\n     use lib::llvm::llvm;\n-    use lib::llvm::{False, ModuleRef, mk_pass_manager, mk_target_data};\n+    use lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data};\n     use lib;\n \n+    use back::passes;\n+\n     use core::libc::{c_int, c_uint};\n     use core::path::Path;\n     use core::run;\n@@ -202,16 +204,12 @@ pub mod write {\n         unsafe {\n             let opts = sess.opts;\n             if sess.time_llvm_passes() { llvm::LLVMRustEnableTimePasses(); }\n-            let mut pm = mk_pass_manager();\n             let td = mk_target_data(sess.targ_cfg.target_strs.data_layout);\n+            let pm = mk_pass_manager();\n             llvm::LLVMAddTargetData(td.lltd, pm.llpm);\n-            // FIXME (#2812): run the linter here also, once there are llvm-c\n-            // bindings for it.\n \n             // Generate a pre-optimization intermediate file if -save-temps\n             // was specified.\n-\n-\n             if opts.save_temps {\n                 match output_type {\n                   output_type_bitcode => {\n@@ -230,50 +228,22 @@ pub mod write {\n                   }\n                 }\n             }\n-            if !sess.no_verify() { llvm::LLVMAddVerifierPass(pm.llpm); }\n-            // FIXME (#2396): This is mostly a copy of the bits of opt's -O2\n-            // that are available in the C api.\n-            // Also: We might want to add optimization levels like -O1, -O2,\n-            // -Os, etc\n-            // Also: Should we expose and use the pass lists used by the opt\n-            // tool?\n-\n-            if opts.optimize != session::No {\n-                let fpm = mk_pass_manager();\n-                llvm::LLVMAddTargetData(td.lltd, fpm.llpm);\n-\n-                let FPMB = llvm::LLVMPassManagerBuilderCreate();\n-                llvm::LLVMPassManagerBuilderSetOptLevel(FPMB, 2u as c_uint);\n-                llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(\n-                    FPMB, fpm.llpm);\n-                llvm::LLVMPassManagerBuilderDispose(FPMB);\n-\n-                llvm::LLVMRunPassManager(fpm.llpm, llmod);\n-                let mut threshold = 225;\n-                if opts.optimize == session::Aggressive { threshold = 275; }\n-\n-                let MPMB = llvm::LLVMPassManagerBuilderCreate();\n-                llvm::LLVMPassManagerBuilderSetOptLevel(MPMB,\n-                                                        opts.optimize as\n-                                                            c_uint);\n-                llvm::LLVMPassManagerBuilderSetSizeLevel(MPMB, False);\n-                llvm::LLVMPassManagerBuilderSetDisableUnitAtATime(MPMB,\n-                                                                  False);\n-                llvm::LLVMPassManagerBuilderSetDisableUnrollLoops(MPMB,\n-                                                                  False);\n-                llvm::LLVMPassManagerBuilderSetDisableSimplifyLibCalls(MPMB,\n-                                                                       False);\n-\n-                if threshold != 0u {\n-                    llvm::LLVMPassManagerBuilderUseInlinerWithThreshold\n-                        (MPMB, threshold as c_uint);\n-                }\n-                llvm::LLVMPassManagerBuilderPopulateModulePassManager(\n-                    MPMB, pm.llpm);\n \n-                llvm::LLVMPassManagerBuilderDispose(MPMB);\n+            let mut mpm = passes::PassManager::new(td.lltd);\n+\n+            if !sess.no_verify() {\n+                mpm.addPass(llvm::LLVMCreateVerifierPass());\n             }\n-            if !sess.no_verify() { llvm::LLVMAddVerifierPass(pm.llpm); }\n+\n+            if sess.lint_llvm() {\n+                mpm.addPass(llvm::LLVMCreateLintPass());\n+            }\n+\n+            passes::populatePassManager(&mut mpm, opts.optimize);\n+\n+            debug!(\"Running Module Optimization Pass\");\n+            mpm.run(llmod);\n+\n             if is_object_or_assembly_or_exe(output_type) || opts.jit {\n                 let LLVMOptNone       = 0 as c_int; // -O0\n                 let LLVMOptLess       = 1 as c_int; // -O1\n@@ -312,12 +282,9 @@ pub mod write {\n                     // Always output the bitcode file with --save-temps\n \n                     let filename = output.with_filetype(\"opt.bc\");\n-                    llvm::LLVMRunPassManager(pm.llpm, llmod);\n                     str::as_c_str(filename.to_str(), |buf| {\n                         llvm::LLVMWriteBitcodeToFile(llmod, buf)\n                     });\n-                    pm = mk_pass_manager();\n-\n                     // Save the assembly file if -S is used\n                     if output_type == output_type_assembly {\n                         WriteOutputFile(\n@@ -377,7 +344,6 @@ pub mod write {\n             } else {\n                 // If only a bitcode file is asked for by using the\n                 // '--emit-llvm' flag, then output it here\n-                llvm::LLVMRunPassManager(pm.llpm, llmod);\n                 str::as_c_str(output.to_str(),\n                             |buf| llvm::LLVMWriteBitcodeToFile(llmod, buf) );\n             }"}, {"sha": "ba4170fde56855f2c35343e2bb6b4236a062bd05", "filename": "src/librustc/back/passes.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -0,0 +1,154 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::prelude::*;\n+\n+use driver::session;\n+use lib::llvm::{PassRef, ModuleRef,PassManagerRef,TargetDataRef};\n+use lib::llvm::llvm;\n+use lib;\n+\n+pub struct PassManager {\n+    priv llpm: PassManagerRef\n+}\n+\n+impl Drop for PassManager {\n+    fn finalize(&self) {\n+        unsafe {\n+            llvm::LLVMDisposePassManager(self.llpm);\n+        }\n+    }\n+}\n+\n+impl PassManager {\n+    pub fn new(td: TargetDataRef) -> PassManager {\n+        unsafe {\n+            let pm = PassManager {\n+                llpm: llvm::LLVMCreatePassManager()\n+            };\n+            llvm::LLVMAddTargetData(td, pm.llpm);\n+\n+            return pm;\n+        }\n+    }\n+\n+    pub fn addPass(&mut self, pass:PassRef) {\n+        unsafe {\n+            llvm::LLVMAddPass(self.llpm, pass);\n+        }\n+    }\n+\n+    pub fn run(&self, md:ModuleRef) -> bool {\n+        unsafe {\n+            llvm::LLVMRunPassManager(self.llpm, md) == lib::llvm::True\n+        }\n+    }\n+}\n+\n+\n+pub fn populatePassManager(pm: &mut PassManager, level:session::OptLevel) {\n+    unsafe {\n+        // We add a lot of normally-unused prototypes, so always strip them\n+        // straight away, later passes will get rid of any that are optimized\n+        // away\n+        pm.addPass(llvm::LLVMCreateStripDeadPrototypesPass());\n+        if level == session::No {\n+            pm.addPass(llvm::LLVMCreateAlwaysInlinerPass());\n+\n+            return;\n+        }\n+\n+        //NOTE: Add library info\n+\n+        pm.addPass(llvm::LLVMCreateTypeBasedAliasAnalysisPass());\n+        pm.addPass(llvm::LLVMCreateBasicAliasAnalysisPass());\n+\n+        pm.addPass(llvm::LLVMCreateSROAPass());\n+        pm.addPass(llvm::LLVMCreateEarlyCSEPass());\n+        pm.addPass(llvm::LLVMCreateLowerExpectIntrinsicPass());\n+\n+        pm.addPass(llvm::LLVMCreateGlobalOptimizerPass());\n+        pm.addPass(llvm::LLVMCreateIPSCCPPass());\n+        pm.addPass(llvm::LLVMCreateDeadArgEliminationPass());\n+        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n+        pm.addPass(llvm::LLVMCreateCFGSimplificationPass());\n+\n+        pm.addPass(llvm::LLVMCreatePruneEHPass());\n+\n+        if level == session::Aggressive {\n+            // Do this before inlining, since inlining might\n+            // make minor changes to functions that mean they\n+            // can't be merged, despite being almost identical\n+            pm.addPass(llvm::LLVMCreateMergeFunctionsPass());\n+        }\n+\n+        match level {\n+            session::Less       => pm.addPass(llvm::LLVMCreateFunctionInliningPass(200)),\n+            session::Default    => pm.addPass(llvm::LLVMCreateFunctionInliningPass(225)),\n+            session::Aggressive => pm.addPass(llvm::LLVMCreateFunctionInliningPass(275)),\n+            session::No         => ()\n+        }\n+\n+        pm.addPass(llvm::LLVMCreateFunctionAttrsPass());\n+\n+        if level == session::Aggressive {\n+            pm.addPass(llvm::LLVMCreateArgumentPromotionPass());\n+        }\n+\n+        pm.addPass(llvm::LLVMCreateEarlyCSEPass());\n+        pm.addPass(llvm::LLVMCreateSimplifyLibCallsPass());\n+        pm.addPass(llvm::LLVMCreateJumpThreadingPass());\n+        pm.addPass(llvm::LLVMCreateCorrelatedValuePropagationPass());\n+        pm.addPass(llvm::LLVMCreateCFGSimplificationPass());\n+        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n+\n+        pm.addPass(llvm::LLVMCreateTailCallEliminationPass());\n+        pm.addPass(llvm::LLVMCreateCFGSimplificationPass());\n+        pm.addPass(llvm::LLVMCreateReassociatePass());\n+        pm.addPass(llvm::LLVMCreateLoopRotatePass());\n+        pm.addPass(llvm::LLVMCreateLICMPass());\n+\n+        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n+        pm.addPass(llvm::LLVMCreateIndVarSimplifyPass());\n+        pm.addPass(llvm::LLVMCreateLoopIdiomPass());\n+        pm.addPass(llvm::LLVMCreateLoopDeletionPass());\n+\n+        if level == session::Aggressive {\n+            pm.addPass(llvm::LLVMCreateLoopVectorizePass());\n+        }\n+        pm.addPass(llvm::LLVMCreateLoopUnrollPass());\n+\n+        if level != session::Less {\n+            pm.addPass(llvm::LLVMCreateGVNPass());\n+        }\n+        pm.addPass(llvm::LLVMCreateMemCpyOptPass());\n+        pm.addPass(llvm::LLVMCreateSCCPPass());\n+\n+        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n+        pm.addPass(llvm::LLVMCreateJumpThreadingPass());\n+        pm.addPass(llvm::LLVMCreateCorrelatedValuePropagationPass());\n+        pm.addPass(llvm::LLVMCreateDeadStoreEliminationPass());\n+\n+        pm.addPass(llvm::LLVMCreateBBVectorizePass());\n+        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n+        pm.addPass(llvm::LLVMCreateEarlyCSEPass());\n+\n+        pm.addPass(llvm::LLVMCreateLoopUnrollPass());\n+\n+        pm.addPass(llvm::LLVMCreateAggressiveDCEPass());\n+        pm.addPass(llvm::LLVMCreateCFGSimplificationPass());\n+        pm.addPass(llvm::LLVMCreateInstructionSimplifierPass());\n+\n+        if level != session::Less {\n+            pm.addPass(llvm::LLVMCreateGlobalDCEPass());\n+            pm.addPass(llvm::LLVMCreateConstantMergePass());\n+        }\n+    }\n+}"}, {"sha": "3f2467948a2239abfba965442b6638983c6eecbf", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -69,6 +69,7 @@ pub static extra_debug_info: uint = 1 << 21;\n pub static statik: uint = 1 << 22;\n pub static print_link_args: uint = 1 << 23;\n pub static no_debug_borrows: uint = 1 << 24;\n+pub static lint_llvm : uint = 1 << 25;\n \n pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ~[(~\"verbose\", ~\"in general, enable more debug printouts\", verbose),\n@@ -107,6 +108,9 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n      (~\"no-debug-borrows\",\n       ~\"do not show where borrow checks fail\",\n       no_debug_borrows),\n+     (~\"lint-llvm\",\n+      ~\"Run the LLVM lint pass on the pre-optimization IR\",\n+      lint_llvm),\n     ]\n }\n \n@@ -265,6 +269,7 @@ pub impl Session_ {\n     fn meta_stats(@self) -> bool { self.debugging_opt(meta_stats) }\n     fn asm_comments(@self) -> bool { self.debugging_opt(asm_comments) }\n     fn no_verify(@self) -> bool { self.debugging_opt(no_verify) }\n+    fn lint_llvm(@self) -> bool { self.debugging_opt(lint_llvm) }\n     fn trace(@self) -> bool { self.debugging_opt(trace) }\n     fn coherence(@self) -> bool { self.debugging_opt(coherence) }\n     fn borrowck_stats(@self) -> bool { self.debugging_opt(borrowck_stats) }"}, {"sha": "fc655ed1370414b44e355199e142dd34b70bb58a", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 220, "deletions": 1, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -215,13 +215,15 @@ pub enum ObjectFile_opaque {}\n pub type ObjectFileRef = *ObjectFile_opaque;\n pub enum SectionIterator_opaque {}\n pub type SectionIteratorRef = *SectionIterator_opaque;\n+pub enum Pass_opaque {}\n+pub type PassRef = *Pass_opaque;\n \n pub mod llvm {\n     use super::{AtomicBinOp, AtomicOrdering, BasicBlockRef};\n     use super::{Bool, BuilderRef, ContextRef, MemoryBufferRef, ModuleRef};\n     use super::{ObjectFileRef, Opcode, PassManagerRef, PassManagerBuilderRef};\n     use super::{SectionIteratorRef, TargetDataRef, TypeKind, TypeRef, UseRef};\n-    use super::{ValueRef};\n+    use super::{ValueRef,PassRef};\n \n     use core::libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong};\n \n@@ -1654,14 +1656,34 @@ pub mod llvm {\n         /** Creates a pass manager. */\n         #[fast_ffi]\n         pub unsafe fn LLVMCreatePassManager() -> PassManagerRef;\n+        /** Creates a function-by-function pass manager */\n+        #[fast_ffi]\n+        pub unsafe fn LLVMCreateFunctionPassManagerForModule(M:ModuleRef) -> PassManagerRef;\n+\n         /** Disposes a pass manager. */\n         #[fast_ffi]\n         pub unsafe fn LLVMDisposePassManager(PM: PassManagerRef);\n+\n         /** Runs a pass manager on a module. */\n         #[fast_ffi]\n         pub unsafe fn LLVMRunPassManager(PM: PassManagerRef,\n                                          M: ModuleRef) -> Bool;\n \n+        /** Runs the function passes on the provided function. */\n+        #[fast_ffi]\n+        pub unsafe fn LLVMRunFunctionPassManager(FPM:PassManagerRef, F:ValueRef) -> Bool;\n+\n+        /** Initializes all the function passes scheduled in the manager */\n+        #[fast_ffi]\n+        pub unsafe fn LLVMInitializeFunctionPassManager(FPM:PassManagerRef) -> Bool;\n+\n+        /** Finalizes all the function passes scheduled in the manager */\n+        #[fast_ffi]\n+        pub unsafe fn LLVMFinalizeFunctionPassManager(FPM:PassManagerRef) -> Bool;\n+\n+        #[fast_ffi]\n+        pub unsafe fn LLVMAddPass(PM:PassManagerRef,P:PassRef);\n+\n         /** Adds a verification pass. */\n         #[fast_ffi]\n         pub unsafe fn LLVMAddVerifierPass(PM: PassManagerRef);\n@@ -1903,6 +1925,203 @@ pub mod llvm {\n                                     Constraints: *c_char, SideEffects: Bool,\n                                     AlignStack: Bool, Dialect: c_uint)\n                                  -> ValueRef;\n+\n+        // LLVM Passes\n+\n+        #[fast_ffi]\n+        pub fn LLVMCreateStripSymbolsPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateStripNonDebugSymbolsPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateStripDebugDeclarePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateStripDeadDebugInfoPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateConstantMergePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateGlobalOptimizerPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateGlobalDCEPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateAlwaysInlinerPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreatePruneEHPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateInternalizePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateDeadArgEliminationPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateDeadArgHackingPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateArgumentPromotionPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateIPConstantPropagationPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateIPSCCPPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopExtractorPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateSingleLoopExtractorPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateBlockExtractorPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateStripDeadPrototypesPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateFunctionAttrsPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateMergeFunctionsPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreatePartialInliningPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateMetaRenamerPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateBarrierNoopPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateFunctionInliningPass(Threshold:c_int) -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateEdgeProfilerPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateOptimalEdgeProfilerPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreatePathProfilerPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateGCOVProfilerPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateBoundsCheckingPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateConstantPropagationPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateSCCPPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateDeadInstEliminationPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateDeadCodeEliminationPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateDeadStoreEliminationPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateAggressiveDCEPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateSROAPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateScalarReplAggregatesPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateIndVarSimplifyPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateInstructionCombiningPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLICMPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopStrengthReducePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateGlobalMergePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopUnswitchPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopInstSimplifyPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopUnrollPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopRotatePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopIdiomPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreatePromoteMemoryToRegisterPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateDemoteRegisterToMemoryPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateReassociatePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateJumpThreadingPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateCFGSimplificationPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateBreakCriticalEdgesPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopSimplifyPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateTailCallEliminationPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLowerSwitchPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLowerInvokePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateBlockPlacementPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLCSSAPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateEarlyCSEPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateGVNPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateMemCpyOptPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopDeletionPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateSimplifyLibCallsPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateCodeGenPreparePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateInstructionNamerPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateSinkingPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLowerAtomicPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateCorrelatedValuePropagationPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateInstructionSimplifierPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLowerExpectIntrinsicPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateBBVectorizePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLoopVectorizePass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateGlobalsModRefPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateAliasAnalysisCounterPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateAAEvalPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateNoAAPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateBasicAliasAnalysisPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateScalarEvolutionAliasAnalysisPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateTypeBasedAliasAnalysisPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateProfileLoaderPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateProfileMetadataLoaderPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateNoProfileInfoPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateProfileEstimatorPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateProfileVerifierPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreatePathProfileLoaderPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateNoPathProfileInfoPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreatePathProfileVerifierPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLazyValueInfoPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateDependenceAnalysisPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateCostModelAnalysisPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateInstCountPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateRegionInfoPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateModuleDebugInfoPrinterPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateLintPass() -> PassRef;\n+        #[fast_ffi]\n+        pub fn LLVMCreateVerifierPass() -> PassRef;\n     }\n }\n "}, {"sha": "cca194a77736c344dca205bfed9d1348ad0e3fb8", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -128,6 +128,7 @@ pub mod back {\n     pub mod x86_64;\n     pub mod rpath;\n     pub mod target_strs;\n+    pub mod passes;\n }\n \n #[path = \"metadata/mod.rs\"]"}, {"sha": "fd17dfb4cf8bd9d6d7bcfb511fd8b20ece5198a8", "filename": "src/rustllvm/PassWrapper.cpp", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -0,0 +1,160 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include \"rustllvm.h\"\n+\n+using namespace llvm;\n+\n+// Pass conversion fns\n+typedef struct LLVMOpaquePass *LLVMPassRef;\n+\n+inline Pass *unwrap(LLVMPassRef P) {\n+    return reinterpret_cast<Pass*>(P);\n+}\n+\n+inline LLVMPassRef wrap(const Pass *P) {\n+    return reinterpret_cast<LLVMPassRef>(const_cast<Pass*>(P));\n+}\n+\n+template<typename T>\n+inline T *unwrap(LLVMPassRef P) {\n+    T *Q = (T*)unwrap(P);\n+    assert(Q && \"Invalid cast!\");\n+    return Q;\n+}\n+\n+#define WRAP_PASS(name)                             \\\n+    extern \"C\" LLVMPassRef LLVMCreate##name##Pass() {      \\\n+        return wrap(llvm::create##name##Pass());    \\\n+    }\n+\n+extern \"C\" void LLVMAddPass(LLVMPassManagerRef PM, LLVMPassRef P) {\n+    PassManagerBase * pm = unwrap(PM);\n+    Pass * p = unwrap(P);\n+\n+    pm->add(p);\n+}\n+\n+////////////////\n+// Transforms //\n+// /////////////\n+\n+// IPO Passes\n+WRAP_PASS(StripSymbols)\n+WRAP_PASS(StripNonDebugSymbols)\n+WRAP_PASS(StripDebugDeclare)\n+WRAP_PASS(StripDeadDebugInfo)\n+WRAP_PASS(ConstantMerge)\n+WRAP_PASS(GlobalOptimizer)\n+WRAP_PASS(GlobalDCE)\n+WRAP_PASS(AlwaysInliner)\n+WRAP_PASS(PruneEH)\n+WRAP_PASS(Internalize)\n+WRAP_PASS(DeadArgElimination)\n+WRAP_PASS(DeadArgHacking)\n+WRAP_PASS(ArgumentPromotion)\n+WRAP_PASS(IPConstantPropagation)\n+WRAP_PASS(IPSCCP)\n+WRAP_PASS(LoopExtractor)\n+WRAP_PASS(SingleLoopExtractor)\n+WRAP_PASS(BlockExtractor)\n+WRAP_PASS(StripDeadPrototypes)\n+WRAP_PASS(FunctionAttrs)\n+WRAP_PASS(MergeFunctions)\n+WRAP_PASS(PartialInlining)\n+WRAP_PASS(MetaRenamer)\n+WRAP_PASS(BarrierNoop)\n+\n+extern \"C\" LLVMPassRef LLVMCreateFunctionInliningPass(int Threshold) {\n+    return wrap(llvm::createFunctionInliningPass(Threshold));\n+}\n+\n+// Instrumentation Passes\n+WRAP_PASS(EdgeProfiler)\n+WRAP_PASS(OptimalEdgeProfiler)\n+WRAP_PASS(PathProfiler)\n+WRAP_PASS(GCOVProfiler)\n+WRAP_PASS(BoundsChecking)\n+\n+// Scalar Passes\n+WRAP_PASS(ConstantPropagation)\n+WRAP_PASS(SCCP)\n+WRAP_PASS(DeadInstElimination)\n+WRAP_PASS(DeadCodeElimination)\n+WRAP_PASS(DeadStoreElimination)\n+WRAP_PASS(AggressiveDCE)\n+WRAP_PASS(SROA)\n+WRAP_PASS(ScalarReplAggregates)\n+WRAP_PASS(IndVarSimplify)\n+WRAP_PASS(InstructionCombining)\n+WRAP_PASS(LICM)\n+WRAP_PASS(LoopStrengthReduce)\n+WRAP_PASS(GlobalMerge)\n+WRAP_PASS(LoopUnswitch)\n+WRAP_PASS(LoopInstSimplify)\n+WRAP_PASS(LoopUnroll)\n+WRAP_PASS(LoopRotate)\n+WRAP_PASS(LoopIdiom)\n+WRAP_PASS(PromoteMemoryToRegister)\n+WRAP_PASS(DemoteRegisterToMemory)\n+WRAP_PASS(Reassociate)\n+WRAP_PASS(JumpThreading)\n+WRAP_PASS(CFGSimplification)\n+WRAP_PASS(BreakCriticalEdges)\n+WRAP_PASS(LoopSimplify)\n+WRAP_PASS(TailCallElimination)\n+WRAP_PASS(LowerSwitch)\n+WRAP_PASS(LowerInvoke)\n+WRAP_PASS(BlockPlacement)\n+WRAP_PASS(LCSSA)\n+WRAP_PASS(EarlyCSE)\n+WRAP_PASS(GVN)\n+WRAP_PASS(MemCpyOpt)\n+WRAP_PASS(LoopDeletion)\n+WRAP_PASS(SimplifyLibCalls)\n+WRAP_PASS(CodeGenPrepare)\n+WRAP_PASS(InstructionNamer)\n+WRAP_PASS(Sinking)\n+WRAP_PASS(LowerAtomic)\n+WRAP_PASS(CorrelatedValuePropagation)\n+WRAP_PASS(InstructionSimplifier)\n+WRAP_PASS(LowerExpectIntrinsic)\n+\n+// Vectorize Passes\n+WRAP_PASS(BBVectorize)\n+WRAP_PASS(LoopVectorize)\n+\n+//////////////\n+// Analyses //\n+//////////////\n+\n+WRAP_PASS(GlobalsModRef)\n+WRAP_PASS(AliasAnalysisCounter)\n+WRAP_PASS(AAEval)\n+WRAP_PASS(NoAA)\n+WRAP_PASS(BasicAliasAnalysis)\n+WRAP_PASS(ScalarEvolutionAliasAnalysis)\n+WRAP_PASS(TypeBasedAliasAnalysis)\n+WRAP_PASS(ProfileLoader)\n+WRAP_PASS(ProfileMetadataLoader)\n+WRAP_PASS(NoProfileInfo)\n+WRAP_PASS(ProfileEstimator)\n+WRAP_PASS(ProfileVerifier)\n+WRAP_PASS(PathProfileLoader)\n+WRAP_PASS(NoPathProfileInfo)\n+WRAP_PASS(PathProfileVerifier)\n+WRAP_PASS(LazyValueInfo)\n+WRAP_PASS(DependenceAnalysis)\n+WRAP_PASS(CostModelAnalysis)\n+WRAP_PASS(InstCount)\n+WRAP_PASS(RegionInfo)\n+WRAP_PASS(ModuleDebugInfoPrinter)\n+WRAP_PASS(Lint)\n+WRAP_PASS(Verifier)"}, {"sha": "4ee5df28d24ee3fd344d0b10108febc7d64e1f3b", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,57 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#include \"rustllvm.h\"\n+\n //===----------------------------------------------------------------------===\n //\n // This file defines alternate interfaces to core functions that are more\n // readily callable by Rust's FFI.\n //\n //===----------------------------------------------------------------------===\n \n-#include \"llvm/IR/InlineAsm.h\"\n-#include \"llvm/IR/LLVMContext.h\"\n-#include \"llvm/Linker.h\"\n-#include \"llvm/PassManager.h\"\n-#include \"llvm/IR/InlineAsm.h\"\n-#include \"llvm/IR/LLVMContext.h\"\n-#include \"llvm/Analysis/Verifier.h\"\n-#include \"llvm/Analysis/Passes.h\"\n-#include \"llvm/ADT/Triple.h\"\n-#include \"llvm/ADT/DenseSet.h\"\n-#include \"llvm/Assembly/Parser.h\"\n-#include \"llvm/Assembly/PrintModulePass.h\"\n-#include \"llvm/Support/CommandLine.h\"\n-#include \"llvm/Support/FormattedStream.h\"\n-#include \"llvm/Support/Timer.h\"\n-#include \"llvm/Support/raw_ostream.h\"\n-#include \"llvm/Support/TargetSelect.h\"\n-#include \"llvm/Support/TargetRegistry.h\"\n-#include \"llvm/Support/SourceMgr.h\"\n-#include \"llvm/Support/Host.h\"\n-#include \"llvm/Support/Debug.h\"\n-#include \"llvm/Support/DynamicLibrary.h\"\n-#include \"llvm/Support/Memory.h\"\n-#include \"llvm/ExecutionEngine/ExecutionEngine.h\"\n-#include \"llvm/ExecutionEngine/JIT.h\"\n-#include \"llvm/ExecutionEngine/JITMemoryManager.h\"\n-#include \"llvm/ExecutionEngine/MCJIT.h\"\n-#include \"llvm/ExecutionEngine/Interpreter.h\"\n-#include \"llvm/Target/TargetMachine.h\"\n-#include \"llvm/Target/TargetOptions.h\"\n-#include \"llvm/Transforms/Scalar.h\"\n-#include \"llvm/Transforms/IPO.h\"\n-#include \"llvm-c/Core.h\"\n-#include \"llvm-c/BitReader.h\"\n-#include \"llvm-c/Object.h\"\n-\n-// Used by RustMCJITMemoryManager::getPointerToNamedFunction()\n-// to get around glibc issues. See the function for more information.\n-#ifdef __linux__\n-#include <sys/stat.h>\n-#include <fcntl.h>\n-#include <unistd.h>\n-#endif\n-\n using namespace llvm;\n using namespace llvm::sys;\n "}, {"sha": "1e1c07fd99c9f9891b46c6f3bdd27cf701b94a15", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -584,3 +584,102 @@ LLVMConstNamedStruct\n LLVMStructCreateNamed\n LLVMStructSetBody\n LLVMInlineAsm\n+LLVMAddPass\n+\n+LLVMCreateStripSymbolsPass\n+LLVMCreateStripNonDebugSymbolsPass\n+LLVMCreateStripDebugDeclarePass\n+LLVMCreateStripDeadDebugInfoPass\n+LLVMCreateConstantMergePass\n+LLVMCreateGlobalOptimizerPass\n+LLVMCreateGlobalDCEPass\n+LLVMCreateAlwaysInlinerPass\n+LLVMCreatePruneEHPass\n+LLVMCreateInternalizePass\n+LLVMCreateDeadArgEliminationPass\n+LLVMCreateDeadArgHackingPass\n+LLVMCreateArgumentPromotionPass\n+LLVMCreateIPConstantPropagationPass\n+LLVMCreateIPSCCPPass\n+LLVMCreateLoopExtractorPass\n+LLVMCreateSingleLoopExtractorPass\n+LLVMCreateBlockExtractorPass\n+LLVMCreateStripDeadPrototypesPass\n+LLVMCreateFunctionAttrsPass\n+LLVMCreateMergeFunctionsPass\n+LLVMCreatePartialInliningPass\n+LLVMCreateMetaRenamerPass\n+LLVMCreateBarrierNoopPass\n+LLVMCreateFunctionInliningPass\n+LLVMCreateEdgeProfilerPass\n+LLVMCreateOptimalEdgeProfilerPass\n+LLVMCreatePathProfilerPass\n+LLVMCreateGCOVProfilerPass\n+LLVMCreateBoundsCheckingPass\n+LLVMCreateConstantPropagationPass\n+LLVMCreateSCCPPass\n+LLVMCreateDeadInstEliminationPass\n+LLVMCreateDeadCodeEliminationPass\n+LLVMCreateDeadStoreEliminationPass\n+LLVMCreateAggressiveDCEPass\n+LLVMCreateSROAPass\n+LLVMCreateScalarReplAggregatesPass\n+LLVMCreateIndVarSimplifyPass\n+LLVMCreateInstructionCombiningPass\n+LLVMCreateLICMPass\n+LLVMCreateLoopStrengthReducePass\n+LLVMCreateGlobalMergePass\n+LLVMCreateLoopUnswitchPass\n+LLVMCreateLoopInstSimplifyPass\n+LLVMCreateLoopUnrollPass\n+LLVMCreateLoopRotatePass\n+LLVMCreateLoopIdiomPass\n+LLVMCreatePromoteMemoryToRegisterPass\n+LLVMCreateDemoteRegisterToMemoryPass\n+LLVMCreateReassociatePass\n+LLVMCreateJumpThreadingPass\n+LLVMCreateCFGSimplificationPass\n+LLVMCreateBreakCriticalEdgesPass\n+LLVMCreateLoopSimplifyPass\n+LLVMCreateTailCallEliminationPass\n+LLVMCreateLowerSwitchPass\n+LLVMCreateLowerInvokePass\n+LLVMCreateBlockPlacementPass\n+LLVMCreateLCSSAPass\n+LLVMCreateEarlyCSEPass\n+LLVMCreateGVNPass\n+LLVMCreateMemCpyOptPass\n+LLVMCreateLoopDeletionPass\n+LLVMCreateSimplifyLibCallsPass\n+LLVMCreateCodeGenPreparePass\n+LLVMCreateInstructionNamerPass\n+LLVMCreateSinkingPass\n+LLVMCreateLowerAtomicPass\n+LLVMCreateCorrelatedValuePropagationPass\n+LLVMCreateInstructionSimplifierPass\n+LLVMCreateLowerExpectIntrinsicPass\n+LLVMCreateBBVectorizePass\n+LLVMCreateLoopVectorizePass\n+LLVMCreateGlobalsModRefPass\n+LLVMCreateAliasAnalysisCounterPass\n+LLVMCreateAAEvalPass\n+LLVMCreateNoAAPass\n+LLVMCreateBasicAliasAnalysisPass\n+LLVMCreateScalarEvolutionAliasAnalysisPass\n+LLVMCreateTypeBasedAliasAnalysisPass\n+LLVMCreateProfileLoaderPass\n+LLVMCreateProfileMetadataLoaderPass\n+LLVMCreateNoProfileInfoPass\n+LLVMCreateProfileEstimatorPass\n+LLVMCreateProfileVerifierPass\n+LLVMCreatePathProfileLoaderPass\n+LLVMCreateNoPathProfileInfoPass\n+LLVMCreatePathProfileVerifierPass\n+LLVMCreateLazyValueInfoPass\n+LLVMCreateDependenceAnalysisPass\n+LLVMCreateCostModelAnalysisPass\n+LLVMCreateInstCountPass\n+LLVMCreateRegionInfoPass\n+LLVMCreateModuleDebugInfoPrinterPass\n+LLVMCreateLintPass\n+LLVMCreateVerifierPass"}, {"sha": "1c8842f7b4a77933d1550e6d9ec07421b83128b9", "filename": "src/rustllvm/rustllvm.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/e946b4fa3f7d9a551fd8f039a2b15142d132f3fb/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=e946b4fa3f7d9a551fd8f039a2b15142d132f3fb", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include \"llvm/IR/InlineAsm.h\"\n+#include \"llvm/IR/LLVMContext.h\"\n+#include \"llvm/Linker.h\"\n+#include \"llvm/PassManager.h\"\n+#include \"llvm/IR/InlineAsm.h\"\n+#include \"llvm/IR/LLVMContext.h\"\n+#include \"llvm/Analysis/Verifier.h\"\n+#include \"llvm/Analysis/Passes.h\"\n+#include \"llvm/Analysis/Lint.h\"\n+#include \"llvm/ADT/Triple.h\"\n+#include \"llvm/ADT/DenseSet.h\"\n+#include \"llvm/Assembly/Parser.h\"\n+#include \"llvm/Assembly/PrintModulePass.h\"\n+#include \"llvm/Support/CommandLine.h\"\n+#include \"llvm/Support/FormattedStream.h\"\n+#include \"llvm/Support/Timer.h\"\n+#include \"llvm/Support/raw_ostream.h\"\n+#include \"llvm/Support/TargetSelect.h\"\n+#include \"llvm/Support/TargetRegistry.h\"\n+#include \"llvm/Support/SourceMgr.h\"\n+#include \"llvm/Support/Host.h\"\n+#include \"llvm/Support/Debug.h\"\n+#include \"llvm/Support/DynamicLibrary.h\"\n+#include \"llvm/Support/Memory.h\"\n+#include \"llvm/ExecutionEngine/ExecutionEngine.h\"\n+#include \"llvm/ExecutionEngine/JIT.h\"\n+#include \"llvm/ExecutionEngine/JITMemoryManager.h\"\n+#include \"llvm/ExecutionEngine/MCJIT.h\"\n+#include \"llvm/ExecutionEngine/Interpreter.h\"\n+#include \"llvm/Target/TargetMachine.h\"\n+#include \"llvm/Target/TargetOptions.h\"\n+#include \"llvm/Transforms/Scalar.h\"\n+#include \"llvm/Transforms/IPO.h\"\n+#include \"llvm/Transforms/Instrumentation.h\"\n+#include \"llvm/Transforms/Vectorize.h\"\n+#include \"llvm-c/Core.h\"\n+#include \"llvm-c/BitReader.h\"\n+#include \"llvm-c/Object.h\"\n+\n+// Used by RustMCJITMemoryManager::getPointerToNamedFunction()\n+// to get around glibc issues. See the function for more information.\n+#ifdef __linux__\n+#include <sys/stat.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n+"}]}