{"sha": "4743842821ffa91546af7806e18f71821ff8f2da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDM4NDI4MjFmZmE5MTU0NmFmNzgwNmUxOGY3MTgyMWZmOGYyZGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-03T15:08:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-03T15:08:51Z"}, "message": "move constants stack to stackframe", "tree": {"sha": "cd9e1950010ad506f6eae54499c2b15b845de765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd9e1950010ad506f6eae54499c2b15b845de765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4743842821ffa91546af7806e18f71821ff8f2da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXUZ2DAAoJEFbW7qD8Z6xGOzMP/1x/AY+7UnwQIyf1ZCf+Zs9v\nkr4wrECyzXEkUG7LDDTbWM7nnWYq+ogXKkulvPO/t+N1hEemOo7s7kU1LzpRLs1G\nYLbgtPrhPJ9qwVRPJ5TNv9jH24/kxPNxGj4ltQoMNnmR+KC3OX8+O/H44hjw7B6b\nd3MYOxtw5d26opzrt/rgtCfrbV2FwxNTV+OAygTMxzSkezNuk2Gkbd0JoUrFNG1/\nLRU1sH0qxo2nxDPspKEHKMypGZ40MnDcU9TCAjh5U8gAfg06XGIh+r0sR78MzD7l\nXZbrmlqkG2ugNs+1TvuNnPr5YUL5chCRHlpvyIVRqrWA4XJ3FbeU6yjcP2wjDb1s\nKc7kTf3kZ722b1tZkBO62dZ23qsOhoM3Lfj4qrvSQLxxj6yr9YU7AXBz7uN74e1r\nlWfp/OShthtMP2B7Fmfxgxn4FCTvAJR/qz++kp9xvUxcMLshlZzr9o7DzHnGCzuS\n0IDIQoyWe/HWkYqVaBZ8oh1yQ4zpTrUkJcsuvJi2vuXmmggQgxWhleqHDHdLaQzy\nx0WYtRY8iXjzr+LiQN2M/cUC2k45GCa/XQ63NYBAV/o+aQzDF7B6BFrdShXsU0n8\nixjJJ/jezQSJqhlvafNnKcPGhDo/fZ2b63qKF92CuyYZk+d8PN5rGFUOUqAPf5UC\n9XBhaha7fFn3GLDX8rzG\n=fP0+\n-----END PGP SIGNATURE-----", "payload": "tree cd9e1950010ad506f6eae54499c2b15b845de765\nparent 02eed64cc0c0fdd992713c5b5b1dfdd3813e09bf\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464966531 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464966531 +0200\n\nmove constants stack to stackframe"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4743842821ffa91546af7806e18f71821ff8f2da", "html_url": "https://github.com/rust-lang/rust/commit/4743842821ffa91546af7806e18f71821ff8f2da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4743842821ffa91546af7806e18f71821ff8f2da/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02eed64cc0c0fdd992713c5b5b1dfdd3813e09bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/02eed64cc0c0fdd992713c5b5b1dfdd3813e09bf", "html_url": "https://github.com/rust-lang/rust/commit/02eed64cc0c0fdd992713c5b5b1dfdd3813e09bf"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "9701e1157a4f6e657f901dd22a3712ccad4ed489", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4743842821ffa91546af7806e18f71821ff8f2da/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4743842821ffa91546af7806e18f71821ff8f2da/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=4743842821ffa91546af7806e18f71821ff8f2da", "patch": "@@ -14,7 +14,7 @@ use std::rc::Rc;\n use std::{iter, mem};\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::{self, DUMMY_SP};\n+use syntax::codemap::{self, DUMMY_SP, Span};\n \n use error::{EvalError, EvalResult};\n use memory::{Memory, Pointer};\n@@ -97,6 +97,9 @@ struct Frame<'a, 'tcx: 'a> {\n \n     /// The index of the currently evaluated statment\n     stmt: usize,\n+\n+    // Constants that need to be evaluated before the next statement can be evaluated\n+    constants: Vec<(ConstantId<'tcx>, Span, Pointer, CachedMir<'a, 'tcx>)>,\n }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -250,6 +253,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n             def_id: def_id,\n             substs: substs,\n             stmt: 0,\n+            constants: Vec::new(),\n         });\n \n         let locals: Vec<Pointer> = arg_tys.chain(var_tys).chain(temp_tys).map(|ty| {"}, {"sha": "8abc7830f5182088c94a7bff23646a65a3035071", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4743842821ffa91546af7806e18f71821ff8f2da/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4743842821ffa91546af7806e18f71821ff8f2da/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=4743842821ffa91546af7806e18f71821ff8f2da", "patch": "@@ -24,8 +24,6 @@ pub struct Stepper<'fncx, 'a: 'fncx, 'b: 'a + 'mir, 'mir: 'fncx, 'tcx: 'b>{\n     fncx: &'fncx mut FnEvalContext<'a, 'b, 'mir, 'tcx>,\n     mir: CachedMir<'mir, 'tcx>,\n     process: fn (&mut Stepper<'fncx, 'a, 'b, 'mir, 'tcx>) -> EvalResult<()>,\n-    // a stack of constants\n-    constants: Vec<Vec<(ConstantId<'tcx>, Span, Pointer, CachedMir<'mir, 'tcx>)>>,\n }\n \n impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx> {\n@@ -34,7 +32,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             mir: fncx.mir(),\n             fncx: fncx,\n             process: Self::dummy,\n-            constants: vec![Vec::new()],\n         }\n     }\n \n@@ -62,37 +59,33 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         match term {\n             TerminatorTarget::Block => {},\n             TerminatorTarget::Return => {\n+                assert!(self.fncx.frame().constants.is_empty());\n                 self.fncx.pop_stack_frame();\n-                assert!(self.constants.last().unwrap().is_empty());\n-                self.constants.pop();\n                 if !self.fncx.stack.is_empty() {\n                     self.mir = self.fncx.mir();\n                 }\n             },\n             TerminatorTarget::Call => {\n                 self.mir = self.fncx.mir();\n-                self.constants.push(Vec::new());\n             },\n         }\n         Ok(())\n     }\n \n     fn constant(&mut self) -> EvalResult<()> {\n-        match self.constants.last_mut().unwrap().pop() {\n+        match self.fncx.frame_mut().constants.pop() {\n             Some((ConstantId::Promoted { index }, span, return_ptr, mir)) => {\n                 trace!(\"adding promoted constant {}, {:?}\", index, span);\n                 let substs = self.fncx.substs();\n                 // FIXME: somehow encode that this is a promoted constant's frame\n                 let def_id = self.fncx.frame().def_id;\n                 self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n-                self.constants.push(Vec::new());\n                 self.mir = self.fncx.mir();\n             },\n             Some((ConstantId::Static { def_id, substs }, span, return_ptr, mir)) => {\n                 trace!(\"adding static {:?}, {:?}\", def_id, span);\n                 self.fncx.gecx.statics.insert(def_id, return_ptr);\n                 self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n-                self.constants.push(Vec::new());\n                 self.mir = self.fncx.mir();\n             },\n             None => unreachable!(),\n@@ -109,7 +102,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             return Ok(Event::Done);\n         }\n \n-        if !self.constants.last().unwrap().is_empty() {\n+        if !self.fncx.frame().constants.is_empty() {\n             self.process = Self::constant;\n             return Ok(Event::Constant);\n         }\n@@ -119,14 +112,13 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         let basic_block = self.mir.basic_block_data(block);\n \n         if let Some(ref stmt) = basic_block.statements.get(stmt) {\n-            assert!(self.constants.last().unwrap().is_empty());\n+            assert!(self.fncx.frame().constants.is_empty());\n             ConstantExtractor {\n-                constants: &mut self.constants.last_mut().unwrap(),\n                 span: stmt.span,\n                 fncx: self.fncx,\n                 mir: &self.mir,\n             }.visit_statement(block, stmt);\n-            if self.constants.last().unwrap().is_empty() {\n+            if self.fncx.frame().constants.is_empty() {\n                 self.process = Self::statement;\n                 return Ok(Event::Assignment);\n             } else {\n@@ -137,12 +129,11 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n \n         let terminator = basic_block.terminator();\n         ConstantExtractor {\n-            constants: &mut self.constants.last_mut().unwrap(),\n             span: terminator.span,\n             fncx: self.fncx,\n             mir: &self.mir,\n         }.visit_terminator(block, terminator);\n-        if self.constants.last().unwrap().is_empty() {\n+        if self.fncx.frame().constants.is_empty() {\n             self.process = Self::terminator;\n             Ok(Event::Terminator)\n         } else {\n@@ -167,7 +158,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n }\n \n struct ConstantExtractor<'a: 'c, 'b: 'a + 'mir + 'c, 'c, 'mir: 'c, 'tcx: 'a + 'b + 'c> {\n-    constants: &'c mut Vec<(ConstantId<'tcx>, Span, Pointer, CachedMir<'mir, 'tcx>)>,\n     span: Span,\n     mir: &'c mir::Mir<'tcx>,\n     fncx: &'c mut FnEvalContext<'a, 'b, 'mir, 'tcx>,\n@@ -184,7 +174,7 @@ impl<'a, 'b, 'c, 'mir, 'tcx> ConstantExtractor<'a, 'b, 'c, 'mir, 'tcx> {\n         };\n         let mir = self.fncx.load_mir(def_id);\n         let ptr = self.fncx.alloc_ret_ptr(mir.return_ty).expect(\"there's no such thing as an unreachable static\");\n-        self.constants.push((cid, span, ptr, mir));\n+        self.fncx.frame_mut().constants.push((cid, span, ptr, mir));\n     }\n }\n \n@@ -211,7 +201,7 @@ impl<'a, 'b, 'c, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'c, 'mi\n                 let return_ptr = self.fncx.alloc_ret_ptr(return_ty).expect(\"there's no such thing as an unreachable static\");\n                 self.fncx.frame_mut().promoted.insert(index, return_ptr);\n                 let mir = CachedMir::Owned(Rc::new(mir));\n-                self.constants.push((ConstantId::Promoted { index: index }, constant.span, return_ptr, mir));\n+                self.fncx.frame_mut().constants.push((ConstantId::Promoted { index: index }, constant.span, return_ptr, mir));\n             }\n         }\n     }"}]}