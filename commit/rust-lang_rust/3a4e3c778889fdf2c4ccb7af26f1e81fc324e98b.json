{"sha": "3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b", "node_id": "C_kwDOAAsO6NoAKDNhNGUzYzc3ODg4OWZkZjJjNGNjYjdhZjI2ZjFlODFmYzMyNGU5OGI", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-07T02:26:02Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-07T02:46:31Z"}, "message": "Get rid of the emitted `rustc_query_names` and `rustc_cached_queries` macro\n\nWe can avoid these by adding slightly more information to `rustc_query_append` instead.", "tree": {"sha": "0ceeb33352bfdf89517471c018a8ffff0c9831df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ceeb33352bfdf89517471c018a8ffff0c9831df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b", "html_url": "https://github.com/rust-lang/rust/commit/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c630c87ceb0c49c5dc2b1a6119c67e9033dce828", "url": "https://api.github.com/repos/rust-lang/rust/commits/c630c87ceb0c49c5dc2b1a6119c67e9033dce828", "html_url": "https://github.com/rust-lang/rust/commit/c630c87ceb0c49c5dc2b1a6119c67e9033dce828"}], "stats": {"total": 78, "additions": 38, "deletions": 40}, "files": [{"sha": "505b2d62a79d377c9d4c0e76b729d7d5ecd6ad20", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b", "patch": "@@ -328,7 +328,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n     let mut query_stream = quote! {};\n     let mut query_description_stream = quote! {};\n-    let mut all_names = quote! {};\n     let mut cached_queries = quote! {};\n \n     for query in queries.0 {\n@@ -384,6 +383,10 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n         if let Some(remap_env_constness) = &modifiers.remap_env_constness {\n             attributes.push(quote! { (#remap_env_constness) });\n         }\n+        // Pass on the const modifier\n+        if modifiers.cache.is_some() {\n+            attributes.push(quote! { (cache) });\n+        }\n \n         // This uses the span of the query definition for the commas,\n         // which can be important if we later encounter any ambiguity\n@@ -400,38 +403,20 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             [#attribute_stream] fn #name(#arg) #result,\n         });\n \n-        all_names.extend(quote! {\n-            #(#doc_comments)*\n-            #name,\n-        });\n-\n         add_query_description_impl(&query, &mut query_description_stream);\n     }\n \n     TokenStream::from(quote! {\n         #[macro_export]\n         macro_rules! rustc_query_append {\n-            ($macro:ident!) => {\n+            ($macro:ident! $( [$($other:tt)*] )?) => {\n                 $macro! {\n+                    $( $($other)* )?\n                     #query_stream\n                 }\n             }\n         }\n-        #[macro_export]\n-        macro_rules! rustc_query_names {\n-            ($macro:ident! $( [$($other:tt)*] )?) => {\n-                $macro!(\n-                    $( $($other)* )?\n-                    #all_names\n-                );\n-            }\n-        }\n-        #[macro_export]\n-        macro_rules! rustc_cached_queries {\n-            ($macro:ident!) => {\n-                $macro!(#cached_queries);\n-            }\n-        }\n+\n         #[macro_export]\n         macro_rules! rustc_query_description {\n             #query_description_stream"}, {"sha": "1fa0c6bababe4db2a22d457ff51b198114598666", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b", "patch": "@@ -144,8 +144,9 @@ impl DepKind {\n \n macro_rules! define_dep_nodes {\n     (\n-        $( $( #[$attr:meta] )* $variant:ident, )+\n-    ) => (\n+     $($(#[$attr:meta])*\n+        [$($modifiers:tt)*] fn $variant:ident($($K:tt)*) -> $V:ty,)*) => {\n+\n         #[macro_export]\n         macro_rules! make_dep_kind_array {\n             ($mod:ident) => {[ $($mod::$variant()),* ]};\n@@ -173,17 +174,17 @@ macro_rules! define_dep_nodes {\n                 pub const $variant: &str = stringify!($variant);\n             )*\n         }\n-    );\n+    };\n }\n \n-rustc_query_names!(define_dep_nodes![\n+rustc_query_append!(define_dep_nodes![\n     /// We use this for most things when incr. comp. is turned off.\n-    Null,\n+    [] fn Null() -> (),\n     /// We use this to create a forever-red node.\n-    Red,\n-    TraitSelect,\n-    CompileCodegenUnit,\n-    CompileMonoItem,\n+    [] fn Red() -> (),\n+    [] fn TraitSelect() -> (),\n+    [] fn CompileCodegenUnit() -> (),\n+    [] fn CompileMonoItem() -> (),\n ]);\n \n // WARNING: `construct` is generic and does not know that `CompileCodegenUnit` takes `Symbol`s as keys."}, {"sha": "7e48125307a2248bdfebf707bb12d85aab798f7e", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b", "patch": "@@ -148,19 +148,31 @@ impl<'tcx> QueryCtxt<'tcx> {\n         encoder: &mut on_disk_cache::CacheEncoder<'_, 'tcx>,\n         query_result_index: &mut on_disk_cache::EncodedDepNodeIndex,\n     ) {\n+        macro_rules! expand_if_cached {\n+            ([] $encode:expr) => {};\n+            ([(cache) $($rest:tt)*] $encode:expr) => {\n+                $encode\n+            };\n+            ([$other:tt $($modifiers:tt)*] $encode:expr) => {\n+                expand_if_cached!([$($modifiers)*] $encode)\n+            };\n+        }\n+\n         macro_rules! encode_queries {\n-            ($($query:ident,)*) => {\n+            (\n+            $($(#[$attr:meta])*\n+                [$($modifiers:tt)*] fn $query:ident($($K:tt)*) -> $V:ty,)*) => {\n                 $(\n-                    on_disk_cache::encode_query_results::<_, super::queries::$query<'_>>(\n+                    expand_if_cached!([$($modifiers)*] on_disk_cache::encode_query_results::<_, super::queries::$query<'_>>(\n                         self,\n                         encoder,\n                         query_result_index\n-                    );\n+                    ));\n                 )*\n             }\n         }\n \n-        rustc_cached_queries!(encode_queries!);\n+        rustc_query_append!(encode_queries!);\n     }\n \n     pub fn try_print_query_stack("}, {"sha": "98ec3bc097732abdcf09364309818020c89d856f", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=3a4e3c778889fdf2c4ccb7af26f1e81fc324e98b", "patch": "@@ -307,18 +307,18 @@ pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n \n     macro_rules! alloc_once {\n         (\n-            $( $( #[$attr:meta] )* $name:ident, )+\n-        ) => {\n-            $({\n+        $($(#[$attr:meta])*\n+            [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n+            $(\n                 alloc_self_profile_query_strings_for_query_cache(\n                     tcx,\n                     stringify!($name),\n                     &tcx.query_caches.$name,\n                     &mut string_cache,\n                 );\n-            })+\n+            )+\n         }\n     }\n \n-    rustc_query_names! { alloc_once! }\n+    rustc_query_append! { alloc_once! }\n }"}]}