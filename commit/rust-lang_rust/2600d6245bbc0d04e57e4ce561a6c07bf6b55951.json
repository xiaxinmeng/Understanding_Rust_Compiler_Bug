{"sha": "2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "node_id": "C_kwDOAAsO6NoAKDI2MDBkNjI0NWJiYzBkMDRlNTdlNGNlNTYxYTZjMDdiZjZiNTU5NTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-08T22:54:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T17:48:22Z"}, "message": "Add lookup_probe_for_diagnostic", "tree": {"sha": "05bf9b07a2ff29842074f100bfb43b6f4a913258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05bf9b07a2ff29842074f100bfb43b6f4a913258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "html_url": "https://github.com/rust-lang/rust/commit/2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38491c65790e393915616ccc3822a752272a4a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/38491c65790e393915616ccc3822a752272a4a92", "html_url": "https://github.com/rust-lang/rust/commit/38491c65790e393915616ccc3822a752272a4a92"}], "stats": {"total": 172, "additions": 98, "deletions": 74}, "files": [{"sha": "3b664363d232f6d74908d26578fb2fb274636d8e", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "patch": "@@ -1,4 +1,4 @@\n-use super::method::probe::{IsSuggestion, Mode, ProbeScope};\n+use super::method::probe::ProbeScope;\n use super::method::MethodCallee;\n use super::{Expectation, FnCtxt, TupleArgumentsFlag};\n \n@@ -496,16 +496,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // any strange errors. If it's successful, then we'll do a true\n             // method lookup.\n             let Ok(pick) = self\n-            .probe_for_name(\n-                Mode::MethodCall,\n+            .lookup_probe_for_diagnostic(\n                 segment.ident,\n-                expected.only_has_type(self),\n-                IsSuggestion(true),\n                 callee_ty,\n-                call_expr.hir_id,\n+                call_expr,\n                 // We didn't record the in scope traits during late resolution\n                 // so we need to probe AllTraits unfortunately\n                 ProbeScope::AllTraits,\n+                expected.only_has_type(self),\n             ) else {\n                 return None;\n             };"}, {"sha": "33fc7413a679cd2eadc94cb313fe46cd0db3a025", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "patch": "@@ -303,11 +303,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Get the evaluated type *after* calling the method call, so that the influence\n                 // of the arguments can be reflected in the receiver type. The receiver\n                 // expression has the type *before* theis analysis is done.\n-                let ty = match self.lookup_probe(\n+                let ty = match self.lookup_probe_for_diagnostic(\n                     segment.ident,\n                     rcvr_ty,\n                     expr,\n                     probe::ProbeScope::TraitsInScope,\n+                    None,\n                 ) {\n                     Ok(pick) => pick.self_ty,\n                     Err(_) => rcvr_ty,\n@@ -557,14 +558,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let Some(self_ty) = self.typeck_results.borrow().expr_ty_adjusted_opt(base) else { return; };\n \n         let Ok(pick) = self\n-            .probe_for_name(\n-                probe::Mode::MethodCall,\n+            .lookup_probe_for_diagnostic(\n                 path.ident,\n-                None,\n-                probe::IsSuggestion(true),\n                 self_ty,\n-                deref.hir_id,\n+                deref,\n                 probe::ProbeScope::TraitsInScope,\n+                None,\n             ) else {\n                 return;\n             };\n@@ -1835,7 +1834,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_for_range_as_method_call(\n         &self,\n         err: &mut Diagnostic,\n-        expr: &hir::Expr<'_>,\n+        expr: &hir::Expr<'tcx>,\n         checked_ty: Ty<'tcx>,\n         expected_ty: Ty<'tcx>,\n     ) {\n@@ -1876,14 +1875,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let hir::ExprKind::Path(hir::QPath::Resolved(None, p)) = method_name.kind else { return; };\n         let [hir::PathSegment { ident, .. }] = p.segments else { return; };\n         let self_ty = self.typeck_results.borrow().expr_ty(start.expr);\n-        let Ok(_pick) = self.probe_for_name(\n-            probe::Mode::MethodCall,\n+        let Ok(_pick) = self.lookup_probe_for_diagnostic(\n             *ident,\n-            expectation,\n-            probe::IsSuggestion(true),\n             self_ty,\n-            expr.hir_id,\n+            expr,\n             probe::ProbeScope::AllTraits,\n+            expectation,\n         ) else { return; };\n         let mut sugg = \".\";\n         let mut span = start.expr.span.between(end.expr.span);"}, {"sha": "ba1a5a0cb03e114312a39f3ca23a70404707d781", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "patch": "@@ -2431,7 +2431,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn ban_private_field_access(\n         &self,\n-        expr: &hir::Expr<'_>,\n+        expr: &hir::Expr<'tcx>,\n         expr_t: Ty<'tcx>,\n         field: Ident,\n         base_did: DefId,\n@@ -2462,7 +2462,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn ban_take_value_of_method(&self, expr: &hir::Expr<'_>, expr_t: Ty<'tcx>, field: Ident) {\n+    fn ban_take_value_of_method(&self, expr: &hir::Expr<'tcx>, expr_t: Ty<'tcx>, field: Ident) {\n         let mut err = type_error_struct!(\n             self.tcx().sess,\n             field.span,"}, {"sha": "146d5e60c2f388c2bfd7257c66af6b91414ed12f", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 49, "deletions": 26, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "patch": "@@ -132,18 +132,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         msg: &str,\n         method_name: Ident,\n         self_ty: Ty<'tcx>,\n-        call_expr: &hir::Expr<'_>,\n+        call_expr: &hir::Expr<'tcx>,\n         span: Option<Span>,\n     ) {\n         let params = self\n-            .probe_for_name(\n-                probe::Mode::MethodCall,\n+            .lookup_probe_for_diagnostic(\n                 method_name,\n-                None,\n-                IsSuggestion(true),\n                 self_ty,\n-                call_expr.hir_id,\n+                call_expr,\n                 ProbeScope::TraitsInScope,\n+                None,\n             )\n             .map(|pick| {\n                 let sig = self.tcx.fn_sig(pick.item.def_id);\n@@ -224,25 +222,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             // We probe again, taking all traits into account (not only those in scope).\n-            let candidates =\n-                match self.lookup_probe(segment.ident, self_ty, call_expr, ProbeScope::AllTraits) {\n-                    // If we find a different result the caller probably forgot to import a trait.\n-                    Ok(ref new_pick) if pick.differs_from(new_pick) => {\n-                        vec![new_pick.item.container_id(self.tcx)]\n-                    }\n-                    Err(Ambiguity(ref sources)) => sources\n-                        .iter()\n-                        .filter_map(|source| {\n-                            match *source {\n-                                // Note: this cannot come from an inherent impl,\n-                                // because the first probing succeeded.\n-                                CandidateSource::Impl(def) => self.tcx.trait_id_of_impl(def),\n-                                CandidateSource::Trait(_) => None,\n-                            }\n-                        })\n-                        .collect(),\n-                    _ => Vec::new(),\n-                };\n+            let candidates = match self.lookup_probe_for_diagnostic(\n+                segment.ident,\n+                self_ty,\n+                call_expr,\n+                ProbeScope::AllTraits,\n+                None,\n+            ) {\n+                // If we find a different result the caller probably forgot to import a trait.\n+                Ok(ref new_pick) if pick.differs_from(new_pick) => {\n+                    vec![new_pick.item.container_id(self.tcx)]\n+                }\n+                Err(Ambiguity(ref sources)) => sources\n+                    .iter()\n+                    .filter_map(|source| {\n+                        match *source {\n+                            // Note: this cannot come from an inherent impl,\n+                            // because the first probing succeeded.\n+                            CandidateSource::Impl(def) => self.tcx.trait_id_of_impl(def),\n+                            CandidateSource::Trait(_) => None,\n+                        }\n+                    })\n+                    .collect(),\n+                _ => Vec::new(),\n+            };\n \n             return Err(IllegalSizedBound { candidates, needs_mut, bound_span: span, self_expr });\n         }\n@@ -255,7 +258,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         method_name: Ident,\n         self_ty: Ty<'tcx>,\n-        call_expr: &'tcx hir::Expr<'tcx>,\n+        call_expr: &hir::Expr<'_>,\n         scope: ProbeScope,\n     ) -> probe::PickResult<'tcx> {\n         let pick = self.probe_for_name(\n@@ -271,6 +274,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         Ok(pick)\n     }\n \n+    pub fn lookup_probe_for_diagnostic(\n+        &self,\n+        method_name: Ident,\n+        self_ty: Ty<'tcx>,\n+        call_expr: &hir::Expr<'_>,\n+        scope: ProbeScope,\n+        return_type: Option<Ty<'tcx>>,\n+    ) -> probe::PickResult<'tcx> {\n+        let pick = self.probe_for_name(\n+            probe::Mode::MethodCall,\n+            method_name,\n+            return_type,\n+            IsSuggestion(true),\n+            self_ty,\n+            call_expr.hir_id,\n+            scope,\n+        )?;\n+        Ok(pick)\n+    }\n+\n     pub(super) fn obligation_for_method(\n         &self,\n         cause: ObligationCause<'tcx>,"}, {"sha": "62e80659486a870429503b19c32e3113f2b37a6a", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2600d6245bbc0d04e57e4ce561a6c07bf6b55951/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "patch": "@@ -370,8 +370,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.suggest_fn_call(&mut err, rcvr_expr, rcvr_ty, |output_ty| {\n                 let call_expr =\n                     self.tcx.hir().expect_expr(self.tcx.hir().parent_id(rcvr_expr.hir_id));\n-                let probe =\n-                    self.lookup_probe(item_name, output_ty, call_expr, ProbeScope::AllTraits);\n+                let probe = self.lookup_probe_for_diagnostic(\n+                    item_name,\n+                    output_ty,\n+                    call_expr,\n+                    ProbeScope::AllTraits,\n+                    expected.only_has_type(self),\n+                );\n                 probe.is_ok()\n             });\n         }\n@@ -1386,14 +1391,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let range_ty =\n                         self.tcx.bound_type_of(range_def_id).subst(self.tcx, &[actual.into()]);\n \n-                    let pick = self.probe_for_name(\n-                        Mode::MethodCall,\n+                    let pick = self.lookup_probe_for_diagnostic(\n                         item_name,\n-                        None,\n-                        IsSuggestion(true),\n                         range_ty,\n-                        expr.hir_id,\n+                        expr,\n                         ProbeScope::AllTraits,\n+                        None,\n                     );\n                     if pick.is_ok() {\n                         let range_span = parent_expr.span.with_hi(expr.span.hi());\n@@ -1573,11 +1576,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && let Some(expr) = visitor.result\n             && let Some(self_ty) = self.node_ty_opt(expr.hir_id)\n         {\n-            let probe = self.lookup_probe(\n+            let probe = self.lookup_probe_for_diagnostic(\n                 seg2.ident,\n                 self_ty,\n                 call_expr,\n                 ProbeScope::TraitsInScope,\n+                None,\n             );\n             if probe.is_ok() {\n                 let sm = self.infcx.tcx.sess.source_map();\n@@ -1624,14 +1628,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.check_for_nested_field_satisfying(\n                         span,\n                         &|_, field_ty| {\n-                            self.probe_for_name(\n-                                Mode::MethodCall,\n+                            self.lookup_probe_for_diagnostic(\n                                 item_name,\n-                                return_type,\n-                                IsSuggestion(true),\n                                 field_ty,\n-                                call_expr.hir_id,\n+                                call_expr,\n                                 ProbeScope::TraitsInScope,\n+                                return_type,\n                             )\n                             .map_or(false, |pick| {\n                                 !never_mention_traits\n@@ -1697,9 +1699,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             return None;\n                         }\n \n-                        self.lookup_probe(item_name, field_ty, call_expr, ProbeScope::TraitsInScope)\n-                            .ok()\n-                            .map(|pick| (variant, field, pick))\n+                        self.lookup_probe_for_diagnostic(\n+                            item_name,\n+                            field_ty,\n+                            call_expr,\n+                            ProbeScope::TraitsInScope,\n+                            None,\n+                        )\n+                        .ok()\n+                        .map(|pick| (variant, field, pick))\n                     })\n                     .collect();\n \n@@ -1763,11 +1771,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::AdtKind::Struct | ty::AdtKind::Union => {\n                 let [first] = ***substs else { return; };\n                 let ty::GenericArgKind::Type(ty) = first.unpack() else { return; };\n-                let Ok(pick) = self.lookup_probe(\n+                let Ok(pick) = self.lookup_probe_for_diagnostic(\n                     item_name,\n                     ty,\n                     call_expr,\n                     ProbeScope::TraitsInScope,\n+                    None,\n                 )  else { return; };\n \n                 let name = self.ty_to_value_string(actual);\n@@ -2243,14 +2252,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (self.tcx.mk_mut_ref(self.tcx.lifetimes.re_erased, rcvr_ty), \"&mut \"),\n                 (self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, rcvr_ty), \"&\"),\n             ] {\n-                match self.probe_for_name(\n-                    Mode::MethodCall,\n+                match self.lookup_probe_for_diagnostic(\n                     item_name,\n-                    return_type,\n-                    IsSuggestion(true),\n                     *rcvr_ty,\n-                    rcvr.hir_id,\n+                    rcvr,\n                     ProbeScope::AllTraits,\n+                    return_type,\n                 ) {\n                     Ok(pick) => {\n                         // If the method is defined for the receiver we have, it likely wasn't `use`d.\n@@ -2284,14 +2291,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     (self.tcx.mk_diagnostic_item(*rcvr_ty, sym::Rc), \"Rc::new\"),\n                 ] {\n                     if let Some(new_rcvr_t) = *rcvr_ty\n-                        && let Ok(pick) = self.probe_for_name(\n-                            Mode::MethodCall,\n+                        && let Ok(pick) = self.lookup_probe_for_diagnostic(\n                             item_name,\n-                            return_type,\n-                            IsSuggestion(true),\n                             new_rcvr_t,\n-                            rcvr.hir_id,\n+                            rcvr,\n                             ProbeScope::AllTraits,\n+                            return_type,\n                         )\n                     {\n                         debug!(\"try_alt_rcvr: pick candidate {:?}\", pick);\n@@ -2670,11 +2675,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 name: Symbol::intern(&format!(\"{}_else\", method_name.as_str())),\n                 span: method_name.span,\n             };\n-            let probe = self.lookup_probe(\n+            let probe = self.lookup_probe_for_diagnostic(\n                 new_name,\n                 self_ty,\n                 self_expr,\n                 ProbeScope::TraitsInScope,\n+                Some(expected),\n             );\n \n             // check the method arguments number"}]}