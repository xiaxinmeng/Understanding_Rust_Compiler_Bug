{"sha": "2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNzFjNWYxMGM5YzJhZTAyMTg0ZTZkMWZjMmVjMGMzNGRjZTAwZDY=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2017-10-13T13:36:15Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2017-11-02T06:43:36Z"}, "message": "add TerminatorKind::FalseEdges and use it in matches", "tree": {"sha": "2edb3ff47e3a894ffae0b6fa49ecfe2c02a1d76f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2edb3ff47e3a894ffae0b6fa49ecfe2c02a1d76f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "html_url": "https://github.com/rust-lang/rust/commit/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2379faa933923a97158a4939b9fc82dcbd45430f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2379faa933923a97158a4939b9fc82dcbd45430f", "html_url": "https://github.com/rust-lang/rust/commit/2379faa933923a97158a4939b9fc82dcbd45430f"}], "stats": {"total": 425, "additions": 377, "deletions": 48}, "files": [{"sha": "05436201e7a6e56ab75eca6eb8bd18117cd90ffe", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -62,7 +62,8 @@ for mir::Terminator<'gcx> {\n             mir::TerminatorKind::Drop { .. } |\n             mir::TerminatorKind::DropAndReplace { .. } |\n             mir::TerminatorKind::Yield { .. } |\n-            mir::TerminatorKind::Call { .. } => false,\n+            mir::TerminatorKind::Call { .. } |\n+            mir::TerminatorKind::FalseEdges { .. } => false,\n         };\n \n         if hash_spans_unconditionally {\n@@ -210,6 +211,12 @@ for mir::TerminatorKind<'gcx> {\n                 target.hash_stable(hcx, hasher);\n                 cleanup.hash_stable(hcx, hasher);\n             }\n+            mir::TerminatorKind::FalseEdges { ref real_target, ref imaginary_targets } => {\n+                real_target.hash_stable(hcx, hasher);\n+                for target in imaginary_targets {\n+                    target.hash_stable(hcx, hasher);\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "8f86d1b9d78eee8973117c497d8e681e21f61040", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -682,6 +682,11 @@ pub enum TerminatorKind<'tcx> {\n \n     /// Indicates the end of the dropping of a generator\n     GeneratorDrop,\n+\n+    FalseEdges {\n+        real_target: BasicBlock,\n+        imaginary_targets: Vec<BasicBlock>\n+    },\n }\n \n impl<'tcx> Terminator<'tcx> {\n@@ -731,6 +736,11 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n             Assert { target, cleanup: Some(unwind), .. } => vec![target, unwind].into_cow(),\n             Assert { ref target, .. } => slice::ref_slice(target).into_cow(),\n+            FalseEdges { ref real_target, ref imaginary_targets } => {\n+                let mut s = vec![*real_target];\n+                s.extend_from_slice(imaginary_targets);\n+                s.into_cow()\n+            }\n         }\n     }\n \n@@ -757,7 +767,12 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 vec![target]\n             }\n             Assert { ref mut target, cleanup: Some(ref mut unwind), .. } => vec![target, unwind],\n-            Assert { ref mut target, .. } => vec![target]\n+            Assert { ref mut target, .. } => vec![target],\n+            FalseEdges { ref mut real_target, ref mut imaginary_targets } => {\n+                let mut s = vec![real_target];\n+                s.extend(imaginary_targets.iter_mut());\n+                s\n+            }\n         }\n     }\n }\n@@ -874,7 +889,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 }\n \n                 write!(fmt, \")\")\n-            }\n+            },\n+            FalseEdges { .. } => write!(fmt, \"falseEdges\")\n         }\n     }\n \n@@ -910,7 +926,12 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n             Assert { cleanup: None, .. } => vec![\"\".into()],\n             Assert { .. } =>\n-                vec![\"success\".into_cow(), \"unwind\".into_cow()]\n+                vec![\"success\".into_cow(), \"unwind\".into_cow()],\n+            FalseEdges { ref imaginary_targets, .. } => {\n+                let mut l = vec![\"real\".into()];\n+                l.resize(imaginary_targets.len() + 1, \"imaginary\".into());\n+                l\n+            }\n         }\n     }\n }\n@@ -1878,6 +1899,8 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Resume => Resume,\n             Return => Return,\n             Unreachable => Unreachable,\n+            FalseEdges { real_target, ref imaginary_targets } =>\n+                FalseEdges { real_target, imaginary_targets: imaginary_targets.clone() }\n         };\n         Terminator {\n             source_info: self.source_info,\n@@ -1917,7 +1940,8 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Resume |\n             Return |\n             GeneratorDrop |\n-            Unreachable => false\n+            Unreachable |\n+            FalseEdges { .. } => false\n         }\n     }\n }"}, {"sha": "47dbcee6394253b167b353541ce51b4d97bc1d9e", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -486,8 +486,15 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(value, source_location);\n                         self.visit_branch(block, resume);\n                         drop.map(|t| self.visit_branch(block, t));\n+\n                     }\n \n+                    TerminatorKind::FalseEdges { real_target, ref imaginary_targets } => {\n+                        self.visit_branch(block, real_target);\n+                        for target in imaginary_targets {\n+                            self.visit_branch(block, *target);\n+                        }\n+                    }\n                 }\n             }\n "}, {"sha": "2cb1a23ef5a15cfb4f8cc289c997a87ec631563c", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -364,7 +364,8 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> DataflowResultsConsumer<'b, 'tcx>\n             TerminatorKind::Resume |\n             TerminatorKind::Return |\n             TerminatorKind::GeneratorDrop |\n-            TerminatorKind::Unreachable => {\n+            TerminatorKind::Unreachable |\n+            TerminatorKind::FalseEdges { .. } => {\n                 // no data used, thus irrelevant to borrowck\n             }\n         }"}, {"sha": "9d68fe5759c6a92485c699d0464621c55ef52b21", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 83, "deletions": 35, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -21,7 +21,7 @@ use rustc::mir::*;\n use rustc::hir;\n use hair::*;\n use syntax::ast::{Name, NodeId};\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::Span;\n \n // helper functions, broken out by category:\n mod simplify;\n@@ -54,29 +54,43 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             (body, scope.unwrap_or(self.visibility_scope))\n         }).collect();\n \n+        // create binding start block for link them by false edges\n+        let candidate_count = arms.iter().fold(0, |ac, c| ac + c.patterns.len());\n+        let binding_start_blocks: Vec<_> = (0..candidate_count + 1)\n+            .map(|_| self.cfg.start_new_block()).collect();\n+\n         // assemble a list of candidates: there is one candidate per\n         // pattern, which means there may be more than one candidate\n         // *per arm*. These candidates are kept sorted such that the\n         // highest priority candidate comes first in the list.\n         // (i.e. same order as in source)\n+\n         let candidates: Vec<_> =\n             arms.iter()\n                 .enumerate()\n                 .flat_map(|(arm_index, arm)| {\n                     arm.patterns.iter()\n                                 .map(move |pat| (arm_index, pat, arm.guard.clone()))\n                 })\n-                .map(|(arm_index, pattern, guard)| {\n+                .zip(binding_start_blocks.iter().zip(binding_start_blocks.iter().skip(1)))\n+                .map(|((arm_index, pattern, guard),\n+                       (binding_start_block, next_candidate_binding_start_block))| {\n                     Candidate {\n                         span: pattern.span,\n                         match_pairs: vec![MatchPair::new(discriminant_lvalue.clone(), pattern)],\n                         bindings: vec![],\n                         guard,\n                         arm_index,\n+                        binding_start_block: *binding_start_block,\n+                        next_candidate_binding_start_block: *next_candidate_binding_start_block,\n                     }\n                 })\n                 .collect();\n \n+        let outer_source_info = self.source_info(span);\n+        self.cfg.terminate(*binding_start_blocks.last().unwrap(),\n+                           outer_source_info, TerminatorKind::Unreachable);\n+\n         // this will generate code to test discriminant_lvalue and\n         // branch to the appropriate arm block\n         let otherwise = self.match_candidates(span, &mut arm_blocks, candidates, block);\n@@ -148,7 +162,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             match_pairs: vec![MatchPair::new(initializer.clone(), &irrefutable_pat)],\n             bindings: vec![],\n             guard: None,\n-            arm_index: 0, // since we don't call `match_candidates`, this field is unused\n+\n+            // since we don't call `match_candidates`, next fields is unused\n+            arm_index: 0,\n+            binding_start_block: block,\n+            next_candidate_binding_start_block: block\n         };\n \n         // Simplify the candidate. Since the pattern is irrefutable, this should\n@@ -278,6 +296,10 @@ pub struct Candidate<'pat, 'tcx:'pat> {\n \n     // ...and then we branch to arm with this index.\n     arm_index: usize,\n+\n+    // ...and the blocks for add false edges between candidates\n+    binding_start_block: BasicBlock,\n+    next_candidate_binding_start_block: BasicBlock,\n }\n \n #[derive(Clone, Debug)]\n@@ -398,17 +420,43 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             candidates.iter().take_while(|c| c.match_pairs.is_empty()).count();\n         debug!(\"match_candidates: {:?} candidates fully matched\", fully_matched);\n         let mut unmatched_candidates = candidates.split_off(fully_matched);\n-        for (index, candidate) in candidates.into_iter().enumerate() {\n+\n+        let fully_matched_with_guard =\n+            candidates.iter().take_while(|c| c.guard.is_some()).count();\n+\n+        let unreachable_candidates = if fully_matched_with_guard + 1 < candidates.len() {\n+            candidates.split_off(fully_matched_with_guard + 1)\n+        } else {\n+            vec![]\n+        };\n+\n+        for candidate in candidates {\n             // If so, apply any bindings, test the guard (if any), and\n             // branch to the arm.\n-            let is_last = index == fully_matched - 1;\n-            if let Some(b) = self.bind_and_guard_matched_candidate(block, arm_blocks,\n-                                                                   candidate, is_last) {\n+            if let Some(b) = self.bind_and_guard_matched_candidate(block, arm_blocks, candidate) {\n                 block = b;\n             } else {\n                 // if None is returned, then any remaining candidates\n                 // are unreachable (at least not through this path).\n-                return vec![];\n+                // Link them with false edges.\n+                debug!(\"match_candidates: add false edges for unreachable {:?} and unmatched {:?}\",\n+                       unreachable_candidates, unmatched_candidates);\n+                for candidate in unreachable_candidates {\n+                    let source_info = self.source_info(candidate.span);\n+                    let target = self.cfg.start_new_block();\n+                    if let Some(otherwise) = self.bind_and_guard_matched_candidate(target,\n+                                                                                   arm_blocks,\n+                                                                                   candidate) {\n+                        self.cfg.terminate(otherwise, source_info, TerminatorKind::Unreachable);\n+                    }\n+                }\n+\n+                if unmatched_candidates.is_empty() {\n+                    return vec![]\n+                } else {\n+                    let target = self.cfg.start_new_block();\n+                    return self.match_candidates(span, arm_blocks, unmatched_candidates, target);\n+                }\n             }\n         }\n \n@@ -423,9 +471,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.test_candidates(span, arm_blocks, &unmatched_candidates, block);\n \n         // If the target candidates were exhaustive, then we are done.\n-        if otherwise.is_empty() {\n-            return vec![];\n-        }\n+        // But for borrowck continue build decision tree.\n \n         // If all candidates were sorted into `target_candidates` somewhere, then\n         // the initial set was inexhaustive.\n@@ -666,48 +712,50 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn bind_and_guard_matched_candidate<'pat>(&mut self,\n                                               mut block: BasicBlock,\n                                               arm_blocks: &mut ArmBlocks,\n-                                              candidate: Candidate<'pat, 'tcx>,\n-                                              is_last_arm: bool)\n+                                              candidate: Candidate<'pat, 'tcx>)\n                                               -> Option<BasicBlock> {\n         debug!(\"bind_and_guard_matched_candidate(block={:?}, candidate={:?})\",\n                block, candidate);\n \n         debug_assert!(candidate.match_pairs.is_empty());\n \n-        self.bind_matched_candidate(block, candidate.bindings);\n-\n         let arm_block = arm_blocks.blocks[candidate.arm_index];\n+        let candidate_source_info = self.source_info(candidate.span);\n+\n+        self.cfg.terminate(block, candidate_source_info,\n+                               TerminatorKind::FalseEdges {\n+                                   real_target: candidate.binding_start_block,\n+                                   imaginary_targets:\n+                                       vec![candidate.next_candidate_binding_start_block]});\n+\n+        block = candidate.binding_start_block;\n+        self.bind_matched_candidate(block, candidate.bindings);\n \n         if let Some(guard) = candidate.guard {\n             // the block to branch to if the guard fails; if there is no\n             // guard, this block is simply unreachable\n             let guard = self.hir.mirror(guard);\n             let source_info = self.source_info(guard.span);\n             let cond = unpack!(block = self.as_local_operand(block, guard));\n-            let otherwise = self.cfg.start_new_block();\n+\n+            let false_edge_block = self.cfg.start_new_block();\n             self.cfg.terminate(block, source_info,\n-                               TerminatorKind::if_(self.hir.tcx(), cond, arm_block, otherwise));\n-            Some(otherwise)\n-        } else if !is_last_arm {\n-            // Add always true guard in case of more than one arm\n-            // it creates false edges and allow MIR borrowck detects errors\n-            // FIXME(#45184) -- permit \"false edges\"\n-            let source_info = self.source_info(candidate.span);\n-            let true_expr = Expr {\n-                temp_lifetime: None,\n-                ty: self.hir.tcx().types.bool,\n-                span: DUMMY_SP,\n-                kind: ExprKind::Literal{literal: self.hir.true_literal()},\n-            };\n-            let cond = unpack!(block = self.as_local_operand(block, true_expr));\n+                               TerminatorKind::if_(self.hir.tcx(), cond, arm_block,\n+                                   false_edge_block));\n+\n             let otherwise = self.cfg.start_new_block();\n-            self.cfg.terminate(block, source_info,\n-                               TerminatorKind::if_(self.hir.tcx(), cond, arm_block, otherwise));\n+            self.cfg.terminate(false_edge_block, source_info,\n+                               TerminatorKind::FalseEdges {\n+                                   real_target: otherwise,\n+                                   imaginary_targets:\n+                                       vec![candidate.next_candidate_binding_start_block] });\n             Some(otherwise)\n         } else {\n-            let source_info = self.source_info(candidate.span);\n-            self.cfg.terminate(block, source_info,\n-                               TerminatorKind::Goto { target: arm_block  });\n+            self.cfg.terminate(block, candidate_source_info,\n+                               TerminatorKind::FalseEdges {\n+                                   real_target: arm_block,\n+                                   imaginary_targets:\n+                                       vec![candidate.next_candidate_binding_start_block]});\n             None\n         }\n     }"}, {"sha": "cf3c9fefa4766a908fa5f7854c304daf2401de66", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -598,6 +598,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             bindings: candidate.bindings.clone(),\n             guard: candidate.guard.clone(),\n             arm_index: candidate.arm_index,\n+            binding_start_block: candidate.binding_start_block,\n+            next_candidate_binding_start_block: candidate.next_candidate_binding_start_block,\n         }\n     }\n \n@@ -659,6 +661,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             bindings: candidate.bindings.clone(),\n             guard: candidate.guard.clone(),\n             arm_index: candidate.arm_index,\n+            binding_start_block: candidate.binding_start_block,\n+            next_candidate_binding_start_block: candidate.next_candidate_binding_start_block,\n         }\n     }\n "}, {"sha": "f5517096e3abae49ed72a96614759e4983d474d1", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -721,6 +721,12 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n                     self.propagate_bits_into_entry_set_for(in_out, changed, dest_bb);\n                 }\n             }\n+            mir::TerminatorKind::FalseEdges { ref real_target, ref imaginary_targets } => {\n+                self.propagate_bits_into_entry_set_for(in_out, changed, real_target);\n+                for target in imaginary_targets {\n+                    self.propagate_bits_into_entry_set_for(in_out, changed, target);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "79ea745125c5332569172eb9a8aa81573a3bdfa7", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -305,6 +305,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n             TerminatorKind::Goto { target: _ } |\n             TerminatorKind::Resume |\n             TerminatorKind::GeneratorDrop |\n+            TerminatorKind::FalseEdges { .. } |\n             TerminatorKind::Unreachable => { }\n \n             TerminatorKind::Return => {"}, {"sha": "80c8f22c1029e0c60ce2873ee54285cdd5aa4983", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -73,7 +73,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             TerminatorKind::GeneratorDrop |\n             TerminatorKind::Resume |\n             TerminatorKind::Return |\n-            TerminatorKind::Unreachable => {\n+            TerminatorKind::Unreachable |\n+            TerminatorKind::FalseEdges { .. } => {\n                                 // safe (at least as emitted during MIR construction)\n             }\n "}, {"sha": "f2453d3946172f40241d39d8bd46f74316c93546", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -720,6 +720,12 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                 }\n             }\n             TerminatorKind::Unreachable => { }\n+            TerminatorKind::FalseEdges { ref mut real_target, ref mut imaginary_targets } => {\n+                *real_target = self.update_target(*real_target);\n+                for target in imaginary_targets {\n+                    *target = self.update_target(*target);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "7de8de3c96bd7bca3bff2923442208d128232dc7", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -45,7 +45,8 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n             TerminatorKind::Unreachable |\n             TerminatorKind::GeneratorDrop |\n             TerminatorKind::Yield { .. } |\n-            TerminatorKind::SwitchInt { .. } => {\n+            TerminatorKind::SwitchInt { .. } |\n+            TerminatorKind::FalseEdges { .. } => {\n                 /* nothing to do */\n             },\n             TerminatorKind::Call { cleanup: ref mut unwind, .. } |"}, {"sha": "583dfd9b616f1bea64b21d925751a135d84cdeae", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -317,7 +317,8 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::Resume |\n                 TerminatorKind::GeneratorDrop |\n                 TerminatorKind::Yield { .. } |\n-                TerminatorKind::Unreachable => None,\n+                TerminatorKind::Unreachable |\n+                TerminatorKind::FalseEdges { .. } => None,\n \n                 TerminatorKind::Return => {\n                     // Check for unused values. This usually means"}, {"sha": "edbbe5305e959cb1dff9714bed2f645dfe2e854d", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -61,6 +61,9 @@ impl MirPass for SimplifyBranches {\n                 }), expected, .. } if cond == expected => {\n                     TerminatorKind::Goto { target: target }\n                 },\n+                TerminatorKind::FalseEdges { real_target, .. } => {\n+                    TerminatorKind::Goto { target: real_target }\n+                },\n                 _ => continue\n             };\n         }"}, {"sha": "d8dc7a8d5cc7d3e57f377828295f4bfd900a61a7", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -441,7 +441,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             TerminatorKind::Return |\n             TerminatorKind::GeneratorDrop |\n             TerminatorKind::Unreachable |\n-            TerminatorKind::Drop { .. } => {\n+            TerminatorKind::Drop { .. } |\n+            TerminatorKind::FalseEdges { .. } => {\n                 // no checks needed for these\n             }\n \n@@ -685,6 +686,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     self.assert_iscleanup(mir, block, cleanup, true);\n                 }\n             }\n+            TerminatorKind::FalseEdges { real_target, ref imaginary_targets } => {\n+                self.assert_iscleanup(mir, block, real_target, is_cleanup);\n+                for target in imaginary_targets {\n+                    self.assert_iscleanup(mir, block, *target, is_cleanup);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "30e2ba61dbda7ef90b50b4c6fd5605562f517a78", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -121,6 +121,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             TerminatorKind::Assert { .. } => \"TerminatorKind::Assert\",\n             TerminatorKind::GeneratorDrop => \"TerminatorKind::GeneratorDrop\",\n             TerminatorKind::Yield { .. } => \"TerminatorKind::Yield\",\n+            TerminatorKind::FalseEdges { .. } => \"TerminatorKind::FalseEdges\",\n         }, kind);\n         self.super_terminator_kind(block, kind, location);\n     }"}, {"sha": "73f60ff29a85141c1987dcea6725c6c3c75cb3e2", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -228,7 +228,8 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n                 TerminatorKind::GeneratorDrop |\n                 TerminatorKind::Unreachable |\n                 TerminatorKind::SwitchInt { .. } |\n-                TerminatorKind::Yield { .. }  => {\n+                TerminatorKind::Yield { .. } |\n+                TerminatorKind::FalseEdges { .. } => {\n                     /* nothing to do */\n                 }\n                 TerminatorKind::Call { cleanup: unwind, .. } |"}, {"sha": "11d992bd4cf0eb89fd891ada29090af21c0fc5d8", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -583,7 +583,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         cleanup);\n             }\n             mir::TerminatorKind::GeneratorDrop |\n-            mir::TerminatorKind::Yield { .. } => bug!(\"generator ops in trans\"),\n+            mir::TerminatorKind::Yield { .. } |\n+            mir::TerminatorKind::FalseEdges { .. } => bug!(\"generator ops in trans\"),\n         }\n     }\n "}, {"sha": "81c38dd3fe11d926371b122fb15f8af00539da32", "filename": "src/librustc_trans_utils/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_trans_utils%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Flibrustc_trans_utils%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcollector.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -623,7 +623,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::TerminatorKind::Unreachable |\n             mir::TerminatorKind::Assert { .. } => {}\n             mir::TerminatorKind::GeneratorDrop |\n-            mir::TerminatorKind::Yield { .. } => bug!(),\n+            mir::TerminatorKind::Yield { .. } |\n+            mir::TerminatorKind::FalseEdges { .. } => bug!(),\n         }\n \n         self.super_terminator_kind(block, kind, location);"}, {"sha": "8bab6e8dfceac6f849fec7366cd1d302e34207e2", "filename": "src/test/compile-fail/borrowck/borrowck-drop-from-guard.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-drop-from-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-drop-from-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-drop-from-guard.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+//compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+fn foo(_:String) {}\n+\n+fn main()\n+{\n+    let my_str = \"hello\".to_owned();\n+    match Some(42) {\n+        Some(_) if { drop(my_str); false } => {}\n+        Some(_) => {}\n+        None => { foo(my_str); } //~ ERROR (Mir) [E0381]\n+    }\n+}"}, {"sha": "5f236014457a7222e33b22b63fecbd092098b27c", "filename": "src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -11,6 +11,24 @@\n // revisions: ast mir\n //[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n \n+enum Foo {\n+    A(i32),\n+    B\n+}\n+\n+fn match_enum() {\n+    let mut foo = Foo::B;\n+    let p = &mut foo;\n+    let _ = match foo {\n+        Foo::B => 1, //[mir]~ ERROR (Mir) [E0503]\n+        _ => 2,\n+        Foo::A(x) => x //[ast]~ ERROR [E0503]\n+                       //[mir]~^ ERROR (Ast) [E0503]\n+                       //[mir]~| ERROR (Mir) [E0503]\n+    };\n+}\n+\n+\n fn main() {\n     let mut x = 1;\n     let _x = &mut x;"}, {"sha": "81153c0224425415249e0aaace6f41d29ea62055", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "patch": "@@ -0,0 +1,166 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+fn guard() -> bool {\n+    false\n+}\n+\n+fn guard2(_:i32) -> bool {\n+    true\n+}\n+\n+fn full_tested_match()\n+{\n+    let _ = match Some(42) {\n+        Some(_) if guard() => 1,\n+        Some(_) => 2,\n+        None => 3\n+    };\n+}\n+\n+fn main() {\n+    let _ = match Some(1) {\n+        Some(_w) if guard() => 1,\n+        _x => 2,\n+        Some(y) if guard2(y) => 3,\n+        _z => 4,\n+    };\n+}\n+\n+// END RUST SOURCE\n+//\n+// START rustc.node17.NLL.before.mir\n+//  bb0: {\n+//      ...\n+//      _2 = std::option::Option<i32>::Some(const 42i32,);\n+//      _3 = discriminant(_2);\n+//      switchInt(_3) -> [0isize: bb8, otherwise: bb9];\n+//  }\n+//  bb1: { // arm1\n+//      _1 = const 1i32;\n+//      goto -> bb13;\n+//  }\n+//  bb2: { // arm2\n+//      _1 = const 2i32;\n+//      goto -> bb13;\n+//  }\n+//  bb3: { // arm3\n+//      _1 = const 3i32;\n+//      goto -> bb13;\n+//  }\n+//  bb4: { // binding1\n+//      ...\n+//      _4 = const guard() -> bb10;\n+//  }\n+//  bb5: { // binding2\n+//      falseEdges -> [real: bb2, imaginary: bb6];\n+//  }\n+//  bb6: { // binding3\n+//      falseEdges -> [real: bb3, imaginary: bb7];\n+//  }\n+//  bb7: {\n+//      unreachable;\n+//  }\n+//  bb8: {\n+//      falseEdges -> [real: bb6, imaginary: bb7]; // from before_binding3 to unreachable\n+//  }\n+//  bb9: {\n+//      falseEdges -> [real: bb4, imaginary: bb5]; // from before_binding1 to binding2\n+//  }\n+//  bb10: {\n+//      switchInt(_4) -> [0u8: bb11, otherwise: bb1]; // end of guard\n+//  }\n+//  bb11: {\n+//      falseEdges -> [real: bb12, imaginary: bb5]; // after_guard to binding2\n+//  }\n+//  bb12: {\n+//      falseEdges -> [real: bb5, imaginary: bb6]; // from before_binding2 to binding3\n+//  }\n+//  bb13: {\n+//      ...\n+//      return;\n+//  }\n+//\n+//\n+// END rustc.node17.NLL.before.mir\n+//\n+// START rustc.node36.NLL.before.mir\n+// bb0: {\n+//     ...\n+//     _2 = std::option::Option<i32>::Some(const 1i32,);\n+//     _7 = discriminant(_2);\n+//     switchInt(_7) -> [1isize: bb10, otherwise: bb13];\n+// }\n+// bb1: { // arm1\n+//      _1 = const 1i32;\n+//      goto -> bb17;\n+// }\n+// bb2: { // arm2\n+//     _1 = const 2i32;\n+//     goto -> bb17;\n+// }\n+// bb3: { // arm3\n+//     _1 = const 3i32;\n+//      goto -> bb17;\n+// }\n+// bb4: { // arm4\n+//     _1 = const 4i32;\n+//      goto -> bb17;\n+// }\n+// bb5: { // binding1: Some(w) if guard() =>\n+//     ...\n+//     _8 = const guard() -> bb11;\n+// }\n+// bb6: { // binding2: x =>\n+//     ...\n+//     _4 = _2;\n+//     falseEdges -> [real: bb2, imaginary: bb7]; // after binding2 to binding3\n+//    }\n+// bb7: { // binding3: Some(y) if guard2(y) =>\n+//     ...\n+//     _10 = const guard2(_11) -> bb14;\n+// }\n+// bb8: { // binding4: z_ =>\n+//     ...\n+//     _6 = _2;\n+//     falseEdges -> [real: bb4, imaginary: bb9]; // after binding3 to unreachable\n+// }\n+// bb9: {\n+//     unreachable;\n+// }\n+// bb10: {\n+//     falseEdges -> [real: bb5, imaginary: bb6]; // from before_binding1 to binding2\n+// }\n+// bb11: {\n+//     switchInt(_8) -> [0u8: bb12, otherwise: bb1]; // end of gurard\n+// }\n+// bb12: {\n+//     falseEdges -> [real: bb13, imaginary: bb6]; // after guard to binding2\n+// }\n+// bb13: {\n+//     falseEdges -> [real: bb6, imaginary: bb7]; // from before_binding2 to binding3\n+// }\n+// bb14: {\n+//      ...\n+//      switchInt(_10) -> [0u8: bb15, otherwise: bb3]; // end of guard2\n+// }\n+// bb15: {\n+//     falseEdges -> [real: bb16, imaginary: bb8]; // after guard2 to binding4\n+// }\n+// bb16: {\n+//     falseEdges -> [real: bb8, imaginary: bb9]; // from befor binding3 to binding4\n+// }\n+// bb17: {\n+//     ...\n+//     return;\n+// }\n+// END rustc.node36.NLL.before.mir"}]}