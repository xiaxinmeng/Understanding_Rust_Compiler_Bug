{"sha": "b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYWEzY2FjNWI3ZjVhYzNlNTI3ZjMyNDMxZmE4MmUxYzdkMDBjNTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T08:59:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T07:55:42Z"}, "message": "Miri: add machine hook for MIR-level assertion panics", "tree": {"sha": "efca9b1a29e82e88500252349b3ff42022ba4b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efca9b1a29e82e88500252349b3ff42022ba4b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "html_url": "https://github.com/rust-lang/rust/commit/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "html_url": "https://github.com/rust-lang/rust/commit/f5c81e0a986e4285d3d0fd781a1bd475753eb12c"}], "stats": {"total": 106, "additions": 67, "deletions": 39}, "files": [{"sha": "18b965f4c3466e86717c9056fa1ed0b1dba9aa48", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "patch": "@@ -23,7 +23,7 @@ use syntax::{source_map::{Span, DUMMY_SP}, symbol::Symbol};\n use crate::interpret::{self,\n     PlaceTy, MPlaceTy, OpTy, ImmTy, Immediate, Scalar, Pointer,\n     RawConst, ConstValue, Machine,\n-    InterpResult, InterpErrorInfo, GlobalId, InterpCx, StackPopCleanup,\n+    InterpResult, InterpErrorInfo, GlobalId, InterpCx, StackPopCleanup, AssertMessage,\n     Allocation, AllocId, MemoryKind, Memory,\n     snapshot, RefTracking, intern_const_alloc_recursive,\n };\n@@ -395,6 +395,39 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         )\n     }\n \n+    fn assert_panic(\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        msg: &AssertMessage<'tcx>,\n+        _unwind: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        use rustc::mir::interpret::PanicInfo::*;\n+        Err(match msg {\n+            BoundsCheck { ref len, ref index } => {\n+                let len = ecx\n+                    .read_immediate(ecx.eval_operand(len, None)?)\n+                    .expect(\"can't eval len\")\n+                    .to_scalar()?\n+                    .to_machine_usize(&*ecx)?;\n+                let index = ecx\n+                    .read_immediate(ecx.eval_operand(index, None)?)\n+                    .expect(\"can't eval index\")\n+                    .to_scalar()?\n+                    .to_machine_usize(&*ecx)?;\n+                err_panic!(BoundsCheck { len, index })\n+            }\n+            Overflow(op) => err_panic!(Overflow(*op)),\n+            OverflowNeg => err_panic!(OverflowNeg),\n+            DivisionByZero => err_panic!(DivisionByZero),\n+            RemainderByZero => err_panic!(RemainderByZero),\n+            ResumedAfterReturn(generator_kind)\n+                => err_panic!(ResumedAfterReturn(*generator_kind)),\n+            ResumedAfterPanic(generator_kind)\n+                => err_panic!(ResumedAfterPanic(*generator_kind)),\n+            Panic { .. } => bug!(\"`Panic` variant cannot occur in MIR\"),\n+        }\n+        .into())\n+    }\n+\n     fn ptr_to_int(\n         _mem: &Memory<'mir, 'tcx, Self>,\n         _ptr: Pointer,"}, {"sha": "42d5140e348439bce29b102190b1a9250b4a485b", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "patch": "@@ -11,7 +11,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use syntax_pos::Span;\n \n use super::{\n-    Allocation, AllocId, InterpResult, Scalar, AllocationExtra,\n+    Allocation, AllocId, InterpResult, Scalar, AllocationExtra, AssertMessage,\n     InterpCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer, Memory,\n     Frame, Operand,\n };\n@@ -175,6 +175,13 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx>;\n \n+    /// Called to evaluate `Assert` MIR terminators that trigger a panic.\n+    fn assert_panic(\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        msg: &AssertMessage<'tcx>,\n+        unwind: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx>;\n+\n     /// Called for read access to a foreign static item.\n     ///\n     /// This will only be called once per static and machine; the result is cached in"}, {"sha": "a47482524039a4919b6a60337e9bfd0f7e4d6cf9", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "patch": "@@ -7,8 +7,8 @@ use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n-    GlobalId, InterpResult, PointerArithmetic,\n-    InterpCx, Machine, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n+    GlobalId, InterpResult, InterpCx, Machine,\n+    OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n };\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n@@ -115,40 +115,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 expected,\n                 ref msg,\n                 target,\n-                ..\n+                cleanup,\n             } => {\n                 let cond_val = self.read_immediate(self.eval_operand(cond, None)?)?\n                     .to_scalar()?.to_bool()?;\n                 if expected == cond_val {\n                     self.go_to_block(target);\n                 } else {\n-                    // Compute error message\n-                    use rustc::mir::interpret::PanicInfo::*;\n-                    return Err(match msg {\n-                        BoundsCheck { ref len, ref index } => {\n-                            let len = self\n-                                .read_immediate(self.eval_operand(len, None)?)\n-                                .expect(\"can't eval len\")\n-                                .to_scalar()?\n-                                .to_bits(self.memory.pointer_size())? as u64;\n-                            let index = self\n-                                .read_immediate(self.eval_operand(index, None)?)\n-                                .expect(\"can't eval index\")\n-                                .to_scalar()?\n-                                .to_bits(self.memory.pointer_size())? as u64;\n-                            err_panic!(BoundsCheck { len, index })\n-                        }\n-                        Overflow(op) => err_panic!(Overflow(*op)),\n-                        OverflowNeg => err_panic!(OverflowNeg),\n-                        DivisionByZero => err_panic!(DivisionByZero),\n-                        RemainderByZero => err_panic!(RemainderByZero),\n-                        ResumedAfterReturn(generator_kind)\n-                            => err_panic!(ResumedAfterReturn(*generator_kind)),\n-                        ResumedAfterPanic(generator_kind)\n-                            => err_panic!(ResumedAfterPanic(*generator_kind)),\n-                        Panic { .. } => bug!(\"`Panic` variant cannot occur in MIR\"),\n-                    }\n-                    .into());\n+                    M::assert_panic(self, msg, cleanup)?;\n                 }\n             }\n \n@@ -164,15 +138,21 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 return Ok(())\n             },\n \n+            // It is UB to ever encounter this.\n+            Unreachable => throw_ub!(Unreachable),\n+\n+            // These should never occur for MIR we actually run.\n+            DropAndReplace { .. } |\n+            FalseEdges { .. } |\n+            FalseUnwind { .. } =>\n+                bug!(\"{:#?} should have been eliminated by MIR pass\", terminator.kind),\n+\n+            // These are not (yet) supported. It is unclear if they even can occur in\n+            // MIR that we actually run.\n             Yield { .. } |\n             GeneratorDrop |\n-            DropAndReplace { .. } |\n-            Abort => unimplemented!(\"{:#?}\", terminator.kind),\n-            FalseEdges { .. } => bug!(\"should have been eliminated by\\\n-                                      `simplify_branches` mir pass\"),\n-            FalseUnwind { .. } => bug!(\"should have been eliminated by\\\n-                                       `simplify_branches` mir pass\"),\n-            Unreachable => throw_ub!(Unreachable),\n+            Abort =>\n+                throw_unsup_format!(\"Unsupported terminator kind: {:#?}\", terminator.kind),\n         }\n \n         Ok(())"}, {"sha": "1fb254fb69fdf7cb89a9cf0537a8073b361af458", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b1aa3cac5b7f5ac3e527f32431fa82e1c7d00c52", "patch": "@@ -156,6 +156,14 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         throw_unsup!(ConstPropUnsupported(\"calling intrinsics isn't supported in ConstProp\"));\n     }\n \n+    fn assert_panic(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _msg: &rustc::mir::interpret::AssertMessage<'tcx>,\n+        _unwind: Option<rustc::mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        throw_unsup_format!(\"panics are not supported in ConstProp\");\n+    }\n+\n     fn ptr_to_int(\n         _mem: &Memory<'mir, 'tcx, Self>,\n         _ptr: Pointer,"}]}