{"sha": "bb39cc3ae6db7effb17902d0cff0a737aef15101", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMzljYzNhZTZkYjdlZmZiMTc5MDJkMGNmZjBhNzM3YWVmMTUxMDE=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-11-16T07:48:02Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-11-23T05:19:53Z"}, "message": "Make MutRef more consistent with &mut", "tree": {"sha": "22382a11727c47b516e09d8a9825ef49295b97c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22382a11727c47b516e09d8a9825ef49295b97c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb39cc3ae6db7effb17902d0cff0a737aef15101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb39cc3ae6db7effb17902d0cff0a737aef15101", "html_url": "https://github.com/rust-lang/rust/commit/bb39cc3ae6db7effb17902d0cff0a737aef15101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb39cc3ae6db7effb17902d0cff0a737aef15101/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82", "html_url": "https://github.com/rust-lang/rust/commit/2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "c343e8734cb8c052c36800e30baab401582902a2", "filename": "src/libstd/mutable.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb39cc3ae6db7effb17902d0cff0a737aef15101/src%2Flibstd%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb39cc3ae6db7effb17902d0cff0a737aef15101/src%2Flibstd%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmutable.rs?ref=bb39cc3ae6db7effb17902d0cff0a737aef15101", "patch": "@@ -82,30 +82,30 @@ impl<T> Mut<T> {\n \n     /// Mutably borrows the wrapped value.\n     ///\n-    /// The borrow lasts untile the returned `MutRef` exits scope. The value\n+    /// The borrow lasts untile the returned `RefMut` exits scope. The value\n     /// cannot be borrowed while this borrow is active.\n     ///\n     /// Returns `None` if the value is currently borrowed.\n-    pub fn try_borrow_mut<'a>(&'a self) -> Option<MutRef<'a, T>> {\n+    pub fn try_borrow_mut<'a>(&'a self) -> Option<RefMut<'a, T>> {\n         match self.borrow {\n             UNUSED => unsafe {\n                 let mut_self = self.as_mut();\n                 mut_self.borrow = WRITING;\n-                Some(MutRef { parent: mut_self })\n+                Some(RefMut { parent: mut_self })\n             },\n             _ => None\n         }\n     }\n \n     /// Mutably borrows the wrapped value.\n     ///\n-    /// The borrow lasts untile the returned `MutRef` exits scope. The value\n+    /// The borrow lasts untile the returned `RefMut` exits scope. The value\n     /// cannot be borrowed while this borrow is active.\n     ///\n     /// # Failure\n     ///\n     /// Fails if the value is currently borrowed.\n-    pub fn borrow_mut<'a>(&'a self) -> MutRef<'a, T> {\n+    pub fn borrow_mut<'a>(&'a self) -> RefMut<'a, T> {\n         match self.try_borrow_mut() {\n             Some(ptr) => ptr,\n             None => fail!(\"Mut<T> already borrowed\")\n@@ -179,19 +179,19 @@ impl<'box, T> Ref<'box, T> {\n }\n \n /// Wraps a mutable borrowed reference to a value in a `Mut` box.\n-pub struct MutRef<'box, T> {\n+pub struct RefMut<'box, T> {\n     priv parent: &'box mut Mut<T>\n }\n \n #[unsafe_destructor]\n-impl<'box, T> Drop for MutRef<'box, T> {\n+impl<'box, T> Drop for RefMut<'box, T> {\n     fn drop(&mut self) {\n         assert!(self.parent.borrow == WRITING);\n-        unsafe { self.parent.as_mut().borrow = UNUSED; }\n+        self.parent.borrow = UNUSED;\n     }\n }\n \n-impl<'box, T> MutRef<'box, T> {\n+impl<'box, T> RefMut<'box, T> {\n     /// Retrieve a mutable reference to the stored value.\n     #[inline]\n     pub fn get<'a>(&'a mut self) -> &'a mut T {"}]}