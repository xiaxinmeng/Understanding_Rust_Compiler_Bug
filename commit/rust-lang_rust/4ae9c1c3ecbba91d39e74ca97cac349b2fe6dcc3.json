{"sha": "4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZTljMWMzZWNiYmE5MWQzOWU3NGNhOTdjYWMzNDliMmZlNmRjYzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T03:21:58Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T03:33:34Z"}, "message": "parser::diagnostics: remove fn fatal", "tree": {"sha": "9db55b1689cebb2973f6b257475540887ac78cb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9db55b1689cebb2973f6b257475540887ac78cb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3", "html_url": "https://github.com/rust-lang/rust/commit/4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "html_url": "https://github.com/rust-lang/rust/commit/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "37374d707192772140b0c4ab3ac055f84f264863", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3", "patch": "@@ -890,12 +890,12 @@ fn parse_nt_inner<'a>(p: &mut Parser<'a>, sp: Span, name: Symbol) -> PResult<'a,\n     Ok(match name {\n         sym::item => match p.parse_item()? {\n             Some(i) => token::NtItem(i),\n-            None => return Err(p.fatal(\"expected an item keyword\")),\n+            None => return Err(p.struct_span_err(p.token.span, \"expected an item keyword\")),\n         },\n         sym::block => token::NtBlock(p.parse_block()?),\n         sym::stmt => match p.parse_stmt()? {\n             Some(s) => token::NtStmt(s),\n-            None => return Err(p.fatal(\"expected a statement\")),\n+            None => return Err(p.struct_span_err(p.token.span, \"expected a statement\")),\n         },\n         sym::pat => token::NtPat(p.parse_pat(None)?),\n         sym::expr => token::NtExpr(p.parse_expr()?),\n@@ -909,7 +909,8 @@ fn parse_nt_inner<'a>(p: &mut Parser<'a>, sp: Span, name: Symbol) -> PResult<'a,\n                 token::NtIdent(Ident::new(name, span), is_raw)\n             } else {\n                 let token_str = pprust::token_to_string(&p.token);\n-                return Err(p.fatal(&format!(\"expected ident, found {}\", &token_str)));\n+                let msg = &format!(\"expected ident, found {}\", &token_str);\n+                return Err(p.struct_span_err(p.token.span, msg));\n             }\n         }\n         sym::path => token::NtPath(p.parse_path(PathStyle::Type)?),\n@@ -920,7 +921,8 @@ fn parse_nt_inner<'a>(p: &mut Parser<'a>, sp: Span, name: Symbol) -> PResult<'a,\n                 token::NtLifetime(p.expect_lifetime().ident)\n             } else {\n                 let token_str = pprust::token_to_string(&p.token);\n-                return Err(p.fatal(&format!(\"expected a lifetime, found `{}`\", &token_str)));\n+                let msg = &format!(\"expected a lifetime, found `{}`\", &token_str);\n+                return Err(p.struct_span_err(p.token.span, msg));\n             }\n         }\n         // this is not supposed to happen, since it has been checked"}, {"sha": "778f24fad6d4910d3e299a1293eb5694ba823150", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=4ae9c1c3ecbba91d39e74ca97cac349b2fe6dcc3", "patch": "@@ -157,10 +157,6 @@ crate enum ConsumeClosingDelim {\n }\n \n impl<'a> Parser<'a> {\n-    pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n-        self.sess.span_diagnostic.struct_span_fatal(self.token.span, m)\n-    }\n-\n     pub(super) fn span_fatal_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -290,7 +286,7 @@ impl<'a> Parser<'a> {\n             )\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n-        let mut err = self.fatal(&msg_exp);\n+        let mut err = self.struct_span_err(self.token.span, &msg_exp);\n         let sp = if self.token == token::Eof {\n             // This is EOF; don't want to point at the following char, but rather the last token.\n             self.prev_span\n@@ -1261,7 +1257,8 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn expected_semi_or_open_brace<T>(&mut self) -> PResult<'a, T> {\n         let token_str = super::token_descr(&self.token);\n-        let mut err = self.fatal(&format!(\"expected `;` or `{{`, found {}\", token_str));\n+        let msg = &format!(\"expected `;` or `{{`, found {}\", token_str);\n+        let mut err = self.struct_span_err(self.token.span, msg);\n         err.span_label(self.token.span, \"expected `;` or `{`\");\n         Err(err)\n     }"}]}