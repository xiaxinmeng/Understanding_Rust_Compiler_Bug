{"sha": "12905e5b58f22df026ef30afa6f0bdf7319cbddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOTA1ZTViNThmMjJkZjAyNmVmMzBhZmE2ZjBiZGY3MzE5Y2JkZGQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-05T20:32:18Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "Some more refactoring", "tree": {"sha": "2efbeb8360a59f146219ca22dad7813f24237c12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2efbeb8360a59f146219ca22dad7813f24237c12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12905e5b58f22df026ef30afa6f0bdf7319cbddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12905e5b58f22df026ef30afa6f0bdf7319cbddd", "html_url": "https://github.com/rust-lang/rust/commit/12905e5b58f22df026ef30afa6f0bdf7319cbddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12905e5b58f22df026ef30afa6f0bdf7319cbddd/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "def124e932f02f5961d26af6cc03f696f389205f", "url": "https://api.github.com/repos/rust-lang/rust/commits/def124e932f02f5961d26af6cc03f696f389205f", "html_url": "https://github.com/rust-lang/rust/commit/def124e932f02f5961d26af6cc03f696f389205f"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "942b34dc161057637cde9311ce5a3f2801825b9d", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12905e5b58f22df026ef30afa6f0bdf7319cbddd/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12905e5b58f22df026ef30afa6f0bdf7319cbddd/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=12905e5b58f22df026ef30afa6f0bdf7319cbddd", "patch": "@@ -207,25 +207,23 @@ fn get_syntactic_substs(impl_block: ast::ImplBlock) -> Option<Vec<ast::TypeRef>>\n }\n \n // FIXME: This should be a general utility (not even just for assists)\n-fn substitute_type_params<N: AstNode>(\n+fn substitute_type_params<N: AstNode + Clone>(\n     db: &impl HirDatabase,\n     node: hir::InFile<N>,\n     substs: &HashMap<hir::TypeParam, ast::TypeRef>,\n ) -> N {\n     let type_param_replacements = node\n-        .value\n-        .syntax()\n-        .descendants()\n-        .filter_map(ast::TypeRef::cast)\n+        .clone()\n+        .descendants::<ast::TypeRef>()\n         .filter_map(|n| {\n-            let path = match &n {\n+            let path = match &n.value {\n                 ast::TypeRef::PathType(path_type) => path_type.path()?,\n                 _ => return None,\n             };\n-            let analyzer = hir::SourceAnalyzer::new(db, node.with_value(n.syntax()), None);\n+            let analyzer = hir::SourceAnalyzer::new(db, n.syntax(), None);\n             let resolution = analyzer.resolve_path(db, &path)?;\n             match resolution {\n-                hir::PathResolution::TypeParam(tp) => Some((n, substs.get(&tp)?.clone())),\n+                hir::PathResolution::TypeParam(tp) => Some((n.value, substs.get(&tp)?.clone())),\n                 _ => None,\n             }\n         })"}, {"sha": "51c5f9623c2e11e34ce17ac662e2b427838fdf1d", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12905e5b58f22df026ef30afa6f0bdf7319cbddd/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12905e5b58f22df026ef30afa6f0bdf7319cbddd/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=12905e5b58f22df026ef30afa6f0bdf7319cbddd", "patch": "@@ -322,3 +322,13 @@ impl InFile<SyntaxNode> {\n         })\n     }\n }\n+\n+impl<N: AstNode> InFile<N> {\n+    pub fn descendants<T: AstNode>(self) -> impl Iterator<Item = InFile<T>> {\n+        self.value.syntax().descendants().filter_map(T::cast).map(move |n| self.with_value(n))\n+    }\n+\n+    pub fn syntax(&self) -> InFile<&SyntaxNode> {\n+        self.with_value(self.value.syntax())\n+    }\n+}"}]}