{"sha": "4194d0f19431a4e9eeab42d91af505822e419a8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOTRkMGYxOTQzMWE0ZTllZWFiNDJkOTFhZjUwNTgyMmU0MTlhOGU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-09T20:20:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-09T20:20:24Z"}, "message": "Merge pull request #1522 from topecongiro/poor-formatting/if-else\n\nInherit alignment to 'else'", "tree": {"sha": "bf65c0da3d4703dd2eba6a131f2adf9992fc4ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf65c0da3d4703dd2eba6a131f2adf9992fc4ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4194d0f19431a4e9eeab42d91af505822e419a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4194d0f19431a4e9eeab42d91af505822e419a8e", "html_url": "https://github.com/rust-lang/rust/commit/4194d0f19431a4e9eeab42d91af505822e419a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4194d0f19431a4e9eeab42d91af505822e419a8e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e1ca73fc23ab05a02e08f8cd1465a7969fa49e", "url": "https://api.github.com/repos/rust-lang/rust/commits/35e1ca73fc23ab05a02e08f8cd1465a7969fa49e", "html_url": "https://github.com/rust-lang/rust/commit/35e1ca73fc23ab05a02e08f8cd1465a7969fa49e"}, {"sha": "9d96c33d592732fb52055987be35b24e2929b616", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d96c33d592732fb52055987be35b24e2929b616", "html_url": "https://github.com/rust-lang/rust/commit/9d96c33d592732fb52055987be35b24e2929b616"}], "stats": {"total": 82, "additions": 64, "deletions": 18}, "files": [{"sha": "6a63e1733d97142ac1a27d6340500346ded53eb3", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4194d0f19431a4e9eeab42d91af505822e419a8e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4194d0f19431a4e9eeab42d91af505822e419a8e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4194d0f19431a4e9eeab42d91af505822e419a8e", "patch": "@@ -988,8 +988,11 @@ impl<'a> Rewrite for ControlFlow<'a> {\n \n         if let Some(else_block) = self.else_block {\n             // Since this is an else block, we should not indent for the assignment preceding\n-            // the original if, so set shape.offset to 0.\n-            let shape = Shape { offset: 0, ..shape };\n+            // the original if, so set shape.offset to shape.indent.alignment.\n+            let shape = Shape {\n+                offset: shape.indent.alignment,\n+                ..shape\n+            };\n             let mut last_in_chain = false;\n             let rewrite = match else_block.node {\n                 // If the else expression is another if-else expression, prevent it\n@@ -1494,6 +1497,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n                     shape: Shape)\n                     -> Option<String> {\n     debug!(\"rewrite_pat_expr {:?} {:?} {:?}\", shape, pat, expr);\n+    let mut pat_string = String::new();\n     let mut result = match pat {\n         Some(pat) => {\n             let matcher = if matcher.is_empty() {\n@@ -1503,7 +1507,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n             };\n             let pat_shape = try_opt!(try_opt!(shape.shrink_left(matcher.len()))\n                                          .sub_width(connector.len()));\n-            let pat_string = try_opt!(pat.rewrite(context, pat_shape));\n+            pat_string = try_opt!(pat.rewrite(context, pat_shape));\n             format!(\"{}{}{}\", matcher, pat_string, connector)\n         }\n         None => String::new(),\n@@ -1516,19 +1520,11 @@ fn rewrite_pat_expr(context: &RewriteContext,\n     if shape.width > extra_offset + 1 {\n         let spacer = if pat.is_some() { \" \" } else { \"\" };\n \n-        let expr_shape = try_opt!(shape.sub_width(extra_offset + spacer.len()))\n-            .add_offset(extra_offset + spacer.len());\n+        let expr_shape = try_opt!(shape.offset_left(extra_offset + spacer.len()));\n         let expr_rewrite = expr.rewrite(context, expr_shape);\n \n         if let Some(expr_string) = expr_rewrite {\n-            let pat_simple = pat.and_then(|p| {\n-                                              p.rewrite(context,\n-                                                        Shape::legacy(context.config.max_width,\n-                                                                      Indent::empty()))\n-                                          })\n-                .map(|s| pat_is_simple(&s));\n-\n-            if pat.is_none() || pat_simple.unwrap_or(false) || !expr_string.contains('\\n') {\n+            if pat.is_none() || pat_is_simple(&pat_string) || !expr_string.contains('\\n') {\n                 result.push_str(spacer);\n                 result.push_str(&expr_string);\n                 return Some(result);\n@@ -1542,11 +1538,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n     result.push('\\n');\n     result.push_str(&nested_indent.to_string(context.config));\n \n-    let expr_rewrite = expr.rewrite(&context,\n-                                    Shape::legacy(try_opt!(context.config\n-                                                      .max_width\n-                                                      .checked_sub(nested_indent.width())),\n-                                                  nested_indent));\n+    let expr_rewrite = expr.rewrite(&context, Shape::indented(nested_indent, context.config));\n     result.push_str(&try_opt!(expr_rewrite));\n \n     Some(result)"}, {"sha": "1b45aa5d6162929f9a39bccee67a45881ae93802", "filename": "tests/source/issue-1468.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4194d0f19431a4e9eeab42d91af505822e419a8e/tests%2Fsource%2Fissue-1468.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4194d0f19431a4e9eeab42d91af505822e419a8e/tests%2Fsource%2Fissue-1468.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1468.rs?ref=4194d0f19431a4e9eeab42d91af505822e419a8e", "patch": "@@ -0,0 +1,27 @@\n+fn issue1468() {\n+euc_jp_decoder_functions!({\n+let trail_minus_offset = byte.wrapping_sub(0xA1);\n+// Fast-track Hiragana (60% according to Lunde)\n+// and Katakana (10% acconding to Lunde).\n+if jis0208_lead_minus_offset == 0x03 &&\n+trail_minus_offset < 0x53 {\n+// Hiragana\n+handle.write_upper_bmp(0x3041 + trail_minus_offset as u16)\n+} else if jis0208_lead_minus_offset == 0x04 &&\n+trail_minus_offset < 0x56 {\n+// Katakana\n+handle.write_upper_bmp(0x30A1 + trail_minus_offset as u16)\n+} else if trail_minus_offset > (0xFE - 0xA1) {\n+if byte < 0x80 {\n+return (DecoderResult::Malformed(1, 0),\n+unread_handle_trail.unread(),\n+handle.written());\n+}\n+return (DecoderResult::Malformed(2, 0),\n+unread_handle_trail.consumed(),\n+handle.written());\n+} else {\n+unreachable!();\n+}\n+});\n+}"}, {"sha": "518c31b625c89c1f27dee2a719190b79a9b72866", "filename": "tests/target/issue-1468.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4194d0f19431a4e9eeab42d91af505822e419a8e/tests%2Ftarget%2Fissue-1468.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4194d0f19431a4e9eeab42d91af505822e419a8e/tests%2Ftarget%2Fissue-1468.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1468.rs?ref=4194d0f19431a4e9eeab42d91af505822e419a8e", "patch": "@@ -0,0 +1,27 @@\n+fn issue1468() {\n+    euc_jp_decoder_functions!({\n+                                  let trail_minus_offset = byte.wrapping_sub(0xA1);\n+                                  // Fast-track Hiragana (60% according to Lunde)\n+                                  // and Katakana (10% acconding to Lunde).\n+                                  if jis0208_lead_minus_offset == 0x03 &&\n+                                     trail_minus_offset < 0x53 {\n+                                      // Hiragana\n+                                      handle.write_upper_bmp(0x3041 + trail_minus_offset as u16)\n+                                  } else if jis0208_lead_minus_offset == 0x04 &&\n+                                            trail_minus_offset < 0x56 {\n+                                      // Katakana\n+                                      handle.write_upper_bmp(0x30A1 + trail_minus_offset as u16)\n+                                  } else if trail_minus_offset > (0xFE - 0xA1) {\n+                                      if byte < 0x80 {\n+                                          return (DecoderResult::Malformed(1, 0),\n+                                                  unread_handle_trail.unread(),\n+                                                  handle.written());\n+                                      }\n+                                      return (DecoderResult::Malformed(2, 0),\n+                                              unread_handle_trail.consumed(),\n+                                              handle.written());\n+                                  } else {\n+                                      unreachable!();\n+                                  }\n+                              });\n+}"}]}