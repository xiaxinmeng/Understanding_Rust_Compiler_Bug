{"sha": "96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe", "node_id": "C_kwDOAAsO6NoAKDk2ZGI1ZTljN2IyZjhiOTdiNzVhNWFmZWFlMjFlMGUwYWJmN2JkZmU", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-05-28T04:17:00Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-02-07T09:37:55Z"}, "message": "Add comments\n\nStill need to make it so that it maps discriminants to variant indexes.\nMaybe instead I can map the variant indexes to discriminants?", "tree": {"sha": "6dd2afa70a88539d700fe65a1601908cf3d9f86e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd2afa70a88539d700fe65a1601908cf3d9f86e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe", "html_url": "https://github.com/rust-lang/rust/commit/96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18144b66e1515fa1391b7c7034ba55c47511fb9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/18144b66e1515fa1391b7c7034ba55c47511fb9e", "html_url": "https://github.com/rust-lang/rust/commit/18144b66e1515fa1391b7c7034ba55c47511fb9e"}], "stats": {"total": 82, "additions": 49, "deletions": 33}, "files": [{"sha": "a8377c95dcb39c3de247316f76860b650f587b6c", "filename": "compiler/rustc_mir/src/transform/large_enums.rs", "status": "modified", "additions": 49, "deletions": 33, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs?ref=96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::stable_map::FxHashMap;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Const, List, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n-use rustc_target::abi::{Size, Variants};\n+use rustc_target::abi::{Size, TagEncoding, Variants};\n \n /// A pass that seeks to optimize unnecessary moves of large enum types, if there is a large\n /// enough discrepanc between them\n@@ -31,25 +31,33 @@ impl<const D: u64> EnumSizeOpt<D> {\n                 match variants {\n                     Variants::Single { .. } => None,\n                     Variants::Multiple { variants, .. } if variants.len() <= 1 => None,\n+                    Variants::Multiple { tag_encoding, .. }\n+                        if matches!(tag_encoding, TagEncoding::Niche { .. }) =>\n+                    {\n+                        None\n+                    }\n                     Variants::Multiple { variants, .. } => {\n                         let min = variants.iter().map(|v| v.size).min().unwrap();\n                         let max = variants.iter().map(|v| v.size).max().unwrap();\n                         if max.bytes() - min.bytes() < D {\n                             return None;\n                         }\n-                        Some((\n-                            layout.size,\n-                            variants.len() as u64,\n-                            variants.iter().map(|v| v.size).collect(),\n-                        ))\n+                        let mut discr_sizes = vec![Size::ZERO; adt_def.discriminants(tcx).count()];\n+                        for (var_idx, layout) in variants.iter_enumerated() {\n+                            let disc_idx =\n+                                adt_def.discriminant_for_variant(tcx, var_idx).val as usize;\n+                            assert_eq!(discr_sizes[disc_idx], Size::ZERO);\n+                            discr_sizes[disc_idx] = layout.size;\n+                        }\n+                        Some((layout.size, variants.len() as u64, discr_sizes))\n                     }\n                 }\n             }\n             _ => None,\n         }\n     }\n     fn optim(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let mut match_cache = FxHashMap::default();\n+        let mut alloc_cache = FxHashMap::default();\n         let body_did = body.source.def_id();\n         let mut patch = MirPatch::new(body);\n         let (bbs, local_decls) = body.basic_blocks_and_local_decls_mut();\n@@ -61,39 +69,45 @@ impl<const D: u64> EnumSizeOpt<D> {\n                         Rvalue::Use(Operand::Copy(rhs) | Operand::Move(rhs)),\n                     )) => {\n                         let ty = lhs.ty(local_decls, tcx).ty;\n+                        let source_info = st.source_info;\n+                        let span = source_info.span;\n+\n                         let (total_size, num_variants, sizes) =\n-                            if let Some((ts, nv, s)) = match_cache.get(ty) {\n-                                (*ts, *nv, s)\n-                            } else if let Some((ts, nv, s)) = Self::candidate(tcx, ty, body_did) {\n-                                // FIXME(jknodt) use entry API.\n-                                match_cache.insert(ty, (ts, nv, s));\n-                                let (ts, nv, s) = match_cache.get(ty).unwrap();\n-                                (*ts, *nv, s)\n+                            if let Some((ts, nv, s)) = Self::candidate(tcx, ty, body_did) {\n+                                (ts, nv, s)\n                             } else {\n                                 return None;\n                             };\n \n-                        let source_info = st.source_info;\n-                        let span = source_info.span;\n+                        let alloc = if let Some(alloc) = alloc_cache.get(ty) {\n+                            alloc\n+                        } else {\n+                            let mut data =\n+                                vec![0; std::mem::size_of::<usize>() * num_variants as usize];\n+                            data.copy_from_slice(unsafe { std::mem::transmute(&sizes[..]) });\n+                            let alloc = interpret::Allocation::from_bytes(\n+                                data,\n+                                tcx.data_layout.ptr_sized_integer().align(&tcx.data_layout).abi,\n+                                Mutability::Not,\n+                            );\n+                            let alloc = tcx.intern_const_alloc(alloc);\n+                            alloc_cache.insert(ty, alloc);\n+                            // FIXME(jknodt) use entry API\n+                            alloc_cache.get(ty).unwrap()\n+                        };\n \n                         let tmp_ty = tcx.mk_ty(ty::Array(\n                             tcx.types.usize,\n                             Const::from_usize(tcx, num_variants),\n                         ));\n \n-                        let new_local = patch.new_temp(tmp_ty, span);\n-                        let store_live =\n-                            Statement { source_info, kind: StatementKind::StorageLive(new_local) };\n-\n-                        let place = Place { local: new_local, projection: List::empty() };\n-                        let mut data =\n-                            vec![0; std::mem::size_of::<usize>() * num_variants as usize];\n-                        data.copy_from_slice(unsafe { std::mem::transmute(&sizes[..]) });\n-                        let alloc = interpret::Allocation::from_bytes(\n-                            data,\n-                            tcx.data_layout.ptr_sized_integer().align(&tcx.data_layout).abi,\n-                        );\n-                        let alloc = tcx.intern_const_alloc(alloc);\n+                        let size_array_local = patch.new_temp(tmp_ty, span);\n+                        let store_live = Statement {\n+                            source_info,\n+                            kind: StatementKind::StorageLive(size_array_local),\n+                        };\n+\n+                        let place = Place { local: size_array_local, projection: List::empty() };\n                         let constant_vals = Constant {\n                             span,\n                             user_ty: None,\n@@ -134,9 +148,9 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             kind: StatementKind::Assign(box (\n                                 size_place,\n                                 Rvalue::Use(Operand::Copy(Place {\n-                                    local: discr_place.local,\n+                                    local: size_array_local,\n                                     projection: tcx\n-                                        .intern_place_elems(&[PlaceElem::Index(size_place.local)]),\n+                                        .intern_place_elems(&[PlaceElem::Index(discr_place.local)]),\n                                 })),\n                             )),\n                         };\n@@ -187,8 +201,10 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             }),\n                         };\n \n-                        let store_dead =\n-                            Statement { source_info, kind: StatementKind::StorageDead(new_local) };\n+                        let store_dead = Statement {\n+                            source_info,\n+                            kind: StatementKind::StorageDead(size_array_local),\n+                        };\n                         let iter = std::array::IntoIter::new([\n                             store_live,\n                             const_assign,"}]}