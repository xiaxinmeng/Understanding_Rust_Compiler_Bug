{"sha": "13e24003472c13636d4350a530d6e6495775afeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZTI0MDAzNDcyYzEzNjM2ZDQzNTBhNTMwZDZlNjQ5NTc3NWFmZWI=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-28T03:56:25Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-06-09T06:01:39Z"}, "message": "Add ctlz_nonzero & cttz_nonzero intrinsics\n\nLLVM currently doesn't remove the \"bypass if argument is zero\" assembly inside branches where the value is known to be non-zero, pessimizing code that uses uN::leading_zeros", "tree": {"sha": "4672aea092e34e447c2c4b3b1e6f8f71240e8756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4672aea092e34e447c2c4b3b1e6f8f71240e8756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e24003472c13636d4350a530d6e6495775afeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e24003472c13636d4350a530d6e6495775afeb", "html_url": "https://github.com/rust-lang/rust/commit/13e24003472c13636d4350a530d6e6495775afeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e24003472c13636d4350a530d6e6495775afeb/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9454dd5d2d8786d6eef07e2a7b737ad092e303df", "url": "https://api.github.com/repos/rust-lang/rust/commits/9454dd5d2d8786d6eef07e2a7b737ad092e303df", "html_url": "https://github.com/rust-lang/rust/commit/9454dd5d2d8786d6eef07e2a7b737ad092e303df"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "8188c15a2829cdf2dc798fa6338f487a6937db12", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/13e24003472c13636d4350a530d6e6495775afeb/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e24003472c13636d4350a530d6e6495775afeb/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=13e24003472c13636d4350a530d6e6495775afeb", "patch": "@@ -1229,6 +1229,23 @@ extern \"rust-intrinsic\" {\n     /// ```\n     pub fn ctlz<T>(x: T) -> T;\n \n+    /// Like `ctlz`, but extra-unsafe as it returns `undef` when\n+    /// given an `x` with value `0`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(core_intrinsics)]\n+    ///\n+    /// use std::intrinsics::ctlz_nonzero;\n+    ///\n+    /// let x = 0b0001_1100_u8;\n+    /// let num_leading = unsafe { ctlz_nonzero(x) };\n+    /// assert_eq!(num_leading, 3);\n+    /// ```\n+    #[cfg(not(stage0))]\n+    pub fn ctlz_nonzero<T>(x: T) -> T;\n+\n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n     ///\n     /// # Examples\n@@ -1256,6 +1273,23 @@ extern \"rust-intrinsic\" {\n     /// ```\n     pub fn cttz<T>(x: T) -> T;\n \n+    /// Like `cttz`, but extra-unsafe as it returns `undef` when\n+    /// given an `x` with value `0`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(core_intrinsics)]\n+    ///\n+    /// use std::intrinsics::cttz_nonzero;\n+    ///\n+    /// let x = 0b0011_1000_u8;\n+    /// let num_trailing = unsafe { cttz_nonzero(x) };\n+    /// assert_eq!(num_trailing, 3);\n+    /// ```\n+    #[cfg(not(stage0))]\n+    pub fn cttz_nonzero<T>(x: T) -> T;\n+\n     /// Reverses the bytes in an integer type `T`.\n     pub fn bswap<T>(x: T) -> T;\n "}, {"sha": "de908bb24a7abb522a1d99f9bd15a557f327188d", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13e24003472c13636d4350a530d6e6495775afeb/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e24003472c13636d4350a530d6e6495775afeb/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=13e24003472c13636d4350a530d6e6495775afeb", "patch": "@@ -267,7 +267,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n             };\n             bcx.call(expect, &[llargs[0], C_i32(ccx, rw), llargs[1], C_i32(ccx, cache_type)], None)\n         },\n-        \"ctlz\" | \"cttz\" | \"ctpop\" | \"bswap\" |\n+        \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"ctpop\" | \"bswap\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n         \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n         \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" => {\n@@ -280,6 +280,12 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                             let llfn = ccx.get_intrinsic(&format!(\"llvm.{}.i{}\", name, width));\n                             bcx.call(llfn, &[llargs[0], y], None)\n                         }\n+                        \"ctlz_nonzero\" | \"cttz_nonzero\" => {\n+                            let y = C_bool(bcx.ccx, true);\n+                            let llvm_name = &format!(\"llvm.{}.i{}\", &name[..4], width);\n+                            let llfn = ccx.get_intrinsic(llvm_name);\n+                            bcx.call(llfn, &[llargs[0], y], None)\n+                        }\n                         \"ctpop\" => bcx.call(ccx.get_intrinsic(&format!(\"llvm.ctpop.i{}\", width)),\n                                         &llargs, None),\n                         \"bswap\" => {"}, {"sha": "4d9f50b0fc0c94d6e925c9f94a282a671454ac30", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13e24003472c13636d4350a530d6e6495775afeb/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e24003472c13636d4350a530d6e6495775afeb/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=13e24003472c13636d4350a530d6e6495775afeb", "patch": "@@ -272,7 +272,8 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"volatile_store\" =>\n                 (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_nil()),\n \n-            \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" => (1, vec![param(0)], param(0)),\n+            \"ctpop\" | \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"bswap\" =>\n+                (1, vec![param(0)], param(0)),\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>\n                 (1, vec![param(0), param(0)],"}, {"sha": "4896f02da20b0b280e6fde0dbd555a4e5c4c8c1e", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/13e24003472c13636d4350a530d6e6495775afeb/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e24003472c13636d4350a530d6e6495775afeb/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=13e24003472c13636d4350a530d6e6495775afeb", "patch": "@@ -14,7 +14,9 @@ mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn ctpop<T>(x: T) -> T;\n         pub fn ctlz<T>(x: T) -> T;\n+        pub fn ctlz_nonzero<T>(x: T) -> T;\n         pub fn cttz<T>(x: T) -> T;\n+        pub fn cttz_nonzero<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n     }\n }\n@@ -68,6 +70,21 @@ pub fn main() {\n         assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n         assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n \n+        assert_eq!(ctlz_nonzero(1u8), 7); assert_eq!(ctlz_nonzero(1i8), 7);\n+        assert_eq!(ctlz_nonzero(1u16), 15); assert_eq!(ctlz_nonzero(1i16), 15);\n+        assert_eq!(ctlz_nonzero(1u32), 31); assert_eq!(ctlz_nonzero(1i32), 31);\n+        assert_eq!(ctlz_nonzero(1u64), 63); assert_eq!(ctlz_nonzero(1i64), 63);\n+\n+        assert_eq!(ctlz_nonzero(10u8), 4); assert_eq!(ctlz_nonzero(10i8), 4);\n+        assert_eq!(ctlz_nonzero(10u16), 12); assert_eq!(ctlz_nonzero(10i16), 12);\n+        assert_eq!(ctlz_nonzero(10u32), 28); assert_eq!(ctlz_nonzero(10i32), 28);\n+        assert_eq!(ctlz_nonzero(10u64), 60); assert_eq!(ctlz_nonzero(10i64), 60);\n+\n+        assert_eq!(ctlz_nonzero(100u8), 1); assert_eq!(ctlz_nonzero(100i8), 1);\n+        assert_eq!(ctlz_nonzero(100u16), 9); assert_eq!(ctlz_nonzero(100i16), 9);\n+        assert_eq!(ctlz_nonzero(100u32), 25); assert_eq!(ctlz_nonzero(100i32), 25);\n+        assert_eq!(ctlz_nonzero(100u64), 57); assert_eq!(ctlz_nonzero(100i64), 57);\n+\n         assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n         assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n         assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n@@ -93,6 +110,26 @@ pub fn main() {\n         assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n         assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n \n+        assert_eq!(cttz_nonzero(-1i8 as u8), 0); assert_eq!(cttz_nonzero(-1i8), 0);\n+        assert_eq!(cttz_nonzero(-1i16 as u16), 0); assert_eq!(cttz_nonzero(-1i16), 0);\n+        assert_eq!(cttz_nonzero(-1i32 as u32), 0); assert_eq!(cttz_nonzero(-1i32), 0);\n+        assert_eq!(cttz_nonzero(-1i64 as u64), 0); assert_eq!(cttz_nonzero(-1i64), 0);\n+\n+        assert_eq!(cttz_nonzero(1u8), 0); assert_eq!(cttz_nonzero(1i8), 0);\n+        assert_eq!(cttz_nonzero(1u16), 0); assert_eq!(cttz_nonzero(1i16), 0);\n+        assert_eq!(cttz_nonzero(1u32), 0); assert_eq!(cttz_nonzero(1i32), 0);\n+        assert_eq!(cttz_nonzero(1u64), 0); assert_eq!(cttz_nonzero(1i64), 0);\n+\n+        assert_eq!(cttz_nonzero(10u8), 1); assert_eq!(cttz_nonzero(10i8), 1);\n+        assert_eq!(cttz_nonzero(10u16), 1); assert_eq!(cttz_nonzero(10i16), 1);\n+        assert_eq!(cttz_nonzero(10u32), 1); assert_eq!(cttz_nonzero(10i32), 1);\n+        assert_eq!(cttz_nonzero(10u64), 1); assert_eq!(cttz_nonzero(10i64), 1);\n+\n+        assert_eq!(cttz_nonzero(100u8), 2); assert_eq!(cttz_nonzero(100i8), 2);\n+        assert_eq!(cttz_nonzero(100u16), 2); assert_eq!(cttz_nonzero(100i16), 2);\n+        assert_eq!(cttz_nonzero(100u32), 2); assert_eq!(cttz_nonzero(100i32), 2);\n+        assert_eq!(cttz_nonzero(100u64), 2); assert_eq!(cttz_nonzero(100i64), 2);\n+\n         assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n         assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n         assert_eq!(bswap(0x0A0Bu16), 0x0B0A);"}]}