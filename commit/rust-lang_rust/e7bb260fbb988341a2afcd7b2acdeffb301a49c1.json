{"sha": "e7bb260fbb988341a2afcd7b2acdeffb301a49c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YmIyNjBmYmI5ODgzNDFhMmFmY2Q3YjJhY2RlZmZiMzAxYTQ5YzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-22T11:05:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T11:05:18Z"}, "message": "Merge #4081\n\n4081: Work around crlf in syntax tree r=matklad a=Veetaha\n\nWorkarounds fixes #4067 \n\nCo-authored-by: veetaha <veetaha2@gmail.com>", "tree": {"sha": "c0741087514a84f6ff66974b8ce7ead6f1b6b402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0741087514a84f6ff66974b8ce7ead6f1b6b402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7bb260fbb988341a2afcd7b2acdeffb301a49c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoCTuCRBK7hj4Ov3rIwAAdHIIAJzUXvpxEFofMn/5mQQH4S9K\nJkOZERj3QyAxHParfntnl3R7CWN/9NHTXeem2WxpfeI7PRLcWWSg/e6Zc5R3DTNn\nqq1CQ0xCsau2Rr+H3YnNwuww5kVN77rg1b2BOWpG7lgB/f+eHcP2TYxEsMNsbIlw\n12pLoXTriYl28vkv1QQxJQXWE/tu/F0IUTiziNbdjyebTmyYH95ar0EcN7MRDy+J\nD8oUn5v47p3sFvngmabDSBby49QHFw+BL1F1Z7n0MYOYzb/oTxg/NVMffg5Srivf\npsYkd8froH+TPFPCEoclQwD25FJdY86d9bhDlZCan2Iy+VC5rRZfkcqcZO/sC/A=\n=URoA\n-----END PGP SIGNATURE-----\n", "payload": "tree c0741087514a84f6ff66974b8ce7ead6f1b6b402\nparent 3d7451e6e74dc6dbb2501954727f9c00ec068f5e\nparent c12d0e0214ea3d7262eff4b9e21a033ee423ef99\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587553518 +0000\ncommitter GitHub <noreply@github.com> 1587553518 +0000\n\nMerge #4081\n\n4081: Work around crlf in syntax tree r=matklad a=Veetaha\n\nWorkarounds fixes #4067 \n\nCo-authored-by: veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7bb260fbb988341a2afcd7b2acdeffb301a49c1", "html_url": "https://github.com/rust-lang/rust/commit/e7bb260fbb988341a2afcd7b2acdeffb301a49c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7bb260fbb988341a2afcd7b2acdeffb301a49c1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d7451e6e74dc6dbb2501954727f9c00ec068f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7451e6e74dc6dbb2501954727f9c00ec068f5e", "html_url": "https://github.com/rust-lang/rust/commit/3d7451e6e74dc6dbb2501954727f9c00ec068f5e"}, {"sha": "c12d0e0214ea3d7262eff4b9e21a033ee423ef99", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12d0e0214ea3d7262eff4b9e21a033ee423ef99", "html_url": "https://github.com/rust-lang/rust/commit/c12d0e0214ea3d7262eff4b9e21a033ee423ef99"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "cfcf47b2fc58cb77bb64824a0cc949ee3472fa3b", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e7bb260fbb988341a2afcd7b2acdeffb301a49c1/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e7bb260fbb988341a2afcd7b2acdeffb301a49c1/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=e7bb260fbb988341a2afcd7b2acdeffb301a49c1", "patch": "@@ -198,7 +198,7 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n         return new vscode.Hover([\"```rust\\n\" + rustSourceCode + \"\\n```\"], astFileRange);\n     }\n \n-    private findAstNodeRange(astLine: vscode.TextLine) {\n+    private findAstNodeRange(astLine: vscode.TextLine): vscode.Range {\n         const lineOffset = astLine.range.start;\n         const begin = lineOffset.translate(undefined, astLine.firstNonWhitespaceCharacterIndex);\n         const end = lineOffset.translate(undefined, astLine.text.trimEnd().length);\n@@ -209,10 +209,43 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n         const parsedRange = /\\[(\\d+); (\\d+)\\)/.exec(astLine);\n         if (!parsedRange) return;\n \n-        const [begin, end] = parsedRange.slice(1).map(off => doc.positionAt(+off));\n+        const [begin, end] = parsedRange\n+            .slice(1)\n+            .map(off => this.positionAt(doc, +off));\n \n         return new vscode.Range(begin, end);\n     }\n+\n+    // Memoize the last value, otherwise the CPU is at 100% single core\n+    // with quadratic lookups when we build rust2Ast cache\n+    cache?: { doc: vscode.TextDocument; offset: number; line: number };\n+\n+    positionAt(doc: vscode.TextDocument, targetOffset: number): vscode.Position {\n+        if (doc.eol === vscode.EndOfLine.LF) {\n+            return doc.positionAt(targetOffset);\n+        }\n+\n+        // Shitty workaround for crlf line endings\n+        // We are still in this prehistoric era of carriage returns here...\n+\n+        let line = 0;\n+        let offset = 0;\n+\n+        const cache = this.cache;\n+        if (cache?.doc === doc && cache.offset <= targetOffset) {\n+            ({ line, offset } = cache);\n+        }\n+\n+        while (true) {\n+            const lineLenWithLf = doc.lineAt(line).text.length + 1;\n+            if (offset + lineLenWithLf > targetOffset) {\n+                this.cache = { doc, offset, line };\n+                return doc.positionAt(targetOffset + line);\n+            }\n+            offset += lineLenWithLf;\n+            line += 1;\n+        }\n+    }\n }\n \n class Lazy<T> {"}]}