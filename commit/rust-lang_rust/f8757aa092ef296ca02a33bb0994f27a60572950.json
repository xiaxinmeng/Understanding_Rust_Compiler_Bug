{"sha": "f8757aa092ef296ca02a33bb0994f27a60572950", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzU3YWEwOTJlZjI5NmNhMDJhMzNiYjA5OTRmMjdhNjA1NzI5NTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-07-13T14:49:55Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-07-13T14:49:55Z"}, "message": "Reuse the `const_eval` method for syscall name resolution", "tree": {"sha": "72cb1bf02f8451523d918383163d3cbf14a43588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72cb1bf02f8451523d918383163d3cbf14a43588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8757aa092ef296ca02a33bb0994f27a60572950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8757aa092ef296ca02a33bb0994f27a60572950", "html_url": "https://github.com/rust-lang/rust/commit/f8757aa092ef296ca02a33bb0994f27a60572950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8757aa092ef296ca02a33bb0994f27a60572950/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8", "html_url": "https://github.com/rust-lang/rust/commit/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "771b740b3755a5728d869390e67d0d57b012578c", "filename": "src/const_eval.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f8757aa092ef296ca02a33bb0994f27a60572950/src%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8757aa092ef296ca02a33bb0994f27a60572950/src%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconst_eval.rs?ref=f8757aa092ef296ca02a33bb0994f27a60572950", "patch": "@@ -1,22 +1,20 @@\n-use rustc::hir::def_id::DefId;\n use rustc::traits::Reveal;\n-use rustc::ty::subst::Substs;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, Ty, Instance};\n \n use error::{EvalError, EvalResult};\n use lvalue::{Global, GlobalId, Lvalue};\n+use value::PrimVal;\n use rustc_const_math::ConstInt;\n use eval_context::{EvalContext, StackPopCleanup};\n \n-pub fn eval_body_as_integer<'a, 'tcx>(\n+pub fn eval_body_as_primval<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    (def_id, substs): (DefId, &'tcx Substs<'tcx>),\n-) -> EvalResult<'tcx, ConstInt> {\n+    instance: Instance<'tcx>,\n+) -> EvalResult<'tcx, (PrimVal, Ty<'tcx>)> {\n     let limits = ::ResourceLimits::default();\n     let mut ecx = EvalContext::new(tcx, limits);\n-    let instance = ecx.resolve_associated_const(def_id, substs);\n     let cid = GlobalId { instance, promoted: None };\n-    if ecx.tcx.has_attr(def_id, \"linkage\") {\n+    if ecx.tcx.has_attr(instance.def_id(), \"linkage\") {\n         return Err(EvalError::NotConst(\"extern global\".to_string()));\n     }\n     \n@@ -28,7 +26,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n                 ty::ParamEnv::empty(Reveal::All),\n                 mir.span);\n         let cleanup = StackPopCleanup::MarkStatic(mutable);\n-        let name = ty::tls::with(|tcx| tcx.item_path_str(def_id));\n+        let name = ty::tls::with(|tcx| tcx.item_path_str(instance.def_id()));\n         trace!(\"pushing stack frame for global: {}\", name);\n         ecx.push_stack_frame(\n             instance,\n@@ -41,11 +39,19 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         while ecx.step()? {}\n     }\n     let value = ecx.globals.get(&cid).expect(\"global not cached\").value;\n-    let prim = ecx.value_to_primval(value, mir.return_ty)?.to_bytes()?;\n+    Ok((ecx.value_to_primval(value, mir.return_ty)?, mir.return_ty))\n+}\n+\n+pub fn eval_body_as_integer<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    instance: Instance<'tcx>,\n+) -> EvalResult<'tcx, ConstInt> {\n+    let (prim, ty) = eval_body_as_primval(tcx, instance)?;\n+    let prim = prim.to_bytes()?;\n     use syntax::ast::{IntTy, UintTy};\n     use rustc::ty::TypeVariants::*;\n     use rustc_const_math::{ConstIsize, ConstUsize};\n-    Ok(match mir.return_ty.sty {\n+    Ok(match ty.sty {\n         TyInt(IntTy::I8) => ConstInt::I8(prim as i128 as i8),\n         TyInt(IntTy::I16) => ConstInt::I16(prim as i128 as i16),\n         TyInt(IntTy::I32) => ConstInt::I32(prim as i128 as i32),"}, {"sha": "643df3608f9c235acb8e9bc70627129aa532b194", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f8757aa092ef296ca02a33bb0994f27a60572950/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8757aa092ef296ca02a33bb0994f27a60572950/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=f8757aa092ef296ca02a33bb0994f27a60572950", "patch": "@@ -855,39 +855,21 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"sysconf\" => {\n                 let name = self.value_to_primval(args[0], usize)?.to_u64()?;\n                 trace!(\"sysconf() called with name {}\", name);\n-                // cache the sysconf integers\n+                // cache the sysconf integers via miri's global cache\n                 let paths = &[\n                     (&[\"libc\", \"_SC_PAGESIZE\"], PrimVal::Bytes(4096)),\n                     (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], PrimVal::from_i128(-1)),\n                 ];\n                 let mut result = None;\n                 for &(path, path_value) in paths {\n                     if let Ok(instance) = self.resolve_path(path) {\n-                        use lvalue::{Global, GlobalId};\n+                        use lvalue::GlobalId;\n                         let cid = GlobalId { instance, promoted: None };\n+                        // compute global if not cached\n                         let val = match self.globals.get(&cid).map(|glob| glob.value) {\n-                            Some(value) => value,\n-                            None => {\n-                                let mir = self.load_mir(instance.def)?;\n-                                self.globals.insert(cid, Global::uninitialized(mir.return_ty));\n-                                let cleanup = StackPopCleanup::MarkStatic(false);\n-                                let name = ty::tls::with(|tcx| tcx.item_path_str(def_id));\n-                                trace!(\"pushing stack frame for global: {}\", name);\n-                                let frame = self.stack.len();\n-                                self.push_stack_frame(\n-                                    instance,\n-                                    mir.span,\n-                                    mir,\n-                                    Lvalue::Global(cid),\n-                                    cleanup,\n-                                )?;\n-                                while self.stack.len() != frame {\n-                                    self.step()?;\n-                                }\n-                                self.globals.get(&cid).expect(\"we just computed the global\").value\n-                            }\n+                            Some(value) => self.value_to_primval(value, usize)?.to_u64()?,\n+                            None => ::const_eval::eval_body_as_primval(self.tcx, instance)?.0.to_u64()?,\n                         };\n-                        let val = self.value_to_primval(val, usize)?.to_u64()?;\n                         if val == name {\n                             result = Some(path_value);\n                             break;"}]}