{"sha": "44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NTExZDVlZTZjMmUxZWM2YjZjOWIzZjgyZTdkMTAyN2ExZjJiMjk=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-04-25T18:01:22Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-04-25T18:11:15Z"}, "message": "Update while_let_on_iterator tests", "tree": {"sha": "b282e2f5c9bda479d81a93518c3d84e8af809d30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b282e2f5c9bda479d81a93518c3d84e8af809d30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl6kfUMACgkQLO/Nsn7Q\nvnnzMQ/9F12GFNJJzNfk0IXKvN3FcfOSmORVS+DLHnCgYDLOwl6gE3fk6dw4Fg+6\nPyEKCeJ4Jptwl/8wvOTsYKHd6UU7yS2zJKVKEGOEPzQHcnmnnn6MCMV+0BMsoL/1\nubhuyexXbgWen1+/4DHRLlYdkAqTRMxHlaHdepfWyE+X6o5lRFN3cnQd6dKSWdsF\nTJkpja6RpfIYHYGmcAE7EggH4Wf2IwQjzR0Wb4/owOXP6/QIAF3gYXosI/z5fFw8\n4UxOKJq99R875hLB2WSqPLY77PFfziZjSnYtI+Jwi+fRkzxO47NQIqnTne6iBurY\ny4VRaSz5hCP6EZc3NHegFDkoUYtBMZEe19Ue1bCjZfiV4LNmibEDCYvyLP0H8KsH\nAkVJn92H8v+g/zJDKuxKo9viAxYLKtS8yLmBLKyTlgBR649nOwprrx4kVaUY58h6\ntgEB02kdRZ4a3GnsabaIP0BJ5qbHXCx/EW0dIe0VYz4ZjOeeewnbJ6VFlxe/XXZ+\ns+pr7gwTH492pzvrp/MWxwNXRr2eCecI2hdfivweHZ/+0Yb7AG8Ca9no8AR7NIWR\nr3upbCod3b0JyDC6giyI3Nw4rQFNF9jHnBDwIvVQe+/MCjSxCycJukT0xXbXcxx/\nGNg3yOH38MgpgUd6+vloo2I4TOLUK9uzuRAGoPe9gYmUwVN/6oY=\n=16+J\n-----END PGP SIGNATURE-----", "payload": "tree b282e2f5c9bda479d81a93518c3d84e8af809d30\nparent fe25dbe549aecd409897b00fe13c32072d498336\nauthor flip1995 <hello@philkrones.com> 1587837682 +0200\ncommitter flip1995 <hello@philkrones.com> 1587838275 +0200\n\nUpdate while_let_on_iterator tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29", "html_url": "https://github.com/rust-lang/rust/commit/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe25dbe549aecd409897b00fe13c32072d498336", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe25dbe549aecd409897b00fe13c32072d498336", "html_url": "https://github.com/rust-lang/rust/commit/fe25dbe549aecd409897b00fe13c32072d498336"}], "stats": {"total": 198, "additions": 177, "deletions": 21}, "files": [{"sha": "447b36048eed1a38095052860e2ddf550bb70c0f", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29", "patch": "@@ -0,0 +1,144 @@\n+// run-rustfix\n+\n+#![warn(clippy::while_let_on_iterator)]\n+#![allow(clippy::never_loop, unreachable_code, unused_mut)]\n+\n+fn base() {\n+    let mut iter = 1..20;\n+    for x in iter {\n+        println!(\"{}\", x);\n+    }\n+\n+    let mut iter = 1..20;\n+    for x in iter {\n+        println!(\"{}\", x);\n+    }\n+\n+    let mut iter = 1..20;\n+    for _ in iter {}\n+\n+    let mut iter = 1..20;\n+    while let None = iter.next() {} // this is fine (if nonsensical)\n+\n+    let mut iter = 1..20;\n+    if let Some(x) = iter.next() {\n+        // also fine\n+        println!(\"{}\", x)\n+    }\n+\n+    // the following shouldn't warn because it can't be written with a for loop\n+    let mut iter = 1u32..20;\n+    while let Some(_) = iter.next() {\n+        println!(\"next: {:?}\", iter.next())\n+    }\n+\n+    // neither can this\n+    let mut iter = 1u32..20;\n+    while let Some(_) = iter.next() {\n+        println!(\"next: {:?}\", iter.next());\n+    }\n+\n+    // or this\n+    let mut iter = 1u32..20;\n+    while let Some(_) = iter.next() {\n+        break;\n+    }\n+    println!(\"Remaining iter {:?}\", iter);\n+\n+    // or this\n+    let mut iter = 1u32..20;\n+    while let Some(_) = iter.next() {\n+        iter = 1..20;\n+    }\n+}\n+\n+// Issue #1188\n+fn refutable() {\n+    let a = [42, 1337];\n+    let mut b = a.iter();\n+\n+    // consume all the 42s\n+    while let Some(&42) = b.next() {}\n+\n+    let a = [(1, 2, 3)];\n+    let mut b = a.iter();\n+\n+    while let Some(&(1, 2, 3)) = b.next() {}\n+\n+    let a = [Some(42)];\n+    let mut b = a.iter();\n+\n+    while let Some(&None) = b.next() {}\n+\n+    /* This gives \u201crefutable pattern in `for` loop binding: `&_` not covered\u201d\n+    for &42 in b {}\n+    for &(1, 2, 3) in b {}\n+    for &Option::None in b.next() {}\n+    // */\n+}\n+\n+fn nested_loops() {\n+    let a = [42, 1337];\n+    let mut y = a.iter();\n+    loop {\n+        // x is reused, so don't lint here\n+        while let Some(_) = y.next() {}\n+    }\n+\n+    let mut y = a.iter();\n+    for _ in 0..2 {\n+        while let Some(_) = y.next() {\n+            // y is reused, don't lint\n+        }\n+    }\n+\n+    loop {\n+        let mut y = a.iter();\n+        for _ in y {\n+            // use a for loop here\n+        }\n+    }\n+}\n+\n+fn issue1121() {\n+    use std::collections::HashSet;\n+    let mut values = HashSet::new();\n+    values.insert(1);\n+\n+    while let Some(&value) = values.iter().next() {\n+        values.remove(&value);\n+    }\n+}\n+\n+fn issue2965() {\n+    // This should not cause an ICE and suggest:\n+    //\n+    // for _ in values.iter() {}\n+    //\n+    use std::collections::HashSet;\n+    let mut values = HashSet::new();\n+    values.insert(1);\n+\n+    for _ in values.iter() {\n+        // FIXME(flip1995): Linting this with the following line uncommented is a FP, see #1654\n+        // values.remove(&1);\n+    }\n+}\n+\n+fn issue3670() {\n+    let array = [Some(0), None, Some(1)];\n+    let mut iter = array.iter();\n+\n+    while let Some(elem) = iter.next() {\n+        let _ = elem.or_else(|| *iter.next()?);\n+    }\n+}\n+\n+fn main() {\n+    base();\n+    refutable();\n+    nested_loops();\n+    issue1121();\n+    issue2965();\n+    issue3670();\n+}"}, {"sha": "56a245aa8c7d8772ba1abe0d7106e168b3ff30ea", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n #![warn(clippy::while_let_on_iterator)]\n-#![allow(clippy::never_loop)]\n+#![allow(clippy::never_loop, unreachable_code, unused_mut)]\n \n-fn main() {\n+fn base() {\n     let mut iter = 1..20;\n     while let Option::Some(x) = iter.next() {\n         println!(\"{}\", x);\n@@ -26,26 +28,26 @@ fn main() {\n \n     // the following shouldn't warn because it can't be written with a for loop\n     let mut iter = 1u32..20;\n-    while let Some(x) = iter.next() {\n+    while let Some(_) = iter.next() {\n         println!(\"next: {:?}\", iter.next())\n     }\n \n     // neither can this\n     let mut iter = 1u32..20;\n-    while let Some(x) = iter.next() {\n+    while let Some(_) = iter.next() {\n         println!(\"next: {:?}\", iter.next());\n     }\n \n     // or this\n     let mut iter = 1u32..20;\n-    while let Some(x) = iter.next() {\n+    while let Some(_) = iter.next() {\n         break;\n     }\n     println!(\"Remaining iter {:?}\", iter);\n \n     // or this\n     let mut iter = 1u32..20;\n-    while let Some(x) = iter.next() {\n+    while let Some(_) = iter.next() {\n         iter = 1..20;\n     }\n }\n@@ -80,19 +82,19 @@ fn nested_loops() {\n     let mut y = a.iter();\n     loop {\n         // x is reused, so don't lint here\n-        while let Some(v) = y.next() {}\n+        while let Some(_) = y.next() {}\n     }\n \n     let mut y = a.iter();\n     for _ in 0..2 {\n-        while let Some(v) = y.next() {\n+        while let Some(_) = y.next() {\n             // y is reused, don't lint\n         }\n     }\n \n     loop {\n         let mut y = a.iter();\n-        while let Some(v) = y.next() {\n+        while let Some(_) = y.next() {\n             // use a for loop here\n         }\n     }\n@@ -118,7 +120,8 @@ fn issue2965() {\n     values.insert(1);\n \n     while let Some(..) = values.iter().next() {\n-        values.remove(&1);\n+        // FIXME(flip1995): Linting this with the following line uncommented is a FP, see #1654\n+        // values.remove(&1);\n     }\n }\n \n@@ -130,3 +133,12 @@ fn issue3670() {\n         let _ = elem.or_else(|| *iter.next()?);\n     }\n }\n+\n+fn main() {\n+    base();\n+    refutable();\n+    nested_loops();\n+    issue1121();\n+    issue2965();\n+    issue3670();\n+}"}, {"sha": "94caedb43a51118142d55dafd879ae5122f368b5", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=44511d5ee6c2e1ec6b6c9b3f82e7d1027a1f2b29", "patch": "@@ -1,34 +1,34 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:6:33\n+  --> $DIR/while_let_on_iterator.rs:8:5\n    |\n LL |     while let Option::Some(x) = iter.next() {\n-   |                                 ^^^^^^^^^^^ help: try: `for x in iter { .. }`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n    |\n    = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:11:25\n+  --> $DIR/while_let_on_iterator.rs:13:5\n    |\n LL |     while let Some(x) = iter.next() {\n-   |                         ^^^^^^^^^^^ help: try: `for x in iter { .. }`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:16:25\n+  --> $DIR/while_let_on_iterator.rs:18:5\n    |\n LL |     while let Some(_) = iter.next() {}\n-   |                         ^^^^^^^^^^^ help: try: `for _ in iter { .. }`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:95:29\n+  --> $DIR/while_let_on_iterator.rs:97:9\n    |\n-LL |         while let Some(v) = y.next() {\n-   |                             ^^^^^^^^ help: try: `for v in y { .. }`\n+LL |         while let Some(_) = y.next() {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in y`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:120:26\n+  --> $DIR/while_let_on_iterator.rs:122:5\n    |\n LL |     while let Some(..) = values.iter().next() {\n-   |                          ^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in values.iter() { .. }`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in values.iter()`\n \n error: aborting due to 5 previous errors\n "}]}