{"sha": "1d855ebc510855536beee418036b405cfa05808e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkODU1ZWJjNTEwODU1NTM2YmVlZTQxODAzNmI0MDVjZmEwNTgwOGU=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T22:42:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-05T23:38:27Z"}, "message": "Remove support for $(...) form of quasi-quotes, use #ast{...} instead.", "tree": {"sha": "11bf14668926c5b378f24685ce2c529b6b7f91b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11bf14668926c5b378f24685ce2c529b6b7f91b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d855ebc510855536beee418036b405cfa05808e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d855ebc510855536beee418036b405cfa05808e", "html_url": "https://github.com/rust-lang/rust/commit/1d855ebc510855536beee418036b405cfa05808e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d855ebc510855536beee418036b405cfa05808e/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b6dc5c8ed8d839006de4ea6a7e8cd6727db93d", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b6dc5c8ed8d839006de4ea6a7e8cd6727db93d", "html_url": "https://github.com/rust-lang/rust/commit/91b6dc5c8ed8d839006de4ea6a7e8cd6727db93d"}], "stats": {"total": 34, "additions": 5, "deletions": 29}, "files": [{"sha": "7215c538ec101ca70b598781c6b149dc6c704c17", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -293,7 +293,6 @@ enum mac_ {\n     mac_embed_block(blk),\n     mac_ellipsis,\n     // the span is used by the quoter/anti-quoter ...\n-    mac_qq(span /* span of expr */, @expr), // quasi-quote\n     mac_aq(span /* span of quote */, @expr), // anti-quote\n     mac_var(uint)\n }"}, {"sha": "201e44232bb2cc49d5dcbb3e1b9b2f60c840adf0", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -5,7 +5,7 @@ import option::{none, some};\n import std::map::hashmap;\n import vec;\n \n-import syntax::ast::{crate, expr_, expr_mac, mac_invoc, mac_qq};\n+import syntax::ast::{crate, expr_, expr_mac, mac_invoc};\n import syntax::fold::*;\n import syntax::ext::base::*;\n import syntax::ext::qquote::{expand_qquote,qq_helper};\n@@ -46,13 +46,6 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                   }\n                 }\n               }\n-              mac_qq(sp, exp) {\n-                let r = expand_qquote(cx, sp, none, exp);\n-                // need to keep going, resuls may contain embedded qquote or\n-                // macro that need expanding\n-                let r2 = fld.fold_expr(r);\n-                (r2.node, s)\n-              }\n               _ { cx.span_bug(mac.span, \"naked syntactic bit\") }\n             }\n           }"}, {"sha": "071c51294d90d91a04b1bd9b6b6dc1bf155f21b8", "filename": "src/comp/syntax/ext/qquote.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -3,7 +3,7 @@ import driver::session;\n import option::{none, some};\n \n import syntax::ast::{crate, expr_, mac_invoc,\n-                     mac_qq, mac_aq, mac_var};\n+                     mac_aq, mac_var};\n import syntax::fold::*;\n import syntax::visit::*;\n import syntax::ext::base::*;\n@@ -156,7 +156,7 @@ fn expand_ast(ecx: ext_ctxt, _sp: span,\n         let node = parse_from_source_str\n             (f, fname, some(ss), str,\n              ecx.session().opts.cfg, ecx.session().parse_sess);\n-        ret expand_qquote(ecx, node.span(), some(*str), node);\n+        ret expand_qquote(ecx, node.span(), *str, node);\n     }\n \n     ret alt what {\n@@ -185,13 +185,9 @@ fn parse_item(p: parser) -> @ast::item {\n }\n \n fn expand_qquote<N: qq_helper>\n-    (ecx: ext_ctxt, sp: span, maybe_str: option::t<str>, node: N)\n+    (ecx: ext_ctxt, sp: span, str: str, node: N)\n     -> @ast::expr\n {\n-    let str = alt(maybe_str) {\n-      some(s) {s}\n-      none {codemap::span_to_snippet(sp, ecx.session().parse_sess.cm)}\n-    };\n     let qcx = gather_anti_quotes(sp.lo, node);\n     let cx = qcx;\n     let prev = 0u;"}, {"sha": "3473ae1dbe180aea025a40d7d041279f0bc5a3fd", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -587,7 +587,6 @@ fn p_t_s_r_mac(cx: ext_ctxt, mac: ast::mac, s: selector, b: binders) {\n           none { no_des(cx, blk.span, \"under `#{}`\"); }\n         }\n       }\n-      ast::mac_qq(_,_) { no_des(cx, mac.span, \"quasiquotes\"); }\n       ast::mac_aq(_,_) { no_des(cx, mac.span, \"antiquotes\"); }\n       ast::mac_var(_) { no_des(cx, mac.span, \"antiquote variables\"); }\n     }"}, {"sha": "24c0a7446d4af7f7810ac88c6d7a269cbbd6c16f", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -144,7 +144,6 @@ fn fold_mac_(m: mac, fld: ast_fold) -> mac {\n                mac_embed_type(ty) { mac_embed_type(fld.fold_ty(ty)) }\n                mac_embed_block(blk) { mac_embed_block(fld.fold_block(blk)) }\n                mac_ellipsis { mac_ellipsis }\n-               mac_qq(_,_) { /* fixme */ m.node }\n                mac_aq(_,_) { /* fixme */ m.node }\n                mac_var(_) { /* fixme */ m.node }\n              },"}, {"sha": "143b4eba487a9112e56eaba3312d829e6da09970", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -349,7 +349,6 @@ fn next_token_inner(rdr: reader) -> token::token {\n       '#' {\n         rdr.bump();\n         if rdr.curr == '<' { rdr.bump(); ret token::POUND_LT; }\n-        if rdr.curr == '(' { rdr.bump(); ret token::POUND_LPAREN; }\n         if rdr.curr == '{' { rdr.bump(); ret token::POUND_LBRACE; }\n         ret token::POUND;\n       }"}, {"sha": "d3c5695496cac3b7d2c2cd9955a403503dcedfa6", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -880,12 +880,6 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n     } else if p.token == token::ELLIPSIS {\n         p.bump();\n         ret pexpr(mk_mac_expr(p, lo, p.span.hi, ast::mac_ellipsis));\n-    } else if p.token == token::POUND_LPAREN {\n-        p.bump();\n-        let e = parse_expr(p);\n-        expect(p, token::RPAREN);\n-        ret pexpr(mk_mac_expr(p, lo, p.span.hi,\n-                              ast::mac_qq(e.span, e)));\n     } else if eat_word(p, \"bind\") {\n         let e = parse_expr_res(p, RESTRICT_NO_CALL_EXPRS);\n         fn parse_expr_opt(p: parser) -> option<@ast::expr> {"}, {"sha": "d71ec1c2831ebf070d0b525845306b647808a7af", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -53,7 +53,6 @@ enum token {\n     LBRACE,\n     RBRACE,\n     POUND,\n-    POUND_LPAREN,\n     POUND_LBRACE,\n     POUND_LT,\n \n@@ -128,7 +127,6 @@ fn to_str(r: reader, t: token) -> str {\n       LBRACE { ret \"{\"; }\n       RBRACE { ret \"}\"; }\n       POUND { ret \"#\"; }\n-      POUND_LPAREN { ret \"#(\"; }\n       POUND_LBRACE { ret \"#{\"; }\n       POUND_LT { ret \"#<\"; }\n "}, {"sha": "1bea675b8a02e32322dd55709eb98543741efd3d", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -300,7 +300,6 @@ fn visit_mac<E>(m: mac, e: E, v: vt<E>) {\n       ast::mac_embed_type(ty) { v.visit_ty(ty, e, v); }\n       ast::mac_embed_block(blk) { v.visit_block(blk, e, v); }\n       ast::mac_ellipsis { }\n-      ast::mac_qq(_, e) { /* FIXME: maybe visit */ }\n       ast::mac_aq(_, e) { /* FIXME: maybe visit */ }\n       ast::mac_var(_) { }\n     }"}, {"sha": "50751a6608165a666935d92333dbbc148c764bfd", "filename": "src/test/run-pass/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d855ebc510855536beee418036b405cfa05808e/src%2Ftest%2Frun-pass%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d855ebc510855536beee418036b405cfa05808e/src%2Ftest%2Frun-pass%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fqquote.rs?ref=1d855ebc510855536beee418036b405cfa05808e", "patch": "@@ -53,7 +53,7 @@ fn main() {\n     let expr3 = #ast{2 - $(abc) + 7};\n     check_pp(expr3,  pprust::print_expr, \"2 - 23 + 7\");\n \n-    let expr4 = #ast{2 - $(#(3)) + 9};\n+    let expr4 = #ast{2 - $(#ast{3}) + 9};\n     check_pp(expr4,  pprust::print_expr, \"2 - 3 + 9\");\n \n     let ty = #ast(ty){int};"}]}