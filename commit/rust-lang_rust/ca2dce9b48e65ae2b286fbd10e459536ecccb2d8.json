{"sha": "ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMmRjZTliNDhlNjVhZTJiMjg2ZmJkMTBlNDU5NTM2ZWNjY2IyZDg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-04-05T21:39:02Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-04-12T09:47:26Z"}, "message": "ICH: Replace old, transitive metadata hashing with direct hashing approach.\n\nInstead of collecting all potential inputs to some metadata entry and\nhashing those, we directly hash the values we are storing in metadata.\nThis is more accurate and doesn't suffer from quadratic blow-up when\nmany entries have the same dependencies.", "tree": {"sha": "7c9fe9ae6a318e6c5a3a8a66ffa6829938d3c412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c9fe9ae6a318e6c5a3a8a66ffa6829938d3c412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "html_url": "https://github.com/rust-lang/rust/commit/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc7af816f3b8712efa4e6643f9cdeb1d5ba5c78a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7af816f3b8712efa4e6643f9cdeb1d5ba5c78a", "html_url": "https://github.com/rust-lang/rust/commit/bc7af816f3b8712efa4e6643f9cdeb1d5ba5c78a"}], "stats": {"total": 1030, "additions": 689, "deletions": 341}, "files": [{"sha": "46d1e7ef0c7c474a26a40ceb1d923bc3ceb6d425", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -16,24 +16,9 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n use std::hash as std_hash;\n use std::mem;\n+use syntax_pos::symbol::InternedString;\n use ty;\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::TyS<'tcx> {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a, 'tcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let ty::TyS {\n-            ref sty,\n-\n-            // The other fields just provide fast access to information that is\n-            // also contained in `sty`, so no need to hash them.\n-            ..\n-        } = *self;\n-\n-        sty.hash_stable(hcx, hasher);\n-    }\n-}\n-\n impl_stable_hash_for!(struct ty::ItemSubsts<'tcx> { substs });\n \n impl<'a, 'tcx, T> HashStable<StableHashingContext<'a, 'tcx>> for &'tcx ty::Slice<T>\n@@ -288,9 +273,14 @@ for ::middle::const_val::ConstVal<'tcx> {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }\n-            ConstVal::Struct(ref _name_value_map) => {\n-                // BTreeMap<ast::Name, ConstVal<'tcx>>),\n-                panic!(\"Ordering still unstable\")\n+            ConstVal::Struct(ref name_value_map) => {\n+                let mut values: Vec<(InternedString, &ConstVal)> =\n+                    name_value_map.iter()\n+                                  .map(|(name, val)| (name.as_str(), val))\n+                                  .collect();\n+\n+                values.sort_unstable_by_key(|&(ref name, _)| name.clone());\n+                values.hash_stable(hcx, hasher);\n             }\n             ConstVal::Tuple(ref value) => {\n                 value.hash_stable(hcx, hasher);\n@@ -632,6 +622,8 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::TypeckTables<'\n             ref fru_field_types,\n \n             ref cast_kinds,\n+\n+            // FIXME(#41184): This is still ignored at the moment.\n             lints: _,\n             ref used_trait_imports,\n             tainted_by_errors,\n@@ -672,7 +664,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::TypeckTables<'\n             ich::hash_stable_nodemap(hcx, hasher, cast_kinds);\n \n             ich::hash_stable_hashset(hcx, hasher, used_trait_imports, |hcx, def_id| {\n-                hcx.tcx().def_path_hash(*def_id)\n+                hcx.def_path_hash(*def_id)\n             });\n \n             tainted_by_errors.hash_stable(hcx, hasher);"}, {"sha": "81cf24e58dda4f52bbf3394bee721eae3358570a", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -27,6 +27,7 @@ use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::map as hir_map;\n use hir::map::definitions::{Definitions, DefKey, DisambiguatedDefPathData};\n use hir::svh::Svh;\n+use ich;\n use middle::lang_items;\n use ty::{self, TyCtxt};\n use session::Session;\n@@ -161,6 +162,20 @@ pub struct ExternCrate {\n     pub path_len: usize,\n }\n \n+pub struct EncodedMetadata {\n+    pub raw_data: Vec<u8>,\n+    pub hashes: Vec<EncodedMetadataHash>,\n+}\n+\n+/// The hash for some metadata that (when saving) will be exported\n+/// from this crate, or which (when importing) was exported by an\n+/// upstream crate.\n+#[derive(Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n+pub struct EncodedMetadataHash {\n+    pub def_index: DefIndex,\n+    pub hash: ich::Fingerprint,\n+}\n+\n /// A store of Rust crates, through with their metadata\n /// can be accessed.\n pub trait CrateStore {\n@@ -258,7 +273,8 @@ pub trait CrateStore {\n     fn encode_metadata<'a, 'tcx>(&self,\n                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n-                                 reachable: &NodeSet) -> Vec<u8>;\n+                                 reachable: &NodeSet)\n+                                 -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n }\n \n@@ -417,7 +433,10 @@ impl CrateStore for DummyCrateStore {\n     fn encode_metadata<'a, 'tcx>(&self,\n                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n-                                 reachable: &NodeSet) -> Vec<u8> { vec![] }\n+                                 reachable: &NodeSet)\n+                                 -> EncodedMetadata {\n+        bug!(\"encode_metadata\")\n+    }\n     fn metadata_encoding_version(&self) -> &[u8] { bug!(\"metadata_encoding_version\") }\n }\n "}, {"sha": "23f35d3bdd7929e262e1a56313ed7edf88dfe48d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -452,6 +452,23 @@ impl<'tcx> Hash for TyS<'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::TyS<'tcx> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let ty::TyS {\n+            ref sty,\n+\n+            // The other fields just provide fast access to information that is\n+            // also contained in `sty`, so no need to hash them.\n+            flags: _,\n+            region_depth: _,\n+        } = *self;\n+\n+        sty.hash_stable(hcx, hasher);\n+    }\n+}\n+\n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl<'tcx> serialize::UseSpecializedEncodable for Ty<'tcx> {}"}, {"sha": "c650ffe302762a1f39bab14f24e9feb429b81d4b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -13,7 +13,7 @@\n use hir::def_id::{DefId, LOCAL_CRATE};\n use hir::map::DefPathData;\n use infer::InferCtxt;\n-// use hir::map as hir_map;\n+use ich::{StableHashingContext, NodeIdHashingMode};\n use traits::{self, Reveal};\n use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n use ty::ParameterEnvironment;\n@@ -25,8 +25,8 @@ use util::nodemap::FxHashMap;\n use middle::lang_items;\n \n use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n-use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult};\n-\n+use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n+                                           HashStable};\n use std::cell::RefCell;\n use std::cmp;\n use std::hash::Hash;\n@@ -187,6 +187,22 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n+    /// Creates a hash of the type `Ty` which will be the same no matter what crate\n+    /// context it's calculated within. This is used by the `type_id` intrinsic.\n+    pub fn type_id_hash(self, ty: Ty<'tcx>) -> u64 {\n+        let mut hasher = StableHasher::new();\n+        let mut hcx = StableHashingContext::new(self);\n+\n+        hcx.while_hashing_spans(false, |hcx| {\n+            hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+                ty.hash_stable(hcx, &mut hasher);\n+            });\n+        });\n+        hasher.finish()\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n         match ty.sty {\n@@ -339,14 +355,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             .collect()\n     }\n \n-    /// Creates a hash of the type `Ty` which will be the same no matter what crate\n-    /// context it's calculated within. This is used by the `type_id` intrinsic.\n-    pub fn type_id_hash(self, ty: Ty<'tcx>) -> u64 {\n-        let mut hasher = TypeIdHasher::new(self);\n-        hasher.visit_ty(ty);\n-        hasher.finish()\n-    }\n-\n     /// Calculate the destructor of a given type.\n     pub fn calculate_dtor(\n         self,"}, {"sha": "bdef9fefd41e4ab07535ab83a00c466eac1c5d0f", "filename": "src/librustc_data_structures/blake2b.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_data_structures%2Fblake2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_data_structures%2Fblake2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fblake2b.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -29,16 +29,23 @@ pub struct Blake2bCtx {\n     t: [u64; 2],\n     c: usize,\n     outlen: u16,\n-    finalized: bool\n+    finalized: bool,\n+\n+    #[cfg(debug_assertions)]\n+    fnv_hash: u64,\n }\n \n+#[cfg(debug_assertions)]\n impl ::std::fmt::Debug for Blake2bCtx {\n-    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {\n-        try!(write!(fmt, \"hash: \"));\n-        for v in &self.h {\n-            try!(write!(fmt, \"{:x}\", v));\n-        }\n-        Ok(())\n+    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+        write!(fmt, \"{:x}\", self.fnv_hash)\n+    }\n+}\n+\n+#[cfg(not(debug_assertions))]\n+impl ::std::fmt::Debug for Blake2bCtx {\n+    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+        write!(fmt, \"Enable debug_assertions() for more info.\")\n     }\n }\n \n@@ -157,6 +164,9 @@ fn blake2b_new(outlen: usize, key: &[u8]) -> Blake2bCtx {\n         c: 0,\n         outlen: outlen as u16,\n         finalized: false,\n+\n+        #[cfg(debug_assertions)]\n+        fnv_hash: 0xcbf29ce484222325,\n     };\n \n     ctx.h[0] ^= 0x01010000 ^ ((key.len() << 8) as u64) ^ (outlen as u64);\n@@ -194,6 +204,16 @@ fn blake2b_update(ctx: &mut Blake2bCtx, mut data: &[u8]) {\n         checked_mem_copy(data, &mut ctx.b[ctx.c .. ], bytes_to_copy);\n         ctx.c += bytes_to_copy;\n     }\n+\n+    #[cfg(debug_assertions)]\n+    {\n+        // compute additional FNV hash for simpler to read debug output\n+        const MAGIC_PRIME: u64 = 0x00000100000001b3;\n+\n+        for &byte in data {\n+            ctx.fnv_hash = (ctx.fnv_hash ^ byte as u64).wrapping_mul(MAGIC_PRIME);\n+        }\n+    }\n }\n \n fn blake2b_final(ctx: &mut Blake2bCtx)"}, {"sha": "00c46d992bfd5a05498e6b58b5c84f40b1952a0a", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -40,6 +40,7 @@\n #![feature(discriminant_value)]\n #![feature(specialization)]\n #![feature(manually_drop)]\n+#![feature(struct_field_attributes)]\n \n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "95f063976d491018a44cc55c149d40dec931a1ed", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -40,13 +40,18 @@ fn write_signed_leb128_to_buf(buf: &mut [u8; 16], value: i64) -> usize {\n /// This hasher currently always uses the stable Blake2b algorithm\n /// and allows for variable output lengths through its type\n /// parameter.\n-#[derive(Debug)]\n pub struct StableHasher<W> {\n     state: Blake2bHasher,\n     bytes_hashed: u64,\n     width: PhantomData<W>,\n }\n \n+impl<W: StableHasherResult> ::std::fmt::Debug for StableHasher<W> {\n+    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+        write!(f, \"{:?}\", self.state)\n+    }\n+}\n+\n pub trait StableHasherResult: Sized {\n     fn finish(hasher: StableHasher<Self>) -> Self;\n }"}, {"sha": "eeacf79514a878c23149fe93e53cc597f421343e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -1083,6 +1083,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n          \"serialize dep graph\",\n          || rustc_incremental::save_dep_graph(tcx,\n                                               &incremental_hashes_map,\n+                                              &translation.metadata.hashes,\n                                               translation.link.crate_hash));\n     translation\n }"}, {"sha": "8a1af5dd08d74d7dfb85dac9ff9d94e5acbbcd9b", "filename": "src/librustc_incremental/persist/data.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -13,6 +13,7 @@\n use rustc::dep_graph::{DepNode, WorkProduct, WorkProductId};\n use rustc::hir::def_id::DefIndex;\n use rustc::ich::Fingerprint;\n+use rustc::middle::cstore::EncodedMetadataHash;\n use std::sync::Arc;\n use rustc_data_structures::fx::FxHashMap;\n \n@@ -98,7 +99,7 @@ pub struct SerializedMetadataHashes {\n     /// where `X` refers to some item in this crate. That `X` will be\n     /// a `DefPathIndex` that gets retracted to the current `DefId`\n     /// (matching the one found in this structure).\n-    pub hashes: Vec<SerializedMetadataHash>,\n+    pub hashes: Vec<EncodedMetadataHash>,\n \n     /// For each DefIndex (as it occurs in SerializedMetadataHash), this\n     /// map stores the DefPathIndex (as it occurs in DefIdDirectory), so\n@@ -112,14 +113,3 @@ pub struct SerializedMetadataHashes {\n     /// the DefIndex.\n     pub index_map: FxHashMap<DefIndex, DefPathIndex>\n }\n-\n-/// The hash for some metadata that (when saving) will be exported\n-/// from this crate, or which (when importing) was exported by an\n-/// upstream crate.\n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n-pub struct SerializedMetadataHash {\n-    pub def_index: DefIndex,\n-\n-    /// the hash itself, computed by `calculate_item_hash`\n-    pub hash: Fingerprint,\n-}"}, {"sha": "af5c1f05bd1fcdd82ad0393b6c93b9b46e3cf4cc", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -215,9 +215,11 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'a, 'tcx> {\n     }\n }\n \n-pub fn check_dirty_clean_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                  prev_metadata_hashes: &FxHashMap<DefId, Fingerprint>,\n-                                  current_metadata_hashes: &FxHashMap<DefId, Fingerprint>) {\n+pub fn check_dirty_clean_metadata<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    prev_metadata_hashes: &FxHashMap<DefId, Fingerprint>,\n+    current_metadata_hashes: &FxHashMap<DefId, Fingerprint>)\n+{\n     if !tcx.sess.opts.debugging_opts.query_dep_graph {\n         return;\n     }\n@@ -230,7 +232,7 @@ pub fn check_dirty_clean_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             current_metadata_hashes: current_metadata_hashes,\n             checked_attrs: FxHashSet(),\n         };\n-        krate.visit_all_item_likes(&mut dirty_clean_visitor);\n+        intravisit::walk_crate(&mut dirty_clean_visitor, krate);\n \n         let mut all_attrs = FindAllAttrs {\n             tcx: tcx,\n@@ -246,30 +248,58 @@ pub fn check_dirty_clean_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     });\n }\n \n-pub struct DirtyCleanMetadataVisitor<'a, 'tcx:'a, 'm> {\n+pub struct DirtyCleanMetadataVisitor<'a, 'tcx: 'a, 'm> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     prev_metadata_hashes: &'m FxHashMap<DefId, Fingerprint>,\n     current_metadata_hashes: &'m FxHashMap<DefId, Fingerprint>,\n     checked_attrs: FxHashSet<ast::AttrId>,\n }\n \n-impl<'a, 'tcx, 'm> ItemLikeVisitor<'tcx> for DirtyCleanMetadataVisitor<'a, 'tcx, 'm> {\n+impl<'a, 'tcx, 'm> intravisit::Visitor<'tcx> for DirtyCleanMetadataVisitor<'a, 'tcx, 'm> {\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+        intravisit::NestedVisitorMap::All(&self.tcx.hir)\n+    }\n+\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         self.check_item(item.id, item.span);\n+        intravisit::walk_item(self, item);\n+    }\n \n-        if let hir::ItemEnum(ref def, _) = item.node {\n-            for v in &def.variants {\n-                self.check_item(v.node.data.id(), v.span);\n-            }\n+    fn visit_variant_data(&mut self,\n+                          variant_data: &'tcx hir::VariantData,\n+                          _: ast::Name,\n+                          _: &'tcx hir::Generics,\n+                          _parent_id: ast::NodeId,\n+                          span: Span) {\n+        if self.tcx.hir.find(variant_data.id()).is_some() {\n+            // VariantData that represent structs or tuples don't have a\n+            // separate entry in the HIR map and checking them would error,\n+            // so only check if this is an enum or union variant.\n+            self.check_item(variant_data.id(), span);\n         }\n+\n+        intravisit::walk_struct_def(self, variant_data);\n     }\n \n-    fn visit_trait_item(&mut self, item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem) {\n         self.check_item(item.id, item.span);\n+        intravisit::walk_trait_item(self, item);\n     }\n \n-    fn visit_impl_item(&mut self, item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, item: &'tcx hir::ImplItem) {\n         self.check_item(item.id, item.span);\n+        intravisit::walk_impl_item(self, item);\n+    }\n+\n+    fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem) {\n+        self.check_item(i.id, i.span);\n+        intravisit::walk_foreign_item(self, i);\n+    }\n+\n+    fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n+        self.check_item(s.id, s.span);\n+        intravisit::walk_struct_field(self, s);\n     }\n }\n \n@@ -281,13 +311,15 @@ impl<'a, 'tcx, 'm> DirtyCleanMetadataVisitor<'a, 'tcx, 'm> {\n         for attr in self.tcx.get_attrs(def_id).iter() {\n             if attr.check_name(ATTR_DIRTY_METADATA) {\n                 if check_config(self.tcx, attr) {\n-                    self.checked_attrs.insert(attr.id);\n-                    self.assert_state(false, def_id, item_span);\n+                    if self.checked_attrs.insert(attr.id) {\n+                        self.assert_state(false, def_id, item_span);\n+                    }\n                 }\n             } else if attr.check_name(ATTR_CLEAN_METADATA) {\n                 if check_config(self.tcx, attr) {\n-                    self.checked_attrs.insert(attr.id);\n-                    self.assert_state(true, def_id, item_span);\n+                    if self.checked_attrs.insert(attr.id) {\n+                        self.assert_state(true, def_id, item_span);\n+                    }\n                 }\n             }\n         }"}, {"sha": "e769641a4cadf2094e42e6fc14fc3004667e014d", "filename": "src/librustc_incremental/persist/preds/mod.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -44,16 +44,18 @@ impl<'q> Predecessors<'q> {\n     pub fn new(query: &'q DepGraphQuery<DefId>, hcx: &mut HashContext) -> Self {\n         let tcx = hcx.tcx;\n \n-        let collect_for_metadata = tcx.sess.opts.debugging_opts.incremental_cc ||\n-            tcx.sess.opts.debugging_opts.query_dep_graph;\n-\n         // Find the set of \"start nodes\". These are nodes that we will\n         // possibly query later.\n         let is_output = |node: &DepNode<DefId>| -> bool {\n             match *node {\n                 DepNode::WorkProduct(_) => true,\n-                DepNode::MetaData(ref def_id) => collect_for_metadata && def_id.is_local(),\n-\n+                DepNode::MetaData(ref def_id) => {\n+                    // We do *not* create dep-nodes for the current crate's\n+                    // metadata anymore, just for metadata that we import/read\n+                    // from other crates.\n+                    debug_assert!(!def_id.is_local());\n+                    false\n+                }\n                 // if -Z query-dep-graph is passed, save more extended data\n                 // to enable better unit testing\n                 DepNode::TypeckTables(_) |\n@@ -75,6 +77,22 @@ impl<'q> Predecessors<'q> {\n                   .or_insert_with(|| hcx.hash(input).unwrap());\n         }\n \n+        if tcx.sess.opts.debugging_opts.query_dep_graph {\n+            // Not all inputs might have been reachable from an output node,\n+            // but we still want their hash for our unit tests.\n+            let hir_nodes = query.graph.all_nodes().iter().filter_map(|node| {\n+                match node.data {\n+                    DepNode::Hir(_) => Some(&node.data),\n+                    _ => None,\n+                }\n+            });\n+\n+            for node in hir_nodes {\n+                hashes.entry(node)\n+                      .or_insert_with(|| hcx.hash(node).unwrap());\n+            }\n+        }\n+\n         let bootstrap_outputs: Vec<&'q DepNode<DefId>> =\n             (0 .. graph.len_nodes())\n             .map(NodeIndex)"}, {"sha": "1864009fbdf21f119b2ff80dec63f02c2118ea19", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 8, "deletions": 73, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -12,13 +12,12 @@ use rustc::dep_graph::DepNode;\n use rustc::hir::def_id::DefId;\n use rustc::hir::svh::Svh;\n use rustc::ich::Fingerprint;\n+use rustc::middle::cstore::EncodedMetadataHash;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::graph::{NodeIndex, INCOMING};\n use rustc_serialize::Encodable as RustcEncodable;\n use rustc_serialize::opaque::Encoder;\n-use std::hash::Hash;\n use std::io::{self, Cursor, Write};\n use std::fs::{self, File};\n use std::path::PathBuf;\n@@ -32,10 +31,10 @@ use super::fs::*;\n use super::dirty_clean;\n use super::file_format;\n use super::work_product;\n-use calculate_svh::IchHasher;\n \n pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 incremental_hashes_map: &IncrementalHashesMap,\n+                                metadata_hashes: &[EncodedMetadataHash],\n                                 svh: Svh) {\n     debug!(\"save_dep_graph()\");\n     let _ignore = tcx.dep_graph.in_ignore();\n@@ -56,16 +55,16 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let preds = Predecessors::new(&query, &mut hcx);\n     let mut current_metadata_hashes = FxHashMap();\n \n+    // IMPORTANT: We are saving the metadata hashes *before* the dep-graph,\n+    //            since metadata-encoding might add new entries to the\n+    //            DefIdDirectory (which is saved in the dep-graph file).\n     if sess.opts.debugging_opts.incremental_cc ||\n        sess.opts.debugging_opts.query_dep_graph {\n-        // IMPORTANT: We are saving the metadata hashes *before* the dep-graph,\n-        //            since metadata-encoding might add new entries to the\n-        //            DefIdDirectory (which is saved in the dep-graph file).\n         save_in(sess,\n                 metadata_hash_export_path(sess),\n                 |e| encode_metadata_hashes(tcx,\n                                            svh,\n-                                           &preds,\n+                                           metadata_hashes,\n                                            &mut builder,\n                                            &mut current_metadata_hashes,\n                                            e));\n@@ -241,80 +240,16 @@ pub fn encode_dep_graph(preds: &Predecessors,\n \n pub fn encode_metadata_hashes(tcx: TyCtxt,\n                               svh: Svh,\n-                              preds: &Predecessors,\n+                              metadata_hashes: &[EncodedMetadataHash],\n                               builder: &mut DefIdDirectoryBuilder,\n                               current_metadata_hashes: &mut FxHashMap<DefId, Fingerprint>,\n                               encoder: &mut Encoder)\n                               -> io::Result<()> {\n-    // For each `MetaData(X)` node where `X` is local, accumulate a\n-    // hash.  These are the metadata items we export. Downstream\n-    // crates will want to see a hash that tells them whether we might\n-    // have changed the metadata for a given item since they last\n-    // compiled.\n-    //\n-    // (I initially wrote this with an iterator, but it seemed harder to read.)\n     let mut serialized_hashes = SerializedMetadataHashes {\n-        hashes: vec![],\n+        hashes: metadata_hashes.to_vec(),\n         index_map: FxHashMap()\n     };\n \n-    for (index, target) in preds.reduced_graph.all_nodes().iter().enumerate() {\n-        let index = NodeIndex(index);\n-        let def_id = match *target.data {\n-            DepNode::MetaData(def_id) if def_id.is_local() => def_id,\n-            _ => continue,\n-        };\n-\n-        // To create the hash for each item `X`, we don't hash the raw\n-        // bytes of the metadata (though in principle we\n-        // could). Instead, we walk the predecessors of `MetaData(X)`\n-        // from the dep-graph. This corresponds to all the inputs that\n-        // were read to construct the metadata. To create the hash for\n-        // the metadata, we hash (the hash of) all of those inputs.\n-        debug!(\"save: computing metadata hash for {:?}\", def_id);\n-\n-        // Create a vector containing a pair of (source-id, hash).\n-        // The source-id is stored as a `DepNode<u64>`, where the u64\n-        // is the det. hash of the def-path. This is convenient\n-        // because we can sort this to get a stable ordering across\n-        // compilations, even if the def-ids themselves have changed.\n-        let mut hashes: Vec<(DepNode<u64>, Fingerprint)> =\n-            preds.reduced_graph\n-                 .depth_traverse(index, INCOMING)\n-                 .map(|index| preds.reduced_graph.node_data(index))\n-                 .filter(|dep_node| HashContext::is_hashable(dep_node))\n-                 .map(|dep_node| {\n-                     let hash_dep_node = dep_node.map_def(|&def_id| Some(tcx.def_path_hash(def_id)))\n-                                                 .unwrap();\n-                     let hash = preds.hashes[dep_node];\n-                     (hash_dep_node, hash)\n-                 })\n-                 .collect();\n-\n-        hashes.sort();\n-        let mut state = IchHasher::new();\n-        hashes.hash(&mut state);\n-        let hash = state.finish();\n-\n-        debug!(\"save: metadata hash for {:?} is {}\", def_id, hash);\n-\n-        if tcx.sess.opts.debugging_opts.incremental_dump_hash {\n-            println!(\"metadata hash for {:?} is {}\", def_id, hash);\n-            for pred_index in preds.reduced_graph.depth_traverse(index, INCOMING) {\n-                let dep_node = preds.reduced_graph.node_data(pred_index);\n-                if HashContext::is_hashable(&dep_node) {\n-                    println!(\"metadata hash for {:?} depends on {:?} with hash {}\",\n-                             def_id, dep_node, preds.hashes[dep_node]);\n-                }\n-            }\n-        }\n-\n-        serialized_hashes.hashes.push(SerializedMetadataHash {\n-            def_index: def_id.index,\n-            hash: hash,\n-        });\n-    }\n-\n     if tcx.sess.opts.debugging_opts.query_dep_graph {\n         for serialized_hash in &serialized_hashes.hashes {\n             let def_id = DefId::local(serialized_hash.def_index);"}, {"sha": "3239dfb937b5e79bd170036a0d232252d159f450", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -14,8 +14,9 @@ use locator;\n use schema;\n \n use rustc::dep_graph::DepTrackingMapConfig;\n-use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind, ExternCrate};\n-use rustc::middle::cstore::{NativeLibrary, LinkMeta, LinkagePreference, LoadedMacro};\n+use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n+                            ExternCrate, NativeLibrary, LinkMeta,\n+                            LinkagePreference, LoadedMacro, EncodedMetadata};\n use rustc::hir::def::{self, Def};\n use rustc::middle::lang_items;\n use rustc::session::Session;\n@@ -498,7 +499,8 @@ impl CrateStore for cstore::CStore {\n     fn encode_metadata<'a, 'tcx>(&self,\n                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n-                                 reachable: &NodeSet) -> Vec<u8>\n+                                 reachable: &NodeSet)\n+                                 -> EncodedMetadata\n     {\n         encoder::encode_metadata(tcx, self, link_meta, reachable)\n     }"}, {"sha": "ffe68094c6afc0d46b130e82a23e71333af414f7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -12,10 +12,10 @@ use cstore;\n use index::Index;\n use schema::*;\n \n-use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary};\n+use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary,\n+                            EncodedMetadata, EncodedMetadataHash};\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId};\n use rustc::hir::map::definitions::DefPathTable;\n-use rustc::ich;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::lang_items;\n use rustc::mir;\n@@ -56,7 +56,7 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n \n-    pub metadata_hashes: Vec<(DefIndex, ich::Fingerprint)>,\n+    pub metadata_hashes: Vec<EncodedMetadataHash>,\n }\n \n macro_rules! encoder_methods {\n@@ -240,13 +240,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     fn encode_item_variances(&mut self, def_id: DefId) -> LazySeq<ty::Variance> {\n+        debug!(\"EntryBuilder::encode_item_variances({:?})\", def_id);\n         let tcx = self.tcx;\n         self.lazy_seq_from_slice(&tcx.item_variances(def_id))\n     }\n \n     fn encode_item_type(&mut self, def_id: DefId) -> Lazy<Ty<'tcx>> {\n         let tcx = self.tcx;\n-        self.lazy(&tcx.item_type(def_id))\n+        let ty = tcx.item_type(def_id);\n+        debug!(\"EntryBuilder::encode_item_type({:?}) => {:?}\", def_id, ty);\n+        self.lazy(&ty)\n     }\n \n     /// Encode data for the given variant of the given ADT. The\n@@ -261,6 +264,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n         let def = tcx.lookup_adt_def(enum_did);\n         let variant = &def.variants[index];\n         let def_id = variant.did;\n+        debug!(\"EntryBuilder::encode_enum_variant_info({:?})\", def_id);\n \n         let data = VariantData {\n             ctor_kind: variant.ctor_kind,\n@@ -307,6 +311,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n                            -> Entry<'tcx> {\n         let tcx = self.tcx;\n         let def_id = tcx.hir.local_def_id(id);\n+        debug!(\"EntryBuilder::encode_info_for_mod({:?})\", def_id);\n \n         let data = ModData {\n             reexports: match tcx.export_map.get(&id) {\n@@ -370,6 +375,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n         let field = &variant.fields[field_index];\n \n         let def_id = field.did;\n+        debug!(\"EntryBuilder::encode_field({:?})\", def_id);\n+\n         let variant_id = tcx.hir.as_local_node_id(variant.did).unwrap();\n         let variant_data = tcx.hir.expect_variant_data(variant_id);\n \n@@ -394,6 +401,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_struct_ctor(&mut self, (adt_def_id, def_id): (DefId, DefId)) -> Entry<'tcx> {\n+        debug!(\"EntryBuilder::encode_struct_ctor({:?})\", def_id);\n         let tcx = self.tcx;\n         let variant = tcx.lookup_adt_def(adt_def_id).struct_variant();\n \n@@ -436,16 +444,19 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_generics(&mut self, def_id: DefId) -> Lazy<ty::Generics> {\n+        debug!(\"EntryBuilder::encode_generics({:?})\", def_id);\n         let tcx = self.tcx;\n         self.lazy(tcx.item_generics(def_id))\n     }\n \n     fn encode_predicates(&mut self, def_id: DefId) -> Lazy<ty::GenericPredicates<'tcx>> {\n+        debug!(\"EntryBuilder::encode_predicates({:?})\", def_id);\n         let tcx = self.tcx;\n         self.lazy(&tcx.item_predicates(def_id))\n     }\n \n     fn encode_info_for_trait_item(&mut self, def_id: DefId) -> Entry<'tcx> {\n+        debug!(\"EntryBuilder::encode_info_for_trait_item({:?})\", def_id);\n         let tcx = self.tcx;\n \n         let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n@@ -528,6 +539,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_info_for_impl_item(&mut self, def_id: DefId) -> Entry<'tcx> {\n+        debug!(\"EntryBuilder::encode_info_for_impl_item({:?})\", def_id);\n         let node_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n         let ast_item = self.tcx.hir.expect_impl_item(node_id);\n         let impl_item = self.tcx.associated_item(def_id);\n@@ -614,11 +626,13 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Mir<'tcx>>> {\n+        debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n         self.tcx.maps.mir.borrow().get(&def_id).map(|mir| self.lazy(&*mir.borrow()))\n     }\n \n     // Encodes the inherent implementations of a structure, enumeration, or trait.\n     fn encode_inherent_implementations(&mut self, def_id: DefId) -> LazySeq<DefIndex> {\n+        debug!(\"EntryBuilder::encode_inherent_implementations({:?})\", def_id);\n         match self.tcx.maps.inherent_impls.borrow().get(&def_id) {\n             None => LazySeq::empty(),\n             Some(implementations) => {\n@@ -631,18 +645,19 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_stability(&mut self, def_id: DefId) -> Option<Lazy<attr::Stability>> {\n+        debug!(\"EntryBuilder::encode_stability({:?})\", def_id);\n         self.tcx.lookup_stability(def_id).map(|stab| self.lazy(stab))\n     }\n \n     fn encode_deprecation(&mut self, def_id: DefId) -> Option<Lazy<attr::Deprecation>> {\n+        debug!(\"EntryBuilder::encode_deprecation({:?})\", def_id);\n         self.tcx.lookup_deprecation(def_id).map(|depr| self.lazy(&depr))\n     }\n \n     fn encode_info_for_item(&mut self, (def_id, item): (DefId, &'tcx hir::Item)) -> Entry<'tcx> {\n         let tcx = self.tcx;\n \n-        debug!(\"encoding info for item at {}\",\n-               tcx.sess.codemap().span_to_string(item.span));\n+        debug!(\"EntryBuilder::encode_info_for_item({:?})\", def_id);\n \n         let kind = match item.node {\n             hir::ItemStatic(_, hir::MutMutable, _) => EntryKind::MutStatic,\n@@ -956,7 +971,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n                                     -> Entry<'tcx> {\n         let tcx = self.tcx;\n \n-        debug!(\"writing foreign item {}\", tcx.node_path_str(nitem.id));\n+        debug!(\"EntryBuilder::encode_info_for_foreign_item({:?})\", def_id);\n \n         let kind = match nitem.node {\n             hir::ForeignItemFn(_, ref names, _) => {\n@@ -1065,6 +1080,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     fn encode_info_for_ty_param(&mut self,\n                                 (def_id, Untracked(has_default)): (DefId, Untracked<bool>))\n                                 -> Entry<'tcx> {\n+        debug!(\"EntryBuilder::encode_info_for_ty_param({:?})\", def_id);\n         let tcx = self.tcx;\n         Entry {\n             kind: EntryKind::Type,\n@@ -1091,6 +1107,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_info_for_anon_ty(&mut self, def_id: DefId) -> Entry<'tcx> {\n+        debug!(\"EntryBuilder::encode_info_for_anon_ty({:?})\", def_id);\n         let tcx = self.tcx;\n         Entry {\n             kind: EntryKind::Type,\n@@ -1113,6 +1130,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_info_for_closure(&mut self, def_id: DefId) -> Entry<'tcx> {\n+        debug!(\"EntryBuilder::encode_info_for_closure({:?})\", def_id);\n         let tcx = self.tcx;\n \n         let data = ClosureData {\n@@ -1141,6 +1159,9 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_attributes(&mut self, attrs: &[ast::Attribute]) -> LazySeq<ast::Attribute> {\n+        // NOTE: This must use lazy_seq_from_slice(), not lazy_seq() because\n+        //       we really on the HashStable specialization for [Attribute]\n+        //       to properly filter things out.\n         self.lazy_seq_from_slice(attrs)\n     }\n }\n@@ -1442,14 +1463,15 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  cstore: &cstore::CStore,\n                                  link_meta: &LinkMeta,\n                                  exported_symbols: &NodeSet)\n-                                 -> Vec<u8> {\n+                                 -> EncodedMetadata\n+{\n     let mut cursor = Cursor::new(vec![]);\n     cursor.write_all(METADATA_HEADER).unwrap();\n \n     // Will be filed with the root position after encoding everything.\n     cursor.write_all(&[0, 0, 0, 0]).unwrap();\n \n-    let root = {\n+    let (root, metadata_hashes) = {\n         let mut ecx = EncodeContext {\n             opaque: opaque::Encoder::new(&mut cursor),\n             tcx: tcx,\n@@ -1467,7 +1489,8 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Encode all the entries and extra information in the crate,\n         // culminating in the `CrateRoot` which points to all of it.\n-        ecx.encode_crate_root()\n+        let root = ecx.encode_crate_root();\n+        (root, ecx.metadata_hashes)\n     };\n     let mut result = cursor.into_inner();\n \n@@ -1479,7 +1502,10 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     result[header + 2] = (pos >> 8) as u8;\n     result[header + 3] = (pos >> 0) as u8;\n \n-    result\n+    EncodedMetadata {\n+        raw_data: result,\n+        hashes: metadata_hashes,\n+    }\n }\n \n pub fn get_repr_options<'a, 'tcx, 'gcx>(tcx: &TyCtxt<'a, 'tcx, 'gcx>, did: DefId) -> ReprOptions {"}, {"sha": "01f948866b85081b8ba42889f7bcdf3598d5c270", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 76, "deletions": 17, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -62,16 +62,16 @@ use schema::*;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::ich::{StableHashingContext, Fingerprint};\n+use rustc::middle::cstore::EncodedMetadataHash;\n use rustc::ty::TyCtxt;\n use syntax::ast;\n \n use std::ops::{Deref, DerefMut};\n \n+use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use rustc_serialize::Encodable;\n \n-use rustc::dep_graph::DepNode;\n-\n /// Builder that can encode new items, adding them into the index.\n /// Item encoding cannot be nested.\n pub struct IndexBuilder<'a, 'b: 'a, 'tcx: 'b> {\n@@ -123,20 +123,36 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n                             data: DATA)\n         where DATA: DepGraphRead\n     {\n-        let _task = self.tcx.dep_graph.in_task(DepNode::MetaData(id));\n-        data.read(self.tcx);\n-\n         assert!(id.is_local());\n         let tcx: TyCtxt<'b, 'tcx, 'tcx> = self.ecx.tcx;\n+\n+        // We don't track this since we are explicitly computing the incr. comp.\n+        // hashes anyway. In theory we could do some tracking here and use it to\n+        // avoid rehashing things (and instead cache the hashes) but it's\n+        // unclear whether that would be a win since hashing is cheap enough.\n+        let _task = tcx.dep_graph.in_ignore();\n+\n+        let compute_ich = (tcx.sess.opts.debugging_opts.query_dep_graph ||\n+                           tcx.sess.opts.debugging_opts.incremental_cc) &&\n+                           tcx.sess.opts.build_dep_graph();\n+\n         let ecx: &'x mut EncodeContext<'b, 'tcx> = &mut *self.ecx;\n         let mut entry_builder = EntryBuilder {\n             tcx: tcx,\n             ecx: ecx,\n-            hasher: StableHasher::new(),\n-            hcx: StableHashingContext::new(tcx),\n+            hcx: if compute_ich {\n+                Some((StableHashingContext::new(tcx), StableHasher::new()))\n+            } else {\n+                None\n+            }\n         };\n \n         let entry = op(&mut entry_builder, data);\n+\n+        if let Some((ref mut hcx, ref mut hasher)) = entry_builder.hcx {\n+            entry.hash_stable(hcx, hasher);\n+        }\n+\n         let entry = entry_builder.ecx.lazy(&entry);\n         entry_builder.finish(id);\n         self.items.record(id, entry);\n@@ -245,44 +261,87 @@ impl<T> DepGraphRead for FromId<T> {\n pub struct EntryBuilder<'a, 'b: 'a, 'tcx: 'b> {\n     pub tcx: TyCtxt<'b, 'tcx, 'tcx>,\n     ecx: &'a mut EncodeContext<'b, 'tcx>,\n-    hasher: StableHasher<Fingerprint>,\n-    hcx: StableHashingContext<'b, 'tcx>,\n+    hcx: Option<(StableHashingContext<'b, 'tcx>, StableHasher<Fingerprint>)>,\n }\n \n impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n \n     pub fn finish(self, def_id: DefId) {\n-        let hash = self.hasher.finish();\n-        self.ecx.metadata_hashes.push((def_id.index, hash));\n+        if let Some((_, hasher)) = self.hcx {\n+            let hash = hasher.finish();\n+            self.ecx.metadata_hashes.push(EncodedMetadataHash {\n+                def_index: def_id.index,\n+                hash: hash,\n+            });\n+        }\n     }\n \n     pub fn lazy<T>(&mut self, value: &T) -> Lazy<T>\n         where T: Encodable + HashStable<StableHashingContext<'b, 'tcx>>\n     {\n-        value.hash_stable(&mut self.hcx, &mut self.hasher);\n+        if let Some((ref mut hcx, ref mut hasher)) = self.hcx {\n+            value.hash_stable(hcx, hasher);\n+            debug!(\"metadata-hash: {:?}\", hasher);\n+        }\n         self.ecx.lazy(value)\n     }\n \n     pub fn lazy_seq<I, T>(&mut self, iter: I) -> LazySeq<T>\n         where I: IntoIterator<Item = T>,\n               T: Encodable + HashStable<StableHashingContext<'b, 'tcx>>\n     {\n-        let items: Vec<T> = iter.into_iter().collect();\n-        items.hash_stable(&mut self.hcx, &mut self.hasher);\n-        self.ecx.lazy_seq(items)\n+        if let Some((ref mut hcx, ref mut hasher)) = self.hcx {\n+            let iter = iter.into_iter();\n+            let (lower_bound, upper_bound) = iter.size_hint();\n+\n+            if upper_bound == Some(lower_bound) {\n+                lower_bound.hash_stable(hcx, hasher);\n+                let mut num_items_hashed = 0;\n+                let ret = self.ecx.lazy_seq(iter.inspect(|item| {\n+                    item.hash_stable(hcx, hasher);\n+                    num_items_hashed += 1;\n+                }));\n+\n+                // Sometimes items in a sequence are filtered out without being\n+                // hashed (e.g. for &[ast::Attribute]) and this code path cannot\n+                // handle that correctly, so we want to make sure we didn't hit\n+                // it by accident.\n+                if lower_bound != num_items_hashed {\n+                    bug!(\"Hashed a different number of items ({}) than expected ({})\",\n+                         num_items_hashed,\n+                         lower_bound);\n+                }\n+                debug!(\"metadata-hash: {:?}\", hasher);\n+                ret\n+            } else {\n+                // Collect into a vec so we know the length of the sequence\n+                let items: AccumulateVec<[T; 32]> = iter.collect();\n+                items.hash_stable(hcx, hasher);\n+                debug!(\"metadata-hash: {:?}\", hasher);\n+                self.ecx.lazy_seq(items)\n+            }\n+        } else {\n+            self.ecx.lazy_seq(iter)\n+        }\n     }\n \n     pub fn lazy_seq_from_slice<T>(&mut self, slice: &[T]) -> LazySeq<T>\n         where T: Encodable + HashStable<StableHashingContext<'b, 'tcx>>\n     {\n-        slice.hash_stable(&mut self.hcx, &mut self.hasher);\n+        if let Some((ref mut hcx, ref mut hasher)) = self.hcx {\n+            slice.hash_stable(hcx, hasher);\n+            debug!(\"metadata-hash: {:?}\", hasher);\n+        }\n         self.ecx.lazy_seq_ref(slice.iter())\n     }\n \n     pub fn lazy_seq_ref_from_slice<T>(&mut self, slice: &[&T]) -> LazySeq<T>\n         where T: Encodable + HashStable<StableHashingContext<'b, 'tcx>>\n     {\n-        slice.hash_stable(&mut self.hcx, &mut self.hasher);\n+        if let Some((ref mut hcx, ref mut hasher)) = self.hcx {\n+            slice.hash_stable(hcx, hasher);\n+            debug!(\"metadata-hash: {:?}\", hasher);\n+        }\n         self.ecx.lazy_seq_ref(slice.iter().map(|x| *x))\n     }\n }"}, {"sha": "53d6a9ec10df2fca11c8cef3f8a0b5ffe89379b0", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 86, "deletions": 4, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -14,6 +14,7 @@ use index;\n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId};\n+use rustc::ich::StableHashingContext;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary};\n use rustc::middle::lang_items;\n@@ -27,6 +28,7 @@ use syntax::symbol::Symbol;\n use syntax_pos::{self, Span};\n \n use std::marker::PhantomData;\n+use std::mem;\n \n use rustc_data_structures::stable_hasher::{StableHasher, HashStable,\n                                            StableHasherResult};\n@@ -107,8 +109,8 @@ impl<CTX, T> HashStable<CTX> for Lazy<T> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _: &mut CTX,\n                                           _: &mut StableHasher<W>) {\n-            // There's nothing to do. Whatever got encoded within this Lazy<>\n-            // wrapper has already been hashed.\n+        // There's nothing to do. Whatever got encoded within this Lazy<>\n+        // wrapper has already been hashed.\n     }\n }\n \n@@ -164,8 +166,8 @@ impl<CTX, T> HashStable<CTX> for LazySeq<T> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _: &mut CTX,\n                                           _: &mut StableHasher<W>) {\n-            // There's nothing to do. Whatever got encoded within this Lazy<>\n-            // wrapper has already been hashed.\n+        // There's nothing to do. Whatever got encoded within this Lazy<>\n+        // wrapper has already been hashed.\n     }\n }\n \n@@ -240,6 +242,23 @@ pub struct Entry<'tcx> {\n     pub mir: Option<Lazy<mir::Mir<'tcx>>>,\n }\n \n+impl_stable_hash_for!(struct Entry<'tcx> {\n+    kind,\n+    visibility,\n+    span,\n+    attributes,\n+    children,\n+    stability,\n+    deprecation,\n+    ty,\n+    inherent_impls,\n+    variances,\n+    generics,\n+    predicates,\n+    ast,\n+    mir\n+});\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n pub enum EntryKind<'tcx> {\n     Const(u8),\n@@ -267,6 +286,69 @@ pub enum EntryKind<'tcx> {\n     AssociatedConst(AssociatedContainer, u8),\n }\n \n+impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for EntryKind<'tcx> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+        match *self {\n+            EntryKind::ImmStatic        |\n+            EntryKind::MutStatic        |\n+            EntryKind::ForeignImmStatic |\n+            EntryKind::ForeignMutStatic |\n+            EntryKind::ForeignMod       |\n+            EntryKind::Field |\n+            EntryKind::Type => {\n+                // Nothing else to hash here.\n+            }\n+            EntryKind::Const(qualif) => {\n+                qualif.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::Enum(ref repr_options) => {\n+                repr_options.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::Variant(ref variant_data) => {\n+                variant_data.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::Struct(ref variant_data, ref repr_options) |\n+            EntryKind::Union(ref variant_data, ref repr_options)  => {\n+                variant_data.hash_stable(hcx, hasher);\n+                repr_options.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::Fn(ref fn_data) |\n+            EntryKind::ForeignFn(ref fn_data) => {\n+                fn_data.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::Mod(ref mod_data) => {\n+                mod_data.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::MacroDef(ref macro_def) => {\n+                macro_def.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::Closure(closure_data) => {\n+                closure_data.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::Trait(ref trait_data) => {\n+                trait_data.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::DefaultImpl(ref impl_data) |\n+            EntryKind::Impl(ref impl_data) => {\n+                impl_data.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::Method(ref method_data) => {\n+                method_data.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::AssociatedType(associated_container) => {\n+                associated_container.hash_stable(hcx, hasher);\n+            }\n+            EntryKind::AssociatedConst(associated_container, qualif) => {\n+                associated_container.hash_stable(hcx, hasher);\n+                qualif.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+}\n+\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ModData {\n     pub reexports: LazySeq<def::Export>,"}, {"sha": "0ffa7a79408e12913acbd02a7fbbb920ebba500e", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -443,7 +443,10 @@ fn archive_config<'a>(sess: &'a Session,\n }\n \n fn emit_metadata<'a>(sess: &'a Session, trans: &CrateTranslation, out_filename: &Path) {\n-    let result = fs::File::create(out_filename).and_then(|mut f| f.write_all(&trans.metadata));\n+    let result = fs::File::create(out_filename).and_then(|mut f| {\n+        f.write_all(&trans.metadata.raw_data)\n+    });\n+\n     if let Err(e) = result {\n         sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n     }"}, {"sha": "f76e816bcf0c9580a18aa81d4b3646905db77521", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -36,6 +36,7 @@ use llvm::{Linkage, ValueRef, Vector, get_param};\n use llvm;\n use rustc::hir::def_id::LOCAL_CRATE;\n use middle::lang_items::StartFnLangItem;\n+use middle::cstore::EncodedMetadata;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::dep_graph::{AssertDepGraphSafe, DepNode, WorkProduct};\n use rustc::hir::map as hir_map;\n@@ -724,7 +725,8 @@ fn contains_null(s: &str) -> bool {\n }\n \n fn write_metadata(cx: &SharedCrateContext,\n-                  exported_symbols: &NodeSet) -> Vec<u8> {\n+                  exported_symbols: &NodeSet)\n+                  -> EncodedMetadata {\n     use flate;\n \n     #[derive(PartialEq, Eq, PartialOrd, Ord)]\n@@ -748,7 +750,10 @@ fn write_metadata(cx: &SharedCrateContext,\n     }).max().unwrap();\n \n     if kind == MetadataKind::None {\n-        return Vec::new();\n+        return EncodedMetadata {\n+            raw_data: vec![],\n+            hashes: vec![],\n+        };\n     }\n \n     let cstore = &cx.tcx().sess.cstore;\n@@ -761,7 +766,7 @@ fn write_metadata(cx: &SharedCrateContext,\n \n     assert!(kind == MetadataKind::Compressed);\n     let mut compressed = cstore.metadata_encoding_version().to_vec();\n-    compressed.extend_from_slice(&flate::deflate_bytes(&metadata));\n+    compressed.extend_from_slice(&flate::deflate_bytes(&metadata.raw_data));\n \n     let llmeta = C_bytes_in_context(cx.metadata_llcx(), &compressed);\n     let llconst = C_struct_in_context(cx.metadata_llcx(), &[llmeta], false);"}, {"sha": "628d46f8e7059f27317e247af2cfe449b2f128e4", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -168,7 +168,7 @@ pub struct CrateTranslation {\n     pub modules: Vec<ModuleTranslation>,\n     pub metadata_module: ModuleTranslation,\n     pub link: middle::cstore::LinkMeta,\n-    pub metadata: Vec<u8>,\n+    pub metadata: middle::cstore::EncodedMetadata,\n     pub exported_symbols: back::symbol_export::ExportedSymbols,\n     pub no_builtins: bool,\n     pub windows_subsystem: Option<String>,"}, {"sha": "37c6ef58f5e56bf680c07ca33d956b044f7917ac", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 75, "deletions": 17, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -38,8 +38,13 @@ enum EnumVisibility { A }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-pub enum EnumVisibility { A }\n+pub enum EnumVisibility {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    A\n+}\n \n \n \n@@ -56,7 +61,10 @@ enum EnumChangeNameCStyleVariant {\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeNameCStyleVariant {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     Variant1,\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     Variant2Changed,\n }\n \n@@ -259,10 +267,13 @@ enum EnumChangeFieldTypeTupleStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeTupleStyleVariant {\n-    Variant1(u32, u64),\n+    Variant1(u32,\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        u64),\n }\n \n \n@@ -277,11 +288,16 @@ enum EnumChangeFieldTypeStructStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeStructStyleVariant {\n     Variant1,\n-    Variant2 { a: u32, b: u64 },\n+    Variant2 {\n+        a: u32,\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        b: u64\n+    },\n }\n \n \n@@ -312,10 +328,16 @@ enum EnumChangeOrderTupleStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeOrderTupleStyleVariant {\n-    Variant1(u64, u32),\n+    Variant1(\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        u64,\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        u32),\n }\n \n \n@@ -611,11 +633,23 @@ enum EnumSwapUsageTypeParameters<A, B> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageTypeParameters<A, B> {\n-    Variant1 { a: B },\n-    Variant2 { a: A },\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    Variant1 {\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        a: B\n+    },\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    Variant2 {\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        a: A\n+    },\n }\n \n \n@@ -630,11 +664,23 @@ enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n-    Variant1 { a: &'b u32 },\n-    Variant2 { b: &'a u32 },\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    Variant1 {\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        a: &'b u32\n+    },\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    Variant2 {\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        b: &'a u32\n+    },\n }\n \n \n@@ -653,10 +699,16 @@ mod change_field_type_indirectly_tuple_style {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum TupleStyle {\n-        Variant1(FieldType)\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        Variant1(\n+            #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+            #[rustc_metadata_clean(cfg=\"cfail3\")]\n+            FieldType\n+        )\n     }\n }\n \n@@ -671,10 +723,16 @@ mod change_field_type_indirectly_struct_style {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum StructStyle {\n-        Variant1 { a: FieldType }\n+        #[rustc_metadata_clean(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        Variant1 {\n+            #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+            #[rustc_metadata_clean(cfg=\"cfail3\")]\n+            a: FieldType\n+        }\n     }\n }\n "}, {"sha": "1d26e6c07d15bc9ab081d7f57a33053dfd7f5800", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -53,9 +53,11 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_parameter_name(d: i64) -> i32;\n }\n \n@@ -70,9 +72,11 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_parameter_type(c: i32) -> i32;\n }\n \n@@ -87,9 +91,11 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_return_type(c: i32) -> i8;\n }\n \n@@ -104,9 +110,11 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_parameter(c: i32, d: i32) -> i32;\n }\n \n@@ -121,9 +129,11 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_return_type(c: i32) -> i32;\n }\n \n@@ -138,9 +148,11 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn make_function_variadic(c: i32, ...);\n }\n \n@@ -155,9 +167,11 @@ extern \"C\" {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern \"rust-call\" {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_calling_convention(c: i32);\n }\n \n@@ -172,9 +186,11 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn make_function_public(c: i32);\n }\n \n@@ -246,9 +262,11 @@ mod indirectly_change_parameter_type {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern {\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         pub fn indirectly_change_parameter_type(c: c_int);\n     }\n }\n@@ -264,9 +282,11 @@ mod indirectly_change_return_type {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern {\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         pub fn indirectly_change_return_type() -> c_int;\n     }\n }"}, {"sha": "2fe3f0d5d1fe03911aaa08cd7e87874665c89ffc", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -50,7 +50,7 @@ fn add_return_type() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")] // The type doesn't change, so metadata is the same\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_return_type() -> () {}\n \n@@ -154,7 +154,7 @@ fn lifetime_parameter() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+// #[rustc_metadata_dirty(cfg=\"cfail2\")] -- Unused lifetime params don't show up in the type?\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn lifetime_parameter<'a>() {}\n \n@@ -315,16 +315,16 @@ fn return_impl_trait() -> impl Clone {\n \n #[cfg(cfail1)]\n fn change_return_impl_trait() -> impl Clone {\n-    0\n+    0u32\n }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")] // The actual type is the same, so: clean\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_return_impl_trait() -> impl Copy {\n-    0\n+    0u32\n }\n \n "}, {"sha": "899aefa24a033b0e3d4eeeb666b96c7e3b9c86d2", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -107,7 +107,7 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -126,7 +126,7 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -171,7 +171,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_method_to_impl1(&self) { }\n \n@@ -219,9 +219,7 @@ impl Foo {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    // At the moment we explicitly ignore argument names in metadata, since they\n-    // are not used in downstream crates (except in rustdoc)\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_name(&self, b: i64) { }\n }\n@@ -287,9 +285,7 @@ impl Foo {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    // At the moment we explicitly ignore argument names in metadata, since they\n-    // are not used in downstream crates (except in rustdoc)\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n }\n@@ -373,7 +369,7 @@ impl Foo {\n impl Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")] // Apparently unused lifetimes don't show up in the type.\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_parameter_to_method<'a>(&self) { }\n }\n@@ -544,7 +540,7 @@ impl<T> Bar<T> {\n impl<T: 'static> Bar<T> {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_impl_parameter(&self) { }\n }\n@@ -565,7 +561,7 @@ impl<T> Bar<T> {\n impl<T: Clone> Bar<T> {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_impl_parameter(&self) { }\n }"}, {"sha": "17a5dc16783678fe8326ade18b0d643f035d08e3", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 75, "deletions": 15, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -62,9 +62,13 @@ struct TupleStructFieldType(i32);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct TupleStructFieldType(u32);\n+struct TupleStructFieldType(\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    u32\n+);\n \n \n // Tuple Struct Add Field ------------------------------------------------------\n@@ -77,7 +81,13 @@ struct TupleStructAddField(i32);\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct TupleStructAddField(i32, u32);\n+struct TupleStructAddField(\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    i32,\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    u32\n+);\n \n \n // Tuple Struct Field Visibility -----------------------------------------------\n@@ -101,9 +111,13 @@ struct RecordStructFieldType { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct RecordStructFieldType { x: u64 }\n+struct RecordStructFieldType {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    x: u64\n+}\n \n \n // Record Struct Field Name ----------------------------------------------------\n@@ -129,7 +143,12 @@ struct RecordStructAddField { x: f32 }\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct RecordStructAddField { x: f32, y: () }\n+struct RecordStructAddField {\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    x: f32,\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    y: () }\n \n \n // Record Struct Field Visibility ----------------------------------------------\n@@ -142,7 +161,11 @@ struct RecordStructFieldVisibility { x: f32 }\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct RecordStructFieldVisibility { pub x: f32 }\n+struct RecordStructFieldVisibility {\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    pub x: f32\n+}\n \n \n // Add Lifetime Parameter ------------------------------------------------------\n@@ -168,7 +191,14 @@ struct AddLifetimeParameterBound<'a, 'b>(&'a f32, &'b f64);\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct AddLifetimeParameterBound<'a, 'b: 'a>(&'a f32, &'b f64);\n+struct AddLifetimeParameterBound<'a, 'b: 'a>(\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    &'a f32,\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    &'b f64\n+);\n \n #[cfg(cfail1)]\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n@@ -178,7 +208,13 @@ struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64)\n+struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    &'a f32,\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    &'b f64)\n     where 'b: 'a;\n \n \n@@ -192,7 +228,16 @@ struct AddTypeParameter<T1>(T1, T1);\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct AddTypeParameter<T1, T2>(T1, T2);\n+struct AddTypeParameter<T1, T2>(\n+     // The field contains the parent's Generics, so it's dirty even though its\n+     // type hasn't changed.\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    T1,\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    T2\n+);\n \n \n // Add Type Parameter Bound ----------------------------------------------------\n@@ -205,7 +250,11 @@ struct AddTypeParameterBound<T>(T);\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct AddTypeParameterBound<T: Send>(T);\n+struct AddTypeParameterBound<T: Send>(\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    T\n+);\n \n \n #[cfg(cfail1)]\n@@ -216,7 +265,11 @@ struct AddTypeParameterBoundWhereClause<T>(T);\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-struct AddTypeParameterBoundWhereClause<T>(T) where T: Sync;\n+struct AddTypeParameterBoundWhereClause<T>(\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    T\n+) where T: Sync;\n \n \n // Empty struct ----------------------------------------------------------------\n@@ -234,6 +287,7 @@ struct Visibility;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub struct Visibility;\n \n@@ -252,9 +306,13 @@ mod tuple_struct_change_field_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    struct TupleStruct(FieldType);\n+    struct TupleStruct(\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n+        FieldType\n+    );\n }\n \n \n@@ -267,9 +325,11 @@ mod record_struct_change_field_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     struct RecordStruct {\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         _x: FieldType\n     }\n }"}, {"sha": "61a2be054a51a61e8758f837d3d67a3344b235b9", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 73, "deletions": 48, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -100,7 +100,7 @@ trait TraitAddReturnType {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddReturnType {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -121,7 +121,7 @@ trait TraitChangeReturnType {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeReturnType {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -142,7 +142,7 @@ trait TraitAddParameterToMethod {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddParameterToMethod {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -164,7 +164,7 @@ trait TraitChangeMethodParameterName {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterName {\n     // FIXME(#38501) This should preferably always be clean.\n@@ -194,7 +194,7 @@ trait TraitChangeMethodParameterType {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterType {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -215,7 +215,7 @@ trait TraitChangeMethodParameterTypeRef {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterTypeRef {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -236,7 +236,7 @@ trait TraitChangeMethodParametersOrder {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParametersOrder {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -257,9 +257,13 @@ trait TraitAddMethodDefaultImplementation {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddMethodDefaultImplementation {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method() { }\n }\n \n@@ -293,7 +297,7 @@ trait TraitChangeModeSelfRefToMut {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfRefToMut {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -335,7 +339,7 @@ trait TraitChangeModeSelfOwnToRef {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToRef {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -356,7 +360,7 @@ trait TraitAddUnsafeModifier {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddUnsafeModifier {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -377,7 +381,7 @@ trait TraitAddExternModifier {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddExternModifier {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -398,7 +402,7 @@ trait TraitChangeExternCToRustIntrinsic {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeExternCToRustIntrinsic {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -419,7 +423,7 @@ trait TraitAddTypeParameterToMethod {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTypeParameterToMethod {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -440,12 +444,12 @@ trait TraitAddLifetimeParameterToMethod {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeParameterToMethod {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")] // Unused lifetimes don't seem to show up in type?\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<'a>();\n }\n@@ -465,7 +469,7 @@ trait TraitAddTraitBoundToMethodTypeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToMethodTypeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -486,7 +490,7 @@ trait TraitAddBuiltinBoundToMethodTypeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToMethodTypeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -507,7 +511,7 @@ trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -528,7 +532,7 @@ trait TraitAddSecondTraitBoundToMethodTypeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToMethodTypeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -549,7 +553,7 @@ trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -570,7 +574,7 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -585,7 +589,12 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n // Add associated type ------------------------------------------------------------\n #[cfg(cfail1)]\n trait TraitAddAssociatedType {\n-    fn mathod();\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn method();\n }\n \n #[cfg(not(cfail1))]\n@@ -596,7 +605,7 @@ trait TraitAddAssociatedType {\n trait TraitAddAssociatedType {\n     type Associated;\n \n-    fn mathod();\n+    fn method();\n }\n \n \n@@ -606,9 +615,12 @@ trait TraitAddAssociatedType {\n trait TraitAddTraitBoundToAssociatedType {\n     type Associated;\n \n-    fn mathod();\n+    fn method();\n }\n \n+\n+// Apparently the type bound contributes to the predicates of the trait, but\n+// does not change the associated item itself.\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n@@ -617,11 +629,11 @@ trait TraitAddTraitBoundToAssociatedType {\n trait TraitAddTraitBoundToAssociatedType {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type Associated: ReferencedTrait0;\n \n-    fn mathod();\n+    fn method();\n }\n \n \n@@ -631,7 +643,7 @@ trait TraitAddTraitBoundToAssociatedType {\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n     type Associated;\n \n-    fn mathod();\n+    fn method();\n }\n \n #[cfg(not(cfail1))]\n@@ -642,11 +654,11 @@ trait TraitAddLifetimeBoundToAssociatedType<'a> {\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type Associated: 'a;\n \n-    fn mathod();\n+    fn method();\n }\n \n \n@@ -656,26 +668,30 @@ trait TraitAddLifetimeBoundToAssociatedType<'a> {\n trait TraitAddDefaultToAssociatedType {\n     type Associated;\n \n-    fn mathod();\n+    fn method();\n }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddDefaultToAssociatedType {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type Associated = ReferenceType0;\n \n-    fn mathod();\n+    fn method();\n }\n \n \n \n // Add associated constant --------------------------------------------------------\n #[cfg(cfail1)]\n trait TraitAddAssociatedConstant {\n-    fn mathod();\n+    fn method();\n }\n \n #[cfg(not(cfail1))]\n@@ -686,7 +702,7 @@ trait TraitAddAssociatedConstant {\n trait TraitAddAssociatedConstant {\n     const Value: u32;\n \n-    fn mathod();\n+    fn method();\n }\n \n \n@@ -696,18 +712,26 @@ trait TraitAddAssociatedConstant {\n trait TraitAddInitializerToAssociatedConstant {\n     const Value: u32;\n \n-    fn mathod();\n+    fn method();\n }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddInitializerToAssociatedConstant {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     const Value: u32 = 1;\n \n-    fn mathod();\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn method();\n }\n \n \n@@ -717,13 +741,13 @@ trait TraitAddInitializerToAssociatedConstant {\n trait TraitChangeTypeOfAssociatedConstant {\n     const Value: u32;\n \n-    fn mathod();\n+    fn method();\n }\n \n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeTypeOfAssociatedConstant {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -732,7 +756,11 @@ trait TraitChangeTypeOfAssociatedConstant {\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     const Value: f64;\n \n-    fn mathod();\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn method();\n }\n \n \n@@ -1111,9 +1139,6 @@ trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send + Sync { }\n \n \n-\n-// EDIT: Some more cases ----------------------------------------------------------\n-\n // Change return type of method indirectly by modifying a use statement------------\n mod change_return_type_of_method_indirectly_use {\n     #[cfg(cfail1)]\n@@ -1123,7 +1148,7 @@ mod change_return_type_of_method_indirectly_use {\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeReturnType {\n         #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -1145,7 +1170,7 @@ mod change_method_parameter_type_indirectly_by_use {\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeArgType {\n         #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -1167,7 +1192,7 @@ mod change_method_parameter_type_bound_indirectly_by_use {\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameter {\n         #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -1190,7 +1215,7 @@ mod change_method_parameter_type_bound_indirectly_by_use_where {\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameterWhere {\n         #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]"}, {"sha": "06c8eb6a878f06e96a88451a87cbb9ad69a9f8de", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 21, "deletions": 37, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -120,7 +120,7 @@ impl ChangeMethodBodyTraitInlined for Foo {\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[inline]\n     fn method_name() {\n-        ()\n+        panic!()\n     }\n }\n \n@@ -144,7 +144,7 @@ pub trait ChangeMethodSelfnessTrait {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeMethodSelfnessTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -176,16 +176,14 @@ pub trait RemoveMethodSelfnessTrait {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl RemoveMethodSelfnessTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn method_name() {\n-        ()\n-    }\n+    fn method_name() {}\n }\n \n // Change Method Selfmutness -----------------------------------------------------------\n@@ -208,16 +206,14 @@ pub trait ChangeMethodSelfmutnessTrait {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeMethodSelfmutnessTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn method_name(&mut self) {\n-        ()\n-    }\n+    fn method_name(&mut self) {}\n }\n \n // Change item kind -----------------------------------------------------------\n@@ -317,16 +313,20 @@ impl ChangeHasValueTrait for Foo {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub trait ChangeHasValueTrait {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name() { }\n }\n \n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeHasValueTrait for Foo {\n     fn method_name() { }\n@@ -346,32 +346,16 @@ impl AddDefaultTrait for Foo {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl AddDefaultTrait for Foo {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     default fn method_name() { }\n }\n \n-// Remove default\n-\n-pub trait RemoveDefaultTrait {\n-    fn method_name();\n-}\n-\n-#[cfg(cfail1)]\n-impl RemoveDefaultTrait for Foo {\n-    default fn method_name() { }\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n-impl RemoveDefaultTrait for Foo {\n-    fn method_name() { }\n-}\n-\n // Add arguments\n \n #[cfg(cfail1)]\n@@ -392,7 +376,7 @@ pub trait AddArgumentTrait {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl AddArgumentTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -422,7 +406,7 @@ pub trait ChangeArgumentTypeTrait {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeArgumentTypeTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n@@ -504,7 +488,7 @@ impl<T> AddLifetimeBoundToImplParameter for T {\n impl<T: 'static> AddLifetimeBoundToImplParameter for T {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n@@ -529,7 +513,7 @@ impl<T> AddTraitBoundToImplParameter for T {\n impl<T: Clone> AddTraitBoundToImplParameter for T {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }"}, {"sha": "917c2c9dbce4f10434ebb49e6b7984d7414785f9", "filename": "src/test/incremental/unchecked_dirty_clean_metadata.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Funchecked_dirty_clean_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2dce9b48e65ae2b286fbd10e459536ecccb2d8/src%2Ftest%2Fincremental%2Funchecked_dirty_clean_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Funchecked_dirty_clean_metadata.rs?ref=ca2dce9b48e65ae2b286fbd10e459536ecccb2d8", "patch": "@@ -33,13 +33,3 @@ fn main() {\n     }\n }\n \n-struct _Struct {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked #[rustc_dirty]/#[rustc_clean] attribute\n-    _field1: i32,\n-\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked #[rustc_dirty]/#[rustc_clean] attribute\n-    _field2: i32,\n-}\n-"}]}