{"sha": "f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5Zjk5YzVhOWMwOGRkYTdjODVmOWQyZjdlN2Q4OTMyODJlZTNhMjc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-07T02:19:10Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-07T06:01:01Z"}, "message": "Make metavariables hygienic.", "tree": {"sha": "4695dfac5f389c4860e151f885610dc34250fda5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4695dfac5f389c4860e151f885610dc34250fda5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27", "html_url": "https://github.com/rust-lang/rust/commit/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444ff9fbfb1f2a8e6645f67684f8a9ad99b343d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/444ff9fbfb1f2a8e6645f67684f8a9ad99b343d3", "html_url": "https://github.com/rust-lang/rust/commit/444ff9fbfb1f2a8e6645f67684f8a9ad99b343d3"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "7db03e9a8634a9031cc16ecbf9d5b389506d2e8f", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27", "patch": "@@ -79,7 +79,7 @@ pub use self::ParseResult::*;\n use self::TokenTreeOrTokenTreeVec::*;\n \n use ast;\n-use ast::{Name, Ident};\n+use ast::Ident;\n use syntax_pos::{self, BytePos, mk_sp, Span};\n use codemap::Spanned;\n use errors::FatalError;\n@@ -202,9 +202,9 @@ pub enum NamedMatch {\n }\n \n pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n-            -> ParseResult<HashMap<Name, Rc<NamedMatch>>> {\n+            -> ParseResult<HashMap<Ident, Rc<NamedMatch>>> {\n     fn n_rec(p_s: &ParseSess, m: &TokenTree, res: &[Rc<NamedMatch>],\n-             ret_val: &mut HashMap<Name, Rc<NamedMatch>>, idx: &mut usize)\n+             ret_val: &mut HashMap<Ident, Rc<NamedMatch>>, idx: &mut usize)\n              -> Result<(), (syntax_pos::Span, String)> {\n         match *m {\n             TokenTree::Sequence(_, ref seq) => {\n@@ -218,7 +218,7 @@ pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n                 }\n             }\n             TokenTree::Token(sp, MatchNt(bind_name, _)) => {\n-                match ret_val.entry(bind_name.name) {\n+                match ret_val.entry(bind_name) {\n                     Vacant(spot) => {\n                         spot.insert(res[*idx].clone());\n                         *idx += 1;\n@@ -257,7 +257,7 @@ pub enum ParseResult<T> {\n     Error(syntax_pos::Span, String)\n }\n \n-pub type NamedParseResult = ParseResult<HashMap<Name, Rc<NamedMatch>>>;\n+pub type NamedParseResult = ParseResult<HashMap<Ident, Rc<NamedMatch>>>;\n pub type PositionalParseResult = ParseResult<Vec<Rc<NamedMatch>>>;\n \n /// Perform a token equality check, ignoring syntax context (that is, an"}, {"sha": "d197741e9a367bc39d6726cfafc850afe0def94e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27", "patch": "@@ -302,7 +302,7 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n     let mut valid = true;\n \n     // Extract the arguments:\n-    let lhses = match **argument_map.get(&lhs_nm.name).unwrap() {\n+    let lhses = match **argument_map.get(&lhs_nm).unwrap() {\n         MatchedSeq(ref s, _) => {\n             s.iter().map(|m| match **m {\n                 MatchedNonterminal(NtTT(ref tt)) => {\n@@ -315,7 +315,7 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n         _ => cx.span_bug(def.span, \"wrong-structured lhs\")\n     };\n \n-    let rhses = match **argument_map.get(&rhs_nm.name).unwrap() {\n+    let rhses = match **argument_map.get(&rhs_nm).unwrap() {\n         MatchedSeq(ref s, _) => {\n             s.iter().map(|m| match **m {\n                 MatchedNonterminal(NtTT(ref tt)) => (**tt).clone(),"}, {"sha": "939425378def699da15025a14cff36795f30c360", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=f9f99c5a9c08dda7c85f9d2f7e7d893282ee3a27", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n use self::LockstepIterSize::*;\n \n-use ast::{Ident, Name};\n+use ast::Ident;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{Handler, DiagnosticBuilder};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n@@ -38,7 +38,7 @@ pub struct TtReader<'a> {\n     /// the unzipped tree:\n     stack: Vec<TtFrame>,\n     /* for MBE-style macro transcription */\n-    interpolations: HashMap<Name, Rc<NamedMatch>>,\n+    interpolations: HashMap<Ident, Rc<NamedMatch>>,\n     imported_from: Option<Ident>,\n \n     // Some => return imported_from as the next token\n@@ -57,7 +57,7 @@ pub struct TtReader<'a> {\n /// `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n /// (and should) be None.\n pub fn new_tt_reader(sp_diag: &Handler,\n-                     interp: Option<HashMap<Name, Rc<NamedMatch>>>,\n+                     interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n                      imported_from: Option<Ident>,\n                      src: Vec<tokenstream::TokenTree>)\n                      -> TtReader {\n@@ -71,7 +71,7 @@ pub fn new_tt_reader(sp_diag: &Handler,\n /// `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n /// (and should) be None.\n pub fn new_tt_reader_with_doc_flag(sp_diag: &Handler,\n-                                   interp: Option<HashMap<Name, Rc<NamedMatch>>>,\n+                                   interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n                                    imported_from: Option<Ident>,\n                                    src: Vec<tokenstream::TokenTree>,\n                                    desugar_doc_comments: bool)\n@@ -119,7 +119,7 @@ fn lookup_cur_matched_by_matched(r: &TtReader, start: Rc<NamedMatch>) -> Rc<Name\n }\n \n fn lookup_cur_matched(r: &TtReader, name: Ident) -> Option<Rc<NamedMatch>> {\n-    let matched_opt = r.interpolations.get(&name.name).cloned();\n+    let matched_opt = r.interpolations.get(&name).cloned();\n     matched_opt.map(|s| lookup_cur_matched_by_matched(r, s))\n }\n "}]}