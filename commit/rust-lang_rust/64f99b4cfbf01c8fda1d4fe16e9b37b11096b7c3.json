{"sha": "64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0Zjk5YjRjZmJmMDFjOGZkYTFkNGZlMTZlOWIzN2IxMTA5NmI3YzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-07T13:29:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-07T13:29:25Z"}, "message": "Auto merge of #74627 - petrochenkov:docbeauty2, r=Aaron1011\n\nrustc_ast: Stop using \"string typing\" for doc comment tokens\n\nExplicitly store their kind and style retrieved during lexing in the `token::DocComment`.\n\nAlso don't \"beautify\" doc comments before converting them to `#[doc]` attributes when passing them to macros (both declarative and procedural).\nThe trimming of empty lines, lines containing only `*`s, etc is purely a rustdoc's job as a part of its presentation of doc strings to users, rustc must not do this and must pass tokens as precisely as possible internally.", "tree": {"sha": "95696e3346c247994a9a21199482e22defd595fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95696e3346c247994a9a21199482e22defd595fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "html_url": "https://github.com/rust-lang/rust/commit/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0e618cfbcb9240e6beac8cd16778b369ebe1b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0e618cfbcb9240e6beac8cd16778b369ebe1b7", "html_url": "https://github.com/rust-lang/rust/commit/1e0e618cfbcb9240e6beac8cd16778b369ebe1b7"}, {"sha": "a7eabec1df53fe726455c8088ecc0da07dd4009d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7eabec1df53fe726455c8088ecc0da07dd4009d", "html_url": "https://github.com/rust-lang/rust/commit/a7eabec1df53fe726455c8088ecc0da07dd4009d"}], "stats": {"total": 552, "additions": 312, "deletions": 240}, "files": [{"sha": "9337b27e5e9f0bd5a4b5bd2c424a1ba9955efcc3", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -23,7 +23,7 @@ pub use GenericArgs::*;\n pub use UnsafeSource::*;\n \n use crate::ptr::P;\n-use crate::token::{self, DelimToken};\n+use crate::token::{self, CommentKind, DelimToken};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -2365,7 +2365,7 @@ pub enum AttrKind {\n     /// A doc comment (e.g. `/// ...`, `//! ...`, `/** ... */`, `/*! ... */`).\n     /// Doc attributes (e.g. `#[doc=\"...\"]`) are represented with the `Normal`\n     /// variant (which is much less compact and thus more expensive).\n-    DocComment(Symbol),\n+    DocComment(CommentKind, Symbol),\n }\n \n /// `TraitRef`s appear in impls."}, {"sha": "847d126b3efc02a1843cfa6b3a2013edcb4946b5", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -7,7 +7,7 @@ use crate::ast::{MacArgs, MacDelimiter, MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Path, PathSegment};\n use crate::mut_visit::visit_clobber;\n use crate::ptr::P;\n-use crate::token::{self, Token};\n+use crate::token::{self, CommentKind, Token};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use rustc_data_structures::sync::Lock;\n@@ -169,7 +169,7 @@ impl Attribute {\n     pub fn has_name(&self, name: Symbol) -> bool {\n         match self.kind {\n             AttrKind::Normal(ref item) => item.path == name,\n-            AttrKind::DocComment(_) => false,\n+            AttrKind::DocComment(..) => false,\n         }\n     }\n \n@@ -198,7 +198,7 @@ impl Attribute {\n                     None\n                 }\n             }\n-            AttrKind::DocComment(_) => None,\n+            AttrKind::DocComment(..) => None,\n         }\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n@@ -218,7 +218,7 @@ impl Attribute {\n                 Some(MetaItem { kind: MetaItemKind::List(list), .. }) => Some(list),\n                 _ => None,\n             },\n-            AttrKind::DocComment(_) => None,\n+            AttrKind::DocComment(..) => None,\n         }\n     }\n \n@@ -314,13 +314,13 @@ impl Attribute {\n     pub fn is_doc_comment(&self) -> bool {\n         match self.kind {\n             AttrKind::Normal(_) => false,\n-            AttrKind::DocComment(_) => true,\n+            AttrKind::DocComment(..) => true,\n         }\n     }\n \n     pub fn doc_str(&self) -> Option<Symbol> {\n         match self.kind {\n-            AttrKind::DocComment(symbol) => Some(symbol),\n+            AttrKind::DocComment(.., data) => Some(data),\n             AttrKind::Normal(ref item) if item.path == sym::doc => {\n                 item.meta(self.span).and_then(|meta| meta.value_str())\n             }\n@@ -331,14 +331,14 @@ impl Attribute {\n     pub fn get_normal_item(&self) -> &AttrItem {\n         match self.kind {\n             AttrKind::Normal(ref item) => item,\n-            AttrKind::DocComment(_) => panic!(\"unexpected doc comment\"),\n+            AttrKind::DocComment(..) => panic!(\"unexpected doc comment\"),\n         }\n     }\n \n     pub fn unwrap_normal_item(self) -> AttrItem {\n         match self.kind {\n             AttrKind::Normal(item) => item,\n-            AttrKind::DocComment(_) => panic!(\"unexpected doc comment\"),\n+            AttrKind::DocComment(..) => panic!(\"unexpected doc comment\"),\n         }\n     }\n \n@@ -405,8 +405,13 @@ pub fn mk_attr_outer(item: MetaItem) -> Attribute {\n     mk_attr(AttrStyle::Outer, item.path, item.kind.mac_args(item.span), item.span)\n }\n \n-pub fn mk_doc_comment(style: AttrStyle, comment: Symbol, span: Span) -> Attribute {\n-    Attribute { kind: AttrKind::DocComment(comment), id: mk_attr_id(), style, span }\n+pub fn mk_doc_comment(\n+    comment_kind: CommentKind,\n+    style: AttrStyle,\n+    data: Symbol,\n+    span: Span,\n+) -> Attribute {\n+    Attribute { kind: AttrKind::DocComment(comment_kind, data), id: mk_attr_id(), style, span }\n }\n \n pub fn list_contains_name(items: &[NestedMetaItem], name: Symbol) -> bool {"}, {"sha": "df6e8218f6c3ac5201a32614248c38bbe7b68061", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -582,7 +582,7 @@ pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n             vis.visit_path(path);\n             visit_mac_args(args, vis);\n         }\n-        AttrKind::DocComment(_) => {}\n+        AttrKind::DocComment(..) => {}\n     }\n     vis.visit_span(span);\n }"}, {"sha": "bcce881ed48c5deef7423eb8bfa4a8b082c5e1b8", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -17,6 +17,12 @@ use rustc_span::{self, Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::{fmt, mem};\n \n+#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n+pub enum CommentKind {\n+    Line,\n+    Block,\n+}\n+\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n #[derive(HashStable_Generic)]\n pub enum BinOpToken {\n@@ -238,9 +244,10 @@ pub enum TokenKind {\n \n     Interpolated(Lrc<Nonterminal>),\n \n-    // Can be expanded into several tokens.\n-    /// A doc comment.\n-    DocComment(Symbol),\n+    /// A doc comment token.\n+    /// `Symbol` is the doc comment's data excluding its \"quotes\" (`///`, `/**`, etc)\n+    /// similarly to symbols in string literal tokens.\n+    DocComment(CommentKind, ast::AttrStyle, Symbol),\n \n     // Junk. These carry no data because we don't really care about the data\n     // they *would* carry, and don't really want to allocate a new ident for"}, {"sha": "a73891db160de9739222c96330d032732e828a3d", "filename": "src/librustc_ast/util/comments.rs", "status": "modified", "additions": 57, "deletions": 63, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -1,11 +1,7 @@\n-pub use CommentStyle::*;\n-\n-use crate::ast;\n+use crate::ast::AttrStyle;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, CharPos, FileName, Pos, Symbol};\n \n-use log::debug;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -28,43 +24,48 @@ pub struct Comment {\n     pub pos: BytePos,\n }\n \n-pub fn is_line_doc_comment(s: &str) -> bool {\n-    let res = (s.starts_with(\"///\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'/')\n-        || s.starts_with(\"//!\");\n-    debug!(\"is {:?} a doc comment? {}\", s, res);\n-    res\n-}\n-\n-pub fn is_block_doc_comment(s: &str) -> bool {\n-    // Prevent `/**/` from being parsed as a doc comment\n-    let res = ((s.starts_with(\"/**\") && *s.as_bytes().get(3).unwrap_or(&b' ') != b'*')\n-        || s.starts_with(\"/*!\"))\n-        && s.len() >= 5;\n-    debug!(\"is {:?} a doc comment? {}\", s, res);\n-    res\n-}\n-\n-// FIXME(#64197): Try to privatize this again.\n-pub fn is_doc_comment(s: &str) -> bool {\n-    (s.starts_with(\"///\") && is_line_doc_comment(s))\n-        || s.starts_with(\"//!\")\n-        || (s.starts_with(\"/**\") && is_block_doc_comment(s))\n-        || s.starts_with(\"/*!\")\n+/// For a full line comment string returns its doc comment style if it's a doc comment\n+/// and returns `None` if it's a regular comment.\n+pub fn line_doc_comment_style(line_comment: &str) -> Option<AttrStyle> {\n+    let line_comment = line_comment.as_bytes();\n+    assert!(line_comment.starts_with(b\"//\"));\n+    match line_comment.get(2) {\n+        // `//!` is an inner line doc comment.\n+        Some(b'!') => Some(AttrStyle::Inner),\n+        Some(b'/') => match line_comment.get(3) {\n+            // `////` (more than 3 slashes) is not considered a doc comment.\n+            Some(b'/') => None,\n+            // Otherwise `///` is an outer line doc comment.\n+            _ => Some(AttrStyle::Outer),\n+        },\n+        _ => None,\n+    }\n }\n \n-pub fn doc_comment_style(comment: Symbol) -> ast::AttrStyle {\n-    let comment = &comment.as_str();\n-    assert!(is_doc_comment(comment));\n-    if comment.starts_with(\"//!\") || comment.starts_with(\"/*!\") {\n-        ast::AttrStyle::Inner\n-    } else {\n-        ast::AttrStyle::Outer\n+/// For a full block comment string returns its doc comment style if it's a doc comment\n+/// and returns `None` if it's a regular comment.\n+pub fn block_doc_comment_style(block_comment: &str, terminated: bool) -> Option<AttrStyle> {\n+    let block_comment = block_comment.as_bytes();\n+    assert!(block_comment.starts_with(b\"/*\"));\n+    assert!(!terminated || block_comment.ends_with(b\"*/\"));\n+    match block_comment.get(2) {\n+        // `/*!` is an inner block doc comment.\n+        Some(b'!') => Some(AttrStyle::Inner),\n+        Some(b'*') => match block_comment.get(3) {\n+            // `/***` (more than 2 stars) is not considered a doc comment.\n+            Some(b'*') => None,\n+            // `/**/` is not considered a doc comment.\n+            Some(b'/') if block_comment.len() == 4 => None,\n+            // Otherwise `/**` is an outer block doc comment.\n+            _ => Some(AttrStyle::Outer),\n+        },\n+        _ => None,\n     }\n }\n \n-pub fn strip_doc_comment_decoration(comment: Symbol) -> String {\n-    let comment = &comment.as_str();\n-\n+/// Makes a doc string more presentable to users.\n+/// Used by rustdoc and perhaps other tools, but not by rustc.\n+pub fn beautify_doc_string(data: Symbol) -> String {\n     /// remove whitespace-only lines from the start/end of lines\n     fn vertical_trim(lines: Vec<String>) -> Vec<String> {\n         let mut i = 0;\n@@ -126,26 +127,15 @@ pub fn strip_doc_comment_decoration(comment: Symbol) -> String {\n         }\n     }\n \n-    // one-line comments lose their prefix\n-    const ONELINERS: &[&str] = &[\"///!\", \"///\", \"//!\", \"//\"];\n-\n-    for prefix in ONELINERS {\n-        if comment.starts_with(*prefix) {\n-            return (&comment[prefix.len()..]).to_string();\n-        }\n-    }\n-\n-    if comment.starts_with(\"/*\") {\n-        let lines =\n-            comment[3..comment.len() - 2].lines().map(|s| s.to_string()).collect::<Vec<String>>();\n-\n+    let data = data.as_str();\n+    if data.contains('\\n') {\n+        let lines = data.lines().map(|s| s.to_string()).collect::<Vec<String>>();\n         let lines = vertical_trim(lines);\n         let lines = horizontal_trim(lines);\n-\n-        return lines.join(\"\\n\");\n+        lines.join(\"\\n\")\n+    } else {\n+        data.to_string()\n     }\n-\n-    panic!(\"not a doc-comment: {}\", comment);\n }\n \n /// Returns `None` if the first `col` chars of `s` contain a non-whitespace char.\n@@ -203,7 +193,7 @@ pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comme\n \n     if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {\n         comments.push(Comment {\n-            style: Isolated,\n+            style: CommentStyle::Isolated,\n             lines: vec![text[..shebang_len].to_string()],\n             pos: start_bpos,\n         });\n@@ -219,23 +209,23 @@ pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comme\n                     while let Some(next_newline) = &token_text[idx + 1..].find('\\n') {\n                         idx = idx + 1 + next_newline;\n                         comments.push(Comment {\n-                            style: BlankLine,\n+                            style: CommentStyle::BlankLine,\n                             lines: vec![],\n                             pos: start_bpos + BytePos((pos + idx) as u32),\n                         });\n                     }\n                 }\n             }\n-            rustc_lexer::TokenKind::BlockComment { terminated: _ } => {\n-                if !is_block_doc_comment(token_text) {\n+            rustc_lexer::TokenKind::BlockComment { terminated } => {\n+                if block_doc_comment_style(token_text, terminated).is_none() {\n                     let code_to_the_right = match text[pos + token.len..].chars().next() {\n                         Some('\\r' | '\\n') => false,\n                         _ => true,\n                     };\n                     let style = match (code_to_the_left, code_to_the_right) {\n-                        (_, true) => Mixed,\n-                        (false, false) => Isolated,\n-                        (true, false) => Trailing,\n+                        (_, true) => CommentStyle::Mixed,\n+                        (false, false) => CommentStyle::Isolated,\n+                        (true, false) => CommentStyle::Trailing,\n                     };\n \n                     // Count the number of chars since the start of the line by rescanning.\n@@ -249,9 +239,13 @@ pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comme\n                 }\n             }\n             rustc_lexer::TokenKind::LineComment => {\n-                if !is_doc_comment(token_text) {\n+                if line_doc_comment_style(token_text).is_none() {\n                     comments.push(Comment {\n-                        style: if code_to_the_left { Trailing } else { Isolated },\n+                        style: if code_to_the_left {\n+                            CommentStyle::Trailing\n+                        } else {\n+                            CommentStyle::Isolated\n+                        },\n                         lines: vec![token_text.to_string()],\n                         pos: start_bpos + BytePos(pos as u32),\n                     })"}, {"sha": "e95365d833742e87f4de2bd2a56fcb4fa8f6843c", "filename": "src/librustc_ast/util/comments/tests.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Futil%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Futil%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments%2Ftests.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -1,58 +1,50 @@\n use super::*;\n use crate::with_default_session_globals;\n \n+#[test]\n+fn line_doc_comments() {\n+    assert!(line_doc_comment_style(\"///\").is_some());\n+    assert!(line_doc_comment_style(\"/// blah\").is_some());\n+    assert!(line_doc_comment_style(\"////\").is_none());\n+}\n+\n #[test]\n fn test_block_doc_comment_1() {\n     with_default_session_globals(|| {\n-        let comment = \"/**\\n * Test \\n **  Test\\n *   Test\\n*/\";\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(comment));\n+        let comment = \"\\n * Test \\n **  Test\\n *   Test\\n\";\n+        let stripped = beautify_doc_string(Symbol::intern(comment));\n         assert_eq!(stripped, \" Test \\n*  Test\\n   Test\");\n     })\n }\n \n #[test]\n fn test_block_doc_comment_2() {\n     with_default_session_globals(|| {\n-        let comment = \"/**\\n * Test\\n *  Test\\n*/\";\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(comment));\n+        let comment = \"\\n * Test\\n *  Test\\n\";\n+        let stripped = beautify_doc_string(Symbol::intern(comment));\n         assert_eq!(stripped, \" Test\\n  Test\");\n     })\n }\n \n #[test]\n fn test_block_doc_comment_3() {\n     with_default_session_globals(|| {\n-        let comment = \"/**\\n let a: *i32;\\n *a = 5;\\n*/\";\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(comment));\n+        let comment = \"\\n let a: *i32;\\n *a = 5;\\n\";\n+        let stripped = beautify_doc_string(Symbol::intern(comment));\n         assert_eq!(stripped, \" let a: *i32;\\n *a = 5;\");\n     })\n }\n \n-#[test]\n-fn test_block_doc_comment_4() {\n-    with_default_session_globals(|| {\n-        let comment = \"/*******************\\n test\\n *********************/\";\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(comment));\n-        assert_eq!(stripped, \" test\");\n-    })\n-}\n-\n #[test]\n fn test_line_doc_comment() {\n     with_default_session_globals(|| {\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"/// test\"));\n-        assert_eq!(stripped, \" test\");\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"///! test\"));\n-        assert_eq!(stripped, \" test\");\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"// test\"));\n+        let stripped = beautify_doc_string(Symbol::intern(\" test\"));\n         assert_eq!(stripped, \" test\");\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"// test\"));\n-        assert_eq!(stripped, \" test\");\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"///test\"));\n-        assert_eq!(stripped, \"test\");\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"///!test\"));\n-        assert_eq!(stripped, \"test\");\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"//test\"));\n+        let stripped = beautify_doc_string(Symbol::intern(\"! test\"));\n+        assert_eq!(stripped, \"! test\");\n+        let stripped = beautify_doc_string(Symbol::intern(\"test\"));\n         assert_eq!(stripped, \"test\");\n+        let stripped = beautify_doc_string(Symbol::intern(\"!test\"));\n+        assert_eq!(stripped, \"!test\");\n     })\n }"}, {"sha": "2c3d1e97df97574bb932723c861c6dd7c603a94e", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -880,7 +880,7 @@ pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {\n pub fn walk_attribute<'a, V: Visitor<'a>>(visitor: &mut V, attr: &'a Attribute) {\n     match attr.kind {\n         AttrKind::Normal(ref item) => walk_mac_args(visitor, &item.args),\n-        AttrKind::DocComment(_) => {}\n+        AttrKind::DocComment(..) => {}\n     }\n }\n "}, {"sha": "077a07c1bfa1514230b981a610637a98e46b1f80", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -981,7 +981,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 path: item.path.clone(),\n                 args: self.lower_mac_args(&item.args),\n             }),\n-            AttrKind::DocComment(comment) => AttrKind::DocComment(comment),\n+            AttrKind::DocComment(comment_kind, data) => AttrKind::DocComment(comment_kind, data),\n         };\n \n         Attribute { kind, id: attr.id, style: attr.style, span: attr.span }"}, {"sha": "9d9ca78de558890520e6ffd931e22a53fbe8a603", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -8,10 +8,11 @@ use rustc_ast::ast::{InlineAsmOperand, InlineAsmRegOrRegClass};\n use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n+use rustc_ast::token::{self, BinOpToken, CommentKind, DelimToken, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_ast::util::classify;\n+use rustc_ast::util::comments::{gather_comments, Comment, CommentStyle};\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n-use rustc_ast::util::{classify, comments};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, IdentPrinter, Symbol};\n@@ -50,27 +51,27 @@ impl PpAnn for NoAnn {}\n \n pub struct Comments<'a> {\n     sm: &'a SourceMap,\n-    comments: Vec<comments::Comment>,\n+    comments: Vec<Comment>,\n     current: usize,\n }\n \n impl<'a> Comments<'a> {\n     pub fn new(sm: &'a SourceMap, filename: FileName, input: String) -> Comments<'a> {\n-        let comments = comments::gather_comments(sm, filename, input);\n+        let comments = gather_comments(sm, filename, input);\n         Comments { sm, comments, current: 0 }\n     }\n \n-    pub fn next(&self) -> Option<comments::Comment> {\n+    pub fn next(&self) -> Option<Comment> {\n         self.comments.get(self.current).cloned()\n     }\n \n     pub fn trailing_comment(\n         &mut self,\n         span: rustc_span::Span,\n         next_pos: Option<BytePos>,\n-    ) -> Option<comments::Comment> {\n+    ) -> Option<Comment> {\n         if let Some(cmnt) = self.next() {\n-            if cmnt.style != comments::Trailing {\n+            if cmnt.style != CommentStyle::Trailing {\n                 return None;\n             }\n             let span_line = self.sm.lookup_char_pos(span.hi());\n@@ -152,8 +153,8 @@ pub fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n // and also addresses some specific regressions described in #63896 and #73345.\n fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {\n     if let TokenTree::Token(token) = prev {\n-        if let token::DocComment(s) = token.kind {\n-            return !s.as_str().starts_with(\"//\");\n+        if let token::DocComment(comment_kind, ..) = token.kind {\n+            return comment_kind != CommentKind::Line;\n         }\n     }\n     match tt {\n@@ -194,6 +195,19 @@ fn binop_to_string(op: BinOpToken) -> &'static str {\n     }\n }\n \n+fn doc_comment_to_string(\n+    comment_kind: CommentKind,\n+    attr_style: ast::AttrStyle,\n+    data: Symbol,\n+) -> String {\n+    match (comment_kind, attr_style) {\n+        (CommentKind::Line, ast::AttrStyle::Outer) => format!(\"///{}\", data),\n+        (CommentKind::Line, ast::AttrStyle::Inner) => format!(\"//!{}\", data),\n+        (CommentKind::Block, ast::AttrStyle::Outer) => format!(\"/**{}*/\", data),\n+        (CommentKind::Block, ast::AttrStyle::Inner) => format!(\"/*!{}*/\", data),\n+    }\n+}\n+\n pub fn literal_to_string(lit: token::Lit) -> String {\n     let token::Lit { kind, symbol, suffix } = lit;\n     let mut out = match kind {\n@@ -271,7 +285,9 @@ fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>)\n         token::Lifetime(s) => s.to_string(),\n \n         /* Other */\n-        token::DocComment(s) => s.to_string(),\n+        token::DocComment(comment_kind, attr_style, data) => {\n+            doc_comment_to_string(comment_kind, attr_style, data)\n+        }\n         token::Eof => \"<eof>\".to_string(),\n         token::Whitespace => \" \".to_string(),\n         token::Comment => \"/* */\".to_string(),\n@@ -447,9 +463,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         }\n     }\n \n-    fn print_comment(&mut self, cmnt: &comments::Comment) {\n+    fn print_comment(&mut self, cmnt: &Comment) {\n         match cmnt.style {\n-            comments::Mixed => {\n+            CommentStyle::Mixed => {\n                 if !self.is_beginning_of_line() {\n                     self.zerobreak();\n                 }\n@@ -468,7 +484,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                 }\n                 self.zerobreak()\n             }\n-            comments::Isolated => {\n+            CommentStyle::Isolated => {\n                 self.hardbreak_if_not_bol();\n                 for line in &cmnt.lines {\n                     // Don't print empty lines because they will end up as trailing\n@@ -479,7 +495,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     self.hardbreak();\n                 }\n             }\n-            comments::Trailing => {\n+            CommentStyle::Trailing => {\n                 if !self.is_beginning_of_line() {\n                     self.word(\" \");\n                 }\n@@ -497,7 +513,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     self.end();\n                 }\n             }\n-            comments::BlankLine => {\n+            CommentStyle::BlankLine => {\n                 // We need to do at least one, possibly two hardbreaks.\n                 let twice = match self.last_token() {\n                     pp::Token::String(s) => \";\" == s,\n@@ -516,7 +532,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         }\n     }\n \n-    fn next_comment(&mut self) -> Option<comments::Comment> {\n+    fn next_comment(&mut self) -> Option<Comment> {\n         self.comments().as_mut().and_then(|c| c.next())\n     }\n \n@@ -599,8 +615,8 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                 self.print_attr_item(&item, attr.span);\n                 self.word(\"]\");\n             }\n-            ast::AttrKind::DocComment(comment) => {\n-                self.word(comment.to_string());\n+            ast::AttrKind::DocComment(comment_kind, data) => {\n+                self.word(doc_comment_to_string(comment_kind, attr.style, data));\n                 self.hardbreak()\n             }\n         }"}, {"sha": "0b51abf385fd93abb4ecc92b457d413fd8771099", "filename": "src/librustc_expand/parse/lexer/tests.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -1,5 +1,5 @@\n-use rustc_ast::token::{self, Token, TokenKind};\n-use rustc_ast::util::comments::is_doc_comment;\n+use rustc_ast::ast::AttrStyle;\n+use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n use rustc_ast::with_default_session_globals;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{emitter::EmitterWriter, Handler};\n@@ -223,13 +223,6 @@ fn literal_suffixes() {\n     })\n }\n \n-#[test]\n-fn line_doc_comments() {\n-    assert!(is_doc_comment(\"///\"));\n-    assert!(is_doc_comment(\"/// blah\"));\n-    assert!(!is_doc_comment(\"////\"));\n-}\n-\n #[test]\n fn nested_block_comments() {\n     with_default_session_globals(|| {\n@@ -251,6 +244,9 @@ fn crlf_comments() {\n         assert_eq!(comment.kind, token::Comment);\n         assert_eq!((comment.span.lo(), comment.span.hi()), (BytePos(0), BytePos(7)));\n         assert_eq!(lexer.next_token(), token::Whitespace);\n-        assert_eq!(lexer.next_token(), token::DocComment(Symbol::intern(\"/// test\")));\n+        assert_eq!(\n+            lexer.next_token(),\n+            token::DocComment(CommentKind::Line, AttrStyle::Outer, Symbol::intern(\" test\"))\n+        );\n     })\n }"}, {"sha": "d6301c8a82ee869186afdb319e4ba08e69cc8876", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -244,20 +244,20 @@ fn crlf_doc_comments() {\n         let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name_1, source, &sess).unwrap().unwrap();\n         let doc = item.attrs.iter().filter_map(|at| at.doc_str()).next().unwrap();\n-        assert_eq!(doc.as_str(), \"/// doc comment\");\n+        assert_eq!(doc.as_str(), \" doc comment\");\n \n         let name_2 = FileName::Custom(\"crlf_source_2\".to_string());\n         let source = \"/// doc comment\\r\\n/// line 2\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name_2, source, &sess).unwrap().unwrap();\n         let docs = item.attrs.iter().filter_map(|at| at.doc_str()).collect::<Vec<_>>();\n-        let b: &[_] = &[Symbol::intern(\"/// doc comment\"), Symbol::intern(\"/// line 2\")];\n+        let b: &[_] = &[Symbol::intern(\" doc comment\"), Symbol::intern(\" line 2\")];\n         assert_eq!(&docs[..], b);\n \n         let name_3 = FileName::Custom(\"clrf_source_3\".to_string());\n         let source = \"/** doc comment\\r\\n *  with CRLF */\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name_3, source, &sess).unwrap().unwrap();\n         let doc = item.attrs.iter().filter_map(|at| at.doc_str()).next().unwrap();\n-        assert_eq!(doc.as_str(), \"/** doc comment\\n *  with CRLF */\");\n+        assert_eq!(doc.as_str(), \" doc comment\\n *  with CRLF \");\n     });\n }\n "}, {"sha": "005db35da7a323fbea5fe4a262817878a2522f08", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -3,7 +3,6 @@ use crate::base::ExtCtxt;\n use rustc_ast::ast;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n-use rustc_ast::util::comments;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::Diagnostic;\n@@ -148,11 +147,9 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n                 tt!(Punct::new('\\'', true))\n             }\n             Literal(lit) => tt!(Literal { lit }),\n-            DocComment(c) => {\n-                let style = comments::doc_comment_style(c);\n-                let stripped = comments::strip_doc_comment_decoration(c);\n+            DocComment(_, attr_style, data) => {\n                 let mut escaped = String::new();\n-                for ch in stripped.chars() {\n+                for ch in data.as_str().chars() {\n                     escaped.extend(ch.escape_debug());\n                 }\n                 let stream = vec![\n@@ -169,7 +166,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n                     span: DelimSpan::from_single(span),\n                     flatten: false,\n                 }));\n-                if style == ast::AttrStyle::Inner {\n+                if attr_style == ast::AttrStyle::Inner {\n                     stack.push(tt!(Punct::new('!', false)));\n                 }\n                 tt!(Punct::new('#', false))"}, {"sha": "c3a79660eb9b9fb15e2d6dc3c00dc532673a1771", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::token::{self, Token, TokenKind};\n+use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n use rustc_ast::util::comments;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, FatalError};\n@@ -170,22 +170,20 @@ impl<'a> StringReader<'a> {\n         match token {\n             rustc_lexer::TokenKind::LineComment => {\n                 let string = self.str_from(start);\n-                // comments with only more \"/\"s are not doc comments\n-                if comments::is_line_doc_comment(string) {\n+                if let Some(attr_style) = comments::line_doc_comment_style(string) {\n                     self.forbid_bare_cr(start, string, \"bare CR not allowed in doc-comment\");\n-                    token::DocComment(Symbol::intern(string))\n+                    // Opening delimiter of the length 3 is not included into the symbol.\n+                    token::DocComment(CommentKind::Line, attr_style, Symbol::intern(&string[3..]))\n                 } else {\n                     token::Comment\n                 }\n             }\n             rustc_lexer::TokenKind::BlockComment { terminated } => {\n                 let string = self.str_from(start);\n-                // block comments starting with \"/**\" or \"/*!\" are doc-comments\n-                // but comments with only \"*\"s between two \"/\"s are not\n-                let is_doc_comment = comments::is_block_doc_comment(string);\n+                let attr_style = comments::block_doc_comment_style(string, terminated);\n \n                 if !terminated {\n-                    let msg = if is_doc_comment {\n+                    let msg = if attr_style.is_some() {\n                         \"unterminated block doc-comment\"\n                     } else {\n                         \"unterminated block comment\"\n@@ -202,9 +200,15 @@ impl<'a> StringReader<'a> {\n                     FatalError.raise();\n                 }\n \n-                if is_doc_comment {\n+                if let Some(attr_style) = attr_style {\n                     self.forbid_bare_cr(start, string, \"bare CR not allowed in block doc-comment\");\n-                    token::DocComment(Symbol::intern(string))\n+                    // Opening delimiter of the length 3 and closing delimiter of the length 2\n+                    // are not included into the symbol.\n+                    token::DocComment(\n+                        CommentKind::Block,\n+                        attr_style,\n+                        Symbol::intern(&string[3..string.len() - if terminated { 2 } else { 0 }]),\n+                    )\n                 } else {\n                     token::Comment\n                 }"}, {"sha": "723e4333790ae002b108b35591d9fb78d3b81788", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -486,7 +486,9 @@ fn token_probably_equal_for_proc_macro(first: &Token, other: &Token) -> bool {\n \n         (&OpenDelim(a), &OpenDelim(b)) | (&CloseDelim(a), &CloseDelim(b)) => a == b,\n \n-        (&DocComment(a), &DocComment(b)) | (&Shebang(a), &Shebang(b)) => a == b,\n+        (&DocComment(a1, a2, a3), &DocComment(b1, b2, b3)) => a1 == b1 && a2 == b2 && a3 == b3,\n+\n+        (&Shebang(a), &Shebang(b)) => a == b,\n \n         (&Literal(a), &Literal(b)) => a == b,\n \n@@ -524,7 +526,7 @@ fn prepend_attrs(\n \n         let item = match attr.kind {\n             ast::AttrKind::Normal(ref item) => item,\n-            ast::AttrKind::DocComment(_) => {\n+            ast::AttrKind::DocComment(..) => {\n                 let stream = parse_stream_from_source_str(macro_filename, source, sess, Some(span));\n                 builder.push(stream);\n                 continue;"}, {"sha": "b6a8ee71beb0cc029e916498e814b295a78460dd", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -2,10 +2,9 @@ use super::{Parser, PathStyle};\n use rustc_ast::ast;\n use rustc_ast::attr;\n use rustc_ast::token::{self, Nonterminal};\n-use rustc_ast::util::comments;\n use rustc_ast_pretty::pprust;\n use rustc_errors::{error_code, PResult};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n \n use log::debug;\n \n@@ -47,8 +46,8 @@ impl<'a> Parser<'a> {\n                 let attr = self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n                 attrs.push(attr);\n                 just_parsed_doc_comment = false;\n-            } else if let token::DocComment(s) = self.token.kind {\n-                let attr = self.mk_doc_comment(s);\n+            } else if let token::DocComment(comment_kind, attr_style, data) = self.token.kind {\n+                let attr = attr::mk_doc_comment(comment_kind, attr_style, data, self.token.span);\n                 if attr.style != ast::AttrStyle::Outer {\n                     self.sess\n                         .span_diagnostic\n@@ -73,10 +72,6 @@ impl<'a> Parser<'a> {\n         Ok(attrs)\n     }\n \n-    fn mk_doc_comment(&self, s: Symbol) -> ast::Attribute {\n-        attr::mk_doc_comment(comments::doc_comment_style(s), s, self.token.span)\n-    }\n-\n     /// Matches `attribute = # ! [ meta_item ]`.\n     ///\n     /// If `permit_inner` is `true`, then a leading `!` indicates an inner\n@@ -184,9 +179,9 @@ impl<'a> Parser<'a> {\n                 let attr = self.parse_attribute(true)?;\n                 assert_eq!(attr.style, ast::AttrStyle::Inner);\n                 attrs.push(attr);\n-            } else if let token::DocComment(s) = self.token.kind {\n+            } else if let token::DocComment(comment_kind, attr_style, data) = self.token.kind {\n                 // We need to get the position of this token before we bump.\n-                let attr = self.mk_doc_comment(s);\n+                let attr = attr::mk_doc_comment(comment_kind, attr_style, data, self.token.span);\n                 if attr.style == ast::AttrStyle::Inner {\n                     attrs.push(attr);\n                     self.bump();"}, {"sha": "2854356ab0fc6cd89582b6308bebf60d91d1bf98", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -1419,7 +1419,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn eat_incorrect_doc_comment_for_param_type(&mut self) {\n-        if let token::DocComment(_) = self.token.kind {\n+        if let token::DocComment(..) = self.token.kind {\n             self.struct_span_err(\n                 self.token.span,\n                 \"documentation comments cannot be applied to a function parameter's type\","}, {"sha": "10d214e52abdbdda46f4b6df3de9508b5db0abcb", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -610,7 +610,7 @@ impl<'a> Parser<'a> {\n \n     /// Recover on a doc comment before `}`.\n     fn recover_doc_comment_before_brace(&mut self) -> bool {\n-        if let token::DocComment(_) = self.token.kind {\n+        if let token::DocComment(..) = self.token.kind {\n             if self.look_ahead(1, |tok| tok == &token::CloseDelim(token::Brace)) {\n                 struct_span_err!(\n                     self.diagnostic(),\n@@ -1231,7 +1231,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n             }\n             token::CloseDelim(token::Brace) => {}\n-            token::DocComment(_) => {\n+            token::DocComment(..) => {\n                 let previous_span = self.prev_token.span;\n                 let mut err = self.span_fatal_err(self.token.span, Error::UselessDocComment);\n                 self.bump(); // consume the doc comment"}, {"sha": "ededfc43669da29b587b8b2330c48a426592d816", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -22,7 +22,6 @@ use rustc_ast::ast::{\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, DelimToken, Token, TokenKind};\n use rustc_ast::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n-use rustc_ast::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_session::parse::ParseSess;\n@@ -209,18 +208,18 @@ impl TokenCursor {\n     }\n \n     fn next_desugared(&mut self) -> Token {\n-        let (name, sp) = match self.next() {\n-            Token { kind: token::DocComment(name), span } => (name, span),\n+        let (data, attr_style, sp) = match self.next() {\n+            Token { kind: token::DocComment(_, attr_style, data), span } => {\n+                (data, attr_style, span)\n+            }\n             tok => return tok,\n         };\n \n-        let stripped = strip_doc_comment_decoration(name);\n-\n         // Searches for the occurrences of `\"#*` and returns the minimum number of `#`s\n         // required to wrap the text.\n         let mut num_of_hashes = 0;\n         let mut count = 0;\n-        for ch in stripped.chars() {\n+        for ch in data.as_str().chars() {\n             count = match ch {\n                 '\"' => 1,\n                 '#' if count > 0 => count + 1,\n@@ -236,10 +235,7 @@ impl TokenCursor {\n             [\n                 TokenTree::token(token::Ident(sym::doc, false), sp),\n                 TokenTree::token(token::Eq, sp),\n-                TokenTree::token(\n-                    TokenKind::lit(token::StrRaw(num_of_hashes), Symbol::intern(&stripped), None),\n-                    sp,\n-                ),\n+                TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),\n             ]\n             .iter()\n             .cloned()\n@@ -251,7 +247,7 @@ impl TokenCursor {\n             TokenCursorFrame::new(\n                 delim_span,\n                 token::NoDelim,\n-                &if doc_comment_style(name) == AttrStyle::Inner {\n+                &if attr_style == AttrStyle::Inner {\n                     [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]\n                         .iter()\n                         .cloned()"}, {"sha": "d854835a02475fe0e1be8630b846e9d4232ca014", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -10,7 +10,7 @@ mod span_utils;\n mod sig;\n \n use rustc_ast::ast::{self};\n-use rustc_ast::util::comments::strip_doc_comment_decoration;\n+use rustc_ast::util::comments::beautify_doc_string;\n use rustc_ast_pretty::pprust::attribute_to_string;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind as HirDefKind, Res};\n@@ -822,11 +822,8 @@ impl<'tcx> SaveContext<'tcx> {\n \n         for attr in attrs {\n             if let Some(val) = attr.doc_str() {\n-                if attr.is_doc_comment() {\n-                    result.push_str(&strip_doc_comment_decoration(val));\n-                } else {\n-                    result.push_str(&val.as_str());\n-                }\n+                // FIXME: Should save-analysis beautify doc strings itself or leave it to users?\n+                result.push_str(&beautify_doc_string(val));\n                 result.push('\\n');\n             } else if attr.check_name(sym::doc) {\n                 if let Some(meta_list) = attr.meta_item_list() {"}, {"sha": "44dd329d9ced3d4ff5a7900e71c94752b1eb9495", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -10,7 +10,7 @@ use std::{slice, vec};\n \n use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::attr;\n-use rustc_ast::util::comments::strip_doc_comment_decoration;\n+use rustc_ast::util::comments::beautify_doc_string;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -506,10 +506,11 @@ impl Attributes {\n             .iter()\n             .filter_map(|attr| {\n                 if let Some(value) = attr.doc_str() {\n-                    let (value, mk_fragment): (_, fn(_, _, _) -> _) = if attr.is_doc_comment() {\n-                        (strip_doc_comment_decoration(value), DocFragment::SugaredDoc)\n+                    let value = beautify_doc_string(value);\n+                    let mk_fragment: fn(_, _, _) -> _ = if attr.is_doc_comment() {\n+                        DocFragment::SugaredDoc\n                     } else {\n-                        (value.to_string(), DocFragment::RawDoc)\n+                        DocFragment::RawDoc\n                     };\n \n                     let line = doc_line;"}, {"sha": "c2724ae18066a2bad5d6f154783198032d03f2b6", "filename": "src/test/ui/proc-macro/doc-comment-preserved.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+// aux-build:test-macros.rs\n+\n+// Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n+// normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n+// normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+print_bang! {\n+\n+/**\n+*******\n+* DOC *\n+* DOC *\n+* DOC *\n+*******\n+*/\n+pub struct S;\n+\n+}\n+\n+fn main() {}"}, {"sha": "f7904536a76131d7b8a5fca777eeb61a9dfdbfd7", "filename": "src/test/ui/proc-macro/doc-comment-preserved.stdout", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.stdout?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -0,0 +1,54 @@\n+PRINT-BANG INPUT (DISPLAY): /**\n+*******\n+* DOC *\n+* DOC *\n+* DOC *\n+*******\n+*/\n+ pub struct S ;\n+PRINT-BANG RE-COLLECTED (DISPLAY): #[doc = \"\\n*******\\n* DOC *\\n* DOC *\\n* DOC *\\n*******\\n\"] pub struct S ;\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: #0 bytes(LO..HI),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"doc\",\n+                span: #0 bytes(LO..HI),\n+            },\n+            Punct {\n+                ch: '=',\n+                spacing: Alone,\n+                span: #0 bytes(LO..HI),\n+            },\n+            Literal {\n+                kind: Str,\n+                symbol: \"\\n*******\\n* DOC *\\n* DOC *\\n* DOC *\\n*******\\n\",\n+                suffix: None,\n+                span: #0 bytes(LO..HI),\n+            },\n+        ],\n+        span: #0 bytes(LO..HI),\n+    },\n+    Ident {\n+        ident: \"pub\",\n+        span: #0 bytes(LO..HI),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: #0 bytes(LO..HI),\n+    },\n+    Ident {\n+        ident: \"S\",\n+        span: #0 bytes(LO..HI),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #0 bytes(LO..HI),\n+    },\n+]"}, {"sha": "6ce36fd2360e1e9569cb748e566a3b38ce57ef4a", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 36, "deletions": 45, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -2,6 +2,7 @@ use crate::utils::{implements_trait, is_entrypoint_fn, is_type_diagnostic_item,\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_ast::ast::{AttrKind, Attribute};\n+use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -249,62 +250,53 @@ fn lint_for_missing_headers<'tcx>(\n     }\n }\n \n-/// Cleanup documentation decoration (`///` and such).\n+/// Cleanup documentation decoration.\n ///\n /// We can't use `rustc_ast::attr::AttributeMethods::with_desugared_doc` or\n /// `rustc_ast::parse::lexer::comments::strip_doc_comment_decoration` because we\n /// need to keep track of\n /// the spans but this function is inspired from the later.\n #[allow(clippy::cast_possible_truncation)]\n #[must_use]\n-pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(usize, Span)>) {\n+pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span: Span) -> (String, Vec<(usize, Span)>) {\n     // one-line comments lose their prefix\n-    const ONELINERS: &[&str] = &[\"///!\", \"///\", \"//!\", \"//\"];\n-    for prefix in ONELINERS {\n-        if comment.starts_with(*prefix) {\n-            let doc = &comment[prefix.len()..];\n-            let mut doc = doc.to_owned();\n-            doc.push('\\n');\n-            return (\n-                doc.to_owned(),\n-                vec![(doc.len(), span.with_lo(span.lo() + BytePos(prefix.len() as u32)))],\n-            );\n-        }\n+    if comment_kind == CommentKind::Line {\n+        let mut doc = doc.to_owned();\n+        doc.push('\\n');\n+        let len = doc.len();\n+        // +3 skips the opening delimiter\n+        return (doc, vec![(len, span.with_lo(span.lo() + BytePos(3)))]);\n     }\n \n-    if comment.starts_with(\"/*\") {\n-        let doc = &comment[3..comment.len() - 2];\n-        let mut sizes = vec![];\n-        let mut contains_initial_stars = false;\n-        for line in doc.lines() {\n-            let offset = line.as_ptr() as usize - comment.as_ptr() as usize;\n-            debug_assert_eq!(offset as u32 as usize, offset);\n-            contains_initial_stars |= line.trim_start().starts_with('*');\n-            // +1 for the newline\n-            sizes.push((line.len() + 1, span.with_lo(span.lo() + BytePos(offset as u32))));\n-        }\n-        if !contains_initial_stars {\n-            return (doc.to_string(), sizes);\n-        }\n-        // remove the initial '*'s if any\n-        let mut no_stars = String::with_capacity(doc.len());\n-        for line in doc.lines() {\n-            let mut chars = line.chars();\n-            while let Some(c) = chars.next() {\n-                if c.is_whitespace() {\n-                    no_stars.push(c);\n-                } else {\n-                    no_stars.push(if c == '*' { ' ' } else { c });\n-                    break;\n-                }\n+    let mut sizes = vec![];\n+    let mut contains_initial_stars = false;\n+    for line in doc.lines() {\n+        let offset = line.as_ptr() as usize - doc.as_ptr() as usize;\n+        debug_assert_eq!(offset as u32 as usize, offset);\n+        contains_initial_stars |= line.trim_start().starts_with('*');\n+        // +1 adds the newline, +3 skips the opening delimiter\n+        sizes.push((line.len() + 1, span.with_lo(span.lo() + BytePos(3 + offset as u32))));\n+    }\n+    if !contains_initial_stars {\n+        return (doc.to_string(), sizes);\n+    }\n+    // remove the initial '*'s if any\n+    let mut no_stars = String::with_capacity(doc.len());\n+    for line in doc.lines() {\n+        let mut chars = line.chars();\n+        while let Some(c) = chars.next() {\n+            if c.is_whitespace() {\n+                no_stars.push(c);\n+            } else {\n+                no_stars.push(if c == '*' { ' ' } else { c });\n+                break;\n             }\n-            no_stars.push_str(chars.as_str());\n-            no_stars.push('\\n');\n         }\n-        return (no_stars, sizes);\n+        no_stars.push_str(chars.as_str());\n+        no_stars.push('\\n');\n     }\n \n-    panic!(\"not a doc-comment: {}\", comment);\n+    (no_stars, sizes)\n }\n \n #[derive(Copy, Clone)]\n@@ -318,9 +310,8 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n     let mut spans = vec![];\n \n     for attr in attrs {\n-        if let AttrKind::DocComment(ref comment) = attr.kind {\n-            let comment = comment.to_string();\n-            let (comment, current_spans) = strip_doc_comment_decoration(&comment, attr.span);\n+        if let AttrKind::DocComment(comment_kind, comment) = attr.kind {\n+            let (comment, current_spans) = strip_doc_comment_decoration(&comment.as_str(), comment_kind, attr.span);\n             spans.extend_from_slice(&current_spans);\n             doc.push_str(&comment);\n         } else if attr.has_name(sym!(doc)) {"}, {"sha": "74ccd9235de85d847daf593d4cc3a0018db586b1", "filename": "src/tools/clippy/clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -60,13 +60,14 @@ declare_lint_pass!(TabsInDocComments => [TABS_IN_DOC_COMMENTS]);\n \n impl TabsInDocComments {\n     fn warn_if_tabs_in_doc(cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n-        if let ast::AttrKind::DocComment(comment) = attr.kind {\n+        if let ast::AttrKind::DocComment(_, comment) = attr.kind {\n             let comment = comment.as_str();\n \n             for (lo, hi) in get_chunks_of_tabs(&comment) {\n+                // +3 skips the opening delimiter\n                 let new_span = Span::new(\n-                    attr.span.lo() + BytePos(lo),\n-                    attr.span.lo() + BytePos(hi),\n+                    attr.span.lo() + BytePos(3 + lo),\n+                    attr.span.lo() + BytePos(3 + hi),\n                     attr.span.ctxt(),\n                 );\n                 span_lint_and_sugg("}, {"sha": "ad02bc5fd8e7dba9d784c048e4edea729cc59cbb", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=64f99b4cfbf01c8fda1d4fe16e9b37b11096b7c3", "patch": "@@ -506,7 +506,7 @@ pub fn eq_attr(l: &Attribute, r: &Attribute) -> bool {\n     use AttrKind::*;\n     l.style == r.style\n         && match (&l.kind, &r.kind) {\n-            (DocComment(l), DocComment(r)) => l == r,\n+            (DocComment(l1, l2), DocComment(r1, r2)) => l1 == r1 && l2 == r2,\n             (Normal(l), Normal(r)) => eq_path(&l.path, &r.path) && eq_mac_args(&l.args, &r.args),\n             _ => false,\n         }"}]}