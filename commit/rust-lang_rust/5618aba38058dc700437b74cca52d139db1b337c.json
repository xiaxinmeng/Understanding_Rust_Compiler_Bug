{"sha": "5618aba38058dc700437b74cca52d139db1b337c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MThhYmEzODA1OGRjNzAwNDM3Yjc0Y2NhNTJkMTM5ZGIxYjMzN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-16T21:29:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-16T21:29:54Z"}, "message": "Auto merge of #44857 - toidiu:ak-44493-empty-predicate, r=nikomatsakis\n\n#44493 add structure for inferred_outlives_of\n\n#44493\n\n- add placeholder for the final implementation of inferred_outlives_of\n- add some placeholder tests", "tree": {"sha": "ca8e1aced5e75320e397fb18bfbf2d546b32b7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca8e1aced5e75320e397fb18bfbf2d546b32b7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5618aba38058dc700437b74cca52d139db1b337c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5618aba38058dc700437b74cca52d139db1b337c", "html_url": "https://github.com/rust-lang/rust/commit/5618aba38058dc700437b74cca52d139db1b337c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5618aba38058dc700437b74cca52d139db1b337c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e9527cf6f2d3749554d07a96fe14967f5470ef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9527cf6f2d3749554d07a96fe14967f5470ef6", "html_url": "https://github.com/rust-lang/rust/commit/4e9527cf6f2d3749554d07a96fe14967f5470ef6"}, {"sha": "98c6e0a02deb3b5efe1c06d1028502f45672a66e", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c6e0a02deb3b5efe1c06d1028502f45672a66e", "html_url": "https://github.com/rust-lang/rust/commit/98c6e0a02deb3b5efe1c06d1028502f45672a66e"}], "stats": {"total": 114, "additions": 113, "deletions": 1}, "files": [{"sha": "92bbb745bb2145327c88d38d6369a0f128e51253", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5618aba38058dc700437b74cca52d139db1b337c", "patch": "@@ -476,6 +476,7 @@ define_dep_nodes!( <'tcx>\n     [] TypeOfItem(DefId),\n     [] GenericsOfItem(DefId),\n     [] PredicatesOfItem(DefId),\n+    [] InferredOutlivesOf(DefId),\n     [] SuperPredicatesOfItem(DefId),\n     [] TraitDefOfItem(DefId),\n     [] AdtDefOfItem(DefId),"}, {"sha": "f54391ebb07eb42fa2db7ae81f5cf854e7a59db6", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=5618aba38058dc700437b74cca52d139db1b337c", "patch": "@@ -121,6 +121,9 @@ define_maps! { <'tcx>\n     /// (inferred) variance.\n     [] fn variances_of: ItemVariances(DefId) -> Rc<Vec<ty::Variance>>,\n \n+    /// Maps from def-id of a type to its (inferred) outlives.\n+    [] fn inferred_outlives_of: InferredOutlivesOf(DefId) -> Vec<ty::Predicate<'tcx>>,\n+\n     /// Maps from an impl/trait def-id to a list of the def-ids of its items\n     [] fn associated_item_def_ids: AssociatedItemDefIds(DefId) -> Rc<Vec<DefId>>,\n "}, {"sha": "4e301342ee079fe9fe3b2d1f13480647f0a1a145", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=5618aba38058dc700437b74cca52d139db1b337c", "patch": "@@ -736,6 +736,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::TypeOfItem => { force!(type_of, def_id!()); }\n         DepKind::GenericsOfItem => { force!(generics_of, def_id!()); }\n         DepKind::PredicatesOfItem => { force!(predicates_of, def_id!()); }\n+        DepKind::InferredOutlivesOf => { force!(inferred_outlives_of, def_id!()); }\n         DepKind::SuperPredicatesOfItem => { force!(super_predicates_of, def_id!()); }\n         DepKind::TraitDefOfItem => { force!(trait_def, def_id!()); }\n         DepKind::AdtDefOfItem => { force!(adt_def, def_id!()); }"}, {"sha": "a5b3f8cb806be49b7bc76f13746207040a6f2286", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5618aba38058dc700437b74cca52d139db1b337c", "patch": "@@ -1332,7 +1332,11 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            def_id: DefId)\n                            -> ty::GenericPredicates<'tcx> {\n-    explicit_predicates_of(tcx, def_id)\n+    let explicit = explicit_predicates_of(tcx, def_id);\n+    ty::GenericPredicates {\n+        parent: explicit.parent,\n+        predicates: [&explicit.predicates[..], &tcx.inferred_outlives_of(def_id)[..]].concat()\n+    }\n }\n \n fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "8f91d07b53fb26fc39b5c5d69f86bfbbc55f929d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5618aba38058dc700437b74cca52d139db1b337c", "patch": "@@ -4676,6 +4676,7 @@ register_diagnostics! {\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`\n //  E0613, // Removed (merged with E0609)\n+    E0640, // infer outlives\n     E0627, // yield statement outside of generator literal\n     E0632, // cannot provide explicit type parameters when `impl Trait` is used in\n            // argument position."}, {"sha": "49ba0499f7868bcf7268a57b343ee8f9b964de26", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5618aba38058dc700437b74cca52d139db1b337c", "patch": "@@ -50,6 +50,8 @@ independently:\n \n - variance: variance inference\n \n+- outlives: outlives inference\n+\n - check: walks over function bodies and type checks them, inferring types for\n   local variables, type parameters, etc as necessary.\n \n@@ -122,6 +124,7 @@ mod collect;\n mod constrained_type_params;\n mod impl_wf_check;\n mod coherence;\n+mod outlives;\n mod variance;\n mod namespace;\n \n@@ -286,6 +289,7 @@ pub fn provide(providers: &mut Providers) {\n     coherence::provide(providers);\n     check::provide(providers);\n     variance::provide(providers);\n+    outlives::provide(providers);\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n@@ -301,6 +305,11 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n \n     })?;\n \n+    tcx.sess.track_errors(|| {\n+        time(time_passes, \"outlives testing\", ||\n+            outlives::test::test_inferred_outlives(tcx));\n+    })?;\n+\n     tcx.sess.track_errors(|| {\n         time(time_passes, \"impl wf inference\", ||\n              impl_wf_check::impl_wf_check(tcx));"}, {"sha": "1127028cbc8c7c052867a20667b29d3791480cb9", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=5618aba38058dc700437b74cca52d139db1b337c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::ty::{self, TyCtxt};\n+use rustc::ty::maps::Providers;\n+\n+/// Code to write unit test for outlives.\n+pub mod test;\n+\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        inferred_outlives_of,\n+        ..*providers\n+    };\n+}\n+\n+//todo\n+fn inferred_outlives_of<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>, _def_id: DefId)\n+                                  -> Vec<ty::Predicate<'tcx>> {\n+    Vec::new()\n+}"}, {"sha": "196e66054946389f672dbffeb4d60b30d3ec82aa", "filename": "src/librustc_typeck/outlives/test.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5618aba38058dc700437b74cca52d139db1b337c/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=5618aba38058dc700437b74cca52d139db1b337c", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::ty::TyCtxt;\n+\n+pub fn test_inferred_outlives<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    tcx.hir.krate().visit_all_item_likes(&mut OutlivesTest { tcx });\n+}\n+\n+struct OutlivesTest<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>\n+}\n+\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for OutlivesTest<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+        let item_def_id = self.tcx.hir.local_def_id(item.id);\n+\n+        // For unit testing: check for a special \"rustc_outlives\"\n+        // attribute and report an error with various results if found.\n+        if self.tcx.has_attr(item_def_id, \"rustc_outlives\") {\n+            let inferred_outlives_of = self.tcx.inferred_outlives_of(item_def_id);\n+            span_err!(self.tcx.sess,\n+                      item.span,\n+                      E0640,\n+                      \"{:?}\",\n+                      inferred_outlives_of);\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) { }\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n+}"}, {"sha": "778394c9fc8ade7b40d11f7211ce79c5b799d5a5", "filename": "src/test/compile-fail/outlives-associated-types.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5618aba38058dc700437b74cca52d139db1b337c/src%2Ftest%2Fcompile-fail%2Foutlives-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5618aba38058dc700437b74cca52d139db1b337c/src%2Ftest%2Fcompile-fail%2Foutlives-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foutlives-associated-types.rs?ref=5618aba38058dc700437b74cca52d139db1b337c", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the outlives computation runs for now...\n+\n+#![feature(rustc_attrs)]\n+\n+//todo add all the test cases\n+// https://github.com/rust-lang/rfcs/blob/master/text/2093-infer-outlives.md#example-1-a-reference\n+\n+#[rustc_outlives]\n+struct Direct<'a, T> { //~ ERROR 19:1: 21:2: [] [E0640]\n+    field: &'a T\n+}\n+\n+fn main() { }"}]}