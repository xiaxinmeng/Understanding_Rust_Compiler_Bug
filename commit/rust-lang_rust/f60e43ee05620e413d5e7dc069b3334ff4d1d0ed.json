{"sha": "f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "node_id": "C_kwDOAAsO6NoAKGY2MGU0M2VlMDU2MjBlNDEzZDVlN2RjMDY5YjMzMzRmZjRkMWQwZWQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-18T19:58:07Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:39:29Z"}, "message": "Fix clippy's missing substs", "tree": {"sha": "958878f81e2dc1c4a567e487d46a26e65d375df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/958878f81e2dc1c4a567e487d46a26e65d375df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "html_url": "https://github.com/rust-lang/rust/commit/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7828221e3fe88d54be2c2c7d0dda226f6be60c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7828221e3fe88d54be2c2c7d0dda226f6be60c4", "html_url": "https://github.com/rust-lang/rust/commit/c7828221e3fe88d54be2c2c7d0dda226f6be60c4"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "1d9af7cdbd358be31b8760ec4e471133ce4522eb", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "patch": "@@ -466,12 +466,12 @@ fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_r\n         if let Some(def_id) = trait_ref.trait_def_id();\n         if cx.tcx.is_diagnostic_item(sym::PartialEq, def_id);\n         let param_env = param_env_for_derived_eq(cx.tcx, adt.did(), eq_trait_def_id);\n-        if !implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, &[]);\n+        if !implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, []);\n         // If all of our fields implement `Eq`, we can implement `Eq` too\n         if adt\n             .all_fields()\n             .map(|f| f.ty(cx.tcx, substs))\n-            .all(|ty| implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, &[]));\n+            .all(|ty| implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, []));\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "ea4e5e052d029134f455fa86d0b3b9b949d2d4f2", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "patch": "@@ -119,11 +119,13 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             let callee_ty_unadjusted = cx.typeck_results().expr_ty(callee).peel_refs();\n             if !is_type_diagnostic_item(cx, callee_ty_unadjusted, sym::Arc);\n             if !is_type_diagnostic_item(cx, callee_ty_unadjusted, sym::Rc);\n+            if let ty::Closure(_, substs) = *closure_ty.kind();\n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure\", |diag| {\n                     if let Some(mut snippet) = snippet_opt(cx, callee.span) {\n                         if let Some(fn_mut_id) = cx.tcx.lang_items().fn_mut_trait()\n-                            && implements_trait(cx, callee_ty.peel_refs(), fn_mut_id, &[])\n+                            && let args = cx.tcx.erase_late_bound_regions(ty::ClosureSubsts { substs }.sig()).inputs()\n+                            && implements_trait(cx, callee_ty.peel_refs(), fn_mut_id, &args.iter().copied().map(Into::into).collect::<Vec<_>>())\n                             && path_to_local(callee).map_or(false, |l| local_used_after_expr(cx, l, expr))\n                         {\n                                 // Mutable closure is used after current expr; we cannot consume it."}, {"sha": "375ebc903b4001f15d104fff2d321ad94bcaffd6", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "patch": "@@ -474,7 +474,7 @@ fn is_cow_into_owned(cx: &LateContext<'_>, method_name: Symbol, method_def_id: D\n }\n \n /// Returns true if the named method is `ToString::to_string` and it's called on a type that\n-/// is string-like i.e. implements `AsRef<str>` or `Deref<str>`.\n+/// is string-like i.e. implements `AsRef<str>` or `Deref<Target = str>`.\n fn is_to_string_on_string_like<'a>(\n     cx: &LateContext<'_>,\n     call_expr: &'a Expr<'a>,\n@@ -490,7 +490,7 @@ fn is_to_string_on_string_like<'a>(\n         && let GenericArgKind::Type(ty) = generic_arg.unpack()\n         && let Some(deref_trait_id) = cx.tcx.get_diagnostic_item(sym::Deref)\n         && let Some(as_ref_trait_id) = cx.tcx.get_diagnostic_item(sym::AsRef)\n-        && (implements_trait(cx, ty, deref_trait_id, &[cx.tcx.types.str_.into()]) ||\n+        && (get_associated_type(cx, ty, deref_trait_id, \"Target\") == Some(cx.tcx.types.str_) ||\n             implements_trait(cx, ty, as_ref_trait_id, &[cx.tcx.types.str_.into()])) {\n             true\n         } else {"}, {"sha": "eeff15bbfb422584a177b198d1c80b649f08a768", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::{snippet, snippet_opt};\n-use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item, is_type_lang_item};\n+use clippy_utils::ty::{implements_trait, implements_trait_with_env, is_copy, is_type_diagnostic_item, is_type_lang_item};\n use clippy_utils::{get_trait_def_id, is_self, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -185,7 +185,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 if !ty.is_mutable_ptr();\n                 if !is_copy(cx, ty);\n                 if ty.is_sized(cx.tcx, cx.param_env);\n-                if !allowed_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n+                if !allowed_traits.iter().any(|&t| implements_trait_with_env(cx.tcx, cx.param_env, ty, t, [None]));\n                 if !implements_borrow_trait;\n                 if !all_borrowable_trait;\n "}, {"sha": "a022fc156fca214cd70c60a41124684a21125bca", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n \n                 let implements_partial_ord = {\n                     if let Some(id) = cx.tcx.lang_items().partial_ord_trait() {\n-                        implements_trait(cx, ty, id, &[])\n+                        implements_trait(cx, ty, id, &[ty.into()])\n                     } else {\n                         return;\n                     }"}, {"sha": "a8047fe9e5ea1ba497a4e3118e1a8a6442a81105", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60e43ee05620e413d5e7dc069b3334ff4d1d0ed/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=f60e43ee05620e413d5e7dc069b3334ff4d1d0ed", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, FnDecl, LangItem, TyKind, Unsafety};\n-use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::infer::{TyCtxtInferExt, type_variable::{TypeVariableOrigin, TypeVariableOriginKind}};\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n@@ -18,7 +18,7 @@ use rustc_middle::ty::{\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n-use rustc_span::{sym, Span, Symbol};\n+use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Size, VariantIdx};\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n@@ -153,7 +153,7 @@ pub fn implements_trait<'tcx>(\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n-    implements_trait_with_env(cx.tcx, cx.param_env, ty, trait_id, ty_params)\n+    implements_trait_with_env(cx.tcx, cx.param_env, ty, trait_id, ty_params.iter().map(|&arg| Some(arg)))\n }\n \n /// Same as `implements_trait` but allows using a `ParamEnv` different from the lint context.\n@@ -162,7 +162,7 @@ pub fn implements_trait_with_env<'tcx>(\n     param_env: ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n     trait_id: DefId,\n-    ty_params: &[GenericArg<'tcx>],\n+    ty_params: impl IntoIterator<Item = Option<GenericArg<'tcx>>>,\n ) -> bool {\n     // Clippy shouldn't have infer types\n     assert!(!ty.needs_infer());\n@@ -171,8 +171,12 @@ pub fn implements_trait_with_env<'tcx>(\n     if ty.has_escaping_bound_vars() {\n         return false;\n     }\n-    let ty_params = tcx.mk_substs(ty_params.iter());\n     let infcx = tcx.infer_ctxt().build();\n+    let orig = TypeVariableOrigin {\n+        kind: TypeVariableOriginKind::MiscVariable,\n+        span: DUMMY_SP,\n+    };\n+    let ty_params = tcx.mk_substs(ty_params.into_iter().map(|arg| arg.unwrap_or_else(|| infcx.next_ty_var(orig).into())));\n     infcx\n         .type_implements_trait(trait_id, ty, ty_params, param_env)\n         .must_apply_modulo_regions()"}]}