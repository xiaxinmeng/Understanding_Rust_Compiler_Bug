{"sha": "5636bef2ecad8bde7746dcaf150a9bb4f0d6f342", "node_id": "C_kwDOAAsO6NoAKDU2MzZiZWYyZWNhZDhiZGU3NzQ2ZGNhZjE1MGE5YmI0ZjBkNmYzNDI", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T13:06:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "move pat to prefix entry points", "tree": {"sha": "0f3c940933e7ad37c0ded150ce50ef4954d4fd47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f3c940933e7ad37c0ded150ce50ef4954d4fd47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342", "html_url": "https://github.com/rust-lang/rust/commit/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f10f51833c8ea715ef512eb283f1d44f76701378", "url": "https://api.github.com/repos/rust-lang/rust/commits/f10f51833c8ea715ef512eb283f1d44f76701378", "html_url": "https://github.com/rust-lang/rust/commit/f10f51833c8ea715ef512eb283f1d44f76701378"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "03ada8b2b9c3c7109db694fa590e73dcff892ef0", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=5636bef2ecad8bde7746dcaf150a9bb4f0d6f342", "patch": "@@ -693,7 +693,14 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n         \"path\" => ParserEntryPoint::Path,\n         \"expr\" => ParserEntryPoint::Expr,\n         \"ty\" => ParserEntryPoint::Type,\n-        \"pat\" | \"pat_param\" => ParserEntryPoint::Pattern, // FIXME: edition2021\n+        // FIXME: These two should actually behave differently depending on the edition.\n+        //\n+        // https://doc.rust-lang.org/edition-guide/rust-2021/or-patterns-macro-rules.html\n+        \"pat\" | \"pat_param\" => {\n+            return input\n+                .expect_fragment2(parser::PrefixEntryPoint::Pat)\n+                .map(|tt| tt.map(Fragment::Tokens));\n+        }\n         \"stmt\" => {\n             return input\n                 .expect_fragment2(parser::PrefixEntryPoint::Stmt)"}, {"sha": "4c6106f18a8232d9c41d785354494f7ae4795e6f", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=5636bef2ecad8bde7746dcaf150a9bb4f0d6f342", "patch": "@@ -61,6 +61,10 @@ pub(crate) mod entry {\n         pub(crate) fn stmt(p: &mut Parser) {\n             expressions::stmt(p, expressions::StmtWithSemi::No, true);\n         }\n+\n+        pub(crate) fn pat(p: &mut Parser) {\n+            patterns::pattern_single(p);\n+        }\n     }\n }\n \n@@ -76,8 +80,6 @@ pub(crate) mod entry_points {\n \n     pub(crate) use paths::type_path as path;\n \n-    pub(crate) use patterns::pattern_single as pattern;\n-\n     pub(crate) use types::type_;\n \n     pub(crate) fn expr(p: &mut Parser) {"}, {"sha": "a6e554c3b4591884e435cf036c3adb6e90bdb655", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=5636bef2ecad8bde7746dcaf150a9bb4f0d6f342", "patch": "@@ -43,7 +43,8 @@ pub use crate::{\n \n /// Parse a syntactic construct at the *start* of the input.\n ///\n-/// This is used by macro-by-example parser to implement things like `$i:item`.\n+/// This is used by macro-by-example parser to implement things like `$i:item`\n+/// and the naming of variants follows the naming of macro fragments.\n ///\n /// Note that this is generally non-optional -- the result is intentionally not\n /// `Option<Output>`. The way MBE work, by the time we *try* to parse `$e:expr`\n@@ -54,6 +55,7 @@ pub enum PrefixEntryPoint {\n     Vis,\n     Block,\n     Stmt,\n+    Pat,\n }\n \n impl PrefixEntryPoint {\n@@ -62,6 +64,7 @@ impl PrefixEntryPoint {\n             PrefixEntryPoint::Vis => grammar::entry::prefix::vis,\n             PrefixEntryPoint::Block => grammar::entry::prefix::block,\n             PrefixEntryPoint::Stmt => grammar::entry::prefix::stmt,\n+            PrefixEntryPoint::Pat => grammar::entry::prefix::pat,\n         };\n         let mut p = parser::Parser::new(input);\n         entry_point(&mut p);\n@@ -108,7 +111,7 @@ pub fn parse(inp: &Input, entry_point: ParserEntryPoint) -> Output {\n         ParserEntryPoint::Path => grammar::entry_points::path,\n         ParserEntryPoint::Expr => grammar::entry_points::expr,\n         ParserEntryPoint::Type => grammar::entry_points::type_,\n-        ParserEntryPoint::Pattern => grammar::entry_points::pattern,\n+        ParserEntryPoint::Pattern => grammar::entry::prefix::pat,\n         ParserEntryPoint::Item => grammar::entry_points::item,\n         ParserEntryPoint::MetaItem => grammar::entry_points::meta_item,\n         ParserEntryPoint::StatementOptionalSemi => grammar::entry_points::stmt_optional_semi,"}]}