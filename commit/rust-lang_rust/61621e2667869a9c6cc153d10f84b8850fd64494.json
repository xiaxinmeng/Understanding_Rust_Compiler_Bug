{"sha": "61621e2667869a9c6cc153d10f84b8850fd64494", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjIxZTI2Njc4NjlhOWM2Y2MxNTNkMTBmODRiODg1MGZkNjQ0OTQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-16T18:17:40Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T08:03:13Z"}, "message": "Allow `hir().find` to return `None`", "tree": {"sha": "18fff8a4634ce7da02ec261bc4c28eeaa2d84b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18fff8a4634ce7da02ec261bc4c28eeaa2d84b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61621e2667869a9c6cc153d10f84b8850fd64494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61621e2667869a9c6cc153d10f84b8850fd64494", "html_url": "https://github.com/rust-lang/rust/commit/61621e2667869a9c6cc153d10f84b8850fd64494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61621e2667869a9c6cc153d10f84b8850fd64494/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "url": "https://api.github.com/repos/rust-lang/rust/commits/04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "html_url": "https://github.com/rust-lang/rust/commit/04689e22e946879f2f5e2c73849d2f4e1f2b4b32"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "971bfd0281eb5210bdeabe764ca062f2af78d3b4", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/61621e2667869a9c6cc153d10f84b8850fd64494/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61621e2667869a9c6cc153d10f84b8850fd64494/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=61621e2667869a9c6cc153d10f84b8850fd64494", "patch": "@@ -311,19 +311,16 @@ impl<'hir> Map<'hir> {\n     }\n \n     fn find_entry(&self, id: HirId) -> Option<Entry<'hir>> {\n-        if id.local_id == ItemLocalId::from_u32(0) {\n-            let owner = self.tcx.hir_owner(id.owner);\n+        if id.local_id == ItemLocalId::from_u32_const(0) {\n+            let owner = self.tcx.hir_owner(id.owner_def_id());\n             owner.map(|owner| Entry { parent: owner.parent, node: owner.node })\n         } else {\n-            let owner = self.tcx.hir_owner_nodes(id.owner);\n+            let owner = self.tcx.hir_owner_items(id.owner_def_id());\n             owner.and_then(|owner| {\n-                let node = owner.nodes[id.local_id].as_ref();\n-                // FIXME(eddyb) use a single generic type insted of having both\n-                // `Entry` and `ParentedNode`, which are effectively the same.\n-                // Alternatively, rewrite code using `Entry` to use `ParentedNode`.\n-                node.map(|node| Entry {\n-                    parent: HirId { owner: id.owner, local_id: node.parent },\n-                    node: node.node,\n+                let item = owner.items[id.local_id].as_ref();\n+                item.map(|item| Entry {\n+                    parent: HirId { owner: id.owner, local_id: item.parent },\n+                    node: item.node,\n                 })\n             })\n         }\n@@ -355,7 +352,12 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n-        self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies.get(&id.hir_id.local_id).unwrap()\n+        self.tcx\n+            .hir_owner_items(DefId::local(id.hir_id.owner))\n+            .unwrap()\n+            .bodies\n+            .get(&id.hir_id.local_id)\n+            .unwrap()\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {"}, {"sha": "3d84bbd7062f0a34baf62c1198f326ebaac7ab0e", "filename": "src/librustc_middle/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61621e2667869a9c6cc153d10f84b8850fd64494/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61621e2667869a9c6cc153d10f84b8850fd64494/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmod.rs?ref=61621e2667869a9c6cc153d10f84b8850fd64494", "patch": "@@ -77,8 +77,8 @@ pub fn provide(providers: &mut Providers<'_>) {\n         let module = hir.as_local_hir_id(id);\n         &tcx.untracked_crate.modules[&module]\n     };\n-    providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n-    providers.hir_owner_nodes =\n-        |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|nodes| &**nodes);\n+    providers.hir_owner = |tcx, id| tcx.index_hir(id.krate).map[id.index].signature;\n+    providers.hir_owner_items =\n+        |tcx, id| tcx.index_hir(id.krate).map[id.index].with_bodies.as_ref().map(|items| &**items);\n     map::provide(providers);\n }"}, {"sha": "8c437ca6907702167c466df53168ea9f93ad670a", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61621e2667869a9c6cc153d10f84b8850fd64494/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61621e2667869a9c6cc153d10f84b8850fd64494/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=61621e2667869a9c6cc153d10f84b8850fd64494", "patch": "@@ -75,7 +75,7 @@ rustc_queries! {\n         //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner(key: LocalDefId) -> Option<&'tcx crate::hir::Owner<'tcx>> {\n+        query hir_owner(key: DefId) -> Option<&'tcx HirOwner<'tcx>> {\n             eval_always\n             desc { |tcx| \"HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n@@ -84,7 +84,7 @@ rustc_queries! {\n         //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner_nodes(key: LocalDefId) -> Option<&'tcx crate::hir::OwnerNodes<'tcx>> {\n+        query hir_owner_items(key: DefId) -> Option<&'tcx HirOwnerItems<'tcx>> {\n             eval_always\n             desc { |tcx| \"HIR owner items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }"}, {"sha": "e45e16418e144162875d279bb5aa6e58bbb7ca6e", "filename": "src/test/ui/issues/issue-70041.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61621e2667869a9c6cc153d10f84b8850fd64494/src%2Ftest%2Fui%2Fissues%2Fissue-70041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61621e2667869a9c6cc153d10f84b8850fd64494/src%2Ftest%2Fui%2Fissues%2Fissue-70041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70041.rs?ref=61621e2667869a9c6cc153d10f84b8850fd64494", "patch": "@@ -2,12 +2,10 @@\n // run-pass\n \n macro_rules! regex {\n-    //~^ WARN unused macro definition\n     () => {};\n }\n \n #[allow(dead_code)]\n use regex;\n-//~^ WARN unused import\n \n fn main() {}"}]}