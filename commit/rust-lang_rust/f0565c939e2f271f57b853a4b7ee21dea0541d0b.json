{"sha": "f0565c939e2f271f57b853a4b7ee21dea0541d0b", "node_id": "C_kwDOAAsO6NoAKGYwNTY1YzkzOWUyZjI3MWY1N2I4NTNhNGI3ZWUyMWRlYTA1NDFkMGI", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-02-07T00:48:12Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-02-17T00:01:52Z"}, "message": "change usages of type_of to bound_type_of", "tree": {"sha": "053de70c354fb35fc66708454a2b9644a80f72c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/053de70c354fb35fc66708454a2b9644a80f72c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0565c939e2f271f57b853a4b7ee21dea0541d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0565c939e2f271f57b853a4b7ee21dea0541d0b", "html_url": "https://github.com/rust-lang/rust/commit/f0565c939e2f271f57b853a4b7ee21dea0541d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0565c939e2f271f57b853a4b7ee21dea0541d0b/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6534ae878b7361b08c29d994d6767027ebfae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6534ae878b7361b08c29d994d6767027ebfae8", "html_url": "https://github.com/rust-lang/rust/commit/dd6534ae878b7361b08c29d994d6767027ebfae8"}], "stats": {"total": 110, "additions": 57, "deletions": 53}, "files": [{"sha": "58d4cfff06f50cc50f7b92cd0c4c3ec4e211b3a0", "filename": "clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -66,7 +66,7 @@ fn is_used_as_unaligned(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n             if matches!(name.ident.as_str(), \"read_unaligned\" | \"write_unaligned\")\n                 && let Some(def_id) = cx.typeck_results().type_dependent_def_id(parent.hir_id)\n                 && let Some(def_id) = cx.tcx.impl_of_method(def_id)\n-                && cx.tcx.type_of(def_id).is_unsafe_ptr()\n+                && cx.tcx.bound_type_of(def_id).subst_identity().is_unsafe_ptr()\n             {\n                 true\n             } else {"}, {"sha": "023f9e64deb922a59774ffef909d96e20793adda", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -43,7 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n                 of_trait: Some(ref trait_ref),\n                 ..\n             }) = item.kind;\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n             if is_copy(cx, ty);\n             if let Some(trait_id) = trait_ref.trait_def_id();\n             if cx.tcx.is_diagnostic_item(sym::Iterator, trait_id);"}, {"sha": "b6b7eaae0686b9f81763e0a564b0f381996dc6a2", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     .fields\n                     .iter()\n                     .all(|field| {\n-                        is_copy(cx, cx.tcx.type_of(field.did))\n+                        is_copy(cx, cx.tcx.bound_type_of(field.did).subst_identity())\n                     });\n                 if !has_drop(cx, binding_type) || all_fields_are_copy;\n                 then {"}, {"sha": "e368efe944cff53064c1f9a666e0c385d71c3452", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                                     .iter()\n                                     .find_map(|f_def| {\n                                         if f_def.ident(self.cx.tcx) == field.ident\n-                                            { Some(self.cx.tcx.type_of(f_def.did)) }\n+                                            { Some(self.cx.tcx.bound_type_of(f_def.did).subst_identity()) }\n                                         else { None }\n                                     });\n                             self.ty_bounds.push(bound.into());"}, {"sha": "4c9f4f7f8ccac21ae96a95d3f6766d8874c9ec7e", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -735,7 +735,7 @@ fn walk_parents<'tcx>(\n                 span,\n                 ..\n             }) if span.ctxt() == ctxt => {\n-                let ty = cx.tcx.type_of(owner_id.def_id);\n+                let ty = cx.tcx.bound_type_of(owner_id.def_id).subst_identity();\n                 Some(ty_auto_deref_stability(cx, ty, precedence).position_for_result(cx))\n             },\n \n@@ -771,7 +771,7 @@ fn walk_parents<'tcx>(\n                 }) => variant_of_res(cx, cx.qpath_res(path, *hir_id))\n                     .and_then(|variant| variant.fields.iter().find(|f| f.name == field.ident.name))\n                     .map(|field_def| {\n-                        ty_auto_deref_stability(cx, cx.tcx.type_of(field_def.did), precedence).position_for_arg()\n+                        ty_auto_deref_stability(cx, cx.tcx.bound_type_of(field_def.did).subst_identity(), precedence).position_for_arg()\n                     }),\n                 _ => None,\n             },"}, {"sha": "f1d2db4487189a74208f620566c7483ee1dda29f", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if let Some(Node::ImplItem(impl_item)) = cx.tcx.hir().find(impl_item_hir);\n             if let ImplItemKind::Fn(_, b) = &impl_item.kind;\n             if let Body { value: func_expr, .. } = cx.tcx.hir().body(*b);\n-            if let Some(adt_def) = cx.tcx.type_of(item.owner_id).ty_adt_def();\n+            if let Some(adt_def) = cx.tcx.bound_type_of(item.owner_id).subst_identity().ty_adt_def();\n             if let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|attr| attr.doc_str().is_some());\n             if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);"}, {"sha": "0181b164f057e2ffa186e9d218d6cae9fb710b26", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n             ..\n         }) = item.kind\n         {\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n             let is_automatically_derived = cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n@@ -347,7 +347,7 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &h\n             let has_copy_impl = cx.tcx.all_local_trait_impls(()).get(&copy_id).map_or(false, |impls| {\n                 impls\n                     .iter()\n-                    .any(|&id| matches!(cx.tcx.type_of(id).kind(), ty::Adt(adt, _) if ty_adt.did() == adt.did()))\n+                    .any(|&id| matches!(cx.tcx.bound_type_of(id).subst_identity().kind(), ty::Adt(adt, _) if ty_adt.did() == adt.did()))\n             });\n             if !has_copy_impl {\n                 return;"}, {"sha": "8c0112ca4a1cbfdf9c473056cb33c15f20095125", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for EmptyEnum {\n         }\n \n         if let ItemKind::Enum(..) = item.kind {\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants().is_empty() {\n                 span_lint_and_help("}, {"sha": "e5289c177f3e95082503c7d4f331c0aa1eaafa34", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n             for var in def.variants {\n                 if let Some(anon_const) = &var.disr_expr {\n                     let def_id = cx.tcx.hir().body_owner_def_id(anon_const.body);\n-                    let mut ty = cx.tcx.type_of(def_id.to_def_id());\n+                    let mut ty = cx.tcx.bound_type_of(def_id.to_def_id()).subst_identity();\n                     let constant = cx\n                         .tcx\n                         .const_eval_poly(def_id.to_def_id())"}, {"sha": "a41ad735fb8107046fe08fa7a5ddaad4cca33fae", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_inputs(cx, body.params, None, args);\n             let callee_ty = cx.typeck_results().expr_ty_adjusted(callee);\n             let call_ty = cx.typeck_results().type_dependent_def_id(body.value.hir_id)\n-                .map_or(callee_ty, |id| cx.tcx.type_of(id));\n+                .map_or(callee_ty, |id| cx.tcx.bound_type_of(id).subst_identity());\n             if check_sig(cx, closure_ty, call_ty);\n             let substs = cx.typeck_results().node_substs(callee.hir_id);\n             // This fixes some false positives that I don't entirely understand\n@@ -233,7 +233,7 @@ fn get_ufcs_type_name<'tcx>(cx: &LateContext<'tcx>, method_def_id: DefId, substs\n     match assoc_item.container {\n         ty::TraitContainer => cx.tcx.def_path_str(def_id),\n         ty::ImplContainer => {\n-            let ty = cx.tcx.type_of(def_id);\n+            let ty = cx.tcx.bound_type_of(def_id).skip_binder();\n             match ty.kind() {\n                 ty::Adt(adt, _) => cx.tcx.def_path_str(adt.did()),\n                 ty::Array(..)"}, {"sha": "1405316c9bc07b0c3de73da94b05e954900b5fed", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -101,7 +101,7 @@ pub fn check_fn(cx: &LateContext<'_>, kind: FnKind<'_>, decl: &FnDecl<'_>, body:\n         return;\n     };\n \n-    if cx.tcx.type_of(used_field.did) == cx.tcx.type_of(correct_field.did) {\n+    if cx.tcx.bound_type_of(used_field.did) == cx.tcx.bound_type_of(correct_field.did) {\n         let left_span = block_expr.span.until(used_ident.span);\n         let snippet = snippet(cx, left_span, \"..\");\n         let sugg = format!(\"{snippet}{name}\");"}, {"sha": "bff3cd4e3a19b47a8818f482e1c1e726b626d32e", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if let Some(const_id) = cx.typeck_results().type_dependent_def_id(cond_num_val.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(const_id);\n                             if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n-                            if cx.tcx.type_of(impl_id).is_integral();\n+                            if cx.tcx.bound_type_of(impl_id).subst_identity().is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n                             }\n@@ -115,7 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if let Some(func_id) = cx.typeck_results().type_dependent_def_id(func.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(func_id);\n                             if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n-                            if cx.tcx.type_of(impl_id).is_integral();\n+                            if cx.tcx.bound_type_of(impl_id).subst_identity().is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n                             }"}, {"sha": "1a959809073e5d42eadacf474e6a665a25df89af", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -66,7 +66,8 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n             )\n         }) {\n             for impl_id in impl_ids.iter().map(|id| id.expect_local()) {\n-                match type_map.entry(cx.tcx.type_of(impl_id)) {\n+                let impl_ty = cx.tcx.bound_type_of(impl_id).subst_identity();\n+                match type_map.entry(impl_ty) {\n                     Entry::Vacant(e) => {\n                         // Store the id for the first impl block of this type. The span is retrieved lazily.\n                         e.insert(IdOrSpan::Id(impl_id));"}, {"sha": "a7c526692bb73a00e9af9bf10c098eab228e497a", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n             return;\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n             let Adt(adt, subst) = ty.kind() else {\n                 panic!(\"already checked whether this is an enum\")\n             };"}, {"sha": "e3e4c9a5bbe85888c342b0faa26ad8ea04ff5e2e", "filename": "clippy_lints/src/matches/rest_pat_in_fully_bound_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmatches%2Frest_pat_in_fully_bound_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmatches%2Frest_pat_in_fully_bound_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Frest_pat_in_fully_bound_struct.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn check(cx: &LateContext<'_>, pat: &Pat<'_>) {\n         if !pat.span.from_expansion();\n         if let PatKind::Struct(QPath::Resolved(_, path), fields, true) = pat.kind;\n         if let Some(def_id) = path.res.opt_def_id();\n-        let ty = cx.tcx.type_of(def_id);\n+        let ty = cx.tcx.bound_type_of(def_id).subst_identity();\n         if let ty::Adt(def, _) = ty.kind();\n         if def.is_struct() || def.is_union();\n         if fields.len() == def.non_enum_variant().fields.len();"}, {"sha": "5b27145ac2266a7883e4be7f32bc763d3fefab3f", "filename": "clippy_lints/src/methods/bytes_count_to_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(bytes_id) = cx.typeck_results().type_dependent_def_id(count_recv.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(bytes_id);\n-        if cx.tcx.type_of(impl_id).is_str();\n+        if cx.tcx.bound_type_of(impl_id).subst_identity().is_str();\n         let ty = cx.typeck_results().expr_ty(bytes_recv).peel_refs();\n         if ty.is_str() || is_type_lang_item(cx, ty, hir::LangItem::String);\n         then {"}, {"sha": "052f2097899f790a0d10a72836257070fcc7552a", "filename": "clippy_lints/src/methods/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if cx.tcx.type_of(impl_id).is_str();\n+        if cx.tcx.bound_type_of(impl_id).subst_identity().is_str();\n         if let ExprKind::Lit(Spanned { node: LitKind::Str(ext_literal, ..), ..}) = arg.kind;\n         if (2..=6).contains(&ext_literal.as_str().len());\n         let ext_str = ext_literal.as_str();"}, {"sha": "a29c008e3d03829cfcd7631412e7db5b4db9dddc", "filename": "clippy_lints/src/methods/get_first.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if cx.tcx.type_of(impl_id).is_slice();\n+        if cx.tcx.bound_type_of(impl_id).subst_identity().is_slice();\n         if let Some(_) = is_slice_of_primitives(cx, recv);\n         if let hir::ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = arg.kind;\n         then {"}, {"sha": "0065806ba2da820e4ad16be49f3235343e108f36", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -53,7 +53,7 @@ pub fn is_clone_like(cx: &LateContext<'_>, method_name: &str, method_def_id: hir\n         \"to_vec\" => cx\n             .tcx\n             .impl_of_method(method_def_id)\n-            .filter(|&impl_did| cx.tcx.type_of(impl_did).is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n+            .filter(|&impl_did| cx.tcx.bound_type_of(impl_did).subst_identity().is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n             .is_some(),\n         _ => false,\n     }"}, {"sha": "b780a66374e9a2dd1b2b8ee0458aff94ab5b2ca2", "filename": "clippy_lints/src/methods/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Option);\n+        if is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::Option);\n         if let ExprKind::Call(err_path, [err_arg]) = or_expr.kind;\n         if is_res_lang_ctor(cx, path_res(cx, err_path), ResultErr);\n         if is_ok_wrapping(cx, map_expr);"}, {"sha": "57004b4aea47950d41d16c519c6103428f2b299d", "filename": "clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check(cx: &LateContext<'_>, e: &hir::Expr<'_>, recv: &hir::Expr<'_\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n         if cx.tcx.impl_of_method(method_id)\n-            .map_or(false, |id| is_type_diagnostic_item(cx, cx.tcx.type_of(id), sym::Option))\n+            .map_or(false, |id| is_type_diagnostic_item(cx, cx.tcx.bound_type_of(id).subst_identity(), sym::Option))\n             || is_diag_trait_item(cx, method_id, sym::Iterator);\n         if let hir::ExprKind::Closure(&hir::Closure{ body, .. }) = arg.kind;\n         then {"}, {"sha": "71fc5341b702ab076d3bf1b81b6267ae0b9d96b7", "filename": "clippy_lints/src/methods/map_err_ignore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -9,7 +9,7 @@ use super::MAP_ERR_IGNORE;\n pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, arg: &Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n-        && is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Result)\n+        && is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::Result)\n         && let ExprKind::Closure(&Closure {\n             capture_clause: CaptureBy::Ref,\n             body,"}, {"sha": "a665f48c151d3e23de9daa28c2c018ec7e35de90", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -3349,7 +3349,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let name = impl_item.ident.name.as_str();\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n-        let self_ty = cx.tcx.type_of(item.owner_id);\n+        let self_ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n \n         let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n         if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind {"}, {"sha": "aa1a4c8075b8ca775f849d2061f6a186ac5599cc", "filename": "clippy_lints/src/methods/mut_mutex_lock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>, recv: &'\n         if let ty::Ref(_, _, Mutability::Mut) = cx.typeck_results().expr_ty(recv).kind();\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(ex.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Mutex);\n+        if is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::Mutex);\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "e77bc6af47347c9dd8ef52aa9b2015422de159eb", "filename": "clippy_lints/src/methods/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -11,7 +11,7 @@ use super::NONSENSICAL_OPEN_OPTIONS;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, recv: &'tcx Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n-        && match_type(cx, cx.tcx.type_of(impl_id), &paths::OPEN_OPTIONS)\n+        && match_type(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), &paths::OPEN_OPTIONS)\n     {\n         let mut options = Vec::new();\n         get_open_options(cx, recv, &mut options);"}, {"sha": "4522bf453902551045cd8a34e0e10c2b5b3b8b61", "filename": "clippy_lints/src/methods/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::PathBuf);\n+        if is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::PathBuf);\n         if let ExprKind::Lit(ref lit) = arg.kind;\n         if let LitKind::Str(ref path_lit, _) = lit.node;\n         if let pushed_path = Path::new(path_lit.as_str());"}, {"sha": "6a0bf1560c33c16da609ad4d4f689ce2bc346e2e", "filename": "clippy_lints/src/methods/stable_sort_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -10,7 +10,7 @@ use super::STABLE_SORT_PRIMITIVE;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, recv: &'tcx Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n-        && cx.tcx.type_of(impl_id).is_slice()\n+        && cx.tcx.bound_type_of(impl_id).subst_identity().is_slice()\n         && let Some(slice_type) = is_slice_of_primitives(cx, recv)\n     {\n         span_lint_and_then("}, {"sha": "17f422d0e69946d93e556cf7abce9d2fce9e5b64", "filename": "clippy_lints/src/methods/suspicious_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n         if let Some(call_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(call_id);\n         if cx.tcx.impl_trait_ref(impl_id).is_none();\n-        let self_ty = cx.tcx.type_of(impl_id);\n+        let self_ty = cx.tcx.bound_type_of(impl_id).subst_identity();\n         if self_ty.is_slice() || self_ty.is_str();\n         then {\n             // Ignore empty slice and string literals when used with a literal count."}, {"sha": "436e637201a0d52587ba8182f1c5509a0edbf7bd", "filename": "clippy_lints/src/methods/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -122,7 +122,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, arg: &Exp\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if cx.tcx.type_of(impl_id).is_slice();\n+        if cx.tcx.bound_type_of(impl_id).subst_identity().is_slice();\n         if let ExprKind::Closure(&Closure { body, .. }) = arg.kind;\n         if let closure_body = cx.tcx.hir().body(body);\n         if let &["}, {"sha": "5959fdb6625fd661c71437389e520e6a103aad51", "filename": "clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -143,7 +143,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for CloneOrCopyVisitor<'cx, 'tcx> {\n                         if_chain! {\n                             if args.iter().all(|arg| !self.is_binding(arg));\n                             if let Some(method_def_id) = self.cx.typeck_results().type_dependent_def_id(parent.hir_id);\n-                            let method_ty = self.cx.tcx.type_of(method_def_id);\n+                            let method_ty = self.cx.tcx.bound_type_of(method_def_id).subst_identity();\n                             let self_ty = method_ty.fn_sig(self.cx.tcx).input(0).skip_binder();\n                             if matches!(self_ty.kind(), ty::Ref(_, _, Mutability::Not));\n                             then {"}, {"sha": "8c461b2629d7053e2057059bb6519fa7f1a7ba99", "filename": "clippy_lints/src/methods/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -20,7 +20,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Vec);\n+        if is_type_diagnostic_item(cx, cx.tcx.bound_type_of(impl_id).subst_identity(), sym::Vec);\n         if let ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = count_arg.kind;\n         if let ExprKind::Lit(Spanned { node: LitKind::Int(..), .. }) = default_arg.kind;\n         then {"}, {"sha": "47dc4b276a271b807319c00c86f67c7f37ca6cf5", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -98,14 +98,15 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if name == sym::new;\n                             if cx.effective_visibilities.is_reachable(impl_item.owner_id.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id.into());\n-                            let self_ty = cx.tcx.type_of(self_def_id);\n+                            let self_ty = cx.tcx.bound_type_of(self_def_id).subst_identity();\n                             if self_ty == return_ty(cx, id);\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n                             then {\n                                 if self.impling_types.is_none() {\n                                     let mut impls = HirIdSet::default();\n                                     cx.tcx.for_each_impl(default_trait_id, |d| {\n-                                        if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n+                                        let ty = cx.tcx.bound_type_of(d).subst_identity();\n+                                        if let Some(ty_def) = ty.ty_adt_def() {\n                                             if let Some(local_def_id) = ty_def.did().as_local() {\n                                                 impls.insert(cx.tcx.hir().local_def_id_to_hir_id(local_def_id));\n                                             }\n@@ -118,7 +119,8 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                 // generics\n                                 if_chain! {\n                                     if let Some(ref impling_types) = self.impling_types;\n-                                    if let Some(self_def) = cx.tcx.type_of(self_def_id).ty_adt_def();\n+                                    let self_def = cx.tcx.bound_type_of(self_def_id).subst_identity();\n+                                    if let Some(self_def) = self_def.ty_adt_def();\n                                     if let Some(self_local_did) = self_def.did().as_local();\n                                     let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n                                     if impling_types.contains(&self_id);"}, {"sha": "a076bed50d1b7fcff50a04339199b13e6795dda4", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -313,7 +313,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                                 // and, in that case, the definition is *not* generic.\n                                 cx.tcx.normalize_erasing_regions(\n                                     cx.tcx.param_env(of_trait_def_id),\n-                                    cx.tcx.type_of(of_assoc_item),\n+                                    cx.tcx.bound_type_of(of_assoc_item).subst_identity(),\n                                 ),\n                             ))\n                             .is_err();"}, {"sha": "df834962673d366e81e0cde2a46edd698e553a47", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n \n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n-        let self_ty = cx.tcx.type_of(item.owner_id);\n+        let self_ty = cx.tcx.bound_type_of(item.owner_id).subst_identity();\n         let ret_ty = return_ty(cx, impl_item.owner_id);\n \n         // Do not check trait impls"}, {"sha": "a50b38c54dca42324b302facfbd425a5c14102a4", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -218,7 +218,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             } else {\n                 hir_ty_to_ty(cx.tcx, hir_ty)\n             };\n-            if same_type_and_consts(ty, cx.tcx.type_of(impl_id));\n+            if same_type_and_consts(ty, cx.tcx.bound_type_of(impl_id).subst_identity());\n             then {\n                 span_lint(cx, hir_ty.span);\n             }\n@@ -230,7 +230,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !expr.span.from_expansion();\n             if self.msrv.meets(msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n-            if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);\n+            if cx.typeck_results().expr_ty(expr) == cx.tcx.bound_type_of(impl_id).subst_identity();\n             then {} else { return; }\n         }\n         match expr.kind {\n@@ -254,7 +254,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let PatKind::Path(QPath::Resolved(_, path))\n                  | PatKind::TupleStruct(QPath::Resolved(_, path), _, _)\n                  | PatKind::Struct(QPath::Resolved(_, path), _, _) = pat.kind;\n-            if cx.typeck_results().pat_ty(pat) == cx.tcx.type_of(impl_id);\n+            if cx.typeck_results().pat_ty(pat) == cx.tcx.bound_type_of(impl_id).subst_identity();\n             then {\n                 check_path(cx, path);\n             }"}, {"sha": "f62bfa4f221700fbe105aa507eed2708bd3ce6f2", "filename": "clippy_lints/src/utils/internal_lints/interning_defined_symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n                 for item in cx.tcx.module_children(def_id).iter() {\n                     if_chain! {\n                         if let Res::Def(DefKind::Const, item_def_id) = item.res;\n-                        let ty = cx.tcx.type_of(item_def_id);\n+                        let ty = cx.tcx.bound_type_of(item_def_id).subst_identity();\n                         if match_type(cx, ty, &paths::SYMBOL);\n                         if let Ok(ConstValue::Scalar(value)) = cx.tcx.const_eval_poly(item_def_id);\n                         if let Ok(value) = value.to_u32();"}, {"sha": "3249b8633914a4515fa69896d293a89eabfb000a", "filename": "clippy_lints/src/utils/internal_lints/msrv_attr_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -38,7 +38,8 @@ impl LateLintPass<'_> for MsrvAttrImpl {\n             if self_ty_def.is_struct();\n             if self_ty_def.all_fields().any(|f| {\n                 cx.tcx\n-                    .type_of(f.did)\n+                    .bound_type_of(f.did)\n+                    .subst_identity()\n                     .walk()\n                     .filter(|t| matches!(t.unpack(), GenericArgKind::Type(_)))\n                     .any(|t| match_type(cx, t.expect_ty(), &paths::MSRV))"}, {"sha": "3f08566dbcc75e6301f459835eac385759d3034a", "filename": "clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -229,11 +229,11 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n             Res::Def(DefKind::Static(_), def_id) => read_mir_alloc_def_path(\n                 cx,\n                 cx.tcx.eval_static_initializer(def_id).ok()?.inner(),\n-                cx.tcx.type_of(def_id),\n+                cx.tcx.bound_type_of(def_id).subst_identity(),\n             ),\n             Res::Def(DefKind::Const, def_id) => match cx.tcx.const_eval_poly(def_id).ok()? {\n                 ConstValue::ByRef { alloc, offset } if offset.bytes() == 0 => {\n-                    read_mir_alloc_def_path(cx, alloc.inner(), cx.tcx.type_of(def_id))\n+                    read_mir_alloc_def_path(cx, alloc.inner(), cx.tcx.bound_type_of(def_id).subst_identity())\n                 },\n                 _ => None,\n             },"}, {"sha": "97b2cc382b0d61a7215e84d898f50ccef4b690d9", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -50,7 +50,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n     let name = name.as_str();\n \n     let ty = match cx.tcx.impl_of_method(fn_id) {\n-        Some(id) => cx.tcx.type_of(id),\n+        Some(id) => cx.tcx.bound_type_of(id).subst_identity(),\n         None => return Lazy,\n     };\n \n@@ -71,7 +71,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n             .variants()\n             .iter()\n             .flat_map(|v| v.fields.iter())\n-            .any(|x| matches!(cx.tcx.type_of(x.did).peel_refs().kind(), ty::Param(_)))\n+            .any(|x| matches!(cx.tcx.bound_type_of(x.did).subst_identity().peel_refs().kind(), ty::Param(_)))\n             && all_predicates_of(cx.tcx, fn_id).all(|(pred, _)| match pred.kind().skip_binder() {\n                 PredicateKind::Clause(ty::Clause::Trait(pred)) => cx.tcx.trait_def(pred.trait_ref.def_id).is_marker,\n                 _ => true,"}, {"sha": "168055657755f83b763185642da8802c829df54e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -317,7 +317,7 @@ pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str])\n /// Checks if a method is defined in an impl of a diagnostic item\n pub fn is_diag_item_method(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n     if let Some(impl_did) = cx.tcx.impl_of_method(def_id) {\n-        if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n+        if let Some(adt) = cx.tcx.bound_type_of(impl_did).subst_identity().ty_adt_def() {\n             return cx.tcx.is_diagnostic_item(diag_item, adt.did());\n         }\n     }\n@@ -812,7 +812,7 @@ fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<\n     if let QPath::TypeRelative(_, method) = path {\n         if method.ident.name == sym::new {\n             if let Some(impl_did) = cx.tcx.impl_of_method(def_id) {\n-                if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n+                if let Some(adt) = cx.tcx.bound_type_of(impl_did).subst_identity().ty_adt_def() {\n                     return std_types_symbols.iter().any(|&symbol| {\n                         cx.tcx.is_diagnostic_item(symbol, adt.did()) || Some(adt.did()) == cx.tcx.lang_items().string()\n                     });"}, {"sha": "6987d1d2d65a7bf3e5fc98d8a6a013538e36b891", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0565c939e2f271f57b853a4b7ee21dea0541d0b/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=f0565c939e2f271f57b853a4b7ee21dea0541d0b", "patch": "@@ -780,7 +780,7 @@ impl core::ops::Add<u32> for EnumValue {\n #[expect(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n pub fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue> {\n     if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n-        match tcx.type_of(id).kind() {\n+        match tcx.bound_type_of(id).subst_identity().kind() {\n             ty::Int(_) => Some(EnumValue::Signed(match value.size().bytes() {\n                 1 => i128::from(value.assert_bits(Size::from_bytes(1)) as u8 as i8),\n                 2 => i128::from(value.assert_bits(Size::from_bytes(2)) as u16 as i16),\n@@ -903,7 +903,7 @@ pub fn variant_of_res<'tcx>(cx: &LateContext<'tcx>, res: Res) -> Option<&'tcx Va\n             let var_id = cx.tcx.parent(id);\n             Some(cx.tcx.adt_def(cx.tcx.parent(var_id)).variant_with_id(var_id))\n         },\n-        Res::SelfCtor(id) => Some(cx.tcx.type_of(id).ty_adt_def().unwrap().non_enum_variant()),\n+        Res::SelfCtor(id) => Some(cx.tcx.bound_type_of(id).subst_identity().ty_adt_def().unwrap().non_enum_variant()),\n         _ => None,\n     }\n }"}]}