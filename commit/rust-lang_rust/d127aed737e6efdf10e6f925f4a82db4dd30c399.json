{"sha": "d127aed737e6efdf10e6f925f4a82db4dd30c399", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMjdhZWQ3MzdlNmVmZGYxMGU2ZjkyNWY0YTgyZGI0ZGQzMGMzOTk=", "commit": {"author": {"name": "Russell Greene", "email": "russellgreene8@gmail.com", "date": "2018-12-17T23:25:49Z"}, "committer": {"name": "Russell Greene", "email": "russellgreene8@gmail.com", "date": "2018-12-28T17:57:58Z"}, "message": "Merge new_without_default_derive into new_without_default", "tree": {"sha": "fef39cf2ca60fc0e4c53f31177db1cf5f0c47682", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef39cf2ca60fc0e4c53f31177db1cf5f0c47682"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d127aed737e6efdf10e6f925f4a82db4dd30c399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d127aed737e6efdf10e6f925f4a82db4dd30c399", "html_url": "https://github.com/rust-lang/rust/commit/d127aed737e6efdf10e6f925f4a82db4dd30c399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d127aed737e6efdf10e6f925f4a82db4dd30c399/comments", "author": {"login": "russelltg", "id": 7105082, "node_id": "MDQ6VXNlcjcxMDUwODI=", "avatar_url": "https://avatars.githubusercontent.com/u/7105082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/russelltg", "html_url": "https://github.com/russelltg", "followers_url": "https://api.github.com/users/russelltg/followers", "following_url": "https://api.github.com/users/russelltg/following{/other_user}", "gists_url": "https://api.github.com/users/russelltg/gists{/gist_id}", "starred_url": "https://api.github.com/users/russelltg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/russelltg/subscriptions", "organizations_url": "https://api.github.com/users/russelltg/orgs", "repos_url": "https://api.github.com/users/russelltg/repos", "events_url": "https://api.github.com/users/russelltg/events{/privacy}", "received_events_url": "https://api.github.com/users/russelltg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "russelltg", "id": 7105082, "node_id": "MDQ6VXNlcjcxMDUwODI=", "avatar_url": "https://avatars.githubusercontent.com/u/7105082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/russelltg", "html_url": "https://github.com/russelltg", "followers_url": "https://api.github.com/users/russelltg/followers", "following_url": "https://api.github.com/users/russelltg/following{/other_user}", "gists_url": "https://api.github.com/users/russelltg/gists{/gist_id}", "starred_url": "https://api.github.com/users/russelltg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/russelltg/subscriptions", "organizations_url": "https://api.github.com/users/russelltg/orgs", "repos_url": "https://api.github.com/users/russelltg/repos", "events_url": "https://api.github.com/users/russelltg/events{/privacy}", "received_events_url": "https://api.github.com/users/russelltg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7bdf500d93895b6c02f8ae6a73002207f85e523", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bdf500d93895b6c02f8ae6a73002207f85e523", "html_url": "https://github.com/rust-lang/rust/commit/f7bdf500d93895b6c02f8ae6a73002207f85e523"}], "stats": {"total": 176, "additions": 94, "deletions": 82}, "files": [{"sha": "efa637b185cda991a085e29a6047a204ef257244", "filename": "CHANGELOG.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -785,7 +785,6 @@ All notable changes to this project will be documented in this file.\n [`never_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#never_loop\n [`new_ret_no_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_ret_no_self\n [`new_without_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n-[`new_without_default_derive`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default_derive\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n [`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool"}, {"sha": "626b589b5f3efea3ce843ade090cf4d2e683f1e9", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 291 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 290 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "5139e167cc0b82f032f31a1e2470ed9265e32643", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -701,7 +701,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n         neg_multiply::NEG_MULTIPLY,\n         new_without_default::NEW_WITHOUT_DEFAULT,\n-        new_without_default::NEW_WITHOUT_DEFAULT_DERIVE,\n         no_effect::NO_EFFECT,\n         no_effect::UNNECESSARY_OPERATION,\n         non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n@@ -837,7 +836,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         neg_multiply::NEG_MULTIPLY,\n         new_without_default::NEW_WITHOUT_DEFAULT,\n-        new_without_default::NEW_WITHOUT_DEFAULT_DERIVE,\n         non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n         non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n         ok_if_let::IF_LET_SOME_RESULT,\n@@ -1032,6 +1030,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n \n pub fn register_renamed(ls: &mut rustc::lint::LintStore) {\n     ls.register_renamed(\"clippy::stutter\", \"clippy::module_name_repetitions\");\n+    ls.register_renamed(\"clippy::new_without_default_derive\", \"clippy::new_without_default\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "bb8e0b878a2e8e3e396c2bc320eb738ae27e2701", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -24,6 +24,11 @@ use if_chain::if_chain;\n /// implementation of\n /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html).\n ///\n+/// It detects both the case when a manual\n+/// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n+/// implementation is required and also when it can be created with\n+/// `#[derive(Default)]\n+///\n /// **Why is this bad?** The user might expect to be able to use\n /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) as the\n /// type can be constructed without arguments.\n@@ -54,27 +59,24 @@ use if_chain::if_chain;\n /// }\n /// ```\n ///\n-/// You can also have `new()` call `Default::default()`.\n-declare_clippy_lint! {\n-    pub NEW_WITHOUT_DEFAULT,\n-    style,\n-    \"`fn new() -> Self` method without `Default` implementation\"\n-}\n-\n-/// **What it does:** Checks for types with a `fn new() -> Self` method\n-/// and no implementation of\n-/// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html),\n-/// where the `Default` can be derived by `#[derive(Default)]`.\n+/// Or, if\n+/// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n+/// can be derived by `#[derive(Default)]`:\n ///\n-/// **Why is this bad?** The user might expect to be able to use\n-/// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) as the\n-/// type can be constructed without arguments.\n+/// ```rust\n+/// struct Foo;\n ///\n-/// **Known problems:** Hopefully none.\n+/// impl Foo {\n+///     fn new() -> Self {\n+///         Foo\n+///     }\n+/// }\n+/// ```\n ///\n-/// **Example:**\n+/// Instead, use:\n ///\n /// ```rust\n+/// #[derive(Default)]\n /// struct Foo;\n ///\n /// impl Foo {\n@@ -84,11 +86,11 @@ declare_clippy_lint! {\n /// }\n /// ```\n ///\n-/// Just prepend `#[derive(Default)]` before the `struct` definition.\n+/// You can also have `new()` call `Default::default()`.\n declare_clippy_lint! {\n-    pub NEW_WITHOUT_DEFAULT_DERIVE,\n+    pub NEW_WITHOUT_DEFAULT,\n     style,\n-    \"`fn new() -> Self` without `#[derive]`able `Default` implementation\"\n+    \"`fn new() -> Self` method without `Default` implementation\"\n }\n \n #[derive(Clone, Default)]\n@@ -98,7 +100,7 @@ pub struct NewWithoutDefault {\n \n impl LintPass for NewWithoutDefault {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(NEW_WITHOUT_DEFAULT, NEW_WITHOUT_DEFAULT_DERIVE)\n+        lint_array!(NEW_WITHOUT_DEFAULT)\n     }\n }\n \n@@ -167,7 +169,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                     if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n                                         span_lint_node_and_then(\n                                             cx,\n-                                            NEW_WITHOUT_DEFAULT_DERIVE,\n+                                            NEW_WITHOUT_DEFAULT,\n                                             id,\n                                             impl_item.span,\n                                             &format!("}, {"sha": "ebf71f67a004f91052c8ea6741b455e71f7c2329", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -14,7 +14,6 @@\n     clippy::print_stdout,\n     clippy::non_ascii_literal,\n     clippy::new_without_default,\n-    clippy::new_without_default_derive,\n     clippy::missing_docs_in_private_items,\n     clippy::needless_pass_by_value,\n     clippy::default_trait_access,"}, {"sha": "b0b693f3e1691eeac04377df8389baf06f354aee", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -1,33 +1,33 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:38:5\n+  --> $DIR/methods.rs:37:5\n    |\n LL |     pub fn add(self, other: T) -> T { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:49:17\n+  --> $DIR/methods.rs:48:17\n    |\n LL |     fn into_u16(&self) -> u16 { 0 }\n    |                 ^^^^^\n    |\n    = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:51:21\n+  --> $DIR/methods.rs:50:21\n    |\n LL |     fn to_something(self) -> u32 { 0 }\n    |                     ^^^^\n \n error: methods called `new` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:53:12\n+  --> $DIR/methods.rs:52:12\n    |\n LL |     fn new(self) -> Self { unimplemented!(); }\n    |            ^^^^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:121:13\n+  --> $DIR/methods.rs:120:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -39,7 +39,7 @@ LL | |                .unwrap_or(0); // should lint even though this call is on\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:125:13\n+  --> $DIR/methods.rs:124:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -49,7 +49,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:129:13\n+  --> $DIR/methods.rs:128:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -59,15 +59,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:134:13\n+  --> $DIR/methods.rs:133:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:136:13\n+  --> $DIR/methods.rs:135:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -77,7 +77,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:140:13\n+  --> $DIR/methods.rs:139:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -88,7 +88,7 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:148:13\n+  --> $DIR/methods.rs:147:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -100,7 +100,7 @@ LL | |                .unwrap_or_else(|| 0); // should lint even though this cal\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:152:13\n+  --> $DIR/methods.rs:151:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -110,7 +110,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:156:13\n+  --> $DIR/methods.rs:155:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -120,15 +120,15 @@ LL | |                 );\n    | |_________________^\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:165:13\n+  --> $DIR/methods.rs:164:13\n    |\n LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n    |\n    = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:167:13\n+  --> $DIR/methods.rs:166:13\n    |\n LL |       let _ = opt.map_or(None, |x| {\n    |  _____________^\n@@ -144,7 +144,7 @@ LL |                        });\n    |\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:180:13\n+  --> $DIR/methods.rs:179:13\n    |\n LL |       let _ = res.map(|x| x + 1)\n    |  _____________^\n@@ -156,7 +156,7 @@ LL | |                .unwrap_or_else(|e| 0); // should lint even though this ca\n    = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:184:13\n+  --> $DIR/methods.rs:183:13\n    |\n LL |       let _ = res.map(|x| {\n    |  _____________^\n@@ -166,7 +166,7 @@ LL | |               ).unwrap_or_else(|e| 0);\n    | |_____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:188:13\n+  --> $DIR/methods.rs:187:13\n    |\n LL |       let _ = res.map(|x| x + 1)\n    |  _____________^\n@@ -176,7 +176,7 @@ LL | |                 );\n    | |_________________^\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:251:13\n+  --> $DIR/methods.rs:250:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -185,7 +185,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:254:13\n+  --> $DIR/methods.rs:253:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -195,7 +195,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:269:13\n+  --> $DIR/methods.rs:268:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -204,7 +204,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:272:13\n+  --> $DIR/methods.rs:271:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -214,15 +214,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:278:13\n+  --> $DIR/methods.rs:277:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:281:13\n+  --> $DIR/methods.rs:280:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -232,15 +232,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:287:13\n+  --> $DIR/methods.rs:286:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:290:13\n+  --> $DIR/methods.rs:289:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -250,151 +250,151 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:325:22\n+  --> $DIR/methods.rs:324:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/methods.rs:328:5\n+  --> $DIR/methods.rs:327:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:331:21\n+  --> $DIR/methods.rs:330:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:334:14\n+  --> $DIR/methods.rs:333:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:337:19\n+  --> $DIR/methods.rs:336:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:340:5\n+  --> $DIR/methods.rs:339:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:343:5\n+  --> $DIR/methods.rs:342:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:346:14\n+  --> $DIR/methods.rs:345:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:351:21\n+  --> $DIR/methods.rs:350:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:354:19\n+  --> $DIR/methods.rs:353:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:357:21\n+  --> $DIR/methods.rs:356:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:360:21\n+  --> $DIR/methods.rs:359:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:371:23\n+  --> $DIR/methods.rs:370:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:372:26\n+  --> $DIR/methods.rs:371:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:373:31\n+  --> $DIR/methods.rs:372:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:374:29\n+  --> $DIR/methods.rs:373:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:379:23\n+  --> $DIR/methods.rs:378:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:382:26\n+  --> $DIR/methods.rs:381:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:385:29\n+  --> $DIR/methods.rs:384:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/methods.rs:397:13\n+  --> $DIR/methods.rs:396:13\n    |\n LL |     let _ = some_vec.iter().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/methods.rs:398:13\n+  --> $DIR/methods.rs:397:13\n    |\n LL |     let _ = some_vec.iter().cycle().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/methods.rs:399:13\n+  --> $DIR/methods.rs:398:13\n    |\n LL |     let _ = (1..10).skip(10).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/methods.rs:400:14\n+  --> $DIR/methods.rs:399:14\n    |\n LL |     let _ = &some_vec[..].iter().skip(3).next();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:409:13\n+  --> $DIR/methods.rs:408:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}, {"sha": "07d0a6bb05ebd19265e55e1fc93a58fed50a05da", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -9,7 +9,7 @@\n \n #![feature(const_fn)]\n #![allow(dead_code)]\n-#![warn(clippy::new_without_default, clippy::new_without_default_derive)]\n+#![warn(clippy::new_without_default)]\n \n pub struct Foo;\n \n@@ -151,7 +151,7 @@ impl Allow {\n pub struct AllowDerive;\n \n impl AllowDerive {\n-    #[allow(clippy::new_without_default_derive)]\n+    #[allow(clippy::new_without_default)]\n     pub fn new() -> Self {\n         unimplemented!()\n     }"}, {"sha": "9157f60a7e49b81be42e2f4d91bf4bfe4f4b8be5", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -6,7 +6,7 @@ LL | |         Foo\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::new-without-default-derive` implied by `-D warnings`\n+   = note: `-D clippy::new-without-default` implied by `-D warnings`\n help: try this\n    |\n LL | #[derive(Default)]\n@@ -31,8 +31,6 @@ LL | /     pub fn new() -> LtKo<'c> {\n LL | |         unimplemented!()\n LL | |     }\n    | |_____^\n-   |\n-   = note: `-D clippy::new-without-default` implied by `-D warnings`\n help: try this\n    |\n LL | impl Default for LtKo<'c> {"}, {"sha": "eb08f1de63de5b16c5a33ca65910c23bf379dcca", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -11,3 +11,12 @@\n \n #[warn(clippy::stutter)]\n fn main() {}\n+\n+#[warn(clippy::new_without_default_derive)]\n+struct Foo;\n+\n+impl Foo {\n+    fn new() -> Self {\n+        Foo\n+    }\n+}"}, {"sha": "074e3527e8ad1bf28a7fa95c39eba81bd39d9a2e", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d127aed737e6efdf10e6f925f4a82db4dd30c399/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=d127aed737e6efdf10e6f925f4a82db4dd30c399", "patch": "@@ -14,5 +14,11 @@ LL | #[warn(clippy::stutter)]\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n-error: aborting due to 2 previous errors\n+error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n+  --> $DIR/rename.rs:15:8\n+   |\n+LL | #[warn(clippy::new_without_default_derive)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n+\n+error: aborting due to 3 previous errors\n "}]}