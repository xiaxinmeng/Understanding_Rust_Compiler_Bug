{"sha": "b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOTY0ZTYwYjcyYzJkMTBlOWZkNGU4MDE5OTBmOGFmM2YzMDZhYzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-20T07:01:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-20T07:01:00Z"}, "message": "Auto merge of #80163 - jackh726:binder-refactor-part-3, r=lcnr\n\nMake BoundRegion have a kind of BoungRegionKind\n\nSplit from #76814\n\nAlso includes making `replace_escaping_bound_vars` only return `T`\n\nGoing to r? `@lcnr`\nFeel free to reassign", "tree": {"sha": "5c922d403f94a6393c5492d9cefa3245a3930567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c922d403f94a6393c5492d9cefa3245a3930567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "html_url": "https://github.com/rust-lang/rust/commit/b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e32120c33d30ff526fc7f4d94ec9fce0dc10c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e32120c33d30ff526fc7f4d94ec9fce0dc10c9", "html_url": "https://github.com/rust-lang/rust/commit/29e32120c33d30ff526fc7f4d94ec9fce0dc10c9"}, {"sha": "328fcee4af7aed31343244206abb7dff25106d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/328fcee4af7aed31343244206abb7dff25106d04", "html_url": "https://github.com/rust-lang/rust/commit/328fcee4af7aed31343244206abb7dff25106d04"}], "stats": {"total": 364, "additions": 183, "deletions": 181}, "files": [{"sha": "76e1987459f875bd72b84240317f69ac066b8d03", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -64,7 +64,7 @@ pub(crate) fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx\n         ty::Generator(_, substs, _) => {\n             let sig = substs.as_generator().poly_sig();\n \n-            let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n+            let env_region = ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { kind: ty::BrEnv });\n             let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n             let pin_did = tcx.require_lang_item(rustc_hir::LangItem::Pin, None);"}, {"sha": "9002d251f12370841742938cb8452338f5a1a75d", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -625,7 +625,8 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n         let var = self.canonical_var(info, r.into());\n-        let region = ty::ReLateBound(self.binder_index, ty::BoundRegion::BrAnon(var.as_u32()));\n+        let br = ty::BoundRegion { kind: ty::BrAnon(var.as_u32()) };\n+        let region = ty::ReLateBound(self.binder_index, br);\n         self.tcx().mk_region(region)\n     }\n "}, {"sha": "387f480814ae767a9b927cd65217a26627cd9136", "filename": "compiler/rustc_infer/src/infer/canonical/substitute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -87,6 +87,6 @@ where\n             c => bug!(\"{:?} is a const but value is {:?}\", bound_ct, c),\n         };\n \n-        tcx.replace_escaping_bound_vars(value, fld_r, fld_t, fld_c).0\n+        tcx.replace_escaping_bound_vars(value, fld_r, fld_t, fld_c)\n     }\n }"}, {"sha": "6b7edde9a67aff756474a48c4ee55ae7bbd303c5", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -165,7 +165,9 @@ fn msg_span_from_early_bound_and_free_regions(\n             }\n             (format!(\"the lifetime `{}` as defined on\", br.name), sp)\n         }\n-        ty::ReFree(ty::FreeRegion { bound_region: ty::BoundRegion::BrNamed(_, name), .. }) => {\n+        ty::ReFree(ty::FreeRegion {\n+            bound_region: ty::BoundRegionKind::BrNamed(_, name), ..\n+        }) => {\n             let mut sp = sm.guess_head_span(tcx.hir().span(node));\n             if let Some(param) =\n                 tcx.hir().get_generics(scope).and_then(|generics| generics.get_named(name))\n@@ -2279,7 +2281,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         var_origin: RegionVariableOrigin,\n     ) -> DiagnosticBuilder<'tcx> {\n-        let br_string = |br: ty::BoundRegion| {\n+        let br_string = |br: ty::BoundRegionKind| {\n             let mut s = match br {\n                 ty::BrNamed(_, name) => name.to_string(),\n                 _ => String::new(),"}, {"sha": "b014b9832e783731c63f25f808846a1c1b21950b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -25,7 +25,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     pub(super) fn find_anon_type(\n         &self,\n         region: Region<'tcx>,\n-        br: &ty::BoundRegion,\n+        br: &ty::BoundRegionKind,\n     ) -> Option<(&hir::Ty<'tcx>, &hir::FnDecl<'tcx>)> {\n         if let Some(anon_reg) = self.tcx().is_suitable_region(region) {\n             let hir_id = self.tcx().hir().local_def_id_to_hir_id(anon_reg.def_id);\n@@ -56,7 +56,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     fn find_component_for_bound_region(\n         &self,\n         arg: &'tcx hir::Ty<'tcx>,\n-        br: &ty::BoundRegion,\n+        br: &ty::BoundRegionKind,\n     ) -> Option<&'tcx hir::Ty<'tcx>> {\n         let mut nested_visitor = FindNestedTypeVisitor {\n             tcx: self.tcx(),\n@@ -80,7 +80,7 @@ struct FindNestedTypeVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     // The bound_region corresponding to the Refree(freeregion)\n     // associated with the anonymous region we are looking for.\n-    bound_region: ty::BoundRegion,\n+    bound_region: ty::BoundRegionKind,\n     // The type where the anonymous lifetime appears\n     // for e.g., Vec<`&u8`> and <`&u8`>\n     found_type: Option<&'tcx hir::Ty<'tcx>>,\n@@ -207,7 +207,7 @@ impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n struct TyPathVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     found_it: bool,\n-    bound_region: ty::BoundRegion,\n+    bound_region: ty::BoundRegionKind,\n     current_index: ty::DebruijnIndex,\n }\n "}, {"sha": "17a56046a5cc89b39c2c2b5611f4c89655b90d70", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -14,8 +14,8 @@ pub(super) struct AnonymousParamInfo<'tcx> {\n     pub param: &'tcx hir::Param<'tcx>,\n     /// The type corresponding to the anonymous region parameter.\n     pub param_ty: Ty<'tcx>,\n-    /// The ty::BoundRegion corresponding to the anonymous region.\n-    pub bound_region: ty::BoundRegion,\n+    /// The ty::BoundRegionKind corresponding to the anonymous region.\n+    pub bound_region: ty::BoundRegionKind,\n     /// The `Span` of the parameter type.\n     pub param_ty_span: Span,\n     /// Signals that the argument is the first parameter in the declaration.\n@@ -43,7 +43,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n             ty::ReEarlyBound(ebr) => (\n                 self.tcx().parent(ebr.def_id).unwrap(),\n-                ty::BoundRegion::BrNamed(ebr.def_id, ebr.name),\n+                ty::BoundRegionKind::BrNamed(ebr.def_id, ebr.name),\n             ),\n             _ => return None, // not a free region\n         };\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     pub(super) fn is_return_type_anon(\n         &self,\n         scope_def_id: LocalDefId,\n-        br: ty::BoundRegion,\n+        br: ty::BoundRegionKind,\n         decl: &hir::FnDecl<'_>,\n     ) -> Option<Span> {\n         let ret_ty = self.tcx().type_of(scope_def_id);"}, {"sha": "e794903fca3aaefb15fff95dabff9879fb9a3399", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -77,10 +77,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // (i.e., if there are no placeholders).\n         let next_universe = self.universe().next_universe();\n \n-        let fld_r = |br| {\n+        let fld_r = |br: ty::BoundRegion| {\n             self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n                 universe: next_universe,\n-                name: br,\n+                name: br.kind,\n             }))\n         };\n "}, {"sha": "069f708856ea46a1bd46f7cdfb5c7da80077ca60", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -450,7 +450,7 @@ pub enum RegionVariableOrigin {\n \n     /// Region variables created for bound regions\n     /// in a function or method that is called\n-    LateBoundRegion(Span, ty::BoundRegion, LateBoundRegionConversionTime),\n+    LateBoundRegion(Span, ty::BoundRegionKind, LateBoundRegionConversionTime),\n \n     UpvarRegion(ty::UpvarId, Span),\n \n@@ -1421,7 +1421,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let fld_r = |br| self.next_region_var(LateBoundRegion(span, br, lbrct));\n+        let fld_r =\n+            |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));\n         let fld_t = |_| {\n             self.next_ty_var(TypeVariableOrigin {\n                 kind: TypeVariableOriginKind::MiscVariable,"}, {"sha": "97ef685cf6f82f0543e68cee40002edc260083c1", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -176,7 +176,7 @@ where\n                         universe\n                     });\n \n-                    let placeholder = ty::PlaceholderRegion { universe, name: br };\n+                    let placeholder = ty::PlaceholderRegion { universe, name: br.kind };\n                     delegate.next_placeholder_region(placeholder)\n                 } else {\n                     delegate.next_existential_region_var(true)"}, {"sha": "573b514e8445f5acb7d4bee0ae1fa2fef662b161", "filename": "compiler/rustc_middle/src/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_ty.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -70,16 +70,16 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionKind {\n             ty::ReEmpty(universe) => {\n                 universe.hash_stable(hcx, hasher);\n             }\n-            ty::ReLateBound(db, ty::BrAnon(i)) => {\n+            ty::ReLateBound(db, ty::BoundRegion { kind: ty::BrAnon(i) }) => {\n                 db.hash_stable(hcx, hasher);\n                 i.hash_stable(hcx, hasher);\n             }\n-            ty::ReLateBound(db, ty::BrNamed(def_id, name)) => {\n+            ty::ReLateBound(db, ty::BoundRegion { kind: ty::BrNamed(def_id, name) }) => {\n                 db.hash_stable(hcx, hasher);\n                 def_id.hash_stable(hcx, hasher);\n                 name.hash_stable(hcx, hasher);\n             }\n-            ty::ReLateBound(db, ty::BrEnv) => {\n+            ty::ReLateBound(db, ty::BoundRegion { kind: ty::BrEnv }) => {\n                 db.hash_stable(hcx, hasher);\n             }\n             ty::ReEarlyBound(ty::EarlyBoundRegion { def_id, index, name }) => {"}, {"sha": "e106db38b2c9a3f4d9a6905486a9dadf18819623", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -323,9 +323,10 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                     GenericArgKind::Type(..) => {\n                         tcx.mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i).into())).into()\n                     }\n-                    GenericArgKind::Lifetime(..) => tcx\n-                        .mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(i)))\n-                        .into(),\n+                    GenericArgKind::Lifetime(..) => {\n+                        let br = ty::BoundRegion { kind: ty::BrAnon(i) };\n+                        tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n+                    }\n                     GenericArgKind::Const(ct) => tcx\n                         .mk_const(ty::Const {\n                             ty: ct.ty,"}, {"sha": "4205e2ca5aa61d526d8b992c911cc516b34a723a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -890,7 +890,7 @@ pub struct FreeRegionInfo {\n     // `LocalDefId` corresponding to FreeRegion\n     pub def_id: LocalDefId,\n     // the bound region corresponding to FreeRegion\n-    pub boundregion: ty::BoundRegion,\n+    pub boundregion: ty::BoundRegionKind,\n     // checks if bound region is in Impl Item\n     pub is_impl_item: bool,\n }\n@@ -1412,15 +1412,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    // Returns the `DefId` and the `BoundRegion` corresponding to the given region.\n+    // Returns the `DefId` and the `BoundRegionKind` corresponding to the given region.\n     pub fn is_suitable_region(self, region: Region<'tcx>) -> Option<FreeRegionInfo> {\n         let (suitable_region_binding_scope, bound_region) = match *region {\n             ty::ReFree(ref free_region) => {\n                 (free_region.scope.expect_local(), free_region.bound_region)\n             }\n             ty::ReEarlyBound(ref ebr) => (\n                 self.parent(ebr.def_id).unwrap().expect_local(),\n-                ty::BoundRegion::BrNamed(ebr.def_id, ebr.name),\n+                ty::BoundRegionKind::BrNamed(ebr.def_id, ebr.name),\n             ),\n             _ => return None, // not a free region\n         };"}, {"sha": "fc02e78b2fadf240a840894e59e4522f8e9133d1", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -1,6 +1,6 @@\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::diagnostics::suggest_constraining_type_param;\n-use crate::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n+use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n use rustc_ast as ast;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, DiagnosticBuilder};\n@@ -42,8 +42,8 @@ pub enum TypeError<'tcx> {\n     ArgCount,\n \n     RegionsDoesNotOutlive(Region<'tcx>, Region<'tcx>),\n-    RegionsInsufficientlyPolymorphic(BoundRegion, Region<'tcx>),\n-    RegionsOverlyPolymorphic(BoundRegion, Region<'tcx>),\n+    RegionsInsufficientlyPolymorphic(BoundRegionKind, Region<'tcx>),\n+    RegionsOverlyPolymorphic(BoundRegionKind, Region<'tcx>),\n     RegionsPlaceholderMismatch,\n \n     Sorts(ExpectedFound<Ty<'tcx>>),\n@@ -94,7 +94,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             }\n         }\n \n-        let br_string = |br: ty::BoundRegion| match br {\n+        let br_string = |br: ty::BoundRegionKind| match br {\n             ty::BrNamed(_, name) => format!(\" {}\", name),\n             _ => String::new(),\n         };"}, {"sha": "382f3708c3d4bd7f7e3464844ce9a2fd5fd58ed3", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 24, "deletions": 33, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -534,8 +534,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// results returned by the closure; the closure is expected to\n     /// return a free region (relative to this binder), and hence the\n     /// binder is removed in the return type. The closure is invoked\n-    /// once for each unique `BoundRegion`; multiple references to the\n-    /// same `BoundRegion` will reuse the previous result. A map is\n+    /// once for each unique `BoundRegionKind`; multiple references to the\n+    /// same `BoundRegionKind` will reuse the previous result. A map is\n     /// returned at the end with each bound region and the free region\n     /// that replaced it.\n     ///\n@@ -544,7 +544,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn replace_late_bound_regions<T, F>(\n         self,\n         value: Binder<T>,\n-        fld_r: F,\n+        mut fld_r: F,\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n     where\n         F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n@@ -555,7 +555,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         let fld_c = |bound_ct, ty| {\n             self.mk_const(ty::Const { val: ty::ConstKind::Bound(ty::INNERMOST, bound_ct), ty })\n         };\n-        self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t, fld_c)\n+        let mut region_map = BTreeMap::new();\n+        let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));\n+        let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);\n+        (value, region_map)\n     }\n \n     /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping\n@@ -567,34 +570,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         mut fld_r: F,\n         mut fld_t: G,\n         mut fld_c: H,\n-    ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n+    ) -> T\n     where\n         F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n         G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n         H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,\n         T: TypeFoldable<'tcx>,\n     {\n-        use rustc_data_structures::fx::FxHashMap;\n-\n-        let mut region_map = BTreeMap::new();\n-        let mut type_map = FxHashMap::default();\n-        let mut const_map = FxHashMap::default();\n-\n         if !value.has_escaping_bound_vars() {\n-            (value, region_map)\n+            value\n         } else {\n-            let mut real_fld_r = |br| *region_map.entry(br).or_insert_with(|| fld_r(br));\n-\n-            let mut real_fld_t =\n-                |bound_ty| *type_map.entry(bound_ty).or_insert_with(|| fld_t(bound_ty));\n-\n-            let mut real_fld_c =\n-                |bound_ct, ty| *const_map.entry(bound_ct).or_insert_with(|| fld_c(bound_ct, ty));\n-\n-            let mut replacer =\n-                BoundVarReplacer::new(self, &mut real_fld_r, &mut real_fld_t, &mut real_fld_c);\n-            let result = value.fold_with(&mut replacer);\n-            (result, region_map)\n+            let mut replacer = BoundVarReplacer::new(self, &mut fld_r, &mut fld_t, &mut fld_c);\n+            value.fold_with(&mut replacer)\n         }\n     }\n \n@@ -604,7 +591,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn replace_bound_vars<T, F, G, H>(\n         self,\n         value: Binder<T>,\n-        fld_r: F,\n+        mut fld_r: F,\n         fld_t: G,\n         fld_c: H,\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n@@ -614,7 +601,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,\n         T: TypeFoldable<'tcx>,\n     {\n-        self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t, fld_c)\n+        let mut region_map = BTreeMap::new();\n+        let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));\n+        let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);\n+        (value, region_map)\n     }\n \n     /// Replaces any late-bound regions bound in `value` with\n@@ -626,7 +616,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.replace_late_bound_regions(value, |br| {\n             self.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: all_outlive_scope,\n-                bound_region: br,\n+                bound_region: br.kind,\n             }))\n         })\n         .0\n@@ -639,7 +629,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn collect_constrained_late_bound_regions<T>(\n         self,\n         value: &Binder<T>,\n-    ) -> FxHashSet<ty::BoundRegion>\n+    ) -> FxHashSet<ty::BoundRegionKind>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -650,7 +640,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn collect_referenced_late_bound_regions<T>(\n         self,\n         value: &Binder<T>,\n-    ) -> FxHashSet<ty::BoundRegion>\n+    ) -> FxHashSet<ty::BoundRegionKind>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -661,7 +651,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         value: &Binder<T>,\n         just_constraint: bool,\n-    ) -> FxHashSet<ty::BoundRegion>\n+    ) -> FxHashSet<ty::BoundRegionKind>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -695,7 +685,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut counter = 0;\n         Binder::bind(\n             self.replace_late_bound_regions(sig, |_| {\n-                let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(counter)));\n+                let br = ty::BoundRegion { kind: ty::BrAnon(counter) };\n+                let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));\n                 counter += 1;\n                 r\n             })\n@@ -955,7 +946,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n /// into a hash set.\n struct LateBoundRegionsCollector {\n     current_index: ty::DebruijnIndex,\n-    regions: FxHashSet<ty::BoundRegion>,\n+    regions: FxHashSet<ty::BoundRegionKind>,\n \n     /// `true` if we only want regions that are known to be\n     /// \"constrained\" when you equate this type with another type. In\n@@ -1014,7 +1005,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::ReLateBound(debruijn, br) = *r {\n             if debruijn == self.current_index {\n-                self.regions.insert(br);\n+                self.regions.insert(br.kind);\n             }\n         }\n         ControlFlow::CONTINUE"}, {"sha": "b545b92c9252a5efd36db54c96fe39d9253528f1", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -2455,7 +2455,8 @@ impl<'tcx> ty::Instance<'tcx> {\n             ty::Generator(_, substs, _) => {\n                 let sig = substs.as_generator().poly_sig();\n \n-                let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n+                let br = ty::BoundRegion { kind: ty::BrEnv };\n+                let env_region = ty::ReLateBound(ty::INNERMOST, br);\n                 let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n                 let pin_did = tcx.require_lang_item(LangItem::Pin, None);"}, {"sha": "c163a37c5a11e0529daf8c985e8e0565bbe18eb5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -51,13 +51,13 @@ use std::ops::{ControlFlow, Range};\n use std::ptr;\n use std::str;\n \n-pub use self::sty::BoundRegion::*;\n+pub use self::sty::BoundRegionKind::*;\n pub use self::sty::InferTy::*;\n pub use self::sty::RegionKind;\n pub use self::sty::RegionKind::*;\n pub use self::sty::TyKind::*;\n pub use self::sty::{Binder, BoundTy, BoundTyKind, BoundVar};\n-pub use self::sty::{BoundRegion, EarlyBoundRegion, FreeRegion, Region};\n+pub use self::sty::{BoundRegion, BoundRegionKind, EarlyBoundRegion, FreeRegion, Region};\n pub use self::sty::{CanonicalPolyFnSig, FnSig, GenSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, TypeAndMut, UpvarSubsts};\n pub use self::sty::{ClosureSubstsParts, GeneratorSubstsParts};\n@@ -1607,7 +1607,7 @@ where\n     }\n }\n \n-pub type PlaceholderRegion = Placeholder<BoundRegion>;\n+pub type PlaceholderRegion = Placeholder<BoundRegionKind>;\n \n pub type PlaceholderType = Placeholder<BoundVar>;\n "}, {"sha": "9b178d9d2bd008cc93d9b9c42f9ecbf8b7216a51", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -125,13 +125,13 @@ pub struct RegionHighlightMode {\n     highlight_regions: [Option<(ty::RegionKind, usize)>; 3],\n \n     /// If enabled, when printing a \"free region\" that originated from\n-    /// the given `ty::BoundRegion`, print it as \"`'1`\". Free regions that would ordinarily\n+    /// the given `ty::BoundRegionKind`, print it as \"`'1`\". Free regions that would ordinarily\n     /// have names print as normal.\n     ///\n     /// This is used when you have a signature like `fn foo(x: &u32,\n     /// y: &'a u32)` and we want to give a name to the region of the\n     /// reference `x`.\n-    highlight_bound_region: Option<(ty::BoundRegion, usize)>,\n+    highlight_bound_region: Option<(ty::BoundRegionKind, usize)>,\n }\n \n impl RegionHighlightMode {\n@@ -175,7 +175,7 @@ impl RegionHighlightMode {\n     /// Highlight the given bound region.\n     /// We can only highlight one bound region at a time. See\n     /// the field `highlight_bound_region` for more detailed notes.\n-    pub fn highlighting_bound_region(&mut self, br: ty::BoundRegion, number: usize) {\n+    pub fn highlighting_bound_region(&mut self, br: ty::BoundRegionKind, number: usize) {\n         assert!(self.highlight_bound_region.is_none());\n         self.highlight_bound_region = Some((br, number));\n     }\n@@ -1611,7 +1611,7 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n                 data.name != kw::Invalid && data.name != kw::UnderscoreLifetime\n             }\n \n-            ty::ReLateBound(_, br)\n+            ty::ReLateBound(_, ty::BoundRegion { kind: br })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n             | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n@@ -1690,7 +1690,7 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n                     return Ok(self);\n                 }\n             }\n-            ty::ReLateBound(_, br)\n+            ty::ReLateBound(_, ty::BoundRegion { kind: br })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n             | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n@@ -1779,10 +1779,10 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         let mut region_index = self.region_index;\n         let new_value = self.tcx.replace_late_bound_regions(value.clone(), |br| {\n             let _ = start_or_continue(&mut self, \"for<\", \", \");\n-            let br = match br {\n+            let kind = match br.kind {\n                 ty::BrNamed(_, name) => {\n                     let _ = write!(self, \"{}\", name);\n-                    br\n+                    br.kind\n                 }\n                 ty::BrAnon(_) | ty::BrEnv => {\n                     let name = loop {\n@@ -1796,7 +1796,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n                     ty::BrNamed(DefId::local(CRATE_DEF_INDEX), name)\n                 }\n             };\n-            self.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br))\n+            self.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { kind }))\n         });\n         start_or_continue(&mut self, \"\", \"> \")?;\n \n@@ -1840,7 +1840,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         struct LateBoundRegionNameCollector<'a>(&'a mut FxHashSet<Symbol>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if let ty::ReLateBound(_, ty::BrNamed(_, name)) = *r {\n+                if let ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name) }) = *r {\n                     self.0.insert(name);\n                 }\n                 r.super_visit_with(self)"}, {"sha": "7a1ca6a6c2bfc21a657a156cf4fb47253e9ece1d", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -65,7 +65,7 @@ impl fmt::Debug for ty::adjustment::Adjustment<'tcx> {\n     }\n }\n \n-impl fmt::Debug for ty::BoundRegion {\n+impl fmt::Debug for ty::BoundRegionKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ty::BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n@@ -308,13 +308,13 @@ TrivialTypeFoldableAndLiftImpls! {\n     crate::traits::Reveal,\n     crate::ty::adjustment::AutoBorrowMutability,\n     crate::ty::AdtKind,\n-    // Including `BoundRegion` is a *bit* dubious, but direct\n+    // Including `BoundRegionKind` is a *bit* dubious, but direct\n     // references to bound region appear in `ty::Error`, and aren't\n     // really meant to be folded. In general, we can only fold a fully\n     // general `Region`.\n-    crate::ty::BoundRegion,\n+    crate::ty::BoundRegionKind,\n     crate::ty::AssocItem,\n-    crate::ty::Placeholder<crate::ty::BoundRegion>,\n+    crate::ty::Placeholder<crate::ty::BoundRegionKind>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,\n     crate::ty::InferTy,"}, {"sha": "81ee05d4b23cabcf00e98f208ccefcefaed309c3", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -40,12 +40,12 @@ pub struct TypeAndMut<'tcx> {\n /// at least as big as the scope `fr.scope`\".\n pub struct FreeRegion {\n     pub scope: DefId,\n-    pub bound_region: BoundRegion,\n+    pub bound_region: BoundRegionKind,\n }\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]\n #[derive(HashStable)]\n-pub enum BoundRegion {\n+pub enum BoundRegionKind {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(u32),\n \n@@ -60,26 +60,34 @@ pub enum BoundRegion {\n     BrEnv,\n }\n \n-impl BoundRegion {\n-    pub fn is_named(&self) -> bool {\n-        match *self {\n-            BoundRegion::BrNamed(_, name) => name != kw::UnderscoreLifetime,\n-            _ => false,\n-        }\n-    }\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]\n+#[derive(HashStable)]\n+pub struct BoundRegion {\n+    pub kind: BoundRegionKind,\n+}\n \n+impl BoundRegion {\n     /// When canonicalizing, we replace unbound inference variables and free\n     /// regions with anonymous late bound regions. This method asserts that\n     /// we have an anonymous late bound region, which hence may refer to\n     /// a canonical variable.\n     pub fn assert_bound_var(&self) -> BoundVar {\n-        match *self {\n-            BoundRegion::BrAnon(var) => BoundVar::from_u32(var),\n+        match self.kind {\n+            BoundRegionKind::BrAnon(var) => BoundVar::from_u32(var),\n             _ => bug!(\"bound region is not anonymous\"),\n         }\n     }\n }\n \n+impl BoundRegionKind {\n+    pub fn is_named(&self) -> bool {\n+        match *self {\n+            BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,\n+            _ => false,\n+        }\n+    }\n+}\n+\n /// N.B., if you change this, you'll probably want to change the corresponding\n /// AST structure in `librustc_ast/ast.rs` as well.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]\n@@ -1551,7 +1559,7 @@ impl RegionKind {\n     pub fn has_name(&self) -> bool {\n         match *self {\n             RegionKind::ReEarlyBound(ebr) => ebr.has_name(),\n-            RegionKind::ReLateBound(_, br) => br.is_named(),\n+            RegionKind::ReLateBound(_, br) => br.kind.is_named(),\n             RegionKind::ReFree(fr) => fr.bound_region.is_named(),\n             RegionKind::ReStatic => true,\n             RegionKind::ReVar(..) => false,"}, {"sha": "a64580336ad62f71e5436437d1e919a4bf5a1146", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -503,7 +503,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         closure_substs: SubstsRef<'tcx>,\n     ) -> Option<ty::Binder<Ty<'tcx>>> {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n-        let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n+        let br = ty::BoundRegion { kind: ty::BrEnv };\n+        let env_region = ty::ReLateBound(ty::INNERMOST, br);\n         let closure_kind_ty = closure_substs.as_closure().kind_ty();\n         let closure_kind = closure_kind_ty.to_opt_closure_kind()?;\n         let env_ty = match closure_kind {"}, {"sha": "81571fd73003fb448587f786462b289c693b792b", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -496,7 +496,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // lifetimes without names with the value `'0`.\n         match ty.kind() {\n             ty::Ref(\n-                ty::RegionKind::ReLateBound(_, br)\n+                ty::RegionKind::ReLateBound(_, ty::BoundRegion { kind: br })\n                 | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }),\n                 _,\n                 _,\n@@ -517,7 +517,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let region = match ty.kind() {\n             ty::Ref(region, _, _) => {\n                 match region {\n-                    ty::RegionKind::ReLateBound(_, br)\n+                    ty::RegionKind::ReLateBound(_, ty::BoundRegion { kind: br })\n                     | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n                         printer.region_highlight_mode.highlighting_bound_region(*br, counter)\n                     }"}, {"sha": "78da43c31c0fbc134c991ff97ad52f99abcf6998", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// Returns `true` if a closure is inferred to be an `FnMut` closure.\n     fn is_closure_fn_mut(&self, fr: RegionVid) -> bool {\n         if let Some(ty::ReFree(free_region)) = self.to_error_region(fr) {\n-            if let ty::BoundRegion::BrEnv = free_region.bound_region {\n+            if let ty::BoundRegionKind::BrEnv = free_region.bound_region {\n                 if let DefiningTy::Closure(_, substs) =\n                     self.regioncx.universal_regions().defining_ty\n                 {"}, {"sha": "cbca012824f82358d27b8f116cb9db0afb21b0ab", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -281,7 +281,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             }\n \n             ty::ReFree(free_region) => match free_region.bound_region {\n-                ty::BoundRegion::BrNamed(region_def_id, name) => {\n+                ty::BoundRegionKind::BrNamed(region_def_id, name) => {\n                     // Get the span to point to, even if we don't use the name.\n                     let span = tcx.hir().span_if_local(region_def_id).unwrap_or(DUMMY_SP);\n                     debug!(\n@@ -307,7 +307,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     }\n                 }\n \n-                ty::BoundRegion::BrEnv => {\n+                ty::BoundRegionKind::BrEnv => {\n                     let def_ty = self.regioncx.universal_regions().defining_ty;\n \n                     if let DefiningTy::Closure(_, substs) = def_ty {\n@@ -349,7 +349,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     }\n                 }\n \n-                ty::BoundRegion::BrAnon(_) => None,\n+                ty::BoundRegionKind::BrAnon(_) => None,\n             },\n \n             ty::ReLateBound(..)"}, {"sha": "c1a0d9856b7ea79e4ae7ebaa0e973a04768e03b6", "filename": "compiler/rustc_mir/src/borrow_check/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -700,7 +700,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n             debug!(\"replace_bound_regions_with_nll_infer_vars: br={:?}\", br);\n             let liberated_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: all_outlive_scope.to_def_id(),\n-                bound_region: br,\n+                bound_region: br.kind,\n             }));\n             let region_vid = self.next_nll_region_var(origin);\n             indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n@@ -795,7 +795,7 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n             let region_def_id = tcx.hir().local_def_id(hir_id);\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: fn_def_id,\n-                bound_region: ty::BoundRegion::BrNamed(region_def_id.to_def_id(), name),\n+                bound_region: ty::BoundRegionKind::BrNamed(region_def_id.to_def_id(), name),\n             }));\n             f(liberated_region);\n         }"}, {"sha": "7b6e6ad0696a15f153f3f8436f05b7c54cba38b5", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -319,7 +319,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n \n             // Late-bound lifetimes use indices starting at 1,\n             // see `BinderLevel` for more details.\n-            ty::ReLateBound(debruijn, ty::BrAnon(i)) => {\n+            ty::ReLateBound(debruijn, ty::BoundRegion { kind: ty::BrAnon(i) }) => {\n                 let binder = &self.binders[self.binders.len() - 1 - debruijn.index()];\n                 let depth = binder.lifetime_depths.start + i;\n "}, {"sha": "1893d74335ab834665d104979c21ed9cbe7b3dec", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -648,7 +648,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n /// Creates a `InternalSubsts` that maps each generic parameter to a higher-ranked\n /// var bound at index `0`. For types, we use a `BoundVar` index equal to\n-/// the type parameter index. For regions, we use the `BoundRegion::BrNamed`\n+/// the type parameter index. For regions, we use the `BoundRegionKind::BrNamed`\n /// variant (which has a `DefId`).\n fn bound_vars_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n     InternalSubsts::for_item(tcx, def_id, |param, substs| match param.kind {\n@@ -662,12 +662,10 @@ fn bound_vars_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n             ))\n             .into(),\n \n-        ty::GenericParamDefKind::Lifetime => tcx\n-            .mk_region(ty::RegionKind::ReLateBound(\n-                ty::INNERMOST,\n-                ty::BoundRegion::BrAnon(substs.len() as u32),\n-            ))\n-            .into(),\n+        ty::GenericParamDefKind::Lifetime => {\n+            let br = ty::BoundRegion { kind: ty::BrAnon(substs.len() as u32) };\n+            tcx.mk_region(ty::RegionKind::ReLateBound(ty::INNERMOST, br)).into()\n+        }\n \n         ty::GenericParamDefKind::Const => tcx\n             .mk_const(ty::Const {"}, {"sha": "8aa68e533a2e1f1c53544684a5ace83d08d96b15", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -35,9 +35,7 @@ use rustc_ast::ast;\n use rustc_middle::traits::{ChalkEnvironmentAndGoal, ChalkRustInterner as RustInterner};\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{\n-    self, Binder, BoundRegion, Region, RegionKind, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n-};\n+use rustc_middle::ty::{self, Binder, Region, RegionKind, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::def_id::DefId;\n \n use chalk_ir::{FnSig, ForeignDefId};\n@@ -444,15 +442,15 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n             ReEarlyBound(_) => {\n                 panic!(\"Should have already been substituted.\");\n             }\n-            ReLateBound(db, br) => match br {\n-                ty::BoundRegion::BrAnon(var) => {\n+            ReLateBound(db, br) => match br.kind {\n+                ty::BoundRegionKind::BrAnon(var) => {\n                     chalk_ir::LifetimeData::BoundVar(chalk_ir::BoundVar::new(\n                         chalk_ir::DebruijnIndex::new(db.as_u32()),\n-                        *var as usize,\n+                        var as usize,\n                     ))\n                     .intern(interner)\n                 }\n-                ty::BoundRegion::BrNamed(_def_id, _name) => unimplemented!(),\n+                ty::BoundRegionKind::BrNamed(_def_id, _name) => unimplemented!(),\n                 ty::BrEnv => unimplemented!(),\n             },\n             ReFree(_) => unimplemented!(),\n@@ -477,13 +475,13 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n         let kind = match self.data(interner) {\n             chalk_ir::LifetimeData::BoundVar(var) => ty::RegionKind::ReLateBound(\n                 ty::DebruijnIndex::from_u32(var.debruijn.depth()),\n-                ty::BoundRegion::BrAnon(var.index as u32),\n+                ty::BoundRegion { kind: ty::BrAnon(var.index as u32) },\n             ),\n             chalk_ir::LifetimeData::InferenceVar(_var) => unimplemented!(),\n             chalk_ir::LifetimeData::Placeholder(p) => {\n                 ty::RegionKind::RePlaceholder(ty::Placeholder {\n                     universe: ty::UniverseIndex::from_usize(p.ui.counter),\n-                    name: ty::BoundRegion::BrAnon(p.idx as u32),\n+                    name: ty::BoundRegionKind::BrAnon(p.idx as u32),\n                 })\n             }\n             chalk_ir::LifetimeData::Static => ty::RegionKind::ReStatic,\n@@ -805,7 +803,7 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>\n }\n \n /// To collect bound vars, we have to do two passes. In the first pass, we\n-/// collect all `BoundRegion`s and `ty::Bound`s. In the second pass, we then\n+/// collect all `BoundRegionKind`s and `ty::Bound`s. In the second pass, we then\n /// replace `BrNamed` into `BrAnon`. The two separate passes are important,\n /// since we can only replace `BrNamed` with `BrAnon`s with indices *after* all\n /// \"real\" `BrAnon`s.\n@@ -893,14 +891,14 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n \n     fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match r {\n-            ty::ReLateBound(index, br) if *index == self.binder_index => match br {\n-                ty::BoundRegion::BrNamed(def_id, _name) => {\n-                    if self.named_parameters.iter().find(|d| *d == def_id).is_none() {\n-                        self.named_parameters.push(*def_id);\n+            ty::ReLateBound(index, br) if *index == self.binder_index => match br.kind {\n+                ty::BoundRegionKind::BrNamed(def_id, _name) => {\n+                    if self.named_parameters.iter().find(|d| **d == def_id).is_none() {\n+                        self.named_parameters.push(def_id);\n                     }\n                 }\n \n-                ty::BoundRegion::BrAnon(var) => match self.parameters.entry(*var) {\n+                ty::BoundRegionKind::BrAnon(var) => match self.parameters.entry(var) {\n                     Entry::Vacant(entry) => {\n                         entry.insert(chalk_ir::VariableKind::Lifetime);\n                     }\n@@ -926,7 +924,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     }\n }\n \n-/// This is used to replace `BoundRegion::BrNamed` with `BoundRegion::BrAnon`.\n+/// This is used to replace `BoundRegionKind::BrNamed` with `BoundRegionKind::BrAnon`.\n /// Note: we assume that we will always have room for more bound vars. (i.e. we\n /// won't ever hit the `u32` limit in `BrAnon`s).\n struct NamedBoundVarSubstitutor<'a, 'tcx> {\n@@ -955,20 +953,16 @@ impl<'a, 'tcx> TypeFolder<'tcx> for NamedBoundVarSubstitutor<'a, 'tcx> {\n \n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n         match r {\n-            ty::ReLateBound(index, br) if *index == self.binder_index => match br {\n-                ty::BoundRegion::BrNamed(def_id, _name) => {\n-                    match self.named_parameters.get(def_id) {\n-                        Some(idx) => {\n-                            return self.tcx.mk_region(RegionKind::ReLateBound(\n-                                *index,\n-                                BoundRegion::BrAnon(*idx),\n-                            ));\n-                        }\n-                        None => panic!(\"Missing `BrNamed`.\"),\n+            ty::ReLateBound(index, br) if *index == self.binder_index => match br.kind {\n+                ty::BrNamed(def_id, _name) => match self.named_parameters.get(&def_id) {\n+                    Some(idx) => {\n+                        let new_br = ty::BoundRegion { kind: ty::BrAnon(*idx) };\n+                        return self.tcx.mk_region(RegionKind::ReLateBound(*index, new_br));\n                     }\n-                }\n+                    None => panic!(\"Missing `BrNamed`.\"),\n+                },\n                 ty::BrEnv => unimplemented!(),\n-                ty::BoundRegion::BrAnon(_) => {}\n+                ty::BrAnon(_) => {}\n             },\n             _ => (),\n         };\n@@ -1044,17 +1038,15 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n             // FIXME(chalk) - jackh726 - this currently isn't hit in any tests.\n             // This covers any region variables in a goal, right?\n             ty::ReEarlyBound(_re) => match self.named_regions.get(&_re.def_id) {\n-                Some(idx) => self.tcx.mk_region(RegionKind::ReLateBound(\n-                    self.binder_index,\n-                    BoundRegion::BrAnon(*idx),\n-                )),\n+                Some(idx) => {\n+                    let br = ty::BoundRegion { kind: ty::BrAnon(*idx) };\n+                    self.tcx.mk_region(RegionKind::ReLateBound(self.binder_index, br))\n+                }\n                 None => {\n                     let idx = self.named_regions.len() as u32;\n+                    let br = ty::BoundRegion { kind: ty::BrAnon(idx) };\n                     self.named_regions.insert(_re.def_id, idx);\n-                    self.tcx.mk_region(RegionKind::ReLateBound(\n-                        self.binder_index,\n-                        BoundRegion::BrAnon(idx),\n-                    ))\n+                    self.tcx.mk_region(RegionKind::ReLateBound(self.binder_index, br))\n                 }\n             },\n \n@@ -1096,7 +1088,7 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n     fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match r {\n             ty::RePlaceholder(p) if p.universe == self.universe_index => {\n-                if let ty::BoundRegion::BrAnon(anon) = p.name {\n+                if let ty::BoundRegionKind::BrAnon(anon) = p.name {\n                     self.next_anon_region_placeholder = self.next_anon_region_placeholder.max(anon);\n                 }\n             }"}, {"sha": "f3a55fec9e4627dd049efd1f25164e27ab0e9382", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -44,7 +44,7 @@ crate fn evaluate_goal<'tcx>(\n \n     let reempty_placeholder = tcx.mk_region(ty::RegionKind::RePlaceholder(ty::Placeholder {\n         universe: ty::UniverseIndex::ROOT,\n-        name: ty::BoundRegion::BrAnon(placeholders_collector.next_anon_region_placeholder + 1),\n+        name: ty::BoundRegionKind::BrAnon(placeholders_collector.next_anon_region_placeholder + 1),\n     }));\n \n     let mut params_substitutor ="}, {"sha": "38d33e5586644a55180f4cecda360e6b7ffcf7e9", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -196,11 +196,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             Some(rl::Region::LateBound(debruijn, id, _)) => {\n                 let name = lifetime_name(id.expect_local());\n-                tcx.mk_region(ty::ReLateBound(debruijn, ty::BrNamed(id, name)))\n+                let br = ty::BoundRegion { kind: ty::BrNamed(id, name) };\n+                tcx.mk_region(ty::ReLateBound(debruijn, br))\n             }\n \n             Some(rl::Region::LateBoundAnon(debruijn, index)) => {\n-                tcx.mk_region(ty::ReLateBound(debruijn, ty::BrAnon(index)))\n+                let br = ty::BoundRegion { kind: ty::BrAnon(index) };\n+                tcx.mk_region(ty::ReLateBound(debruijn, br))\n             }\n \n             Some(rl::Region::EarlyBound(index, id, _)) => {\n@@ -2295,8 +2297,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     fn validate_late_bound_regions(\n         &self,\n-        constrained_regions: FxHashSet<ty::BoundRegion>,\n-        referenced_regions: FxHashSet<ty::BoundRegion>,\n+        constrained_regions: FxHashSet<ty::BoundRegionKind>,\n+        referenced_regions: FxHashSet<ty::BoundRegionKind>,\n         generate_err: impl Fn(&str) -> rustc_errors::DiagnosticBuilder<'tcx>,\n     ) {\n         for br in referenced_regions.difference(&constrained_regions) {"}, {"sha": "91708465b3f60be3a4f466a3507cfb46c64707e6", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -186,7 +186,8 @@ pub fn resolve_interior<'a, 'tcx>(\n                 // which means that none of the regions inside relate to any other, even if\n                 // typeck had previously found constraints that would cause them to be related.\n                 let folded = fcx.tcx.fold_regions(erased, &mut false, |_, current_depth| {\n-                    let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)));\n+                    let br = ty::BoundRegion { kind: ty::BrAnon(counter) };\n+                    let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, br));\n                     counter += 1;\n                     r\n                 });"}, {"sha": "c3b0fc60b97058cda6c49f92a797f74d081a53e6", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -107,13 +107,12 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n \n     let mk_va_list_ty = |mutbl| {\n         tcx.lang_items().va_list().map(|did| {\n-            let region = tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(0)));\n-            let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n+            let region = tcx\n+                .mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { kind: ty::BrAnon(0) }));\n+            let env_region =\n+                tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { kind: ty::BrEnv }));\n             let va_list_ty = tcx.type_of(did).subst(tcx, &[region.into()]);\n-            (\n-                tcx.mk_ref(tcx.mk_region(env_region), ty::TypeAndMut { ty: va_list_ty, mutbl }),\n-                va_list_ty,\n-            )\n+            (tcx.mk_ref(env_region, ty::TypeAndMut { ty: va_list_ty, mutbl }), va_list_ty)\n         })\n     };\n \n@@ -311,12 +310,12 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                     tcx.associated_items(tcx.lang_items().discriminant_kind_trait().unwrap());\n                 let discriminant_def_id = assoc_items.in_definition_order().next().unwrap().def_id;\n \n+                let br = ty::BoundRegion { kind: ty::BrAnon(0) };\n                 (\n                     1,\n-                    vec![tcx.mk_imm_ref(\n-                        tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(0))),\n-                        param(0),\n-                    )],\n+                    vec![\n+                        tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)), param(0)),\n+                    ],\n                     tcx.mk_projection(discriminant_def_id, tcx.mk_substs([param(0).into()].iter())),\n                 )\n             }"}, {"sha": "d5643fcca873e57702724a938ee3bf83e38aa817", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -461,7 +461,7 @@ fn get_new_lifetime_name<'tcx>(\n         .collect_referenced_late_bound_regions(&poly_trait_ref)\n         .into_iter()\n         .filter_map(|lt| {\n-            if let ty::BoundRegion::BrNamed(_, name) = lt {\n+            if let ty::BoundRegionKind::BrNamed(_, name) = lt {\n                 Some(name.as_str().to_string())\n             } else {\n                 None"}, {"sha": "cc5f68bc297730d32a65f00c2d53e6bc7903f5b6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -431,7 +431,9 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n     fn clean(&self, _cx: &DocContext<'_>) -> Option<Lifetime> {\n         match *self {\n             ty::ReStatic => Some(Lifetime::statik()),\n-            ty::ReLateBound(_, ty::BrNamed(_, name)) => Some(Lifetime(name)),\n+            ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name) }) => {\n+                Some(Lifetime(name))\n+            }\n             ty::ReEarlyBound(ref data) => Some(Lifetime(data.name)),\n \n             ty::ReLateBound(..)"}, {"sha": "4d525d62c52cc3d36b8c8a2415b2900d289d6c33", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -104,7 +104,9 @@ fn external_generic_args(\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n             GenericArgKind::Lifetime(lt) => match lt {\n-                ty::ReLateBound(_, ty::BrAnon(_)) => Some(GenericArg::Lifetime(Lifetime::elided())),\n+                ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrAnon(_) }) => {\n+                    Some(GenericArg::Lifetime(Lifetime::elided()))\n+                }\n                 _ => lt.clean(cx).map(GenericArg::Lifetime),\n             },\n             GenericArgKind::Type(_) if skip_self => {"}, {"sha": "4e122d930fc4e7c82f6d7911c8b626fb0074b9ad", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) i32)),\n+               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t0) }) i32)),\n                (),\n            ]\n "}, {"sha": "44d1d2327fcdbd5678b060881a5e34b725199595", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)),\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) i32)),\n                (),\n            ]\n "}, {"sha": "fa9f994c4fae3f068b614c521b0dce38ae69f8c2", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -10,7 +10,7 @@ LL | |         },\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#4r"}, {"sha": "0555f79bcb03b2301270fbbf20393e53d57e2cf1", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t0) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t1) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t2) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t3) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t1) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "0115f5412f21d2b17f9549a9727dea897648f00e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -10,7 +10,7 @@ LL | |     })\n    |\n    = note: defining type: case1::{closure#0} with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>)),\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) u32>)),\n                (),\n            ]\n \n@@ -49,7 +49,7 @@ LL | |     })\n    |\n    = note: defining type: case2::{closure#0} with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>)),\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) u32>)),\n                (),\n            ]\n    = note: number of external vids: 2"}, {"sha": "e55d033d2c7630254ca434258930043d8898599b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -12,7 +12,7 @@ LL | |     });\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t2)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t0) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t1) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t2) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}, {"sha": "ac4a4579c9cd27c6bc5815bd364ab062275e44a6", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -12,7 +12,7 @@ LL | |     });\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t0) }) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t1) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t2) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t3) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t1) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "60dca1baa40e7f6a031e45c653694a6638357d6b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "cbb10eb187ed85b4426f8c3cf382fabfcf241c6e", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -10,7 +10,7 @@ LL | |         },\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "f9f1d8bb6fffa45cfddc053f0c7cd0c7d0d0aa3b", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t0) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t1) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t2) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}, {"sha": "1587c28e1bef3b2eb74bdb35118ff1012f43ce43", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t0) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t1) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t2) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t3) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('t1) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "44f743310b483b426ccfb34c3ef2a3868587af6a", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -6,7 +6,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed('r)) i32,\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) i32)) -> &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) i32,\n                (),\n            ]\n "}, {"sha": "dbf76cd1329cb62984e1c8505b34680dcaf0deaa", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1964e60b72c2d10e9fd4e801990f8af3f306ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=b1964e60b72c2d10e9fd4e801990f8af3f306ac0", "patch": "@@ -6,7 +6,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic::<T>::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed('s)) T)),\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) T)),\n                (),\n            ]\n    = note: number of external vids: 2\n@@ -31,7 +31,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic_fail::<T>::{closure#0} with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed('s)) T)),\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('r) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed('s) }) T)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}]}