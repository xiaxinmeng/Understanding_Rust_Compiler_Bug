{"sha": "5fff3824bc77cd7052e2515f82259e32f8ad1486", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZmYzODI0YmM3N2NkNzA1MmUyNTE1ZjgyMjU5ZTMyZjhhZDE0ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-20T12:42:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-20T12:42:13Z"}, "message": "Auto merge of #75670 - lzutao:suppress-mir-fndef-ty, r=oli-obk\n\nSuppress MIR comments of FnDef and unit types\n\nAn expansion of #75566.\nComments of FnDef MIR constant already contain `ty::Contains` comments.", "tree": {"sha": "42cbdb6dc32954f5a7fc20f08ee79075d855e718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42cbdb6dc32954f5a7fc20f08ee79075d855e718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fff3824bc77cd7052e2515f82259e32f8ad1486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fff3824bc77cd7052e2515f82259e32f8ad1486", "html_url": "https://github.com/rust-lang/rust/commit/5fff3824bc77cd7052e2515f82259e32f8ad1486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fff3824bc77cd7052e2515f82259e32f8ad1486/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a22a0ff93d63f738151f096434e732466b4a42e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a22a0ff93d63f738151f096434e732466b4a42e", "html_url": "https://github.com/rust-lang/rust/commit/1a22a0ff93d63f738151f096434e732466b4a42e"}, {"sha": "86cf46172ff10673e4470e93a8b2d4974bf35f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/86cf46172ff10673e4470e93a8b2d4974bf35f3c", "html_url": "https://github.com/rust-lang/rust/commit/86cf46172ff10673e4470e93a8b2d4974bf35f3c"}], "stats": {"total": 1356, "additions": 45, "deletions": 1311}, "files": [{"sha": "0a6e17a43d8db391656472fd14047a2bc48fd954", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -185,7 +185,7 @@ pub enum TyKind<'tcx> {\n     /// After typeck, the concrete type can be found in the `types` map.\n     Opaque(DefId, SubstsRef<'tcx>),\n \n-    /// A type parameter; for example, `T` in `fn f<T>(x: T) {}\n+    /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.\n     Param(ParamTy),\n \n     /// Bound type variable, used only when preparing a trait query."}, {"sha": "958e5188fed0464f9606ae8f288b8da952aaf49f", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -389,6 +389,8 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n         let Constant { span, user_ty, literal } = constant;\n         match literal.ty.kind {\n             ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char => {}\n+            // Unit type\n+            ty::Tuple(tys) if tys.is_empty() => {}\n             _ => {\n                 self.push(\"mir::Constant\");\n                 self.push(&format!(\"+ span: {}\", self.tcx.sess.source_map().span_to_string(*span)));\n@@ -405,6 +407,9 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n         let ty::Const { ty, val, .. } = constant;\n         match ty.kind {\n             ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char => {}\n+            // Unit type\n+            ty::Tuple(tys) if tys.is_empty() => {}\n+            ty::FnDef(..) => {}\n             _ => {\n                 self.push(\"ty::Const\");\n                 self.push(&format!(\"+ ty: {:?}\", ty));"}, {"sha": "a95681126205f4ac28b8ee463da384d0048e69cd", "filename": "src/test/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -287,12 +287,6 @@ fn address_of_reborrow() -> () {\n         FakeRead(ForLet, _47);           // scope 13 at $DIR/address-of.rs:36:9: 36:10\n         AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address-of.rs:36:12: 36:22\n         _0 = const ();                   // scope 0 at $DIR/address-of.rs:3:26: 37:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/address-of.rs:3:26: 37:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_47);                // scope 13 at $DIR/address-of.rs:37:1: 37:2\n         StorageDead(_45);                // scope 12 at $DIR/address-of.rs:37:1: 37:2\n         StorageDead(_44);                // scope 11 at $DIR/address-of.rs:37:1: 37:2"}, {"sha": "e058b0aaa8f0e3673aaff01d687b22fe879e8ec9", "filename": "src/test/mir-opt/address_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -39,12 +39,6 @@ fn borrow_and_cast(_1: i32) -> () {\n         FakeRead(ForLet, _6);            // scope 2 at $DIR/address-of.rs:44:9: 44:10\n         StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:44:31: 44:32\n         _0 = const ();                   // scope 0 at $DIR/address-of.rs:41:32: 45:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/address-of.rs:41:32: 45:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:45:1: 45:2\n         StorageDead(_4);                 // scope 1 at $DIR/address-of.rs:45:1: 45:2\n         StorageDead(_2);                 // scope 0 at $DIR/address-of.rs:45:1: 45:2"}, {"sha": "2397210ded5e1b679ded36e53719b7ce71b99eb8", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -37,9 +37,6 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n         _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n         _5 = const foo(move _6) -> bb1;  // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n-                                         // ty::Const\n-                                         // + ty: unsafe fn(*mut usize) -> u32 {foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(Scalar(<ZST>)) }\n@@ -59,12 +56,6 @@ fn main() -> () {\n         StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n         StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n         _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:12:11: 17:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n         StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n         StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2"}, {"sha": "2397210ded5e1b679ded36e53719b7ce71b99eb8", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -37,9 +37,6 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n         _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n         _5 = const foo(move _6) -> bb1;  // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n-                                         // ty::Const\n-                                         // + ty: unsafe fn(*mut usize) -> u32 {foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(Scalar(<ZST>)) }\n@@ -59,12 +56,6 @@ fn main() -> () {\n         StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n         StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n         _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:12:11: 17:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n         StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n         StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2"}, {"sha": "06869735f1e4b9bc7a1c8d2a7a46e821884eacc5", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -67,12 +67,6 @@ fn main() -> () {\n     bb6: {\n         StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n         _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/basic_assignment.rs:10:11: 24:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_5) -> [return: bb7, unwind: bb3]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n "}, {"sha": "dee3e4f7832f64279a10d0276464254bd2082e2f", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -15,9 +15,6 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         (*_2) = const S::new() -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n-                                         // ty::Const\n-                                         // + ty: fn() -> S {S::new}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:17: 7:23\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n@@ -42,9 +39,6 @@ fn main() -> () {\n         StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n-                                         // ty::Const\n-                                         // + ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n@@ -54,12 +48,6 @@ fn main() -> () {\n         StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n         StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n         _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:6:11: 9:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n "}, {"sha": "3c56fce3f0a063a788d1d18b0bb96b483a24414d", "filename": "src/test/mir-opt/byte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -23,12 +23,6 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n         _2 = [const 5_u8, const 120_u8]; // scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n         _0 = const ();                   // scope 0 at $DIR/byte_slice.rs:4:11: 7:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/byte_slice.rs:4:11: 7:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 1 at $DIR/byte_slice.rs:7:1: 7:2\n         StorageDead(_1);                 // scope 0 at $DIR/byte_slice.rs:7:1: 7:2\n         return;                          // scope 0 at $DIR/byte_slice.rs:7:2: 7:2"}, {"sha": "09a4eca9389d97d5ed61d834d4da68ebc2ebae28", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -19,12 +19,6 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         _0 = const ();                   // scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation.rs:7:11: 9:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n     }\n }"}, {"sha": "b10cc3e0985b461a42caed9dfb71b34613005b4c", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -19,12 +19,6 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         _0 = const ();                   // scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation.rs:7:11: 9:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n     }\n }"}, {"sha": "19cbab74ab8359154a098879a36d2f6e1a8cf639", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -19,12 +19,6 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         _0 = const ();                   // scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation2.rs:4:11: 6:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n     }\n }"}, {"sha": "4dd960c8ddcc8762811966157925ad2e808c2009", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -19,12 +19,6 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         _0 = const ();                   // scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation2.rs:4:11: 6:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n     }\n }"}, {"sha": "99d3a278d69228422629c2d4723df63eb5bff112", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -19,12 +19,6 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         _0 = const ();                   // scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation3.rs:4:11: 6:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n     }\n }"}, {"sha": "d6e49892d4c6ad7d90a7db15a837bed49d7f290c", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -19,12 +19,6 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         _0 = const ();                   // scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation3.rs:4:11: 6:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n     }\n }"}, {"sha": "45302087f2d151ede404c6b09113d4adf148ac64", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -34,9 +34,6 @@\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:9:36: 9:42\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }"}, {"sha": "faf86bed9d5c77959e1b23b48d418eaadbe9f5d8", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -36,9 +36,6 @@\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:13:47: 13:53\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }"}, {"sha": "54877f9f53c668b82dbf44ea4eddefbcada03c9b", "filename": "src/test/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -24,12 +24,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:5:27: 5:28\n           StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:5:28: 5:29\n           _0 = const ();                   // scope 0 at $DIR/aggregate.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/aggregate.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/aggregate.rs:6:2: 6:2\n       }"}, {"sha": "1ccda1c5003dce5ef8a6c6576570dbcfc4b6fdbd", "filename": "src/test/mir-opt/const_prop/array_index.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -31,12 +31,6 @@\n           StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n           StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n           _0 = const ();                   // scope 0 at $DIR/array_index.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/array_index.rs:6:2: 6:2\n       }"}, {"sha": "1ccda1c5003dce5ef8a6c6576570dbcfc4b6fdbd", "filename": "src/test/mir-opt/const_prop/array_index.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -31,12 +31,6 @@\n           StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n           StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n           _0 = const ();                   // scope 0 at $DIR/array_index.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/array_index.rs:6:2: 6:2\n       }"}, {"sha": "30ff6ec860434bdc654c455eacd1a4f640457f8b", "filename": "src/test/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -46,12 +46,6 @@\n +         _2 = Div(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n           StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n           _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:3:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_div_by_zero.rs:3:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:6:1: 6:2\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/bad_op_div_by_zero.rs:6:2: 6:2"}, {"sha": "6e6ce0a613dd6b8ff4a3d872c81c4fd3f452db07", "filename": "src/test/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -46,12 +46,6 @@\n +         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n           StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n           _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:3:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_mod_by_zero.rs:3:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:6:1: 6:2\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:6:2: 6:2"}, {"sha": "245a7de5e9925720caa07dff5716f579aa9e785e", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -51,12 +51,6 @@\n           _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n           StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:25: 7:26\n           _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:8:5: 8:6\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:2: 9:2"}, {"sha": "245a7de5e9925720caa07dff5716f579aa9e785e", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -51,12 +51,6 @@\n           _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n           StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:25: 7:26\n           _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:8:5: 8:6\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:2: 9:2"}, {"sha": "51255d5ae70550f1b6fc5137ad6b85a880a235e7", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -33,12 +33,6 @@\n       bb2: {\n           StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:12:26: 12:27\n           _0 = const ();                   // scope 0 at $DIR/boxes.rs:11:11: 13:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/boxes.rs:11:11: 13:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:13:1: 13:2\n           return;                          // scope 0 at $DIR/boxes.rs:13:2: 13:2\n       }"}, {"sha": "1ccc15458224a9a5dd3448db596847d41609c963", "filename": "src/test/mir-opt/const_prop/cast.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -20,12 +20,6 @@\n -         _2 = const 42_u32 as u8 (Misc);  // scope 1 at $DIR/cast.rs:6:13: 6:24\n +         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:6:13: 6:24\n           _0 = const ();                   // scope 0 at $DIR/cast.rs:3:11: 7:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/cast.rs:3:11: 7:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 1 at $DIR/cast.rs:7:1: 7:2\n           StorageDead(_1);                 // scope 0 at $DIR/cast.rs:7:1: 7:2\n           return;                          // scope 0 at $DIR/cast.rs:7:2: 7:2"}, {"sha": "6f81dcc40eebd84f10d7ab28f8669f95da7cccb7", "filename": "src/test/mir-opt/const_prop/checked_add.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -21,12 +21,6 @@\n -         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n           _0 = const ();                   // scope 0 at $DIR/checked_add.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/checked_add.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/checked_add.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/checked_add.rs:6:2: 6:2\n       }"}, {"sha": "a1bc0c7aa4fce804367ca91ba09a1a5cc4304fb5", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -31,9 +31,6 @@\n           StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n           _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n           _4 = const read(move _5) -> bb1; // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n-                                           // ty::Const\n-                                           // + ty: fn(usize) {read}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:8:5: 8:9\n                                            // + literal: Const { ty: fn(usize) {read}, val: Value(Scalar(<ZST>)) }\n@@ -43,12 +40,6 @@\n           StorageDead(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:11: 8:12\n           StorageDead(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:12: 8:13\n           _0 = const ();                   // scope 0 at $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/const_prop_fails_gracefully.rs:9:2: 9:2\n       }"}, {"sha": "df03cb2935fa3de97bca92b883b337cce6d08277", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -16,22 +16,13 @@\n   \n       bb1: {\n           _0 = const ();                   // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/control-flow-simplification.rs:12:5: 14:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:15:1: 15:2\n           return;                          // scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n       }\n   \n       bb2: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "4898f9deb0cae2f8808ff1a5669ba237758e2788", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.PreCodegen.before.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -5,12 +5,6 @@ fn hello() -> () {\n \n     bb0: {\n         _0 = const ();                   // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/control-flow-simplification.rs:12:5: 14:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n     }\n }"}, {"sha": "99fa0dcbc90c55e2dc7bdf51a879be8ad0f8ad99", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -42,12 +42,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n           StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n           _0 = const ();                   // scope 0 at $DIR/discriminant.rs:10:11: 12:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:10:11: 12:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:12:1: 12:2\n           return;                          // scope 0 at $DIR/discriminant.rs:12:2: 12:2\n       }"}, {"sha": "99fa0dcbc90c55e2dc7bdf51a879be8ad0f8ad99", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -42,12 +42,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n           StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n           _0 = const ();                   // scope 0 at $DIR/discriminant.rs:10:11: 12:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:10:11: 12:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:12:1: 12:2\n           return;                          // scope 0 at $DIR/discriminant.rs:12:2: 12:2\n       }"}, {"sha": "97dee59073b7a93bd9958a49a8c1f4f50b0ef787", "filename": "src/test/mir-opt/const_prop/indirect.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -26,12 +26,6 @@\n +         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:29\n           StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:5:28: 5:29\n           _0 = const ();                   // scope 0 at $DIR/indirect.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/indirect.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/indirect.rs:6:2: 6:2\n       }"}, {"sha": "f6453a4a5a2bb7a1b110a9bc9daf17e9bc225915", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -13,19 +13,10 @@\n           StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n -         (_2.0: ()) = move _3;            // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n +         (_2.0: ()) = const ();           // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-+                                          // ty::Const\n-+                                          // + ty: ()\n-+                                          // + val: Value(Scalar(<ZST>))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/issue-66971.rs:16:12: 16:22\n-+                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           StorageDead(_3);                 // scope 0 at $DIR/issue-66971.rs:16:21: 16:22\n           _1 = const encode(move _2) -> bb1; // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n-                                           // ty::Const\n-                                           // + ty: fn(((), u8, u8)) {encode}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/issue-66971.rs:16:5: 16:11\n                                            // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(Scalar(<ZST>)) }\n@@ -35,12 +26,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/issue-66971.rs:16:22: 16:23\n           StorageDead(_1);                 // scope 0 at $DIR/issue-66971.rs:16:23: 16:24\n           _0 = const ();                   // scope 0 at $DIR/issue-66971.rs:15:11: 17:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-66971.rs:15:11: 17:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/issue-66971.rs:17:2: 17:2\n       }\n   }"}, {"sha": "869c8a61d99bfd056527bc5a15b5715514ac1e39", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -17,9 +17,6 @@\n +         (_2.0: (u8, u8)) = (const 1_u8, const 2_u8); // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n           StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:11:18: 11:19\n           _1 = const test(move _2) -> bb1; // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n-                                           // ty::Const\n-                                           // + ty: fn(((u8, u8),)) {test}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/issue-67019.rs:11:5: 11:9\n                                            // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(Scalar(<ZST>)) }\n@@ -29,12 +26,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/issue-67019.rs:11:19: 11:20\n           StorageDead(_1);                 // scope 0 at $DIR/issue-67019.rs:11:20: 11:21\n           _0 = const ();                   // scope 0 at $DIR/issue-67019.rs:10:11: 12:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-67019.rs:10:11: 12:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/issue-67019.rs:12:2: 12:2\n       }\n   }"}, {"sha": "b1a9e1cb5d7de285b8211875786c7e5db5c01db9", "filename": "src/test/mir-opt/const_prop/large_array_index.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -30,12 +30,6 @@\n           StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n           StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n           _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:4:11: 7:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/large_array_index.rs:4:11: 7:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:7:1: 7:2\n           return;                          // scope 0 at $DIR/large_array_index.rs:7:2: 7:2\n       }"}, {"sha": "b1a9e1cb5d7de285b8211875786c7e5db5c01db9", "filename": "src/test/mir-opt/const_prop/large_array_index.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -30,12 +30,6 @@\n           StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n           StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n           _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:4:11: 7:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/large_array_index.rs:4:11: 7:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:7:1: 7:2\n           return;                          // scope 0 at $DIR/large_array_index.rs:7:2: 7:2\n       }"}, {"sha": "349f1557a86ef044d54b79aa5cf6eae8f1e80846", "filename": "src/test/mir-opt/const_prop/mutable_variable.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -20,12 +20,6 @@\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n +         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable.rs:4:11: 8:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable.rs:4:11: 8:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:8:1: 8:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/mutable_variable.rs:8:2: 8:2"}, {"sha": "018b7c43c1dd8a096c3d27cce87729b792e0885d", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -21,12 +21,6 @@\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n +         _2 = (const 42_i32, const 99_i32); // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate.rs:4:11: 8:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate.rs:4:11: 8:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:8:1: 8:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:8:2: 8:2"}, {"sha": "6dc0e8ab3cf7421800a60c1d705e5c9845f40a36", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -26,12 +26,6 @@\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:9: 8:10\n           _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:13: 8:14\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:4:11: 9:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:4:11: 9:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:1: 9:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:1: 9:2"}, {"sha": "d887f3f0dc13c559f565c11c436c0c2e7ab1eee1", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -15,9 +15,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:9: 5:14\n           _1 = const foo() -> bb1;         // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:34\n-                                           // ty::Const\n-                                           // + ty: fn() -> (i32, i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:32\n                                            // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(Scalar(<ZST>)) }\n@@ -30,12 +27,6 @@\n -         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n +         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:4:11: 9:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:4:11: 9:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:9:2: 9:2"}, {"sha": "f6e173620ecb286db60d54c4187aebb4dbcf6e2f", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -35,22 +35,10 @@\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:18: 9:19\n           StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:19: 9:20\n           _2 = const ();                   // scope 2 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:10:5: 10:6\n           StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:11:9: 11:10\n           _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:11:13: 11:14\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable_no_prop.rs:6:11: 12:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_no_prop.rs:6:11: 12:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:12:1: 12:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:12:1: 12:2\n           return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:12:2: 12:2"}, {"sha": "cb7becc3b9be3a845152afc9485bd9637978983a", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -24,9 +24,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:9: 5:10\n           _1 = const foo() -> bb1;         // scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:13: 5:18\n-                                           // ty::Const\n-                                           // + ty: fn() -> i32 {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_unprop_assign.rs:5:13: 5:16\n                                            // + literal: Const { ty: fn() -> i32 {foo}, val: Value(Scalar(<ZST>)) }\n@@ -45,12 +42,6 @@\n           StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:9:9: 9:10\n           _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:9:13: 9:16\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable_unprop_assign.rs:4:11: 10:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:4:11: 10:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n           StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2"}, {"sha": "108f01e614727b586fa749bde7e445ec1af67249", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -58,12 +58,6 @@\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n           StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n           _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n           StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "108f01e614727b586fa749bde7e445ec1af67249", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -58,12 +58,6 @@\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n           StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n           _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n           StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "a78a6341c299d688243b208e07c6d2796d340cc1", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -23,12 +23,6 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n         _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n         _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "a78a6341c299d688243b208e07c6d2796d340cc1", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -23,12 +23,6 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n         _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n         _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "07c78be69c0c3a54e429657c92be0d72e11fce48", "filename": "src/test/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -43,12 +43,6 @@\n           StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n           StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n           _0 = const ();                   // scope 0 at $DIR/read_immutable_static.rs:6:11: 8:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:6:11: 8:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/read_immutable_static.rs:8:2: 8:2\n       }"}, {"sha": "31061233eeecc908d0b8edb2b8932963207e25a6", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -24,12 +24,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n           _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_deref.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n       }\n   }"}, {"sha": "c9caf07a737ff27a0ad1a4adb5f6e0412ba04eb1", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -27,12 +27,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n           _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_deref.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n       }\n   }"}, {"sha": "e9398df1320ff09631a4f8c9e8ea820fcd1c2fe7", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -23,12 +23,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n           _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_deref_project.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n       }\n   }"}, {"sha": "43e4b32a6cdbee6039bb0d6bd903b9827c9ee023", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -27,12 +27,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n           _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_deref_project.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n       }\n   }"}, {"sha": "aab1bf3b3119ac43e7a1b493ddd04661552a1326", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -14,9 +14,6 @@\n           StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n           StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n           _3 = const main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n-                                           // ty::Const\n-                                           // + ty: fn() {main}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n@@ -26,12 +23,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41\n           StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:41: 4:42\n           _0 = const ();                   // scope 0 at $DIR/reify_fn_ptr.rs:3:11: 5:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/reify_fn_ptr.rs:3:11: 5:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/reify_fn_ptr.rs:5:2: 5:2\n       }\n   }"}, {"sha": "f14004fc25e00a1513503f570f0a157601af7d69", "filename": "src/test/mir-opt/const_prop/repeat.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -36,12 +36,6 @@\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n           _0 = const ();                   // scope 0 at $DIR/repeat.rs:5:11: 7:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/repeat.rs:5:11: 7:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:7:1: 7:2\n           return;                          // scope 0 at $DIR/repeat.rs:7:2: 7:2\n       }"}, {"sha": "f14004fc25e00a1513503f570f0a157601af7d69", "filename": "src/test/mir-opt/const_prop/repeat.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -36,12 +36,6 @@\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n           _0 = const ();                   // scope 0 at $DIR/repeat.rs:5:11: 7:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/repeat.rs:5:11: 7:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:7:1: 7:2\n           return;                          // scope 0 at $DIR/repeat.rs:7:2: 7:2\n       }"}, {"sha": "b4b83281201f613672728a8fd0032e3018221d82", "filename": "src/test/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -19,9 +19,6 @@\n -         _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n +         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n +         _2 = const consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-                                           // ty::Const\n-                                           // + ty: fn(u32) {consume}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(Scalar(<ZST>)) }\n@@ -31,12 +28,6 @@\n           StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:14: 4:15\n           StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:15: 4:16\n           _0 = const ();                   // scope 0 at $DIR/scalar_literal_propagation.rs:2:11: 5:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/scalar_literal_propagation.rs:2:11: 5:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:5:1: 5:2\n           return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:5:2: 5:2\n       }"}, {"sha": "02c4391baf5605dea7a54d27cb3b988f9579c6f0", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -47,12 +47,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           _0 = const ();                   // scope 0 at $DIR/slice_len.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/slice_len.rs:6:2: 6:2\n       }\n   }"}, {"sha": "02c4391baf5605dea7a54d27cb3b988f9579c6f0", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -47,12 +47,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           _0 = const ();                   // scope 0 at $DIR/slice_len.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/slice_len.rs:6:2: 6:2\n       }\n   }"}, {"sha": "8dff267c2f3b5b745f4bedaaeb4bd0f6cd85e0c9", "filename": "src/test/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -14,19 +14,13 @@\n   \n       bb1: {\n           _0 = const foo(const -1_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n-                                           // ty::Const\n-                                           // + ty: fn(i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {\n           _0 = const foo(const 0_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n-                                           // ty::Const\n-                                           // + ty: fn(i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "fb88cd3f96ca470c6f71560ed345707734d25fd2", "filename": "src/test/mir-opt/const_prop/switch_int.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -14,19 +14,13 @@\n   \n       bb1: {\n           _0 = const foo(const -1_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n-                                           // ty::Const\n-                                           // + ty: fn(i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {\n           _0 = const foo(const 0_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n-                                           // ty::Const\n-                                           // + ty: fn(i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "95b04f7fa228694de3e06585c4e7bdf66ec76f99", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -19,9 +19,6 @@\n -         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n +         _3 = (const 1_u32, const 2_u32); // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n           _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n-                                           // ty::Const\n-                                           // + ty: fn((u32, u32)) {consume}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n                                            // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(Scalar(<ZST>)) }\n@@ -31,12 +28,6 @@\n           StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:14: 5:15\n           StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:15: 5:16\n           _0 = const ();                   // scope 0 at $DIR/tuple_literal_propagation.rs:2:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:2:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:6:2: 6:2\n       }"}, {"sha": "5a3a99e49311f1520cdbbca736162af6d92761ea", "filename": "src/test/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -26,25 +26,13 @@\n           (*_3) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:14:9: 14:26\n           StorageDead(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:26: 14:27\n           _2 = const ();                   // scope 2 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_miscompile.rs:13:5: 15:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:15:5: 15:6\n           StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:9: 16:10\n           StorageLive(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:20\n           _5 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:16:15: 16:18\n           _4 = Eq(move _5, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:25\n           StorageDead(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:24: 16:25\n           _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:11:10: 17:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_miscompile.rs:11:10: 17:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:17:1: 17:2\n           StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:17:1: 17:2\n           return;                          // scope 0 at $DIR/const_prop_miscompile.rs:17:2: 17:2"}, {"sha": "648260c7c20d9152ba924f4e6367eb5904db6e45", "filename": "src/test/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -27,12 +27,6 @@\n           _3 = Eq(move _4, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:25\n           StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:24: 7:25\n           _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:4:10: 8:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_miscompile.rs:4:10: 8:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:8:1: 8:2\n           StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/const_prop_miscompile.rs:8:2: 8:2"}, {"sha": "e8d835ffe391ec1637641f09f2bab18799961a75", "filename": "src/test/mir-opt/copy_propagation_arg.bar.CopyPropagation.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.bar.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.bar.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.bar.CopyPropagation.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -12,9 +12,6 @@\n           StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n           _2 = const dummy(move _3) -> bb1; // scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n-                                           // ty::Const\n-                                           // + ty: fn(u8) -> u8 {dummy}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }\n@@ -25,12 +22,6 @@\n           StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14\n           _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n           _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:15:19: 18:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:18:2: 18:2\n       }\n   }"}, {"sha": "b20003bd7c67ec7cdcae252d9c90e14617ceb717", "filename": "src/test/mir-opt/copy_propagation_arg.baz.CopyPropagation.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.baz.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.baz.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.baz.CopyPropagation.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -12,12 +12,6 @@\n           _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n           StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n           _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:21:20: 24:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n       }\n   }"}, {"sha": "2d97a3698512445ef20f0c0212132753463c43a9", "filename": "src/test/mir-opt/copy_propagation_arg.foo.CopyPropagation.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.foo.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.foo.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.foo.CopyPropagation.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -12,9 +12,6 @@\n           StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n           _2 = const dummy(move _3) -> bb1; // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n-                                           // ty::Const\n-                                           // + ty: fn(u8) -> u8 {dummy}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }\n@@ -25,12 +22,6 @@\n           _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n           StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n           _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:9:19: 12:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:12:2: 12:2\n       }\n   }"}, {"sha": "309153114427707fde0a87214039b1b0cff9da75", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -39,9 +39,6 @@\n           StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n           _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n           _4 = const std::fmt::Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r std::fmt::Formatter) -> bool {std::fmt::Formatter::sign_plus}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:15:26: 15:35\n                                            // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> bool {std::fmt::Formatter::sign_plus}, val: Value(Scalar(<ZST>)) }\n@@ -68,9 +65,6 @@\n           StorageLive(_8);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n           _8 = &(*_1);                     // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n           _7 = const std::fmt::Formatter::precision(move _8) -> bb5; // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r std::fmt::Formatter) -> std::option::Option<usize> {std::fmt::Formatter::precision}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n                                            // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> std::option::Option<usize> {std::fmt::Formatter::precision}, val: Value(Scalar(<ZST>)) }\n@@ -92,9 +86,6 @@\n           StorageLive(_21);                // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n           _21 = _3;                        // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n           _0 = const float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:28:9: 28:68\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:28:9: 28:45\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(Scalar(<ZST>)) }\n@@ -120,9 +111,6 @@\n           StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n           _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n           _0 = const float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb8; // scope 3 at $DIR/funky_arms.rs:26:9: 26:87\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, u32, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, u32, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "044fb3827cda2b62af01494034e6414417271458", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -40,9 +40,6 @@ yields ()\n         StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n         _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n         _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n-                                         // ty::Const\n-                                         // + ty: fn(Foo) {take::<Foo>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(Scalar(<ZST>)) }\n@@ -76,9 +73,6 @@ yields ()\n         StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n         _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n         _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-                                         // ty::Const\n-                                         // + ty: fn(Bar) {take::<Bar>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n                                          // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n@@ -100,12 +94,6 @@ yields ()\n         StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n         StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n         _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         drop(_1) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6"}, {"sha": "44c24e9144bcf1bc7e73f4722f1c77b4493d7fe6", "filename": "src/test/mir-opt/generator_tiny.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -51,9 +51,6 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n         StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:18: 22:19\n         StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n         _8 = const callee() -> bb4;      // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n-                                         // ty::Const\n-                                         // + ty: fn() {callee}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(Scalar(<ZST>)) }\n@@ -62,12 +59,6 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n     bb4: {\n         StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:21: 23:22\n         _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:21:14: 24:10\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-tiny.rs:21:14: 24:10\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n     }\n "}, {"sha": "c0bd1b706f870dfdec1e46d40f5d57594d58dfe5", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -17,9 +17,6 @@ fn bar() -> bool {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n         _1 = const foo;                  // scope 0 at $DIR/inline-any-operand.rs:11:13: 11:16\n-                                         // ty::Const\n-                                         // + ty: fn(i32, i32) -> bool {foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-any-operand.rs:11:13: 11:16\n                                          // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "e032e185b2e7387ac841f7cd9df0a1965f684ed8", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff.32bit", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -20,57 +20,44 @@\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-                                           // ty::Const\n--                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n--                                          // + val: Value(Scalar(<ZST>))\n++                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n--     }\n-- \n--     bb1 (cleanup): {\n--         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n--     }\n-- \n--     bb2: {\n +                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n++         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n +         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb3: {\n--         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n-+     bb1 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n       }\n   \n+      bb2: {\n+-         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-     }\n+- \n+-     bb3: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-     }\n+- \n -     bb4 (cleanup): {\n -         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // ty::Const\n--                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n--                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n-+     bb2: {\n-+         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "9b65e51d7772c68c3d1db0d284adcc0a01dfdfc6", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff.64bit", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -20,57 +20,44 @@\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-                                           // ty::Const\n--                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n--                                          // + val: Value(Scalar(<ZST>))\n++                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n--     }\n-- \n--     bb1 (cleanup): {\n--         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n--     }\n-- \n--     bb2: {\n +                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n++         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n +         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb3: {\n--         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n-+     bb1 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n       }\n   \n+      bb2: {\n+-         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-     }\n+- \n+-     bb3: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-     }\n+- \n -     bb4 (cleanup): {\n -         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // ty::Const\n--                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n--                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n-+     bb2: {\n-+         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "78e7dfcc970ad203fd38aeee65e8715b8745cbb8", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -25,9 +25,6 @@ fn bar() -> bool {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/inline-retag.rs:11:9: 11:10\n         _1 = const foo;                  // scope 0 at $DIR/inline-retag.rs:11:13: 11:16\n-                                         // ty::Const\n-                                         // + ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:11:13: 11:16\n                                          // + literal: Const { ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "8d7cad0c69a72b4617fd271f6d5dbb61ac4f7c43", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -13,9 +13,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-specialization.rs:5:9: 5:10\n -         _1 = const <std::vec::Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n--                                          // ty::Const\n--                                          // + ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}\n--                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-specialization.rs:5:13: 5:36\n -                                          // + literal: Const { ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}, val: Value(Scalar(<ZST>)) }\n@@ -24,12 +21,6 @@\n -     bb1: {\n +         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n           _0 = const ();                   // scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/inline-specialization.rs:4:11: 6:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/inline-specialization.rs:6:2: 6:2\n       }"}, {"sha": "4e9d17cbb8bd16dc00cbd5419c473e1f53b3f1ca", "filename": "src/test/mir-opt/inline/inline_trait_method.test.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -9,9 +9,6 @@ fn test(_1: &dyn X) -> u32 {\n         StorageLive(_2);                 // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n         _2 = &(*_1);                     // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n         _0 = const <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method.rs:9:7: 9:8\n                                          // + literal: Const { ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }"}, {"sha": "af47fbac7629931b0f988152d8aba99ea3129754", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -16,9 +16,6 @@ fn test2(_1: &dyn X) -> bool {\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         _0 = const <dyn X as X>::y(move _2) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }"}, {"sha": "f6556077067aded9356cded3aac166f819b8c716", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -15,9 +15,6 @@\n       bb1: {\n           StorageLive(_2);                 // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n           _2 = const bar() -> [return: bb3, unwind: bb2]; // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n-                                           // ty::Const\n-                                           // + ty: fn() -> bool {bar}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: /the/src/instrument_coverage.rs:12:12: 12:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n@@ -38,24 +35,12 @@\n   \n       bb5: {\n           _1 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: /the/src/instrument_coverage.rs:12:9: 14:10\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n           goto -> bb0;                     // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n       bb6: {\n           _0 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:13:13: 13:18\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: /the/src/instrument_coverage.rs:13:13: 13:18\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n       }"}, {"sha": "6bde4da2ecff83aadb2e7125e6c4bbff248dd78e", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -40,33 +40,15 @@ fn main() -> () {\n \n     bb5: {\n         _3 = const ();                   // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-38669.rs:7:9: 9:10\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         _1 = const true;                 // scope 1 at $DIR/issue-38669.rs:10:9: 10:28\n         _2 = const ();                   // scope 1 at $DIR/issue-38669.rs:6:10: 11:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-38669.rs:6:10: 11:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n     bb6: {\n         _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-38669.rs:8:13: 8:18\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:12:1: 12:2"}, {"sha": "49f6b6692016f93c0d76ea18314694a292f508cc", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -21,9 +21,6 @@ fn main() -> () {\n         StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n         _4 = S;                          // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n         _3 = const S::id(move _4) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n-                                         // ty::Const\n-                                         // + ty: fn(S) -> S {S::id}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:23: 8:25\n                                          // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(Scalar(<ZST>)) }\n@@ -37,9 +34,6 @@ fn main() -> () {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n         _1 = const S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n-                                         // ty::Const\n-                                         // + ty: fn(S, S) {S::other}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:15: 8:20\n                                          // + literal: Const { ty: fn(S, S) {S::other}, val: Value(Scalar(<ZST>)) }\n@@ -62,12 +56,6 @@ fn main() -> () {\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n         StorageDead(_2);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n         _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:7:11: 9:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n         return;                          // scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n     }"}, {"sha": "534ff89b2aa3f1a18351d294bce099939d5fdc5c", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -26,9 +26,6 @@ fn test() -> () {\n         StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _3 = const std::mem::drop::<S>(move _4) -> [return: bb2, unwind: bb5]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n-                                         // ty::Const\n-                                         // + ty: fn(S) {std::mem::drop::<S>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:17:5: 17:9\n                                          // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }\n@@ -70,12 +67,6 @@ fn test() -> () {\n     bb8: {\n         StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:14:15: 19:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_2) -> [return: bb9, unwind: bb3]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n "}, {"sha": "cc978845d37dc3edbf13ef44c413362747f35511", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -27,9 +27,6 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n         _2 = const cond() -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-                                         // ty::Const\n-                                         // + ty: fn() -> bool {cond}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:8: 8:12\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n@@ -49,12 +46,6 @@ fn main() -> () {\n \n     bb4: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:8:5: 14:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n@@ -83,12 +74,6 @@ fn main() -> () {\n \n     bb9: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:10:9: 13:10\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n@@ -97,12 +82,6 @@ fn main() -> () {\n         _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:10:29: 13:10\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n         goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }"}, {"sha": "c14057df79ff4622e274ef205920c50d70888625", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -42,12 +42,6 @@ fn main() -> () {\n \n     bb6: {\n         _0 = const ();                   // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-49232.rs:10:25: 10:30\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n@@ -81,9 +75,6 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n         _6 = &_2;                        // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n         _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n-                                         // ty::Const\n-                                         // + ty: fn(&i32) {std::mem::drop::<&i32>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:13:9: 13:13\n                                          // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(Scalar(<ZST>)) }\n@@ -93,12 +84,6 @@ fn main() -> () {\n         StorageDead(_6);                 // scope 1 at $DIR/issue-49232.rs:13:21: 13:22\n         StorageDead(_5);                 // scope 1 at $DIR/issue-49232.rs:13:22: 13:23\n         _1 = const ();                   // scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-49232.rs:6:10: 14:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n         goto -> bb1;                     // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }"}, {"sha": "28779ab9876b69c48eb902abda2e8bc48020c3da", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -31,9 +31,6 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = std::option::Option::<u32>::None; // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-                                         // ty::Const\n-                                         // + ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n@@ -73,9 +70,6 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n         StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-                                         // ty::Const\n-                                         // + ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n                                          // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n@@ -88,9 +82,6 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n     bb8: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-                                         // ty::Const\n-                                         // + ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }"}, {"sha": "8b867781861818a4ba1685c42fbba1187fba7ed3", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -23,9 +23,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n         _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n-                                         // ty::Const\n-                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n                                          // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n@@ -59,12 +56,6 @@ fn main() -> () {\n         StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:23:11: 28:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n         goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n     }"}, {"sha": "8b867781861818a4ba1685c42fbba1187fba7ed3", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -23,9 +23,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n         _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n-                                         // ty::Const\n-                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n                                          // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n@@ -59,12 +56,6 @@ fn main() -> () {\n         StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:23:11: 28:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n         goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n     }"}, {"sha": "e501b5a9056a9ced48f83819c80a3df543083456", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -22,9 +22,6 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n         _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n         _2 = const std::intrinsics::transmute::<(), Void>(move _3) -> [return: bb2, unwind: bb1]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n-                                         // ty::Const\n-                                         // + ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n@@ -42,9 +39,6 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n         _5 = move _2;                    // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n         const f(move _5) -> bb1;         // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n-                                         // ty::Const\n-                                         // + ty: fn(Void) -> ! {f}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:20:5: 20:6\n                                          // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(Scalar(<ZST>)) }"}, {"sha": "debf1c40110fd871df1170d3fd666e317f928f25", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.32bit", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -112,12 +112,6 @@\n           StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_3);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n@@ -147,17 +141,11 @@\n           _23 = (_18.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _25 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _28 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -166,9 +154,6 @@\n       bb3: {\n           StorageLive(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _29 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -181,17 +166,11 @@\n           StorageDead(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -200,9 +179,6 @@\n       bb5: {\n           StorageLive(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -226,9 +202,6 @@\n           StorageDead(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic_fmt(move _12); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "debf1c40110fd871df1170d3fd666e317f928f25", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.64bit", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -112,12 +112,6 @@\n           StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_3);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n@@ -147,17 +141,11 @@\n           _23 = (_18.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _25 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _28 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -166,9 +154,6 @@\n       bb3: {\n           StorageLive(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _29 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -181,17 +166,11 @@\n           StorageDead(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -200,9 +179,6 @@\n       bb5: {\n           StorageLive(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -226,9 +202,6 @@\n           StorageDead(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic_fmt(move _12); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "1bc6482134673dc03faf78486eb42c573e78ee8c", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.32bit", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -104,12 +104,6 @@\n   \n       bb1: {\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:4:17: 4:23\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n@@ -168,24 +162,12 @@\n   \n       bb4: {\n           _8 = const ();                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n@@ -236,19 +218,13 @@\n           _39 = _36;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _40 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _47 = _40;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _46 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -260,9 +236,6 @@\n           StorageLive(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _49 = _39;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _48 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb7; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -281,19 +254,13 @@\n           _42 = _37;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_43);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _43 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _51 = _43;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _50 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -305,9 +272,6 @@\n           StorageLive(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _53 = _42;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _52 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb9; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -347,9 +311,6 @@\n           _21 = &_22;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _20 = _21;                       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "1bc6482134673dc03faf78486eb42c573e78ee8c", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.64bit", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -104,12 +104,6 @@\n   \n       bb1: {\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:4:17: 4:23\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n@@ -168,24 +162,12 @@\n   \n       bb4: {\n           _8 = const ();                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n@@ -236,19 +218,13 @@\n           _39 = _36;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _40 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _47 = _40;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _46 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -260,9 +236,6 @@\n           StorageLive(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _49 = _39;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _48 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb7; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -281,19 +254,13 @@\n           _42 = _37;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_43);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _43 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _51 = _43;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _50 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -305,9 +272,6 @@\n           StorageLive(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _53 = _42;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _52 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb9; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -347,9 +311,6 @@\n           _21 = &_22;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _20 = _21;                       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "9f9904b40c73eb78504ca6543294d6b52ef66973", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -30,12 +30,6 @@ fn main() -> () {\n \n     bb3: {\n         _1 = const ();                   // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/loop_test.rs:10:5: 12:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageLive(_4);                 // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n@@ -44,12 +38,6 @@ fn main() -> () {\n \n     bb4: {\n         _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/loop_test.rs:11:9: 11:15\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2"}, {"sha": "8a057534056aa22ecb1732dc4e4e945800174602", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -66,9 +66,6 @@ fn full_tested_match() -> () {\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n         _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n-                                         // ty::Const\n-                                         // + ty: fn() -> bool {guard}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:20: 16:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n@@ -114,12 +111,6 @@ fn full_tested_match() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:14:28: 20:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n     }\n }"}, {"sha": "75199884b6e019542639d24d6bee335c9f1c4674", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -64,9 +64,6 @@ fn full_tested_match2() -> () {\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n         _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n-                                         // ty::Const\n-                                         // + ty: fn() -> bool {guard}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:27:20: 27:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n@@ -106,12 +103,6 @@ fn full_tested_match2() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:25:29: 31:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n     }\n }"}, {"sha": "3381b454080762cc6863780e752a628d990cf640", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -72,9 +72,6 @@ fn main() -> () {\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n         _8 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n-                                         // ty::Const\n-                                         // + ty: fn() -> bool {guard}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:36:21: 36:26\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n@@ -118,9 +115,6 @@ fn main() -> () {\n         StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n         _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n         _12 = const guard2(move _13) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n-                                         // ty::Const\n-                                         // + ty: fn(i32) -> bool {guard2}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:38:20: 38:26\n                                          // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(Scalar(<ZST>)) }\n@@ -153,12 +147,6 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:34:11: 41:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n     }\n }"}, {"sha": "e3bc4f80f27fd3468346166b1b3a4fc2a0faa374", "filename": "src/test/mir-opt/match_test.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -99,12 +99,6 @@ fn main() -> () {\n     bb14: {\n         StorageDead(_3);                 // scope 2 at $DIR/match_test.rs:17:6: 17:7\n         _0 = const ();                   // scope 0 at $DIR/match_test.rs:6:11: 18:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:6:11: 18:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 1 at $DIR/match_test.rs:18:1: 18:2\n         StorageDead(_1);                 // scope 0 at $DIR/match_test.rs:18:1: 18:2\n         return;                          // scope 0 at $DIR/match_test.rs:18:2: 18:2"}, {"sha": "883a4e1470b2bd955c1f30a455256e2a0054807b", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -31,12 +31,6 @@\n   \n       bb4: {\n           _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:6:5: 8:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n       }\n   "}, {"sha": "883a4e1470b2bd955c1f30a455256e2a0054807b", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -31,12 +31,6 @@\n   \n       bb4: {\n           _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:6:5: 8:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:6:5: 8:6\n       }\n   "}, {"sha": "8cb7374468aafc65264fe584cd3db6ab4b59929a", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -78,9 +78,6 @@ fn main() -> () {\n     bb4: {\n         StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n         _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-                                         // ty::Const\n-                                         // + ty: fn(usize) -> bool {use_x}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n@@ -91,9 +88,6 @@ fn main() -> () {\n         StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-                                         // ty::Const\n-                                         // + ty: fn(usize) -> bool {use_x}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n@@ -103,24 +97,12 @@ fn main() -> () {\n         StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n         StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n         _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:20:13: 22:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb7: {\n         StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n         _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:22:12: 24:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n "}, {"sha": "6b1b74930aff1c73c54eecba361804d0fce8d77c", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -78,9 +78,6 @@ fn main() -> () {\n     bb4: {\n         StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n         _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-                                         // ty::Const\n-                                         // + ty: fn(usize) -> bool {use_x}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n@@ -91,9 +88,6 @@ fn main() -> () {\n         StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-                                         // ty::Const\n-                                         // + ty: fn(usize) -> bool {use_x}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n@@ -103,24 +97,12 @@ fn main() -> () {\n         StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n         StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n         _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:20:13: 22:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb7: {\n         StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n         _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:22:12: 24:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n "}, {"sha": "c073fad9420085dad172d10effc12175079bed9b", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -21,9 +21,6 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n     bb1: {\n         StorageLive(_4);                 // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n         const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                          // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "a16fb9416e8681546dddaa4e9baccc7e38ae0710", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -21,9 +21,6 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n         _2 = const <str as std::string::ToString>::to_string(move _3) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n                                          // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n@@ -36,9 +33,6 @@ fn main() -> () {\n     bb2: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n         _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n-                                         // ty::Const\n-                                         // + ty: fn(std::string::String) {std::mem::drop::<std::string::String>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n                                          // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }\n@@ -49,12 +43,6 @@ fn main() -> () {\n         StorageDead(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n         StorageDead(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n         _0 = const ();                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n     }\n "}, {"sha": "4641344f01a184ca4775eb69c0deb893dd15e908", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -50,12 +50,6 @@ fn main() -> () {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "4641344f01a184ca4775eb69c0deb893dd15e908", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -50,12 +50,6 @@ fn main() -> () {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "7769a9630d9369cce64e401dcf94838263cb025e", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -9,9 +9,6 @@ fn std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n         Retag([raw] _1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _3 = const <Test as std::ops::Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r mut Test) {<Test as std::ops::Drop>::drop}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "87bade416cb8a9d639857613e4699a6f8045a21d", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -71,9 +71,6 @@ fn main() -> () {\n         _6 = &mut (*_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n         Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:32:29: 32:35\n         _3 = const Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n-                                         // ty::Const\n-                                         // + ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:32:25: 32:28\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(Scalar(<ZST>)) }\n@@ -114,12 +111,6 @@ fn main() -> () {\n         _11 = _12;                       // scope 4 at $DIR/retag.rs:36:18: 36:29\n         StorageDead(_12);                // scope 4 at $DIR/retag.rs:36:29: 36:30\n         _2 = const ();                   // scope 1 at $DIR/retag.rs:31:5: 37:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/retag.rs:31:5: 37:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_11);                // scope 4 at $DIR/retag.rs:37:5: 37:6\n         StorageDead(_10);                // scope 3 at $DIR/retag.rs:37:5: 37:6\n         StorageDead(_8);                 // scope 2 at $DIR/retag.rs:37:5: 37:6\n@@ -176,9 +167,6 @@ fn main() -> () {\n         _22 = &(*_23);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_22);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _19 = const Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n-                                         // ty::Const\n-                                         // + ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:13: 47:20\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(Scalar(<ZST>)) }\n@@ -206,12 +194,6 @@ fn main() -> () {\n         _25 = _26;                       // scope 7 at $DIR/retag.rs:50:14: 50:28\n         StorageDead(_26);                // scope 7 at $DIR/retag.rs:50:28: 50:29\n         _0 = const ();                   // scope 0 at $DIR/retag.rs:29:11: 51:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/retag.rs:29:11: 51:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_25);                // scope 7 at $DIR/retag.rs:51:1: 51:2\n         StorageDead(_15);                // scope 6 at $DIR/retag.rs:51:1: 51:2\n         StorageDead(_13);                // scope 1 at $DIR/retag.rs:51:1: 51:2"}, {"sha": "adcda7fcde0f9494874fc5b388de1eac29658cb5", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -51,12 +51,6 @@\n       bb4: {\n           StorageDead(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:22:6: 22:7\n           _0 = const ();                   // scope 0 at $DIR/simplify-arm-identity.rs:17:11: 23:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:17:11: 23:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:23:1: 23:2\n           return;                          // scope 0 at $DIR/simplify-arm-identity.rs:23:2: 23:2\n       }"}, {"sha": "adcda7fcde0f9494874fc5b388de1eac29658cb5", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -51,12 +51,6 @@\n       bb4: {\n           StorageDead(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:22:6: 22:7\n           _0 = const ();                   // scope 0 at $DIR/simplify-arm-identity.rs:17:11: 23:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:17:11: 23:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:23:1: 23:2\n           return;                          // scope 0 at $DIR/simplify-arm-identity.rs:23:2: 23:2\n       }"}, {"sha": "52c0a195e9983ebbfc0b5a776b6dcf92e65bb62a", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -15,9 +15,6 @@\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n -         _2 = const bar() -> bb3;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n +         _2 = const bar() -> bb1;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-                                           // ty::Const\n-                                           // + ty: fn() -> bool {bar}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n@@ -41,25 +38,13 @@\n -     bb5: {\n +     bb2: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_cfg.rs:7:9: 9:10\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n -     bb6: {\n +     bb3: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_cfg.rs:8:13: 8:18\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }"}, {"sha": "d3d2002cf2158617f46291501054ed818b3ff864", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -24,9 +24,6 @@\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n -         _2 = const bar() -> [return: bb5, unwind: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n +         _2 = const bar() -> [return: bb3, unwind: bb2]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-                                           // ty::Const\n-                                           // + ty: fn() -> bool {bar}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n@@ -53,12 +50,6 @@\n -     bb7: {\n +     bb5: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_cfg.rs:7:9: 9:10\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n +         goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n@@ -67,12 +58,6 @@\n -     bb8: {\n +     bb6: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_cfg.rs:8:13: 8:18\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n -     }\n - "}, {"sha": "49aa7fcb698299ba10167ba72bf126d4d36811ff", "filename": "src/test/mir-opt/simplify_if.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -15,21 +15,12 @@\n   \n       bb1: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_if.rs:6:5: 8:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   \n       bb2: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n           _2 = const noop() -> bb3;        // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n-                                           // ty::Const\n-                                           // + ty: fn() {noop}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:7:9: 7:13\n                                            // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }\n@@ -38,12 +29,6 @@\n       bb3: {\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_if.rs:7:15: 7:16\n           _0 = const ();                   // scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_if.rs:6:14: 8:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   "}, {"sha": "45808962bb564a6b1e794bb748a0a640618e32e4", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -31,12 +31,6 @@\n   \n       bb1: {\n           _0 = const ();                   // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb7;                     // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n       }\n   \n@@ -58,23 +52,11 @@\n   \n       bb4: {\n           _0 = const ();                   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb6;                     // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   \n       bb5: {\n           _0 = const ();                   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb6;                     // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   "}, {"sha": "a33aa085fcd3af3aa888eab0e6730df6e664f992", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -24,21 +24,7 @@\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n -         (_1.0: ()) = const ();           // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n-+         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n-+         _1 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n-                                           // ty::Const\n--                                          // + ty: ()\n--                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n--                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         (_1.1: ()) = const ();           // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n--                                          // ty::Const\n--                                          // + ty: ()\n--                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n--                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:28: 13:29\n@@ -47,25 +33,12 @@\n -         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n -         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n -         (_5.0: ()) = const ();           // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n--                                          // ty::Const\n--                                          // + ty: ()\n--                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n--                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         (_5.1: ()) = const ();           // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n--                                          // ty::Const\n--                                          // + ty: ()\n--                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n--                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         _4 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n--                                          // ty::Const\n-                                           // + ty: fn(((), ())) {use_zst}\n-                                           // + val: Value(Scalar(<ZST>))\n++         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n++         _1 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:12\n                                            // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(Scalar(<ZST>)) }\n@@ -92,9 +65,6 @@\n +         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n +         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n +         _2 = const use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n-                                           // ty::Const\n-                                           // + ty: fn(u8) {use_u8}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:11\n                                            // + literal: Const { ty: fn(u8) {use_u8}, val: Value(Scalar(<ZST>)) }\n@@ -106,12 +76,6 @@\n -         StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n +         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n           _0 = const ();                   // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:12:11: 17:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:12:11: 17:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n       }\n   }"}, {"sha": "10b97ca35956618b88db6c2d50fba542af1dc537", "filename": "src/test/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -22,20 +22,11 @@\n   \n       bb1: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_match.rs:8:18: 8:20\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_match.rs:8:18: 8:20\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb3;                     // scope 0 at $DIR/simplify_match.rs:6:5: 9:6\n       }\n   \n       bb2: {\n           _0 = const noop() -> bb3;        // scope 0 at $DIR/simplify_match.rs:7:17: 7:23\n-                                           // ty::Const\n-                                           // + ty: fn() {noop}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_match.rs:7:17: 7:21\n                                            // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "6a1bb7096c5ef1c507f99a030b4b8f570f304ce4", "filename": "src/test/mir-opt/simplify_try_if_let.{{impl}}-append.SimplifyArmIdentity.diff", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -36,9 +36,6 @@\n           StorageLive(_6);                 // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:53\n           _6 = &mut ((*_2).0: std::option::Option<std::ptr::NonNull<Node>>); // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:53\n           _5 = const std::option::Option::<std::ptr::NonNull<Node>>::take(move _6) -> bb4; // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:60\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r mut std::option::Option<std::ptr::NonNull<Node>>) -> std::option::Option<std::ptr::NonNull<Node>> {std::option::Option::<std::ptr::NonNull<Node>>::take}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_try_if_let.rs:26:54: 26:58\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::option::Option<std::ptr::NonNull<Node>>) -> std::option::Option<std::ptr::NonNull<Node>> {std::option::Option::<std::ptr::NonNull<Node>>::take}, val: Value(Scalar(<ZST>)) }\n@@ -50,12 +47,6 @@\n   \n       bb3: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_try_if_let.rs:22:21: 22:24\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_try_if_let.rs:22:21: 22:24\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb9;                     // scope 0 at $DIR/simplify_try_if_let.rs:21:9: 32:10\n       }\n   \n@@ -67,12 +58,6 @@\n   \n       bb5: {\n           _0 = const ();                   // scope 1 at $DIR/simplify_try_if_let.rs:26:17: 30:18\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_try_if_let.rs:26:17: 30:18\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb8;                     // scope 1 at $DIR/simplify_try_if_let.rs:26:17: 30:18\n       }\n   \n@@ -89,9 +74,6 @@\n           StorageLive(_12);                // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:29\n           _12 = &mut _4;                   // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:29\n           _11 = const std::ptr::NonNull::<Node>::as_mut(move _12) -> bb7; // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:38\n-                                           // ty::Const\n-                                           // + ty: for<'r> unsafe fn(&'r mut std::ptr::NonNull<Node>) -> &'r mut Node {std::ptr::NonNull::<Node>::as_mut}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_try_if_let.rs:28:30: 28:36\n                                            // + literal: Const { ty: for<'r> unsafe fn(&'r mut std::ptr::NonNull<Node>) -> &'r mut Node {std::ptr::NonNull::<Node>::as_mut}, val: Value(Scalar(<ZST>)) }\n@@ -103,12 +85,6 @@\n           StorageDead(_9);                 // scope 3 at $DIR/simplify_try_if_let.rs:28:61: 28:62\n           StorageDead(_11);                // scope 3 at $DIR/simplify_try_if_let.rs:28:62: 28:63\n           _0 = const ();                   // scope 3 at $DIR/simplify_try_if_let.rs:27:21: 29:22\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_try_if_let.rs:27:21: 29:22\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_8);                 // scope 1 at $DIR/simplify_try_if_let.rs:30:17: 30:18\n           goto -> bb8;                     // scope 1 at $DIR/simplify_try_if_let.rs:26:17: 30:18\n       }"}, {"sha": "707caf57c60d84d2f700261c3ba42131cd586173", "filename": "src/test/mir-opt/storage_ranges.main.nll.0.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -50,25 +50,13 @@ fn main() -> () {\n         _3 = &_4;                        // scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n         FakeRead(ForLet, _3);            // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n         _2 = const ();                   // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_ranges.rs:5:5: 7:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_3);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_2);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageLive(_6);                 // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _6 = const 1_i32;                // scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n         FakeRead(ForLet, _6);            // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _0 = const ();                   // scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_ranges.rs:3:11: 9:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_6);                 // scope 1 at $DIR/storage_ranges.rs:9:1: 9:2\n         StorageDead(_1);                 // scope 0 at $DIR/storage_ranges.rs:9:1: 9:2\n         return;                          // scope 0 at $DIR/storage_ranges.rs:9:2: 9:2"}, {"sha": "06161373be284b21677963d624d4b5622a29524a", "filename": "src/test/mir-opt/tls_access.main.SimplifyCfg-final.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -21,12 +21,6 @@ fn main() -> () {\n         (*_3) = const 42_u8;             // scope 2 at $DIR/tls-access.rs:9:9: 9:17\n         StorageDead(_3);                 // scope 2 at $DIR/tls-access.rs:9:17: 9:18\n         _0 = const ();                   // scope 1 at $DIR/tls-access.rs:7:5: 10:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/tls-access.rs:7:5: 10:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 1 at $DIR/tls-access.rs:10:5: 10:6\n         StorageDead(_1);                 // scope 1 at $DIR/tls-access.rs:10:5: 10:6\n         return;                          // scope 0 at $DIR/tls-access.rs:11:2: 11:2"}, {"sha": "dece3dc23250f8e339760b58c85befda7abf1ddd", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -72,12 +72,6 @@ fn move_out_by_subslice() -> () {\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:10:27: 13:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n "}, {"sha": "b182be51125917b5513bcb8abef8b17ea45b1a79", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -72,12 +72,6 @@ fn move_out_from_end() -> () {\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:4:24: 7:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n "}, {"sha": "539ed710719dcaeaa147965bbff6d4794dd58785", "filename": "src/test/mir-opt/uninhabited_enum.process_void.SimplifyLocals.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -14,12 +14,6 @@ fn process_void(_1: *const Void) -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:14:8: 14:14\n         _2 = &(*_1);                     // scope 2 at $DIR/uninhabited-enum.rs:14:26: 14:33\n         _0 = const ();                   // scope 0 at $DIR/uninhabited-enum.rs:13:41: 17:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/uninhabited-enum.rs:13:41: 17:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:17:1: 17:2\n         return;                          // scope 0 at $DIR/uninhabited-enum.rs:17:2: 17:2\n     }"}, {"sha": "0c6378cf92de7000e6000e0f1c9142d57a01a96d", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -65,12 +65,6 @@ fn main() -> () {\n         StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n         StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n         _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n     }\n }"}, {"sha": "d66f81b80982cef75d16313c95d22b18df259330", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -100,12 +100,6 @@\n           StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n           StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n           _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n       }\n   }"}, {"sha": "2e1bae73a403da183f705bb44dc626f630a865da", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -20,9 +20,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n           _1 = const empty() -> bb1;       // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n-                                           // ty::Const\n-                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable.rs:9:23: 9:28\n                                            // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n@@ -36,12 +33,6 @@\n   \n       bb2: {\n           _0 = const ();                   // scope 0 at $DIR/unreachable.rs:9:5: 19:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable.rs:9:5: 19:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/unreachable.rs:20:1: 20:2\n           return;                          // scope 0 at $DIR/unreachable.rs:20:2: 20:2\n -     }\n@@ -59,24 +50,12 @@\n -     bb4: {\n -         _4 = const 42_i32;               // scope 2 at $DIR/unreachable.rs:15:13: 15:20\n -         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:14:16: 16:10\n--                                          // ty::Const\n--                                          // + ty: ()\n--                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n--                                          // + span: $DIR/unreachable.rs:14:16: 16:10\n--                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n -     bb5: {\n -         _4 = const 21_i32;               // scope 2 at $DIR/unreachable.rs:13:13: 13:20\n -         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:12:17: 14:10\n--                                          // ty::Const\n--                                          // + ty: ()\n--                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n--                                          // + span: $DIR/unreachable.rs:12:17: 14:10\n--                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - "}, {"sha": "da50cfe63fa4178e4885746535241321767aa2a6", "filename": "src/test/mir-opt/unreachable_asm.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -23,9 +23,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n           _1 = const empty() -> bb1;       // scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n-                                           // ty::Const\n-                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:11:23: 11:28\n                                            // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n@@ -38,12 +35,6 @@\n   \n       bb2: {\n           _0 = const ();                   // scope 0 at $DIR/unreachable_asm.rs:11:5: 23:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm.rs:11:5: 23:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm.rs:24:1: 24:2\n           return;                          // scope 0 at $DIR/unreachable_asm.rs:24:2: 24:2\n       }\n@@ -61,24 +52,12 @@\n       bb4: {\n           _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm.rs:16:16: 18:10\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb6;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n       bb5: {\n           _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm.rs:14:17: 16:10\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb6;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n@@ -88,12 +67,6 @@\n           StorageLive(_7);                 // scope 2 at $DIR/unreachable_asm.rs:21:9: 21:37\n           llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 3 at $DIR/unreachable_asm.rs:21:18: 21:35\n           _7 = const ();                   // scope 3 at $DIR/unreachable_asm.rs:21:9: 21:37\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm.rs:21:9: 21:37\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm.rs:21:36: 21:37\n           StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm.rs:22:9: 22:21\n           unreachable;                     // scope 2 at $DIR/unreachable_asm.rs:22:15: 22:17"}, {"sha": "b22a697ad8790bc811a606a846963c4722cb28ab", "filename": "src/test/mir-opt/unreachable_asm_2.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -26,9 +26,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n           _1 = const empty() -> bb1;       // scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n-                                           // ty::Const\n-                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:11:23: 11:28\n                                            // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n@@ -41,12 +38,6 @@\n   \n       bb2: {\n           _0 = const ();                   // scope 0 at $DIR/unreachable_asm_2.rs:11:5: 25:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm_2.rs:11:5: 25:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm_2.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/unreachable_asm_2.rs:26:2: 26:2\n       }\n@@ -65,21 +56,9 @@\n           StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n           llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 4 at $DIR/unreachable_asm_2.rs:20:22: 20:39\n           _8 = const ();                   // scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm_2.rs:20:13: 20:41\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n           _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm_2.rs:18:16: 22:10\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n +         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n       }\n@@ -88,21 +67,9 @@\n           StorageLive(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n           llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 3 at $DIR/unreachable_asm_2.rs:16:22: 16:39\n           _7 = const ();                   // scope 3 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm_2.rs:16:13: 16:41\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n           _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm_2.rs:14:17: 18:10\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n -     }\n - "}, {"sha": "2a9575aa998a01d8435afbe03c54bc12ad07500a", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -22,9 +22,6 @@\n           _1 = const true;                 // scope 0 at $DIR/unreachable_diverging.rs:13:13: 13:17\n           StorageLive(_2);                 // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n           _2 = const empty() -> bb1;       // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n-                                           // ty::Const\n-                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:14:25: 14:30\n                                            // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n@@ -37,12 +34,6 @@\n   \n       bb2: {\n           _0 = const ();                   // scope 1 at $DIR/unreachable_diverging.rs:14:5: 19:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_diverging.rs:14:5: 19:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n           StorageDead(_2);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n           return;                          // scope 0 at $DIR/unreachable_diverging.rs:20:2: 20:2\n@@ -60,21 +51,12 @@\n   \n       bb4: {\n -         _5 = const ();                   // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n-+         _5 = const loop_forever() -> bb5; // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n-                                           // ty::Const\n--                                          // + ty: ()\n--                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n--                                          // + span: $DIR/unreachable_diverging.rs:15:9: 17:10\n--                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n -     }\n - \n -     bb5: {\n -         _5 = const loop_forever() -> bb6; // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n--                                          // ty::Const\n-                                           // + ty: fn() {loop_forever}\n-                                           // + val: Value(Scalar(<ZST>))\n++         _5 = const loop_forever() -> bb5; // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n                                            // + literal: Const { ty: fn() {loop_forever}, val: Value(Scalar(<ZST>)) }"}, {"sha": "d843bef6a95bfe7e5b116158e7b416fa38c2cc63", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.32bit", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -36,9 +36,6 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "d843bef6a95bfe7e5b116158e7b416fa38c2cc63", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.64bit", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -36,9 +36,6 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "2d53fefca5590e7e9aaf4f5332e0cb30ce8c08a3", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -26,12 +26,6 @@\n   \n       bb1: {\n           _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/while_let_loops.rs:7:5: 10:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n       }\n   \n@@ -42,12 +36,6 @@\n       bb3: {\n           _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n           _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/while_let_loops.rs:9:9: 9:14\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n       }\n   "}, {"sha": "2d53fefca5590e7e9aaf4f5332e0cb30ce8c08a3", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -26,12 +26,6 @@\n   \n       bb1: {\n           _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/while_let_loops.rs:7:5: 10:6\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n       }\n   \n@@ -42,12 +36,6 @@\n       bb3: {\n           _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n           _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n-                                           // ty::Const\n-                                           // + ty: ()\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/while_let_loops.rs:9:9: 9:14\n-                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n       }\n   "}, {"sha": "523ecb5ec1a3d1248ca8e690a8aaca8dcbdeb871", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.32bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -14,12 +14,6 @@ fn change_loop_body() -> () {\n         StorageLive(_2);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         discriminant(_2) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/while_let_loops.rs:7:5: 10:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n         StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n         return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2"}, {"sha": "523ecb5ec1a3d1248ca8e690a8aaca8dcbdeb871", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.64bit?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -14,12 +14,6 @@ fn change_loop_body() -> () {\n         StorageLive(_2);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         discriminant(_2) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/while_let_loops.rs:7:5: 10:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n         StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n         return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2"}, {"sha": "48c18679c0accdc64b2a87ab0a06287413ca5a42", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5fff3824bc77cd7052e2515f82259e32f8ad1486/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=5fff3824bc77cd7052e2515f82259e32f8ad1486", "patch": "@@ -13,9 +13,6 @@ fn while_loop(_1: bool) -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/while-storage.rs:10:20: 10:21\n         _3 = _1;                         // scope 0 at $DIR/while-storage.rs:10:20: 10:21\n         _2 = const get_bool(move _3) -> bb1; // scope 0 at $DIR/while-storage.rs:10:11: 10:22\n-                                         // ty::Const\n-                                         // + ty: fn(bool) -> bool {get_bool}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:10:11: 10:19\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n@@ -28,12 +25,6 @@ fn while_loop(_1: bool) -> () {\n \n     bb2: {\n         _0 = const ();                   // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/while-storage.rs:10:5: 14:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n@@ -42,9 +33,6 @@ fn while_loop(_1: bool) -> () {\n         StorageLive(_5);                 // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n         _5 = _1;                         // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n         _4 = const get_bool(move _5) -> bb4; // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n-                                         // ty::Const\n-                                         // + ty: fn(bool) -> bool {get_bool}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:11:12: 11:20\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n@@ -63,12 +51,6 @@ fn while_loop(_1: bool) -> () {\n \n     bb6: {\n         _0 = const ();                   // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/while-storage.rs:12:13: 12:18\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n         goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n     }"}]}