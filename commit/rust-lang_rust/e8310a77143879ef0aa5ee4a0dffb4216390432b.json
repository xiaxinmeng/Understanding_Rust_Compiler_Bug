{"sha": "e8310a77143879ef0aa5ee4a0dffb4216390432b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MzEwYTc3MTQzODc5ZWYwYWE1ZWU0YTBkZmZiNDIxNjM5MDQzMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-26T04:42:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-26T04:42:10Z"}, "message": "Auto merge of #60167 - varkor:tidy-filelength, r=matthewjasper\n\nAdd a tidy check for files with over 3,000 lines\n\nFiles with a large number of lines can cause issues in GitHub (e.g. https://github.com/rust-lang/rust/issues/60015) and also tend to be indicative of opportunities to refactor into less monolithic structures.\n\nThis adds a new check to tidy to warn against files that have more than 3,000 lines, as suggested in https://github.com/rust-lang/rust/issues/60015#issuecomment-483868594. (This number was chosen fairly arbitrarily as a reasonable indicator of size.) This check can be ignored with `// ignore-tidy-filelength`.\n\nExisting files with greater than 3,000 lines currently ignore the check, but this helps us spot when files are getting too large. (We might try to split up all files larger than this in the future, as in https://github.com/rust-lang/rust/issues/60015).", "tree": {"sha": "689f6e1bd0f3cdf5bb0fc1e681e4f9a4fe0d3f3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/689f6e1bd0f3cdf5bb0fc1e681e4f9a4fe0d3f3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8310a77143879ef0aa5ee4a0dffb4216390432b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8310a77143879ef0aa5ee4a0dffb4216390432b", "html_url": "https://github.com/rust-lang/rust/commit/e8310a77143879ef0aa5ee4a0dffb4216390432b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8310a77143879ef0aa5ee4a0dffb4216390432b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "180edc21eeca50d0d597de091c8eb712667b5dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/180edc21eeca50d0d597de091c8eb712667b5dd2", "html_url": "https://github.com/rust-lang/rust/commit/180edc21eeca50d0d597de091c8eb712667b5dd2"}, {"sha": "8c3068784c91a2be86b5ea0e5512290cb0e12481", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c3068784c91a2be86b5ea0e5512290cb0e12481", "html_url": "https://github.com/rust-lang/rust/commit/8c3068784c91a2be86b5ea0e5512290cb0e12481"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "05225e5a25b294ed7963ea26bdfb5966382aa322", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! A double-ended queue implemented with a growable ring buffer.\n //!\n //! This queue has `O(1)` amortized inserts and removals from both ends of the"}, {"sha": "c1887a93490f85ad3a2fe04d033294492c899914", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Numeric traits and functions for the built-in numeric types.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "5d77b4dfbf7ae0400567a29036b2104f52ff6136", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Manually manage memory through raw pointers.\n //!\n //! *[See also the pointer primitive types](../../std/primitive.pointer.html).*"}, {"sha": "8731f48675356e399b63d490f7f4fcc268b13041", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Slice management and manipulation.\n //!\n //! For more details see [`std::slice`]."}, {"sha": "7a5511ee1dc8bb666addd2e0e29d19c742a7d09a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! String manipulation.\n //!\n //! For more details, see the `std::str` module."}, {"sha": "bcf1b30814f29bb2645300a891007b390ed125f8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Lowers the AST to the HIR.\n //!\n //! Since the AST and HIR are fairly similar, this is mostly a simple procedure,"}, {"sha": "0dc23f5ce47e58d1df1e58bbcd4bf3d38d77397d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! MIR datatypes and passes. See the [rustc guide] for more info.\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/index.html"}, {"sha": "60d5340613c2a14c7848b1d97d09f1f0d7f1b4d8", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command line options.\n "}, {"sha": "495b099601dac9fe297f483bd5cb638e95743dc8", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Candidate selection. See the [rustc guide] for more information on how this works.\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/resolution.html#selection"}, {"sha": "2d857f402ed6003e68fd0ef49a721eb4c2584019", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Type context book-keeping.\n \n use crate::arena::Arena;"}, {"sha": "f2c77b1bfab7da879b5dfb0ffd35f8b8e21b7396", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n #![allow(usage_of_ty_tykind)]\n \n pub use self::Variance::*;"}, {"sha": "7158efae8f1ad60fc243e5c6d8c3b54162e2cb3a", "filename": "src/librustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n use rustc_apfloat::{Category, ExpInt, IEK_INF, IEK_NAN, IEK_ZERO};\n use rustc_apfloat::{Float, FloatConvert, ParseError, Round, Status};\n use rustc_apfloat::ieee::{Half, Single, Double, Quad, X87DoubleExtended};"}, {"sha": "be68f30353715a2f0caf93c6a36a910ded869380", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(crate_visibility_modifier)]"}, {"sha": "d2d05982c619a17c0d6d447997430fb5667786aa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n /*!\n \n # typeck: check phase"}, {"sha": "ba67593ce968ae426de0994843e7398c479ca948", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,4 +1,6 @@\n // ignore-tidy-linelength\n+// ignore-tidy-filelength\n+\n #![allow(non_snake_case)]\n \n register_long_diagnostics! {"}, {"sha": "81e4905890d45c9c1f430bbeb973c04da667972e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! This module contains the \"cleaned\" pieces of the AST, and the functions\n //! that clean them.\n "}, {"sha": "0a0a9ff64b9cf0c3eb24ed0c6e7c322906b217de", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Rustdoc's HTML rendering module.\n //!\n //! This modules contains the bulk of the logic necessary for rendering a"}, {"sha": "f9fb392f9f52b0edda3af97adfa3e88254629add", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n use self::Entry::*;\n \n use hashbrown::hash_map as base;"}, {"sha": "04672da2b66a7a80b1fed92cceea10dc0509ab20", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Filesystem manipulation operations.\n //!\n //! This module contains basic methods to manipulate the contents of the local"}, {"sha": "126bc3754dabcac134e18c713c3d967878439aa3", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Cross-platform path manipulation.\n //!\n //! This module provides two types, [`PathBuf`] and [`Path`][`Path`] (akin to [`String`]"}, {"sha": "04353fde1b4d97620d17ad07702446d130dc5073", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Multi-producer, single-consumer FIFO queue communication primitives.\n //!\n //! This module provides message-based communication over channels, concretely"}, {"sha": "8efe84cdf016f087b3ef3f698702b734f3fc8994", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n use crate::ast::{AngleBracketedArgs, AsyncArgument, ParenthesizedArgs, AttrStyle, BareFnTy};\n use crate::ast::{GenericBound, TraitBoundModifier};\n use crate::ast::Unsafety;"}, {"sha": "6c0fdfaa776f956bc8f9ca590d9a53b2a40385ad", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n use crate::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use crate::ast::{SelfKind, GenericBound, TraitBoundModifier};\n use crate::ast::{Attribute, MacDelimiter, GenericArg};"}, {"sha": "f8785a63217929c8be85bcc16fa80f94220a120d", "filename": "src/test/run-pass/issues/issue-29466.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Ftest%2Frun-pass%2Fissues%2Fissue-29466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Ftest%2Frun-pass%2Fissues%2Fissue-29466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-29466.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,5 +1,9 @@\n+// ignore-tidy-filelength\n+//\n // run-pass\n+\n #![allow(unused_variables)]\n+\n macro_rules! m(\n     ($e1:expr => $e2:expr) => ({ $e1 })\n );"}, {"sha": "9db16b69e5f29332798bca6b1333fa4acfc8d027", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n use crate::common::CompareMode;\n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};"}, {"sha": "599b6c676fb277835241c520a75d5a1dd8ab6681", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8310a77143879ef0aa5ee4a0dffb4216390432b/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=e8310a77143879ef0aa5ee4a0dffb4216390432b", "patch": "@@ -3,6 +3,7 @@\n //! Example checks are:\n //!\n //! * No lines over 100 characters.\n+//! * No files with over 3000 lines.\n //! * No tabs.\n //! * No trailing whitespace.\n //! * No CR characters.\n@@ -18,6 +19,8 @@ use std::path::Path;\n \n const COLS: usize = 100;\n \n+const LINES: usize = 3000;\n+\n const UNEXPLAINED_IGNORE_DOCTEST_INFO: &str = r#\"unexplained \"```ignore\" doctest; try one:\n \n * make the test actually pass, by adding necessary imports and declarations, or\n@@ -139,19 +142,21 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n         let mut skip_cr = contains_ignore_directive(&contents, \"cr\");\n         let mut skip_tab = contains_ignore_directive(&contents, \"tab\");\n-        let mut skip_length = contains_ignore_directive(&contents, \"linelength\");\n+        let mut skip_line_length = contains_ignore_directive(&contents, \"linelength\");\n+        let mut skip_file_length = contains_ignore_directive(&contents, \"filelength\");\n         let mut skip_end_whitespace = contains_ignore_directive(&contents, \"end-whitespace\");\n         let mut skip_copyright = contains_ignore_directive(&contents, \"copyright\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n+        let mut lines = 0;\n         for (i, line) in contents.split('\\n').enumerate() {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n             if line.chars().count() > COLS && !long_line_is_ok(line) {\n                 suppressible_tidy_err!(\n                     err,\n-                    skip_length,\n+                    skip_line_length,\n                     &format!(\"line longer than {} chars\", COLS)\n                 );\n             }\n@@ -197,6 +202,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             } else {\n                 trailing_new_lines = 0;\n             }\n+            lines = i;\n         }\n         if leading_new_lines {\n             tidy_error!(bad, \"{}: leading newline\", file.display());\n@@ -206,16 +212,31 @@ pub fn check(path: &Path, bad: &mut bool) {\n             1 => {}\n             n => tidy_error!(bad, \"{}: too many trailing newlines ({})\", file.display(), n),\n         };\n+        if lines > LINES {\n+            let mut err = |_| {\n+                tidy_error!(\n+                    bad,\n+                    \"{}: too many lines ({}) (add `// \\\n+                     ignore-tidy-filelength` to the file to suppress this error)\",\n+                    file.display(),\n+                    lines\n+                );\n+            };\n+            suppressible_tidy_err!(err, skip_file_length, \"\");\n+        }\n \n         if let Directive::Ignore(false) = skip_cr {\n             tidy_error!(bad, \"{}: ignoring CR characters unnecessarily\", file.display());\n         }\n         if let Directive::Ignore(false) = skip_tab {\n             tidy_error!(bad, \"{}: ignoring tab characters unnecessarily\", file.display());\n         }\n-        if let Directive::Ignore(false) = skip_length {\n+        if let Directive::Ignore(false) = skip_line_length {\n             tidy_error!(bad, \"{}: ignoring line length unnecessarily\", file.display());\n         }\n+        if let Directive::Ignore(false) = skip_file_length {\n+            tidy_error!(bad, \"{}: ignoring file length unnecessarily\", file.display());\n+        }\n         if let Directive::Ignore(false) = skip_end_whitespace {\n             tidy_error!(bad, \"{}: ignoring trailing whitespace unnecessarily\", file.display());\n         }"}]}