{"sha": "af5cd341d3c6719c02cd4869dc27a7d47aa2c0d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNWNkMzQxZDNjNjcxOWMwMmNkNDg2OWRjMjdhN2Q0N2FhMmMwZDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-20T10:15:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:32:42Z"}, "message": "Move mast static method to the section on methods\n\n/cc: #4217", "tree": {"sha": "452476af32a644f397925db89424e55987f8a4c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452476af32a644f397925db89424e55987f8a4c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af5cd341d3c6719c02cd4869dc27a7d47aa2c0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af5cd341d3c6719c02cd4869dc27a7d47aa2c0d5", "html_url": "https://github.com/rust-lang/rust/commit/af5cd341d3c6719c02cd4869dc27a7d47aa2c0d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af5cd341d3c6719c02cd4869dc27a7d47aa2c0d5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42ab33e5725eea7bfbfd9bc579c3c63a261b684f", "url": "https://api.github.com/repos/rust-lang/rust/commits/42ab33e5725eea7bfbfd9bc579c3c63a261b684f", "html_url": "https://github.com/rust-lang/rust/commit/42ab33e5725eea7bfbfd9bc579c3c63a261b684f"}], "stats": {"total": 79, "additions": 53, "deletions": 26}, "files": [{"sha": "a0fa95d31be9ee01df6bcbf82d23f0af065785b6", "filename": "doc/tutorial.md", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/af5cd341d3c6719c02cd4869dc27a7d47aa2c0d5/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/af5cd341d3c6719c02cd4869dc27a7d47aa2c0d5/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=af5cd341d3c6719c02cd4869dc27a7d47aa2c0d5", "patch": "@@ -1586,6 +1586,36 @@ s.draw_borrowed();\n (&@~s).draw_borrowed();\n ~~~\n \n+Implementations may also define _static_ methods,\n+which don't have an explicit `self` argument.\n+The `static` keyword distinguishes static methods from methods that have a `self`:\n+\n+~~~~ {.xfail-test}\n+impl Circle {\n+    fn area(&self) -> float { ... }\n+    static fn new(area: float) -> Circle { ... }\n+}\n+~~~~\n+\n+> ***Note***: In the future the `static` keyword will be removed and static methods\n+> will be distinguished solely by the presence or absence of the `self` argument.\n+> In the current langugage instance methods may also be declared without an explicit\n+> `self` argument, in which case `self` is an implicit reference.\n+> That form of method is deprecated.\n+\n+Constructors are one common application for static methods, as in `new` above.\n+To call a static method, you have to prefix it with the type name and a double colon:\n+\n+~~~~\n+# use float::consts::pi;\n+# use float::sqrt;\n+struct Circle { radius: float }\n+impl Circle {\n+    static fn new(area: float) -> Circle { Circle { radius: sqrt(area / pi) } }\n+}\n+let c = Circle::new(42.5);\n+~~~~\n+\n We'll discuss implementations more in the context of [traits and\n generics](#generics).\n \n@@ -2113,6 +2143,29 @@ second parameter of type `self`.\n In contrast, in the `impl`, `equals` takes a second parameter of\n type `int`, only using `self` as the name of the receiver.\n \n+Traits can also define static methods which are called by prefixing\n+the method name with the trait name.\n+The compiler will use type inference to decide which implementation to call.\n+\n+~~~~\n+# trait Shape { static fn new(area: float) -> self; }\n+# use float::consts::pi;\n+# use float::sqrt;\n+struct Circle { radius: float }\n+struct Square { length: float }\n+\n+impl Circle: Shape {\n+    static fn new(area: float) -> Circle { Circle { radius: sqrt(area / pi) } }\n+}\n+impl Square: Shape {\n+     static fn new(area: float) -> Square { Square { length: sqrt(area) } }\n+}\n+\n+let area = 42.5;\n+let c: Circle = Shape::new(area);\n+let s: Square = Shape::new(area);\n+~~~~\n+\n ## Bounded type parameters and static method dispatch\n \n Traits give us a language for defining predicates on types, or\n@@ -2238,32 +2291,6 @@ select the method to call at runtime.\n \n This usage of traits is similar to Java interfaces.\n \n-## Static methods\n-\n-Traits can define _static_ methods, which don't have an implicit `self` argument.\n-The `static` keyword distinguishes static methods from methods that have a `self`:\n-\n-~~~~\n-trait Shape {\n-    fn area(&self) -> float;\n-    static fn new_shape(area: float) -> Shape;\n-}\n-~~~~\n-\n-Constructors are one application for static methods, as in `new_shape` above.\n-To call a static method, you have to prefix it with the trait name and a double colon:\n-\n-~~~~\n-# trait Shape { static fn new_shape(area: float) -> self; }\n-# use float::consts::pi;\n-# use float::sqrt;\n-struct Circle { radius: float }\n-impl Circle: Shape {\n-    static fn new_shape(area: float) -> Circle { Circle { radius: sqrt(area / pi) } }\n-}\n-let s: Circle = Shape::new_shape(42.5);\n-~~~~\n-\n ## Trait inheritance\n \n We can write a trait declaration that _inherits_ from other traits, called _supertraits_."}]}