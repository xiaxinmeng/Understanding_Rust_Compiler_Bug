{"sha": "d026977f25e4626e1219395f173a14d40f81de3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMjY5NzdmMjVlNDYyNmUxMjE5Mzk1ZjE3M2ExNGQ0MGY4MWRlM2I=", "commit": {"author": {"name": "Ticki", "email": "Ticki@users.noreply.github.com", "date": "2016-01-12T13:35:04Z"}, "committer": {"name": "Ticki", "email": "Ticki@users.noreply.github.com", "date": "2016-01-16T08:12:09Z"}, "message": "Make style more uniform, add tests for specialization of .last(), move tests to libcoretest\n\nRemove unused import\n\nFold nth() method into the match expr", "tree": {"sha": "379031a93d2034be7ef60fbdf7ee3e57ba0dd32f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379031a93d2034be7ef60fbdf7ee3e57ba0dd32f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d026977f25e4626e1219395f173a14d40f81de3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d026977f25e4626e1219395f173a14d40f81de3b", "html_url": "https://github.com/rust-lang/rust/commit/d026977f25e4626e1219395f173a14d40f81de3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d026977f25e4626e1219395f173a14d40f81de3b/comments", "author": {"login": "ticki", "id": 13349091, "node_id": "MDQ6VXNlcjEzMzQ5MDkx", "avatar_url": "https://avatars.githubusercontent.com/u/13349091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ticki", "html_url": "https://github.com/ticki", "followers_url": "https://api.github.com/users/ticki/followers", "following_url": "https://api.github.com/users/ticki/following{/other_user}", "gists_url": "https://api.github.com/users/ticki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ticki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ticki/subscriptions", "organizations_url": "https://api.github.com/users/ticki/orgs", "repos_url": "https://api.github.com/users/ticki/repos", "events_url": "https://api.github.com/users/ticki/events{/privacy}", "received_events_url": "https://api.github.com/users/ticki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ticki", "id": 13349091, "node_id": "MDQ6VXNlcjEzMzQ5MDkx", "avatar_url": "https://avatars.githubusercontent.com/u/13349091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ticki", "html_url": "https://github.com/ticki", "followers_url": "https://api.github.com/users/ticki/followers", "following_url": "https://api.github.com/users/ticki/following{/other_user}", "gists_url": "https://api.github.com/users/ticki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ticki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ticki/subscriptions", "organizations_url": "https://api.github.com/users/ticki/orgs", "repos_url": "https://api.github.com/users/ticki/repos", "events_url": "https://api.github.com/users/ticki/events{/privacy}", "received_events_url": "https://api.github.com/users/ticki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a5e02486bf1217511549d01c858ea0ec315905", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a5e02486bf1217511549d01c858ea0ec315905", "html_url": "https://github.com/rust-lang/rust/commit/15a5e02486bf1217511549d01c858ea0ec315905"}], "stats": {"total": 141, "additions": 68, "deletions": 73}, "files": [{"sha": "e3915a701c9de55003d57f527fc27d981f082b5b", "filename": "src/libcore/char.rs", "status": "modified", "additions": 28, "deletions": 73, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d026977f25e4626e1219395f173a14d40f81de3b/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d026977f25e4626e1219395f173a14d40f81de3b/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=d026977f25e4626e1219395f173a14d40f81de3b", "patch": "@@ -540,91 +540,46 @@ impl Iterator for EscapeDefault {\n \n     fn count(self) -> usize {\n         match self.state {\n-            EscapeDefaultState::Char(_)       => 1,\n+            EscapeDefaultState::Char(_) => 1,\n             EscapeDefaultState::Unicode(iter) => iter.count(),\n-            EscapeDefaultState::Done          => 0,\n-            EscapeDefaultState::Backslash(_)  => 2,\n+            EscapeDefaultState::Done => 0,\n+            EscapeDefaultState::Backslash(_) => 2,\n         }\n     }\n \n     fn nth(&mut self, n: usize) -> Option<char> {\n-        let ch = match self.state {\n-            EscapeDefaultState::Backslash(c)       => c,\n-            EscapeDefaultState::Char(c)            => c,\n-            EscapeDefaultState::Done               => return None,\n-            EscapeDefaultState::Unicode(ref mut i) => return i.nth(n),\n-        };\n-\n-        let start = if let Some(x) = self.get_offset() {\n-            x\n-        } else {\n-            return None;\n-        };\n-        let idx = start + n;\n-\n-        // Update state\n-        self.state = match idx {\n-            0 => EscapeDefaultState::Char(ch),\n-            _ => EscapeDefaultState::Done,\n-        };\n+        match self.state {\n+            EscapeDefaultState::Backslash(c) if n == 0 => {\n+                self.state = EscapeDefaultState::Char(c);\n+                Some('\\\\')\n+            },\n+            EscapeDefaultState::Backslash(c) if n == 1 => {\n+                self.state = EscapeDefaultState::Done;\n+                Some(c)\n+            },\n+            EscapeDefaultState::Backslash(_) => {\n+                self.state = EscapeDefaultState::Done;\n+                None\n+            },\n+            EscapeDefaultState::Char(c) => {\n+                self.state = EscapeDefaultState::Done;\n \n-        match idx {\n-            0 => Some('\\\\'),\n-            1 => Some(ch),\n-            _ => None,\n+                if n == 0 {\n+                    Some(c)\n+                } else {\n+                    None\n+                }\n+            },\n+            EscapeDefaultState::Done => return None,\n+            EscapeDefaultState::Unicode(ref mut i) => return i.nth(n),\n         }\n     }\n \n     fn last(self) -> Option<char> {\n         match self.state {\n-            EscapeDefaultState::Unicode(iter)                              => iter.last(),\n-            EscapeDefaultState::Done                                       => None,\n+            EscapeDefaultState::Unicode(iter) => iter.last(),\n+            EscapeDefaultState::Done => None,\n             EscapeDefaultState::Backslash(c) | EscapeDefaultState::Char(c) => Some(c),\n         }\n     }\n }\n-\n-#[test]\n-fn ed_iterator_specializations() {\n-    use super::EscapeDefault;\n-\n-    // Check counting\n-    assert_eq!('\\n'.escape_default().count(), 2);\n-    assert_eq!('c'.escape_default().count(), 1);\n-    assert_eq!(' '.escape_default().count(), 1);\n-    assert_eq!('\\\\'.escape_default().count(), 2);\n-    assert_eq!('\\''.escape_default().count(), 2);\n-\n-    // Check nth\n-\n-    // Check that OoB is handled correctly\n-    assert_eq!('\\n'.escape_default().nth(2), None);\n-    assert_eq!('c'.escape_default().nth(1), None);\n-    assert_eq!(' '.escape_default().nth(1), None);\n-    assert_eq!('\\\\'.escape_default().nth(2), None);\n-    assert_eq!('\\''.escape_default().nth(2), None);\n-\n-    // Check the first char\n-    assert_eq!('\\n'.escape_default().nth(0), Some('\\\\'));\n-    assert_eq!('c'.escape_default().nth(0), Some('c'));\n-    assert_eq!(' '.escape_default().nth(0), Some(' '));\n-    assert_eq!('\\\\'.escape_default().nth(0), Some('\\\\'));\n-    assert_eq!('\\''.escape_default().nth(0), Some('\\\\'));\n-\n-    // Check the second char\n-    assert_eq!('\\n'.escape_default().nth(1), Some('n'));\n-    assert_eq!('\\\\'.escape_default().nth(1), Some('\\\\'));\n-    assert_eq!('\\''.escape_default().nth(1), Some('\\''));\n-}\n-\n-\n-impl EscapeDefault {\n-    fn get_offset(&self) -> Option<usize> {\n-        match self.state {\n-            EscapeDefaultState::Backslash(_) => Some(0),\n-            EscapeDefaultState::Char(_)      => Some(1),\n-            EscapeDefaultState::Done         => None,\n-            EscapeDefaultState::Unicode(_)   => None,\n-        }\n-    }\n-}"}, {"sha": "c1f3ea42ef4f768d9b21e968e7fec2181f9eefd5", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d026977f25e4626e1219395f173a14d40f81de3b/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d026977f25e4626e1219395f173a14d40f81de3b/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=d026977f25e4626e1219395f173a14d40f81de3b", "patch": "@@ -216,3 +216,43 @@ fn test_decode_utf16() {\n     check(&[0xD800, 0x41, 0x42], &[Err(0xD800), Ok('A'), Ok('B')]);\n     check(&[0xD800, 0], &[Err(0xD800), Ok('\\0')]);\n }\n+\n+#[test]\n+fn ed_iterator_specializations() {\n+    // Check counting\n+    assert_eq!('\\n'.escape_default().count(), 2);\n+    assert_eq!('c'.escape_default().count(), 1);\n+    assert_eq!(' '.escape_default().count(), 1);\n+    assert_eq!('\\\\'.escape_default().count(), 2);\n+    assert_eq!('\\''.escape_default().count(), 2);\n+\n+    // Check nth\n+\n+    // Check that OoB is handled correctly\n+    assert_eq!('\\n'.escape_default().nth(2), None);\n+    assert_eq!('c'.escape_default().nth(1), None);\n+    assert_eq!(' '.escape_default().nth(1), None);\n+    assert_eq!('\\\\'.escape_default().nth(2), None);\n+    assert_eq!('\\''.escape_default().nth(2), None);\n+\n+    // Check the first char\n+    assert_eq!('\\n'.escape_default().nth(0), Some('\\\\'));\n+    assert_eq!('c'.escape_default().nth(0), Some('c'));\n+    assert_eq!(' '.escape_default().nth(0), Some(' '));\n+    assert_eq!('\\\\'.escape_default().nth(0), Some('\\\\'));\n+    assert_eq!('\\''.escape_default().nth(0), Some('\\\\'));\n+\n+    // Check the second char\n+    assert_eq!('\\n'.escape_default().nth(1), Some('n'));\n+    assert_eq!('\\\\'.escape_default().nth(1), Some('\\\\'));\n+    assert_eq!('\\''.escape_default().nth(1), Some('\\''));\n+\n+    // Check the last char\n+    assert_eq!('\\n'.escape_default().last(), Some('n'));\n+    assert_eq!('c'.escape_default().last(), Some('c'));\n+    assert_eq!(' '.escape_default().last(), Some(' '));\n+    assert_eq!('\\\\'.escape_default().last(), Some('\\\\'));\n+    assert_eq!('\\''.escape_default().last(), Some('\\''));\n+}\n+\n+"}]}