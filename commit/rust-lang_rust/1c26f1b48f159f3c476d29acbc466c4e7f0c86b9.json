{"sha": "1c26f1b48f159f3c476d29acbc466c4e7f0c86b9", "node_id": "C_kwDOAAsO6NoAKDFjMjZmMWI0OGYxNTlmM2M0NzZkMjlhY2JjNDY2YzRlN2YwYzg2Yjk", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-06T10:42:14Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-12T07:34:09Z"}, "message": "split finding the cc for a single target into a separate fn", "tree": {"sha": "6594845c1c7748db1bd8185ea6a1201b8034e5bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6594845c1c7748db1bd8185ea6a1201b8034e5bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c26f1b48f159f3c476d29acbc466c4e7f0c86b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmSGynEACgkQzXazX3c0\ndp5dQA/+JPhIi5ly+PZeBqqS5mauR10HFJrvXDILMspvEMBf22OS2BiFdyGNVKZG\npsjxKUK2AXGYOqyOPX/3wl1gvPI1LMniWRZiQfTwrZesXPDk1fuye4XGT6z728Xl\nAo5AYe7iZJgFZxfKHidRGQ3obF0XI1KuQVt06y+BDQN5nZIuntNdKZLrt/1xILn0\nndOkKoMy6XQyBd4Ilgou7015cu4qEGwrmP7mooshKRypJ6Lp7ilubskUeSmPxXm3\n+9OUQDCZLHRA3oYiOXTM2SbouzaaMGoZA9VA1YKRgnvbKjSNkqVgi/8au7b+Vdes\naKrsikfUK/lcbIbRYOlXvKhIeqSPbHQLpSPSsdstbKH33lPIOLD3vDPe1YPYZyJx\nXS5WywCU5V0FirpZYhjj/A98hW3oc8ohMmYiGcEB6fWQdok/bjmgkJLryHqVUzdz\n/ltpam/lgYpF7Q8kPbcWassVw0AQ7HnXmQAXHcQbO3Bx9Na5IBLifgTpNr+h1DXv\nAZY9wbAABu97Qc234fu5IZZIq3Rp8qEkne7dPmqMuXVYOdFwMZ7bmDjl2XnbOmrJ\nWr2JomL2WIY99iiVSPI8pgn+RhrHf4lee3q/eewtKBhXsdelNoApjBbyL/oUiRvY\nQEEaOF4Vw3WBpbcliuOObirZTbRw8IV92RsULTMV0hYezo67VV0=\n=l1s9\n-----END PGP SIGNATURE-----", "payload": "tree 6594845c1c7748db1bd8185ea6a1201b8034e5bf\nparent c6707dc15aa37ea53dd837b0f55d6d2f13393fc1\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1686048134 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1686555249 +0200\n\nsplit finding the cc for a single target into a separate fn\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c26f1b48f159f3c476d29acbc466c4e7f0c86b9", "html_url": "https://github.com/rust-lang/rust/commit/1c26f1b48f159f3c476d29acbc466c4e7f0c86b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c26f1b48f159f3c476d29acbc466c4e7f0c86b9/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6707dc15aa37ea53dd837b0f55d6d2f13393fc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1", "html_url": "https://github.com/rust-lang/rust/commit/c6707dc15aa37ea53dd837b0f55d6d2f13393fc1"}], "stats": {"total": 100, "additions": 52, "deletions": 48}, "files": [{"sha": "ade3bfed11f9c32090f026578ff505fbfdd0a42c", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 52, "deletions": 48, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/1c26f1b48f159f3c476d29acbc466c4e7f0c86b9/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c26f1b48f159f3c476d29acbc466c4e7f0c86b9/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=1c26f1b48f159f3c476d29acbc466c4e7f0c86b9", "patch": "@@ -100,60 +100,64 @@ pub fn find(build: &Build) {\n         .chain(iter::once(build.build))\n         .collect::<HashSet<_>>();\n     for target in targets.into_iter() {\n-        let mut cfg = new_cc_build(build, target);\n-        let config = build.config.target_config.get(&target);\n-        if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n-            cfg.compiler(cc);\n-        } else {\n-            set_compiler(&mut cfg, Language::C, target, config, build);\n-        }\n+        find_target(build, target);\n+    }\n+}\n \n-        let compiler = cfg.get_compiler();\n-        let ar = if let ar @ Some(..) = config.and_then(|c| c.ar.clone()) {\n-            ar\n-        } else {\n-            cc2ar(compiler.path(), target)\n-        };\n+pub fn find_target(build: &Build, target: TargetSelection) {\n+    let mut cfg = new_cc_build(build, target);\n+    let config = build.config.target_config.get(&target);\n+    if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n+        cfg.compiler(cc);\n+    } else {\n+        set_compiler(&mut cfg, Language::C, target, config, build);\n+    }\n \n-        build.cc.borrow_mut().insert(target, compiler.clone());\n-        let cflags = build.cflags(target, GitRepo::Rustc, CLang::C);\n+    let compiler = cfg.get_compiler();\n+    let ar = if let ar @ Some(..) = config.and_then(|c| c.ar.clone()) {\n+        ar\n+    } else {\n+        cc2ar(compiler.path(), target)\n+    };\n \n-        // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n-        // We'll need one anyways if the target triple is also a host triple\n-        let mut cfg = new_cc_build(build, target);\n-        cfg.cpp(true);\n-        let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n-            cfg.compiler(cxx);\n-            true\n-        } else if build.hosts.contains(&target) || build.build == target {\n-            set_compiler(&mut cfg, Language::CPlusPlus, target, config, build);\n-            true\n-        } else {\n-            // Use an auto-detected compiler (or one configured via `CXX_target_triple` env vars).\n-            cfg.try_get_compiler().is_ok()\n-        };\n+    build.cc.borrow_mut().insert(target, compiler.clone());\n+    let cflags = build.cflags(target, GitRepo::Rustc, CLang::C);\n \n-        // for VxWorks, record CXX compiler which will be used in lib.rs:linker()\n-        if cxx_configured || target.contains(\"vxworks\") {\n-            let compiler = cfg.get_compiler();\n-            build.cxx.borrow_mut().insert(target, compiler);\n-        }\n+    // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n+    // We'll need one anyways if the target triple is also a host triple\n+    let mut cfg = new_cc_build(build, target);\n+    cfg.cpp(true);\n+    let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n+        cfg.compiler(cxx);\n+        true\n+    } else if build.hosts.contains(&target) || build.build == target {\n+        set_compiler(&mut cfg, Language::CPlusPlus, target, config, build);\n+        true\n+    } else {\n+        // Use an auto-detected compiler (or one configured via `CXX_target_triple` env vars).\n+        cfg.try_get_compiler().is_ok()\n+    };\n \n-        build.verbose(&format!(\"CC_{} = {:?}\", &target.triple, build.cc(target)));\n-        build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target.triple, cflags));\n-        if let Ok(cxx) = build.cxx(target) {\n-            let cxxflags = build.cflags(target, GitRepo::Rustc, CLang::Cxx);\n-            build.verbose(&format!(\"CXX_{} = {:?}\", &target.triple, cxx));\n-            build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target.triple, cxxflags));\n-        }\n-        if let Some(ar) = ar {\n-            build.verbose(&format!(\"AR_{} = {:?}\", &target.triple, ar));\n-            build.ar.borrow_mut().insert(target, ar);\n-        }\n+    // for VxWorks, record CXX compiler which will be used in lib.rs:linker()\n+    if cxx_configured || target.contains(\"vxworks\") {\n+        let compiler = cfg.get_compiler();\n+        build.cxx.borrow_mut().insert(target, compiler);\n+    }\n \n-        if let Some(ranlib) = config.and_then(|c| c.ranlib.clone()) {\n-            build.ranlib.borrow_mut().insert(target, ranlib);\n-        }\n+    build.verbose(&format!(\"CC_{} = {:?}\", &target.triple, build.cc(target)));\n+    build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target.triple, cflags));\n+    if let Ok(cxx) = build.cxx(target) {\n+        let cxxflags = build.cflags(target, GitRepo::Rustc, CLang::Cxx);\n+        build.verbose(&format!(\"CXX_{} = {:?}\", &target.triple, cxx));\n+        build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target.triple, cxxflags));\n+    }\n+    if let Some(ar) = ar {\n+        build.verbose(&format!(\"AR_{} = {:?}\", &target.triple, ar));\n+        build.ar.borrow_mut().insert(target, ar);\n+    }\n+\n+    if let Some(ranlib) = config.and_then(|c| c.ranlib.clone()) {\n+        build.ranlib.borrow_mut().insert(target, ranlib);\n     }\n }\n "}]}