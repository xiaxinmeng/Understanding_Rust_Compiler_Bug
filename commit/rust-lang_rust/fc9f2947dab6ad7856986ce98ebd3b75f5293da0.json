{"sha": "fc9f2947dab6ad7856986ce98ebd3b75f5293da0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOWYyOTQ3ZGFiNmFkNzg1Njk4NmNlOThlYmQzYjc1ZjUyOTNkYTA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-24T15:01:03Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-24T15:01:03Z"}, "message": "Document `FallbackToConstRef` and make sure we don't accidentally use it", "tree": {"sha": "981cd9b0b6c434fce6efb370feba1cc978062d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981cd9b0b6c434fce6efb370feba1cc978062d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc9f2947dab6ad7856986ce98ebd3b75f5293da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9f2947dab6ad7856986ce98ebd3b75f5293da0", "html_url": "https://github.com/rust-lang/rust/commit/fc9f2947dab6ad7856986ce98ebd3b75f5293da0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc9f2947dab6ad7856986ce98ebd3b75f5293da0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9550ca624264e3f9b78a95d4454ec30dafd9487b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9550ca624264e3f9b78a95d4454ec30dafd9487b", "html_url": "https://github.com/rust-lang/rust/commit/9550ca624264e3f9b78a95d4454ec30dafd9487b"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "a203b3a142863bcdb3ab2ea7a5f046596937e0cc", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc9f2947dab6ad7856986ce98ebd3b75f5293da0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9f2947dab6ad7856986ce98ebd3b75f5293da0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=fc9f2947dab6ad7856986ce98ebd3b75f5293da0", "patch": "@@ -63,8 +63,23 @@ struct ConstToPat<'a, 'tcx> {\n     include_lint_checks: bool,\n }\n \n-#[derive(Debug)]\n-struct FallbackToConstRef;\n+mod fallback_to_const_ref {\n+    #[derive(Debug)]\n+    /// This error type signals that we encountered a non-struct-eq situation behind a reference.\n+    /// We bubble this up in order to get back to the reference destructuring and make that emit\n+    /// a const pattern instead of a deref pattern. This allows us to simply call `PartialEq::eq`\n+    /// on such patterns (since that function takes a reference) and not have to jump through any\n+    /// hoops to get a reference to the value.\n+    pub(super) struct FallbackToConstRef(());\n+\n+    pub(super) fn fallback_to_const_ref<'a, 'tcx>(\n+        c2p: &super::ConstToPat<'a, 'tcx>,\n+    ) -> FallbackToConstRef {\n+        assert!(c2p.behind_reference.get());\n+        FallbackToConstRef(())\n+    }\n+}\n+use fallback_to_const_ref::{fallback_to_const_ref, FallbackToConstRef};\n \n impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n     fn new(\n@@ -314,7 +329,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // Since we are behind a reference, we can just bubble the error up so we get a\n                 // constant at reference type, making it easy to let the fallback call\n                 // `PartialEq::eq` on it.\n-                return Err(FallbackToConstRef);\n+                return Err(fallback_to_const_ref(self));\n             }\n             ty::Adt(adt_def, _) if !self.type_marked_structural(cv.ty) => {\n                 debug!(\"adt_def {:?} has !type_marked_structural for cv.ty: {:?}\", adt_def, cv.ty);\n@@ -447,7 +462,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     // very hard to invoke `PartialEq::eq` on it as a fallback.\n                     let val = match self.recur(tcx.deref_const(self.param_env.and(cv)), false) {\n                         Ok(subpattern) => PatKind::Deref { subpattern },\n-                        Err(FallbackToConstRef) => PatKind::Constant { value: cv },\n+                        Err(_) => PatKind::Constant { value: cv },\n                     };\n                     self.behind_reference.set(old);\n                     val"}]}