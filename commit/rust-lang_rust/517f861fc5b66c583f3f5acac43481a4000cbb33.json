{"sha": "517f861fc5b66c583f3f5acac43481a4000cbb33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxN2Y4NjFmYzViNjZjNTgzZjNmNWFjYWM0MzQ4MWE0MDAwY2JiMzM=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-03-03T13:54:50Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-03-04T01:25:51Z"}, "message": "Remove ty::Predicate::Equate and ty::EquatePredicate (dead code)", "tree": {"sha": "fdb8ad88b7f906b49dc985ec3d21eeff31e8d5d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdb8ad88b7f906b49dc985ec3d21eeff31e8d5d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/517f861fc5b66c583f3f5acac43481a4000cbb33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/517f861fc5b66c583f3f5acac43481a4000cbb33", "html_url": "https://github.com/rust-lang/rust/commit/517f861fc5b66c583f3f5acac43481a4000cbb33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/517f861fc5b66c583f3f5acac43481a4000cbb33/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b86a91786ca54e898b54f30a6e11546b8e8026", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b86a91786ca54e898b54f30a6e11546b8e8026", "html_url": "https://github.com/rust-lang/rust/commit/c9b86a91786ca54e898b54f30a6e11546b8e8026"}], "stats": {"total": 149, "additions": 1, "deletions": 148}, "files": [{"sha": "a8ed885e78d5585dcd7f18469ed44ca9dde09134", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -244,7 +244,6 @@ impl_stable_hash_for!(enum ty::Visibility {\n \n impl_stable_hash_for!(struct ty::TraitRef<'tcx> { def_id, substs });\n impl_stable_hash_for!(struct ty::TraitPredicate<'tcx> { trait_ref });\n-impl_stable_hash_for!(tuple_struct ty::EquatePredicate<'tcx> { t1, t2 });\n impl_stable_hash_for!(struct ty::SubtypePredicate<'tcx> { a_is_expected, a, b });\n \n impl<'gcx, A, B> HashStable<StableHashingContext<'gcx>>\n@@ -274,9 +273,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::Predicate<'gcx> {\n             ty::Predicate::Trait(ref pred) => {\n                 pred.hash_stable(hcx, hasher);\n             }\n-            ty::Predicate::Equate(ref pred) => {\n-                pred.hash_stable(hcx, hasher);\n-            }\n             ty::Predicate::Subtype(ref pred) => {\n                 pred.hash_stable(hcx, hasher);\n             }"}, {"sha": "3debcf90b2d96fc2847c14897e0f0d83b52b8243", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -1183,7 +1183,6 @@ impl<'tcx> ObligationCause<'tcx> {\n             }),\n             IfExpression => Error0308(\"if and else have incompatible types\"),\n             IfExpressionWithNoElse => Error0317(\"if may be missing an else clause\"),\n-            EquatePredicate => Error0308(\"equality predicate not satisfied\"),\n             MainFunctionType => Error0580(\"main function has wrong type\"),\n             StartFunctionType => Error0308(\"start function has wrong type\"),\n             IntrinsicType => Error0308(\"intrinsic has wrong type\"),\n@@ -1212,7 +1211,6 @@ impl<'tcx> ObligationCause<'tcx> {\n             },\n             IfExpression => \"if and else have compatible types\",\n             IfExpressionWithNoElse => \"if missing an else returns ()\",\n-            EquatePredicate => \"equality where clause is satisfied\",\n             MainFunctionType => \"`main` function has the correct type\",\n             StartFunctionType => \"`start` function has the correct type\",\n             IntrinsicType => \"intrinsic has the correct type\","}, {"sha": "5d44b2043e26ce7cbb48d832a59c1e2a1bce6a34", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -943,23 +943,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.borrow_region_constraints().make_subregion(origin, a, b);\n     }\n \n-    pub fn equality_predicate(&self,\n-                              cause: &ObligationCause<'tcx>,\n-                              param_env: ty::ParamEnv<'tcx>,\n-                              predicate: &ty::PolyEquatePredicate<'tcx>)\n-        -> InferResult<'tcx, ()>\n-    {\n-        self.commit_if_ok(|snapshot| {\n-            let (ty::EquatePredicate(a, b), skol_map) =\n-                self.skolemize_late_bound_regions(predicate, snapshot);\n-            let cause_span = cause.span;\n-            let eqty_ok = self.at(cause, param_env).eq(b, a)?;\n-            self.leak_check(false, cause_span, &skol_map, snapshot)?;\n-            self.pop_skolemized(skol_map, snapshot);\n-            Ok(eqty_ok.unit())\n-        })\n-    }\n-\n     pub fn subtype_predicate(&self,\n                              cause: &ObligationCause<'tcx>,\n                              param_env: ty::ParamEnv<'tcx>,"}, {"sha": "abb35d24d79548379a04556eecd5832b02a5c416", "filename": "src/librustc/infer/outlives/bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -117,7 +117,6 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 assert!(!obligation.has_escaping_regions());\n                 match obligation.predicate {\n                     ty::Predicate::Trait(..) |\n-                    ty::Predicate::Equate(..) |\n                     ty::Predicate::Subtype(..) |\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::ClosureKind(..) |\n@@ -204,7 +203,6 @@ pub fn explicit_outlives_bounds<'tcx>(\n         .filter_map(move |predicate| match predicate {\n             ty::Predicate::Projection(..) |\n             ty::Predicate::Trait(..) |\n-            ty::Predicate::Equate(..) |\n             ty::Predicate::Subtype(..) |\n             ty::Predicate::WellFormed(..) |\n             ty::Predicate::ObjectSafe(..) |"}, {"sha": "ce23cb2349609789334e0f1d6aca5132d8b959bd", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -631,16 +631,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         span_bug!(span, \"subtype requirement gave wrong error: `{:?}`\", predicate)\n                     }\n \n-                    ty::Predicate::Equate(ref predicate) => {\n-                        let predicate = self.resolve_type_vars_if_possible(predicate);\n-                        let err = self.equality_predicate(&obligation.cause,\n-                                                          obligation.param_env,\n-                                                          &predicate).err().unwrap();\n-                        struct_span_err!(self.tcx.sess, span, E0278,\n-                            \"the requirement `{}` is not satisfied (`{}`)\",\n-                            predicate, err)\n-                    }\n-\n                     ty::Predicate::RegionOutlives(ref predicate) => {\n                         let predicate = self.resolve_type_vars_if_possible(predicate);\n                         let err = self.region_outlives_predicate(&obligation.cause,\n@@ -1270,7 +1260,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::MatchExpressionArm { .. } |\n             ObligationCauseCode::IfExpression |\n             ObligationCauseCode::IfExpressionWithNoElse |\n-            ObligationCauseCode::EquatePredicate |\n             ObligationCauseCode::MainFunctionType |\n             ObligationCauseCode::StartFunctionType |\n             ObligationCauseCode::IntrinsicType |"}, {"sha": "2f3e19d92bcda0740ba56918b0093bce2a8e3739", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::{RegionObligation, InferCtxt, InferOk};\n+use infer::{RegionObligation, InferCtxt};\n use ty::{self, Ty, TypeFoldable, ToPolyTraitRef, ToPredicate};\n use ty::error::ExpectedFound;\n use rustc_data_structures::obligation_forest::{ObligationForest, Error};\n@@ -380,17 +380,6 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n             }\n         }\n \n-        ty::Predicate::Equate(ref binder) => {\n-            match selcx.infcx().equality_predicate(&obligation.cause,\n-                                                   obligation.param_env,\n-                                                   binder) {\n-                Ok(InferOk { obligations, value: () }) => {\n-                    Ok(Some(obligations))\n-                },\n-                Err(_) => Err(CodeSelectionError(Unimplemented)),\n-            }\n-        }\n-\n         ty::Predicate::RegionOutlives(ref binder) => {\n             match selcx.infcx().region_outlives_predicate(&obligation.cause, binder) {\n                 Ok(()) => Ok(Some(Vec::new())),"}, {"sha": "063def074b6c103c7e7d8b6744c33877d0bd4c15", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -204,9 +204,6 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Computing common supertype of an if expression with no else counter-part\n     IfExpressionWithNoElse,\n \n-    /// `where a == b`\n-    EquatePredicate,\n-\n     /// `main` has wrong type\n     MainFunctionType,\n "}, {"sha": "52a0a897595b211013bf1f47fc71d694c2cb5186", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -175,7 +175,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::ClosureKind(..) |\n                     ty::Predicate::Subtype(..) |\n-                    ty::Predicate::Equate(..) |\n                     ty::Predicate::ConstEvaluatable(..) => {\n                         false\n                     }\n@@ -204,7 +203,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::Trait(..) |\n-                    ty::Predicate::Equate(..) |\n                     ty::Predicate::Subtype(..) |\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::WellFormed(..) |"}, {"sha": "65b2879823954da64bfe2cccffc69a9c62dfe96a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -691,17 +691,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 self.evaluate_trait_predicate_recursively(previous_stack, obligation)\n             }\n \n-            ty::Predicate::Equate(ref p) => {\n-                // does this code ever run?\n-                match self.infcx.equality_predicate(&obligation.cause, obligation.param_env, p) {\n-                    Ok(InferOk { obligations, .. }) => {\n-                        self.inferred_obligations.extend(obligations);\n-                        EvaluatedToOk\n-                    },\n-                    Err(_) => EvaluatedToErr\n-                }\n-            }\n-\n             ty::Predicate::Subtype(ref p) => {\n                 // does this code ever run?\n                 match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {"}, {"sha": "9dd5aaee7b72f9e5bd956ed667b93bb9aba5937c", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -236,7 +236,6 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             }\n             super::IfExpression => Some(super::IfExpression),\n             super::IfExpressionWithNoElse => Some(super::IfExpressionWithNoElse),\n-            super::EquatePredicate => Some(super::EquatePredicate),\n             super::MainFunctionType => Some(super::MainFunctionType),\n             super::StartFunctionType => Some(super::StartFunctionType),\n             super::IntrinsicType => Some(super::IntrinsicType),\n@@ -512,7 +511,6 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::MatchExpressionArm { arm_span: _, source: _ } |\n             super::IfExpression |\n             super::IfExpressionWithNoElse |\n-            super::EquatePredicate |\n             super::MainFunctionType |\n             super::StartFunctionType |\n             super::IntrinsicType |\n@@ -561,7 +559,6 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::MatchExpressionArm { arm_span: _, source: _ } |\n             super::IfExpression |\n             super::IfExpressionWithNoElse |\n-            super::EquatePredicate |\n             super::MainFunctionType |\n             super::StartFunctionType |\n             super::IntrinsicType |"}, {"sha": "c562f2cd48dde37655a449c1b3c1728f6fd8b23b", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -25,9 +25,6 @@ fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::Predicate::Trait(ref data) =>\n             ty::Predicate::Trait(tcx.anonymize_late_bound_regions(data)),\n \n-        ty::Predicate::Equate(ref data) =>\n-            ty::Predicate::Equate(tcx.anonymize_late_bound_regions(data)),\n-\n         ty::Predicate::RegionOutlives(ref data) =>\n             ty::Predicate::RegionOutlives(tcx.anonymize_late_bound_regions(data)),\n \n@@ -163,11 +160,6 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                 // Currently, we do not elaborate object-safe\n                 // predicates.\n             }\n-            ty::Predicate::Equate(..) => {\n-                // Currently, we do not \"elaborate\" predicates like\n-                // `X == Y`, though conceivably we might. For example,\n-                // `&X == &Y` implies that `X == Y`.\n-            }\n             ty::Predicate::Subtype(..) => {\n                 // Currently, we do not \"elaborate\" predicates like `X\n                 // <: Y`, though conceivably we might."}, {"sha": "2ffac481bb64da32ea08eb7e7e5e5e36f37b0633", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -912,9 +912,6 @@ pub enum Predicate<'tcx> {\n     /// would be the type parameters.\n     Trait(PolyTraitPredicate<'tcx>),\n \n-    /// where `T1 == T2`.\n-    Equate(PolyEquatePredicate<'tcx>),\n-\n     /// where 'a : 'b\n     RegionOutlives(PolyRegionOutlivesPredicate<'tcx>),\n \n@@ -1023,8 +1020,6 @@ impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n         match *self {\n             Predicate::Trait(ty::Binder(ref data)) =>\n                 Predicate::Trait(ty::Binder(data.subst(tcx, substs))),\n-            Predicate::Equate(ty::Binder(ref data)) =>\n-                Predicate::Equate(ty::Binder(data.subst(tcx, substs))),\n             Predicate::Subtype(ty::Binder(ref data)) =>\n                 Predicate::Subtype(ty::Binder(data.subst(tcx, substs))),\n             Predicate::RegionOutlives(ty::Binder(ref data)) =>\n@@ -1072,10 +1067,6 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub struct EquatePredicate<'tcx>(pub Ty<'tcx>, pub Ty<'tcx>); // `0 == 1`\n-pub type PolyEquatePredicate<'tcx> = ty::Binder<EquatePredicate<'tcx>>;\n-\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct OutlivesPredicate<A,B>(pub A, pub B); // `A : B`\n pub type PolyOutlivesPredicate<A,B> = ty::Binder<OutlivesPredicate<A,B>>;\n@@ -1166,12 +1157,6 @@ impl<'tcx> ToPredicate<'tcx> for PolyTraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyEquatePredicate<'tcx> {\n-    fn to_predicate(&self) -> Predicate<'tcx> {\n-        Predicate::Equate(self.clone())\n-    }\n-}\n-\n impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n         Predicate::RegionOutlives(self.clone())\n@@ -1199,9 +1184,6 @@ impl<'tcx> Predicate<'tcx> {\n             ty::Predicate::Trait(ref data) => {\n                 data.skip_binder().input_types().collect()\n             }\n-            ty::Predicate::Equate(ty::Binder(ref data)) => {\n-                vec![data.0, data.1]\n-            }\n             ty::Predicate::Subtype(ty::Binder(SubtypePredicate { a, b, a_is_expected: _ })) => {\n                 vec![a, b]\n             }\n@@ -1242,7 +1224,6 @@ impl<'tcx> Predicate<'tcx> {\n                 Some(t.to_poly_trait_ref())\n             }\n             Predicate::Projection(..) |\n-            Predicate::Equate(..) |\n             Predicate::Subtype(..) |\n             Predicate::RegionOutlives(..) |\n             Predicate::WellFormed(..) |\n@@ -1262,7 +1243,6 @@ impl<'tcx> Predicate<'tcx> {\n             }\n             Predicate::Trait(..) |\n             Predicate::Projection(..) |\n-            Predicate::Equate(..) |\n             Predicate::Subtype(..) |\n             Predicate::RegionOutlives(..) |\n             Predicate::WellFormed(..) |"}, {"sha": "055835ed69c1dcfa3142030d674e85ebc4c66cec", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -282,14 +282,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for ty::EquatePredicate<'a> {\n-    type Lifted = ty::EquatePredicate<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n-                             -> Option<ty::EquatePredicate<'tcx>> {\n-        tcx.lift(&(self.0, self.1)).map(|(a, b)| ty::EquatePredicate(a, b))\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for ty::SubtypePredicate<'a> {\n     type Lifted = ty::SubtypePredicate<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n@@ -355,9 +347,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n             ty::Predicate::Trait(ref binder) => {\n                 tcx.lift(binder).map(ty::Predicate::Trait)\n             }\n-            ty::Predicate::Equate(ref binder) => {\n-                tcx.lift(binder).map(ty::Predicate::Equate)\n-            }\n             ty::Predicate::Subtype(ref binder) => {\n                 tcx.lift(binder).map(ty::Predicate::Subtype)\n             }\n@@ -1049,8 +1038,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         match *self {\n             ty::Predicate::Trait(ref a) =>\n                 ty::Predicate::Trait(a.fold_with(folder)),\n-            ty::Predicate::Equate(ref binder) =>\n-                ty::Predicate::Equate(binder.fold_with(folder)),\n             ty::Predicate::Subtype(ref binder) =>\n                 ty::Predicate::Subtype(binder.fold_with(folder)),\n             ty::Predicate::RegionOutlives(ref binder) =>\n@@ -1073,7 +1060,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             ty::Predicate::Trait(ref a) => a.visit_with(visitor),\n-            ty::Predicate::Equate(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::Subtype(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::RegionOutlives(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::TypeOutlives(ref binder) => binder.visit_with(visitor),\n@@ -1111,16 +1097,6 @@ BraceStructTypeFoldableImpl! {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::EquatePredicate<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::EquatePredicate(self.0.fold_with(folder), self.1.fold_with(folder))\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.0.visit_with(visitor) || self.1.visit_with(visitor)\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for ty::SubtypePredicate<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::SubtypePredicate {"}, {"sha": "9b51e3aac0dae884ca8e1385f96d302b61b9e040", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -385,7 +385,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 match predicate {\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::Trait(..) |\n-                    ty::Predicate::Equate(..) |\n                     ty::Predicate::Subtype(..) |\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |"}, {"sha": "ea99bd39e87927ed9fbc7b789daca08f166eb3a5", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -77,10 +77,6 @@ pub fn predicate_obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n         ty::Predicate::Trait(ref t) => {\n             wf.compute_trait_ref(&t.skip_binder().trait_ref, Elaborate::None); // (*)\n         }\n-        ty::Predicate::Equate(ref t) => {\n-            wf.compute(t.skip_binder().0);\n-            wf.compute(t.skip_binder().1);\n-        }\n         ty::Predicate::RegionOutlives(..) => {\n         }\n         ty::Predicate::TypeOutlives(ref t) => {"}, {"sha": "a2620da4c10ca1d98cefc1ae40d0353a1bfc9635", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -939,7 +939,6 @@ define_print_multi! {\n     ('tcx) ty::Binder<ty::TraitRef<'tcx>>,\n     ('tcx) ty::Binder<ty::FnSig<'tcx>>,\n     ('tcx) ty::Binder<ty::TraitPredicate<'tcx>>,\n-    ('tcx) ty::Binder<ty::EquatePredicate<'tcx>>,\n     ('tcx) ty::Binder<ty::SubtypePredicate<'tcx>>,\n     ('tcx) ty::Binder<ty::ProjectionPredicate<'tcx>>,\n     ('tcx) ty::Binder<ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>>,\n@@ -1217,14 +1216,6 @@ define_print! {\n     }\n }\n \n-define_print! {\n-    ('tcx) ty::EquatePredicate<'tcx>, (self, f, cx) {\n-        display {\n-            print!(f, cx, print(self.0), write(\" == \"), print(self.1))\n-        }\n-    }\n-}\n-\n define_print! {\n     ('tcx) ty::SubtypePredicate<'tcx>, (self, f, cx) {\n         display {\n@@ -1292,7 +1283,6 @@ define_print! {\n         display {\n             match *self {\n                 ty::Predicate::Trait(ref data) => data.print(f, cx),\n-                ty::Predicate::Equate(ref predicate) => predicate.print(f, cx),\n                 ty::Predicate::Subtype(ref predicate) => predicate.print(f, cx),\n                 ty::Predicate::RegionOutlives(ref predicate) => predicate.print(f, cx),\n                 ty::Predicate::TypeOutlives(ref predicate) => predicate.print(f, cx),\n@@ -1317,7 +1307,6 @@ define_print! {\n         debug {\n             match *self {\n                 ty::Predicate::Trait(ref a) => a.print(f, cx),\n-                ty::Predicate::Equate(ref pair) => pair.print(f, cx),\n                 ty::Predicate::Subtype(ref pair) => pair.print(f, cx),\n                 ty::Predicate::RegionOutlives(ref pair) => pair.print(f, cx),\n                 ty::Predicate::TypeOutlives(ref pair) => pair.print(f, cx),"}, {"sha": "72e4b726a22b4594b77582b3f6bd20da8662c6a1", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -255,7 +255,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let opt_trait_ref = match obligation.predicate {\n                     ty::Predicate::Projection(ref data) => Some(data.to_poly_trait_ref(self.tcx)),\n                     ty::Predicate::Trait(ref data) => Some(data.to_poly_trait_ref()),\n-                    ty::Predicate::Equate(..) => None,\n                     ty::Predicate::Subtype(..) => None,\n                     ty::Predicate::RegionOutlives(..) => None,\n                     ty::Predicate::TypeOutlives(..) => None,"}, {"sha": "86cec97b1212e6efcd1a5695a156ce55869b7614", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -635,7 +635,6 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                             _ => None,\n                         }\n                     }\n-                    ty::Predicate::Equate(..) |\n                     ty::Predicate::Subtype(..) |\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::RegionOutlives(..) |"}, {"sha": "d0230a69374d48167f11aa87f5c97d7aa82f2efe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517f861fc5b66c583f3f5acac43481a4000cbb33/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=517f861fc5b66c583f3f5acac43481a4000cbb33", "patch": "@@ -1535,7 +1535,6 @@ impl<'a> Clean<WherePredicate> for ty::Predicate<'a> {\n \n         match *self {\n             Predicate::Trait(ref pred) => pred.clean(cx),\n-            Predicate::Equate(ref pred) => pred.clean(cx),\n             Predicate::Subtype(ref pred) => pred.clean(cx),\n             Predicate::RegionOutlives(ref pred) => pred.clean(cx),\n             Predicate::TypeOutlives(ref pred) => pred.clean(cx),\n@@ -1557,16 +1556,6 @@ impl<'a> Clean<WherePredicate> for ty::TraitPredicate<'a> {\n     }\n }\n \n-impl<'tcx> Clean<WherePredicate> for ty::EquatePredicate<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> WherePredicate {\n-        let ty::EquatePredicate(ref lhs, ref rhs) = *self;\n-        WherePredicate::EqPredicate {\n-            lhs: lhs.clean(cx),\n-            rhs: rhs.clean(cx)\n-        }\n-    }\n-}\n-\n impl<'tcx> Clean<WherePredicate> for ty::SubtypePredicate<'tcx> {\n     fn clean(&self, _cx: &DocContext) -> WherePredicate {\n         panic!(\"subtype predicates are an internal rustc artifact \\"}]}