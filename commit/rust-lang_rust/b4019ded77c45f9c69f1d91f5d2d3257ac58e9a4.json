{"sha": "b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4", "node_id": "C_kwDOAAsO6NoAKGI0MDE5ZGVkNzdjNDVmOWM2OWYxZDkxZjVkMmQzMjU3YWM1OGU5YTQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-15T17:05:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-15T18:08:32Z"}, "message": "rustdoc: Remove doc link resolution fallback to all `macro_rules` in the crate", "tree": {"sha": "60552ba53c0e5be1ea5fbb6839921a6a06fdcf81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60552ba53c0e5be1ea5fbb6839921a6a06fdcf81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4", "html_url": "https://github.com/rust-lang/rust/commit/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a170f2b3d2aa95e51040163e801123b17d38c24f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a170f2b3d2aa95e51040163e801123b17d38c24f", "html_url": "https://github.com/rust-lang/rust/commit/a170f2b3d2aa95e51040163e801123b17d38c24f"}], "stats": {"total": 86, "additions": 39, "deletions": 47}, "files": [{"sha": "95ba4ce5b06b9e834b1b4ebeb10a54dfb42113a3", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4", "patch": "@@ -443,21 +443,6 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             })\n     }\n \n-    /// HACK: Try to search the macro name in the list of all `macro_rules` items in the crate.\n-    /// Used when nothing else works, may often give an incorrect result.\n-    fn resolve_macro_rules(&self, path_str: &str, ns: Namespace) -> Option<Res> {\n-        if ns != MacroNS {\n-            return None;\n-        }\n-\n-        self.cx\n-            .resolver_caches\n-            .all_macro_rules\n-            .get(&Symbol::intern(path_str))\n-            .copied()\n-            .and_then(|res| res.try_into().ok())\n-    }\n-\n     /// Convenience wrapper around `resolve_rustdoc_path`.\n     ///\n     /// This also handles resolving `true` and `false` as booleans.\n@@ -489,8 +474,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 })\n             })\n             .and_then(|res| res.try_into().ok())\n-            .or_else(|| resolve_primitive(path_str, ns))\n-            .or_else(|| self.resolve_macro_rules(path_str, ns));\n+            .or_else(|| resolve_primitive(path_str, ns));\n         debug!(\"{} resolved to {:?} in namespace {:?}\", path_str, result, ns);\n         result\n     }\n@@ -1391,11 +1375,7 @@ impl LinkCollector<'_, '_> {\n                                 }\n                             }\n                         }\n-                        resolution_failure(self, diag, path_str, disambiguator, smallvec![err]);\n-                        // This could just be a normal link or a broken link\n-                        // we could potentially check if something is\n-                        // \"intra-doc-link-like\" and warn in that case.\n-                        None\n+                        resolution_failure(self, diag, path_str, disambiguator, smallvec![err])\n                     }\n                 }\n             }\n@@ -1423,15 +1403,13 @@ impl LinkCollector<'_, '_> {\n                 let len = candidates.iter().filter(|res| res.is_ok()).count();\n \n                 if len == 0 {\n-                    resolution_failure(\n+                    return resolution_failure(\n                         self,\n                         diag,\n                         path_str,\n                         disambiguator,\n                         candidates.into_iter().filter_map(|res| res.err()).collect(),\n                     );\n-                    // this could just be a normal link\n-                    return None;\n                 }\n \n                 if len == 1 {\n@@ -1737,8 +1715,9 @@ fn resolution_failure(\n     path_str: &str,\n     disambiguator: Option<Disambiguator>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n-) {\n+) -> Option<(Res, Option<DefId>)> {\n     let tcx = collector.cx.tcx;\n+    let mut recovered_res = None;\n     report_diagnostic(\n         tcx,\n         BROKEN_INTRA_DOC_LINKS,\n@@ -1826,11 +1805,22 @@ fn resolution_failure(\n                             diag.note(&note);\n                         }\n \n-                        // If the link has `::` in it, assume it was meant to be an intra-doc link.\n-                        // Otherwise, the `[]` might be unrelated.\n-                        // FIXME: don't show this for autolinks (`<>`), `()` style links, or reference links\n                         if !path_str.contains(\"::\") {\n-                            diag.help(r#\"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\"#);\n+                            if disambiguator.map_or(true, |d| d.ns() == MacroNS)\n+                                && let Some(&res) = collector.cx.resolver_caches.all_macro_rules\n+                                                             .get(&Symbol::intern(path_str))\n+                            {\n+                                diag.note(format!(\n+                                    \"`macro_rules` named `{path_str}` exists in this crate, \\\n+                                     but it is not in scope at this link's location\"\n+                                ));\n+                                recovered_res = res.try_into().ok().map(|res| (res, None));\n+                            } else {\n+                                // If the link has `::` in it, assume it was meant to be an\n+                                // intra-doc link. Otherwise, the `[]` might be unrelated.\n+                                diag.help(\"to escape `[` and `]` characters, \\\n+                                           add '\\\\' before them like `\\\\[` or `\\\\]`\");\n+                            }\n                         }\n \n                         continue;\n@@ -1915,6 +1905,8 @@ fn resolution_failure(\n             }\n         },\n     );\n+\n+    recovered_res\n }\n \n fn report_multiple_anchors(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>) {"}, {"sha": "8490584c1b42b346517dd4f709468cade6dbdcf3", "filename": "src/test/rustdoc-ui/intra-doc/macro-rules-error.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.rs?ref=b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4", "patch": "@@ -10,12 +10,11 @@ mod no_escape {\n     }\n }\n \n-/// [before_but_limited_to_module] FIXME: This error should be reported\n-// ERROR unresolved link to `before_but_limited_to_module`\n-/// [after] FIXME: This error should be reported\n-// ERROR unresolved link to `after`\n-/// [str] FIXME: This error shouldn not be reported\n-//~^ ERROR `str` is both a builtin type and a macro\n+/// [before_but_limited_to_module]\n+//~^ ERROR unresolved link to `before_but_limited_to_module`\n+/// [after]\n+//~^ ERROR unresolved link to `after`\n+/// [str]\n fn check() {}\n \n macro_rules! after {"}, {"sha": "8e17323fddebbdd4e1a8b0dcc0041c211a9ab430", "filename": "src/test/rustdoc-ui/intra-doc/macro-rules-error.stderr", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr?ref=b4019ded77c45f9c69f1d91f5d2d3257ac58e9a4", "patch": "@@ -1,22 +1,23 @@\n-error: `str` is both a builtin type and a macro\n-  --> $DIR/macro-rules-error.rs:17:6\n+error: unresolved link to `before_but_limited_to_module`\n+  --> $DIR/macro-rules-error.rs:13:6\n    |\n-LL | /// [str] FIXME: This error shouldn not be reported\n-   |      ^^^ ambiguous link\n+LL | /// [before_but_limited_to_module]\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `before_but_limited_to_module` in scope\n    |\n note: the lint level is defined here\n   --> $DIR/macro-rules-error.rs:5:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: to link to the builtin type, prefix with `prim@`\n+   = note: `macro_rules` named `before_but_limited_to_module` exists in this crate, but it is not in scope at this link's location\n+\n+error: unresolved link to `after`\n+  --> $DIR/macro-rules-error.rs:15:6\n    |\n-LL | /// [prim@str] FIXME: This error shouldn not be reported\n-   |      +++++\n-help: to link to the macro, add an exclamation mark\n+LL | /// [after]\n+   |      ^^^^^ no item named `after` in scope\n    |\n-LL | /// [str!] FIXME: This error shouldn not be reported\n-   |         +\n+   = note: `macro_rules` named `after` exists in this crate, but it is not in scope at this link's location\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}