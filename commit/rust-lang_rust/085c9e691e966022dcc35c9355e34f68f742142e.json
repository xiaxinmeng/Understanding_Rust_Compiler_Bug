{"sha": "085c9e691e966022dcc35c9355e34f68f742142e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NWM5ZTY5MWU5NjYwMjJkY2MzNWM5MzU1ZTM0ZjY4Zjc0MjE0MmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T10:11:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T10:11:08Z"}, "message": "Rollup merge of #64003 - Dante-Broggi:place-align-in-layout, r=matthewjasper\n\nplace: Passing `align` = `layout.align.abi`, when also passing `layout`\n\nOf the calls changed:\n7/12 use `align` = `layout.align.abi`.\n`from_const_alloc` uses `alloc.align`, but that is `assert_eq!` to `layout.align.abi`.\nonly 4/11 use something interesting for `align`.", "tree": {"sha": "23dcaa44085034ca613610f77a5c0a2477992d4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23dcaa44085034ca613610f77a5c0a2477992d4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/085c9e691e966022dcc35c9355e34f68f742142e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcN88CRBK7hj4Ov3rIwAAdHIIAJ2BYszgcEvnGItYyJ+UmOjR\nk2en3fib8De2a6rOJxtrgdZTPkC1dgfzq2fIEVvenYsCYDWgyI4gQEUw4z5mmaFA\ngVsUOPaB8qvGFKtbiPyMYN/IqAOFRYFcH/3lm3fAleWXld+0FV5Um8eRVw1XQhRY\nL00eUMdxUnPuKjQGLJhXf5fKTZUMrR6bp86wFSo8hDzrBttZg+gdi+nB/flEfm6F\ngB6UQ1CsNdqvAaSVGnfcCDNFrrgVC7ZWC4PrZHvNoWVOYAI2mmKd8DX246xbnLbj\nnEAAtSOk/t+QpLNtY0gWlYgR4PAjymXGPzdII3o00tgikPdSRp59iqbNNVPjx/U=\n=Ohap\n-----END PGP SIGNATURE-----\n", "payload": "tree 23dcaa44085034ca613610f77a5c0a2477992d4d\nparent d855bde45728cf8716a0adcdecd98815e4faabd5\nparent 8657fb1140165f770a928b04095fc025308a4fb2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567678268 +0200\ncommitter GitHub <noreply@github.com> 1567678268 +0200\n\nRollup merge of #64003 - Dante-Broggi:place-align-in-layout, r=matthewjasper\n\nplace: Passing `align` = `layout.align.abi`, when also passing `layout`\n\nOf the calls changed:\n7/12 use `align` = `layout.align.abi`.\n`from_const_alloc` uses `alloc.align`, but that is `assert_eq!` to `layout.align.abi`.\nonly 4/11 use something interesting for `align`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/085c9e691e966022dcc35c9355e34f68f742142e", "html_url": "https://github.com/rust-lang/rust/commit/085c9e691e966022dcc35c9355e34f68f742142e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/085c9e691e966022dcc35c9355e34f68f742142e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d855bde45728cf8716a0adcdecd98815e4faabd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d855bde45728cf8716a0adcdecd98815e4faabd5", "html_url": "https://github.com/rust-lang/rust/commit/d855bde45728cf8716a0adcdecd98815e4faabd5"}, {"sha": "8657fb1140165f770a928b04095fc025308a4fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8657fb1140165f770a928b04095fc025308a4fb2", "html_url": "https://github.com/rust-lang/rust/commit/8657fb1140165f770a928b04095fc025308a4fb2"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "e13a5ecc2ebfdf3c8549ffd404d52db3b99a5991", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=085c9e691e966022dcc35c9355e34f68f742142e", "patch": "@@ -561,7 +561,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n         let align = dest.align.restrict_for_offset(dest.layout.field(self.cx(), 0).size);\n         cg_elem.val.store(&mut body_bx,\n-            PlaceRef::new_sized(current, cg_elem.layout, align));\n+            PlaceRef::new_sized_aligned(current, cg_elem.layout, align));\n \n         let next = body_bx.inbounds_gep(current, &[self.const_usize(1)]);\n         body_bx.br(header_bx.llbb());"}, {"sha": "6fbea9646b8a9fe524514000c23c70a6f3ee8f17", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=085c9e691e966022dcc35c9355e34f68f742142e", "patch": "@@ -349,7 +349,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             )};\n             self.const_bitcast(llval, llty)\n         };\n-        PlaceRef::new_sized(llval, layout, alloc.align)\n+        PlaceRef::new_sized(llval, layout)\n     }\n \n     fn const_ptrcast(&self, val: &'ll Value, ty: &'ll Type) -> &'ll Value {"}, {"sha": "fc0b9ffd11d8389a1a4394c654af7bf1d14d93cb", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=085c9e691e966022dcc35c9355e34f68f742142e", "patch": "@@ -101,7 +101,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let name = &*tcx.item_name(def_id).as_str();\n \n         let llret_ty = self.layout_of(ret_ty).llvm_type(self);\n-        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout, fn_ty.ret.layout.align.abi);\n+        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout);\n \n         let simple = get_simple_intrinsic(self, name);\n         let llval = match name {"}, {"sha": "c41e46398467a7e37d4becd8edde36a8731705d2", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=085c9e691e966022dcc35c9355e34f68f742142e", "patch": "@@ -988,7 +988,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Handle both by-ref and immediate tuples.\n         if let Ref(llval, None, align) = tuple.val {\n-            let tuple_ptr = PlaceRef::new_sized(llval, tuple.layout, align);\n+            let tuple_ptr = PlaceRef::new_sized_aligned(llval, tuple.layout, align);\n             for i in 0..tuple.layout.fields.count() {\n                 let field_ptr = tuple_ptr.project_field(bx, i);\n                 let field = bx.load_operand(field_ptr);\n@@ -1202,7 +1202,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let llty = bx.backend_type(src.layout);\n         let cast_ptr = bx.pointercast(dst.llval, bx.type_ptr_to(llty));\n         let align = src.layout.align.abi.min(dst.align);\n-        src.val.store(bx, PlaceRef::new_sized(cast_ptr, src.layout, align));\n+        src.val.store(bx, PlaceRef::new_sized_aligned(cast_ptr, src.layout, align));\n     }\n \n "}, {"sha": "8acb3ba06267e96b04b51e3c4268bfb8a8bc1106", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=085c9e691e966022dcc35c9355e34f68f742142e", "patch": "@@ -289,7 +289,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 if local == mir::RETURN_PLACE && fx.fn_ty.ret.is_indirect() {\n                     debug!(\"alloc: {:?} (return place) -> place\", local);\n                     let llretptr = bx.get_param(0);\n-                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout, layout.align.abi))\n+                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout))\n                 } else if memory_locals.contains(local) {\n                     debug!(\"alloc: {:?} -> place\", local);\n                     if layout.is_unsized() {\n@@ -548,7 +548,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             let llarg = bx.get_param(llarg_idx);\n             bx.set_value_name(llarg, &name);\n             llarg_idx += 1;\n-            PlaceRef::new_sized(llarg, arg.layout, arg.layout.align.abi)\n+            PlaceRef::new_sized(llarg, arg.layout)\n         } else if arg.is_unsized_indirect() {\n             // As the storage for the indirect argument lives during\n             // the whole function call, we just copy the fat pointer."}, {"sha": "a8ab3ea10ed166b363ff1c200e5c834f1e9f1f53", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=085c9e691e966022dcc35c9355e34f68f742142e", "patch": "@@ -485,7 +485,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         bx.load_operand(PlaceRef::new_sized(\n                             bx.cx().const_undef(bx.cx().type_ptr_to(bx.cx().backend_type(layout))),\n                             layout,\n-                            layout.align.abi,\n                         ))\n                     })\n             }"}, {"sha": "b8e10d34302920bf146d76469c3d97827e91da80", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=085c9e691e966022dcc35c9355e34f68f742142e", "patch": "@@ -30,6 +30,19 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     pub fn new_sized(\n         llval: V,\n         layout: TyLayout<'tcx>,\n+    ) -> PlaceRef<'tcx, V> {\n+        assert!(!layout.is_unsized());\n+        PlaceRef {\n+            llval,\n+            llextra: None,\n+            layout,\n+            align: layout.align.abi\n+        }\n+    }\n+\n+    pub fn new_sized_aligned(\n+        llval: V,\n+        layout: TyLayout<'tcx>,\n         align: Align,\n     ) -> PlaceRef<'tcx, V> {\n         assert!(!layout.is_unsized());\n@@ -45,14 +58,13 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         bx: &mut Bx,\n         llval: V,\n         layout: TyLayout<'tcx>,\n-        align: Align,\n     ) -> PlaceRef<'tcx, V> {\n         assert!(!bx.cx().type_has_metadata(layout.ty));\n         PlaceRef {\n             llval,\n             llextra: None,\n             layout,\n-            align\n+            align: layout.align.abi\n         }\n     }\n \n@@ -64,7 +76,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         debug!(\"alloca({:?}: {:?})\", name, layout);\n         assert!(!layout.is_unsized(), \"tried to statically allocate unsized place\");\n         let tmp = bx.alloca(bx.cx().backend_type(layout), name, layout.align.abi);\n-        Self::new_sized(tmp, layout, layout.align.abi)\n+        Self::new_sized(tmp, layout)\n     }\n \n     /// Returns a place for an indirect reference to an unsized place.\n@@ -482,7 +494,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let llval = bx.cx().const_undef(\n                             bx.cx().type_ptr_to(bx.cx().backend_type(layout))\n                         );\n-                        PlaceRef::new_sized(llval, layout, layout.align.abi)\n+                        PlaceRef::new_sized(llval, layout)\n                     }\n                 }\n             }\n@@ -498,7 +510,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // with a static that is an extern_type.\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n                 let static_ = bx.get_static(*def_id);\n-                PlaceRef::new_thin_place(bx, static_, layout, layout.align.abi)\n+                PlaceRef::new_thin_place(bx, static_, layout)\n             },\n             mir::PlaceRef {\n                 base,"}, {"sha": "e0ad2527229badb3eaa4df852f26db1084c07e11", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085c9e691e966022dcc35c9355e34f68f742142e/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=085c9e691e966022dcc35c9355e34f68f742142e", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         scratch.storage_dead(&mut bx);\n                     }\n                     OperandValue::Ref(llref, None, align) => {\n-                        let source = PlaceRef::new_sized(llref, operand.layout, align);\n+                        let source = PlaceRef::new_sized_aligned(llref, operand.layout, align);\n                         base::coerce_unsized_into(&mut bx, source, dest);\n                     }\n                     OperandValue::Ref(_, Some(_), _) => {"}]}