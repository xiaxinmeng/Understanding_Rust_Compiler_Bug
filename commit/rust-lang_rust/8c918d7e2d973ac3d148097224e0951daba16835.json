{"sha": "8c918d7e2d973ac3d148097224e0951daba16835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOTE4ZDdlMmQ5NzNhYzNkMTQ4MDk3MjI0ZTA5NTFkYWJhMTY4MzU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-09T06:43:47Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-18T01:41:33Z"}, "message": "[HACK(eddyb)] arena-allocate but don't intern `FnAbi`s.", "tree": {"sha": "cbbffa84c893dc04b1b777182f71f7471e2e52a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbbffa84c893dc04b1b777182f71f7471e2e52a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c918d7e2d973ac3d148097224e0951daba16835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c918d7e2d973ac3d148097224e0951daba16835", "html_url": "https://github.com/rust-lang/rust/commit/8c918d7e2d973ac3d148097224e0951daba16835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c918d7e2d973ac3d148097224e0951daba16835/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "html_url": "https://github.com/rust-lang/rust/commit/c1837ef1c58edd48c81341126ecc94e7adc5bd3d"}], "stats": {"total": 7, "additions": 1, "deletions": 6}, "files": [{"sha": "7cd5584c3589b78c86c1eabccf000e0012d6a963", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c918d7e2d973ac3d148097224e0951daba16835/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c918d7e2d973ac3d148097224e0951daba16835/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8c918d7e2d973ac3d148097224e0951daba16835", "patch": "@@ -55,7 +55,6 @@ use rustc_span::def_id::{DefPathHash, StableCrateId};\n use rustc_span::source_map::{MultiSpan, SourceMap};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Layout, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n \n@@ -136,7 +135,6 @@ pub struct CtxtInterners<'tcx> {\n     const_allocation: InternedSet<'tcx, Allocation>,\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, Layout>,\n-    fn_abi: InternedSet<'tcx, FnAbi<'tcx, Ty<'tcx>>>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -157,7 +155,6 @@ impl<'tcx> CtxtInterners<'tcx> {\n             const_allocation: Default::default(),\n             bound_variable_kinds: Default::default(),\n             layout: Default::default(),\n-            fn_abi: Default::default(),\n         }\n     }\n \n@@ -1962,7 +1959,6 @@ impl<'tcx> TyCtxt<'tcx> {\n                     self.0.interners.const_allocation.len()\n                 )?;\n                 writeln!(fmt, \"Layout interner: #{}\", self.0.interners.layout.len())?;\n-                writeln!(fmt, \"FnAbi interner: #{}\", self.0.interners.fn_abi.len())?;\n \n                 Ok(())\n             }\n@@ -2087,7 +2083,6 @@ direct_interners! {\n     const_: mk_const(Const<'tcx>),\n     const_allocation: intern_const_alloc(Allocation),\n     layout: intern_layout(Layout),\n-    fn_abi: intern_fn_abi(FnAbi<'tcx, Ty<'tcx>>),\n }\n \n macro_rules! slice_interners {"}, {"sha": "cfbbec374a172acc35fa6d9adf7cc97cd15755db", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c918d7e2d973ac3d148097224e0951daba16835/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c918d7e2d973ac3d148097224e0951daba16835/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=8c918d7e2d973ac3d148097224e0951daba16835", "patch": "@@ -3118,7 +3118,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         };\n         self.fn_abi_adjust_for_abi(&mut fn_abi, sig.abi)?;\n         debug!(\"fn_abi_new_uncached = {:?}\", fn_abi);\n-        Ok(self.tcx.intern_fn_abi(fn_abi))\n+        Ok(self.tcx.arena.alloc(fn_abi))\n     }\n \n     fn fn_abi_adjust_for_abi("}]}