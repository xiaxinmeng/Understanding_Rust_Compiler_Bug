{"sha": "476bd5305872001efd7104d183dc9a90726f2b49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NmJkNTMwNTg3MjAwMWVmZDcxMDRkMTgzZGM5YTkwNzI2ZjJiNDk=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-04T21:50:36Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-16T23:50:34Z"}, "message": "Cleanup", "tree": {"sha": "b378fc8dbc9eb0fdf1aed134dc215e930d62817f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b378fc8dbc9eb0fdf1aed134dc215e930d62817f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/476bd5305872001efd7104d183dc9a90726f2b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/476bd5305872001efd7104d183dc9a90726f2b49", "html_url": "https://github.com/rust-lang/rust/commit/476bd5305872001efd7104d183dc9a90726f2b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/476bd5305872001efd7104d183dc9a90726f2b49/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f24c21a5055f65e34decbf731b8a162502a0d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f24c21a5055f65e34decbf731b8a162502a0d0e", "html_url": "https://github.com/rust-lang/rust/commit/7f24c21a5055f65e34decbf731b8a162502a0d0e"}], "stats": {"total": 91, "additions": 25, "deletions": 66}, "files": [{"sha": "ed2aca4dd810912477294612bda952bc7d0d769d", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=476bd5305872001efd7104d183dc9a90726f2b49", "patch": "@@ -541,7 +541,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                     span_bug!(cause.span, \"unexpected const outlives {:?}\", constraint);\n                 }\n             };\n-            let predicate = predicate.rebind(atom).potentially_quantified(self.tcx);\n+            let predicate = predicate.rebind(atom).to_predicate(self.tcx);\n \n             Obligation::new(cause.clone(), param_env, predicate)\n         })"}, {"sha": "b3a9e4b668c82833fde5611509275038306a489e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=476bd5305872001efd7104d183dc9a90726f2b49", "patch": "@@ -1070,16 +1070,6 @@ impl<'tcx> Predicate<'tcx> {\n         self.inner.binder.skip_binder()\n     }\n \n-    /// Returns the inner `PredicateAtom`.\n-    ///\n-    /// Note that this method does not check if the predicate has unbound variables.\n-    ///\n-    /// Rebinding the returned atom can causes the previously bound variables\n-    /// to end up at the wrong binding level.\n-    pub fn skip_binders_unchecked(self) -> PredicateAtom<'tcx> {\n-        self.inner.binder.skip_binder()\n-    }\n-\n     /// Converts this to a `Binder<PredicateAtom<'tcx>>`. If the value was an\n     /// `Atom`, then it is not allowed to contain escaping bound vars.\n     pub fn bound_atom(self) -> Binder<PredicateAtom<'tcx>> {\n@@ -1089,12 +1079,6 @@ impl<'tcx> Predicate<'tcx> {\n     pub fn bound_atom_ref(self) -> &'tcx Binder<PredicateAtom<'tcx>> {\n         &self.inner.binder\n     }\n-\n-    /// Allows using a `Binder<PredicateAtom<'tcx>>` even if the given predicate previously\n-    /// contained unbound variables by shifting these variables outwards.\n-    pub fn bound_atom_with_opt_escaping(self, _tcx: TyCtxt<'tcx>) -> Binder<PredicateAtom<'tcx>> {\n-        self.inner.binder\n-    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n@@ -1160,13 +1144,6 @@ pub enum PredicateAtom<'tcx> {\n     TypeWellFormedFromEnv(Ty<'tcx>),\n }\n \n-impl<'tcx> Binder<PredicateAtom<'tcx>> {\n-    /// Wraps `self` with the given qualifier if this predicate has any unbound variables.\n-    pub fn potentially_quantified(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        self.to_predicate(tcx)\n-    }\n-}\n-\n /// The crate outlives map is computed during typeck and contains the\n /// outlives of every item in the local crate. You should not use it\n /// directly, because to do so will make your pass dependent on the\n@@ -1254,7 +1231,7 @@ impl<'tcx> Predicate<'tcx> {\n         let substs = trait_ref.skip_binder().substs;\n         let pred = self.skip_binders();\n         let new = pred.subst(tcx, substs);\n-        if new != pred { ty::Binder::bind(new).potentially_quantified(tcx) } else { self }\n+        if new != pred { ty::Binder::bind(new).to_predicate(tcx) } else { self }\n     }\n }\n \n@@ -1409,27 +1386,25 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitPredicate<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        self.value\n-            .map_bound(|value| PredicateAtom::Trait(value, self.constness))\n-            .potentially_quantified(tcx)\n+        self.value.map_bound(|value| PredicateAtom::Trait(value, self.constness)).to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        self.map_bound(PredicateAtom::RegionOutlives).potentially_quantified(tcx)\n+        self.map_bound(PredicateAtom::RegionOutlives).to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        self.map_bound(PredicateAtom::TypeOutlives).potentially_quantified(tcx)\n+        self.map_bound(PredicateAtom::TypeOutlives).to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        self.map_bound(PredicateAtom::Projection).potentially_quantified(tcx)\n+        self.map_bound(PredicateAtom::Projection).to_predicate(tcx)\n     }\n }\n "}, {"sha": "5d291a6169f4c2b18d2a8558076c1425923a3662", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=476bd5305872001efd7104d183dc9a90726f2b49", "patch": "@@ -627,7 +627,7 @@ pub trait PrettyPrinter<'tcx>:\n                         // may contain unbound variables. We therefore do this manually.\n                         //\n                         // FIXME(lcnr): Find out why exactly this is the case :)\n-                        let bound_predicate = predicate.bound_atom_with_opt_escaping(self.tcx());\n+                        let bound_predicate = predicate.bound_atom();\n                         if let ty::PredicateAtom::Trait(pred, _) = bound_predicate.skip_binder() {\n                             let trait_ref = bound_predicate.rebind(pred.trait_ref);\n                             // Don't print +Sized, but rather +?Sized if absent."}, {"sha": "3a82ead08ab99fd575ee069579436fc6ac75aee2", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=476bd5305872001efd7104d183dc9a90726f2b49", "patch": "@@ -81,11 +81,8 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n         interner: &RustInterner<'tcx>,\n     ) -> chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'tcx>>> {\n         let clauses = self.environment.into_iter().map(|predicate| {\n-            let (predicate, binders, _named_regions) = collect_bound_vars(\n-                interner,\n-                interner.tcx,\n-                predicate.bound_atom_with_opt_escaping(interner.tcx),\n-            );\n+            let (predicate, binders, _named_regions) =\n+                collect_bound_vars(interner, interner.tcx, predicate.bound_atom());\n             let consequence = match predicate {\n                 ty::PredicateAtom::TypeWellFormedFromEnv(ty) => {\n                     chalk_ir::DomainGoal::FromEnv(chalk_ir::FromEnv::Ty(ty.lower_into(interner)))\n@@ -136,11 +133,8 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predicate<'tcx> {\n     fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::GoalData<RustInterner<'tcx>> {\n-        let (predicate, binders, _named_regions) = collect_bound_vars(\n-            interner,\n-            interner.tcx,\n-            self.bound_atom_with_opt_escaping(interner.tcx),\n-        );\n+        let (predicate, binders, _named_regions) =\n+            collect_bound_vars(interner, interner.tcx, self.bound_atom());\n \n         let value = match predicate {\n             ty::PredicateAtom::Trait(predicate, _) => {\n@@ -573,11 +567,8 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n         self,\n         interner: &RustInterner<'tcx>,\n     ) -> Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>> {\n-        let (predicate, binders, _named_regions) = collect_bound_vars(\n-            interner,\n-            interner.tcx,\n-            self.bound_atom_with_opt_escaping(interner.tcx),\n-        );\n+        let (predicate, binders, _named_regions) =\n+            collect_bound_vars(interner, interner.tcx, self.bound_atom());\n         let value = match predicate {\n             ty::PredicateAtom::Trait(predicate, _) => {\n                 Some(chalk_ir::WhereClause::Implemented(predicate.trait_ref.lower_into(interner)))\n@@ -707,11 +698,8 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n         self,\n         interner: &RustInterner<'tcx>,\n     ) -> Option<chalk_solve::rust_ir::QuantifiedInlineBound<RustInterner<'tcx>>> {\n-        let (predicate, binders, _named_regions) = collect_bound_vars(\n-            interner,\n-            interner.tcx,\n-            self.bound_atom_with_opt_escaping(interner.tcx),\n-        );\n+        let (predicate, binders, _named_regions) =\n+            collect_bound_vars(interner, interner.tcx, self.bound_atom());\n         match predicate {\n             ty::PredicateAtom::Trait(predicate, _) => Some(chalk_ir::Binders::new(\n                 binders,"}, {"sha": "82fbbd3a77ea24b3deae678418f9dccbd5d30cc0", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=476bd5305872001efd7104d183dc9a90726f2b49", "patch": "@@ -544,7 +544,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.infcx.instantiate_opaque_types(id, self.body_id, self.param_env, ty, span);\n                 let mut suggest_box = !impl_trait_ret_ty.obligations.is_empty();\n                 for o in impl_trait_ret_ty.obligations {\n-                    match o.predicate.skip_binders_unchecked() {\n+                    match o.predicate.bound_atom().skip_binder() {\n                         ty::PredicateAtom::Trait(t, constness) => {\n                             let pred = ty::PredicateAtom::Trait(\n                                 ty::TraitPredicate {"}, {"sha": "20b4aa1bc049f6e4c79e70e434657a9391944ba9", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=476bd5305872001efd7104d183dc9a90726f2b49", "patch": "@@ -1949,7 +1949,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                         let predicate = ty::Binder::bind(ty::PredicateAtom::TypeOutlives(\n                             ty::OutlivesPredicate(ty, re_root_empty),\n                         ));\n-                        predicates.insert((predicate.potentially_quantified(tcx), span));\n+                        predicates.insert((predicate.to_predicate(tcx), span));\n                     }\n                 }\n \n@@ -1993,7 +1993,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                                 ty::Binder::bind(ty::PredicateAtom::TypeOutlives(\n                                     ty::OutlivesPredicate(ty, region),\n                                 ))\n-                                .potentially_quantified(tcx),\n+                                .to_predicate(tcx),\n                                 lifetime.span,\n                             ));\n                         }"}, {"sha": "8c92fc1744adc350e6828cdf46298b7191eac8d6", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476bd5305872001efd7104d183dc9a90726f2b49/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=476bd5305872001efd7104d183dc9a90726f2b49", "patch": "@@ -30,13 +30,10 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n                 if tcx.has_attr(item_def_id, sym::rustc_outlives) {\n                     let mut pred: Vec<String> = predicates\n                         .iter()\n-                        .map(|(out_pred, _)| {\n-                            let binder = out_pred.bound_atom();\n-                            match binder.skip_binder() {\n-                                ty::PredicateAtom::RegionOutlives(p) => p.to_string(),\n-                                ty::PredicateAtom::TypeOutlives(p) => p.to_string(),\n-                                err => bug!(\"unexpected predicate {:?}\", err),\n-                            }\n+                        .map(|(out_pred, _)| match out_pred.bound_atom().skip_binder() {\n+                            ty::PredicateAtom::RegionOutlives(p) => p.to_string(),\n+                            ty::PredicateAtom::TypeOutlives(p) => p.to_string(),\n+                            err => bug!(\"unexpected predicate {:?}\", err),\n                         })\n                         .collect();\n                     pred.sort();"}, {"sha": "35d93c58a9db4d3e28f292efaf63b410a0e6b1ab", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476bd5305872001efd7104d183dc9a90726f2b49/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476bd5305872001efd7104d183dc9a90726f2b49/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=476bd5305872001efd7104d183dc9a90726f2b49", "patch": "@@ -1686,7 +1686,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     .filter_map(|bound| {\n                         // Note: The substs of opaque types can contain unbound variables,\n                         // meaning that we have to use `ignore_quantifiers_with_unbound_vars` here.\n-                        let bound_predicate = bound.bound_atom_with_opt_escaping(cx.tcx);\n+                        let bound_predicate = bound.bound_atom();\n                         let trait_ref = match bound_predicate.skip_binder() {\n                             ty::PredicateAtom::Trait(tr, _constness) => {\n                                 bound_predicate.rebind(tr.trait_ref)\n@@ -1711,7 +1711,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                             .iter()\n                             .filter_map(|bound| {\n                                 if let ty::PredicateAtom::Projection(proj) =\n-                                    bound.bound_atom_with_opt_escaping(cx.tcx).skip_binder()\n+                                    bound.bound_atom().skip_binder()\n                                 {\n                                     if proj.projection_ty.trait_ref(cx.tcx)\n                                         == trait_ref.skip_binder()"}, {"sha": "3e87ef03832d2b334d3324e2442734b9143e1402", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/476bd5305872001efd7104d183dc9a90726f2b49/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476bd5305872001efd7104d183dc9a90726f2b49/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=476bd5305872001efd7104d183dc9a90726f2b49", "patch": "@@ -115,8 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n-                let binder = obligation.predicate.bound_atom();\n-                match binder.skip_binder() {\n+                match obligation.predicate.bound_atom().skip_binder() {\n                     ty::PredicateAtom::Trait(pred, _) if !pred.has_escaping_bound_vars() => {\n                         if pred.def_id() == sized_trait {\n                             return None;"}]}