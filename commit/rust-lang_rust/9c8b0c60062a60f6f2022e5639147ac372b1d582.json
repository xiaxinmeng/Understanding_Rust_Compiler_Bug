{"sha": "9c8b0c60062a60f6f2022e5639147ac372b1d582", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOGIwYzYwMDYyYTYwZjZmMjAyMmU1NjM5MTQ3YWMzNzJiMWQ1ODI=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-09-03T01:09:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T18:30:49Z"}, "message": "Demode treemap.rs", "tree": {"sha": "b43eefd30960317ee95989bc7070c12bdebcb297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b43eefd30960317ee95989bc7070c12bdebcb297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c8b0c60062a60f6f2022e5639147ac372b1d582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c8b0c60062a60f6f2022e5639147ac372b1d582", "html_url": "https://github.com/rust-lang/rust/commit/9c8b0c60062a60f6f2022e5639147ac372b1d582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c8b0c60062a60f6f2022e5639147ac372b1d582/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "100368ab86d4ac7fa306c1cebd3bf26c7d24bcda", "url": "https://api.github.com/repos/rust-lang/rust/commits/100368ab86d4ac7fa306c1cebd3bf26c7d24bcda", "html_url": "https://github.com/rust-lang/rust/commit/100368ab86d4ac7fa306c1cebd3bf26c7d24bcda"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "3d8a5dc86fa4e004812d526a2cd5a645c5938d99", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c8b0c60062a60f6f2022e5639147ac372b1d582/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c8b0c60062a60f6f2022e5639147ac372b1d582/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=9c8b0c60062a60f6f2022e5639147ac372b1d582", "patch": "@@ -5,6 +5,8 @@\n  * very naive algorithm, but it will probably be updated to be a\n  * red-black tree or something else.\n  */\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n \n use core::cmp::{Eq, Ord};\n use core::option::{Some, None};\n@@ -30,7 +32,7 @@ enum tree_node<K, V> = {\n fn treemap<K, V>() -> treemap<K, V> { @mut None }\n \n /// Insert a value into the map\n-fn insert<K: copy Eq Ord, V: copy>(m: &mut tree_edge<K, V>, k: K, v: V) {\n+fn insert<K: copy Eq Ord, V: copy>(m: &mut tree_edge<K, V>, +k: K, +v: V) {\n     match copy *m {\n       None => {\n         *m = Some(@tree_node({key: k,\n@@ -52,7 +54,7 @@ fn insert<K: copy Eq Ord, V: copy>(m: &mut tree_edge<K, V>, k: K, v: V) {\n }\n \n /// Find a value based on the key\n-fn find<K: copy Eq Ord, V: copy>(m: &const tree_edge<K, V>, k: K)\n+fn find<K: copy Eq Ord, V: copy>(m: &const tree_edge<K, V>, +k: K)\n                               -> Option<V> {\n     match copy *m {\n       None => None,\n@@ -124,7 +126,7 @@ mod tests {\n         insert(m, 1, ());\n \n         let n = @mut 0;\n-        fn t(n: @mut int, &&k: int, &&_v: ()) {\n+        fn t(n: @mut int, +k: int, +_v: ()) {\n             assert (*n == k); *n += 1;\n         }\n         traverse(m, |x,y| t(n, x, y));"}]}