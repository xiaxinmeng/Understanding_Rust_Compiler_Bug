{"sha": "b2028828db7e4870cb6a310f8ad8169ac9ea134d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMDI4ODI4ZGI3ZTQ4NzBjYjZhMzEwZjhhZDgxNjlhYzllYTEzNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T17:53:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T17:53:29Z"}, "message": "Auto merge of #53433 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #52946 (Documented impl From on line 367 of libserialize/json.rs)\n - #53234 (Remove Travis shutdown debug scripts, and remove CI-specific DNS settings)\n - #53313 (Two small improvements)\n - #53360 (Addressed #51602)\n - #53364 (Warn if the user tries to use GATs)\n - #53373 (Tweak unclosed delimiter parser error)\n - #53377 (std: Use target_pointer_width for BACKTRACE_ELF_SIZE)\n - #53395 (Use #[non_exhaustive] on internal enums)\n - #53399 (Tidy: ignore non-Markdown files when linting for the Unstable Book)\n - #53412 (syntax_ext: remove leftover span_err_if_not_stage0 macro.)", "tree": {"sha": "bc4f6c4442f67a7b62f9afe54c0b1368a3ca210f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc4f6c4442f67a7b62f9afe54c0b1368a3ca210f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2028828db7e4870cb6a310f8ad8169ac9ea134d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2028828db7e4870cb6a310f8ad8169ac9ea134d", "html_url": "https://github.com/rust-lang/rust/commit/b2028828db7e4870cb6a310f8ad8169ac9ea134d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2028828db7e4870cb6a310f8ad8169ac9ea134d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5590423e6ceb048dd7d792382e960d66b7615d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5590423e6ceb048dd7d792382e960d66b7615d2", "html_url": "https://github.com/rust-lang/rust/commit/b5590423e6ceb048dd7d792382e960d66b7615d2"}, {"sha": "a68e61a9f207fd2be27584bbea184822e22d8cfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a68e61a9f207fd2be27584bbea184822e22d8cfe", "html_url": "https://github.com/rust-lang/rust/commit/a68e61a9f207fd2be27584bbea184822e22d8cfe"}], "stats": {"total": 542, "additions": 297, "deletions": 245}, "files": [{"sha": "2a5f755ebff3df3292587cb6ef96e9e0cb60a718", "filename": ".travis.yml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -218,10 +218,6 @@ before_install:\n       echo '{\"ipv6\":true,\"fixed-cidr-v6\":\"fd9a:8454:6789:13f7::/64\"}' | sudo tee /etc/docker/daemon.json;\n       sudo service docker restart;\n     fi\n-  - date\n-  - sudo atq || true\n-  - sudo grep -rE 'shutdown|poweroff|halt' /var/spool/cron || true\n-  - sudo grep -E 'google-clock-skew|ntpd|startup-script' /var/log/syslog || true\n \n install:\n   - case \"$TRAVIS_OS_NAME\" in\n@@ -278,8 +274,6 @@ after_success:\n       du . | sort -nr | head -n100\n \n after_failure:\n-  # Requested by travis to debug \"shutting down NOW\" errors\n-  - sudo tail -n 500 /var/log/syslog\n   - >\n       echo \"#### Build failed; Disk usage after running script:\";\n       df -h;"}, {"sha": "99b768ab1a92edc66c0bd61cabd6e55b26c9c9bb", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -100,7 +100,7 @@ name = \"backtrace\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace-sys 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -109,7 +109,7 @@ dependencies = [\n \n [[package]]\n name = \"backtrace-sys\"\n-version = \"0.1.23\"\n+version = \"0.1.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3125,7 +3125,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum assert_cli 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98589b0e465a6c510d95fceebd365bb79bedece7f6e18a480897f2015f85ec51\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n \"checksum backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89a47830402e9981c5c41223151efcced65a0510c13097c769cede7efb34782a\"\n-\"checksum backtrace-sys 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bff67d0c06556c0b8e6b5f090f0eac52d950d9dfd1d35ba04e4ca3543eaf6a7e\"\n+\"checksum backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c66d56ac8dabd07f6aacdaf633f4b8262f5b3601a810a0dcddffd5c22c69daa0\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d0c54bb8f454c567f21197eefcdbf5679d0bd99f2ddbe52e84c77061952e6789\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\""}, {"sha": "3a7714d32fa17741dbf0b4f38822a87dd8b776f0", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -119,10 +119,6 @@ fi\n # goes ahead and sets it for all builders.\n args=\"$args --privileged\"\n \n-if [ \"$CI\" != \"\" ]; then\n-    args=\"$args --dns 8.8.8.8 --dns 8.8.4.4 --dns 1.1.1.1 --dns 1.0.0.1\"\n-fi\n-\n exec docker \\\n   run \\\n   --volume \"$root_dir:/checkout:ro\" \\"}, {"sha": "40c2ef2db0551ec64fbe1b671bb6c5cb62582e74", "filename": "src/doc/unstable-book/src/library-features/future-atomic-orderings.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5590423e6ceb048dd7d792382e960d66b7615d2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffuture-atomic-orderings.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5590423e6ceb048dd7d792382e960d66b7615d2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffuture-atomic-orderings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffuture-atomic-orderings.md?ref=b5590423e6ceb048dd7d792382e960d66b7615d2", "patch": "@@ -1,5 +0,0 @@\n-# `future_atomic_orderings`\n-\n-This feature is internal to the Rust compiler and is not intended for general use.\n-\n-------------------------"}, {"sha": "5bee18d33d61bcf21538e1f4c21bf36bf76facce", "filename": "src/doc/unstable-book/src/library-features/io-error-internals.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5590423e6ceb048dd7d792382e960d66b7615d2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5590423e6ceb048dd7d792382e960d66b7615d2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio-error-internals.md?ref=b5590423e6ceb048dd7d792382e960d66b7615d2", "patch": "@@ -1,5 +0,0 @@\n-# `io_error_internals`\n-\n-This feature is internal to the Rust compiler and is not intended for general use.\n-\n-------------------------"}, {"sha": "e85bf1dfcad23c99116b2cd20497752a2f9991e2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -120,6 +120,7 @@\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]\n+#![feature(non_exhaustive)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "617e067e0787ed128a1e1217bdc9b6ae395bc575", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -185,6 +185,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// [nomicon]: ../../../nomicon/atomics.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug)]\n+#[non_exhaustive]\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     ///\n@@ -256,10 +257,6 @@ pub enum Ordering {\n     /// [`AcqRel`]: https://llvm.org/docs/Atomics.html#acquirerelease\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n-    // Prevent exhaustive matching to allow for future extension\n-    #[doc(hidden)]\n-    #[unstable(feature = \"future_atomic_orderings\", issue = \"0\")]\n-    __Nonexhaustive,\n }\n \n /// An [`AtomicBool`] initialized to `false`.\n@@ -1954,7 +1951,6 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n         SeqCst => SeqCst,\n         Acquire => Acquire,\n         AcqRel => Acquire,\n-        __Nonexhaustive => __Nonexhaustive,\n     }\n }\n \n@@ -1966,7 +1962,6 @@ unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n         SeqCst => intrinsics::atomic_store(dst, val),\n         Acquire => panic!(\"there is no such thing as an acquire store\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release store\"),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1978,7 +1973,6 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n         SeqCst => intrinsics::atomic_load(dst),\n         Release => panic!(\"there is no such thing as a release load\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release load\"),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1991,7 +1985,6 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xchg(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2004,7 +1997,6 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xadd(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2017,7 +2009,6 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xsub(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2039,8 +2030,6 @@ unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),\n-        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n-        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -2065,8 +2054,6 @@ unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n-        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n-        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -2082,7 +2069,6 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_and_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_and_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_and(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2094,7 +2080,6 @@ unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_nand_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_nand_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_nand(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2106,7 +2091,6 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_or_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_or_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_or(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2118,7 +2102,6 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xor_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xor_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xor(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2131,7 +2114,6 @@ unsafe fn atomic_max<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_max_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_max_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_max(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2144,7 +2126,6 @@ unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_min_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_min_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_min(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2157,7 +2138,6 @@ unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_umax_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_umax_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_umax(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2170,7 +2150,6 @@ unsafe fn atomic_umin<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_umin_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_umin_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_umin(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2260,7 +2239,6 @@ pub fn fence(order: Ordering) {\n             AcqRel => intrinsics::atomic_fence_acqrel(),\n             SeqCst => intrinsics::atomic_fence(),\n             Relaxed => panic!(\"there is no such thing as a relaxed fence\"),\n-            __Nonexhaustive => panic!(\"invalid memory ordering\"),\n         }\n     }\n }\n@@ -2350,7 +2328,6 @@ pub fn compiler_fence(order: Ordering) {\n             AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),\n             SeqCst => intrinsics::atomic_singlethreadfence(),\n             Relaxed => panic!(\"there is no such thing as a relaxed compiler fence\"),\n-            __Nonexhaustive => panic!(\"invalid memory ordering\"),\n         }\n     }\n }"}, {"sha": "af7790164183c7dbfed11cc9b671173b1876f2ae", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -16,6 +16,7 @@ use syntax_pos::MultiSpan;\n /// An enum representing a diagnostic level.\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n #[derive(Copy, Clone, Debug)]\n+#[non_exhaustive]\n pub enum Level {\n     /// An error.\n     Error,\n@@ -25,8 +26,6 @@ pub enum Level {\n     Note,\n     /// A help message.\n     Help,\n-    #[doc(hidden)]\n-    __Nonexhaustive,\n }\n \n /// A structure representing a diagnostic message and associated children"}, {"sha": "b54054752eaf14521ea3405f9bb7c91039d2cd02", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -36,6 +36,7 @@\n #![feature(staged_api)]\n #![feature(lang_items)]\n #![feature(optin_builtin_traits)]\n+#![feature(non_exhaustive)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "21229d3299d7e5a7251e7e52252aec82900539eb", "filename": "src/libproc_macro/rustc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibproc_macro%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibproc_macro%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Frustc.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -278,7 +278,6 @@ impl Level {\n             Level::Warning => errors::Level::Warning,\n             Level::Note => errors::Level::Note,\n             Level::Help => errors::Level::Help,\n-            Level::__Nonexhaustive => unreachable!(\"Level::__Nonexhaustive\"),\n         }\n     }\n }"}, {"sha": "87d59d2e763cbe89743452e59379e8888f639f3a", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -2306,24 +2306,14 @@ mod sig {\n \n     /// One, not zero, based LSB. That is, returns 0 for a zeroed significand.\n     pub(super) fn olsb(limbs: &[Limb]) -> usize {\n-        for (i, &limb) in limbs.iter().enumerate() {\n-            if limb != 0 {\n-                return i * LIMB_BITS + limb.trailing_zeros() as usize + 1;\n-            }\n-        }\n-\n-        0\n+        limbs.iter().enumerate().find(|(_, &limb)| limb != 0).map_or(0,\n+            |(i, limb)| i * LIMB_BITS + limb.trailing_zeros() as usize + 1)\n     }\n \n     /// One, not zero, based MSB. That is, returns 0 for a zeroed significand.\n     pub(super) fn omsb(limbs: &[Limb]) -> usize {\n-        for (i, &limb) in limbs.iter().enumerate().rev() {\n-            if limb != 0 {\n-                return (i + 1) * LIMB_BITS - limb.leading_zeros() as usize;\n-            }\n-        }\n-\n-        0\n+        limbs.iter().enumerate().rfind(|(_, &limb)| limb != 0).map_or(0,\n+            |(i, limb)| (i + 1) * LIMB_BITS - limb.leading_zeros() as usize)\n     }\n \n     /// Comparison (unsigned) of two significands."}, {"sha": "35ef6327de5fd81f73c63b2092cf79fc6da36745", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -365,6 +365,9 @@ impl std::error::Error for EncoderError {\n }\n \n impl From<fmt::Error> for EncoderError {\n+    /// Converts a [`fmt::Error`] into `EncoderError`\n+    ///\n+    /// This conversion does not allocate memory.\n     fn from(err: fmt::Error) -> EncoderError { EncoderError::FmtError(err) }\n }\n \n@@ -1387,10 +1390,9 @@ impl Stack {\n \n     // Used by Parser to test whether the top-most element is an index.\n     fn last_is_index(&self) -> bool {\n-        if let Some(InternalIndex(_)) = self.stack.last() {\n-            true\n-        } else {\n-            false\n+        match self.stack.last() {\n+            Some(InternalIndex(_)) => true,\n+            _ => false,\n         }\n     }\n "}, {"sha": "016e7adb4c914e1445b4db78d9ddc5229c331884", "filename": "src/libstd/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -104,7 +104,8 @@ fn build_libbacktrace(target: &str) -> Result<(), ()> {\n     } else {\n         build.file(\"../libbacktrace/elf.c\");\n \n-        if target.contains(\"64\") {\n+        let pointer_width = env::var(\"CARGO_CFG_TARGET_POINTER_WIDTH\").unwrap();\n+        if pointer_width == \"64\" {\n             build.define(\"BACKTRACE_ELF_SIZE\", \"64\");\n         } else {\n             build.define(\"BACKTRACE_ELF_SIZE\", \"32\");"}, {"sha": "3e50988a68ba2e13fa34e29e17e3f902f6abfbaf", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -97,6 +97,7 @@ struct Custom {\n #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n+#[non_exhaustive]\n pub enum ErrorKind {\n     /// An entity was not found, often a file.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -180,15 +181,6 @@ pub enum ErrorKind {\n     /// read.\n     #[stable(feature = \"read_exact\", since = \"1.6.0\")]\n     UnexpectedEof,\n-\n-    /// A marker variant that tells the compiler that users of this enum cannot\n-    /// match it exhaustively.\n-    #[unstable(feature = \"io_error_internals\",\n-               reason = \"better expressed through extensible enums that this \\\n-                         enum cannot be exhaustively matched against\",\n-               issue = \"0\")]\n-    #[doc(hidden)]\n-    __Nonexhaustive,\n }\n \n impl ErrorKind {\n@@ -212,7 +204,6 @@ impl ErrorKind {\n             ErrorKind::Interrupted => \"operation interrupted\",\n             ErrorKind::Other => \"other os error\",\n             ErrorKind::UnexpectedEof => \"unexpected end of file\",\n-            ErrorKind::__Nonexhaustive => unreachable!()\n         }\n     }\n }"}, {"sha": "60ad330bb9b72a280dd9f888de474e6888c916ba", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -311,6 +311,7 @@\n #![feature(doc_keyword)]\n #![feature(panic_info_message)]\n #![feature(panic_implementation)]\n+#![feature(non_exhaustive)]\n \n #![default_lib_allocator]\n "}, {"sha": "cd9a5ad448f58c31b099818351b39f600b4c9f21", "filename": "src/libstd/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -121,6 +121,7 @@ include!(\"bitflags.rs\");\n /// File or memory access pattern advisory information.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum advice {\n   /// The application expects that it will not access the\n   /// specified data in the near future.\n@@ -140,12 +141,12 @@ pub enum advice {\n   /// The application expects to access the specified data\n   /// in the near future.\n   WILLNEED   = 6,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n /// Enumeration describing the kind of value stored in [`auxv`](struct.auxv.html).\n #[repr(u32)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum auxtype {\n   /// Base address of the binary argument data provided to\n   /// [`proc_exec()`](fn.proc_exec.html).\n@@ -210,12 +211,12 @@ pub enum auxtype {\n   SYSINFO_EHDR = 262,\n   /// Thread ID of the initial thread of the process.\n   TID          = 261,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u32,\n }\n \n /// Identifiers for clocks.\n #[repr(u32)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum clockid {\n   /// The system-wide monotonic clock, which is defined as a\n   /// clock measuring real time, whose value cannot be\n@@ -232,7 +233,6 @@ pub enum clockid {\n   REALTIME           = 3,\n   /// The CPU-time clock associated with the current thread.\n   THREAD_CPUTIME_ID  = 4,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u32,\n }\n \n /// A userspace condition variable.\n@@ -267,6 +267,7 @@ pub const DIRCOOKIE_START: dircookie = dircookie(0);\n /// exclusively or merely provided for alignment with POSIX.\n #[repr(u16)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum errno {\n   /// No error occurred. System call completed successfully.\n   SUCCESS        =  0,\n@@ -422,7 +423,6 @@ pub enum errno {\n   XDEV           = 75,\n   /// Extension: Capabilities insufficient.\n   NOTCAPABLE     = 76,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u16,\n }\n \n bitflags! {\n@@ -438,6 +438,7 @@ bitflags! {\n /// Type of a subscription to an event or its occurrence.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum eventtype {\n   /// The time value of clock [`subscription.union.clock.clock_id`](struct.subscription_clock.html#structfield.clock_id)\n   /// has reached timestamp [`subscription.union.clock.timeout`](struct.subscription_clock.html#structfield.timeout).\n@@ -463,7 +464,6 @@ pub enum eventtype {\n   /// The process associated with process descriptor\n   /// [`subscription.union.proc_terminate.fd`](struct.subscription_proc_terminate.html#structfield.fd) has terminated.\n   PROC_TERMINATE = 7,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n /// Exit code generated by a process when exiting.\n@@ -530,6 +530,7 @@ pub type filesize = u64;\n /// The type of a file descriptor or file.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum filetype {\n   /// The type of the file descriptor or file is unknown or\n   /// is different from any of the other types specified.\n@@ -558,7 +559,6 @@ pub enum filetype {\n   SOCKET_STREAM    = 130,\n   /// The file refers to a symbolic link inode.\n   SYMBOLIC_LINK    = 144,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n bitflags! {\n@@ -847,12 +847,12 @@ bitflags! {\n /// memory.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum scope {\n   /// The object is stored in private memory.\n   PRIVATE = 4,\n   /// The object is stored in shared memory.\n   SHARED  = 8,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n bitflags! {\n@@ -878,6 +878,7 @@ bitflags! {\n /// Signal condition.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum signal {\n   /// Process abort signal.\n   ///\n@@ -983,7 +984,6 @@ pub enum signal {\n   ///\n   /// Action: Terminates the process.\n   XFSZ   = 26,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n bitflags! {\n@@ -1049,14 +1049,14 @@ pub type userdata = u64;\n /// should be set.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum whence {\n   /// Seek relative to current position.\n   CUR = 1,\n   /// Seek relative to end-of-file.\n   END = 2,\n   /// Seek relative to start-of-file.\n   SET = 3,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n /// Auxiliary vector entry."}, {"sha": "395e5c98652326091ed5ce6f79d573698426722c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1922,6 +1922,11 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         err.emit();\n     }\n \n+    // Some features are known to be incomplete and using them is likely to have\n+    // unanticipated results, such as compiler crashes. We warn the user about these\n+    // to alert them.\n+    let incomplete_features = [\"generic_associated_types\"];\n+\n     let mut features = Features::new();\n     let mut edition_enabled_features = FxHashMap();\n \n@@ -1957,6 +1962,16 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 continue\n             };\n \n+            if incomplete_features.iter().any(|f| *f == name.as_str()) {\n+                span_handler.struct_span_warn(\n+                    mi.span,\n+                    &format!(\n+                        \"the feature `{}` is incomplete and may cause the compiler to crash\",\n+                        name\n+                    )\n+                ).emit();\n+            }\n+\n             if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n                 if *edition <= crate_edition {\n                     continue"}, {"sha": "bdf25618f474eda00f8d2bb87dab4604b86718f0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -67,6 +67,7 @@ pub struct StringReader<'a> {\n     span_src_raw: Span,\n     open_braces: Vec<(token::DelimToken, Span)>,\n     crate override_span: Option<Span>,\n+    last_unclosed_found_span: Option<Span>,\n }\n \n impl<'a> StringReader<'a> {\n@@ -216,6 +217,7 @@ impl<'a> StringReader<'a> {\n             span_src_raw: syntax_pos::DUMMY_SP,\n             open_braces: Vec::new(),\n             override_span,\n+            last_unclosed_found_span: None,\n         }\n     }\n "}, {"sha": "e2fd7faf90387e856007ccc7fe8368409ff15044", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -81,16 +81,23 @@ impl<'a> StringReader<'a> {\n                     // Incorrect delimiter.\n                     token::CloseDelim(other) => {\n                         let token_str = token_to_string(&self.token);\n-                        let msg = format!(\"incorrect close delimiter: `{}`\", token_str);\n-                        let mut err = self.sess.span_diagnostic.struct_span_err(self.span, &msg);\n-                        // This is a conservative error: only report the last unclosed delimiter.\n-                        // The previous unclosed delimiters could actually be closed! The parser\n-                        // just hasn't gotten to them yet.\n-                        if let Some(&(_, sp)) = self.open_braces.last() {\n-                            err.span_note(sp, \"unclosed delimiter\");\n-                        };\n-                        err.emit();\n-\n+                        if self.last_unclosed_found_span != Some(self.span) {\n+                            // do not complain about the same unclosed delimiter multiple times\n+                            self.last_unclosed_found_span = Some(self.span);\n+                            let msg = format!(\"incorrect close delimiter: `{}`\", token_str);\n+                            let mut err = self.sess.span_diagnostic.struct_span_err(\n+                                self.span,\n+                                &msg,\n+                            );\n+                            err.span_label(self.span, \"incorrect close delimiter\");\n+                            // This is a conservative error: only report the last unclosed\n+                            // delimiter. The previous unclosed delimiters could actually be\n+                            // closed! The parser just hasn't gotten to them yet.\n+                            if let Some(&(_, sp)) = self.open_braces.last() {\n+                                err.span_label(sp, \"unclosed delimiter\");\n+                            };\n+                            err.emit();\n+                        }\n                         self.open_braces.pop().unwrap();\n \n                         // If the incorrect delimiter matches an earlier opening\n@@ -122,7 +129,8 @@ impl<'a> StringReader<'a> {\n                 // matching opening delimiter).\n                 let token_str = token_to_string(&self.token);\n                 let msg = format!(\"unexpected close delimiter: `{}`\", token_str);\n-                let err = self.sess.span_diagnostic.struct_span_err(self.span, &msg);\n+                let mut err = self.sess.span_diagnostic.struct_span_err(self.span, &msg);\n+                err.span_label(self.span, \"unexpected close delimiter\");\n                 Err(err)\n             },\n             _ => {"}, {"sha": "345464c66642570e2e39a6d22358f54192c5b5f8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -4719,7 +4719,12 @@ impl<'a> Parser<'a> {\n         if !self.eat(&token::OpenDelim(token::Brace)) {\n             let sp = self.span;\n             let tok = self.this_token_to_string();\n+            let mut do_not_suggest_help = false;\n             let mut e = self.span_fatal(sp, &format!(\"expected `{{`, found `{}`\", tok));\n+            if self.token.is_keyword(keywords::In) || self.token == token::Colon {\n+                do_not_suggest_help = true;\n+                e.span_label(sp, \"expected `{`\");\n+            }\n \n             // Check to see if the user has written something like\n             //\n@@ -4729,7 +4734,8 @@ impl<'a> Parser<'a> {\n             // Which is valid in other languages, but not Rust.\n             match self.parse_stmt_without_recovery(false) {\n                 Ok(Some(stmt)) => {\n-                    if self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace)) {\n+                    if self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace))\n+                        || do_not_suggest_help {\n                         // if the next token is an open brace (e.g., `if a b {`), the place-\n                         // inside-a-block suggestion would be more likely wrong than right\n                         return Err(e);"}, {"sha": "adbc5828b8fb88bae1fb7124bf40dc14ac94ec72", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -76,8 +76,8 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n             }\n         }\n         StaticEnum(..) => {\n-            span_err_if_not_stage0!(cx, trait_span, E0665,\n-                                    \"`Default` cannot be derived for enums, only structs\");\n+            span_err!(cx, trait_span, E0665,\n+                      \"`Default` cannot be derived for enums, only structs\");\n             // let compilation continue\n             cx.expr_usize(trait_span, 0)\n         }"}, {"sha": "ae47a028bc3865346485126978e53c7fd0b8f6a4", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -19,17 +19,6 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n-macro_rules! span_err_if_not_stage0 {\n-    ($cx:expr, $sp:expr, $code:ident, $text:tt) => {\n-        #[cfg(not(stage0))] {\n-            span_err!($cx, $sp, $code, $text)\n-        }\n-        #[cfg(stage0)] {\n-            $cx.span_err($sp, $text)\n-        }\n-    }\n-}\n-\n macro path_local($x:ident) {\n     generic::ty::Path::new_local(stringify!($x))\n }"}, {"sha": "669a1eb58392163fcbe97a03d534036331a13806", "filename": "src/test/ui-fulldeps/invalid-punct-ident-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-4.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -2,7 +2,7 @@ error: unexpected close delimiter: `)`\n   --> $DIR/invalid-punct-ident-4.rs:16:1\n    |\n LL | lexer_failure!(); //~ ERROR proc macro panicked\n-   | ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^ unexpected close delimiter\n \n error: proc macro panicked\n   --> $DIR/invalid-punct-ident-4.rs:16:1"}, {"sha": "2981e4ea8b3a38e0579116b68f4b307efb4cbf80", "filename": "src/test/ui/E0660.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0660.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage1\n-\n #![feature(asm)]\n \n fn main() {"}, {"sha": "e8acb282be94d370abfa1c6eb6ca5d441636deef", "filename": "src/test/ui/E0660.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0660.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,11 +1,11 @@\n error[E0660]: malformed inline assembly\n-  --> $DIR/E0660.rs:17:5\n+  --> $DIR/E0660.rs:15:5\n    |\n LL |     asm!(\"nop\" \"nop\");\n    |     ^^^^^^^^^^^^^^^^^^\n \n error[E0660]: malformed inline assembly\n-  --> $DIR/E0660.rs:19:5\n+  --> $DIR/E0660.rs:17:5\n    |\n LL |     asm!(\"nop\" \"nop\" : \"=r\"(a));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2410eba02451fc6fb08307b72ad138a7796e4003", "filename": "src/test/ui/E0661.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0661.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage1\n-\n #![feature(asm)]\n \n fn main() {"}, {"sha": "90aeca5612ae468269b6a60be3924826debc1a3e", "filename": "src/test/ui/E0661.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0661.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,5 +1,5 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/E0661.rs:17:18\n+  --> $DIR/E0661.rs:15:18\n    |\n LL |     asm!(\"nop\" : \"r\"(a));\n    |                  ^^^"}, {"sha": "700540fd1e0c07b8544bb0740998c6257ba5aa2b", "filename": "src/test/ui/E0662.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0662.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage1\n-\n #![feature(asm)]\n \n fn main() {"}, {"sha": "31655ca198794c4f392755e8dbacfb57aa98ce1a", "filename": "src/test/ui/E0662.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0662.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,5 +1,5 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/E0662.rs:18:12\n+  --> $DIR/E0662.rs:16:12\n    |\n LL |          : \"=test\"(\"a\") //~ ERROR E0662\n    |            ^^^^^^^"}, {"sha": "dea2b9156b7e9f40b10085322b34ec44adb80f8d", "filename": "src/test/ui/E0663.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0663.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage1\n-\n #![feature(asm)]\n \n fn main() {"}, {"sha": "0a287620f20e1836d3dc9db93c294dacad6703a6", "filename": "src/test/ui/E0663.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0663.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,5 +1,5 @@\n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/E0663.rs:18:12\n+  --> $DIR/E0663.rs:16:12\n    |\n LL |          : \"+test\"(\"a\") //~ ERROR E0663\n    |            ^^^^^^^"}, {"sha": "9773f604c468bc831f3b3ab467eb45333d2395f2", "filename": "src/test/ui/E0664.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0664.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage1\n-\n #![feature(asm)]\n \n fn main() {"}, {"sha": "1e79c84cbc8c460904b9cfe00e8717027f6d6690", "filename": "src/test/ui/E0664.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0664.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,5 +1,5 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/E0664.rs:19:12\n+  --> $DIR/E0664.rs:17:12\n    |\n LL |          : \"{eax}\" //~ ERROR E0664\n    |            ^^^^^^^"}, {"sha": "0a0bd3f59052cf36edba5777d804a85a97a2b206", "filename": "src/test/ui/E0665.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0665.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0665.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0665.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage1\n-\n #[derive(Default)] //~ ERROR E0665\n enum Food {\n     Sweet,"}, {"sha": "268224cac3826f0841d6020eef36087d49eba68f", "filename": "src/test/ui/E0665.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2FE0665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0665.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,5 +1,5 @@\n error[E0665]: `Default` cannot be derived for enums, only structs\n-  --> $DIR/E0665.rs:13:10\n+  --> $DIR/E0665.rs:11:10\n    |\n LL | #[derive(Default)] //~ ERROR E0665\n    |          ^^^^^^^"}, {"sha": "fdd50773593a825125c408e6e98d606c15a38df9", "filename": "src/test/ui/issue-10636-1.rs", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fissue-10636-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fissue-10636-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10636-1.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -12,4 +12,8 @@\n \n struct Obj { //~ NOTE: unclosed delimiter\n     member: usize\n-) //~ ERROR: incorrect close delimiter\n+)\n+//~^ ERROR incorrect close delimiter\n+//~| NOTE incorrect close delimiter\n+\n+fn main() {}", "previous_filename": "src/test/parse-fail/issue-10636-1.rs"}, {"sha": "af80e259fbd25cd6c87deb9074ce746277ad7f2d", "filename": "src/test/ui/issue-10636-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fissue-10636-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fissue-10636-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10636-1.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -0,0 +1,11 @@\n+error: incorrect close delimiter: `)`\n+  --> $DIR/issue-10636-1.rs:15:1\n+   |\n+LL | struct Obj { //~ NOTE: unclosed delimiter\n+   |            - unclosed delimiter\n+LL |     member: usize\n+LL | )\n+   | ^ incorrect close delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "a3edecb94f7c5d107f082bac1a16decf92004caa", "filename": "src/test/ui/issue-51602.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fissue-51602.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fissue-51602.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51602.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main(){\n+    if i in 1..10 {\n+        break;\n+    }\n+}"}, {"sha": "ac079b452c5eb4647b8be348617a7653dcf57e2a", "filename": "src/test/ui/issue-51602.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fissue-51602.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fissue-51602.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51602.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -0,0 +1,10 @@\n+error: expected `{`, found `in`\n+  --> $DIR/issue-51602.rs:12:10\n+   |\n+LL |     if i in 1..10 {\n+   |     --   ^^ expected `{`\n+   |     |\n+   |     this `if` statement has a condition, but no block\n+\n+error: aborting due to previous error\n+"}, {"sha": "2815e1be70983377e45eaae934acb59da450eee7", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -10,7 +10,6 @@\n \n // normalize-stderr-test: \"The system cannot find the file specified\\.\" -> \"No such file or directory\"\n // ignore-tidy-linelength\n-// ignore-stage1\n \n // test that errors in a (selection) of macros don't kill compilation\n // immediately, so that we get more errors listed at a time."}, {"sha": "084042acc974d698f5655013cec24e281707ce81", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,55 +1,55 @@\n error[E0665]: `Default` cannot be derived for enums, only structs\n-  --> $DIR/macros-nonfatal-errors.rs:21:10\n+  --> $DIR/macros-nonfatal-errors.rs:20:10\n    |\n LL | #[derive(Default)] //~ ERROR\n    |          ^^^^^^^\n \n error: inline assembly must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:25:10\n+  --> $DIR/macros-nonfatal-errors.rs:24:10\n    |\n LL |     asm!(invalid); //~ ERROR\n    |          ^^^^^^^\n \n error: concat_idents! requires ident args.\n-  --> $DIR/macros-nonfatal-errors.rs:27:5\n+  --> $DIR/macros-nonfatal-errors.rs:26:5\n    |\n LL |     concat_idents!(\"not\", \"idents\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:29:17\n+  --> $DIR/macros-nonfatal-errors.rs:28:17\n    |\n LL |     option_env!(invalid); //~ ERROR\n    |                 ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:30:10\n+  --> $DIR/macros-nonfatal-errors.rs:29:10\n    |\n LL |     env!(invalid); //~ ERROR\n    |          ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:31:10\n+  --> $DIR/macros-nonfatal-errors.rs:30:10\n    |\n LL |     env!(foo, abr, baz); //~ ERROR\n    |          ^^^\n \n error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n-  --> $DIR/macros-nonfatal-errors.rs:32:5\n+  --> $DIR/macros-nonfatal-errors.rs:31:5\n    |\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0658]: non-ident macro paths are experimental (see issue #35896)\n-  --> $DIR/macros-nonfatal-errors.rs:34:5\n+  --> $DIR/macros-nonfatal-errors.rs:33:5\n    |\n LL |     foo::blah!(); //~ ERROR\n    |     ^^^^^^^^^\n    |\n    = help: add #![feature(use_extern_macros)] to the crate attributes to enable\n \n error: format argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:36:13\n+  --> $DIR/macros-nonfatal-errors.rs:35:13\n    |\n LL |     format!(invalid); //~ ERROR\n    |             ^^^^^^^\n@@ -59,37 +59,37 @@ LL |     format!(\"{}\", invalid); //~ ERROR\n    |             ^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:38:14\n+  --> $DIR/macros-nonfatal-errors.rs:37:14\n    |\n LL |     include!(invalid); //~ ERROR\n    |              ^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:40:18\n+  --> $DIR/macros-nonfatal-errors.rs:39:18\n    |\n LL |     include_str!(invalid); //~ ERROR\n    |                  ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: No such file or directory (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:41:5\n+  --> $DIR/macros-nonfatal-errors.rs:40:5\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:42:20\n+  --> $DIR/macros-nonfatal-errors.rs:41:20\n    |\n LL |     include_bytes!(invalid); //~ ERROR\n    |                    ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: No such file or directory (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:43:5\n+  --> $DIR/macros-nonfatal-errors.rs:42:5\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trace_macros! accepts only `true` or `false`\n-  --> $DIR/macros-nonfatal-errors.rs:45:5\n+  --> $DIR/macros-nonfatal-errors.rs:44:5\n    |\n LL |     trace_macros!(invalid); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1025dad3af7738c8675e18374b77baebbe770f8b", "filename": "src/test/ui/parser-recovery-2.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fparser-recovery-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fparser-recovery-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-2.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,14 +1,11 @@\n error: incorrect close delimiter: `)`\n   --> $DIR/parser-recovery-2.rs:18:5\n    |\n-LL |     ) //~ ERROR incorrect close delimiter: `)`\n-   |     ^\n-   |\n-note: unclosed delimiter\n-  --> $DIR/parser-recovery-2.rs:16:14\n-   |\n LL |     fn bar() {\n-   |              ^\n+   |              - unclosed delimiter\n+LL |         let x = foo(); //~ ERROR cannot find function `foo` in this scope\n+LL |     ) //~ ERROR incorrect close delimiter: `)`\n+   |     ^ incorrect close delimiter\n \n error: unexpected token: `;`\n   --> $DIR/parser-recovery-2.rs:22:15"}, {"sha": "fcd4b4888b0ad66f5863df0041cb92e3f564de0f", "filename": "src/test/ui/resolve/token-error-correct-2.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,14 +1,11 @@\n error: incorrect close delimiter: `)`\n   --> $DIR/token-error-correct-2.rs:16:5\n    |\n-LL |     ) //~ ERROR: incorrect close delimiter: `)`\n-   |     ^\n-   |\n-note: unclosed delimiter\n-  --> $DIR/token-error-correct-2.rs:14:12\n-   |\n LL |     if foo {\n-   |            ^\n+   |            - unclosed delimiter\n+LL |     //~^ ERROR: cannot find value `foo`\n+LL |     ) //~ ERROR: incorrect close delimiter: `)`\n+   |     ^ incorrect close delimiter\n \n error[E0425]: cannot find value `foo` in this scope\n   --> $DIR/token-error-correct-2.rs:14:8"}, {"sha": "a546c2704d9154d80ccae25d44c2f2077cb1d8c5", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,14 +1,11 @@\n error: incorrect close delimiter: `}`\n   --> $DIR/token-error-correct-3.rs:30:9\n    |\n-LL |         } else { //~ ERROR: incorrect close delimiter: `}`\n-   |         ^\n-   |\n-note: unclosed delimiter\n-  --> $DIR/token-error-correct-3.rs:24:21\n-   |\n LL |             callback(path.as_ref(); //~ ERROR expected one of\n-   |                     ^\n+   |                     - unclosed delimiter\n+...\n+LL |         } else { //~ ERROR: incorrect close delimiter: `}`\n+   |         ^ incorrect close delimiter\n \n error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n   --> $DIR/token-error-correct-3.rs:24:35"}, {"sha": "39c664e270c4515c62d7e5953a917fd46d6932cb", "filename": "src/test/ui/resolve/token-error-correct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -15,4 +15,3 @@ fn main() {\n     //~^ ERROR: expected expression, found `;`\n }\n //~^ ERROR: incorrect close delimiter: `}`\n-//~| ERROR: incorrect close delimiter: `}`"}, {"sha": "1e246b6f085bd66dbe6b2c40a97df77e169e0bac", "filename": "src/test/ui/resolve/token-error-correct.stderr", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,32 +1,17 @@\n error: incorrect close delimiter: `}`\n   --> $DIR/token-error-correct.rs:16:1\n    |\n-LL | }\n-   | ^\n-   |\n-note: unclosed delimiter\n-  --> $DIR/token-error-correct.rs:14:12\n-   |\n LL |     foo(bar(;\n-   |            ^\n-\n-error: incorrect close delimiter: `}`\n-  --> $DIR/token-error-correct.rs:16:1\n-   |\n+   |            - unclosed delimiter\n+LL |     //~^ ERROR: expected expression, found `;`\n LL | }\n-   | ^\n-   |\n-note: unclosed delimiter\n-  --> $DIR/token-error-correct.rs:14:8\n-   |\n-LL |     foo(bar(;\n-   |        ^\n+   | ^ incorrect close delimiter\n \n error: expected expression, found `;`\n   --> $DIR/token-error-correct.rs:14:13\n    |\n LL |     foo(bar(;\n    |             ^ expected expression\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "a6dbb03d379db532db316179d640a98ee089b0ab", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -9,10 +9,11 @@\n // except according to those terms.\n \n #![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n-//follow-up PR\n+// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// follow-up PR.\n \n // A Collection trait and collection families. Based on\n // http://smallcultfollowing.com/babysteps/blog/2016/11/03/"}, {"sha": "0e7d6ace1bb1d0560a1dabffcdc871f87d1748a4", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,29 +1,35 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/collections.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/collections.rs:65:90\n+  --> $DIR/collections.rs:66:90\n    |\n LL | fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n    |                                                                                          ^^^ type parameter not allowed\n \n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/collections.rs:77:69\n+  --> $DIR/collections.rs:78:69\n    |\n LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n    |                                                                     ^^^ type parameter not allowed\n \n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/collections.rs:26:71\n+  --> $DIR/collections.rs:27:71\n    |\n LL |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n    |                                                                       ^ type parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/collections.rs:33:50\n+  --> $DIR/collections.rs:34:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n    |                                                  ^^^^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/collections.rs:59:50\n+  --> $DIR/collections.rs:60:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n    |                                                  ^^^^^ lifetime parameter not allowed"}, {"sha": "88a660b3a5afe51d16028566a03b1423362a334a", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n #![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n \n use std::ops::Deref;\n \n-//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n-//follow-up PR\n+// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// follow-up PR.\n \n trait Foo {\n     type Bar<'a, 'b>;"}, {"sha": "5c85698fa55c702e796c282b90c61418e26aa151", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,17 +1,23 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/construct_with_other_type.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/construct_with_other_type.rs:26:46\n+  --> $DIR/construct_with_other_type.rs:27:46\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n    |                                              ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/construct_with_other_type.rs:26:63\n+  --> $DIR/construct_with_other_type.rs:27:63\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n    |                                                               ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/construct_with_other_type.rs:34:40\n+  --> $DIR/construct_with_other_type.rs:35:40\n    |\n LL |     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n    |                                        ^^ lifetime parameter not allowed"}, {"sha": "d8a2a1b73f7ef084078e2728c3467c9a431114c9", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n \n trait Foo {\n     type Bar<,>;"}, {"sha": "2670c3aa142b204be287aa319e7a778505337c2b", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,8 +1,14 @@\n error: expected one of `>`, identifier, or lifetime, found `,`\n-  --> $DIR/empty_generics.rs:14:14\n+  --> $DIR/empty_generics.rs:15:14\n    |\n LL |     type Bar<,>;\n    |              ^ expected one of `>`, identifier, or lifetime here\n \n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/empty_generics.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to previous error\n "}, {"sha": "7f48408b369fd2061af811b29149b8f42f6651df", "filename": "src/test/ui/rfc1598-generic-associated-types/gat-incomplete-warning.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-incomplete-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-incomplete-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-incomplete-warning.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n+\n+fn main() {}"}, {"sha": "67682dcb8fb1b3e154be3ddd69c48939809b17d0", "filename": "src/test/ui/rfc1598-generic-associated-types/gat-incomplete-warning.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-incomplete-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-incomplete-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-incomplete-warning.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/gat-incomplete-warning.rs:13:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "97d5482735f86ba3ff640e8741e0ee934379c1e3", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/generic-associated-types-where.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "267272ded8c06876777d8cb4f2ed8181ac1c70aa", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n #![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n \n use std::ops::Deref;\n \n-//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n-//follow-up PR\n+// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// follow-up PR.\n \n trait Iterable {\n     type Item<'a>;"}, {"sha": "79b29902ccdf05fb2c6bf9d6025cd4fcd20c47c1", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,29 +1,35 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:22:37\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:23:37\n    |\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'undeclared`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:26:41\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:27:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:20:47\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:21:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n    |                                               ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:22:37\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:23:37\n    |\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:26:41\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:27:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ lifetime parameter not allowed"}, {"sha": "b52b6e024219a194059a82fafc80a78b594c0d88", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n #![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n \n use std::ops::Deref;\n \n-//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n-//follow-up PR\n+// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// follow-up PR.\n \n trait Iterable {\n     type Item<'a>;"}, {"sha": "de3563c14eb7c44208e92020c0d3c3a7604cffef", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,35 +1,41 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/iterable.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:20:47\n+  --> $DIR/iterable.rs:21:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n    |                                               ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:49:53\n+  --> $DIR/iterable.rs:50:53\n    |\n LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n    |                                                     ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:54:60\n+  --> $DIR/iterable.rs:55:60\n    |\n LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n    |                                                            ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:23:41\n+  --> $DIR/iterable.rs:24:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n    |                                         ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:32:41\n+  --> $DIR/iterable.rs:33:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                                         ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:43:41\n+  --> $DIR/iterable.rs:44:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                                         ^^ lifetime parameter not allowed"}, {"sha": "82e82e6dbccaf3bfd01c9d5a334b46d8fb1ee82b", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -9,12 +9,13 @@\n // except according to those terms.\n \n #![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n-//follow-up PR\n+// FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+// follow-up PR.\n \n-//FIXME(#44265): Update expected errors once E110 is resolved, now does not get past `trait Foo`\n+// FIXME(#44265): Update expected errors once E110 is resolved, now does not get past `trait Foo`.\n \n trait Foo {\n     type A<'a>;"}, {"sha": "e47daf2ae1bbae0198480b1f05a18199c2e36c9f", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,29 +1,35 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/parameter_number_and_kind.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/parameter_number_and_kind.rs:26:27\n+  --> $DIR/parameter_number_and_kind.rs:27:27\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n    |                           ^^^^^^^ lifetime parameter not allowed\n \n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/parameter_number_and_kind.rs:26:36\n+  --> $DIR/parameter_number_and_kind.rs:27:36\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n    |                                    ^ type parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/parameter_number_and_kind.rs:29:26\n+  --> $DIR/parameter_number_and_kind.rs:30:26\n    |\n LL |     type FErr1 = Self::E<'static, 'static>; // Error\n    |                          ^^^^^^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/parameter_number_and_kind.rs:31:29\n+  --> $DIR/parameter_number_and_kind.rs:32:29\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n    |                             ^^^^^^^ lifetime parameter not allowed\n \n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/parameter_number_and_kind.rs:31:38\n+  --> $DIR/parameter_number_and_kind.rs:32:38\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n    |                                      ^ type parameter not allowed"}, {"sha": "0300ad06194e76c726cbcee4574d56e9e7cc14d0", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n #![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n \n-//FIXME(#44265): \"type parameter not allowed\" errors will be addressed in a follow-up PR\n+// FIXME(#44265): \"type parameter not allowed\" errors will be addressed in a follow-up PR.\n \n use std::rc::Rc;\n use std::sync::Arc;"}, {"sha": "3be0481dc67e85f0d4cefdcd04455ef254faa209", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,23 +1,29 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/pointer_family.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/pointer_family.rs:46:21\n+  --> $DIR/pointer_family.rs:47:21\n    |\n LL |     bar: P::Pointer<String>,\n    |                     ^^^^^^ type parameter not allowed\n \n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/pointer_family.rs:21:42\n+  --> $DIR/pointer_family.rs:22:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T>;\n    |                                          ^ type parameter not allowed\n \n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/pointer_family.rs:29:42\n+  --> $DIR/pointer_family.rs:30:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n    |                                          ^ type parameter not allowed\n \n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/pointer_family.rs:39:42\n+  --> $DIR/pointer_family.rs:40:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n    |                                          ^ type parameter not allowed"}, {"sha": "f2d626f921c89611f130f6f16da76f4305d4aef6", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/shadowing.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "aa90886fdfd65c6787ffebe7d051c95e1217ad60", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n #![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete\n \n-//FIXME(#44265): \"lifetime parameter not allowed on this type\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime parameter not allowed on this type\" errors will be addressed in a\n // follow-up PR\n \n use std::fmt::Display;"}, {"sha": "4aca8d476877b78e53165b448978c41e246ec6c0", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,29 +1,35 @@\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/streaming_iterator.rs:11:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/streaming_iterator.rs:27:41\n+  --> $DIR/streaming_iterator.rs:28:41\n    |\n LL |     bar: <T as StreamingIterator>::Item<'static>,\n    |                                         ^^^^^^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/streaming_iterator.rs:35:64\n+  --> $DIR/streaming_iterator.rs:36:64\n    |\n LL | fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n    |                                                                ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/streaming_iterator.rs:21:48\n+  --> $DIR/streaming_iterator.rs:22:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n    |                                                ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/streaming_iterator.rs:47:37\n+  --> $DIR/streaming_iterator.rs:48:37\n    |\n LL |     type Item<'a> = (usize, I::Item<'a>);\n    |                                     ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/streaming_iterator.rs:49:48\n+  --> $DIR/streaming_iterator.rs:50:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n    |                                                ^^ lifetime parameter not allowed"}, {"sha": "634191bb5ef4eab9b877783317e7371144f3ce00", "filename": "src/test/ui/token/issue-10636-2.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -1,14 +1,11 @@\n error: incorrect close delimiter: `}`\n   --> $DIR/issue-10636-2.rs:18:1\n    |\n-LL | } //~ ERROR: incorrect close delimiter\n-   | ^\n-   |\n-note: unclosed delimiter\n-  --> $DIR/issue-10636-2.rs:15:15\n-   |\n LL |     option.map(|some| 42;\n-   |               ^\n+   |               - unclosed delimiter\n+...\n+LL | } //~ ERROR: incorrect close delimiter\n+   | ^ incorrect close delimiter\n \n error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n   --> $DIR/issue-10636-2.rs:15:25"}, {"sha": "62296f73f016b6b89e7cbb1783c6db6880f30ed9", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2028828db7e4870cb6a310f8ad8169ac9ea134d/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=b2028828db7e4870cb6a310f8ad8169ac9ea134d", "patch": "@@ -60,6 +60,7 @@ pub fn collect_unstable_book_section_file_names(dir: &path::Path) -> BTreeSet<St\n         .map(|entry| entry.expect(\"could not read directory entry\"))\n         .filter(dir_entry_is_file)\n         .map(|entry| entry.file_name().into_string().unwrap())\n+        .filter(|n| n.ends_with(\".md\"))\n         .map(|n| n.trim_right_matches(\".md\").to_owned())\n         .collect()\n }"}]}