{"sha": "d6c988b3a74ff769d742a1ee16442a56579cf53b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Yzk4OGIzYTc0ZmY3NjlkNzQyYTFlZTE2NDQyYTU2NTc5Y2Y1M2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-11T10:38:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-12T08:48:08Z"}, "message": "miri: fall back to whole-function span when loc==None", "tree": {"sha": "078a7846d4ca921dd5b3de62fe230a197833555a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078a7846d4ca921dd5b3de62fe230a197833555a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c988b3a74ff769d742a1ee16442a56579cf53b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c988b3a74ff769d742a1ee16442a56579cf53b", "html_url": "https://github.com/rust-lang/rust/commit/d6c988b3a74ff769d742a1ee16442a56579cf53b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c988b3a74ff769d742a1ee16442a56579cf53b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5154b66586c9bfc738ba1976cc36c71784330e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/5154b66586c9bfc738ba1976cc36c71784330e06", "html_url": "https://github.com/rust-lang/rust/commit/5154b66586c9bfc738ba1976cc36c71784330e06"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "32018ddb13fece1e6a4639bf16096e82c3cc800f", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d6c988b3a74ff769d742a1ee16442a56579cf53b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c988b3a74ff769d742a1ee16442a56579cf53b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=d6c988b3a74ff769d742a1ee16442a56579cf53b", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::ty::layout::{self, TyAndLayout};\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_span::{source_map::DUMMY_SP, Pos, Span};\n+use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n@@ -191,6 +191,10 @@ impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n     pub fn current_source_info(&self) -> Option<&mir::SourceInfo> {\n         self.loc.map(|loc| self.body.source_info(loc))\n     }\n+\n+    pub fn current_span(&self) -> Span {\n+        self.current_source_info().map(|si| si.span).unwrap_or(self.body.span)\n+    }\n }\n \n impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n@@ -324,11 +328,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline(always)]\n     pub fn cur_span(&self) -> Span {\n-        self.stack()\n-            .last()\n-            .and_then(|f| f.current_source_info())\n-            .map(|si| si.span)\n-            .unwrap_or(self.tcx.span)\n+        self.stack().last().map(|f| f.current_span()).unwrap_or(self.tcx.span)\n     }\n \n     #[inline(always)]\n@@ -921,14 +921,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n         let mut frames = Vec::new();\n         for frame in self.stack().iter().rev() {\n-            let source_info = frame.current_source_info();\n-            let lint_root = source_info.and_then(|source_info| {\n+            let lint_root = frame.current_source_info().and_then(|source_info| {\n                 match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n                     mir::ClearCrossCrate::Clear => None,\n                 }\n             });\n-            let span = source_info.map_or(DUMMY_SP, |source_info| source_info.span);\n+            let span = frame.current_span();\n \n             frames.push(FrameInfo { span, instance: frame.instance, lint_root });\n         }"}, {"sha": "74cb7f6fc5fcb993bd6bfbb3554055ca21f80ddb", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6c988b3a74ff769d742a1ee16442a56579cf53b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c988b3a74ff769d742a1ee16442a56579cf53b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=d6c988b3a74ff769d742a1ee16442a56579cf53b", "patch": "@@ -30,8 +30,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // Assert that there is always such a frame.\n             .unwrap();\n         // Assert that the frame we look at is actually executing code currently\n-        // (`current_source_info` is None when we are unwinding and the frame does\n-        // not require cleanup).\n+        // (`loc` is None when we are unwinding and the frame does not require cleanup).\n         let loc = frame.loc.unwrap();\n         // If this is a `Call` terminator, use the `fn_span` instead.\n         let block = &frame.body.basic_blocks()[loc.block];"}]}