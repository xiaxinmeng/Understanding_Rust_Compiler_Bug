{"sha": "b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5N2ZkM2U1YTE1NDVhYjAyZTE4YzUyZTdmM2QyZTc4YTVjOTYwYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-19T12:44:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-19T12:44:33Z"}, "message": "Auto merge of #82754 - rylev:rusage-windows, r=pnkfelix\n\nAttempt to gather similar stats as rusage on Windows\n\nA follow up to #82532. This is a bit hacked in because I think we need to discuss this before merging, but this is an attempt to gather similar metrics as `libc::rusage` on Windows.\n\nSome comments on differences:\n* Currently, we're passing `RUSAGE_CHILDREN` to `rusage` which collects statistics on all children that have been waited on and terminated. I believe this is currently just the invocation of the real `rustc` that the shim is wrapping. Does `rustc` itself spawn children processes? The windows version gets the child processes handle when spawning it, and uses that to collect the statistics. For maxrss, `rusage` will return \"the resident set size of the largest child, not the maximum resident set size of the process tree.\", the Windows version will only collect statistics on the wrapped `rustc` child process directly even if some theoretical sub process has a larger memory footprint.\n* There might be subtle differences between `rusage`'s \"resident set\" and Window's \"working set\". The \"working set\" and \"resident set\" should both be the number of pages that are in memory and which would not cause a page fault when accessed.\n* I'm not yet sure how best to get the same information that `ru_minflt`, `ru_inblock`, `ru_oublock`, `ru_nivcsw ` and `ru_nvcsw` provide.\n\nr? `@pnkfelix`", "tree": {"sha": "6515b94799921ce5949633ef1dbff1fdf9205991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6515b94799921ce5949633ef1dbff1fdf9205991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf", "html_url": "https://github.com/rust-lang/rust/commit/b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb95acea8aeaeef834214eaffb15d64095fe9271", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb95acea8aeaeef834214eaffb15d64095fe9271", "html_url": "https://github.com/rust-lang/rust/commit/eb95acea8aeaeef834214eaffb15d64095fe9271"}, {"sha": "302867cf48db284cc666fff7c2953f6f94f30aac", "url": "https://api.github.com/repos/rust-lang/rust/commits/302867cf48db284cc666fff7c2953f6f94f30aac", "html_url": "https://github.com/rust-lang/rust/commit/302867cf48db284cc666fff7c2953f6f94f30aac"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "c14ad6fa5fff4db8878dfe05b24f3b81d647d6a2", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf", "patch": "@@ -53,7 +53,7 @@ merge = \"0.1.0\"\n \n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\"\n-features = [\"fileapi\", \"ioapiset\", \"jobapi2\", \"handleapi\", \"winioctl\"]\n+features = [\"fileapi\", \"ioapiset\", \"jobapi2\", \"handleapi\", \"winioctl\", \"psapi\", \"impl-default\"]\n \n [dev-dependencies]\n pretty_assertions = \"0.6\""}, {"sha": "d462dc4d1165c847a1858e37cb2d50f60e32d0e5", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 75, "deletions": 9, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=b97fd3e5a1545ab02e18c52e7f3d2e78a5c960bf", "patch": "@@ -17,7 +17,7 @@\n \n use std::env;\n use std::path::PathBuf;\n-use std::process::Command;\n+use std::process::{Child, Command};\n use std::str::FromStr;\n use std::time::Instant;\n \n@@ -163,9 +163,11 @@ fn main() {\n     }\n \n     let start = Instant::now();\n-    let status = {\n+    let (child, status) = {\n         let errmsg = format!(\"\\nFailed to run:\\n{:?}\\n-------------\", cmd);\n-        cmd.status().expect(&errmsg)\n+        let mut child = cmd.spawn().expect(&errmsg);\n+        let status = child.wait().expect(&errmsg);\n+        (child, status)\n     };\n \n     if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some()\n@@ -176,7 +178,7 @@ fn main() {\n             // If the user requested resource usage data, then\n             // include that in addition to the timing output.\n             let rusage_data =\n-                env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").and_then(|_| format_rusage_data());\n+                env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").and_then(|_| format_rusage_data(child));\n             eprintln!(\n                 \"[RUSTC-TIMING] {} test:{} {}.{:03}{}{}\",\n                 crate_name,\n@@ -213,19 +215,83 @@ fn main() {\n     }\n }\n \n-#[cfg(not(unix))]\n-/// getrusage is not available on non-unix platforms. So for now, we do not\n-/// bother trying to make a shim for it.\n-fn format_rusage_data() -> Option<String> {\n+#[cfg(all(not(unix), not(windows)))]\n+// In the future we can add this for more platforms\n+fn format_rusage_data(_child: Child) -> Option<String> {\n     None\n }\n \n+#[cfg(windows)]\n+fn format_rusage_data(child: Child) -> Option<String> {\n+    use std::os::windows::io::AsRawHandle;\n+    use winapi::um::{processthreadsapi, psapi, timezoneapi};\n+    let handle = child.as_raw_handle();\n+    macro_rules! try_bool {\n+        ($e:expr) => {\n+            if $e != 1 {\n+                return None;\n+            }\n+        };\n+    }\n+\n+    let mut user_filetime = Default::default();\n+    let mut user_time = Default::default();\n+    let mut kernel_filetime = Default::default();\n+    let mut kernel_time = Default::default();\n+    let mut memory_counters = psapi::PROCESS_MEMORY_COUNTERS::default();\n+\n+    unsafe {\n+        try_bool!(processthreadsapi::GetProcessTimes(\n+            handle,\n+            &mut Default::default(),\n+            &mut Default::default(),\n+            &mut kernel_filetime,\n+            &mut user_filetime,\n+        ));\n+        try_bool!(timezoneapi::FileTimeToSystemTime(&user_filetime, &mut user_time));\n+        try_bool!(timezoneapi::FileTimeToSystemTime(&kernel_filetime, &mut kernel_time));\n+\n+        // Unlike on Linux with RUSAGE_CHILDREN, this will only return memory information for the process\n+        // with the given handle and none of that process's children.\n+        try_bool!(psapi::GetProcessMemoryInfo(\n+            handle as _,\n+            &mut memory_counters as *mut _ as _,\n+            std::mem::size_of::<psapi::PROCESS_MEMORY_COUNTERS_EX>() as u32,\n+        ));\n+    }\n+\n+    // Guide on interpreting these numbers:\n+    // https://docs.microsoft.com/en-us/windows/win32/psapi/process-memory-usage-information\n+    let peak_working_set = memory_counters.PeakWorkingSetSize / 1024;\n+    let peak_page_file = memory_counters.PeakPagefileUsage / 1024;\n+    let peak_paged_pool = memory_counters.QuotaPeakPagedPoolUsage / 1024;\n+    let peak_nonpaged_pool = memory_counters.QuotaPeakNonPagedPoolUsage / 1024;\n+    Some(format!(\n+        \"user: {USER_SEC}.{USER_USEC:03} \\\n+         sys: {SYS_SEC}.{SYS_USEC:03} \\\n+         peak working set (kb): {PEAK_WORKING_SET} \\\n+         peak page file usage (kb): {PEAK_PAGE_FILE} \\\n+         peak paged pool usage (kb): {PEAK_PAGED_POOL} \\\n+         peak non-paged pool usage (kb): {PEAK_NONPAGED_POOL} \\\n+         page faults: {PAGE_FAULTS}\",\n+        USER_SEC = user_time.wSecond + (user_time.wMinute * 60),\n+        USER_USEC = user_time.wMilliseconds,\n+        SYS_SEC = kernel_time.wSecond + (kernel_time.wMinute * 60),\n+        SYS_USEC = kernel_time.wMilliseconds,\n+        PEAK_WORKING_SET = peak_working_set,\n+        PEAK_PAGE_FILE = peak_page_file,\n+        PEAK_PAGED_POOL = peak_paged_pool,\n+        PEAK_NONPAGED_POOL = peak_nonpaged_pool,\n+        PAGE_FAULTS = memory_counters.PageFaultCount,\n+    ))\n+}\n+\n #[cfg(unix)]\n /// Tries to build a string with human readable data for several of the rusage\n /// fields. Note that we are focusing mainly on data that we believe to be\n /// supplied on Linux (the `rusage` struct has other fields in it but they are\n /// currently unsupported by Linux).\n-fn format_rusage_data() -> Option<String> {\n+fn format_rusage_data(_child: Child) -> Option<String> {\n     let rusage: libc::rusage = unsafe {\n         let mut recv = std::mem::zeroed();\n         // -1 is RUSAGE_CHILDREN, which means to get the rusage for all children"}]}