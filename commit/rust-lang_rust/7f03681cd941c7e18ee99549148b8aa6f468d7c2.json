{"sha": "7f03681cd941c7e18ee99549148b8aa6f468d7c2", "node_id": "C_kwDOAAsO6NoAKDdmMDM2ODFjZDk0MWM3ZTE4ZWU5OTU0OTE0OGI4YWE2ZjQ2OGQ3YzI", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-28T22:42:41Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-05-08T12:37:14Z"}, "message": "Only assert for unstable expectation ids after conversion (RFC 2383)\n\nThis ICE was reported by `@matthiaskrgr`. A big THANK YOU to him. See `rust#94953`", "tree": {"sha": "337128c0736ff65031adce9993f69a77960824e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/337128c0736ff65031adce9993f69a77960824e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f03681cd941c7e18ee99549148b8aa6f468d7c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmJ3uXoACgkQ/Ny/Ka9k\n1gF9Mw//VXuEpOd8uRKgb8kOQSR3hr7/Q3Q9ynJC/ewnHgdeQl80RJm5mMFMzqcs\nK0ufgG2DoqVmDkkV7CV3ZDpFsoRjmjRHiAqhN6pKM3DtsgbQPuhft1Vvl3tYsjW8\n+79cRQKBKcqfsoX41aCtFG7i5SA6oBsjPPUKowCTkoOkaBXveaDFMf7JaSkxvUJh\n9BT2tVV49n3ElL+oZX3ldHMbcR+DhdyRyD70iWS3cSHEtBhUeRYxVunXCQIaTj5f\nMyPu0OK+km8uyG7eWAIyLZubqr5PzMR25yIiom9rIVLmzwTin2qB7lEbIG+KQXBy\noXHws8L2Ya8jXc+Ui4oDsG65CBHbLNIxqewgjI/+hoYnc2yhG5l0jKR+2PAtXY32\nMDiNqSHP0IBvMJqC/wmUI+4yuCFoZzazIYXhJBrDF4aGtAIOk2QiHkhxYY/sNTTw\n4PDg7l976d0/bTRvbI/UV8QcZaPY7zKN6mJQcpK4Pg+N3cuUn09ab09763j0rGVp\naJgjhDQDSzCdKOKIWTHWwsjtnF32xT/1JKgSJoFo4S8cqX1wdiLHg2YRyogHATz2\n1HbgEqX0SvdsczSZNR/g4zzN3ixqujFJXotYu/BatF9AaZS8tTP9ZhD0bmaylhXs\nxrmZAniWidWK8a0NszjMhf/TMT5zlDAEe1zRLT/cTFqW7MEUbzA=\n=maAZ\n-----END PGP SIGNATURE-----", "payload": "tree 337128c0736ff65031adce9993f69a77960824e9\nparent 4c09a3345ab10b9a10a284cea1a1f3673bc9a414\nauthor xFrednet <xFrednet@gmail.com> 1648507361 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1652013434 +0200\n\nOnly assert for unstable expectation ids after conversion (RFC 2383)\n\nThis ICE was reported by `@matthiaskrgr`. A big THANK YOU to him. See `rust#94953`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f03681cd941c7e18ee99549148b8aa6f468d7c2", "html_url": "https://github.com/rust-lang/rust/commit/7f03681cd941c7e18ee99549148b8aa6f468d7c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f03681cd941c7e18ee99549148b8aa6f468d7c2/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c09a3345ab10b9a10a284cea1a1f3673bc9a414", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c09a3345ab10b9a10a284cea1a1f3673bc9a414", "html_url": "https://github.com/rust-lang/rust/commit/4c09a3345ab10b9a10a284cea1a1f3673bc9a414"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "21914dd7a8c7d33249cccd47a227c57cf12e3343", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7f03681cd941c7e18ee99549148b8aa6f468d7c2/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f03681cd941c7e18ee99549148b8aa6f468d7c2/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=7f03681cd941c7e18ee99549148b8aa6f468d7c2", "patch": "@@ -426,6 +426,13 @@ struct HandlerInner {\n \n     future_breakage_diagnostics: Vec<Diagnostic>,\n \n+    /// The [`unstable_expect_diagnostics`] should be empty when this struct is\n+    /// dropped. However, it can have values if the compilation is stopped early\n+    /// or is only partially executed. To avoid ICEs, like in rust#94953 we only\n+    /// check if [`unstable_expect_diagnostics`] is empty, if the expectation ids\n+    /// have been converted.\n+    check_unstable_expect_diagnostics: bool,\n+\n     /// Expected [`Diagnostic`]s store a [`LintExpectationId`] as part of\n     /// the lint level. [`LintExpectationId`]s created early during the compilation\n     /// (before `HirId`s have been defined) are not stable and can therefore not be\n@@ -497,10 +504,12 @@ impl Drop for HandlerInner {\n             );\n         }\n \n-        assert!(\n-            self.unstable_expect_diagnostics.is_empty(),\n-            \"all diagnostics with unstable expectations should have been converted\",\n-        );\n+        if self.check_unstable_expect_diagnostics {\n+            assert!(\n+                self.unstable_expect_diagnostics.is_empty(),\n+                \"all diagnostics with unstable expectations should have been converted\",\n+            );\n+        }\n     }\n }\n \n@@ -574,6 +583,7 @@ impl Handler {\n                 emitted_diagnostics: Default::default(),\n                 stashed_diagnostics: Default::default(),\n                 future_breakage_diagnostics: Vec::new(),\n+                check_unstable_expect_diagnostics: false,\n                 unstable_expect_diagnostics: Vec::new(),\n                 fulfilled_expectations: Default::default(),\n             }),\n@@ -988,12 +998,13 @@ impl Handler {\n         &self,\n         unstable_to_stable: &FxHashMap<LintExpectationId, LintExpectationId>,\n     ) {\n-        let diags = std::mem::take(&mut self.inner.borrow_mut().unstable_expect_diagnostics);\n+        let mut inner = self.inner.borrow_mut();\n+        let diags = std::mem::take(&mut inner.unstable_expect_diagnostics);\n+        inner.check_unstable_expect_diagnostics = true;\n         if diags.is_empty() {\n             return;\n         }\n \n-        let mut inner = self.inner.borrow_mut();\n         for mut diag in diags.into_iter() {\n             diag.update_unstable_expectation_id(unstable_to_stable);\n "}, {"sha": "2b6c3c6a1fdf6dcae13e1ba6744651966005f357", "filename": "src/test/ui/lint/rfc-2383-lint-reason/no_ice_for_partial_compiler_runs.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f03681cd941c7e18ee99549148b8aa6f468d7c2/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f03681cd941c7e18ee99549148b8aa6f468d7c2/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.rs?ref=7f03681cd941c7e18ee99549148b8aa6f468d7c2", "patch": "@@ -0,0 +1,16 @@\n+// This ensures that ICEs like rust#94953 don't happen\n+// check-pass\n+// compile-flags: -Z unpretty=expanded\n+\n+#![feature(lint_reasons)]\n+\n+// This `expect` will create an expectation with an unstable expectation id\n+#[expect(while_true)]\n+fn create_early_lint_pass_expectation() {\n+    // `while_true` is an early lint\n+    while true {}\n+}\n+\n+fn main() {\n+    create_early_lint_pass_expectation();\n+}"}, {"sha": "0ee3a03c38847e939f57cfa01c6c6fb631ef883c", "filename": "src/test/ui/lint/rfc-2383-lint-reason/no_ice_for_partial_compiler_runs.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f03681cd941c7e18ee99549148b8aa6f468d7c2/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7f03681cd941c7e18ee99549148b8aa6f468d7c2/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.stdout?ref=7f03681cd941c7e18ee99549148b8aa6f468d7c2", "patch": "@@ -0,0 +1,20 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+// This ensures that ICEs like rust#94953 don't happen\n+// check-pass\n+// compile-flags: -Z unpretty=expanded\n+\n+#![feature(lint_reasons)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+// This `expect` will create an expectation with an unstable expectation id\n+#[expect(while_true)]\n+fn create_early_lint_pass_expectation() {\n+    // `while_true` is an early lint\n+    while true {}\n+}\n+\n+fn main() { create_early_lint_pass_expectation(); }"}]}