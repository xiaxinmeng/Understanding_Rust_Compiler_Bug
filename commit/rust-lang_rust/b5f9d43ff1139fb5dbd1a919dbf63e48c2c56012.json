{"sha": "b5f9d43ff1139fb5dbd1a919dbf63e48c2c56012", "node_id": "C_kwDOAAsO6NoAKGI1ZjlkNDNmZjExMzlmYjVkYmQxYTkxOWRiZjYzZTQ4YzJjNTYwMTI", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-07-21T21:53:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-21T21:53:07Z"}, "message": "rust-lang/portable-simd#289: Strengthen warnings about relying on Mask layout\n\nThis makes it more clear that you can't rely on the layout of these,\r\nwhich seems worth doing given that the names vaguely suggest that you can\r\n(and the docs only clarify that you can't on Mask but not the maskNxM aliases).", "tree": {"sha": "4a52317a1b0ab7ef74b18418d4fc4520b0efaca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a52317a1b0ab7ef74b18418d4fc4520b0efaca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5f9d43ff1139fb5dbd1a919dbf63e48c2c56012", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2crDCRBK7hj4Ov3rIwAA4uUIAIaz1fRW3MSO5CZQfDxpmxNU\nyFvv2mZk1gHfE23r45roztsDu6EUGgmwD5o8zcqmXKjJ8BtKe9H+t6WAxoy/LdfO\n6lU07DtH8PyS9GZwNvxyLERZlrxG2IH22dNsnU5ymd0zPB1gbR6LT0y/z6bISJd+\n+IfMM4yA1Svmi6oxxUrKKy0g5cqw0s1ZBtDHgHalFCeRfpww8GCnZ6Nfr7gK+psy\n7KeNRinC7j2nPpo3TFZbGTMpMXpFzaMu5MnEjGEi0eTEjK7KojoRKcUa6eS4bzSz\nYdJnBtEvS1pUfL0sPxtFX9Dm43LUMzFHGOmHxud3K3eMwxjxyGgt+fw6CkaTVOs=\n=62Id\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a52317a1b0ab7ef74b18418d4fc4520b0efaca6\nparent 2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd\nauthor Thom Chiovoloni <thom@shift.click> 1658440387 -0700\ncommitter GitHub <noreply@github.com> 1658440387 -0700\n\nrust-lang/portable-simd#289: Strengthen warnings about relying on Mask layout\n\nThis makes it more clear that you can't rely on the layout of these,\r\nwhich seems worth doing given that the names vaguely suggest that you can\r\n(and the docs only clarify that you can't on Mask but not the maskNxM aliases).\r\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f9d43ff1139fb5dbd1a919dbf63e48c2c56012", "html_url": "https://github.com/rust-lang/rust/commit/b5f9d43ff1139fb5dbd1a919dbf63e48c2c56012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5f9d43ff1139fb5dbd1a919dbf63e48c2c56012/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "html_url": "https://github.com/rust-lang/rust/commit/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "9953502173573bbd50a227176611c1bd32ad803a", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b5f9d43ff1139fb5dbd1a919dbf63e48c2c56012/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f9d43ff1139fb5dbd1a919dbf63e48c2c56012/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=b5f9d43ff1139fb5dbd1a919dbf63e48c2c56012", "patch": "@@ -83,7 +83,9 @@ impl_element! { isize }\n ///\n /// Masks represent boolean inclusion/exclusion on a per-lane basis.\n ///\n-/// The layout of this type is unspecified.\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[T; LANES]`.\n #[repr(transparent)]\n pub struct Mask<T, const LANES: usize>(mask_impl::Mask<T, LANES>)\n where\n@@ -521,57 +523,129 @@ where\n }\n \n /// A mask for SIMD vectors with eight elements of 8 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i8; 8]`.\n pub type mask8x8 = Mask<i8, 8>;\n \n /// A mask for SIMD vectors with 16 elements of 8 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i8; 16]`.\n pub type mask8x16 = Mask<i8, 16>;\n \n /// A mask for SIMD vectors with 32 elements of 8 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i8; 32]`.\n pub type mask8x32 = Mask<i8, 32>;\n \n /// A mask for SIMD vectors with 64 elements of 8 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i8; 64]`.\n pub type mask8x64 = Mask<i8, 64>;\n \n /// A mask for SIMD vectors with four elements of 16 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i16; 4]`.\n pub type mask16x4 = Mask<i16, 4>;\n \n /// A mask for SIMD vectors with eight elements of 16 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i16; 8]`.\n pub type mask16x8 = Mask<i16, 8>;\n \n /// A mask for SIMD vectors with 16 elements of 16 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i16; 16]`.\n pub type mask16x16 = Mask<i16, 16>;\n \n /// A mask for SIMD vectors with 32 elements of 16 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i16; 32]`.\n pub type mask16x32 = Mask<i16, 32>;\n \n /// A mask for SIMD vectors with two elements of 32 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i32; 2]`.\n pub type mask32x2 = Mask<i32, 2>;\n \n /// A mask for SIMD vectors with four elements of 32 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i32; 4]`.\n pub type mask32x4 = Mask<i32, 4>;\n \n /// A mask for SIMD vectors with eight elements of 32 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i32; 8]`.\n pub type mask32x8 = Mask<i32, 8>;\n \n /// A mask for SIMD vectors with 16 elements of 32 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i32; 16]`.\n pub type mask32x16 = Mask<i32, 16>;\n \n /// A mask for SIMD vectors with two elements of 64 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i64; 2]`.\n pub type mask64x2 = Mask<i64, 2>;\n \n /// A mask for SIMD vectors with four elements of 64 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i64; 4]`.\n pub type mask64x4 = Mask<i64, 4>;\n \n /// A mask for SIMD vectors with eight elements of 64 bits.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[i64; 8]`.\n pub type mask64x8 = Mask<i64, 8>;\n \n /// A mask for SIMD vectors with two elements of pointer width.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[isize; 2]`.\n pub type masksizex2 = Mask<isize, 2>;\n \n /// A mask for SIMD vectors with four elements of pointer width.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[isize; 4]`.\n pub type masksizex4 = Mask<isize, 4>;\n \n /// A mask for SIMD vectors with eight elements of pointer width.\n+///\n+/// The layout of this type is unspecified, and may change between platforms\n+/// and/or Rust versions, and code should not assume that it is equivalent to\n+/// `[isize; 8]`.\n pub type masksizex8 = Mask<isize, 8>;\n \n macro_rules! impl_from {"}]}