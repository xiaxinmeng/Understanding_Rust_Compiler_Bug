{"sha": "cd4ac0d87b0c40c9ac1cea299718c723ea93a162", "node_id": "C_kwDOAAsO6NoAKGNkNGFjMGQ4N2IwYzQwYzlhYzFjZWEyOTk3MThjNzIzZWE5M2ExNjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-24T13:11:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-24T13:11:30Z"}, "message": "Auto merge of #14020 - Veykril:search-fix, r=Veykril\n\nfix: Fix assoc item search finding unrelated definitions\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/14014", "tree": {"sha": "c45a2e9919d038bc23031fb4c0d41dc384e54092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45a2e9919d038bc23031fb4c0d41dc384e54092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd4ac0d87b0c40c9ac1cea299718c723ea93a162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4ac0d87b0c40c9ac1cea299718c723ea93a162", "html_url": "https://github.com/rust-lang/rust/commit/cd4ac0d87b0c40c9ac1cea299718c723ea93a162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd4ac0d87b0c40c9ac1cea299718c723ea93a162/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86f73a00815274f003cd03f819070d010a5d3aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/86f73a00815274f003cd03f819070d010a5d3aad", "html_url": "https://github.com/rust-lang/rust/commit/86f73a00815274f003cd03f819070d010a5d3aad"}, {"sha": "951ee3d0b5c303407652608d2faac73c515ce36e", "url": "https://api.github.com/repos/rust-lang/rust/commits/951ee3d0b5c303407652608d2faac73c515ce36e", "html_url": "https://github.com/rust-lang/rust/commit/951ee3d0b5c303407652608d2faac73c515ce36e"}], "stats": {"total": 152, "additions": 141, "deletions": 11}, "files": [{"sha": "ada2821d6b14e7279a1567f4aa30107c0a63ea78", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cd4ac0d87b0c40c9ac1cea299718c723ea93a162/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4ac0d87b0c40c9ac1cea299718c723ea93a162/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=cd4ac0d87b0c40c9ac1cea299718c723ea93a162", "patch": "@@ -330,11 +330,16 @@ impl Definition {\n #[derive(Clone)]\n pub struct FindUsages<'a> {\n     def: Definition,\n-    assoc_item_container: Option<hir::AssocItemContainer>,\n     sema: &'a Semantics<'a, RootDatabase>,\n     scope: Option<SearchScope>,\n+    /// The container of our definition should it be an assoc item\n+    assoc_item_container: Option<hir::AssocItemContainer>,\n+    /// whether to search for the `Self` type of the definition\n     include_self_kw_refs: Option<hir::Type>,\n+    /// the local representative for the local definition we are searching for\n+    /// (this is required for finding all local declarations in a or-pattern)\n     local_repr: Option<hir::Local>,\n+    /// whether to search for the `self` module\n     search_self_mod: bool,\n }\n \n@@ -655,7 +660,7 @@ impl<'a> FindUsages<'a> {\n             }\n             Some(NameRefClass::Definition(def))\n                 if self.def == def\n-                    // is our def a trait assoc item? then we want to find everything\n+                    // is our def a trait assoc item? then we want to find all assoc items from trait impls of our trait\n                     || matches!(self.assoc_item_container, Some(hir::AssocItemContainer::Trait(_)))\n                         && convert_to_def_in_trait(self.sema.db, def) == self.def =>\n             {\n@@ -764,15 +769,21 @@ impl<'a> FindUsages<'a> {\n                 false\n             }\n             Some(NameClass::Definition(def)) if def != self.def => {\n-                // only when looking for trait assoc items, we want to find other assoc items\n-                if !matches!(self.assoc_item_container, Some(hir::AssocItemContainer::Trait(_)))\n-                    // FIXME: special case type aliases, we can't filter between impl and trait defs here as we lack the substitutions\n-                    // so we always resolve all assoc type aliases to both their trait def and impl defs\n-                    && !(matches!(self.def, Definition::TypeAlias(_))\n-                        && convert_to_def_in_trait(self.sema.db, def)\n-                            == convert_to_def_in_trait(self.sema.db, self.def))\n-                {\n-                    return false;\n+                match (&self.assoc_item_container, self.def) {\n+                    // for type aliases we always want to reference the trait def and all the trait impl counterparts\n+                    // FIXME: only until we can resolve them correctly, see FIXME above\n+                    (Some(_), Definition::TypeAlias(_))\n+                        if convert_to_def_in_trait(self.sema.db, def)\n+                            != convert_to_def_in_trait(self.sema.db, self.def) =>\n+                    {\n+                        return false\n+                    }\n+                    (Some(_), Definition::TypeAlias(_)) => {}\n+                    // We looking at an assoc item of a trait definition, so reference all the\n+                    // corresponding assoc items belonging to this trait's trait implementations\n+                    (Some(hir::AssocItemContainer::Trait(_)), _)\n+                        if convert_to_def_in_trait(self.sema.db, def) == self.def => {}\n+                    _ => return false,\n                 }\n                 let FileRange { file_id, range } = self.sema.original_range(name.syntax());\n                 let reference = FileReference {"}, {"sha": "60fb1544a8fe5770aed9661adef5eca4aba78c2d", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/cd4ac0d87b0c40c9ac1cea299718c723ea93a162/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4ac0d87b0c40c9ac1cea299718c723ea93a162/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=cd4ac0d87b0c40c9ac1cea299718c723ea93a162", "patch": "@@ -1897,4 +1897,123 @@ fn f<T: Trait>() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn name_clashes() {\n+        check(\n+            r#\"\n+trait Foo {\n+    fn method$0(&self) -> u8;\n+}\n+\n+struct Bar {\n+    method: u8,\n+}\n+\n+impl Foo for Bar {\n+    fn method(&self) -> u8 {\n+        self.method\n+    }\n+}\n+fn method() {}\n+\"#,\n+            expect![[r#\"\n+                method Function FileId(0) 16..39 19..25\n+\n+                FileId(0) 101..107\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Foo {\n+    fn method(&self) -> u8;\n+}\n+\n+struct Bar {\n+    method$0: u8,\n+}\n+\n+impl Foo for Bar {\n+    fn method(&self) -> u8 {\n+        self.method\n+    }\n+}\n+fn method() {}\n+\"#,\n+            expect![[r#\"\n+                method Field FileId(0) 60..70 60..66\n+\n+                FileId(0) 136..142 Read\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Foo {\n+    fn method(&self) -> u8;\n+}\n+\n+struct Bar {\n+    method: u8,\n+}\n+\n+impl Foo for Bar {\n+    fn method$0(&self) -> u8 {\n+        self.method\n+    }\n+}\n+fn method() {}\n+\"#,\n+            expect![[r#\"\n+                method Function FileId(0) 98..148 101..107\n+\n+                (no references)\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Foo {\n+    fn method(&self) -> u8;\n+}\n+\n+struct Bar {\n+    method: u8,\n+}\n+\n+impl Foo for Bar {\n+    fn method(&self) -> u8 {\n+        self.method$0\n+    }\n+}\n+fn method() {}\n+\"#,\n+            expect![[r#\"\n+                method Field FileId(0) 60..70 60..66\n+\n+                FileId(0) 136..142 Read\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Foo {\n+    fn method(&self) -> u8;\n+}\n+\n+struct Bar {\n+    method: u8,\n+}\n+\n+impl Foo for Bar {\n+    fn method(&self) -> u8 {\n+        self.method\n+    }\n+}\n+fn method$0() {}\n+\"#,\n+            expect![[r#\"\n+                method Function FileId(0) 151..165 154..160\n+\n+                (no references)\n+            \"#]],\n+        );\n+    }\n }"}]}