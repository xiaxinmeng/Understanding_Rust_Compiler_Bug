{"sha": "4bb6d4e740ffc15af337d43d842b036f35577124", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjZkNGU3NDBmZmMxNWFmMzM3ZDQzZDg0MmIwMzZmMzU1NzcxMjQ=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2016-10-25T00:05:58Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2016-10-25T00:05:58Z"}, "message": "rustc_typeck: Allow reification from fn item to unsafe ptr", "tree": {"sha": "803a576afab7be03007a66762933687d063a3eb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803a576afab7be03007a66762933687d063a3eb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb6d4e740ffc15af337d43d842b036f35577124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb6d4e740ffc15af337d43d842b036f35577124", "html_url": "https://github.com/rust-lang/rust/commit/4bb6d4e740ffc15af337d43d842b036f35577124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb6d4e740ffc15af337d43d842b036f35577124/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd2427307018a68e0b77438bbe40d339a54e587", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd2427307018a68e0b77438bbe40d339a54e587", "html_url": "https://github.com/rust-lang/rust/commit/7bd2427307018a68e0b77438bbe40d339a54e587"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "02a65e249c8267cd97ca9d79f24521d09fa83188", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4bb6d4e740ffc15af337d43d842b036f35577124/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb6d4e740ffc15af337d43d842b036f35577124/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=4bb6d4e740ffc15af337d43d842b036f35577124", "patch": "@@ -196,6 +196,8 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 // Function items are coercible to any closure\n                 // type; function pointers are not (that would\n                 // require double indirection).\n+                // Additionally, we permit coercin of function\n+                // items to drop the unsafe qualifier.\n                 self.coerce_from_fn_item(a, a_f, b)\n             }\n             ty::TyFnPtr(a_f) => {\n@@ -504,6 +506,24 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         Ok((target, AdjustDerefRef(adjustment)))\n     }\n \n+    fn coerce_from_safe_fn(&self,\n+                           a: Ty<'tcx>,\n+                           fn_ty_a: &'tcx ty::BareFnTy<'tcx>,\n+                           b: Ty<'tcx>)\n+                           -> CoerceResult<'tcx> {\n+        if let ty::TyFnPtr(fn_ty_b) = b.sty {\n+            match (fn_ty_a.unsafety, fn_ty_b.unsafety) {\n+                (hir::Unsafety::Normal, hir::Unsafety::Unsafe) => {\n+                    let unsafe_a = self.tcx.safe_to_unsafe_fn_ty(fn_ty_a);\n+                    return self.unify_and_identity(unsafe_a, b)\n+                        .map(|(ty, _)| (ty, AdjustUnsafeFnPointer));\n+                }\n+                _ => {}\n+            }\n+        }\n+        self.unify_and_identity(a, b)\n+    }\n+\n     fn coerce_from_fn_pointer(&self,\n                               a: Ty<'tcx>,\n                               fn_ty_a: &'tcx ty::BareFnTy<'tcx>,\n@@ -516,17 +536,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         let b = self.shallow_resolve(b);\n         debug!(\"coerce_from_fn_pointer(a={:?}, b={:?})\", a, b);\n \n-        if let ty::TyFnPtr(fn_ty_b) = b.sty {\n-            match (fn_ty_a.unsafety, fn_ty_b.unsafety) {\n-                (hir::Unsafety::Normal, hir::Unsafety::Unsafe) => {\n-                    let unsafe_a = self.tcx.safe_to_unsafe_fn_ty(fn_ty_a);\n-                    return self.unify_and_identity(unsafe_a, b)\n-                        .map(|(ty, _)| (ty, AdjustUnsafeFnPointer));\n-                }\n-                _ => {}\n-            }\n-        }\n-        self.unify_and_identity(a, b)\n+        self.coerce_from_safe_fn(a, fn_ty_a, b)\n     }\n \n     fn coerce_from_fn_item(&self,\n@@ -544,7 +554,8 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         match b.sty {\n             ty::TyFnPtr(_) => {\n                 let a_fn_pointer = self.tcx.mk_fn_ptr(fn_ty_a);\n-                self.unify_and_identity(a_fn_pointer, b).map(|(ty, _)| (ty, AdjustReifyFnPointer))\n+                self.coerce_from_safe_fn(a_fn_pointer, fn_ty_a, b)\n+                    .map(|(ty, _)| (ty, AdjustReifyFnPointer))\n             }\n             _ => self.unify_and_identity(a, b),\n         }"}, {"sha": "323705f3f955f8117d75f985d9d2a9085aca4633", "filename": "src/test/run-pass/typeck-fn-to-unsafe-fn-ptr.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4bb6d4e740ffc15af337d43d842b036f35577124/src%2Ftest%2Frun-pass%2Ftypeck-fn-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb6d4e740ffc15af337d43d842b036f35577124/src%2Ftest%2Frun-pass%2Ftypeck-fn-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck-fn-to-unsafe-fn-ptr.rs?ref=4bb6d4e740ffc15af337d43d842b036f35577124", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This tests reification from safe function to `unsafe fn` pointer\n+\n+fn do_nothing() -> () {}\n+\n+unsafe fn call_unsafe(func: unsafe fn() -> ()) -> () {\n+    func()\n+}\n+\n+pub fn main() {\n+    unsafe { call_unsafe(do_nothing); }\n+}"}]}