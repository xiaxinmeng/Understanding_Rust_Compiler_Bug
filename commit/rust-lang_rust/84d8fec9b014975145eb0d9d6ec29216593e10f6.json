{"sha": "84d8fec9b014975145eb0d9d6ec29216593e10f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZDhmZWM5YjAxNDk3NTE0NWViMGQ5ZDZlYzI5MjE2NTkzZTEwZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-01T20:09:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-01T20:09:00Z"}, "message": "Auto merge of #31993 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #31965, #31969, #31973, #31978, #31984, #31987, #31992\n- Failed merges:", "tree": {"sha": "8acd329d3f0851feea711022b75163c89dc3e94a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8acd329d3f0851feea711022b75163c89dc3e94a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84d8fec9b014975145eb0d9d6ec29216593e10f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84d8fec9b014975145eb0d9d6ec29216593e10f6", "html_url": "https://github.com/rust-lang/rust/commit/84d8fec9b014975145eb0d9d6ec29216593e10f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84d8fec9b014975145eb0d9d6ec29216593e10f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f25f0e8de91436fbf2630150d17569525e09bab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f25f0e8de91436fbf2630150d17569525e09bab6", "html_url": "https://github.com/rust-lang/rust/commit/f25f0e8de91436fbf2630150d17569525e09bab6"}, {"sha": "fbe9f10266f73de2edd205b9edb8c71a264e272c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe9f10266f73de2edd205b9edb8c71a264e272c", "html_url": "https://github.com/rust-lang/rust/commit/fbe9f10266f73de2edd205b9edb8c71a264e272c"}], "stats": {"total": 82, "additions": 48, "deletions": 34}, "files": [{"sha": "97edaa122eff97f9a859def2484476b554ddb21d", "filename": "RELEASES.md", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -1,16 +1,6 @@\n Version 1.7.0 (2016-03-03)\n ==========================\n \n-Language\n---------\n-\n-* Soundness fixes to the interactions between associated types and\n-  lifetimes, specified in [RFC 1214], [now generate errors][1.7sf] for\n-  code that violates the new rules. This is a significant change that\n-  is known to break existing code, so it has emitted warnings for the\n-  new error cases since 1.4 to give crate authors time to adapt. The\n-  details of what is changing are subtle; read the RFC for more.\n-\n Libraries\n ---------\n \n@@ -59,6 +49,17 @@ Libraries\n     * [`IntoStringError::into_cstring`]\n     * [`IntoStringError::utf8_error`]\n     * `Error for IntoStringError`\n+  * Hashing\n+    * [`std::hash::BuildHasher`]\n+    * [`BuildHasher::Hasher`]\n+    * [`BuildHasher::build_hasher`]\n+    * [`std::hash::BuildHasherDefault`]\n+    * [`HashMap::with_hasher`]\n+    * [`HashMap::with_capacity_and_hasher`]\n+    * [`HashSet::with_hasher`]\n+    * [`HashSet::with_capacity_and_hasher`]\n+    * [`std::collections::hash_map::RandomState`]\n+    * [`RandomState::new`]\n * [Validating UTF-8 is faster by a factor of between 7 and 14x for\n   ASCII input][1.7utf8]. This means that creating `String`s and `str`s\n   from bytes is faster.\n@@ -80,9 +81,6 @@ Libraries\n Misc\n ----\n \n-* [The `--error-format=json` flag to `rustc` causes it to emit errors\n-  in JSON format][1.7j]. This is an unstable flag and so also requires\n-  the `-Z unstable-options` flag.\n * [When running tests with `--test`, rustdoc will pass `--cfg`\n   arguments to the compiler][1.7dt].\n * [The compiler is built with RPATH information by default][1.7rpa].\n@@ -104,6 +102,12 @@ Cargo\n Compatibility Notes\n -------------------\n \n+* Soundness fixes to the interactions between associated types and\n+  lifetimes, specified in [RFC 1214], [now generate errors][1.7sf] for\n+  code that violates the new rules. This is a significant change that\n+  is known to break existing code, so it has emitted warnings for the\n+  new error cases since 1.4 to give crate authors time to adapt. The\n+  details of what is changing are subtle; read the RFC for more.\n * [Several bugs in the compiler's visibility calculations were\n   fixed][1.7v]. Since this was found to break significant amounts of\n   code, the new errors will be emitted as warnings for several release\n@@ -126,7 +130,6 @@ Compatibility Notes\n [1.7dta]: https://github.com/rust-lang/rust/pull/30394\n [1.7f]: https://github.com/rust-lang/rust/pull/30672\n [1.7h]: https://github.com/rust-lang/rust/pull/30818\n-[1.7j]: https://github.com/rust-lang/rust/pull/30711\n [1.7ll]: https://github.com/rust-lang/rust/pull/30663\n [1.7m]: https://github.com/rust-lang/rust/pull/30381\n [1.7p]: https://github.com/rust-lang/rust/pull/30681\n@@ -137,11 +140,15 @@ Compatibility Notes\n [1.7utf8]: https://github.com/rust-lang/rust/pull/30740\n [1.7v]: https://github.com/rust-lang/rust/pull/29973\n [RFC 1214]: https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md\n-[`clone_from_slice`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.clone_from_slice\n-[`sort_by_key`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.sort_by_key\n+[`BuildHasher::Hasher`]: http://doc.rust-lang.org/nightly/std/hash/trait.Hasher.html\n+[`BuildHasher::build_hasher`]: http://doc.rust-lang.org/nightly/std/hash/trait.BuildHasher.html#tymethod.build_hasher\n [`CString::into_bytes_with_nul`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes_with_nul\n [`CString::into_bytes`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes\n [`CString::into_string`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_string\n+[`HashMap::with_capacity_and_hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.with_capacity_and_hasher\n+[`HashMap::with_hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.with_hasher\n+[`HashSet::with_capacity_and_hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.with_capacity_and_hasher\n+[`HashSet::with_hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.with_hasher\n [`IntoStringError::into_cstring`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.into_cstring\n [`IntoStringError::utf8_error`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.utf8_error\n [`Ipv4Addr::is_broadcast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_broadcast\n@@ -154,10 +161,12 @@ Compatibility Notes\n [`Ipv6Addr::is_multicast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_multicast\n [`Ipv6Addr::is_unspecified`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_unspecified\n [`Path::strip_prefix`]: http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.strip_prefix\n+[`RandomState::new`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.RandomState.html#method.new\n [`String::as_mut_str`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_mut_str\n [`String::as_str`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_str\n [`Vec::as_mut_slice`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_mut_slice\n [`Vec::as_slice`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_slice\n+[`clone_from_slice`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.clone_from_slice\n [`ffi::IntoStringError`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html\n [`i32::checked_neg`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_neg\n [`i32::checked_rem`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_rem\n@@ -173,8 +182,13 @@ Compatibility Notes\n [`i32::overflowing_sub`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_sub\n [`i32::saturating_mul`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.saturating_mul\n [`path::StripPrefixError`]: http://doc.rust-lang.org/nightly/std/path/struct.StripPrefixError.html\n+[`sort_by_key`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.sort_by_key\n+[`std::collections::hash_map::RandomState`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.RandomState.html\n+[`std::hash::BuildHasherDefault`]: http://doc.rust-lang.org/nightly/std/hash/struct.BuildHasherDefault.html\n+[`std::hash::BuildHasher`]: http://doc.rust-lang.org/nightly/std/hash/trait.BuildHasher.html\n [`u32::checked_neg`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_neg\n [`u32::checked_rem`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_rem\n+[`u32::checked_neg`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_neg\n [`u32::checked_shl`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_shl\n [`u32::overflowing_add`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_add\n [`u32::overflowing_div`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_div"}, {"sha": "887247b80c4cd8efe2aee22e8f7b69aa4c5198bd", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -13,7 +13,7 @@\n ######################################################################\n \n # The version number\n-CFG_RELEASE_NUM=1.8.0\n+CFG_RELEASE_NUM=1.9.0\n \n # An optional number to put after the label, e.g. '.2' -> '-beta.2'\n # NB Make sure it starts with a dot to conform to semver pre-release"}, {"sha": "0a4e09ed00ab6c48950020051d954115bd463b70", "filename": "src/doc/book/references-and-borrowing.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -211,9 +211,10 @@ fn main() {\n ```\n \n In other words, the mutable borrow is held through the rest of our example. What\n-we want is for the mutable borrow to end _before_ we try to call `println!` and\n-make an immutable borrow. In Rust, borrowing is tied to the scope that the\n-borrow is valid for. And our scopes look like this:\n+we want is for the mutable borrow by `y` to end so that the resource can be\n+returned to the owner, `x`. `x` can then provide a mutable borrow to `println!`.\n+In Rust, borrowing is tied to the scope that the borrow is valid for. And our\n+scopes look like this:\n \n ```rust,ignore\n let mut x = 5;\n@@ -378,4 +379,3 @@ statement 1 at 3:14\n \n In the above example, `y` is declared before `x`, meaning that `y` lives longer\n than `x`, which is not allowed.\n-"}, {"sha": "af4e351569f7f55920fd2db72c6841682098fe1c", "filename": "src/doc/book/unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Fdoc%2Fbook%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Fdoc%2Fbook%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Funsafe.md?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -4,7 +4,7 @@ Rust\u2019s main draw is its powerful static guarantees about behavior. But safety\n checks are conservative by nature: there are some programs that are actually\n safe, but the compiler is not able to verify this is true. To write these kinds\n of programs, we need to tell the compiler to relax its restrictions a bit. For\n-this, Rust has a keyword, `unsafe`. Code using `unsafe` has less restrictions\n+this, Rust has a keyword, `unsafe`. Code using `unsafe` has fewer restrictions\n than normal code does.\n \n Let\u2019s go over the syntax, and then we\u2019ll talk semantics. `unsafe` is used in"}, {"sha": "45fc5ff80093a99176599d4f760e2a4e1ce45610", "filename": "src/libcore/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -12,7 +12,7 @@\n //! up to a certain length. Eventually we should able to generalize\n //! to all lengths.\n //!\n-//! *[See also the array primitive type](../primitive.array.html).*\n+//! *[See also the array primitive type](../../std/primitive.array.html).*\n \n #![unstable(feature = \"fixed_size_array\",\n             reason = \"traits and impls are better expressed through generic \\"}, {"sha": "1dd820980f496c534ff3e9ceda4a4da9c90b1b5e", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The 16-bit signed integer type.\n //!\n-//! *[See also the `i16` primitive type](../primitive.i16.html).*\n+//! *[See also the `i16` primitive type](../../std/primitive.i16.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "8a2168933dc66c5956a3f41d674d410c3243211b", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The 32-bit signed integer type.\n //!\n-//! *[See also the `i32` primitive type](../primitive.i32.html).*\n+//! *[See also the `i32` primitive type](../../std/primitive.i32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "2ce9eb11936bc981dcaa2e8c8140182c4d905430", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The 64-bit signed integer type.\n //!\n-//! *[See also the `i64` primitive type](../primitive.i64.html).*\n+//! *[See also the `i64` primitive type](../../std/primitive.i64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "8b5a7f1910e2055f467befc7e44c64f51528709c", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The 8-bit signed integer type.\n //!\n-//! *[See also the `i8` primitive type](../primitive.i8.html).*\n+//! *[See also the `i8` primitive type](../../std/primitive.i8.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "de5b1777f936f6b86fd7beec86472f026b5f6d8c", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The pointer-sized signed integer type.\n //!\n-//! *[See also the `isize` primitive type](../primitive.isize.html).*\n+//! *[See also the `isize` primitive type](../../std/primitive.isize.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "d34d87caa55fa630b5a21800229adcb162ac4542", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The 16-bit unsigned integer type.\n //!\n-//! *[See also the `u16` primitive type](../primitive.u16.html).*\n+//! *[See also the `u16` primitive type](../../std/primitive.u16.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "f9c9099e47f18b9694a9f30d2738b89720fd95eb", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The 32-bit unsigned integer type.\n //!\n-//! *[See also the `u32` primitive type](../primitive.u32.html).*\n+//! *[See also the `u32` primitive type](../../std/primitive.u32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "8dfe4335a3d722bfadae71e487b93e7032582002", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The 64-bit unsigned integer type.\n //!\n-//! *[See also the `u64` primitive type](../primitive.u64.html).*\n+//! *[See also the `u64` primitive type](../../std/primitive.u64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "0106ee8e401c9cb4f64cd8e2572f9fdab29e8733", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The 8-bit unsigned integer type.\n //!\n-//! *[See also the `u8` primitive type](../primitive.u8.html).*\n+//! *[See also the `u8` primitive type](../../std/primitive.u8.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "0c7d16a41bc7e8968b6501b6c57378097ee939e0", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -10,7 +10,7 @@\n \n //! The pointer-sized unsigned integer type.\n //!\n-//! *[See also the `usize` primitive type](../primitive.usize.html).*\n+//! *[See also the `usize` primitive type](../../std/primitive.usize.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "3cf722668b24f8bffc1a31cd15055e65b98099e8", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d8fec9b014975145eb0d9d6ec29216593e10f6/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=84d8fec9b014975145eb0d9d6ec29216593e10f6", "patch": "@@ -12,7 +12,7 @@\n \n //! Raw, unsafe pointers, `*const T`, and `*mut T`\n //!\n-//! *[See also the pointer primitive types](../primitive.pointer.html).*\n+//! *[See also the pointer primitive types](../../std/primitive.pointer.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}