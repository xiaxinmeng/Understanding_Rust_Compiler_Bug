{"sha": "f8588549c3c3d45c32b404210cada01e2a45def3", "node_id": "C_kwDOAAsO6NoAKGY4NTg4NTQ5YzNjM2Q0NWMzMmI0MDQyMTBjYWRhMDFlMmE0NWRlZjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T20:39:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T20:39:24Z"}, "message": "Auto merge of #99422 - Dylan-DPC:rollup-htjofm6, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #98839 (Add assertion that `transmute_copy`'s U is not larger than T)\n - #98998 (Remove branch target prologues from `#[naked] fn`)\n - #99198 (add missing null ptr check in alloc example)\n - #99344 (rustdoc: avoid inlining items with duplicate `(type, name)`)\n - #99351 (Use `typeck_results` to get accurate qpath res for arg mismatch error)\n - #99378 (interpret/visitor: add missing early return)\n - #99394 (Add regression test for #95230)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8ecfb39070ceb44e57a2070e9653e41cfd255242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ecfb39070ceb44e57a2070e9653e41cfd255242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8588549c3c3d45c32b404210cada01e2a45def3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8588549c3c3d45c32b404210cada01e2a45def3", "html_url": "https://github.com/rust-lang/rust/commit/f8588549c3c3d45c32b404210cada01e2a45def3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8588549c3c3d45c32b404210cada01e2a45def3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed9173276a176126150b4c684a4262a135ce51ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9173276a176126150b4c684a4262a135ce51ef", "html_url": "https://github.com/rust-lang/rust/commit/ed9173276a176126150b4c684a4262a135ce51ef"}, {"sha": "068a559fbbe7e0e018b66e8798295ca4f97236b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/068a559fbbe7e0e018b66e8798295ca4f97236b5", "html_url": "https://github.com/rust-lang/rust/commit/068a559fbbe7e0e018b66e8798295ca4f97236b5"}], "stats": {"total": 254, "additions": 233, "deletions": 21}, "files": [{"sha": "62da99ac3fb6605d10310c8d04ad5816e69176a5", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -299,6 +299,12 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n         to_add.push(AttributeKind::Naked.create_attr(cx.llcx));\n+        // HACK(jubilee): \"indirect branch tracking\" works by attaching prologues to functions.\n+        // And it is a module-level attribute, so the alternative is pulling naked functions into new LLVM modules.\n+        // Otherwise LLVM's \"naked\" functions come with endbr prefixes per https://github.com/rust-lang/rust/issues/98768\n+        to_add.push(AttributeKind::NoCfCheck.create_attr(cx.llcx));\n+        // Need this for AArch64.\n+        to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"branch-target-enforcement\", \"false\"));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n         // apply to return place instead of function (unlike all other attributes applied in this function)"}, {"sha": "73cedb59349d3467b31eeba1e253d2e6a7e5b1be", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -191,6 +191,7 @@ pub enum AttributeKind {\n     StackProtect = 32,\n     NoUndef = 33,\n     SanitizeMemTag = 34,\n+    NoCfCheck = 35,\n }\n \n /// LLVMIntPredicate"}, {"sha": "3f6e8a8f755a1b3f875180b59c462bb4f13cfb6f", "filename": "compiler/rustc_const_eval/src/interpret/visitor.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -473,6 +473,9 @@ macro_rules! make_value_visitor {\n                         // The second `Box` field is the allocator, which we recursively check for validity\n                         // like in regular structs.\n                         self.visit_field(v, 1, &alloc)?;\n+\n+                        // We visited all parts of this one.\n+                        return Ok(());\n                     }\n                     _ => {},\n                 };"}, {"sha": "9fe84a6309b9c1cc26af214ae87a93e362718048", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -84,6 +84,7 @@ enum LLVMRustAttribute {\n   StackProtect = 32,\n   NoUndef = 33,\n   SanitizeMemTag = 34,\n+  NoCfCheck = 35,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "2d35ee8976e67c6bd925b0429cd9bcc9578a4605", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -176,6 +176,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::NoAlias;\n   case NoCapture:\n     return Attribute::NoCapture;\n+  case NoCfCheck:\n+    return Attribute::NoCfCheck;\n   case NoInline:\n     return Attribute::NoInline;\n   case NonNull:"}, {"sha": "41c38f558b6efb78a83b226a300439b60fe4ecda", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -443,17 +443,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Next, let's construct the error\n         let (error_span, full_call_span, ctor_of) = match &call_expr.kind {\n             hir::ExprKind::Call(\n-                hir::Expr {\n-                    span,\n-                    kind:\n-                        hir::ExprKind::Path(hir::QPath::Resolved(\n-                            _,\n-                            hir::Path { res: Res::Def(DefKind::Ctor(of, _), _), .. },\n-                        )),\n-                    ..\n-                },\n+                hir::Expr { hir_id, span, kind: hir::ExprKind::Path(qpath), .. },\n                 _,\n-            ) => (call_span, *span, Some(of)),\n+            ) => {\n+                if let Res::Def(DefKind::Ctor(of, _), _) =\n+                    self.typeck_results.borrow().qpath_res(qpath, *hir_id)\n+                {\n+                    (call_span, *span, Some(of))\n+                } else {\n+                    (call_span, *span, None)\n+                }\n+            }\n             hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None),\n             hir::ExprKind::MethodCall(path_segment, _, span) => {\n                 let ident_span = path_segment.ident.span;"}, {"sha": "efdc86bf57a8af6e1eb32f0092551da6fd0920e5", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -70,11 +70,14 @@ pub use std::alloc::Global;\n /// # Examples\n ///\n /// ```\n-/// use std::alloc::{alloc, dealloc, Layout};\n+/// use std::alloc::{alloc, dealloc, handle_alloc_error, Layout};\n ///\n /// unsafe {\n ///     let layout = Layout::new::<u16>();\n ///     let ptr = alloc(layout);\n+///     if ptr.is_null() {\n+///         handle_alloc_error(layout);\n+///     }\n ///\n ///     *(ptr as *mut u16) = 42;\n ///     assert_eq!(*(ptr as *mut u16), 42);"}, {"sha": "66af491607435f1d2d72c47fee787376c585237a", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -1040,6 +1040,8 @@ pub fn copy<T: Copy>(x: &T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_transmute_copy\", issue = \"83165\")]\n pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+    assert!(size_of::<T>() >= size_of::<U>(), \"cannot transmute_copy if U is larger than T\");\n+\n     // If U has a higher alignment requirement, src might not be suitably aligned.\n     if align_of::<U>() > align_of::<T>() {\n         // SAFETY: `src` is a reference which is guaranteed to be valid for reads."}, {"sha": "6856d1a1f51aeee2062c1ff4a6286116a42da783", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -97,6 +97,46 @@ fn test_transmute_copy() {\n     assert_eq!(1, unsafe { transmute_copy(&1) });\n }\n \n+#[test]\n+fn test_transmute_copy_shrink() {\n+    assert_eq!(0_u8, unsafe { transmute_copy(&0_u64) });\n+}\n+\n+#[test]\n+fn test_transmute_copy_unaligned() {\n+    #[repr(C)]\n+    #[derive(Default)]\n+    struct Unaligned {\n+        a: u8,\n+        b: [u8; 8],\n+    }\n+\n+    let u = Unaligned::default();\n+    assert_eq!(0_u64, unsafe { transmute_copy(&u.b) });\n+}\n+\n+#[test]\n+#[cfg(panic = \"unwind\")]\n+fn test_transmute_copy_grow_panics() {\n+    use std::panic;\n+\n+    let err = panic::catch_unwind(panic::AssertUnwindSafe(|| unsafe {\n+        let _unused: u64 = transmute_copy(&1_u8);\n+    }));\n+\n+    match err {\n+        Ok(_) => unreachable!(),\n+        Err(payload) => {\n+            payload\n+                .downcast::<&'static str>()\n+                .and_then(|s| {\n+                    if *s == \"cannot transmute_copy if U is larger than T\" { Ok(s) } else { Err(s) }\n+                })\n+                .unwrap_or_else(|p| panic::resume_unwind(p));\n+        }\n+    }\n+}\n+\n #[test]\n #[allow(dead_code)]\n fn test_discriminant_send_sync() {"}, {"sha": "671b40dbfe66df3e34f30ecd597e5464ec6b3fa8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -57,11 +57,43 @@ impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n                 .map(|(item, renamed)| clean_maybe_renamed_foreign_item(cx, item, *renamed)),\n         );\n         items.extend(self.mods.iter().map(|x| x.clean(cx)));\n-        items.extend(\n-            self.items\n-                .iter()\n-                .flat_map(|(item, renamed)| clean_maybe_renamed_item(cx, item, *renamed)),\n-        );\n+\n+        // Split up imports from all other items.\n+        //\n+        // This covers the case where somebody does an import which should pull in an item,\n+        // but there's already an item with the same namespace and same name. Rust gives\n+        // priority to the not-imported one, so we should, too.\n+        let mut inserted = FxHashSet::default();\n+        items.extend(self.items.iter().flat_map(|(item, renamed)| {\n+            // First, lower everything other than imports.\n+            if matches!(item.kind, hir::ItemKind::Use(..)) {\n+                return Vec::new();\n+            }\n+            let v = clean_maybe_renamed_item(cx, item, *renamed);\n+            for item in &v {\n+                if let Some(name) = item.name {\n+                    inserted.insert((item.type_(), name));\n+                }\n+            }\n+            v\n+        }));\n+        items.extend(self.items.iter().flat_map(|(item, renamed)| {\n+            // Now we actually lower the imports, skipping everything else.\n+            if !matches!(item.kind, hir::ItemKind::Use(..)) {\n+                return Vec::new();\n+            }\n+            let mut v = clean_maybe_renamed_item(cx, item, *renamed);\n+            v.drain_filter(|item| {\n+                if let Some(name) = item.name {\n+                    // If an item with the same type and name already exists,\n+                    // it takes priority over the inlined stuff.\n+                    !inserted.insert((item.type_(), name))\n+                } else {\n+                    false\n+                }\n+            });\n+            v\n+        }));\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code."}, {"sha": "79b0bb2d7eead1ee88de7fc419d382d921c2f149", "filename": "src/test/assembly/aarch64-naked-fn-no-bti-prolog.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fassembly%2Faarch64-naked-fn-no-bti-prolog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fassembly%2Faarch64-naked-fn-no-bti-prolog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Faarch64-naked-fn-no-bti-prolog.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -C no-prepopulate-passes -Zbranch-protection=bti\n+// assembly-output: emit-asm\n+// needs-asm-support\n+// only-aarch64\n+\n+#![crate_type = \"lib\"]\n+#![feature(naked_functions)]\n+use std::arch::asm;\n+\n+// The problem at hand: Rust has adopted a fairly strict meaning for \"naked functions\",\n+// meaning \"no prologue whatsoever, no, really, not one instruction.\"\n+// Unfortunately, aarch64's \"branch target identification\" works via hints at landing sites.\n+// LLVM implements this via making sure of that, even for functions with the naked attribute.\n+// So, we must emit an appropriate instruction instead!\n+#[no_mangle]\n+#[naked]\n+pub unsafe extern \"C\" fn _hlt() -> ! {\n+    // CHECK-NOT: hint #34\n+    // CHECK: hlt #0x1\n+    asm!(\"hlt #1\", options(noreturn))\n+}"}, {"sha": "bedcded731d95a015962e30fb636e6a58f67ac21", "filename": "src/test/assembly/x86_64-naked-fn-no-cet-prolog.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fassembly%2Fx86_64-naked-fn-no-cet-prolog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fassembly%2Fx86_64-naked-fn-no-cet-prolog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-naked-fn-no-cet-prolog.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -C no-prepopulate-passes -Zcf-protection=full\n+// assembly-output: emit-asm\n+// needs-asm-support\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+#![feature(naked_functions)]\n+use std::arch::asm;\n+\n+// The problem at hand: Rust has adopted a fairly strict meaning for \"naked functions\",\n+// meaning \"no prologue whatsoever, no, really, not one instruction.\"\n+// Unfortunately, x86's control-flow enforcement, specifically indirect branch protection,\n+// works by using an instruction for each possible landing site,\n+// and LLVM implements this via making sure of that.\n+#[no_mangle]\n+#[naked]\n+pub unsafe extern \"sysv64\" fn will_halt() -> ! {\n+    // CHECK-NOT: endbr{{32|64}}\n+    // CHECK: hlt\n+    asm!(\"hlt\", options(noreturn))\n+}\n+\n+// what about aarch64?\n+// \"branch-protection\"=false"}, {"sha": "c0ac69f4ed77887847bd5421314ce21daa27acd7", "filename": "src/test/codegen/naked-noinline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -28,4 +28,4 @@ pub unsafe fn g() {\n     f();\n }\n \n-// CHECK: attributes [[ATTR]] = { naked noinline{{.*}} }\n+// CHECK: attributes [[ATTR]] = { naked{{.*}}noinline{{.*}} }"}, {"sha": "e061e42b29db805942376fb13066c5546d8fadcb", "filename": "src/test/rustdoc/auxiliary/issue-99221-aux.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-99221-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-99221-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-99221-aux.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -0,0 +1,20 @@\n+pub struct Option;\n+impl Option {\n+    pub fn unwrap(self) {}\n+}\n+\n+mod macros {\n+    use crate::Option;\n+    /// [`Option::unwrap`]\n+    #[macro_export]\n+    macro_rules! print {\n+        () => ()\n+    }\n+}\n+\n+mod structs {\n+    use crate::Option;\n+    /// [`Option::unwrap`]\n+    pub struct Print;\n+}\n+pub use structs::Print;"}, {"sha": "e74881d387dc1347664fdba0c53bbc48047c7c52", "filename": "src/test/rustdoc/issue-99221-multiple-macro-rules-w-same-name-submodule.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name-submodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name-submodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name-submodule.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -0,0 +1,19 @@\n+// aux-build:issue-99221-aux.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+#[macro_use]\n+extern crate issue_99221_aux;\n+\n+pub use issue_99221_aux::*;\n+\n+// @count foo/index.html '//a[@class=\"macro\"]' 1\n+\n+mod inner {\n+    #[macro_export]\n+    macro_rules! print {\n+        () => ()\n+    }\n+}"}, {"sha": "46d59654b99ebb2963832e3a9d2c9b653f821922", "filename": "src/test/rustdoc/issue-99221-multiple-macro-rules-w-same-name.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -0,0 +1,17 @@\n+// aux-build:issue-99221-aux.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+#[macro_use]\n+extern crate issue_99221_aux;\n+\n+pub use issue_99221_aux::*;\n+\n+// @count foo/index.html '//a[@class=\"macro\"]' 1\n+\n+#[macro_export]\n+macro_rules! print {\n+    () => ()\n+}"}, {"sha": "41e64726a3246f083267660a677401a2698236ab", "filename": "src/test/rustdoc/issue-99221-multiple-structs-w-same-name.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-structs-w-same-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-structs-w-same-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-structs-w-same-name.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:issue-99221-aux.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+#[macro_use]\n+extern crate issue_99221_aux;\n+\n+pub use issue_99221_aux::*;\n+\n+// @count foo/index.html '//a[@class=\"struct\"][@title=\"foo::Print struct\"]' 1\n+\n+pub struct Print;"}, {"sha": "92c506eabb7f43a01ccb297b7467d664cab1d01b", "filename": "src/test/ui/hrtb/issue-95230.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fui%2Fhrtb%2Fissue-95230.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fui%2Fhrtb%2Fissue-95230.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-95230.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+pub struct Bar\n+where\n+    for<'a> &'a mut Self:;\n+\n+fn main() {}"}, {"sha": "a922d7a5e4132d7e7b9fac96b6f6c72adfe10654", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -7,7 +7,7 @@ LL |     fn ts_variant() {\n LL |         Self::TSVariant(());\n    |         --------------- ^^ expected type parameter `T`, found `()`\n    |         |\n-   |         arguments to this function are incorrect\n+   |         arguments to this enum variant are incorrect\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n@@ -55,7 +55,7 @@ LL | impl<T> Enum<T> {\n LL |         Self::<()>::TSVariant(());\n    |         --------------------- ^^ expected type parameter `T`, found `()`\n    |         |\n-   |         arguments to this function are incorrect\n+   |         arguments to this enum variant are incorrect\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`"}, {"sha": "3a8712f2ae515a266da53e8cd7c42d91dc56c462", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -18,6 +18,6 @@ impl E2 {\n }\n \n fn main() {\n-    <E>::V(); //~ ERROR this function takes 1 argument but 0 arguments were supplied\n+    <E>::V(); //~ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n     let _: u8 = <E2>::V; //~ ERROR mismatched types\n }"}, {"sha": "006253f84320802f6582a962b9c2ca5c6fe78509", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8588549c3c3d45c32b404210cada01e2a45def3/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=f8588549c3c3d45c32b404210cada01e2a45def3", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:21:5\n    |\n LL |     <E>::V();"}]}