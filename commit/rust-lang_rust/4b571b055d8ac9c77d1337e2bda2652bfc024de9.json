{"sha": "4b571b055d8ac9c77d1337e2bda2652bfc024de9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNTcxYjA1NWQ4YWM5Yzc3ZDEzMzdlMmJkYTI2NTJiZmMwMjRkZTk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2015-08-28T22:23:32Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2015-08-29T09:37:40Z"}, "message": "Handle gateage of built-in attributes seperately\n\nThis allows marking attributes as whitelisted/crate-only independent of\ntheir feature gate status.\n\nCloses #24213", "tree": {"sha": "66e62558fdb4c8b1bf034e0fba1ce6ae5af401a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66e62558fdb4c8b1bf034e0fba1ce6ae5af401a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b571b055d8ac9c77d1337e2bda2652bfc024de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b571b055d8ac9c77d1337e2bda2652bfc024de9", "html_url": "https://github.com/rust-lang/rust/commit/4b571b055d8ac9c77d1337e2bda2652bfc024de9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b571b055d8ac9c77d1337e2bda2652bfc024de9/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f28232756a6842acb1d2da6defdea43cfe95dde", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f28232756a6842acb1d2da6defdea43cfe95dde", "html_url": "https://github.com/rust-lang/rust/commit/6f28232756a6842acb1d2da6defdea43cfe95dde"}], "stats": {"total": 276, "additions": 149, "deletions": 127}, "files": [{"sha": "2f3625ff22fd4b636d9b3104772c23d1795e252b", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b571b055d8ac9c77d1337e2bda2652bfc024de9/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b571b055d8ac9c77d1337e2bda2652bfc024de9/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=4b571b055d8ac9c77d1337e2bda2652bfc024de9", "patch": "@@ -145,11 +145,6 @@ impl<'a> Registry<'a> {\n     /// `Whitelisted` attributes will additionally not trigger the `unused_attribute`\n     /// lint. `CrateLevel` attributes will not be allowed on anything other than a crate.\n     pub fn register_attribute(&mut self, name: String, ty: AttributeType) {\n-        if let AttributeType::Gated(..) = ty {\n-            self.sess.span_err(self.krate_span, \"plugin tried to register a gated \\\n-                                                 attribute. Only `Normal`, `Whitelisted`, \\\n-                                                 and `CrateLevel` attributes are allowed\");\n-        }\n         self.attributes.push((name, ty));\n     }\n }"}, {"sha": "abdeb6ae46e01cc7e09d873d4d0a3a5ebb0cbf92", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b571b055d8ac9c77d1337e2bda2652bfc024de9/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b571b055d8ac9c77d1337e2bda2652bfc024de9/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=4b571b055d8ac9c77d1337e2bda2652bfc024de9", "patch": "@@ -887,10 +887,9 @@ impl LintPass for UnusedAttributes {\n \n     fn check_attribute(&mut self, cx: &Context, attr: &ast::Attribute) {\n         // Note that check_name() marks the attribute as used if it matches.\n-        for &(ref name, ty) in KNOWN_ATTRIBUTES {\n+        for &(ref name, ty, _) in KNOWN_ATTRIBUTES {\n             match ty {\n-                AttributeType::Whitelisted\n-                | AttributeType::Gated(_, _) if attr.check_name(name) => {\n+                AttributeType::Whitelisted if attr.check_name(name) => {\n                     break;\n                 },\n                 _ => ()\n@@ -907,8 +906,11 @@ impl LintPass for UnusedAttributes {\n         if !attr::is_used(attr) {\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n             // Is it a builtin attribute that must be used at the crate level?\n-            let known_crate = KNOWN_ATTRIBUTES.contains(&(&attr.name(),\n-                                                          AttributeType::CrateLevel));\n+            let known_crate = KNOWN_ATTRIBUTES.iter().find(|&&(name, ty, _)| {\n+                attr.name() == name &&\n+                ty == AttributeType::CrateLevel\n+            }).is_some();\n+\n             // Has a plugin registered this attribute as one which must be used at\n             // the crate level?\n             let plugin_crate = plugin_attributes.iter()"}, {"sha": "3fa55df7594db2493c3835773e27358fee3d34d5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 125, "deletions": 117, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/4b571b055d8ac9c77d1337e2bda2652bfc024de9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b571b055d8ac9c77d1337e2bda2652bfc024de9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4b571b055d8ac9c77d1337e2bda2652bfc024de9", "patch": "@@ -24,6 +24,7 @@\n \n use self::Status::*;\n use self::AttributeType::*;\n+use self::AttributeGate::*;\n \n use abi::Abi;\n use ast::NodeId;\n@@ -203,135 +204,137 @@ enum Status {\n }\n \n // Attributes that have a special meaning to rustc or rustdoc\n-pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n+pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGate)] = &[\n     // Normal attributes\n \n-    (\"warn\", Normal),\n-    (\"allow\", Normal),\n-    (\"forbid\", Normal),\n-    (\"deny\", Normal),\n-\n-    (\"macro_reexport\", Normal),\n-    (\"macro_use\", Normal),\n-    (\"macro_export\", Normal),\n-    (\"plugin_registrar\", Normal),\n-\n-    (\"cfg\", Normal),\n-    (\"cfg_attr\", Normal),\n-    (\"main\", Normal),\n-    (\"start\", Normal),\n-    (\"test\", Normal),\n-    (\"bench\", Normal),\n-    (\"simd\", Normal),\n-    (\"repr\", Normal),\n-    (\"path\", Normal),\n-    (\"abi\", Normal),\n-    (\"automatically_derived\", Normal),\n-    (\"no_mangle\", Normal),\n-    (\"no_link\", Normal),\n-    (\"derive\", Normal),\n-    (\"should_panic\", Normal),\n-    (\"ignore\", Normal),\n-    (\"no_implicit_prelude\", Normal),\n-    (\"reexport_test_harness_main\", Normal),\n-    (\"link_args\", Normal),\n-    (\"macro_escape\", Normal),\n+    (\"warn\", Normal, Ungated),\n+    (\"allow\", Normal, Ungated),\n+    (\"forbid\", Normal, Ungated),\n+    (\"deny\", Normal, Ungated),\n+\n+    (\"macro_reexport\", Normal, Ungated),\n+    (\"macro_use\", Normal, Ungated),\n+    (\"macro_export\", Normal, Ungated),\n+    (\"plugin_registrar\", Normal, Ungated),\n+\n+    (\"cfg\", Normal, Ungated),\n+    (\"cfg_attr\", Normal, Ungated),\n+    (\"main\", Normal, Ungated),\n+    (\"start\", Normal, Ungated),\n+    (\"test\", Normal, Ungated),\n+    (\"bench\", Normal, Ungated),\n+    (\"simd\", Normal, Ungated),\n+    (\"repr\", Normal, Ungated),\n+    (\"path\", Normal, Ungated),\n+    (\"abi\", Normal, Ungated),\n+    (\"automatically_derived\", Normal, Ungated),\n+    (\"no_mangle\", Normal, Ungated),\n+    (\"no_link\", Normal, Ungated),\n+    (\"derive\", Normal, Ungated),\n+    (\"should_panic\", Normal, Ungated),\n+    (\"ignore\", Normal, Ungated),\n+    (\"no_implicit_prelude\", Normal, Ungated),\n+    (\"reexport_test_harness_main\", Normal, Ungated),\n+    (\"link_args\", Normal, Ungated),\n+    (\"macro_escape\", Normal, Ungated),\n \n     // Not used any more, but we can't feature gate it\n-    (\"no_stack_check\", Normal),\n-\n-    (\"staged_api\", Gated(\"staged_api\",\n-                         \"staged_api is for use by rustc only\")),\n-    (\"plugin\", Gated(\"plugin\",\n-                     \"compiler plugins are experimental \\\n-                      and possibly buggy\")),\n-    (\"no_std\", Gated(\"no_std\",\n-                     \"no_std is experimental\")),\n-    (\"no_core\", Gated(\"no_core\",\n-                     \"no_core is experimental\")),\n-    (\"lang\", Gated(\"lang_items\",\n-                     \"language items are subject to change\")),\n-    (\"linkage\", Gated(\"linkage\",\n-                      \"the `linkage` attribute is experimental \\\n-                       and not portable across platforms\")),\n-    (\"thread_local\", Gated(\"thread_local\",\n-                            \"`#[thread_local]` is an experimental feature, and does not \\\n-                             currently handle destructors. There is no corresponding \\\n-                             `#[task_local]` mapping to the task model\")),\n-\n-    (\"rustc_on_unimplemented\", Gated(\"on_unimplemented\",\n-                                     \"the `#[rustc_on_unimplemented]` attribute \\\n+    (\"no_stack_check\", Normal, Ungated),\n+\n+    (\"staged_api\", CrateLevel, Gated(\"staged_api\",\n+                                     \"staged_api is for use by rustc only\")),\n+    (\"plugin\", CrateLevel, Gated(\"plugin\",\n+                                 \"compiler plugins are experimental \\\n+                                  and possibly buggy\")),\n+    (\"no_std\", CrateLevel, Gated(\"no_std\",\n+                                 \"no_std is experimental\")),\n+    (\"no_core\", CrateLevel, Gated(\"no_core\",\n+                                  \"no_core is experimental\")),\n+    (\"lang\", Normal, Gated(\"lang_items\",\n+                           \"language items are subject to change\")),\n+    (\"linkage\", Whitelisted, Gated(\"linkage\",\n+                                   \"the `linkage` attribute is experimental \\\n+                                    and not portable across platforms\")),\n+    (\"thread_local\", Whitelisted, Gated(\"thread_local\",\n+                                        \"`#[thread_local]` is an experimental feature, and does \\\n+                                         not currently handle destructors. There is no \\\n+                                         corresponding `#[task_local]` mapping to the task \\\n+                                         model\")),\n+\n+    (\"rustc_on_unimplemented\", Normal, Gated(\"on_unimplemented\",\n+                                             \"the `#[rustc_on_unimplemented]` attribute \\\n+                                              is an experimental feature\")),\n+    (\"allocator\", Whitelisted, Gated(\"allocator\",\n+                                     \"the `#[allocator]` attribute is an experimental feature\")),\n+    (\"needs_allocator\", Normal, Gated(\"needs_allocator\",\n+                                      \"the `#[needs_allocator]` \\\n+                                       attribute is an experimental \\\n+                                       feature\")),\n+    (\"rustc_variance\", Normal, Gated(\"rustc_attrs\",\n+                                     \"the `#[rustc_variance]` attribute \\\n                                       is an experimental feature\")),\n-    (\"allocator\", Gated(\"allocator\",\n-                        \"the `#[allocator]` attribute is an experimental feature\")),\n-    (\"needs_allocator\", Gated(\"needs_allocator\", \"the `#[needs_allocator]` \\\n-                                                  attribute is an experimental \\\n-                                                  feature\")),\n-    (\"rustc_variance\", Gated(\"rustc_attrs\",\n-                             \"the `#[rustc_variance]` attribute \\\n-                              is an experimental feature\")),\n-    (\"rustc_error\", Gated(\"rustc_attrs\",\n-                          \"the `#[rustc_error]` attribute \\\n-                           is an experimental feature\")),\n-    (\"rustc_move_fragments\", Gated(\"rustc_attrs\",\n-                                   \"the `#[rustc_move_fragments]` attribute \\\n-                                    is an experimental feature\")),\n-\n-    (\"allow_internal_unstable\", Gated(\"allow_internal_unstable\",\n-                                      EXPLAIN_ALLOW_INTERNAL_UNSTABLE)),\n-\n-    (\"fundamental\", Gated(\"fundamental\",\n-                          \"the `#[fundamental]` attribute \\\n-                           is an experimental feature\")),\n-\n-    (\"linked_from\", Gated(\"linked_from\",\n-                          \"the `#[linked_from]` attribute \\\n-                           is an experimental feature\")),\n+    (\"rustc_error\", Whitelisted, Gated(\"rustc_attrs\",\n+                                       \"the `#[rustc_error]` attribute \\\n+                                        is an experimental feature\")),\n+    (\"rustc_move_fragments\", Normal, Gated(\"rustc_attrs\",\n+                                           \"the `#[rustc_move_fragments]` attribute \\\n+                                            is an experimental feature\")),\n+\n+    (\"allow_internal_unstable\", Normal, Gated(\"allow_internal_unstable\",\n+                                              EXPLAIN_ALLOW_INTERNAL_UNSTABLE)),\n+\n+    (\"fundamental\", Whitelisted, Gated(\"fundamental\",\n+                                       \"the `#[fundamental]` attribute \\\n+                                        is an experimental feature\")),\n+\n+    (\"linked_from\", Normal, Gated(\"linked_from\",\n+                                  \"the `#[linked_from]` attribute \\\n+                                   is an experimental feature\")),\n \n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n-    (\"doc\", Whitelisted),\n+    (\"doc\", Whitelisted, Ungated),\n \n     // FIXME: #14406 these are processed in trans, which happens after the\n     // lint pass\n-    (\"cold\", Whitelisted),\n-    (\"export_name\", Whitelisted),\n-    (\"inline\", Whitelisted),\n-    (\"link\", Whitelisted),\n-    (\"link_name\", Whitelisted),\n-    (\"link_section\", Whitelisted),\n-    (\"no_builtins\", Whitelisted),\n-    (\"no_mangle\", Whitelisted),\n-    (\"no_debug\", Whitelisted),\n-    (\"omit_gdb_pretty_printer_section\", Whitelisted),\n-    (\"unsafe_no_drop_flag\", Gated(\"unsafe_no_drop_flag\",\n-                                  \"unsafe_no_drop_flag has unstable semantics \\\n-                                   and may be removed in the future\")),\n+    (\"cold\", Whitelisted, Ungated),\n+    (\"export_name\", Whitelisted, Ungated),\n+    (\"inline\", Whitelisted, Ungated),\n+    (\"link\", Whitelisted, Ungated),\n+    (\"link_name\", Whitelisted, Ungated),\n+    (\"link_section\", Whitelisted, Ungated),\n+    (\"no_builtins\", Whitelisted, Ungated),\n+    (\"no_mangle\", Whitelisted, Ungated),\n+    (\"no_debug\", Whitelisted, Ungated),\n+    (\"omit_gdb_pretty_printer_section\", Whitelisted, Ungated),\n+    (\"unsafe_no_drop_flag\", Whitelisted, Gated(\"unsafe_no_drop_flag\",\n+                                               \"unsafe_no_drop_flag has unstable semantics \\\n+                                                and may be removed in the future\")),\n \n     // used in resolve\n-    (\"prelude_import\", Gated(\"prelude_import\",\n-                             \"`#[prelude_import]` is for use by rustc only\")),\n+    (\"prelude_import\", Whitelisted, Gated(\"prelude_import\",\n+                                          \"`#[prelude_import]` is for use by rustc only\")),\n \n     // FIXME: #14407 these are only looked at on-demand so we can't\n     // guarantee they'll have already been checked\n-    (\"deprecated\", Whitelisted),\n-    (\"must_use\", Whitelisted),\n-    (\"stable\", Whitelisted),\n-    (\"unstable\", Whitelisted),\n+    (\"deprecated\", Whitelisted, Ungated),\n+    (\"must_use\", Whitelisted, Ungated),\n+    (\"stable\", Whitelisted, Ungated),\n+    (\"unstable\", Whitelisted, Ungated),\n \n-    (\"rustc_paren_sugar\", Gated(\"unboxed_closures\",\n-                                \"unboxed_closures are still evolving\")),\n-    (\"rustc_reflect_like\", Gated(\"reflect\",\n-                                 \"defining reflective traits is still evolving\")),\n+    (\"rustc_paren_sugar\", Normal, Gated(\"unboxed_closures\",\n+                                        \"unboxed_closures are still evolving\")),\n+    (\"rustc_reflect_like\", Whitelisted, Gated(\"reflect\",\n+                                              \"defining reflective traits is still evolving\")),\n \n     // Crate level attributes\n-    (\"crate_name\", CrateLevel),\n-    (\"crate_type\", CrateLevel),\n-    (\"crate_id\", CrateLevel),\n-    (\"feature\", CrateLevel),\n-    (\"no_start\", CrateLevel),\n-    (\"no_main\", CrateLevel),\n-    (\"no_builtins\", CrateLevel),\n-    (\"recursion_limit\", CrateLevel),\n+    (\"crate_name\", CrateLevel, Ungated),\n+    (\"crate_type\", CrateLevel, Ungated),\n+    (\"crate_id\", CrateLevel, Ungated),\n+    (\"feature\", CrateLevel, Ungated),\n+    (\"no_start\", CrateLevel, Ungated),\n+    (\"no_main\", CrateLevel, Ungated),\n+    (\"no_builtins\", CrateLevel, Ungated),\n+    (\"recursion_limit\", CrateLevel, Ungated),\n ];\n \n macro_rules! cfg_fn {\n@@ -398,12 +401,17 @@ pub enum AttributeType {\n     /// will be ignored by the unused_attribute lint\n     Whitelisted,\n \n+    /// Builtin attribute that is only allowed at the crate level\n+    CrateLevel,\n+}\n+\n+#[derive(PartialEq, Copy, Clone, Debug)]\n+pub enum AttributeGate {\n     /// Is gated by a given feature gate and reason\n-    /// These get whitelisted too\n     Gated(&'static str, &'static str),\n \n-    /// Builtin attribute that is only allowed at the crate level\n-    CrateLevel,\n+    /// Ungated attribute, can be used on all release channels\n+    Ungated,\n }\n \n /// A set of features to be used by later passes.\n@@ -522,12 +530,12 @@ impl<'a> Context<'a> {\n     fn check_attribute(&self, attr: &ast::Attribute, is_macro: bool) {\n         debug!(\"check_attribute(attr = {:?})\", attr);\n         let name = &*attr.name();\n-        for &(n, ty) in KNOWN_ATTRIBUTES {\n+        for &(n, ty, gateage) in KNOWN_ATTRIBUTES {\n             if n == name {\n-                if let Gated(gate, desc) = ty {\n+                if let Gated(gate, desc) = gateage {\n                     self.gate_feature(gate, attr.span, desc);\n                 }\n-                debug!(\"check_attribute: {:?} is known, {:?}\", name, ty);\n+                debug!(\"check_attribute: {:?} is known, {:?}, {:?}\", name, ty, gateage);\n                 return;\n             }\n         }"}, {"sha": "3bf09e10ae8c3ad975dc92fbb9c69f5d840e2236", "filename": "src/test/compile-fail/invalid-plugin-attr.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b571b055d8ac9c77d1337e2bda2652bfc024de9/src%2Ftest%2Fcompile-fail%2Finvalid-plugin-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b571b055d8ac9c77d1337e2bda2652bfc024de9/src%2Ftest%2Fcompile-fail%2Finvalid-plugin-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-plugin-attr.rs?ref=4b571b055d8ac9c77d1337e2bda2652bfc024de9", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unused_attributes)]\n+#![feature(plugin)]\n+\n+#[plugin(bla)]  //~ ERROR unused attribute\n+                //~^ ERROR should be an inner attribute\n+\n+fn main() {}"}]}