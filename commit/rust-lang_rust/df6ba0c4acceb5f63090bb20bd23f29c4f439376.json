{"sha": "df6ba0c4acceb5f63090bb20bd23f29c4f439376", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNmJhMGM0YWNjZWI1ZjYzMDkwYmIyMGJkMjNmMjljNGY0MzkzNzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-09T08:54:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-09T08:54:29Z"}, "message": "Auto merge of #53998 - eddyb:issue-53728, r=oli-obk\n\nrustc_codegen_llvm: don't assume offsets are always aligned.\n\nFixes #53728 by taking into account not just overall type alignment and the field's alignment when determining whether a field is aligned or not (\"packed\"), but also the field's offset within the type.\n\nPreviously, rustc assumed that the offset was always at least as aligned as `min(struct.align, field.align)`. However, there's no real reason to have that assumption, and it obviously can't always be true after we implement `#[repr(align(N), pack(K))]`. There's also a case today where that assumption is not true, involving niche discriminants in enums:\n\nSuppose that we have the code in #53728:\n```Rust\n#[repr(u16)]\nenum DeviceKind {\n    Nil = 0,\n}\n\n#[repr(packed)]\nstruct DeviceInfo {\n    endianness: u8,\n    device_kind: DeviceKind,\n}\n\nstruct Wrapper {\n    device_info: DeviceInfo,\n    data: u32\n}\n```\n\nObserve the layout of `Option<Wrapper>`. It has an alignment of 4 because of the `u32`. `device_info.device_kind` is a good niche field to use, which means the enum ends up with this layout:\n```\nsize = 8\nalign = 4\nfields = [\n    { offset=1, type=u16 } // discriminant, .<Some>.device_info.device_kind\n]\n```\n\nAnd here we have an discriminant with alignment 2 (`u16`) but offset 1.", "tree": {"sha": "d860adafcbc8edaa2d572daf3133b8690e3381d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d860adafcbc8edaa2d572daf3133b8690e3381d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df6ba0c4acceb5f63090bb20bd23f29c4f439376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df6ba0c4acceb5f63090bb20bd23f29c4f439376", "html_url": "https://github.com/rust-lang/rust/commit/df6ba0c4acceb5f63090bb20bd23f29c4f439376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df6ba0c4acceb5f63090bb20bd23f29c4f439376/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d2fc456a91e898f735f97f1a9ea79432da4e1a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2fc456a91e898f735f97f1a9ea79432da4e1a5", "html_url": "https://github.com/rust-lang/rust/commit/3d2fc456a91e898f735f97f1a9ea79432da4e1a5"}, {"sha": "b9e7574bf2d760fc011cc90890f3280c474746e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e7574bf2d760fc011cc90890f3280c474746e4", "html_url": "https://github.com/rust-lang/rust/commit/b9e7574bf2d760fc011cc90890f3280c474746e4"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "70ace15e5236f06b3cce9ab36b89d82194f11b94", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df6ba0c4acceb5f63090bb20bd23f29c4f439376/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6ba0c4acceb5f63090bb20bd23f29c4f439376/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=df6ba0c4acceb5f63090bb20bd23f29c4f439376", "patch": "@@ -173,7 +173,10 @@ impl PlaceRef<'ll, 'tcx> {\n         let cx = bx.cx;\n         let field = self.layout.field(cx, ix);\n         let offset = self.layout.fields.offset(ix);\n-        let align = self.align.min(self.layout.align).min(field.align);\n+        let effective_field_align = self.align\n+            .min(self.layout.align)\n+            .min(field.align)\n+            .restrict_for_offset(offset);\n \n         let simple = || {\n             // Unions and newtypes only use an offset of 0.\n@@ -195,7 +198,7 @@ impl PlaceRef<'ll, 'tcx> {\n                     None\n                 },\n                 layout: field,\n-                align,\n+                align: effective_field_align,\n             }\n         };\n \n@@ -268,7 +271,7 @@ impl PlaceRef<'ll, 'tcx> {\n             llval: bx.pointercast(byte_ptr, ll_fty.ptr_to()),\n             llextra: self.llextra,\n             layout: field,\n-            align,\n+            align: effective_field_align,\n         }\n     }\n "}, {"sha": "6eec0b0b68c55a1893c8e989a88bba86b47aae2e", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df6ba0c4acceb5f63090bb20bd23f29c4f439376/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6ba0c4acceb5f63090bb20bd23f29c4f439376/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=df6ba0c4acceb5f63090bb20bd23f29c4f439376", "patch": "@@ -122,33 +122,37 @@ fn struct_llfields<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     let mut packed = false;\n     let mut offset = Size::ZERO;\n-    let mut prev_align = layout.align;\n+    let mut prev_effective_align = layout.align;\n     let mut result: Vec<_> = Vec::with_capacity(1 + field_count * 2);\n     for i in layout.fields.index_by_increasing_offset() {\n-        let field = layout.field(cx, i);\n-        packed |= layout.align.abi() < field.align.abi();\n-\n         let target_offset = layout.fields.offset(i as usize);\n-        debug!(\"struct_llfields: {}: {:?} offset: {:?} target_offset: {:?}\",\n-            i, field, offset, target_offset);\n+        let field = layout.field(cx, i);\n+        let effective_field_align = layout.align\n+            .min(field.align)\n+            .restrict_for_offset(target_offset);\n+        packed |= effective_field_align.abi() < field.align.abi();\n+\n+        debug!(\"struct_llfields: {}: {:?} offset: {:?} target_offset: {:?} \\\n+                effective_field_align: {}\",\n+            i, field, offset, target_offset, effective_field_align.abi());\n         assert!(target_offset >= offset);\n         let padding = target_offset - offset;\n-        let padding_align = layout.align.min(prev_align).min(field.align);\n+        let padding_align = prev_effective_align.min(effective_field_align);\n         assert_eq!(offset.abi_align(padding_align) + padding, target_offset);\n         result.push(Type::padding_filler(cx, padding, padding_align));\n         debug!(\"    padding before: {:?}\", padding);\n \n         result.push(field.llvm_type(cx));\n         offset = target_offset + field.size;\n-        prev_align = field.align;\n+        prev_effective_align = effective_field_align;\n     }\n     if !layout.is_unsized() && field_count > 0 {\n         if offset > layout.size {\n             bug!(\"layout: {:#?} stride: {:?} offset: {:?}\",\n                  layout, layout.size, offset);\n         }\n         let padding = layout.size - offset;\n-        let padding_align = layout.align.min(prev_align);\n+        let padding_align = prev_effective_align;\n         assert_eq!(offset.abi_align(padding_align) + padding, layout.size);\n         debug!(\"struct_llfields: pad_bytes: {:?} offset: {:?} stride: {:?}\",\n                padding, offset, layout.size);"}, {"sha": "5c4cd849f89bcd681e323d5db483f2d6764a874e", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df6ba0c4acceb5f63090bb20bd23f29c4f439376/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6ba0c4acceb5f63090bb20bd23f29c4f439376/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=df6ba0c4acceb5f63090bb20bd23f29c4f439376", "patch": "@@ -416,6 +416,24 @@ impl Align {\n             pref_pow2: cmp::max(self.pref_pow2, other.pref_pow2),\n         }\n     }\n+\n+    /// Compute the best alignment possible for the given offset\n+    /// (the largest power of two that the offset is a multiple of).\n+    ///\n+    /// NB: for an offset of `0`, this happens to return `2^64`.\n+    pub fn max_for_offset(offset: Size) -> Align {\n+        let pow2 = offset.bytes().trailing_zeros() as u8;\n+        Align {\n+            abi_pow2: pow2,\n+            pref_pow2: pow2,\n+        }\n+    }\n+\n+    /// Lower the alignment, if necessary, such that the given offset\n+    /// is aligned to it (the offset is a multiple of the aligment).\n+    pub fn restrict_for_offset(self, offset: Size) -> Align {\n+        self.min(Align::max_for_offset(offset))\n+    }\n }\n \n /// Integers, also used for enum discriminants."}, {"sha": "f9cb5da29a7d0eaa8883d242cd7c5f09f09ea7ff", "filename": "src/test/run-pass/issue-53728.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df6ba0c4acceb5f63090bb20bd23f29c4f439376/src%2Ftest%2Frun-pass%2Fissue-53728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6ba0c4acceb5f63090bb20bd23f29c4f439376/src%2Ftest%2Frun-pass%2Fissue-53728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-53728.rs?ref=df6ba0c4acceb5f63090bb20bd23f29c4f439376", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(u16)]\n+enum DeviceKind {\n+    Nil = 0,\n+}\n+\n+#[repr(packed)]\n+struct DeviceInfo {\n+    endianness: u8,\n+    device_kind: DeviceKind,\n+}\n+\n+fn main() {\n+    let _x = None::<(DeviceInfo, u8)>;\n+    let _y = None::<(DeviceInfo, u16)>;\n+    let _z = None::<(DeviceInfo, u64)>;\n+}"}]}