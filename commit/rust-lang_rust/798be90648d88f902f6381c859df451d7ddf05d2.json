{"sha": "798be90648d88f902f6381c859df451d7ddf05d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OGJlOTA2NDhkODhmOTAyZjYzODFjODU5ZGY0NTFkN2RkZjA1ZDI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-08T16:26:19Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-06-09T12:16:15Z"}, "message": "introduce an `unreachable` terminator\n\nUse it instead of a `panic` for inexhaustive matches and correct the\ncomment. I think we trust our match-generation algorithm enough to\ngenerate these blocks, and not generating an `unreachable` means that\nLLVM won't optimize `match void() {}` to an `unreachable`.", "tree": {"sha": "fda00c2df3cad4944355db1a6980d57133291e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda00c2df3cad4944355db1a6980d57133291e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/798be90648d88f902f6381c859df451d7ddf05d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/798be90648d88f902f6381c859df451d7ddf05d2", "html_url": "https://github.com/rust-lang/rust/commit/798be90648d88f902f6381c859df451d7ddf05d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/798be90648d88f902f6381c859df451d7ddf05d2/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6405527ded784289b4e77d531b57e010cd5fae52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6405527ded784289b4e77d531b57e010cd5fae52", "html_url": "https://github.com/rust-lang/rust/commit/6405527ded784289b4e77d531b57e010cd5fae52"}], "stats": {"total": 129, "additions": 37, "deletions": 92}, "files": [{"sha": "03ae91fefb92586f093cad0052bf461ed6f6d32c", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -374,6 +374,9 @@ pub enum TerminatorKind<'tcx> {\n     /// have been filled in by now. This should occur at most once.\n     Return,\n \n+    /// Indicates a terminator that can never be reached.\n+    Unreachable,\n+\n     /// Drop the Lvalue\n     Drop {\n         location: Lvalue<'tcx>,\n@@ -432,6 +435,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             SwitchInt { targets: ref b, .. } => b[..].into_cow(),\n             Resume => (&[]).into_cow(),\n             Return => (&[]).into_cow(),\n+            Unreachable => (&[]).into_cow(),\n             Call { destination: Some((_, t)), cleanup: Some(c), .. } => vec![t, c].into_cow(),\n             Call { destination: Some((_, ref t)), cleanup: None, .. } =>\n                 slice::ref_slice(t).into_cow(),\n@@ -461,6 +465,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             SwitchInt { targets: ref mut b, .. } => b.iter_mut().collect(),\n             Resume => Vec::new(),\n             Return => Vec::new(),\n+            Unreachable => Vec::new(),\n             Call { destination: Some((_, ref mut t)), cleanup: Some(ref mut c), .. } => vec![t, c],\n             Call { destination: Some((_, ref mut t)), cleanup: None, .. } => vec![t],\n             Call { destination: None, cleanup: Some(ref mut c), .. } => vec![c],\n@@ -539,6 +544,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             SwitchInt { discr: ref lv, .. } => write!(fmt, \"switchInt({:?})\", lv),\n             Return => write!(fmt, \"return\"),\n             Resume => write!(fmt, \"resume\"),\n+            Unreachable => write!(fmt, \"unreachable\"),\n             Drop { ref location, .. } => write!(fmt, \"drop({:?})\", location),\n             DropAndReplace { ref location, ref value, .. } =>\n                 write!(fmt, \"replace({:?} <- {:?})\", location, value),\n@@ -582,7 +588,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn fmt_successor_labels(&self) -> Vec<Cow<'static, str>> {\n         use self::TerminatorKind::*;\n         match *self {\n-            Return | Resume => vec![],\n+            Return | Resume | Unreachable => vec![],\n             Goto { .. } => vec![\"\".into()],\n             If { .. } => vec![\"true\".into(), \"false\".into()],\n             Switch { ref adt_def, .. } => {"}, {"sha": "bc45a730c2e21c965987c2d3fb7cdea69c4f6c61", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -386,7 +386,8 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     TerminatorKind::Resume |\n-                    TerminatorKind::Return => {\n+                    TerminatorKind::Return |\n+                    TerminatorKind::Unreachable => {\n                     }\n \n                     TerminatorKind::Drop { ref $($mutability)* location,"}, {"sha": "a9b4de450967cfa0bcfebe5b82034f5105ca39df", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -449,7 +449,8 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n     {\n         match bb_data.terminator().kind {\n             repr::TerminatorKind::Return |\n-            repr::TerminatorKind::Resume => {}\n+            repr::TerminatorKind::Resume |\n+            repr::TerminatorKind::Unreachable => {}\n             repr::TerminatorKind::Goto { ref target } |\n             repr::TerminatorKind::Assert { ref target, cleanup: None, .. } |\n             repr::TerminatorKind::Drop { ref target, location: _, unwind: None } |"}, {"sha": "05412216d487c9e7153b6b2ed9c05d1928cf9c53", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -621,7 +621,9 @@ fn gather_moves<'a, 'tcx>(mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> MoveD\n \n         debug!(\"gather_moves({:?})\", bb_data.terminator());\n         match bb_data.terminator().kind {\n-            TerminatorKind::Goto { target: _ } | TerminatorKind::Resume => { }\n+            TerminatorKind::Goto { target: _ } |\n+            TerminatorKind::Resume |\n+            TerminatorKind::Unreachable => { }\n \n             TerminatorKind::Return => {\n                 let source = Location { block: bb,"}, {"sha": "c57913c8e6068f728c8009728a02b2447d2011ef", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -78,12 +78,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // branch to the appropriate arm block\n         let otherwise = self.match_candidates(span, &mut arm_blocks, candidates, block);\n \n-        // because all matches are exhaustive, in principle we expect\n-        // an empty vector to be returned here, but the algorithm is\n-        // not entirely precise\n         if !otherwise.is_empty() {\n-            let join_block = self.join_otherwise_blocks(span, otherwise);\n-            self.panic(join_block, \"something about matches algorithm not being precise\", span);\n+            // All matches are exhaustive. However, because some matches\n+            // only have exponentially-large exhaustive decision trees, we\n+            // sometimes generate an inexhaustive decision tree.\n+            //\n+            // In that case, the inexhaustive tips of the decision tree\n+            // can't be reached - terminate them with an `unreachable`.\n+            let source_info = self.source_info(span);\n+\n+            for block in otherwise {\n+                self.cfg.terminate(block, source_info, TerminatorKind::Unreachable);\n+            }\n         }\n \n         // all the arm blocks will rejoin here"}, {"sha": "9cc6b60eec0055d0cf16c06c4ff83c252ba0f18a", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 82, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -90,12 +90,9 @@ use build::{BlockAnd, BlockAndExtension, Builder, CFG, ScopeAuxiliary, ScopeId};\n use rustc::middle::region::{CodeExtent, CodeExtentData};\n use rustc::middle::lang_items;\n use rustc::ty::subst::{Substs, Subst, VecPerParamSpace};\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::repr::*;\n-use syntax::codemap::{Span, DUMMY_SP};\n-use syntax::parse::token::intern_and_get_ident;\n-use rustc::middle::const_val::ConstVal;\n-use rustc_const_math::ConstInt;\n+use syntax::codemap::Span;\n use rustc_data_structures::indexed_vec::Idx;\n \n pub struct Scope<'tcx> {\n@@ -556,50 +553,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         next_target.unit()\n     }\n \n-    /// Create diverge cleanup and branch to it from `block`.\n-    // FIXME: Remove this (used only for unreachable cases in match).\n-    pub fn panic(&mut self, block: BasicBlock, msg: &'static str, span: Span) {\n-        // fn(&(msg: &'static str filename: &'static str, line: u32)) -> !\n-        let region = ty::ReStatic; // FIXME(mir-borrowck): use a better region?\n-        let func = self.lang_function(lang_items::PanicFnLangItem);\n-        let args = self.hir.tcx().replace_late_bound_regions(&func.ty.fn_args(), |_| region).0;\n-\n-        let ref_ty = args[0];\n-        let tup_ty = if let ty::TyRef(_, tyandmut) = ref_ty.sty {\n-            tyandmut.ty\n-        } else {\n-            span_bug!(span, \"unexpected panic type: {:?}\", func.ty);\n-        };\n-\n-        let (tuple, tuple_ref) = (self.temp(tup_ty), self.temp(ref_ty));\n-        let (file, line) = self.span_to_fileline_args(span);\n-        let message = Constant {\n-            span: span,\n-            ty: self.hir.tcx().mk_static_str(),\n-            literal: self.hir.str_literal(intern_and_get_ident(msg))\n-        };\n-        let elems = vec![Operand::Constant(message),\n-                         Operand::Constant(file),\n-                         Operand::Constant(line)];\n-        let source_info = self.source_info(span);\n-        // FIXME: We should have this as a constant, rather than a stack variable (to not pollute\n-        // icache with cold branch code), however to achieve that we either have to rely on rvalue\n-        // promotion or have some way, in MIR, to create constants.\n-        self.cfg.push_assign(block, source_info, &tuple, // [1]\n-                             Rvalue::Aggregate(AggregateKind::Tuple, elems));\n-        // [1] tuple = (message_arg, file_arg, line_arg);\n-        // FIXME: is this region really correct here?\n-        self.cfg.push_assign(block, source_info, &tuple_ref, // tuple_ref = &tuple;\n-                             Rvalue::Ref(region, BorrowKind::Shared, tuple));\n-        let cleanup = self.diverge_cleanup();\n-        self.cfg.terminate(block, source_info, TerminatorKind::Call {\n-            func: Operand::Constant(func),\n-            args: vec![Operand::Consume(tuple_ref)],\n-            cleanup: cleanup,\n-            destination: None,\n-        });\n-    }\n-\n     /// Create an Assert terminator and return the success block.\n     /// If the boolean condition operand is not the expected value,\n     /// a runtime panic will be caused with the given message.\n@@ -625,39 +578,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         success_block\n     }\n-\n-    fn lang_function(&mut self, lang_item: lang_items::LangItem) -> Constant<'tcx> {\n-        let funcdid = match self.hir.tcx().lang_items.require(lang_item) {\n-            Ok(d) => d,\n-            Err(m) => {\n-                self.hir.tcx().sess.fatal(&m)\n-            }\n-        };\n-        Constant {\n-            span: DUMMY_SP,\n-            ty: self.hir.tcx().lookup_item_type(funcdid).ty,\n-            literal: Literal::Item {\n-                def_id: funcdid,\n-                substs: self.hir.tcx().mk_substs(Substs::empty())\n-            }\n-        }\n-    }\n-\n-    fn span_to_fileline_args(&mut self, span: Span) -> (Constant<'tcx>, Constant<'tcx>) {\n-        let span_lines = self.hir.tcx().sess.codemap().lookup_char_pos(span.lo);\n-        (Constant {\n-            span: span,\n-            ty: self.hir.tcx().mk_static_str(),\n-            literal: self.hir.str_literal(intern_and_get_ident(&span_lines.file.name))\n-        }, Constant {\n-            span: span,\n-            ty: self.hir.tcx().types.u32,\n-            literal: Literal::Value {\n-                value: ConstVal::Integral(ConstInt::U32(span_lines.line as u32)),\n-            },\n-        })\n-    }\n-\n }\n \n /// Builds drops for pop_scope and exit_scope."}, {"sha": "818f060ed445ccff0404d04554de1508991a515b", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -24,6 +24,7 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n             TerminatorKind::Goto { .. } |\n             TerminatorKind::Resume |\n             TerminatorKind::Return |\n+            TerminatorKind::Unreachable |\n             TerminatorKind::If { .. } |\n             TerminatorKind::Switch { .. } |\n             TerminatorKind::SwitchInt { .. } => {"}, {"sha": "5ea5949e10703b96777be8ab848e5e16365d17aa", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -362,7 +362,8 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::Switch {..} |\n                 TerminatorKind::SwitchInt {..} |\n                 TerminatorKind::DropAndReplace { .. } |\n-                TerminatorKind::Resume => None,\n+                TerminatorKind::Resume |\n+                TerminatorKind::Unreachable => None,\n \n                 TerminatorKind::Return => {\n                     // Check for unused values. This usually means"}, {"sha": "e4398fcab316326bcaf67f0517e3ae4f6651fda5", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -379,6 +379,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             TerminatorKind::Goto { .. } |\n             TerminatorKind::Resume |\n             TerminatorKind::Return |\n+            TerminatorKind::Unreachable |\n             TerminatorKind::Drop { .. } => {\n                 // no checks needed for these\n             }\n@@ -595,6 +596,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     span_mirbug!(self, block, \"return on cleanup block\")\n                 }\n             }\n+            TerminatorKind::Unreachable => {}\n             TerminatorKind::Drop { target, unwind, .. } |\n             TerminatorKind::DropAndReplace { target, unwind, .. } |\n             TerminatorKind::Assert { target, cleanup: unwind, .. } => {"}, {"sha": "d1c1053ac46b2c461e2fd089515f15f48e72ae29", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -173,6 +173,7 @@ pub fn cleanup_kinds<'bcx,'tcx>(_bcx: Block<'bcx,'tcx>,\n                 TerminatorKind::Goto { .. } |\n                 TerminatorKind::Resume |\n                 TerminatorKind::Return |\n+                TerminatorKind::Unreachable |\n                 TerminatorKind::If { .. } |\n                 TerminatorKind::Switch { .. } |\n                 TerminatorKind::SwitchInt { .. } => {"}, {"sha": "bdcf3dd8cd41884e61eb24f35ef47fe9d048ed22", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798be90648d88f902f6381c859df451d7ddf05d2/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=798be90648d88f902f6381c859df451d7ddf05d2", "patch": "@@ -191,6 +191,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 })\n             }\n \n+            mir::TerminatorKind::Unreachable => {\n+                bcx.unreachable();\n+            }\n+\n             mir::TerminatorKind::Drop { ref location, target, unwind } => {\n                 let lvalue = self.trans_lvalue(&bcx, location);\n                 let ty = lvalue.ty.to_ty(bcx.tcx());"}]}