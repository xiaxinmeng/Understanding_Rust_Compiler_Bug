{"sha": "7385467f2e4652ad32108c16e1e2642289384926", "node_id": "C_kwDOAAsO6NoAKDczODU0NjdmMmU0NjUyYWQzMjEwOGMxNmUxZTI2NDIyODkzODQ5MjY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-19T20:44:13Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-19T20:52:27Z"}, "message": "Don't respond with a ContentModified while loading the workspace", "tree": {"sha": "68e9f9060c1aeb049c124308e3ae6cd55fe9defa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68e9f9060c1aeb049c124308e3ae6cd55fe9defa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7385467f2e4652ad32108c16e1e2642289384926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7385467f2e4652ad32108c16e1e2642289384926", "html_url": "https://github.com/rust-lang/rust/commit/7385467f2e4652ad32108c16e1e2642289384926", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7385467f2e4652ad32108c16e1e2642289384926/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "384fa4b84ae881f402933e105c5c92b8b471036a", "url": "https://api.github.com/repos/rust-lang/rust/commits/384fa4b84ae881f402933e105c5c92b8b471036a", "html_url": "https://github.com/rust-lang/rust/commit/384fa4b84ae881f402933e105c5c92b8b471036a"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "fd2f934f9fe28525f7925a73a6cade9b12eeafae", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7385467f2e4652ad32108c16e1e2642289384926/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7385467f2e4652ad32108c16e1e2642289384926/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=7385467f2e4652ad32108c16e1e2642289384926", "patch": "@@ -1438,6 +1438,10 @@ impl Config {\n         try_or_def!(self.caps.workspace.as_ref()?.code_lens.as_ref()?.refresh_support?)\n     }\n \n+    pub fn inlay_hints_refresh(&self) -> bool {\n+        try_or_def!(self.caps.workspace.as_ref()?.inlay_hint.as_ref()?.refresh_support?)\n+    }\n+\n     pub fn insert_replace_support(&self) -> bool {\n         try_or_def!(\n             self.caps"}, {"sha": "33ca7810667fb06278a28d878f1e1fe1dae19bbc", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7385467f2e4652ad32108c16e1e2642289384926/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7385467f2e4652ad32108c16e1e2642289384926/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=7385467f2e4652ad32108c16e1e2642289384926", "patch": "@@ -1470,7 +1470,8 @@ pub(crate) fn handle_semantic_tokens_full(\n \n     let mut highlight_config = snap.config.highlighting_config();\n     // Avoid flashing a bunch of unresolved references when the proc-macro servers haven't been spawned yet.\n-    highlight_config.syntactic_name_ref_highlighting = !snap.proc_macros_loaded;\n+    highlight_config.syntactic_name_ref_highlighting =\n+        snap.workspaces.is_empty() || !snap.proc_macros_loaded;\n \n     let highlights = snap.analysis.highlight(highlight_config, file_id)?;\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n@@ -1493,7 +1494,8 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n \n     let mut highlight_config = snap.config.highlighting_config();\n     // Avoid flashing a bunch of unresolved references when the proc-macro servers haven't been spawned yet.\n-    highlight_config.syntactic_name_ref_highlighting = !snap.proc_macros_loaded;\n+    highlight_config.syntactic_name_ref_highlighting =\n+        snap.workspaces.is_empty() || !snap.proc_macros_loaded;\n \n     let highlights = snap.analysis.highlight(highlight_config, file_id)?;\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n@@ -1524,7 +1526,12 @@ pub(crate) fn handle_semantic_tokens_range(\n     let text = snap.analysis.file_text(frange.file_id)?;\n     let line_index = snap.file_line_index(frange.file_id)?;\n \n-    let highlights = snap.analysis.highlight_range(snap.config.highlighting_config(), frange)?;\n+    let mut highlight_config = snap.config.highlighting_config();\n+    // Avoid flashing a bunch of unresolved references when the proc-macro servers haven't been spawned yet.\n+    highlight_config.syntactic_name_ref_highlighting =\n+        snap.workspaces.is_empty() || !snap.proc_macros_loaded;\n+\n+    let highlights = snap.analysis.highlight_range(highlight_config, frange)?;\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n     Ok(Some(semantic_tokens.into()))\n }"}, {"sha": "4290b7760687e74d3d776de828f971997b074d34", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7385467f2e4652ad32108c16e1e2642289384926/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7385467f2e4652ad32108c16e1e2642289384926/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=7385467f2e4652ad32108c16e1e2642289384926", "patch": "@@ -307,6 +307,11 @@ impl GlobalState {\n                 if self.config.code_lens_refresh() {\n                     self.send_request::<lsp_types::request::CodeLensRefresh>((), |_, _| ());\n                 }\n+\n+                // Refresh inlay hints if the client supports it.\n+                if self.config.inlay_hints_refresh() {\n+                    self.send_request::<lsp_types::request::InlayHintRefreshRequest>((), |_, _| ());\n+                }\n             }\n \n             if (!was_quiescent || state_changed || memdocs_added_or_removed)\n@@ -606,25 +611,16 @@ impl GlobalState {\n             Ok(())\n         });\n \n-        if let RequestDispatcher { req: Some(req), global_state: this } = &mut dispatcher {\n-            if this.shutdown_requested {\n+        match &mut dispatcher {\n+            RequestDispatcher { req: Some(req), global_state: this } if this.shutdown_requested => {\n                 this.respond(lsp_server::Response::new_err(\n                     req.id.clone(),\n                     lsp_server::ErrorCode::InvalidRequest as i32,\n                     \"Shutdown already requested.\".to_owned(),\n                 ));\n                 return;\n             }\n-\n-            // Avoid flashing a bunch of unresolved references during initial load.\n-            if this.workspaces.is_empty() && !this.is_quiescent() {\n-                this.respond(lsp_server::Response::new_err(\n-                    req.id.clone(),\n-                    lsp_server::ErrorCode::ContentModified as i32,\n-                    \"waiting for cargo metadata or cargo check\".to_owned(),\n-                ));\n-                return;\n-            }\n+            _ => (),\n         }\n \n         dispatcher"}]}