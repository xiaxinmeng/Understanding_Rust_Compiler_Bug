{"sha": "6040c9f50aa9a66f1cd6d30a92f9483dd51feebe", "node_id": "C_kwDOAAsO6NoAKDYwNDBjOWY1MGFhOWE2NmYxY2Q2ZDMwYTkyZjk0ODNkZDUxZmVlYmU", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-12T17:57:03Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:25Z"}, "message": "Refactor store buffer search conditions", "tree": {"sha": "6dce044ac10124865e302b2e51c43919fd112380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dce044ac10124865e302b2e51c43919fd112380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6040c9f50aa9a66f1cd6d30a92f9483dd51feebe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRD0ACgkQGBtJ+fOP\nM3R4cwv+Pxu61usdPrmo16I66LLF2QWtP6gE20aewQT+BuvSXM7kexIGEnO4gus9\n2QAWUM9UWeVdCcOd66wPczwX2kis6g+//RfzEzIGGzz4K4j7rvRtzmjjUXAhNNGX\nChjZDUOSeQo2C4zaM9EcYPAwFK0pwYBtQWSQRYCEMPF16WIwjv7/wMgZnpGwVIwd\n/Dz92vuC7SBXf1koBBe8jC41f0C4wv6wfwJpVpVKG8En/QL05fafTnWi+E88azSn\nrl+YKsUDZG/UXqRISzVqi6KRJpQmlFlySmWaTYnEWAByG1k/xtUhJyPLiboeI8GJ\no+UC5TinrVGgnBd0uZuZqA6yx76+XJz9N8DjyTN6GLDmvzKNoNAWlsO0BqD0Djvr\n7krlgUX+LhbYJeVj2GioUqyhV8VP+wePTEgHGElMHZ4H6TxFhvQ7Mn+rsomXQKBx\nh8k/IYzrgKner7mG8tQcupLcmv0ZDgsolBJtb/5FuKNpUzMX1eWnAk5K0bxBMXfi\nkZieLpLj\n=wx3c\n-----END PGP SIGNATURE-----", "payload": "tree 6dce044ac10124865e302b2e51c43919fd112380\nparent 7d874db213cdb17f20c4960e314bcce328d2b61c\nauthor Andy Wang <cbeuw.andy@gmail.com> 1652378223 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539325 +0100\n\nRefactor store buffer search conditions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6040c9f50aa9a66f1cd6d30a92f9483dd51feebe", "html_url": "https://github.com/rust-lang/rust/commit/6040c9f50aa9a66f1cd6d30a92f9483dd51feebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6040c9f50aa9a66f1cd6d30a92f9483dd51feebe/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d874db213cdb17f20c4960e314bcce328d2b61c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d874db213cdb17f20c4960e314bcce328d2b61c", "html_url": "https://github.com/rust-lang/rust/commit/7d874db213cdb17f20c4960e314bcce328d2b61c"}], "stats": {"total": 72, "additions": 30, "deletions": 42}, "files": [{"sha": "223567d3cae16141235d93a541d10abf5796de51", "filename": "src/weak_memory.rs", "status": "modified", "additions": 30, "deletions": 42, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6040c9f50aa9a66f1cd6d30a92f9483dd51feebe/src%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6040c9f50aa9a66f1cd6d30a92f9483dd51feebe/src%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fweak_memory.rs?ref=6040c9f50aa9a66f1cd6d30a92f9483dd51feebe", "patch": "@@ -252,59 +252,47 @@ impl<'mir, 'tcx: 'mir> StoreBuffer {\n                 if !keep_searching {\n                     return false;\n                 }\n-                // CoWR: if a store happens-before the current load,\n-                // then we can't read-from anything earlier in modification order.\n-                if store_elem.timestamp <= clocks.clock[store_elem.store_index] {\n-                    log::info!(\"Stopped due to coherent write-read\");\n-                    keep_searching = false;\n-                    return true;\n-                }\n \n-                // CoRR: if there was a load from this store which happened-before the current load,\n-                // then we cannot read-from anything earlier in modification order.\n-                if store_elem.loads.borrow().iter().any(|(&load_index, &load_timestamp)| {\n+                keep_searching = if store_elem.timestamp <= clocks.clock[store_elem.store_index] {\n+                    // CoWR: if a store happens-before the current load,\n+                    // then we can't read-from anything earlier in modification order.\n+                    log::info!(\"Stopping due to coherent write-read\");\n+                    false\n+                } else if store_elem.loads.borrow().iter().any(|(&load_index, &load_timestamp)| {\n                     load_timestamp <= clocks.clock[load_index]\n                 }) {\n-                    log::info!(\"Stopped due to coherent read-read\");\n-                    keep_searching = false;\n-                    return true;\n-                }\n-\n-                // The current load, which may be sequenced-after an SC fence, can only read-from\n-                // the last store sequenced-before an SC fence in another thread (or any stores\n-                // later than that SC fence)\n-                if store_elem.timestamp <= clocks.fence_seqcst[store_elem.store_index] {\n-                    log::info!(\"Stopped due to coherent load sequenced after sc fence\");\n-                    keep_searching = false;\n-                    return true;\n-                }\n-\n-                // The current non-SC load can only read-from the latest SC store (or any stores later than that\n-                // SC store)\n-                if store_elem.timestamp <= clocks.write_seqcst[store_elem.store_index]\n+                    // CoRR: if there was a load from this store which happened-before the current load,\n+                    // then we cannot read-from anything earlier in modification order.\n+                    log::info!(\"Stopping due to coherent read-read\");\n+                    false\n+                } else if store_elem.timestamp <= clocks.fence_seqcst[store_elem.store_index] {\n+                    // The current load, which may be sequenced-after an SC fence, can only read-from\n+                    // the last store sequenced-before an SC fence in another thread (or any stores\n+                    // later than that SC fence)\n+                    log::info!(\"Stopping due to coherent load sequenced after sc fence\");\n+                    false\n+                } else if store_elem.timestamp <= clocks.write_seqcst[store_elem.store_index]\n                     && store_elem.is_seqcst\n                 {\n-                    log::info!(\"Stopped due to needing to load from the last SC store\");\n-                    keep_searching = false;\n-                    return true;\n-                }\n-\n-                // The current SC load can only read-from the last store sequenced-before\n-                // the last SC fence (or any stores later than the SC fence)\n-                if is_seqcst && store_elem.timestamp <= clocks.read_seqcst[store_elem.store_index] {\n-                    log::info!(\"Stopped due to sc load needing to load from the last SC store before an SC fence\");\n-                    keep_searching = false;\n-                    return true;\n-                }\n+                    // The current non-SC load can only read-from the latest SC store (or any stores later than that\n+                    // SC store)\n+                    log::info!(\"Stopping due to needing to load from the last SC store\");\n+                    false\n+                } else if is_seqcst && store_elem.timestamp <= clocks.read_seqcst[store_elem.store_index] {\n+                    // The current SC load can only read-from the last store sequenced-before\n+                    // the last SC fence (or any stores later than the SC fence)\n+                    log::info!(\"Stopping due to sc load needing to load from the last SC store before an SC fence\");\n+                    false\n+                } else {true};\n \n                 true\n             })\n             .filter(|&store_elem| {\n-                if is_seqcst {\n+                if is_seqcst && store_elem.is_seqcst {\n                     // An SC load needs to ignore all but last store maked SC (stores not marked SC are not\n                     // affected)\n-                    let include = !(store_elem.is_seqcst && found_sc);\n-                    found_sc |= store_elem.is_seqcst;\n+                    let include = !found_sc;\n+                    found_sc = true;\n                     include\n                 } else {\n                     true"}]}