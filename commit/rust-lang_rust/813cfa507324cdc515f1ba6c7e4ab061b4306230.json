{"sha": "813cfa507324cdc515f1ba6c7e4ab061b4306230", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxM2NmYTUwNzMyNGNkYzUxNWYxYmE2YzdlNGFiMDYxYjQzMDYyMzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-09T16:50:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-09T16:50:08Z"}, "message": "Revert \"msvc: Enable landing pads by default\"\n\nThis reverts commit f9de964ccf767498ed7b1b4a879aaca1777a9d3d.\n\nConflicts:\n\tsrc/librustc_trans/trans/base.rs", "tree": {"sha": "17c8f16493cdfa59a3843339fc7100e42fa5a698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c8f16493cdfa59a3843339fc7100e42fa5a698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/813cfa507324cdc515f1ba6c7e4ab061b4306230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/813cfa507324cdc515f1ba6c7e4ab061b4306230", "html_url": "https://github.com/rust-lang/rust/commit/813cfa507324cdc515f1ba6c7e4ab061b4306230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/813cfa507324cdc515f1ba6c7e4ab061b4306230/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b9277b1364b130aed260ac219c1fe58eb02df2", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b9277b1364b130aed260ac219c1fe58eb02df2", "html_url": "https://github.com/rust-lang/rust/commit/66b9277b1364b130aed260ac219c1fe58eb02df2"}], "stats": {"total": 39, "additions": 8, "deletions": 31}, "files": [{"sha": "edb61b0d3cf384cfb8aaf882a05e452c8e65c290", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/813cfa507324cdc515f1ba6c7e4ab061b4306230/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813cfa507324cdc515f1ba6c7e4ab061b4306230/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=813cfa507324cdc515f1ba6c7e4ab061b4306230", "patch": "@@ -753,15 +753,13 @@ pub fn invoke<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n }\n \n pub fn need_invoke(bcx: Block) -> bool {\n-    if bcx.sess().no_landing_pads() {\n-        return false\n-    }\n-\n-    // Currently 32-bit MSVC unwinding is not super well implemented in LLVM, so\n-    // we avoid it entirely.\n-    if bcx.sess().target.target.options.is_like_msvc &&\n-       bcx.sess().target.target.arch == \"x86\" {\n-        return false\n+    // FIXME(#25869) currently unwinding is not implemented for MSVC and our\n+    //               normal unwinding infrastructure ends up just causing linker\n+    //               errors with the current LLVM implementation, so landing\n+    //               pads are disabled entirely for MSVC targets\n+    if bcx.sess().no_landing_pads() ||\n+       bcx.sess().target.target.options.is_like_msvc {\n+        return false;\n     }\n \n     // Avoid using invoke if we are already inside a landing pad."}, {"sha": "e530eb0de59b8e7b9ed9cdbc6f6c08033be85d89", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/813cfa507324cdc515f1ba6c7e4ab061b4306230/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813cfa507324cdc515f1ba6c7e4ab061b4306230/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=813cfa507324cdc515f1ba6c7e4ab061b4306230", "patch": "@@ -22,9 +22,8 @@ use middle::lang_items::ExchangeFreeFnLangItem;\n use middle::subst;\n use middle::subst::{Subst, Substs};\n use middle::ty::{self, Ty};\n-use trans::adt::GetDtorType; // for tcx.dtor_type()\n use trans::adt;\n-use trans::attributes;\n+use trans::adt::GetDtorType; // for tcx.dtor_type()\n use trans::base::*;\n use trans::build::*;\n use trans::callee;\n@@ -44,7 +43,6 @@ use trans::type_::Type;\n use arena::TypedArena;\n use libc::c_uint;\n use syntax::ast;\n-use syntax::attr::InlineAttr;\n \n pub fn trans_exchange_free_dyn<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                            v: ValueRef,\n@@ -252,25 +250,6 @@ fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     update_linkage(ccx, llfn, None, OriginalTranslation);\n \n-    // FIXME: Currently LLVM has a bug where if an SSA value is created in one\n-    //        landing pad and then used in another it will abort during\n-    //        compilation. The compiler never actually generates nested landing\n-    //        pads, but this often arises when destructors are inlined into\n-    //        other functions. To prevent this inlining from happening (and thus\n-    //        preventing the LLVM abort) we mark all drop glue as inline(never)\n-    //        on MSVC.\n-    //\n-    //        For more information about the bug, see:\n-    //\n-    //            https://llvm.org/bugs/show_bug.cgi?id=23884\n-    //\n-    //        This is clearly not the ideal solution to the problem (due to the\n-    //        perf hits), so this should be removed once the upstream bug is\n-    //        fixed.\n-    if ccx.sess().target.target.options.is_like_msvc {\n-        attributes::inline(llfn, InlineAttr::Never);\n-    }\n-\n     ccx.stats().n_glues_created.set(ccx.stats().n_glues_created.get() + 1);\n     // All glue functions take values passed *by alias*; this is a\n     // requirement since in many contexts glue is invoked indirectly and"}]}