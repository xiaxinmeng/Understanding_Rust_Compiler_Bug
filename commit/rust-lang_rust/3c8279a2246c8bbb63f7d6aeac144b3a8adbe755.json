{"sha": "3c8279a2246c8bbb63f7d6aeac144b3a8adbe755", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjODI3OWEyMjQ2YzhiYmI2M2Y3ZDZhZWFjMTQ0YjNhOGFkYmU3NTU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-12T09:34:23Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-12T09:45:02Z"}, "message": "Update docs to reflect review feedback.", "tree": {"sha": "23bfa38d40884f0d12f10493cd4c506d458aeaee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23bfa38d40884f0d12f10493cd4c506d458aeaee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c8279a2246c8bbb63f7d6aeac144b3a8adbe755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c8279a2246c8bbb63f7d6aeac144b3a8adbe755", "html_url": "https://github.com/rust-lang/rust/commit/3c8279a2246c8bbb63f7d6aeac144b3a8adbe755", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c8279a2246c8bbb63f7d6aeac144b3a8adbe755/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b8af5d607b465f11615abefb5bbae20486887e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b8af5d607b465f11615abefb5bbae20486887e", "html_url": "https://github.com/rust-lang/rust/commit/e4b8af5d607b465f11615abefb5bbae20486887e"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "635845a65c2af6be8118c1d5cda92e78192459d6", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3c8279a2246c8bbb63f7d6aeac144b3a8adbe755/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8279a2246c8bbb63f7d6aeac144b3a8adbe755/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=3c8279a2246c8bbb63f7d6aeac144b3a8adbe755", "patch": "@@ -270,6 +270,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the deeply last field of nested structures, or the same type if\n     /// not a structure at all. Corresponds to the only possible unsized field,\n     /// and its type can be used to determine unsizing strategy.\n+    ///\n+    /// Should only be called if `ty` has no inference variables and does not\n+    /// need its lifetimes preserved (e.g. as part of codegen); otherwise\n+    /// normalization attempt may cause compiler bugs.\n     pub fn struct_tail_erasing_lifetimes(self,\n                                          ty: Ty<'tcx>,\n                                          param_env: ty::ParamEnv<'tcx>)\n@@ -287,8 +291,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// handle `<T as Trait>::Assoc` and `impl Trait`); pass the identity\n     /// function to indicate no normalization should take place.\n     ///\n-    /// See also `struct_tail_erasing_lifetimes`, which is what callers running\n-    /// after type checking should use.\n+    /// See also `struct_tail_erasing_lifetimes`, which is suitable for use\n+    /// during codegen.\n     pub fn struct_tail_with_normalize(self,\n                                       mut ty: Ty<'tcx>,\n                                       normalize: impl Fn(Ty<'tcx>) -> Ty<'tcx>)\n@@ -337,7 +341,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// For `(Foo<Foo<T>>, Foo<dyn Trait>)`, the result will be `(Foo<T>, Trait)`,\n     /// whereas struct_tail produces `T`, and `Trait`, respectively.\n     ///\n-    /// Must only be called after type-checking is complete; otherwise\n+    /// Should only be called if the types have no inference variables and do\n+    /// not need their lifetimes preserved (e.g. as part of codegen); otherwise\n     /// normalization attempt may cause compiler bugs.\n     pub fn struct_lockstep_tails_erasing_lifetimes(self,\n                                                    source: Ty<'tcx>,\n@@ -356,8 +361,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// For `(Foo<Foo<T>>, Foo<dyn Trait>)`, the result will be `(Foo<T>, Trait)`,\n     /// whereas struct_tail produces `T`, and `Trait`, respectively.\n     ///\n-    /// See also struct_lockstep_tails_erasing_lifetimes, which\n-    /// is what callers running after type checking should use.\n+    /// See also `struct_lockstep_tails_erasing_lifetimes`, which is suitable for use\n+    /// during codegen.\n     pub fn struct_lockstep_tails_with_normalize(self,\n                                                 source: Ty<'tcx>,\n                                                 target: Ty<'tcx>,"}]}