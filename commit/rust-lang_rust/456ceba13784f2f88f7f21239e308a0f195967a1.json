{"sha": "456ceba13784f2f88f7f21239e308a0f195967a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NmNlYmExMzc4NGYyZjg4ZjdmMjEyMzllMzA4YTBmMTk1OTY3YTE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-11-16T22:33:23Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-11-16T23:38:32Z"}, "message": "fix `extern \"aapcs\" fn`\n\nto actually use the AAPCS calling convention\n\ncloses #37810\n\nThis is technically a [breaking-change] because it changes the ABI of\n`extern \"aapcs\"` functions that (a) involve `f32`/`f64` arguments/return\nvalues and (b) are compiled for arm-eabihf targets from\n\"aapcs-vfp\" (wrong) to \"aapcs\" (correct).\n\nAppendix:\n\nWhat these ABIs mean?\n\n- In the \"aapcs-vfp\" ABI or \"hard float\" calling convention: Floating\npoint values are passed/returned through FPU registers (s0, s1, d0, etc.)\n\n- Whereas, in the \"aapcs\" ABI or \"soft float\" calling convention:\nFloating point values are passed/returned through general purpose\nregisters (r0, r1, etc.)\n\nMixing these ABIs can cause problems if the caller assumes that the\nroutine is using one of these ABIs but it's actually using the other\none.", "tree": {"sha": "ad2048d80fcb67035927c5168c199a3c979004c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad2048d80fcb67035927c5168c199a3c979004c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/456ceba13784f2f88f7f21239e308a0f195967a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/456ceba13784f2f88f7f21239e308a0f195967a1", "html_url": "https://github.com/rust-lang/rust/commit/456ceba13784f2f88f7f21239e308a0f195967a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/456ceba13784f2f88f7f21239e308a0f195967a1/comments", "author": null, "committer": null, "parents": [{"sha": "9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "html_url": "https://github.com/rust-lang/rust/commit/9d4b6fa51d86ad6141679a5a157fcd9bca48064c"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "2173adf2e6e2d129e1df47f42cde20e2a437d7a1", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/456ceba13784f2f88f7f21239e308a0f195967a1/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456ceba13784f2f88f7f21239e308a0f195967a1/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=456ceba13784f2f88f7f21239e308a0f195967a1", "patch": "@@ -41,6 +41,7 @@ pub enum CallConv {\n     ColdCallConv = 9,\n     X86StdcallCallConv = 64,\n     X86FastcallCallConv = 65,\n+    ArmAapcsCallConv = 67,\n     X86_64_SysV = 78,\n     X86_64_Win64 = 79,\n     X86_VectorCall = 80,"}, {"sha": "cb06fac2c674e22ca4c21c0f6007c2bb00398e51", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/456ceba13784f2f88f7f21239e308a0f195967a1/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456ceba13784f2f88f7f21239e308a0f195967a1/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=456ceba13784f2f88f7f21239e308a0f195967a1", "patch": "@@ -274,10 +274,10 @@ impl FnType {\n             C => llvm::CCallConv,\n             Win64 => llvm::X86_64_Win64,\n             SysV64 => llvm::X86_64_SysV,\n+            Aapcs => llvm::ArmAapcsCallConv,\n \n             // These API constants ought to be more specific...\n             Cdecl => llvm::CCallConv,\n-            Aapcs => llvm::CCallConv,\n         };\n \n         let mut inputs = &sig.inputs[..];"}]}