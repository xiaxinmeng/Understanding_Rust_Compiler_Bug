{"sha": "b29d106b7ca57214f30bef0ab49bb7c3399230fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOWQxMDZiN2NhNTcyMTRmMzBiZWYwYWI0OWJiN2MzMzk5MjMwZmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-18T14:07:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T18:31:28Z"}, "message": "rustllvm: Don't require null terminators in files\n\nApparently the default getFile implementation for a memory buffer in LLVM ends\nup requiring a null terminator at the end of the file. This isn't true a good\nbit of the time apparently on OSX. There have been a number of failed\nnightly/snapshot builds recently with this strange assertion.\n\nThis modifies the calls to MemoryBuffer::getFile to explicitly not ask for a\nnull terminator.", "tree": {"sha": "40f3df1d2bd0f9ec5b0e49d10a1995202b853041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f3df1d2bd0f9ec5b0e49d10a1995202b853041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29d106b7ca57214f30bef0ab49bb7c3399230fe", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29d106b7ca57214f30bef0ab49bb7c3399230fe", "html_url": "https://github.com/rust-lang/rust/commit/b29d106b7ca57214f30bef0ab49bb7c3399230fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29d106b7ca57214f30bef0ab49bb7c3399230fe/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4461f03a36a7a2d0ce2d6e3b50c92a7d75ccb40d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4461f03a36a7a2d0ce2d6e3b50c92a7d75ccb40d", "html_url": "https://github.com/rust-lang/rust/commit/4461f03a36a7a2d0ce2d6e3b50c92a7d75ccb40d"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "e28a78b1ee729194ee2209aea562db5e3d3ea9a2", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b29d106b7ca57214f30bef0ab49bb7c3399230fe/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b29d106b7ca57214f30bef0ab49bb7c3399230fe/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=b29d106b7ca57214f30bef0ab49bb7c3399230fe", "patch": "@@ -31,16 +31,30 @@ using namespace llvm::object;\n \n static char *LastError;\n \n+#if LLVM_VERSION_MINOR >= 5\n+extern \"C\" LLVMMemoryBufferRef\n+LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n+  ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(Path,\n+                                                                        -1,\n+                                                                        false);\n+  if (!buf_or) {\n+      LLVMRustSetLastError(buf_or.getError().message().c_str());\n+      return nullptr;\n+  }\n+  return wrap(buf_or.get().release());\n+}\n+#else\n extern \"C\" LLVMMemoryBufferRef\n LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n-  LLVMMemoryBufferRef MemBuf = NULL;\n-  char *err = NULL;\n-  LLVMCreateMemoryBufferWithContentsOfFile(Path, &MemBuf, &err);\n-  if (err != NULL) {\n-    LLVMRustSetLastError(err);\n+  OwningPtr<MemoryBuffer> buf;\n+  error_code err = MemoryBuffer::getFile(Path, buf, -1, false);\n+  if (err) {\n+      LLVMRustSetLastError(err.message().c_str());\n+      return NULL;\n   }\n-  return MemBuf;\n+  return wrap(buf.take());\n }\n+#endif\n \n extern \"C\" char *LLVMRustGetLastError(void) {\n   char *ret = LastError;\n@@ -658,10 +672,12 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n #if LLVM_VERSION_MINOR >= 5\n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n-    ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(path);\n+    ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(path,\n+                                                                          -1,\n+                                                                          false);\n     if (!buf_or) {\n         LLVMRustSetLastError(buf_or.getError().message().c_str());\n-        return NULL;\n+        return nullptr;\n     }\n \n     std::error_code err;\n@@ -676,7 +692,7 @@ LLVMRustOpenArchive(char *path) {\n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n     OwningPtr<MemoryBuffer> buf;\n-    error_code err = MemoryBuffer::getFile(path, buf);\n+    error_code err = MemoryBuffer::getFile(path, buf, -1, false);\n     if (err) {\n         LLVMRustSetLastError(err.message().c_str());\n         return NULL;"}]}