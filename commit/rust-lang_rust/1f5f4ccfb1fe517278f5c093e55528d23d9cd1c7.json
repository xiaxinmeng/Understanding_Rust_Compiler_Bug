{"sha": "1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7", "node_id": "C_kwDOAAsO6NoAKDFmNWY0Y2NmYjFmZTUxNzI3OGY1YzA5M2U1NTUyOGQyM2Q5Y2QxYzc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-23T15:05:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-23T15:05:22Z"}, "message": "Merge #11539\n\n11539: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1b29f1aa685f6628152867f18346fcbdcf86ded6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b29f1aa685f6628152867f18346fcbdcf86ded6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiFk0zCRBK7hj4Ov3rIwAAWIEIABqC9n2o4rjay5Yl7fcAfznT\nQ/ydxfvzzRfgsZH0D1UfDwEDzCvd3XDKWzsTX5iD8c5XBacVPJZjOVmhp92UkIRV\nSbZ4m+3A516+AGYjyEFIbIrI3l/JfosYbDhbBYmYgkHlGDjoLjVA0F+aZAf8HVaD\nC/qrPJAlDUJBxfVMiZVHXUdpLFOcuZAU/CWN6h0bib/i7+tW4DDtZWXhHnMUSvtO\nTmumi1+hl+WrdSP1y9hjceUVpknp6lv7f3P83CD7GpED/knRm7826Iept37Z5MVv\n92ZBXtmuSmoDetnISkXSLfIb/tfccNzdx+F5+mVT4UI+4q3hoggyjcfnmVoc5gU=\n=KOQC\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b29f1aa685f6628152867f18346fcbdcf86ded6\nparent 789f2b9cb648c94368bead534c676a8dbfc8ba04\nparent ffeec9dec9a70fc2b7342b20eabe5b5da23f3f00\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645628722 +0000\ncommitter GitHub <noreply@github.com> 1645628722 +0000\n\nMerge #11539\n\n11539: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7", "html_url": "https://github.com/rust-lang/rust/commit/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789f2b9cb648c94368bead534c676a8dbfc8ba04", "url": "https://api.github.com/repos/rust-lang/rust/commits/789f2b9cb648c94368bead534c676a8dbfc8ba04", "html_url": "https://github.com/rust-lang/rust/commit/789f2b9cb648c94368bead534c676a8dbfc8ba04"}, {"sha": "ffeec9dec9a70fc2b7342b20eabe5b5da23f3f00", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffeec9dec9a70fc2b7342b20eabe5b5da23f3f00", "html_url": "https://github.com/rust-lang/rust/commit/ffeec9dec9a70fc2b7342b20eabe5b5da23f3f00"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "9176c90ae9c0fd955d655d7f3a24413106fc344a", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7", "patch": "@@ -1701,8 +1701,9 @@ impl ModCollector<'_, '_> {\n                 {\n                     Ok((file_id, is_mod_rs, mod_dir)) => {\n                         let item_tree = db.file_item_tree(file_id.into());\n+                        let krate = self.def_collector.def_map.krate;\n                         let is_enabled = item_tree\n-                            .top_level_attrs(db, self.def_collector.def_map.krate)\n+                            .top_level_attrs(db, krate)\n                             .cfg()\n                             .map_or(true, |cfg| self.is_cfg_enabled(&cfg));\n                         if is_enabled {\n@@ -1713,7 +1714,7 @@ impl ModCollector<'_, '_> {\n                                 &self.item_tree[module.visibility],\n                             );\n                             ModCollector {\n-                                def_collector: &mut *self.def_collector,\n+                                def_collector: self.def_collector,\n                                 macro_depth: self.macro_depth,\n                                 module_id,\n                                 tree_id: TreeId::new(file_id.into(), None),\n@@ -1723,7 +1724,7 @@ impl ModCollector<'_, '_> {\n                             .collect_in_top_module(item_tree.top_level_items());\n                             let is_macro_use = is_macro_use\n                                 || item_tree\n-                                    .top_level_attrs(db, self.def_collector.def_map.krate)\n+                                    .top_level_attrs(db, krate)\n                                     .by_key(\"macro_use\")\n                                     .exists();\n                             if is_macro_use {\n@@ -1748,12 +1749,11 @@ impl ModCollector<'_, '_> {\n         definition: Option<(FileId, bool)>,\n         visibility: &crate::visibility::RawVisibility,\n     ) -> LocalModuleId {\n-        let vis = self\n-            .def_collector\n-            .def_map\n+        let def_map = &mut self.def_collector.def_map;\n+        let vis = def_map\n             .resolve_visibility(self.def_collector.db, self.module_id, visibility)\n             .unwrap_or(Visibility::Public);\n-        let modules = &mut self.def_collector.def_map.modules;\n+        let modules = &mut def_map.modules;\n         let origin = match definition {\n             None => ModuleOrigin::Inline { definition: declaration },\n             Some((definition, is_mod_rs)) => {\n@@ -1768,10 +1768,10 @@ impl ModCollector<'_, '_> {\n         }\n         modules[self.module_id].children.insert(name.clone(), res);\n \n-        let module = self.def_collector.def_map.module_id(res);\n+        let module = def_map.module_id(res);\n         let def = ModuleDefId::from(module);\n \n-        self.def_collector.def_map.modules[self.module_id].scope.declare(def);\n+        def_map.modules[self.module_id].scope.declare(def);\n         self.def_collector.update(\n             self.module_id,\n             &[(Some(name), PerNs::from_def(def, vis, false))],"}, {"sha": "f76034a3e221d875a16334da183ff5418fd4126a", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7", "patch": "@@ -1,6 +1,6 @@\n //! Defines hir-level representation of visibility (e.g. `pub` and `pub(crate)`).\n \n-use std::sync::Arc;\n+use std::{iter, sync::Arc};\n \n use hir_expand::{hygiene::Hygiene, InFile};\n use la_arena::ArenaMap;\n@@ -25,7 +25,7 @@ pub enum RawVisibility {\n }\n \n impl RawVisibility {\n-    pub(crate) fn private() -> RawVisibility {\n+    pub(crate) const fn private() -> RawVisibility {\n         RawVisibility::Module(ModPath::from_kind(PathKind::Super(0)))\n     }\n \n@@ -113,10 +113,7 @@ impl Visibility {\n     }\n \n     pub(crate) fn is_visible_from_other_crate(self) -> bool {\n-        match self {\n-            Visibility::Module(_) => false,\n-            Visibility::Public => true,\n-        }\n+        matches!(self, Visibility::Public)\n     }\n \n     pub(crate) fn is_visible_from_def_map(\n@@ -145,10 +142,7 @@ impl Visibility {\n                 arc = to_module.def_map(db);\n                 &arc\n             };\n-        let is_block_root = match to_module.block {\n-            Some(_) => to_module_def_map[to_module.local_id].parent.is_none(),\n-            None => false,\n-        };\n+        let is_block_root = matches!(to_module.block, Some(_) if to_module_def_map[to_module.local_id].parent.is_none());\n         if is_block_root {\n             to_module = to_module_def_map.containing_module(to_module.local_id).unwrap();\n         }\n@@ -161,20 +155,16 @@ impl Visibility {\n                 return true;\n             }\n             match def_map[from_module].parent {\n-                Some(parent) => {\n-                    from_module = parent;\n-                }\n+                Some(parent) => from_module = parent,\n                 None => {\n                     match def_map.parent() {\n                         Some(module) => {\n                             parent_arc = module.def_map(db);\n                             def_map = &*parent_arc;\n                             from_module = module.local_id;\n                         }\n-                        None => {\n-                            // Reached the root module, nothing left to check.\n-                            return false;\n-                        }\n+                        // Reached the root module, nothing left to check.\n+                        None => return false,\n                     }\n                 }\n             }\n@@ -194,12 +184,12 @@ impl Visibility {\n                     return None;\n                 }\n \n-                let mut a_ancestors = std::iter::successors(Some(mod_a.local_id), |m| {\n-                    let parent_id = def_map[*m].parent?;\n+                let mut a_ancestors = iter::successors(Some(mod_a.local_id), |&m| {\n+                    let parent_id = def_map[m].parent?;\n                     Some(parent_id)\n                 });\n-                let mut b_ancestors = std::iter::successors(Some(mod_b.local_id), |m| {\n-                    let parent_id = def_map[*m].parent?;\n+                let mut b_ancestors = iter::successors(Some(mod_b.local_id), |&m| {\n+                    let parent_id = def_map[m].parent?;\n                     Some(parent_id)\n                 });\n "}]}