{"sha": "ebdee366b0e16d1d019db2f5c22a730b4451194f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZGVlMzY2YjBlMTZkMWQwMTlkYjJmNWMyMmE3MzBiNDQ1MTE5NGY=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-06T21:13:55Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-06T21:13:55Z"}, "message": "Clippy perf warnings\n\nRemoves redundant clones", "tree": {"sha": "b7a052c076ecf5c7a21824693da85b8f3bc970d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a052c076ecf5c7a21824693da85b8f3bc970d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebdee366b0e16d1d019db2f5c22a730b4451194f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebdee366b0e16d1d019db2f5c22a730b4451194f", "html_url": "https://github.com/rust-lang/rust/commit/ebdee366b0e16d1d019db2f5c22a730b4451194f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebdee366b0e16d1d019db2f5c22a730b4451194f/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bc2f25de6297c75f7b7f029df224b650ef3143", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bc2f25de6297c75f7b7f029df224b650ef3143", "html_url": "https://github.com/rust-lang/rust/commit/d4bc2f25de6297c75f7b7f029df224b650ef3143"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "ac68c5661edcb397ad6e1c8160b9ec101f6de4d5", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=ebdee366b0e16d1d019db2f5c22a730b4451194f", "patch": "@@ -369,7 +369,7 @@ impl HirDisplay for ApplicationTy {\n                         let data = (*datas)\n                             .as_ref()\n                             .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                        data.clone().subst(&self.parameters)\n+                        data.subst(&self.parameters)\n                     }\n                 };\n                 write!(f, \"impl \")?;\n@@ -456,7 +456,7 @@ impl HirDisplay for Ty {\n                         let data = (*datas)\n                             .as_ref()\n                             .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                        data.clone().subst(&opaque_ty.parameters)\n+                        data.subst(&opaque_ty.parameters)\n                     }\n                 };\n                 write!(f, \"impl \")?;"}, {"sha": "06baac2a9b86fb09b0e300a2b59d28beca283b52", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=ebdee366b0e16d1d019db2f5c22a730b4451194f", "patch": "@@ -85,10 +85,8 @@ impl<'a> InferenceContext<'a> {\n             ctor: TypeCtor::Tuple { cardinality: num_args as u16 },\n             parameters,\n         });\n-        let substs = Substs::build_for_generics(&generic_params)\n-            .push(ty.clone())\n-            .push(arg_ty.clone())\n-            .build();\n+        let substs =\n+            Substs::build_for_generics(&generic_params).push(ty.clone()).push(arg_ty).build();\n \n         let trait_env = Arc::clone(&self.trait_env);\n         let implements_fn_trait ="}, {"sha": "c12bed4af339aa7cf7c774bcd7c821ab1f5d7f97", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=ebdee366b0e16d1d019db2f5c22a730b4451194f", "patch": "@@ -891,7 +891,7 @@ impl Ty {\n                             let data = (*it)\n                                 .as_ref()\n                                 .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                            data.clone().subst(&opaque_ty.parameters)\n+                            data.subst(&opaque_ty.parameters)\n                         })\n                     }\n                 };"}, {"sha": "01af3187b80e10b3b627bcd9ccf4e4a4b77bbb00", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=ebdee366b0e16d1d019db2f5c22a730b4451194f", "patch": "@@ -720,8 +720,7 @@ fn assoc_type_bindings_from_type_bound<'a>(\n                 None => return SmallVec::<[GenericPredicate; 1]>::new(),\n                 Some(t) => t,\n             };\n-            let projection_ty =\n-                ProjectionTy { associated_ty, parameters: super_trait_ref.substs.clone() };\n+            let projection_ty = ProjectionTy { associated_ty, parameters: super_trait_ref.substs };\n             let mut preds = SmallVec::with_capacity(\n                 binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),\n             );"}, {"sha": "940c30c7fb9646ef1534dcc5c533d523385ec8da", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=ebdee366b0e16d1d019db2f5c22a730b4451194f", "patch": "@@ -299,12 +299,8 @@ impl ast::UseTree {\n             Some(it) => it,\n             None => return self.clone(),\n         };\n-        let use_tree = make::use_tree(\n-            suffix.clone(),\n-            self.use_tree_list(),\n-            self.alias(),\n-            self.star_token().is_some(),\n-        );\n+        let use_tree =\n+            make::use_tree(suffix, self.use_tree_list(), self.alias(), self.star_token().is_some());\n         let nested = make::use_tree_list(iter::once(use_tree));\n         return make::use_tree(prefix.clone(), Some(nested), None, false);\n "}, {"sha": "ed764046b602cefda6e83b2df172dc8e5a91fede", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdee366b0e16d1d019db2f5c22a730b4451194f/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=ebdee366b0e16d1d019db2f5c22a730b4451194f", "patch": "@@ -62,7 +62,7 @@ impl Fixture {\n         let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n \n         let path = components[0].to_string();\n-        assert!(path.starts_with(\"/\"));\n+        assert!(path.starts_with('/'));\n \n         let mut krate = None;\n         let mut deps = Vec::new();"}]}