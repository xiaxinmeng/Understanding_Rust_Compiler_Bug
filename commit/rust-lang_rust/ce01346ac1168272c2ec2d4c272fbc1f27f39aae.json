{"sha": "ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "node_id": "C_kwDOAAsO6NoAKGNlMDEzNDZhYzExNjgyNzJjMmVjMmQ0YzI3MmZiYzFmMjdmMzlhYWU", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-08T23:05:37Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-10T21:40:50Z"}, "message": "author: name qpath consistently", "tree": {"sha": "9ff344a7e0ee6c043665632a5e4d2a90997553f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff344a7e0ee6c043665632a5e4d2a90997553f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "html_url": "https://github.com/rust-lang/rust/commit/ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3d1e60ed961c581092af4daa0442fc43b9c6068", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d1e60ed961c581092af4daa0442fc43b9c6068", "html_url": "https://github.com/rust-lang/rust/commit/e3d1e60ed961c581092af4daa0442fc43b9c6068"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "26b2a89d2ce34b7ac265f1f13b0f38bfb8bb96d3", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "patch": "@@ -569,7 +569,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             ExprKind::Cast(expr, ty) => {\n                 let cast_pat = self.next(\"expr\");\n                 let cast_ty = self.next(\"cast_ty\");\n-                let qp_label = self.next(\"qp\");\n+                let qp_label = self.next(\"qpath\");\n \n                 println!(\"Cast(ref {}, ref {}) = {};\", cast_pat, cast_ty, current);\n \n@@ -717,7 +717,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 self.visit_expr(index);\n             },\n             ExprKind::Path(ref path) => {\n-                let path_pat = self.next(\"path\");\n+                let path_pat = self.next(\"qpath\");\n \n                 println!(\"Path(ref {}) = {};\", path_pat, current);\n \n@@ -780,7 +780,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 println!(\"    // unimplemented: `ExprKind::LlvmInlineAsm` is not further destructured at the moment\");\n             },\n             ExprKind::Struct(path, fields, ref opt_base) => {\n-                let path_pat = self.next(\"path\");\n+                let path_pat = self.next(\"qpath\");\n                 let fields_pat = self.next(\"fields\");\n \n                 if let Some(base) = *opt_base {\n@@ -895,7 +895,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 println!(\"    if {}.as_str() == \\\"{}\\\";\", name_pat, ident.as_str());\n             },\n             PatKind::Struct(ref path, fields, ignore) => {\n-                let path_pat = self.next(\"path\");\n+                let path_pat = self.next(\"qpath\");\n                 let fields_pat = self.next(\"fields\");\n                 println!(\n                     \"Struct(ref {}, ref {}, {}) = {};\",\n@@ -930,7 +930,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 }\n             },\n             PatKind::TupleStruct(ref path, fields, skip_pos) => {\n-                let path_pat = self.next(\"path\");\n+                let path_pat = self.next(\"qpath\");\n                 let fields_pat = self.next(\"fields\");\n \n                 println!(\n@@ -949,7 +949,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 }\n             },\n             PatKind::Path(ref path) => {\n-                let path_pat = self.next(\"path\");\n+                let path_pat = self.next(\"qpath\");\n                 println!(\"Path(ref {}) = {};\", path_pat, current);\n \n                 self.current = path_pat;"}, {"sha": "4931270bea83d766b92c03736c1a02da35072cd9", "filename": "tests/ui/author.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.stdout?ref=ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "patch": "@@ -2,8 +2,8 @@ if_chain! {\n     if let StmtKind::Local(ref local) = stmt.kind;\n     if let Some(ref init) = local.init;\n     if let ExprKind::Cast(ref expr, ref cast_ty) = init.kind;\n-    if let TyKind::Path(ref qp) = cast_ty.kind;\n-    if match_qpath(qp, &[\"char\"]);\n+    if let TyKind::Path(ref qpath) = cast_ty.kind;\n+    if match_qpath(qpath, &[\"char\"]);\n     if let ExprKind::Lit(ref lit) = expr.kind;\n     if let LitKind::Int(69, LitIntType::Unsuffixed) = lit.node;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;"}, {"sha": "3454d2bd69c06ab4ecef8a2da47a6856615000c7", "filename": "tests/ui/author/blocks.stdout", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "patch": "@@ -15,8 +15,8 @@ if_chain! {\n     if name1.as_str() == \"_t\";\n     if let StmtKind::Semi(ref e, _) = block.stmts[2].kind\n     if let ExprKind::Unary(UnOp::Neg, ref inner) = e.kind;\n-    if let ExprKind::Path(ref path) = inner.kind;\n-    if match_qpath(path, &[\"x\"]);\n+    if let ExprKind::Path(ref qpath) = inner.kind;\n+    if match_qpath(qpath, &[\"x\"]);\n     if block.expr.is_none();\n     then {\n         // report your lint here\n@@ -28,18 +28,18 @@ if_chain! {\n     if let StmtKind::Local(ref local) = block.stmts[0].kind;\n     if let Some(ref init) = local.init;\n     if let ExprKind::Call(ref func, ref args) = init.kind;\n-    if let ExprKind::Path(ref path) = func.kind;\n-    if match_qpath(path, &[\"String\", \"new\"]);\n+    if let ExprKind::Path(ref qpath) = func.kind;\n+    if match_qpath(qpath, &[\"String\", \"new\"]);\n     if args.len() == 0;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;\n     if name.as_str() == \"expr\";\n     if let Some(trailing_expr) = &block.expr;\n     if let ExprKind::Call(ref func1, ref args1) = trailing_expr.kind;\n-    if let ExprKind::Path(ref path1) = func1.kind;\n-    if match_qpath(path1, &[\"drop\"]);\n+    if let ExprKind::Path(ref qpath1) = func1.kind;\n+    if match_qpath(qpath1, &[\"drop\"]);\n     if args1.len() == 1;\n-    if let ExprKind::Path(ref path2) = args1[0].kind;\n-    if match_qpath(path2, &[\"expr\"]);\n+    if let ExprKind::Path(ref qpath2) = args1[0].kind;\n+    if match_qpath(qpath2, &[\"expr\"]);\n     then {\n         // report your lint here\n     }\n@@ -49,8 +49,8 @@ if_chain! {\n     if let FnRetTy::DefaultReturn(_) = fn_decl.output\n     let body = cx.tcx.hir().body(body_id);\n     if let ExprKind::Call(ref func, ref args) = body.value.kind;\n-    if let ExprKind::Path(ref path) = func.kind;\n-    if matches!(path, QPath::LangItem(LangItem::FromGenerator, _));\n+    if let ExprKind::Path(ref qpath) = func.kind;\n+    if matches!(qpath, QPath::LangItem(LangItem::FromGenerator, _));\n     if args.len() == 1;\n     if let ExprKind::Closure(CaptureBy::Value, ref fn_decl1, ref body_id1, _, Some(Movability::Static)) = args[0].kind\n     if let FnRetTy::DefaultReturn(_) = fn_decl1.output"}, {"sha": "7bce2bb84f2634fe24965118006a534ecdd07147", "filename": "tests/ui/author/call.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fcall.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fcall.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fcall.stdout?ref=ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "patch": "@@ -2,8 +2,8 @@ if_chain! {\n     if let StmtKind::Local(ref local) = stmt.kind;\n     if let Some(ref init) = local.init;\n     if let ExprKind::Call(ref func, ref args) = init.kind;\n-    if let ExprKind::Path(ref path) = func.kind;\n-    if match_qpath(path, &[\"{{root}}\", \"std\", \"cmp\", \"min\"]);\n+    if let ExprKind::Path(ref qpath) = func.kind;\n+    if match_qpath(qpath, &[\"{{root}}\", \"std\", \"cmp\", \"min\"]);\n     if args.len() == 2;\n     if let ExprKind::Lit(ref lit) = args[0].kind;\n     if let LitKind::Int(3, LitIntType::Unsuffixed) = lit.node;"}, {"sha": "6acdbee176a2a1a61619b1981619fa072646eaf8", "filename": "tests/ui/author/if.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stdout?ref=ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "patch": "@@ -34,8 +34,8 @@ if_chain! {\n     if let PatKind::Lit(ref lit_expr) = let_pat.kind\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Bool(true) = lit.node;\n-    if let ExprKind::Path(ref path) = let_expr.kind;\n-    if match_qpath(path, &[\"a\"]);\n+    if let ExprKind::Path(ref qpath) = let_expr.kind;\n+    if match_qpath(qpath, &[\"a\"]);\n     if let ExprKind::Block(ref block, ref label) = if_then.kind;\n     if block.stmts.len() == 0;\n     if block.expr.is_none();"}, {"sha": "769384d79c0199ab2d7544216bb4dbc42663c644", "filename": "tests/ui/author/issue_3849.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fissue_3849.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fissue_3849.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fissue_3849.stdout?ref=ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "patch": "@@ -2,11 +2,11 @@ if_chain! {\n     if let StmtKind::Local(ref local) = stmt.kind;\n     if let Some(ref init) = local.init;\n     if let ExprKind::Call(ref func, ref args) = init.kind;\n-    if let ExprKind::Path(ref path) = func.kind;\n-    if match_qpath(path, &[\"std\", \"mem\", \"transmute\"]);\n+    if let ExprKind::Path(ref qpath) = func.kind;\n+    if match_qpath(qpath, &[\"std\", \"mem\", \"transmute\"]);\n     if args.len() == 1;\n-    if let ExprKind::Path(ref path1) = args[0].kind;\n-    if match_qpath(path1, &[\"ZPTR\"]);\n+    if let ExprKind::Path(ref qpath1) = args[0].kind;\n+    if match_qpath(qpath1, &[\"ZPTR\"]);\n     if let PatKind::Wild = local.pat.kind;\n     then {\n         // report your lint here"}, {"sha": "ce1720551c5cc6fdbc53bdc41c33ca98175062a4", "filename": "tests/ui/author/loop.stdout", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Floop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Floop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Floop.stdout?ref=ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "patch": "@@ -3,8 +3,8 @@ if_chain! {\n     if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr)\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = pat.kind;\n     if name.as_str() == \"y\";\n-    if let ExprKind::Struct(ref path, ref fields, None) = arg.kind;\n-    if matches!(path, QPath::LangItem(LangItem::Range, _));\n+    if let ExprKind::Struct(ref qpath, ref fields, None) = arg.kind;\n+    if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n     if fields.len() == 2;\n     if fields[0].ident.name.as_str() == \"start\"\n     if let ExprKind::Lit(ref lit) = fields[0].kind;\n@@ -16,8 +16,8 @@ if_chain! {\n     if block.stmts.len() == 1;\n     if let StmtKind::Local(ref local) = block.stmts[0].kind;\n     if let Some(ref init) = local.init;\n-    if let ExprKind::Path(ref path1) = init.kind;\n-    if match_qpath(path1, &[\"y\"]);\n+    if let ExprKind::Path(ref qpath1) = init.kind;\n+    if match_qpath(qpath1, &[\"y\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local.pat.kind;\n     if name1.as_str() == \"z\";\n     if block.expr.is_none();\n@@ -29,8 +29,8 @@ if_chain! {\n     if let ExprKind::DropTemps(ref expr) = expr.kind;\n     if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr)\n     if let PatKind::Wild = pat.kind;\n-    if let ExprKind::Struct(ref path, ref fields, None) = arg.kind;\n-    if matches!(path, QPath::LangItem(LangItem::Range, _));\n+    if let ExprKind::Struct(ref qpath, ref fields, None) = arg.kind;\n+    if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n     if fields.len() == 2;\n     if fields[0].ident.name.as_str() == \"start\"\n     if let ExprKind::Lit(ref lit) = fields[0].kind;\n@@ -51,8 +51,8 @@ if_chain! {\n     if let ExprKind::DropTemps(ref expr) = expr.kind;\n     if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr)\n     if let PatKind::Wild = pat.kind;\n-    if let ExprKind::Struct(ref path, ref fields, None) = arg.kind;\n-    if matches!(path, QPath::LangItem(LangItem::Range, _));\n+    if let ExprKind::Struct(ref qpath, ref fields, None) = arg.kind;\n+    if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n     if fields.len() == 2;\n     if fields[0].ident.name.as_str() == \"start\"\n     if let ExprKind::Lit(ref lit) = fields[0].kind;\n@@ -73,8 +73,8 @@ if_chain! {\n }\n if_chain! {\n     if let Some(higher::While { condition: condition, body: body }) = higher::While::hir(expr)\n-    if let ExprKind::Path(ref path) = condition.kind;\n-    if match_qpath(path, &[\"a\"]);\n+    if let ExprKind::Path(ref qpath) = condition.kind;\n+    if match_qpath(qpath, &[\"a\"]);\n     if let ExprKind::Block(ref block, ref label) = body.kind;\n     if block.stmts.len() == 1;\n     if let StmtKind::Semi(ref e, _) = block.stmts[0].kind\n@@ -89,8 +89,8 @@ if_chain! {\n     if let PatKind::Lit(ref lit_expr) = let_pat.kind\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Bool(true) = lit.node;\n-    if let ExprKind::Path(ref path) = let_expr.kind;\n-    if match_qpath(path, &[\"a\"]);\n+    if let ExprKind::Path(ref qpath) = let_expr.kind;\n+    if match_qpath(qpath, &[\"a\"]);\n     if let ExprKind::Block(ref block, ref label) = if_then.kind;\n     if block.stmts.len() == 1;\n     if let StmtKind::Semi(ref e, _) = block.stmts[0].kind"}, {"sha": "b802b6bff8618269189c992939e3241300219c37", "filename": "tests/ui/author/matches.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fmatches.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fmatches.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stdout?ref=ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "patch": "@@ -19,8 +19,8 @@ if_chain! {\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local1.pat.kind;\n     if name.as_str() == \"x\";\n     if let Some(trailing_expr) = &block.expr;\n-    if let ExprKind::Path(ref path) = trailing_expr.kind;\n-    if match_qpath(path, &[\"x\"]);\n+    if let ExprKind::Path(ref qpath) = trailing_expr.kind;\n+    if match_qpath(qpath, &[\"x\"]);\n     if let PatKind::Lit(ref lit_expr1) = arms[1].pat.kind\n     if let ExprKind::Lit(ref lit4) = lit_expr1.kind;\n     if let LitKind::Int(17, LitIntType::Unsuffixed) = lit4.node;"}, {"sha": "52c708dc8fa1ad6a96c612bf440b3f1430e327a7", "filename": "tests/ui/author/struct.stdout", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fstruct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce01346ac1168272c2ec2d4c272fbc1f27f39aae/tests%2Fui%2Fauthor%2Fstruct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fstruct.stdout?ref=ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "patch": "@@ -1,6 +1,6 @@\n if_chain! {\n-    if let ExprKind::Struct(ref path, ref fields, None) = expr.kind;\n-    if match_qpath(path, &[\"Test\"]);\n+    if let ExprKind::Struct(ref qpath, ref fields, None) = expr.kind;\n+    if match_qpath(qpath, &[\"Test\"]);\n     if fields.len() == 1;\n     if fields[0].ident.name.as_str() == \"field\"\n     if let Some(higher::If { cond: cond, then: then, r#else: else_expr}) = higher::If::hir(fields[0])\n@@ -21,8 +21,8 @@ if_chain! {\n     }\n }\n if_chain! {\n-    if let PatKind::Struct(ref path, ref fields, false) = arm.kind;\n-    if match_qpath(path, &[\"Test\"]);\n+    if let PatKind::Struct(ref qpath, ref fields, false) = arm.kind;\n+    if match_qpath(qpath, &[\"Test\"]);\n     if fields.len() == 1;\n     if fields[0].ident.name.as_str() == \"field\"\n     if let PatKind::Lit(ref lit_expr) = fields[0].kind\n@@ -36,8 +36,8 @@ if_chain! {\n     }\n }\n if_chain! {\n-    if let PatKind::TupleStruct(ref path, ref fields, None) = arm.kind;\n-    if match_qpath(path, &[\"TestTuple\"]);\n+    if let PatKind::TupleStruct(ref qpath, ref fields, None) = arm.kind;\n+    if match_qpath(qpath, &[\"TestTuple\"]);\n     if fields.len() == 1;\n     if let PatKind::Lit(ref lit_expr) = fields[0].kind\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n@@ -53,8 +53,8 @@ if_chain! {\n     if let ExprKind::MethodCall(ref method_name, ref args, _) = expr.kind;\n     if method_name.ident.name.as_str() == test;\n     if args.len() == 1;\n-    if let ExprKind::Path(ref path) = args[0].kind;\n-    if match_qpath(path, &[\"test_method_call\"]);\n+    if let ExprKind::Path(ref qpath) = args[0].kind;\n+    if match_qpath(qpath, &[\"test_method_call\"]);\n     then {\n         // report your lint here\n     }"}]}