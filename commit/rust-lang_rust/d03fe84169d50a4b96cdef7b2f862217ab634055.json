{"sha": "d03fe84169d50a4b96cdef7b2f862217ab634055", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwM2ZlODQxNjlkNTBhNGI5NmNkZWY3YjJmODYyMjE3YWI2MzQwNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-14T14:41:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-14T14:41:58Z"}, "message": "Auto merge of #79328 - c410-f3r:hir-if, r=matthewjasper\n\nReintroduce hir::ExprKind::If\n\nBasically copied and paste #59288/https://github.com/rust-lang/rust-clippy/pull/4080 with some modifications.\n\nThe vast majority of tests were fixed and now there are only a few remaining. Since I am still unable to figure out the missing pieces, any help with the following list is welcome.\n\n- [ ] **Unnecessary `typeck` exception**: [Cheated on this one to make CI green.](https://github.com/rust-lang/rust/pull/79328/files#diff-3faee9ba23fc54a12b7c43364ba81f8c5660045c7e1d7989a02a0cee1c5b2051)\n- [x] **Incorrect span**: [Span should reference `then` and `else` separately.](https://github.com/rust-lang/rust/pull/79328/files#diff-cf2c46e82222ee4b1037a68fff8a1af3c4f1de7a6b3fd798aacbf3c0475abe3d)\n- [x] **New note regarding `assert!`**: [Modified but not \"wrong\". Maybe can be a good thing?](https://github.com/rust-lang/rust/pull/79328/files#diff-9e0d7c89ed0224e2b62060c957177c27db43c30dfe3c2974cb6b5091cda9cfb5)\n- [x] **Inverted report location**: [Modified but not \"wrong\". Locations were inverted.](https://github.com/rust-lang/rust/pull/79328/files#diff-f637ce7c1f68d523a165aa9651765df05e36c4d7d279194b1a6b28b48a323691)\n- [x] **`src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs` has weird errors**: [Not sure why this is happening.](https://github.com/rust-lang/rust/pull/79328/files#diff-c823c09660f5b112f95e97e8ff71f1797b6c7f37dbb3d16f8e98bbaea8072e95)\n- [x] **Missing diagnostic**: [???](https://github.com/rust-lang/rust/pull/79328/files#diff-6b8ab09360d725ba4513933827f9796b42ff9522b0690f80b76de067143af2fc)", "tree": {"sha": "7bfcf41933cb83e4397ea8c96b975388a01fd6ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfcf41933cb83e4397ea8c96b975388a01fd6ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d03fe84169d50a4b96cdef7b2f862217ab634055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d03fe84169d50a4b96cdef7b2f862217ab634055", "html_url": "https://github.com/rust-lang/rust/commit/d03fe84169d50a4b96cdef7b2f862217ab634055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d03fe84169d50a4b96cdef7b2f862217ab634055/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bb163095d8c751787f1449f3f3c245077f484e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb163095d8c751787f1449f3f3c245077f484e3", "html_url": "https://github.com/rust-lang/rust/commit/7bb163095d8c751787f1449f3f3c245077f484e3"}, {"sha": "b0ac0fbdefc00b3f8678ad87dd7379687413e361", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ac0fbdefc00b3f8678ad87dd7379687413e361", "html_url": "https://github.com/rust-lang/rust/commit/b0ac0fbdefc00b3f8678ad87dd7379687413e361"}], "stats": {"total": 6155, "additions": 3100, "deletions": 3055}, "files": [{"sha": "1b9ccbd850beee7586ecdfa6888e4724e4cc74d8", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -87,9 +87,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::Let(ref pat, ref scrutinee) => {\n                     self.lower_expr_let(e.span, pat, scrutinee)\n                 }\n-                ExprKind::If(ref cond, ref then, ref else_opt) => {\n-                    self.lower_expr_if(e.span, cond, then, else_opt.as_deref())\n-                }\n+                ExprKind::If(ref cond, ref then, ref else_opt) => match cond.kind {\n+                    ExprKind::Let(ref pat, ref scrutinee) => {\n+                        self.lower_expr_if_let(e.span, pat, scrutinee, then, else_opt.as_deref())\n+                    }\n+                    _ => self.lower_expr_if(cond, then, else_opt.as_deref()),\n+                },\n                 ExprKind::While(ref cond, ref body, opt_label) => self\n                     .with_loop_scope(e.id, |this| {\n                         this.lower_expr_while_in_loop_scope(e.span, cond, body, opt_label)\n@@ -337,10 +340,30 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_expr_if(\n         &mut self,\n-        span: Span,\n         cond: &Expr,\n         then: &Block,\n         else_opt: Option<&Expr>,\n+    ) -> hir::ExprKind<'hir> {\n+        macro_rules! make_if {\n+            ($opt:expr) => {{\n+                let then_expr = self.lower_block_expr(then);\n+                hir::ExprKind::If(self.lower_expr(cond), self.arena.alloc(then_expr), $opt)\n+            }};\n+        }\n+        if let Some(rslt) = else_opt {\n+            make_if!(Some(self.lower_expr(rslt)))\n+        } else {\n+            make_if!(None)\n+        }\n+    }\n+\n+    fn lower_expr_if_let(\n+        &mut self,\n+        span: Span,\n+        pat: &Pat,\n+        scrutinee: &Expr,\n+        then: &Block,\n+        else_opt: Option<&Expr>,\n     ) -> hir::ExprKind<'hir> {\n         // FIXME(#53667): handle lowering of && and parens.\n \n@@ -353,30 +376,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let else_arm = self.arm(else_pat, else_expr);\n \n         // Handle then + scrutinee:\n-        let (then_pat, scrutinee, desugar) = match cond.kind {\n-            // `<pat> => <then>`:\n-            ExprKind::Let(ref pat, ref scrutinee) => {\n-                let scrutinee = self.lower_expr(scrutinee);\n-                let pat = self.lower_pat(pat);\n-                (pat, scrutinee, hir::MatchSource::IfLetDesugar { contains_else_clause })\n-            }\n-            // `true => <then>`:\n-            _ => {\n-                // Lower condition:\n-                let cond = self.lower_expr(cond);\n-                let span_block =\n-                    self.mark_span_with_reason(DesugaringKind::CondTemporary, cond.span, None);\n-                // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n-                // to preserve drop semantics since `if cond { ... }` does not\n-                // let temporaries live outside of `cond`.\n-                let cond = self.expr_drop_temps(span_block, cond, ThinVec::new());\n-                let pat = self.pat_bool(span, true);\n-                (pat, cond, hir::MatchSource::IfDesugar { contains_else_clause })\n-            }\n-        };\n+        let scrutinee = self.lower_expr(scrutinee);\n+        let then_pat = self.lower_pat(pat);\n+\n         let then_expr = self.lower_block_expr(then);\n         let then_arm = self.arm(then_pat, self.arena.alloc(then_expr));\n \n+        let desugar = hir::MatchSource::IfLetDesugar { contains_else_clause };\n         hir::ExprKind::Match(scrutinee, arena_vec![self; then_arm, else_arm], desugar)\n     }\n "}, {"sha": "af6b0a22d4b29805d1178e29a998ee285f86013b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1431,6 +1431,7 @@ impl Expr<'_> {\n             ExprKind::Lit(_) => ExprPrecedence::Lit,\n             ExprKind::Type(..) | ExprKind::Cast(..) => ExprPrecedence::Cast,\n             ExprKind::DropTemps(ref expr, ..) => expr.precedence(),\n+            ExprKind::If(..) => ExprPrecedence::If,\n             ExprKind::Loop(..) => ExprPrecedence::Loop,\n             ExprKind::Match(..) => ExprPrecedence::Match,\n             ExprKind::Closure(..) => ExprPrecedence::Closure,\n@@ -1492,6 +1493,7 @@ impl Expr<'_> {\n             | ExprKind::MethodCall(..)\n             | ExprKind::Struct(..)\n             | ExprKind::Tup(..)\n+            | ExprKind::If(..)\n             | ExprKind::Match(..)\n             | ExprKind::Closure(..)\n             | ExprKind::Block(..)\n@@ -1608,6 +1610,10 @@ pub enum ExprKind<'hir> {\n     /// This construct only exists to tweak the drop order in HIR lowering.\n     /// An example of that is the desugaring of `for` loops.\n     DropTemps(&'hir Expr<'hir>),\n+    /// An `if` block, with an optional else block.\n+    ///\n+    /// I.e., `if <expr> { <expr> } else { <expr> }`.\n+    If(&'hir Expr<'hir>, &'hir Expr<'hir>, Option<&'hir Expr<'hir>>),\n     /// A conditionless loop (can be exited with `break`, `continue`, or `return`).\n     ///\n     /// I.e., `'label: loop { <block> }`.\n@@ -1761,8 +1767,6 @@ pub enum LocalSource {\n pub enum MatchSource {\n     /// A `match _ { .. }`.\n     Normal,\n-    /// An `if _ { .. }` (optionally with `else { .. }`).\n-    IfDesugar { contains_else_clause: bool },\n     /// An `if let _ = _ { .. }` (optionally with `else { .. }`).\n     IfLetDesugar { contains_else_clause: bool },\n     /// An `if let _ = _ => { .. }` match guard.\n@@ -1785,7 +1789,7 @@ impl MatchSource {\n         use MatchSource::*;\n         match self {\n             Normal => \"match\",\n-            IfDesugar { .. } | IfLetDesugar { .. } | IfLetGuardDesugar => \"if\",\n+            IfLetDesugar { .. } | IfLetGuardDesugar => \"if\",\n             WhileDesugar | WhileLetDesugar => \"while\",\n             ForLoopDesugar => \"for\",\n             TryDesugar => \"?\","}, {"sha": "8707a84a98fcc27335d4368aaf0cacaa9b6aaaf6", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1146,6 +1146,11 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::DropTemps(ref subexpression) => {\n             visitor.visit_expr(subexpression);\n         }\n+        ExprKind::If(ref cond, ref then, ref else_opt) => {\n+            visitor.visit_expr(cond);\n+            visitor.visit_expr(then);\n+            walk_list!(visitor, visit_expr, else_opt);\n+        }\n         ExprKind::Loop(ref block, ref opt_label, _) => {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);"}, {"sha": "a3ab1d96e1dfed579b045caa64549bd31ba7f77b", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1080,6 +1080,50 @@ impl<'a> State<'a> {\n         self.ann.post(self, AnnNode::Block(blk))\n     }\n \n+    fn print_else(&mut self, els: Option<&hir::Expr<'_>>) {\n+        match els {\n+            Some(_else) => {\n+                match _else.kind {\n+                    // \"another else-if\"\n+                    hir::ExprKind::If(ref i, ref then, ref e) => {\n+                        self.cbox(INDENT_UNIT - 1);\n+                        self.ibox(0);\n+                        self.s.word(\" else if \");\n+                        self.print_expr_as_cond(&i);\n+                        self.s.space();\n+                        self.print_expr(&then);\n+                        self.print_else(e.as_ref().map(|e| &**e))\n+                    }\n+                    // \"final else\"\n+                    hir::ExprKind::Block(ref b, _) => {\n+                        self.cbox(INDENT_UNIT - 1);\n+                        self.ibox(0);\n+                        self.s.word(\" else \");\n+                        self.print_block(&b)\n+                    }\n+                    // BLEAH, constraints would be great here\n+                    _ => {\n+                        panic!(\"print_if saw if with weird alternative\");\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    pub fn print_if(\n+        &mut self,\n+        test: &hir::Expr<'_>,\n+        blk: &hir::Expr<'_>,\n+        elseopt: Option<&hir::Expr<'_>>,\n+    ) {\n+        self.head(\"if\");\n+        self.print_expr_as_cond(test);\n+        self.s.space();\n+        self.print_expr(blk);\n+        self.print_else(elseopt)\n+    }\n+\n     pub fn print_anon_const(&mut self, constant: &hir::AnonConst) {\n         self.ann.nested(self, Nested::Body(constant.body))\n     }\n@@ -1349,6 +1393,9 @@ impl<'a> State<'a> {\n                 // Print `}`:\n                 self.bclose_maybe_open(expr.span, true);\n             }\n+            hir::ExprKind::If(ref test, ref blk, ref elseopt) => {\n+                self.print_if(&test, &blk, elseopt.as_ref().map(|e| &**e));\n+            }\n             hir::ExprKind::Loop(ref blk, opt_label, _) => {\n                 if let Some(label) = opt_label {\n                     self.print_ident(label.ident);\n@@ -2429,7 +2476,13 @@ impl<'a> State<'a> {\n //\n // Duplicated from `parse::classify`, but adapted for the HIR.\n fn expr_requires_semi_to_be_stmt(e: &hir::Expr<'_>) -> bool {\n-    !matches!(e.kind, hir::ExprKind::Match(..) | hir::ExprKind::Block(..) | hir::ExprKind::Loop(..))\n+    !matches!(\n+        e.kind,\n+        hir::ExprKind::If(..)\n+            | hir::ExprKind::Match(..)\n+            | hir::ExprKind::Block(..)\n+            | hir::ExprKind::Loop(..)\n+    )\n }\n \n /// This statement requires a semicolon after it."}, {"sha": "6641606f1e89ea15386aace4f3aeb2b15a6ab981", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -658,20 +658,22 @@ impl<'hir> Map<'hir> {\n         CRATE_HIR_ID\n     }\n \n-    /// When on a match arm tail expression or on a match arm, give back the enclosing `match`\n-    /// expression.\n+    /// When on an if expression, a match arm tail expression or a match arm, give back\n+    /// the enclosing `if` or `match` expression.\n     ///\n-    /// Used by error reporting when there's a type error in a match arm caused by the `match`\n+    /// Used by error reporting when there's a type error in an if or match arm caused by the\n     /// expression needing to be unit.\n-    pub fn get_match_if_cause(&self, hir_id: HirId) -> Option<&'hir Expr<'hir>> {\n+    pub fn get_if_cause(&self, hir_id: HirId) -> Option<&'hir Expr<'hir>> {\n         for (_, node) in self.parent_iter(hir_id) {\n             match node {\n                 Node::Item(_)\n                 | Node::ForeignItem(_)\n                 | Node::TraitItem(_)\n                 | Node::ImplItem(_)\n                 | Node::Stmt(Stmt { kind: StmtKind::Local(_), .. }) => break,\n-                Node::Expr(expr @ Expr { kind: ExprKind::Match(..), .. }) => return Some(expr),\n+                Node::Expr(expr @ Expr { kind: ExprKind::If(..) | ExprKind::Match(..), .. }) => {\n+                    return Some(expr);\n+                }\n                 _ => {}\n             }\n         }"}, {"sha": "c11b8f74593898b9673a800b072cdaed56242d05", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -531,6 +531,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Borrow { .. }\n             | ExprKind::AddressOf { .. }\n             | ExprKind::Match { .. }\n+            | ExprKind::If { .. }\n             | ExprKind::Loop { .. }\n             | ExprKind::Block { .. }\n             | ExprKind::Assign { .. }"}, {"sha": "55bdbcfc5b916c7e54587804579ead0e1c4a8604", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -251,6 +251,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::StaticRef { .. }\n             | ExprKind::Block { .. }\n             | ExprKind::Match { .. }\n+            | ExprKind::If { .. }\n             | ExprKind::NeverToAny { .. }\n             | ExprKind::Use { .. }\n             | ExprKind::Borrow { .. }"}, {"sha": "9320b5810e3964fa193ea88d37efd2a3105cdc9d", "filename": "compiler/rustc_mir_build/src/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -45,6 +45,7 @@ impl Category {\n \n             ExprKind::LogicalOp { .. }\n             | ExprKind::Match { .. }\n+            | ExprKind::If { .. }\n             | ExprKind::NeverToAny { .. }\n             | ExprKind::Use { .. }\n             | ExprKind::Adt { .. }"}, {"sha": "9777a97b57ee0e378f98392f5955cf2d3d94c18e", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,6 +69,40 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Match { scrutinee, arms } => {\n                 this.match_expr(destination, scope, expr_span, block, scrutinee, arms)\n             }\n+            ExprKind::If { cond, then, else_opt } => {\n+                let place = unpack!(block = this.as_temp(block, Some(this.local_scope()), cond, Mutability::Mut));\n+                let operand = Operand::Move(Place::from(place));\n+\n+                let mut then_block = this.cfg.start_new_block();\n+                let mut else_block = this.cfg.start_new_block();\n+                let term = TerminatorKind::if_(this.hir.tcx(), operand, then_block, else_block);\n+                this.cfg.terminate(block, source_info, term);\n+\n+                unpack!(then_block = this.into(destination, scope, then_block, then));\n+                else_block = if let Some(else_opt) = else_opt {\n+                    unpack!(this.into(destination, None, else_block, else_opt))\n+                } else {\n+                    // Body of the `if` expression without an `else` clause must return `()`, thus\n+                    // we implicitly generate a `else {}` if it is not specified.\n+                    let correct_si = this.source_info(expr_span.shrink_to_hi());\n+                    this.cfg.push_assign_unit(else_block, correct_si, destination, this.hir.tcx());\n+                    else_block\n+                };\n+\n+                let join_block = this.cfg.start_new_block();\n+                this.cfg.terminate(\n+                    then_block,\n+                    source_info,\n+                    TerminatorKind::Goto { target: join_block },\n+                );\n+                this.cfg.terminate(\n+                    else_block,\n+                    source_info,\n+                    TerminatorKind::Goto { target: join_block },\n+                );\n+\n+                join_block.unit()\n+            },\n             ExprKind::NeverToAny { source } => {\n                 let source = this.hir.mirror(source);\n                 let is_call = matches!(source.kind, ExprKind::Call { .. } | ExprKind::InlineAsm { .. });"}, {"sha": "595458702e9c983de98202bfabfc805cd2f6e289", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -537,6 +537,11 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             },\n             Err(err) => bug!(\"invalid loop id for continue: {}\", err),\n         },\n+        hir::ExprKind::If(cond, then, else_opt) => ExprKind::If {\n+            cond: cond.to_ref(),\n+            then: then.to_ref(),\n+            else_opt: else_opt.map(|el| el.to_ref()),\n+        },\n         hir::ExprKind::Match(ref discr, ref arms, _) => ExprKind::Match {\n             scrutinee: discr.to_ref(),\n             arms: arms.iter().map(|a| convert_arm(cx, a)).collect(),"}, {"sha": "ed3d3927825af23312621346113ae63672d3910c", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -139,6 +139,11 @@ crate enum ExprKind<'tcx> {\n     Box {\n         value: ExprRef<'tcx>,\n     },\n+    If {\n+        cond: ExprRef<'tcx>,\n+        then: ExprRef<'tcx>,\n+        else_opt: Option<ExprRef<'tcx>>,\n+    },\n     Call {\n         ty: Ty<'tcx>,\n         fun: ExprRef<'tcx>,"}, {"sha": "397706851cb7970d9f95321a6f0d39aaf8ec2e62", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -403,7 +403,7 @@ fn report_arm_reachability<'p, 'tcx>(\n         match is_useful {\n             NotUseful => {\n                 match source {\n-                    hir::MatchSource::IfDesugar { .. } | hir::MatchSource::WhileDesugar => bug!(),\n+                    hir::MatchSource::WhileDesugar => bug!(),\n \n                     hir::MatchSource::IfLetDesugar { .. } | hir::MatchSource::WhileLetDesugar => {\n                         // Check which arm we're on."}, {"sha": "c887a860303b58c974f2a5bc30ebd888644e8043", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -49,9 +49,7 @@ impl NonConstExpr {\n \n             // All other expressions are allowed.\n             Self::Loop(Loop | While | WhileLet)\n-            | Self::Match(\n-                WhileDesugar | WhileLetDesugar | Normal | IfDesugar { .. } | IfLetDesugar { .. },\n-            ) => &[],\n+            | Self::Match(WhileDesugar | WhileLetDesugar | Normal | IfLetDesugar { .. }) => &[],\n         };\n \n         Some(gates)"}, {"sha": "6202cc312fc0ea7b9e956a68e4870ef53b822f0f", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -419,7 +419,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             }\n \n             // live nodes required for interesting control flow:\n-            hir::ExprKind::Match(..) | hir::ExprKind::Loop(..) => {\n+            hir::ExprKind::If(..) | hir::ExprKind::Match(..) | hir::ExprKind::Loop(..) => {\n                 self.add_live_node_for_node(expr.hir_id, ExprNode(expr.span));\n                 intravisit::walk_expr(self, expr);\n             }\n@@ -846,6 +846,29 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             // at the label ident\n             hir::ExprKind::Loop(ref blk, _, _) => self.propagate_through_loop(expr, &blk, succ),\n \n+            hir::ExprKind::If(ref cond, ref then, ref else_opt) => {\n+                //\n+                //     (cond)\n+                //       |\n+                //       v\n+                //     (expr)\n+                //     /   \\\n+                //    |     |\n+                //    v     v\n+                //  (then)(els)\n+                //    |     |\n+                //    v     v\n+                //   (  succ  )\n+                //\n+                let else_ln =\n+                    self.propagate_through_opt_expr(else_opt.as_ref().map(|e| &**e), succ);\n+                let then_ln = self.propagate_through_expr(&then, succ);\n+                let ln = self.live_node(expr.hir_id, expr.span);\n+                self.init_from_succ(ln, else_ln);\n+                self.merge_from_succ(ln, then_ln);\n+                self.propagate_through_expr(&cond, ln)\n+            }\n+\n             hir::ExprKind::Match(ref e, arms, _) => {\n                 //\n                 //      (e)\n@@ -1336,6 +1359,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::Tup(..)\n         | hir::ExprKind::Binary(..)\n         | hir::ExprKind::Cast(..)\n+        | hir::ExprKind::If(..)\n         | hir::ExprKind::DropTemps(..)\n         | hir::ExprKind::Unary(..)\n         | hir::ExprKind::Ret(..)"}, {"sha": "93fb23c018bf0d0531e2714e9485f6aa1f99db2c", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -201,6 +201,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n             | ExprKind::Type(..)\n             | ExprKind::Loop(..)\n             | ExprKind::Match(..)\n+            | ExprKind::If(..)\n             | ExprKind::Closure(..)\n             | ExprKind::Assign(..)\n             | ExprKind::AssignOp(..)"}, {"sha": "91421d7f5f22ba4f9f273c645ff536b666e162e8", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -241,6 +241,17 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n                 terminating(r.hir_id.local_id);\n             }\n \n+            hir::ExprKind::If(ref expr, ref then, Some(ref otherwise)) => {\n+                terminating(expr.hir_id.local_id);\n+                terminating(then.hir_id.local_id);\n+                terminating(otherwise.hir_id.local_id);\n+            }\n+\n+            hir::ExprKind::If(ref expr, ref then, None) => {\n+                terminating(expr.hir_id.local_id);\n+                terminating(then.hir_id.local_id);\n+            }\n+\n             hir::ExprKind::Loop(ref body, _, _) => {\n                 terminating(body.hir_id.local_id);\n             }"}, {"sha": "565b8d37868f8c042007fd8b5d0532fd31fd0a82", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -2278,6 +2278,12 @@ impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n                     self.visit_expr(expr);\n                 }\n             }\n+            hir::ExprKind::If(_, then, else_opt) if self.in_block_tail => {\n+                self.visit_expr(then);\n+                if let Some(el) = else_opt {\n+                    self.visit_expr(el);\n+                }\n+            }\n             hir::ExprKind::Match(_, arms, _) if self.in_block_tail => {\n                 for arm in arms {\n                     self.visit_expr(arm.body);"}, {"sha": "322ec9640f4648d04fd803212c3498f891e61152", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 123, "deletions": 91, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,9 +1,9 @@\n-use crate::check::coercion::CoerceMany;\n+use crate::check::coercion::{AsCoercionSite, CoerceMany};\n use crate::check::{Diverges, Expectation, FnCtxt, Needs};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n-use rustc_middle::ty::{self, ToPredicate, Ty};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyS};\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -12,6 +12,41 @@ use rustc_trait_selection::traits::{\n     StatementAsExpression,\n };\n \n+macro_rules! create_maybe_get_coercion_reason {\n+    ($fn_name:ident, $node:expr) => {\n+        pub(crate) fn $fn_name(&self, hir_id: hir::HirId, sp: Span) -> Option<(Span, String)> {\n+            let node = $node(self.tcx.hir(), hir_id);\n+            if let hir::Node::Block(block) = node {\n+                // check that the body's parent is an fn\n+                let parent = self.tcx.hir().get(\n+                    self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(block.hir_id)),\n+                );\n+                if let (\n+                    Some(expr),\n+                    hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. }),\n+                ) = (&block.expr, parent)\n+                {\n+                    // check that the `if` expr without `else` is the fn body's expr\n+                    if expr.span == sp {\n+                        return self.get_fn_decl(hir_id).and_then(|(fn_decl, _)| {\n+                            let span = fn_decl.output.span();\n+                            let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok()?;\n+                            Some((\n+                                span,\n+                                format!(\"expected `{}` because of this return type\", snippet),\n+                            ))\n+                        });\n+                    }\n+                }\n+            }\n+            if let hir::Node::Local(hir::Local { ty: Some(_), pat, .. }) = node {\n+                return Some((pat.span, \"expected because of this assignment\".to_string()));\n+            }\n+            None\n+        }\n+    };\n+}\n+\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_match(\n         &self,\n@@ -25,7 +60,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         use hir::MatchSource::*;\n         let (source_if, if_no_else, force_scrutinee_bool) = match match_src {\n-            IfDesugar { contains_else_clause } => (true, !contains_else_clause, true),\n             IfLetDesugar { contains_else_clause, .. } => (true, !contains_else_clause, false),\n             WhileDesugar => (false, false, true),\n             _ => (false, false, false),\n@@ -115,8 +149,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let arm_ty = if source_if\n                 && if_no_else\n                 && i != 0\n-                && self.if_fallback_coercion(expr.span, &arms[0].body, &mut coercion)\n-            {\n+                && self.if_fallback_coercion(\n+                    expr.span,\n+                    &arms[0].body,\n+                    &mut coercion,\n+                    |hir_id, span| self.maybe_get_coercion_reason(hir_id, span),\n+                ) {\n                 tcx.ty_error()\n             } else {\n                 // Only call this if this is not an `if` expr with an expected type and no `else`\n@@ -125,58 +163,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n             all_arms_diverge &= self.diverges.get();\n \n-            // When we have a `match` as a tail expression in a `fn` with a returned `impl Trait`\n-            // we check if the different arms would work with boxed trait objects instead and\n-            // provide a structured suggestion in that case.\n-            let opt_suggest_box_span = match (\n-                orig_expected,\n-                self.ret_coercion_impl_trait.map(|ty| (self.body_id.owner, ty)),\n-            ) {\n-                (Expectation::ExpectHasType(expected), Some((id, ty)))\n-                    if self.in_tail_expr && self.can_coerce(arm_ty, expected) =>\n-                {\n-                    let impl_trait_ret_ty = self.infcx.instantiate_opaque_types(\n-                        id,\n-                        self.body_id,\n-                        self.param_env,\n-                        ty,\n-                        arm.body.span,\n-                    );\n-                    let mut suggest_box = !impl_trait_ret_ty.obligations.is_empty();\n-                    for o in impl_trait_ret_ty.obligations {\n-                        match o.predicate.skip_binders_unchecked() {\n-                            ty::PredicateAtom::Trait(t, constness) => {\n-                                let pred = ty::PredicateAtom::Trait(\n-                                    ty::TraitPredicate {\n-                                        trait_ref: ty::TraitRef {\n-                                            def_id: t.def_id(),\n-                                            substs: self.infcx.tcx.mk_substs_trait(arm_ty, &[]),\n-                                        },\n-                                    },\n-                                    constness,\n-                                );\n-                                let obl = Obligation::new(\n-                                    o.cause.clone(),\n-                                    self.param_env,\n-                                    pred.to_predicate(self.infcx.tcx),\n-                                );\n-                                suggest_box &= self.infcx.predicate_must_hold_modulo_regions(&obl);\n-                                if !suggest_box {\n-                                    // We've encountered some obligation that didn't hold, so the\n-                                    // return expression can't just be boxed. We don't need to\n-                                    // evaluate the rest of the obligations.\n-                                    break;\n-                                }\n-                            }\n-                            _ => {}\n-                        }\n-                    }\n-                    // If all the obligations hold (or there are no obligations) the tail expression\n-                    // we can suggest to return a boxed trait object instead of an opaque type.\n-                    if suggest_box { self.ret_type_span } else { None }\n-                }\n-                _ => None,\n-            };\n+            let opt_suggest_box_span =\n+                self.opt_suggest_box_span(arm.body.span, arm_ty, orig_expected);\n \n             if source_if {\n                 let then_expr = &arms[0].body;\n@@ -279,7 +267,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         use hir::MatchSource::*;\n         let msg = match source {\n-            IfDesugar { .. } | IfLetDesugar { .. } => \"block in `if` expression\",\n+            IfLetDesugar { .. } => \"block in `if` expression\",\n             WhileDesugar { .. } | WhileLetDesugar { .. } => \"block in `while` expression\",\n             _ => \"arm\",\n         };\n@@ -291,15 +279,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Handle the fallback arm of a desugared if(-let) like a missing else.\n     ///\n     /// Returns `true` if there was an error forcing the coercion to the `()` type.\n-    fn if_fallback_coercion(\n+    pub(crate) fn if_fallback_coercion<F, T>(\n         &self,\n         span: Span,\n         then_expr: &'tcx hir::Expr<'tcx>,\n-        coercion: &mut CoerceMany<'tcx, '_, rustc_hir::Arm<'tcx>>,\n-    ) -> bool {\n+        coercion: &mut CoerceMany<'tcx, '_, T>,\n+        ret_reason: F,\n+    ) -> bool\n+    where\n+        F: Fn(hir::HirId, Span) -> Option<(Span, String)>,\n+        T: AsCoercionSite,\n+    {\n         // If this `if` expr is the parent's function return expr,\n         // the cause of the type coercion is the return type, point at it. (#25228)\n-        let ret_reason = self.maybe_get_coercion_reason(then_expr.hir_id, span);\n+        let ret_reason = ret_reason(then_expr.hir_id, span);\n         let cause = self.cause(span, ObligationCauseCode::IfExpressionWithNoElse);\n         let mut error = false;\n         coercion.coerce_forced_unit(\n@@ -322,38 +315,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error\n     }\n \n-    fn maybe_get_coercion_reason(&self, hir_id: hir::HirId, span: Span) -> Option<(Span, String)> {\n-        use hir::Node::{Block, Item, Local};\n-\n-        let hir = self.tcx.hir();\n-        let arm_id = hir.get_parent_node(hir_id);\n-        let match_id = hir.get_parent_node(arm_id);\n-        let containing_id = hir.get_parent_node(match_id);\n-\n-        let node = hir.get(containing_id);\n-        if let Block(block) = node {\n-            // check that the body's parent is an fn\n-            let parent = hir.get(hir.get_parent_node(hir.get_parent_node(block.hir_id)));\n-            if let (Some(expr), Item(hir::Item { kind: hir::ItemKind::Fn(..), .. })) =\n-                (&block.expr, parent)\n-            {\n-                // check that the `if` expr without `else` is the fn body's expr\n-                if expr.span == span {\n-                    return self.get_fn_decl(hir_id).and_then(|(fn_decl, _)| {\n-                        let span = fn_decl.output.span();\n-                        let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok()?;\n-                        Some((span, format!(\"expected `{}` because of this return type\", snippet)))\n-                    });\n-                }\n-            }\n+    create_maybe_get_coercion_reason!(\n+        maybe_get_coercion_reason,\n+        |hir: rustc_middle::hir::map::Map<'a>, id| {\n+            let arm_id = hir.get_parent_node(id);\n+            let match_id = hir.get_parent_node(arm_id);\n+            let containing_id = hir.get_parent_node(match_id);\n+            hir.get(containing_id)\n         }\n-        if let Local(hir::Local { ty: Some(_), pat, .. }) = node {\n-            return Some((pat.span, \"expected because of this assignment\".to_string()));\n+    );\n+\n+    create_maybe_get_coercion_reason!(\n+        maybe_get_coercion_reason_if,\n+        |hir: rustc_middle::hir::map::Map<'a>, id| {\n+            let rslt = hir.get_parent_node(hir.get_parent_node(id));\n+            hir.get(rslt)\n         }\n-        None\n-    }\n+    );\n \n-    fn if_cause(\n+    pub(crate) fn if_cause(\n         &self,\n         span: Span,\n         then_expr: &'tcx hir::Expr<'tcx>,\n@@ -546,6 +526,58 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             (block.span, None)\n         }\n     }\n+\n+    // When we have a `match` as a tail expression in a `fn` with a returned `impl Trait`\n+    // we check if the different arms would work with boxed trait objects instead and\n+    // provide a structured suggestion in that case.\n+    pub(crate) fn opt_suggest_box_span(\n+        &self,\n+        span: Span,\n+        outer_ty: &'tcx TyS<'tcx>,\n+        orig_expected: Expectation<'tcx>,\n+    ) -> Option<Span> {\n+        match (orig_expected, self.ret_coercion_impl_trait.map(|ty| (self.body_id.owner, ty))) {\n+            (Expectation::ExpectHasType(expected), Some((id, ty)))\n+                if self.in_tail_expr && self.can_coerce(outer_ty, expected) =>\n+            {\n+                let impl_trait_ret_ty =\n+                    self.infcx.instantiate_opaque_types(id, self.body_id, self.param_env, ty, span);\n+                let mut suggest_box = !impl_trait_ret_ty.obligations.is_empty();\n+                for o in impl_trait_ret_ty.obligations {\n+                    match o.predicate.skip_binders_unchecked() {\n+                        ty::PredicateAtom::Trait(t, constness) => {\n+                            let pred = ty::PredicateAtom::Trait(\n+                                ty::TraitPredicate {\n+                                    trait_ref: ty::TraitRef {\n+                                        def_id: t.def_id(),\n+                                        substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n+                                    },\n+                                },\n+                                constness,\n+                            );\n+                            let obl = Obligation::new(\n+                                o.cause.clone(),\n+                                self.param_env,\n+                                pred.to_predicate(self.infcx.tcx),\n+                            );\n+                            suggest_box &= self.infcx.predicate_must_hold_modulo_regions(&obl);\n+                            if !suggest_box {\n+                                // We've encountered some obligation that didn't hold, so the\n+                                // return expression can't just be boxed. We don't need to\n+                                // evaluate the rest of the obligations.\n+                                break;\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+                // If all the obligations hold (or there are no obligations) the tail expression\n+                // we can suggest to return a boxed trait object instead of an opaque type.\n+                if suggest_box { self.ret_type_span } else { None }\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n fn arms_contain_ref_bindings(arms: &'tcx [hir::Arm<'tcx>]) -> Option<hir::Mutability> {"}, {"sha": "0d21c56f4cf4de1c37b0e598c91323902d802c0f", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1443,14 +1443,14 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 &mut err, expr, expected, found, cause.span, blk_id,\n             );\n             let parent = fcx.tcx.hir().get(parent_id);\n-            if let (Some(match_expr), true, false) = (\n-                fcx.tcx.hir().get_match_if_cause(expr.hir_id),\n+            if let (Some(cond_expr), true, false) = (\n+                fcx.tcx.hir().get_if_cause(expr.hir_id),\n                 expected.is_unit(),\n                 pointing_at_return_type,\n             ) {\n-                if match_expr.span.desugaring_kind().is_none() {\n-                    err.span_label(match_expr.span, \"expected this to be `()`\");\n-                    fcx.suggest_semicolon_at_end(match_expr.span, &mut err);\n+                if cond_expr.span.desugaring_kind().is_none() {\n+                    err.span_label(cond_expr.span, \"expected this to be `()`\");\n+                    fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);\n                 }\n             }\n             fcx.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))"}, {"sha": "8aa6c6d924a5334b56bc3280836f790ad0708585", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 82, "deletions": 13, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -10,6 +10,7 @@ use crate::check::method::{probe, MethodError, SelfSource};\n use crate::check::report_unexpected_variant_res;\n use crate::check::BreakableCtxt;\n use crate::check::Diverges;\n+use crate::check::DynamicCoerceMany;\n use crate::check::Expectation::{self, ExpectCastableToType, ExpectHasType, NoExpectation};\n use crate::check::FnCtxt;\n use crate::check::Needs;\n@@ -188,7 +189,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Warn for non-block expressions with diverging children.\n         match expr.kind {\n-            ExprKind::Block(..) | ExprKind::Loop(..) | ExprKind::Match(..) => {}\n+            ExprKind::Block(..) | ExprKind::If(..) | ExprKind::Loop(..) | ExprKind::Match(..) => {}\n             // If `expr` is a result of desugaring the try block and is an ok-wrapped\n             // diverging expression (e.g. it arose from desugaring of `try { return }`),\n             // we skip issuing a warning because it is autogenerated code.\n@@ -285,6 +286,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_eq_type(&e, ty);\n                 ty\n             }\n+            ExprKind::If(ref cond, ref then_expr, ref opt_else_expr) => self.check_then_else(\n+                &cond,\n+                then_expr,\n+                opt_else_expr.as_ref().map(|e| &**e),\n+                expr.span,\n+                expected,\n+            ),\n             ExprKind::DropTemps(ref e) => self.check_expr_with_expectation(e, expected),\n             ExprKind::Array(ref args) => self.check_expr_array(args, expected, expr),\n             ExprKind::ConstBlock(ref anon_const) => self.to_const(anon_const).ty,\n@@ -739,8 +747,67 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    // A generic function for checking the 'then' and 'else' clauses in an 'if'\n+    // or 'if-else' expression.\n+    fn check_then_else(\n+        &self,\n+        cond_expr: &'tcx hir::Expr<'tcx>,\n+        then_expr: &'tcx hir::Expr<'tcx>,\n+        opt_else_expr: Option<&'tcx hir::Expr<'tcx>>,\n+        sp: Span,\n+        orig_expected: Expectation<'tcx>,\n+    ) -> Ty<'tcx> {\n+        let cond_ty = self.check_expr_has_type_or_error(cond_expr, self.tcx.types.bool, |_| {});\n+\n+        self.warn_if_unreachable(cond_expr.hir_id, then_expr.span, \"block in `if` expression\");\n+\n+        let cond_diverges = self.diverges.get();\n+        self.diverges.set(Diverges::Maybe);\n+\n+        let expected = orig_expected.adjust_for_branches(self);\n+        let then_ty = self.check_expr_with_expectation(then_expr, expected);\n+        let then_diverges = self.diverges.get();\n+        self.diverges.set(Diverges::Maybe);\n+\n+        // We've already taken the expected type's preferences\n+        // into account when typing the `then` branch. To figure\n+        // out the initial shot at a LUB, we thus only consider\n+        // `expected` if it represents a *hard* constraint\n+        // (`only_has_type`); otherwise, we just go with a\n+        // fresh type variable.\n+        let coerce_to_ty = expected.coercion_target_type(self, sp);\n+        let mut coerce: DynamicCoerceMany<'_> = CoerceMany::new(coerce_to_ty);\n+\n+        coerce.coerce(self, &self.misc(sp), then_expr, then_ty);\n+\n+        if let Some(else_expr) = opt_else_expr {\n+            let else_ty = self.check_expr_with_expectation(else_expr, expected);\n+            let else_diverges = self.diverges.get();\n+\n+            let opt_suggest_box_span =\n+                self.opt_suggest_box_span(else_expr.span, else_ty, orig_expected);\n+            let if_cause =\n+                self.if_cause(sp, then_expr, else_expr, then_ty, else_ty, opt_suggest_box_span);\n+\n+            coerce.coerce(self, &if_cause, else_expr, else_ty);\n+\n+            // We won't diverge unless both branches do (or the condition does).\n+            self.diverges.set(cond_diverges | then_diverges & else_diverges);\n+        } else {\n+            self.if_fallback_coercion(sp, then_expr, &mut coerce, |hir_id, span| {\n+                self.maybe_get_coercion_reason_if(hir_id, span)\n+            });\n+\n+            // If the condition is false we can't diverge.\n+            self.diverges.set(cond_diverges);\n+        }\n+\n+        let result_ty = coerce.complete(self);\n+        if cond_ty.references_error() { self.tcx.ty_error() } else { result_ty }\n+    }\n+\n     /// Type check assignment expression `expr` of form `lhs = rhs`.\n-    /// The expected type is `()` and is passsed to the function for the purposes of diagnostics.\n+    /// The expected type is `()` and is passed to the function for the purposes of diagnostics.\n     fn check_expr_assign(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n@@ -765,24 +832,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n             if !lhs.is_syntactic_place_expr() {\n                 // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n-                if let hir::Node::Expr(hir::Expr {\n-                    kind:\n-                        ExprKind::Match(\n-                            _,\n-                            _,\n-                            hir::MatchSource::IfDesugar { .. } | hir::MatchSource::WhileDesugar,\n-                        ),\n-                    ..\n-                }) = self.tcx.hir().get(\n-                    self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(expr.hir_id)),\n-                ) {\n+                let mut span_err = || {\n                     // Likely `if let` intended.\n                     err.span_suggestion_verbose(\n                         expr.span.shrink_to_lo(),\n                         \"you might have meant to use pattern matching\",\n                         \"let \".to_string(),\n                         applicability,\n                     );\n+                };\n+                if let hir::Node::Expr(hir::Expr {\n+                    kind: ExprKind::Match(_, _, hir::MatchSource::WhileDesugar),\n+                    ..\n+                }) = self.tcx.hir().get(\n+                    self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(expr.hir_id)),\n+                ) {\n+                    span_err();\n+                } else if let hir::Node::Expr(hir::Expr { kind: ExprKind::If { .. }, .. }) =\n+                    self.tcx.hir().get(self.tcx.hir().get_parent_node(expr.hir_id))\n+                {\n+                    span_err();\n                 }\n             }\n             if eq {"}, {"sha": "87b8c4889e893818b7956192b986e07a93c0eb6d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -806,33 +806,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// //                               ^^^^ point at this instead of the whole `if` expression\n     /// ```\n     fn get_expr_coercion_span(&self, expr: &hir::Expr<'_>) -> rustc_span::Span {\n-        if let hir::ExprKind::Match(_, arms, _) = &expr.kind {\n-            let arm_spans: Vec<Span> = arms\n-                .iter()\n-                .filter_map(|arm| {\n-                    self.in_progress_typeck_results\n-                        .and_then(|typeck_results| {\n-                            typeck_results.borrow().node_type_opt(arm.body.hir_id)\n-                        })\n-                        .and_then(|arm_ty| {\n-                            if arm_ty.is_never() {\n-                                None\n-                            } else {\n-                                Some(match &arm.body.kind {\n-                                    // Point at the tail expression when possible.\n-                                    hir::ExprKind::Block(block, _) => {\n-                                        block.expr.as_ref().map(|e| e.span).unwrap_or(block.span)\n-                                    }\n-                                    _ => arm.body.span,\n-                                })\n+        let check_in_progress = |elem: &hir::Expr<'_>| {\n+            self.in_progress_typeck_results\n+                .and_then(|typeck_results| typeck_results.borrow().node_type_opt(elem.hir_id))\n+                .and_then(|ty| {\n+                    if ty.is_never() {\n+                        None\n+                    } else {\n+                        Some(match &elem.kind {\n+                            // Point at the tail expression when possible.\n+                            hir::ExprKind::Block(block, _) => {\n+                                block.expr.as_ref().map(|e| e.span).unwrap_or(block.span)\n                             }\n+                            _ => elem.span,\n                         })\n+                    }\n                 })\n-                .collect();\n-            if arm_spans.len() == 1 {\n-                return arm_spans[0];\n+        };\n+\n+        if let hir::ExprKind::If(_, _, Some(el)) = &expr.kind {\n+            if let Some(rslt) = check_in_progress(el) {\n+                return rslt;\n             }\n         }\n+\n+        if let hir::ExprKind::Match(_, arms, _) = &expr.kind {\n+            let mut iter = arms.iter().filter_map(|arm| check_in_progress(&arm.body));\n+            if let Some(span) = iter.next() {\n+                if iter.next().is_none() {\n+                    return span;\n+                }\n+            }\n+        }\n+\n         expr.span\n     }\n "}, {"sha": "a0465ca6aef07f2047f884535cf086bc67605a98", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -390,6 +390,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ExprKind::Call(..)\n                 | ExprKind::MethodCall(..)\n                 | ExprKind::Loop(..)\n+                | ExprKind::If(..)\n                 | ExprKind::Match(..)\n                 | ExprKind::Block(..) => {\n                     err.span_suggestion("}, {"sha": "01519e4c8f7c495aeff7541d2d14db2292384fce", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -219,6 +219,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.consume_exprs(exprs);\n             }\n \n+            hir::ExprKind::If(ref cond_expr, ref then_expr, ref opt_else_expr) => {\n+                self.consume_expr(&cond_expr);\n+                self.consume_expr(&then_expr);\n+                if let Some(ref else_expr) = *opt_else_expr {\n+                    self.consume_expr(&else_expr);\n+                }\n+            }\n+\n             hir::ExprKind::Match(ref discr, arms, _) => {\n                 let discr_place = return_if_err!(self.mc.cat_expr(&discr));\n                 self.borrow_expr(&discr, ty::ImmBorrow);"}, {"sha": "37f9e3d63b83022ad11d139af8494b688d23bfa6", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -364,6 +364,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Cast(..)\n             | hir::ExprKind::DropTemps(..)\n             | hir::ExprKind::Array(..)\n+            | hir::ExprKind::If(..)\n             | hir::ExprKind::Tup(..)\n             | hir::ExprKind::Binary(..)\n             | hir::ExprKind::Block(..)"}, {"sha": "ca8daae152cdd93c72c68ebf9ad98c6f7be84aa1", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -94,7 +94,7 @@ pub fn add_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;"}, {"sha": "64c270393735a5b9a106c31bb382043f17f5db67", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -9,18 +9,12 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n -         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n--         switchInt(_1) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n+-         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n +         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-+         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n++         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n       }\n   \n       bb1: {\n-          _0 = const ();                   // scope 0 at $DIR/control-flow-simplification.rs:14:6: 14:6\n-          StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:15:1: 15:2\n-          return;                          // scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n-      }\n-  \n-      bb2: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n           begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n@@ -33,5 +27,11 @@\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n       }\n+  \n+      bb2: {\n+          _0 = const ();                   // scope 0 at $DIR/control-flow-simplification.rs:14:6: 14:6\n+          StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:14:5: 14:6\n+          return;                          // scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n+      }\n   }\n   "}, {"sha": "eeedbb215c0dd682b320782c75258b4c1c5ec71c", "filename": "src/test/mir-opt/coverage_graphviz.main.InstrumentCoverage.0.dot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -3,8 +3,8 @@ digraph Cov_0_3 {\n     node [fontname=\"Courier, monospace\"];\n     edge [fontname=\"Courier, monospace\"];\n     bcb2__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb2</td></tr><tr><td align=\"left\" balign=\"left\">Expression(bcb0 - bcb1) at 13:10-13:10<br/>    13:10-13:10: @4[0]: Coverage::Expression(4294967295) = 1 - 2 for $DIR/coverage_graphviz.rs:13:10 - 13:11</td></tr><tr><td align=\"left\" balign=\"left\">bb4: Goto</td></tr></table>>];\n-    bcb1__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb1</td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb1) at 12:13-12:18<br/>    12:13-12:18: @5[0]: _0 = const ()<br/>Expression(bcb1 + 0) at 15:2-15:2<br/>    15:2-15:2: @5.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb3: FalseEdge</td></tr><tr><td align=\"left\" balign=\"left\">bb5: Return</td></tr></table>>];\n-    bcb0__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 9:1-11:17<br/>    11:12-11:17: @1.Call: _2 = bar() -&gt; [return: bb2, unwind: bb6]<br/>    11:12-11:17: @2[0]: FakeRead(ForMatchedPlace, _2)</td></tr><tr><td align=\"left\" balign=\"left\">bb0: FalseUnwind<br/>bb1: Call</td></tr><tr><td align=\"left\" balign=\"left\">bb2: SwitchInt</td></tr></table>>];\n+    bcb1__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb1</td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb1) at 12:13-12:18<br/>    12:13-12:18: @3[0]: Coverage::Expression(4294967294) = 2 + 0 for $DIR/coverage_graphviz.rs:15:1 - 15:2<br/>Expression(bcb1 + 0) at 15:2-15:2<br/>    15:2-15:2: @3.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb3: Return</td></tr></table>>];\n+    bcb0__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 9:1-11:17<br/>    11:12-11:17: @1.Call: _2 = bar() -&gt; [return: bb2, unwind: bb5]</td></tr><tr><td align=\"left\" balign=\"left\">bb0: FalseUnwind<br/>bb1: Call</td></tr><tr><td align=\"left\" balign=\"left\">bb2: SwitchInt</td></tr></table>>];\n     bcb2__Cov_0_3 -> bcb0__Cov_0_3 [label=<>];\n     bcb0__Cov_0_3 -> bcb2__Cov_0_3 [label=<false>];\n     bcb0__Cov_0_3 -> bcb1__Cov_0_3 [label=<otherwise>];"}, {"sha": "6d2dbb820f9621212b3d59ccbf098f8baae79a34", "filename": "src/test/mir-opt/deaggregator_test_enum_2.test1.Deaggregator.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -12,20 +12,10 @@\n       bb0: {\n           StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n           _3 = _1;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n-          switchInt(_3) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+          switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n-          _5 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n--         _0 = Foo::B(move _5);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n-+         ((_0 as B).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n-+         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n-          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18\n-          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n-      }\n-  \n-      bb2: {\n           StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n           _4 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n -         _0 = Foo::A(move _4);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n@@ -35,8 +25,18 @@\n           goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n       }\n   \n+      bb2: {\n+          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n+          _5 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n+-         _0 = Foo::B(move _5);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n++         ((_0 as B).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n++         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n+          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18\n+          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+      }\n+  \n       bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:15:1: 15:2\n+          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:14:5: 14:6\n           return;                          // scope 0 at $DIR/deaggregator_test_enum_2.rs:15:2: 15:2\n       }\n   }"}, {"sha": "e11d24cac8c2edbb42dfb78f420f8c48a855617c", "filename": "src/test/mir-opt/dest-prop/branch.main.DestinationPropagation.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -36,23 +36,23 @@\n       }\n   \n       bb2: {\n-          switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 1 at $DIR/branch.rs:15:13: 20:6\n+          switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:15:13: 20:6\n       }\n   \n       bb3: {\n+-         _2 = _1;                         // scope 1 at $DIR/branch.rs:16:9: 16:10\n++         nop;                             // scope 1 at $DIR/branch.rs:16:9: 16:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n+      }\n+  \n+      bb4: {\n           StorageLive(_4);                 // scope 1 at $DIR/branch.rs:18:9: 18:14\n           _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:18:9: 18:14\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:18:9: 18:12\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb4: {\n--         _2 = _1;                         // scope 1 at $DIR/branch.rs:16:9: 16:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:16:9: 16:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n-      }\n-  \n       bb5: {\n           StorageDead(_4);                 // scope 1 at $DIR/branch.rs:18:14: 18:15\n -         _2 = _1;                         // scope 1 at $DIR/branch.rs:19:9: 19:10\n@@ -61,7 +61,7 @@\n       }\n   \n       bb6: {\n-          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:20:6: 20:7\n+          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:20:5: 20:6\n           _0 = const ();                   // scope 0 at $DIR/branch.rs:12:11: 21:2\n -         StorageDead(_2);                 // scope 1 at $DIR/branch.rs:21:1: 21:2\n -         StorageDead(_1);                 // scope 0 at $DIR/branch.rs:21:1: 21:2"}, {"sha": "1bc4c0f8b37e3c1e54ab51a42d205c7a8e4e53f9", "filename": "src/test/mir-opt/equal_true.opt.InstCombine.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -14,21 +14,21 @@\n -         _2 = Eq(move _3, const true);    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n +         _2 = move _3;                    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n           StorageDead(_3);                 // scope 0 at $DIR/equal_true.rs:4:16: 4:17\n-          switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n       }\n   \n       bb1: {\n-          _0 = const 1_i32;                // scope 0 at $DIR/equal_true.rs:4:31: 4:32\n+          _0 = const 0_i32;                // scope 0 at $DIR/equal_true.rs:4:20: 4:21\n           goto -> bb3;                     // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n       }\n   \n       bb2: {\n-          _0 = const 0_i32;                // scope 0 at $DIR/equal_true.rs:4:20: 4:21\n+          _0 = const 1_i32;                // scope 0 at $DIR/equal_true.rs:4:31: 4:32\n           goto -> bb3;                     // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/equal_true.rs:5:1: 5:2\n+          StorageDead(_2);                 // scope 0 at $DIR/equal_true.rs:4:33: 4:34\n           return;                          // scope 0 at $DIR/equal_true.rs:5:2: 5:2\n       }\n   }"}, {"sha": "875e5a0a71f336272d4dbe4512503c005328d319", "filename": "src/test/mir-opt/if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -9,21 +9,21 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n           _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n-          switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n       }\n   \n       bb1: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:17:23: 17:24\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:17:12: 17:13\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n       }\n   \n       bb2: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:17:12: 17:13\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:17:23: 17:24\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:18:1: 18:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:25: 17:26\n           return;                          // scope 0 at $DIR/if-condition-int.rs:18:2: 18:2\n       }\n   }"}, {"sha": "2c4952402a49d907783efd663300622e5763306a", "filename": "src/test/mir-opt/if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -16,21 +16,21 @@\n                                            // + span: $DIR/if-condition-int.rs:53:13: 53:18\n                                            // + literal: Const { ty: f32, val: Value(Scalar(0xc2280000)) }\n           StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:53:17: 53:18\n-          switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n       }\n   \n       bb1: {\n-          _0 = const 1_i32;                // scope 0 at $DIR/if-condition-int.rs:53:32: 53:33\n+          _0 = const 0_i32;                // scope 0 at $DIR/if-condition-int.rs:53:21: 53:22\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n       }\n   \n       bb2: {\n-          _0 = const 0_i32;                // scope 0 at $DIR/if-condition-int.rs:53:21: 53:22\n+          _0 = const 1_i32;                // scope 0 at $DIR/if-condition-int.rs:53:32: 53:33\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:54:1: 54:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:53:34: 53:35\n           return;                          // scope 0 at $DIR/if-condition-int.rs:54:2: 54:2\n       }\n   }"}, {"sha": "661591658df89c0c1ccc1d7fa5fbd1d3ba76c358", "filename": "src/test/mir-opt/if_condition_int.opt_char.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -13,26 +13,26 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n -         _2 = Eq(move _3, const 'x');     // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n--         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n-+         _2 = Eq(_3, const 'x');          // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n-+         switchInt(move _3) -> ['x': bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n++         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n       }\n   \n       bb1: {\n +         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:21:30: 21:31\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:21:19: 21:20\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n       }\n   \n       bb2: {\n +         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:21:19: 21:20\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:21:30: 21:31\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:22:1: 22:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:32: 21:33\n           return;                          // scope 0 at $DIR/if-condition-int.rs:22:2: 22:2\n       }\n   }"}, {"sha": "7d0ed7338d7d230651c980c4a14ad48f685dce61", "filename": "src/test/mir-opt/if_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -13,26 +13,26 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n -         _2 = Eq(move _3, const 42_i8);   // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n--         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n-+         _2 = Eq(_3, const 42_i8);        // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n-+         switchInt(move _3) -> [42_i8: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n++         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n       }\n   \n       bb1: {\n +         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:25:29: 25:30\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:25:18: 25:19\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n       }\n   \n       bb2: {\n +         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:25:18: 25:19\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:25:29: 25:30\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:26:1: 26:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:25:31: 25:32\n           return;                          // scope 0 at $DIR/if-condition-int.rs:26:2: 26:2\n       }\n   }"}, {"sha": "bf388a141b617a198689e15a1f921fafd3e3fece", "filename": "src/test/mir-opt/if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -15,40 +15,40 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n -         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n--         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n-+         _2 = Eq(_3, const 42_u32);       // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n-+         switchInt(move _3) -> [42_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n       }\n   \n       bb1: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:34:9: 34:10\n+          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n+      }\n+  \n+      bb2: {\n +         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n           StorageLive(_4);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n           StorageLive(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n           _5 = _1;                         // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n -         _4 = Ne(move _5, const 21_u32);  // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n -         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n--         switchInt(_4) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n-+         _4 = Ne(_5, const 21_u32);       // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n+-         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n-+         switchInt(move _5) -> [21_u32: bb3, otherwise: bb4]; // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n-      }\n-  \n-      bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:34:9: 34:10\n-          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n++         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n       }\n   \n       bb3: {\n +         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n-          _0 = const 2_u32;                // scope 0 at $DIR/if-condition-int.rs:38:9: 38:10\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:36:9: 36:10\n           goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n       }\n   \n       bb4: {\n +         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:36:9: 36:10\n+          _0 = const 2_u32;                // scope 0 at $DIR/if-condition-int.rs:38:9: 38:10\n           goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n       }\n   \n@@ -58,7 +58,7 @@\n       }\n   \n       bb6: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:40:1: 40:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:39:5: 39:6\n           return;                          // scope 0 at $DIR/if-condition-int.rs:40:2: 40:2\n       }\n   }"}, {"sha": "bee2e030b7ed55126fb2b87e3e9655aee6c354ec", "filename": "src/test/mir-opt/if_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -13,26 +13,26 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n -         _2 = Eq(move _3, const -42_i32); // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n--         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n-+         _2 = Eq(_3, const -42_i32);      // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n-+         switchInt(move _3) -> [-42_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n++         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n       }\n   \n       bb1: {\n +         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:29:30: 29:31\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:29:19: 29:20\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n       }\n   \n       bb2: {\n +         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:29:19: 29:20\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:29:30: 29:31\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:30:1: 30:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:32: 29:33\n           return;                          // scope 0 at $DIR/if-condition-int.rs:30:2: 30:2\n       }\n   }"}, {"sha": "09a87591be10793a283ad2de3822e642b2db3b87", "filename": "src/test/mir-opt/if_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -13,26 +13,26 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n -         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n--         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n-+         _2 = Eq(_3, const 42_u32);       // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n-+         switchInt(move _3) -> [42_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n       }\n   \n       bb1: {\n +         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:12:29: 12:30\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:12:18: 12:19\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n       }\n   \n       bb2: {\n +         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:12:18: 12:19\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:12:29: 12:30\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:13:1: 13:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:31: 12:32\n           return;                          // scope 0 at $DIR/if-condition-int.rs:13:2: 13:2\n       }\n   }"}, {"sha": "a746baa63eb53ee8cc9fe33fbec9e25dbdf18354", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -19,10 +19,19 @@\n           _3 = _1;                         // scope 0 at $DIR/inline-diverging.rs:13:8: 13:9\n           _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n           StorageDead(_3);                 // scope 0 at $DIR/inline-diverging.rs:13:12: 13:13\n-          switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/inline-diverging.rs:13:5: 17:6\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline-diverging.rs:13:5: 17:6\n       }\n   \n       bb1: {\n+          StorageLive(_4);                 // scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n+          _4 = _1;                         // scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n+          _0 = move _4 as u32 (Misc);      // scope 0 at $DIR/inline-diverging.rs:14:9: 14:17\n+          StorageDead(_4);                 // scope 0 at $DIR/inline-diverging.rs:14:16: 14:17\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-diverging.rs:17:5: 17:6\n+          return;                          // scope 0 at $DIR/inline-diverging.rs:18:2: 18:2\n+      }\n+  \n+      bb2: {\n           StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n -         panic();                         // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n@@ -39,14 +48,5 @@\n +                                          // + span: $DIR/inline-diverging.rs:16:9: 16:16\n +                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n       }\n-  \n-      bb2: {\n-          StorageLive(_4);                 // scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n-          _4 = _1;                         // scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n-          _0 = move _4 as u32 (Misc);      // scope 0 at $DIR/inline-diverging.rs:14:9: 14:17\n-          StorageDead(_4);                 // scope 0 at $DIR/inline-diverging.rs:14:16: 14:17\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-diverging.rs:18:1: 18:2\n-          return;                          // scope 0 at $DIR/inline-diverging.rs:18:2: 18:2\n-      }\n   }\n   "}, {"sha": "066ac8d82d36bb405c6631ddb6d08ffd5f529299", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -90,16 +90,16 @@\n + \n +     bb3: {\n +         _8 = move _7;                    // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         switchInt(_8) -> [false: bb4, otherwise: bb5]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         switchInt(move _8) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +     }\n + \n +     bb4: {\n-+         ((_1 as Yielded).0: i32) = const 13_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         ((_1 as Yielded).0: i32) = const 7_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +     }\n + \n +     bb5: {\n-+         ((_1 as Yielded).0: i32) = const 7_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         ((_1 as Yielded).0: i32) = const 13_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +     }\n + "}, {"sha": "ee8fcdcde4095ef23ae91740074dd86d539a4b12", "filename": "src/test/mir-opt/inst_combine_deref.do_not_miscompile.InstCombine.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Finst_combine_deref.do_not_miscompile.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Finst_combine_deref.do_not_miscompile.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finst_combine_deref.do_not_miscompile.InstCombine.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -53,22 +53,10 @@\n           StorageDead(_10);                // scope 4 at $DIR/inst_combine_deref.rs:60:20: 60:21\n           _8 = Not(move _9);               // scope 4 at $DIR/inst_combine_deref.rs:60:5: 60:23\n           StorageDead(_9);                 // scope 4 at $DIR/inst_combine_deref.rs:60:22: 60:23\n-          switchInt(_8) -> [false: bb1, otherwise: bb2]; // scope 4 at $DIR/inst_combine_deref.rs:60:5: 60:23\n+          switchInt(move _8) -> [false: bb2, otherwise: bb1]; // scope 4 at $DIR/inst_combine_deref.rs:60:5: 60:23\n       }\n   \n       bb1: {\n-          _7 = const ();                   // scope 4 at $DIR/inst_combine_deref.rs:60:23: 60:23\n-          StorageDead(_8);                 // scope 4 at $DIR/inst_combine_deref.rs:60:22: 60:23\n-          StorageDead(_7);                 // scope 4 at $DIR/inst_combine_deref.rs:60:22: 60:23\n-          _0 = const ();                   // scope 0 at $DIR/inst_combine_deref.rs:54:24: 61:2\n-          StorageDead(_4);                 // scope 3 at $DIR/inst_combine_deref.rs:61:1: 61:2\n-          StorageDead(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:61:1: 61:2\n-          StorageDead(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:61:1: 61:2\n-          StorageDead(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:61:1: 61:2\n-          return;                          // scope 0 at $DIR/inst_combine_deref.rs:61:2: 61:2\n-      }\n-  \n-      bb2: {\n           StorageLive(_11);                // scope 4 at $DIR/inst_combine_deref.rs:60:5: 60:23\n           core::panicking::panic(const \"assertion failed: *y == 99\"); // scope 4 at $DIR/inst_combine_deref.rs:60:5: 60:23\n                                            // mir::Constant\n@@ -81,5 +69,17 @@\n                                            // + span: $DIR/inst_combine_deref.rs:1:1: 1:1\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 42, 121, 32, 61, 61, 32, 57, 57], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, size: Size { raw: 26 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 }) }\n       }\n+  \n+      bb2: {\n+          _7 = const ();                   // scope 4 at $DIR/inst_combine_deref.rs:60:23: 60:23\n+          StorageDead(_8);                 // scope 4 at $DIR/inst_combine_deref.rs:60:22: 60:23\n+          StorageDead(_7);                 // scope 4 at $DIR/inst_combine_deref.rs:60:22: 60:23\n+          _0 = const ();                   // scope 0 at $DIR/inst_combine_deref.rs:54:24: 61:2\n+          StorageDead(_4);                 // scope 3 at $DIR/inst_combine_deref.rs:61:1: 61:2\n+          StorageDead(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:61:1: 61:2\n+          StorageDead(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:61:1: 61:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:61:1: 61:2\n+          return;                          // scope 0 at $DIR/inst_combine_deref.rs:61:2: 61:2\n+      }\n   }\n   "}, {"sha": "226db9558ef46bce9622b8b751408caab69ecd18", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -9,42 +9,37 @@\n   \n       bb0: {\n +         Coverage::Counter(1) for /the/src/instrument_coverage.rs:10:1 - 12:17; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n-          falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n+          falseUnwind -> [real: bb1, cleanup: bb5]; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n       bb1: {\n           StorageLive(_2);                 // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n-          _2 = bar() -> [return: bb2, unwind: bb6]; // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n+          _2 = bar() -> [return: bb2, unwind: bb5]; // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n                                            // mir::Constant\n                                            // + span: /the/src/instrument_coverage.rs:12:12: 12:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {\n-          FakeRead(ForMatchedPlace, _2);   // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n-          switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n+          switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n       }\n   \n       bb3: {\n-+         Coverage::Expression(4294967294) = 2 + 0 for /the/src/instrument_coverage.rs:16:1 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n-+         Coverage::Counter(2) for /the/src/instrument_coverage.rs:13:13 - 13:18; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n-          falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n++         Coverage::Expression(4294967294) = 2 + 0 for /the/src/instrument_coverage.rs:16:1 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n++         Coverage::Counter(2) for /the/src/instrument_coverage.rs:13:13 - 13:18; // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n+          _0 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:13:13: 13:18\n+          StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:14:9: 14:10\n+          return;                          // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n       }\n   \n       bb4: {\n +         Coverage::Expression(4294967295) = 1 - 2 for /the/src/instrument_coverage.rs:14:10 - 14:11; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n           _1 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:14:10: 14:10\n-          StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n+          StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:14:9: 14:10\n           goto -> bb0;                     // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n-      bb5: {\n-          _0 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:13:13: 13:18\n-          StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n-          return;                          // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n-      }\n-  \n-      bb6 (cleanup): {\n+      bb5 (cleanup): {\n           resume;                          // scope 0 at /the/src/instrument_coverage.rs:10:1: 16:2\n       }\n   }"}, {"sha": "e9e5a101a64a5f56c26064405852f90bcc059bfd", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -19,19 +19,22 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb6]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        falseUnwind -> [real: bb2, cleanup: bb5]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n     bb2: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         _4 = _1;                         // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        FakeRead(ForMatchedPlace, _4);   // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        switchInt(_4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb5, imaginary: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:12:1: 12:2\n+        return;                          // scope 0 at $DIR/issue-38669.rs:12:2: 12:2\n     }\n \n     bb4: {\n@@ -43,15 +46,7 @@ fn main() -> () {\n         goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n-    bb5: {\n-        _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:12:1: 12:2\n-        return;                          // scope 0 at $DIR/issue-38669.rs:12:2: 12:2\n-    }\n-\n-    bb6 (cleanup): {\n+    bb5 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n     }\n }"}, {"sha": "4fc7f9daa22b9cde483418d8ad11250cf64414b4", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -33,15 +33,10 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        switchInt(move _2) -> [false: bb3, otherwise: bb2]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n     bb2: {\n-        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:14:6: 14:6\n-        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n-    }\n-\n-    bb3: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageLive(_4);                 // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n         _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n@@ -50,6 +45,11 @@ fn main() -> () {\n         goto -> bb12;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n+    bb3: {\n+        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:14:6: 14:6\n+        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+    }\n+\n     bb4: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n         _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n@@ -71,6 +71,7 @@ fn main() -> () {\n     }\n \n     bb7: {\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-41888.rs:14:5: 14:6\n         goto -> bb18;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n@@ -79,7 +80,6 @@ fn main() -> () {\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _9 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         StorageDead(_1);                 // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n "}, {"sha": "435b2a1360a6b9da53d42c5142246326f1b006ac", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -99,19 +99,10 @@\n           StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(_9) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n-      }\n-  \n-      bb2: {\n           _13 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n@@ -143,6 +134,15 @@\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n+      bb2: {\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n       bb3: {\n           (_20.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "435b2a1360a6b9da53d42c5142246326f1b006ac", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -99,19 +99,10 @@\n           StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(_9) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n-      }\n-  \n-      bb2: {\n           _13 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n@@ -143,6 +134,15 @@\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n+      bb2: {\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n       bb3: {\n           (_20.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "d87cb2af8baac15ce33f9334f73dc1de7eb16e6f", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -151,23 +151,10 @@\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(_15) -> [false: bb3, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _15) -> [false: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb3: {\n-          _8 = const ();                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n-          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n-      }\n-  \n-      bb4: {\n           StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -222,6 +209,19 @@\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n+      bb4: {\n+          _8 = const ();                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n       bb5: {\n           StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "d87cb2af8baac15ce33f9334f73dc1de7eb16e6f", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -151,23 +151,10 @@\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(_15) -> [false: bb3, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _15) -> [false: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb3: {\n-          _8 = const ();                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n-          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n-      }\n-  \n-      bb4: {\n           StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -222,6 +209,19 @@\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n+      bb4: {\n+          _8 = const ();                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n       bb5: {\n           StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "f109937dbf937f0a1d218d69b21e84f8df4dc581", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -16,42 +16,37 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n         StorageLive(_2);                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n         _2 = const true;                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15\n+        StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2\n     }\n \n     bb2: {\n         _1 = const ();                   // scope 0 at $DIR/loop_test.rs:12:6: 12:6\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageLive(_4);                 // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n-        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+        goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n     bb3: {\n-        _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15\n-        StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n-        StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n-        return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2\n+        falseUnwind -> [real: bb4, cleanup: bb5]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n     bb4: {\n-        falseUnwind -> [real: bb5, cleanup: bb6]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n-    }\n-\n-    bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n         FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n-        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n+        goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n     }\n \n-    bb6 (cleanup): {\n+    bb5 (cleanup): {\n         resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n     }\n }"}, {"sha": "740a6e0edb0c4c132425de3fc5756eb5f68bac2f", "filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -3,24 +3,28 @@\n fn f_u64() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:16\n     scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        debug t => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        let _1: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        let mut _2: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        let mut _1: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:35:5: 35:21\n         }\n     }\n \n     bb0: {\n-        _2 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        _1 = f_non_zst::<u64>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        _1 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics.rs:35:5: 35:21\n                                          // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:34:16: 36:2\n         return;                          // scope 0 at $DIR/lower_intrinsics.rs:36:2: 36:2\n     }"}, {"sha": "95beab2ec9af75b6859a6b044330fc8ddc81ea3a", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 46, "deletions": 56, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -47,30 +47,30 @@\n       }\n   \n       bb3: {\n--         falseEdge -> [real: bb14, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:25: 15:38\n+-         falseEdge -> [real: bb13, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:25: 15:38\n -     }\n - \n -     bb4: {\n -         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n -     }\n - \n -     bb5: {\n--         falseEdge -> [real: bb22, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:21\n+-         falseEdge -> [real: bb20, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:21\n -     }\n - \n -     bb6: {\n           StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n           _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n           StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n           _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n--         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n -     bb7: {\n +     bb4: {\n           _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         drop(_7) -> [return: bb20, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         drop(_7) -> [return: bb18, unwind: bb25]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n +         drop(_7) -> [return: bb15, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n       }\n   \n@@ -85,33 +85,28 @@\n           StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n           StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n           _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         FakeRead(ForMatchedPlace, _10);  // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(_10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(_10) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(move _10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _10) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n -     bb9: {\n--         falseEdge -> [real: bb11, imaginary: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n--     }\n-- \n--     bb10: {\n +     bb6: {\n-          _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n+          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n--         switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+          StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n++         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n       }\n   \n--     bb11: {\n+-     bb10: {\n +     bb7: {\n-          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+          _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n           StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n-          StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n-+         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+-         switchInt(move _9) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb12: {\n+-     bb11: {\n +     bb8: {\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n@@ -126,7 +121,7 @@\n +         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb13: {\n+-     bb12: {\n +     bb9: {\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n@@ -135,7 +130,7 @@\n +         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb14: {\n+-     bb13: {\n +     bb10: {\n           StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n           _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n@@ -146,33 +141,28 @@\n           StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n           StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n           _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         FakeRead(ForMatchedPlace, _13);  // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(_13) -> [false: bb16, otherwise: bb15]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(_13) -> [false: bb11, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(move _13) -> [false: bb15, otherwise: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _13) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb15: {\n--         falseEdge -> [real: bb17, imaginary: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n--     }\n-- \n--     bb16: {\n+-     bb14: {\n +     bb11: {\n-          _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n+          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n--         switchInt(move _12) -> [false: bb19, otherwise: bb18]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n++         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n       }\n   \n--     bb17: {\n+-     bb15: {\n +     bb12: {\n-          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+          _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n           StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n-          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n-+         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+-         switchInt(move _12) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb18: {\n+-     bb16: {\n +     bb13: {\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n@@ -187,7 +177,7 @@\n +         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb19: {\n+-     bb17: {\n +     bb14: {\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n@@ -196,67 +186,67 @@\n +         goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb20: {\n+-     bb18: {\n +     bb15: {\n           StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb22;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb21: {\n+-     bb19: {\n +     bb16: {\n           _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:16:41: 16:42\n--         drop(_16) -> [return: bb23, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+-         drop(_16) -> [return: bb21, unwind: bb25]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n +         drop(_16) -> [return: bb18, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n       }\n   \n--     bb22: {\n+-     bb20: {\n +     bb17: {\n           StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n           _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n           StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n           _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n--         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb23: {\n+-     bb21: {\n +     bb18: {\n           StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n           StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n--         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb22;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb24: {\n--         drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+-     bb22: {\n+-         drop(_2) -> [return: bb24, unwind: bb26]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +     bb19: {\n +         goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n       }\n   \n--     bb25: {\n+-     bb23: {\n +     bb20: {\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+-         drop(_2) -> [return: bb24, unwind: bb26]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +         drop(_2) -> [return: bb21, unwind: bb23]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n       }\n   \n--     bb26: {\n+-     bb24: {\n +     bb21: {\n           return;                          // scope 0 at $DIR/match-arm-scopes.rs:18:2: 18:2\n       }\n   \n--     bb27 (cleanup): {\n--         drop(_2) -> bb28;                // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+-     bb25 (cleanup): {\n+-         drop(_2) -> bb26;                // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +     bb22 (cleanup): {\n +         goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n       }\n   \n--     bb28 (cleanup): {\n+-     bb26 (cleanup): {\n +     bb23 (cleanup): {\n           resume;                          // scope 0 at $DIR/match-arm-scopes.rs:13:1: 18:2\n +     }"}, {"sha": "20240348230f227ba0f616e263ce461e859c8140", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -30,7 +30,7 @@\n       }\n   \n       bb3: {\n-          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:7:5: 9:6\n+          switchInt(move _2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:7:5: 9:6\n       }\n   \n       bb4: {\n@@ -39,7 +39,7 @@\n       }\n   \n       bb5: {\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:10:1: 10:2\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:9:5: 9:6\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:10:2: 10:2\n       }\n   }"}, {"sha": "20240348230f227ba0f616e263ce461e859c8140", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -30,7 +30,7 @@\n       }\n   \n       bb3: {\n-          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:7:5: 9:6\n+          switchInt(move _2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:7:5: 9:6\n       }\n   \n       bb4: {\n@@ -39,7 +39,7 @@\n       }\n   \n       bb5: {\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:10:1: 10:2\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:9:5: 9:6\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:10:2: 10:2\n       }\n   }"}, {"sha": "1d895852354c9da86b1dbed8acc0ca486f29885a", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -25,9 +25,9 @@\n           StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n           StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n           _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n--         switchInt(_6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+-         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n +         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n-+         _7 = _6;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         _7 = move _6;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n +         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:42: 40:47\n +         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n +         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n@@ -45,41 +45,41 @@\n   \n       bb3: {\n           StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:47: 40:48\n--         switchInt(_5) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+-         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n +         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n-+         _8 = _5;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         _8 = move _5;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n +         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n +         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n +         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n       }\n   \n       bb4: {\n-          _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n+          _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:50: 40:54\n           goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n       }\n   \n       bb5: {\n-          _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:50: 40:54\n+          _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n           goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n       }\n   \n       bb6: {\n           StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:67: 40:68\n--         switchInt(_4) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+-         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n +         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n-+         _9 = _4;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         _9 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n +         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n +         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n +         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n       }\n   \n       bb7: {\n-          _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n+          _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:70: 40:74\n           goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n       }\n   \n       bb8: {\n-          _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:70: 40:74\n+          _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n           goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n       }\n   "}, {"sha": "1d895852354c9da86b1dbed8acc0ca486f29885a", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -25,9 +25,9 @@\n           StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n           StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n           _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n--         switchInt(_6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+-         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n +         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n-+         _7 = _6;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         _7 = move _6;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n +         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:42: 40:47\n +         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n +         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n@@ -45,41 +45,41 @@\n   \n       bb3: {\n           StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:47: 40:48\n--         switchInt(_5) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+-         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n +         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n-+         _8 = _5;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         _8 = move _5;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n +         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n +         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n +         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n       }\n   \n       bb4: {\n-          _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n+          _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:50: 40:54\n           goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n       }\n   \n       bb5: {\n-          _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:50: 40:54\n+          _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n           goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n       }\n   \n       bb6: {\n           StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:67: 40:68\n--         switchInt(_4) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+-         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n +         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n-+         _9 = _4;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         _9 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n +         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n +         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n +         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n       }\n   \n       bb7: {\n-          _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n+          _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:70: 40:74\n           goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n       }\n   \n       bb8: {\n-          _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:70: 40:74\n+          _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n           goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n       }\n   "}, {"sha": "fb25cb90021f3b302aa01084d8b7de39b3c85c3c", "filename": "src/test/mir-opt/multiple_return_terminators.test.MultipleReturnTerminators.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmultiple_return_terminators.test.MultipleReturnTerminators.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fmultiple_return_terminators.test.MultipleReturnTerminators.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmultiple_return_terminators.test.MultipleReturnTerminators.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -9,21 +9,21 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/multiple_return_terminators.rs:5:8: 5:9\n           _2 = _1;                         // scope 0 at $DIR/multiple_return_terminators.rs:5:8: 5:9\n-          switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/multiple_return_terminators.rs:5:5: 9:6\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/multiple_return_terminators.rs:5:5: 9:6\n       }\n   \n       bb1: {\n-          _0 = const ();                   // scope 0 at $DIR/multiple_return_terminators.rs:7:12: 9:6\n+          _0 = const ();                   // scope 0 at $DIR/multiple_return_terminators.rs:5:10: 7:6\n           goto -> bb3;                     // scope 0 at $DIR/multiple_return_terminators.rs:5:5: 9:6\n       }\n   \n       bb2: {\n-          _0 = const ();                   // scope 0 at $DIR/multiple_return_terminators.rs:5:10: 7:6\n+          _0 = const ();                   // scope 0 at $DIR/multiple_return_terminators.rs:7:12: 9:6\n           goto -> bb3;                     // scope 0 at $DIR/multiple_return_terminators.rs:5:5: 9:6\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/multiple_return_terminators.rs:10:1: 10:2\n+          StorageDead(_2);                 // scope 0 at $DIR/multiple_return_terminators.rs:9:5: 9:6\n           return;                          // scope 0 at $DIR/multiple_return_terminators.rs:10:2: 10:2\n       }\n   }"}, {"sha": "8c939d5fc3da5fa37a924b6c349886de23ee49a3", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -5,19 +5,19 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n-| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n-| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r | U0 | {bb1[0..=7], bb2[0..=2]}\n+| '_#4r | U0 | {bb1[1..=7], bb2[0..=2]}\n+| '_#5r | U0 | {bb1[4..=7], bb2[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0]}\n | '_#3r live at {bb1[0]}\n | '_#4r live at {bb1[1..=3]}\n-| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#5r live at {bb1[4..=7], bb2[0..=2]}\n | '_#3r: '_#4r due to Assignment at Single(bb1[0])\n | '_#4r: '_#5r due to Assignment at Single(bb1[3])\n |\n@@ -52,7 +52,7 @@ fn main() -> () {\n         _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb7]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n     bb1: {\n@@ -63,55 +63,50 @@ fn main() -> () {\n         FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb4, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n         StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb5, unwind: bb7]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb4: {\n-        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n-                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+        StorageDead(_9);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        goto -> bb6;                     // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb5: {\n-        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb6: {\n-        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n-        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb7: {\n-        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+        StorageDead(_7);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:24:5: 24:6\n+        StorageDead(_6);                 // bb6[1]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb6[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb6[3]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb6[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb6[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n \n-    bb8 (cleanup): {\n-        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb7 (cleanup): {\n+        resume;                          // bb7[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n     }\n }"}, {"sha": "00704baa6c19fbb9932bbc3b06143e50feafa7aa", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -5,19 +5,19 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n-| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n-| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r | U0 | {bb1[0..=7], bb2[0..=2]}\n+| '_#4r | U0 | {bb1[1..=7], bb2[0..=2]}\n+| '_#5r | U0 | {bb1[4..=7], bb2[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0]}\n | '_#3r live at {bb1[0]}\n | '_#4r live at {bb1[1..=3]}\n-| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#5r live at {bb1[4..=7], bb2[0..=2]}\n | '_#3r: '_#4r due to Assignment at Single(bb1[0])\n | '_#4r: '_#5r due to Assignment at Single(bb1[3])\n |\n@@ -52,7 +52,7 @@ fn main() -> () {\n         _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb7]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n     bb1: {\n@@ -63,55 +63,50 @@ fn main() -> () {\n         FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb4, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n         StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb5, unwind: bb7]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb4: {\n-        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n-                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+        StorageDead(_9);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        goto -> bb6;                     // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb5: {\n-        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb6: {\n-        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n-        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb7: {\n-        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+        StorageDead(_7);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:24:5: 24:6\n+        StorageDead(_6);                 // bb6[1]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb6[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb6[3]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb6[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb6[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n \n-    bb8 (cleanup): {\n-        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb7 (cleanup): {\n+        resume;                          // bb7[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n     }\n }"}, {"sha": "52e705fdbeba8eeeefd14a0364c91f885ca029d3", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -21,31 +21,26 @@\n       }\n   \n -     bb2: {\n--         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb1: {\n-+         switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         switchInt(move _2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb3: {\n--         goto -> bb5;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n--     }\n-- \n--     bb4: {\n +     bb2: {\n-          _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:9:10: 9:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n-          goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+          _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:9:9: 9:10\n+          return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }\n   \n--     bb5: {\n+-     bb4: {\n +     bb3: {\n-          _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n-          return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+          _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:9:10: 9:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:9:9: 9:10\n+          goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n--     bb6 (cleanup): {\n+-     bb5 (cleanup): {\n -         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n       }\n   }"}, {"sha": "fef3ae2e461d8304dd31813a7ab0ed8b094e587a", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -9,69 +9,63 @@\n   \n       bb0: {\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n-+         falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n++         falseUnwind -> [real: bb1, cleanup: bb5]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n       bb1: {\n--         falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         falseUnwind -> [real: bb2, cleanup: bb10]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n -     bb2: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = bar() -> [return: bb3, unwind: bb11]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         _2 = bar() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = bar() -> [return: bb3, unwind: bb10]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         _2 = bar() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n -     bb3: {\n+-         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb2: {\n-          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-+         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb4: {\n--         falseEdge -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb3: {\n-+         falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+          _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n++         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:9:9: 9:10\n++         return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }\n   \n -     bb5: {\n +     bb4: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:9:10: 9:10\n--         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-+         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n-+         goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n-      }\n-  \n--     bb6: {\n-+     bb5: {\n-          _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n--         goto -> bb10;                    // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         goto -> bb8;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n--     bb7: {\n+-     bb6: {\n -         unreachable;                     // scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n -     }\n - \n--     bb8: {\n--         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb7: {\n+-         goto -> bb8;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n--     bb9: {\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-     bb8: {\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:9:9: 9:10\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n--     }\n-- \n--     bb10: {\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n-          return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n++         goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n--     bb11 (cleanup): {\n-+     bb6 (cleanup): {\n+-     bb9: {\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:9:9: 9:10\n+-         return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+-     }\n+- \n+-     bb10 (cleanup): {\n++     bb5 (cleanup): {\n           resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n       }\n   }"}, {"sha": "2cd57cb8474ecfd203861a66e2424597ce317c1d", "filename": "src/test/mir-opt/simplify_if.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -9,31 +9,31 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n           _1 = const false;                // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n--         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+-         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n++         goto -> bb2;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   \n       bb1: {\n-          _0 = const ();                   // scope 0 at $DIR/simplify_if.rs:8:6: 8:6\n-          goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n-      }\n-  \n-      bb2: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n           _2 = noop() -> bb3;              // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:7:9: 7:13\n                                            // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }\n       }\n   \n+      bb2: {\n+          _0 = const ();                   // scope 0 at $DIR/simplify_if.rs:8:6: 8:6\n+          goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+      }\n+  \n       bb3: {\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_if.rs:7:15: 7:16\n           _0 = const ();                   // scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n           goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   \n       bb4: {\n-          StorageDead(_1);                 // scope 0 at $DIR/simplify_if.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify_if.rs:8:5: 8:6\n           return;                          // scope 0 at $DIR/simplify_if.rs:9:2: 9:2\n       }\n   }"}, {"sha": "70725e5f14f7dfe59df343dc74bd038f7662b508", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -47,21 +47,21 @@\n           _8 = _6;                         // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n           _7 = Gt(move _8, const 42_u8);   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n           StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n-          switchInt(_7) -> [false: bb4, otherwise: bb5]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+          switchInt(move _7) -> [false: bb5, otherwise: bb4]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   \n       bb4: {\n-          _0 = const ();                   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:7:10: 7:10\n+          _0 = const ();                   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n           goto -> bb6;                     // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   \n       bb5: {\n-          _0 = const ();                   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n+          _0 = const ();                   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:7:10: 7:10\n           goto -> bb6;                     // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   \n       bb6: {\n-          StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n+          StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:7:9: 7:10\n           StorageDead(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n           goto -> bb7;                     // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n       }"}, {"sha": "23a3fbd5f46518e0dc10aab5a1472425d497c08c", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -44,18 +44,18 @@\n -         StorageLive(_5);                 // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -         StorageLive(_6);                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n -         _6 = const true;                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n--         switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-         switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n -     bb4: {\n--         _4 = const 42_i32;               // scope 2 at $DIR/unreachable.rs:15:13: 15:20\n--         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:14:16: 16:10\n+-         _4 = const 21_i32;               // scope 2 at $DIR/unreachable.rs:13:13: 13:20\n+-         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:12:17: 14:10\n -         goto -> bb6;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n -     bb5: {\n--         _4 = const 21_i32;               // scope 2 at $DIR/unreachable.rs:13:13: 13:20\n--         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:12:17: 14:10\n+-         _4 = const 42_i32;               // scope 2 at $DIR/unreachable.rs:15:13: 15:20\n+-         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:14:16: 16:10\n -         goto -> bb6;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - "}, {"sha": "3eda18317057b4529d1db0439909b4b524cb0037", "filename": "src/test/mir-opt/unreachable_asm.main.UnreachablePropagation.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -46,18 +46,18 @@\n           StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n           StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n           _6 = const true;                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n-          switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+          switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n       bb4: {\n-          _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n-          _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n+          _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n+          _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n           goto -> bb6;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n       bb5: {\n-          _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n-          _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n+          _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n+          _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n           goto -> bb6;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   "}, {"sha": "d0d52e869d624379335787827388770af18a4190", "filename": "src/test/mir-opt/unreachable_asm_2.main.UnreachablePropagation.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -49,28 +49,28 @@\n           StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n           StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n           _6 = const true;                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n-          switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+          switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n       }\n   \n       bb4: {\n-          StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n-          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 4 at $DIR/unreachable_asm_2.rs:20:22: 20:39\n-          _8 = const ();                   // scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n-          StorageDead(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n-          _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n-          _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n--         goto -> bb6;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-+         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-      }\n-  \n-      bb5: {\n           StorageLive(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n           llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 3 at $DIR/unreachable_asm_2.rs:16:22: 16:39\n           _7 = const ();                   // scope 3 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n           StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n           _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n -         goto -> bb6;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n++         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+      }\n+  \n+      bb5: {\n+          StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n+          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 4 at $DIR/unreachable_asm_2.rs:20:22: 20:39\n+          _8 = const ();                   // scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n+          StorageDead(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n+          _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n+          _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n+-         goto -> bb6;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n -     }\n - \n -     bb6: {"}, {"sha": "2c0cc04085efa70a727b5a4b45fd1ef003635cac", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -45,25 +45,24 @@\n           StorageLive(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n           StorageLive(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n           _6 = _1;                         // scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n--         switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-         switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n +         goto -> bb4;                     // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n       }\n   \n       bb4: {\n--         _5 = const ();                   // scope 2 at $DIR/unreachable_diverging.rs:17:10: 17:10\n--         goto -> bb6;                     // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n--     }\n-- \n--     bb5: {\n -         _5 = loop_forever() -> bb6;      // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n +         _5 = loop_forever() -> bb5;      // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n                                            // + literal: Const { ty: fn() {loop_forever}, val: Value(Scalar(<ZST>)) }\n       }\n   \n+      bb5: {\n+-         _5 = const ();                   // scope 2 at $DIR/unreachable_diverging.rs:17:10: 17:10\n+-         goto -> bb6;                     // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-     }\n+- \n -     bb6: {\n-+     bb5: {\n           StorageDead(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n           StorageDead(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n           StorageLive(_7);                 // scope 2 at $DIR/unreachable_diverging.rs:18:9: 18:22"}, {"sha": "0c034891a80db52a6db4347f3edb4f9810726353", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -40,19 +40,19 @@ fn while_loop(_1: bool) -> () {\n \n     bb4: {\n         StorageDead(_5);                 // scope 0 at $DIR/while-storage.rs:11:22: 11:23\n-        switchInt(_4) -> [false: bb5, otherwise: bb6]; // scope 0 at $DIR/while-storage.rs:11:9: 13:10\n+        switchInt(move _4) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/while-storage.rs:11:9: 13:10\n     }\n \n     bb5: {\n-        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        StorageDead(_2);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        goto -> bb0;                     // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+        _0 = const ();                   // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n+        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:13:9: 13:10\n+        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:1:1: 1:1\n     }\n \n     bb6: {\n-        _0 = const ();                   // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n-        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:1:1: 1:1\n+        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:13:9: 13:10\n+        StorageDead(_2);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n+        goto -> bb0;                     // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n     bb7: {"}, {"sha": "176587af25be05aac85a7236beffa5d8595020c7", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.abort/abort.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.abort%2Fabort.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.abort%2Fabort.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.abort%2Fabort.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -77,27 +77,24 @@\n 16:11-16:24: @2[3]: _4 = Gt(move _5, const 0_i32)\n 16:11-16:24: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>countdown &gt; 0<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:12-17:21: @5[3]: _8 = _1\n-17:12-17:25: @5[4]: _7 = Lt(move _8, const 5_i32)\n-17:12-17:25: @5[6]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@3,5\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"18:13-18:31: @8.Call: _9 = might_abort(const false) -&gt; [return: bb9, unwind: bb22]\n-17:26-19:10: @9[1]: _6 = const ()\"><span class=\"annotation\">@6,8,9\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:13-18:31: @8.Call: _9 = might_abort(const false) -&gt; [return: bb9, unwind: bb22]\n-17:26-19:10: @9[1]: _6 = const ()\">            might_abort(false);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:13-18:31: @8.Call: _9 = might_abort(const false) -&gt; [return: bb9, unwind: bb22]\n-17:26-19:10: @9[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@6,8,9</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:10-19:10: @7[0]: _6 = const ()\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+17:12-17:25: @5[4]: _7 = Lt(move _8, const 5_i32)\"><span class=\"annotation\">@3,5\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"18:13-18:31: @6.Call: _9 = might_abort(const false) -&gt; [return: bb8, unwind: bb19]\n+17:26-19:10: @8[1]: _6 = const ()\"><span class=\"annotation\">@6,8\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:13-18:31: @6.Call: _9 = might_abort(const false) -&gt; [return: bb8, unwind: bb19]\n+17:26-19:10: @8[1]: _6 = const ()\">            might_abort(false);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:13-18:31: @6.Call: _9 = might_abort(const false) -&gt; [return: bb8, unwind: bb19]\n+17:26-19:10: @8[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@6,8</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:10-19:10: @7[0]: _6 = const ()\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // See discussion (below the `Notes` section) on coverage results for the closing brace.</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:12-21:21: @10[5]: _12 = _1\n-21:12-21:25: @10[6]: _11 = Lt(move _12, const 5_i32)\n-21:12-21:25: @10[8]: FakeRead(ForMatchedPlace, _11)\"><span class=\"annotation\">@10\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:28-21:46: @13.Call: _13 = might_abort(const false) -&gt; [return: bb14, unwind: bb22]\n-21:26-21:49: @14[1]: _10 = const ()\"><span class=\"annotation\">@11,13,14\u298a</span>{ might_abort(false); }<span class=\"annotation\">\u2989@11,13,14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:49-21:49: @12[0]: _10 = const ()\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"> // Counts for different regions on one line.</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:12-21:21: @9[5]: _12 = _1\n+21:12-21:25: @9[6]: _11 = Lt(move _12, const 5_i32)\"><span class=\"annotation\">@9\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:28-21:46: @10.Call: _13 = might_abort(const false) -&gt; [return: bb12, unwind: bb19]\n+21:26-21:49: @12[1]: _10 = const ()\"><span class=\"annotation\">@10,12\u298a</span>{ might_abort(false); }<span class=\"annotation\">\u2989@10,12</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:49-21:49: @11[0]: _10 = const ()\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"> // Counts for different regions on one line.</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // For the following example, the closing brace is the last character on the line.</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // This shows the character after the closing brace is highlighted, even if that next</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // character is a newline.</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:12-25:21: @15[5]: _16 = _1\n-25:12-25:25: @15[6]: _15 = Lt(move _16, const 5_i32)\n-25:12-25:25: @15[8]: FakeRead(ForMatchedPlace, _15)\"><span class=\"annotation\">@15\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:28-25:46: @18.Call: _17 = might_abort(const false) -&gt; [return: bb19, unwind: bb22]\n-25:26-25:49: @19[1]: _14 = const ()\"><span class=\"annotation\">@16,18,19\u298a</span>{ might_abort(false); }<span class=\"annotation\">\u2989@16,18,19</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:49-25:49: @17[0]: _14 = const ()\"><span class=\"annotation\">@17\u298a</span>\u2038<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:9-26:23: @20[2]: _18 = CheckedSub(_1, const 1_i32)\n-26:9-26:23: @21[0]: _1 = move (_18.0: i32)\"><span class=\"annotation\">@20,21\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@20,21</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:12-25:21: @13[5]: _16 = _1\n+25:12-25:25: @13[6]: _15 = Lt(move _16, const 5_i32)\"><span class=\"annotation\">@13\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:28-25:46: @14.Call: _17 = might_abort(const false) -&gt; [return: bb16, unwind: bb19]\n+25:26-25:49: @16[1]: _14 = const ()\"><span class=\"annotation\">@14,16\u298a</span>{ might_abort(false); }<span class=\"annotation\">\u2989@14,16</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:49-25:49: @15[0]: _14 = const ()\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:9-26:23: @17[2]: _18 = CheckedSub(_1, const 1_i32)\n+26:9-26:23: @18[0]: _1 = move (_18.0: i32)\"><span class=\"annotation\">@17,18\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@17,18</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:8-28:10: @4[4]: _20 = ()\n 28:5-28:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _20)"}, {"sha": "b058dce298342feead8083861e4221a1e7ee4d2d", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.abort/abort.might_abort.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 49, "deletions": 50, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.abort%2Fabort.might_abort.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.abort%2Fabort.might_abort.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.abort%2Fabort.might_abort.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -70,36 +70,35 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn might_abort(should_abort: bool) <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:8-6:20: @0[1]: _2 = _1\n-6:8-6:20: @0[2]: FakeRead(ForMatchedPlace, _2)\"><span class=\"annotation\">@0\u298a</span>should_abort<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"7:18-7:31: @3[6]: _33 = const might_abort::promoted[3]\n-7:18-7:31: @3[7]: _9 = &amp;(*_33)\n-7:18-7:31: @3[8]: _8 = &amp;(*_9)\n-7:18-7:31: @3[9]: _7 = move _8 as &amp;[&amp;str] (Pointer(Unsize))\n-7:9-7:33: @3[15]: _15 = ()\n-7:9-7:33: @3[16]: FakeRead(ForMatchedPlace, _15)\n-7:9-7:33: @3[17]: _32 = const might_abort::promoted[2]\n-7:9-7:33: @3[18]: _13 = &amp;(*_32)\n-7:9-7:33: @3[19]: _12 = &amp;(*_13)\n-7:9-7:33: @3[20]: _11 = move _12 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-7:9-7:33: @3.Call: _6 = Arguments::new_v1(move _7, move _11) -&gt; [return: bb4, unwind: bb8]\n-7:9-7:33: @4.Call: _5 = _print(move _6) -&gt; [return: bb5, unwind: bb8]\n-7:9-7:33: @5[5]: _4 = const ()\n-8:9-8:37: @5.Call: begin_panic::&lt;&amp;str&gt;(const &quot;panics and aborts&quot;) -&gt; bb8\"><span class=\"annotation\">@1,3,4,5\u298a</span>println!(\"aborting...\");</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"7:18-7:31: @3[6]: _33 = const might_abort::promoted[3]\n-7:18-7:31: @3[7]: _9 = &amp;(*_33)\n-7:18-7:31: @3[8]: _8 = &amp;(*_9)\n-7:18-7:31: @3[9]: _7 = move _8 as &amp;[&amp;str] (Pointer(Unsize))\n-7:9-7:33: @3[15]: _15 = ()\n-7:9-7:33: @3[16]: FakeRead(ForMatchedPlace, _15)\n-7:9-7:33: @3[17]: _32 = const might_abort::promoted[2]\n-7:9-7:33: @3[18]: _13 = &amp;(*_32)\n-7:9-7:33: @3[19]: _12 = &amp;(*_13)\n-7:9-7:33: @3[20]: _11 = move _12 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-7:9-7:33: @3.Call: _6 = Arguments::new_v1(move _7, move _11) -&gt; [return: bb4, unwind: bb8]\n-7:9-7:33: @4.Call: _5 = _print(move _6) -&gt; [return: bb5, unwind: bb8]\n-7:9-7:33: @5[5]: _4 = const ()\n-8:9-8:37: @5.Call: begin_panic::&lt;&amp;str&gt;(const &quot;panics and aborts&quot;) -&gt; bb8\">        panic!(\"panics and aborts\");<span class=\"annotation\">\u2989@1,3,4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:8-6:20: @0[1]: _2 = _1\"><span class=\"annotation\">@0\u298a</span>should_abort<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"7:18-7:31: @1[6]: _33 = const might_abort::promoted[3]\n+7:18-7:31: @1[7]: _9 = &amp;(*_33)\n+7:18-7:31: @1[8]: _8 = &amp;(*_9)\n+7:18-7:31: @1[9]: _7 = move _8 as &amp;[&amp;str] (Pointer(Unsize))\n+7:9-7:33: @1[15]: _15 = ()\n+7:9-7:33: @1[16]: FakeRead(ForMatchedPlace, _15)\n+7:9-7:33: @1[17]: _32 = const might_abort::promoted[2]\n+7:9-7:33: @1[18]: _13 = &amp;(*_32)\n+7:9-7:33: @1[19]: _12 = &amp;(*_13)\n+7:9-7:33: @1[20]: _11 = move _12 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+7:9-7:33: @1.Call: _6 = Arguments::new_v1(move _7, move _11) -&gt; [return: bb3, unwind: bb7]\n+7:9-7:33: @3.Call: _5 = _print(move _6) -&gt; [return: bb4, unwind: bb7]\n+7:9-7:33: @4[5]: _4 = const ()\n+8:9-8:37: @4.Call: begin_panic::&lt;&amp;str&gt;(const &quot;panics and aborts&quot;) -&gt; bb7\"><span class=\"annotation\">@1,3,4\u298a</span>println!(\"aborting...\");</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"7:18-7:31: @1[6]: _33 = const might_abort::promoted[3]\n+7:18-7:31: @1[7]: _9 = &amp;(*_33)\n+7:18-7:31: @1[8]: _8 = &amp;(*_9)\n+7:18-7:31: @1[9]: _7 = move _8 as &amp;[&amp;str] (Pointer(Unsize))\n+7:9-7:33: @1[15]: _15 = ()\n+7:9-7:33: @1[16]: FakeRead(ForMatchedPlace, _15)\n+7:9-7:33: @1[17]: _32 = const might_abort::promoted[2]\n+7:9-7:33: @1[18]: _13 = &amp;(*_32)\n+7:9-7:33: @1[19]: _12 = &amp;(*_13)\n+7:9-7:33: @1[20]: _11 = move _12 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+7:9-7:33: @1.Call: _6 = Arguments::new_v1(move _7, move _11) -&gt; [return: bb3, unwind: bb7]\n+7:9-7:33: @3.Call: _5 = _print(move _6) -&gt; [return: bb4, unwind: bb7]\n+7:9-7:33: @4[5]: _4 = const ()\n+8:9-8:37: @4.Call: begin_panic::&lt;&amp;str&gt;(const &quot;panics and aborts&quot;) -&gt; bb7\">        panic!(\"panics and aborts\");<span class=\"annotation\">\u2989@1,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:18-10:31: @2[6]: _31 = const might_abort::promoted[1]\n 10:18-10:31: @2[7]: _23 = &amp;(*_31)\n 10:18-10:31: @2[8]: _22 = &amp;(*_23)\n@@ -110,11 +109,11 @@\n 10:9-10:33: @2[18]: _27 = &amp;(*_30)\n 10:9-10:33: @2[19]: _26 = &amp;(*_27)\n 10:9-10:33: @2[20]: _25 = move _26 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-10:9-10:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb6, unwind: bb8]\n-10:9-10:33: @6.Call: _19 = _print(move _20) -&gt; [return: bb7, unwind: bb8]\n-10:9-10:33: @7[5]: _18 = const ()\n-9:12-11:6: @7[7]: _0 = const ()\n-12:2-12:2: @7.Return: return\"><span class=\"annotation\">@2,6,7\u298a</span>{</span></span>\n+10:9-10:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb5, unwind: bb7]\n+10:9-10:33: @5.Call: _19 = _print(move _20) -&gt; [return: bb6, unwind: bb7]\n+10:9-10:33: @6[5]: _18 = const ()\n+9:12-11:6: @6[7]: _0 = const ()\n+12:2-12:2: @6.Return: return\"><span class=\"annotation\">@2,5,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:18-10:31: @2[6]: _31 = const might_abort::promoted[1]\n 10:18-10:31: @2[7]: _23 = &amp;(*_31)\n 10:18-10:31: @2[8]: _22 = &amp;(*_23)\n@@ -125,11 +124,11 @@\n 10:9-10:33: @2[18]: _27 = &amp;(*_30)\n 10:9-10:33: @2[19]: _26 = &amp;(*_27)\n 10:9-10:33: @2[20]: _25 = move _26 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-10:9-10:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb6, unwind: bb8]\n-10:9-10:33: @6.Call: _19 = _print(move _20) -&gt; [return: bb7, unwind: bb8]\n-10:9-10:33: @7[5]: _18 = const ()\n-9:12-11:6: @7[7]: _0 = const ()\n-12:2-12:2: @7.Return: return\">        println!(\"Don't Panic\");</span></span>\n+10:9-10:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb5, unwind: bb7]\n+10:9-10:33: @5.Call: _19 = _print(move _20) -&gt; [return: bb6, unwind: bb7]\n+10:9-10:33: @6[5]: _18 = const ()\n+9:12-11:6: @6[7]: _0 = const ()\n+12:2-12:2: @6.Return: return\">        println!(\"Don't Panic\");</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:18-10:31: @2[6]: _31 = const might_abort::promoted[1]\n 10:18-10:31: @2[7]: _23 = &amp;(*_31)\n 10:18-10:31: @2[8]: _22 = &amp;(*_23)\n@@ -140,11 +139,11 @@\n 10:9-10:33: @2[18]: _27 = &amp;(*_30)\n 10:9-10:33: @2[19]: _26 = &amp;(*_27)\n 10:9-10:33: @2[20]: _25 = move _26 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-10:9-10:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb6, unwind: bb8]\n-10:9-10:33: @6.Call: _19 = _print(move _20) -&gt; [return: bb7, unwind: bb8]\n-10:9-10:33: @7[5]: _18 = const ()\n-9:12-11:6: @7[7]: _0 = const ()\n-12:2-12:2: @7.Return: return\">    }</span></span>\n+10:9-10:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb5, unwind: bb7]\n+10:9-10:33: @5.Call: _19 = _print(move _20) -&gt; [return: bb6, unwind: bb7]\n+10:9-10:33: @6[5]: _18 = const ()\n+9:12-11:6: @6[7]: _0 = const ()\n+12:2-12:2: @6.Return: return\">    }</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:18-10:31: @2[6]: _31 = const might_abort::promoted[1]\n 10:18-10:31: @2[7]: _23 = &amp;(*_31)\n 10:18-10:31: @2[8]: _22 = &amp;(*_23)\n@@ -155,10 +154,10 @@\n 10:9-10:33: @2[18]: _27 = &amp;(*_30)\n 10:9-10:33: @2[19]: _26 = &amp;(*_27)\n 10:9-10:33: @2[20]: _25 = move _26 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-10:9-10:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb6, unwind: bb8]\n-10:9-10:33: @6.Call: _19 = _print(move _20) -&gt; [return: bb7, unwind: bb8]\n-10:9-10:33: @7[5]: _18 = const ()\n-9:12-11:6: @7[7]: _0 = const ()\n-12:2-12:2: @7.Return: return\">}<span class=\"annotation\">\u2989@2,6,7</span></span></span></span></div>\n+10:9-10:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb5, unwind: bb7]\n+10:9-10:33: @5.Call: _19 = _print(move _20) -&gt; [return: bb6, unwind: bb7]\n+10:9-10:33: @6[5]: _18 = const ()\n+9:12-11:6: @6[7]: _0 = const ()\n+12:2-12:2: @6.Return: return\">}<span class=\"annotation\">\u2989@2,5,6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "365e94cd31e50f6951608e54b2721ce55b0ec3f8", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.assert/assert.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -77,22 +77,20 @@\n 11:11-11:24: @2[3]: _4 = Gt(move _5, const 0_i32)\n 11:11-11:24: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>countdown &gt; 0<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:12-12:21: @5[3]: _8 = _1\n-12:12-12:26: @5[4]: _7 = Eq(move _8, const 1_i32)\n-12:12-12:26: @5[6]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@3,5\u298a</span>countdown == 1<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"13:13-13:33: @8.Call: _9 = might_fail_assert(const 3_u32) -&gt; [return: bb9, unwind: bb17]\n-12:27-14:10: @9[1]: _6 = const ()\"><span class=\"annotation\">@6,8,9\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:13-13:33: @8.Call: _9 = might_fail_assert(const 3_u32) -&gt; [return: bb9, unwind: bb17]\n-12:27-14:10: @9[1]: _6 = const ()\">            might_fail_assert(3);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:13-13:33: @8.Call: _9 = might_fail_assert(const 3_u32) -&gt; [return: bb9, unwind: bb17]\n-12:27-14:10: @9[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@6,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:19-14:28: @7[2]: _11 = _1\n-14:19-14:32: @7[3]: _10 = Lt(move _11, const 5_i32)\n-14:19-14:32: @7[5]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@7\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:13-15:33: @12.Call: _12 = might_fail_assert(const 2_u32) -&gt; [return: bb13, unwind: bb17]\n-14:33-16:10: @13[1]: _6 = const ()\"><span class=\"annotation\">@10,12,13\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"15:13-15:33: @12.Call: _12 = might_fail_assert(const 2_u32) -&gt; [return: bb13, unwind: bb17]\n-14:33-16:10: @13[1]: _6 = const ()\">            might_fail_assert(2);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"15:13-15:33: @12.Call: _12 = might_fail_assert(const 2_u32) -&gt; [return: bb13, unwind: bb17]\n-14:33-16:10: @13[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@10,12,13</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"16:10-16:10: @11[0]: _6 = const ()\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:23: @15[2]: _13 = CheckedSub(_1, const 1_i32)\n-17:9-17:23: @16[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@15,16\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@15,16</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+12:12-12:26: @5[4]: _7 = Eq(move _8, const 1_i32)\"><span class=\"annotation\">@3,5\u298a</span>countdown == 1<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"13:13-13:33: @6.Call: _9 = might_fail_assert(const 3_u32) -&gt; [return: bb8, unwind: bb15]\n+12:27-14:10: @8[1]: _6 = const ()\"><span class=\"annotation\">@6,8\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:13-13:33: @6.Call: _9 = might_fail_assert(const 3_u32) -&gt; [return: bb8, unwind: bb15]\n+12:27-14:10: @8[1]: _6 = const ()\">            might_fail_assert(3);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:13-13:33: @6.Call: _9 = might_fail_assert(const 3_u32) -&gt; [return: bb8, unwind: bb15]\n+12:27-14:10: @8[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:19-14:28: @7[2]: _11 = _1\n+14:19-14:32: @7[3]: _10 = Lt(move _11, const 5_i32)\"><span class=\"annotation\">@7\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:13-15:33: @9.Call: _12 = might_fail_assert(const 2_u32) -&gt; [return: bb11, unwind: bb15]\n+14:33-16:10: @11[1]: _6 = const ()\"><span class=\"annotation\">@9,11\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"15:13-15:33: @9.Call: _12 = might_fail_assert(const 2_u32) -&gt; [return: bb11, unwind: bb15]\n+14:33-16:10: @11[1]: _6 = const ()\">            might_fail_assert(2);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"15:13-15:33: @9.Call: _12 = might_fail_assert(const 2_u32) -&gt; [return: bb11, unwind: bb15]\n+14:33-16:10: @11[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@9,11</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"16:10-16:10: @10[0]: _6 = const ()\"><span class=\"annotation\">@10\u298a</span>\u2038<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:23: @13[2]: _13 = CheckedSub(_1, const 1_i32)\n+17:9-17:23: @14[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@13,14\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@13,14</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:8-19:10: @4[4]: _15 = ()\n 19:5-19:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)"}, {"sha": "823bb0cfd840454882195375464f4d64a2c01bfd", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.assert/assert.might_fail_assert.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.might_fail_assert.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.might_fail_assert.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.might_fail_assert.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -80,18 +80,18 @@\n 5:5-5:48: @0[22]: _15 = (_13.0: &amp;u32)\n 5:5-5:48: @0[25]: _17 = &amp;(*_15)\n 5:5-5:48: @0[27]: _18 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-5:5-5:48: @0.Call: _16 = ArgumentV1::new::&lt;u32&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb13]\n+5:5-5:48: @0.Call: _16 = ArgumentV1::new::&lt;u32&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb12]\n 5:5-5:48: @1[2]: _12 = [move _16]\n 5:5-5:48: @1[5]: _11 = &amp;_12\n 5:5-5:48: @1[6]: _10 = &amp;(*_11)\n 5:5-5:48: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-5:5-5:48: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb13]\n-5:5-5:48: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb13]\n+5:5-5:48: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb12]\n+5:5-5:48: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb12]\n 5:5-5:48: @3[6]: _2 = const ()\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>println!(\"does 1 + 1 = {}?\", one_plus_one);<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    assert_eq!(</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:16-6:21: @3[11]: _23 = CheckedAdd(const 1_u32, const 1_u32)\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>1 + 1<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">, one_plus_one, </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:37-6:61: @7[28]: _70 = const might_fail_assert::promoted[1]\n-6:37-6:61: @7[29]: _50 = &amp;(*_70)\n-6:37-6:61: @7[30]: _49 = &amp;(*_50)\n-6:37-6:61: @7[31]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\"><span class=\"annotation\">@5,7,8,9,10,11,12\u298a</span>\"the argument was wrong\"<span class=\"annotation\">\u2989@5,7,8,9,10,11,12</span></span></span><span class=\"code\" style=\"--layer: 0\">);</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    assert_eq!(</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:16-6:21: @3[11]: _23 = CheckedAdd(const 1_u32, const 1_u32)\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>1 + 1<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">, one_plus_one, </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:37-6:61: @5[28]: _70 = const might_fail_assert::promoted[1]\n+6:37-6:61: @5[29]: _50 = &amp;(*_70)\n+6:37-6:61: @5[30]: _49 = &amp;(*_50)\n+6:37-6:61: @5[31]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\"><span class=\"annotation\">@5,7,8,9,10,11\u298a</span>\"the argument was wrong\"<span class=\"annotation\">\u2989@5,7,8,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\">);</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:2-7:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "21bfce701fe6e5f6e4b175847bdac5d68525f8f6", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.c-{closure#0}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.c-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.c-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.c-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -70,15 +70,13 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\">                        <span><span class=\"code even\" style=\"--layer: 1\" title=\"6:8-6:9: @0[5]: _5 = _3\n-6:8-6:14: @0[6]: _4 = Eq(move _5, const 8_u8)\n-6:8-6:14: @0[8]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n+6:8-6:14: @0[6]: _4 = Eq(move _5, const 8_u8)\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:8-6:9: @0[5]: _5 = _3\n-6:8-6:14: @0[6]: _4 = Eq(move _5, const 8_u8)\n-6:8-6:14: @0[8]: FakeRead(ForMatchedPlace, _4)\">    if x == 8<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:10: @3[0]: _0 = const 1_u8\"><span class=\"annotation\">@1,3\u298a</span>1<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+6:8-6:14: @0[6]: _4 = Eq(move _5, const 8_u8)\">    if x == 8<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:10: @1[0]: _0 = const 1_u8\"><span class=\"annotation\">@1\u298a</span>1<span class=\"annotation\">\u2989@1</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"9:9-9:10: @2[0]: _0 = const 0_u8\"><span class=\"annotation\">@2\u298a</span>0<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:2-11:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:2-11:2: @3.Return: return\"><span class=\"annotation\">@3\u298a</span>\u2038<span class=\"annotation\">\u2989@3</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "e6384b7598fc28f7a4943c0554ece1d949fb5fd1", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.j-c.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.j-c.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.j-c.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.j-c.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -70,12 +70,10 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 50\"><span class=\"line\">    <span><span class=\"code even\" style=\"--layer: 1\" title=\"52:12-52:13: @0[2]: _3 = _1\n-52:12-52:18: @0[3]: _2 = Eq(move _3, const 8_u8)\n-52:12-52:18: @0[5]: FakeRead(ForMatchedPlace, _2)\"><span class=\"annotation\">@0\u298a</span>fn c(x: u8) -&gt; u8 {</span></span>\n+52:12-52:18: @0[3]: _2 = Eq(move _3, const 8_u8)\"><span class=\"annotation\">@0\u298a</span>fn c(x: u8) -&gt; u8 {</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:12-52:13: @0[2]: _3 = _1\n-52:12-52:18: @0[3]: _2 = Eq(move _3, const 8_u8)\n-52:12-52:18: @0[5]: FakeRead(ForMatchedPlace, _2)\">        if x == 8<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"53:13-53:14: @3[0]: _0 = const 1_u8\"><span class=\"annotation\">@1,3\u298a</span>1<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> // This line appears covered, but the 1-character expression span covering the `1`</span></span>\n+52:12-52:18: @0[3]: _2 = Eq(move _3, const 8_u8)\">        if x == 8<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"53:13-53:14: @1[0]: _0 = const 1_u8\"><span class=\"annotation\">@1\u298a</span>1<span class=\"annotation\">\u2989@1</span></span></span><span class=\"code\" style=\"--layer: 0\"> // This line appears covered, but the 1-character expression span covering the `1`</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">              // is not executed. (`llvm-cov show` displays a `^0` below the `1` ). This is because</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">              // `fn j()` executes the open brace for the funciton body, followed by the function's</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">              // first executable statement, `match x`. Inner function declarations are not</span></span>\n@@ -87,6 +85,6 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"63:13-63:14: @2[0]: _0 = const 0_u8\"><span class=\"annotation\">@2\u298a</span>0<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"65:6-65:6: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"65:6-65:6: @3.Return: return\"><span class=\"annotation\">@3\u298a</span>\u2038<span class=\"annotation\">\u2989@3</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "b4b171dc955cb5933c7fb63fa742866f1ec33fb9", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-{closure#0}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -72,28 +72,25 @@\n <div class=\"code\" style=\"counter-reset: line 32\"><span class=\"line\">        <span class=\"code\" style=\"--layer: 0\">||</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:29-35:30: @0[1]: _2 = const 0_i32\n 35:13-35:26: @0[2]: FakeRead(ForLet, _2)\n-36:12-36:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n-36:12-36:20: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n+36:12-36:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:29-35:30: @0[1]: _2 = const 0_i32\n 35:13-35:26: @0[2]: FakeRead(ForLet, _2)\n-36:12-36:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n-36:12-36:20: @0[6]: FakeRead(ForMatchedPlace, _4)\">        let mut countdown = 0;</span></span>\n+36:12-36:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\">        let mut countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:29-35:30: @0[1]: _2 = const 0_i32\n 35:13-35:26: @0[2]: FakeRead(ForLet, _2)\n-36:12-36:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n-36:12-36:20: @0[6]: FakeRead(ForMatchedPlace, _4)\">        if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @3[0]: _2 = const 10_i32\n-36:21-38:10: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @3[0]: _2 = const 10_i32\n-36:21-38:10: @3[1]: _3 = const ()\">            countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @3[0]: _2 = const 10_i32\n-36:21-38:10: @3[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"38:10-38:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n-39:9-39:23: @4[5]: _5 = &amp;(*_6)\n-39:9-39:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-40:6-40:6: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 2\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n-39:9-39:23: @4[5]: _5 = &amp;(*_6)\n-39:9-39:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-40:6-40:6: @5.Return: return\">    }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>\n+36:12-36:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\">        if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @1[0]: _2 = const 10_i32\n+36:21-38:10: @1[1]: _3 = const ()\"><span class=\"annotation\">@1\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @1[0]: _2 = const 10_i32\n+36:21-38:10: @1[1]: _3 = const ()\">            countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @1[0]: _2 = const 10_i32\n+36:21-38:10: @1[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"38:10-38:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"39:9-39:23: @3[4]: _6 = const &quot;alt string 2&quot;\n+39:9-39:23: @3[5]: _5 = &amp;(*_6)\n+39:9-39:34: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+40:6-40:6: @4.Return: return\"><span class=\"annotation\">@3,4\u298a</span>\"alt string 2\".to_owned()</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"39:9-39:23: @3[4]: _6 = const &quot;alt string 2&quot;\n+39:9-39:23: @3[5]: _5 = &amp;(*_6)\n+39:9-39:34: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+40:6-40:6: @4.Return: return\">    }<span class=\"annotation\">\u2989@3,4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "c1edc3eb929b0711c1f01cf7872cc027a559fb04", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-{closure#10}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%2310%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%2310%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%2310%7D.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -72,28 +72,25 @@\n <div class=\"code\" style=\"counter-reset: line 17\"><span class=\"line\">            <span class=\"code\" style=\"--layer: 0\">||</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:37-20:38: @0[1]: _2 = const 0_i32\n 20:21-20:34: @0[2]: FakeRead(ForLet, _2)\n-21:20-21:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n-21:20-21:28: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n+21:20-21:28: @0[5]: _4 = (*(_1.0: &amp;bool))\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"20:37-20:38: @0[1]: _2 = const 0_i32\n 20:21-20:34: @0[2]: FakeRead(ForLet, _2)\n-21:20-21:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n-21:20-21:28: @0[6]: FakeRead(ForMatchedPlace, _4)\">                let mut countdown = 0;</span></span>\n+21:20-21:28: @0[5]: _4 = (*(_1.0: &amp;bool))\">                let mut countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"20:37-20:38: @0[1]: _2 = const 0_i32\n 20:21-20:34: @0[2]: FakeRead(ForLet, _2)\n-21:20-21:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n-21:20-21:28: @0[6]: FakeRead(ForMatchedPlace, _4)\">                if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @3[0]: _2 = const 10_i32\n-21:29-23:18: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @3[0]: _2 = const 10_i32\n-21:29-23:18: @3[1]: _3 = const ()\">                    countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @3[0]: _2 = const 10_i32\n-21:29-23:18: @3[1]: _3 = const ()\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:18-23:18: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n-24:17-24:31: @4[5]: _5 = &amp;(*_6)\n-24:17-24:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-25:14-25:14: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 1\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n-24:17-24:31: @4[5]: _5 = &amp;(*_6)\n-24:17-24:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-25:14-25:14: @5.Return: return\">            }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>\n+21:20-21:28: @0[5]: _4 = (*(_1.0: &amp;bool))\">                if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @1[0]: _2 = const 10_i32\n+21:29-23:18: @1[1]: _3 = const ()\"><span class=\"annotation\">@1\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @1[0]: _2 = const 10_i32\n+21:29-23:18: @1[1]: _3 = const ()\">                    countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @1[0]: _2 = const 10_i32\n+21:29-23:18: @1[1]: _3 = const ()\">                }<span class=\"annotation\">\u2989@1</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:18-23:18: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:17-24:31: @3[4]: _6 = const &quot;alt string 1&quot;\n+24:17-24:31: @3[5]: _5 = &amp;(*_6)\n+24:17-24:42: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+25:14-25:14: @4.Return: return\"><span class=\"annotation\">@3,4\u298a</span>\"alt string 1\".to_owned()</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"24:17-24:31: @3[4]: _6 = const &quot;alt string 1&quot;\n+24:17-24:31: @3[5]: _5 = &amp;(*_6)\n+24:17-24:42: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+25:14-25:14: @4.Return: return\">            }<span class=\"annotation\">\u2989@3,4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "24c1cadacac4abba8e08d046b3a6f25082861b60", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-{closure#11}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%2311%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%2311%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%2311%7D.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -72,28 +72,25 @@\n <div class=\"code\" style=\"counter-reset: line 59\"><span class=\"line\">            <span class=\"code\" style=\"--layer: 0\">||</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"62:37-62:38: @0[1]: _2 = const 0_i32\n 62:21-62:34: @0[2]: FakeRead(ForLet, _2)\n-63:20-63:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n-63:20-63:28: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n+63:20-63:28: @0[5]: _4 = (*(_1.0: &amp;bool))\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"62:37-62:38: @0[1]: _2 = const 0_i32\n 62:21-62:34: @0[2]: FakeRead(ForLet, _2)\n-63:20-63:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n-63:20-63:28: @0[6]: FakeRead(ForMatchedPlace, _4)\">                let mut countdown = 0;</span></span>\n+63:20-63:28: @0[5]: _4 = (*(_1.0: &amp;bool))\">                let mut countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"62:37-62:38: @0[1]: _2 = const 0_i32\n 62:21-62:34: @0[2]: FakeRead(ForLet, _2)\n-63:20-63:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n-63:20-63:28: @0[6]: FakeRead(ForMatchedPlace, _4)\">                if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @3[0]: _2 = const 10_i32\n-63:29-65:18: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @3[0]: _2 = const 10_i32\n-63:29-65:18: @3[1]: _3 = const ()\">                    countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @3[0]: _2 = const 10_i32\n-63:29-65:18: @3[1]: _3 = const ()\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"65:18-65:18: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n-66:17-66:31: @4[5]: _5 = &amp;(*_6)\n-66:17-66:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-67:14-67:14: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 3\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n-66:17-66:31: @4[5]: _5 = &amp;(*_6)\n-66:17-66:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-67:14-67:14: @5.Return: return\">            }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>\n+63:20-63:28: @0[5]: _4 = (*(_1.0: &amp;bool))\">                if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @1[0]: _2 = const 10_i32\n+63:29-65:18: @1[1]: _3 = const ()\"><span class=\"annotation\">@1\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @1[0]: _2 = const 10_i32\n+63:29-65:18: @1[1]: _3 = const ()\">                    countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @1[0]: _2 = const 10_i32\n+63:29-65:18: @1[1]: _3 = const ()\">                }<span class=\"annotation\">\u2989@1</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"65:18-65:18: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"66:17-66:31: @3[4]: _6 = const &quot;alt string 3&quot;\n+66:17-66:31: @3[5]: _5 = &amp;(*_6)\n+66:17-66:42: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+67:14-67:14: @4.Return: return\"><span class=\"annotation\">@3,4\u298a</span>\"alt string 3\".to_owned()</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"66:17-66:31: @3[4]: _6 = const &quot;alt string 3&quot;\n+66:17-66:31: @3[5]: _5 = &amp;(*_6)\n+66:17-66:42: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+67:14-67:14: @4.Return: return\">            }<span class=\"annotation\">\u2989@3,4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "7a3921c5aec761764ca91795ea07b93e99a4bc4a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-{closure#1}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -72,28 +72,25 @@\n <div class=\"code\" style=\"counter-reset: line 74\"><span class=\"line\">        <span class=\"code\" style=\"--layer: 0\">||</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:29-77:30: @0[1]: _2 = const 0_i32\n 77:13-77:26: @0[2]: FakeRead(ForLet, _2)\n-78:12-78:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n-78:12-78:20: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n+78:12-78:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"77:29-77:30: @0[1]: _2 = const 0_i32\n 77:13-77:26: @0[2]: FakeRead(ForLet, _2)\n-78:12-78:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n-78:12-78:20: @0[6]: FakeRead(ForMatchedPlace, _4)\">        let mut countdown = 0;</span></span>\n+78:12-78:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\">        let mut countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"77:29-77:30: @0[1]: _2 = const 0_i32\n 77:13-77:26: @0[2]: FakeRead(ForLet, _2)\n-78:12-78:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n-78:12-78:20: @0[6]: FakeRead(ForMatchedPlace, _4)\">        if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @3[0]: _2 = const 10_i32\n-78:21-80:10: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @3[0]: _2 = const 10_i32\n-78:21-80:10: @3[1]: _3 = const ()\">            countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @3[0]: _2 = const 10_i32\n-78:21-80:10: @3[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"80:10-80:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n-81:9-81:23: @4[5]: _5 = &amp;(*_6)\n-81:9-81:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-82:6-82:6: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 4\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n-81:9-81:23: @4[5]: _5 = &amp;(*_6)\n-81:9-81:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-82:6-82:6: @5.Return: return\">    }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>\n+78:12-78:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\">        if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @1[0]: _2 = const 10_i32\n+78:21-80:10: @1[1]: _3 = const ()\"><span class=\"annotation\">@1\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @1[0]: _2 = const 10_i32\n+78:21-80:10: @1[1]: _3 = const ()\">            countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @1[0]: _2 = const 10_i32\n+78:21-80:10: @1[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"80:10-80:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"81:9-81:23: @3[4]: _6 = const &quot;alt string 4&quot;\n+81:9-81:23: @3[5]: _5 = &amp;(*_6)\n+81:9-81:34: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+82:6-82:6: @4.Return: return\"><span class=\"annotation\">@3,4\u298a</span>\"alt string 4\".to_owned()</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"81:9-81:23: @3[4]: _6 = const &quot;alt string 4&quot;\n+81:9-81:23: @3[5]: _5 = &amp;(*_6)\n+81:9-81:34: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+82:6-82:6: @4.Return: return\">    }<span class=\"annotation\">\u2989@3,4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "06b817e4318e8f6bab67758aa2ba8bb185b5dbee", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-{closure#2}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 48, "deletions": 51, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -72,60 +72,57 @@\n <div class=\"code\" style=\"counter-reset: line 96\"><span class=\"line\">        <span class=\"code\" style=\"--layer: 0\">|val|</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"99:29-99:30: @0[1]: _3 = const 0_i32\n 99:13-99:26: @0[2]: FakeRead(ForLet, _3)\n-100:12-100:20: @0[5]: _5 = (*((*_1).0: &amp;bool))\n-100:12-100:20: @0[6]: FakeRead(ForMatchedPlace, _5)\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n+100:12-100:20: @0[5]: _5 = (*((*_1).0: &amp;bool))\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"99:29-99:30: @0[1]: _3 = const 0_i32\n 99:13-99:26: @0[2]: FakeRead(ForLet, _3)\n-100:12-100:20: @0[5]: _5 = (*((*_1).0: &amp;bool))\n-100:12-100:20: @0[6]: FakeRead(ForMatchedPlace, _5)\">        let mut countdown = 0;</span></span>\n+100:12-100:20: @0[5]: _5 = (*((*_1).0: &amp;bool))\">        let mut countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"99:29-99:30: @0[1]: _3 = const 0_i32\n 99:13-99:26: @0[2]: FakeRead(ForLet, _3)\n-100:12-100:20: @0[5]: _5 = (*((*_1).0: &amp;bool))\n-100:12-100:20: @0[6]: FakeRead(ForMatchedPlace, _5)\">        if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"101:13-101:27: @3[0]: _3 = const 10_i32\n-100:21-102:10: @3[1]: _4 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"101:13-101:27: @3[0]: _3 = const 10_i32\n-100:21-102:10: @3[1]: _4 = const ()\">            countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"101:13-101:27: @3[0]: _3 = const 10_i32\n-100:21-102:10: @3[1]: _4 = const ()\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"102:10-102:10: @2[0]: _4 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"103:17-103:23: @4[7]: _22 = const main::{closure#2}::promoted[0]\n-103:17-103:23: @4[8]: _10 = &amp;(*_22)\n-103:17-103:23: @4[9]: _9 = &amp;(*_10)\n-103:17-103:23: @4[10]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n-103:25-103:28: @4[18]: _17 = &amp;_2\n-103:9-103:29: @4[19]: _16 = (move _17,)\n-103:9-103:29: @4[21]: FakeRead(ForMatchedPlace, _16)\n-103:9-103:29: @4[23]: _18 = (_16.0: &amp;&amp;str)\n-103:9-103:29: @4[26]: _20 = &amp;(*_18)\n-103:9-103:29: @4[28]: _21 = &lt;&amp;str as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;str, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-103:9-103:29: @4.Call: _19 = ArgumentV1::new::&lt;&amp;str&gt;(move _20, move _21) -&gt; [return: bb5, unwind: bb10]\n-103:9-103:29: @5[2]: _15 = [move _19]\n-103:9-103:29: @5[5]: _14 = &amp;_15\n-103:9-103:29: @5[6]: _13 = &amp;(*_14)\n-103:9-103:29: @5[7]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-103:9-103:29: @5.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb6, unwind: bb10]\n-103:9-103:29: @6.Call: _6 = format(move _7) -&gt; [return: bb7, unwind: bb10]\n-103:9-103:29: @7[1]: FakeRead(ForLet, _6)\n-103:9-103:29: @7[6]: _0 = move _6\n-104:6-104:6: @8.Return: return\"><span class=\"annotation\">@4,5,6,7,8\u298a</span>format!(\"'{}'\", val)</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"103:17-103:23: @4[7]: _22 = const main::{closure#2}::promoted[0]\n-103:17-103:23: @4[8]: _10 = &amp;(*_22)\n-103:17-103:23: @4[9]: _9 = &amp;(*_10)\n-103:17-103:23: @4[10]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n-103:25-103:28: @4[18]: _17 = &amp;_2\n-103:9-103:29: @4[19]: _16 = (move _17,)\n-103:9-103:29: @4[21]: FakeRead(ForMatchedPlace, _16)\n-103:9-103:29: @4[23]: _18 = (_16.0: &amp;&amp;str)\n-103:9-103:29: @4[26]: _20 = &amp;(*_18)\n-103:9-103:29: @4[28]: _21 = &lt;&amp;str as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;str, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-103:9-103:29: @4.Call: _19 = ArgumentV1::new::&lt;&amp;str&gt;(move _20, move _21) -&gt; [return: bb5, unwind: bb10]\n-103:9-103:29: @5[2]: _15 = [move _19]\n-103:9-103:29: @5[5]: _14 = &amp;_15\n-103:9-103:29: @5[6]: _13 = &amp;(*_14)\n-103:9-103:29: @5[7]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-103:9-103:29: @5.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb6, unwind: bb10]\n-103:9-103:29: @6.Call: _6 = format(move _7) -&gt; [return: bb7, unwind: bb10]\n-103:9-103:29: @7[1]: FakeRead(ForLet, _6)\n-103:9-103:29: @7[6]: _0 = move _6\n-104:6-104:6: @8.Return: return\">    }<span class=\"annotation\">\u2989@4,5,6,7,8</span></span></span></span></div>\n+100:12-100:20: @0[5]: _5 = (*((*_1).0: &amp;bool))\">        if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"101:13-101:27: @1[0]: _3 = const 10_i32\n+100:21-102:10: @1[1]: _4 = const ()\"><span class=\"annotation\">@1\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"101:13-101:27: @1[0]: _3 = const 10_i32\n+100:21-102:10: @1[1]: _4 = const ()\">            countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"101:13-101:27: @1[0]: _3 = const 10_i32\n+100:21-102:10: @1[1]: _4 = const ()\">        }<span class=\"annotation\">\u2989@1</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"102:10-102:10: @2[0]: _4 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"103:17-103:23: @3[7]: _22 = const main::{closure#2}::promoted[0]\n+103:17-103:23: @3[8]: _10 = &amp;(*_22)\n+103:17-103:23: @3[9]: _9 = &amp;(*_10)\n+103:17-103:23: @3[10]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n+103:25-103:28: @3[18]: _17 = &amp;_2\n+103:9-103:29: @3[19]: _16 = (move _17,)\n+103:9-103:29: @3[21]: FakeRead(ForMatchedPlace, _16)\n+103:9-103:29: @3[23]: _18 = (_16.0: &amp;&amp;str)\n+103:9-103:29: @3[26]: _20 = &amp;(*_18)\n+103:9-103:29: @3[28]: _21 = &lt;&amp;str as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;str, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+103:9-103:29: @3.Call: _19 = ArgumentV1::new::&lt;&amp;str&gt;(move _20, move _21) -&gt; [return: bb4, unwind: bb9]\n+103:9-103:29: @4[2]: _15 = [move _19]\n+103:9-103:29: @4[5]: _14 = &amp;_15\n+103:9-103:29: @4[6]: _13 = &amp;(*_14)\n+103:9-103:29: @4[7]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+103:9-103:29: @4.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb5, unwind: bb9]\n+103:9-103:29: @5.Call: _6 = format(move _7) -&gt; [return: bb6, unwind: bb9]\n+103:9-103:29: @6[1]: FakeRead(ForLet, _6)\n+103:9-103:29: @6[6]: _0 = move _6\n+104:6-104:6: @7.Return: return\"><span class=\"annotation\">@3,4,5,6,7\u298a</span>format!(\"'{}'\", val)</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"103:17-103:23: @3[7]: _22 = const main::{closure#2}::promoted[0]\n+103:17-103:23: @3[8]: _10 = &amp;(*_22)\n+103:17-103:23: @3[9]: _9 = &amp;(*_10)\n+103:17-103:23: @3[10]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n+103:25-103:28: @3[18]: _17 = &amp;_2\n+103:9-103:29: @3[19]: _16 = (move _17,)\n+103:9-103:29: @3[21]: FakeRead(ForMatchedPlace, _16)\n+103:9-103:29: @3[23]: _18 = (_16.0: &amp;&amp;str)\n+103:9-103:29: @3[26]: _20 = &amp;(*_18)\n+103:9-103:29: @3[28]: _21 = &lt;&amp;str as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;str, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+103:9-103:29: @3.Call: _19 = ArgumentV1::new::&lt;&amp;str&gt;(move _20, move _21) -&gt; [return: bb4, unwind: bb9]\n+103:9-103:29: @4[2]: _15 = [move _19]\n+103:9-103:29: @4[5]: _14 = &amp;_15\n+103:9-103:29: @4[6]: _13 = &amp;(*_14)\n+103:9-103:29: @4[7]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+103:9-103:29: @4.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb5, unwind: bb9]\n+103:9-103:29: @5.Call: _6 = format(move _7) -&gt; [return: bb6, unwind: bb9]\n+103:9-103:29: @6[1]: FakeRead(ForLet, _6)\n+103:9-103:29: @6[6]: _0 = move _6\n+104:6-104:6: @7.Return: return\">    }<span class=\"annotation\">\u2989@3,4,5,6,7</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "0940775840093cbcd592634290489c6409e217e6", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-{closure#3}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -72,22 +72,20 @@\n <div class=\"code\" style=\"counter-reset: line 119\"><span class=\"line\">        <span class=\"code\" style=\"--layer: 0\">|</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            mut countdown</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        |</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"124:12-124:20: @0[2]: _4 = (*((*_1).0: &amp;bool))\n-124:12-124:20: @0[3]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"124:12-124:20: @0[2]: _4 = (*((*_1).0: &amp;bool))\n-124:12-124:20: @0[3]: FakeRead(ForMatchedPlace, _4)\">        if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"125:13-125:27: @3[0]: _2 = const 10_i32\n-124:21-126:10: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"125:13-125:27: @3[0]: _2 = const 10_i32\n-124:21-126:10: @3[1]: _3 = const ()\">            countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"125:13-125:27: @3[0]: _2 = const 10_i32\n-124:21-126:10: @3[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"126:10-126:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"127:9-127:35: @4[4]: _6 = const &quot;closure should be unused&quot;\n-127:9-127:35: @4[5]: _5 = &amp;(*_6)\n-127:9-127:46: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-128:6-128:6: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"closure should be unused\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"127:9-127:35: @4[4]: _6 = const &quot;closure should be unused&quot;\n-127:9-127:35: @4[5]: _5 = &amp;(*_6)\n-127:9-127:46: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n-128:6-128:6: @5.Return: return\">    }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"124:12-124:20: @0[2]: _4 = (*((*_1).0: &amp;bool))\"><span class=\"annotation\">@0\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"124:12-124:20: @0[2]: _4 = (*((*_1).0: &amp;bool))\">        if is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"125:13-125:27: @1[0]: _2 = const 10_i32\n+124:21-126:10: @1[1]: _3 = const ()\"><span class=\"annotation\">@1\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"125:13-125:27: @1[0]: _2 = const 10_i32\n+124:21-126:10: @1[1]: _3 = const ()\">            countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"125:13-125:27: @1[0]: _2 = const 10_i32\n+124:21-126:10: @1[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"126:10-126:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"127:9-127:35: @3[4]: _6 = const &quot;closure should be unused&quot;\n+127:9-127:35: @3[5]: _5 = &amp;(*_6)\n+127:9-127:46: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+128:6-128:6: @4.Return: return\"><span class=\"annotation\">@3,4\u298a</span>\"closure should be unused\".to_owned()</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"127:9-127:35: @3[4]: _6 = const &quot;closure should be unused&quot;\n+127:9-127:35: @3[5]: _5 = &amp;(*_6)\n+127:9-127:46: @3.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb4, unwind: bb5]\n+128:6-128:6: @4.Return: return\">    }<span class=\"annotation\">\u2989@3,4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "184dba6abd17f7b153298118081d915f4116cd60", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.conditions/conditions.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 209, "deletions": 228, "changes": 437, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.conditions%2Fconditions.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.conditions%2Fconditions.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.conditions%2Fconditions.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -72,255 +72,236 @@\n <div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn main() <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:25-4:26: @0[1]: _1 = const 0_u32\n 4:9-4:22: @0[2]: FakeRead(ForLet, _1)\n-5:8-5:12: @0[5]: _3 = const true\n-5:8-5:12: @0[6]: FakeRead(ForMatchedPlace, _3)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0;</span></span>\n+5:8-5:12: @0[5]: _3 = const true\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"4:25-4:26: @0[1]: _1 = const 0_u32\n 4:9-4:22: @0[2]: FakeRead(ForLet, _1)\n-5:8-5:12: @0[5]: _3 = const true\n-5:8-5:12: @0[6]: FakeRead(ForMatchedPlace, _3)\">    if true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @3[0]: _1 = const 10_u32\n-5:13-7:6: @3[1]: _2 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @3[0]: _1 = const 10_u32\n-5:13-7:6: @3[1]: _2 = const ()\">        countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @3[0]: _1 = const 10_u32\n-5:13-7:6: @3[1]: _2 = const ()\">    }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:6-7:6: @2[0]: _2 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+5:8-5:12: @0[5]: _3 = const true\">    if true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @1[0]: _1 = const 10_u32\n+5:13-7:6: @1[1]: _2 = const ()\"><span class=\"annotation\">@1\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @1[0]: _1 = const 10_u32\n+5:13-7:6: @1[1]: _2 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @1[0]: _1 = const 10_u32\n+5:13-7:6: @1[1]: _2 = const ()\">    }<span class=\"annotation\">\u2989@1</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:6-7:6: @2[0]: _2 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    const B: u32 = 100;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:9-10:10: @25[0]: FakeRead(ForLet, _4)\"><span class=\"annotation\">@25\u298a</span>x<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:16-10:25: @4[5]: _6 = _1\n-10:16-10:29: @4[6]: _5 = Gt(move _6, const 7_u32)\n-10:16-10:29: @4[8]: FakeRead(ForMatchedPlace, _5)\"><span class=\"annotation\">@4\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @7[0]: _7 = CheckedSub(_1, const 4_u32)\n-11:9-11:23: @8[0]: _1 = move (_7.0: u32)\n-12:9-12:10: @8[1]: _4 = const B\"><span class=\"annotation\">@5,7,8\u298a</span>countdown -= 4;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @7[0]: _7 = CheckedSub(_1, const 4_u32)\n-11:9-11:23: @8[0]: _1 = move (_7.0: u32)\n-12:9-12:10: @8[1]: _4 = const B\">        B<span class=\"annotation\">\u2989@5,7,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:15-13:24: @6[2]: _9 = _1\n-13:15-13:28: @6[3]: _8 = Gt(move _9, const 2_u32)\n-13:15-13:28: @6[5]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@6\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:12-14:21: @11[5]: _14 = _1\n-14:12-14:25: @11[6]: _13 = Lt(move _14, const 1_u32)\"><span class=\"annotation\">@9,11\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@9,11</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:29-14:38: @18[2]: _16 = _1\n-14:29-14:42: @18[3]: _15 = Gt(move _16, const 5_u32)\"><span class=\"annotation\">@18\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:46-14:55: @14[2]: _18 = _1\n-14:46-14:60: @14[3]: _17 = Ne(move _18, const 9_u32)\"><span class=\"annotation\">@14\u298a</span>countdown != 9<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n-14:61-16:10: @22[1]: _10 = const ()\"><span class=\"annotation\">@20,22\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n-14:61-16:10: @22[1]: _10 = const ()\">            countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n-14:61-16:10: @22[1]: _10 = const ()\">        }<span class=\"annotation\">\u2989@20,22</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:10-16:10: @21[0]: _10 = const ()\"><span class=\"annotation\">@21\u298a</span>\u2038<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:23: @23[2]: _19 = CheckedSub(_1, const 5_u32)\n-17:9-17:23: @24[0]: _1 = move (_19.0: u32)\n-18:9-18:18: @24[1]: _4 = _1\"><span class=\"annotation\">@23,24\u298a</span>countdown -= 5;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:23: @23[2]: _19 = CheckedSub(_1, const 5_u32)\n-17:9-17:23: @24[0]: _1 = move (_19.0: u32)\n-18:9-18:18: @24[1]: _4 = _1\">        countdown<span class=\"annotation\">\u2989@23,24</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:9-10:10: @21[1]: FakeRead(ForLet, _4)\"><span class=\"annotation\">@21\u298a</span>x<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:16-10:25: @3[5]: _6 = _1\n+10:16-10:29: @3[6]: _5 = Gt(move _6, const 7_u32)\"><span class=\"annotation\">@3\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@3</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @4[0]: _7 = CheckedSub(_1, const 4_u32)\n+11:9-11:23: @6[0]: _1 = move (_7.0: u32)\n+12:9-12:10: @6[1]: _4 = const B\"><span class=\"annotation\">@4,6\u298a</span>countdown -= 4;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @4[0]: _7 = CheckedSub(_1, const 4_u32)\n+11:9-11:23: @6[0]: _1 = move (_7.0: u32)\n+12:9-12:10: @6[1]: _4 = const B\">        B<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:15-13:24: @5[2]: _9 = _1\n+13:15-13:28: @5[3]: _8 = Gt(move _9, const 2_u32)\"><span class=\"annotation\">@5\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:12-14:21: @7[5]: _14 = _1\n+14:12-14:25: @7[6]: _13 = Lt(move _14, const 1_u32)\"><span class=\"annotation\">@7\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:29-14:38: @15[2]: _16 = _1\n+14:29-14:42: @15[3]: _15 = Gt(move _16, const 5_u32)\"><span class=\"annotation\">@15\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:46-14:55: @11[2]: _18 = _1\n+14:46-14:60: @11[3]: _17 = Ne(move _18, const 9_u32)\"><span class=\"annotation\">@11\u298a</span>countdown != 9<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @17[0]: _1 = const 0_u32\n+14:61-16:10: @17[1]: _10 = const ()\"><span class=\"annotation\">@17\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @17[0]: _1 = const 0_u32\n+14:61-16:10: @17[1]: _10 = const ()\">            countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @17[0]: _1 = const 0_u32\n+14:61-16:10: @17[1]: _10 = const ()\">        }<span class=\"annotation\">\u2989@17</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:10-16:10: @18[0]: _10 = const ()\"><span class=\"annotation\">@18\u298a</span>\u2038<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:23: @19[2]: _19 = CheckedSub(_1, const 5_u32)\n+17:9-17:23: @20[0]: _1 = move (_19.0: u32)\n+18:9-18:18: @20[1]: _4 = _1\"><span class=\"annotation\">@19,20\u298a</span>countdown -= 5;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:23: @19[2]: _19 = CheckedSub(_1, const 5_u32)\n+17:9-17:23: @20[0]: _1 = move (_19.0: u32)\n+18:9-18:18: @20[1]: _4 = _1\">        countdown<span class=\"annotation\">\u2989@19,20</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:9-20:15: @10[0]: _0 = const ()\"><span class=\"annotation\">@10\u298a</span>return<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:9-20:15: @8[0]: _0 = const ()\"><span class=\"annotation\">@8\u298a</span>return<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    };</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:25-23:26: @25[3]: _21 = const 0_i32\n-23:9-23:22: @25[4]: FakeRead(ForLet, _21)\n-24:8-24:12: @25[7]: _23 = const true\n-24:8-24:12: @25[8]: FakeRead(ForMatchedPlace, _23)\"><span class=\"annotation\">@25\u298a</span>mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:25-23:26: @25[3]: _21 = const 0_i32\n-23:9-23:22: @25[4]: FakeRead(ForLet, _21)\n-24:8-24:12: @25[7]: _23 = const true\n-24:8-24:12: @25[8]: FakeRead(ForMatchedPlace, _23)\">    if true<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @28[0]: _21 = const 10_i32\n-24:13-26:6: @28[1]: _22 = const ()\"><span class=\"annotation\">@26,28\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @28[0]: _21 = const 10_i32\n-24:13-26:6: @28[1]: _22 = const ()\">        countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @28[0]: _21 = const 10_i32\n-24:13-26:6: @28[1]: _22 = const ()\">    }<span class=\"annotation\">\u2989@26,28</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:6-26:6: @27[0]: _22 = const ()\"><span class=\"annotation\">@27\u298a</span>\u2038<span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:25-23:26: @21[3]: _21 = const 0_i32\n+23:9-23:22: @21[4]: FakeRead(ForLet, _21)\n+24:8-24:12: @21[7]: _23 = const true\"><span class=\"annotation\">@21\u298a</span>mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:25-23:26: @21[3]: _21 = const 0_i32\n+23:9-23:22: @21[4]: FakeRead(ForLet, _21)\n+24:8-24:12: @21[7]: _23 = const true\">    if true<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @22[0]: _21 = const 10_i32\n+24:13-26:6: @22[1]: _22 = const ()\"><span class=\"annotation\">@22\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @22[0]: _21 = const 10_i32\n+24:13-26:6: @22[1]: _22 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @22[0]: _21 = const 10_i32\n+24:13-26:6: @22[1]: _22 = const ()\">    }<span class=\"annotation\">\u2989@22</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:6-26:6: @23[0]: _22 = const ()\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:8-28:17: @29[5]: _26 = _21\n-28:8-28:21: @29[6]: _25 = Gt(move _26, const 7_i32)\n-28:8-28:21: @29[8]: FakeRead(ForMatchedPlace, _25)\"><span class=\"annotation\">@29\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:9-29:23: @32[0]: _27 = CheckedSub(_21, const 4_i32)\n-29:9-29:23: @33[0]: _21 = move (_27.0: i32)\n-28:22-30:6: @33[1]: _24 = const ()\"><span class=\"annotation\">@30,32,33\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"29:9-29:23: @32[0]: _27 = CheckedSub(_21, const 4_i32)\n-29:9-29:23: @33[0]: _21 = move (_27.0: i32)\n-28:22-30:6: @33[1]: _24 = const ()\">        countdown -= 4;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"29:9-29:23: @32[0]: _27 = CheckedSub(_21, const 4_i32)\n-29:9-29:23: @33[0]: _21 = move (_27.0: i32)\n-28:22-30:6: @33[1]: _24 = const ()\">    }<span class=\"annotation\">\u2989@30,32,33</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:15-30:24: @31[2]: _29 = _21\n-30:15-30:28: @31[3]: _28 = Gt(move _29, const 2_i32)\n-30:15-30:28: @31[5]: FakeRead(ForMatchedPlace, _28)\"><span class=\"annotation\">@31\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:12-31:21: @36[5]: _34 = _21\n-31:12-31:25: @36[6]: _33 = Lt(move _34, const 1_i32)\"><span class=\"annotation\">@34,36\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@34,36</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:29-31:38: @43[2]: _36 = _21\n-31:29-31:42: @43[3]: _35 = Gt(move _36, const 5_i32)\"><span class=\"annotation\">@43\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@43</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:46-31:55: @39[2]: _38 = _21\n-31:46-31:60: @39[3]: _37 = Ne(move _38, const 9_i32)\"><span class=\"annotation\">@39\u298a</span>countdown != 9<span class=\"annotation\">\u2989@39</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n-31:61-33:10: @47[1]: _30 = const ()\"><span class=\"annotation\">@45,47\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n-31:61-33:10: @47[1]: _30 = const ()\">            countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n-31:61-33:10: @47[1]: _30 = const ()\">        }<span class=\"annotation\">\u2989@45,47</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:10-33:10: @46[0]: _30 = const ()\"><span class=\"annotation\">@46\u298a</span>\u2038<span class=\"annotation\">\u2989@46</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:23: @48[2]: _39 = CheckedSub(_21, const 5_i32)\n-34:9-34:23: @49[0]: _21 = move (_39.0: i32)\"><span class=\"annotation\">@48,49\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@48,49</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:8-28:17: @24[5]: _26 = _21\n+28:8-28:21: @24[6]: _25 = Gt(move _26, const 7_i32)\"><span class=\"annotation\">@24\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@24</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:9-29:23: @25[0]: _27 = CheckedSub(_21, const 4_i32)\n+29:9-29:23: @27[0]: _21 = move (_27.0: i32)\n+28:22-30:6: @27[1]: _24 = const ()\"><span class=\"annotation\">@25,27\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"29:9-29:23: @25[0]: _27 = CheckedSub(_21, const 4_i32)\n+29:9-29:23: @27[0]: _21 = move (_27.0: i32)\n+28:22-30:6: @27[1]: _24 = const ()\">        countdown -= 4;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"29:9-29:23: @25[0]: _27 = CheckedSub(_21, const 4_i32)\n+29:9-29:23: @27[0]: _21 = move (_27.0: i32)\n+28:22-30:6: @27[1]: _24 = const ()\">    }<span class=\"annotation\">\u2989@25,27</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:15-30:24: @26[2]: _29 = _21\n+30:15-30:28: @26[3]: _28 = Gt(move _29, const 2_i32)\"><span class=\"annotation\">@26\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@26</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:12-31:21: @28[5]: _34 = _21\n+31:12-31:25: @28[6]: _33 = Lt(move _34, const 1_i32)\"><span class=\"annotation\">@28\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@28</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:29-31:38: @36[2]: _36 = _21\n+31:29-31:42: @36[3]: _35 = Gt(move _36, const 5_i32)\"><span class=\"annotation\">@36\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@36</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:46-31:55: @32[2]: _38 = _21\n+31:46-31:60: @32[3]: _37 = Ne(move _38, const 9_i32)\"><span class=\"annotation\">@32\u298a</span>countdown != 9<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @38[0]: _21 = const 0_i32\n+31:61-33:10: @38[1]: _30 = const ()\"><span class=\"annotation\">@38\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @38[0]: _21 = const 0_i32\n+31:61-33:10: @38[1]: _30 = const ()\">            countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @38[0]: _21 = const 0_i32\n+31:61-33:10: @38[1]: _30 = const ()\">        }<span class=\"annotation\">\u2989@38</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:10-33:10: @39[0]: _30 = const ()\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:23: @40[2]: _39 = CheckedSub(_21, const 5_i32)\n+34:9-34:23: @41[0]: _21 = move (_39.0: i32)\"><span class=\"annotation\">@40,41\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@40,41</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:15: @35[0]: _0 = const ()\"><span class=\"annotation\">@35\u298a</span>return<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:15: @29[0]: _0 = const ()\"><span class=\"annotation\">@29\u298a</span>return<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"39:8-39:12: @50[4]: _42 = const true\n-39:8-39:12: @50[5]: FakeRead(ForMatchedPlace, _42)\"><span class=\"annotation\">@50\u298a</span>true<span class=\"annotation\">\u2989@50</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:29-40:30: @53[1]: _43 = const 0_i32\n-40:13-40:26: @53[2]: FakeRead(ForLet, _43)\n-41:12-41:16: @53[5]: _45 = const true\n-41:12-41:16: @53[6]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@51,53\u298a</span>mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"40:29-40:30: @53[1]: _43 = const 0_i32\n-40:13-40:26: @53[2]: FakeRead(ForLet, _43)\n-41:12-41:16: @53[5]: _45 = const true\n-41:12-41:16: @53[6]: FakeRead(ForMatchedPlace, _45)\">        if true<span class=\"annotation\">\u2989@51,53</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:13-42:27: @56[0]: _43 = const 10_i32\n-41:17-43:10: @56[1]: _44 = const ()\"><span class=\"annotation\">@54,56\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"42:13-42:27: @56[0]: _43 = const 10_i32\n-41:17-43:10: @56[1]: _44 = const ()\">            countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"42:13-42:27: @56[0]: _43 = const 10_i32\n-41:17-43:10: @56[1]: _44 = const ()\">        }<span class=\"annotation\">\u2989@54,56</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:10-43:10: @55[0]: _44 = const ()\"><span class=\"annotation\">@55\u298a</span>\u2038<span class=\"annotation\">\u2989@55</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"39:8-39:12: @42[4]: _42 = const true\"><span class=\"annotation\">@42\u298a</span>true<span class=\"annotation\">\u2989@42</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:29-40:30: @43[1]: _43 = const 0_i32\n+40:13-40:26: @43[2]: FakeRead(ForLet, _43)\n+41:12-41:16: @43[5]: _45 = const true\"><span class=\"annotation\">@43\u298a</span>mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"40:29-40:30: @43[1]: _43 = const 0_i32\n+40:13-40:26: @43[2]: FakeRead(ForLet, _43)\n+41:12-41:16: @43[5]: _45 = const true\">        if true<span class=\"annotation\">\u2989@43</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:13-42:27: @45[0]: _43 = const 10_i32\n+41:17-43:10: @45[1]: _44 = const ()\"><span class=\"annotation\">@45\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"42:13-42:27: @45[0]: _43 = const 10_i32\n+41:17-43:10: @45[1]: _44 = const ()\">            countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"42:13-42:27: @45[0]: _43 = const 10_i32\n+41:17-43:10: @45[1]: _44 = const ()\">        }<span class=\"annotation\">\u2989@45</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:10-43:10: @46[0]: _44 = const ()\"><span class=\"annotation\">@46\u298a</span>\u2038<span class=\"annotation\">\u2989@46</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"45:12-45:21: @57[4]: _47 = _43\n-45:12-45:25: @57[5]: _46 = Gt(move _47, const 7_i32)\n-45:12-45:25: @57[7]: FakeRead(ForMatchedPlace, _46)\"><span class=\"annotation\">@57\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@57</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"46:13-46:27: @60[0]: _48 = CheckedSub(_43, const 4_i32)\n-46:13-46:27: @61[0]: _43 = move (_48.0: i32)\n-45:26-47:10: @61[1]: _41 = const ()\"><span class=\"annotation\">@58,60,61\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:13-46:27: @60[0]: _48 = CheckedSub(_43, const 4_i32)\n-46:13-46:27: @61[0]: _43 = move (_48.0: i32)\n-45:26-47:10: @61[1]: _41 = const ()\">            countdown -= 4;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:13-46:27: @60[0]: _48 = CheckedSub(_43, const 4_i32)\n-46:13-46:27: @61[0]: _43 = move (_48.0: i32)\n-45:26-47:10: @61[1]: _41 = const ()\">        }<span class=\"annotation\">\u2989@58,60,61</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"48:17-48:26: @59[2]: _50 = _43\n-48:17-48:30: @59[3]: _49 = Gt(move _50, const 2_i32)\n-48:17-48:30: @59[5]: FakeRead(ForMatchedPlace, _49)\"><span class=\"annotation\">@59\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@59</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:16-49:25: @64[5]: _55 = _43\n-49:16-49:29: @64[6]: _54 = Lt(move _55, const 1_i32)\"><span class=\"annotation\">@62,64\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@62,64</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"49:33-49:42: @71[2]: _57 = _43\n-49:33-49:46: @71[3]: _56 = Gt(move _57, const 5_i32)\"><span class=\"annotation\">@71\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@71</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:50-49:59: @67[2]: _59 = _43\n-49:50-49:64: @67[3]: _58 = Ne(move _59, const 9_i32)\"><span class=\"annotation\">@67\u298a</span>countdown != 9<span class=\"annotation\">\u2989@67</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:17-50:30: @75[0]: _43 = const 0_i32\n-49:65-51:14: @75[1]: _51 = const ()\"><span class=\"annotation\">@73,75\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"50:17-50:30: @75[0]: _43 = const 0_i32\n-49:65-51:14: @75[1]: _51 = const ()\">                countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"50:17-50:30: @75[0]: _43 = const 0_i32\n-49:65-51:14: @75[1]: _51 = const ()\">            }<span class=\"annotation\">\u2989@73,75</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"51:14-51:14: @74[0]: _51 = const ()\"><span class=\"annotation\">@74\u298a</span>\u2038<span class=\"annotation\">\u2989@74</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"52:13-52:27: @76[2]: _60 = CheckedSub(_43, const 5_i32)\n-52:13-52:27: @77[0]: _43 = move (_60.0: i32)\"><span class=\"annotation\">@76,77\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@76,77</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"45:12-45:21: @47[4]: _47 = _43\n+45:12-45:25: @47[5]: _46 = Gt(move _47, const 7_i32)\"><span class=\"annotation\">@47\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@47</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"46:13-46:27: @48[0]: _48 = CheckedSub(_43, const 4_i32)\n+46:13-46:27: @50[0]: _43 = move (_48.0: i32)\n+45:26-47:10: @50[1]: _41 = const ()\"><span class=\"annotation\">@48,50\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:13-46:27: @48[0]: _48 = CheckedSub(_43, const 4_i32)\n+46:13-46:27: @50[0]: _43 = move (_48.0: i32)\n+45:26-47:10: @50[1]: _41 = const ()\">            countdown -= 4;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:13-46:27: @48[0]: _48 = CheckedSub(_43, const 4_i32)\n+46:13-46:27: @50[0]: _43 = move (_48.0: i32)\n+45:26-47:10: @50[1]: _41 = const ()\">        }<span class=\"annotation\">\u2989@48,50</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"48:17-48:26: @49[2]: _50 = _43\n+48:17-48:30: @49[3]: _49 = Gt(move _50, const 2_i32)\"><span class=\"annotation\">@49\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@49</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:16-49:25: @51[5]: _55 = _43\n+49:16-49:29: @51[6]: _54 = Lt(move _55, const 1_i32)\"><span class=\"annotation\">@51\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@51</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"49:33-49:42: @59[2]: _57 = _43\n+49:33-49:46: @59[3]: _56 = Gt(move _57, const 5_i32)\"><span class=\"annotation\">@59\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@59</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:50-49:59: @55[2]: _59 = _43\n+49:50-49:64: @55[3]: _58 = Ne(move _59, const 9_i32)\"><span class=\"annotation\">@55\u298a</span>countdown != 9<span class=\"annotation\">\u2989@55</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:17-50:30: @61[0]: _43 = const 0_i32\n+49:65-51:14: @61[1]: _51 = const ()\"><span class=\"annotation\">@61\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"50:17-50:30: @61[0]: _43 = const 0_i32\n+49:65-51:14: @61[1]: _51 = const ()\">                countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"50:17-50:30: @61[0]: _43 = const 0_i32\n+49:65-51:14: @61[1]: _51 = const ()\">            }<span class=\"annotation\">\u2989@61</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"51:14-51:14: @62[0]: _51 = const ()\"><span class=\"annotation\">@62\u298a</span>\u2038<span class=\"annotation\">\u2989@62</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"52:13-52:27: @63[2]: _60 = CheckedSub(_43, const 5_i32)\n+52:13-52:27: @64[0]: _43 = move (_60.0: i32)\"><span class=\"annotation\">@63,64\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@63,64</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"54:13-54:19: @63[0]: _0 = const ()\"><span class=\"annotation\">@63\u298a</span>return<span class=\"annotation\">\u2989@63</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"54:13-54:19: @52[0]: _0 = const ()\"><span class=\"annotation\">@52\u298a</span>return<span class=\"annotation\">\u2989@52</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"56:6-56:6: @52[0]: _41 = const ()\"><span class=\"annotation\">@52\u298a</span>\u2038<span class=\"annotation\">\u2989@52</span></span></span><span class=\"code\" style=\"--layer: 0\"> // Note: closing brace shows uncovered (vs. `0` for implicit else) because condition literal</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"56:6-56:6: @44[0]: _41 = const ()\"><span class=\"annotation\">@44\u298a</span>\u2038<span class=\"annotation\">\u2989@44</span></span></span><span class=\"code\" style=\"--layer: 0\"> // Note: closing brace shows uncovered (vs. `0` for implicit else) because condition literal</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">      // `true` was const-evaluated. The compiler knows the `if` block will be executed.</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:25-59:26: @79[3]: _62 = const 0_i32\n-59:9-59:22: @79[4]: FakeRead(ForLet, _62)\n-60:8-60:12: @79[7]: _64 = const true\n-60:8-60:12: @79[8]: FakeRead(ForMatchedPlace, _64)\"><span class=\"annotation\">@79\u298a</span>mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:25-59:26: @79[3]: _62 = const 0_i32\n-59:9-59:22: @79[4]: FakeRead(ForLet, _62)\n-60:8-60:12: @79[7]: _64 = const true\n-60:8-60:12: @79[8]: FakeRead(ForMatchedPlace, _64)\">    if true<span class=\"annotation\">\u2989@79</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"61:9-61:22: @82[0]: _62 = const 1_i32\n-60:13-62:6: @82[1]: _63 = const ()\"><span class=\"annotation\">@80,82\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"61:9-61:22: @82[0]: _62 = const 1_i32\n-60:13-62:6: @82[1]: _63 = const ()\">        countdown = 1;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"61:9-61:22: @82[0]: _62 = const 1_i32\n-60:13-62:6: @82[1]: _63 = const ()\">    }<span class=\"annotation\">\u2989@80,82</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"62:6-62:6: @81[0]: _63 = const ()\"><span class=\"annotation\">@81\u298a</span>\u2038<span class=\"annotation\">\u2989@81</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:25-59:26: @66[3]: _62 = const 0_i32\n+59:9-59:22: @66[4]: FakeRead(ForLet, _62)\n+60:8-60:12: @66[7]: _64 = const true\"><span class=\"annotation\">@66\u298a</span>mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:25-59:26: @66[3]: _62 = const 0_i32\n+59:9-59:22: @66[4]: FakeRead(ForLet, _62)\n+60:8-60:12: @66[7]: _64 = const true\">    if true<span class=\"annotation\">\u2989@66</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"61:9-61:22: @67[0]: _62 = const 1_i32\n+60:13-62:6: @67[1]: _63 = const ()\"><span class=\"annotation\">@67\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"61:9-61:22: @67[0]: _62 = const 1_i32\n+60:13-62:6: @67[1]: _63 = const ()\">        countdown = 1;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"61:9-61:22: @67[0]: _62 = const 1_i32\n+60:13-62:6: @67[1]: _63 = const ()\">    }<span class=\"annotation\">\u2989@67</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"62:6-62:6: @68[0]: _63 = const ()\"><span class=\"annotation\">@68\u298a</span>\u2038<span class=\"annotation\">\u2989@68</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"64:9-64:10: @106[0]: FakeRead(ForLet, _65)\"><span class=\"annotation\">@106\u298a</span>z<span class=\"annotation\">\u2989@106</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"64:16-64:25: @83[5]: _67 = _62\n-64:16-64:29: @83[6]: _66 = Gt(move _67, const 7_i32)\n-64:16-64:29: @83[8]: FakeRead(ForMatchedPlace, _66)\"><span class=\"annotation\">@83\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@83</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"65:9-65:23: @86[0]: _68 = CheckedSub(_62, const 4_i32)\n-65:9-65:23: @87[0]: _62 = move (_68.0: i32)\n-64:30-66:6: @87[1]: _65 = const ()\"><span class=\"annotation\">@84,86,87\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"65:9-65:23: @86[0]: _68 = CheckedSub(_62, const 4_i32)\n-65:9-65:23: @87[0]: _62 = move (_68.0: i32)\n-64:30-66:6: @87[1]: _65 = const ()\">        countdown -= 4;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"65:9-65:23: @86[0]: _68 = CheckedSub(_62, const 4_i32)\n-65:9-65:23: @87[0]: _62 = move (_68.0: i32)\n-64:30-66:6: @87[1]: _65 = const ()\">    }<span class=\"annotation\">\u2989@84,86,87</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"66:15-66:24: @85[2]: _70 = _62\n-66:15-66:28: @85[3]: _69 = Gt(move _70, const 2_i32)\n-66:15-66:28: @85[5]: FakeRead(ForMatchedPlace, _69)\"><span class=\"annotation\">@85\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@85</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"67:12-67:21: @90[5]: _75 = _62\n-67:12-67:25: @90[6]: _74 = Lt(move _75, const 1_i32)\"><span class=\"annotation\">@88,90\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@88,90</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"67:29-67:38: @97[2]: _77 = _62\n-67:29-67:42: @97[3]: _76 = Gt(move _77, const 5_i32)\"><span class=\"annotation\">@97\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@97</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"67:46-67:55: @93[2]: _79 = _62\n-67:46-67:60: @93[3]: _78 = Ne(move _79, const 9_i32)\"><span class=\"annotation\">@93\u298a</span>countdown != 9<span class=\"annotation\">\u2989@93</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"68:13-68:26: @101[0]: _62 = const 0_i32\n-67:61-69:10: @101[1]: _71 = const ()\"><span class=\"annotation\">@99,101\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:13-68:26: @101[0]: _62 = const 0_i32\n-67:61-69:10: @101[1]: _71 = const ()\">            countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:13-68:26: @101[0]: _62 = const 0_i32\n-67:61-69:10: @101[1]: _71 = const ()\">        }<span class=\"annotation\">\u2989@99,101</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"69:10-69:10: @100[0]: _71 = const ()\"><span class=\"annotation\">@100\u298a</span>\u2038<span class=\"annotation\">\u2989@100</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"70:9-70:23: @102[2]: _80 = CheckedSub(_62, const 5_i32)\n-70:9-70:23: @103[0]: _62 = move (_80.0: i32)\"><span class=\"annotation\">@102,103\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@102,103</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"64:9-64:10: @89[1]: FakeRead(ForLet, _65)\"><span class=\"annotation\">@89\u298a</span>z<span class=\"annotation\">\u2989@89</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"64:16-64:25: @69[5]: _67 = _62\n+64:16-64:29: @69[6]: _66 = Gt(move _67, const 7_i32)\"><span class=\"annotation\">@69\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@69</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"65:9-65:23: @70[0]: _68 = CheckedSub(_62, const 4_i32)\n+65:9-65:23: @72[0]: _62 = move (_68.0: i32)\n+64:30-66:6: @72[1]: _65 = const ()\"><span class=\"annotation\">@70,72\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"65:9-65:23: @70[0]: _68 = CheckedSub(_62, const 4_i32)\n+65:9-65:23: @72[0]: _62 = move (_68.0: i32)\n+64:30-66:6: @72[1]: _65 = const ()\">        countdown -= 4;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"65:9-65:23: @70[0]: _68 = CheckedSub(_62, const 4_i32)\n+65:9-65:23: @72[0]: _62 = move (_68.0: i32)\n+64:30-66:6: @72[1]: _65 = const ()\">    }<span class=\"annotation\">\u2989@70,72</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"66:15-66:24: @71[2]: _70 = _62\n+66:15-66:28: @71[3]: _69 = Gt(move _70, const 2_i32)\"><span class=\"annotation\">@71\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@71</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"67:12-67:21: @73[5]: _75 = _62\n+67:12-67:25: @73[6]: _74 = Lt(move _75, const 1_i32)\"><span class=\"annotation\">@73\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@73</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"67:29-67:38: @81[2]: _77 = _62\n+67:29-67:42: @81[3]: _76 = Gt(move _77, const 5_i32)\"><span class=\"annotation\">@81\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@81</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"67:46-67:55: @77[2]: _79 = _62\n+67:46-67:60: @77[3]: _78 = Ne(move _79, const 9_i32)\"><span class=\"annotation\">@77\u298a</span>countdown != 9<span class=\"annotation\">\u2989@77</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"68:13-68:26: @83[0]: _62 = const 0_i32\n+67:61-69:10: @83[1]: _71 = const ()\"><span class=\"annotation\">@83\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:13-68:26: @83[0]: _62 = const 0_i32\n+67:61-69:10: @83[1]: _71 = const ()\">            countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:13-68:26: @83[0]: _62 = const 0_i32\n+67:61-69:10: @83[1]: _71 = const ()\">        }<span class=\"annotation\">\u2989@83</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"69:10-69:10: @84[0]: _71 = const ()\"><span class=\"annotation\">@84\u298a</span>\u2038<span class=\"annotation\">\u2989@84</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"70:9-70:23: @85[2]: _80 = CheckedSub(_62, const 5_i32)\n+70:9-70:23: @86[0]: _62 = move (_80.0: i32)\"><span class=\"annotation\">@85,86\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@85,86</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"72:35-72:44: @89[1]: _82 = _62\n-72:13-72:32: @89[2]: FakeRead(ForLet, _82)\n-73:18-73:27: @89[9]: _113 = const main::promoted[1]\n-73:18-73:27: @89[10]: _88 = &amp;(*_113)\n-73:18-73:27: @89[11]: _87 = &amp;(*_88)\n-73:18-73:27: @89[12]: _86 = move _87 as &amp;[&amp;str] (Pointer(Unsize))\n-73:9-73:29: @89[18]: _94 = ()\n-73:9-73:29: @89[19]: FakeRead(ForMatchedPlace, _94)\n-73:9-73:29: @89[20]: _112 = const main::promoted[0]\n-73:9-73:29: @89[21]: _92 = &amp;(*_112)\n-73:9-73:29: @89[22]: _91 = &amp;(*_92)\n-73:9-73:29: @89[23]: _90 = move _91 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-73:9-73:29: @89.Call: _85 = Arguments::new_v1(move _86, move _90) -&gt; [return: bb104, unwind: bb132]\n-73:9-73:29: @104.Call: _84 = _print(move _85) -&gt; [return: bb105, unwind: bb132]\n-73:9-73:29: @105[5]: _83 = const ()\n-74:9-74:15: @105[7]: _0 = const ()\"><span class=\"annotation\">@89,104,105\u298a</span>should_be_reachable = countdown;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"72:35-72:44: @89[1]: _82 = _62\n-72:13-72:32: @89[2]: FakeRead(ForLet, _82)\n-73:18-73:27: @89[9]: _113 = const main::promoted[1]\n-73:18-73:27: @89[10]: _88 = &amp;(*_113)\n-73:18-73:27: @89[11]: _87 = &amp;(*_88)\n-73:18-73:27: @89[12]: _86 = move _87 as &amp;[&amp;str] (Pointer(Unsize))\n-73:9-73:29: @89[18]: _94 = ()\n-73:9-73:29: @89[19]: FakeRead(ForMatchedPlace, _94)\n-73:9-73:29: @89[20]: _112 = const main::promoted[0]\n-73:9-73:29: @89[21]: _92 = &amp;(*_112)\n-73:9-73:29: @89[22]: _91 = &amp;(*_92)\n-73:9-73:29: @89[23]: _90 = move _91 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-73:9-73:29: @89.Call: _85 = Arguments::new_v1(move _86, move _90) -&gt; [return: bb104, unwind: bb132]\n-73:9-73:29: @104.Call: _84 = _print(move _85) -&gt; [return: bb105, unwind: bb132]\n-73:9-73:29: @105[5]: _83 = const ()\n-74:9-74:15: @105[7]: _0 = const ()\">        println!(\"reached\");</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"72:35-72:44: @89[1]: _82 = _62\n-72:13-72:32: @89[2]: FakeRead(ForLet, _82)\n-73:18-73:27: @89[9]: _113 = const main::promoted[1]\n-73:18-73:27: @89[10]: _88 = &amp;(*_113)\n-73:18-73:27: @89[11]: _87 = &amp;(*_88)\n-73:18-73:27: @89[12]: _86 = move _87 as &amp;[&amp;str] (Pointer(Unsize))\n-73:9-73:29: @89[18]: _94 = ()\n-73:9-73:29: @89[19]: FakeRead(ForMatchedPlace, _94)\n-73:9-73:29: @89[20]: _112 = const main::promoted[0]\n-73:9-73:29: @89[21]: _92 = &amp;(*_112)\n-73:9-73:29: @89[22]: _91 = &amp;(*_92)\n-73:9-73:29: @89[23]: _90 = move _91 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-73:9-73:29: @89.Call: _85 = Arguments::new_v1(move _86, move _90) -&gt; [return: bb104, unwind: bb132]\n-73:9-73:29: @104.Call: _84 = _print(move _85) -&gt; [return: bb105, unwind: bb132]\n-73:9-73:29: @105[5]: _83 = const ()\n-74:9-74:15: @105[7]: _0 = const ()\">        return<span class=\"annotation\">\u2989@89,104,105</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"72:35-72:44: @74[1]: _82 = _62\n+72:13-72:32: @74[2]: FakeRead(ForLet, _82)\n+73:18-73:27: @74[9]: _113 = const main::promoted[1]\n+73:18-73:27: @74[10]: _88 = &amp;(*_113)\n+73:18-73:27: @74[11]: _87 = &amp;(*_88)\n+73:18-73:27: @74[12]: _86 = move _87 as &amp;[&amp;str] (Pointer(Unsize))\n+73:9-73:29: @74[18]: _94 = ()\n+73:9-73:29: @74[19]: FakeRead(ForMatchedPlace, _94)\n+73:9-73:29: @74[20]: _112 = const main::promoted[0]\n+73:9-73:29: @74[21]: _92 = &amp;(*_112)\n+73:9-73:29: @74[22]: _91 = &amp;(*_92)\n+73:9-73:29: @74[23]: _90 = move _91 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+73:9-73:29: @74.Call: _85 = Arguments::new_v1(move _86, move _90) -&gt; [return: bb87, unwind: bb112]\n+73:9-73:29: @87.Call: _84 = _print(move _85) -&gt; [return: bb88, unwind: bb112]\n+73:9-73:29: @88[5]: _83 = const ()\n+74:9-74:15: @88[7]: _0 = const ()\"><span class=\"annotation\">@74,87,88\u298a</span>should_be_reachable = countdown;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"72:35-72:44: @74[1]: _82 = _62\n+72:13-72:32: @74[2]: FakeRead(ForLet, _82)\n+73:18-73:27: @74[9]: _113 = const main::promoted[1]\n+73:18-73:27: @74[10]: _88 = &amp;(*_113)\n+73:18-73:27: @74[11]: _87 = &amp;(*_88)\n+73:18-73:27: @74[12]: _86 = move _87 as &amp;[&amp;str] (Pointer(Unsize))\n+73:9-73:29: @74[18]: _94 = ()\n+73:9-73:29: @74[19]: FakeRead(ForMatchedPlace, _94)\n+73:9-73:29: @74[20]: _112 = const main::promoted[0]\n+73:9-73:29: @74[21]: _92 = &amp;(*_112)\n+73:9-73:29: @74[22]: _91 = &amp;(*_92)\n+73:9-73:29: @74[23]: _90 = move _91 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+73:9-73:29: @74.Call: _85 = Arguments::new_v1(move _86, move _90) -&gt; [return: bb87, unwind: bb112]\n+73:9-73:29: @87.Call: _84 = _print(move _85) -&gt; [return: bb88, unwind: bb112]\n+73:9-73:29: @88[5]: _83 = const ()\n+74:9-74:15: @88[7]: _0 = const ()\">        println!(\"reached\");</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"72:35-72:44: @74[1]: _82 = _62\n+72:13-72:32: @74[2]: FakeRead(ForLet, _82)\n+73:18-73:27: @74[9]: _113 = const main::promoted[1]\n+73:18-73:27: @74[10]: _88 = &amp;(*_113)\n+73:18-73:27: @74[11]: _87 = &amp;(*_88)\n+73:18-73:27: @74[12]: _86 = move _87 as &amp;[&amp;str] (Pointer(Unsize))\n+73:9-73:29: @74[18]: _94 = ()\n+73:9-73:29: @74[19]: FakeRead(ForMatchedPlace, _94)\n+73:9-73:29: @74[20]: _112 = const main::promoted[0]\n+73:9-73:29: @74[21]: _92 = &amp;(*_112)\n+73:9-73:29: @74[22]: _91 = &amp;(*_92)\n+73:9-73:29: @74[23]: _90 = move _91 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+73:9-73:29: @74.Call: _85 = Arguments::new_v1(move _86, move _90) -&gt; [return: bb87, unwind: bb112]\n+73:9-73:29: @87.Call: _84 = _print(move _85) -&gt; [return: bb88, unwind: bb112]\n+73:9-73:29: @88[5]: _83 = const ()\n+74:9-74:15: @88[7]: _0 = const ()\">        return<span class=\"annotation\">\u2989@74,87,88</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    };</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:10: @127[0]: FakeRead(ForLet, _95)\"><span class=\"annotation\">@127\u298a</span>w<span class=\"annotation\">\u2989@127</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"77:16-77:25: @106[5]: _97 = _62\n-77:16-77:29: @106[6]: _96 = Gt(move _97, const 7_i32)\n-77:16-77:29: @106[8]: FakeRead(ForMatchedPlace, _96)\"><span class=\"annotation\">@106\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@106</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"78:9-78:23: @109[0]: _98 = CheckedSub(_62, const 4_i32)\n-78:9-78:23: @110[0]: _62 = move (_98.0: i32)\n-77:30-79:6: @110[1]: _95 = const ()\"><span class=\"annotation\">@107,109,110\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"78:9-78:23: @109[0]: _98 = CheckedSub(_62, const 4_i32)\n-78:9-78:23: @110[0]: _62 = move (_98.0: i32)\n-77:30-79:6: @110[1]: _95 = const ()\">        countdown -= 4;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"78:9-78:23: @109[0]: _98 = CheckedSub(_62, const 4_i32)\n-78:9-78:23: @110[0]: _62 = move (_98.0: i32)\n-77:30-79:6: @110[1]: _95 = const ()\">    }<span class=\"annotation\">\u2989@107,109,110</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:15-79:24: @108[2]: _100 = _62\n-79:15-79:28: @108[3]: _99 = Gt(move _100, const 2_i32)\n-79:15-79:28: @108[5]: FakeRead(ForMatchedPlace, _99)\"><span class=\"annotation\">@108\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@108</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"80:12-80:21: @113[5]: _105 = _62\n-80:12-80:25: @113[6]: _104 = Lt(move _105, const 1_i32)\"><span class=\"annotation\">@111,113\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@111,113</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"80:29-80:38: @120[2]: _107 = _62\n-80:29-80:42: @120[3]: _106 = Gt(move _107, const 5_i32)\"><span class=\"annotation\">@120\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@120</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"80:46-80:55: @116[2]: _109 = _62\n-80:46-80:60: @116[3]: _108 = Ne(move _109, const 9_i32)\"><span class=\"annotation\">@116\u298a</span>countdown != 9<span class=\"annotation\">\u2989@116</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"81:13-81:26: @124[0]: _62 = const 0_i32\n-80:61-82:10: @124[1]: _101 = const ()\"><span class=\"annotation\">@122,124\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"81:13-81:26: @124[0]: _62 = const 0_i32\n-80:61-82:10: @124[1]: _101 = const ()\">            countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"81:13-81:26: @124[0]: _62 = const 0_i32\n-80:61-82:10: @124[1]: _101 = const ()\">        }<span class=\"annotation\">\u2989@122,124</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"82:10-82:10: @123[0]: _101 = const ()\"><span class=\"annotation\">@123\u298a</span>\u2038<span class=\"annotation\">\u2989@123</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"83:9-83:23: @125[2]: _110 = CheckedSub(_62, const 5_i32)\n-83:9-83:23: @126[0]: _62 = move (_110.0: i32)\"><span class=\"annotation\">@125,126\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@125,126</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:10: @107[1]: FakeRead(ForLet, _95)\"><span class=\"annotation\">@107\u298a</span>w<span class=\"annotation\">\u2989@107</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"77:16-77:25: @89[5]: _97 = _62\n+77:16-77:29: @89[6]: _96 = Gt(move _97, const 7_i32)\"><span class=\"annotation\">@89\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@89</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"78:9-78:23: @90[0]: _98 = CheckedSub(_62, const 4_i32)\n+78:9-78:23: @92[0]: _62 = move (_98.0: i32)\n+77:30-79:6: @92[1]: _95 = const ()\"><span class=\"annotation\">@90,92\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"78:9-78:23: @90[0]: _98 = CheckedSub(_62, const 4_i32)\n+78:9-78:23: @92[0]: _62 = move (_98.0: i32)\n+77:30-79:6: @92[1]: _95 = const ()\">        countdown -= 4;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"78:9-78:23: @90[0]: _98 = CheckedSub(_62, const 4_i32)\n+78:9-78:23: @92[0]: _62 = move (_98.0: i32)\n+77:30-79:6: @92[1]: _95 = const ()\">    }<span class=\"annotation\">\u2989@90,92</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:15-79:24: @91[2]: _100 = _62\n+79:15-79:28: @91[3]: _99 = Gt(move _100, const 2_i32)\"><span class=\"annotation\">@91\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@91</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"80:12-80:21: @93[5]: _105 = _62\n+80:12-80:25: @93[6]: _104 = Lt(move _105, const 1_i32)\"><span class=\"annotation\">@93\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@93</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"80:29-80:38: @101[2]: _107 = _62\n+80:29-80:42: @101[3]: _106 = Gt(move _107, const 5_i32)\"><span class=\"annotation\">@101\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@101</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"80:46-80:55: @97[2]: _109 = _62\n+80:46-80:60: @97[3]: _108 = Ne(move _109, const 9_i32)\"><span class=\"annotation\">@97\u298a</span>countdown != 9<span class=\"annotation\">\u2989@97</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"81:13-81:26: @103[0]: _62 = const 0_i32\n+80:61-82:10: @103[1]: _101 = const ()\"><span class=\"annotation\">@103\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"81:13-81:26: @103[0]: _62 = const 0_i32\n+80:61-82:10: @103[1]: _101 = const ()\">            countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"81:13-81:26: @103[0]: _62 = const 0_i32\n+80:61-82:10: @103[1]: _101 = const ()\">        }<span class=\"annotation\">\u2989@103</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"82:10-82:10: @104[0]: _101 = const ()\"><span class=\"annotation\">@104\u298a</span>\u2038<span class=\"annotation\">\u2989@104</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"83:9-83:23: @105[2]: _110 = CheckedSub(_62, const 5_i32)\n+83:9-83:23: @106[0]: _62 = move (_110.0: i32)\"><span class=\"annotation\">@105,106\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@105,106</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"85:9-85:15: @112[0]: _0 = const ()\"><span class=\"annotation\">@112\u298a</span>return<span class=\"annotation\">\u2989@112</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"85:9-85:15: @94[0]: _0 = const ()\"><span class=\"annotation\">@94\u298a</span>return<span class=\"annotation\">\u2989@94</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    };</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"87:2-87:2: @131.Return: return\"><span class=\"annotation\">@131\u298a</span>\u2038<span class=\"annotation\">\u2989@131</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"87:2-87:2: @111.Return: return\"><span class=\"annotation\">@111\u298a</span>\u2038<span class=\"annotation\">\u2989@111</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "421fe27825c3f06bc33e62ad6ebf0f74639ed2ae", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.dead_code/dead_code.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.dead_code%2Fdead_code.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.dead_code%2Fdead_code.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.dead_code%2Fdead_code.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,83 +69,75 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 26\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+<div class=\"code\" style=\"counter-reset: line 26\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 31:19-31:35: @1[0]: _3 = &amp;_4\n-31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 31:19-31:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 31:9-31:16: @2[3]: FakeRead(ForLet, _1)\n 33:25-33:26: @3[2]: _5 = const 0_i32\n 33:9-33:22: @3[3]: FakeRead(ForLet, _5)\n-34:8-34:15: @3[5]: _6 = _1\n-34:8-34:15: @3[6]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+34:8-34:15: @3[5]: _6 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 31:19-31:35: @1[0]: _3 = &amp;_4\n-31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 31:19-31:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 31:9-31:16: @2[3]: FakeRead(ForLet, _1)\n 33:25-33:26: @3[2]: _5 = const 0_i32\n 33:9-33:22: @3[3]: FakeRead(ForLet, _5)\n-34:8-34:15: @3[5]: _6 = _1\n-34:8-34:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+34:8-34:15: @3[5]: _6 = _1\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 31:19-31:35: @1[0]: _3 = &amp;_4\n-31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 31:19-31:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 31:9-31:16: @2[3]: FakeRead(ForLet, _1)\n 33:25-33:26: @3[2]: _5 = const 0_i32\n 33:9-33:22: @3[3]: FakeRead(ForLet, _5)\n-34:8-34:15: @3[5]: _6 = _1\n-34:8-34:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+34:8-34:15: @3[5]: _6 = _1\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 31:19-31:35: @1[0]: _3 = &amp;_4\n-31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 31:19-31:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 31:9-31:16: @2[3]: FakeRead(ForLet, _1)\n 33:25-33:26: @3[2]: _5 = const 0_i32\n 33:9-33:22: @3[3]: FakeRead(ForLet, _5)\n-34:8-34:15: @3[5]: _6 = _1\n-34:8-34:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+34:8-34:15: @3[5]: _6 = _1\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 31:19-31:35: @1[0]: _3 = &amp;_4\n-31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 31:19-31:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 31:9-31:16: @2[3]: FakeRead(ForLet, _1)\n 33:25-33:26: @3[2]: _5 = const 0_i32\n 33:9-33:22: @3[3]: FakeRead(ForLet, _5)\n-34:8-34:15: @3[5]: _6 = _1\n-34:8-34:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+34:8-34:15: @3[5]: _6 = _1\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 31:19-31:35: @1[0]: _3 = &amp;_4\n-31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 31:19-31:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 31:9-31:16: @2[3]: FakeRead(ForLet, _1)\n 33:25-33:26: @3[2]: _5 = const 0_i32\n 33:9-33:22: @3[3]: FakeRead(ForLet, _5)\n-34:8-34:15: @3[5]: _6 = _1\n-34:8-34:15: @3[6]: FakeRead(ForMatchedPlace, _6)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+34:8-34:15: @3[5]: _6 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 31:19-31:35: @1[0]: _3 = &amp;_4\n-31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 31:19-31:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 31:9-31:16: @2[3]: FakeRead(ForLet, _1)\n 33:25-33:26: @3[2]: _5 = const 0_i32\n 33:9-33:22: @3[3]: FakeRead(ForLet, _5)\n-34:8-34:15: @3[5]: _6 = _1\n-34:8-34:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    let mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+34:8-34:15: @3[5]: _6 = _1\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:19-31:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 31:19-31:35: @1[0]: _3 = &amp;_4\n-31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+31:19-31:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 31:19-31:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 31:9-31:16: @2[3]: FakeRead(ForLet, _1)\n 33:25-33:26: @3[2]: _5 = const 0_i32\n 33:9-33:22: @3[3]: FakeRead(ForLet, _5)\n-34:8-34:15: @3[5]: _6 = _1\n-34:8-34:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-35:23: @6[0]: _5 = const 10_i32\n-34:16-36:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-35:23: @6[0]: _5 = const 10_i32\n-34:16-36:6: @6[1]: _0 = const ()\">        countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-35:23: @6[0]: _5 = const 10_i32\n-34:16-36:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:6-36:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"37:2-37:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+34:8-34:15: @3[5]: _6 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-35:23: @4[0]: _5 = const 10_i32\n+34:16-36:6: @4[1]: _0 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-35:23: @4[0]: _5 = const 10_i32\n+34:16-36:6: @4[1]: _0 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-35:23: @4[0]: _5 = const 10_i32\n+34:16-36:6: @4[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:6-36:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"37:2-37:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "ff3493c9f623b80ae4a456f80cf0f644dbebb94a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.dead_code/dead_code.unused_fn.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.dead_code%2Fdead_code.unused_fn.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.dead_code%2Fdead_code.unused_fn.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.dead_code%2Fdead_code.unused_fn.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,83 +69,75 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 14\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+<div class=\"code\" style=\"counter-reset: line 14\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 19:19-19:35: @1[0]: _3 = &amp;_4\n-19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 19:19-19:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 19:9-19:16: @2[3]: FakeRead(ForLet, _1)\n 21:25-21:26: @3[2]: _5 = const 0_i32\n 21:9-21:22: @3[3]: FakeRead(ForLet, _5)\n-22:8-22:15: @3[5]: _6 = _1\n-22:8-22:15: @3[6]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn unused_fn() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+22:8-22:15: @3[5]: _6 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn unused_fn() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 19:19-19:35: @1[0]: _3 = &amp;_4\n-19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 19:19-19:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 19:9-19:16: @2[3]: FakeRead(ForLet, _1)\n 21:25-21:26: @3[2]: _5 = const 0_i32\n 21:9-21:22: @3[3]: FakeRead(ForLet, _5)\n-22:8-22:15: @3[5]: _6 = _1\n-22:8-22:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+22:8-22:15: @3[5]: _6 = _1\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 19:19-19:35: @1[0]: _3 = &amp;_4\n-19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 19:19-19:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 19:9-19:16: @2[3]: FakeRead(ForLet, _1)\n 21:25-21:26: @3[2]: _5 = const 0_i32\n 21:9-21:22: @3[3]: FakeRead(ForLet, _5)\n-22:8-22:15: @3[5]: _6 = _1\n-22:8-22:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+22:8-22:15: @3[5]: _6 = _1\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 19:19-19:35: @1[0]: _3 = &amp;_4\n-19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 19:19-19:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 19:9-19:16: @2[3]: FakeRead(ForLet, _1)\n 21:25-21:26: @3[2]: _5 = const 0_i32\n 21:9-21:22: @3[3]: FakeRead(ForLet, _5)\n-22:8-22:15: @3[5]: _6 = _1\n-22:8-22:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+22:8-22:15: @3[5]: _6 = _1\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 19:19-19:35: @1[0]: _3 = &amp;_4\n-19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 19:19-19:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 19:9-19:16: @2[3]: FakeRead(ForLet, _1)\n 21:25-21:26: @3[2]: _5 = const 0_i32\n 21:9-21:22: @3[3]: FakeRead(ForLet, _5)\n-22:8-22:15: @3[5]: _6 = _1\n-22:8-22:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+22:8-22:15: @3[5]: _6 = _1\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 19:19-19:35: @1[0]: _3 = &amp;_4\n-19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 19:19-19:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 19:9-19:16: @2[3]: FakeRead(ForLet, _1)\n 21:25-21:26: @3[2]: _5 = const 0_i32\n 21:9-21:22: @3[3]: FakeRead(ForLet, _5)\n-22:8-22:15: @3[5]: _6 = _1\n-22:8-22:15: @3[6]: FakeRead(ForMatchedPlace, _6)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+22:8-22:15: @3[5]: _6 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 19:19-19:35: @1[0]: _3 = &amp;_4\n-19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 19:19-19:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 19:9-19:16: @2[3]: FakeRead(ForLet, _1)\n 21:25-21:26: @3[2]: _5 = const 0_i32\n 21:9-21:22: @3[3]: FakeRead(ForLet, _5)\n-22:8-22:15: @3[5]: _6 = _1\n-22:8-22:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    let mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+22:8-22:15: @3[5]: _6 = _1\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:19-19:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 19:19-19:35: @1[0]: _3 = &amp;_4\n-19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+19:19-19:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 19:19-19:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 19:9-19:16: @2[3]: FakeRead(ForLet, _1)\n 21:25-21:26: @3[2]: _5 = const 0_i32\n 21:9-21:22: @3[3]: FakeRead(ForLet, _5)\n-22:8-22:15: @3[5]: _6 = _1\n-22:8-22:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:23: @6[0]: _5 = const 10_i32\n-22:16-24:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:23: @6[0]: _5 = const 10_i32\n-22:16-24:6: @6[1]: _0 = const ()\">        countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:23: @6[0]: _5 = const 10_i32\n-22:16-24:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:6-24:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:2-25:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+22:8-22:15: @3[5]: _6 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:23: @4[0]: _5 = const 10_i32\n+22:16-24:6: @4[1]: _0 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:23: @4[0]: _5 = const 10_i32\n+22:16-24:6: @4[1]: _0 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:23: @4[0]: _5 = const 10_i32\n+22:16-24:6: @4[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:6-24:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:2-25:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "829113e8a71d58a4aad43d1655bd6df5f8eefde0", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.dead_code/dead_code.unused_pub_fn_not_in_library.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.dead_code%2Fdead_code.unused_pub_fn_not_in_library.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.dead_code%2Fdead_code.unused_pub_fn_not_in_library.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.dead_code%2Fdead_code.unused_pub_fn_not_in_library.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,83 +69,75 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[5]: _6 = _1\n-10:8-10:15: @3[6]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn unused_pub_fn_not_in_library() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+10:8-10:15: @3[5]: _6 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn unused_pub_fn_not_in_library() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[5]: _6 = _1\n-10:8-10:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+10:8-10:15: @3[5]: _6 = _1\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[5]: _6 = _1\n-10:8-10:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+10:8-10:15: @3[5]: _6 = _1\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[5]: _6 = _1\n-10:8-10:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+10:8-10:15: @3[5]: _6 = _1\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[5]: _6 = _1\n-10:8-10:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+10:8-10:15: @3[5]: _6 = _1\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[5]: _6 = _1\n-10:8-10:15: @3[6]: FakeRead(ForMatchedPlace, _6)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+10:8-10:15: @3[5]: _6 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[5]: _6 = _1\n-10:8-10:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    let mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+10:8-10:15: @3[5]: _6 = _1\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[5]: _6 = _1\n-10:8-10:15: @3[6]: FakeRead(ForMatchedPlace, _6)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_i32\n-10:16-12:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_i32\n-10:16-12:6: @6[1]: _0 = const ()\">        countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_i32\n-10:16-12:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"13:2-13:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+10:8-10:15: @3[5]: _6 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @4[0]: _5 = const 10_i32\n+10:16-12:6: @4[1]: _0 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @4[0]: _5 = const 10_i32\n+10:16-12:6: @4[1]: _0 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @4[0]: _5 = const 10_i32\n+10:16-12:6: @4[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"13:2-13:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "3566912628a9e0a5b40f5e795fc76601c7be6be2", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest/doctest.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 50, "deletions": 51, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -70,58 +70,57 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 72\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn main() <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"74:8-74:12: @0[1]: _1 = const true\n-74:8-74:12: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @5[0]: _2 = const ()\"><span class=\"annotation\">@5\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"75:9-75:26: @6[5]: _75 = const main::promoted[3]\n-75:9-75:26: @6[6]: _18 = &amp;(*_75)\n-75:9-75:26: @6[7]: _17 = &amp;(*_18)\n-75:9-75:26: @6[8]: _16 = move _17 as &amp;[&amp;str] (Pointer(Unsize))\n-75:9-75:26: @6[17]: _26 = &amp;(*_8)\n-75:9-75:26: @6[18]: _25 = &amp;_26\n-75:9-75:26: @6[21]: _28 = &amp;(*_9)\n-75:9-75:26: @6[22]: _27 = &amp;_28\n-75:9-75:26: @6[23]: _24 = (move _25, move _27)\n-75:9-75:26: @6[26]: FakeRead(ForMatchedPlace, _24)\n-75:9-75:26: @6[28]: _29 = (_24.0: &amp;&amp;i32)\n-75:9-75:26: @6[30]: _30 = (_24.1: &amp;&amp;i32)\n-75:9-75:26: @6[33]: _32 = &amp;(*_29)\n-75:9-75:26: @6[35]: _33 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-75:9-75:26: @6.Call: _31 = ArgumentV1::new::&lt;&amp;i32&gt;(move _32, move _33) -&gt; [return: bb7, unwind: bb17]\n-75:9-75:26: @7[4]: _35 = &amp;(*_30)\n-75:9-75:26: @7[6]: _36 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-75:9-75:26: @7.Call: _34 = ArgumentV1::new::&lt;&amp;i32&gt;(move _35, move _36) -&gt; [return: bb8, unwind: bb17]\n-75:9-75:26: @8[2]: _23 = [move _31, move _34]\n-75:9-75:26: @8[7]: _22 = &amp;_23\n-75:9-75:26: @8[8]: _21 = &amp;(*_22)\n-75:9-75:26: @8[9]: _20 = move _21 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-75:9-75:26: @8.Call: _15 = Arguments::new_v1(move _16, move _20) -&gt; [return: bb9, unwind: bb17]\n-75:9-75:26: @9.Call: core::panicking::panic_fmt(move _15) -&gt; bb17\"><span class=\"annotation\">@4,6,7,8,9\u298a</span>assert_eq!(1, 1);<span class=\"annotation\">\u2989@4,6,7,8,9</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @5[0]: _2 = const ()\"><span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"74:8-74:12: @0[1]: _1 = const true\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @4[0]: _2 = const ()\"><span class=\"annotation\">@4\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"75:9-75:26: @3[5]: _75 = const main::promoted[3]\n+75:9-75:26: @3[6]: _18 = &amp;(*_75)\n+75:9-75:26: @3[7]: _17 = &amp;(*_18)\n+75:9-75:26: @3[8]: _16 = move _17 as &amp;[&amp;str] (Pointer(Unsize))\n+75:9-75:26: @3[17]: _26 = &amp;(*_8)\n+75:9-75:26: @3[18]: _25 = &amp;_26\n+75:9-75:26: @3[21]: _28 = &amp;(*_9)\n+75:9-75:26: @3[22]: _27 = &amp;_28\n+75:9-75:26: @3[23]: _24 = (move _25, move _27)\n+75:9-75:26: @3[26]: FakeRead(ForMatchedPlace, _24)\n+75:9-75:26: @3[28]: _29 = (_24.0: &amp;&amp;i32)\n+75:9-75:26: @3[30]: _30 = (_24.1: &amp;&amp;i32)\n+75:9-75:26: @3[33]: _32 = &amp;(*_29)\n+75:9-75:26: @3[35]: _33 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+75:9-75:26: @3.Call: _31 = ArgumentV1::new::&lt;&amp;i32&gt;(move _32, move _33) -&gt; [return: bb5, unwind: bb14]\n+75:9-75:26: @5[4]: _35 = &amp;(*_30)\n+75:9-75:26: @5[6]: _36 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+75:9-75:26: @5.Call: _34 = ArgumentV1::new::&lt;&amp;i32&gt;(move _35, move _36) -&gt; [return: bb6, unwind: bb14]\n+75:9-75:26: @6[2]: _23 = [move _31, move _34]\n+75:9-75:26: @6[7]: _22 = &amp;_23\n+75:9-75:26: @6[8]: _21 = &amp;(*_22)\n+75:9-75:26: @6[9]: _20 = move _21 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+75:9-75:26: @6.Call: _15 = Arguments::new_v1(move _16, move _20) -&gt; [return: bb7, unwind: bb14]\n+75:9-75:26: @7.Call: core::panicking::panic_fmt(move _15) -&gt; bb14\"><span class=\"annotation\">@3,5,6,7\u298a</span>assert_eq!(1, 1);<span class=\"annotation\">\u2989@3,5,6,7</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @4[0]: _2 = const ()\"><span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @11[0]: _37 = const ()\"><span class=\"annotation\">@11\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"77:9-77:26: @12[5]: _72 = const main::promoted[0]\n-77:9-77:26: @12[6]: _53 = &amp;(*_72)\n-77:9-77:26: @12[7]: _52 = &amp;(*_53)\n-77:9-77:26: @12[8]: _51 = move _52 as &amp;[&amp;str] (Pointer(Unsize))\n-77:9-77:26: @12[17]: _61 = &amp;(*_43)\n-77:9-77:26: @12[18]: _60 = &amp;_61\n-77:9-77:26: @12[21]: _63 = &amp;(*_44)\n-77:9-77:26: @12[22]: _62 = &amp;_63\n-77:9-77:26: @12[23]: _59 = (move _60, move _62)\n-77:9-77:26: @12[26]: FakeRead(ForMatchedPlace, _59)\n-77:9-77:26: @12[28]: _64 = (_59.0: &amp;&amp;i32)\n-77:9-77:26: @12[30]: _65 = (_59.1: &amp;&amp;i32)\n-77:9-77:26: @12[33]: _67 = &amp;(*_64)\n-77:9-77:26: @12[35]: _68 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-77:9-77:26: @12.Call: _66 = ArgumentV1::new::&lt;&amp;i32&gt;(move _67, move _68) -&gt; [return: bb13, unwind: bb17]\n-77:9-77:26: @13[4]: _70 = &amp;(*_65)\n-77:9-77:26: @13[6]: _71 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-77:9-77:26: @13.Call: _69 = ArgumentV1::new::&lt;&amp;i32&gt;(move _70, move _71) -&gt; [return: bb14, unwind: bb17]\n-77:9-77:26: @14[2]: _58 = [move _66, move _69]\n-77:9-77:26: @14[7]: _57 = &amp;_58\n-77:9-77:26: @14[8]: _56 = &amp;(*_57)\n-77:9-77:26: @14[9]: _55 = move _56 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-77:9-77:26: @14.Call: _50 = Arguments::new_v1(move _51, move _55) -&gt; [return: bb15, unwind: bb17]\n-77:9-77:26: @15.Call: core::panicking::panic_fmt(move _50) -&gt; bb17\"><span class=\"annotation\">@10,12,13,14,15\u298a</span>assert_eq!(1, 2);<span class=\"annotation\">\u2989@10,12,13,14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @11[0]: _37 = const ()\"><span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @9[0]: _37 = const ()\"><span class=\"annotation\">@9\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"77:9-77:26: @8[5]: _72 = const main::promoted[0]\n+77:9-77:26: @8[6]: _53 = &amp;(*_72)\n+77:9-77:26: @8[7]: _52 = &amp;(*_53)\n+77:9-77:26: @8[8]: _51 = move _52 as &amp;[&amp;str] (Pointer(Unsize))\n+77:9-77:26: @8[17]: _61 = &amp;(*_43)\n+77:9-77:26: @8[18]: _60 = &amp;_61\n+77:9-77:26: @8[21]: _63 = &amp;(*_44)\n+77:9-77:26: @8[22]: _62 = &amp;_63\n+77:9-77:26: @8[23]: _59 = (move _60, move _62)\n+77:9-77:26: @8[26]: FakeRead(ForMatchedPlace, _59)\n+77:9-77:26: @8[28]: _64 = (_59.0: &amp;&amp;i32)\n+77:9-77:26: @8[30]: _65 = (_59.1: &amp;&amp;i32)\n+77:9-77:26: @8[33]: _67 = &amp;(*_64)\n+77:9-77:26: @8[35]: _68 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+77:9-77:26: @8.Call: _66 = ArgumentV1::new::&lt;&amp;i32&gt;(move _67, move _68) -&gt; [return: bb10, unwind: bb14]\n+77:9-77:26: @10[4]: _70 = &amp;(*_65)\n+77:9-77:26: @10[6]: _71 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+77:9-77:26: @10.Call: _69 = ArgumentV1::new::&lt;&amp;i32&gt;(move _70, move _71) -&gt; [return: bb11, unwind: bb14]\n+77:9-77:26: @11[2]: _58 = [move _66, move _69]\n+77:9-77:26: @11[7]: _57 = &amp;_58\n+77:9-77:26: @11[8]: _56 = &amp;(*_57)\n+77:9-77:26: @11[9]: _55 = move _56 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+77:9-77:26: @11.Call: _50 = Arguments::new_v1(move _51, move _55) -&gt; [return: bb12, unwind: bb14]\n+77:9-77:26: @12.Call: core::panicking::panic_fmt(move _50) -&gt; bb14\"><span class=\"annotation\">@8,10,11,12\u298a</span>assert_eq!(1, 2);<span class=\"annotation\">\u2989@8,10,11,12</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @9[0]: _37 = const ()\"><span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:2-79:2: @16.Return: return\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:2-79:2: @13.Return: return\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "02c25cc904c4a2db4ac75fc60bd98b7f6f2c5890", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest_crate/doctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 97, "deletions": 97, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest_crate%2Fdoctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest_crate%2Fdoctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest_crate%2Fdoctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -71,103 +71,103 @@\n <body>\n <div class=\"code\" style=\"counter-reset: line 1\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>pub fn fn_run_in_doctests(conditional: usize) <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:11-3:22: @0[0]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>conditional<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        1 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">@7\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:14-4:30: @8[5]: _138 = const fn_run_in_doctests::promoted[0]\n-4:14-4:30: @8[6]: _17 = &amp;(*_138)\n-4:14-4:30: @8[7]: _16 = &amp;(*_17)\n-4:14-4:30: @8[8]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n-4:14-4:30: @8[17]: _25 = &amp;(*_7)\n-4:14-4:30: @8[18]: _24 = &amp;_25\n-4:14-4:30: @8[21]: _27 = &amp;(*_8)\n-4:14-4:30: @8[22]: _26 = &amp;_27\n-4:14-4:30: @8[23]: _23 = (move _24, move _26)\n-4:14-4:30: @8[26]: FakeRead(ForMatchedPlace, _23)\n-4:14-4:30: @8[28]: _28 = (_23.0: &amp;&amp;i32)\n-4:14-4:30: @8[30]: _29 = (_23.1: &amp;&amp;i32)\n-4:14-4:30: @8[33]: _31 = &amp;(*_28)\n-4:14-4:30: @8[35]: _32 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-4:14-4:30: @8.Call: _30 = ArgumentV1::new::&lt;&amp;i32&gt;(move _31, move _32) -&gt; [return: bb9, unwind: bb33]\n-4:14-4:30: @9[4]: _34 = &amp;(*_29)\n-4:14-4:30: @9[6]: _35 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-4:14-4:30: @9.Call: _33 = ArgumentV1::new::&lt;&amp;i32&gt;(move _34, move _35) -&gt; [return: bb10, unwind: bb33]\n-4:14-4:30: @10[2]: _22 = [move _30, move _33]\n-4:14-4:30: @10[7]: _21 = &amp;_22\n-4:14-4:30: @10[8]: _20 = &amp;(*_21)\n-4:14-4:30: @10[9]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-4:14-4:30: @10.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb11, unwind: bb33]\n-4:14-4:30: @11.Call: core::panicking::panic_fmt(move _14) -&gt; bb33\"><span class=\"annotation\">@6,8,9,10,11\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@6,8,9,10,11</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this is run,</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        2 =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @14[0]: _0 = const ()\"><span class=\"annotation\">@14\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"5:14-5:30: @15[5]: _141 = const fn_run_in_doctests::promoted[3]\n-5:14-5:30: @15[6]: _51 = &amp;(*_141)\n-5:14-5:30: @15[7]: _50 = &amp;(*_51)\n-5:14-5:30: @15[8]: _49 = move _50 as &amp;[&amp;str] (Pointer(Unsize))\n-5:14-5:30: @15[17]: _59 = &amp;(*_41)\n-5:14-5:30: @15[18]: _58 = &amp;_59\n-5:14-5:30: @15[21]: _61 = &amp;(*_42)\n-5:14-5:30: @15[22]: _60 = &amp;_61\n-5:14-5:30: @15[23]: _57 = (move _58, move _60)\n-5:14-5:30: @15[26]: FakeRead(ForMatchedPlace, _57)\n-5:14-5:30: @15[28]: _62 = (_57.0: &amp;&amp;i32)\n-5:14-5:30: @15[30]: _63 = (_57.1: &amp;&amp;i32)\n-5:14-5:30: @15[33]: _65 = &amp;(*_62)\n-5:14-5:30: @15[35]: _66 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-5:14-5:30: @15.Call: _64 = ArgumentV1::new::&lt;&amp;i32&gt;(move _65, move _66) -&gt; [return: bb16, unwind: bb33]\n-5:14-5:30: @16[4]: _68 = &amp;(*_63)\n-5:14-5:30: @16[6]: _69 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-5:14-5:30: @16.Call: _67 = ArgumentV1::new::&lt;&amp;i32&gt;(move _68, move _69) -&gt; [return: bb17, unwind: bb33]\n-5:14-5:30: @17[2]: _56 = [move _64, move _67]\n-5:14-5:30: @17[7]: _55 = &amp;_56\n-5:14-5:30: @17[8]: _54 = &amp;(*_55)\n-5:14-5:30: @17[9]: _53 = move _54 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-5:14-5:30: @17.Call: _48 = Arguments::new_v1(move _49, move _53) -&gt; [return: bb18, unwind: bb33]\n-5:14-5:30: @18.Call: core::panicking::panic_fmt(move _48) -&gt; bb33\"><span class=\"annotation\">@13,15,16,17,18\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@13,15,16,17,18</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @14[0]: _0 = const ()\"><span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this,</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        3 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @21[0]: _0 = const ()\"><span class=\"annotation\">@21\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"6:14-6:30: @22[5]: _144 = const fn_run_in_doctests::promoted[6]\n-6:14-6:30: @22[6]: _85 = &amp;(*_144)\n-6:14-6:30: @22[7]: _84 = &amp;(*_85)\n-6:14-6:30: @22[8]: _83 = move _84 as &amp;[&amp;str] (Pointer(Unsize))\n-6:14-6:30: @22[17]: _93 = &amp;(*_75)\n-6:14-6:30: @22[18]: _92 = &amp;_93\n-6:14-6:30: @22[21]: _95 = &amp;(*_76)\n-6:14-6:30: @22[22]: _94 = &amp;_95\n-6:14-6:30: @22[23]: _91 = (move _92, move _94)\n-6:14-6:30: @22[26]: FakeRead(ForMatchedPlace, _91)\n-6:14-6:30: @22[28]: _96 = (_91.0: &amp;&amp;i32)\n-6:14-6:30: @22[30]: _97 = (_91.1: &amp;&amp;i32)\n-6:14-6:30: @22[33]: _99 = &amp;(*_96)\n-6:14-6:30: @22[35]: _100 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-6:14-6:30: @22.Call: _98 = ArgumentV1::new::&lt;&amp;i32&gt;(move _99, move _100) -&gt; [return: bb23, unwind: bb33]\n-6:14-6:30: @23[4]: _102 = &amp;(*_97)\n-6:14-6:30: @23[6]: _103 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-6:14-6:30: @23.Call: _101 = ArgumentV1::new::&lt;&amp;i32&gt;(move _102, move _103) -&gt; [return: bb24, unwind: bb33]\n-6:14-6:30: @24[2]: _90 = [move _98, move _101]\n-6:14-6:30: @24[7]: _89 = &amp;_90\n-6:14-6:30: @24[8]: _88 = &amp;(*_89)\n-6:14-6:30: @24[9]: _87 = move _88 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-6:14-6:30: @24.Call: _82 = Arguments::new_v1(move _83, move _87) -&gt; [return: bb25, unwind: bb33]\n-6:14-6:30: @25.Call: core::panicking::panic_fmt(move _82) -&gt; bb33\"><span class=\"annotation\">@20,22,23,24,25\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@20,22,23,24,25</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @21[0]: _0 = const ()\"><span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\">, // and this too</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @27[0]: _0 = const ()\"><span class=\"annotation\">@27\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"7:14-7:30: @28[5]: _147 = const fn_run_in_doctests::promoted[9]\n-7:14-7:30: @28[6]: _119 = &amp;(*_147)\n-7:14-7:30: @28[7]: _118 = &amp;(*_119)\n-7:14-7:30: @28[8]: _117 = move _118 as &amp;[&amp;str] (Pointer(Unsize))\n-7:14-7:30: @28[17]: _127 = &amp;(*_109)\n-7:14-7:30: @28[18]: _126 = &amp;_127\n-7:14-7:30: @28[21]: _129 = &amp;(*_110)\n-7:14-7:30: @28[22]: _128 = &amp;_129\n-7:14-7:30: @28[23]: _125 = (move _126, move _128)\n-7:14-7:30: @28[26]: FakeRead(ForMatchedPlace, _125)\n-7:14-7:30: @28[28]: _130 = (_125.0: &amp;&amp;i32)\n-7:14-7:30: @28[30]: _131 = (_125.1: &amp;&amp;i32)\n-7:14-7:30: @28[33]: _133 = &amp;(*_130)\n-7:14-7:30: @28[35]: _134 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-7:14-7:30: @28.Call: _132 = ArgumentV1::new::&lt;&amp;i32&gt;(move _133, move _134) -&gt; [return: bb29, unwind: bb33]\n-7:14-7:30: @29[4]: _136 = &amp;(*_131)\n-7:14-7:30: @29[6]: _137 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-7:14-7:30: @29.Call: _135 = ArgumentV1::new::&lt;&amp;i32&gt;(move _136, move _137) -&gt; [return: bb30, unwind: bb33]\n-7:14-7:30: @30[2]: _124 = [move _132, move _135]\n-7:14-7:30: @30[7]: _123 = &amp;_124\n-7:14-7:30: @30[8]: _122 = &amp;(*_123)\n-7:14-7:30: @30[9]: _121 = move _122 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-7:14-7:30: @30.Call: _116 = Arguments::new_v1(move _117, move _121) -&gt; [return: bb31, unwind: bb33]\n-7:14-7:30: @31.Call: core::panicking::panic_fmt(move _116) -&gt; bb33\"><span class=\"annotation\">@26,28,29,30,31\u298a</span>assert_eq!(1, 2)<span class=\"annotation\">\u2989@26,28,29,30,31</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @27[0]: _0 = const ()\"><span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\">, // however this is not</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        1 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">@7\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:14-4:30: @6[5]: _138 = const fn_run_in_doctests::promoted[0]\n+4:14-4:30: @6[6]: _17 = &amp;(*_138)\n+4:14-4:30: @6[7]: _16 = &amp;(*_17)\n+4:14-4:30: @6[8]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n+4:14-4:30: @6[17]: _25 = &amp;(*_7)\n+4:14-4:30: @6[18]: _24 = &amp;_25\n+4:14-4:30: @6[21]: _27 = &amp;(*_8)\n+4:14-4:30: @6[22]: _26 = &amp;_27\n+4:14-4:30: @6[23]: _23 = (move _24, move _26)\n+4:14-4:30: @6[26]: FakeRead(ForMatchedPlace, _23)\n+4:14-4:30: @6[28]: _28 = (_23.0: &amp;&amp;i32)\n+4:14-4:30: @6[30]: _29 = (_23.1: &amp;&amp;i32)\n+4:14-4:30: @6[33]: _31 = &amp;(*_28)\n+4:14-4:30: @6[35]: _32 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+4:14-4:30: @6.Call: _30 = ArgumentV1::new::&lt;&amp;i32&gt;(move _31, move _32) -&gt; [return: bb8, unwind: bb29]\n+4:14-4:30: @8[4]: _34 = &amp;(*_29)\n+4:14-4:30: @8[6]: _35 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+4:14-4:30: @8.Call: _33 = ArgumentV1::new::&lt;&amp;i32&gt;(move _34, move _35) -&gt; [return: bb9, unwind: bb29]\n+4:14-4:30: @9[2]: _22 = [move _30, move _33]\n+4:14-4:30: @9[7]: _21 = &amp;_22\n+4:14-4:30: @9[8]: _20 = &amp;(*_21)\n+4:14-4:30: @9[9]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+4:14-4:30: @9.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb10, unwind: bb29]\n+4:14-4:30: @10.Call: core::panicking::panic_fmt(move _14) -&gt; bb29\"><span class=\"annotation\">@6,8,9,10\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@6,8,9,10</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this is run,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        2 =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @13[0]: _0 = const ()\"><span class=\"annotation\">@13\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"5:14-5:30: @12[5]: _141 = const fn_run_in_doctests::promoted[3]\n+5:14-5:30: @12[6]: _51 = &amp;(*_141)\n+5:14-5:30: @12[7]: _50 = &amp;(*_51)\n+5:14-5:30: @12[8]: _49 = move _50 as &amp;[&amp;str] (Pointer(Unsize))\n+5:14-5:30: @12[17]: _59 = &amp;(*_41)\n+5:14-5:30: @12[18]: _58 = &amp;_59\n+5:14-5:30: @12[21]: _61 = &amp;(*_42)\n+5:14-5:30: @12[22]: _60 = &amp;_61\n+5:14-5:30: @12[23]: _57 = (move _58, move _60)\n+5:14-5:30: @12[26]: FakeRead(ForMatchedPlace, _57)\n+5:14-5:30: @12[28]: _62 = (_57.0: &amp;&amp;i32)\n+5:14-5:30: @12[30]: _63 = (_57.1: &amp;&amp;i32)\n+5:14-5:30: @12[33]: _65 = &amp;(*_62)\n+5:14-5:30: @12[35]: _66 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+5:14-5:30: @12.Call: _64 = ArgumentV1::new::&lt;&amp;i32&gt;(move _65, move _66) -&gt; [return: bb14, unwind: bb29]\n+5:14-5:30: @14[4]: _68 = &amp;(*_63)\n+5:14-5:30: @14[6]: _69 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+5:14-5:30: @14.Call: _67 = ArgumentV1::new::&lt;&amp;i32&gt;(move _68, move _69) -&gt; [return: bb15, unwind: bb29]\n+5:14-5:30: @15[2]: _56 = [move _64, move _67]\n+5:14-5:30: @15[7]: _55 = &amp;_56\n+5:14-5:30: @15[8]: _54 = &amp;(*_55)\n+5:14-5:30: @15[9]: _53 = move _54 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+5:14-5:30: @15.Call: _48 = Arguments::new_v1(move _49, move _53) -&gt; [return: bb16, unwind: bb29]\n+5:14-5:30: @16.Call: core::panicking::panic_fmt(move _48) -&gt; bb29\"><span class=\"annotation\">@12,14,15,16\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@12,14,15,16</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @13[0]: _0 = const ()\"><span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        3 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @19[0]: _0 = const ()\"><span class=\"annotation\">@19\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"6:14-6:30: @18[5]: _144 = const fn_run_in_doctests::promoted[6]\n+6:14-6:30: @18[6]: _85 = &amp;(*_144)\n+6:14-6:30: @18[7]: _84 = &amp;(*_85)\n+6:14-6:30: @18[8]: _83 = move _84 as &amp;[&amp;str] (Pointer(Unsize))\n+6:14-6:30: @18[17]: _93 = &amp;(*_75)\n+6:14-6:30: @18[18]: _92 = &amp;_93\n+6:14-6:30: @18[21]: _95 = &amp;(*_76)\n+6:14-6:30: @18[22]: _94 = &amp;_95\n+6:14-6:30: @18[23]: _91 = (move _92, move _94)\n+6:14-6:30: @18[26]: FakeRead(ForMatchedPlace, _91)\n+6:14-6:30: @18[28]: _96 = (_91.0: &amp;&amp;i32)\n+6:14-6:30: @18[30]: _97 = (_91.1: &amp;&amp;i32)\n+6:14-6:30: @18[33]: _99 = &amp;(*_96)\n+6:14-6:30: @18[35]: _100 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+6:14-6:30: @18.Call: _98 = ArgumentV1::new::&lt;&amp;i32&gt;(move _99, move _100) -&gt; [return: bb20, unwind: bb29]\n+6:14-6:30: @20[4]: _102 = &amp;(*_97)\n+6:14-6:30: @20[6]: _103 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+6:14-6:30: @20.Call: _101 = ArgumentV1::new::&lt;&amp;i32&gt;(move _102, move _103) -&gt; [return: bb21, unwind: bb29]\n+6:14-6:30: @21[2]: _90 = [move _98, move _101]\n+6:14-6:30: @21[7]: _89 = &amp;_90\n+6:14-6:30: @21[8]: _88 = &amp;(*_89)\n+6:14-6:30: @21[9]: _87 = move _88 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+6:14-6:30: @21.Call: _82 = Arguments::new_v1(move _83, move _87) -&gt; [return: bb22, unwind: bb29]\n+6:14-6:30: @22.Call: core::panicking::panic_fmt(move _82) -&gt; bb29\"><span class=\"annotation\">@18,20,21,22\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@18,20,21,22</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @19[0]: _0 = const ()\"><span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\">, // and this too</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @24[0]: _0 = const ()\"><span class=\"annotation\">@24\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"7:14-7:30: @23[5]: _147 = const fn_run_in_doctests::promoted[9]\n+7:14-7:30: @23[6]: _119 = &amp;(*_147)\n+7:14-7:30: @23[7]: _118 = &amp;(*_119)\n+7:14-7:30: @23[8]: _117 = move _118 as &amp;[&amp;str] (Pointer(Unsize))\n+7:14-7:30: @23[17]: _127 = &amp;(*_109)\n+7:14-7:30: @23[18]: _126 = &amp;_127\n+7:14-7:30: @23[21]: _129 = &amp;(*_110)\n+7:14-7:30: @23[22]: _128 = &amp;_129\n+7:14-7:30: @23[23]: _125 = (move _126, move _128)\n+7:14-7:30: @23[26]: FakeRead(ForMatchedPlace, _125)\n+7:14-7:30: @23[28]: _130 = (_125.0: &amp;&amp;i32)\n+7:14-7:30: @23[30]: _131 = (_125.1: &amp;&amp;i32)\n+7:14-7:30: @23[33]: _133 = &amp;(*_130)\n+7:14-7:30: @23[35]: _134 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+7:14-7:30: @23.Call: _132 = ArgumentV1::new::&lt;&amp;i32&gt;(move _133, move _134) -&gt; [return: bb25, unwind: bb29]\n+7:14-7:30: @25[4]: _136 = &amp;(*_131)\n+7:14-7:30: @25[6]: _137 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+7:14-7:30: @25.Call: _135 = ArgumentV1::new::&lt;&amp;i32&gt;(move _136, move _137) -&gt; [return: bb26, unwind: bb29]\n+7:14-7:30: @26[2]: _124 = [move _132, move _135]\n+7:14-7:30: @26[7]: _123 = &amp;_124\n+7:14-7:30: @26[8]: _122 = &amp;(*_123)\n+7:14-7:30: @26[9]: _121 = move _122 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+7:14-7:30: @26.Call: _116 = Arguments::new_v1(move _117, move _121) -&gt; [return: bb27, unwind: bb29]\n+7:14-7:30: @27.Call: core::panicking::panic_fmt(move _116) -&gt; bb29\"><span class=\"annotation\">@23,25,26,27\u298a</span>assert_eq!(1, 2)<span class=\"annotation\">\u2989@23,25,26,27</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @24[0]: _0 = const ()\"><span class=\"annotation\">\u2989@24</span></span></span><span class=\"code\" style=\"--layer: 0\">, // however this is not</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:2-9:2: @32.Return: return\"><span class=\"annotation\">@32\u298a</span>\u2038<span class=\"annotation\">\u2989@32</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:2-9:2: @28.Return: return\"><span class=\"annotation\">@28\u298a</span>\u2038<span class=\"annotation\">\u2989@28</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "3b5d1e2cdac281f696d7064be7e57ff031d14d20", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.drop_trait/drop_trait.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 45, "deletions": 51, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -73,86 +73,80 @@\n 15:9-15:21: @0[2]: FakeRead(ForLet, _1)\n 17:16-17:42: @0[4]: _2 = Firework { strength: const 100_i32 }\n 17:9-17:13: @0[5]: FakeRead(ForLet, _2)\n-19:8-19:12: @0[8]: _4 = const true\n-19:8-19:12: @0[9]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>fn main() -&gt; Result&lt;(),u8&gt; {</span></span>\n+19:8-19:12: @0[8]: _4 = const true\"><span class=\"annotation\">@0\u298a</span>fn main() -&gt; Result&lt;(),u8&gt; {</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:24-15:48: @0[1]: _1 = Firework { strength: const 1_i32 }\n 15:9-15:21: @0[2]: FakeRead(ForLet, _1)\n 17:16-17:42: @0[4]: _2 = Firework { strength: const 100_i32 }\n 17:9-17:13: @0[5]: FakeRead(ForLet, _2)\n-19:8-19:12: @0[8]: _4 = const true\n-19:8-19:12: @0[9]: FakeRead(ForMatchedPlace, _4)\">    let _firecracker = Firework { strength: 1 };</span></span>\n+19:8-19:12: @0[8]: _4 = const true\">    let _firecracker = Firework { strength: 1 };</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:24-15:48: @0[1]: _1 = Firework { strength: const 1_i32 }\n 15:9-15:21: @0[2]: FakeRead(ForLet, _1)\n 17:16-17:42: @0[4]: _2 = Firework { strength: const 100_i32 }\n 17:9-17:13: @0[5]: FakeRead(ForLet, _2)\n-19:8-19:12: @0[8]: _4 = const true\n-19:8-19:12: @0[9]: FakeRead(ForMatchedPlace, _4)\"></span></span>\n+19:8-19:12: @0[8]: _4 = const true\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:24-15:48: @0[1]: _1 = Firework { strength: const 1_i32 }\n 15:9-15:21: @0[2]: FakeRead(ForLet, _1)\n 17:16-17:42: @0[4]: _2 = Firework { strength: const 100_i32 }\n 17:9-17:13: @0[5]: FakeRead(ForLet, _2)\n-19:8-19:12: @0[8]: _4 = const true\n-19:8-19:12: @0[9]: FakeRead(ForMatchedPlace, _4)\">    let _tnt = Firework { strength: 100 };</span></span>\n+19:8-19:12: @0[8]: _4 = const true\">    let _tnt = Firework { strength: 100 };</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:24-15:48: @0[1]: _1 = Firework { strength: const 1_i32 }\n 15:9-15:21: @0[2]: FakeRead(ForLet, _1)\n 17:16-17:42: @0[4]: _2 = Firework { strength: const 100_i32 }\n 17:9-17:13: @0[5]: FakeRead(ForLet, _2)\n-19:8-19:12: @0[8]: _4 = const true\n-19:8-19:12: @0[9]: FakeRead(ForMatchedPlace, _4)\"></span></span>\n+19:8-19:12: @0[8]: _4 = const true\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:24-15:48: @0[1]: _1 = Firework { strength: const 1_i32 }\n 15:9-15:21: @0[2]: FakeRead(ForLet, _1)\n 17:16-17:42: @0[4]: _2 = Firework { strength: const 100_i32 }\n 17:9-17:13: @0[5]: FakeRead(ForLet, _2)\n-19:8-19:12: @0[8]: _4 = const true\n-19:8-19:12: @0[9]: FakeRead(ForMatchedPlace, _4)\">    if true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:18-20:41: @3[6]: _21 = const main::promoted[1]\n-20:18-20:41: @3[7]: _11 = &amp;(*_21)\n-20:18-20:41: @3[8]: _10 = &amp;(*_11)\n-20:18-20:41: @3[9]: _9 = move _10 as &amp;[&amp;str] (Pointer(Unsize))\n-20:9-20:43: @3[15]: _17 = ()\n-20:9-20:43: @3[16]: FakeRead(ForMatchedPlace, _17)\n-20:9-20:43: @3[17]: _20 = const main::promoted[0]\n-20:9-20:43: @3[18]: _15 = &amp;(*_20)\n-20:9-20:43: @3[19]: _14 = &amp;(*_15)\n-20:9-20:43: @3[20]: _13 = move _14 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-20:9-20:43: @3.Call: _8 = Arguments::new_v1(move _9, move _13) -&gt; [return: bb4, unwind: bb12]\n-20:9-20:43: @4.Call: _7 = _print(move _8) -&gt; [return: bb5, unwind: bb12]\n-20:9-20:43: @5[5]: _6 = const ()\n-21:16-21:22: @5[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@1,3,4,5,9,10\u298a</span>println!(\"Exiting with error...\");</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"20:18-20:41: @3[6]: _21 = const main::promoted[1]\n-20:18-20:41: @3[7]: _11 = &amp;(*_21)\n-20:18-20:41: @3[8]: _10 = &amp;(*_11)\n-20:18-20:41: @3[9]: _9 = move _10 as &amp;[&amp;str] (Pointer(Unsize))\n-20:9-20:43: @3[15]: _17 = ()\n-20:9-20:43: @3[16]: FakeRead(ForMatchedPlace, _17)\n-20:9-20:43: @3[17]: _20 = const main::promoted[0]\n-20:9-20:43: @3[18]: _15 = &amp;(*_20)\n-20:9-20:43: @3[19]: _14 = &amp;(*_15)\n-20:9-20:43: @3[20]: _13 = move _14 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-20:9-20:43: @3.Call: _8 = Arguments::new_v1(move _9, move _13) -&gt; [return: bb4, unwind: bb12]\n-20:9-20:43: @4.Call: _7 = _print(move _8) -&gt; [return: bb5, unwind: bb12]\n-20:9-20:43: @5[5]: _6 = const ()\n-21:16-21:22: @5[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\">        return Err(1)<span class=\"annotation\">\u2989@1,3,4,5,9,10</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+19:8-19:12: @0[8]: _4 = const true\">    if true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:18-20:41: @1[6]: _21 = const main::promoted[1]\n+20:18-20:41: @1[7]: _11 = &amp;(*_21)\n+20:18-20:41: @1[8]: _10 = &amp;(*_11)\n+20:18-20:41: @1[9]: _9 = move _10 as &amp;[&amp;str] (Pointer(Unsize))\n+20:9-20:43: @1[15]: _17 = ()\n+20:9-20:43: @1[16]: FakeRead(ForMatchedPlace, _17)\n+20:9-20:43: @1[17]: _20 = const main::promoted[0]\n+20:9-20:43: @1[18]: _15 = &amp;(*_20)\n+20:9-20:43: @1[19]: _14 = &amp;(*_15)\n+20:9-20:43: @1[20]: _13 = move _14 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+20:9-20:43: @1.Call: _8 = Arguments::new_v1(move _9, move _13) -&gt; [return: bb3, unwind: bb11]\n+20:9-20:43: @3.Call: _7 = _print(move _8) -&gt; [return: bb4, unwind: bb11]\n+20:9-20:43: @4[5]: _6 = const ()\n+21:16-21:22: @4[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@1,3,4,8,9\u298a</span>println!(\"Exiting with error...\");</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"20:18-20:41: @1[6]: _21 = const main::promoted[1]\n+20:18-20:41: @1[7]: _11 = &amp;(*_21)\n+20:18-20:41: @1[8]: _10 = &amp;(*_11)\n+20:18-20:41: @1[9]: _9 = move _10 as &amp;[&amp;str] (Pointer(Unsize))\n+20:9-20:43: @1[15]: _17 = ()\n+20:9-20:43: @1[16]: FakeRead(ForMatchedPlace, _17)\n+20:9-20:43: @1[17]: _20 = const main::promoted[0]\n+20:9-20:43: @1[18]: _15 = &amp;(*_20)\n+20:9-20:43: @1[19]: _14 = &amp;(*_15)\n+20:9-20:43: @1[20]: _13 = move _14 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+20:9-20:43: @1.Call: _8 = Arguments::new_v1(move _9, move _13) -&gt; [return: bb3, unwind: bb11]\n+20:9-20:43: @3.Call: _7 = _print(move _8) -&gt; [return: bb4, unwind: bb11]\n+20:9-20:43: @4[5]: _6 = const ()\n+21:16-21:22: @4[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\">        return Err(1)<span class=\"annotation\">\u2989@1,3,4,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n-26:8-26:10: @6[2]: _19 = ()\n-26:5-26:11: @6[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\"><span class=\"annotation\">@2,6,7,8\u298a</span></span></span>\n+26:8-26:10: @5[2]: _19 = ()\n+26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\"><span class=\"annotation\">@2,5,6,7\u298a</span></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n-26:8-26:10: @6[2]: _19 = ()\n-26:5-26:11: @6[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\"></span></span>\n+26:8-26:10: @5[2]: _19 = ()\n+26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n-26:8-26:10: @6[2]: _19 = ()\n-26:5-26:11: @6[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\">    let _ = Firework { strength: 1000 };</span></span>\n+26:8-26:10: @5[2]: _19 = ()\n+26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\">    let _ = Firework { strength: 1000 };</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n-26:8-26:10: @6[2]: _19 = ()\n-26:5-26:11: @6[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\"></span></span>\n+26:8-26:10: @5[2]: _19 = ()\n+26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n-26:8-26:10: @6[2]: _19 = ()\n-26:5-26:11: @6[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\">    Ok(())<span class=\"annotation\">\u2989@2,6,7,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @11.Return: return\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span></span></div>\n+26:8-26:10: @5[2]: _19 = ()\n+26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\">    Ok(())<span class=\"annotation\">\u2989@2,5,6,7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @10.Return: return\"><span class=\"annotation\">@10\u298a</span>\u2038<span class=\"annotation\">\u2989@10</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "0373b38e1b11fa429d10980fa51a7f985ef38336", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.generics/generics.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 83, "deletions": 92, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -72,175 +72,166 @@\n <div class=\"code\" style=\"counter-reset: line 21\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:27-23:51: @0[1]: _1 = Firework::&lt;i32&gt; { strength: const 1_i32 }\n 23:9-23:24: @0[2]: FakeRead(ForLet, _1)\n 24:5-24:16: @0[5]: _3 = &amp;mut _1\n-24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb16]\n+24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb15]\n 26:19-26:47: @1[3]: _4 = Firework::&lt;f64&gt; { strength: const 100.09999999999999f64 }\n 26:9-26:16: @1[4]: FakeRead(ForLet, _4)\n 27:5-27:8: @1[7]: _6 = &amp;mut _4\n-27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb15]\n+27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb14]\n 28:5-28:8: @2[4]: _8 = &amp;mut _4\n-28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb15]\n-30:8-30:12: @3[4]: _10 = const true\n-30:8-30:12: @3[5]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() -&gt; Result&lt;(),u8&gt; {</span></span>\n+28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb14]\n+30:8-30:12: @3[4]: _10 = const true\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() -&gt; Result&lt;(),u8&gt; {</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:27-23:51: @0[1]: _1 = Firework::&lt;i32&gt; { strength: const 1_i32 }\n 23:9-23:24: @0[2]: FakeRead(ForLet, _1)\n 24:5-24:16: @0[5]: _3 = &amp;mut _1\n-24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb16]\n+24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb15]\n 26:19-26:47: @1[3]: _4 = Firework::&lt;f64&gt; { strength: const 100.09999999999999f64 }\n 26:9-26:16: @1[4]: FakeRead(ForLet, _4)\n 27:5-27:8: @1[7]: _6 = &amp;mut _4\n-27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb15]\n+27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb14]\n 28:5-28:8: @2[4]: _8 = &amp;mut _4\n-28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb15]\n-30:8-30:12: @3[4]: _10 = const true\n-30:8-30:12: @3[5]: FakeRead(ForMatchedPlace, _10)\">    let mut firecracker = Firework { strength: 1 };</span></span>\n+28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb14]\n+30:8-30:12: @3[4]: _10 = const true\">    let mut firecracker = Firework { strength: 1 };</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:27-23:51: @0[1]: _1 = Firework::&lt;i32&gt; { strength: const 1_i32 }\n 23:9-23:24: @0[2]: FakeRead(ForLet, _1)\n 24:5-24:16: @0[5]: _3 = &amp;mut _1\n-24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb16]\n+24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb15]\n 26:19-26:47: @1[3]: _4 = Firework::&lt;f64&gt; { strength: const 100.09999999999999f64 }\n 26:9-26:16: @1[4]: FakeRead(ForLet, _4)\n 27:5-27:8: @1[7]: _6 = &amp;mut _4\n-27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb15]\n+27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb14]\n 28:5-28:8: @2[4]: _8 = &amp;mut _4\n-28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb15]\n-30:8-30:12: @3[4]: _10 = const true\n-30:8-30:12: @3[5]: FakeRead(ForMatchedPlace, _10)\">    firecracker.set_strength(2);</span></span>\n+28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb14]\n+30:8-30:12: @3[4]: _10 = const true\">    firecracker.set_strength(2);</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:27-23:51: @0[1]: _1 = Firework::&lt;i32&gt; { strength: const 1_i32 }\n 23:9-23:24: @0[2]: FakeRead(ForLet, _1)\n 24:5-24:16: @0[5]: _3 = &amp;mut _1\n-24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb16]\n+24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb15]\n 26:19-26:47: @1[3]: _4 = Firework::&lt;f64&gt; { strength: const 100.09999999999999f64 }\n 26:9-26:16: @1[4]: FakeRead(ForLet, _4)\n 27:5-27:8: @1[7]: _6 = &amp;mut _4\n-27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb15]\n+27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb14]\n 28:5-28:8: @2[4]: _8 = &amp;mut _4\n-28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb15]\n-30:8-30:12: @3[4]: _10 = const true\n-30:8-30:12: @3[5]: FakeRead(ForMatchedPlace, _10)\"></span></span>\n+28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb14]\n+30:8-30:12: @3[4]: _10 = const true\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:27-23:51: @0[1]: _1 = Firework::&lt;i32&gt; { strength: const 1_i32 }\n 23:9-23:24: @0[2]: FakeRead(ForLet, _1)\n 24:5-24:16: @0[5]: _3 = &amp;mut _1\n-24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb16]\n+24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb15]\n 26:19-26:47: @1[3]: _4 = Firework::&lt;f64&gt; { strength: const 100.09999999999999f64 }\n 26:9-26:16: @1[4]: FakeRead(ForLet, _4)\n 27:5-27:8: @1[7]: _6 = &amp;mut _4\n-27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb15]\n+27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb14]\n 28:5-28:8: @2[4]: _8 = &amp;mut _4\n-28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb15]\n-30:8-30:12: @3[4]: _10 = const true\n-30:8-30:12: @3[5]: FakeRead(ForMatchedPlace, _10)\">    let mut tnt = Firework { strength: 100.1 };</span></span>\n+28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb14]\n+30:8-30:12: @3[4]: _10 = const true\">    let mut tnt = Firework { strength: 100.1 };</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:27-23:51: @0[1]: _1 = Firework::&lt;i32&gt; { strength: const 1_i32 }\n 23:9-23:24: @0[2]: FakeRead(ForLet, _1)\n 24:5-24:16: @0[5]: _3 = &amp;mut _1\n-24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb16]\n+24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb15]\n 26:19-26:47: @1[3]: _4 = Firework::&lt;f64&gt; { strength: const 100.09999999999999f64 }\n 26:9-26:16: @1[4]: FakeRead(ForLet, _4)\n 27:5-27:8: @1[7]: _6 = &amp;mut _4\n-27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb15]\n+27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb14]\n 28:5-28:8: @2[4]: _8 = &amp;mut _4\n-28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb15]\n-30:8-30:12: @3[4]: _10 = const true\n-30:8-30:12: @3[5]: FakeRead(ForMatchedPlace, _10)\">    tnt.set_strength(200.1);</span></span>\n+28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb14]\n+30:8-30:12: @3[4]: _10 = const true\">    tnt.set_strength(200.1);</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:27-23:51: @0[1]: _1 = Firework::&lt;i32&gt; { strength: const 1_i32 }\n 23:9-23:24: @0[2]: FakeRead(ForLet, _1)\n 24:5-24:16: @0[5]: _3 = &amp;mut _1\n-24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb16]\n+24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb15]\n 26:19-26:47: @1[3]: _4 = Firework::&lt;f64&gt; { strength: const 100.09999999999999f64 }\n 26:9-26:16: @1[4]: FakeRead(ForLet, _4)\n 27:5-27:8: @1[7]: _6 = &amp;mut _4\n-27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb15]\n+27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb14]\n 28:5-28:8: @2[4]: _8 = &amp;mut _4\n-28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb15]\n-30:8-30:12: @3[4]: _10 = const true\n-30:8-30:12: @3[5]: FakeRead(ForMatchedPlace, _10)\">    tnt.set_strength(300.3);</span></span>\n+28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb14]\n+30:8-30:12: @3[4]: _10 = const true\">    tnt.set_strength(300.3);</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:27-23:51: @0[1]: _1 = Firework::&lt;i32&gt; { strength: const 1_i32 }\n 23:9-23:24: @0[2]: FakeRead(ForLet, _1)\n 24:5-24:16: @0[5]: _3 = &amp;mut _1\n-24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb16]\n+24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb15]\n 26:19-26:47: @1[3]: _4 = Firework::&lt;f64&gt; { strength: const 100.09999999999999f64 }\n 26:9-26:16: @1[4]: FakeRead(ForLet, _4)\n 27:5-27:8: @1[7]: _6 = &amp;mut _4\n-27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb15]\n+27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb14]\n 28:5-28:8: @2[4]: _8 = &amp;mut _4\n-28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb15]\n-30:8-30:12: @3[4]: _10 = const true\n-30:8-30:12: @3[5]: FakeRead(ForMatchedPlace, _10)\"></span></span>\n+28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb14]\n+30:8-30:12: @3[4]: _10 = const true\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:27-23:51: @0[1]: _1 = Firework::&lt;i32&gt; { strength: const 1_i32 }\n 23:9-23:24: @0[2]: FakeRead(ForLet, _1)\n 24:5-24:16: @0[5]: _3 = &amp;mut _1\n-24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb16]\n+24:5-24:32: @0.Call: _2 = Firework::&lt;i32&gt;::set_strength(move _3, const 2_i32) -&gt; [return: bb1, unwind: bb15]\n 26:19-26:47: @1[3]: _4 = Firework::&lt;f64&gt; { strength: const 100.09999999999999f64 }\n 26:9-26:16: @1[4]: FakeRead(ForLet, _4)\n 27:5-27:8: @1[7]: _6 = &amp;mut _4\n-27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb15]\n+27:5-27:28: @1.Call: _5 = Firework::&lt;f64&gt;::set_strength(move _6, const 200.09999999999999f64) -&gt; [return: bb2, unwind: bb14]\n 28:5-28:8: @2[4]: _8 = &amp;mut _4\n-28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb15]\n-30:8-30:12: @3[4]: _10 = const true\n-30:8-30:12: @3[5]: FakeRead(ForMatchedPlace, _10)\">    if true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:18-31:41: @6[6]: _27 = const main::promoted[1]\n-31:18-31:41: @6[7]: _17 = &amp;(*_27)\n-31:18-31:41: @6[8]: _16 = &amp;(*_17)\n-31:18-31:41: @6[9]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n-31:9-31:43: @6[15]: _23 = ()\n-31:9-31:43: @6[16]: FakeRead(ForMatchedPlace, _23)\n-31:9-31:43: @6[17]: _26 = const main::promoted[0]\n-31:9-31:43: @6[18]: _21 = &amp;(*_26)\n-31:9-31:43: @6[19]: _20 = &amp;(*_21)\n-31:9-31:43: @6[20]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-31:9-31:43: @6.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb7, unwind: bb15]\n-31:9-31:43: @7.Call: _13 = _print(move _14) -&gt; [return: bb8, unwind: bb15]\n-31:9-31:43: @8[5]: _12 = const ()\n-32:16-32:22: @8[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@4,6,7,8,12,13\u298a</span>println!(\"Exiting with error...\");</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"31:18-31:41: @6[6]: _27 = const main::promoted[1]\n-31:18-31:41: @6[7]: _17 = &amp;(*_27)\n-31:18-31:41: @6[8]: _16 = &amp;(*_17)\n-31:18-31:41: @6[9]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n-31:9-31:43: @6[15]: _23 = ()\n-31:9-31:43: @6[16]: FakeRead(ForMatchedPlace, _23)\n-31:9-31:43: @6[17]: _26 = const main::promoted[0]\n-31:9-31:43: @6[18]: _21 = &amp;(*_26)\n-31:9-31:43: @6[19]: _20 = &amp;(*_21)\n-31:9-31:43: @6[20]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-31:9-31:43: @6.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb7, unwind: bb15]\n-31:9-31:43: @7.Call: _13 = _print(move _14) -&gt; [return: bb8, unwind: bb15]\n-31:9-31:43: @8[5]: _12 = const ()\n-32:16-32:22: @8[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\">        return Err(1)<span class=\"annotation\">\u2989@4,6,7,8,12,13</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+28:5-28:28: @2.Call: _7 = Firework::&lt;f64&gt;::set_strength(move _8, const 300.30000000000001f64) -&gt; [return: bb3, unwind: bb14]\n+30:8-30:12: @3[4]: _10 = const true\">    if true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:18-31:41: @4[6]: _27 = const main::promoted[1]\n+31:18-31:41: @4[7]: _17 = &amp;(*_27)\n+31:18-31:41: @4[8]: _16 = &amp;(*_17)\n+31:18-31:41: @4[9]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n+31:9-31:43: @4[15]: _23 = ()\n+31:9-31:43: @4[16]: FakeRead(ForMatchedPlace, _23)\n+31:9-31:43: @4[17]: _26 = const main::promoted[0]\n+31:9-31:43: @4[18]: _21 = &amp;(*_26)\n+31:9-31:43: @4[19]: _20 = &amp;(*_21)\n+31:9-31:43: @4[20]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+31:9-31:43: @4.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb6, unwind: bb14]\n+31:9-31:43: @6.Call: _13 = _print(move _14) -&gt; [return: bb7, unwind: bb14]\n+31:9-31:43: @7[5]: _12 = const ()\n+32:16-32:22: @7[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@4,6,7,11,12\u298a</span>println!(\"Exiting with error...\");</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"31:18-31:41: @4[6]: _27 = const main::promoted[1]\n+31:18-31:41: @4[7]: _17 = &amp;(*_27)\n+31:18-31:41: @4[8]: _16 = &amp;(*_17)\n+31:18-31:41: @4[9]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n+31:9-31:43: @4[15]: _23 = ()\n+31:9-31:43: @4[16]: FakeRead(ForMatchedPlace, _23)\n+31:9-31:43: @4[17]: _26 = const main::promoted[0]\n+31:9-31:43: @4[18]: _21 = &amp;(*_26)\n+31:9-31:43: @4[19]: _20 = &amp;(*_21)\n+31:9-31:43: @4[20]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+31:9-31:43: @4.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb6, unwind: bb14]\n+31:9-31:43: @6.Call: _13 = _print(move _14) -&gt; [return: bb7, unwind: bb14]\n+31:9-31:43: @7[5]: _12 = const ()\n+32:16-32:22: @7[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\">        return Err(1)<span class=\"annotation\">\u2989@4,6,7,11,12</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n-41:8-41:10: @9[2]: _25 = ()\n-41:5-41:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\"><span class=\"annotation\">@5,9,10,11\u298a</span> // The remaining lines below have no coverage because `if true` (with the constant literal</span></span>\n+41:8-41:10: @8[2]: _25 = ()\n+41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\"><span class=\"annotation\">@5,8,9,10\u298a</span> // The remaining lines below have no coverage because `if true` (with the constant literal</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n-41:8-41:10: @9[2]: _25 = ()\n-41:5-41:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // `true`) is guaranteed to execute the `then` block, which is also guaranteed to `return`.</span></span>\n+41:8-41:10: @8[2]: _25 = ()\n+41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // `true`) is guaranteed to execute the `then` block, which is also guaranteed to `return`.</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n-41:8-41:10: @9[2]: _25 = ()\n-41:5-41:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // Thankfully, in the normal case, conditions are not guaranteed ahead of time, and as shown</span></span>\n+41:8-41:10: @8[2]: _25 = ()\n+41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // Thankfully, in the normal case, conditions are not guaranteed ahead of time, and as shown</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n-41:8-41:10: @9[2]: _25 = ()\n-41:5-41:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // in other tests, the lines below would have coverage (which would show they had `0`</span></span>\n+41:8-41:10: @8[2]: _25 = ()\n+41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // in other tests, the lines below would have coverage (which would show they had `0`</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n-41:8-41:10: @9[2]: _25 = ()\n-41:5-41:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // executions, assuming the condition still evaluated to `true`).</span></span>\n+41:8-41:10: @8[2]: _25 = ()\n+41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // executions, assuming the condition still evaluated to `true`).</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n-41:8-41:10: @9[2]: _25 = ()\n-41:5-41:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\"></span></span>\n+41:8-41:10: @8[2]: _25 = ()\n+41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n-41:8-41:10: @9[2]: _25 = ()\n-41:5-41:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">    let _ = Firework { strength: 1000 };</span></span>\n+41:8-41:10: @8[2]: _25 = ()\n+41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">    let _ = Firework { strength: 1000 };</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n-41:8-41:10: @9[2]: _25 = ()\n-41:5-41:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\"></span></span>\n+41:8-41:10: @8[2]: _25 = ()\n+41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n-41:8-41:10: @9[2]: _25 = ()\n-41:5-41:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">    Ok(())<span class=\"annotation\">\u2989@5,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:2-42:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n+41:8-41:10: @8[2]: _25 = ()\n+41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">    Ok(())<span class=\"annotation\">\u2989@5,8,9,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:2-42:2: @13.Return: return\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "dd9ba4a190cd8129f9f4d007e81c8793bee25158", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.if/if.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 70, "deletions": 89, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.if%2Fif.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.if%2Fif.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.if%2Fif.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,189 +69,170 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    let</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    let</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    is_true</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    is_true</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    =</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    =</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">        std::env::args().len()</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">        std::env::args().len()</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    ==</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    ==</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">        1</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">        1</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    let</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    let</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">        mut</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">        mut</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    countdown</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    =</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    =</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">        0</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">        0</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">    if</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+21:9-21:16: @3[5]: _6 = _1\">    if</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:25: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 10:9-10:25: @1[0]: _3 = &amp;_4\n-10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+10:9-10:31: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 10:9-12:10: @2[1]: _1 = Eq(move _2, const 1_usize)\n 8:5-8:12: @2[3]: FakeRead(ForLet, _1)\n 18:9-18:10: @3[2]: _5 = const 0_i32\n 15:9-16:14: @3[3]: FakeRead(ForLet, _5)\n-21:9-21:16: @3[5]: _6 = _1\n-21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\">        is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">        =</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">            10</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:6-27:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:2-28:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+21:9-21:16: @3[5]: _6 = _1\">        is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @4[0]: _5 = const 10_i32\n+22:5-27:6: @4[1]: _0 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @4[0]: _5 = const 10_i32\n+22:5-27:6: @4[1]: _0 = const ()\">        countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @4[0]: _5 = const 10_i32\n+22:5-27:6: @4[1]: _0 = const ()\">        =</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @4[0]: _5 = const 10_i32\n+22:5-27:6: @4[1]: _0 = const ()\">            10</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @4[0]: _5 = const 10_i32\n+22:5-27:6: @4[1]: _0 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @4[0]: _5 = const 10_i32\n+22:5-27:6: @4[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:6-27:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:2-28:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "b642be382cbc484eeb0f1bb964b2e77a6c6148ec", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.if_else/if_else.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 65, "deletions": 75, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,99 +69,90 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n+<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb11]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb10]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-11:9-11:16: @3[6]: _7 = _1\n-11:9-11:16: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n+11:9-11:16: @3[6]: _7 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb11]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb10]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-11:9-11:16: @3[6]: _7 = _1\n-11:9-11:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n+11:9-11:16: @3[6]: _7 = _1\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb11]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb10]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-11:9-11:16: @3[6]: _7 = _1\n-11:9-11:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n+11:9-11:16: @3[6]: _7 = _1\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb11]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb10]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-11:9-11:16: @3[6]: _7 = _1\n-11:9-11:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n+11:9-11:16: @3[6]: _7 = _1\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb11]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb10]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-11:9-11:16: @3[6]: _7 = _1\n-11:9-11:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n+11:9-11:16: @3[6]: _7 = _1\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb11]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb10]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-11:9-11:16: @3[6]: _7 = _1\n-11:9-11:16: @3[7]: FakeRead(ForMatchedPlace, _7)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n+11:9-11:16: @3[6]: _7 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb11]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb10]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-11:9-11:16: @3[6]: _7 = _1\n-11:9-11:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    let mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n+11:9-11:16: @3[6]: _7 = _1\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb11]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb10]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-11:9-11:16: @3[6]: _7 = _1\n-11:9-11:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    if</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n+11:9-11:16: @3[6]: _7 = _1\">    if</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb11]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb10]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-11:9-11:16: @3[6]: _7 = _1\n-11:9-11:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">        is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @6[0]: _5 = const 10_i32\n-12:5-17:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @6[0]: _5 = const 10_i32\n-12:5-17:6: @6[1]: _6 = const ()\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @6[0]: _5 = const 10_i32\n-12:5-17:6: @6[1]: _6 = const ()\">        =</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @6[0]: _5 = const 10_i32\n-12:5-17:6: @6[1]: _6 = const ()\">            10</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @6[0]: _5 = const 10_i32\n-12:5-17:6: @6[1]: _6 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @6[0]: _5 = const 10_i32\n-12:5-17:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+11:9-11:16: @3[6]: _7 = _1\">        is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @4[0]: _5 = const 10_i32\n+12:5-17:6: @4[1]: _6 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @4[0]: _5 = const 10_i32\n+12:5-17:6: @4[1]: _6 = const ()\">        countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @4[0]: _5 = const 10_i32\n+12:5-17:6: @4[1]: _6 = const ()\">        =</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @4[0]: _5 = const 10_i32\n+12:5-17:6: @4[1]: _6 = const ()\">            10</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @4[0]: _5 = const 10_i32\n+12:5-17:6: @4[1]: _6 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"13:9-15:15: @4[0]: _5 = const 10_i32\n+12:5-17:6: @4[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    else // Note coverage region difference without semicolon</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:9-22:16: @5[0]: _5 = const 100_i32\n@@ -173,33 +164,32 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:9-26:16: @7[3]: _8 = _1\n-26:9-26:16: @7[4]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@7\u298a</span>is_true<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n-27:5-32:6: @10[1]: _0 = const ()\"><span class=\"annotation\">@8,10\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n-27:5-32:6: @10[1]: _0 = const ()\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n-27:5-32:6: @10[1]: _0 = const ()\">        =</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n-27:5-32:6: @10[1]: _0 = const ()\">            10</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n-27:5-32:6: @10[1]: _0 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n-27:5-32:6: @10[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@8,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:9-26:16: @6[3]: _8 = _1\"><span class=\"annotation\">@6\u298a</span>is_true<span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @7[0]: _5 = const 10_i32\n+27:5-32:6: @7[1]: _0 = const ()\"><span class=\"annotation\">@7\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @7[0]: _5 = const 10_i32\n+27:5-32:6: @7[1]: _0 = const ()\">        countdown</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @7[0]: _5 = const 10_i32\n+27:5-32:6: @7[1]: _0 = const ()\">        =</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @7[0]: _5 = const 10_i32\n+27:5-32:6: @7[1]: _0 = const ()\">            10</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @7[0]: _5 = const 10_i32\n+27:5-32:6: @7[1]: _0 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @7[0]: _5 = const 10_i32\n+27:5-32:6: @7[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    else</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n-34:5-39:6: @9[1]: _0 = const ()\"><span class=\"annotation\">@9\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n-34:5-39:6: @9[1]: _0 = const ()\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n-34:5-39:6: @9[1]: _0 = const ()\">        =</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n-34:5-39:6: @9[1]: _0 = const ()\">            100</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n-34:5-39:6: @9[1]: _0 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n-34:5-39:6: @9[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:2-40:2: @11.Return: return\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @8[0]: _5 = const 100_i32\n+34:5-39:6: @8[1]: _0 = const ()\"><span class=\"annotation\">@8\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @8[0]: _5 = const 100_i32\n+34:5-39:6: @8[1]: _0 = const ()\">        countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @8[0]: _5 = const 100_i32\n+34:5-39:6: @8[1]: _0 = const ()\">        =</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @8[0]: _5 = const 100_i32\n+34:5-39:6: @8[1]: _0 = const ()\">            100</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @8[0]: _5 = const 100_i32\n+34:5-39:6: @8[1]: _0 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @8[0]: _5 = const 100_i32\n+34:5-39:6: @8[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:2-40:2: @9.Return: return\"><span class=\"annotation\">@9\u298a</span>\u2038<span class=\"annotation\">\u2989@9</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "d21710b7240d3af7bce3c0e2a153bb743ec0476a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inner_items/inner_items.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 56, "deletions": 61, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inner_items%2Finner_items.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inner_items%2Finner_items.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inner_items%2Finner_items.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -73,47 +73,43 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_u32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+10:8-10:15: @3[6]: _7 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_u32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+10:8-10:15: @3[6]: _7 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_u32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    let mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+10:8-10:15: @3[6]: _7 = _1\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_u32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_u32\n-10:16-12:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_u32\n-10:16-12:6: @6[1]: _6 = const ()\">        countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_u32\n-10:16-12:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+10:8-10:15: @3[6]: _7 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @4[0]: _5 = const 10_u32\n+10:16-12:6: @4[1]: _6 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @4[0]: _5 = const 10_u32\n+10:16-12:6: @4[1]: _6 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @4[0]: _5 = const 10_u32\n+10:16-12:6: @4[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    mod in_mod {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        const IN_MOD_CONST: u32 = 1000;</span></span>\n@@ -149,46 +145,45 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    type InType = String;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"48:8-48:15: @7[4]: _9 = _1\n-48:8-48:15: @7[5]: FakeRead(ForMatchedPlace, _9)\"><span class=\"annotation\">@7\u298a</span>is_true<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n-49:9-49:27: @10.Call: _10 = in_func(move _11) -&gt; [return: bb11, unwind: bb15]\n-48:16-50:6: @11[2]: _8 = const ()\"><span class=\"annotation\">@8,10,11\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n-49:9-49:27: @10.Call: _10 = in_func(move _11) -&gt; [return: bb11, unwind: bb15]\n-48:16-50:6: @11[2]: _8 = const ()\">        in_func(countdown);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n-49:9-49:27: @10.Call: _10 = in_func(move _11) -&gt; [return: bb11, unwind: bb15]\n-48:16-50:6: @11[2]: _8 = const ()\">    }<span class=\"annotation\">\u2989@8,10,11</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:6-50:6: @9[0]: _8 = const ()\"><span class=\"annotation\">@9\u298a</span>\u2038<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"48:8-48:15: @6[4]: _9 = _1\"><span class=\"annotation\">@6\u298a</span>is_true<span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @7[2]: _11 = _5\n+49:9-49:27: @7.Call: _10 = in_func(move _11) -&gt; [return: bb9, unwind: bb13]\n+48:16-50:6: @9[2]: _8 = const ()\"><span class=\"annotation\">@7,9\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @7[2]: _11 = _5\n+49:9-49:27: @7.Call: _10 = in_func(move _11) -&gt; [return: bb9, unwind: bb13]\n+48:16-50:6: @9[2]: _8 = const ()\">        in_func(countdown);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @7[2]: _11 = _5\n+49:9-49:27: @7.Call: _10 = in_func(move _11) -&gt; [return: bb9, unwind: bb13]\n+48:16-50:6: @9[2]: _8 = const ()\">    }<span class=\"annotation\">\u2989@7,9</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:6-50:6: @8[0]: _8 = const ()\"><span class=\"annotation\">@8\u298a</span>\u2038<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @12[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n-52:9-52:16: @12[4]: FakeRead(ForLet, _12)\n-56:5-56:8: @12[7]: _14 = &amp;mut _12\n-56:5-56:29: @12.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb13, unwind: bb15]\n-57:2-57:2: @13.Return: return\"><span class=\"annotation\">@12,13\u298a</span>mut val = InStruct {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @12[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n-52:9-52:16: @12[4]: FakeRead(ForLet, _12)\n-56:5-56:8: @12[7]: _14 = &amp;mut _12\n-56:5-56:29: @12.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb13, unwind: bb15]\n-57:2-57:2: @13.Return: return\">        in_struct_field: 101,</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @12[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n-52:9-52:16: @12[4]: FakeRead(ForLet, _12)\n-56:5-56:8: @12[7]: _14 = &amp;mut _12\n-56:5-56:29: @12.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb13, unwind: bb15]\n-57:2-57:2: @13.Return: return\">    };</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @12[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n-52:9-52:16: @12[4]: FakeRead(ForLet, _12)\n-56:5-56:8: @12[7]: _14 = &amp;mut _12\n-56:5-56:29: @12.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb13, unwind: bb15]\n-57:2-57:2: @13.Return: return\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @12[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n-52:9-52:16: @12[4]: FakeRead(ForLet, _12)\n-56:5-56:8: @12[7]: _14 = &amp;mut _12\n-56:5-56:29: @12.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb13, unwind: bb15]\n-57:2-57:2: @13.Return: return\">    val.default_trait_func();</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @12[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n-52:9-52:16: @12[4]: FakeRead(ForLet, _12)\n-56:5-56:8: @12[7]: _14 = &amp;mut _12\n-56:5-56:29: @12.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb13, unwind: bb15]\n-57:2-57:2: @13.Return: return\">}<span class=\"annotation\">\u2989@12,13</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @10[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n+52:9-52:16: @10[4]: FakeRead(ForLet, _12)\n+56:5-56:8: @10[7]: _14 = &amp;mut _12\n+56:5-56:29: @10.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb11, unwind: bb13]\n+57:2-57:2: @11.Return: return\"><span class=\"annotation\">@10,11\u298a</span>mut val = InStruct {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @10[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n+52:9-52:16: @10[4]: FakeRead(ForLet, _12)\n+56:5-56:8: @10[7]: _14 = &amp;mut _12\n+56:5-56:29: @10.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb11, unwind: bb13]\n+57:2-57:2: @11.Return: return\">        in_struct_field: 101,</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @10[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n+52:9-52:16: @10[4]: FakeRead(ForLet, _12)\n+56:5-56:8: @10[7]: _14 = &amp;mut _12\n+56:5-56:29: @10.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb11, unwind: bb13]\n+57:2-57:2: @11.Return: return\">    };</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @10[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n+52:9-52:16: @10[4]: FakeRead(ForLet, _12)\n+56:5-56:8: @10[7]: _14 = &amp;mut _12\n+56:5-56:29: @10.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb11, unwind: bb13]\n+57:2-57:2: @11.Return: return\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @10[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n+52:9-52:16: @10[4]: FakeRead(ForLet, _12)\n+56:5-56:8: @10[7]: _14 = &amp;mut _12\n+56:5-56:29: @10.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb11, unwind: bb13]\n+57:2-57:2: @11.Return: return\">    val.default_trait_func();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @10[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n+52:9-52:16: @10[4]: FakeRead(ForLet, _12)\n+56:5-56:8: @10[7]: _14 = &amp;mut _12\n+56:5-56:29: @10.Call: _13 = &lt;InStruct as InTrait&gt;::default_trait_func(move _14) -&gt; [return: bb11, unwind: bb13]\n+57:2-57:2: @11.Return: return\">}<span class=\"annotation\">\u2989@10,11</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "0cfe2119fbc8abaa290acccd00a843804866e52a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.lazy_boolean/lazy_boolean.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 115, "deletions": 128, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,204 +69,191 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb36]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb35]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\n-10:8-10:15: @3[12]: _10 = _1\n-10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+10:8-10:15: @3[12]: _10 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb36]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb35]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\n-10:8-10:15: @3[12]: _10 = _1\n-10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+10:8-10:15: @3[12]: _10 = _1\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb36]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb35]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\n-10:8-10:15: @3[12]: _10 = _1\n-10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+10:8-10:15: @3[12]: _10 = _1\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb36]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb35]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\n-10:8-10:15: @3[12]: _10 = _1\n-10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+10:8-10:15: @3[12]: _10 = _1\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb36]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb35]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\n-10:8-10:15: @3[12]: _10 = _1\n-10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+10:8-10:15: @3[12]: _10 = _1\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb36]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb35]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\n-10:8-10:15: @3[12]: _10 = _1\n-10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+10:8-10:15: @3[12]: _10 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb36]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb35]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\n-10:8-10:15: @3[12]: _10 = _1\n-10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\">    let (mut a, mut b, mut c) = (0, 0, 0);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+10:8-10:15: @3[12]: _10 = _1\">    let (mut a, mut b, mut c) = (0, 0, 0);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb36]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb35]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\n-10:8-10:15: @3[12]: _10 = _1\n-10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n-12:9-12:15: @6[1]: _6 = const 10_i32\n-13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n-12:9-12:15: @6[1]: _6 = const 10_i32\n-13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">        a = 1;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n-12:9-12:15: @6[1]: _6 = const 10_i32\n-13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">        b = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n-12:9-12:15: @6[1]: _6 = const 10_i32\n-13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">        c = 100;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n-12:9-12:15: @6[1]: _6 = const 10_i32\n-13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:6-14:6: @5[0]: _9 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+10:8-10:15: @3[12]: _10 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @4[0]: _5 = const 1_i32\n+12:9-12:15: @4[1]: _6 = const 10_i32\n+13:9-13:16: @4[2]: _7 = const 100_i32\n+10:16-14:6: @4[3]: _9 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @4[0]: _5 = const 1_i32\n+12:9-12:15: @4[1]: _6 = const 10_i32\n+13:9-13:16: @4[2]: _7 = const 100_i32\n+10:16-14:6: @4[3]: _9 = const ()\">        a = 1;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @4[0]: _5 = const 1_i32\n+12:9-12:15: @4[1]: _6 = const 10_i32\n+13:9-13:16: @4[2]: _7 = const 100_i32\n+10:16-14:6: @4[3]: _9 = const ()\">        b = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @4[0]: _5 = const 1_i32\n+12:9-12:15: @4[1]: _6 = const 10_i32\n+13:9-13:16: @4[2]: _7 = const 100_i32\n+10:16-14:6: @4[3]: _9 = const ()\">        c = 100;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @4[0]: _5 = const 1_i32\n+12:9-12:15: @4[1]: _6 = const 10_i32\n+13:9-13:16: @4[2]: _7 = const 100_i32\n+10:16-14:6: @4[3]: _9 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:6-14:6: @5[0]: _9 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:9-16:17: @11[2]: FakeRead(ForLet, _11)\"><span class=\"annotation\">@11\u298a</span>somebool<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:9-16:17: @10[2]: FakeRead(ForLet, _11)\"><span class=\"annotation\">@10\u298a</span>somebool<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:13-18:14: @7[5]: _13 = _5\n-18:17-18:18: @7[7]: _14 = _6\n-18:13-18:18: @7[8]: _12 = Lt(move _13, move _14)\"><span class=\"annotation\">@7\u298a</span>a &lt; b<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:13-18:14: @6[5]: _13 = _5\n+18:17-18:18: @6[7]: _14 = _6\n+18:13-18:18: @6[8]: _12 = Lt(move _13, move _14)\"><span class=\"annotation\">@6\u298a</span>a &lt; b<span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ||</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:13-20:14: @10[2]: _16 = _6\n-20:17-20:18: @10[4]: _17 = _7\n-20:13-20:18: @10[5]: _15 = Lt(move _16, move _17)\"><span class=\"annotation\">@10\u298a</span>b &lt; c<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:13-20:14: @9[2]: _16 = _6\n+20:17-20:18: @9[4]: _17 = _7\n+20:13-20:18: @9[5]: _15 = Lt(move _16, move _17)\"><span class=\"annotation\">@9\u298a</span>b &lt; c<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:17: @15[2]: FakeRead(ForLet, _18)\"><span class=\"annotation\">@15\u298a</span>somebool<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:17: @14[2]: FakeRead(ForLet, _18)\"><span class=\"annotation\">@14\u298a</span>somebool<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:13-25:14: @11[6]: _20 = _6\n-25:17-25:18: @11[8]: _21 = _5\n-25:13-25:18: @11[9]: _19 = Lt(move _20, move _21)\"><span class=\"annotation\">@11\u298a</span>b &lt; a<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:13-25:14: @10[6]: _20 = _6\n+25:17-25:18: @10[8]: _21 = _5\n+25:13-25:18: @10[9]: _19 = Lt(move _20, move _21)\"><span class=\"annotation\">@10\u298a</span>b &lt; a<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ||</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:14: @14[2]: _23 = _6\n-27:17-27:18: @14[4]: _24 = _7\n-27:13-27:18: @14[5]: _22 = Lt(move _23, move _24)\"><span class=\"annotation\">@14\u298a</span>b &lt; c<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:14: @13[2]: _23 = _6\n+27:17-27:18: @13[4]: _24 = _7\n+27:13-27:18: @13[5]: _22 = Lt(move _23, move _24)\"><span class=\"annotation\">@13\u298a</span>b &lt; c<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:9-29:17: @19[2]: FakeRead(ForLet, _25)\"><span class=\"annotation\">@19\u298a</span>somebool<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:20-29:21: @15[6]: _27 = _5\n-29:24-29:25: @15[8]: _28 = _6\n-29:20-29:25: @15[9]: _26 = Lt(move _27, move _28)\"><span class=\"annotation\">@15\u298a</span>a &lt; b<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"> &amp;&amp; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:29-29:30: @18[2]: _30 = _6\n-29:33-29:34: @18[4]: _31 = _7\n-29:29-29:34: @18[5]: _29 = Lt(move _30, move _31)\"><span class=\"annotation\">@18\u298a</span>b &lt; c<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-30:17: @23[2]: FakeRead(ForLet, _32)\"><span class=\"annotation\">@23\u298a</span>somebool<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:20-30:21: @19[6]: _34 = _6\n-30:24-30:25: @19[8]: _35 = _5\n-30:20-30:25: @19[9]: _33 = Lt(move _34, move _35)\"><span class=\"annotation\">@19\u298a</span>b &lt; a<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"> &amp;&amp; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:29-30:30: @22[2]: _37 = _6\n-30:33-30:34: @22[4]: _38 = _7\n-30:29-30:34: @22[5]: _36 = Lt(move _37, move _38)\"><span class=\"annotation\">@22\u298a</span>b &lt; c<span class=\"annotation\">\u2989@22</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:9-29:17: @18[2]: FakeRead(ForLet, _25)\"><span class=\"annotation\">@18\u298a</span>somebool<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:20-29:21: @14[6]: _27 = _5\n+29:24-29:25: @14[8]: _28 = _6\n+29:20-29:25: @14[9]: _26 = Lt(move _27, move _28)\"><span class=\"annotation\">@14\u298a</span>a &lt; b<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"> &amp;&amp; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:29-29:30: @17[2]: _30 = _6\n+29:33-29:34: @17[4]: _31 = _7\n+29:29-29:34: @17[5]: _29 = Lt(move _30, move _31)\"><span class=\"annotation\">@17\u298a</span>b &lt; c<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-30:17: @22[2]: FakeRead(ForLet, _32)\"><span class=\"annotation\">@22\u298a</span>somebool<span class=\"annotation\">\u2989@22</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:20-30:21: @18[6]: _34 = _6\n+30:24-30:25: @18[8]: _35 = _5\n+30:20-30:25: @18[9]: _33 = Lt(move _34, move _35)\"><span class=\"annotation\">@18\u298a</span>b &lt; a<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"> &amp;&amp; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:29-30:30: @21[2]: _37 = _6\n+30:33-30:34: @21[4]: _38 = _7\n+30:29-30:34: @21[5]: _36 = Lt(move _37, move _38)\"><span class=\"annotation\">@21\u298a</span>b &lt; c<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:16: @23[6]: _41 = _1\n-33:9-34:16: @23[7]: _40 = Not(move _41)\n-33:9-34:16: @23[9]: FakeRead(ForMatchedPlace, _40)\"><span class=\"annotation\">@23\u298a</span>!</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:16: @23[6]: _41 = _1\n-33:9-34:16: @23[7]: _40 = Not(move _41)\n-33:9-34:16: @23[9]: FakeRead(ForMatchedPlace, _40)\">        is_true<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n-35:5-38:6: @26[1]: _39 = const ()\"><span class=\"annotation\">@24,26\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n-35:5-38:6: @26[1]: _39 = const ()\">        a = 2</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n-35:5-38:6: @26[1]: _39 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n-35:5-38:6: @26[1]: _39 = const ()\">    }<span class=\"annotation\">\u2989@24,26</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:6-38:6: @25[0]: _39 = const ()\"><span class=\"annotation\">@25\u298a</span>\u2038<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:16: @22[6]: _41 = _1\n+33:9-34:16: @22[7]: _40 = Not(move _41)\"><span class=\"annotation\">@22\u298a</span>!</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:16: @22[6]: _41 = _1\n+33:9-34:16: @22[7]: _40 = Not(move _41)\">        is_true<span class=\"annotation\">\u2989@22</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @23[0]: _5 = const 2_i32\n+35:5-38:6: @23[1]: _39 = const ()\"><span class=\"annotation\">@23\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @23[0]: _5 = const 2_i32\n+35:5-38:6: @23[1]: _39 = const ()\">        a = 2</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @23[0]: _5 = const 2_i32\n+35:5-38:6: @23[1]: _39 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @23[0]: _5 = const 2_i32\n+35:5-38:6: @23[1]: _39 = const ()\">    }<span class=\"annotation\">\u2989@23</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:6-38:6: @24[0]: _39 = const ()\"><span class=\"annotation\">@24\u298a</span>\u2038<span class=\"annotation\">\u2989@24</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:16: @27[4]: _43 = _1\n-41:9-41:16: @27[5]: FakeRead(ForMatchedPlace, _43)\"><span class=\"annotation\">@27\u298a</span>is_true<span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n-42:5-45:6: @30[1]: _42 = const ()\"><span class=\"annotation\">@28,30\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n-42:5-45:6: @30[1]: _42 = const ()\">        b = 30</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n-42:5-45:6: @30[1]: _42 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n-42:5-45:6: @30[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@28,30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:16: @25[4]: _43 = _1\"><span class=\"annotation\">@25\u298a</span>is_true<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @26[0]: _6 = const 30_i32\n+42:5-45:6: @26[1]: _42 = const ()\"><span class=\"annotation\">@26\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @26[0]: _6 = const 30_i32\n+42:5-45:6: @26[1]: _42 = const ()\">        b = 30</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @26[0]: _6 = const 30_i32\n+42:5-45:6: @26[1]: _42 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @26[0]: _6 = const 30_i32\n+42:5-45:6: @26[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@26</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    else</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n-47:5-50:6: @29[1]: _42 = const ()\"><span class=\"annotation\">@29\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n-47:5-50:6: @29[1]: _42 = const ()\">        c = 400</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n-47:5-50:6: @29[1]: _42 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n-47:5-50:6: @29[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @27[0]: _7 = const 400_i32\n+47:5-50:6: @27[1]: _42 = const ()\"><span class=\"annotation\">@27\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @27[0]: _7 = const 400_i32\n+47:5-50:6: @27[1]: _42 = const ()\">        c = 400</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @27[0]: _7 = const 400_i32\n+47:5-50:6: @27[1]: _42 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @27[0]: _7 = const 400_i32\n+47:5-50:6: @27[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"52:9-52:16: @31[5]: _46 = _1\n-52:8-52:16: @31[6]: _45 = Not(move _46)\n-52:8-52:16: @31[8]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@31\u298a</span>!is_true<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n-52:17-54:6: @34[1]: _44 = const ()\"><span class=\"annotation\">@32,34\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n-52:17-54:6: @34[1]: _44 = const ()\">        a = 2;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n-52:17-54:6: @34[1]: _44 = const ()\">    }<span class=\"annotation\">\u2989@32,34</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"54:6-54:6: @33[0]: _44 = const ()\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"52:9-52:16: @28[5]: _46 = _1\n+52:8-52:16: @28[6]: _45 = Not(move _46)\"><span class=\"annotation\">@28\u298a</span>!is_true<span class=\"annotation\">\u2989@28</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @29[0]: _5 = const 2_i32\n+52:17-54:6: @29[1]: _44 = const ()\"><span class=\"annotation\">@29\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @29[0]: _5 = const 2_i32\n+52:17-54:6: @29[1]: _44 = const ()\">        a = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @29[0]: _5 = const 2_i32\n+52:17-54:6: @29[1]: _44 = const ()\">    }<span class=\"annotation\">\u2989@29</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"54:6-54:6: @30[0]: _44 = const ()\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"56:8-56:15: @35[3]: _47 = _1\n-56:8-56:15: @35[4]: FakeRead(ForMatchedPlace, _47)\"><span class=\"annotation\">@35\u298a</span>is_true<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n-56:16-58:6: @38[1]: _0 = const ()\"><span class=\"annotation\">@36,38\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n-56:16-58:6: @38[1]: _0 = const ()\">        b = 30;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n-56:16-58:6: @38[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@36,38</span></span></span><span class=\"code\" style=\"--layer: 0\"> else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n-58:12-60:6: @37[1]: _0 = const ()\"><span class=\"annotation\">@37\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n-58:12-60:6: @37[1]: _0 = const ()\">        c = 400;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n-58:12-60:6: @37[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@37</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"61:2-61:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"56:8-56:15: @31[3]: _47 = _1\"><span class=\"annotation\">@31\u298a</span>is_true<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @32[0]: _6 = const 30_i32\n+56:16-58:6: @32[1]: _0 = const ()\"><span class=\"annotation\">@32\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @32[0]: _6 = const 30_i32\n+56:16-58:6: @32[1]: _0 = const ()\">        b = 30;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @32[0]: _6 = const 30_i32\n+56:16-58:6: @32[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\"> else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @33[0]: _7 = const 400_i32\n+58:12-60:6: @33[1]: _0 = const ()\"><span class=\"annotation\">@33\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @33[0]: _7 = const 400_i32\n+58:12-60:6: @33[1]: _0 = const ()\">        c = 400;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @33[0]: _7 = const 400_i32\n+58:12-60:6: @33[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"61:2-61:2: @34.Return: return\"><span class=\"annotation\">@34\u298a</span>\u2038<span class=\"annotation\">\u2989@34</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "b3f344f7fc0b87802e756be996e7ddbe90959afa", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.loops_branches/loops_branches.{impl#0}-fmt.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,35 +69,32 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 8\"><span class=\"line\">    <span><span class=\"code even\" style=\"--layer: 1\" title=\"10:12-10:16: @0[2]: _4 = const true\n-10:12-10:16: @0[3]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:12-10:16: @0[2]: _4 = const true\n-10:12-10:16: @0[3]: FakeRead(ForMatchedPlace, _4)\">        if true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:16-11:21: @3[2]: _6 = const false\n-11:16-11:21: @3[3]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@1,3\u298a</span>false<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                while </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:23-12:27: @7[1]: _8 = const true\n-12:23-12:27: @7[2]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@6,7\u298a</span>true<span class=\"annotation\">\u2989@6,7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:28-13:18: @10[0]: _7 = const ()\"><span class=\"annotation\">@8,10\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:28-13:18: @10[0]: _7 = const ()\">                }<span class=\"annotation\">\u2989@8,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:14-14:14: @5[0]: _5 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:20-15:21: @11[6]: _13 = &amp;mut (*_2)\n-15:23-15:30: @11[11]: _32 = const &lt;DebugTest as Debug&gt;::fmt::promoted[1]\n-15:23-15:30: @11[12]: _17 = &amp;(*_32)\n-15:23-15:30: @11[13]: _16 = &amp;(*_17)\n-15:23-15:30: @11[14]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n-15:13-15:31: @11[20]: _23 = ()\n-15:13-15:31: @11[21]: FakeRead(ForMatchedPlace, _23)\n-15:13-15:31: @11[22]: _31 = const &lt;DebugTest as Debug&gt;::fmt::promoted[0]\n-15:13-15:31: @11[23]: _21 = &amp;(*_31)\n-15:13-15:31: @11[24]: _20 = &amp;(*_21)\n-15:13-15:31: @11[25]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-15:13-15:31: @11.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb12, unwind: bb23]\n-15:13-15:31: @12.Call: _12 = Formatter::write_fmt(move _13, move _14) -&gt; [return: bb13, unwind: bb23]\"><span class=\"annotation\">@11,12,13,14\u298a</span>write!(f, \"error\")<span class=\"annotation\">\u2989@11,12,13,14</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:31-15:32: @18[1]: _25 = ((_11 as Err).0: std::fmt::Error)\n-15:31-15:32: @18[4]: _28 = _25\n-15:31-15:32: @18.Call: _27 = &lt;std::fmt::Error as From&lt;std::fmt::Error&gt;&gt;::from(move _28) -&gt; [return: bb19, unwind: bb23]\"><span class=\"annotation\">@16,18,19,20\u298a</span>?<span class=\"annotation\">\u2989@16,18,19,20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<div class=\"code\" style=\"counter-reset: line 8\"><span class=\"line\">    <span><span class=\"code even\" style=\"--layer: 1\" title=\"10:12-10:16: @0[2]: _4 = const true\"><span class=\"annotation\">@0\u298a</span>fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:12-10:16: @0[2]: _4 = const true\">        if true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:16-11:21: @1[2]: _6 = const false\"><span class=\"annotation\">@1\u298a</span>false<span class=\"annotation\">\u2989@1</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                while </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:23-12:27: @5[1]: _8 = const true\n+12:23-12:27: @5[2]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@4,5\u298a</span>true<span class=\"annotation\">\u2989@4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:28-13:18: @8[0]: _7 = const ()\"><span class=\"annotation\">@6,8\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:28-13:18: @8[0]: _7 = const ()\">                }<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:14-14:14: @3[0]: _5 = const ()\"><span class=\"annotation\">@3\u298a</span>\u2038<span class=\"annotation\">\u2989@3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:20-15:21: @9[6]: _13 = &amp;mut (*_2)\n+15:23-15:30: @9[11]: _32 = const &lt;DebugTest as Debug&gt;::fmt::promoted[1]\n+15:23-15:30: @9[12]: _17 = &amp;(*_32)\n+15:23-15:30: @9[13]: _16 = &amp;(*_17)\n+15:23-15:30: @9[14]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n+15:13-15:31: @9[20]: _23 = ()\n+15:13-15:31: @9[21]: FakeRead(ForMatchedPlace, _23)\n+15:13-15:31: @9[22]: _31 = const &lt;DebugTest as Debug&gt;::fmt::promoted[0]\n+15:13-15:31: @9[23]: _21 = &amp;(*_31)\n+15:13-15:31: @9[24]: _20 = &amp;(*_21)\n+15:13-15:31: @9[25]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+15:13-15:31: @9.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb10, unwind: bb21]\n+15:13-15:31: @10.Call: _12 = Formatter::write_fmt(move _13, move _14) -&gt; [return: bb11, unwind: bb21]\"><span class=\"annotation\">@9,10,11,12\u298a</span>write!(f, \"error\")<span class=\"annotation\">\u2989@9,10,11,12</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:31-15:32: @16[1]: _25 = ((_11 as Err).0: std::fmt::Error)\n+15:31-15:32: @16[4]: _28 = _25\n+15:31-15:32: @16.Call: _27 = &lt;std::fmt::Error as From&lt;std::fmt::Error&gt;&gt;::from(move _28) -&gt; [return: bb17, unwind: bb21]\"><span class=\"annotation\">@14,16,17,18\u298a</span>?<span class=\"annotation\">\u2989@14,16,17,18</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        } else </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\">        }<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:12-18:14: @21[3]: _30 = ()\n-18:9-18:15: @21[4]: _0 = std::result::Result::&lt;(), std::fmt::Error&gt;::Ok(move _30)\"><span class=\"annotation\">@21\u298a</span>Ok(())<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:6-19:6: @22.Return: return\"><span class=\"annotation\">@22\u298a</span>\u2038<span class=\"annotation\">\u2989@22</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:12-18:14: @19[3]: _30 = ()\n+18:9-18:15: @19[4]: _0 = std::result::Result::&lt;(), std::fmt::Error&gt;::Ok(move _30)\"><span class=\"annotation\">@19\u298a</span>Ok(())<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:6-19:6: @20.Return: return\"><span class=\"annotation\">@20\u298a</span>\u2038<span class=\"annotation\">\u2989@20</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "c7992614b5b6f1a547e20d52337c8dcaf4936d25", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.match_or_pattern/match_or_pattern.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 99, "deletions": 111, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.match_or_pattern%2Fmatch_or_pattern.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.match_or_pattern%2Fmatch_or_pattern.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.match_or_pattern%2Fmatch_or_pattern.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,9 +69,9 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb37]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb36]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:21-9:22: @3[2]: _5 = const 0_u8\n@@ -80,11 +80,10 @@\n 10:21-10:22: @3[6]: _6 = const 0_u8\n 10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n 10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n-11:8-11:15: @3[11]: _8 = _1\n-11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+11:8-11:15: @3[11]: _8 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb37]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb36]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:21-9:22: @3[2]: _5 = const 0_u8\n@@ -93,11 +92,10 @@\n 10:21-10:22: @3[6]: _6 = const 0_u8\n 10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n 10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n-11:8-11:15: @3[11]: _8 = _1\n-11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+11:8-11:15: @3[11]: _8 = _1\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb37]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb36]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:21-9:22: @3[2]: _5 = const 0_u8\n@@ -106,11 +104,10 @@\n 10:21-10:22: @3[6]: _6 = const 0_u8\n 10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n 10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n-11:8-11:15: @3[11]: _8 = _1\n-11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+11:8-11:15: @3[11]: _8 = _1\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb37]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb36]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:21-9:22: @3[2]: _5 = const 0_u8\n@@ -119,11 +116,10 @@\n 10:21-10:22: @3[6]: _6 = const 0_u8\n 10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n 10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n-11:8-11:15: @3[11]: _8 = _1\n-11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+11:8-11:15: @3[11]: _8 = _1\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb37]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb36]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:21-9:22: @3[2]: _5 = const 0_u8\n@@ -132,11 +128,10 @@\n 10:21-10:22: @3[6]: _6 = const 0_u8\n 10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n 10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n-11:8-11:15: @3[11]: _8 = _1\n-11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+11:8-11:15: @3[11]: _8 = _1\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb37]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb36]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:21-9:22: @3[2]: _5 = const 0_u8\n@@ -145,11 +140,10 @@\n 10:21-10:22: @3[6]: _6 = const 0_u8\n 10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n 10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n-11:8-11:15: @3[11]: _8 = _1\n-11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+11:8-11:15: @3[11]: _8 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb37]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb36]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:21-9:22: @3[2]: _5 = const 0_u8\n@@ -158,11 +152,10 @@\n 10:21-10:22: @3[6]: _6 = const 0_u8\n 10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n 10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n-11:8-11:15: @3[11]: _8 = _1\n-11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    let mut a: u8 = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+11:8-11:15: @3[11]: _8 = _1\">    let mut a: u8 = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb37]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb36]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:21-9:22: @3[2]: _5 = const 0_u8\n@@ -171,11 +164,10 @@\n 10:21-10:22: @3[6]: _6 = const 0_u8\n 10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n 10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n-11:8-11:15: @3[11]: _8 = _1\n-11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    let mut b: u8 = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+11:8-11:15: @3[11]: _8 = _1\">    let mut b: u8 = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb37]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb36]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:21-9:22: @3[2]: _5 = const 0_u8\n@@ -184,88 +176,84 @@\n 10:21-10:22: @3[6]: _6 = const 0_u8\n 10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n 10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n-11:8-11:15: @3[11]: _8 = _1\n-11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n-13:9-13:14: @6[1]: _6 = const 0_u8\n-11:16-14:6: @6[2]: _7 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n-13:9-13:14: @6[1]: _6 = const 0_u8\n-11:16-14:6: @6[2]: _7 = const ()\">        a = 2;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n-13:9-13:14: @6[1]: _6 = const 0_u8\n-11:16-14:6: @6[2]: _7 = const ()\">        b = 0;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n-13:9-13:14: @6[1]: _6 = const 0_u8\n-11:16-14:6: @6[2]: _7 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:6-14:6: @5[0]: _7 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:12-15:13: @7[5]: _11 = _5\n-15:15-15:16: @7[7]: _12 = _6\n-15:11-15:17: @7[8]: _10 = (move _11, move _12)\n-15:11-15:17: @7[11]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@7\u298a</span>(a, b)<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+11:8-11:15: @3[11]: _8 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @4[0]: _5 = const 2_u8\n+13:9-13:14: @4[1]: _6 = const 0_u8\n+11:16-14:6: @4[2]: _7 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @4[0]: _5 = const 2_u8\n+13:9-13:14: @4[1]: _6 = const 0_u8\n+11:16-14:6: @4[2]: _7 = const ()\">        a = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @4[0]: _5 = const 2_u8\n+13:9-13:14: @4[1]: _6 = const 0_u8\n+11:16-14:6: @4[2]: _7 = const ()\">        b = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @4[0]: _5 = const 2_u8\n+13:9-13:14: @4[1]: _6 = const 0_u8\n+11:16-14:6: @4[2]: _7 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:6-14:6: @5[0]: _7 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:12-15:13: @6[5]: _11 = _5\n+15:15-15:16: @6[7]: _12 = _6\n+15:11-15:17: @6[8]: _10 = (move _11, move _12)\n+15:11-15:17: @6[11]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@6\u298a</span>(a, b)<span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // Or patterns generate MIR `SwitchInt` with multiple targets to the same `BasicBlock`.</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // This test confirms a fix for Issue #79569.</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:27-18:29: @11[0]: _9 = const ()\"><span class=\"annotation\">@10,11\u298a</span>{}<span class=\"annotation\">\u2989@10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:14-19:16: @8[0]: _9 = const ()\"><span class=\"annotation\">@8\u298a</span>{}<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:27-18:29: @10[0]: _9 = const ()\"><span class=\"annotation\">@9,10\u298a</span>{}<span class=\"annotation\">\u2989@9,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:14-19:16: @7[0]: _9 = const ()\"><span class=\"annotation\">@7\u298a</span>{}<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:8-21:15: @12[4]: _14 = _1\n-21:8-21:15: @12[5]: FakeRead(ForMatchedPlace, _14)\"><span class=\"annotation\">@12\u298a</span>is_true<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n-23:9-23:14: @15[1]: _6 = const 0_u8\n-21:16-24:6: @15[2]: _13 = const ()\"><span class=\"annotation\">@13,15\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n-23:9-23:14: @15[1]: _6 = const 0_u8\n-21:16-24:6: @15[2]: _13 = const ()\">        a = 0;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n-23:9-23:14: @15[1]: _6 = const 0_u8\n-21:16-24:6: @15[2]: _13 = const ()\">        b = 0;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n-23:9-23:14: @15[1]: _6 = const 0_u8\n-21:16-24:6: @15[2]: _13 = const ()\">    }<span class=\"annotation\">\u2989@13,15</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:6-24:6: @14[0]: _13 = const ()\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:12-25:13: @16[5]: _17 = _5\n-25:15-25:16: @16[7]: _18 = _6\n-25:11-25:17: @16[8]: _16 = (move _17, move _18)\n-25:11-25:17: @16[11]: FakeRead(ForMatchedPlace, _16)\"><span class=\"annotation\">@16\u298a</span>(a, b)<span class=\"annotation\">\u2989@16</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:27-26:29: @20[0]: _15 = const ()\"><span class=\"annotation\">@19,20\u298a</span>{}<span class=\"annotation\">\u2989@19,20</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:14-27:16: @17[0]: _15 = const ()\"><span class=\"annotation\">@17\u298a</span>{}<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:8-21:15: @11[4]: _14 = _1\"><span class=\"annotation\">@11\u298a</span>is_true<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @12[0]: _5 = const 0_u8\n+23:9-23:14: @12[1]: _6 = const 0_u8\n+21:16-24:6: @12[2]: _13 = const ()\"><span class=\"annotation\">@12\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @12[0]: _5 = const 0_u8\n+23:9-23:14: @12[1]: _6 = const 0_u8\n+21:16-24:6: @12[2]: _13 = const ()\">        a = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @12[0]: _5 = const 0_u8\n+23:9-23:14: @12[1]: _6 = const 0_u8\n+21:16-24:6: @12[2]: _13 = const ()\">        b = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @12[0]: _5 = const 0_u8\n+23:9-23:14: @12[1]: _6 = const 0_u8\n+21:16-24:6: @12[2]: _13 = const ()\">    }<span class=\"annotation\">\u2989@12</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:6-24:6: @13[0]: _13 = const ()\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:12-25:13: @14[5]: _17 = _5\n+25:15-25:16: @14[7]: _18 = _6\n+25:11-25:17: @14[8]: _16 = (move _17, move _18)\n+25:11-25:17: @14[11]: FakeRead(ForMatchedPlace, _16)\"><span class=\"annotation\">@14\u298a</span>(a, b)<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:27-26:29: @18[0]: _15 = const ()\"><span class=\"annotation\">@17,18\u298a</span>{}<span class=\"annotation\">\u2989@17,18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:14-27:16: @15[0]: _15 = const ()\"><span class=\"annotation\">@15\u298a</span>{}<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:8-29:15: @21[4]: _20 = _1\n-29:8-29:15: @21[5]: FakeRead(ForMatchedPlace, _20)\"><span class=\"annotation\">@21\u298a</span>is_true<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n-31:9-31:14: @24[1]: _6 = const 2_u8\n-29:16-32:6: @24[2]: _19 = const ()\"><span class=\"annotation\">@22,24\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n-31:9-31:14: @24[1]: _6 = const 2_u8\n-29:16-32:6: @24[2]: _19 = const ()\">        a = 2;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n-31:9-31:14: @24[1]: _6 = const 2_u8\n-29:16-32:6: @24[2]: _19 = const ()\">        b = 2;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n-31:9-31:14: @24[1]: _6 = const 2_u8\n-29:16-32:6: @24[2]: _19 = const ()\">    }<span class=\"annotation\">\u2989@22,24</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:6-32:6: @23[0]: _19 = const ()\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:12-33:13: @25[5]: _23 = _5\n-33:15-33:16: @25[7]: _24 = _6\n-33:11-33:17: @25[8]: _22 = (move _23, move _24)\n-33:11-33:17: @25[11]: FakeRead(ForMatchedPlace, _22)\"><span class=\"annotation\">@25\u298a</span>(a, b)<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:27-34:29: @29[0]: _21 = const ()\"><span class=\"annotation\">@28,29\u298a</span>{}<span class=\"annotation\">\u2989@28,29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:14-35:16: @26[0]: _21 = const ()\"><span class=\"annotation\">@26\u298a</span>{}<span class=\"annotation\">\u2989@26</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:8-29:15: @19[4]: _20 = _1\"><span class=\"annotation\">@19\u298a</span>is_true<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @20[0]: _5 = const 2_u8\n+31:9-31:14: @20[1]: _6 = const 2_u8\n+29:16-32:6: @20[2]: _19 = const ()\"><span class=\"annotation\">@20\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @20[0]: _5 = const 2_u8\n+31:9-31:14: @20[1]: _6 = const 2_u8\n+29:16-32:6: @20[2]: _19 = const ()\">        a = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @20[0]: _5 = const 2_u8\n+31:9-31:14: @20[1]: _6 = const 2_u8\n+29:16-32:6: @20[2]: _19 = const ()\">        b = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @20[0]: _5 = const 2_u8\n+31:9-31:14: @20[1]: _6 = const 2_u8\n+29:16-32:6: @20[2]: _19 = const ()\">    }<span class=\"annotation\">\u2989@20</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:6-32:6: @21[0]: _19 = const ()\"><span class=\"annotation\">@21\u298a</span>\u2038<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:12-33:13: @22[5]: _23 = _5\n+33:15-33:16: @22[7]: _24 = _6\n+33:11-33:17: @22[8]: _22 = (move _23, move _24)\n+33:11-33:17: @22[11]: FakeRead(ForMatchedPlace, _22)\"><span class=\"annotation\">@22\u298a</span>(a, b)<span class=\"annotation\">\u2989@22</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:27-34:29: @26[0]: _21 = const ()\"><span class=\"annotation\">@25,26\u298a</span>{}<span class=\"annotation\">\u2989@25,26</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:14-35:16: @23[0]: _21 = const ()\"><span class=\"annotation\">@23\u298a</span>{}<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"37:8-37:15: @30[4]: _26 = _1\n-37:8-37:15: @30[5]: FakeRead(ForMatchedPlace, _26)\"><span class=\"annotation\">@30\u298a</span>is_true<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n-39:9-39:14: @33[1]: _6 = const 2_u8\n-37:16-40:6: @33[2]: _25 = const ()\"><span class=\"annotation\">@31,33\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n-39:9-39:14: @33[1]: _6 = const 2_u8\n-37:16-40:6: @33[2]: _25 = const ()\">        a = 0;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n-39:9-39:14: @33[1]: _6 = const 2_u8\n-37:16-40:6: @33[2]: _25 = const ()\">        b = 2;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n-39:9-39:14: @33[1]: _6 = const 2_u8\n-37:16-40:6: @33[2]: _25 = const ()\">    }<span class=\"annotation\">\u2989@31,33</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:6-40:6: @32[0]: _25 = const ()\"><span class=\"annotation\">@32\u298a</span>\u2038<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"41:12-41:13: @34[4]: _28 = _5\n-41:15-41:16: @34[6]: _29 = _6\n-41:11-41:17: @34[7]: _27 = (move _28, move _29)\n-41:11-41:17: @34[10]: FakeRead(ForMatchedPlace, _27)\"><span class=\"annotation\">@34\u298a</span>(a, b)<span class=\"annotation\">\u2989@34</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"42:27-42:29: @38[0]: _0 = const ()\"><span class=\"annotation\">@37,38\u298a</span>{}<span class=\"annotation\">\u2989@37,38</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:14-43:16: @35[0]: _0 = const ()\"><span class=\"annotation\">@35\u298a</span>{}<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"37:8-37:15: @27[4]: _26 = _1\"><span class=\"annotation\">@27\u298a</span>is_true<span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @28[0]: _5 = const 0_u8\n+39:9-39:14: @28[1]: _6 = const 2_u8\n+37:16-40:6: @28[2]: _25 = const ()\"><span class=\"annotation\">@28\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @28[0]: _5 = const 0_u8\n+39:9-39:14: @28[1]: _6 = const 2_u8\n+37:16-40:6: @28[2]: _25 = const ()\">        a = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @28[0]: _5 = const 0_u8\n+39:9-39:14: @28[1]: _6 = const 2_u8\n+37:16-40:6: @28[2]: _25 = const ()\">        b = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @28[0]: _5 = const 0_u8\n+39:9-39:14: @28[1]: _6 = const 2_u8\n+37:16-40:6: @28[2]: _25 = const ()\">    }<span class=\"annotation\">\u2989@28</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:6-40:6: @29[0]: _25 = const ()\"><span class=\"annotation\">@29\u298a</span>\u2038<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"41:12-41:13: @30[4]: _28 = _5\n+41:15-41:16: @30[6]: _29 = _6\n+41:11-41:17: @30[7]: _27 = (move _28, move _29)\n+41:11-41:17: @30[10]: FakeRead(ForMatchedPlace, _27)\"><span class=\"annotation\">@30\u298a</span>(a, b)<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"42:27-42:29: @34[0]: _0 = const ()\"><span class=\"annotation\">@33,34\u298a</span>{}<span class=\"annotation\">\u2989@33,34</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:14-43:16: @31[0]: _0 = const ()\"><span class=\"annotation\">@31\u298a</span>{}<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"45:2-45:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"45:2-45:2: @35.Return: return\"><span class=\"annotation\">@35\u298a</span>\u2038<span class=\"annotation\">\u2989@35</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "4dcf6c741dc735fce077e0c13f8b4719a06f9318", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.nested_loops/nested_loops.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 49, "deletions": 56, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,23 +69,23 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb35]\n+<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb32]\n 2:19-2:35: @1[0]: _3 = &amp;_4\n-2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb34]\n+2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb31]\n 2:19-2:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 2:9-2:16: @2[3]: FakeRead(ForLet, _1)\n 3:25-3:27: @3[2]: _5 = const 10_i32\n 3:9-3:22: @3[3]: FakeRead(ForLet, _5)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb35]\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb32]\n 2:19-2:35: @1[0]: _3 = &amp;_4\n-2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb34]\n+2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb31]\n 2:19-2:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 2:9-2:16: @2[3]: FakeRead(ForLet, _1)\n 3:25-3:27: @3[2]: _5 = const 10_i32\n 3:9-3:22: @3[3]: FakeRead(ForLet, _5)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb35]\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb32]\n 2:19-2:35: @1[0]: _3 = &amp;_4\n-2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb34]\n+2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb31]\n 2:19-2:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 2:9-2:16: @2[3]: FakeRead(ForLet, _1)\n 3:25-3:27: @3[2]: _5 = const 10_i32\n@@ -107,67 +107,60 @@\n 8:13-8:14: @16[4]: _15 = move _22\n 8:13-8:14: @16[5]: _16 = const ()\"><span class=\"annotation\">@14,16\u298a</span>_<span class=\"annotation\">\u2989@14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"> in </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:18-8:23: @11[5]: _19 = &amp;mut _14\n 8:18-8:23: @11[6]: _18 = &amp;mut (*_19)\n-8:18-8:23: @11.Call: _17 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _18) -&gt; [return: bb12, unwind: bb35]\n+8:18-8:23: @11.Call: _17 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _18) -&gt; [return: bb12, unwind: bb32]\n 8:18-8:23: @12[1]: FakeRead(ForMatchedPlace, _17)\"><span class=\"annotation\">@10,11,12\u298a</span>0..50<span class=\"annotation\">\u2989@10,11,12</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:16-9:17: @16[15]: _27 = _9\n-9:16-9:22: @16[16]: _26 = Lt(move _27, const 30_i32)\n-9:16-9:22: @16[18]: FakeRead(ForMatchedPlace, _26)\"><span class=\"annotation\">@14,16\u298a</span>a &lt; 30<span class=\"annotation\">\u2989@14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:17-10:22: @19[0]: _11 = const ()\"><span class=\"annotation\">@17,19\u298a</span>break<span class=\"annotation\">\u2989@17,19</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+9:16-9:22: @16[16]: _26 = Lt(move _27, const 30_i32)\"><span class=\"annotation\">@14,16\u298a</span>a &lt; 30<span class=\"annotation\">\u2989@14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:17-10:22: @17[0]: _11 = const ()\"><span class=\"annotation\">@17\u298a</span>break<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:14-11:14: @18[0]: _25 = const ()\n 12:13-12:19: @18[3]: _29 = CheckedSub(_9, const 5_i32)\n-12:13-12:19: @20[0]: _9 = move (_29.0: i32)\n-13:13-13:19: @20[1]: _30 = CheckedSub(_10, const 5_i32)\n-13:13-13:19: @21[0]: _10 = move (_30.0: i32)\n-14:16-14:17: @21[3]: _32 = _10\n-14:16-14:22: @21[4]: _31 = Lt(move _32, const 90_i32)\n-14:16-14:22: @21[6]: FakeRead(ForMatchedPlace, _31)\"><span class=\"annotation\">@18,20,21\u298a</span></span></span>\n+12:13-12:19: @19[0]: _9 = move (_29.0: i32)\n+13:13-13:19: @19[1]: _30 = CheckedSub(_10, const 5_i32)\n+13:13-13:19: @20[0]: _10 = move (_30.0: i32)\n+14:16-14:17: @20[3]: _32 = _10\n+14:16-14:22: @20[4]: _31 = Lt(move _32, const 90_i32)\"><span class=\"annotation\">@18,19,20\u298a</span></span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:14-11:14: @18[0]: _25 = const ()\n 12:13-12:19: @18[3]: _29 = CheckedSub(_9, const 5_i32)\n-12:13-12:19: @20[0]: _9 = move (_29.0: i32)\n-13:13-13:19: @20[1]: _30 = CheckedSub(_10, const 5_i32)\n-13:13-13:19: @21[0]: _10 = move (_30.0: i32)\n-14:16-14:17: @21[3]: _32 = _10\n-14:16-14:22: @21[4]: _31 = Lt(move _32, const 90_i32)\n-14:16-14:22: @21[6]: FakeRead(ForMatchedPlace, _31)\">            a -= 5;</span></span>\n+12:13-12:19: @19[0]: _9 = move (_29.0: i32)\n+13:13-13:19: @19[1]: _30 = CheckedSub(_10, const 5_i32)\n+13:13-13:19: @20[0]: _10 = move (_30.0: i32)\n+14:16-14:17: @20[3]: _32 = _10\n+14:16-14:22: @20[4]: _31 = Lt(move _32, const 90_i32)\">            a -= 5;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:14-11:14: @18[0]: _25 = const ()\n 12:13-12:19: @18[3]: _29 = CheckedSub(_9, const 5_i32)\n-12:13-12:19: @20[0]: _9 = move (_29.0: i32)\n-13:13-13:19: @20[1]: _30 = CheckedSub(_10, const 5_i32)\n-13:13-13:19: @21[0]: _10 = move (_30.0: i32)\n-14:16-14:17: @21[3]: _32 = _10\n-14:16-14:22: @21[4]: _31 = Lt(move _32, const 90_i32)\n-14:16-14:22: @21[6]: FakeRead(ForMatchedPlace, _31)\">            b -= 5;</span></span>\n+12:13-12:19: @19[0]: _9 = move (_29.0: i32)\n+13:13-13:19: @19[1]: _30 = CheckedSub(_10, const 5_i32)\n+13:13-13:19: @20[0]: _10 = move (_30.0: i32)\n+14:16-14:17: @20[3]: _32 = _10\n+14:16-14:22: @20[4]: _31 = Lt(move _32, const 90_i32)\">            b -= 5;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:14-11:14: @18[0]: _25 = const ()\n 12:13-12:19: @18[3]: _29 = CheckedSub(_9, const 5_i32)\n-12:13-12:19: @20[0]: _9 = move (_29.0: i32)\n-13:13-13:19: @20[1]: _30 = CheckedSub(_10, const 5_i32)\n-13:13-13:19: @21[0]: _10 = move (_30.0: i32)\n-14:16-14:17: @21[3]: _32 = _10\n-14:16-14:22: @21[4]: _31 = Lt(move _32, const 90_i32)\n-14:16-14:22: @21[6]: FakeRead(ForMatchedPlace, _31)\">            if b &lt; 90<span class=\"annotation\">\u2989@18,20,21</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:17-15:24: @24[0]: _33 = CheckedSub(_9, const 10_i32)\n-15:17-15:24: @25[0]: _9 = move (_33.0: i32)\n-16:20-16:27: @25[2]: _34 = _1\n-16:20-16:27: @25[3]: FakeRead(ForMatchedPlace, _34)\"><span class=\"annotation\">@22,24,25\u298a</span>a -= 10;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:17-15:24: @24[0]: _33 = CheckedSub(_9, const 10_i32)\n-15:17-15:24: @25[0]: _9 = move (_33.0: i32)\n-16:20-16:27: @25[2]: _34 = _1\n-16:20-16:27: @25[3]: FakeRead(ForMatchedPlace, _34)\">                if is_true<span class=\"annotation\">\u2989@22,24,25</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:21-17:33: @28[0]: _0 = const ()\"><span class=\"annotation\">@26,28\u298a</span>break 'outer<span class=\"annotation\">\u2989@26,28</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                } else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:21-19:27: @27[0]: _36 = CheckedSub(_9, const 2_i32)\n-19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n-18:24-20:18: @29[1]: _24 = const ()\"><span class=\"annotation\">@27,29\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:21-19:27: @27[0]: _36 = CheckedSub(_9, const 2_i32)\n-19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n-18:24-20:18: @29[1]: _24 = const ()\">                    a -= 2;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:21-19:27: @27[0]: _36 = CheckedSub(_9, const 2_i32)\n-19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n-18:24-20:18: @29[1]: _24 = const ()\">                }<span class=\"annotation\">\u2989@27,29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:14-21:14: @23[0]: _24 = const ()\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+12:13-12:19: @19[0]: _9 = move (_29.0: i32)\n+13:13-13:19: @19[1]: _30 = CheckedSub(_10, const 5_i32)\n+13:13-13:19: @20[0]: _10 = move (_30.0: i32)\n+14:16-14:17: @20[3]: _32 = _10\n+14:16-14:22: @20[4]: _31 = Lt(move _32, const 90_i32)\">            if b &lt; 90<span class=\"annotation\">\u2989@18,19,20</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:17-15:24: @21[0]: _33 = CheckedSub(_9, const 10_i32)\n+15:17-15:24: @23[0]: _9 = move (_33.0: i32)\n+16:20-16:27: @23[2]: _34 = _1\"><span class=\"annotation\">@21,23\u298a</span>a -= 10;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:17-15:24: @21[0]: _33 = CheckedSub(_9, const 10_i32)\n+15:17-15:24: @23[0]: _9 = move (_33.0: i32)\n+16:20-16:27: @23[2]: _34 = _1\">                if is_true<span class=\"annotation\">\u2989@21,23</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:21-17:33: @24[0]: _0 = const ()\"><span class=\"annotation\">@24\u298a</span>break 'outer<span class=\"annotation\">\u2989@24</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                } else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:21-19:27: @25[0]: _36 = CheckedSub(_9, const 2_i32)\n+19:21-19:27: @26[0]: _9 = move (_36.0: i32)\n+18:24-20:18: @26[1]: _24 = const ()\"><span class=\"annotation\">@25,26\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:21-19:27: @25[0]: _36 = CheckedSub(_9, const 2_i32)\n+19:21-19:27: @26[0]: _9 = move (_36.0: i32)\n+18:24-20:18: @26[1]: _24 = const ()\">                    a -= 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:21-19:27: @25[0]: _36 = CheckedSub(_9, const 2_i32)\n+19:21-19:27: @26[0]: _9 = move (_36.0: i32)\n+18:24-20:18: @26[1]: _24 = const ()\">                }<span class=\"annotation\">\u2989@25,26</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:14-21:14: @22[0]: _24 = const ()\"><span class=\"annotation\">@22\u298a</span>\u2038<span class=\"annotation\">\u2989@22</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:23: @31[4]: _37 = CheckedSub(_5, const 1_i32)\n-23:9-23:23: @32[0]: _5 = move (_37.0: i32)\"><span class=\"annotation\">@31,32\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@31,32</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:23: @28[4]: _37 = CheckedSub(_5, const 1_i32)\n+23:9-23:23: @29[0]: _5 = move (_37.0: i32)\"><span class=\"annotation\">@28,29\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@28,29</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:2-25:2: @33.Return: return\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:2-25:2: @30.Return: return\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "ca3515689d337368f7e56f0cf6ee1a31f06897cb", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.overflow/overflow.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 170, "deletions": 172, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.overflow%2Foverflow.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.overflow%2Foverflow.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.overflow%2Foverflow.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -77,178 +77,176 @@\n 17:11-17:24: @2[3]: _4 = Gt(move _5, const 0_i32)\n 17:11-17:24: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>countdown &gt; 0<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:12-18:21: @5[3]: _8 = _1\n-18:12-18:26: @5[4]: _7 = Eq(move _8, const 1_i32)\n-18:12-18:26: @5[6]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@3,5\u298a</span>countdown == 1<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:26-19:44: @8.Call: _9 = might_overflow(const 10_u32) -&gt; [return: bb9, unwind: bb23]\n-19:17-19:23: @9[0]: FakeRead(ForLet, _9)\n-20:22-20:34: @9[7]: _51 = const main::promoted[1]\n-20:22-20:34: @9[8]: _15 = &amp;(*_51)\n-20:22-20:34: @9[9]: _14 = &amp;(*_15)\n-20:22-20:34: @9[10]: _13 = move _14 as &amp;[&amp;str] (Pointer(Unsize))\n-20:36-20:42: @9[18]: _22 = &amp;_9\n-20:13-20:44: @9[19]: _21 = (move _22,)\n-20:13-20:44: @9[21]: FakeRead(ForMatchedPlace, _21)\n-20:13-20:44: @9[23]: _23 = (_21.0: &amp;u32)\n-20:13-20:44: @9[26]: _25 = &amp;(*_23)\n-20:13-20:44: @9[28]: _26 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-20:13-20:44: @9.Call: _24 = ArgumentV1::new::&lt;u32&gt;(move _25, move _26) -&gt; [return: bb10, unwind: bb23]\n-20:13-20:44: @10[2]: _20 = [move _24]\n-20:13-20:44: @10[5]: _19 = &amp;_20\n-20:13-20:44: @10[6]: _18 = &amp;(*_19)\n-20:13-20:44: @10[7]: _17 = move _18 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-20:13-20:44: @10.Call: _12 = Arguments::new_v1(move _13, move _17) -&gt; [return: bb11, unwind: bb23]\n-20:13-20:44: @11.Call: _11 = _print(move _12) -&gt; [return: bb12, unwind: bb23]\n-20:13-20:44: @12[6]: _10 = const ()\n-18:27-21:10: @12[8]: _6 = const ()\"><span class=\"annotation\">@6,8,9,10,11,12\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:26-19:44: @8.Call: _9 = might_overflow(const 10_u32) -&gt; [return: bb9, unwind: bb23]\n-19:17-19:23: @9[0]: FakeRead(ForLet, _9)\n-20:22-20:34: @9[7]: _51 = const main::promoted[1]\n-20:22-20:34: @9[8]: _15 = &amp;(*_51)\n-20:22-20:34: @9[9]: _14 = &amp;(*_15)\n-20:22-20:34: @9[10]: _13 = move _14 as &amp;[&amp;str] (Pointer(Unsize))\n-20:36-20:42: @9[18]: _22 = &amp;_9\n-20:13-20:44: @9[19]: _21 = (move _22,)\n-20:13-20:44: @9[21]: FakeRead(ForMatchedPlace, _21)\n-20:13-20:44: @9[23]: _23 = (_21.0: &amp;u32)\n-20:13-20:44: @9[26]: _25 = &amp;(*_23)\n-20:13-20:44: @9[28]: _26 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-20:13-20:44: @9.Call: _24 = ArgumentV1::new::&lt;u32&gt;(move _25, move _26) -&gt; [return: bb10, unwind: bb23]\n-20:13-20:44: @10[2]: _20 = [move _24]\n-20:13-20:44: @10[5]: _19 = &amp;_20\n-20:13-20:44: @10[6]: _18 = &amp;(*_19)\n-20:13-20:44: @10[7]: _17 = move _18 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-20:13-20:44: @10.Call: _12 = Arguments::new_v1(move _13, move _17) -&gt; [return: bb11, unwind: bb23]\n-20:13-20:44: @11.Call: _11 = _print(move _12) -&gt; [return: bb12, unwind: bb23]\n-20:13-20:44: @12[6]: _10 = const ()\n-18:27-21:10: @12[8]: _6 = const ()\">            let result = might_overflow(10);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:26-19:44: @8.Call: _9 = might_overflow(const 10_u32) -&gt; [return: bb9, unwind: bb23]\n-19:17-19:23: @9[0]: FakeRead(ForLet, _9)\n-20:22-20:34: @9[7]: _51 = const main::promoted[1]\n-20:22-20:34: @9[8]: _15 = &amp;(*_51)\n-20:22-20:34: @9[9]: _14 = &amp;(*_15)\n-20:22-20:34: @9[10]: _13 = move _14 as &amp;[&amp;str] (Pointer(Unsize))\n-20:36-20:42: @9[18]: _22 = &amp;_9\n-20:13-20:44: @9[19]: _21 = (move _22,)\n-20:13-20:44: @9[21]: FakeRead(ForMatchedPlace, _21)\n-20:13-20:44: @9[23]: _23 = (_21.0: &amp;u32)\n-20:13-20:44: @9[26]: _25 = &amp;(*_23)\n-20:13-20:44: @9[28]: _26 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-20:13-20:44: @9.Call: _24 = ArgumentV1::new::&lt;u32&gt;(move _25, move _26) -&gt; [return: bb10, unwind: bb23]\n-20:13-20:44: @10[2]: _20 = [move _24]\n-20:13-20:44: @10[5]: _19 = &amp;_20\n-20:13-20:44: @10[6]: _18 = &amp;(*_19)\n-20:13-20:44: @10[7]: _17 = move _18 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-20:13-20:44: @10.Call: _12 = Arguments::new_v1(move _13, move _17) -&gt; [return: bb11, unwind: bb23]\n-20:13-20:44: @11.Call: _11 = _print(move _12) -&gt; [return: bb12, unwind: bb23]\n-20:13-20:44: @12[6]: _10 = const ()\n-18:27-21:10: @12[8]: _6 = const ()\">            println!(\"Result: {}\", result);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:26-19:44: @8.Call: _9 = might_overflow(const 10_u32) -&gt; [return: bb9, unwind: bb23]\n-19:17-19:23: @9[0]: FakeRead(ForLet, _9)\n-20:22-20:34: @9[7]: _51 = const main::promoted[1]\n-20:22-20:34: @9[8]: _15 = &amp;(*_51)\n-20:22-20:34: @9[9]: _14 = &amp;(*_15)\n-20:22-20:34: @9[10]: _13 = move _14 as &amp;[&amp;str] (Pointer(Unsize))\n-20:36-20:42: @9[18]: _22 = &amp;_9\n-20:13-20:44: @9[19]: _21 = (move _22,)\n-20:13-20:44: @9[21]: FakeRead(ForMatchedPlace, _21)\n-20:13-20:44: @9[23]: _23 = (_21.0: &amp;u32)\n-20:13-20:44: @9[26]: _25 = &amp;(*_23)\n-20:13-20:44: @9[28]: _26 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-20:13-20:44: @9.Call: _24 = ArgumentV1::new::&lt;u32&gt;(move _25, move _26) -&gt; [return: bb10, unwind: bb23]\n-20:13-20:44: @10[2]: _20 = [move _24]\n-20:13-20:44: @10[5]: _19 = &amp;_20\n-20:13-20:44: @10[6]: _18 = &amp;(*_19)\n-20:13-20:44: @10[7]: _17 = move _18 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-20:13-20:44: @10.Call: _12 = Arguments::new_v1(move _13, move _17) -&gt; [return: bb11, unwind: bb23]\n-20:13-20:44: @11.Call: _11 = _print(move _12) -&gt; [return: bb12, unwind: bb23]\n-20:13-20:44: @12[6]: _10 = const ()\n-18:27-21:10: @12[8]: _6 = const ()\">        }<span class=\"annotation\">\u2989@6,8,9,10,11,12</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:19-21:28: @7[2]: _28 = _1\n-21:19-21:32: @7[3]: _27 = Lt(move _28, const 5_i32)\n-21:19-21:32: @7[5]: FakeRead(ForMatchedPlace, _27)\"><span class=\"annotation\">@7\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:26-22:43: @15.Call: _29 = might_overflow(const 1_u32) -&gt; [return: bb16, unwind: bb23]\n-22:17-22:23: @16[0]: FakeRead(ForLet, _29)\n-23:22-23:34: @16[7]: _50 = const main::promoted[0]\n-23:22-23:34: @16[8]: _35 = &amp;(*_50)\n-23:22-23:34: @16[9]: _34 = &amp;(*_35)\n-23:22-23:34: @16[10]: _33 = move _34 as &amp;[&amp;str] (Pointer(Unsize))\n-23:36-23:42: @16[18]: _42 = &amp;_29\n-23:13-23:44: @16[19]: _41 = (move _42,)\n-23:13-23:44: @16[21]: FakeRead(ForMatchedPlace, _41)\n-23:13-23:44: @16[23]: _43 = (_41.0: &amp;u32)\n-23:13-23:44: @16[26]: _45 = &amp;(*_43)\n-23:13-23:44: @16[28]: _46 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-23:13-23:44: @16.Call: _44 = ArgumentV1::new::&lt;u32&gt;(move _45, move _46) -&gt; [return: bb17, unwind: bb23]\n-23:13-23:44: @17[2]: _40 = [move _44]\n-23:13-23:44: @17[5]: _39 = &amp;_40\n-23:13-23:44: @17[6]: _38 = &amp;(*_39)\n-23:13-23:44: @17[7]: _37 = move _38 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-23:13-23:44: @17.Call: _32 = Arguments::new_v1(move _33, move _37) -&gt; [return: bb18, unwind: bb23]\n-23:13-23:44: @18.Call: _31 = _print(move _32) -&gt; [return: bb19, unwind: bb23]\n-23:13-23:44: @19[6]: _30 = const ()\n-21:33-24:10: @19[8]: _6 = const ()\"><span class=\"annotation\">@13,15,16,17,18,19\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:26-22:43: @15.Call: _29 = might_overflow(const 1_u32) -&gt; [return: bb16, unwind: bb23]\n-22:17-22:23: @16[0]: FakeRead(ForLet, _29)\n-23:22-23:34: @16[7]: _50 = const main::promoted[0]\n-23:22-23:34: @16[8]: _35 = &amp;(*_50)\n-23:22-23:34: @16[9]: _34 = &amp;(*_35)\n-23:22-23:34: @16[10]: _33 = move _34 as &amp;[&amp;str] (Pointer(Unsize))\n-23:36-23:42: @16[18]: _42 = &amp;_29\n-23:13-23:44: @16[19]: _41 = (move _42,)\n-23:13-23:44: @16[21]: FakeRead(ForMatchedPlace, _41)\n-23:13-23:44: @16[23]: _43 = (_41.0: &amp;u32)\n-23:13-23:44: @16[26]: _45 = &amp;(*_43)\n-23:13-23:44: @16[28]: _46 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-23:13-23:44: @16.Call: _44 = ArgumentV1::new::&lt;u32&gt;(move _45, move _46) -&gt; [return: bb17, unwind: bb23]\n-23:13-23:44: @17[2]: _40 = [move _44]\n-23:13-23:44: @17[5]: _39 = &amp;_40\n-23:13-23:44: @17[6]: _38 = &amp;(*_39)\n-23:13-23:44: @17[7]: _37 = move _38 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-23:13-23:44: @17.Call: _32 = Arguments::new_v1(move _33, move _37) -&gt; [return: bb18, unwind: bb23]\n-23:13-23:44: @18.Call: _31 = _print(move _32) -&gt; [return: bb19, unwind: bb23]\n-23:13-23:44: @19[6]: _30 = const ()\n-21:33-24:10: @19[8]: _6 = const ()\">            let result = might_overflow(1);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:26-22:43: @15.Call: _29 = might_overflow(const 1_u32) -&gt; [return: bb16, unwind: bb23]\n-22:17-22:23: @16[0]: FakeRead(ForLet, _29)\n-23:22-23:34: @16[7]: _50 = const main::promoted[0]\n-23:22-23:34: @16[8]: _35 = &amp;(*_50)\n-23:22-23:34: @16[9]: _34 = &amp;(*_35)\n-23:22-23:34: @16[10]: _33 = move _34 as &amp;[&amp;str] (Pointer(Unsize))\n-23:36-23:42: @16[18]: _42 = &amp;_29\n-23:13-23:44: @16[19]: _41 = (move _42,)\n-23:13-23:44: @16[21]: FakeRead(ForMatchedPlace, _41)\n-23:13-23:44: @16[23]: _43 = (_41.0: &amp;u32)\n-23:13-23:44: @16[26]: _45 = &amp;(*_43)\n-23:13-23:44: @16[28]: _46 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-23:13-23:44: @16.Call: _44 = ArgumentV1::new::&lt;u32&gt;(move _45, move _46) -&gt; [return: bb17, unwind: bb23]\n-23:13-23:44: @17[2]: _40 = [move _44]\n-23:13-23:44: @17[5]: _39 = &amp;_40\n-23:13-23:44: @17[6]: _38 = &amp;(*_39)\n-23:13-23:44: @17[7]: _37 = move _38 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-23:13-23:44: @17.Call: _32 = Arguments::new_v1(move _33, move _37) -&gt; [return: bb18, unwind: bb23]\n-23:13-23:44: @18.Call: _31 = _print(move _32) -&gt; [return: bb19, unwind: bb23]\n-23:13-23:44: @19[6]: _30 = const ()\n-21:33-24:10: @19[8]: _6 = const ()\">            println!(\"Result: {}\", result);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:26-22:43: @15.Call: _29 = might_overflow(const 1_u32) -&gt; [return: bb16, unwind: bb23]\n-22:17-22:23: @16[0]: FakeRead(ForLet, _29)\n-23:22-23:34: @16[7]: _50 = const main::promoted[0]\n-23:22-23:34: @16[8]: _35 = &amp;(*_50)\n-23:22-23:34: @16[9]: _34 = &amp;(*_35)\n-23:22-23:34: @16[10]: _33 = move _34 as &amp;[&amp;str] (Pointer(Unsize))\n-23:36-23:42: @16[18]: _42 = &amp;_29\n-23:13-23:44: @16[19]: _41 = (move _42,)\n-23:13-23:44: @16[21]: FakeRead(ForMatchedPlace, _41)\n-23:13-23:44: @16[23]: _43 = (_41.0: &amp;u32)\n-23:13-23:44: @16[26]: _45 = &amp;(*_43)\n-23:13-23:44: @16[28]: _46 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-23:13-23:44: @16.Call: _44 = ArgumentV1::new::&lt;u32&gt;(move _45, move _46) -&gt; [return: bb17, unwind: bb23]\n-23:13-23:44: @17[2]: _40 = [move _44]\n-23:13-23:44: @17[5]: _39 = &amp;_40\n-23:13-23:44: @17[6]: _38 = &amp;(*_39)\n-23:13-23:44: @17[7]: _37 = move _38 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-23:13-23:44: @17.Call: _32 = Arguments::new_v1(move _33, move _37) -&gt; [return: bb18, unwind: bb23]\n-23:13-23:44: @18.Call: _31 = _print(move _32) -&gt; [return: bb19, unwind: bb23]\n-23:13-23:44: @19[6]: _30 = const ()\n-21:33-24:10: @19[8]: _6 = const ()\">        }<span class=\"annotation\">\u2989@13,15,16,17,18,19</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:10-24:10: @14[0]: _6 = const ()\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @21[2]: _47 = CheckedSub(_1, const 1_i32)\n-25:9-25:23: @22[0]: _1 = move (_47.0: i32)\"><span class=\"annotation\">@21,22\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@21,22</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+18:12-18:26: @5[4]: _7 = Eq(move _8, const 1_i32)\"><span class=\"annotation\">@3,5\u298a</span>countdown == 1<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:26-19:44: @6.Call: _9 = might_overflow(const 10_u32) -&gt; [return: bb8, unwind: bb21]\n+19:17-19:23: @8[0]: FakeRead(ForLet, _9)\n+20:22-20:34: @8[7]: _51 = const main::promoted[1]\n+20:22-20:34: @8[8]: _15 = &amp;(*_51)\n+20:22-20:34: @8[9]: _14 = &amp;(*_15)\n+20:22-20:34: @8[10]: _13 = move _14 as &amp;[&amp;str] (Pointer(Unsize))\n+20:36-20:42: @8[18]: _22 = &amp;_9\n+20:13-20:44: @8[19]: _21 = (move _22,)\n+20:13-20:44: @8[21]: FakeRead(ForMatchedPlace, _21)\n+20:13-20:44: @8[23]: _23 = (_21.0: &amp;u32)\n+20:13-20:44: @8[26]: _25 = &amp;(*_23)\n+20:13-20:44: @8[28]: _26 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+20:13-20:44: @8.Call: _24 = ArgumentV1::new::&lt;u32&gt;(move _25, move _26) -&gt; [return: bb9, unwind: bb21]\n+20:13-20:44: @9[2]: _20 = [move _24]\n+20:13-20:44: @9[5]: _19 = &amp;_20\n+20:13-20:44: @9[6]: _18 = &amp;(*_19)\n+20:13-20:44: @9[7]: _17 = move _18 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+20:13-20:44: @9.Call: _12 = Arguments::new_v1(move _13, move _17) -&gt; [return: bb10, unwind: bb21]\n+20:13-20:44: @10.Call: _11 = _print(move _12) -&gt; [return: bb11, unwind: bb21]\n+20:13-20:44: @11[6]: _10 = const ()\n+18:27-21:10: @11[8]: _6 = const ()\"><span class=\"annotation\">@6,8,9,10,11\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:26-19:44: @6.Call: _9 = might_overflow(const 10_u32) -&gt; [return: bb8, unwind: bb21]\n+19:17-19:23: @8[0]: FakeRead(ForLet, _9)\n+20:22-20:34: @8[7]: _51 = const main::promoted[1]\n+20:22-20:34: @8[8]: _15 = &amp;(*_51)\n+20:22-20:34: @8[9]: _14 = &amp;(*_15)\n+20:22-20:34: @8[10]: _13 = move _14 as &amp;[&amp;str] (Pointer(Unsize))\n+20:36-20:42: @8[18]: _22 = &amp;_9\n+20:13-20:44: @8[19]: _21 = (move _22,)\n+20:13-20:44: @8[21]: FakeRead(ForMatchedPlace, _21)\n+20:13-20:44: @8[23]: _23 = (_21.0: &amp;u32)\n+20:13-20:44: @8[26]: _25 = &amp;(*_23)\n+20:13-20:44: @8[28]: _26 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+20:13-20:44: @8.Call: _24 = ArgumentV1::new::&lt;u32&gt;(move _25, move _26) -&gt; [return: bb9, unwind: bb21]\n+20:13-20:44: @9[2]: _20 = [move _24]\n+20:13-20:44: @9[5]: _19 = &amp;_20\n+20:13-20:44: @9[6]: _18 = &amp;(*_19)\n+20:13-20:44: @9[7]: _17 = move _18 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+20:13-20:44: @9.Call: _12 = Arguments::new_v1(move _13, move _17) -&gt; [return: bb10, unwind: bb21]\n+20:13-20:44: @10.Call: _11 = _print(move _12) -&gt; [return: bb11, unwind: bb21]\n+20:13-20:44: @11[6]: _10 = const ()\n+18:27-21:10: @11[8]: _6 = const ()\">            let result = might_overflow(10);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:26-19:44: @6.Call: _9 = might_overflow(const 10_u32) -&gt; [return: bb8, unwind: bb21]\n+19:17-19:23: @8[0]: FakeRead(ForLet, _9)\n+20:22-20:34: @8[7]: _51 = const main::promoted[1]\n+20:22-20:34: @8[8]: _15 = &amp;(*_51)\n+20:22-20:34: @8[9]: _14 = &amp;(*_15)\n+20:22-20:34: @8[10]: _13 = move _14 as &amp;[&amp;str] (Pointer(Unsize))\n+20:36-20:42: @8[18]: _22 = &amp;_9\n+20:13-20:44: @8[19]: _21 = (move _22,)\n+20:13-20:44: @8[21]: FakeRead(ForMatchedPlace, _21)\n+20:13-20:44: @8[23]: _23 = (_21.0: &amp;u32)\n+20:13-20:44: @8[26]: _25 = &amp;(*_23)\n+20:13-20:44: @8[28]: _26 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+20:13-20:44: @8.Call: _24 = ArgumentV1::new::&lt;u32&gt;(move _25, move _26) -&gt; [return: bb9, unwind: bb21]\n+20:13-20:44: @9[2]: _20 = [move _24]\n+20:13-20:44: @9[5]: _19 = &amp;_20\n+20:13-20:44: @9[6]: _18 = &amp;(*_19)\n+20:13-20:44: @9[7]: _17 = move _18 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+20:13-20:44: @9.Call: _12 = Arguments::new_v1(move _13, move _17) -&gt; [return: bb10, unwind: bb21]\n+20:13-20:44: @10.Call: _11 = _print(move _12) -&gt; [return: bb11, unwind: bb21]\n+20:13-20:44: @11[6]: _10 = const ()\n+18:27-21:10: @11[8]: _6 = const ()\">            println!(\"Result: {}\", result);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:26-19:44: @6.Call: _9 = might_overflow(const 10_u32) -&gt; [return: bb8, unwind: bb21]\n+19:17-19:23: @8[0]: FakeRead(ForLet, _9)\n+20:22-20:34: @8[7]: _51 = const main::promoted[1]\n+20:22-20:34: @8[8]: _15 = &amp;(*_51)\n+20:22-20:34: @8[9]: _14 = &amp;(*_15)\n+20:22-20:34: @8[10]: _13 = move _14 as &amp;[&amp;str] (Pointer(Unsize))\n+20:36-20:42: @8[18]: _22 = &amp;_9\n+20:13-20:44: @8[19]: _21 = (move _22,)\n+20:13-20:44: @8[21]: FakeRead(ForMatchedPlace, _21)\n+20:13-20:44: @8[23]: _23 = (_21.0: &amp;u32)\n+20:13-20:44: @8[26]: _25 = &amp;(*_23)\n+20:13-20:44: @8[28]: _26 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+20:13-20:44: @8.Call: _24 = ArgumentV1::new::&lt;u32&gt;(move _25, move _26) -&gt; [return: bb9, unwind: bb21]\n+20:13-20:44: @9[2]: _20 = [move _24]\n+20:13-20:44: @9[5]: _19 = &amp;_20\n+20:13-20:44: @9[6]: _18 = &amp;(*_19)\n+20:13-20:44: @9[7]: _17 = move _18 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+20:13-20:44: @9.Call: _12 = Arguments::new_v1(move _13, move _17) -&gt; [return: bb10, unwind: bb21]\n+20:13-20:44: @10.Call: _11 = _print(move _12) -&gt; [return: bb11, unwind: bb21]\n+20:13-20:44: @11[6]: _10 = const ()\n+18:27-21:10: @11[8]: _6 = const ()\">        }<span class=\"annotation\">\u2989@6,8,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:19-21:28: @7[2]: _28 = _1\n+21:19-21:32: @7[3]: _27 = Lt(move _28, const 5_i32)\"><span class=\"annotation\">@7\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:26-22:43: @12.Call: _29 = might_overflow(const 1_u32) -&gt; [return: bb14, unwind: bb21]\n+22:17-22:23: @14[0]: FakeRead(ForLet, _29)\n+23:22-23:34: @14[7]: _50 = const main::promoted[0]\n+23:22-23:34: @14[8]: _35 = &amp;(*_50)\n+23:22-23:34: @14[9]: _34 = &amp;(*_35)\n+23:22-23:34: @14[10]: _33 = move _34 as &amp;[&amp;str] (Pointer(Unsize))\n+23:36-23:42: @14[18]: _42 = &amp;_29\n+23:13-23:44: @14[19]: _41 = (move _42,)\n+23:13-23:44: @14[21]: FakeRead(ForMatchedPlace, _41)\n+23:13-23:44: @14[23]: _43 = (_41.0: &amp;u32)\n+23:13-23:44: @14[26]: _45 = &amp;(*_43)\n+23:13-23:44: @14[28]: _46 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+23:13-23:44: @14.Call: _44 = ArgumentV1::new::&lt;u32&gt;(move _45, move _46) -&gt; [return: bb15, unwind: bb21]\n+23:13-23:44: @15[2]: _40 = [move _44]\n+23:13-23:44: @15[5]: _39 = &amp;_40\n+23:13-23:44: @15[6]: _38 = &amp;(*_39)\n+23:13-23:44: @15[7]: _37 = move _38 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+23:13-23:44: @15.Call: _32 = Arguments::new_v1(move _33, move _37) -&gt; [return: bb16, unwind: bb21]\n+23:13-23:44: @16.Call: _31 = _print(move _32) -&gt; [return: bb17, unwind: bb21]\n+23:13-23:44: @17[6]: _30 = const ()\n+21:33-24:10: @17[8]: _6 = const ()\"><span class=\"annotation\">@12,14,15,16,17\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:26-22:43: @12.Call: _29 = might_overflow(const 1_u32) -&gt; [return: bb14, unwind: bb21]\n+22:17-22:23: @14[0]: FakeRead(ForLet, _29)\n+23:22-23:34: @14[7]: _50 = const main::promoted[0]\n+23:22-23:34: @14[8]: _35 = &amp;(*_50)\n+23:22-23:34: @14[9]: _34 = &amp;(*_35)\n+23:22-23:34: @14[10]: _33 = move _34 as &amp;[&amp;str] (Pointer(Unsize))\n+23:36-23:42: @14[18]: _42 = &amp;_29\n+23:13-23:44: @14[19]: _41 = (move _42,)\n+23:13-23:44: @14[21]: FakeRead(ForMatchedPlace, _41)\n+23:13-23:44: @14[23]: _43 = (_41.0: &amp;u32)\n+23:13-23:44: @14[26]: _45 = &amp;(*_43)\n+23:13-23:44: @14[28]: _46 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+23:13-23:44: @14.Call: _44 = ArgumentV1::new::&lt;u32&gt;(move _45, move _46) -&gt; [return: bb15, unwind: bb21]\n+23:13-23:44: @15[2]: _40 = [move _44]\n+23:13-23:44: @15[5]: _39 = &amp;_40\n+23:13-23:44: @15[6]: _38 = &amp;(*_39)\n+23:13-23:44: @15[7]: _37 = move _38 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+23:13-23:44: @15.Call: _32 = Arguments::new_v1(move _33, move _37) -&gt; [return: bb16, unwind: bb21]\n+23:13-23:44: @16.Call: _31 = _print(move _32) -&gt; [return: bb17, unwind: bb21]\n+23:13-23:44: @17[6]: _30 = const ()\n+21:33-24:10: @17[8]: _6 = const ()\">            let result = might_overflow(1);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:26-22:43: @12.Call: _29 = might_overflow(const 1_u32) -&gt; [return: bb14, unwind: bb21]\n+22:17-22:23: @14[0]: FakeRead(ForLet, _29)\n+23:22-23:34: @14[7]: _50 = const main::promoted[0]\n+23:22-23:34: @14[8]: _35 = &amp;(*_50)\n+23:22-23:34: @14[9]: _34 = &amp;(*_35)\n+23:22-23:34: @14[10]: _33 = move _34 as &amp;[&amp;str] (Pointer(Unsize))\n+23:36-23:42: @14[18]: _42 = &amp;_29\n+23:13-23:44: @14[19]: _41 = (move _42,)\n+23:13-23:44: @14[21]: FakeRead(ForMatchedPlace, _41)\n+23:13-23:44: @14[23]: _43 = (_41.0: &amp;u32)\n+23:13-23:44: @14[26]: _45 = &amp;(*_43)\n+23:13-23:44: @14[28]: _46 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+23:13-23:44: @14.Call: _44 = ArgumentV1::new::&lt;u32&gt;(move _45, move _46) -&gt; [return: bb15, unwind: bb21]\n+23:13-23:44: @15[2]: _40 = [move _44]\n+23:13-23:44: @15[5]: _39 = &amp;_40\n+23:13-23:44: @15[6]: _38 = &amp;(*_39)\n+23:13-23:44: @15[7]: _37 = move _38 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+23:13-23:44: @15.Call: _32 = Arguments::new_v1(move _33, move _37) -&gt; [return: bb16, unwind: bb21]\n+23:13-23:44: @16.Call: _31 = _print(move _32) -&gt; [return: bb17, unwind: bb21]\n+23:13-23:44: @17[6]: _30 = const ()\n+21:33-24:10: @17[8]: _6 = const ()\">            println!(\"Result: {}\", result);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:26-22:43: @12.Call: _29 = might_overflow(const 1_u32) -&gt; [return: bb14, unwind: bb21]\n+22:17-22:23: @14[0]: FakeRead(ForLet, _29)\n+23:22-23:34: @14[7]: _50 = const main::promoted[0]\n+23:22-23:34: @14[8]: _35 = &amp;(*_50)\n+23:22-23:34: @14[9]: _34 = &amp;(*_35)\n+23:22-23:34: @14[10]: _33 = move _34 as &amp;[&amp;str] (Pointer(Unsize))\n+23:36-23:42: @14[18]: _42 = &amp;_29\n+23:13-23:44: @14[19]: _41 = (move _42,)\n+23:13-23:44: @14[21]: FakeRead(ForMatchedPlace, _41)\n+23:13-23:44: @14[23]: _43 = (_41.0: &amp;u32)\n+23:13-23:44: @14[26]: _45 = &amp;(*_43)\n+23:13-23:44: @14[28]: _46 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+23:13-23:44: @14.Call: _44 = ArgumentV1::new::&lt;u32&gt;(move _45, move _46) -&gt; [return: bb15, unwind: bb21]\n+23:13-23:44: @15[2]: _40 = [move _44]\n+23:13-23:44: @15[5]: _39 = &amp;_40\n+23:13-23:44: @15[6]: _38 = &amp;(*_39)\n+23:13-23:44: @15[7]: _37 = move _38 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+23:13-23:44: @15.Call: _32 = Arguments::new_v1(move _33, move _37) -&gt; [return: bb16, unwind: bb21]\n+23:13-23:44: @16.Call: _31 = _print(move _32) -&gt; [return: bb17, unwind: bb21]\n+23:13-23:44: @17[6]: _30 = const ()\n+21:33-24:10: @17[8]: _6 = const ()\">        }<span class=\"annotation\">\u2989@12,14,15,16,17</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:10-24:10: @13[0]: _6 = const ()\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @19[2]: _47 = CheckedSub(_1, const 1_i32)\n+25:9-25:23: @20[0]: _1 = move (_47.0: i32)\"><span class=\"annotation\">@19,20\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@19,20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:8-27:10: @4[4]: _49 = ()\n 27:5-27:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _49)"}, {"sha": "f86cc4b2d2a0624ccfa4cdda7f1aa8c0bb07827f", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.overflow/overflow.might_overflow.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 319, "deletions": 321, "changes": 640, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.overflow%2Foverflow.might_overflow.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.overflow%2Foverflow.might_overflow.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.overflow%2Foverflow.might_overflow.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -70,327 +70,325 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:14: @0[3]: _4 = _1\n-5:8-5:18: @0[4]: _3 = Gt(move _4, const 5_u32)\n-5:8-5:18: @0[6]: FakeRead(ForMatchedPlace, _3)\"><span class=\"annotation\">@0\u298a</span>fn might_overflow(to_add: u32) -&gt; u32 {</span></span>\n+5:8-5:18: @0[4]: _3 = Gt(move _4, const 5_u32)\"><span class=\"annotation\">@0\u298a</span>fn might_overflow(to_add: u32) -&gt; u32 {</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:14: @0[3]: _4 = _1\n-5:8-5:18: @0[4]: _3 = Gt(move _4, const 5_u32)\n-5:8-5:18: @0[6]: FakeRead(ForMatchedPlace, _3)\">    if to_add &gt; 5<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:47: @3[6]: _61 = const might_overflow::promoted[4]\n-6:18-6:47: @3[7]: _10 = &amp;(*_61)\n-6:18-6:47: @3[8]: _9 = &amp;(*_10)\n-6:18-6:47: @3[9]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n-6:9-6:49: @3[15]: _16 = ()\n-6:9-6:49: @3[16]: FakeRead(ForMatchedPlace, _16)\n-6:9-6:49: @3[17]: _60 = const might_overflow::promoted[3]\n-6:9-6:49: @3[18]: _14 = &amp;(*_60)\n-6:9-6:49: @3[19]: _13 = &amp;(*_14)\n-6:9-6:49: @3[20]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-6:9-6:49: @3.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb4, unwind: bb15]\n-6:9-6:49: @4.Call: _6 = _print(move _7) -&gt; [return: bb5, unwind: bb15]\n-6:9-6:49: @5[5]: _5 = const ()\n-5:19-7:6: @5[7]: _2 = const ()\"><span class=\"annotation\">@1,3,4,5\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:47: @3[6]: _61 = const might_overflow::promoted[4]\n-6:18-6:47: @3[7]: _10 = &amp;(*_61)\n-6:18-6:47: @3[8]: _9 = &amp;(*_10)\n-6:18-6:47: @3[9]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n-6:9-6:49: @3[15]: _16 = ()\n-6:9-6:49: @3[16]: FakeRead(ForMatchedPlace, _16)\n-6:9-6:49: @3[17]: _60 = const might_overflow::promoted[3]\n-6:9-6:49: @3[18]: _14 = &amp;(*_60)\n-6:9-6:49: @3[19]: _13 = &amp;(*_14)\n-6:9-6:49: @3[20]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-6:9-6:49: @3.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb4, unwind: bb15]\n-6:9-6:49: @4.Call: _6 = _print(move _7) -&gt; [return: bb5, unwind: bb15]\n-6:9-6:49: @5[5]: _5 = const ()\n-5:19-7:6: @5[7]: _2 = const ()\">        println!(\"this will probably overflow\");</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:47: @3[6]: _61 = const might_overflow::promoted[4]\n-6:18-6:47: @3[7]: _10 = &amp;(*_61)\n-6:18-6:47: @3[8]: _9 = &amp;(*_10)\n-6:18-6:47: @3[9]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n-6:9-6:49: @3[15]: _16 = ()\n-6:9-6:49: @3[16]: FakeRead(ForMatchedPlace, _16)\n-6:9-6:49: @3[17]: _60 = const might_overflow::promoted[3]\n-6:9-6:49: @3[18]: _14 = &amp;(*_60)\n-6:9-6:49: @3[19]: _13 = &amp;(*_14)\n-6:9-6:49: @3[20]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-6:9-6:49: @3.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb4, unwind: bb15]\n-6:9-6:49: @4.Call: _6 = _print(move _7) -&gt; [return: bb5, unwind: bb15]\n-6:9-6:49: @5[5]: _5 = const ()\n-5:19-7:6: @5[7]: _2 = const ()\">    }<span class=\"annotation\">\u2989@1,3,4,5</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:6-7:6: @2[0]: _2 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @6[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n-8:18-8:30: @7[0]: _17 = move (_18.0: u32)\n-8:9-8:15: @7[1]: FakeRead(ForLet, _17)\n-9:14-9:38: @7[8]: _59 = const might_overflow::promoted[2]\n-9:14-9:38: @7[9]: _24 = &amp;(*_59)\n-9:14-9:38: @7[10]: _23 = &amp;(*_24)\n-9:14-9:38: @7[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n-9:40-9:46: @7[19]: _31 = &amp;_17\n-9:48-9:54: @7[21]: _32 = &amp;_1\n-9:5-9:56: @7[22]: _30 = (move _31, move _32)\n-9:5-9:56: @7[25]: FakeRead(ForMatchedPlace, _30)\n-9:5-9:56: @7[27]: _33 = (_30.0: &amp;u32)\n-9:5-9:56: @7[29]: _34 = (_30.1: &amp;u32)\n-9:5-9:56: @7[32]: _36 = &amp;(*_33)\n-9:5-9:56: @7[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @7.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb8, unwind: bb15]\n-9:5-9:56: @8[4]: _39 = &amp;(*_34)\n-9:5-9:56: @8[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @8.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb9, unwind: bb15]\n-9:5-9:56: @9[2]: _29 = [move _35, move _38]\n-9:5-9:56: @9[7]: _28 = &amp;_29\n-9:5-9:56: @9[8]: _27 = &amp;(*_28)\n-9:5-9:56: @9[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:5-9:56: @9.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb10, unwind: bb15]\n-9:5-9:56: @10.Call: _20 = _print(move _21) -&gt; [return: bb11, unwind: bb15]\n-9:5-9:56: @11[6]: _19 = const ()\n-10:18-10:24: @11[10]: _42 = _1\n-10:27-10:33: @11[12]: _43 = _17\n-10:18-10:33: @11[13]: _44 = CheckedAdd(_42, _43)\n-10:18-10:33: @12[0]: _41 = move (_44.0: u32)\n-10:9-10:15: @12[3]: FakeRead(ForLet, _41)\n-11:14-11:47: @12[10]: _58 = const might_overflow::promoted[1]\n-11:14-11:47: @12[11]: _50 = &amp;(*_58)\n-11:14-11:47: @12[12]: _49 = &amp;(*_50)\n-11:14-11:47: @12[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n-11:5-11:49: @12[19]: _56 = ()\n-11:5-11:49: @12[20]: FakeRead(ForMatchedPlace, _56)\n-11:5-11:49: @12[21]: _57 = const might_overflow::promoted[0]\n-11:5-11:49: @12[22]: _54 = &amp;(*_57)\n-11:5-11:49: @12[23]: _53 = &amp;(*_54)\n-11:5-11:49: @12[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-11:5-11:49: @12.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb13, unwind: bb15]\n-11:5-11:49: @13.Call: _46 = _print(move _47) -&gt; [return: bb14, unwind: bb15]\n-11:5-11:49: @14[5]: _45 = const ()\n-12:5-12:11: @14[7]: _0 = _41\n-13:2-13:2: @14.Return: return\"><span class=\"annotation\">@6,7,8,9,10,11,12,13,14\u298a</span>add_to = u32::MAX - 5;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @6[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n-8:18-8:30: @7[0]: _17 = move (_18.0: u32)\n-8:9-8:15: @7[1]: FakeRead(ForLet, _17)\n-9:14-9:38: @7[8]: _59 = const might_overflow::promoted[2]\n-9:14-9:38: @7[9]: _24 = &amp;(*_59)\n-9:14-9:38: @7[10]: _23 = &amp;(*_24)\n-9:14-9:38: @7[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n-9:40-9:46: @7[19]: _31 = &amp;_17\n-9:48-9:54: @7[21]: _32 = &amp;_1\n-9:5-9:56: @7[22]: _30 = (move _31, move _32)\n-9:5-9:56: @7[25]: FakeRead(ForMatchedPlace, _30)\n-9:5-9:56: @7[27]: _33 = (_30.0: &amp;u32)\n-9:5-9:56: @7[29]: _34 = (_30.1: &amp;u32)\n-9:5-9:56: @7[32]: _36 = &amp;(*_33)\n-9:5-9:56: @7[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @7.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb8, unwind: bb15]\n-9:5-9:56: @8[4]: _39 = &amp;(*_34)\n-9:5-9:56: @8[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @8.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb9, unwind: bb15]\n-9:5-9:56: @9[2]: _29 = [move _35, move _38]\n-9:5-9:56: @9[7]: _28 = &amp;_29\n-9:5-9:56: @9[8]: _27 = &amp;(*_28)\n-9:5-9:56: @9[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:5-9:56: @9.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb10, unwind: bb15]\n-9:5-9:56: @10.Call: _20 = _print(move _21) -&gt; [return: bb11, unwind: bb15]\n-9:5-9:56: @11[6]: _19 = const ()\n-10:18-10:24: @11[10]: _42 = _1\n-10:27-10:33: @11[12]: _43 = _17\n-10:18-10:33: @11[13]: _44 = CheckedAdd(_42, _43)\n-10:18-10:33: @12[0]: _41 = move (_44.0: u32)\n-10:9-10:15: @12[3]: FakeRead(ForLet, _41)\n-11:14-11:47: @12[10]: _58 = const might_overflow::promoted[1]\n-11:14-11:47: @12[11]: _50 = &amp;(*_58)\n-11:14-11:47: @12[12]: _49 = &amp;(*_50)\n-11:14-11:47: @12[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n-11:5-11:49: @12[19]: _56 = ()\n-11:5-11:49: @12[20]: FakeRead(ForMatchedPlace, _56)\n-11:5-11:49: @12[21]: _57 = const might_overflow::promoted[0]\n-11:5-11:49: @12[22]: _54 = &amp;(*_57)\n-11:5-11:49: @12[23]: _53 = &amp;(*_54)\n-11:5-11:49: @12[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-11:5-11:49: @12.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb13, unwind: bb15]\n-11:5-11:49: @13.Call: _46 = _print(move _47) -&gt; [return: bb14, unwind: bb15]\n-11:5-11:49: @14[5]: _45 = const ()\n-12:5-12:11: @14[7]: _0 = _41\n-13:2-13:2: @14.Return: return\">    println!(\"does {} + {} overflow?\", add_to, to_add);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @6[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n-8:18-8:30: @7[0]: _17 = move (_18.0: u32)\n-8:9-8:15: @7[1]: FakeRead(ForLet, _17)\n-9:14-9:38: @7[8]: _59 = const might_overflow::promoted[2]\n-9:14-9:38: @7[9]: _24 = &amp;(*_59)\n-9:14-9:38: @7[10]: _23 = &amp;(*_24)\n-9:14-9:38: @7[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n-9:40-9:46: @7[19]: _31 = &amp;_17\n-9:48-9:54: @7[21]: _32 = &amp;_1\n-9:5-9:56: @7[22]: _30 = (move _31, move _32)\n-9:5-9:56: @7[25]: FakeRead(ForMatchedPlace, _30)\n-9:5-9:56: @7[27]: _33 = (_30.0: &amp;u32)\n-9:5-9:56: @7[29]: _34 = (_30.1: &amp;u32)\n-9:5-9:56: @7[32]: _36 = &amp;(*_33)\n-9:5-9:56: @7[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @7.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb8, unwind: bb15]\n-9:5-9:56: @8[4]: _39 = &amp;(*_34)\n-9:5-9:56: @8[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @8.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb9, unwind: bb15]\n-9:5-9:56: @9[2]: _29 = [move _35, move _38]\n-9:5-9:56: @9[7]: _28 = &amp;_29\n-9:5-9:56: @9[8]: _27 = &amp;(*_28)\n-9:5-9:56: @9[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:5-9:56: @9.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb10, unwind: bb15]\n-9:5-9:56: @10.Call: _20 = _print(move _21) -&gt; [return: bb11, unwind: bb15]\n-9:5-9:56: @11[6]: _19 = const ()\n-10:18-10:24: @11[10]: _42 = _1\n-10:27-10:33: @11[12]: _43 = _17\n-10:18-10:33: @11[13]: _44 = CheckedAdd(_42, _43)\n-10:18-10:33: @12[0]: _41 = move (_44.0: u32)\n-10:9-10:15: @12[3]: FakeRead(ForLet, _41)\n-11:14-11:47: @12[10]: _58 = const might_overflow::promoted[1]\n-11:14-11:47: @12[11]: _50 = &amp;(*_58)\n-11:14-11:47: @12[12]: _49 = &amp;(*_50)\n-11:14-11:47: @12[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n-11:5-11:49: @12[19]: _56 = ()\n-11:5-11:49: @12[20]: FakeRead(ForMatchedPlace, _56)\n-11:5-11:49: @12[21]: _57 = const might_overflow::promoted[0]\n-11:5-11:49: @12[22]: _54 = &amp;(*_57)\n-11:5-11:49: @12[23]: _53 = &amp;(*_54)\n-11:5-11:49: @12[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-11:5-11:49: @12.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb13, unwind: bb15]\n-11:5-11:49: @13.Call: _46 = _print(move _47) -&gt; [return: bb14, unwind: bb15]\n-11:5-11:49: @14[5]: _45 = const ()\n-12:5-12:11: @14[7]: _0 = _41\n-13:2-13:2: @14.Return: return\">    let result = to_add + add_to;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @6[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n-8:18-8:30: @7[0]: _17 = move (_18.0: u32)\n-8:9-8:15: @7[1]: FakeRead(ForLet, _17)\n-9:14-9:38: @7[8]: _59 = const might_overflow::promoted[2]\n-9:14-9:38: @7[9]: _24 = &amp;(*_59)\n-9:14-9:38: @7[10]: _23 = &amp;(*_24)\n-9:14-9:38: @7[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n-9:40-9:46: @7[19]: _31 = &amp;_17\n-9:48-9:54: @7[21]: _32 = &amp;_1\n-9:5-9:56: @7[22]: _30 = (move _31, move _32)\n-9:5-9:56: @7[25]: FakeRead(ForMatchedPlace, _30)\n-9:5-9:56: @7[27]: _33 = (_30.0: &amp;u32)\n-9:5-9:56: @7[29]: _34 = (_30.1: &amp;u32)\n-9:5-9:56: @7[32]: _36 = &amp;(*_33)\n-9:5-9:56: @7[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @7.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb8, unwind: bb15]\n-9:5-9:56: @8[4]: _39 = &amp;(*_34)\n-9:5-9:56: @8[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @8.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb9, unwind: bb15]\n-9:5-9:56: @9[2]: _29 = [move _35, move _38]\n-9:5-9:56: @9[7]: _28 = &amp;_29\n-9:5-9:56: @9[8]: _27 = &amp;(*_28)\n-9:5-9:56: @9[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:5-9:56: @9.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb10, unwind: bb15]\n-9:5-9:56: @10.Call: _20 = _print(move _21) -&gt; [return: bb11, unwind: bb15]\n-9:5-9:56: @11[6]: _19 = const ()\n-10:18-10:24: @11[10]: _42 = _1\n-10:27-10:33: @11[12]: _43 = _17\n-10:18-10:33: @11[13]: _44 = CheckedAdd(_42, _43)\n-10:18-10:33: @12[0]: _41 = move (_44.0: u32)\n-10:9-10:15: @12[3]: FakeRead(ForLet, _41)\n-11:14-11:47: @12[10]: _58 = const might_overflow::promoted[1]\n-11:14-11:47: @12[11]: _50 = &amp;(*_58)\n-11:14-11:47: @12[12]: _49 = &amp;(*_50)\n-11:14-11:47: @12[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n-11:5-11:49: @12[19]: _56 = ()\n-11:5-11:49: @12[20]: FakeRead(ForMatchedPlace, _56)\n-11:5-11:49: @12[21]: _57 = const might_overflow::promoted[0]\n-11:5-11:49: @12[22]: _54 = &amp;(*_57)\n-11:5-11:49: @12[23]: _53 = &amp;(*_54)\n-11:5-11:49: @12[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-11:5-11:49: @12.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb13, unwind: bb15]\n-11:5-11:49: @13.Call: _46 = _print(move _47) -&gt; [return: bb14, unwind: bb15]\n-11:5-11:49: @14[5]: _45 = const ()\n-12:5-12:11: @14[7]: _0 = _41\n-13:2-13:2: @14.Return: return\">    println!(\"continuing after overflow check\");</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @6[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n-8:18-8:30: @7[0]: _17 = move (_18.0: u32)\n-8:9-8:15: @7[1]: FakeRead(ForLet, _17)\n-9:14-9:38: @7[8]: _59 = const might_overflow::promoted[2]\n-9:14-9:38: @7[9]: _24 = &amp;(*_59)\n-9:14-9:38: @7[10]: _23 = &amp;(*_24)\n-9:14-9:38: @7[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n-9:40-9:46: @7[19]: _31 = &amp;_17\n-9:48-9:54: @7[21]: _32 = &amp;_1\n-9:5-9:56: @7[22]: _30 = (move _31, move _32)\n-9:5-9:56: @7[25]: FakeRead(ForMatchedPlace, _30)\n-9:5-9:56: @7[27]: _33 = (_30.0: &amp;u32)\n-9:5-9:56: @7[29]: _34 = (_30.1: &amp;u32)\n-9:5-9:56: @7[32]: _36 = &amp;(*_33)\n-9:5-9:56: @7[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @7.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb8, unwind: bb15]\n-9:5-9:56: @8[4]: _39 = &amp;(*_34)\n-9:5-9:56: @8[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @8.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb9, unwind: bb15]\n-9:5-9:56: @9[2]: _29 = [move _35, move _38]\n-9:5-9:56: @9[7]: _28 = &amp;_29\n-9:5-9:56: @9[8]: _27 = &amp;(*_28)\n-9:5-9:56: @9[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:5-9:56: @9.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb10, unwind: bb15]\n-9:5-9:56: @10.Call: _20 = _print(move _21) -&gt; [return: bb11, unwind: bb15]\n-9:5-9:56: @11[6]: _19 = const ()\n-10:18-10:24: @11[10]: _42 = _1\n-10:27-10:33: @11[12]: _43 = _17\n-10:18-10:33: @11[13]: _44 = CheckedAdd(_42, _43)\n-10:18-10:33: @12[0]: _41 = move (_44.0: u32)\n-10:9-10:15: @12[3]: FakeRead(ForLet, _41)\n-11:14-11:47: @12[10]: _58 = const might_overflow::promoted[1]\n-11:14-11:47: @12[11]: _50 = &amp;(*_58)\n-11:14-11:47: @12[12]: _49 = &amp;(*_50)\n-11:14-11:47: @12[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n-11:5-11:49: @12[19]: _56 = ()\n-11:5-11:49: @12[20]: FakeRead(ForMatchedPlace, _56)\n-11:5-11:49: @12[21]: _57 = const might_overflow::promoted[0]\n-11:5-11:49: @12[22]: _54 = &amp;(*_57)\n-11:5-11:49: @12[23]: _53 = &amp;(*_54)\n-11:5-11:49: @12[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-11:5-11:49: @12.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb13, unwind: bb15]\n-11:5-11:49: @13.Call: _46 = _print(move _47) -&gt; [return: bb14, unwind: bb15]\n-11:5-11:49: @14[5]: _45 = const ()\n-12:5-12:11: @14[7]: _0 = _41\n-13:2-13:2: @14.Return: return\">    result</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @6[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n-8:18-8:30: @7[0]: _17 = move (_18.0: u32)\n-8:9-8:15: @7[1]: FakeRead(ForLet, _17)\n-9:14-9:38: @7[8]: _59 = const might_overflow::promoted[2]\n-9:14-9:38: @7[9]: _24 = &amp;(*_59)\n-9:14-9:38: @7[10]: _23 = &amp;(*_24)\n-9:14-9:38: @7[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n-9:40-9:46: @7[19]: _31 = &amp;_17\n-9:48-9:54: @7[21]: _32 = &amp;_1\n-9:5-9:56: @7[22]: _30 = (move _31, move _32)\n-9:5-9:56: @7[25]: FakeRead(ForMatchedPlace, _30)\n-9:5-9:56: @7[27]: _33 = (_30.0: &amp;u32)\n-9:5-9:56: @7[29]: _34 = (_30.1: &amp;u32)\n-9:5-9:56: @7[32]: _36 = &amp;(*_33)\n-9:5-9:56: @7[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @7.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb8, unwind: bb15]\n-9:5-9:56: @8[4]: _39 = &amp;(*_34)\n-9:5-9:56: @8[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-9:5-9:56: @8.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb9, unwind: bb15]\n-9:5-9:56: @9[2]: _29 = [move _35, move _38]\n-9:5-9:56: @9[7]: _28 = &amp;_29\n-9:5-9:56: @9[8]: _27 = &amp;(*_28)\n-9:5-9:56: @9[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:5-9:56: @9.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb10, unwind: bb15]\n-9:5-9:56: @10.Call: _20 = _print(move _21) -&gt; [return: bb11, unwind: bb15]\n-9:5-9:56: @11[6]: _19 = const ()\n-10:18-10:24: @11[10]: _42 = _1\n-10:27-10:33: @11[12]: _43 = _17\n-10:18-10:33: @11[13]: _44 = CheckedAdd(_42, _43)\n-10:18-10:33: @12[0]: _41 = move (_44.0: u32)\n-10:9-10:15: @12[3]: FakeRead(ForLet, _41)\n-11:14-11:47: @12[10]: _58 = const might_overflow::promoted[1]\n-11:14-11:47: @12[11]: _50 = &amp;(*_58)\n-11:14-11:47: @12[12]: _49 = &amp;(*_50)\n-11:14-11:47: @12[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n-11:5-11:49: @12[19]: _56 = ()\n-11:5-11:49: @12[20]: FakeRead(ForMatchedPlace, _56)\n-11:5-11:49: @12[21]: _57 = const might_overflow::promoted[0]\n-11:5-11:49: @12[22]: _54 = &amp;(*_57)\n-11:5-11:49: @12[23]: _53 = &amp;(*_54)\n-11:5-11:49: @12[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-11:5-11:49: @12.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb13, unwind: bb15]\n-11:5-11:49: @13.Call: _46 = _print(move _47) -&gt; [return: bb14, unwind: bb15]\n-11:5-11:49: @14[5]: _45 = const ()\n-12:5-12:11: @14[7]: _0 = _41\n-13:2-13:2: @14.Return: return\">}<span class=\"annotation\">\u2989@6,7,8,9,10,11,12,13,14</span></span></span></span></div>\n+5:8-5:18: @0[4]: _3 = Gt(move _4, const 5_u32)\">    if to_add &gt; 5<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:47: @1[6]: _61 = const might_overflow::promoted[4]\n+6:18-6:47: @1[7]: _10 = &amp;(*_61)\n+6:18-6:47: @1[8]: _9 = &amp;(*_10)\n+6:18-6:47: @1[9]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n+6:9-6:49: @1[15]: _16 = ()\n+6:9-6:49: @1[16]: FakeRead(ForMatchedPlace, _16)\n+6:9-6:49: @1[17]: _60 = const might_overflow::promoted[3]\n+6:9-6:49: @1[18]: _14 = &amp;(*_60)\n+6:9-6:49: @1[19]: _13 = &amp;(*_14)\n+6:9-6:49: @1[20]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+6:9-6:49: @1.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb3, unwind: bb14]\n+6:9-6:49: @3.Call: _6 = _print(move _7) -&gt; [return: bb4, unwind: bb14]\n+6:9-6:49: @4[5]: _5 = const ()\n+5:19-7:6: @4[7]: _2 = const ()\"><span class=\"annotation\">@1,3,4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:47: @1[6]: _61 = const might_overflow::promoted[4]\n+6:18-6:47: @1[7]: _10 = &amp;(*_61)\n+6:18-6:47: @1[8]: _9 = &amp;(*_10)\n+6:18-6:47: @1[9]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n+6:9-6:49: @1[15]: _16 = ()\n+6:9-6:49: @1[16]: FakeRead(ForMatchedPlace, _16)\n+6:9-6:49: @1[17]: _60 = const might_overflow::promoted[3]\n+6:9-6:49: @1[18]: _14 = &amp;(*_60)\n+6:9-6:49: @1[19]: _13 = &amp;(*_14)\n+6:9-6:49: @1[20]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+6:9-6:49: @1.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb3, unwind: bb14]\n+6:9-6:49: @3.Call: _6 = _print(move _7) -&gt; [return: bb4, unwind: bb14]\n+6:9-6:49: @4[5]: _5 = const ()\n+5:19-7:6: @4[7]: _2 = const ()\">        println!(\"this will probably overflow\");</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:47: @1[6]: _61 = const might_overflow::promoted[4]\n+6:18-6:47: @1[7]: _10 = &amp;(*_61)\n+6:18-6:47: @1[8]: _9 = &amp;(*_10)\n+6:18-6:47: @1[9]: _8 = move _9 as &amp;[&amp;str] (Pointer(Unsize))\n+6:9-6:49: @1[15]: _16 = ()\n+6:9-6:49: @1[16]: FakeRead(ForMatchedPlace, _16)\n+6:9-6:49: @1[17]: _60 = const might_overflow::promoted[3]\n+6:9-6:49: @1[18]: _14 = &amp;(*_60)\n+6:9-6:49: @1[19]: _13 = &amp;(*_14)\n+6:9-6:49: @1[20]: _12 = move _13 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+6:9-6:49: @1.Call: _7 = Arguments::new_v1(move _8, move _12) -&gt; [return: bb3, unwind: bb14]\n+6:9-6:49: @3.Call: _6 = _print(move _7) -&gt; [return: bb4, unwind: bb14]\n+6:9-6:49: @4[5]: _5 = const ()\n+5:19-7:6: @4[7]: _2 = const ()\">    }<span class=\"annotation\">\u2989@1,3,4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:6-7:6: @2[0]: _2 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @5[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n+8:18-8:30: @6[0]: _17 = move (_18.0: u32)\n+8:9-8:15: @6[1]: FakeRead(ForLet, _17)\n+9:14-9:38: @6[8]: _59 = const might_overflow::promoted[2]\n+9:14-9:38: @6[9]: _24 = &amp;(*_59)\n+9:14-9:38: @6[10]: _23 = &amp;(*_24)\n+9:14-9:38: @6[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n+9:40-9:46: @6[19]: _31 = &amp;_17\n+9:48-9:54: @6[21]: _32 = &amp;_1\n+9:5-9:56: @6[22]: _30 = (move _31, move _32)\n+9:5-9:56: @6[25]: FakeRead(ForMatchedPlace, _30)\n+9:5-9:56: @6[27]: _33 = (_30.0: &amp;u32)\n+9:5-9:56: @6[29]: _34 = (_30.1: &amp;u32)\n+9:5-9:56: @6[32]: _36 = &amp;(*_33)\n+9:5-9:56: @6[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @6.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb7, unwind: bb14]\n+9:5-9:56: @7[4]: _39 = &amp;(*_34)\n+9:5-9:56: @7[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @7.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb8, unwind: bb14]\n+9:5-9:56: @8[2]: _29 = [move _35, move _38]\n+9:5-9:56: @8[7]: _28 = &amp;_29\n+9:5-9:56: @8[8]: _27 = &amp;(*_28)\n+9:5-9:56: @8[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+9:5-9:56: @8.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb9, unwind: bb14]\n+9:5-9:56: @9.Call: _20 = _print(move _21) -&gt; [return: bb10, unwind: bb14]\n+9:5-9:56: @10[6]: _19 = const ()\n+10:18-10:24: @10[10]: _42 = _1\n+10:27-10:33: @10[12]: _43 = _17\n+10:18-10:33: @10[13]: _44 = CheckedAdd(_42, _43)\n+10:18-10:33: @11[0]: _41 = move (_44.0: u32)\n+10:9-10:15: @11[3]: FakeRead(ForLet, _41)\n+11:14-11:47: @11[10]: _58 = const might_overflow::promoted[1]\n+11:14-11:47: @11[11]: _50 = &amp;(*_58)\n+11:14-11:47: @11[12]: _49 = &amp;(*_50)\n+11:14-11:47: @11[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n+11:5-11:49: @11[19]: _56 = ()\n+11:5-11:49: @11[20]: FakeRead(ForMatchedPlace, _56)\n+11:5-11:49: @11[21]: _57 = const might_overflow::promoted[0]\n+11:5-11:49: @11[22]: _54 = &amp;(*_57)\n+11:5-11:49: @11[23]: _53 = &amp;(*_54)\n+11:5-11:49: @11[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+11:5-11:49: @11.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb12, unwind: bb14]\n+11:5-11:49: @12.Call: _46 = _print(move _47) -&gt; [return: bb13, unwind: bb14]\n+11:5-11:49: @13[5]: _45 = const ()\n+12:5-12:11: @13[7]: _0 = _41\n+13:2-13:2: @13.Return: return\"><span class=\"annotation\">@5,6,7,8,9,10,11,12,13\u298a</span>add_to = u32::MAX - 5;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @5[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n+8:18-8:30: @6[0]: _17 = move (_18.0: u32)\n+8:9-8:15: @6[1]: FakeRead(ForLet, _17)\n+9:14-9:38: @6[8]: _59 = const might_overflow::promoted[2]\n+9:14-9:38: @6[9]: _24 = &amp;(*_59)\n+9:14-9:38: @6[10]: _23 = &amp;(*_24)\n+9:14-9:38: @6[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n+9:40-9:46: @6[19]: _31 = &amp;_17\n+9:48-9:54: @6[21]: _32 = &amp;_1\n+9:5-9:56: @6[22]: _30 = (move _31, move _32)\n+9:5-9:56: @6[25]: FakeRead(ForMatchedPlace, _30)\n+9:5-9:56: @6[27]: _33 = (_30.0: &amp;u32)\n+9:5-9:56: @6[29]: _34 = (_30.1: &amp;u32)\n+9:5-9:56: @6[32]: _36 = &amp;(*_33)\n+9:5-9:56: @6[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @6.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb7, unwind: bb14]\n+9:5-9:56: @7[4]: _39 = &amp;(*_34)\n+9:5-9:56: @7[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @7.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb8, unwind: bb14]\n+9:5-9:56: @8[2]: _29 = [move _35, move _38]\n+9:5-9:56: @8[7]: _28 = &amp;_29\n+9:5-9:56: @8[8]: _27 = &amp;(*_28)\n+9:5-9:56: @8[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+9:5-9:56: @8.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb9, unwind: bb14]\n+9:5-9:56: @9.Call: _20 = _print(move _21) -&gt; [return: bb10, unwind: bb14]\n+9:5-9:56: @10[6]: _19 = const ()\n+10:18-10:24: @10[10]: _42 = _1\n+10:27-10:33: @10[12]: _43 = _17\n+10:18-10:33: @10[13]: _44 = CheckedAdd(_42, _43)\n+10:18-10:33: @11[0]: _41 = move (_44.0: u32)\n+10:9-10:15: @11[3]: FakeRead(ForLet, _41)\n+11:14-11:47: @11[10]: _58 = const might_overflow::promoted[1]\n+11:14-11:47: @11[11]: _50 = &amp;(*_58)\n+11:14-11:47: @11[12]: _49 = &amp;(*_50)\n+11:14-11:47: @11[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n+11:5-11:49: @11[19]: _56 = ()\n+11:5-11:49: @11[20]: FakeRead(ForMatchedPlace, _56)\n+11:5-11:49: @11[21]: _57 = const might_overflow::promoted[0]\n+11:5-11:49: @11[22]: _54 = &amp;(*_57)\n+11:5-11:49: @11[23]: _53 = &amp;(*_54)\n+11:5-11:49: @11[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+11:5-11:49: @11.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb12, unwind: bb14]\n+11:5-11:49: @12.Call: _46 = _print(move _47) -&gt; [return: bb13, unwind: bb14]\n+11:5-11:49: @13[5]: _45 = const ()\n+12:5-12:11: @13[7]: _0 = _41\n+13:2-13:2: @13.Return: return\">    println!(\"does {} + {} overflow?\", add_to, to_add);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @5[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n+8:18-8:30: @6[0]: _17 = move (_18.0: u32)\n+8:9-8:15: @6[1]: FakeRead(ForLet, _17)\n+9:14-9:38: @6[8]: _59 = const might_overflow::promoted[2]\n+9:14-9:38: @6[9]: _24 = &amp;(*_59)\n+9:14-9:38: @6[10]: _23 = &amp;(*_24)\n+9:14-9:38: @6[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n+9:40-9:46: @6[19]: _31 = &amp;_17\n+9:48-9:54: @6[21]: _32 = &amp;_1\n+9:5-9:56: @6[22]: _30 = (move _31, move _32)\n+9:5-9:56: @6[25]: FakeRead(ForMatchedPlace, _30)\n+9:5-9:56: @6[27]: _33 = (_30.0: &amp;u32)\n+9:5-9:56: @6[29]: _34 = (_30.1: &amp;u32)\n+9:5-9:56: @6[32]: _36 = &amp;(*_33)\n+9:5-9:56: @6[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @6.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb7, unwind: bb14]\n+9:5-9:56: @7[4]: _39 = &amp;(*_34)\n+9:5-9:56: @7[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @7.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb8, unwind: bb14]\n+9:5-9:56: @8[2]: _29 = [move _35, move _38]\n+9:5-9:56: @8[7]: _28 = &amp;_29\n+9:5-9:56: @8[8]: _27 = &amp;(*_28)\n+9:5-9:56: @8[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+9:5-9:56: @8.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb9, unwind: bb14]\n+9:5-9:56: @9.Call: _20 = _print(move _21) -&gt; [return: bb10, unwind: bb14]\n+9:5-9:56: @10[6]: _19 = const ()\n+10:18-10:24: @10[10]: _42 = _1\n+10:27-10:33: @10[12]: _43 = _17\n+10:18-10:33: @10[13]: _44 = CheckedAdd(_42, _43)\n+10:18-10:33: @11[0]: _41 = move (_44.0: u32)\n+10:9-10:15: @11[3]: FakeRead(ForLet, _41)\n+11:14-11:47: @11[10]: _58 = const might_overflow::promoted[1]\n+11:14-11:47: @11[11]: _50 = &amp;(*_58)\n+11:14-11:47: @11[12]: _49 = &amp;(*_50)\n+11:14-11:47: @11[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n+11:5-11:49: @11[19]: _56 = ()\n+11:5-11:49: @11[20]: FakeRead(ForMatchedPlace, _56)\n+11:5-11:49: @11[21]: _57 = const might_overflow::promoted[0]\n+11:5-11:49: @11[22]: _54 = &amp;(*_57)\n+11:5-11:49: @11[23]: _53 = &amp;(*_54)\n+11:5-11:49: @11[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+11:5-11:49: @11.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb12, unwind: bb14]\n+11:5-11:49: @12.Call: _46 = _print(move _47) -&gt; [return: bb13, unwind: bb14]\n+11:5-11:49: @13[5]: _45 = const ()\n+12:5-12:11: @13[7]: _0 = _41\n+13:2-13:2: @13.Return: return\">    let result = to_add + add_to;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @5[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n+8:18-8:30: @6[0]: _17 = move (_18.0: u32)\n+8:9-8:15: @6[1]: FakeRead(ForLet, _17)\n+9:14-9:38: @6[8]: _59 = const might_overflow::promoted[2]\n+9:14-9:38: @6[9]: _24 = &amp;(*_59)\n+9:14-9:38: @6[10]: _23 = &amp;(*_24)\n+9:14-9:38: @6[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n+9:40-9:46: @6[19]: _31 = &amp;_17\n+9:48-9:54: @6[21]: _32 = &amp;_1\n+9:5-9:56: @6[22]: _30 = (move _31, move _32)\n+9:5-9:56: @6[25]: FakeRead(ForMatchedPlace, _30)\n+9:5-9:56: @6[27]: _33 = (_30.0: &amp;u32)\n+9:5-9:56: @6[29]: _34 = (_30.1: &amp;u32)\n+9:5-9:56: @6[32]: _36 = &amp;(*_33)\n+9:5-9:56: @6[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @6.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb7, unwind: bb14]\n+9:5-9:56: @7[4]: _39 = &amp;(*_34)\n+9:5-9:56: @7[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @7.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb8, unwind: bb14]\n+9:5-9:56: @8[2]: _29 = [move _35, move _38]\n+9:5-9:56: @8[7]: _28 = &amp;_29\n+9:5-9:56: @8[8]: _27 = &amp;(*_28)\n+9:5-9:56: @8[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+9:5-9:56: @8.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb9, unwind: bb14]\n+9:5-9:56: @9.Call: _20 = _print(move _21) -&gt; [return: bb10, unwind: bb14]\n+9:5-9:56: @10[6]: _19 = const ()\n+10:18-10:24: @10[10]: _42 = _1\n+10:27-10:33: @10[12]: _43 = _17\n+10:18-10:33: @10[13]: _44 = CheckedAdd(_42, _43)\n+10:18-10:33: @11[0]: _41 = move (_44.0: u32)\n+10:9-10:15: @11[3]: FakeRead(ForLet, _41)\n+11:14-11:47: @11[10]: _58 = const might_overflow::promoted[1]\n+11:14-11:47: @11[11]: _50 = &amp;(*_58)\n+11:14-11:47: @11[12]: _49 = &amp;(*_50)\n+11:14-11:47: @11[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n+11:5-11:49: @11[19]: _56 = ()\n+11:5-11:49: @11[20]: FakeRead(ForMatchedPlace, _56)\n+11:5-11:49: @11[21]: _57 = const might_overflow::promoted[0]\n+11:5-11:49: @11[22]: _54 = &amp;(*_57)\n+11:5-11:49: @11[23]: _53 = &amp;(*_54)\n+11:5-11:49: @11[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+11:5-11:49: @11.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb12, unwind: bb14]\n+11:5-11:49: @12.Call: _46 = _print(move _47) -&gt; [return: bb13, unwind: bb14]\n+11:5-11:49: @13[5]: _45 = const ()\n+12:5-12:11: @13[7]: _0 = _41\n+13:2-13:2: @13.Return: return\">    println!(\"continuing after overflow check\");</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @5[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n+8:18-8:30: @6[0]: _17 = move (_18.0: u32)\n+8:9-8:15: @6[1]: FakeRead(ForLet, _17)\n+9:14-9:38: @6[8]: _59 = const might_overflow::promoted[2]\n+9:14-9:38: @6[9]: _24 = &amp;(*_59)\n+9:14-9:38: @6[10]: _23 = &amp;(*_24)\n+9:14-9:38: @6[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n+9:40-9:46: @6[19]: _31 = &amp;_17\n+9:48-9:54: @6[21]: _32 = &amp;_1\n+9:5-9:56: @6[22]: _30 = (move _31, move _32)\n+9:5-9:56: @6[25]: FakeRead(ForMatchedPlace, _30)\n+9:5-9:56: @6[27]: _33 = (_30.0: &amp;u32)\n+9:5-9:56: @6[29]: _34 = (_30.1: &amp;u32)\n+9:5-9:56: @6[32]: _36 = &amp;(*_33)\n+9:5-9:56: @6[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @6.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb7, unwind: bb14]\n+9:5-9:56: @7[4]: _39 = &amp;(*_34)\n+9:5-9:56: @7[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @7.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb8, unwind: bb14]\n+9:5-9:56: @8[2]: _29 = [move _35, move _38]\n+9:5-9:56: @8[7]: _28 = &amp;_29\n+9:5-9:56: @8[8]: _27 = &amp;(*_28)\n+9:5-9:56: @8[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+9:5-9:56: @8.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb9, unwind: bb14]\n+9:5-9:56: @9.Call: _20 = _print(move _21) -&gt; [return: bb10, unwind: bb14]\n+9:5-9:56: @10[6]: _19 = const ()\n+10:18-10:24: @10[10]: _42 = _1\n+10:27-10:33: @10[12]: _43 = _17\n+10:18-10:33: @10[13]: _44 = CheckedAdd(_42, _43)\n+10:18-10:33: @11[0]: _41 = move (_44.0: u32)\n+10:9-10:15: @11[3]: FakeRead(ForLet, _41)\n+11:14-11:47: @11[10]: _58 = const might_overflow::promoted[1]\n+11:14-11:47: @11[11]: _50 = &amp;(*_58)\n+11:14-11:47: @11[12]: _49 = &amp;(*_50)\n+11:14-11:47: @11[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n+11:5-11:49: @11[19]: _56 = ()\n+11:5-11:49: @11[20]: FakeRead(ForMatchedPlace, _56)\n+11:5-11:49: @11[21]: _57 = const might_overflow::promoted[0]\n+11:5-11:49: @11[22]: _54 = &amp;(*_57)\n+11:5-11:49: @11[23]: _53 = &amp;(*_54)\n+11:5-11:49: @11[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+11:5-11:49: @11.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb12, unwind: bb14]\n+11:5-11:49: @12.Call: _46 = _print(move _47) -&gt; [return: bb13, unwind: bb14]\n+11:5-11:49: @13[5]: _45 = const ()\n+12:5-12:11: @13[7]: _0 = _41\n+13:2-13:2: @13.Return: return\">    result</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"8:18-8:30: @5[3]: _18 = CheckedSub(const core::num::&lt;impl u32&gt;::MAX, const 5_u32)\n+8:18-8:30: @6[0]: _17 = move (_18.0: u32)\n+8:9-8:15: @6[1]: FakeRead(ForLet, _17)\n+9:14-9:38: @6[8]: _59 = const might_overflow::promoted[2]\n+9:14-9:38: @6[9]: _24 = &amp;(*_59)\n+9:14-9:38: @6[10]: _23 = &amp;(*_24)\n+9:14-9:38: @6[11]: _22 = move _23 as &amp;[&amp;str] (Pointer(Unsize))\n+9:40-9:46: @6[19]: _31 = &amp;_17\n+9:48-9:54: @6[21]: _32 = &amp;_1\n+9:5-9:56: @6[22]: _30 = (move _31, move _32)\n+9:5-9:56: @6[25]: FakeRead(ForMatchedPlace, _30)\n+9:5-9:56: @6[27]: _33 = (_30.0: &amp;u32)\n+9:5-9:56: @6[29]: _34 = (_30.1: &amp;u32)\n+9:5-9:56: @6[32]: _36 = &amp;(*_33)\n+9:5-9:56: @6[34]: _37 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @6.Call: _35 = ArgumentV1::new::&lt;u32&gt;(move _36, move _37) -&gt; [return: bb7, unwind: bb14]\n+9:5-9:56: @7[4]: _39 = &amp;(*_34)\n+9:5-9:56: @7[6]: _40 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+9:5-9:56: @7.Call: _38 = ArgumentV1::new::&lt;u32&gt;(move _39, move _40) -&gt; [return: bb8, unwind: bb14]\n+9:5-9:56: @8[2]: _29 = [move _35, move _38]\n+9:5-9:56: @8[7]: _28 = &amp;_29\n+9:5-9:56: @8[8]: _27 = &amp;(*_28)\n+9:5-9:56: @8[9]: _26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+9:5-9:56: @8.Call: _21 = Arguments::new_v1(move _22, move _26) -&gt; [return: bb9, unwind: bb14]\n+9:5-9:56: @9.Call: _20 = _print(move _21) -&gt; [return: bb10, unwind: bb14]\n+9:5-9:56: @10[6]: _19 = const ()\n+10:18-10:24: @10[10]: _42 = _1\n+10:27-10:33: @10[12]: _43 = _17\n+10:18-10:33: @10[13]: _44 = CheckedAdd(_42, _43)\n+10:18-10:33: @11[0]: _41 = move (_44.0: u32)\n+10:9-10:15: @11[3]: FakeRead(ForLet, _41)\n+11:14-11:47: @11[10]: _58 = const might_overflow::promoted[1]\n+11:14-11:47: @11[11]: _50 = &amp;(*_58)\n+11:14-11:47: @11[12]: _49 = &amp;(*_50)\n+11:14-11:47: @11[13]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\n+11:5-11:49: @11[19]: _56 = ()\n+11:5-11:49: @11[20]: FakeRead(ForMatchedPlace, _56)\n+11:5-11:49: @11[21]: _57 = const might_overflow::promoted[0]\n+11:5-11:49: @11[22]: _54 = &amp;(*_57)\n+11:5-11:49: @11[23]: _53 = &amp;(*_54)\n+11:5-11:49: @11[24]: _52 = move _53 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+11:5-11:49: @11.Call: _47 = Arguments::new_v1(move _48, move _52) -&gt; [return: bb12, unwind: bb14]\n+11:5-11:49: @12.Call: _46 = _print(move _47) -&gt; [return: bb13, unwind: bb14]\n+11:5-11:49: @13[5]: _45 = const ()\n+12:5-12:11: @13[7]: _0 = _41\n+13:2-13:2: @13.Return: return\">}<span class=\"annotation\">\u2989@5,6,7,8,9,10,11,12,13</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "5b097f118e3a8779afc97e20ed722dc0c93115c5", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.panic_unwind/panic_unwind.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.panic_unwind%2Fpanic_unwind.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.panic_unwind%2Fpanic_unwind.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.panic_unwind%2Fpanic_unwind.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -77,22 +77,20 @@\n 15:11-15:24: @2[3]: _4 = Gt(move _5, const 0_i32)\n 15:11-15:24: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>countdown &gt; 0<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"16:12-16:21: @5[3]: _8 = _1\n-16:12-16:26: @5[4]: _7 = Eq(move _8, const 1_i32)\n-16:12-16:26: @5[6]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@3,5\u298a</span>countdown == 1<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:13-17:30: @8.Call: _9 = might_panic(const true) -&gt; [return: bb9, unwind: bb17]\n-16:27-18:10: @9[1]: _6 = const ()\"><span class=\"annotation\">@6,8,9\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"17:13-17:30: @8.Call: _9 = might_panic(const true) -&gt; [return: bb9, unwind: bb17]\n-16:27-18:10: @9[1]: _6 = const ()\">            might_panic(true);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"17:13-17:30: @8.Call: _9 = might_panic(const true) -&gt; [return: bb9, unwind: bb17]\n-16:27-18:10: @9[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@6,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:19-18:28: @7[2]: _11 = _1\n-18:19-18:32: @7[3]: _10 = Lt(move _11, const 5_i32)\n-18:19-18:32: @7[5]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@7\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:13-19:31: @12.Call: _12 = might_panic(const false) -&gt; [return: bb13, unwind: bb17]\n-18:33-20:10: @13[1]: _6 = const ()\"><span class=\"annotation\">@10,12,13\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:13-19:31: @12.Call: _12 = might_panic(const false) -&gt; [return: bb13, unwind: bb17]\n-18:33-20:10: @13[1]: _6 = const ()\">            might_panic(false);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:13-19:31: @12.Call: _12 = might_panic(const false) -&gt; [return: bb13, unwind: bb17]\n-18:33-20:10: @13[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@10,12,13</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:10-20:10: @11[0]: _6 = const ()\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-21:23: @15[2]: _13 = CheckedSub(_1, const 1_i32)\n-21:9-21:23: @16[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@15,16\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@15,16</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+16:12-16:26: @5[4]: _7 = Eq(move _8, const 1_i32)\"><span class=\"annotation\">@3,5\u298a</span>countdown == 1<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:13-17:30: @6.Call: _9 = might_panic(const true) -&gt; [return: bb8, unwind: bb15]\n+16:27-18:10: @8[1]: _6 = const ()\"><span class=\"annotation\">@6,8\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"17:13-17:30: @6.Call: _9 = might_panic(const true) -&gt; [return: bb8, unwind: bb15]\n+16:27-18:10: @8[1]: _6 = const ()\">            might_panic(true);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"17:13-17:30: @6.Call: _9 = might_panic(const true) -&gt; [return: bb8, unwind: bb15]\n+16:27-18:10: @8[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:19-18:28: @7[2]: _11 = _1\n+18:19-18:32: @7[3]: _10 = Lt(move _11, const 5_i32)\"><span class=\"annotation\">@7\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:13-19:31: @9.Call: _12 = might_panic(const false) -&gt; [return: bb11, unwind: bb15]\n+18:33-20:10: @11[1]: _6 = const ()\"><span class=\"annotation\">@9,11\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:13-19:31: @9.Call: _12 = might_panic(const false) -&gt; [return: bb11, unwind: bb15]\n+18:33-20:10: @11[1]: _6 = const ()\">            might_panic(false);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:13-19:31: @9.Call: _12 = might_panic(const false) -&gt; [return: bb11, unwind: bb15]\n+18:33-20:10: @11[1]: _6 = const ()\">        }<span class=\"annotation\">\u2989@9,11</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:10-20:10: @10[0]: _6 = const ()\"><span class=\"annotation\">@10\u298a</span>\u2038<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-21:23: @13[2]: _13 = CheckedSub(_1, const 1_i32)\n+21:9-21:23: @14[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@13,14\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@13,14</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:8-23:10: @4[4]: _15 = ()\n 23:5-23:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)"}, {"sha": "86d9875b47cb574d690dee3acb680a779fe46cc5", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.panic_unwind/panic_unwind.might_panic.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 49, "deletions": 50, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.panic_unwind%2Fpanic_unwind.might_panic.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.panic_unwind%2Fpanic_unwind.might_panic.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.panic_unwind%2Fpanic_unwind.might_panic.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -70,36 +70,35 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn might_panic(should_panic: bool) <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:20: @0[1]: _2 = _1\n-5:8-5:20: @0[2]: FakeRead(ForMatchedPlace, _2)\"><span class=\"annotation\">@0\u298a</span>should_panic<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:32: @3[6]: _33 = const might_panic::promoted[3]\n-6:18-6:32: @3[7]: _9 = &amp;(*_33)\n-6:18-6:32: @3[8]: _8 = &amp;(*_9)\n-6:18-6:32: @3[9]: _7 = move _8 as &amp;[&amp;str] (Pointer(Unsize))\n-6:9-6:34: @3[15]: _15 = ()\n-6:9-6:34: @3[16]: FakeRead(ForMatchedPlace, _15)\n-6:9-6:34: @3[17]: _32 = const might_panic::promoted[2]\n-6:9-6:34: @3[18]: _13 = &amp;(*_32)\n-6:9-6:34: @3[19]: _12 = &amp;(*_13)\n-6:9-6:34: @3[20]: _11 = move _12 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-6:9-6:34: @3.Call: _6 = Arguments::new_v1(move _7, move _11) -&gt; [return: bb4, unwind: bb8]\n-6:9-6:34: @4.Call: _5 = _print(move _6) -&gt; [return: bb5, unwind: bb8]\n-6:9-6:34: @5[5]: _4 = const ()\n-7:9-7:26: @5.Call: begin_panic::&lt;&amp;str&gt;(const &quot;panics&quot;) -&gt; bb8\"><span class=\"annotation\">@1,3,4,5\u298a</span>println!(\"panicking...\");</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:32: @3[6]: _33 = const might_panic::promoted[3]\n-6:18-6:32: @3[7]: _9 = &amp;(*_33)\n-6:18-6:32: @3[8]: _8 = &amp;(*_9)\n-6:18-6:32: @3[9]: _7 = move _8 as &amp;[&amp;str] (Pointer(Unsize))\n-6:9-6:34: @3[15]: _15 = ()\n-6:9-6:34: @3[16]: FakeRead(ForMatchedPlace, _15)\n-6:9-6:34: @3[17]: _32 = const might_panic::promoted[2]\n-6:9-6:34: @3[18]: _13 = &amp;(*_32)\n-6:9-6:34: @3[19]: _12 = &amp;(*_13)\n-6:9-6:34: @3[20]: _11 = move _12 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-6:9-6:34: @3.Call: _6 = Arguments::new_v1(move _7, move _11) -&gt; [return: bb4, unwind: bb8]\n-6:9-6:34: @4.Call: _5 = _print(move _6) -&gt; [return: bb5, unwind: bb8]\n-6:9-6:34: @5[5]: _4 = const ()\n-7:9-7:26: @5.Call: begin_panic::&lt;&amp;str&gt;(const &quot;panics&quot;) -&gt; bb8\">        panic!(\"panics\");<span class=\"annotation\">\u2989@1,3,4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:20: @0[1]: _2 = _1\"><span class=\"annotation\">@0\u298a</span>should_panic<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:32: @1[6]: _33 = const might_panic::promoted[3]\n+6:18-6:32: @1[7]: _9 = &amp;(*_33)\n+6:18-6:32: @1[8]: _8 = &amp;(*_9)\n+6:18-6:32: @1[9]: _7 = move _8 as &amp;[&amp;str] (Pointer(Unsize))\n+6:9-6:34: @1[15]: _15 = ()\n+6:9-6:34: @1[16]: FakeRead(ForMatchedPlace, _15)\n+6:9-6:34: @1[17]: _32 = const might_panic::promoted[2]\n+6:9-6:34: @1[18]: _13 = &amp;(*_32)\n+6:9-6:34: @1[19]: _12 = &amp;(*_13)\n+6:9-6:34: @1[20]: _11 = move _12 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+6:9-6:34: @1.Call: _6 = Arguments::new_v1(move _7, move _11) -&gt; [return: bb3, unwind: bb7]\n+6:9-6:34: @3.Call: _5 = _print(move _6) -&gt; [return: bb4, unwind: bb7]\n+6:9-6:34: @4[5]: _4 = const ()\n+7:9-7:26: @4.Call: begin_panic::&lt;&amp;str&gt;(const &quot;panics&quot;) -&gt; bb7\"><span class=\"annotation\">@1,3,4\u298a</span>println!(\"panicking...\");</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:18-6:32: @1[6]: _33 = const might_panic::promoted[3]\n+6:18-6:32: @1[7]: _9 = &amp;(*_33)\n+6:18-6:32: @1[8]: _8 = &amp;(*_9)\n+6:18-6:32: @1[9]: _7 = move _8 as &amp;[&amp;str] (Pointer(Unsize))\n+6:9-6:34: @1[15]: _15 = ()\n+6:9-6:34: @1[16]: FakeRead(ForMatchedPlace, _15)\n+6:9-6:34: @1[17]: _32 = const might_panic::promoted[2]\n+6:9-6:34: @1[18]: _13 = &amp;(*_32)\n+6:9-6:34: @1[19]: _12 = &amp;(*_13)\n+6:9-6:34: @1[20]: _11 = move _12 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+6:9-6:34: @1.Call: _6 = Arguments::new_v1(move _7, move _11) -&gt; [return: bb3, unwind: bb7]\n+6:9-6:34: @3.Call: _5 = _print(move _6) -&gt; [return: bb4, unwind: bb7]\n+6:9-6:34: @4[5]: _4 = const ()\n+7:9-7:26: @4.Call: begin_panic::&lt;&amp;str&gt;(const &quot;panics&quot;) -&gt; bb7\">        panic!(\"panics\");<span class=\"annotation\">\u2989@1,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"9:18-9:31: @2[6]: _31 = const might_panic::promoted[1]\n 9:18-9:31: @2[7]: _23 = &amp;(*_31)\n 9:18-9:31: @2[8]: _22 = &amp;(*_23)\n@@ -110,11 +109,11 @@\n 9:9-9:33: @2[18]: _27 = &amp;(*_30)\n 9:9-9:33: @2[19]: _26 = &amp;(*_27)\n 9:9-9:33: @2[20]: _25 = move _26 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:9-9:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb6, unwind: bb8]\n-9:9-9:33: @6.Call: _19 = _print(move _20) -&gt; [return: bb7, unwind: bb8]\n-9:9-9:33: @7[5]: _18 = const ()\n-8:12-10:6: @7[7]: _0 = const ()\n-11:2-11:2: @7.Return: return\"><span class=\"annotation\">@2,6,7\u298a</span>{</span></span>\n+9:9-9:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb5, unwind: bb7]\n+9:9-9:33: @5.Call: _19 = _print(move _20) -&gt; [return: bb6, unwind: bb7]\n+9:9-9:33: @6[5]: _18 = const ()\n+8:12-10:6: @6[7]: _0 = const ()\n+11:2-11:2: @6.Return: return\"><span class=\"annotation\">@2,5,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"9:18-9:31: @2[6]: _31 = const might_panic::promoted[1]\n 9:18-9:31: @2[7]: _23 = &amp;(*_31)\n 9:18-9:31: @2[8]: _22 = &amp;(*_23)\n@@ -125,11 +124,11 @@\n 9:9-9:33: @2[18]: _27 = &amp;(*_30)\n 9:9-9:33: @2[19]: _26 = &amp;(*_27)\n 9:9-9:33: @2[20]: _25 = move _26 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:9-9:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb6, unwind: bb8]\n-9:9-9:33: @6.Call: _19 = _print(move _20) -&gt; [return: bb7, unwind: bb8]\n-9:9-9:33: @7[5]: _18 = const ()\n-8:12-10:6: @7[7]: _0 = const ()\n-11:2-11:2: @7.Return: return\">        println!(\"Don't Panic\");</span></span>\n+9:9-9:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb5, unwind: bb7]\n+9:9-9:33: @5.Call: _19 = _print(move _20) -&gt; [return: bb6, unwind: bb7]\n+9:9-9:33: @6[5]: _18 = const ()\n+8:12-10:6: @6[7]: _0 = const ()\n+11:2-11:2: @6.Return: return\">        println!(\"Don't Panic\");</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"9:18-9:31: @2[6]: _31 = const might_panic::promoted[1]\n 9:18-9:31: @2[7]: _23 = &amp;(*_31)\n 9:18-9:31: @2[8]: _22 = &amp;(*_23)\n@@ -140,11 +139,11 @@\n 9:9-9:33: @2[18]: _27 = &amp;(*_30)\n 9:9-9:33: @2[19]: _26 = &amp;(*_27)\n 9:9-9:33: @2[20]: _25 = move _26 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:9-9:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb6, unwind: bb8]\n-9:9-9:33: @6.Call: _19 = _print(move _20) -&gt; [return: bb7, unwind: bb8]\n-9:9-9:33: @7[5]: _18 = const ()\n-8:12-10:6: @7[7]: _0 = const ()\n-11:2-11:2: @7.Return: return\">    }</span></span>\n+9:9-9:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb5, unwind: bb7]\n+9:9-9:33: @5.Call: _19 = _print(move _20) -&gt; [return: bb6, unwind: bb7]\n+9:9-9:33: @6[5]: _18 = const ()\n+8:12-10:6: @6[7]: _0 = const ()\n+11:2-11:2: @6.Return: return\">    }</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"9:18-9:31: @2[6]: _31 = const might_panic::promoted[1]\n 9:18-9:31: @2[7]: _23 = &amp;(*_31)\n 9:18-9:31: @2[8]: _22 = &amp;(*_23)\n@@ -155,10 +154,10 @@\n 9:9-9:33: @2[18]: _27 = &amp;(*_30)\n 9:9-9:33: @2[19]: _26 = &amp;(*_27)\n 9:9-9:33: @2[20]: _25 = move _26 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-9:9-9:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb6, unwind: bb8]\n-9:9-9:33: @6.Call: _19 = _print(move _20) -&gt; [return: bb7, unwind: bb8]\n-9:9-9:33: @7[5]: _18 = const ()\n-8:12-10:6: @7[7]: _0 = const ()\n-11:2-11:2: @7.Return: return\">}<span class=\"annotation\">\u2989@2,6,7</span></span></span></span></div>\n+9:9-9:33: @2.Call: _20 = Arguments::new_v1(move _21, move _25) -&gt; [return: bb5, unwind: bb7]\n+9:9-9:33: @5.Call: _19 = _print(move _20) -&gt; [return: bb6, unwind: bb7]\n+9:9-9:33: @6[5]: _18 = const ()\n+8:12-10:6: @6[7]: _0 = const ()\n+11:2-11:2: @6.Return: return\">}<span class=\"annotation\">\u2989@2,5,6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "f528b698d440fc0fa08c900626fd0b7f61abc126", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.simple_loop/simple_loop.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 62, "deletions": 75, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.simple_loop%2Fsimple_loop.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.simple_loop%2Fsimple_loop.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.simple_loop%2Fsimple_loop.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,138 +69,125 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+12:9-12:16: @3[6]: _7 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+12:9-12:16: @3[6]: _7 = _1\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+12:9-12:16: @3[6]: _7 = _1\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+12:9-12:16: @3[6]: _7 = _1\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+12:9-12:16: @3[6]: _7 = _1\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+12:9-12:16: @3[6]: _7 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    let mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+12:9-12:16: @3[6]: _7 = _1\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+12:9-12:16: @3[6]: _7 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">    if</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb15]\n+12:9-12:16: @3[6]: _7 = _1\">    if</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb13]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb14]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb12]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 0_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-12:9-12:16: @3[6]: _7 = _1\n-12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\">        is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">        =</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">            10</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:6-18:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+12:9-12:16: @3[6]: _7 = _1\">        is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @4[0]: _5 = const 10_i32\n+13:5-18:6: @4[1]: _6 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @4[0]: _5 = const 10_i32\n+13:5-18:6: @4[1]: _6 = const ()\">        countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @4[0]: _5 = const 10_i32\n+13:5-18:6: @4[1]: _6 = const ()\">        =</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @4[0]: _5 = const 10_i32\n+13:5-18:6: @4[1]: _6 = const ()\">            10</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @4[0]: _5 = const 10_i32\n+13:5-18:6: @4[1]: _6 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @4[0]: _5 = const 10_i32\n+13:5-18:6: @4[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:6-18:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    loop</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n-23:13-25:14: @9[4]: _10 = Eq(move _11, const 0_i32)\n-23:13-25:14: @9[6]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@8,9\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n-23:13-25:14: @9[4]: _10 = Eq(move _11, const 0_i32)\n-23:13-25:14: @9[6]: FakeRead(ForMatchedPlace, _10)\">                ==</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n-23:13-25:14: @9[4]: _10 = Eq(move _11, const 0_i32)\n-23:13-25:14: @9[6]: FakeRead(ForMatchedPlace, _10)\">            0<span class=\"annotation\">\u2989@8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @8[3]: _11 = _5\n+23:13-25:14: @8[4]: _10 = Eq(move _11, const 0_i32)\"><span class=\"annotation\">@7,8\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @8[3]: _11 = _5\n+23:13-25:14: @8[4]: _10 = Eq(move _11, const 0_i32)\">                ==</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @8[3]: _11 = _5\n+23:13-25:14: @8[4]: _10 = Eq(move _11, const 0_i32)\">            0<span class=\"annotation\">\u2989@7,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:18: @12[0]: _0 = const ()\"><span class=\"annotation\">@10,12\u298a</span>break<span class=\"annotation\">\u2989@10,12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:18: @9[0]: _0 = const ()\"><span class=\"annotation\">@9\u298a</span>break<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:10-29:10: @11[0]: _9 = const ()\n-30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\n-30:9-32:10: @13[0]: _5 = move (_13.0: i32)\"><span class=\"annotation\">@11,13\u298a</span></span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"29:10-29:10: @11[0]: _9 = const ()\n-30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\n-30:9-32:10: @13[0]: _5 = move (_13.0: i32)\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"29:10-29:10: @11[0]: _9 = const ()\n-30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\n-30:9-32:10: @13[0]: _5 = move (_13.0: i32)\">        -=</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"29:10-29:10: @11[0]: _9 = const ()\n-30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\n-30:9-32:10: @13[0]: _5 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@11,13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:10-29:10: @10[0]: _9 = const ()\n+30:9-32:10: @10[3]: _13 = CheckedSub(_5, const 1_i32)\n+30:9-32:10: @11[0]: _5 = move (_13.0: i32)\"><span class=\"annotation\">@10,11\u298a</span></span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"29:10-29:10: @10[0]: _9 = const ()\n+30:9-32:10: @10[3]: _13 = CheckedSub(_5, const 1_i32)\n+30:9-32:10: @11[0]: _5 = move (_13.0: i32)\">        countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"29:10-29:10: @10[0]: _9 = const ()\n+30:9-32:10: @10[3]: _13 = CheckedSub(_5, const 1_i32)\n+30:9-32:10: @11[0]: _5 = move (_13.0: i32)\">        -=</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"29:10-29:10: @10[0]: _9 = const ()\n+30:9-32:10: @10[3]: _13 = CheckedSub(_5, const 1_i32)\n+30:9-32:10: @11[0]: _5 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:2-35:2: @12.Return: return\"><span class=\"annotation\">@10,12\u298a</span>\u2038<span class=\"annotation\">\u2989@10,12</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:2-35:2: @9.Return: return\"><span class=\"annotation\">@9\u298a</span>\u2038<span class=\"annotation\">\u2989@9</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "8e49e45b86e11c1a92669ce0f7aec832e1ca1e09", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.simple_match/simple_match.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 95, "deletions": 103, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.simple_match%2Fsimple_match.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.simple_match%2Fsimple_match.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.simple_match%2Fsimple_match.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,162 +69,154 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb22]\n+<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb21]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb21]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb20]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 1_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb22]\n+10:8-10:15: @3[6]: _7 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb21]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb21]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb20]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 1_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb22]\n+10:8-10:15: @3[6]: _7 = _1\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb21]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb21]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb20]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 1_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb22]\n+10:8-10:15: @3[6]: _7 = _1\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb21]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb21]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb20]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 1_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb22]\n+10:8-10:15: @3[6]: _7 = _1\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb21]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb21]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb20]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 1_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb22]\n+10:8-10:15: @3[6]: _7 = _1\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb21]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb21]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb20]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 1_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb22]\n+10:8-10:15: @3[6]: _7 = _1\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb21]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb21]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb20]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 1_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    let mut countdown = 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb22]\n+10:8-10:15: @3[6]: _7 = _1\">    let mut countdown = 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb21]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb21]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb20]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:25-9:26: @3[2]: _5 = const 1_i32\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\n-10:8-10:15: @3[6]: _7 = _1\n-10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @6[0]: _5 = const 0_i32\n-10:16-12:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @6[0]: _5 = const 0_i32\n-10:16-12:6: @6[1]: _6 = const ()\">        countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @6[0]: _5 = const 0_i32\n-10:16-12:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+10:8-10:15: @3[6]: _7 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @4[0]: _5 = const 0_i32\n+10:16-12:6: @4[1]: _6 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @4[0]: _5 = const 0_i32\n+10:16-12:6: @4[1]: _6 = const ()\">        countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @4[0]: _5 = const 0_i32\n+10:16-12:6: @4[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    for</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:9-15:10: @15[1]: _18 = ((_14 as Some).0: i32)\n-15:9-15:10: @15[3]: _19 = _18\n-15:9-15:10: @15[4]: _12 = move _19\n-15:9-15:10: @15[5]: _13 = const ()\"><span class=\"annotation\">@13,15,17\u298a</span>_<span class=\"annotation\">\u2989@13,15,17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:9-15:10: @14[1]: _18 = ((_14 as Some).0: i32)\n+15:9-15:10: @14[3]: _19 = _18\n+15:9-15:10: @14[4]: _12 = move _19\n+15:9-15:10: @14[5]: _13 = const ()\"><span class=\"annotation\">@12,14,16\u298a</span>_<span class=\"annotation\">\u2989@12,14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    in</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:13: @10[5]: _16 = &amp;mut _10\n-17:9-17:13: @10[6]: _15 = &amp;mut (*_16)\n-17:9-17:13: @10.Call: _14 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _15) -&gt; [return: bb11, unwind: bb22]\n-17:9-17:13: @11[1]: FakeRead(ForMatchedPlace, _14)\"><span class=\"annotation\">@9,10,11\u298a</span>0..2<span class=\"annotation\">\u2989@9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:13: @9[5]: _16 = &amp;mut _10\n+17:9-17:13: @9[6]: _15 = &amp;mut (*_16)\n+17:9-17:13: @9.Call: _14 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _15) -&gt; [return: bb10, unwind: bb21]\n+17:9-17:13: @10[1]: FakeRead(ForMatchedPlace, _14)\"><span class=\"annotation\">@8,9,10\u298a</span>0..2<span class=\"annotation\">\u2989@8,9,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let z</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        match</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\"><span class=\"annotation\">@13,15,17\u298a</span>countdown<span class=\"annotation\">\u2989@13,15,17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:13-22:22: @14[13]: FakeRead(ForMatchedPlace, _5)\"><span class=\"annotation\">@12,14,16\u298a</span>countdown<span class=\"annotation\">\u2989@12,14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:13-24:14: @18[3]: _23 = _5\"><span class=\"annotation\">@18\u298a</span>x<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:13-24:14: @17[3]: _23 = _5\"><span class=\"annotation\">@17\u298a</span>x<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\"><span class=\"annotation\">@13,15,17\u298a</span>x</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                    &lt;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                1<span class=\"annotation\">\u2989@13,15,17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @16[4]: _26 = (*_24)\n+26:17-28:18: @16[5]: _25 = Lt(move _26, const 1_i32)\"><span class=\"annotation\">@12,14,16\u298a</span>x</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @16[4]: _26 = (*_24)\n+26:17-28:18: @16[5]: _25 = Lt(move _26, const 1_i32)\">                    &lt;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @16[4]: _26 = (*_24)\n+26:17-28:18: @16[5]: _25 = Lt(move _26, const 1_i32)\">                1<span class=\"annotation\">\u2989@12,14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            =&gt;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n-31:17-31:30: @18[6]: _22 = move _27\n-33:25-33:34: @18[9]: _28 = _5\n-33:21-33:22: @18[10]: FakeRead(ForLet, _28)\n-35:17-35:31: @18[11]: _5 = const 10_i32\n-30:13-37:14: @18[12]: _21 = const ()\"><span class=\"annotation\">@18\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n-31:17-31:30: @18[6]: _22 = move _27\n-33:25-33:34: @18[9]: _28 = _5\n-33:21-33:22: @18[10]: FakeRead(ForLet, _28)\n-35:17-35:31: @18[11]: _5 = const 10_i32\n-30:13-37:14: @18[12]: _21 = const ()\">                z = countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n-31:17-31:30: @18[6]: _22 = move _27\n-33:25-33:34: @18[9]: _28 = _5\n-33:21-33:22: @18[10]: FakeRead(ForLet, _28)\n-35:17-35:31: @18[11]: _5 = const 10_i32\n-30:13-37:14: @18[12]: _21 = const ()\">                ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n-31:17-31:30: @18[6]: _22 = move _27\n-33:25-33:34: @18[9]: _28 = _5\n-33:21-33:22: @18[10]: FakeRead(ForLet, _28)\n-35:17-35:31: @18[11]: _5 = const 10_i32\n-30:13-37:14: @18[12]: _21 = const ()\">                let y = countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n-31:17-31:30: @18[6]: _22 = move _27\n-33:25-33:34: @18[9]: _28 = _5\n-33:21-33:22: @18[10]: FakeRead(ForLet, _28)\n-35:17-35:31: @18[11]: _5 = const 10_i32\n-30:13-37:14: @18[12]: _21 = const ()\">                ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n-31:17-31:30: @18[6]: _22 = move _27\n-33:25-33:34: @18[9]: _28 = _5\n-33:21-33:22: @18[10]: FakeRead(ForLet, _28)\n-35:17-35:31: @18[11]: _5 = const 10_i32\n-30:13-37:14: @18[12]: _21 = const ()\">                countdown = 10</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n-31:17-31:30: @18[6]: _22 = move _27\n-33:25-33:34: @18[9]: _28 = _5\n-33:21-33:22: @18[10]: FakeRead(ForLet, _28)\n-35:17-35:31: @18[11]: _5 = const 10_i32\n-30:13-37:14: @18[12]: _21 = const ()\">                ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n-31:17-31:30: @18[6]: _22 = move _27\n-33:25-33:34: @18[9]: _28 = _5\n-33:21-33:22: @18[10]: FakeRead(ForLet, _28)\n-35:17-35:31: @18[11]: _5 = const 10_i32\n-30:13-37:14: @18[12]: _21 = const ()\">            }<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @17[5]: _27 = _5\n+31:17-31:30: @17[6]: _22 = move _27\n+33:25-33:34: @17[9]: _28 = _5\n+33:21-33:22: @17[10]: FakeRead(ForLet, _28)\n+35:17-35:31: @17[11]: _5 = const 10_i32\n+30:13-37:14: @17[12]: _21 = const ()\"><span class=\"annotation\">@17\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @17[5]: _27 = _5\n+31:17-31:30: @17[6]: _22 = move _27\n+33:25-33:34: @17[9]: _28 = _5\n+33:21-33:22: @17[10]: FakeRead(ForLet, _28)\n+35:17-35:31: @17[11]: _5 = const 10_i32\n+30:13-37:14: @17[12]: _21 = const ()\">                z = countdown</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @17[5]: _27 = _5\n+31:17-31:30: @17[6]: _22 = move _27\n+33:25-33:34: @17[9]: _28 = _5\n+33:21-33:22: @17[10]: FakeRead(ForLet, _28)\n+35:17-35:31: @17[11]: _5 = const 10_i32\n+30:13-37:14: @17[12]: _21 = const ()\">                ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @17[5]: _27 = _5\n+31:17-31:30: @17[6]: _22 = move _27\n+33:25-33:34: @17[9]: _28 = _5\n+33:21-33:22: @17[10]: FakeRead(ForLet, _28)\n+35:17-35:31: @17[11]: _5 = const 10_i32\n+30:13-37:14: @17[12]: _21 = const ()\">                let y = countdown</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @17[5]: _27 = _5\n+31:17-31:30: @17[6]: _22 = move _27\n+33:25-33:34: @17[9]: _28 = _5\n+33:21-33:22: @17[10]: FakeRead(ForLet, _28)\n+35:17-35:31: @17[11]: _5 = const 10_i32\n+30:13-37:14: @17[12]: _21 = const ()\">                ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @17[5]: _27 = _5\n+31:17-31:30: @17[6]: _22 = move _27\n+33:25-33:34: @17[9]: _28 = _5\n+33:21-33:22: @17[10]: FakeRead(ForLet, _28)\n+35:17-35:31: @17[11]: _5 = const 10_i32\n+30:13-37:14: @17[12]: _21 = const ()\">                countdown = 10</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @17[5]: _27 = _5\n+31:17-31:30: @17[6]: _22 = move _27\n+33:25-33:34: @17[9]: _28 = _5\n+33:21-33:22: @17[10]: FakeRead(ForLet, _28)\n+35:17-35:31: @17[11]: _5 = const 10_i32\n+30:13-37:14: @17[12]: _21 = const ()\">                ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:21-31:30: @17[5]: _27 = _5\n+31:17-31:30: @17[6]: _22 = move _27\n+33:25-33:34: @17[9]: _28 = _5\n+33:21-33:22: @17[10]: FakeRead(ForLet, _28)\n+35:17-35:31: @17[11]: _5 = const 10_i32\n+30:13-37:14: @17[12]: _21 = const ()\">            }<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            _</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            =&gt;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"40:13-40:15: @16[0]: _21 = const ()\"><span class=\"annotation\">@16\u298a</span>{}<span class=\"annotation\">\u2989@16</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"40:13-40:15: @15[0]: _21 = const ()\"><span class=\"annotation\">@15\u298a</span>{}<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:2-43:2: @12.Return: return\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:2-43:2: @11.Return: return\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "8cbd265c6a01c88e17cb0c131ab2243d15d735b2", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.tight_inf_loop/tight_inf_loop.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.tight_inf_loop%2Ftight_inf_loop.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.tight_inf_loop%2Ftight_inf_loop.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.tight_inf_loop%2Ftight_inf_loop.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,12 +69,10 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:8-2:13: @0[1]: _1 = const false\n-2:8-2:13: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"2:8-2:13: @0[1]: _1 = const false\n-2:8-2:13: @0[2]: FakeRead(ForMatchedPlace, _1)\">    if false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:9-3:16: @4.FalseUnwind: falseUnwind -&gt; [real: bb5, cleanup: bb6]\n-3:14-3:16: @5[0]: _3 = const ()\"><span class=\"annotation\">@4,5\u298a</span>loop {}<span class=\"annotation\">\u2989@4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:8-2:13: @0[1]: _1 = const false\"><span class=\"annotation\">@0\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"2:8-2:13: @0[1]: _1 = const false\">    if false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:9-3:16: @3.FalseUnwind: falseUnwind -&gt; [real: bb4, cleanup: bb5]\n+3:14-3:16: @4[0]: _3 = const ()\"><span class=\"annotation\">@3,4\u298a</span>loop {}<span class=\"annotation\">\u2989@3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:6-4:6: @2[0]: _0 = const ()\n 5:2-5:2: @2.Return: return\"><span class=\"annotation\">@2\u298a</span></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"4:6-4:6: @2[0]: _0 = const ()"}, {"sha": "a8a3139334c962a34423e86c0f9923c9e9370843", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.try_error_result/try_error_result.call.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,16 +69,14 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:20: @0[1]: _2 = _1\n-5:8-5:20: @0[2]: FakeRead(ForMatchedPlace, _2)\"><span class=\"annotation\">@0\u298a</span>fn call(return_error: bool) -&gt; Result&lt;(),()&gt; {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:20: @0[1]: _2 = _1\n-5:8-5:20: @0[2]: FakeRead(ForMatchedPlace, _2)\">    if return_error<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:13-6:15: @3[1]: _3 = ()\n-6:9-6:16: @3[2]: _0 = std::result::Result::&lt;(), ()&gt;::Err(move _3)\"><span class=\"annotation\">@1,3\u298a</span>Err(())<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:20: @0[1]: _2 = _1\"><span class=\"annotation\">@0\u298a</span>fn call(return_error: bool) -&gt; Result&lt;(),()&gt; {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:20: @0[1]: _2 = _1\">    if return_error<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:13-6:15: @1[1]: _3 = ()\n+6:9-6:16: @1[2]: _0 = std::result::Result::&lt;(), ()&gt;::Err(move _3)\"><span class=\"annotation\">@1\u298a</span>Err(())<span class=\"annotation\">\u2989@1</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:12-8:14: @2[1]: _4 = ()\n 8:9-8:15: @2[2]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _4)\"><span class=\"annotation\">@2\u298a</span>Ok(())<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:2-10:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:2-10:2: @3.Return: return\"><span class=\"annotation\">@3\u298a</span>\u2038<span class=\"annotation\">\u2989@3</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "41404759c3da7775ba9300f99b538dab4574d661", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.try_error_result/try_error_result.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -84,51 +84,46 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    in</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:9-19:14: @3[5]: _11 = &amp;mut _5\n 19:9-19:14: @3[6]: _10 = &amp;mut (*_11)\n-19:9-19:14: @3.Call: _9 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _10) -&gt; [return: bb4, unwind: bb40]\n+19:9-19:14: @3.Call: _9 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _10) -&gt; [return: bb4, unwind: bb39]\n 19:9-19:14: @4[1]: FakeRead(ForMatchedPlace, _9)\"><span class=\"annotation\">@2,3,4\u298a</span>0..10<span class=\"annotation\">\u2989@2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @8[12]: _17 = CheckedSub(_1, const 1_i32)\n 21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n 25:13-25:22: @9[3]: _19 = _1\n-25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n-25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\"><span class=\"annotation\">@6,8,9\u298a</span>countdown</span></span>\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\"><span class=\"annotation\">@6,8,9\u298a</span>countdown</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @8[12]: _17 = CheckedSub(_1, const 1_i32)\n 21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n 25:13-25:22: @9[3]: _19 = _1\n-25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n-25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">            -= 1</span></span>\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\">            -= 1</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @8[12]: _17 = CheckedSub(_1, const 1_i32)\n 21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n 25:13-25:22: @9[3]: _19 = _1\n-25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n-25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">        ;</span></span>\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\">        ;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @8[12]: _17 = CheckedSub(_1, const 1_i32)\n 21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n 25:13-25:22: @9[3]: _19 = _1\n-25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n-25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">        if</span></span>\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\">        if</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @8[12]: _17 = CheckedSub(_1, const 1_i32)\n 21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n 25:13-25:22: @9[3]: _19 = _1\n-25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n-25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">            countdown &lt; 5<span class=\"annotation\">\u2989@6,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\">            countdown &lt; 5<span class=\"annotation\">\u2989@6,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:41: @12.Call: _22 = call(const true) -&gt; [return: bb13, unwind: bb40]\"><span class=\"annotation\">@10,12,13,14\u298a</span>call(/*return_error=*/ true)<span class=\"annotation\">\u2989@10,12,13,14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:41-27:42: @18[1]: _24 = ((_21 as Err).0: ())\n-27:41-27:42: @18[4]: _27 = _24\n-27:41-27:42: @18.Call: _26 = &lt;() as From&lt;()&gt;&gt;::from(move _27) -&gt; [return: bb19, unwind: bb40]\"><span class=\"annotation\">@16,18,19,20\u298a</span>?<span class=\"annotation\">\u2989@16,18,19,20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:13-28:42: @15.Call: _31 = call(const false) -&gt; [return: bb21, unwind: bb40]\"><span class=\"annotation\">@15,21,22\u298a</span>call(/*return_error=*/ false)<span class=\"annotation\">\u2989@15,21,22</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:42-28:43: @26[1]: _33 = ((_30 as Err).0: ())\n-28:42-28:43: @26[4]: _36 = _33\n-28:42-28:43: @26.Call: _35 = &lt;() as From&lt;()&gt;&gt;::from(move _36) -&gt; [return: bb27, unwind: bb40]\"><span class=\"annotation\">@24,26,27,28\u298a</span>?<span class=\"annotation\">\u2989@24,26,27,28</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:41: @10.Call: _22 = call(const true) -&gt; [return: bb12, unwind: bb39]\"><span class=\"annotation\">@10,12,13\u298a</span>call(/*return_error=*/ true)<span class=\"annotation\">\u2989@10,12,13</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:41-27:42: @17[1]: _24 = ((_21 as Err).0: ())\n+27:41-27:42: @17[4]: _27 = _24\n+27:41-27:42: @17.Call: _26 = &lt;() as From&lt;()&gt;&gt;::from(move _27) -&gt; [return: bb18, unwind: bb39]\"><span class=\"annotation\">@15,17,18,19\u298a</span>?<span class=\"annotation\">\u2989@15,17,18,19</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:13-28:42: @14.Call: _31 = call(const false) -&gt; [return: bb20, unwind: bb39]\"><span class=\"annotation\">@14,20,21\u298a</span>call(/*return_error=*/ false)<span class=\"annotation\">\u2989@14,20,21</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:42-28:43: @25[1]: _33 = ((_30 as Err).0: ())\n+28:42-28:43: @25[4]: _36 = _33\n+28:42-28:43: @25.Call: _35 = &lt;() as From&lt;()&gt;&gt;::from(move _36) -&gt; [return: bb26, unwind: bb39]\"><span class=\"annotation\">@23,25,26,27\u298a</span>?<span class=\"annotation\">\u2989@23,25,26,27</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        else</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:42: @11.Call: _40 = call(const false) -&gt; [return: bb29, unwind: bb40]\"><span class=\"annotation\">@11,29,30\u298a</span>call(/*return_error=*/ false)<span class=\"annotation\">\u2989@11,29,30</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:42-32:43: @34[1]: _42 = ((_39 as Err).0: ())\n-32:42-32:43: @34[4]: _45 = _42\n-32:42-32:43: @34.Call: _44 = &lt;() as From&lt;()&gt;&gt;::from(move _45) -&gt; [return: bb35, unwind: bb40]\"><span class=\"annotation\">@32,34,35,36\u298a</span>?<span class=\"annotation\">\u2989@32,34,35,36</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:42: @11.Call: _40 = call(const false) -&gt; [return: bb28, unwind: bb39]\"><span class=\"annotation\">@11,28,29\u298a</span>call(/*return_error=*/ false)<span class=\"annotation\">\u2989@11,28,29</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:42-32:43: @33[1]: _42 = ((_39 as Err).0: ())\n+32:42-32:43: @33[4]: _45 = _42\n+32:42-32:43: @33.Call: _44 = &lt;() as From&lt;()&gt;&gt;::from(move _45) -&gt; [return: bb34, unwind: bb39]\"><span class=\"annotation\">@31,33,34,35\u298a</span>?<span class=\"annotation\">\u2989@31,33,34,35</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:8-35:10: @5[9]: _47 = ()\n 35:5-35:11: @5[10]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _47)\"><span class=\"annotation\">@5\u298a</span>Ok(())<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @38.Return: return\"><span class=\"annotation\">@38\u298a</span>\u2038<span class=\"annotation\">\u2989@38</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "4af7b17986622977c3dc2064b9288ea3a0b6a84e", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.unused_function.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_function.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,51 +69,47 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 36\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+<div class=\"code\" style=\"counter-reset: line 36\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 38:19-38:35: @1[0]: _3 = &amp;_4\n-38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 38:19-38:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 38:9-38:16: @2[3]: FakeRead(ForLet, _1)\n 39:25-39:26: @3[2]: _5 = const 2_i32\n 39:9-39:22: @3[3]: FakeRead(ForLet, _5)\n 40:9-40:16: @3[6]: _7 = _1\n-40:8-40:16: @3[7]: _6 = Not(move _7)\n-40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn unused_function() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+40:8-40:16: @3[7]: _6 = Not(move _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn unused_function() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 38:19-38:35: @1[0]: _3 = &amp;_4\n-38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 38:19-38:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 38:9-38:16: @2[3]: FakeRead(ForLet, _1)\n 39:25-39:26: @3[2]: _5 = const 2_i32\n 39:9-39:22: @3[3]: FakeRead(ForLet, _5)\n 40:9-40:16: @3[6]: _7 = _1\n-40:8-40:16: @3[7]: _6 = Not(move _7)\n-40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+40:8-40:16: @3[7]: _6 = Not(move _7)\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 38:19-38:35: @1[0]: _3 = &amp;_4\n-38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 38:19-38:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 38:9-38:16: @2[3]: FakeRead(ForLet, _1)\n 39:25-39:26: @3[2]: _5 = const 2_i32\n 39:9-39:22: @3[3]: FakeRead(ForLet, _5)\n 40:9-40:16: @3[6]: _7 = _1\n-40:8-40:16: @3[7]: _6 = Not(move _7)\n-40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let mut countdown = 2;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+40:8-40:16: @3[7]: _6 = Not(move _7)\">    let mut countdown = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 38:19-38:35: @1[0]: _3 = &amp;_4\n-38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 38:19-38:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 38:9-38:16: @2[3]: FakeRead(ForLet, _1)\n 39:25-39:26: @3[2]: _5 = const 2_i32\n 39:9-39:22: @3[3]: FakeRead(ForLet, _5)\n 40:9-40:16: @3[6]: _7 = _1\n-40:8-40:16: @3[7]: _6 = Not(move _7)\n-40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"41:9-41:23: @6[0]: _5 = const 20_i32\n-40:17-42:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"41:9-41:23: @6[0]: _5 = const 20_i32\n-40:17-42:6: @6[1]: _0 = const ()\">        countdown = 20;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"41:9-41:23: @6[0]: _5 = const 20_i32\n-40:17-42:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"42:6-42:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:2-43:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+40:8-40:16: @3[7]: _6 = Not(move _7)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"41:9-41:23: @4[0]: _5 = const 20_i32\n+40:17-42:6: @4[1]: _0 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"41:9-41:23: @4[0]: _5 = const 20_i32\n+40:17-42:6: @4[1]: _0 = const ()\">        countdown = 20;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"41:9-41:23: @4[0]: _5 = const 20_i32\n+40:17-42:6: @4[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"42:6-42:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:2-43:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "6424e03fc71139e8b3a1e8f0092bfca249da6610", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.unused_private_function.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_private_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_private_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_private_function.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -69,51 +69,47 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 44\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+<div class=\"code\" style=\"counter-reset: line 44\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 46:19-46:35: @1[0]: _3 = &amp;_4\n-46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 46:19-46:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 46:9-46:16: @2[3]: FakeRead(ForLet, _1)\n 47:25-47:26: @3[2]: _5 = const 2_i32\n 47:9-47:22: @3[3]: FakeRead(ForLet, _5)\n 48:9-48:16: @3[6]: _7 = _1\n-48:8-48:16: @3[7]: _6 = Not(move _7)\n-48:8-48:16: @3[9]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn unused_private_function() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+48:8-48:16: @3[7]: _6 = Not(move _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn unused_private_function() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 46:19-46:35: @1[0]: _3 = &amp;_4\n-46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 46:19-46:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 46:9-46:16: @2[3]: FakeRead(ForLet, _1)\n 47:25-47:26: @3[2]: _5 = const 2_i32\n 47:9-47:22: @3[3]: FakeRead(ForLet, _5)\n 48:9-48:16: @3[6]: _7 = _1\n-48:8-48:16: @3[7]: _6 = Not(move _7)\n-48:8-48:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+48:8-48:16: @3[7]: _6 = Not(move _7)\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 46:19-46:35: @1[0]: _3 = &amp;_4\n-46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 46:19-46:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 46:9-46:16: @2[3]: FakeRead(ForLet, _1)\n 47:25-47:26: @3[2]: _5 = const 2_i32\n 47:9-47:22: @3[3]: FakeRead(ForLet, _5)\n 48:9-48:16: @3[6]: _7 = _1\n-48:8-48:16: @3[7]: _6 = Not(move _7)\n-48:8-48:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let mut countdown = 2;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+48:8-48:16: @3[7]: _6 = Not(move _7)\">    let mut countdown = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb8]\n 46:19-46:35: @1[0]: _3 = &amp;_4\n-46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n 46:19-46:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 46:9-46:16: @2[3]: FakeRead(ForLet, _1)\n 47:25-47:26: @3[2]: _5 = const 2_i32\n 47:9-47:22: @3[3]: FakeRead(ForLet, _5)\n 48:9-48:16: @3[6]: _7 = _1\n-48:8-48:16: @3[7]: _6 = Not(move _7)\n-48:8-48:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"49:9-49:23: @6[0]: _5 = const 20_i32\n-48:17-50:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:9-49:23: @6[0]: _5 = const 20_i32\n-48:17-50:6: @6[1]: _0 = const ()\">        countdown = 20;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:9-49:23: @6[0]: _5 = const 20_i32\n-48:17-50:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"50:6-50:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"51:2-51:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+48:8-48:16: @3[7]: _6 = Not(move _7)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"49:9-49:23: @4[0]: _5 = const 20_i32\n+48:17-50:6: @4[1]: _0 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:9-49:23: @4[0]: _5 = const 20_i32\n+48:17-50:6: @4[1]: _0 = const ()\">        countdown = 20;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:9-49:23: @4[0]: _5 = const 20_i32\n+48:17-50:6: @4[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"50:6-50:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"51:2-51:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "d35f191b64e8550be126cebae3a09ca68e61f668", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_function.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_function.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -73,41 +73,38 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"9:19-9:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb10]\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"9:19-9:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n 9:19-9:35: @1[0]: _3 = &amp;_4\n-9:19-9:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb9]\n+9:19-9:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n 9:19-9:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 9:9-9:16: @2[3]: FakeRead(ForLet, _1)\n 10:25-10:26: @3[2]: _5 = const 0_i32\n 10:9-10:22: @3[3]: FakeRead(ForLet, _5)\n-11:8-11:15: @3[6]: _7 = _1\n-11:8-11:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"9:19-9:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb10]\n+11:8-11:15: @3[6]: _7 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"9:19-9:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n 9:19-9:35: @1[0]: _3 = &amp;_4\n-9:19-9:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb9]\n+9:19-9:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n 9:19-9:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 9:9-9:16: @2[3]: FakeRead(ForLet, _1)\n 10:25-10:26: @3[2]: _5 = const 0_i32\n 10:9-10:22: @3[3]: FakeRead(ForLet, _5)\n-11:8-11:15: @3[6]: _7 = _1\n-11:8-11:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    let mut countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"9:19-9:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb10]\n+11:8-11:15: @3[6]: _7 = _1\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"9:19-9:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n 9:19-9:35: @1[0]: _3 = &amp;_4\n-9:19-9:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb9]\n+9:19-9:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n 9:19-9:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 9:9-9:16: @2[3]: FakeRead(ForLet, _1)\n 10:25-10:26: @3[2]: _5 = const 0_i32\n 10:9-10:22: @3[3]: FakeRead(ForLet, _5)\n-11:8-11:15: @3[6]: _7 = _1\n-11:8-11:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @6[0]: _5 = const 10_i32\n-11:16-13:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @6[0]: _5 = const 10_i32\n-11:16-13:6: @6[1]: _6 = const ()\">        countdown = 10;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @6[0]: _5 = const 10_i32\n-11:16-13:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:6-13:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:25: @7.Call: _8 = use_this_lib_crate() -&gt; [return: bb8, unwind: bb10]\n-15:2-15:2: @8.Return: return\"><span class=\"annotation\">@7,8\u298a</span>use_this_lib_crate();</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:25: @7.Call: _8 = use_this_lib_crate() -&gt; [return: bb8, unwind: bb10]\n-15:2-15:2: @8.Return: return\">}<span class=\"annotation\">\u2989@7,8</span></span></span></span></div>\n+11:8-11:15: @3[6]: _7 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @4[0]: _5 = const 10_i32\n+11:16-13:6: @4[1]: _6 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @4[0]: _5 = const 10_i32\n+11:16-13:6: @4[1]: _6 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @4[0]: _5 = const 10_i32\n+11:16-13:6: @4[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:6-13:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:25: @6.Call: _8 = use_this_lib_crate() -&gt; [return: bb7, unwind: bb9]\n+15:2-15:2: @7.Return: return\"><span class=\"annotation\">@6,7\u298a</span>use_this_lib_crate();</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:25: @6.Call: _8 = use_this_lib_crate() -&gt; [return: bb7, unwind: bb9]\n+15:2-15:2: @7.Return: return\">}<span class=\"annotation\">\u2989@6,7</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "fcb5418e1d0cfee7c62cfd57442482778ec59cbb", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.while_early_ret/while_early_ret.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -86,51 +86,45 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:13-12:22: @5[3]: _8 = _1\n-12:13-14:14: @5[4]: _7 = Lt(move _8, const 5_i32)\n-12:13-14:14: @5[6]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@3,5\u298a</span>countdown</span></span>\n+12:13-14:14: @5[4]: _7 = Lt(move _8, const 5_i32)\"><span class=\"annotation\">@3,5\u298a</span>countdown</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"12:13-12:22: @5[3]: _8 = _1\n-12:13-14:14: @5[4]: _7 = Lt(move _8, const 5_i32)\n-12:13-14:14: @5[6]: FakeRead(ForMatchedPlace, _7)\">                &lt;</span></span>\n+12:13-14:14: @5[4]: _7 = Lt(move _8, const 5_i32)\">                &lt;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"12:13-12:22: @5[3]: _8 = _1\n-12:13-14:14: @5[4]: _7 = Lt(move _8, const 5_i32)\n-12:13-14:14: @5[6]: FakeRead(ForMatchedPlace, _7)\">            5<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+12:13-14:14: @5[4]: _7 = Lt(move _8, const 5_i32)\">            5<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            return</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"18:21-18:30: @8[2]: _11 = _1\n-18:21-20:22: @8[3]: _10 = Gt(move _11, const 8_i32)\n-18:21-20:22: @8[5]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@6,8\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:21-18:30: @8[2]: _11 = _1\n-18:21-20:22: @8[3]: _10 = Gt(move _11, const 8_i32)\n-18:21-20:22: @8[5]: FakeRead(ForMatchedPlace, _10)\">                        &gt;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:21-18:30: @8[2]: _11 = _1\n-18:21-20:22: @8[3]: _10 = Gt(move _11, const 8_i32)\n-18:21-20:22: @8[5]: FakeRead(ForMatchedPlace, _10)\">                    8<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"18:21-18:30: @6[2]: _11 = _1\n+18:21-20:22: @6[3]: _10 = Gt(move _11, const 8_i32)\"><span class=\"annotation\">@6\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:21-18:30: @6[2]: _11 = _1\n+18:21-20:22: @6[3]: _10 = Gt(move _11, const 8_i32)\">                        &gt;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:21-18:30: @6[2]: _11 = _1\n+18:21-20:22: @6[3]: _10 = Gt(move _11, const 8_i32)\">                    8<span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:24-22:26: @11[1]: _12 = ()\n-22:21-22:27: @11[2]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _12)\"><span class=\"annotation\">@9,11\u298a</span>Ok(())<span class=\"annotation\">\u2989@9,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:24-22:26: @8[1]: _12 = ()\n+22:21-22:27: @8[2]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _12)\"><span class=\"annotation\">@8\u298a</span>Ok(())<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                else</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:21-26:27: @10[0]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@10\u298a</span>Err(1)<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:21-26:27: @9[0]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@9\u298a</span>Err(1)<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:10-29:10: @7[0]: _6 = const ()\n 30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\n-30:9-32:10: @12[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@7,12\u298a</span></span></span>\n+30:9-32:10: @11[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@7,11\u298a</span></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"29:10-29:10: @7[0]: _6 = const ()\n 30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\n-30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">        countdown</span></span>\n+30:9-32:10: @11[0]: _1 = move (_13.0: i32)\">        countdown</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"29:10-29:10: @7[0]: _6 = const ()\n 30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\n-30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">            -=</span></span>\n+30:9-32:10: @11[0]: _1 = move (_13.0: i32)\">            -=</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"29:10-29:10: @7[0]: _6 = const ()\n 30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\n-30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@7,12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+30:9-32:10: @11[0]: _1 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@7,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:8-35:10: @4[4]: _15 = ()\n 35:5-35:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\"><span class=\"annotation\">@4\u298a</span>Ok(())<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @12.Return: return\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "fc49cc6d68ea02b673f36d1d8332bf1a409abe0d", "filename": "src/test/ui/issues/issue-14091.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -3,6 +3,8 @@ error[E0308]: mismatched types\n    |\n LL |     assert!(1,1);\n    |     ^^^^^^^^^^^^^ expected `bool`, found integer\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c646912d3b67950583d857964329692d36846745", "filename": "src/test/ui/lifetimes/lifetime-errors/liveness-assign-imm-local-notes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -28,16 +28,16 @@ LL |     let x;\n ...\n LL |             x = 1;\n    |             ^^^^^ cannot assign twice to immutable variable\n-LL |         } else {\n-LL |             x = 2;\n-   |             ----- first assignment to `x`\n \n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/liveness-assign-imm-local-notes.rs:32:13\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n ...\n+LL |             x = 1;\n+   |             ----- first assignment to `x`\n+LL |         } else {\n LL |             x = 2;\n    |             ^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "aa431f0596cca9c12ac22d5a7f35d173a64e445c", "filename": "src/tools/clippy/clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,8 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::utils::{is_direct_expn_of, is_expn_of, match_panic_call, snippet_opt, span_lint_and_help};\n use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n-use rustc_hir::{Expr, ExprKind, PatKind, UnOp};\n+use rustc_hir::{Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -102,31 +101,22 @@ enum AssertKind {\n /// Check if the expression matches\n ///\n /// ```rust,ignore\n-/// match { let _t = !c; _t } {\n-///     true => {\n-///         {\n-///             ::std::rt::begin_panic(message, _)\n-///         }\n-///     }\n-///     _ => { }\n-/// };\n+/// if !c {\n+///   {\n+///     ::std::rt::begin_panic(message, _)\n+///   }\n+/// }\n /// ```\n ///\n /// where `message` is any expression and `c` is a constant bool.\n fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<AssertKind> {\n     if_chain! {\n-        if let ExprKind::Match(ref expr, ref arms, _) = expr.kind;\n-        // matches { let _t = expr; _t }\n-        if let ExprKind::DropTemps(ref expr) = expr.kind;\n-        if let ExprKind::Unary(UnOp::UnNot, ref expr) = expr.kind;\n+        if let ExprKind::If(ref cond, ref then, _) = expr.kind;\n+        if let ExprKind::Unary(UnOp::UnNot, ref expr) = cond.kind;\n         // bind the first argument of the `assert!` macro\n         if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.typeck_results(), expr);\n-        // arm 1 pattern\n-        if let PatKind::Lit(ref lit_expr) = arms[0].pat.kind;\n-        if let ExprKind::Lit(ref lit) = lit_expr.kind;\n-        if let LitKind::Bool(true) = lit.node;\n-        // arm 1 block\n-        if let ExprKind::Block(ref block, _) = arms[0].body.kind;\n+        // block\n+        if let ExprKind::Block(ref block, _) = then.kind;\n         if block.stmts.is_empty();\n         if let Some(block_expr) = &block.expr;\n         // inner block is optional. unwrap it if it exists, or use the expression as is otherwise."}, {"sha": "4efca10bcdf13d650cdff8067231ae3f8f32d4f5", "filename": "src/tools/clippy/clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{differing_macro_contexts, higher, snippet_block_with_applicability, span_lint, span_lint_and_sugg};\n+use crate::utils::{differing_macro_contexts, snippet_block_with_applicability, span_lint, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{BlockCheckMode, Expr, ExprKind};\n@@ -75,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for BlocksInIfConditions {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n-        if let Some((cond, _, _)) = higher::if_block(&expr) {\n+        if let ExprKind::If(cond, _, _) = &expr.kind {\n             if let ExprKind::Block(block, _) = &cond.kind {\n                 if block.rules == BlockCheckMode::DefaultBlock {\n                     if block.stmts.is_empty() {"}, {"sha": "b3ebdf4ca30d8d21119c6559b51f9782456d2bc2", "filename": "src/tools/clippy/clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -147,6 +147,9 @@ impl<'tcx> Visitor<'tcx> for CCHelper {\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         walk_expr(self, e);\n         match e.kind {\n+            ExprKind::If(_, _, _) => {\n+                self.cc += 1;\n+            },\n             ExprKind::Match(_, ref arms, _) => {\n                 if arms.len() > 1 {\n                     self.cc += 1;"}, {"sha": "166eadf86c177f49aa221145bcfaf4ba6c5342c3", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,6 +1,6 @@\n #![allow(clippy::float_cmp)]\n \n-use crate::utils::{clip, higher, sext, unsext};\n+use crate::utils::{clip, sext, unsext};\n use if_chain::if_chain;\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_data_structures::sync::Lrc;\n@@ -228,9 +228,6 @@ pub struct ConstEvalLateContext<'a, 'tcx> {\n impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     /// Simple constant folding: Insert an expression, get a constant or none.\n     pub fn expr(&mut self, e: &Expr<'_>) -> Option<Constant> {\n-        if let Some((ref cond, ref then, otherwise)) = higher::if_block(&e) {\n-            return self.ifthenelse(cond, then, otherwise);\n-        }\n         match e.kind {\n             ExprKind::Path(ref qpath) => self.fetch_path(qpath, e.hir_id, self.typeck_results.expr_ty(e)),\n             ExprKind::Block(ref block, _) => self.block(block),\n@@ -249,6 +246,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 UnOp::UnNeg => self.constant_negate(&o, self.typeck_results.expr_ty(e)),\n                 UnOp::UnDeref => Some(if let Constant::Ref(r) = o { *r } else { o }),\n             }),\n+            ExprKind::If(ref cond, ref then, ref otherwise) => self.ifthenelse(cond, then, *otherwise),\n             ExprKind::Binary(op, ref left, ref right) => self.binop(op, left, right),\n             ExprKind::Call(ref callee, ref args) => {\n                 // We only handle a few const functions for now."}, {"sha": "6f48ffeb0e9c9255190cfd19e41335a1f07b789f", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{eq_expr_value, in_macro, search_same, SpanlessEq, SpanlessHash};\n-use crate::utils::{get_parent_expr, higher, if_sequence, span_lint_and_note};\n-use rustc_hir::{Block, Expr};\n+use crate::utils::{get_parent_expr, if_sequence, span_lint_and_note};\n+use rustc_hir::{Block, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -109,11 +109,12 @@ impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if !expr.span.from_expansion() {\n             // skip ifs directly in else, it will be checked in the parent if\n-            if let Some(expr) = get_parent_expr(cx, expr) {\n-                if let Some((_, _, Some(ref else_expr))) = higher::if_block(&expr) {\n-                    if else_expr.hir_id == expr.hir_id {\n-                        return;\n-                    }\n+            if let Some(&Expr {\n+                kind: ExprKind::If(_, _, Some(ref else_expr)),\n+                ..\n+            }) = get_parent_expr(cx, expr) {\n+                if else_expr.hir_id == expr.hir_id {\n+                    return;\n                 }\n             }\n "}, {"sha": "37948e06869c3bfc4100d814663dd00c823dc37f", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, higher, is_type_diagnostic_item, match_type, paths, snippet, snippet_opt};\n+use crate::utils::{get_item_name, is_type_diagnostic_item, match_type, paths, snippet, snippet_opt};\n use crate::utils::{snippet_with_applicability, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -54,7 +54,7 @@ declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n \n impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let Some((ref check, ref then_block, ref else_block)) = higher::if_block(&expr) {\n+        if let ExprKind::If(ref check, ref then_block, ref else_block) = expr.kind {\n             if let ExprKind::Unary(UnOp::UnNot, ref check) = check.kind {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {\n                     // in case of `if !m.contains_key(&k) { m.insert(k, v); }`"}, {"sha": "ffef78aac806770f6108d9f5c17c17359aab1855", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -2,7 +2,7 @@ use crate::consts::{\n     constant, constant_simple, Constant,\n     Constant::{Int, F32, F64},\n };\n-use crate::utils::{eq_expr_value, get_parent_expr, higher, numeric_literal, span_lint_and_sugg, sugg};\n+use crate::utils::{eq_expr_value, get_parent_expr, numeric_literal, span_lint_and_sugg, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, UnOp};\n@@ -556,11 +556,11 @@ fn are_negated<'a>(cx: &LateContext<'_>, expr1: &'a Expr<'a>, expr2: &'a Expr<'a\n \n fn check_custom_abs(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if_chain! {\n-        if let Some((cond, body, Some(else_body))) = higher::if_block(&expr);\n+        if let ExprKind::If(cond, body, else_body) = expr.kind;\n         if let ExprKind::Block(block, _) = body.kind;\n         if block.stmts.is_empty();\n         if let Some(if_body_expr) = block.expr;\n-        if let ExprKind::Block(else_block, _) = else_body.kind;\n+        if let Some(ExprKind::Block(else_block, _)) = else_body.map(|el| &el.kind);\n         if else_block.stmts.is_empty();\n         if let Some(else_body_expr) = else_block.expr;\n         if let Some((if_expr_positive, body)) = are_negated(cx, if_body_expr, else_body_expr);"}, {"sha": "109d90ff772b57b8172761cb06c353283304fdf0", "filename": "src/tools/clippy/clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -81,6 +81,13 @@ fn expr_match(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 lint(cx, expr.span, break_expr.span, LINT_BREAK);\n             }\n         },\n+        ExprKind::If(.., if_expr, else_expr) => {\n+            expr_match(cx, if_expr);\n+\n+            if let Some(else_expr) = else_expr {\n+                expr_match(cx, else_expr);\n+            }\n+        },\n         ExprKind::Match(.., arms, source) => {\n             let check_all_arms = match source {\n                 MatchSource::IfLetDesugar {"}, {"sha": "16e162badb5ee64a0172a3e23810490e13e2624b", "filename": "src/tools/clippy/clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{higher, in_macro, match_qpath, span_lint_and_sugg, SpanlessEq};\n+use crate::utils::{in_macro, match_qpath, span_lint_and_sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -42,7 +42,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n             return;\n         }\n         if_chain! {\n-            if let Some((ref cond, ref then, None)) = higher::if_block(&expr);\n+            if let ExprKind::If(cond, then, None) = &expr.kind;\n \n             // Check if the conditional expression is a binary operation\n             if let ExprKind::Binary(ref cond_op, ref cond_left, ref cond_right) = cond.kind;"}, {"sha": "db717cd1240a41b38a9f1d871595f3561b02c2b0", "filename": "src/tools/clippy/clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,5 +1,4 @@\n-use crate::utils::visitors::LocalUsedVisitor;\n-use crate::utils::{higher, qpath_res, snippet, span_lint_and_then};\n+use crate::utils::{qpath_res, snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -64,7 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                 if let hir::StmtKind::Local(ref local) = stmt.kind;\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(ref if_) = expr.kind;\n-                if let Some((ref cond, ref then, ref else_)) = higher::if_block(&if_);\n+                if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.kind;\n                 if !LocalUsedVisitor::new(canonical_id).check_expr(cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.kind;\n                 if let Some(value) = check_assign(cx, canonical_id, &*then);"}, {"sha": "281964ee5e8f3bb4a01d61303934f9421a4f25d0", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -742,6 +742,14 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             // Break can come from the inner loop so remove them.\n             absorb_break(&never_loop_block(b, main_loop_id))\n         },\n+        ExprKind::If(ref e, ref e2, ref e3) => {\n+            let e1 = never_loop_expr(e, main_loop_id);\n+            let e2 = never_loop_expr(e2, main_loop_id);\n+            let e3 = e3\n+                .as_ref()\n+                .map_or(NeverLoopResult::Otherwise, |e| never_loop_expr(e, main_loop_id));\n+            combine_seq(e1, combine_branches(e2, e3))\n+        },\n         ExprKind::Match(ref e, ref arms, _) => {\n             let e = never_loop_expr(e, main_loop_id);\n             if arms.is_empty() {\n@@ -2594,7 +2602,7 @@ fn is_loop(expr: &Expr<'_>) -> bool {\n }\n \n fn is_conditional(expr: &Expr<'_>) -> bool {\n-    matches!(expr.kind, ExprKind::Match(..))\n+    matches!(expr.kind, ExprKind::If(..) | ExprKind::Match(..))\n }\n \n fn is_nested(cx: &LateContext<'_>, match_expr: &Expr<'_>, iter_expr: &Expr<'_>) -> bool {"}, {"sha": "a0cfe145a301cb68649f8ab1f8bf23d35296d4aa", "filename": "src/tools/clippy/clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n         }\n \n         if_chain! {\n-            if let Some((cond, then, _)) = higher::if_block(&expr);\n+            if let ExprKind::If(cond, then, _) = &expr.kind;\n             if let ExprKind::MethodCall(_, _, [target_arg, pattern], _) = cond.kind;\n             if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(cond.hir_id);\n             if let ExprKind::Path(target_path) = &target_arg.kind;"}, {"sha": "6e8102790a5942ba2a4a61078b421aef07f0f006", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -2048,6 +2048,7 @@ fn lint_expect_fun_call(\n             hir::ExprKind::Call(..)\n             | hir::ExprKind::MethodCall(..)\n             // These variants are debatable or require further examination\n+            | hir::ExprKind::If(..)\n             | hir::ExprKind::Match(..)\n             | hir::ExprKind::Block{ .. } => true,\n             _ => false,"}, {"sha": "d98e6160d308561d2b1f115c1ce5e5372e3ba27f", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -90,6 +90,12 @@ fn check_expression<'tcx>(cx: &LateContext<'tcx>, arg_id: hir::HirId, expr: &'tc\n             }\n             (found_mapping, found_filtering)\n         },\n+        // There must be an else_arm or there will be a type error\n+        hir::ExprKind::If(_, ref if_arm, Some(ref else_arm)) => {\n+            let if_check = check_expression(cx, arg_id, if_arm);\n+            let else_check = check_expression(cx, arg_id, else_arm);\n+            (if_check.0 | else_check.0, if_check.1 | else_check.1)\n+        },\n         hir::ExprKind::Path(path) if match_qpath(path, &paths::OPTION_NONE) => (false, true),\n         _ => (true, true),\n     }"}, {"sha": "71f91eb4bfbe39bc8e648819f84c1c052315fee8", "filename": "src/tools/clippy/clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -90,6 +90,10 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n                 self.found = true;\n                 return;\n             },\n+            ExprKind::If(..) => {\n+                self.found = true;\n+                return;\n+            },\n             ExprKind::Path(_) => {\n                 if let Some(adj) = self.cx.typeck_results().adjustments().get(expr.hir_id) {\n                     if adj"}, {"sha": "6b9a37b525201b203f16a665f1e15b9df5294b25", "filename": "src/tools/clippy/clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -4,7 +4,7 @@\n \n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    higher, is_expn_of, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg,\n+    is_expn_of, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg,\n };\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -71,7 +71,7 @@ declare_lint_pass!(NeedlessBool => [NEEDLESS_BOOL]);\n impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use self::Expression::{Bool, RetBool};\n-        if let Some((ref pred, ref then_block, Some(ref else_expr))) = higher::if_block(&e) {\n+        if let ExprKind::If(ref pred, ref then_block, Some(ref else_expr)) = e.kind {\n             let reduce = |ret, not| {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let snip = Sugg::hir_with_applicability(cx, pred, \"<predicate>\", &mut applicability);"}, {"sha": "391f893ef35ff404bdded2704183df5ccfe38646", "filename": "src/tools/clippy/clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -109,25 +109,26 @@ fn extract_body_from_arm<'a>(arm: &'a Arm<'a>) -> Option<&'a Expr<'a>> {\n /// it in curly braces. Otherwise, we don't.\n fn should_wrap_in_braces(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     utils::get_enclosing_block(cx, expr.hir_id).map_or(false, |parent| {\n+        let mut should_wrap = false;\n+        \n         if let Some(Expr {\n             kind:\n                 ExprKind::Match(\n                     _,\n                     arms,\n-                    MatchSource::IfDesugar {\n-                        contains_else_clause: true,\n-                    }\n-                    | MatchSource::IfLetDesugar {\n+                    MatchSource::IfLetDesugar {\n                         contains_else_clause: true,\n                     },\n                 ),\n             ..\n         }) = parent.expr\n         {\n-            expr.hir_id == arms[1].body.hir_id\n-        } else {\n-            false\n+            should_wrap = expr.hir_id == arms[1].body.hir_id;\n+        } else if let Some(Expr { kind: ExprKind::If(_, _, Some(else_clause)), .. }) = parent.expr {\n+            should_wrap = expr.hir_id == else_clause.hir_id;\n         }\n+\n+        should_wrap\n     })\n }\n "}, {"sha": "6c480d48c7561245a0ab0150e49edcf1a5803f1b", "filename": "src/tools/clippy/clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -8,7 +8,7 @@ use rustc_span::sym;\n \n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    eq_expr_value, higher, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet_with_applicability,\n+    eq_expr_value, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet_with_applicability,\n     span_lint_and_sugg,\n };\n \n@@ -50,7 +50,7 @@ impl QuestionMark {\n     /// If it matches, it will suggest to use the question mark operator instead\n     fn check_is_none_and_early_return_none(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let Some((if_expr, body, else_)) = higher::if_block(&expr);\n+            if let ExprKind::If(if_expr, body, else_) = &expr.kind;\n             if let ExprKind::MethodCall(segment, _, args, _) = &if_expr.kind;\n             if segment.ident.name == sym!(is_none);\n             if Self::expression_returns_none(cx, body);"}, {"sha": "35827e027aab81615fbb21fe3c7e178828bc1708", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -184,6 +184,14 @@ fn check_final_expr<'tcx>(\n         ExprKind::Block(ref block, _) => {\n             check_block_return(cx, block);\n         },\n+        ExprKind::If(_, then, else_clause_opt) => {\n+            if let ExprKind::Block(ref ifblock, _) = then.kind {\n+                check_block_return(cx, ifblock);\n+            }\n+            if let Some(else_clause) = else_clause_opt {\n+                check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n+            }\n+        },\n         // a match expr, check all arms\n         // an if/if let expr, check both exprs\n         // note, if without else is going to be a type checking error anyways\n@@ -194,9 +202,6 @@ fn check_final_expr<'tcx>(\n                     check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Block);\n                 }\n             },\n-            MatchSource::IfDesugar {\n-                contains_else_clause: true,\n-            }\n             | MatchSource::IfLetDesugar {\n                 contains_else_clause: true,\n             } => {"}, {"sha": "f2f3dfa09a7d4099440e6788e1358c8a0f647f5e", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -333,6 +333,13 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n                 check_expr(cx, e, bindings)\n             }\n         },\n+        ExprKind::If(ref cond, ref then, ref otherwise) => {\n+            check_expr(cx, cond, bindings);\n+            check_expr(cx, &**then, bindings);\n+            if let Some(ref o) = *otherwise {\n+                check_expr(cx, o, bindings);\n+            }\n+        },\n         ExprKind::Match(ref init, arms, _) => {\n             check_expr(cx, init, bindings);\n             let len = bindings.len();"}, {"sha": "6a87f534369803dcc60d37bb78066fb4ea8a1d17", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    differing_macro_contexts, higher::if_block, is_type_diagnostic_item, span_lint_and_then,\n+    differing_macro_contexts, is_type_diagnostic_item, span_lint_and_then,\n     usage::is_potentially_mutated,\n };\n use if_chain::if_chain;\n@@ -158,7 +158,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n         if in_external_macro(self.cx.tcx.sess, expr.span) {\n             return;\n         }\n-        if let Some((cond, then, els)) = if_block(&expr) {\n+        if let ExprKind::If(cond, then, els) = &expr.kind {\n             walk_expr(self, cond);\n             self.visit_branch(cond, then, false);\n             if let Some(els) = els {"}, {"sha": "43afa65de3e5518a1bf9c701c1dddf224d7f8775", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,7 +1,7 @@\n //! A group of attributes that can be attached to Rust code in order\n //! to generate a clippy lint detecting said code automatically.\n \n-use crate::utils::{get_attr, higher};\n+use crate::utils::get_attr;\n use rustc_ast::ast::{Attribute, LitFloatType, LitKind};\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashMap;\n@@ -201,32 +201,6 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n \n     #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &Expr<'_>) {\n-        // handle if desugarings\n-        // TODO add more desugarings here\n-        if let Some((cond, then, opt_else)) = higher::if_block(&expr) {\n-            let cond_pat = self.next(\"cond\");\n-            let then_pat = self.next(\"then\");\n-            if let Some(else_) = opt_else {\n-                let else_pat = self.next(\"else_\");\n-                println!(\n-                    \"    if let Some((ref {}, ref {}, Some({}))) = higher::if_block(&{});\",\n-                    cond_pat, then_pat, else_pat, self.current\n-                );\n-                self.current = else_pat;\n-                self.visit_expr(else_);\n-            } else {\n-                println!(\n-                    \"    if let Some((ref {}, ref {}, None)) = higher::if_block(&{});\",\n-                    cond_pat, then_pat, self.current\n-                );\n-            }\n-            self.current = cond_pat;\n-            self.visit_expr(cond);\n-            self.current = then_pat;\n-            self.visit_expr(then);\n-            return;\n-        }\n-\n         print!(\"    if let ExprKind::\");\n         let current = format!(\"{}.kind\", self.current);\n         match expr.kind {\n@@ -351,6 +325,25 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = body_pat;\n                 self.visit_block(body);\n             },\n+            ExprKind::If(ref cond, ref then, ref opt_else) => {\n+                let cond_pat = self.next(\"cond\");\n+                let then_pat = self.next(\"then\");\n+                if let Some(ref else_) = *opt_else {\n+                    let else_pat = self.next(\"else_\");\n+                    println!(\n+                        \"If(ref {}, ref {}, Some(ref {})) = {};\",\n+                        cond_pat, then_pat, else_pat, current\n+                    );\n+                    self.current = else_pat;\n+                    self.visit_expr(else_);\n+                } else {\n+                    println!(\"If(ref {}, ref {}, None) = {};\", cond_pat, then_pat, current);\n+                }\n+                self.current = cond_pat;\n+                self.visit_expr(cond);\n+                self.current = then_pat;\n+                self.visit_expr(then);\n+            },\n             ExprKind::Match(ref expr, ref arms, desugaring) => {\n                 let des = desugaring_name(desugaring);\n                 let expr_pat = self.next(\"expr\");\n@@ -743,10 +736,6 @@ fn desugaring_name(des: hir::MatchSource) -> String {\n             contains_else_clause\n         ),\n         hir::MatchSource::IfLetGuardDesugar => \"MatchSource::IfLetGuardDesugar\".to_string(),\n-        hir::MatchSource::IfDesugar { contains_else_clause } => format!(\n-            \"MatchSource::IfDesugar {{ contains_else_clause: {} }}\",\n-            contains_else_clause\n-        ),\n         hir::MatchSource::AwaitDesugar => \"MatchSource::AwaitDesugar\".to_string(),\n     }\n }"}, {"sha": "2f157c5030f4466be1ba2cd83068702e95f85210", "filename": "src/tools/clippy/clippy_lints/src/utils/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -62,6 +62,7 @@ fn identify_some_pure_patterns(expr: &Expr<'_>) -> bool {\n         | ExprKind::Type(..)\n         | ExprKind::DropTemps(..)\n         | ExprKind::Loop(..)\n+        | ExprKind::If(..)\n         | ExprKind::Match(..)\n         | ExprKind::Closure(..)\n         | ExprKind::Block(..)"}, {"sha": "9b3585865da3236c0c7523a2a1058131b5b21542", "filename": "src/tools/clippy/clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -170,33 +170,6 @@ pub fn while_loop<'tcx>(expr: &'tcx hir::Expr<'tcx>) -> Option<(&'tcx hir::Expr<\n     None\n }\n \n-/// Recover the essential nodes of a desugared if block\n-/// `if cond { then } else { els }` becomes `(cond, then, Some(els))`\n-pub fn if_block<'tcx>(\n-    expr: &'tcx hir::Expr<'tcx>,\n-) -> Option<(\n-    &'tcx hir::Expr<'tcx>,\n-    &'tcx hir::Expr<'tcx>,\n-    Option<&'tcx hir::Expr<'tcx>>,\n-)> {\n-    if let hir::ExprKind::Match(ref cond, ref arms, hir::MatchSource::IfDesugar { contains_else_clause }) = expr.kind {\n-        let cond = if let hir::ExprKind::DropTemps(ref cond) = cond.kind {\n-            cond\n-        } else {\n-            panic!(\"If block desugar must contain DropTemps\");\n-        };\n-        let then = &arms[0].body;\n-        let els = if contains_else_clause {\n-            Some(&*arms[1].body)\n-        } else {\n-            None\n-        };\n-        Some((cond, then, els))\n-    } else {\n-        None\n-    }\n-}\n-\n /// Represent the pre-expansion arguments of a `vec!` invocation.\n pub enum VecArgs<'a> {\n     /// `vec![elem; len]`\n@@ -267,12 +240,11 @@ pub fn extract_assert_macro_args<'tcx>(e: &'tcx Expr<'tcx>) -> Option<Vec<&'tcx\n \n     if let ExprKind::Block(ref block, _) = e.kind {\n         if block.stmts.len() == 1 {\n-            if let StmtKind::Semi(ref matchexpr) = block.stmts[0].kind {\n+            if let StmtKind::Semi(ref matchexpr) = block.stmts.get(0)?.kind {\n                 // macros with unique arg: `{debug_}assert!` (e.g., `debug_assert!(some_condition)`)\n                 if_chain! {\n-                    if let ExprKind::Match(ref ifclause, _, _) = matchexpr.kind;\n-                    if let ExprKind::DropTemps(ref droptmp) = ifclause.kind;\n-                    if let ExprKind::Unary(UnOp::UnNot, condition) = droptmp.kind;\n+                    if let ExprKind::If(ref clause, _, _)  = matchexpr.kind;\n+                    if let ExprKind::Unary(UnOp::UnNot, condition) = clause.kind;\n                     then {\n                         return Some(vec![condition]);\n                     }"}, {"sha": "062df68c0a482ff9c44a288fea3e1dfdf45832c7", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -119,6 +119,9 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             (&ExprKind::Index(ref la, ref li), &ExprKind::Index(ref ra, ref ri)) => {\n                 self.eq_expr(la, ra) && self.eq_expr(li, ri)\n             },\n+            (&ExprKind::If(ref lc, ref lt, ref le), &ExprKind::If(ref rc, ref rt, ref re)) => {\n+                self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n+            },\n             (&ExprKind::Lit(ref l), &ExprKind::Lit(ref r)) => l.node == r.node,\n             (&ExprKind::Loop(ref lb, ref ll, ref lls), &ExprKind::Loop(ref rb, ref rl, ref rls)) => {\n                 lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.as_str() == r.ident.as_str())\n@@ -564,6 +567,15 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_name(i.ident.name);\n                 }\n             },\n+            ExprKind::If(ref cond, ref then, ref else_opt) => {\n+                let c: fn(_, _, _) -> _ = ExprKind::If;\n+                c.hash(&mut self.s);\n+                self.hash_expr(cond);\n+                self.hash_expr(&**then);\n+                if let Some(ref e) = *else_opt {\n+                    self.hash_expr(e);\n+                }\n+            },\n             ExprKind::Match(ref e, arms, ref s) => {\n                 self.hash_expr(e);\n "}, {"sha": "9bec24be9e4ebc7e89da87cd09837b517733c0ce", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -213,6 +213,15 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n         hir::ExprKind::Loop(..) => {\n             println!(\"{}Loop\", ind);\n         },\n+        hir::ExprKind::If(ref cond, _, ref else_opt) => {\n+            println!(\"{}If\", ind);\n+            println!(\"{}condition:\", ind);\n+            print_expr(cx, cond, indent + 1);\n+            if let Some(ref els) = *else_opt {\n+                println!(\"{}else:\", ind);\n+                print_expr(cx, els, indent + 1);\n+            }\n+        },\n         hir::ExprKind::Match(ref cond, _, ref source) => {\n             println!(\"{}Match\", ind);\n             println!(\"{}condition:\", ind);"}, {"sha": "3e39a47f1963dd04925bd262618ce66e19354450", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1405,7 +1405,7 @@ pub fn if_sequence<'tcx>(\n     let mut conds = SmallVec::new();\n     let mut blocks: SmallVec<[&Block<'_>; 1]> = SmallVec::new();\n \n-    while let Some((ref cond, ref then_expr, ref else_expr)) = higher::if_block(&expr) {\n+    while let ExprKind::If(ref cond, ref then_expr, ref else_expr) = expr.kind {\n         conds.push(&**cond);\n         if let ExprKind::Block(ref block, _) = then_expr.kind {\n             blocks.push(block);\n@@ -1434,11 +1434,11 @@ pub fn parent_node_is_if_expr(expr: &Expr<'_>, cx: &LateContext<'_>) -> bool {\n     let map = cx.tcx.hir();\n     let parent_id = map.get_parent_node(expr.hir_id);\n     let parent_node = map.get(parent_id);\n-\n-    match parent_node {\n-        Node::Expr(e) => higher::if_block(&e).is_some(),\n-        Node::Arm(e) => higher::if_block(&e.body).is_some(),\n-        _ => false,\n+    if let Node::Expr(Expr { kind: ExprKind::If(_, _, _), .. }) = parent_node {\n+        true\n+    }\n+    else {\n+        false\n     }\n }\n "}, {"sha": "03678db575f0daceef3b58445d55d80c0172b6fd", "filename": "src/tools/clippy/clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -103,6 +103,7 @@ impl<'a> Sugg<'a> {\n         match expr.kind {\n             hir::ExprKind::AddrOf(..)\n             | hir::ExprKind::Box(..)\n+            | hir::ExprKind::If(..)\n             | hir::ExprKind::Closure(..)\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Match(..) => Sugg::MaybeParen(snippet),"}, {"sha": "b769a18802b6b8a1292d51af378cf5de8718ed51", "filename": "src/tools/clippy/clippy_lints/src/utils/visitors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fvisitors.rs?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -101,6 +101,13 @@ where\n                 }\n             } else {\n                 match expr.kind {\n+                    hir::ExprKind::If(cond, then, else_opt) => {\n+                        self.inside_stmt(true).visit_expr(cond);\n+                        self.visit_expr(then);\n+                        if let Some(el) = else_opt {\n+                            self.visit_expr(el);\n+                        }\n+                    }\n                     hir::ExprKind::Match(cond, arms, _) => {\n                         self.inside_stmt(true).visit_expr(cond);\n                         for arm in arms {"}, {"sha": "cac64a3f40b41fbd3052577107cdb6fd8cb86779", "filename": "src/tools/clippy/tests/ui/author/if.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauthor%2Fif.stdout?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -1,7 +1,7 @@\n if_chain! {\n     if let StmtKind::Local(ref local) = stmt.kind;\n     if let Some(ref init) = local.init;\n-    if let Some((ref cond, ref then, Some(else_))) = higher::if_block(&init);\n+    if let ExprKind::If(ref cond, ref then, Some(ref else_)) = init.kind;\n     if let ExprKind::Block(ref block) = else_.kind;\n     if let Some(trailing_expr) = &block.expr;\n     if block.stmts.len() == 1;"}, {"sha": "a17f043737d4e009fae59b46d62399e6c8ae3a5d", "filename": "src/tools/clippy/tests/ui/panic_in_result_fn_assertions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d03fe84169d50a4b96cdef7b2f862217ab634055/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanic_in_result_fn_assertions.stderr?ref=d03fe84169d50a4b96cdef7b2f862217ab634055", "patch": "@@ -14,7 +14,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn_assertions.rs:9:9\n    |\n LL |         assert!(x == 5, \"wrong argument\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`"}]}