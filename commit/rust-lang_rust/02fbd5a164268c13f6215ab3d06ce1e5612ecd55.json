{"sha": "02fbd5a164268c13f6215ab3d06ce1e5612ecd55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZmJkNWExNjQyNjhjMTNmNjIxNWFiM2QwNmNlMWU1NjEyZWNkNTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-02T03:59:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-02T05:22:49Z"}, "message": "rt: Remove circular_buffer", "tree": {"sha": "697363f5bf7595870f682bf424abb68454edc9c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697363f5bf7595870f682bf424abb68454edc9c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02fbd5a164268c13f6215ab3d06ce1e5612ecd55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02fbd5a164268c13f6215ab3d06ce1e5612ecd55", "html_url": "https://github.com/rust-lang/rust/commit/02fbd5a164268c13f6215ab3d06ce1e5612ecd55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02fbd5a164268c13f6215ab3d06ce1e5612ecd55/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f6516969eb3f488f360a67af4d72f17ab312975", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6516969eb3f488f360a67af4d72f17ab312975", "html_url": "https://github.com/rust-lang/rust/commit/4f6516969eb3f488f360a67af4d72f17ab312975"}], "stats": {"total": 277, "additions": 0, "deletions": 277}, "files": [{"sha": "81ccbf4b7ad1b9123e3ce96912b277ac80a0fd51", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02fbd5a164268c13f6215ab3d06ce1e5612ecd55/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/02fbd5a164268c13f6215ab3d06ce1e5612ecd55/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=02fbd5a164268c13f6215ab3d06ce1e5612ecd55", "patch": "@@ -63,7 +63,6 @@ RUNTIME_CXXS_$(1) := \\\n               rt/rust_log.cpp \\\n               rt/rust_gc_metadata.cpp \\\n               rt/rust_util.cpp \\\n-              rt/circular_buffer.cpp \\\n               rt/isaac/randport.cpp \\\n               rt/miniz.cpp \\\n               rt/rust_kernel.cpp \\"}, {"sha": "c4fd0e3d9353744c38c9ff1be123a923242dd000", "filename": "src/rt/circular_buffer.cpp", "status": "removed", "additions": 0, "deletions": 204, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/4f6516969eb3f488f360a67af4d72f17ab312975/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4f6516969eb3f488f360a67af4d72f17ab312975/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=4f6516969eb3f488f360a67af4d72f17ab312975", "patch": "@@ -1,204 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*\n- * A simple resizable circular buffer.\n- */\n-\n-#include \"circular_buffer.h\"\n-#include \"rust_globals.h\"\n-#include \"rust_kernel.h\"\n-\n-circular_buffer::circular_buffer(rust_kernel *kernel, size_t unit_sz) :\n-    kernel(kernel),\n-    unit_sz(unit_sz),\n-    _buffer_sz(initial_size()),\n-    _next(0),\n-    _unread(0),\n-    _buffer((uint8_t *)kernel->malloc(_buffer_sz, \"circular_buffer\")) {\n-\n-    assert(unit_sz && \"Unit size must be larger than zero.\");\n-\n-    KLOG(kernel, mem, \"new circular_buffer(buffer_sz=%d, unread=%d)\"\n-         \"-> circular_buffer=0x%\" PRIxPTR,\n-         _buffer_sz, _unread, this);\n-\n-    assert(_buffer && \"Failed to allocate buffer.\");\n-}\n-\n-circular_buffer::~circular_buffer() {\n-    KLOG(kernel, mem, \"~circular_buffer 0x%\" PRIxPTR, this);\n-    assert(_buffer);\n-    assert(_unread == 0 && \"didn't expect bytes in the circular buffer\");\n-\n-    kernel->free(_buffer);\n-}\n-\n-size_t\n-circular_buffer::initial_size() {\n-    assert(unit_sz > 0);\n-    return INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz;\n-}\n-\n-/**\n- * Copies the unread data from this buffer to the \"dst\" address.\n- */\n-void\n-circular_buffer::transfer(void *dst) {\n-    assert(dst);\n-    assert(_unread <= _buffer_sz);\n-\n-    uint8_t *ptr = (uint8_t *) dst;\n-\n-    // First copy from _next to either the end of the unread\n-    // items or the end of the buffer\n-    size_t head_sz;\n-    if (_next + _unread <= _buffer_sz) {\n-        head_sz = _unread;\n-    } else {\n-        head_sz = _buffer_sz - _next;\n-    }\n-    assert(_next + head_sz <= _buffer_sz);\n-    memcpy(ptr, _buffer + _next, head_sz);\n-\n-    // Then copy any other items from the beginning of the buffer\n-    assert(_unread >= head_sz);\n-    size_t tail_sz = _unread - head_sz;\n-    assert(head_sz + tail_sz <= _buffer_sz);\n-    memcpy(ptr + head_sz, _buffer, tail_sz);\n-}\n-\n-/**\n- * Copies the data at the \"src\" address into this buffer. The buffer is\n- * grown if it isn't large enough.\n- */\n-void\n-circular_buffer::enqueue(void *src) {\n-    assert(src);\n-    assert(_unread <= _buffer_sz);\n-    assert(_buffer);\n-\n-    // Grow if necessary.\n-    if (_unread == _buffer_sz) {\n-        grow();\n-    }\n-\n-    KLOG(kernel, mem, \"circular_buffer enqueue \"\n-         \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n-         _unread, _next, _buffer_sz, unit_sz);\n-\n-    assert(_unread < _buffer_sz);\n-    assert(_unread + unit_sz <= _buffer_sz);\n-\n-    // Copy data\n-    size_t dst_idx = _next + _unread;\n-    assert(dst_idx >= _buffer_sz || dst_idx + unit_sz <= _buffer_sz);\n-    if (dst_idx >= _buffer_sz) {\n-        dst_idx -= _buffer_sz;\n-\n-        assert(_next >= unit_sz);\n-        assert(dst_idx <= _next - unit_sz);\n-    }\n-\n-    assert(dst_idx + unit_sz <= _buffer_sz);\n-    memcpy(&_buffer[dst_idx], src, unit_sz);\n-    _unread += unit_sz;\n-\n-    KLOG(kernel, mem, \"circular_buffer pushed data at index: %d\", dst_idx);\n-}\n-\n-/**\n- * Copies data from this buffer to the \"dst\" address. The buffer is\n- * shrunk if possible. If the \"dst\" address is NULL, then the message\n- * is dequeued but is not copied.\n- */\n-void\n-circular_buffer::dequeue(void *dst) {\n-    assert(unit_sz > 0);\n-    assert(_unread >= unit_sz);\n-    assert(_unread <= _buffer_sz);\n-    assert(_buffer);\n-\n-    KLOG(kernel, mem,\n-             \"circular_buffer dequeue \"\n-             \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n-             _unread, _next, _buffer_sz, unit_sz);\n-\n-    assert(_next + unit_sz <= _buffer_sz);\n-    if (dst != NULL) {\n-        memcpy(dst, &_buffer[_next], unit_sz);\n-    }\n-    KLOG(kernel, mem, \"shifted data from index %d\", _next);\n-    _unread -= unit_sz;\n-    _next += unit_sz;\n-    if (_next == _buffer_sz) {\n-        _next = 0;\n-    }\n-\n-    // Shrink if possible.\n-    if (_buffer_sz > initial_size() && _unread <= _buffer_sz / 4) {\n-        shrink();\n-    }\n-}\n-\n-void\n-circular_buffer::grow() {\n-    size_t new_buffer_sz = _buffer_sz * 2;\n-    KLOG(kernel, mem, \"circular_buffer is growing to %d bytes\",\n-         new_buffer_sz);\n-    void *new_buffer = kernel->malloc(new_buffer_sz,\n-                                    \"new circular_buffer (grow)\");\n-    transfer(new_buffer);\n-    kernel->free(_buffer);\n-    _buffer = (uint8_t *)new_buffer;\n-    _next = 0;\n-    _buffer_sz = new_buffer_sz;\n-}\n-\n-void\n-circular_buffer::shrink() {\n-    size_t new_buffer_sz = _buffer_sz / 2;\n-    assert(initial_size() <= new_buffer_sz);\n-    KLOG(kernel, mem, \"circular_buffer is shrinking to %d bytes\",\n-         new_buffer_sz);\n-    void *new_buffer = kernel->malloc(new_buffer_sz,\n-                                    \"new circular_buffer (shrink)\");\n-    transfer(new_buffer);\n-    kernel->free(_buffer);\n-    _buffer = (uint8_t *)new_buffer;\n-    _next = 0;\n-    _buffer_sz = new_buffer_sz;\n-}\n-\n-uint8_t *\n-circular_buffer::peek() {\n-    return &_buffer[_next];\n-}\n-\n-bool\n-circular_buffer::is_empty() {\n-    return _unread == 0;\n-}\n-\n-size_t\n-circular_buffer::size() {\n-    return _unread;\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//"}, {"sha": "172fa5c625b73b6b5d432afc4c96bebe2d4ff5cc", "filename": "src/rt/circular_buffer.h", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4f6516969eb3f488f360a67af4d72f17ab312975/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/4f6516969eb3f488f360a67af4d72f17ab312975/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=4f6516969eb3f488f360a67af4d72f17ab312975", "patch": "@@ -1,72 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*\n- *\n- */\n-\n-#ifndef CIRCULAR_BUFFER_H\n-#define CIRCULAR_BUFFER_H\n-\n-#include \"rust_globals.h\"\n-#include \"rust_kernel.h\"\n-\n-class\n-circular_buffer : public kernel_owned<circular_buffer> {\n-    static const size_t INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS = 8;\n-\n-public:\n-    rust_kernel *kernel;\n-    // Size of the data unit in bytes.\n-    const size_t unit_sz;\n-    circular_buffer(rust_kernel *kernel, size_t unit_sz);\n-    ~circular_buffer();\n-    void transfer(void *dst);\n-    void enqueue(void *src);\n-    void dequeue(void *dst);\n-    uint8_t *peek();\n-    bool is_empty();\n-    size_t size();\n-\n-private:\n-    // private and undefined to disable copying\n-    circular_buffer(const circular_buffer& rhs);\n-    circular_buffer& operator=(const circular_buffer& rhs);\n-\n-private:\n-    size_t initial_size();\n-    void grow();\n-    void shrink();\n-\n-    // Size of the buffer in bytes.\n-    size_t _buffer_sz;\n-\n-    // Byte offset within the buffer where to read the next unit of data.\n-    size_t _next;\n-\n-    // Number of bytes that have not been read from the buffer.\n-    size_t _unread;\n-\n-    // The buffer itself.\n-    uint8_t *_buffer;\n-};\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//\n-\n-#endif /* CIRCULAR_BUFFER_H */"}]}