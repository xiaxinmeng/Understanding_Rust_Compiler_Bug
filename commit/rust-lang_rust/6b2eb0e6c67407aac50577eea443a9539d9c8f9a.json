{"sha": "6b2eb0e6c67407aac50577eea443a9539d9c8f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMmViMGU2YzY3NDA3YWFjNTA1NzdlZWE0NDNhOTUzOWQ5YzhmOWE=", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-03-07T06:07:38Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-03-07T06:07:38Z"}, "message": "Edit ructc_ast_lowering docs\n\nFixes some punctuation and formatting; also makes some small wording changes.", "tree": {"sha": "cf9b1fa802d211179a68ab5ad6a531618d883c31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf9b1fa802d211179a68ab5ad6a531618d883c31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b2eb0e6c67407aac50577eea443a9539d9c8f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2eb0e6c67407aac50577eea443a9539d9c8f9a", "html_url": "https://github.com/rust-lang/rust/commit/6b2eb0e6c67407aac50577eea443a9539d9c8f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b2eb0e6c67407aac50577eea443a9539d9c8f9a/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caca2121ffe4cb47d8ea2d9469c493995f57e0b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/caca2121ffe4cb47d8ea2d9469c493995f57e0b5", "html_url": "https://github.com/rust-lang/rust/commit/caca2121ffe4cb47d8ea2d9469c493995f57e0b5"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "756caf18ec5ebb37b856ed34ad0836fc8f64e092", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b2eb0e6c67407aac50577eea443a9539d9c8f9a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2eb0e6c67407aac50577eea443a9539d9c8f9a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=6b2eb0e6c67407aac50577eea443a9539d9c8f9a", "patch": "@@ -12,7 +12,7 @@\n //! For the simpler lowering steps, IDs and spans should be preserved. Unlike\n //! expansion we do not preserve the process of lowering in the spans, so spans\n //! should not be modified here. When creating a new node (as opposed to\n-//! 'folding' an existing one), then you create a new ID using `next_id()`.\n+//! \"folding\" an existing one), create a new ID using `next_id()`.\n //!\n //! You must ensure that IDs are unique. That means that you should only use the\n //! ID from an AST node in a single HIR node (you can assume that AST node-IDs\n@@ -26,7 +26,7 @@\n //! span and spans don't need to be kept in order, etc. Where code is preserved\n //! by lowering, it should have the same span as in the AST. Where HIR nodes are\n //! new it is probably best to give a span for the whole AST node being lowered.\n-//! All nodes should have real spans, don't use dummy spans. Tools are likely to\n+//! All nodes should have real spans; don't use dummy spans. Tools are likely to\n //! get confused if the spans from leaf AST nodes occur in multiple places\n //! in the HIR, especially for multiple identifiers.\n \n@@ -95,7 +95,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// librustc_middle is independent of the parser, we use dynamic dispatch here.\n     nt_to_tokenstream: NtToTokenstream,\n \n-    /// Used to allocate HIR nodes\n+    /// Used to allocate HIR nodes.\n     arena: &'hir Arena<'hir>,\n \n     /// The items being lowered are collected here.\n@@ -128,7 +128,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     is_in_trait_impl: bool,\n     is_in_dyn_type: bool,\n \n-    /// What to do when we encounter either an \"anonymous lifetime\n+    /// What to do when we encounter an \"anonymous lifetime\n     /// reference\". The term \"anonymous\" is meant to encompass both\n     /// `'_` lifetimes as well as fully elided cases where nothing is\n     /// written at all (e.g., `&T` or `std::cell::Ref<T>`).\n@@ -238,11 +238,13 @@ enum ImplTraitContext<'b, 'a> {\n     OtherOpaqueTy {\n         /// Set of lifetimes that this opaque type can capture, if it uses\n         /// them. This includes lifetimes bound since we entered this context.\n-        /// For example, in\n+        /// For example:\n         ///\n+        /// ```\n         /// type A<'b> = impl for<'a> Trait<'a, Out = impl Sized + 'a>;\n+        /// ```\n         ///\n-        /// the inner opaque type captures `'a` because it uses it. It doesn't\n+        /// Here the inner opaque type captures `'a` because it uses it. It doesn't\n         /// need to capture `'b` because it already inherits the lifetime\n         /// parameter from `A`.\n         // FIXME(impl_trait): but `required_region_bounds` will ICE later\n@@ -2110,7 +2112,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::FnRetTy::Return(self.arena.alloc(opaque_ty))\n     }\n \n-    /// Transforms `-> T` into `Future<Output = T>`\n+    /// Transforms `-> T` into `Future<Output = T>`.\n     fn lower_async_fn_output_type_to_future_bound(\n         &mut self,\n         output: &FnRetTy,"}]}