{"sha": "bbad2b2182120abee70d59a57495c560444e5464", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYWQyYjIxODIxMjBhYmVlNzBkNTlhNTc0OTVjNTYwNDQ0ZTU0NjQ=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "benoit.dugarreau@platform.sh", "date": "2020-11-16T14:40:33Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-02-14T22:04:41Z"}, "message": "Improve assert_eq! and assert_ne!\n\nIt should improve compile times and reduce instruction cache use by moving the\npanic formatting to a monomorphised function", "tree": {"sha": "ac68b8d3bfbf576d49d05b7899ac721da67ceb4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac68b8d3bfbf576d49d05b7899ac721da67ceb4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbad2b2182120abee70d59a57495c560444e5464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbad2b2182120abee70d59a57495c560444e5464", "html_url": "https://github.com/rust-lang/rust/commit/bbad2b2182120abee70d59a57495c560444e5464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbad2b2182120abee70d59a57495c560444e5464/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa22fe6f821ac3801d05f624b123dda25fde32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa22fe6f821ac3801d05f624b123dda25fde32c", "html_url": "https://github.com/rust-lang/rust/commit/5fa22fe6f821ac3801d05f624b123dda25fde32c"}], "stats": {"total": 118, "additions": 103, "deletions": 15}, "files": [{"sha": "cc74656a296ff25cfa211cc42843884e210e93c7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbad2b2182120abee70d59a57495c560444e5464/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad2b2182120abee70d59a57495c560444e5464/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=bbad2b2182120abee70d59a57495c560444e5464", "patch": "@@ -173,6 +173,13 @@ mod macros;\n \n #[macro_use]\n mod internal_macros;\n+#[doc(hidden)]\n+#[unstable(\n+    feature = \"macros_internals\",\n+    reason = \"macros implementation detail\",\n+    issue = \"none\"\n+)]\n+pub use macros::internals as macros_internals;\n \n #[path = \"num/shells/int_macros.rs\"]\n #[macro_use]"}, {"sha": "39ac0b41f161a520b895b94496ba0494f408e007", "filename": "library/core/src/macros/internals.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/bbad2b2182120abee70d59a57495c560444e5464/library%2Fcore%2Fsrc%2Fmacros%2Finternals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad2b2182120abee70d59a57495c560444e5464/library%2Fcore%2Fsrc%2Fmacros%2Finternals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Finternals.rs?ref=bbad2b2182120abee70d59a57495c560444e5464", "patch": "@@ -0,0 +1,85 @@\n+use crate::{fmt, panic};\n+\n+#[cold]\n+#[doc(hidden)]\n+#[unstable(feature = \"macros_internals\", reason = \"macros implementation detail\", issue = \"none\")]\n+#[track_caller]\n+pub fn assert_eq_failed<T, U>(left: &T, right: &U) -> !\n+where\n+    T: fmt::Debug + ?Sized,\n+    U: fmt::Debug + ?Sized,\n+{\n+    #[track_caller]\n+    fn inner(left: &dyn fmt::Debug, right: &dyn fmt::Debug) -> ! {\n+        panic!(\n+            r#\"assertion failed: `(left == right)`\n+left: `{:?}`,\n+right: `{:?}`\"#,\n+            left, right\n+        )\n+    }\n+    inner(&left, &right)\n+}\n+\n+#[cold]\n+#[doc(hidden)]\n+#[unstable(feature = \"macros_internals\", reason = \"macros implementation detail\", issue = \"none\")]\n+#[track_caller]\n+pub fn assert_eq_failed_args<T, U>(left: &T, right: &U, args: fmt::Arguments<'_>) -> !\n+where\n+    T: fmt::Debug + ?Sized,\n+    U: fmt::Debug + ?Sized,\n+{\n+    #[track_caller]\n+    fn inner(left: &dyn fmt::Debug, right: &dyn fmt::Debug, args: fmt::Arguments<'_>) -> ! {\n+        panic!(\n+            r#\"assertion failed: `(left == right)`\n+left: `{:?}`,\n+right: `{:?}: {}`\"#,\n+            left, right, args\n+        )\n+    }\n+    inner(&left, &right, args)\n+}\n+\n+#[cold]\n+#[doc(hidden)]\n+#[unstable(feature = \"macros_internals\", reason = \"macros implementation detail\", issue = \"none\")]\n+#[track_caller]\n+pub fn assert_ne_failed<T, U>(left: &T, right: &U) -> !\n+where\n+    T: fmt::Debug + ?Sized,\n+    U: fmt::Debug + ?Sized,\n+{\n+    #[track_caller]\n+    fn inner(left: &dyn fmt::Debug, right: &dyn fmt::Debug) -> ! {\n+        panic!(\n+            r#\"assertion failed: `(left != right)`\n+left: `{:?}`,\n+right: `{:?}`\"#,\n+            left, right\n+        )\n+    }\n+    inner(&left, &right)\n+}\n+\n+#[cold]\n+#[doc(hidden)]\n+#[unstable(feature = \"macros_internals\", reason = \"macros implementation detail\", issue = \"none\")]\n+#[track_caller]\n+pub fn assert_ne_failed_args<T, U>(left: &T, right: &U, args: fmt::Arguments<'_>) -> !\n+where\n+    T: fmt::Debug + ?Sized,\n+    U: fmt::Debug + ?Sized,\n+{\n+    #[track_caller]\n+    fn inner(left: &dyn fmt::Debug, right: &dyn fmt::Debug, args: fmt::Arguments<'_>) -> ! {\n+        panic!(\n+            r#\"assertion failed: `(left != right)`\n+left: `{:?}`,\n+right: `{:?}: {}`\"#,\n+            left, right, args\n+        )\n+    }\n+    inner(&left, &right, args)\n+}"}, {"sha": "5061ca0c50dbb6209b5e576b250b690721eb26b9", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bbad2b2182120abee70d59a57495c560444e5464/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad2b2182120abee70d59a57495c560444e5464/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=bbad2b2182120abee70d59a57495c560444e5464", "patch": "@@ -1,3 +1,7 @@\n+#[unstable(feature = \"macros_internals\", reason = \"macros implementation detail\", issue = \"none\")]\n+#[doc(hidden)]\n+pub mod internals;\n+\n #[cfg(bootstrap)]\n #[doc(include = \"panic.md\")]\n #[macro_export]\n@@ -53,6 +57,7 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable(macros_internals)]\n macro_rules! assert_eq {\n     ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n@@ -61,24 +66,19 @@ macro_rules! assert_eq {\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::panic!(r#\"assertion failed: `(left == right)`\n-  left: `{:?}`,\n- right: `{:?}`\"#, &*left_val, &*right_val)\n+                    $crate::macros_internals::assert_eq_failed(&*left_val, &*right_val);\n                 }\n             }\n         }\n     });\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n-        match (&($left), &($right)) {\n+        match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::panic!(r#\"assertion failed: `(left == right)`\n-  left: `{:?}`,\n- right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           $crate::format_args!($($arg)+))\n+                    $crate::macros_internals::assert_eq_failed_args(&*left_val, &*right_val, $crate::format_args!($($arg)+));\n                 }\n             }\n         }\n@@ -104,6 +104,7 @@ macro_rules! assert_eq {\n /// ```\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n+#[allow_internal_unstable(macros_internals)]\n macro_rules! assert_ne {\n     ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n@@ -112,9 +113,7 @@ macro_rules! assert_ne {\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::panic!(r#\"assertion failed: `(left != right)`\n-  left: `{:?}`,\n- right: `{:?}`\"#, &*left_val, &*right_val)\n+                    $crate::macros_internals::assert_eq_failed(&*left_val, &*right_val);\n                 }\n             }\n         }\n@@ -126,10 +125,7 @@ macro_rules! assert_ne {\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::panic!(r#\"assertion failed: `(left != right)`\n-  left: `{:?}`,\n- right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           $crate::format_args!($($arg)+))\n+                    $crate::macros_internals::assert_ne_failed_args(&*left_val, &*right_val, $crate::format_args!($($arg)+));\n                 }\n             }\n         }"}]}