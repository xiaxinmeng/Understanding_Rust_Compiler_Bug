{"sha": "f950edbef773c101bf1ed79fb82e3704e1fb9ebc", "node_id": "C_kwDOAAsO6NoAKGY5NTBlZGJlZjc3M2MxMDFiZjFlZDc5ZmI4MmUzNzA0ZTFmYjllYmM", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-10-30T02:35:09Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-02-05T02:47:31Z"}, "message": "Elaborate some in the documentation and respond to some review comments", "tree": {"sha": "eca62528af11fc4d5b8ae72444c4bb734c522c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca62528af11fc4d5b8ae72444c4bb734c522c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f950edbef773c101bf1ed79fb82e3704e1fb9ebc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmH95UMACgkQ4u/UMJ4R\nyKgYpRAAjquGS0kEbHks03SN/qPuA2G1t5gMGINirz+ibgFqRlMZ4DhbuVjNSPO/\nzbnf0vzWxnmMo66d+GRZYFhrN64e5oc8n1KeieuMirk4FsIiSDrZXRmAg3XdNYns\nvP0bMuFR0tUcb4vjOWX+Q7Dx9Y1qEQwte3UdDBh2A1348Ppm9tkJGpEaMEaOUUOs\nNM+wbFURZIEt3m1GPlEH6vUYGRYWxoqyXCI5Za6qSXPw0ge7OA7mFrFBV0T9q7ao\nYZ3Zw4YLUpGO1/sG0LcSiiy7fNHZV0B5ttSeiUnPL104E1wGc124qZd1fCinF2C1\n0fW738tEjMvat2n5TuUhs0L719mH76AAs/3Bi3N+lzeZnmi7J6vNQRnuKv9pQapY\nnkxFqkyOg6W8e1cTyO3Q6go3i97xXHTJe3/M91bJJ3z68ae0OgJyKKmAxTMCbGxv\nWY14T0yRApKJ9ezpMNk6EaQd5T494MmY3IF28tUYqoGM+EWw7RjW6fXA9EpMY6EV\nqUgVV7/d0y6+thTEgZMoVb+eSM7muyGBweU5NHPlyJuC2DO9qM4biXOiQ2jbx1Dg\nqwipGDDHVsY5AUpLTQDfCzyogaGag2EnNexL45xybwxTEMRXuC4ZAtNSw8zzuYXZ\nVmd78jM7y0Q9XGalvB7wCVydjAiS8iDGjdE0+BdZ5NgwlOyx3ok=\n=3uC1\n-----END PGP SIGNATURE-----", "payload": "tree eca62528af11fc4d5b8ae72444c4bb734c522c9f\nparent 06edf082c313de1424b06928457d76576302ba2f\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1635561309 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1644029251 -0800\n\nElaborate some in the documentation and respond to some review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f950edbef773c101bf1ed79fb82e3704e1fb9ebc", "html_url": "https://github.com/rust-lang/rust/commit/f950edbef773c101bf1ed79fb82e3704e1fb9ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f950edbef773c101bf1ed79fb82e3704e1fb9ebc/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06edf082c313de1424b06928457d76576302ba2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/06edf082c313de1424b06928457d76576302ba2f", "html_url": "https://github.com/rust-lang/rust/commit/06edf082c313de1424b06928457d76576302ba2f"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "5f0a8a72c02c5a0df91e0d762e0fbd1bbded460f", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950edbef773c101bf1ed79fb82e3704e1fb9ebc/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950edbef773c101bf1ed79fb82e3704e1fb9ebc/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=f950edbef773c101bf1ed79fb82e3704e1fb9ebc", "patch": "@@ -88,7 +88,6 @@ enum ErrorData<C> {\n // requires an alignment >= 4 (note that `#[repr(align)]` will not reduce the\n // alignment required by the struct, only increase it).\n #[repr(align(4))]\n-#[doc(hidden)]\n pub(crate) struct SimpleMessage {\n     kind: ErrorKind,\n     message: &'static str,"}, {"sha": "dbe6c34d5477f935ab905d5ed6b6f3bff8f36cf9", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f950edbef773c101bf1ed79fb82e3704e1fb9ebc/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950edbef773c101bf1ed79fb82e3704e1fb9ebc/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=f950edbef773c101bf1ed79fb82e3704e1fb9ebc", "patch": "@@ -2,17 +2,29 @@\n //! 64-bit pointers.\n //!\n //! (Note that `bitpacked` vs `unpacked` here has no relationship to\n-//! `#[repr(packed)]`, it just refers to attempting to use any available\n-//! bits in a more clever manner than `rustc`'s default layout algorithm would).\n+//! `#[repr(packed)]`, it just refers to attempting to use any available bits in\n+//! a more clever manner than `rustc`'s default layout algorithm would).\n //!\n-//! Conceptually, it stores the same information as the \"unpacked\" equivalent we\n-//! use on other targets: `repr_unpacked::Repr` (see repr_unpacked.rs), however\n-//! it packs it into a 64bit non-zero value.\n+//! Conceptually, it stores the same data as the \"unpacked\" equivalent we use on\n+//! other targets. Specifically, you can imagine it as an optimized following\n+//! data (which is equivalent to what's stored by `repr_unpacked::Repr`, e.g.\n+//! `super::ErrorData<Box<Custom>>`):\n+//!\n+//! ```ignore (exposition-only)\n+//! enum ErrorData {\n+//!    Os(i32),\n+//!    Simple(ErrorKind),\n+//!    SimpleMessage(&'static SimpleMessage),\n+//!    Custom(Box<Custom>),\n+//! }\n+//! ```\n+//!\n+//! However, it packs this data into a 64bit non-zero value.\n //!\n //! This optimization not only allows `io::Error` to occupy a single pointer,\n //! but improves `io::Result` as well, especially for situations like\n-//! `Result<()>` (which is now 64 bits) or `Result<u64>` (which i), which are\n-//! quite common.\n+//! `io::Result<()>` (which is now 64 bits) or `io::Result<u64>` (which is now\n+//! 128 bits), which are quite common.\n //!\n //! # Layout\n //! Tagged values are 64 bits, with the 2 least significant bits used for the"}]}