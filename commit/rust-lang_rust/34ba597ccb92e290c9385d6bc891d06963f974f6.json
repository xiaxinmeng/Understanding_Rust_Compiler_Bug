{"sha": "34ba597ccb92e290c9385d6bc891d06963f974f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YmE1OTdjY2I5MmUyOTBjOTM4NWQ2YmM4OTFkMDY5NjNmOTc0ZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-20T12:09:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-20T12:09:24Z"}, "message": "Auto merge of #5621 - flip1995:rustup, r=phansch\n\nRustup\n\n@oli-obk Do you know, how we can enforce (ui-)tests pass in rust-lang/rust for Clippy? I can open a PR for this, if you tell me what would be necessary for this.\n\nchangelog: none", "tree": {"sha": "134b4d960f681890b196b1187811b41e4d1db9bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/134b4d960f681890b196b1187811b41e4d1db9bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ba597ccb92e290c9385d6bc891d06963f974f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ba597ccb92e290c9385d6bc891d06963f974f6", "html_url": "https://github.com/rust-lang/rust/commit/34ba597ccb92e290c9385d6bc891d06963f974f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ba597ccb92e290c9385d6bc891d06963f974f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e214ea82ad0a751563acf67e1cd9279cf302db3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e214ea82ad0a751563acf67e1cd9279cf302db3a", "html_url": "https://github.com/rust-lang/rust/commit/e214ea82ad0a751563acf67e1cd9279cf302db3a"}, {"sha": "f28f1f15da825bcf5cf78413f464dfea0bc553e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f28f1f15da825bcf5cf78413f464dfea0bc553e5", "html_url": "https://github.com/rust-lang/rust/commit/f28f1f15da825bcf5cf78413f464dfea0bc553e5"}], "stats": {"total": 152, "additions": 124, "deletions": 28}, "files": [{"sha": "38a5829b3f74530d7b38c0090fec56043ae1ab3c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -16,8 +16,8 @@ use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_block, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    def_id, BinOpKind, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, GenericArg, HirId, LoopSource,\n-    MatchSource, Mutability, Node, Pat, PatKind, QPath, Stmt, StmtKind,\n+    def_id, BinOpKind, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, GenericArg, HirId, InlineAsmOperand,\n+    LoopSource, MatchSource, Mutability, Node, Pat, PatKind, QPath, Stmt, StmtKind,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -693,6 +693,20 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n                 NeverLoopResult::AlwaysBreak\n             }\n         },\n+        ExprKind::InlineAsm(ref asm) => asm\n+            .operands\n+            .iter()\n+            .map(|o| match o {\n+                InlineAsmOperand::In { expr, .. }\n+                | InlineAsmOperand::InOut { expr, .. }\n+                | InlineAsmOperand::Const { expr }\n+                | InlineAsmOperand::Sym { expr } => never_loop_expr(expr, main_loop_id),\n+                InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter(), main_loop_id),\n+                InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n+                    never_loop_expr_all(&mut once(in_expr).chain(out_expr.iter()), main_loop_id)\n+                },\n+            })\n+            .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Struct(_, _, None)\n         | ExprKind::Yield(_, _)\n         | ExprKind::Closure(_, _, _, _, _)"}, {"sha": "bbcf396eef7d61ba1b04144da9bc59ffc82ed825", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -469,6 +469,10 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     println!(\"Ret(None) = {};\", current);\n                 }\n             },\n+            ExprKind::InlineAsm(_) => {\n+                println!(\"InlineAsm(_) = {};\", current);\n+                println!(\"    // unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n+            },\n             ExprKind::LlvmInlineAsm(_) => {\n                 println!(\"LlvmInlineAsm(_) = {};\", current);\n                 println!(\"    // unimplemented: `ExprKind::LlvmInlineAsm` is not further destructured at the moment\");"}, {"sha": "92c27e79452ab7110ba6f41ed9039f6cf906126c", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -1,10 +1,11 @@\n use crate::consts::{constant_context, constant_simple};\n use crate::utils::differing_macro_contexts;\n+use rustc_ast::ast::InlineAsmTemplatePiece;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::{\n     BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprKind, Field, FnRetTy, GenericArg,\n-    GenericArgs, Guard, Lifetime, LifetimeName, ParamName, Pat, PatKind, Path, PathSegment, QPath, Stmt, StmtKind, Ty,\n-    TyKind, TypeBinding,\n+    GenericArgs, Guard, InlineAsmOperand, Lifetime, LifetimeName, ParamName, Pat, PatKind, Path, PathSegment, QPath,\n+    Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lint::LateContext;\n use rustc_middle::ich::StableHashingContextProvider;\n@@ -474,6 +475,56 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(a);\n                 self.hash_expr(i);\n             },\n+            ExprKind::InlineAsm(ref asm) => {\n+                for piece in asm.template {\n+                    match piece {\n+                        InlineAsmTemplatePiece::String(s) => s.hash(&mut self.s),\n+                        InlineAsmTemplatePiece::Placeholder {\n+                            operand_idx,\n+                            modifier,\n+                            span: _,\n+                        } => {\n+                            operand_idx.hash(&mut self.s);\n+                            modifier.hash(&mut self.s);\n+                        },\n+                    }\n+                }\n+                asm.options.hash(&mut self.s);\n+                for op in asm.operands {\n+                    match op {\n+                        InlineAsmOperand::In { reg, expr } => {\n+                            reg.hash(&mut self.s);\n+                            self.hash_expr(expr);\n+                        },\n+                        InlineAsmOperand::Out { reg, late, expr } => {\n+                            reg.hash(&mut self.s);\n+                            late.hash(&mut self.s);\n+                            if let Some(expr) = expr {\n+                                self.hash_expr(expr);\n+                            }\n+                        },\n+                        InlineAsmOperand::InOut { reg, late, expr } => {\n+                            reg.hash(&mut self.s);\n+                            late.hash(&mut self.s);\n+                            self.hash_expr(expr);\n+                        },\n+                        InlineAsmOperand::SplitInOut {\n+                            reg,\n+                            late,\n+                            in_expr,\n+                            out_expr,\n+                        } => {\n+                            reg.hash(&mut self.s);\n+                            late.hash(&mut self.s);\n+                            self.hash_expr(in_expr);\n+                            if let Some(out_expr) = out_expr {\n+                                self.hash_expr(out_expr);\n+                            }\n+                        },\n+                        InlineAsmOperand::Const { expr } | InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n+                    }\n+                }\n+            },\n             ExprKind::LlvmInlineAsm(..) | ExprKind::Err => {},\n             ExprKind::Lit(ref l) => {\n                 l.node.hash(&mut self.s);"}, {"sha": "9b672b9ec225b989085dfbdd65917b0c99139e4e", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -1,7 +1,7 @@\n //! checks for attributes\n \n use crate::utils::get_attr;\n-use rustc_ast::ast::Attribute;\n+use rustc_ast::ast::{Attribute, InlineAsmTemplatePiece};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::Session;\n@@ -282,6 +282,31 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, indent: usize) {\n                 print_expr(cx, e, indent + 1);\n             }\n         },\n+        hir::ExprKind::InlineAsm(ref asm) => {\n+            println!(\"{}InlineAsm\", ind);\n+            println!(\"{}template: {}\", ind, InlineAsmTemplatePiece::to_string(asm.template));\n+            println!(\"{}options: {:?}\", ind, asm.options);\n+            println!(\"{}operands:\", ind);\n+            for op in asm.operands {\n+                match op {\n+                    hir::InlineAsmOperand::In { expr, .. }\n+                    | hir::InlineAsmOperand::InOut { expr, .. }\n+                    | hir::InlineAsmOperand::Const { expr }\n+                    | hir::InlineAsmOperand::Sym { expr } => print_expr(cx, expr, indent + 1),\n+                    hir::InlineAsmOperand::Out { expr, .. } => {\n+                        if let Some(expr) = expr {\n+                            print_expr(cx, expr, indent + 1);\n+                        }\n+                    },\n+                    hir::InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n+                        print_expr(cx, in_expr, indent + 1);\n+                        if let Some(out_expr) = out_expr {\n+                            print_expr(cx, out_expr, indent + 1);\n+                        }\n+                    },\n+                }\n+            }\n+        },\n         hir::ExprKind::LlvmInlineAsm(ref asm) => {\n             let inputs = &asm.inputs_exprs;\n             let outputs = &asm.outputs_exprs;"}, {"sha": "4ebe2e2852fb4445492161c8bfd693db4dc4fed1", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -108,6 +108,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::Index(..)\n+            | hir::ExprKind::InlineAsm(..)\n             | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n@@ -150,6 +151,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Field(..)\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::Index(..)\n+            | ast::ExprKind::InlineAsm(..)\n             | ast::ExprKind::LlvmInlineAsm(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::Loop(..)"}, {"sha": "dfa6223f1b9dd104c4ec32cedbac186205f2f362", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -353,7 +353,8 @@ impl Write {\n         is_write: bool,\n     ) -> (Option<StrLit>, Option<Expr>) {\n         use fmt_macros::{\n-            AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied, FormatSpec, Parser, Piece,\n+            AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied, FormatSpec, ParseMode, Parser,\n+            Piece,\n         };\n         let tts = tts.clone();\n \n@@ -376,7 +377,7 @@ impl Write {\n         };\n         let tmp = fmtstr.symbol.as_str();\n         let mut args = vec![];\n-        let mut fmt_parser = Parser::new(&tmp, None, Vec::new(), false);\n+        let mut fmt_parser = Parser::new(&tmp, None, None, false, ParseMode::Format);\n         while let Some(piece) = fmt_parser.next() {\n             if !fmt_parser.errors.is_empty() {\n                 return (None, expr);"}, {"sha": "ba946563ec595d1624fb5a6515a11e4d2fcb1233", "filename": "mini-macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/mini-macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/mini-macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mini-macro%2Fsrc%2Flib.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -1,4 +1,4 @@\n-#![feature(proc_macro_quote, proc_macro_hygiene)]\n+#![feature(proc_macro_quote)]\n #![deny(rust_2018_idioms)]\n // FIXME: Remove this attribute once the weird failure is gone.\n #![allow(unused_extern_crates)]"}, {"sha": "05ffb55f6207e49f1c7dcc7ccdd2ed91a05f1bae", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -1,7 +1,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(repr128, proc_macro_hygiene, proc_macro_quote)]\n+#![feature(repr128, proc_macro_quote)]\n \n extern crate proc_macro;\n "}, {"sha": "a548415da62bdbc880519388be38971a77472cdc", "filename": "tests/ui/crashes/ice-3741.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fcrashes%2Fice-3741.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fcrashes%2Fice-3741.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3741.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -1,7 +1,6 @@\n // aux-build:proc_macro_crash.rs\n // run-pass\n \n-#![feature(proc_macro_hygiene)]\n #![warn(clippy::suspicious_else_formatting)]\n \n extern crate proc_macro_crash;"}, {"sha": "718e391e8bf697b59fbf1e02a4c38bad7108a716", "filename": "tests/ui/ptr_offset_with_cast.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fptr_offset_with_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fptr_offset_with_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.fixed?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -9,12 +9,12 @@ fn main() {\n     let offset_isize = 1_isize;\n \n     unsafe {\n-        ptr.add(offset_usize);\n-        ptr.offset(offset_isize as isize);\n-        ptr.offset(offset_u8 as isize);\n+        let _ = ptr.add(offset_usize);\n+        let _ = ptr.offset(offset_isize as isize);\n+        let _ = ptr.offset(offset_u8 as isize);\n \n-        ptr.wrapping_add(offset_usize);\n-        ptr.wrapping_offset(offset_isize as isize);\n-        ptr.wrapping_offset(offset_u8 as isize);\n+        let _ = ptr.wrapping_add(offset_usize);\n+        let _ = ptr.wrapping_offset(offset_isize as isize);\n+        let _ = ptr.wrapping_offset(offset_u8 as isize);\n     }\n }"}, {"sha": "f613742c741ef5660e339f0f560ce97576b8153a", "filename": "tests/ui/ptr_offset_with_cast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.rs?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -9,12 +9,12 @@ fn main() {\n     let offset_isize = 1_isize;\n \n     unsafe {\n-        ptr.offset(offset_usize as isize);\n-        ptr.offset(offset_isize as isize);\n-        ptr.offset(offset_u8 as isize);\n+        let _ = ptr.offset(offset_usize as isize);\n+        let _ = ptr.offset(offset_isize as isize);\n+        let _ = ptr.offset(offset_u8 as isize);\n \n-        ptr.wrapping_offset(offset_usize as isize);\n-        ptr.wrapping_offset(offset_isize as isize);\n-        ptr.wrapping_offset(offset_u8 as isize);\n+        let _ = ptr.wrapping_offset(offset_usize as isize);\n+        let _ = ptr.wrapping_offset(offset_isize as isize);\n+        let _ = ptr.wrapping_offset(offset_u8 as isize);\n     }\n }"}, {"sha": "fd45224ca067fa3450bc07cd12f5ebef51052495", "filename": "tests/ui/ptr_offset_with_cast.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fptr_offset_with_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34ba597ccb92e290c9385d6bc891d06963f974f6/tests%2Fui%2Fptr_offset_with_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.stderr?ref=34ba597ccb92e290c9385d6bc891d06963f974f6", "patch": "@@ -1,16 +1,16 @@\n error: use of `offset` with a `usize` casted to an `isize`\n-  --> $DIR/ptr_offset_with_cast.rs:12:9\n+  --> $DIR/ptr_offset_with_cast.rs:12:17\n    |\n-LL |         ptr.offset(offset_usize as isize);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.add(offset_usize)`\n+LL |         let _ = ptr.offset(offset_usize as isize);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.add(offset_usize)`\n    |\n    = note: `-D clippy::ptr-offset-with-cast` implied by `-D warnings`\n \n error: use of `wrapping_offset` with a `usize` casted to an `isize`\n-  --> $DIR/ptr_offset_with_cast.rs:16:9\n+  --> $DIR/ptr_offset_with_cast.rs:16:17\n    |\n-LL |         ptr.wrapping_offset(offset_usize as isize);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.wrapping_add(offset_usize)`\n+LL |         let _ = ptr.wrapping_offset(offset_usize as isize);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.wrapping_add(offset_usize)`\n \n error: aborting due to 2 previous errors\n "}]}