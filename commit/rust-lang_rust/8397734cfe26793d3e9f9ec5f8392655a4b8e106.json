{"sha": "8397734cfe26793d3e9f9ec5f8392655a4b8e106", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOTc3MzRjZmUyNjc5M2QzZTlmOWVjNWY4MzkyNjU1YTRiOGUxMDY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-15T18:28:07Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:48:34Z"}, "message": "Fix HIR expecting errors to unify with anything", "tree": {"sha": "4ccb4df2b209ea6a50332be32265accaffe08211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ccb4df2b209ea6a50332be32265accaffe08211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8397734cfe26793d3e9f9ec5f8392655a4b8e106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8397734cfe26793d3e9f9ec5f8392655a4b8e106", "html_url": "https://github.com/rust-lang/rust/commit/8397734cfe26793d3e9f9ec5f8392655a4b8e106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8397734cfe26793d3e9f9ec5f8392655a4b8e106/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c492af7ec8ff6af4fe2b38f83aa007c9f7f0b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c492af7ec8ff6af4fe2b38f83aa007c9f7f0b8", "html_url": "https://github.com/rust-lang/rust/commit/48c492af7ec8ff6af4fe2b38f83aa007c9f7f0b8"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "1429384cba44f0bd2b807ec07b6af91bf9935aa3", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8397734cfe26793d3e9f9ec5f8392655a4b8e106/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8397734cfe26793d3e9f9ec5f8392655a4b8e106/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8397734cfe26793d3e9f9ec5f8392655a4b8e106", "patch": "@@ -2051,11 +2051,7 @@ impl Type {\n         name: Option<&Name>,\n         mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n     ) -> Option<T> {\n-        // There should be no inference vars in types passed here\n-        // FIXME check that?\n-        // FIXME replace Unknown by bound vars here\n-        let canonical =\n-            Canonical { value: self.ty.clone(), binders: CanonicalVarKinds::empty(&Interner) };\n+        let canonical = hir_ty::replace_errors_with_variables(self.ty.clone());\n \n         let env = self.env.clone();\n         let krate = krate.id;\n@@ -2224,7 +2220,8 @@ impl Type {\n     }\n \n     pub fn could_unify_with(&self, db: &dyn HirDatabase, other: &Type) -> bool {\n-        could_unify(db, self.env.clone(), &self.ty, &other.ty)\n+        let tys = hir_ty::replace_errors_with_variables((self.ty.clone(), other.ty.clone()));\n+        could_unify(db, self.env.clone(), &tys)\n     }\n }\n "}, {"sha": "d8edfb4e9c774f02530c0cc9cf152b2a523e03e4", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8397734cfe26793d3e9f9ec5f8392655a4b8e106/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8397734cfe26793d3e9f9ec5f8392655a4b8e106/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=8397734cfe26793d3e9f9ec5f8392655a4b8e106", "patch": "@@ -86,8 +86,12 @@ impl<T: HasInterner<Interner = Interner>> Canonicalized<T> {\n     }\n }\n \n-pub fn could_unify(db: &dyn HirDatabase, env: Arc<TraitEnvironment>, t1: &Ty, t2: &Ty) -> bool {\n-    InferenceTable::new(db, env).unify(t1, t2)\n+pub fn could_unify(\n+    db: &dyn HirDatabase,\n+    env: Arc<TraitEnvironment>,\n+    tys: &Canonical<(Ty, Ty)>,\n+) -> bool {\n+    unify(db, env, tys).is_some()\n }\n \n pub(crate) fn unify("}, {"sha": "56f60c46b241492dc45e297492c677391ebfaea0", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8397734cfe26793d3e9f9ec5f8392655a4b8e106/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8397734cfe26793d3e9f9ec5f8392655a4b8e106/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=8397734cfe26793d3e9f9ec5f8392655a4b8e106", "patch": "@@ -43,6 +43,7 @@ use hir_def::{\n     type_ref::{ConstScalar, Rawness},\n     TypeParamId,\n };\n+use stdx::always;\n \n use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n \n@@ -326,3 +327,58 @@ pub(crate) fn fold_tys<T: HasInterner<Interner = Interner> + Fold<Interner>>(\n     }\n     t.fold_with(&mut TyFolder(f), binders).expect(\"fold failed unexpectedly\")\n }\n+\n+pub fn replace_errors_with_variables<T>(t: T) -> Canonical<T::Result>\n+where\n+    T: HasInterner<Interner = Interner> + Fold<Interner>,\n+    T::Result: HasInterner<Interner = Interner>,\n+{\n+    use chalk_ir::{\n+        fold::{Folder, SuperFold},\n+        Fallible,\n+    };\n+    struct ErrorReplacer {\n+        vars: usize,\n+    }\n+    impl<'i> Folder<'i, Interner> for ErrorReplacer {\n+        fn as_dyn(&mut self) -> &mut dyn Folder<'i, Interner> {\n+            self\n+        }\n+\n+        fn interner(&self) -> &'i Interner {\n+            &Interner\n+        }\n+\n+        fn fold_ty(&mut self, ty: Ty, outer_binder: DebruijnIndex) -> Fallible<Ty> {\n+            if let TyKind::Error = ty.kind(&Interner) {\n+                let index = self.vars;\n+                self.vars += 1;\n+                Ok(TyKind::BoundVar(BoundVar::new(outer_binder, index)).intern(&Interner))\n+            } else {\n+                let ty = ty.super_fold_with(self.as_dyn(), outer_binder)?;\n+                Ok(ty)\n+            }\n+        }\n+\n+        fn fold_inference_ty(\n+            &mut self,\n+            var: InferenceVar,\n+            kind: TyVariableKind,\n+            _outer_binder: DebruijnIndex,\n+        ) -> Fallible<Ty> {\n+            always!(false);\n+            Ok(TyKind::InferenceVar(var, kind).intern(&Interner))\n+        }\n+    }\n+    let mut error_replacer = ErrorReplacer { vars: 0 };\n+    let value = t\n+        .fold_with(&mut error_replacer, DebruijnIndex::INNERMOST)\n+        .expect(\"fold failed unexpectedly\");\n+    let kinds = (0..error_replacer.vars).map(|_| {\n+        chalk_ir::CanonicalVarKind::new(\n+            chalk_ir::VariableKind::Ty(TyVariableKind::General),\n+            chalk_ir::UniverseIndex::ROOT,\n+        )\n+    });\n+    Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds) }\n+}"}]}