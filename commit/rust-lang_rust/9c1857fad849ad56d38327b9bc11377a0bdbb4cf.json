{"sha": "9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMTg1N2ZhZDg0OWFkNTZkMzgzMjdiOWJjMTEzNzdhMGJkYmI0Y2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-06T19:58:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-06T19:58:27Z"}, "message": "Auto merge of #73073 - RalfJung:rollup-i24dh28, r=RalfJung\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #71796 (de-promote Duration::from_secs)\n - #72508 (Make `PolyTraitRef::self_ty` return `Binder<Ty>`)\n - #72708 (linker: Add a linker rerun hack for gcc versions not supporting -static-pie)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9f83165f7d0305cdcd36f97c7c7253368456ac12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f83165f7d0305cdcd36f97c7c7253368456ac12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "html_url": "https://github.com/rust-lang/rust/commit/9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "118b50524b79e565f017e08bce9b90a16c63634f", "url": "https://api.github.com/repos/rust-lang/rust/commits/118b50524b79e565f017e08bce9b90a16c63634f", "html_url": "https://github.com/rust-lang/rust/commit/118b50524b79e565f017e08bce9b90a16c63634f"}, {"sha": "d112d8bf3b6649ec02d1f6b725d2500e289473fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d112d8bf3b6649ec02d1f6b725d2500e289473fe", "html_url": "https://github.com/rust-lang/rust/commit/d112d8bf3b6649ec02d1f6b725d2500e289473fe"}], "stats": {"total": 141, "additions": 107, "deletions": 34}, "files": [{"sha": "e2ceaf80c0cda6770f30083a8d1bcdc05d70b61b", "filename": "src/libcore/time.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -152,7 +152,6 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n-    #[rustc_promotable]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_secs(secs: u64) -> Duration {\n         Duration { secs, nanos: 0 }"}, {"sha": "53e3da3c0baf0bc40c0e111e71c6b23d029d079a", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -12,7 +12,7 @@ use rustc_session::utils::NativeLibKind;\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n-use rustc_target::spec::crt_objects::CrtObjectsFallback;\n+use rustc_target::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor};\n use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel};\n \n@@ -25,16 +25,10 @@ use crate::{looks_like_rust_object_file, CodegenResults, CrateInfo, METADATA_FIL\n use cc::windows_registry;\n use tempfile::{Builder as TempFileBuilder, TempDir};\n \n-use std::ascii;\n-use std::char;\n-use std::env;\n use std::ffi::OsString;\n-use std::fmt;\n-use std::fs;\n-use std::io;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n-use std::str;\n+use std::{ascii, char, env, fmt, fs, io, mem, str};\n \n pub fn remove(sess: &Session, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n@@ -543,6 +537,61 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n             continue;\n         }\n \n+        // Detect '-static-pie' used with an older version of gcc or clang not supporting it.\n+        // Fallback from '-static-pie' to '-static' in that case.\n+        if sess.target.target.options.linker_is_gnu\n+            && flavor != LinkerFlavor::Ld\n+            && (out.contains(\"unrecognized command line option\")\n+                || out.contains(\"unknown argument\"))\n+            && (out.contains(\"-static-pie\") || out.contains(\"--no-dynamic-linker\"))\n+            && cmd.get_args().iter().any(|e| e.to_string_lossy() == \"-static-pie\")\n+        {\n+            info!(\"linker output: {:?}\", out);\n+            warn!(\n+                \"Linker does not support -static-pie command line option. Retrying with -static instead.\"\n+            );\n+            // Mirror `add_(pre,post)_link_objects` to replace CRT objects.\n+            let fallback = crt_objects_fallback(sess, crate_type);\n+            let opts = &sess.target.target.options;\n+            let pre_objects =\n+                if fallback { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n+            let post_objects =\n+                if fallback { &opts.post_link_objects_fallback } else { &opts.post_link_objects };\n+            let get_objects = |objects: &CrtObjects, kind| {\n+                objects\n+                    .get(&kind)\n+                    .iter()\n+                    .copied()\n+                    .flatten()\n+                    .map(|obj| get_object_file_path(sess, obj).into_os_string())\n+                    .collect::<Vec<_>>()\n+            };\n+            let pre_objects_static_pie = get_objects(pre_objects, LinkOutputKind::StaticPicExe);\n+            let post_objects_static_pie = get_objects(post_objects, LinkOutputKind::StaticPicExe);\n+            let mut pre_objects_static = get_objects(pre_objects, LinkOutputKind::StaticNoPicExe);\n+            let mut post_objects_static = get_objects(post_objects, LinkOutputKind::StaticNoPicExe);\n+            // Assume that we know insertion positions for the replacement arguments from replaced\n+            // arguments, which is true for all supported targets.\n+            assert!(pre_objects_static.is_empty() || !pre_objects_static_pie.is_empty());\n+            assert!(post_objects_static.is_empty() || !post_objects_static_pie.is_empty());\n+            for arg in cmd.take_args() {\n+                if arg.to_string_lossy() == \"-static-pie\" {\n+                    // Replace the output kind.\n+                    cmd.arg(\"-static\");\n+                } else if pre_objects_static_pie.contains(&arg) {\n+                    // Replace the pre-link objects (replace the first and remove the rest).\n+                    cmd.args(mem::take(&mut pre_objects_static));\n+                } else if post_objects_static_pie.contains(&arg) {\n+                    // Replace the post-link objects (replace the first and remove the rest).\n+                    cmd.args(mem::take(&mut post_objects_static));\n+                } else {\n+                    cmd.arg(arg);\n+                }\n+            }\n+            info!(\"{:?}\", &cmd);\n+            continue;\n+        }\n+\n         // Here's a terribly awful hack that really shouldn't be present in any\n         // compiler. Here an environment variable is supported to automatically\n         // retry the linker invocation if the linker looks like it segfaulted."}, {"sha": "f01b9751c406b46997924278d23be331f202e079", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -765,8 +765,8 @@ impl<'tcx> TraitRef<'tcx> {\n pub type PolyTraitRef<'tcx> = Binder<TraitRef<'tcx>>;\n \n impl<'tcx> PolyTraitRef<'tcx> {\n-    pub fn self_ty(&self) -> Ty<'tcx> {\n-        self.skip_binder().self_ty()\n+    pub fn self_ty(&self) -> Binder<Ty<'tcx>> {\n+        self.map_bound_ref(|tr| tr.self_ty())\n     }\n \n     pub fn def_id(&self) -> DefId {"}, {"sha": "b2ad62e1b260ba9bddd29ecdcf4a43a1312a5b1e", "filename": "src/librustc_target/spec/tests/tests_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -38,5 +38,10 @@ impl Target {\n                 assert_eq!(self.options.lld_flavor, LldFlavor::Link);\n             }\n         }\n+        assert!(\n+            (self.options.pre_link_objects_fallback.is_empty()\n+                && self.options.post_link_objects_fallback.is_empty())\n+                || self.options.crt_objects_fallback.is_some()\n+        );\n     }\n }"}, {"sha": "1b72a4bf84f191b363915745594c3bdc550b3b7e", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -290,7 +290,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             (\n                                 Some(format!(\n                                     \"`?` couldn't convert the error to `{}`\",\n-                                    trait_ref.self_ty(),\n+                                    trait_ref.skip_binder().self_ty(),\n                                 )),\n                                 Some(\n                                     \"the question mark operation (`?`) implicitly performs a \\\n@@ -340,7 +340,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             if let Some(ret_span) = self.return_type_span(obligation) {\n                                 err.span_label(\n                                     ret_span,\n-                                    &format!(\"expected `{}` because of this\", trait_ref.self_ty()),\n+                                    &format!(\n+                                        \"expected `{}` because of this\",\n+                                        trait_ref.skip_binder().self_ty()\n+                                    ),\n                                 );\n                             }\n                         }\n@@ -353,7 +356,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                     \"{}the trait `{}` is not implemented for `{}`\",\n                                     pre_message,\n                                     trait_ref.print_only_trait_path(),\n-                                    trait_ref.self_ty(),\n+                                    trait_ref.skip_binder().self_ty(),\n                                 )\n                             };\n \n@@ -643,7 +646,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                let found_trait_ty = found_trait_ref.self_ty();\n+                let found_trait_ty = match found_trait_ref.self_ty().no_bound_vars() {\n+                    Some(ty) => ty,\n+                    None => return,\n+                };\n \n                 let found_did = match found_trait_ty.kind {\n                     ty::Closure(did, _) | ty::Foreign(did) | ty::FnDef(did, _) => Some(did),\n@@ -1360,11 +1366,15 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let get_trait_impl = |trait_def_id| {\n             let mut trait_impl = None;\n-            self.tcx.for_each_relevant_impl(trait_def_id, trait_ref.self_ty(), |impl_def_id| {\n-                if trait_impl.is_none() {\n-                    trait_impl = Some(impl_def_id);\n-                }\n-            });\n+            self.tcx.for_each_relevant_impl(\n+                trait_def_id,\n+                trait_ref.skip_binder().self_ty(),\n+                |impl_def_id| {\n+                    if trait_impl.is_none() {\n+                        trait_impl = Some(impl_def_id);\n+                    }\n+                },\n+            );\n             trait_impl\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n@@ -1435,7 +1445,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut err = match predicate.kind() {\n             ty::PredicateKind::Trait(ref data, _) => {\n                 let trait_ref = data.to_poly_trait_ref();\n-                let self_ty = trait_ref.self_ty();\n+                let self_ty = trait_ref.skip_binder().self_ty();\n                 debug!(\"self_ty {:?} {:?} trait_ref {:?}\", self_ty, self_ty.kind, trait_ref);\n \n                 if predicate.references_error() {\n@@ -1564,7 +1574,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             ty::PredicateKind::Projection(ref data) => {\n                 let trait_ref = data.to_poly_trait_ref(self.tcx);\n-                let self_ty = trait_ref.self_ty();\n+                let self_ty = trait_ref.skip_binder().self_ty();\n                 let ty = data.skip_binder().ty;\n                 if predicate.references_error() {\n                     return;"}, {"sha": "8796cfb52165df6039f37e48d2d74fd23228775f", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -318,7 +318,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_id: hir::HirId,\n     ) {\n-        let self_ty = trait_ref.self_ty();\n+        let self_ty = trait_ref.skip_binder().self_ty();\n         let (param_ty, projection) = match &self_ty.kind {\n             ty::Param(_) => (true, None),\n             ty::Projection(projection) => (false, Some(projection)),\n@@ -524,7 +524,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n     ) {\n-        let self_ty = trait_ref.self_ty();\n+        let self_ty = match trait_ref.self_ty().no_bound_vars() {\n+            None => return,\n+            Some(ty) => ty,\n+        };\n+\n         let (def_id, output_ty, callable) = match self_ty.kind {\n             ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig().output(), \"closure\"),\n             ty::FnDef(def_id, _) => (def_id, self_ty.fn_sig(self.tcx).output(), \"function\"),\n@@ -707,7 +711,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return;\n             }\n \n-            let mut suggested_ty = trait_ref.self_ty();\n+            let mut suggested_ty = match trait_ref.self_ty().no_bound_vars() {\n+                Some(ty) => ty,\n+                None => return,\n+            };\n \n             for refs_remaining in 0..refs_number {\n                 if let ty::Ref(_, inner_ty, _) = suggested_ty.kind {\n@@ -829,6 +836,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         span: Span,\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n     ) {\n+        let is_empty_tuple =\n+            |ty: ty::Binder<Ty<'_>>| ty.skip_binder().kind == ty::Tuple(ty::List::empty());\n+\n         let hir = self.tcx.hir();\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n@@ -840,7 +850,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             if let hir::ExprKind::Block(blk, _) = &body.value.kind {\n                 if sig.decl.output.span().overlaps(span)\n                     && blk.expr.is_none()\n-                    && \"()\" == &trait_ref.self_ty().to_string()\n+                    && is_empty_tuple(trait_ref.self_ty())\n                 {\n                     // FIXME(estebank): When encountering a method with a trait\n                     // bound not satisfied in the return type with a body that has\n@@ -1271,7 +1281,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ObligationCauseCode::DerivedObligation(derived_obligation)\n                 | ObligationCauseCode::BuiltinDerivedObligation(derived_obligation)\n                 | ObligationCauseCode::ImplDerivedObligation(derived_obligation) => {\n-                    let ty = derived_obligation.parent_trait_ref.self_ty();\n+                    let ty = derived_obligation.parent_trait_ref.skip_binder().self_ty();\n                     debug!(\n                         \"maybe_note_obligation_cause_for_async_await: \\\n                             parent_trait_ref={:?} self_ty.kind={:?}\",\n@@ -1917,7 +1927,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 let impls_future = self.tcx.type_implements_trait((\n                     future_trait,\n-                    self_ty,\n+                    self_ty.skip_binder(),\n                     ty::List::empty(),\n                     obligation.param_env,\n                 ));\n@@ -1933,7 +1943,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let projection_ty = ty::ProjectionTy {\n                     // `T`\n                     substs: self.tcx.mk_substs_trait(\n-                        trait_ref.self_ty(),\n+                        trait_ref.self_ty().skip_binder(),\n                         self.fresh_substs_for_item(span, item_def_id),\n                     ),\n                     // `Future::Output`"}, {"sha": "2b596be95426704a6a41526c81b4f1ba2ddeaa66", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -496,7 +496,7 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String>\n     for (p, _) in predicates {\n         if let Some(poly_trait_ref) = p.to_opt_poly_trait_ref() {\n             if Some(poly_trait_ref.def_id()) == sized_trait {\n-                types_without_default_bounds.remove(poly_trait_ref.self_ty());\n+                types_without_default_bounds.remove(poly_trait_ref.self_ty().skip_binder());\n                 continue;\n             }\n         }"}, {"sha": "e5bca3746771c9f44ec97b3a673c2949fefa9f0a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -3813,7 +3813,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         expected_vid: ty::TyVid,\n     ) -> bool {\n-        let self_ty = self.shallow_resolve(trait_ref.self_ty());\n+        let self_ty = self.shallow_resolve(trait_ref.skip_binder().self_ty());\n         debug!(\n             \"self_type_matches_expected_vid(trait_ref={:?}, self_ty={:?}, expected_vid={:?})\",\n             trait_ref, self_ty, expected_vid"}, {"sha": "dd4df11b1df3868af4450eb48ab46076e80a901b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -500,7 +500,7 @@ impl<'a> Clean<WherePredicate> for ty::PolyTraitPredicate<'a> {\n     fn clean(&self, cx: &DocContext<'_>) -> WherePredicate {\n         let poly_trait_ref = self.map_bound(|pred| pred.trait_ref);\n         WherePredicate::BoundPredicate {\n-            ty: poly_trait_ref.self_ty().clean(cx),\n+            ty: poly_trait_ref.skip_binder().self_ty().clean(cx),\n             bounds: vec![poly_trait_ref.clean(cx)],\n         }\n     }\n@@ -755,7 +755,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                 let mut projection = None;\n                 let param_idx = (|| {\n                     if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n-                        if let ty::Param(param) = trait_ref.self_ty().kind {\n+                        if let ty::Param(param) = trait_ref.skip_binder().self_ty().kind {\n                             return Some(param.index);\n                         }\n                     } else if let Some(outlives) = p.to_opt_type_outlives() {"}, {"sha": "17dd3cd5493e7cbfb737fa94cfa7ef523ebcc3f5", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1857fad849ad56d38327b9bc11377a0bdbb4cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=9c1857fad849ad56d38327b9bc11377a0bdbb4cf", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FutureNotSend {\n                                         let trait_ref = trait_pred.to_poly_trait_ref();\n                                         db.note(&*format!(\n                                             \"`{}` doesn't implement `{}`\",\n-                                            trait_ref.self_ty(),\n+                                            trait_ref.skip_binder().self_ty(),\n                                             trait_ref.print_only_trait_path(),\n                                         ));\n                                     }"}]}