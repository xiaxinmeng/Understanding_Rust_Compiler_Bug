{"sha": "7982d6ac6407040ba22bad707bd6f3ce88a6c7dc", "node_id": "C_kwDOAAsO6NoAKDc5ODJkNmFjNjQwNzA0MGJhMjJiYWQ3MDdiZDZmM2NlODhhNmM3ZGM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-13T11:22:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-13T11:56:48Z"}, "message": "interpret: make check_mplace public", "tree": {"sha": "dac247a8cad0ec5767459ec6a10899ad2e1d3a23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dac247a8cad0ec5767459ec6a10899ad2e1d3a23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7982d6ac6407040ba22bad707bd6f3ce88a6c7dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7982d6ac6407040ba22bad707bd6f3ce88a6c7dc", "html_url": "https://github.com/rust-lang/rust/commit/7982d6ac6407040ba22bad707bd6f3ce88a6c7dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7982d6ac6407040ba22bad707bd6f3ce88a6c7dc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742d3f02c243964e5b868d90afd60c2907be5853", "url": "https://api.github.com/repos/rust-lang/rust/commits/742d3f02c243964e5b868d90afd60c2907be5853", "html_url": "https://github.com/rust-lang/rust/commit/742d3f02c243964e5b868d90afd60c2907be5853"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "4dcd0914651d99c69e8f2d4d4b64f5ded2b69885", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7982d6ac6407040ba22bad707bd6f3ce88a6c7dc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7982d6ac6407040ba22bad707bd6f3ce88a6c7dc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=7982d6ac6407040ba22bad707bd6f3ce88a6c7dc", "patch": "@@ -316,8 +316,7 @@ where\n         Ok(MPlaceTy { mplace, layout, align })\n     }\n \n-    /// Take an operand, representing a pointer, and dereference it to a place -- that\n-    /// will always be a MemPlace.  Lives in `place.rs` because it creates a place.\n+    /// Take an operand, representing a pointer, and dereference it to a place.\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn deref_operand(\n         &self,\n@@ -331,7 +330,7 @@ where\n         }\n \n         let mplace = self.ref_to_mplace(&val)?;\n-        self.check_mplace_access(mplace, CheckInAllocMsg::DerefTest)?;\n+        self.check_mplace(mplace)?;\n         Ok(mplace)\n     }\n \n@@ -358,17 +357,18 @@ where\n     }\n \n     /// Check if this mplace is dereferenceable and sufficiently aligned.\n-    fn check_mplace_access(\n-        &self,\n-        mplace: MPlaceTy<'tcx, M::Provenance>,\n-        msg: CheckInAllocMsg,\n-    ) -> InterpResult<'tcx> {\n+    pub fn check_mplace(&self, mplace: MPlaceTy<'tcx, M::Provenance>) -> InterpResult<'tcx> {\n         let (size, align) = self\n             .size_and_align_of_mplace(&mplace)?\n             .unwrap_or((mplace.layout.size, mplace.layout.align.abi));\n         assert!(mplace.align <= align, \"dynamic alignment less strict than static one?\");\n         let align = M::enforce_alignment(self).then_some(align);\n-        self.check_ptr_access_align(mplace.ptr, size, align.unwrap_or(Align::ONE), msg)?;\n+        self.check_ptr_access_align(\n+            mplace.ptr,\n+            size,\n+            align.unwrap_or(Align::ONE),\n+            CheckInAllocMsg::DerefTest,\n+        )?;\n         Ok(())\n     }\n "}]}