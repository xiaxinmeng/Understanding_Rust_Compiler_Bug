{"sha": "e5189cc7e45991e1c6e9a4218c80d54441b346a9", "node_id": "C_kwDOAAsO6NoAKGU1MTg5Y2M3ZTQ1OTkxZTFjNmU5YTQyMThjODBkNTQ0NDFiMzQ2YTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-27T20:47:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-23T06:19:52Z"}, "message": "Nested impl traits trigger opaque_hidden_inferred_bound too much", "tree": {"sha": "aa9ebe077c366e31fe2393bde73f44895748953e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9ebe077c366e31fe2393bde73f44895748953e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5189cc7e45991e1c6e9a4218c80d54441b346a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5189cc7e45991e1c6e9a4218c80d54441b346a9", "html_url": "https://github.com/rust-lang/rust/commit/e5189cc7e45991e1c6e9a4218c80d54441b346a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5189cc7e45991e1c6e9a4218c80d54441b346a9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c771fec3329ef1d8c66697daf9517501d0c129a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c771fec3329ef1d8c66697daf9517501d0c129a", "html_url": "https://github.com/rust-lang/rust/commit/1c771fec3329ef1d8c66697daf9517501d0c129a"}], "stats": {"total": 57, "additions": 18, "deletions": 39}, "files": [{"sha": "f9d43fe220036e70c527e792ea10944d027e9f5d", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e5189cc7e45991e1c6e9a4218c80d54441b346a9/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5189cc7e45991e1c6e9a4218c80d54441b346a9/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=e5189cc7e45991e1c6e9a4218c80d54441b346a9", "patch": "@@ -27,6 +27,8 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n+    /// #![feature(type_alias_impl_trait)]\n+    ///\n     /// trait Duh {}\n     ///\n     /// impl Duh for i32 {}\n@@ -41,7 +43,9 @@ declare_lint! {\n     ///     type Assoc = F;\n     /// }\n     ///\n-    /// fn test() -> impl Trait<Assoc = impl Sized> {\n+    /// type Tait = impl Sized;\n+    ///\n+    /// fn test() -> impl Trait<Assoc = Tait> {\n     ///     42\n     /// }\n     /// ```\n@@ -54,7 +58,7 @@ declare_lint! {\n     ///\n     /// Although the hidden type, `i32` does satisfy this bound, we do not\n     /// consider the return type to be well-formed with this lint. It can be\n-    /// fixed by changing `impl Sized` into `impl Sized + Send`.\n+    /// fixed by changing `Tait = impl Sized` into `Tait = impl Sized + Send`.\n     pub OPAQUE_HIDDEN_INFERRED_BOUND,\n     Warn,\n     \"detects the use of nested `impl Trait` types in associated type bounds that are not general enough\"\n@@ -64,7 +68,7 @@ declare_lint_pass!(OpaqueHiddenInferredBound => [OPAQUE_HIDDEN_INFERRED_BOUND]);\n \n impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n-        let hir::ItemKind::OpaqueTy(_) = &item.kind else { return; };\n+        let hir::ItemKind::OpaqueTy(opaque) = &item.kind else { return; };\n         let def_id = item.owner_id.def_id.to_def_id();\n         let infcx = &cx.tcx.infer_ctxt().build();\n         // For every projection predicate in the opaque type's explicit bounds,\n@@ -81,6 +85,17 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n             // have opaques in them anyways.\n             let Some(proj_term) = proj.term.ty() else { continue };\n \n+            // HACK: `impl Trait<Assoc = impl Trait2>` from an RPIT is \"ok\"...\n+            if let ty::Alias(ty::Opaque, opaque_ty) = *proj_term.kind()\n+                && cx.tcx.parent(opaque_ty.def_id) == def_id\n+                && matches!(\n+                    opaque.origin,\n+                    hir::OpaqueTyOrigin::FnReturn(_) | hir::OpaqueTyOrigin::AsyncFn(_)\n+                )\n+            {\n+                continue;\n+            }\n+\n             let proj_ty =\n                 cx.tcx.mk_projection(proj.projection_ty.def_id, proj.projection_ty.substs);\n             // For every instance of the projection type in the bounds,"}, {"sha": "e1d5511379e7a9f2875dd1b1405637a8ea7a8937", "filename": "tests/ui/impl-trait/nested-return-type2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5189cc7e45991e1c6e9a4218c80d54441b346a9/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5189cc7e45991e1c6e9a4218c80d54441b346a9/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.rs?ref=e5189cc7e45991e1c6e9a4218c80d54441b346a9", "patch": "@@ -26,7 +26,6 @@ impl<R: Duh, F: FnMut() -> R> Trait for F {\n // Lazy TAIT would error out, but we inserted a hack to make it work again,\n // keeping backwards compatibility.\n fn foo() -> impl Trait<Assoc = impl Send> {\n-    //~^ WARN opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n     || 42\n }\n "}, {"sha": "09ad3bd05c1b3dda20e4842d09f3186cde6d8249", "filename": "tests/ui/impl-trait/nested-return-type2.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c771fec3329ef1d8c66697daf9517501d0c129a/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c771fec3329ef1d8c66697daf9517501d0c129a/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr?ref=1c771fec3329ef1d8c66697daf9517501d0c129a", "patch": "@@ -1,17 +0,0 @@\n-warning: opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n-  --> $DIR/nested-return-type2.rs:28:24\n-   |\n-LL |     type Assoc: Duh;\n-   |                 --- this associated type bound is unsatisfied for `impl Send`\n-...\n-LL | fn foo() -> impl Trait<Assoc = impl Send> {\n-   |                        ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n-help: add this bound\n-   |\n-LL | fn foo() -> impl Trait<Assoc = impl Send + Duh> {\n-   |                                          +++++\n-\n-warning: 1 warning emitted\n-"}, {"sha": "74b4dae22ebfd32a5ee845c1ec3d8834f4bc447e", "filename": "tests/ui/impl-trait/nested-return-type3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5189cc7e45991e1c6e9a4218c80d54441b346a9/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5189cc7e45991e1c6e9a4218c80d54441b346a9/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.rs?ref=e5189cc7e45991e1c6e9a4218c80d54441b346a9", "patch": "@@ -13,7 +13,6 @@ impl<F: Duh> Trait for F {\n }\n \n fn foo() -> impl Trait<Assoc = impl Send> {\n-    //~^ WARN opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n     42\n }\n "}, {"sha": "632de71aa4c880246ad942242eae3b6ab01f4beb", "filename": "tests/ui/impl-trait/nested-return-type3.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c771fec3329ef1d8c66697daf9517501d0c129a/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c771fec3329ef1d8c66697daf9517501d0c129a/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.stderr?ref=1c771fec3329ef1d8c66697daf9517501d0c129a", "patch": "@@ -1,17 +0,0 @@\n-warning: opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n-  --> $DIR/nested-return-type3.rs:15:24\n-   |\n-LL |     type Assoc: Duh;\n-   |                 --- this associated type bound is unsatisfied for `impl Send`\n-...\n-LL | fn foo() -> impl Trait<Assoc = impl Send> {\n-   |                        ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n-help: add this bound\n-   |\n-LL | fn foo() -> impl Trait<Assoc = impl Send + Duh> {\n-   |                                          +++++\n-\n-warning: 1 warning emitted\n-"}]}