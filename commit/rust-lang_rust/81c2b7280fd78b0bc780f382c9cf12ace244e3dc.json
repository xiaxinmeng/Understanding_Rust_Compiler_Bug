{"sha": "81c2b7280fd78b0bc780f382c9cf12ace244e3dc", "node_id": "C_kwDOAAsO6NoAKDgxYzJiNzI4MGZkNzhiMGJjNzgwZjM4MmM5Y2YxMmFjZTI0NGUzZGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-29T17:24:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-29T17:24:29Z"}, "message": "Rollup merge of #104531 - ohno418:recover-fn-traits-with-lifetime-params, r=estebank\n\nProvide a better error and a suggestion for `Fn` traits with lifetime params\n\nGiven `Fn`-family traits with lifetime params in trait bounds like `fn f(_: impl Fn<'a>(&'a str) -> bool)`, we currently produce many unhelpful errors.\n\nThis PR allows these situations to suggest simply using Higher-Rank Trait Bounds like `for<'a> Fn(&'a str) -> bool`.\n\nFixes https://github.com/rust-lang/rust/issues/103490.", "tree": {"sha": "0e16d32a9bce04b2184771790f7709e053f2d169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e16d32a9bce04b2184771790f7709e053f2d169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81c2b7280fd78b0bc780f382c9cf12ace244e3dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjrc1NCRBK7hj4Ov3rIwAAOnoIAHkF4HnIDw1SWyiyhMRZwQv0\nKjCA+dJ9PhEwkPzEr6i+6nBQMakRCgLFNwus/WX3xLoQcHitrV2napvxELjFnA0M\nQsPfXG1kYEGF8WrqcOTdam3Q0kSTJN/87K3lRSBk/UuTnMz7IHxwccP6wmb8QKaC\nEJkgFLecEJNE/+M8tWYPrbbpwwSDziJE+yn9MeOTA6YjPRR4+Ms9rTdYRePI6KlL\nfRNpPyEm2m9oZ+KWwQjVRFYS7Ki6TEZ93XjKGexoXz2FcluL9NF+H56G3ZQzTVIm\nZYKytKqbAcxBo1615qnmUPqyf/T6qlhBOllzAFRumfUyDiZ+oBqURn18KH+/LJk=\n=PgG2\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e16d32a9bce04b2184771790f7709e053f2d169\nparent 29d76cc6f5064e393440019198328b4424302633\nparent e5281c389d5bffabaa0a9762314808fb6c2803a3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672334669 +0100\ncommitter GitHub <noreply@github.com> 1672334669 +0100\n\nRollup merge of #104531 - ohno418:recover-fn-traits-with-lifetime-params, r=estebank\n\nProvide a better error and a suggestion for `Fn` traits with lifetime params\n\nGiven `Fn`-family traits with lifetime params in trait bounds like `fn f(_: impl Fn<'a>(&'a str) -> bool)`, we currently produce many unhelpful errors.\n\nThis PR allows these situations to suggest simply using Higher-Rank Trait Bounds like `for<'a> Fn(&'a str) -> bool`.\n\nFixes https://github.com/rust-lang/rust/issues/103490.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81c2b7280fd78b0bc780f382c9cf12ace244e3dc", "html_url": "https://github.com/rust-lang/rust/commit/81c2b7280fd78b0bc780f382c9cf12ace244e3dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81c2b7280fd78b0bc780f382c9cf12ace244e3dc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29d76cc6f5064e393440019198328b4424302633", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d76cc6f5064e393440019198328b4424302633", "html_url": "https://github.com/rust-lang/rust/commit/29d76cc6f5064e393440019198328b4424302633"}, {"sha": "e5281c389d5bffabaa0a9762314808fb6c2803a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5281c389d5bffabaa0a9762314808fb6c2803a3", "html_url": "https://github.com/rust-lang/rust/commit/e5281c389d5bffabaa0a9762314808fb6c2803a3"}], "stats": {"total": 179, "additions": 176, "deletions": 3}, "files": [{"sha": "265c03e40b7f05c2b3255a10a335402c808d9bc1", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c2b7280fd78b0bc780f382c9cf12ace244e3dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2b7280fd78b0bc780f382c9cf12ace244e3dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=81c2b7280fd78b0bc780f382c9cf12ace244e3dc", "patch": "@@ -2423,7 +2423,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the parameter list of a function, including the `(` and `)` delimiters.\n-    fn parse_fn_params(&mut self, req_name: ReqName) -> PResult<'a, Vec<Param>> {\n+    pub(super) fn parse_fn_params(&mut self, req_name: ReqName) -> PResult<'a, Vec<Param>> {\n         let mut first_param = true;\n         // Parse the arguments, starting out with `self` being allowed...\n         let (mut params, _) = self.parse_paren_comma_seq(|p| {"}, {"sha": "fb5dea457e1d1e6cdf571328c000aab98a297a91", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 93, "deletions": 2, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/81c2b7280fd78b0bc780f382c9cf12ace244e3dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2b7280fd78b0bc780f382c9cf12ace244e3dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=81c2b7280fd78b0bc780f382c9cf12ace244e3dc", "patch": "@@ -933,15 +933,20 @@ impl<'a> Parser<'a> {\n         has_parens: bool,\n         modifiers: BoundModifiers,\n     ) -> PResult<'a, GenericBound> {\n-        let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-        let path = if self.token.is_keyword(kw::Fn)\n+        let mut lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n+        let mut path = if self.token.is_keyword(kw::Fn)\n             && self.look_ahead(1, |tok| tok.kind == TokenKind::OpenDelim(Delimiter::Parenthesis))\n             && let Some(path) = self.recover_path_from_fn()\n         {\n             path\n         } else {\n             self.parse_path(PathStyle::Type)?\n         };\n+\n+        if self.may_recover() && self.token == TokenKind::OpenDelim(Delimiter::Parenthesis) {\n+            self.recover_fn_trait_with_lifetime_params(&mut path, &mut lifetime_defs)?;\n+        }\n+\n         if has_parens {\n             if self.token.is_like_plus() {\n                 // Someone has written something like `&dyn (Trait + Other)`. The correct code\n@@ -1016,6 +1021,92 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Recover from `Fn`-family traits (Fn, FnMut, FnOnce) with lifetime arguments\n+    /// (e.g. `FnOnce<'a>(&'a str) -> bool`). Up to generic arguments have already\n+    /// been eaten.\n+    fn recover_fn_trait_with_lifetime_params(\n+        &mut self,\n+        fn_path: &mut ast::Path,\n+        lifetime_defs: &mut Vec<GenericParam>,\n+    ) -> PResult<'a, ()> {\n+        let fn_path_segment = fn_path.segments.last_mut().unwrap();\n+        let generic_args = if let Some(p_args) = &fn_path_segment.args {\n+            p_args.clone().into_inner()\n+        } else {\n+            // Normally it wouldn't come here because the upstream should have parsed\n+            // generic parameters (otherwise it's impossible to call this function).\n+            return Ok(());\n+        };\n+        let lifetimes =\n+            if let ast::GenericArgs::AngleBracketed(ast::AngleBracketedArgs { span: _, args }) =\n+                &generic_args\n+            {\n+                args.into_iter()\n+                    .filter_map(|arg| {\n+                        if let ast::AngleBracketedArg::Arg(generic_arg) = arg\n+                            && let ast::GenericArg::Lifetime(lifetime) = generic_arg {\n+                            Some(lifetime)\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                    .collect()\n+            } else {\n+                Vec::new()\n+            };\n+        // Only try to recover if the trait has lifetime params.\n+        if lifetimes.is_empty() {\n+            return Ok(());\n+        }\n+\n+        // Parse `(T, U) -> R`.\n+        let inputs_lo = self.token.span;\n+        let inputs: Vec<_> =\n+            self.parse_fn_params(|_| false)?.into_iter().map(|input| input.ty).collect();\n+        let inputs_span = inputs_lo.to(self.prev_token.span);\n+        let output = self.parse_ret_ty(AllowPlus::No, RecoverQPath::No, RecoverReturnSign::No)?;\n+        let args = ast::ParenthesizedArgs {\n+            span: fn_path_segment.span().to(self.prev_token.span),\n+            inputs,\n+            inputs_span,\n+            output,\n+        }\n+        .into();\n+        *fn_path_segment =\n+            ast::PathSegment { ident: fn_path_segment.ident, args, id: ast::DUMMY_NODE_ID };\n+\n+        // Convert parsed `<'a>` in `Fn<'a>` into `for<'a>`.\n+        let mut generic_params = lifetimes\n+            .iter()\n+            .map(|lt| GenericParam {\n+                id: lt.id,\n+                ident: lt.ident,\n+                attrs: ast::AttrVec::new(),\n+                bounds: Vec::new(),\n+                is_placeholder: false,\n+                kind: ast::GenericParamKind::Lifetime,\n+                colon_span: None,\n+            })\n+            .collect::<Vec<GenericParam>>();\n+        lifetime_defs.append(&mut generic_params);\n+\n+        let generic_args_span = generic_args.span();\n+        let mut err =\n+            self.struct_span_err(generic_args_span, \"`Fn` traits cannot take lifetime parameters\");\n+        let snippet = format!(\n+            \"for<{}> \",\n+            lifetimes.iter().map(|lt| lt.ident.as_str()).intersperse(\", \").collect::<String>(),\n+        );\n+        let before_fn_path = fn_path.span.shrink_to_lo();\n+        err.multipart_suggestion(\n+            \"consider using a higher-ranked trait bound instead\",\n+            vec![(generic_args_span, \"\".to_owned()), (before_fn_path, snippet)],\n+            Applicability::MaybeIncorrect,\n+        )\n+        .emit();\n+        Ok(())\n+    }\n+\n     pub(super) fn check_lifetime(&mut self) -> bool {\n         self.expected_tokens.push(TokenType::Lifetime);\n         self.token.is_lifetime()"}, {"sha": "4b096be591a049ff7c50a0a354bfde6a84ce118a", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-malformed-lifetime-generics.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/81c2b7280fd78b0bc780f382c9cf12ace244e3dc/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-malformed-lifetime-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c2b7280fd78b0bc780f382c9cf12ace244e3dc/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-malformed-lifetime-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-malformed-lifetime-generics.rs?ref=81c2b7280fd78b0bc780f382c9cf12ace244e3dc", "patch": "@@ -0,0 +1,20 @@\n+// Test that Fn-family traits with lifetime parameters shouldn't compile and\n+// we suggest the usage of higher-rank trait bounds instead.\n+\n+fn fa(_: impl Fn<'a>(&'a str) -> bool) {}\n+//~^ ERROR `Fn` traits cannot take lifetime parameters\n+\n+fn fb(_: impl FnMut<'a, 'b>(&'a str, &'b str) -> bool) {}\n+//~^ ERROR `Fn` traits cannot take lifetime parameters\n+\n+fn fc(_: impl std::fmt::Display + FnOnce<'a>(&'a str) -> bool + std::fmt::Debug) {}\n+//~^ ERROR `Fn` traits cannot take lifetime parameters\n+\n+use std::ops::Fn as AliasedFn;\n+fn fd(_: impl AliasedFn<'a>(&'a str) -> bool) {}\n+//~^ ERROR `Fn` traits cannot take lifetime parameters\n+\n+fn fe<F>(_: F) where F: Fn<'a>(&'a str) -> bool {}\n+//~^ ERROR `Fn` traits cannot take lifetime parameters\n+\n+fn main() {}"}, {"sha": "e8f6d63b5ab8ad0bbd355506e99b339c97667f1d", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-malformed-lifetime-generics.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/81c2b7280fd78b0bc780f382c9cf12ace244e3dc/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-malformed-lifetime-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c2b7280fd78b0bc780f382c9cf12ace244e3dc/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-malformed-lifetime-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-malformed-lifetime-generics.stderr?ref=81c2b7280fd78b0bc780f382c9cf12ace244e3dc", "patch": "@@ -0,0 +1,62 @@\n+error: `Fn` traits cannot take lifetime parameters\n+  --> $DIR/hrtb-malformed-lifetime-generics.rs:4:17\n+   |\n+LL | fn fa(_: impl Fn<'a>(&'a str) -> bool) {}\n+   |                 ^^^^\n+   |\n+help: consider using a higher-ranked trait bound instead\n+   |\n+LL - fn fa(_: impl Fn<'a>(&'a str) -> bool) {}\n+LL + fn fa(_: impl for<'a> Fn(&'a str) -> bool) {}\n+   |\n+\n+error: `Fn` traits cannot take lifetime parameters\n+  --> $DIR/hrtb-malformed-lifetime-generics.rs:7:20\n+   |\n+LL | fn fb(_: impl FnMut<'a, 'b>(&'a str, &'b str) -> bool) {}\n+   |                    ^^^^^^^^\n+   |\n+help: consider using a higher-ranked trait bound instead\n+   |\n+LL - fn fb(_: impl FnMut<'a, 'b>(&'a str, &'b str) -> bool) {}\n+LL + fn fb(_: impl for<'a, 'b> FnMut(&'a str, &'b str) -> bool) {}\n+   |\n+\n+error: `Fn` traits cannot take lifetime parameters\n+  --> $DIR/hrtb-malformed-lifetime-generics.rs:10:41\n+   |\n+LL | fn fc(_: impl std::fmt::Display + FnOnce<'a>(&'a str) -> bool + std::fmt::Debug) {}\n+   |                                         ^^^^\n+   |\n+help: consider using a higher-ranked trait bound instead\n+   |\n+LL - fn fc(_: impl std::fmt::Display + FnOnce<'a>(&'a str) -> bool + std::fmt::Debug) {}\n+LL + fn fc(_: impl std::fmt::Display + for<'a> FnOnce(&'a str) -> bool + std::fmt::Debug) {}\n+   |\n+\n+error: `Fn` traits cannot take lifetime parameters\n+  --> $DIR/hrtb-malformed-lifetime-generics.rs:14:24\n+   |\n+LL | fn fd(_: impl AliasedFn<'a>(&'a str) -> bool) {}\n+   |                        ^^^^\n+   |\n+help: consider using a higher-ranked trait bound instead\n+   |\n+LL - fn fd(_: impl AliasedFn<'a>(&'a str) -> bool) {}\n+LL + fn fd(_: impl for<'a> AliasedFn(&'a str) -> bool) {}\n+   |\n+\n+error: `Fn` traits cannot take lifetime parameters\n+  --> $DIR/hrtb-malformed-lifetime-generics.rs:17:27\n+   |\n+LL | fn fe<F>(_: F) where F: Fn<'a>(&'a str) -> bool {}\n+   |                           ^^^^\n+   |\n+help: consider using a higher-ranked trait bound instead\n+   |\n+LL - fn fe<F>(_: F) where F: Fn<'a>(&'a str) -> bool {}\n+LL + fn fe<F>(_: F) where F: for<'a> Fn(&'a str) -> bool {}\n+   |\n+\n+error: aborting due to 5 previous errors\n+"}]}