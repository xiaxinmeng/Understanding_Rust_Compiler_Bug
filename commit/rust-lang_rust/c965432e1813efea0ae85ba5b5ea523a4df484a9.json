{"sha": "c965432e1813efea0ae85ba5b5ea523a4df484a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NjU0MzJlMTgxM2VmZWEwYWU4NWJhNWI1ZWE1MjNhNGRmNDg0YTk=", "commit": {"author": {"name": "Umesh Kalappa", "email": "Umesh.Kallapa@windriver.com", "date": "2019-10-30T09:29:16Z"}, "committer": {"name": "BaoshanPang", "email": "pangbw@gmail.com", "date": "2019-11-07T03:51:25Z"}, "message": "Ignore these tests ,since the called commands doesn't exist in VxWorks", "tree": {"sha": "149ad5ba419d90d80fcbc61bd06df06ccf595ffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/149ad5ba419d90d80fcbc61bd06df06ccf595ffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c965432e1813efea0ae85ba5b5ea523a4df484a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c965432e1813efea0ae85ba5b5ea523a4df484a9", "html_url": "https://github.com/rust-lang/rust/commit/c965432e1813efea0ae85ba5b5ea523a4df484a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c965432e1813efea0ae85ba5b5ea523a4df484a9/comments", "author": null, "committer": {"login": "BaoshanPang", "id": 3380860, "node_id": "MDQ6VXNlcjMzODA4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3380860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BaoshanPang", "html_url": "https://github.com/BaoshanPang", "followers_url": "https://api.github.com/users/BaoshanPang/followers", "following_url": "https://api.github.com/users/BaoshanPang/following{/other_user}", "gists_url": "https://api.github.com/users/BaoshanPang/gists{/gist_id}", "starred_url": "https://api.github.com/users/BaoshanPang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BaoshanPang/subscriptions", "organizations_url": "https://api.github.com/users/BaoshanPang/orgs", "repos_url": "https://api.github.com/users/BaoshanPang/repos", "events_url": "https://api.github.com/users/BaoshanPang/events{/privacy}", "received_events_url": "https://api.github.com/users/BaoshanPang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f0e16473de5ec010f44290a8c3ea1d90e0ad7a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0e16473de5ec010f44290a8c3ea1d90e0ad7a2", "html_url": "https://github.com/rust-lang/rust/commit/3f0e16473de5ec010f44290a8c3ea1d90e0ad7a2"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "b1274a08cbe7729a798ec8c3d6ce9dc0a9d9f86b", "filename": "src/libstd/process.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c965432e1813efea0ae85ba5b5ea523a4df484a9/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c965432e1813efea0ae85ba5b5ea523a4df484a9/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=c965432e1813efea0ae85ba5b5ea523a4df484a9", "patch": "@@ -1661,7 +1661,7 @@ mod tests {\n     // FIXME(#10380) these tests should not all be ignored on android.\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn smoke() {\n         let p = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).spawn()\n@@ -1683,7 +1683,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn exit_reported_right() {\n         let p = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn()\n@@ -1698,7 +1698,7 @@ mod tests {\n \n     #[test]\n     #[cfg(unix)]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn signal_reported_right() {\n         use crate::os::unix::process::ExitStatusExt;\n \n@@ -1726,7 +1726,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn stdout_works() {\n         if cfg!(target_os = \"windows\") {\n             let mut cmd = Command::new(\"cmd\");\n@@ -1740,7 +1740,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n+    #[cfg_attr(any(windows, target_os = \"android\", target_os = \"vxworks\"), ignore)]\n     fn set_current_dir_works() {\n         let mut cmd = Command::new(\"/bin/sh\");\n         cmd.arg(\"-c\").arg(\"pwd\")\n@@ -1750,7 +1750,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n+    #[cfg_attr(any(windows, target_os = \"android\", target_os = \"vxworks\"), ignore)]\n     fn stdin_works() {\n         let mut p = Command::new(\"/bin/sh\")\n                             .arg(\"-c\").arg(\"read line; echo $line\")\n@@ -1766,7 +1766,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_process_status() {\n         let mut status = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).status().unwrap()\n@@ -1792,7 +1792,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_process_output_output() {\n         let Output {status, stdout, stderr}\n              = if cfg!(target_os = \"windows\") {\n@@ -1808,7 +1808,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_process_output_error() {\n         let Output {status, stdout, stderr}\n              = if cfg!(target_os = \"windows\") {\n@@ -1823,7 +1823,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_finish_once() {\n         let mut prog = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n@@ -1834,7 +1834,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_finish_twice() {\n         let mut prog = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n@@ -1846,7 +1846,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_wait_with_output_once() {\n         let prog = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"echo hello\"]).stdout(Stdio::piped()).spawn().unwrap()\n@@ -1881,6 +1881,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_override_env() {\n         use crate::env;\n \n@@ -1901,6 +1902,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_add_to_env() {\n         let result = env_cmd().env(\"RUN_TEST_NEW_ENV\", \"123\").output().unwrap();\n         let output = String::from_utf8_lossy(&result.stdout).to_string();\n@@ -1910,6 +1912,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_capture_env_at_spawn() {\n         use crate::env;\n \n@@ -1965,6 +1968,7 @@ mod tests {\n \n     // Regression tests for #30862.\n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_interior_nul_in_env_key_is_error() {\n         match env_cmd().env(\"has-some-\\0\\0s-inside\", \"value\").spawn() {\n             Err(e) => assert_eq!(e.kind(), ErrorKind::InvalidInput),\n@@ -1973,6 +1977,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_interior_nul_in_env_value_is_error() {\n         match env_cmd().env(\"key\", \"has-some-\\0\\0s-inside\").spawn() {\n             Err(e) => assert_eq!(e.kind(), ErrorKind::InvalidInput),"}]}