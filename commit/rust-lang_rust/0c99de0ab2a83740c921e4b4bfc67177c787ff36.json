{"sha": "0c99de0ab2a83740c921e4b4bfc67177c787ff36", "node_id": "C_kwDOAAsO6NoAKDBjOTlkZTBhYjJhODM3NDBjOTIxZTRiNGJmYzY3MTc3Yzc4N2ZmMzY", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2021-10-12T11:13:19Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2021-10-12T11:13:19Z"}, "message": "Add a suggestion", "tree": {"sha": "e2c280150a7029699d2793e7c59cebd55d80bf5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2c280150a7029699d2793e7c59cebd55d80bf5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c99de0ab2a83740c921e4b4bfc67177c787ff36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c99de0ab2a83740c921e4b4bfc67177c787ff36", "html_url": "https://github.com/rust-lang/rust/commit/0c99de0ab2a83740c921e4b4bfc67177c787ff36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c99de0ab2a83740c921e4b4bfc67177c787ff36/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99bfee720119240d8eb64c2fd395aeaecc683b9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/99bfee720119240d8eb64c2fd395aeaecc683b9a", "html_url": "https://github.com/rust-lang/rust/commit/99bfee720119240d8eb64c2fd395aeaecc683b9a"}], "stats": {"total": 102, "additions": 45, "deletions": 57}, "files": [{"sha": "a83f38e3d516e5c74c345cc2de119f57468710e2", "filename": "clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0c99de0ab2a83740c921e4b4bfc67177c787ff36/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c99de0ab2a83740c921e4b4bfc67177c787ff36/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=0c99de0ab2a83740c921e4b4bfc67177c787ff36", "patch": "@@ -1,13 +1,15 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::SymbolStr;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n@@ -18,15 +20,19 @@ declare_clippy_lint! {\n     /// The arm is unreachable, which is likely a mistake\n     ///\n     /// ### Example\n-    /// ```rust,no_run\n+    /// ```rust\n+    /// # let text = \"Foo\";\n+    ///\n     /// match &*text.to_ascii_lowercase() {\n     ///     \"foo\" => {},\n     ///     \"Bar\" => {},\n     ///     _ => {},\n     /// }\n     /// ```\n     /// Use instead:\n-    /// ```rust,no_run\n+    /// ```rust\n+    /// # let text = \"Foo\";\n+    ///\n     /// match &*text.to_ascii_lowercase() {\n     ///     \"foo\" => {},\n     ///     \"bar\" => {},\n@@ -64,8 +70,8 @@ impl LateLintPass<'_> for MatchStrCaseMismatch {\n                 visitor.visit_expr(match_expr);\n \n                 if let Some(case_method) = visitor.case_method {\n-                    if let Some(bad_case) = verify_case(&case_method, arms) {\n-                        lint(cx, expr.span, &case_method, bad_case);\n+                    if let Some((bad_case_span, bad_case_str)) = verify_case(&case_method, arms) {\n+                        lint(cx, &case_method, bad_case_span, &bad_case_str);\n                     }\n                 }\n             }\n@@ -119,9 +125,7 @@ fn get_case_method(segment_ident_str: &str) -> Option<CaseMethod> {\n     }\n }\n \n-fn verify_case(case_method: &CaseMethod, arms: &'_ [Arm<'_>]) -> Option<Span> {\n-    let mut bad_case = None;\n-\n+fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(Span, SymbolStr)> {\n     let case_check = match case_method {\n         CaseMethod::LowerCase => |input: &str| -> bool { input.chars().all(char::is_lowercase) },\n         CaseMethod::AsciiLowerCase => |input: &str| -> bool { input.chars().all(|c| matches!(c, 'a'..='z')) },\n@@ -136,31 +140,32 @@ fn verify_case(case_method: &CaseMethod, arms: &'_ [Arm<'_>]) -> Option<Span> {\n                                 ..\n                             }) = arm.pat.kind;\n             if let LitKind::Str(symbol, _) = lit.node;\n-            if !case_check(&symbol.as_str());\n+            let input = symbol.as_str();\n+            if !case_check(&input);\n             then {\n-                bad_case = Some(lit.span);\n-                break;\n+                return Some((lit.span, input));\n             }\n         }\n     }\n \n-    bad_case\n+    None\n }\n \n-fn lint(cx: &LateContext<'_>, expr_span: Span, case_method: &CaseMethod, bad_case_span: Span) {\n-    let method_str = match case_method {\n-        CaseMethod::LowerCase => \"to_lower_case\",\n-        CaseMethod::AsciiLowerCase => \"to_ascii_lowercase\",\n-        CaseMethod::UpperCase => \"to_uppercase\",\n-        CaseMethod::AsciiUppercase => \"to_ascii_uppercase\",\n+fn lint(cx: &LateContext<'_>, case_method: &CaseMethod, bad_case_span: Span, bad_case_str: &str) {\n+    let (method_str, suggestion) = match case_method {\n+        CaseMethod::LowerCase => (\"to_lower_case\", bad_case_str.to_lowercase()),\n+        CaseMethod::AsciiLowerCase => (\"to_ascii_lowercase\", bad_case_str.to_ascii_lowercase()),\n+        CaseMethod::UpperCase => (\"to_uppercase\", bad_case_str.to_uppercase()),\n+        CaseMethod::AsciiUppercase => (\"to_ascii_uppercase\", bad_case_str.to_ascii_uppercase()),\n     };\n \n-    span_lint_and_help(\n+    span_lint_and_sugg(\n         cx,\n         MATCH_STR_CASE_MISMATCH,\n-        expr_span,\n-        \"this `match` expression alters case, but has non-compliant arms\",\n-        Some(bad_case_span),\n+        bad_case_span,\n+        \"this `match` arm has a differing case than its expression\",\n         &*format!(\"consider changing the case of this arm to respect `{}`\", method_str),\n+        format!(\"\\\"{}\\\"\", suggestion),\n+        Applicability::MachineApplicable,\n     );\n }"}, {"sha": "fa023477a9c334d20c7a934e93091b270bd41bf0", "filename": "tests/ui/match_str_case_mismatch.stderr", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0c99de0ab2a83740c921e4b4bfc67177c787ff36/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c99de0ab2a83740c921e4b4bfc67177c787ff36/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.stderr?ref=0c99de0ab2a83740c921e4b4bfc67177c787ff36", "patch": "@@ -1,53 +1,36 @@\n-error: this `match` expression alters case, but has non-compliant arms\n-  --> $DIR/match_str_case_mismatch.rs:66:5\n-   |\n-LL | /     match var.to_ascii_lowercase().as_str() {\n-LL | |         \"foo\" => {},\n-LL | |         \"Bar\" => {},\n-LL | |         _ => {},\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: `-D clippy::match-str-case-mismatch` implied by `-D warnings`\n-help: consider changing the case of this arm to respect `to_ascii_lowercase`\n+error: this `match` arm has a differing case than its expression\n   --> $DIR/match_str_case_mismatch.rs:68:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n-\n-error: this `match` expression alters case, but has non-compliant arms\n-  --> $DIR/match_str_case_mismatch.rs:76:5\n-   |\n-LL | /     match &*var.to_ascii_lowercase() {\n-LL | |         \"foo\" => {},\n-LL | |         \"Bar\" => {},\n-LL | |         _ => {},\n-LL | |     }\n-   | |_____^\n    |\n+   = note: `-D clippy::match-str-case-mismatch` implied by `-D warnings`\n help: consider changing the case of this arm to respect `to_ascii_lowercase`\n+   |\n+LL |         \"bar\" => {},\n+   |         ~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n   --> $DIR/match_str_case_mismatch.rs:78:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n-\n-error: this `match` expression alters case, but has non-compliant arms\n-  --> $DIR/match_str_case_mismatch.rs:86:5\n-   |\n-LL | /     match &*var\n-LL | |         .to_ascii_lowercase()\n-LL | |         .to_uppercase()\n-LL | |         .to_lowercase()\n-...  |\n-LL | |         _ => {},\n-LL | |     }\n-   | |_____^\n    |\n-help: consider changing the case of this arm to respect `to_ascii_uppercase`\n+help: consider changing the case of this arm to respect `to_ascii_lowercase`\n+   |\n+LL |         \"bar\" => {},\n+   |         ~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n   --> $DIR/match_str_case_mismatch.rs:93:9\n    |\n LL |         \"bAR\" => {},\n    |         ^^^^^\n+   |\n+help: consider changing the case of this arm to respect `to_ascii_uppercase`\n+   |\n+LL |         \"BAR\" => {},\n+   |         ~~~~~\n \n error: aborting due to 3 previous errors\n "}]}