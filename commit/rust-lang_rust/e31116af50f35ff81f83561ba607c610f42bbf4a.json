{"sha": "e31116af50f35ff81f83561ba607c610f42bbf4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTExNmFmNTBmMzVmZjgxZjgzNTYxYmE2MDdjNjEwZjQyYmJmNGE=", "commit": {"author": {"name": "Naz\u0131m Can Alt\u0131nova", "email": "canaltinova@gmail.com", "date": "2020-08-04T20:00:32Z"}, "committer": {"name": "Naz\u0131m Can Alt\u0131nova", "email": "canaltinova@gmail.com", "date": "2020-08-07T11:13:37Z"}, "message": "Add `into_{keys,values}` methods for HashMap", "tree": {"sha": "70ae8facde07a5156cfa09dcf7384a1a64a0b277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ae8facde07a5156cfa09dcf7384a1a64a0b277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31116af50f35ff81f83561ba607c610f42bbf4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEpYetfNnk4ATM3f2Aci54bwcpZHoFAl8tN2EACgkQci54bwcp\nZHqw+BAA34ykOfNpQkT9Z2T0B71BZIFzP9JHCc7NCvA6845pmHFH1UAQYZ5CfpjZ\nuCkUHsOzgr+GstjDDcYX/YsNiZI2yLz52/PqbWT41AmUFqtxv8yIrRzmxS8o/QGS\nj26WT5tQG7OLpv94IZSyJLrJ98q2fdACRTlDyP5Ue9UC70VGSMgq2x3rFGf5S50w\nZwrw99I8b7q4mtKveATLBqEAHoMkCuVkFC7+Sq/noVSKEn3uqX4zY5gdZLgC56G1\ngME4lfhpkNCfdClsGiJywkiu5ps8UscWMEMG+xBvJGr9K9T/U79B3QNGd8eWf6rS\nCRJbPypCmEJwfFeHloYaqFv08E6gtCb29xpC6I8acoNqaB/yGQheFvx4WYv92pUz\nccOozQLwxMt0o0PydnD9yvwgci2SSWQeMU28xgD/eewl61JwXyArPhgrgtarDpxh\nXpiDI5gsPwQGnFDgyjYshBsqe5hYjMgSRFvoEU4zDq2025zBd0rDWFUZeAlmrE9e\nbw/qHz9B0eGFIgC4UA554dYwN1tcgP7Av1QRlZD37YoR2F3AHFDTqpnBo/MYuiGS\n3oZ/w54xVO0cZnzhMvPnKHtS+hk/htIs3BLCPL3U/Q36+ojLjnS6vygcOgcQ+I0Q\nL45ZuZAQEapT1hIVXjY+OEAY/qj0rd5N9/92dU1ZOpC3SohONe8=\n=MkSh\n-----END PGP SIGNATURE-----", "payload": "tree 70ae8facde07a5156cfa09dcf7384a1a64a0b277\nparent 8b26609481c956a666f9189738f1ba611078e1ab\nauthor Naz\u0131m Can Alt\u0131nova <canaltinova@gmail.com> 1596571232 +0200\ncommitter Naz\u0131m Can Alt\u0131nova <canaltinova@gmail.com> 1596798817 +0200\n\nAdd `into_{keys,values}` methods for HashMap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31116af50f35ff81f83561ba607c610f42bbf4a", "html_url": "https://github.com/rust-lang/rust/commit/e31116af50f35ff81f83561ba607c610f42bbf4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31116af50f35ff81f83561ba607c610f42bbf4a/comments", "author": {"login": "canova", "id": 466239, "node_id": "MDQ6VXNlcjQ2NjIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/466239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canova", "html_url": "https://github.com/canova", "followers_url": "https://api.github.com/users/canova/followers", "following_url": "https://api.github.com/users/canova/following{/other_user}", "gists_url": "https://api.github.com/users/canova/gists{/gist_id}", "starred_url": "https://api.github.com/users/canova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canova/subscriptions", "organizations_url": "https://api.github.com/users/canova/orgs", "repos_url": "https://api.github.com/users/canova/repos", "events_url": "https://api.github.com/users/canova/events{/privacy}", "received_events_url": "https://api.github.com/users/canova/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canova", "id": 466239, "node_id": "MDQ6VXNlcjQ2NjIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/466239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canova", "html_url": "https://github.com/canova", "followers_url": "https://api.github.com/users/canova/followers", "following_url": "https://api.github.com/users/canova/following{/other_user}", "gists_url": "https://api.github.com/users/canova/gists{/gist_id}", "starred_url": "https://api.github.com/users/canova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canova/subscriptions", "organizations_url": "https://api.github.com/users/canova/orgs", "repos_url": "https://api.github.com/users/canova/repos", "events_url": "https://api.github.com/users/canova/events{/privacy}", "received_events_url": "https://api.github.com/users/canova/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b26609481c956a666f9189738f1ba611078e1ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b26609481c956a666f9189738f1ba611078e1ab", "html_url": "https://github.com/rust-lang/rust/commit/8b26609481c956a666f9189738f1ba611078e1ab"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "f12009e4c209483c2d1b7ee8eae1f5e3b7bc4920", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/e31116af50f35ff81f83561ba607c610f42bbf4a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31116af50f35ff81f83561ba607c610f42bbf4a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=e31116af50f35ff81f83561ba607c610f42bbf4a", "patch": "@@ -872,6 +872,52 @@ where\n     {\n         self.base.retain(f)\n     }\n+\n+    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `K`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_into_keys_values)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(\"a\", 1);\n+    /// map.insert(\"b\", 2);\n+    /// map.insert(\"c\", 3);\n+    ///\n+    /// let vec: Vec<&str> = map.into_keys().collect();\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+    pub fn into_keys(self) -> IntoKeys<K, V> {\n+        IntoKeys { inner: self.into_iter() }\n+    }\n+\n+    /// Creates a consuming iterator visiting all the values in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `V`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_into_keys_values)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(\"a\", 1);\n+    /// map.insert(\"b\", 2);\n+    /// map.insert(\"c\", 3);\n+    ///\n+    /// let vec: Vec<i32> = map.into_values().collect();\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+    pub fn into_values(self) -> IntoValues<K, V> {\n+        IntoValues { inner: self.into_iter() }\n+    }\n }\n \n impl<K, V, S> HashMap<K, V, S>\n@@ -1154,6 +1200,28 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n+/// An owning iterator over the keys of a `HashMap`.\n+///\n+/// This `struct` is created by the [`into_keys`] method on [`HashMap`].\n+/// See its documentation for more.\n+///\n+/// [`into_keys`]: HashMap::into_keys\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+pub struct IntoKeys<K, V> {\n+    inner: IntoIter<K, V>,\n+}\n+\n+/// An owning iterator over the values of a `HashMap`.\n+///\n+/// This `struct` is created by the [`into_values`] method on [`HashMap`].\n+/// See its documentation for more.\n+///\n+/// [`into_values`]: HashMap::into_values\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+pub struct IntoValues<K, V> {\n+    inner: IntoIter<K, V>,\n+}\n+\n /// A builder for computing where in a HashMap a key-value pair would be stored.\n ///\n /// See the [`HashMap::raw_entry_mut`] docs for usage examples.\n@@ -1827,6 +1895,66 @@ where\n     }\n }\n \n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> Iterator for IntoKeys<K, V> {\n+    type Item = K;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<K> {\n+        self.inner.next().map(|(k, _)| k)\n+    }\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+}\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n+    #[inline]\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> FusedIterator for IntoKeys<K, V> {}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K: Debug, V: Debug> fmt::Debug for IntoKeys<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.inner.iter()).finish()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> Iterator for IntoValues<K, V> {\n+    type Item = V;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<V> {\n+        self.inner.next().map(|(_, v)| v)\n+    }\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+}\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n+    #[inline]\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K, V> FusedIterator for IntoValues<K, V> {}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+impl<K: Debug, V: Debug> fmt::Debug for IntoValues<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.inner.iter()).finish()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     type Item = (K, V);"}]}