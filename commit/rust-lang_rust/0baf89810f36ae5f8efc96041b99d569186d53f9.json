{"sha": "0baf89810f36ae5f8efc96041b99d569186d53f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYWY4OTgxMGYzNmFlNWY4ZWZjOTYwNDFiOTlkNTY5MTg2ZDUzZjk=", "commit": {"author": {"name": "Hoe Hao Cheng", "email": "haochengho12907@gmail.com", "date": "2021-05-25T14:48:08Z"}, "committer": {"name": "Hoe Hao Cheng", "email": "haochengho12907@gmail.com", "date": "2021-05-25T14:48:08Z"}, "message": "Remove num_as_ne_bytes feature", "tree": {"sha": "f1b538e9f13c3323b0f5e2755b607483c00ee1f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1b538e9f13c3323b0f5e2755b607483c00ee1f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0baf89810f36ae5f8efc96041b99d569186d53f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0baf89810f36ae5f8efc96041b99d569186d53f9", "html_url": "https://github.com/rust-lang/rust/commit/0baf89810f36ae5f8efc96041b99d569186d53f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0baf89810f36ae5f8efc96041b99d569186d53f9/comments", "author": {"login": "hch12907", "id": 7030150, "node_id": "MDQ6VXNlcjcwMzAxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7030150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hch12907", "html_url": "https://github.com/hch12907", "followers_url": "https://api.github.com/users/hch12907/followers", "following_url": "https://api.github.com/users/hch12907/following{/other_user}", "gists_url": "https://api.github.com/users/hch12907/gists{/gist_id}", "starred_url": "https://api.github.com/users/hch12907/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hch12907/subscriptions", "organizations_url": "https://api.github.com/users/hch12907/orgs", "repos_url": "https://api.github.com/users/hch12907/repos", "events_url": "https://api.github.com/users/hch12907/events{/privacy}", "received_events_url": "https://api.github.com/users/hch12907/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hch12907", "id": 7030150, "node_id": "MDQ6VXNlcjcwMzAxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7030150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hch12907", "html_url": "https://github.com/hch12907", "followers_url": "https://api.github.com/users/hch12907/followers", "following_url": "https://api.github.com/users/hch12907/following{/other_user}", "gists_url": "https://api.github.com/users/hch12907/gists{/gist_id}", "starred_url": "https://api.github.com/users/hch12907/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hch12907/subscriptions", "organizations_url": "https://api.github.com/users/hch12907/orgs", "repos_url": "https://api.github.com/users/hch12907/repos", "events_url": "https://api.github.com/users/hch12907/events{/privacy}", "received_events_url": "https://api.github.com/users/hch12907/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbf1b1a7193cda17008ab590e06ad28d9924023b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf1b1a7193cda17008ab590e06ad28d9924023b", "html_url": "https://github.com/rust-lang/rust/commit/fbf1b1a7193cda17008ab590e06ad28d9924023b"}], "stats": {"total": 118, "additions": 0, "deletions": 118}, "files": [{"sha": "77132cddca272c2bdefa606776e89789ceedef4c", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0baf89810f36ae5f8efc96041b99d569186d53f9/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baf89810f36ae5f8efc96041b99d569186d53f9/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=0baf89810f36ae5f8efc96041b99d569186d53f9", "patch": "@@ -854,35 +854,6 @@ impl f32 {\n         self.to_bits().to_ne_bytes()\n     }\n \n-    /// Return the memory representation of this floating point number as a byte array in\n-    /// native byte order.\n-    ///\n-    /// [`to_ne_bytes`] should be preferred over this whenever possible.\n-    ///\n-    /// [`to_ne_bytes`]: f32::to_ne_bytes\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(num_as_ne_bytes)]\n-    /// let num = 12.5f32;\n-    /// let bytes = num.as_ne_bytes();\n-    /// assert_eq!(\n-    ///     bytes,\n-    ///     if cfg!(target_endian = \"big\") {\n-    ///         &[0x41, 0x48, 0x00, 0x00]\n-    ///     } else {\n-    ///         &[0x00, 0x00, 0x48, 0x41]\n-    ///     }\n-    /// );\n-    /// ```\n-    #[unstable(feature = \"num_as_ne_bytes\", issue = \"76976\")]\n-    #[inline]\n-    pub fn as_ne_bytes(&self) -> &[u8; 4] {\n-        // SAFETY: `f32` is a plain old datatype so we can always transmute to it\n-        unsafe { &*(self as *const Self as *const _) }\n-    }\n-\n     /// Create a floating point value from its representation as a byte array in big endian.\n     ///\n     /// # Examples"}, {"sha": "4c3f1fd16a0db51f615db89a57cfc0b5cb045c58", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0baf89810f36ae5f8efc96041b99d569186d53f9/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baf89810f36ae5f8efc96041b99d569186d53f9/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=0baf89810f36ae5f8efc96041b99d569186d53f9", "patch": "@@ -868,35 +868,6 @@ impl f64 {\n         self.to_bits().to_ne_bytes()\n     }\n \n-    /// Return the memory representation of this floating point number as a byte array in\n-    /// native byte order.\n-    ///\n-    /// [`to_ne_bytes`] should be preferred over this whenever possible.\n-    ///\n-    /// [`to_ne_bytes`]: f64::to_ne_bytes\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(num_as_ne_bytes)]\n-    /// let num = 12.5f64;\n-    /// let bytes = num.as_ne_bytes();\n-    /// assert_eq!(\n-    ///     bytes,\n-    ///     if cfg!(target_endian = \"big\") {\n-    ///         &[0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\n-    ///     } else {\n-    ///         &[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]\n-    ///     }\n-    /// );\n-    /// ```\n-    #[unstable(feature = \"num_as_ne_bytes\", issue = \"76976\")]\n-    #[inline]\n-    pub fn as_ne_bytes(&self) -> &[u8; 8] {\n-        // SAFETY: `f64` is a plain old datatype so we can always transmute to it\n-        unsafe { &*(self as *const Self as *const _) }\n-    }\n-\n     /// Create a floating point value from its representation as a byte array in big endian.\n     ///\n     /// # Examples"}, {"sha": "4af86ed98f26f0a80ee49783d460a7605abbe2bc", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0baf89810f36ae5f8efc96041b99d569186d53f9/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baf89810f36ae5f8efc96041b99d569186d53f9/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=0baf89810f36ae5f8efc96041b99d569186d53f9", "patch": "@@ -1842,36 +1842,6 @@ macro_rules! int_impl {\n             unsafe { mem::transmute(self) }\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// native byte order.\n-        ///\n-        /// [`to_ne_bytes`] should be preferred over this whenever possible.\n-        ///\n-        /// [`to_ne_bytes`]: Self::to_ne_bytes\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(num_as_ne_bytes)]\n-        #[doc = concat!(\"let num = \", $swap_op, stringify!($SelfT), \";\")]\n-        /// let bytes = num.as_ne_bytes();\n-        /// assert_eq!(\n-        ///     bytes,\n-        ///     if cfg!(target_endian = \"big\") {\n-        #[doc = concat!(\"        &\", $be_bytes)]\n-        ///     } else {\n-        #[doc = concat!(\"        &\", $le_bytes)]\n-        ///     }\n-        /// );\n-        /// ```\n-        #[unstable(feature = \"num_as_ne_bytes\", issue = \"76976\")]\n-        #[inline]\n-        pub fn as_ne_bytes(&self) -> &[u8; mem::size_of::<Self>()] {\n-            // SAFETY: integers are plain old datatypes so we can always transmute them to\n-            // arrays of bytes\n-            unsafe { &*(self as *const Self as *const _) }\n-        }\n-\n         /// Create an integer value from its representation as a byte array in\n         /// big endian.\n         ///"}, {"sha": "a525e02d5e1849f8b39238fd8ead2a26f48627f3", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0baf89810f36ae5f8efc96041b99d569186d53f9/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baf89810f36ae5f8efc96041b99d569186d53f9/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=0baf89810f36ae5f8efc96041b99d569186d53f9", "patch": "@@ -1672,36 +1672,6 @@ macro_rules! uint_impl {\n             unsafe { mem::transmute(self) }\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// native byte order.\n-        ///\n-        /// [`to_ne_bytes`] should be preferred over this whenever possible.\n-        ///\n-        /// [`to_ne_bytes`]: Self::to_ne_bytes\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(num_as_ne_bytes)]\n-        #[doc = concat!(\"let num = \", $swap_op, stringify!($SelfT), \";\")]\n-        /// let bytes = num.as_ne_bytes();\n-        /// assert_eq!(\n-        ///     bytes,\n-        ///     if cfg!(target_endian = \"big\") {\n-        #[doc = concat!(\"        &\", $be_bytes)]\n-        ///     } else {\n-        #[doc = concat!(\"        &\", $le_bytes)]\n-        ///     }\n-        /// );\n-        /// ```\n-        #[unstable(feature = \"num_as_ne_bytes\", issue = \"76976\")]\n-        #[inline]\n-        pub fn as_ne_bytes(&self) -> &[u8; mem::size_of::<Self>()] {\n-            // SAFETY: integers are plain old datatypes so we can always transmute them to\n-            // arrays of bytes\n-            unsafe { &*(self as *const Self as *const _) }\n-        }\n-\n         /// Create a native endian integer value from its representation\n         /// as a byte array in big endian.\n         ///"}]}