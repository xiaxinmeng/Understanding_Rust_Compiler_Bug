{"sha": "260aa9f554addeabeaea2320da1ec06bc5939835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MGFhOWY1NTRhZGRlYWJlYWVhMjMyMGRhMWVjMDZiYzU5Mzk4MzU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T23:01:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:09:31Z"}, "message": "Access attrs directly from HirId in rustc_passes::lang_items.", "tree": {"sha": "b0ece1865fdd7cd97ebdf5cf8bc902e5a9aff1cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ece1865fdd7cd97ebdf5cf8bc902e5a9aff1cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/260aa9f554addeabeaea2320da1ec06bc5939835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/260aa9f554addeabeaea2320da1ec06bc5939835", "html_url": "https://github.com/rust-lang/rust/commit/260aa9f554addeabeaea2320da1ec06bc5939835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/260aa9f554addeabeaea2320da1ec06bc5939835/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a50454d6c81b230532ff0ed2be53846409107468", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50454d6c81b230532ff0ed2be53846409107468", "html_url": "https://github.com/rust-lang/rust/commit/a50454d6c81b230532ff0ed2be53846409107468"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "7e6bb9779f07700411531cfa9263c8a56963a2ab", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/260aa9f554addeabeaea2320da1ec06bc5939835/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260aa9f554addeabeaea2320da1ec06bc5939835/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=260aa9f554addeabeaea2320da1ec06bc5939835", "patch": "@@ -13,7 +13,6 @@ use crate::weak_lang_items;\n use rustc_middle::middle::cstore::ExternCrate;\n use rustc_middle::ty::TyCtxt;\n \n-use rustc_ast::Attribute;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -30,29 +29,21 @@ struct LanguageItemCollector<'tcx> {\n \n impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        self.check_for_lang(Target::from_item(item), item.hir_id(), item.attrs);\n+        self.check_for_lang(Target::from_item(item), item.hir_id());\n \n         if let hir::ItemKind::Enum(def, ..) = &item.kind {\n             for variant in def.variants {\n-                self.check_for_lang(Target::Variant, variant.id, variant.attrs);\n+                self.check_for_lang(Target::Variant, variant.id);\n             }\n         }\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        self.check_for_lang(\n-            Target::from_trait_item(trait_item),\n-            trait_item.hir_id(),\n-            trait_item.attrs,\n-        )\n+        self.check_for_lang(Target::from_trait_item(trait_item), trait_item.hir_id())\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n-        self.check_for_lang(\n-            target_from_impl_item(self.tcx, impl_item),\n-            impl_item.hir_id(),\n-            impl_item.attrs,\n-        )\n+        self.check_for_lang(target_from_impl_item(self.tcx, impl_item), impl_item.hir_id())\n     }\n \n     fn visit_foreign_item(&mut self, _: &hir::ForeignItem<'_>) {}\n@@ -63,7 +54,8 @@ impl LanguageItemCollector<'tcx> {\n         LanguageItemCollector { tcx, items: LanguageItems::new() }\n     }\n \n-    fn check_for_lang(&mut self, actual_target: Target, hir_id: HirId, attrs: &[Attribute]) {\n+    fn check_for_lang(&mut self, actual_target: Target, hir_id: HirId) {\n+        let attrs = self.tcx.hir().attrs(hir_id);\n         let check_name = |attr, sym| self.tcx.sess.check_name(attr, sym);\n         if let Some((value, span)) = extract(check_name, &attrs) {\n             match ITEM_REFS.get(&value).cloned() {"}]}