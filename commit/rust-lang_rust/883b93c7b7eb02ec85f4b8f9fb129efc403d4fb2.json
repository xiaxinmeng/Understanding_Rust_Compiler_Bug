{"sha": "883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "node_id": "C_kwDOAAsO6NoAKDg4M2I5M2M3YjdlYjAyZWM4NWY0YjhmOWZiMTI5ZWZjNDAzZDRmYjI", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-26T23:01:29Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-04-04T21:06:35Z"}, "message": "Suggest dereferncing when possible in E0277, fix #87437", "tree": {"sha": "c1feadfadc8a41ef0cf3ca05ff59e8f49bbb0879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1feadfadc8a41ef0cf3ca05ff59e8f49bbb0879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "html_url": "https://github.com/rust-lang/rust/commit/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "html_url": "https://github.com/rust-lang/rust/commit/ac8cbbd200cfa77f03a8560f0305810e4f8f1375"}], "stats": {"total": 162, "additions": 121, "deletions": 41}, "files": [{"sha": "b369c733871987970bed819e3416d524f5444187", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 66, "deletions": 38, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "patch": "@@ -1,6 +1,6 @@\n use super::{\n-    EvaluationResult, Obligation, ObligationCause, ObligationCauseCode, PredicateObligation,\n-    SelectionContext,\n+    DerivedObligationCause, EvaluationResult, ImplDerivedObligationCause, Obligation,\n+    ObligationCause, ObligationCauseCode, PredicateObligation, SelectionContext,\n };\n \n use crate::autoderef::Autoderef;\n@@ -496,50 +496,78 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         // It only make sense when suggesting dereferences for arguments\n-        let code = if let ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } =\n-            obligation.cause.code()\n-        {\n-            parent_code.clone()\n-        } else {\n+        let ObligationCauseCode::FunctionArgumentObligation { .. } = obligation.cause.code() else {\n             return false;\n         };\n         let param_env = obligation.param_env;\n         let body_id = obligation.cause.body_id;\n         let span = obligation.cause.span;\n-        let real_trait_pred = match &*code {\n-            ObligationCauseCode::ImplDerivedObligation(cause) => cause.derived.parent_trait_pred,\n-            ObligationCauseCode::DerivedObligation(cause)\n-            | ObligationCauseCode::BuiltinDerivedObligation(cause) => cause.parent_trait_pred,\n-            _ => trait_pred,\n-        };\n-        let Some(real_ty) = real_trait_pred.self_ty().no_bound_vars() else {\n-            return false;\n-        };\n+        let mut real_trait_pred = trait_pred;\n+        let mut code = obligation.cause.code();\n+        loop {\n+            match &code {\n+                ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } => {\n+                    code = &parent_code;\n+                }\n+                ObligationCauseCode::ImplDerivedObligation(box ImplDerivedObligationCause {\n+                    derived: DerivedObligationCause { parent_code, parent_trait_pred },\n+                    ..\n+                })\n+                | ObligationCauseCode::BuiltinDerivedObligation(DerivedObligationCause {\n+                    parent_code,\n+                    parent_trait_pred,\n+                })\n+                | ObligationCauseCode::DerivedObligation(DerivedObligationCause {\n+                    parent_code,\n+                    parent_trait_pred,\n+                }) => {\n+                    code = &parent_code;\n+                    real_trait_pred = *parent_trait_pred;\n+                }\n+                _ => break,\n+            };\n+            let Some(real_ty) = real_trait_pred.self_ty().no_bound_vars() else {\n+                continue;\n+            };\n \n-        if let ty::Ref(region, base_ty, mutbl) = *real_ty.kind() {\n-            let mut autoderef = Autoderef::new(self, param_env, body_id, span, base_ty, span);\n-            if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n-                // Re-add the `&`\n-                let ty = self.tcx.mk_ref(region, TypeAndMut { ty, mutbl });\n-                let obligation =\n-                    self.mk_trait_obligation_with_new_self_ty(param_env, real_trait_pred, ty);\n-                Some(steps).filter(|_| self.predicate_may_hold(&obligation))\n-            }) {\n-                if steps > 0 {\n-                    if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                        // Don't care about `&mut` because `DerefMut` is used less\n-                        // often and user will not expect autoderef happens.\n-                        if src.starts_with('&') && !src.starts_with(\"&mut \") {\n-                            let derefs = \"*\".repeat(steps);\n-                            err.span_suggestion(\n-                                span,\n-                                \"consider adding dereference here\",\n-                                format!(\"&{}{}\", derefs, &src[1..]),\n-                                Applicability::MachineApplicable,\n-                            );\n-                            return true;\n+            if let ty::Ref(region, base_ty, mutbl) = *real_ty.kind() {\n+                let mut autoderef = Autoderef::new(self, param_env, body_id, span, base_ty, span);\n+                if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n+                    // Re-add the `&`\n+                    let ty = self.tcx.mk_ref(region, TypeAndMut { ty, mutbl });\n+                    let obligation =\n+                        self.mk_trait_obligation_with_new_self_ty(param_env, real_trait_pred, ty);\n+                    Some(steps).filter(|_| self.predicate_may_hold(&obligation))\n+                }) {\n+                    if steps > 0 {\n+                        if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                            // Don't care about `&mut` because `DerefMut` is used less\n+                            // often and user will not expect autoderef happens.\n+                            if src.starts_with('&') && !src.starts_with(\"&mut \") {\n+                                let derefs = \"*\".repeat(steps);\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"consider dereferencing here\",\n+                                    format!(\"&{}{}\", derefs, &src[1..]),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                                return true;\n+                            }\n                         }\n                     }\n+                } else if real_trait_pred != trait_pred {\n+                    // This branch addresses #87437.\n+                    let obligation =\n+                        self.mk_trait_obligation_with_new_self_ty(param_env, real_trait_pred, base_ty);\n+                    if self.predicate_may_hold(&obligation) {\n+                        err.span_suggestion_verbose(\n+                            span.shrink_to_lo(),\n+                            \"consider dereferencing here\",\n+                            \"*\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        return true;\n+                    }\n                 }\n             }\n         }"}, {"sha": "5c324cd38a3abd085a68cbb828730195411e2aba", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "patch": "@@ -5,7 +5,7 @@ LL |     let _errors = TcpListener::bind(&bad);\n    |                   ----------------- ^^^^\n    |                   |                 |\n    |                   |                 the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n-   |                   |                 help: consider adding dereference here: `&*bad`\n+   |                   |                 help: consider dereferencing here: `&*bad`\n    |                   required by a bound introduced by this call\n    |\n    = note: required because of the requirements on the impl of `ToSocketAddrs` for `&NoToSocketAddrs`"}, {"sha": "d129328dae8efc60655712be4a735571b5640145", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr?ref=883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "patch": "@@ -5,7 +5,7 @@ LL |     takes_type_parameter(&string);  // Error\n    |     -------------------- ^^^^^^^\n    |     |                    |\n    |     |                    the trait `SomeTrait` is not implemented for `&String`\n-   |     |                    help: consider adding dereference here: `&*string`\n+   |     |                    help: consider dereferencing here: `&*string`\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `takes_type_parameter`"}, {"sha": "efb3c7d123f70f2e8a613d5989a4f466c2020274", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr?ref=883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "patch": "@@ -5,7 +5,7 @@ LL |     foo(&baz);\n    |     --- ^^^^\n    |     |   |\n    |     |   the trait `Happy` is not implemented for `&Baz`\n-   |     |   help: consider adding dereference here: `&***baz`\n+   |     |   help: consider dereferencing here: `&***baz`\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`"}, {"sha": "9fd19240678279a03a2acda5daec6db4f608509a", "filename": "src/test/ui/traits/suggest-deferences/root-obligation.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.fixed?ref=883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+fn get_vowel_count(string: &str) -> usize {\n+    string\n+        .chars()\n+        .filter(|c| \"aeiou\".contains(*c))\n+        //~^ ERROR expected a `Fn<(char,)>` closure, found `char`\n+        .count()\n+}\n+\n+fn main() {\n+    let _ = get_vowel_count(\"asdf\");\n+}\n+"}, {"sha": "4dd0291b629705be24ee81e52f0cd6c6f6099b13", "filename": "src/test/ui/traits/suggest-deferences/root-obligation.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.rs?ref=883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+fn get_vowel_count(string: &str) -> usize {\n+    string\n+        .chars()\n+        .filter(|c| \"aeiou\".contains(c))\n+        //~^ ERROR expected a `Fn<(char,)>` closure, found `char`\n+        .count()\n+}\n+\n+fn main() {\n+    let _ = get_vowel_count(\"asdf\");\n+}\n+"}, {"sha": "16e03e79c757111bd0eb904c368c2660bd8437d5", "filename": "src/test/ui/traits/suggest-deferences/root-obligation.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.stderr?ref=883b93c7b7eb02ec85f4b8f9fb129efc403d4fb2", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n+  --> $DIR/root-obligation.rs:6:38\n+   |\n+LL |         .filter(|c| \"aeiou\".contains(c))\n+   |                             -------- ^ expected an `Fn<(char,)>` closure, found `char`\n+   |                             |\n+   |                             required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<(char,)>` is not implemented for `char`\n+   = note: required because of the requirements on the impl of `FnOnce<(char,)>` for `&char`\n+   = note: required because of the requirements on the impl of `Pattern<'_>` for `&char`\n+note: required by a bound in `core::str::<impl str>::contains`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+   |\n+LL |     pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n+   |                            ^^^^^^^^^^^ required by this bound in `core::str::<impl str>::contains`\n+help: consider dereferencing here\n+   |\n+LL |         .filter(|c| \"aeiou\".contains(*c))\n+   |                                      +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}