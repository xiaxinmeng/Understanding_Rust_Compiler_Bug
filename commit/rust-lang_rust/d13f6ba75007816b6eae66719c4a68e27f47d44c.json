{"sha": "d13f6ba75007816b6eae66719c4a68e27f47d44c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxM2Y2YmE3NTAwNzgxNmI2ZWFlNjY3MTljNGE2OGUyN2Y0N2Q0NGM=", "commit": {"author": {"name": "Alex.F", "email": "gfreezy@gmail.com", "date": "2021-08-15T16:19:45Z"}, "committer": {"name": "Alex.F", "email": "gfreezy@gmail.com", "date": "2021-08-15T16:19:45Z"}, "message": "use async version", "tree": {"sha": "df12398857d3e848d743d883c7d42c3a58fb8841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df12398857d3e848d743d883c7d42c3a58fb8841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d13f6ba75007816b6eae66719c4a68e27f47d44c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d13f6ba75007816b6eae66719c4a68e27f47d44c", "html_url": "https://github.com/rust-lang/rust/commit/d13f6ba75007816b6eae66719c4a68e27f47d44c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d13f6ba75007816b6eae66719c4a68e27f47d44c/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9430570387618680093f89736ca540bd001adc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9430570387618680093f89736ca540bd001adc6", "html_url": "https://github.com/rust-lang/rust/commit/c9430570387618680093f89736ca540bd001adc6"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "1d50d03800f39db98d934ceef43cb60717a98103", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d13f6ba75007816b6eae66719c4a68e27f47d44c/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d13f6ba75007816b6eae66719c4a68e27f47d44c/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=d13f6ba75007816b6eae66719c4a68e27f47d44c", "patch": "@@ -107,7 +107,8 @@ export async function buildCargoTask(\n         // Check whether we must use a user-defined substitute for cargo.\n         // Split on spaces to allow overrides like \"wrapper cargo\".\n         const overrideCargo = definition.overrideCargo ?? definition.overrideCargo;\n-        const cargoCommand = overrideCargo?.split(\" \") ?? [toolchain.cargoPath()];\n+        const cargoPath = await toolchain.cargoPath();\n+        const cargoCommand = overrideCargo?.split(\" \") ?? [cargoPath];\n \n         const fullCommand = [...cargoCommand, ...args];\n "}, {"sha": "b25ec8c062cb6071b007538afc1f3f9028bc53b8", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d13f6ba75007816b6eae66719c4a68e27f47d44c/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d13f6ba75007816b6eae66719c4a68e27f47d44c/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=d13f6ba75007816b6eae66719c4a68e27f47d44c", "patch": "@@ -3,7 +3,7 @@ import * as os from 'os';\n import * as path from 'path';\n import * as readline from 'readline';\n import * as vscode from 'vscode';\n-import { execute, log, memoize } from './util';\n+import { execute, log, memoize, memoizeAsync } from './util';\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -89,13 +89,14 @@ export class Cargo {\n         return artifacts[0].fileName;\n     }\n \n-    private runCargo(\n+    private async runCargo(\n         cargoArgs: string[],\n         onStdoutJson: (obj: any) => void,\n         onStderrString: (data: string) => void\n     ): Promise<number> {\n-        return new Promise((resolve, reject) => {\n-            const cargo = cp.spawn(cargoPath(), cargoArgs, {\n+        const path = await cargoPath();\n+        return await new Promise((resolve, reject) => {\n+            const cargo = cp.spawn(path, cargoArgs, {\n                 stdio: ['ignore', 'pipe', 'pipe'],\n                 cwd: this.rootFolder\n             });\n@@ -121,15 +122,15 @@ export class Cargo {\n }\n \n /** Mirrors `project_model::sysroot::discover_sysroot_dir()` implementation*/\n-export function getSysroot(dir: string): Promise<string> {\n-    const rustcPath = getPathForExecutable(\"rustc\");\n+export async function getSysroot(dir: string): Promise<string> {\n+    const rustcPath = await getPathForExecutable(\"rustc\");\n \n     // do not memoize the result because the toolchain may change between runs\n-    return execute(`${rustcPath} --print sysroot`, { cwd: dir });\n+    return await execute(`${rustcPath} --print sysroot`, { cwd: dir });\n }\n \n export async function getRustcId(dir: string): Promise<string> {\n-    const rustcPath = getPathForExecutable(\"rustc\");\n+    const rustcPath = await getPathForExecutable(\"rustc\");\n \n     // do not memoize the result because the toolchain may change between runs\n     const data = await execute(`${rustcPath} -V -v`, { cwd: dir });\n@@ -139,35 +140,36 @@ export async function getRustcId(dir: string): Promise<string> {\n }\n \n /** Mirrors `toolchain::cargo()` implementation */\n-export function cargoPath(): string {\n+export function cargoPath(): Promise<string> {\n     return getPathForExecutable(\"cargo\");\n }\n \n /** Mirrors `toolchain::get_path_for_executable()` implementation */\n-export const getPathForExecutable = memoize(\n+export const getPathForExecutable = memoizeAsync(\n     // We apply caching to decrease file-system interactions\n-    (executableName: \"cargo\" | \"rustc\" | \"rustup\"): string => {\n+    async (executableName: \"cargo\" | \"rustc\" | \"rustup\"): Promise<string> => {\n         {\n             const envVar = process.env[executableName.toUpperCase()];\n             if (envVar) return envVar;\n         }\n \n-        if (lookupInPath(executableName)) return executableName;\n+        if (await lookupInPath(executableName)) return executableName;\n \n         try {\n             // hmm, `os.homedir()` seems to be infallible\n             // it is not mentioned in docs and cannot be infered by the type signature...\n             const standardPath = vscode.Uri.joinPath(vscode.Uri.file(os.homedir()), \".cargo\", \"bin\", executableName);\n \n-            if (isFileAtUri(standardPath)) return standardPath.fsPath;\n+            const exist = await isFileAtUri(standardPath);\n+            if (exist) return standardPath.fsPath;\n         } catch (err) {\n             log.error(\"Failed to read the fs info\", err);\n         }\n         return executableName;\n     }\n );\n \n-function lookupInPath(exec: string): boolean {\n+async function lookupInPath(exec: string): Promise<boolean> {\n     const paths = process.env.PATH ?? \"\";;\n \n     const candidates = paths.split(path.delimiter).flatMap(dirInPath => {\n@@ -177,7 +179,12 @@ function lookupInPath(exec: string): boolean {\n             : [candidate];\n     });\n \n-    return candidates.some(isFileAtPath);\n+    for await (const isFile of candidates.map(isFileAtPath)) {\n+        if (isFile) {\n+            return true;\n+        }\n+    }\n+    return false;\n }\n \n async function isFileAtPath(path: string): Promise<boolean> {"}, {"sha": "5eac9a227a7293f500973ca95c7b468afb7a7e49", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d13f6ba75007816b6eae66719c4a68e27f47d44c/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d13f6ba75007816b6eae66719c4a68e27f47d44c/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=d13f6ba75007816b6eae66719c4a68e27f47d44c", "patch": "@@ -126,16 +126,16 @@ export function setContextValue(key: string, value: any): Thenable<void> {\n \n /**\n  * Returns a higher-order function that caches the results of invoking the\n- * underlying function.\n+ * underlying async function.\n  */\n-export function memoize<Ret, TThis, Param extends string>(func: (this: TThis, arg: Param) => Ret) {\n+export function memoizeAsync<Ret, TThis, Param extends string>(func: (this: TThis, arg: Param) => Promise<Ret>) {\n     const cache = new Map<string, Ret>();\n \n-    return function(this: TThis, arg: Param) {\n+    return async function (this: TThis, arg: Param) {\n         const cached = cache.get(arg);\n         if (cached) return cached;\n \n-        const result = func.call(this, arg);\n+        const result = await func.call(this, arg);\n         cache.set(arg, result);\n \n         return result;"}]}