{"sha": "45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YTNjZDVlYTY0NWNlMTM0NzJjN2JmNWMyOThmYzc1NjdjNWNkNGI=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-01T21:20:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-01T21:20:29Z"}, "message": "Rollup merge of #86659 - notriddle:notriddle/generics-rustdoc, r=GuillaumeGomez\n\nfix(rustdoc): generics search\n\nThis commit adds a test case for generics, re-adds generics data\nto the search index, and tweaks function indexing to use less space in JSON.\n\nThis partially reverts commit 14ca89446c076bcf484d3d05bd991a4b7985a409.", "tree": {"sha": "69493231b94f724349b5f9ea66ee997e78e2a762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69493231b94f724349b5f9ea66ee997e78e2a762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg3jGdCRBK7hj4Ov3rIwAAvSMIADBfSAh3y9rSF2p8NJ+/XBiz\npBxpIrTvw3qdshTRNNEiSvozq3shC4ZTMxRlgIe6hymxsyd2mQGVoSi1/YegjlDD\nZ+e0aQeeibuQpoKNChcF1cW5yZ5vuLgTuFZ3o0y+0S8IiQXLl3vHd5zwlLvFG3CG\nXM8/fTgrRmuwmhAi/ZrhhT3etWm8rbg+cXsrMg1YaMu3pSVSeInPhOR3xdLWTVf9\n1+CKx0lotruac9pIUjLYgnuhZ/P0r0Tel0WxJ0TWCXl1WOB+uk49O4NFn2ttQNZ6\nGy00C6vHays3N2qUX1/+9eUHvakogBQvyD2nvzeS92816AFSg9ZObbEtqH+5sqI=\n=0y5c\n-----END PGP SIGNATURE-----\n", "payload": "tree 69493231b94f724349b5f9ea66ee997e78e2a762\nparent ab4d16fe7abbbc14617e2d5c311578034b9f1646\nparent cedd2425b6ede6669f47794d85c67af1c43bd877\nauthor Yuki Okushi <jtitor@2k36.org> 1625174429 +0900\ncommitter GitHub <noreply@github.com> 1625174429 +0900\n\nRollup merge of #86659 - notriddle:notriddle/generics-rustdoc, r=GuillaumeGomez\n\nfix(rustdoc): generics search\n\nThis commit adds a test case for generics, re-adds generics data\nto the search index, and tweaks function indexing to use less space in JSON.\n\nThis partially reverts commit 14ca89446c076bcf484d3d05bd991a4b7985a409.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "html_url": "https://github.com/rust-lang/rust/commit/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab4d16fe7abbbc14617e2d5c311578034b9f1646", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab4d16fe7abbbc14617e2d5c311578034b9f1646", "html_url": "https://github.com/rust-lang/rust/commit/ab4d16fe7abbbc14617e2d5c311578034b9f1646"}, {"sha": "cedd2425b6ede6669f47794d85c67af1c43bd877", "url": "https://api.github.com/repos/rust-lang/rust/commits/cedd2425b6ede6669f47794d85c67af1c43bd877", "html_url": "https://github.com/rust-lang/rust/commit/cedd2425b6ede6669f47794d85c67af1c43bd877"}], "stats": {"total": 210, "additions": 191, "deletions": 19}, "files": [{"sha": "0734d2670ccfae7b07379fc8630d3408937a67f2", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "patch": "@@ -219,6 +219,7 @@ crate fn get_index_search_type<'tcx>(\n fn get_index_type(clean_type: &clean::Type) -> RenderType {\n     RenderType {\n         name: get_index_type_name(clean_type, true).map(|s| s.as_str().to_ascii_lowercase()),\n+        generics: get_generics(clean_type),\n     }\n }\n \n@@ -251,6 +252,23 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n     }\n }\n \n+/// Return a list of generic parameters for use in the search index.\n+///\n+/// This function replaces bounds with types, so that `T where T: Debug` just becomes `Debug`.\n+/// It does return duplicates, and that's intentional, since search queries like `Result<usize, usize>`\n+/// are supposed to match only results where both parameters are `usize`.\n+fn get_generics(clean_type: &clean::Type) -> Option<Vec<String>> {\n+    clean_type.generics().and_then(|types| {\n+        let r = types\n+            .iter()\n+            .filter_map(|t| {\n+                get_index_type_name(t, false).map(|name| name.as_str().to_ascii_lowercase())\n+            })\n+            .collect::<Vec<_>>();\n+        if r.is_empty() { None } else { Some(r) }\n+    })\n+}\n+\n /// The point of this function is to replace bounds with types.\n ///\n /// i.e. `[T, U]` when you have the following bounds: `T: Display, U: Option<T>` will return"}, {"sha": "0583efa92ffad2646a39581ef3f15b1fab7522fa", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "patch": "@@ -96,6 +96,7 @@ crate struct IndexItem {\n #[derive(Debug)]\n crate struct RenderType {\n     name: Option<String>,\n+    generics: Option<Vec<String>>,\n }\n \n /// Full type of functions/methods in the search index.\n@@ -149,7 +150,13 @@ impl Serialize for TypeWithKind {\n     where\n         S: Serializer,\n     {\n-        (&self.ty.name, self.kind).serialize(serializer)\n+        let mut seq = serializer.serialize_seq(None)?;\n+        seq.serialize_element(&self.ty.name)?;\n+        seq.serialize_element(&self.kind)?;\n+        if let Some(generics) = &self.ty.generics {\n+            seq.serialize_element(generics)?;\n+        }\n+        seq.end()\n     }\n }\n "}, {"sha": "a7fc0b831f410f5a91ee7eadb37592d398166cb1", "filename": "src/librustdoc/html/static/search.js", "status": "modified", "additions": 62, "deletions": 18, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js?ref=45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "patch": "@@ -106,7 +106,7 @@ function levenshtein(s1, s2) {\n window.initSearch = function(rawSearchIndex) {\n     var MAX_LEV_DISTANCE = 3;\n     var MAX_RESULTS = 200;\n-    var GENERICS_DATA = 1;\n+    var GENERICS_DATA = 2;\n     var NAME = 0;\n     var INPUTS_DATA = 0;\n     var OUTPUT_DATA = 1;\n@@ -306,6 +306,9 @@ window.initSearch = function(rawSearchIndex) {\n                     var elems = Object.create(null);\n                     var elength = obj[GENERICS_DATA].length;\n                     for (var x = 0; x < elength; ++x) {\n+                        if (!elems[getObjectNameFromId(obj[GENERICS_DATA][x])]) {\n+                            elems[getObjectNameFromId(obj[GENERICS_DATA][x])] = 0;\n+                        }\n                         elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n                     }\n                     var total = 0;\n@@ -354,10 +357,13 @@ window.initSearch = function(rawSearchIndex) {\n                 if (literalSearch) {\n                     if (val.generics && val.generics.length !== 0) {\n                         if (obj.length > GENERICS_DATA &&\n-                              obj[GENERICS_DATA].length >= val.generics.length) {\n+                             obj[GENERICS_DATA].length > 0) {\n                             var elems = Object.create(null);\n                             len = obj[GENERICS_DATA].length;\n                             for (x = 0; x < len; ++x) {\n+                                if (!elems[getObjectNameFromId(obj[GENERICS_DATA][x])]) {\n+                                    elems[getObjectNameFromId(obj[GENERICS_DATA][x])] = 0;\n+                                }\n                                 elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n                             }\n \n@@ -375,26 +381,23 @@ window.initSearch = function(rawSearchIndex) {\n                             if (allFound) {\n                                 return true;\n                             }\n-                        } else {\n-                            return false;\n                         }\n+                        return false;\n                     }\n                     return true;\n-                }\n-                // If the type has generics but don't match, then it won't return at this point.\n-                // Otherwise, `checkGenerics` will return 0 and it'll return.\n-                if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length !== 0) {\n-                    var tmp_lev = checkGenerics(obj, val);\n-                    if (tmp_lev <= MAX_LEV_DISTANCE) {\n-                        return tmp_lev;\n-                    }\n                 } else {\n-                    return 0;\n+                    // If the type has generics but don't match, then it won't return at this point.\n+                    // Otherwise, `checkGenerics` will return 0 and it'll return.\n+                    if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length !== 0) {\n+                        var tmp_lev = checkGenerics(obj, val);\n+                        if (tmp_lev <= MAX_LEV_DISTANCE) {\n+                            return tmp_lev;\n+                        }\n+                    }\n                 }\n-            }\n-            // Names didn't match so let's check if one of the generic types could.\n-            if (literalSearch) {\n-                 if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length > 0) {\n+            } else if (literalSearch) {\n+                if ((!val.generics || val.generics.length === 0) &&\n+                      obj.length > GENERICS_DATA && obj[GENERICS_DATA].length > 0) {\n                     return obj[GENERICS_DATA].some(\n                         function(name) {\n                             return name === val.name;\n@@ -1167,7 +1170,48 @@ window.initSearch = function(rawSearchIndex) {\n             return ret;\n         }\n \n-        var queries = query.raw.split(\",\");\n+        // Split search query by \",\", while respecting angle bracket nesting.\n+        // Since \"<\" is an alias for the Ord family of traits, it also uses\n+        // lookahead to distinguish \"<\"-as-less-than from \"<\"-as-angle-bracket.\n+        //\n+        // tokenizeQuery(\"A<B, C>, D\") == [\"A<B, C>\", \"D\"]\n+        // tokenizeQuery(\"A<B, C, D\") == [\"A<B\", \"C\", \"D\"]\n+        function tokenizeQuery(raw) {\n+            var i, matched;\n+            var l = raw.length;\n+            var depth = 0;\n+            var nextAngle = /(<|>)/g;\n+            var ret = [];\n+            var start = 0;\n+            for (i = 0; i < l; ++i) {\n+                switch (raw[i]) {\n+                    case \"<\":\n+                        nextAngle.lastIndex = i + 1;\n+                        matched = nextAngle.exec(raw);\n+                        if (matched && matched[1] === '>') {\n+                            depth += 1;\n+                        }\n+                        break;\n+                    case \">\":\n+                        if (depth > 0) {\n+                            depth -= 1;\n+                        }\n+                        break;\n+                    case \",\":\n+                        if (depth === 0) {\n+                            ret.push(raw.substring(start, i));\n+                            start = i + 1;\n+                        }\n+                        break;\n+                }\n+            }\n+            if (start !== i) {\n+                ret.push(raw.substring(start, i));\n+            }\n+            return ret;\n+        }\n+\n+        var queries = tokenizeQuery(query.raw);\n         var results = {\n             \"in_args\": [],\n             \"returned\": [],"}, {"sha": "bf2bb4d2981fc99419fcaeadf78d526b141761b2", "filename": "src/test/rustdoc-js-std/alias-4.js", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js-std%2Falias-4.js", "raw_url": "https://github.com/rust-lang/rust/raw/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js-std%2Falias-4.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Falias-4.js?ref=45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "patch": "@@ -0,0 +1,7 @@\n+const QUERY = '<';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'name': 'Ord' },\n+    ],\n+};"}, {"sha": "7876622435b609ec410e47c16ded03534d2fcd71", "filename": "src/test/rustdoc-js/generics-trait.js", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.js", "raw_url": "https://github.com/rust-lang/rust/raw/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.js?ref=45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "patch": "@@ -0,0 +1,23 @@\n+const QUERY = [\n+    'Result<SomeTrait>',\n+    'OtherThingxxxxxxxx',\n+];\n+\n+const EXPECTED = [\n+    {\n+        'in_args': [\n+            { 'path': 'generics_trait', 'name': 'beta' },\n+        ],\n+        'returned': [\n+            { 'path': 'generics_trait', 'name': 'bet' },\n+        ],\n+    },\n+    {\n+        'in_args': [\n+            { 'path': 'generics_trait', 'name': 'alpha' },\n+        ],\n+        'returned': [\n+            { 'path': 'generics_trait', 'name': 'alef' },\n+        ],\n+    },\n+];"}, {"sha": "20db117ccd5ceb9b06e1ebcc320ee8b6f084cb7d", "filename": "src/test/rustdoc-js/generics-trait.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.rs?ref=45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "patch": "@@ -0,0 +1,8 @@\n+pub trait SomeTrait {}\n+pub trait OtherThingxxxxxxxx {}\n+\n+pub fn alef<T: OtherThingxxxxxxxx>() -> Result<T, ()> { loop {} }\n+pub fn bet<T: SomeTrait>() -> Result<T, ()> { loop {} }\n+\n+pub fn alpha<T: OtherThingxxxxxxxx>(_param: Result<T, ()>) { loop {} }\n+pub fn beta<T: SomeTrait>(_param: Result<T, ()>) { loop {} }"}, {"sha": "49a80ae2360f542723017c49ab17dee74c724b0d", "filename": "src/test/rustdoc-js/generics.js", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js%2Fgenerics.js", "raw_url": "https://github.com/rust-lang/rust/raw/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js%2Fgenerics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics.js?ref=45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "patch": "@@ -0,0 +1,44 @@\n+// exact-check\n+\n+const QUERY = [\n+  '\"R<P>\"',\n+  '\"P\"',\n+  'P',\n+  '\"ExtraCreditStructMulti<ExtraCreditInnerMulti, ExtraCreditInnerMulti>\"',\n+];\n+\n+const EXPECTED = [\n+    {\n+        'returned': [\n+            { 'path': 'generics', 'name': 'alef' },\n+        ],\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'alpha' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'generics', 'name': 'P' },\n+        ],\n+        'returned': [\n+            { 'path': 'generics', 'name': 'alef' },\n+        ],\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'alpha' },\n+        ],\n+    },\n+    {\n+        'returned': [\n+            { 'path': 'generics', 'name': 'alef' },\n+        ],\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'alpha' },\n+        ],\n+    },\n+    {\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'extracreditlabhomework' },\n+        ],\n+        'returned': [],\n+    },\n+];"}, {"sha": "a0dc086e9f9cfe17b55dabf6769ed1c1aa2620f4", "filename": "src/test/rustdoc-js/generics.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b/src%2Ftest%2Frustdoc-js%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics.rs?ref=45a3cd5ea645ce13472c7bf5c298fc7567c5cd4b", "patch": "@@ -0,0 +1,21 @@\n+pub struct P;\n+pub struct Q;\n+pub struct R<T>(T);\n+\n+// returns test\n+pub fn alef() -> R<P> { loop {} }\n+pub fn bet() -> R<Q> { loop {} }\n+\n+// in_args test\n+pub fn alpha(_x: R<P>) { loop {} }\n+pub fn beta(_x: R<Q>) { loop {} }\n+\n+// test case with multiple appearances of the same type\n+pub struct ExtraCreditStructMulti<T, U> { t: T, u: U }\n+pub struct ExtraCreditInnerMulti {}\n+pub fn extracreditlabhomework(\n+    _param: ExtraCreditStructMulti<ExtraCreditInnerMulti, ExtraCreditInnerMulti>\n+) { loop {} }\n+pub fn redherringmatchforextracredit(\n+    _param: ExtraCreditStructMulti<ExtraCreditInnerMulti, ()>\n+) { loop {} }"}]}