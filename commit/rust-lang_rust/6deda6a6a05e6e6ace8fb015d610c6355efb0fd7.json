{"sha": "6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZWRhNmE2YTA1ZTZlNmFjZThmYjAxNWQ2MTBjNjM1NWVmYjBmZDc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-03T03:53:41Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-03T21:23:31Z"}, "message": "Stabilize Ident::new_raw\n\nTracking issue: #54723\n\nThis is a continuation of PR #59002", "tree": {"sha": "d31b33b2bb9cf1c939ff94a86fb02a2fb96b813b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d31b33b2bb9cf1c939ff94a86fb02a2fb96b813b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl8ogFMACgkQtAh+UQ6Y\nsWQC+g//VXXoJD6I9wxk6kcom/x8ysEqjnfj5pQftkqiAFaK+blpI9JUuYqjWoYJ\nktBVZspbQGcjEXR0f0Q7ztbrk+6IkL6o+HiDVAbBHV2UupBNxVygVp9tFdgt2oRb\ncB1R/Gpp1G0IEdBod1eeY32ZuOqXxrfTrHBZD7RMIrXc+f/uEDVQeW8ryC/u6zFM\nYbN8zTODW6y4tTBt9SxTUWphhCRIKCIwgDEeLlsu1gSRKq67qUKRyje5Wqt+6KV+\nnbqAYxdt2iKqqhqqxWgU8pmIiZY5DQ02jgn62zO03ma2vmP0hRMYFVijN85D4wvB\nzPOD9LiJTMBEdQRoJRP5v7w72dEhkH3mbrHHBF7ahFf17udsKNSg+G+j3VT5lvPc\n4E+wCH/r/IyGaXPGEnL7OJ39N6iSokJQbXd2NRhO0zX0SX297JETaVhi6YBOQj2I\n8S9JXEXp+N7QLEDyaEpDt5eQmzx6vAoeuxix17/rQ9Q8R9xvd1FG8KZ5zBfwu6lV\nwz91PJYpS0OMjEpbEl1Mvaaw/CPgZuIWK7XiOyIxlUAduyLXO+3wX93D9CSdI2Ra\n9ArPIZOwVaN9s+PNZgMp+wMfO/9kIGepTdVeinNNEOczONr7xhpAl7zjoB1uTFGH\nmCu7b21c6cNTJQ1SoSLc9TJnTvri3HUpaFYR1iYlpz8d/n9zZWQ=\n=4W0S\n-----END PGP SIGNATURE-----", "payload": "tree d31b33b2bb9cf1c939ff94a86fb02a2fb96b813b\nparent c186aed59ab590eb586751afaf6b9e0ea9b78099\nauthor Aaron Hill <aa1ronham@gmail.com> 1596426821 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1596489811 -0400\n\nStabilize Ident::new_raw\n\nTracking issue: #54723\n\nThis is a continuation of PR #59002\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "html_url": "https://github.com/rust-lang/rust/commit/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c186aed59ab590eb586751afaf6b9e0ea9b78099", "url": "https://api.github.com/repos/rust-lang/rust/commits/c186aed59ab590eb586751afaf6b9e0ea9b78099", "html_url": "https://github.com/rust-lang/rust/commit/c186aed59ab590eb586751afaf6b9e0ea9b78099"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "de3866d92fc3f181ee192baa930917031b51bef0", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "patch": "@@ -848,7 +848,7 @@ impl Ident {\n     /// Creates a new `Ident` with the given `string` as well as the specified\n     /// `span`.\n     /// The `string` argument must be a valid identifier permitted by the\n-    /// language, otherwise the function will panic.\n+    /// language (including keywords, e.g. `self` or `fn`). Otherwise, the function will panic.\n     ///\n     /// Note that `span`, currently in rustc, configures the hygiene information\n     /// for this identifier.\n@@ -870,7 +870,10 @@ impl Ident {\n     }\n \n     /// Same as `Ident::new`, but creates a raw identifier (`r#ident`).\n-    #[unstable(feature = \"proc_macro_raw_ident\", issue = \"54723\")]\n+    /// The `string` argument be a valid identifier permitted by the language\n+    /// (including keywords, e.g. `fn`). Keywords which are usable in path segments\n+    /// (e.g. `self`, `super`) are not supported, and will cause a panic.\n+    #[stable(feature = \"proc_macro_raw_ident\", since = \"1.47.0\")]\n     pub fn new_raw(string: &str, span: Span) -> Ident {\n         Ident(bridge::client::Ident::new(string, span.0, true))\n     }"}, {"sha": "9daee21aa17d458aea9794d9eac5a09d57baadb0", "filename": "src/test/ui/proc-macro/auxiliary/raw-ident.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fraw-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fraw-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fraw-ident.rs?ref=6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "patch": "@@ -0,0 +1,35 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::{TokenStream, TokenTree, Ident, Punct, Spacing, Span};\n+\n+#[proc_macro]\n+pub fn make_struct(input: TokenStream) -> TokenStream {\n+    match input.into_iter().next().unwrap() {\n+        TokenTree::Ident(ident) => {\n+            vec![\n+                TokenTree::Ident(Ident::new(\"struct\", Span::call_site())),\n+                TokenTree::Ident(Ident::new_raw(&ident.to_string(), Span::call_site())),\n+                TokenTree::Punct(Punct::new(';', Spacing::Alone))\n+            ].into_iter().collect()\n+        }\n+        _ => panic!()\n+    }\n+}\n+\n+#[proc_macro]\n+pub fn make_bad_struct(input: TokenStream) -> TokenStream {\n+    match input.into_iter().next().unwrap() {\n+        TokenTree::Ident(ident) => {\n+            vec![\n+                TokenTree::Ident(Ident::new_raw(\"struct\", Span::call_site())),\n+                TokenTree::Ident(Ident::new(&ident.to_string(), Span::call_site())),\n+                TokenTree::Punct(Punct::new(';', Spacing::Alone))\n+            ].into_iter().collect()\n+        }\n+        _ => panic!()\n+    }\n+}"}, {"sha": "03cb4571496e90318056b03a11b63c7e9f0b127d", "filename": "src/test/ui/proc-macro/raw-ident.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.rs?ref=6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:raw-ident.rs\n+\n+#[macro_use] extern crate raw_ident;\n+\n+fn main() {\n+    make_struct!(fn);\n+    make_struct!(Foo);\n+    make_struct!(await);\n+\n+    r#fn;\n+    r#Foo;\n+    Foo;\n+    r#await;\n+\n+    make_bad_struct!(S); //~ ERROR expected one of\n+}"}, {"sha": "e82a1226b5aef4be18bb0e1162297bc102641418", "filename": "src/test/ui/proc-macro/raw-ident.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr?ref=6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `S`\n+  --> $DIR/raw-ident.rs:15:5\n+   |\n+LL |     make_bad_struct!(S);\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected one of 8 possible tokens\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}