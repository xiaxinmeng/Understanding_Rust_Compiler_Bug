{"sha": "b8708e2c9a264f1db74700c7471b8038e2d7f8da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NzA4ZTJjOWEyNjRmMWRiNzQ3MDBjNzQ3MWI4MDM4ZTJkN2Y4ZGE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-12T23:50:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-12T23:50:46Z"}, "message": "When needing type annotations in local bindings, account for impl Trait and closures\n\nDo not suggest nonsensical types when the type inference is failing on\n`impl Trait` or anonymous closures.", "tree": {"sha": "72da3ca61fc26d7d41f8ddbcaeef9cd7aba8cf65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72da3ca61fc26d7d41f8ddbcaeef9cd7aba8cf65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8708e2c9a264f1db74700c7471b8038e2d7f8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8708e2c9a264f1db74700c7471b8038e2d7f8da", "html_url": "https://github.com/rust-lang/rust/commit/b8708e2c9a264f1db74700c7471b8038e2d7f8da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8708e2c9a264f1db74700c7471b8038e2d7f8da/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60960a260f7b5c695fd0717311d72ce62dd4eb43", "url": "https://api.github.com/repos/rust-lang/rust/commits/60960a260f7b5c695fd0717311d72ce62dd4eb43", "html_url": "https://github.com/rust-lang/rust/commit/60960a260f7b5c695fd0717311d72ce62dd4eb43"}], "stats": {"total": 99, "additions": 97, "deletions": 2}, "files": [{"sha": "263b052e71f0ffdd0e045573e3ad4143ebeac45b", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=b8708e2c9a264f1db74700c7471b8038e2d7f8da", "patch": "@@ -151,12 +151,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         //   |         the type parameter `E` is specified\n         // ```\n         let (ty_msg, suffix) = match &local_visitor.found_ty {\n-            Some(ty) if &ty.to_string() != \"_\" && name == \"_\" => {\n+            Some(ty) if &ty.to_string() != \"_\" &&\n+                name == \"_\" &&\n+                // FIXME: Remove this check after `impl_trait_in_bindings` is stabilized.\n+                (!ty.is_impl_trait() || self.tcx.features().impl_trait_in_bindings) &&\n+                !ty.is_closure() => // The suggestion doesn't make sense for closures.\n+            {\n                 let ty = ty_to_string(ty);\n                 (format!(\" for `{}`\", ty),\n                  format!(\"the explicit type `{}`, with the type parameters specified\", ty))\n             }\n-            Some(ty) if &ty.to_string() != \"_\" && ty.to_string() != name => {\n+            Some(ty) if &ty.to_string() != \"_\" &&\n+                ty.to_string() != name &&\n+                // FIXME: Remove this check after `impl_trait_in_bindings` is stabilized.\n+                (!ty.is_impl_trait() || self.tcx.features().impl_trait_in_bindings) &&\n+                !ty.is_closure() => // The suggestion doesn't make sense for closures.\n+            {\n                 let ty = ty_to_string(ty);\n                 (format!(\" for `{}`\", ty),\n                  format!(\n@@ -165,6 +175,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     name,\n                  ))\n             }\n+            Some(ty) if ty.is_closure() => (\n+                \" for the closure\".to_string(),\n+                \"a boxed closure type like `Box<Fn() -> _>`\".to_string(),\n+            ),\n             _ => (String::new(), \"a type\".to_owned()),\n         };\n         let mut labels = vec![(span, InferCtxt::missing_type_msg(&name))];"}, {"sha": "fb6fd60c22f04439be1aa4a65aa19e5718865643", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs?ref=b8708e2c9a264f1db74700c7471b8038e2d7f8da", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+#![feature(async_await)]\n+#![feature(impl_trait_in_bindings)]\n+//~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+\n+use std::io::Error;\n+\n+fn make_unit() -> Result<(), Error> { \n+    Ok(())\n+}\n+\n+fn main() {\n+    let fut = async {\n+        make_unit()?; //~ ERROR type annotations needed\n+        \n+        Ok(())\n+    };\n+}"}, {"sha": "67a834a2e957aef40c0023348723d5810272c8be", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=b8708e2c9a264f1db74700c7471b8038e2d7f8da", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:3:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0282]: type annotations needed for `impl std::future::Future`\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:14:9\n+   |\n+LL |     let fut = async {\n+   |         --- consider giving `fut` the explicit type `impl std::future::Future`, with the type parameters specified\n+LL |         make_unit()?;\n+   |         ^^^^^^^^^^^^ cannot infer type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "354942121b0a5adae789a90adf943c2b592473bd", "filename": "src/test/ui/inference/cannot-infer-async.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs?ref=b8708e2c9a264f1db74700c7471b8038e2d7f8da", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+#![feature(async_await)]\n+\n+use std::io::Error;\n+\n+fn make_unit() -> Result<(), Error> { \n+    Ok(())\n+}\n+\n+fn main() {\n+    let fut = async {\n+        make_unit()?; //~ ERROR type annotations needed\n+        \n+        Ok(())\n+    };\n+}"}, {"sha": "36608a11bb73073ca768f697092770d6f7da8d99", "filename": "src/test/ui/inference/cannot-infer-async.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr?ref=b8708e2c9a264f1db74700c7471b8038e2d7f8da", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/cannot-infer-async.rs:12:9\n+   |\n+LL |     let fut = async {\n+   |         --- consider giving `fut` a type\n+LL |         make_unit()?;\n+   |         ^^^^^^^^^^^^ cannot infer type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "9c1e609ce64317ecbba9cb7786ede7a2cce38821", "filename": "src/test/ui/inference/cannot-infer-closure.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs?ref=b8708e2c9a264f1db74700c7471b8038e2d7f8da", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let x = || {\n+        Err(())?; //~ ERROR type annotations needed for the closure\n+        Ok(())\n+    };\n+}"}, {"sha": "b8ca099aec13db3309f8dbcc3a65089f5019be1f", "filename": "src/test/ui/inference/cannot-infer-closure.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8708e2c9a264f1db74700c7471b8038e2d7f8da/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr?ref=b8708e2c9a264f1db74700c7471b8038e2d7f8da", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed for the closure\n+  --> $DIR/cannot-infer-closure.rs:3:9\n+   |\n+LL |     let x = || {\n+   |         - consider giving `x` a boxed closure type like `Box<Fn() -> _>`\n+LL |         Err(())?;\n+   |         ^^^^^^^^ cannot infer type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}