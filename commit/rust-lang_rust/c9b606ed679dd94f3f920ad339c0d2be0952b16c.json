{"sha": "c9b606ed679dd94f3f920ad339c0d2be0952b16c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YjYwNmVkNjc5ZGQ5NGYzZjkyMGFkMzM5YzBkMmJlMDk1MmIxNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T04:01:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T04:01:52Z"}, "message": "Auto merge of #78359 - ssomers:btree_cleanup_mem, r=Mark-Simulacrum\n\nBTreeMap: move generic support functions out of navigate.rs\n\nA preparatory step chipped off #78104, useful in general (if at all).\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "5150797bdaebf4b523179d15e18a938220632f86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5150797bdaebf4b523179d15e18a938220632f86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b606ed679dd94f3f920ad339c0d2be0952b16c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b606ed679dd94f3f920ad339c0d2be0952b16c", "html_url": "https://github.com/rust-lang/rust/commit/c9b606ed679dd94f3f920ad339c0d2be0952b16c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b606ed679dd94f3f920ad339c0d2be0952b16c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb", "html_url": "https://github.com/rust-lang/rust/commit/28f03ac4c08fc7ec62428d0b914e1510ce7ee2cb"}, {"sha": "0da7941e1c820021b14146fd48b818c82db9b0e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da7941e1c820021b14146fd48b818c82db9b0e4", "html_url": "https://github.com/rust-lang/rust/commit/0da7941e1c820021b14146fd48b818c82db9b0e4"}], "stats": {"total": 82, "additions": 42, "deletions": 40}, "files": [{"sha": "5e7d9fa3f91ba536d409e42a101837a50eeb2bb4", "filename": "library/alloc/src/collections/btree/mem.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9b606ed679dd94f3f920ad339c0d2be0952b16c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b606ed679dd94f3f920ad339c0d2be0952b16c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmem.rs?ref=c9b606ed679dd94f3f920ad339c0d2be0952b16c", "patch": "@@ -0,0 +1,34 @@\n+use core::intrinsics;\n+use core::mem;\n+use core::ptr;\n+\n+/// This replaces the value behind the `v` unique reference by calling the\n+/// relevant function.\n+///\n+/// If a panic occurs in the `change` closure, the entire process will be aborted.\n+#[inline]\n+pub fn take_mut<T>(v: &mut T, change: impl FnOnce(T) -> T) {\n+    replace(v, |value| (change(value), ()))\n+}\n+\n+/// This replaces the value behind the `v` unique reference by calling the\n+/// relevant function, and returns a result obtained along the way.\n+///\n+/// If a panic occurs in the `change` closure, the entire process will be aborted.\n+#[inline]\n+pub fn replace<T, R>(v: &mut T, change: impl FnOnce(T) -> (T, R)) -> R {\n+    struct PanicGuard;\n+    impl Drop for PanicGuard {\n+        fn drop(&mut self) {\n+            intrinsics::abort()\n+        }\n+    }\n+    let guard = PanicGuard;\n+    let value = unsafe { ptr::read(v) };\n+    let (new_value, ret) = change(value);\n+    unsafe {\n+        ptr::write(v, new_value);\n+    }\n+    mem::forget(guard);\n+    ret\n+}"}, {"sha": "4c07795bd70cd0936264e3db4b6502483f01f94c", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9b606ed679dd94f3f920ad339c0d2be0952b16c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b606ed679dd94f3f920ad339c0d2be0952b16c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=c9b606ed679dd94f3f920ad339c0d2be0952b16c", "patch": "@@ -1,5 +1,6 @@\n mod borrow;\n pub mod map;\n+mod mem;\n mod merge_iter;\n mod navigate;\n mod node;"}, {"sha": "de78148fc82be840bd1784dfe6ab6cc1d7d87e39", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 7, "deletions": 40, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c9b606ed679dd94f3f920ad339c0d2be0952b16c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b606ed679dd94f3f920ad339c0d2be0952b16c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=c9b606ed679dd94f3f920ad339c0d2be0952b16c", "patch": "@@ -1,7 +1,5 @@\n use core::borrow::Borrow;\n use core::cmp::Ordering;\n-use core::intrinsics;\n-use core::mem;\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::RangeBounds;\n use core::ptr;\n@@ -304,45 +302,14 @@ macro_rules! def_next_kv_uncheched_dealloc {\n def_next_kv_uncheched_dealloc! {unsafe fn next_kv_unchecked_dealloc: right_kv}\n def_next_kv_uncheched_dealloc! {unsafe fn next_back_kv_unchecked_dealloc: left_kv}\n \n-/// This replaces the value behind the `v` unique reference by calling the\n-/// relevant function.\n-///\n-/// If a panic occurs in the `change` closure, the entire process will be aborted.\n-#[inline]\n-fn take_mut<T>(v: &mut T, change: impl FnOnce(T) -> T) {\n-    replace(v, |value| (change(value), ()))\n-}\n-\n-/// This replaces the value behind the `v` unique reference by calling the\n-/// relevant function, and returns a result obtained along the way.\n-///\n-/// If a panic occurs in the `change` closure, the entire process will be aborted.\n-#[inline]\n-fn replace<T, R>(v: &mut T, change: impl FnOnce(T) -> (T, R)) -> R {\n-    struct PanicGuard;\n-    impl Drop for PanicGuard {\n-        fn drop(&mut self) {\n-            intrinsics::abort()\n-        }\n-    }\n-    let guard = PanicGuard;\n-    let value = unsafe { ptr::read(v) };\n-    let (new_value, ret) = change(value);\n-    unsafe {\n-        ptr::write(v, new_value);\n-    }\n-    mem::forget(guard);\n-    ret\n-}\n-\n impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge> {\n     /// Moves the leaf edge handle to the next leaf edge and returns references to the\n     /// key and value in between.\n     ///\n     /// # Safety\n     /// There must be another KV in the direction travelled.\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n-        replace(self, |leaf_edge| {\n+        super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_kv();\n             let kv = unsafe { unwrap_unchecked(kv.ok()) };\n             (kv.next_leaf_edge(), kv.into_kv())\n@@ -355,7 +322,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Ed\n     /// # Safety\n     /// There must be another KV in the direction travelled.\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n-        replace(self, |leaf_edge| {\n+        super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_back_kv();\n             let kv = unsafe { unwrap_unchecked(kv.ok()) };\n             (kv.next_back_leaf_edge(), kv.into_kv())\n@@ -370,7 +337,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     /// # Safety\n     /// There must be another KV in the direction travelled.\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        let kv = replace(self, |leaf_edge| {\n+        let kv = super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_kv();\n             let kv = unsafe { unwrap_unchecked(kv.ok()) };\n             (unsafe { ptr::read(&kv) }.next_leaf_edge(), kv)\n@@ -385,7 +352,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     /// # Safety\n     /// There must be another KV in the direction travelled.\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        let kv = replace(self, |leaf_edge| {\n+        let kv = super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_back_kv();\n             let kv = unsafe { unwrap_unchecked(kv.ok()) };\n             (unsafe { ptr::read(&kv) }.next_back_leaf_edge(), kv)\n@@ -401,7 +368,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge\n     /// # Safety\n     /// There must be another KV in the direction travelled.\n     pub unsafe fn move_next_unchecked(&mut self) {\n-        take_mut(self, |leaf_edge| {\n+        super::mem::take_mut(self, |leaf_edge| {\n             let kv = leaf_edge.next_kv();\n             let kv = unsafe { unwrap_unchecked(kv.ok()) };\n             kv.next_leaf_edge()\n@@ -423,7 +390,7 @@ impl<K, V> Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge> {\n     /// call this method again subject to its safety conditions, or call counterpart\n     /// `next_back_unchecked` subject to its safety conditions.\n     pub unsafe fn next_unchecked(&mut self) -> (K, V) {\n-        replace(self, |leaf_edge| {\n+        super::mem::replace(self, |leaf_edge| {\n             let kv = unsafe { next_kv_unchecked_dealloc(leaf_edge) };\n             let k = unsafe { ptr::read(kv.reborrow().into_kv().0) };\n             let v = unsafe { ptr::read(kv.reborrow().into_kv().1) };\n@@ -444,7 +411,7 @@ impl<K, V> Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge> {\n     /// call this method again subject to its safety conditions, or call counterpart\n     /// `next_unchecked` subject to its safety conditions.\n     pub unsafe fn next_back_unchecked(&mut self) -> (K, V) {\n-        replace(self, |leaf_edge| {\n+        super::mem::replace(self, |leaf_edge| {\n             let kv = unsafe { next_back_kv_unchecked_dealloc(leaf_edge) };\n             let k = unsafe { ptr::read(kv.reborrow().into_kv().0) };\n             let v = unsafe { ptr::read(kv.reborrow().into_kv().1) };"}]}