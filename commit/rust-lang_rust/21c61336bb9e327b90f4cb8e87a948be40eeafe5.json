{"sha": "21c61336bb9e327b90f4cb8e87a948be40eeafe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYzYxMzM2YmI5ZTMyN2I5MGY0Y2I4ZTg3YTk0OGJlNDBlZWFmZTU=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-26T01:05:02Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-28T15:12:56Z"}, "message": "Remove the TypedConstVal\n\nReplace it with ConstUsize instead, which is more appropriate; we are not using the rest of the\nTypedConstVal anyway", "tree": {"sha": "c4b9e7afbd5550dc777d00c22532a1f683fe2896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b9e7afbd5550dc777d00c22532a1f683fe2896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c61336bb9e327b90f4cb8e87a948be40eeafe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c61336bb9e327b90f4cb8e87a948be40eeafe5", "html_url": "https://github.com/rust-lang/rust/commit/21c61336bb9e327b90f4cb8e87a948be40eeafe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c61336bb9e327b90f4cb8e87a948be40eeafe5/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a14e9e745460e55b149dad0d21cdb221545f184", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a14e9e745460e55b149dad0d21cdb221545f184", "html_url": "https://github.com/rust-lang/rust/commit/3a14e9e745460e55b149dad0d21cdb221545f184"}], "stats": {"total": 65, "additions": 11, "deletions": 54}, "files": [{"sha": "10761a03bec0cabd1d05f7dfd669458479d85272", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=21c61336bb9e327b90f4cb8e87a948be40eeafe5", "patch": "@@ -983,7 +983,7 @@ pub enum Rvalue<'tcx> {\n     Use(Operand<'tcx>),\n \n     /// [x; 32]\n-    Repeat(Operand<'tcx>, TypedConstVal<'tcx>),\n+    Repeat(Operand<'tcx>, ConstUsize),\n \n     /// &x or &mut x\n     Ref(&'tcx Region, BorrowKind, Lvalue<'tcx>),\n@@ -1203,19 +1203,6 @@ pub struct Constant<'tcx> {\n     pub literal: Literal<'tcx>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n-pub struct TypedConstVal<'tcx> {\n-    pub ty: Ty<'tcx>,\n-    pub span: Span,\n-    pub value: ConstUsize,\n-}\n-\n-impl<'tcx> Debug for TypedConstVal<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n-        write!(fmt, \"const {}\", ConstInt::Usize(self.value))\n-    }\n-}\n-\n newtype_index!(Promoted, \"promoted\");\n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "14d3876a66e5522a1c4e07a7e659045077369163", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=21c61336bb9e327b90f4cb8e87a948be40eeafe5", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::Use(ref operand) => operand.ty(mir, tcx),\n             Rvalue::Repeat(ref operand, ref count) => {\n                 let op_ty = operand.ty(mir, tcx);\n-                let count = count.value.as_u64(tcx.sess.target.uint_type);\n+                let count = count.as_u64(tcx.sess.target.uint_type);\n                 assert_eq!(count as usize as u64, count);\n                 tcx.mk_array(op_ty, count as usize)\n             }"}, {"sha": "980d1806e78f8b34d60f94bc3816044b835cf128", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=21c61336bb9e327b90f4cb8e87a948be40eeafe5", "patch": "@@ -235,12 +235,6 @@ macro_rules! make_mir_visitor {\n                 self.super_const_usize(const_usize);\n             }\n \n-            fn visit_typed_const_val(&mut self,\n-                                     val: & $($mutability)* TypedConstVal<'tcx>,\n-                                     location: Location) {\n-                self.super_typed_const_val(val, location);\n-            }\n-\n             fn visit_local_decl(&mut self,\n                                 local_decl: & $($mutability)* LocalDecl<'tcx>) {\n                 self.super_local_decl(local_decl);\n@@ -467,9 +461,9 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     Rvalue::Repeat(ref $($mutability)* value,\n-                                   ref $($mutability)* typed_const_val) => {\n+                                   ref $($mutability)* length) => {\n                         self.visit_operand(value, location);\n-                        self.visit_typed_const_val(typed_const_val, location);\n+                        self.visit_const_usize(length, location);\n                     }\n \n                     Rvalue::Ref(r, bk, ref $($mutability)* path) => {\n@@ -648,20 +642,6 @@ macro_rules! make_mir_visitor {\n                 self.visit_literal(literal, location);\n             }\n \n-            fn super_typed_const_val(&mut self,\n-                                     constant: & $($mutability)* TypedConstVal<'tcx>,\n-                                     location: Location) {\n-                let TypedConstVal {\n-                    ref $($mutability)* span,\n-                    ref $($mutability)* ty,\n-                    ref $($mutability)* value,\n-                } = *constant;\n-\n-                self.visit_span(span);\n-                self.visit_ty(ty);\n-                self.visit_const_usize(value, location);\n-            }\n-\n             fn super_literal(&mut self,\n                              literal: & $($mutability)* Literal<'tcx>,\n                              location: Location) {"}, {"sha": "c67bb8ec6c585346fc7d646addcecfaeda46df6f", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=21c61336bb9e327b90f4cb8e87a948be40eeafe5", "patch": "@@ -602,11 +602,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n             ExprKind::Repeat {\n                 value: v.to_ref(),\n-                count: TypedConstVal {\n-                    ty: cx.tcx.types.usize,\n-                    span: c.span,\n-                    value: count\n-                }\n+                count: count,\n             }\n         }\n         hir::ExprRet(ref v) => ExprKind::Return { value: v.to_ref() },"}, {"sha": "2ee375dee08ac7a9a04eeaaddeb436bbcca8effb", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=21c61336bb9e327b90f4cb8e87a948be40eeafe5", "patch": "@@ -14,7 +14,8 @@\n //! unit-tested and separated from the Rust source and compiler data\n //! structures.\n \n-use rustc::mir::{BinOp, BorrowKind, Field, Literal, UnOp, TypedConstVal};\n+use rustc_const_math::ConstUsize;\n+use rustc::mir::{BinOp, BorrowKind, Field, Literal, UnOp};\n use rustc::hir::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::ty::subst::Substs;\n@@ -219,7 +220,7 @@ pub enum ExprKind<'tcx> {\n     },\n     Repeat {\n         value: ExprRef<'tcx>,\n-        count: TypedConstVal<'tcx>,\n+        count: ConstUsize,\n     },\n     Array {\n         fields: Vec<ExprRef<'tcx>>,"}, {"sha": "ce02cb0e8364374e06c9a7105aad2050f6018d86", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=21c61336bb9e327b90f4cb8e87a948be40eeafe5", "patch": "@@ -19,7 +19,7 @@ use rustc::mir::{Constant, Literal, Location, LocalDecl};\n use rustc::mir::{Lvalue, LvalueElem, LvalueProjection};\n use rustc::mir::{Mir, Operand, ProjectionElem};\n use rustc::mir::{Rvalue, SourceInfo, Statement, StatementKind};\n-use rustc::mir::{Terminator, TerminatorKind, TypedConstVal, VisibilityScope, VisibilityScopeData};\n+use rustc::mir::{Terminator, TerminatorKind, VisibilityScope, VisibilityScopeData};\n use rustc::mir::visit as mir_visit;\n use rustc::mir::visit::Visitor;\n use rustc::ty::{ClosureSubsts, TyCtxt};\n@@ -297,13 +297,6 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.super_const_usize(const_usize);\n     }\n \n-    fn visit_typed_const_val(&mut self,\n-                             val: &TypedConstVal<'tcx>,\n-                             location: Location) {\n-        self.record(\"TypedConstVal\", val);\n-        self.super_typed_const_val(val, location);\n-    }\n-\n     fn visit_local_decl(&mut self,\n                         local_decl: &LocalDecl<'tcx>) {\n         self.record(\"LocalDecl\", local_decl);"}, {"sha": "c524d8351e003c2d47fceee185aa9d5501f3929a", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=21c61336bb9e327b90f4cb8e87a948be40eeafe5", "patch": "@@ -529,7 +529,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n \n             mir::Rvalue::Repeat(ref elem, ref count) => {\n                 let elem = self.const_operand(elem, span)?;\n-                let size = count.value.as_u64(tcx.sess.target.uint_type);\n+                let size = count.as_u64(tcx.sess.target.uint_type);\n                 let fields = vec![elem.llval; size as usize];\n                 self.const_array(dest_ty, &fields)\n             }"}, {"sha": "b6af4e52e820b9062fe1641fdcb1ea4aa5220f3e", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c61336bb9e327b90f4cb8e87a948be40eeafe5/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=21c61336bb9e327b90f4cb8e87a948be40eeafe5", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n             mir::Rvalue::Repeat(ref elem, ref count) => {\n                 let tr_elem = self.trans_operand(&bcx, elem);\n-                let size = count.value.as_u64(bcx.tcx().sess.target.uint_type);\n+                let size = count.as_u64(bcx.tcx().sess.target.uint_type);\n                 let size = C_uint(bcx.ccx, size);\n                 let base = base::get_dataptr(&bcx, dest.llval);\n                 tvec::slice_for_each(&bcx, base, tr_elem.ty, size, |bcx, llslot| {"}]}