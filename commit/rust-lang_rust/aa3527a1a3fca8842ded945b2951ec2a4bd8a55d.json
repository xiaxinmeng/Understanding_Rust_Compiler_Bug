{"sha": "aa3527a1a3fca8842ded945b2951ec2a4bd8a55d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMzUyN2ExYTNmY2E4ODQyZGVkOTQ1YjI5NTFlYzJhNGJkOGE1NWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T20:06:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:56Z"}, "message": "libsyntax: De-`@mut` `StringReader::col`", "tree": {"sha": "168d2e3a8b7bb569e4c00c0ece85806b6b0ffe3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168d2e3a8b7bb569e4c00c0ece85806b6b0ffe3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3527a1a3fca8842ded945b2951ec2a4bd8a55d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3527a1a3fca8842ded945b2951ec2a4bd8a55d", "html_url": "https://github.com/rust-lang/rust/commit/aa3527a1a3fca8842ded945b2951ec2a4bd8a55d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3527a1a3fca8842ded945b2951ec2a4bd8a55d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13b235d1e5d7604f0f1b4bfd9941ff046cef1277", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b235d1e5d7604f0f1b4bfd9941ff046cef1277", "html_url": "https://github.com/rust-lang/rust/commit/13b235d1e5d7604f0f1b4bfd9941ff046cef1277"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "b69331c7c6be84035103925474f021c6930dee55", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3527a1a3fca8842ded945b2951ec2a4bd8a55d/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3527a1a3fca8842ded945b2951ec2a4bd8a55d/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=aa3527a1a3fca8842ded945b2951ec2a4bd8a55d", "patch": "@@ -171,7 +171,7 @@ fn push_blank_line_comment(rdr: @mut StringReader, comments: &mut ~[cmnt]) {\n fn consume_whitespace_counting_blank_lines(rdr: @mut StringReader,\n                                            comments: &mut ~[cmnt]) {\n     while is_whitespace(rdr.curr) && !is_eof(rdr) {\n-        if rdr.col == CharPos(0u) && rdr.curr == '\\n' {\n+        if rdr.col.get() == CharPos(0u) && rdr.curr == '\\n' {\n             push_blank_line_comment(rdr, &mut *comments);\n         }\n         bump(rdr);\n@@ -254,7 +254,7 @@ fn read_block_comment(rdr: @mut StringReader,\n     debug!(\">>> block comment\");\n     let p = rdr.last_pos.get();\n     let mut lines: ~[~str] = ~[];\n-    let col: CharPos = rdr.col;\n+    let col: CharPos = rdr.col.get();\n     bump(rdr);\n     bump(rdr);\n "}, {"sha": "34aa9c5142b05ee3055982442d7b6adaed94ddad", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa3527a1a3fca8842ded945b2951ec2a4bd8a55d/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3527a1a3fca8842ded945b2951ec2a4bd8a55d/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=aa3527a1a3fca8842ded945b2951ec2a4bd8a55d", "patch": "@@ -48,7 +48,7 @@ pub struct StringReader {\n     // The absolute offset within the codemap of the last character read(curr)\n     last_pos: Cell<BytePos>,\n     // The column of the next character to read\n-    col: CharPos,\n+    col: Cell<CharPos>,\n     // The last character to be read\n     curr: char,\n     filemap: @codemap::FileMap,\n@@ -76,7 +76,7 @@ pub fn new_low_level_string_reader(span_diagnostic: @mut SpanHandler,\n         src: filemap.src,\n         pos: Cell::new(filemap.start_pos),\n         last_pos: Cell::new(filemap.start_pos),\n-        col: CharPos(0),\n+        col: Cell::new(CharPos(0)),\n         curr: initial_char,\n         filemap: filemap,\n         /* dummy values; not read */\n@@ -96,7 +96,7 @@ fn dup_string_reader(r: @mut StringReader) -> @mut StringReader {\n         src: r.src,\n         pos: Cell::new(r.pos.get()),\n         last_pos: Cell::new(r.last_pos.get()),\n-        col: r.col,\n+        col: Cell::new(r.col.get()),\n         curr: r.curr,\n         filemap: r.filemap,\n         peek_tok: r.peek_tok.clone(),\n@@ -249,10 +249,10 @@ pub fn bump(rdr: &mut StringReader) {\n         let byte_offset_diff = next.next - current_byte_offset;\n         rdr.pos.set(rdr.pos.get() + Pos::from_uint(byte_offset_diff));\n         rdr.curr = next.ch;\n-        rdr.col = rdr.col + CharPos(1u);\n+        rdr.col.set(rdr.col.get() + CharPos(1u));\n         if last_char == '\\n' {\n             rdr.filemap.next_line(rdr.last_pos.get());\n-            rdr.col = CharPos(0u);\n+            rdr.col.set(CharPos(0u));\n         }\n \n         if byte_offset_diff > 1 {"}]}