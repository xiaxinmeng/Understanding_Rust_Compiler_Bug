{"sha": "30e526805dc5ce51c683059beb881828dfa0099d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZTUyNjgwNWRjNWNlNTFjNjgzMDU5YmViODgxODI4ZGZhMDA5OWQ=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-08-08T20:22:04Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-09-05T16:21:14Z"}, "message": "rustdoc: add new \"Implementations on Foreign Types\" section to traits", "tree": {"sha": "6338ba726304b75ad0fbebdbb3193f599fd4d3f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6338ba726304b75ad0fbebdbb3193f599fd4d3f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30e526805dc5ce51c683059beb881828dfa0099d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30e526805dc5ce51c683059beb881828dfa0099d", "html_url": "https://github.com/rust-lang/rust/commit/30e526805dc5ce51c683059beb881828dfa0099d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30e526805dc5ce51c683059beb881828dfa0099d/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "html_url": "https://github.com/rust-lang/rust/commit/2f1ef9ef1181298d46e79d5dde6bafeb6483926f"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "60651bd617f959066d3bdf080145be4c08e4a3f5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30e526805dc5ce51c683059beb881828dfa0099d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e526805dc5ce51c683059beb881828dfa0099d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=30e526805dc5ce51c683059beb881828dfa0099d", "patch": "@@ -1651,6 +1651,16 @@ impl GetDefId for Type {\n     fn def_id(&self) -> Option<DefId> {\n         match *self {\n             ResolvedPath { did, .. } => Some(did),\n+            Primitive(p) => ::html::render::cache().primitive_locations.get(&p).cloned(),\n+            BorrowedRef { type_: box Generic(..), .. } =>\n+                Primitive(PrimitiveType::Reference).def_id(),\n+            BorrowedRef { ref type_, .. } => type_.def_id(),\n+            Tuple(..) => Primitive(PrimitiveType::Tuple).def_id(),\n+            BareFunction(..) => Primitive(PrimitiveType::Fn).def_id(),\n+            Slice(..) => Primitive(PrimitiveType::Slice).def_id(),\n+            Array(..) => Primitive(PrimitiveType::Array).def_id(),\n+            RawPointer(..) => Primitive(PrimitiveType::RawPointer).def_id(),\n+            QPath { ref self_type, .. } => self_type.def_id(),\n             _ => None,\n         }\n     }"}, {"sha": "8e0ce73c4ad429f3065cd6ec8cc2e60aa1d84c80", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/30e526805dc5ce51c683059beb881828dfa0099d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e526805dc5ce51c683059beb881828dfa0099d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=30e526805dc5ce51c683059beb881828dfa0099d", "patch": "@@ -2416,12 +2416,12 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)?;\n \n     let cache = cache();\n-    write!(w, \"\n+    let impl_header = \"\n         <h2 id='implementors' class='small-section-header'>\n           Implementors<a href='#implementors' class='anchor'></a>\n         </h2>\n         <ul class='item-list' id='implementors-list'>\n-    \")?;\n+    \";\n     if let Some(implementors) = cache.implementors.get(&it.def_id) {\n         // The DefId is for the first Type found with that name. The bool is\n         // if any Types with the same name but different DefId have been found.\n@@ -2443,7 +2443,38 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             }\n         }\n \n-        for implementor in implementors {\n+        let (local, foreign) = implementors.iter()\n+            .partition::<Vec<_>, _>(|i| i.impl_.for_.def_id()\n+                                         .map_or(true, |d| cache.paths.contains_key(&d)));\n+\n+        if !foreign.is_empty() {\n+            write!(w, \"\n+                <h2 id='foreign-impls' class='section-header'>\n+                  Implementations on Foreign Types<a href='#foreign-impls' class='anchor'></a>\n+                </h2>\n+            \")?;\n+\n+            for implementor in foreign {\n+                // need to get from a clean::Impl to a clean::Item so i can use render_impl\n+                if let Some(t_did) = implementor.impl_.for_.def_id() {\n+                    if let Some(impl_item) = cache.impls.get(&t_did).and_then(|i| i.iter()\n+                        .find(|i| i.impl_item.def_id == implementor.def_id))\n+                    {\n+                        let i = &impl_item.impl_item;\n+                        let impl_ = Impl { impl_item: i.clone() };\n+                        let assoc_link = AssocItemLink::GotoSource(\n+                            i.def_id, &implementor.impl_.provided_trait_methods\n+                        );\n+                        render_impl(w, cx, &impl_, assoc_link,\n+                                    RenderMode::Normal, i.stable_since(), false)?;\n+                    }\n+                }\n+            }\n+        }\n+\n+        write!(w, \"{}\", impl_header)?;\n+\n+        for implementor in local {\n             write!(w, \"<li><code>\")?;\n             // If there's already another implementor that has the same abbridged name, use the\n             // full path, for example in `std::iter::ExactSizeIterator`\n@@ -2465,6 +2496,10 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             }\n             writeln!(w, \"</code></li>\")?;\n         }\n+    } else {\n+        // even without any implementations to write in, we still want the heading and list, so the\n+        // implementors javascript file pulled in below has somewhere to write the impls into\n+        write!(w, \"{}\", impl_header)?;\n     }\n     write!(w, \"</ul>\")?;\n     write!(w, r#\"<script type=\"text/javascript\" async\n@@ -3069,7 +3104,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n         };\n         for i in &non_trait {\n             render_impl(w, cx, i, AssocItemLink::Anchor(None), render_mode,\n-                        containing_item.stable_since())?;\n+                        containing_item.stable_since(), true)?;\n         }\n     }\n     if let AssocItemRender::DerefFor { .. } = what {\n@@ -3094,7 +3129,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             let did = i.trait_did().unwrap();\n             let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);\n             render_impl(w, cx, i, assoc_link,\n-                        RenderMode::Normal, containing_item.stable_since())?;\n+                        RenderMode::Normal, containing_item.stable_since(), true)?;\n         }\n     }\n     Ok(())\n@@ -3124,7 +3159,8 @@ fn render_deref_methods(w: &mut fmt::Formatter, cx: &Context, impl_: &Impl,\n }\n \n fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLink,\n-               render_mode: RenderMode, outer_version: Option<&str>) -> fmt::Result {\n+               render_mode: RenderMode, outer_version: Option<&str>,\n+               show_def_docs: bool) -> fmt::Result {\n     if render_mode == RenderMode::Normal {\n         let id = derive_id(match i.inner_impl().trait_ {\n             Some(ref t) => format!(\"impl-{}\", Escape(&format!(\"{:#}\", t))),\n@@ -3153,7 +3189,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     fn doc_impl_item(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n                      link: AssocItemLink, render_mode: RenderMode,\n                      is_default_item: bool, outer_version: Option<&str>,\n-                     trait_: Option<&clean::Trait>) -> fmt::Result {\n+                     trait_: Option<&clean::Trait>, show_def_docs: bool) -> fmt::Result {\n         let item_type = item.type_();\n         let name = item.name.as_ref().unwrap();\n \n@@ -3248,19 +3284,23 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                         document_stability(w, cx, it)?;\n                         if item.doc_value().is_some() {\n                             document_full(w, item, cx, &prefix)?;\n-                        } else {\n+                        } else if show_def_docs {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n                             document_short(w, it, link, cx, &prefix)?;\n                         }\n                     }\n                 } else {\n                     document_stability(w, cx, item)?;\n-                    document_full(w, item, cx, &prefix)?;\n+                    if show_def_docs {\n+                        document_full(w, item, cx, &prefix)?;\n+                    }\n                 }\n             } else {\n                 document_stability(w, cx, item)?;\n-                document_short(w, item, link, cx, &prefix)?;\n+                if show_def_docs {\n+                    document_short(w, item, link, cx, &prefix)?;\n+                }\n             }\n         }\n         Ok(())\n@@ -3272,15 +3312,16 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     write!(w, \"<div class='impl-items'>\")?;\n     for trait_item in &i.inner_impl().items {\n         doc_impl_item(w, cx, trait_item, link, render_mode,\n-                      false, outer_version, trait_)?;\n+                      false, outer_version, trait_, show_def_docs)?;\n     }\n \n     fn render_default_items(w: &mut fmt::Formatter,\n                             cx: &Context,\n                             t: &clean::Trait,\n                             i: &clean::Impl,\n                             render_mode: RenderMode,\n-                            outer_version: Option<&str>) -> fmt::Result {\n+                            outer_version: Option<&str>,\n+                            show_def_docs: bool) -> fmt::Result {\n         for trait_item in &t.items {\n             let n = trait_item.name.clone();\n             if i.items.iter().find(|m| m.name == n).is_some() {\n@@ -3290,15 +3331,16 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             let assoc_link = AssocItemLink::GotoSource(did, &i.provided_trait_methods);\n \n             doc_impl_item(w, cx, trait_item, assoc_link, render_mode, true,\n-                          outer_version, None)?;\n+                          outer_version, None, show_def_docs)?;\n         }\n         Ok(())\n     }\n \n     // If we've implemented a trait, then also emit documentation for all\n     // default items which weren't overridden in the implementation block.\n     if let Some(t) = trait_ {\n-        render_default_items(w, cx, t, &i.inner_impl(), render_mode, outer_version)?;\n+        render_default_items(w, cx, t, &i.inner_impl(),\n+                             render_mode, outer_version, show_def_docs)?;\n     }\n     write!(w, \"</div>\")?;\n     Ok(())"}]}