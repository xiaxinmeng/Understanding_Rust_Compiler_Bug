{"sha": "7092d42c04a56378d2e748f98169b728b1f1d5d1", "node_id": "C_kwDOAAsO6NoAKDcwOTJkNDJjMDRhNTYzNzhkMmU3NDhmOTgxNjliNzI4YjFmMWQ1ZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T06:17:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T06:17:54Z"}, "message": "Auto merge of #97980 - Dylan-DPC:rollup-l8exe4b, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #96868 (Stabilize explicit_generic_args_with_impl_trait)\n - #97703 (some additional `need_type_info.rs` cleanup)\n - #97812 (Suggest to swap a struct and a trait in trait impls)\n - #97958 (ExitStatus docs fixups)\n - #97967 (Mention `infer::Trace` methods on `infer::At` methods' docs)\n - #97972 (Update #[doc(html_playground_url)] documentation to mention what the request will be)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "92e9f7d92c2026e1d7cbbd88143b1782ad2c3a69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92e9f7d92c2026e1d7cbbd88143b1782ad2c3a69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7092d42c04a56378d2e748f98169b728b1f1d5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7092d42c04a56378d2e748f98169b728b1f1d5d1", "html_url": "https://github.com/rust-lang/rust/commit/7092d42c04a56378d2e748f98169b728b1f1d5d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7092d42c04a56378d2e748f98169b728b1f1d5d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84594661c1b51feb539b479b58bb551fcf8e19a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84594661c1b51feb539b479b58bb551fcf8e19a", "html_url": "https://github.com/rust-lang/rust/commit/c84594661c1b51feb539b479b58bb551fcf8e19a"}, {"sha": "1f68d5f9e4f17ba800bb89dfc068e8fe6d82d9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f68d5f9e4f17ba800bb89dfc068e8fe6d82d9e4", "html_url": "https://github.com/rust-lang/rust/commit/1f68d5f9e4f17ba800bb89dfc068e8fe6d82d9e4"}], "stats": {"total": 863, "additions": 495, "deletions": 368}, "files": [{"sha": "7e0a5c71f5f6f20f8153de361f99c936dc79e715", "filename": "compiler/rustc_error_codes/src/error_codes/E0632.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0632.md", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0632.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0632.md?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1,9 +1,11 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An explicit generic argument was provided when calling a function that\n uses `impl Trait` in argument position.\n \n Erroneous code example:\n \n-```compile_fail,E0632\n+```ignore (no longer an error)\n fn foo<T: Copy>(a: T, b: impl Clone) {}\n \n foo::<i32>(0i32, \"abc\".to_string());"}, {"sha": "c61735a57e163aaf929049df2823e9a326b52588", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -95,12 +95,6 @@ typeck-expected-return-type = expected `{$expected}` because of return type\n typeck-unconstrained-opaque-type = unconstrained opaque type\n     .note = `{$name}` must be used in combination with a concrete type within the same module\n \n-typeck-explicit-generic-args-with-impl-trait =\n-    cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-    .label = explicit generic argument not allowed\n-    .note = see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-    .help = add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n typeck-missing-type-params =\n     the type {$parameterCount ->\n         [one] parameter"}, {"sha": "099c40b215d9992b576c57a8855df60566abb1b8", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -142,6 +142,8 @@ declare_features! (\n     (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n     /// Allows integer match exhaustiveness checking (RFC 2591).\n     (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n+    /// Allows explicit generic arguments specification with `impl Trait` present.\n+    (accepted, explicit_generic_args_with_impl_trait, \"1.63.0\", Some(83701), None),\n     /// Allows arbitrary expressions in key-value attributes at parse time.\n     (accepted, extended_key_value_attributes, \"1.54.0\", Some(78835), None),\n     /// Allows resolving absolute paths as paths from other crates."}, {"sha": "35473b6e97abebd38ad7870e1e5639f7d2501125", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -383,8 +383,6 @@ declare_features! (\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n-    /// Allows explicit generic arguments specification with `impl Trait` present.\n-    (active, explicit_generic_args_with_impl_trait, \"1.56.0\", Some(83701), None),\n     /// Allows defining `extern type`s.\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n     /// Allows the use of `#[ffi_const]` on foreign functions."}, {"sha": "ce2698ef44cd49d4e1fdd68fbe5a7e47469b120d", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -111,6 +111,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `a <: b`, where `a` may or may not be expected.\n+    ///\n+    /// See [`At::trace_exp`] and [`Trace::sub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn sub_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -122,6 +125,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// call like `foo(x)`, where `foo: fn(i32)`, you might have\n     /// `sup(i32, x)`, since the \"expected\" type is the type that\n     /// appears in the signature.\n+    ///\n+    /// See [`At::trace`] and [`Trace::sub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn sup<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -130,6 +136,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n+    ///\n+    /// See [`At::trace`] and [`Trace::sub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn sub<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -138,6 +147,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n+    ///\n+    /// See [`At::trace_exp`] and [`Trace::eq`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn eq_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -146,6 +158,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n+    ///\n+    /// See [`At::trace`] and [`Trace::eq`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn eq<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -176,6 +191,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// this can result in an error (e.g., if asked to compute LUB of\n     /// u32 and i32), it is meaningful to call one of them the\n     /// \"expected type\".\n+    ///\n+    /// See [`At::trace`] and [`Trace::lub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn lub<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>\n     where\n         T: ToTrace<'tcx>,\n@@ -186,6 +204,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// Computes the greatest-lower-bound, or mutual subtype, of two\n     /// values. As with `lub` order doesn't matter, except for error\n     /// cases.\n+    ///\n+    /// See [`At::trace`] and [`Trace::glb`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn glb<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>\n     where\n         T: ToTrace<'tcx>,"}, {"sha": "1181925dd96721b6e427020904ac2faf29c2fe48", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 46, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -67,10 +67,8 @@ use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::dep_graph::DepContext;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n-    self,\n-    error::TypeError,\n-    subst::{GenericArgKind, Subst, SubstsRef},\n-    Binder, EarlyBinder, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n+    self, error::TypeError, Binder, List, Region, Subst, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable,\n };\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n@@ -926,10 +924,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         mut t1_out: &mut DiagnosticStyledString,\n         mut t2_out: &mut DiagnosticStyledString,\n         path: String,\n-        sub: ty::subst::SubstsRef<'tcx>,\n+        sub: &'tcx [ty::GenericArg<'tcx>],\n         other_path: String,\n         other_ty: Ty<'tcx>,\n     ) -> Option<()> {\n+        // FIXME/HACK: Go back to `SubstsRef` to use its inherent methods,\n+        // ideally that shouldn't be necessary.\n+        let sub = self.tcx.intern_substs(sub);\n         for (i, ta) in sub.types().enumerate() {\n             if ta == other_ty {\n                 self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, other_ty);\n@@ -960,45 +961,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// For generic types with parameters with defaults, remove the parameters corresponding to\n-    /// the defaults. This repeats a lot of the logic found in `ty::print::pretty`.\n-    fn strip_generic_default_params(\n-        &self,\n-        def_id: DefId,\n-        substs: ty::subst::SubstsRef<'tcx>,\n-    ) -> SubstsRef<'tcx> {\n-        let generics = self.tcx.generics_of(def_id);\n-        let mut num_supplied_defaults = 0;\n-\n-        let default_params = generics.params.iter().rev().filter_map(|param| match param.kind {\n-            ty::GenericParamDefKind::Type { has_default: true, .. } => Some(param.def_id),\n-            ty::GenericParamDefKind::Const { has_default: true } => Some(param.def_id),\n-            _ => None,\n-        });\n-        for (def_id, actual) in iter::zip(default_params, substs.iter().rev()) {\n-            match actual.unpack() {\n-                GenericArgKind::Const(c) => {\n-                    if EarlyBinder(self.tcx.const_param_default(def_id)).subst(self.tcx, substs)\n-                        != c\n-                    {\n-                        break;\n-                    }\n-                }\n-                GenericArgKind::Type(ty) => {\n-                    if self.tcx.bound_type_of(def_id).subst(self.tcx, substs) != ty {\n-                        break;\n-                    }\n-                }\n-                _ => break,\n-            }\n-            num_supplied_defaults += 1;\n-        }\n-        let len = generics.params.len();\n-        let mut generics = generics.clone();\n-        generics.params.truncate(len - num_supplied_defaults);\n-        substs.truncate_to(self.tcx, &generics)\n-    }\n-\n     /// Given two `fn` signatures highlight only sub-parts that are different.\n     fn cmp_fn_sig(\n         &self,\n@@ -1156,8 +1118,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             (&ty::Adt(def1, sub1), &ty::Adt(def2, sub2)) => {\n                 let did1 = def1.did();\n                 let did2 = def2.did();\n-                let sub_no_defaults_1 = self.strip_generic_default_params(did1, sub1);\n-                let sub_no_defaults_2 = self.strip_generic_default_params(did2, sub2);\n+                let sub_no_defaults_1 =\n+                    self.tcx.generics_of(did1).own_substs_no_defaults(self.tcx, sub1);\n+                let sub_no_defaults_2 =\n+                    self.tcx.generics_of(did2).own_substs_no_defaults(self.tcx, sub2);\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n                 let path1 = self.tcx.def_path_str(did1);\n                 let path2 = self.tcx.def_path_str(did2);"}, {"sha": "207d2870c5c79e7ace349152543cb7e562c7838d", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -2,6 +2,7 @@ use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -11,7 +12,7 @@ use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n-use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, InferConst};\n+use rustc_middle::ty::{self, DefIdTree, InferConst};\n use rustc_middle::ty::{Ty, TyCtxt, TypeckResults};\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{BytePos, Span};\n@@ -853,12 +854,23 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                             hir::TyKind::Path(hir::QPath::Resolved(_self_ty, path)),\n                         ) => {\n                             if tcx.res_generics_def_id(path.res) != Some(def.did()) {\n-                                bug!(\n-                                    \"unexpected path: def={:?} substs={:?} path={:?}\",\n-                                    def,\n-                                    substs,\n-                                    path,\n-                                );\n+                                match path.res {\n+                                    Res::Def(DefKind::TyAlias, _) => {\n+                                        // FIXME: Ideally we should support this. For that\n+                                        // we have to map back from the self type to the\n+                                        // type alias though. That's difficult.\n+                                        //\n+                                        // See the `need_type_info/type-alias.rs` test for\n+                                        // some examples.\n+                                    }\n+                                    // There cannot be inference variables in the self type,\n+                                    // so there's nothing for us to do here.\n+                                    Res::SelfTy { .. } => {}\n+                                    _ => warn!(\n+                                        \"unexpected path: def={:?} substs={:?} path={:?}\",\n+                                        def, substs, path,\n+                                    ),\n+                                }\n                             } else {\n                                 return Box::new(\n                                     self.resolved_path_inferred_subst_iter(path, substs)\n@@ -958,26 +970,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n                 generics.own_substs(substs).iter().position(|&arg| self.generic_arg_is_target(arg))\n             {\n                 let substs = self.infcx.resolve_vars_if_possible(substs);\n-                let num_args = generics\n-                    .params\n-                    .iter()\n-                    .rev()\n-                    .filter(|&p| !matches!(p.kind, GenericParamDefKind::Lifetime))\n-                    .skip_while(|&param| {\n-                        if let Some(default) = param.default_value(tcx) {\n-                            // FIXME: Using structural comparisions has a bunch of false negatives.\n-                            //\n-                            // We should instead try to replace inference variables with placeholders and\n-                            // then use `infcx.can_eq`. That probably should be a separate method\n-                            // generally used during error reporting.\n-                            default.subst(tcx, substs) == substs[param.index as usize]\n-                        } else {\n-                            false\n-                        }\n-                    })\n-                    .count();\n-                let generic_args =\n-                    &generics.own_substs(substs)[generics.own_counts().lifetimes..][..num_args];\n+                let generic_args = &generics.own_substs_no_defaults(tcx, substs)\n+                    [generics.own_counts().lifetimes..];\n                 let span = match expr.kind {\n                     ExprKind::MethodCall(path, _, _) => path.ident.span,\n                     _ => expr.span,"}, {"sha": "5fff840c39ec709e960540b0a1e1c0fc7179f7d8", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -228,8 +228,47 @@ impl<'tcx> Generics {\n         })\n     }\n \n+    /// Returns the substs corresponding to the generic parameters\n+    /// of this item, excluding `Self`.\n+    ///\n+    /// **This should only be used for diagnostics purposes.**\n+    pub fn own_substs_no_defaults(\n+        &'tcx self,\n+        tcx: TyCtxt<'tcx>,\n+        substs: &'tcx [ty::GenericArg<'tcx>],\n+    ) -> &'tcx [ty::GenericArg<'tcx>] {\n+        let mut own_params = self.parent_count..self.count();\n+        if self.has_self && self.parent.is_none() {\n+            own_params.start = 1;\n+        }\n+\n+        // Filter the default arguments.\n+        //\n+        // This currently uses structural equality instead\n+        // of semantic equivalance. While not ideal, that's\n+        // good enough for now as this should only be used\n+        // for diagnostics anyways.\n+        own_params.end -= self\n+            .params\n+            .iter()\n+            .rev()\n+            .take_while(|param| {\n+                param.default_value(tcx).map_or(false, |default| {\n+                    default.subst(tcx, substs) == substs[param.index as usize]\n+                })\n+            })\n+            .count();\n+\n+        &substs[own_params]\n+    }\n+\n     /// Returns the substs corresponding to the generic parameters of this item, excluding `Self`.\n-    pub fn own_substs(&'tcx self, substs: SubstsRef<'tcx>) -> &'tcx [ty::GenericArg<'tcx>] {\n+    ///\n+    /// **This should only be used for diagnostics purposes.**\n+    pub fn own_substs(\n+        &'tcx self,\n+        substs: &'tcx [ty::GenericArg<'tcx>],\n+    ) -> &'tcx [ty::GenericArg<'tcx>] {\n         let own = &substs[self.parent_count..][..self.params.len()];\n         if self.has_self && self.parent.is_none() { &own[1..] } else { &own }\n     }"}, {"sha": "7f0f3755c4b33bf501f700130d866c14d90421c2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -22,7 +22,6 @@ use crate::mir::{Body, GeneratorLayout};\n use crate::traits::{self, Reveal};\n use crate::ty;\n use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::Discr;\n pub use adt::*;\n pub use assoc::*;\n@@ -44,6 +43,7 @@ use rustc_session::cstore::CrateStoreDyn;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n+pub use subst::*;\n pub use vtable::*;\n \n use std::fmt::Debug;"}, {"sha": "5ad93d778208dd1c651a619ede544dca89bb6301", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -149,7 +149,7 @@ pub trait Printer<'tcx>: Sized {\n                         // on top of the same path, but without its own generics.\n                         _ => {\n                             if !generics.params.is_empty() && substs.len() >= generics.count() {\n-                                let args = self.generic_args_to_print(generics, substs);\n+                                let args = generics.own_substs_no_defaults(self.tcx(), substs);\n                                 return self.path_generic_args(\n                                     |cx| cx.print_def_path(def_id, parent_substs),\n                                     args,\n@@ -184,43 +184,6 @@ pub trait Printer<'tcx>: Sized {\n         }\n     }\n \n-    fn generic_args_to_print(\n-        &self,\n-        generics: &'tcx ty::Generics,\n-        substs: &'tcx [GenericArg<'tcx>],\n-    ) -> &'tcx [GenericArg<'tcx>] {\n-        let mut own_params = generics.parent_count..generics.count();\n-\n-        // Don't print args for `Self` parameters (of traits).\n-        if generics.has_self && own_params.start == 0 {\n-            own_params.start = 1;\n-        }\n-\n-        // Don't print args that are the defaults of their respective parameters.\n-        own_params.end -= generics\n-            .params\n-            .iter()\n-            .rev()\n-            .take_while(|param| match param.kind {\n-                ty::GenericParamDefKind::Lifetime => false,\n-                ty::GenericParamDefKind::Type { has_default, .. } => {\n-                    has_default\n-                        && substs[param.index as usize]\n-                            == GenericArg::from(\n-                                self.tcx().bound_type_of(param.def_id).subst(self.tcx(), substs),\n-                            )\n-                }\n-                ty::GenericParamDefKind::Const { has_default } => {\n-                    has_default\n-                        && substs[param.index as usize]\n-                            == GenericArg::from(self.tcx().const_param_default(param.def_id))\n-                }\n-            })\n-            .count();\n-\n-        &substs[own_params]\n-    }\n-\n     fn default_print_impl_path(\n         self,\n         impl_def_id: DefId,"}, {"sha": "53a97a46b2d2627082f10eee33fbf72aa2a67146", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -825,12 +825,11 @@ pub trait PrettyPrinter<'tcx>:\n \n         for (fn_once_trait_ref, entry) in fn_traits {\n             // Get the (single) generic ty (the args) of this FnOnce trait ref.\n-            let generics = self.generic_args_to_print(\n-                self.tcx().generics_of(fn_once_trait_ref.def_id()),\n-                fn_once_trait_ref.skip_binder().substs,\n-            );\n+            let generics = self.tcx().generics_of(fn_once_trait_ref.def_id());\n+            let args =\n+                generics.own_substs_no_defaults(self.tcx(), fn_once_trait_ref.skip_binder().substs);\n \n-            match (entry.return_ty, generics[0].expect_ty()) {\n+            match (entry.return_ty, args[0].expect_ty()) {\n                 // We can only print `impl Fn() -> ()` if we have a tuple of args and we recorded\n                 // a return type.\n                 (Some(return_ty), arg_tys) if matches!(arg_tys.kind(), ty::Tuple(_)) => {\n@@ -892,15 +891,13 @@ pub trait PrettyPrinter<'tcx>:\n                 print(trait_ref.skip_binder().print_only_trait_name())\n             );\n \n-            let generics = self.generic_args_to_print(\n-                self.tcx().generics_of(trait_ref.def_id()),\n-                trait_ref.skip_binder().substs,\n-            );\n+            let generics = self.tcx().generics_of(trait_ref.def_id());\n+            let args = generics.own_substs_no_defaults(self.tcx(), trait_ref.skip_binder().substs);\n \n-            if !generics.is_empty() || !assoc_items.is_empty() {\n+            if !args.is_empty() || !assoc_items.is_empty() {\n                 let mut first = true;\n \n-                for ty in generics {\n+                for ty in args {\n                     if first {\n                         p!(\"<\");\n                         first = false;\n@@ -1071,10 +1068,10 @@ pub trait PrettyPrinter<'tcx>:\n                     let dummy_cx = cx.tcx().mk_ty_infer(ty::FreshTy(0));\n                     let principal = principal.with_self_ty(cx.tcx(), dummy_cx);\n \n-                    let args = cx.generic_args_to_print(\n-                        cx.tcx().generics_of(principal.def_id),\n-                        principal.substs,\n-                    );\n+                    let args = cx\n+                        .tcx()\n+                        .generics_of(principal.def_id)\n+                        .own_substs_no_defaults(cx.tcx(), principal.substs);\n \n                     // Don't print `'_` if there's no unerased regions.\n                     let print_regions = args.iter().any(|arg| match arg.unpack() {"}, {"sha": "23c1767cb90516f525ad7f61ef3c236d42b1b676", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -513,6 +513,9 @@ struct DiagnosticMetadata<'ast> {\n \n     /// The current impl items (used to suggest).\n     current_impl_items: Option<&'ast [P<AssocItem>]>,\n+\n+    /// When processing impl trait\n+    currently_processing_impl_trait: Option<(TraitRef, Ty)>,\n }\n \n struct LateResolutionVisitor<'a, 'b, 'ast> {\n@@ -2087,18 +2090,22 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn with_optional_trait_ref<T>(\n         &mut self,\n         opt_trait_ref: Option<&TraitRef>,\n+        self_type: &'ast Ty,\n         f: impl FnOnce(&mut Self, Option<DefId>) -> T,\n     ) -> T {\n         let mut new_val = None;\n         let mut new_id = None;\n         if let Some(trait_ref) = opt_trait_ref {\n             let path: Vec<_> = Segment::from_path(&trait_ref.path);\n+            self.diagnostic_metadata.currently_processing_impl_trait =\n+                Some((trait_ref.clone(), self_type.clone()));\n             let res = self.smart_resolve_path_fragment(\n                 None,\n                 &path,\n                 PathSource::Trait(AliasPossibility::No),\n                 Finalize::new(trait_ref.ref_id, trait_ref.path.span),\n             );\n+            self.diagnostic_metadata.currently_processing_impl_trait = None;\n             if let Some(def_id) = res.base_res().opt_def_id() {\n                 new_id = Some(def_id);\n                 new_val = Some((self.r.expect_module(def_id), trait_ref.clone()));\n@@ -2139,7 +2146,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             this.with_self_rib(Res::SelfTy { trait_: None, alias_to: None }, |this| {\n                 this.with_lifetime_rib(LifetimeRibKind::AnonymousCreateParameter(item_id), |this| {\n                     // Resolve the trait reference, if necessary.\n-                    this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n+                    this.with_optional_trait_ref(opt_trait_reference.as_ref(), self_type, |this, trait_id| {\n                         let item_def_id = this.r.local_def_id(item_id);\n \n                         // Register the trait definitions from here."}, {"sha": "68ddc37c3a82bcb2e3e92f1103cfe2c8faa4d8b3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -146,6 +146,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_expected = &|res| source.is_expected(res);\n         let is_enum_variant = &|res| matches!(res, Res::Def(DefKind::Variant, _));\n \n+        debug!(?res, ?source);\n+\n         // Make the base error.\n         struct BaseError<'a> {\n             msg: String,\n@@ -250,6 +252,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let mut err =\n             self.r.session.struct_span_err_with_code(base_error.span, &base_error.msg, code);\n \n+        self.suggest_swapping_misplaced_self_ty_and_trait(&mut err, source, res, base_error.span);\n+\n         if let Some(sugg) = base_error.suggestion {\n             err.span_suggestion_verbose(sugg.0, sugg.1, sugg.2, Applicability::MaybeIncorrect);\n         }\n@@ -692,6 +696,35 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n+    fn suggest_swapping_misplaced_self_ty_and_trait(\n+        &mut self,\n+        err: &mut Diagnostic,\n+        source: PathSource<'_>,\n+        res: Option<Res>,\n+        span: Span,\n+    ) {\n+        if let Some((trait_ref, self_ty)) =\n+            self.diagnostic_metadata.currently_processing_impl_trait.clone()\n+            && let TyKind::Path(_, self_ty_path) = &self_ty.kind\n+            && let PathResult::Module(ModuleOrUniformRoot::Module(module)) =\n+                self.resolve_path(&Segment::from_path(self_ty_path), Some(TypeNS), None)\n+            && let ModuleKind::Def(DefKind::Trait, ..) = module.kind\n+            && trait_ref.path.span == span\n+            && let PathSource::Trait(_) = source\n+            && let Some(Res::Def(DefKind::Struct | DefKind::Enum | DefKind::Union, _)) = res\n+            && let Ok(self_ty_str) =\n+                self.r.session.source_map().span_to_snippet(self_ty.span)\n+            && let Ok(trait_ref_str) =\n+                self.r.session.source_map().span_to_snippet(trait_ref.path.span)\n+        {\n+                err.multipart_suggestion(\n+                    \"`impl` items mention the trait being implemented first and the type it is being implemented for second\",\n+                    vec![(trait_ref.path.span, self_ty_str), (self_ty.span, trait_ref_str)],\n+                    Applicability::MaybeIncorrect,\n+                );\n+        }\n+    }\n+\n     fn get_single_associated_item(\n         &mut self,\n         path: &[Segment],"}, {"sha": "d7e2f621065f03e0e7758152080e59ac577d9e79", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -333,7 +333,7 @@ impl<'a> FileNameDisplay<'a> {\n     pub fn to_string_lossy(&self) -> Cow<'a, str> {\n         match self.inner {\n             FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),\n-            _ => Cow::from(format!(\"{}\", self)),\n+            _ => Cow::from(self.to_string()),\n         }\n     }\n }"}, {"sha": "3fe4b5b46e01219147fb9a16240265d25c91085f", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 18, "deletions": 52, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::{\n     AstConv, CreateSubstsForGenericArgsCtxt, ExplicitLateBound, GenericArgCountMismatch,\n     GenericArgCountResult, GenericArgPosition,\n };\n-use crate::errors::{AssocTypeBindingNotAllowed, ExplicitGenericArgsWithImplTrait};\n+use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, MultiSpan};\n@@ -397,19 +397,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         is_method_call: IsMethodCall,\n     ) -> GenericArgCountResult {\n         let empty_args = hir::GenericArgs::none();\n-        let suppress_mismatch = Self::check_impl_trait(tcx, seg, generics);\n-\n         let gen_args = seg.args.unwrap_or(&empty_args);\n         let gen_pos = if is_method_call == IsMethodCall::Yes {\n             GenericArgPosition::MethodCall\n         } else {\n             GenericArgPosition::Value\n         };\n         let has_self = generics.parent.is_none() && generics.has_self;\n-        let infer_args = seg.infer_args || suppress_mismatch;\n \n         Self::check_generic_arg_count(\n-            tcx, span, def_id, seg, generics, gen_args, gen_pos, has_self, infer_args,\n+            tcx,\n+            span,\n+            def_id,\n+            seg,\n+            generics,\n+            gen_args,\n+            gen_pos,\n+            has_self,\n+            seg.infer_args,\n         )\n     }\n \n@@ -431,19 +436,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let param_counts = gen_params.own_counts();\n \n         // Subtracting from param count to ensure type params synthesized from `impl Trait`\n-        // cannot be explicitly specified even with `explicit_generic_args_with_impl_trait`\n-        // feature enabled.\n-        let synth_type_param_count = if tcx.features().explicit_generic_args_with_impl_trait {\n-            gen_params\n-                .params\n-                .iter()\n-                .filter(|param| {\n-                    matches!(param.kind, ty::GenericParamDefKind::Type { synthetic: true, .. })\n-                })\n-                .count()\n-        } else {\n-            0\n-        };\n+        // cannot be explicitly specified.\n+        let synth_type_param_count = gen_params\n+            .params\n+            .iter()\n+            .filter(|param| {\n+                matches!(param.kind, ty::GenericParamDefKind::Type { synthetic: true, .. })\n+            })\n+            .count();\n         let named_type_param_count =\n             param_counts.types - has_self as usize - synth_type_param_count;\n         let infer_lifetimes =\n@@ -611,40 +611,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n     }\n \n-    /// Report error if there is an explicit type parameter when using `impl Trait`.\n-    pub(crate) fn check_impl_trait(\n-        tcx: TyCtxt<'_>,\n-        seg: &hir::PathSegment<'_>,\n-        generics: &ty::Generics,\n-    ) -> bool {\n-        if seg.infer_args || tcx.features().explicit_generic_args_with_impl_trait {\n-            return false;\n-        }\n-\n-        let impl_trait = generics.has_impl_trait();\n-\n-        if impl_trait {\n-            let spans = seg\n-                .args()\n-                .args\n-                .iter()\n-                .filter_map(|arg| match arg {\n-                    GenericArg::Infer(_) | GenericArg::Type(_) | GenericArg::Const(_) => {\n-                        Some(arg.span())\n-                    }\n-                    _ => None,\n-                })\n-                .collect::<Vec<_>>();\n-\n-            tcx.sess.emit_err(ExplicitGenericArgsWithImplTrait {\n-                spans,\n-                is_nightly_build: tcx.sess.is_nightly_build().then_some(()),\n-            });\n-        }\n-\n-        impl_trait\n-    }\n-\n     /// Emits an error regarding forbidden type binding associations\n     pub fn prohibit_assoc_ty_binding(tcx: TyCtxt<'_>, span: Span) {\n         tcx.sess.emit_err(AssocTypeBindingNotAllowed { span });"}, {"sha": "67a3d4a4d020c28a77dc4ee13aa4d847a1e368bc", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -241,17 +241,6 @@ pub struct UnconstrainedOpaqueType {\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error(code = \"E0632\", slug = \"typeck-explicit-generic-args-with-impl-trait\")]\n-#[note]\n-pub struct ExplicitGenericArgsWithImplTrait {\n-    #[primary_span]\n-    #[label]\n-    pub spans: Vec<Span>,\n-    #[help]\n-    pub is_nightly_build: Option<()>,\n-}\n-\n pub struct MissingTypeParams {\n     pub span: Span,\n     pub def_span: Span,"}, {"sha": "82cd3647040a2eabfa028a6913596484ad72461f", "filename": "library/std/src/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1417,13 +1417,13 @@ impl From<fs::File> for Stdio {\n /// For proper error reporting of failed processes, print the value of `ExitStatus` or\n /// `ExitStatusError` using their implementations of [`Display`](crate::fmt::Display).\n ///\n-/// # Differences from `ExitStatus`\n+/// # Differences from `ExitCode`\n ///\n-/// `ExitCode` is intended for terminating the currently running process, via\n-/// the `Termination` trait, in contrast to [`ExitStatus`], which represents the\n+/// [`ExitCode`] is intended for terminating the currently running process, via\n+/// the `Termination` trait, in contrast to `ExitStatus`, which represents the\n /// termination of a child process. These APIs are separate due to platform\n /// compatibility differences and their expected usage; it is not generally\n-/// possible to exactly reproduce an ExitStatus from a child for the current\n+/// possible to exactly reproduce an `ExitStatus` from a child for the current\n /// process after the fact.\n ///\n /// [`status`]: Command::status\n@@ -1684,7 +1684,7 @@ impl crate::error::Error for ExitStatusError {}\n /// the `Termination` trait, in contrast to [`ExitStatus`], which represents the\n /// termination of a child process. These APIs are separate due to platform\n /// compatibility differences and their expected usage; it is not generally\n-/// possible to exactly reproduce an ExitStatus from a child for the current\n+/// possible to exactly reproduce an `ExitStatus` from a child for the current\n /// process after the fact.\n ///\n /// # Examples"}, {"sha": "e3b08648999804da3d1bf78ef7373b36f14b2ac2", "filename": "src/doc/rustdoc/src/write-documentation/the-doc-attribute.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fthe-doc-attribute.md?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -87,7 +87,9 @@ on your documentation examples make requests to.\n #![doc(html_playground_url = \"https://playground.example.com/\")]\n ```\n \n-Now, when you press \"run\", the button will make a request to this domain.\n+Now, when you press \"run\", the button will make a request to this domain. The request\n+URL will contain 2 query parameters: `code` and `edition` for the code in the documentation\n+and the Rust edition respectively.\n \n If you don't use this attribute, there will be no run buttons.\n "}, {"sha": "479571d85fe0510f5bf16730230f6bcbfed972cf", "filename": "src/doc/unstable-book/src/language-features/explicit-generic-args-with-impl-trait.md", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md?ref=c84594661c1b51feb539b479b58bb551fcf8e19a", "patch": "@@ -1,53 +0,0 @@\n-# `explicit_generic_args_with_impl_trait`\n-\n-The tracking issue for this feature is: [#83701]\n-\n-[#83701]: https://github.com/rust-lang/rust/issues/83701\n-\n-------------------------\n-\n-The `explicit_generic_args_with_impl_trait` feature gate lets you specify generic arguments even\n-when `impl Trait` is used in argument position.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n-fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n-\n-fn main() {\n-    foo::<str>(\"\".to_string());\n-}\n-```\n-\n-This is currently rejected:\n-\n-```text\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n- --> src/main.rs:6:11\n-  |\n-6 |     foo::<str>(\"\".to_string());\n-  |           ^^^ explicit generic argument not allowed\n-\n-```\n-\n-However it would compile if `explicit_generic_args_with_impl_trait` is enabled.\n-\n-Note that the synthetic type parameters from `impl Trait` are still implicit and you\n-cannot explicitly specify these:\n-\n-```rust,compile_fail\n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n-fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n-fn bar<T: ?Sized, F: AsRef<T>>(_f: F) {}\n-\n-fn main() {\n-    bar::<str, _>(\"\".to_string()); // Okay\n-    bar::<str, String>(\"\".to_string()); // Okay\n-\n-    foo::<str>(\"\".to_string()); // Okay\n-    foo::<str, String>(\"\".to_string()); // Error, you cannot specify `impl Trait` explicitly\n-}\n-```"}, {"sha": "f633e56b0ec1de31c7bc77c128256db810cba09f", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -15,12 +15,12 @@ impl Traitor<1, 2> for u64 {}\n \n \n fn uwu<const N: u8>() -> impl Traitor<N> {\n-    //~^ error: the trait bound `u32: Traitor<N, N>` is not satisfied\n+    //~^ error: the trait bound `u32: Traitor<N>` is not satisfied\n     1_u32\n }\n \n fn owo() -> impl Traitor {\n-    //~^ error: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+    //~^ error: the trait bound `u64: Traitor` is not satisfied\n     1_u64\n }\n "}, {"sha": "cbe4a4ac0d6596cd955d374ea267835e92fbb465", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -6,21 +6,21 @@ LL | fn rawr() -> impl Trait {\n    |\n    = help: the trait `Trait` is implemented for `Uwu<N>`\n \n-error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n+error[E0277]: the trait bound `u32: Traitor<N>` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:17:26\n    |\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n-   |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n+   |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N>` is not implemented for `u32`\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>\n              <u64 as Traitor<1_u8, 2_u8>>\n \n-error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+error[E0277]: the trait bound `u64: Traitor` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:22:13\n    |\n LL | fn owo() -> impl Traitor {\n-   |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n+   |             ^^^^^^^^^^^^ the trait `Traitor` is not implemented for `u64`\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>"}, {"sha": "5e779d2e8de594c1529865624d09a568283956eb", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     foo(&10_u32);\n     //~^ error: the trait bound `u32: Trait` is not satisfied\n     bar(&true);\n-    //~^ error: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n+    //~^ error: the trait bound `bool: Traitor<{_: u8}>` is not satisfied\n }"}, {"sha": "60dc96f675a8b680893c4f84f48d5bf42a12b50e", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -9,16 +9,16 @@ LL |     foo(&10_u32);\n    = help: the trait `Trait<2_u8>` is implemented for `u32`\n    = note: required for the cast to the object type `dyn Trait`\n \n-error[E0277]: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n+error[E0277]: the trait bound `bool: Traitor<{_: u8}>` is not satisfied\n   --> $DIR/trait_objects_fail.rs:28:9\n    |\n LL |     bar(&true);\n-   |     --- ^^^^^ the trait `Traitor<{_: u8}, {_: u8}>` is not implemented for `bool`\n+   |     --- ^^^^^ the trait `Traitor<{_: u8}>` is not implemented for `bool`\n    |     |\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Traitor<2_u8, 3_u8>` is implemented for `bool`\n-   = note: required for the cast to the object type `dyn Traitor<{_: u8}, {_: u8}>`\n+   = note: required for the cast to the object type `dyn Traitor<{_: u8}>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "87e4ad500404439b6fa4c585653f292c0fee2d7c", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr?ref=c84594661c1b51feb539b479b58bb551fcf8e19a", "patch": "@@ -1,12 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/impl-trait-with-const-arguments.rs:18:20\n-   |\n-LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n-   |                    ^^^^^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "1aa23c60823483910b02add5901f6b1197f978b8", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/const-args.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fconst-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fconst-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fconst-args.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n trait Usizer {\n     fn m(self) -> usize;\n }\n@@ -16,5 +18,4 @@ impl Usizer for Usizable {\n \n fn main() {\n     assert_eq!(f::<4usize>(Usizable), 20usize);\n-//~^ ERROR cannot provide explicit generic arguments when `impl Trait` is used in argument position\n }", "previous_filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.rs"}, {"sha": "3b1024d612650024f217569dafb841432f8990a8", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1,5 +1,3 @@\n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n \n fn main() {"}, {"sha": "c8b82783ea841800776db6fa7d6676a2a68896c0", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1,13 +1,13 @@\n error[E0107]: this function takes 1 generic argument but 2 generic arguments were supplied\n-  --> $DIR/explicit-generic-args-for-impl.rs:6:5\n+  --> $DIR/explicit-generic-args-for-impl.rs:4:5\n    |\n LL |     foo::<str, String>(\"\".to_string());\n    |     ^^^        ------ help: remove this generic argument\n    |     |\n    |     expected 1 generic argument\n    |\n note: function defined here, with 1 generic parameter: `T`\n-  --> $DIR/explicit-generic-args-for-impl.rs:3:4\n+  --> $DIR/explicit-generic-args-for-impl.rs:1:4\n    |\n LL | fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n    |    ^^^ -"}, {"sha": "99e0931ab950dcc9f08f2bf4cc3816ac45e3bae8", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n \n fn main() {"}, {"sha": "0e4d6986d46ecdce76d7f08ba30c45cf6c83aa03", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/feature-gate.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs?ref=c84594661c1b51feb539b479b58bb551fcf8e19a", "patch": "@@ -1,7 +0,0 @@\n-// gate-test-explicit_generic_args_with_impl_trait\n-\n-fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n-\n-fn main() {\n-    foo::<str>(\"\".to_string()); //~ ERROR E0632\n-}"}, {"sha": "a25c85faf4e352c86d5ef7584fbbb81899aaa999", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/feature-gate.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr?ref=c84594661c1b51feb539b479b58bb551fcf8e19a", "patch": "@@ -1,12 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/feature-gate.rs:6:11\n-   |\n-LL |     foo::<str>(\"\".to_string());\n-   |           ^^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "987df4997342fd9249c82767fc02d02e8541863c", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/issue-87718.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fissue-87718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fissue-87718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fissue-87718.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n fn f<T: ?Sized>(_: impl AsRef<T>, _: impl AsRef<T>) {}\n \n fn main() {"}, {"sha": "7249a36f5fe7b7b4de607b3d118cc0d52c849469", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1,5 +1,3 @@\n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n fn f<T: ?Sized, U: ?Sized>(_: impl AsRef<T>, _: impl AsRef<U>) {}\n \n fn main() {"}, {"sha": "9d6db88d3643348ac51f4f7c76c3081829bb0b90", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1,13 +1,13 @@\n error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n-  --> $DIR/not-enough-args.rs:6:5\n+  --> $DIR/not-enough-args.rs:4:5\n    |\n LL |     f::<[u8]>(\"a\", b\"a\");\n    |     ^   ---- supplied 1 generic argument\n    |     |\n    |     expected 2 generic arguments\n    |\n note: function defined here, with 2 generic parameters: `T`, `U`\n-  --> $DIR/not-enough-args.rs:3:4\n+  --> $DIR/not-enough-args.rs:1:4\n    |\n LL | fn f<T: ?Sized, U: ?Sized>(_: impl AsRef<T>, _: impl AsRef<U>) {}\n    |    ^ -          -"}, {"sha": "d1e5aa6c6b916878f1cdb70749e102411982e3fb", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs?ref=c84594661c1b51feb539b479b58bb551fcf8e19a", "patch": "@@ -1,7 +0,0 @@\n-use std::fmt::Debug;\n-\n-fn foo<T>(x: impl Debug) { }\n-\n-fn main() {\n-    foo::<String>('a'); //~ ERROR cannot provide explicit generic arguments\n-}"}, {"sha": "02c7fe8ff2c41ec4b82dd9b05c5f5dbdddae065d", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr?ref=c84594661c1b51feb539b479b58bb551fcf8e19a", "patch": "@@ -1,12 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/universal-issue-48703.rs:6:11\n-   |\n-LL |     foo::<String>('a');\n-   |           ^^^^^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "4ac0a694cb148f785679ea9021004bfc989eaa82", "filename": "src/test/ui/impl-trait/issues/universal-turbofish-in-method-issue-50950.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.rs?ref=c84594661c1b51feb539b479b58bb551fcf8e19a", "patch": "@@ -1,17 +0,0 @@\n-use std::any::Any;\n-pub struct EventHandler {\n-}\n-\n-impl EventHandler\n-{\n-    pub fn handle_event<T: Any>(&mut self, _efunc: impl FnMut(T)) {}\n-}\n-\n-struct TestEvent(i32);\n-\n-fn main() {\n-    let mut evt = EventHandler {};\n-    evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {\n-        //~^ ERROR cannot provide explicit generic arguments\n-    });\n-}"}, {"sha": "84b98f71f4f0caefea1347220c2dec8ea761d96b", "filename": "src/test/ui/impl-trait/issues/universal-turbofish-in-method-issue-50950.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84594661c1b51feb539b479b58bb551fcf8e19a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr?ref=c84594661c1b51feb539b479b58bb551fcf8e19a", "patch": "@@ -1,14 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/universal-turbofish-in-method-issue-50950.rs:14:24\n-   |\n-LL |     evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {\n-   |                        ^^^^^^^^^  ^^^^^^^^^^^^^ explicit generic argument not allowed\n-   |                        |\n-   |                        explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "eaaef3463ddc9ee467b24e8c66e08d42db6bec42", "filename": "src/test/ui/inference/issue-83606.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fissue-83606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fissue-83606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-83606.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -5,6 +5,6 @@ fn foo<const N: usize>(_: impl std::fmt::Display) -> [usize; N] {\n }\n \n fn main() {\n-    let _ = foo(\"foo\"); //<- Do not suggest `foo::<N>(\"foo\");`!\n+    let _ = foo(\"foo\");\n     //~^ ERROR: type annotations needed for `[usize; _]`\n }"}, {"sha": "f5c84f960641a077f78d561541315f2c39c7abd1", "filename": "src/test/ui/inference/issue-83606.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -1,12 +1,12 @@\n error[E0282]: type annotations needed for `[usize; _]`\n   --> $DIR/issue-83606.rs:8:9\n    |\n-LL |     let _ = foo(\"foo\"); //<- Do not suggest `foo::<N>(\"foo\");`!\n+LL |     let _ = foo(\"foo\");\n    |         ^\n    |\n help: consider giving this pattern a type, where the the value of const parameter `N` is specified\n    |\n-LL |     let _: [usize; _] = foo(\"foo\"); //<- Do not suggest `foo::<N>(\"foo\");`!\n+LL |     let _: [usize; _] = foo(\"foo\");\n    |          ++++++++++++\n \n error: aborting due to previous error"}, {"sha": "72e0e74f3234233e6e498dc4fde58ff6eec662e3", "filename": "src/test/ui/inference/need_type_info/concrete-impl.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,16 @@\n+trait Ambiguous<A> {\n+    fn method() {}\n+}\n+\n+struct One;\n+struct Two;\n+struct Struct;\n+\n+impl Ambiguous<One> for Struct {}\n+impl Ambiguous<Two> for Struct {}\n+\n+fn main() {\n+    <Struct as Ambiguous<_>>::method();\n+    //~^ ERROR type annotations needed\n+    //~| ERROR type annotations needed\n+}"}, {"sha": "b79d34affa249ecf2ccf3084b2cfc7d06d22f33b", "filename": "src/test/ui/inference/need_type_info/concrete-impl.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,33 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/concrete-impl.rs:13:5\n+   |\n+LL |     <Struct as Ambiguous<_>>::method();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `Self` declared on the trait `Ambiguous`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |     <Struct as Ambiguous::<_>>::method();\n+   |                         ~~~~~\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/concrete-impl.rs:13:5\n+   |\n+LL |     <Struct as Ambiguous<_>>::method();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `Self` declared on the trait `Ambiguous`\n+   |\n+note: multiple `impl`s satisfying `Struct: Ambiguous<_>` found\n+  --> $DIR/concrete-impl.rs:9:1\n+   |\n+LL | impl Ambiguous<One> for Struct {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl Ambiguous<Two> for Struct {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider specifying the generic argument\n+   |\n+LL |     <Struct as Ambiguous::<_>>::method();\n+   |                         ~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "768a8cc377823440dd893a66e42e06b5eaa08537", "filename": "src/test/ui/inference/need_type_info/self-ty-in-path.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,13 @@\n+// Test that we don't ICE when encountering a `Self` in a path.\n+struct TestErr<T>(T);\n+\n+impl<T> TestErr<T> {\n+    fn func_a<U>() {}\n+\n+    fn func_b() {\n+        Self::func_a();\n+        //~^ ERROR type annotations needed\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "04b521dbdb3609c6c2c3efad581646c99e363b3c", "filename": "src/test/ui/inference/need_type_info/self-ty-in-path.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/self-ty-in-path.rs:8:9\n+   |\n+LL |         Self::func_a();\n+   |         ^^^^^^^^^^^^ cannot infer type of the type parameter `U` declared on the associated function `func_a`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |         Self::func_a::<U>();\n+   |                     +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "0ed02ddc5f390029072bb576415060634d87f60c", "filename": "src/test/ui/inference/need_type_info/type-alias-indirect.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,18 @@\n+// An addition to the `type-alias.rs` test,\n+// see the FIXME in that file for why this test\n+// exists.\n+//\n+// If there is none, feel free to remove this test\n+// again.\n+struct Ty<T>(T);\n+impl<T> Ty<T> {\n+    fn new() {}\n+}\n+\n+type IndirectAlias<T> = Ty<Box<T>>;\n+fn indirect_alias() {\n+    IndirectAlias::new();\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "6161690df50503aa976d0ba9f74f1d8f03ce5cc1", "filename": "src/test/ui/inference/need_type_info/type-alias-indirect.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/type-alias-indirect.rs:14:5\n+   |\n+LL |     IndirectAlias::new();\n+   |     ^^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the type alias `IndirectAlias`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "f921b046b6cac524f36cee427b81e2c56f0ada09", "filename": "src/test/ui/inference/need_type_info/type-alias.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,36 @@\n+// Test the inference errors in case the relevant path\n+// uses a type alias.\n+//\n+// Regression test for #97698.\n+struct Ty<T>(T);\n+impl<T> Ty<T> {\n+    fn new() {}\n+}\n+\n+type DirectAlias<T> = Ty<T>;\n+fn direct_alias() {\n+    DirectAlias::new()\n+    //~^ ERROR type annotations needed\n+}\n+\n+type IndirectAlias<T> = Ty<Box<T>>;\n+fn indirect_alias() {\n+    IndirectAlias::new();\n+    // FIXME: This should also emit an error.\n+    //\n+    // Added it separately as `type-alias-indirect.rs`\n+    // where it does error.\n+}\n+\n+struct TyDefault<T, U = u32>(T, U);\n+impl<T> TyDefault<T> {\n+    fn new() {}\n+}\n+\n+type DirectButWithDefaultAlias<T> = TyDefault<T>;\n+fn direct_but_with_default_alias() {\n+    DirectButWithDefaultAlias::new();\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "a33f49baf549f4506e793bd31a00000b33dbd51e", "filename": "src/test/ui/inference/need_type_info/type-alias.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/type-alias.rs:12:5\n+   |\n+LL |     DirectAlias::new()\n+   |     ^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/type-alias.rs:32:5\n+   |\n+LL |     DirectButWithDefaultAlias::new();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "03c7ed347bddf3cdedbed26ccf26b8c63dc41013", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,22 @@\n+// edition:2021\n+\n+pub trait Trait<'a, T> {}\n+\n+pub struct Struct<T>;\n+pub enum Enum<T> {}\n+\n+pub union Union<T> {\n+    f1: usize,\n+}\n+\n+impl<'a, T> Struct<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found struct `Struct`\n+//~| ERROR trait objects must include the `dyn` keyword\n+\n+impl<'a, T> Enum<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found enum `Enum`\n+\n+impl<'a, T> Union<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found union `Union`\n+\n+fn main() {}"}, {"sha": "dd6951e047410b76457652f85a04fb904a7281cb", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,49 @@\n+error[E0404]: expected trait, found struct `Struct`\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:12:13\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Struct<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~~\n+\n+error[E0404]: expected trait, found enum `Enum`\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:16:13\n+   |\n+LL | impl<'a, T> Enum<T> for Trait<'a, T> {}\n+   |             ^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Enum<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~\n+\n+error[E0404]: expected trait, found union `Union`\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:19:13\n+   |\n+LL | impl<'a, T> Union<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Union<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:12:27\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |                           ^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n+LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n+   | \n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0404, E0782.\n+For more information about an error, try `rustc --explain E0404`."}, {"sha": "947bc2c79654b8cc1588c91c070664f86f205d2d", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,21 @@\n+pub trait Trait<'a, T> {}\n+\n+pub struct Struct<T>;\n+pub enum Enum<T> {}\n+\n+pub union Union<T> {\n+    f1: usize,\n+}\n+\n+impl<'a, T> Struct<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found struct `Struct`\n+//~| WARNING trait objects without an explicit `dyn` are deprecated\n+//~| WARNING this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+\n+impl<'a, T> Enum<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found enum `Enum`\n+\n+impl<'a, T> Union<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found union `Union`\n+\n+fn main() {}"}, {"sha": "86ab8474c4299a95b4bee7b5d5b6c9e1d266346f", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7092d42c04a56378d2e748f98169b728b1f1d5d1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr?ref=7092d42c04a56378d2e748f98169b728b1f1d5d1", "patch": "@@ -0,0 +1,51 @@\n+error[E0404]: expected trait, found struct `Struct`\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:10:13\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Struct<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~~\n+\n+error[E0404]: expected trait, found enum `Enum`\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:15:13\n+   |\n+LL | impl<'a, T> Enum<T> for Trait<'a, T> {}\n+   |             ^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Enum<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~\n+\n+error[E0404]: expected trait, found union `Union`\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:18:13\n+   |\n+LL | impl<'a, T> Union<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Union<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:10:27\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |                           ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n+LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n+   | \n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0404`."}]}