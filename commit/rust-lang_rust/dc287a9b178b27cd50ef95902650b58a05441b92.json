{"sha": "dc287a9b178b27cd50ef95902650b58a05441b92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMjg3YTliMTc4YjI3Y2Q1MGVmOTU5MDI2NTBiNThhMDU0NDFiOTI=", "commit": {"author": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-02-11T06:22:16Z"}, "committer": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-02-11T06:22:21Z"}, "message": "Update some debug logging", "tree": {"sha": "1d3f9c48209fc0e80652a04a801caf523e4eec59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d3f9c48209fc0e80652a04a801caf523e4eec59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc287a9b178b27cd50ef95902650b58a05441b92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc287a9b178b27cd50ef95902650b58a05441b92", "html_url": "https://github.com/rust-lang/rust/commit/dc287a9b178b27cd50ef95902650b58a05441b92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc287a9b178b27cd50ef95902650b58a05441b92/comments", "author": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "106070b905d1d312e19f7d0e439d1a7e78d3dc05", "url": "https://api.github.com/repos/rust-lang/rust/commits/106070b905d1d312e19f7d0e439d1a7e78d3dc05", "html_url": "https://github.com/rust-lang/rust/commit/106070b905d1d312e19f7d0e439d1a7e78d3dc05"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c89aa4c18333cde85362b2050c9bb86f40a59c54", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc287a9b178b27cd50ef95902650b58a05441b92/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc287a9b178b27cd50ef95902650b58a05441b92/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=dc287a9b178b27cd50ef95902650b58a05441b92", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n                                          cause: ObligationCause<'tcx>)\n                                          -> Ty<'tcx>\n     {\n-        debug!(\"normalize_associated_type(projection_ty={:?})\",\n+        debug!(\"normalize_projection_type(projection_ty={:?})\",\n                projection_ty);\n \n         assert!(!projection_ty.has_escaping_regions());\n@@ -147,7 +147,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n             self.register_predicate_obligation(infcx, obligation);\n         }\n \n-        debug!(\"normalize_associated_type: result={:?}\", normalized.value);\n+        debug!(\"normalize_projection_type: result={:?}\", normalized.value);\n \n         normalized.value\n     }\n@@ -185,11 +185,11 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         assert!(!obligation.has_escaping_regions());\n \n         if self.is_duplicate_or_add(infcx.tcx, &obligation.predicate) {\n-            debug!(\"register_predicate({:?}) -- already seen, skip\", obligation);\n+            debug!(\"register_predicate_obligation({:?}) -- already seen, skip\", obligation);\n             return;\n         }\n \n-        debug!(\"register_predicate({:?})\", obligation);\n+        debug!(\"register_predicate_obligation({:?})\", obligation);\n         let obligation = PendingPredicateObligation {\n             obligation: obligation,\n             stalled_on: vec![]\n@@ -274,7 +274,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         let mut errors = Vec::new();\n \n         loop {\n-            debug!(\"select_where_possible: starting another iteration\");\n+            debug!(\"select: starting another iteration\");\n \n             // Process pending obligations.\n             let outcome = {\n@@ -287,7 +287,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n                                                                      region_obligations))\n             };\n \n-            debug!(\"select_where_possible: outcome={:?}\", outcome);\n+            debug!(\"select: outcome={:?}\", outcome);\n \n             // these are obligations that were proven to be true.\n             for pending_obligation in outcome.completed {"}]}