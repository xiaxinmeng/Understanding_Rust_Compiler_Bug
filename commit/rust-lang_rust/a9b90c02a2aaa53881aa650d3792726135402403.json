{"sha": "a9b90c02a2aaa53881aa650d3792726135402403", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjkwYzAyYTJhYWE1Mzg4MWFhNjUwZDM3OTI3MjYxMzU0MDI0MDM=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-21T12:44:16Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-21T12:44:16Z"}, "message": "rustc_mir: remove redundant wrapping of return type in numeric_intrinsic()", "tree": {"sha": "8ad535c782e4d2199ac8bffb420f0e4c15f8a91c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad535c782e4d2199ac8bffb420f0e4c15f8a91c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b90c02a2aaa53881aa650d3792726135402403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b90c02a2aaa53881aa650d3792726135402403", "html_url": "https://github.com/rust-lang/rust/commit/a9b90c02a2aaa53881aa650d3792726135402403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b90c02a2aaa53881aa650d3792726135402403/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b9b16b4d589a72364b3be1c3a61816a99c3715", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b9b16b4d589a72364b3be1c3a61816a99c3715", "html_url": "https://github.com/rust-lang/rust/commit/76b9b16b4d589a72364b3be1c3a61816a99c3715"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "d36b3a7d9b56ecd7d4f59a26b86402d932146200", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9b90c02a2aaa53881aa650d3792726135402403/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b90c02a2aaa53881aa650d3792726135402403/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=a9b90c02a2aaa53881aa650d3792726135402403", "patch": "@@ -23,11 +23,7 @@ use super::{\n mod caller_location;\n mod type_name;\n \n-fn numeric_intrinsic<'tcx, Tag>(\n-    name: Symbol,\n-    bits: u128,\n-    kind: Primitive,\n-) -> InterpResult<'tcx, Scalar<Tag>> {\n+fn numeric_intrinsic<Tag>(name: Symbol, bits: u128, kind: Primitive) -> Scalar<Tag> {\n     let size = match kind {\n         Primitive::Int(integer, _) => integer.size(),\n         _ => bug!(\"invalid `{}` argument: {:?}\", name, bits),\n@@ -41,7 +37,7 @@ fn numeric_intrinsic<'tcx, Tag>(\n         sym::bitreverse => (bits << extra).reverse_bits(),\n         _ => bug!(\"not a numeric intrinsic: {}\", name),\n     };\n-    Ok(Scalar::from_uint(bits_out, size))\n+    Scalar::from_uint(bits_out, size)\n }\n \n /// The logic for all nullary intrinsics is implemented here. These intrinsics don't get evaluated\n@@ -208,7 +204,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if nonzero && bits == 0 {\n                     throw_ub_format!(\"`{}_nonzero` called on 0\", intrinsic_name);\n                 }\n-                let out_val = numeric_intrinsic(intrinsic_name, bits, kind)?;\n+                let out_val = numeric_intrinsic(intrinsic_name, bits, kind);\n                 self.write_scalar(out_val, dest)?;\n             }\n             sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {"}]}