{"sha": "9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMWVhZDhmYWRjNTZiYWQzMGRjNzRmNWNjNTBkNzhhZjRmYmM5NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-07T17:45:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-07T17:45:11Z"}, "message": "auto merge of #20655 : nikomatsakis/rust/carl-ice, r=aturon\n\nRemember to check the name of the associated type being projected when searching the environment. Fixes #20651.", "tree": {"sha": "3fcd48d84487821beaadee719c35edbac07b229a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fcd48d84487821beaadee719c35edbac07b229a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "html_url": "https://github.com/rust-lang/rust/commit/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a8cb678e61e91c160d80794b5fdd723d0d4211c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8cb678e61e91c160d80794b5fdd723d0d4211c", "html_url": "https://github.com/rust-lang/rust/commit/2a8cb678e61e91c160d80794b5fdd723d0d4211c"}, {"sha": "ea441e16b46ba955e22585f0b7200b551eff4e7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea441e16b46ba955e22585f0b7200b551eff4e7c", "html_url": "https://github.com/rust-lang/rust/commit/ea441e16b46ba955e22585f0b7200b551eff4e7c"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "e9eb3f4f4b032f8f2f808eb069dd96d0317d5f13", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "patch": "@@ -452,7 +452,9 @@ fn assemble_candidates_from_predicates<'cx,'tcx>(\n     for predicate in elaborate_predicates(selcx.tcx(), env_predicates) {\n         match predicate {\n             ty::Predicate::Projection(ref data) => {\n-                let is_match = infcx.probe(|_| {\n+                let same_name = data.item_name() == obligation.predicate.item_name;\n+\n+                let is_match = same_name && infcx.probe(|_| {\n                     let origin = infer::Misc(obligation.cause.span);\n                     let obligation_poly_trait_ref =\n                         obligation_trait_ref.to_poly_trait_ref();\n@@ -465,6 +467,9 @@ fn assemble_candidates_from_predicates<'cx,'tcx>(\n                 });\n \n                 if is_match {\n+                    debug!(\"assemble_candidates_from_predicates: candidate {}\",\n+                           data.repr(selcx.tcx()));\n+\n                     candidate_set.vec.push(\n                         ProjectionTyCandidate::ParamEnv(data.clone()));\n                 }\n@@ -527,6 +532,9 @@ fn assemble_candidates_from_impls<'cx,'tcx>(\n \n     match vtable {\n         super::VtableImpl(data) => {\n+            debug!(\"assemble_candidates_from_impls: impl candidate {}\",\n+                   data.repr(selcx.tcx()));\n+\n             candidate_set.vec.push(\n                 ProjectionTyCandidate::Impl(data));\n         }"}, {"sha": "46d2ff7e1b9468cf3be6538439cce406541bf138", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "patch": "@@ -1892,6 +1892,10 @@ pub struct ProjectionPredicate<'tcx> {\n pub type PolyProjectionPredicate<'tcx> = Binder<ProjectionPredicate<'tcx>>;\n \n impl<'tcx> PolyProjectionPredicate<'tcx> {\n+    pub fn item_name(&self) -> ast::Name {\n+        self.0.projection_ty.item_name // safe to skip the binder to access a name\n+    }\n+\n     pub fn sort_key(&self) -> (ast::DefId, ast::Name) {\n         self.0.projection_ty.sort_key()\n     }"}, {"sha": "9436f825de89dd4b95a51cc7e6f7ce4ad320bcdd", "filename": "src/test/compile-fail/associated-types-multiple-types-one-trait.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs?ref=9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    type X;\n+    type Y;\n+}\n+\n+fn have_x_want_x<T:Foo<X=u32>>(t: &T)\n+{\n+    want_x(t);\n+}\n+\n+fn have_x_want_y<T:Foo<X=u32>>(t: &T)\n+{\n+    want_y(t); //~ ERROR type mismatch\n+}\n+\n+fn have_y_want_x<T:Foo<Y=i32>>(t: &T)\n+{\n+    want_x(t); //~ ERROR type mismatch\n+}\n+\n+fn have_y_want_y<T:Foo<Y=i32>>(t: &T)\n+{\n+    want_y(t);\n+}\n+\n+fn have_xy_want_x<T:Foo<X=u32,Y=i32>>(t: &T)\n+{\n+    want_x(t);\n+}\n+\n+fn have_xy_want_y<T:Foo<X=u32,Y=i32>>(t: &T)\n+{\n+    want_y(t);\n+}\n+\n+fn have_xy_want_xy<T:Foo<X=u32,Y=i32>>(t: &T)\n+{\n+    want_x(t);\n+    want_y(t);\n+}\n+\n+fn want_x<T:Foo<X=u32>>(t: &T) { }\n+\n+fn want_y<T:Foo<Y=i32>>(t: &T) { }\n+\n+fn main() { }"}]}