{"sha": "179d9835351f3abab03634b50bcee94723cce148", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OWQ5ODM1MzUxZjNhYmFiMDM2MzRiNTBiY2VlOTQ3MjNjY2UxNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-17T12:39:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-17T12:39:20Z"}, "message": "Merge #4012\n\n4012: fix panic on ellipsis in pattern r=flodiebold a=JoshMcguigan\n\nfixes #3999\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "c8b87b685698ce45738662a2bf981a48055587b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b87b685698ce45738662a2bf981a48055587b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/179d9835351f3abab03634b50bcee94723cce148", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemaN4CRBK7hj4Ov3rIwAAdHIIAAB8WX9S6NE01Ft4eaIWJs0v\nuzbVq9XoZubq+vcpRa90TS48oXZp14V7shX6ZJuSLvBrqBJyrYJZN5gSxp8hu4Fq\nyeg40zyDV0z1h4H0Oe9X31ywOk/LPmyOCYwbW+E9rCcN5EUoZVfzKiXEh0wxB8Ls\n9lTn+25EAPcWFUf1DgSKFAGWexCBkZAgXQuYmZE/Wd/p1jox/MKQp4zat92+hfEr\neJGrs5GI43i1kktSdIW5h+TBPH1yEVTu/63XJizve/1FdaL6IjRHoi6Hy36F0uit\neUik8oeXvboSY9Y+hP3ZJEQy3aTznesuJv19Iww4NUqgxx/iEhM4J3NqUWLsd7I=\n=2vXI\n-----END PGP SIGNATURE-----\n", "payload": "tree c8b87b685698ce45738662a2bf981a48055587b1\nparent 48a9e2061826f9154ed497c306125c1ffd5e8fb3\nparent 408f914bf4d6719ae68582ae43e2de9d3cb362b0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587127160 +0000\ncommitter GitHub <noreply@github.com> 1587127160 +0000\n\nMerge #4012\n\n4012: fix panic on ellipsis in pattern r=flodiebold a=JoshMcguigan\n\nfixes #3999\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/179d9835351f3abab03634b50bcee94723cce148", "html_url": "https://github.com/rust-lang/rust/commit/179d9835351f3abab03634b50bcee94723cce148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/179d9835351f3abab03634b50bcee94723cce148/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a9e2061826f9154ed497c306125c1ffd5e8fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a9e2061826f9154ed497c306125c1ffd5e8fb3", "html_url": "https://github.com/rust-lang/rust/commit/48a9e2061826f9154ed497c306125c1ffd5e8fb3"}, {"sha": "408f914bf4d6719ae68582ae43e2de9d3cb362b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/408f914bf4d6719ae68582ae43e2de9d3cb362b0", "html_url": "https://github.com/rust-lang/rust/commit/408f914bf4d6719ae68582ae43e2de9d3cb362b0"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "82a52804d50d385879b10fe2f0812a7de846a1ba", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/179d9835351f3abab03634b50bcee94723cce148/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179d9835351f3abab03634b50bcee94723cce148/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=179d9835351f3abab03634b50bcee94723cce148", "patch": "@@ -651,6 +651,7 @@ impl ExprCollector<'_> {\n             ast::Pat::SlicePat(p) => {\n                 let SlicePatComponents { prefix, slice, suffix } = p.components();\n \n+                // FIXME properly handle `DotDotPat`\n                 Pat::Slice {\n                     prefix: prefix.into_iter().map(|p| self.collect_pat(p)).collect(),\n                     slice: slice.map(|p| self.collect_pat(p)),\n@@ -667,9 +668,15 @@ impl ExprCollector<'_> {\n                     Pat::Missing\n                 }\n             }\n-            ast::Pat::DotDotPat(_) => unreachable!(\n-                \"`DotDotPat` requires special handling and should not be mapped to a Pat.\"\n-            ),\n+            ast::Pat::DotDotPat(_) => {\n+                // `DotDotPat` requires special handling and should not be mapped\n+                // to a Pat. Here we are using `Pat::Missing` as a fallback for\n+                // when `DotDotPat` is mapped to `Pat`, which can easily happen\n+                // when the source code being analyzed has a malformed pattern\n+                // which includes `..` in a place where it isn't valid.\n+\n+                Pat::Missing\n+            }\n             // FIXME: implement\n             ast::Pat::BoxPat(_) | ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) => Pat::Missing,\n         };"}, {"sha": "61284d67220d50176eea2cddcaed4cfad4c96598", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/179d9835351f3abab03634b50bcee94723cce148/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179d9835351f3abab03634b50bcee94723cce148/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=179d9835351f3abab03634b50bcee94723cce148", "patch": "@@ -484,3 +484,52 @@ fn main() {\n \n     assert_eq!(\"()\", super::type_at_pos(&db, pos));\n }\n+\n+#[test]\n+fn issue_3999_slice() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn foo(params: &[usize]) {\n+    match params {\n+        [ps @ .., _] => {}\n+    }\n+}\n+\"#),\n+        @r###\"\n+    [8; 14) 'params': &[usize]\n+    [26; 81) '{     ...   } }': ()\n+    [32; 79) 'match ...     }': ()\n+    [38; 44) 'params': &[usize]\n+    [55; 67) '[ps @ .., _]': [usize]\n+    [65; 66) '_': usize\n+    [71; 73) '{}': ()\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn issue_3999_struct() {\n+    // rust-analyzer should not panic on seeing this malformed\n+    // record pattern.\n+    assert_snapshot!(\n+        infer(r#\"\n+struct Bar {\n+    a: bool,\n+}\n+fn foo(b: Bar) {\n+    match b {\n+        Bar { a: .. } => {},\n+    }\n+}\n+\"#),\n+        @r###\"\n+    [36; 37) 'b': Bar\n+    [44; 96) '{     ...   } }': ()\n+    [50; 94) 'match ...     }': ()\n+    [56; 57) 'b': Bar\n+    [68; 81) 'Bar { a: .. }': Bar\n+    [77; 79) '..': bool\n+    [85; 87) '{}': ()\n+    \"###\n+    );\n+}"}]}