{"sha": "dce31efdde9ca0311ed60f04b97049d42ed49ba8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZTMxZWZkZGU5Y2EwMzExZWQ2MGYwNGI5NzA0OWQ0MmVkNDliYTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T14:54:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T14:54:45Z"}, "message": "Cleanup query fn naming", "tree": {"sha": "8e01f3e50d68adc881210127abde026efa9662b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e01f3e50d68adc881210127abde026efa9662b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce31efdde9ca0311ed60f04b97049d42ed49ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce31efdde9ca0311ed60f04b97049d42ed49ba8", "html_url": "https://github.com/rust-lang/rust/commit/dce31efdde9ca0311ed60f04b97049d42ed49ba8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce31efdde9ca0311ed60f04b97049d42ed49ba8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01bd1e1296d31dbb102d198e9fd82e1e36f1193b", "url": "https://api.github.com/repos/rust-lang/rust/commits/01bd1e1296d31dbb102d198e9fd82e1e36f1193b", "html_url": "https://github.com/rust-lang/rust/commit/01bd1e1296d31dbb102d198e9fd82e1e36f1193b"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "2f71511ba920c221e08aa44408624a785008d16d", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce31efdde9ca0311ed60f04b97049d42ed49ba8/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce31efdde9ca0311ed60f04b97049d42ed49ba8/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=dce31efdde9ca0311ed60f04b97049d42ed49ba8", "patch": "@@ -112,7 +112,7 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(Documentation::documentation_query)]\n     fn documentation(&self, def: AttrDefId) -> Option<Documentation>;\n \n-    #[salsa::invoke(find_path::importable_locations_in_crate)]\n+    #[salsa::invoke(find_path::importable_locations_of_query)]\n     fn importable_locations_of(\n         &self,\n         item: ItemInNs,"}, {"sha": "2eb12ec8f2bc0c59df01760abe2d5c785bd4196b", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce31efdde9ca0311ed60f04b97049d42ed49ba8/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce31efdde9ca0311ed60f04b97049d42ed49ba8/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=dce31efdde9ca0311ed60f04b97049d42ed49ba8", "patch": "@@ -3,6 +3,7 @@\n use std::sync::Arc;\n \n use hir_expand::name::{known, AsName, Name};\n+use ra_prof::profile;\n use test_utils::tested_by;\n \n use crate::{\n@@ -18,7 +19,7 @@ use crate::{\n /// Find a path that can be used to refer to a certain item. This can depend on\n /// *from where* you're referring to the item, hence the `from` parameter.\n pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n-    let _p = ra_prof::profile(\"find_path\");\n+    let _p = profile(\"find_path\");\n     find_path_inner(db, item, from, MAX_PATH_LEN)\n }\n \n@@ -213,11 +214,12 @@ fn find_importable_locations(\n ///\n /// Note that the crate doesn't need to be the one in which the item is defined;\n /// it might be re-exported in other crates.\n-pub(crate) fn importable_locations_in_crate(\n+pub(crate) fn importable_locations_of_query(\n     db: &dyn DefDatabase,\n     item: ItemInNs,\n     krate: CrateId,\n ) -> Arc<[(ModuleId, Name, Visibility)]> {\n+    let _p = profile(\"importable_locations_of_query\");\n     let def_map = db.crate_def_map(krate);\n     let mut result = Vec::new();\n     for (local_id, data) in def_map.modules.iter() {"}]}