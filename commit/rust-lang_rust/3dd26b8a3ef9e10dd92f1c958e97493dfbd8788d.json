{"sha": "3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZDI2YjhhM2VmOWUxMGRkOTJmMWM5NThlOTc0OTNkZmJkODc4OGQ=", "commit": {"author": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-08T07:04:46Z"}, "committer": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-27T01:28:30Z"}, "message": "Simplify trait selector's evaluation API slightly", "tree": {"sha": "d16af4ebcb1af340aa1651eaf570faf308b4322f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d16af4ebcb1af340aa1651eaf570faf308b4322f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d", "html_url": "https://github.com/rust-lang/rust/commit/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d/comments", "author": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "html_url": "https://github.com/rust-lang/rust/commit/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4"}], "stats": {"total": 28, "additions": 6, "deletions": 22}, "files": [{"sha": "5a626e7b82cc47c17f5b297dc63a9dc6ec1ad0a3", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d", "patch": "@@ -154,8 +154,8 @@ fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n                                            recursion_depth: 0,\n                                            predicate: p })\n                      .chain(obligations)\n-                     .find(|o| !selcx.evaluate_obligation(o));\n-    // FIXME: the call to `selcx.evaluate_obligation` above should be ported\n+                     .find(|o| !selcx.predicate_may_hold_fatal(o));\n+    // FIXME: the call to `selcx.predicate_may_hold_fatal` above should be ported\n     // to the canonical trait query form, `infcx.predicate_may_hold`, once\n     // the new system supports intercrate mode (which coherence needs).\n "}, {"sha": "aae21e62051ad6f433e6fefff6a706a647a7ac59", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d", "patch": "@@ -575,11 +575,11 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     // we can be sure it does not.\n \n     /// Evaluates whether the obligation `obligation` can be satisfied (by any means).\n-    pub fn evaluate_obligation(&mut self,\n-                               obligation: &PredicateObligation<'tcx>)\n-                               -> bool\n+    pub fn predicate_may_hold_fatal(&mut self,\n+                                    obligation: &PredicateObligation<'tcx>)\n+                                    -> bool\n     {\n-        debug!(\"evaluate_obligation({:?})\",\n+        debug!(\"predicate_may_hold_fatal({:?})\",\n                obligation);\n \n         match self.evaluate_obligation_recursively(obligation) {\n@@ -588,22 +588,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Evaluates whether the obligation `obligation` can be satisfied,\n-    /// and returns `false` if not certain. However, this is not entirely\n-    /// accurate if inference variables are involved.\n-    pub fn evaluate_obligation_conservatively(&mut self,\n-                                              obligation: &PredicateObligation<'tcx>)\n-                                              -> bool\n-    {\n-        debug!(\"evaluate_obligation_conservatively({:?})\",\n-               obligation);\n-\n-        match self.evaluate_obligation_recursively(obligation) {\n-            Ok(result) => result == EvaluatedToOk,\n-            Err(OverflowError(o)) => self.infcx().report_overflow_error(&o, true)\n-        }\n-    }\n-\n     /// Evaluates whether the obligation `obligation` can be satisfied and returns\n     /// an `EvaluationResult`.\n     pub fn evaluate_obligation_recursively(&mut self,"}]}