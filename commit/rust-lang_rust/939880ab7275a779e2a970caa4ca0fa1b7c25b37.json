{"sha": "939880ab7275a779e2a970caa4ca0fa1b7c25b37", "node_id": "C_kwDOAAsO6NoAKDkzOTg4MGFiNzI3NWE3NzllMmE5NzBjYWE0Y2EwZmExYjdjMjViMzc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-14T09:31:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-14T09:31:07Z"}, "message": "Rollup merge of #105595 - TaKO8Ki:suggest-dereferencing-receiver-argument, r=compiler-errors\n\nSuggest dereferencing receiver arguments properly\n\nFixes #105429", "tree": {"sha": "ce4227c7d2786f2caf9528ddda258b7dc28af159", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce4227c7d2786f2caf9528ddda258b7dc28af159"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939880ab7275a779e2a970caa4ca0fa1b7c25b37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmZfbCRBK7hj4Ov3rIwAALIgIACEGmEsOdpjApTKLLCzZd71D\nYNerszW5h++Gh8y3fRWK7dGMwK/1rslb72iMGv5ZUU14YhYaIbUC4I2TTcJZJlv7\nBK30tlFQZGBuC8F8RReYZ3olns2kKcOWVAf9rz5+DRZ+K+KDm1uiq4TjliVnpvwX\nUHnSKwN6+Ms4HUPH5gEb7CKCGAp/N9quVAQeoHdBixxJ8C6o/gS4MHTQg3m3yyUc\n02hUoD+Tb78q5u6Kgoy6MpFiuV/VlDJwPNtXqIyG0XHV7i4g9g45I0Tg2bqY2+HL\n70Yc0/t3V86iUb0MH168MoZ4S3fBGOaSSbcrdhl4J+GT+6NZEKLYXiAHKD/BL30=\n=rhtT\n-----END PGP SIGNATURE-----\n", "payload": "tree ce4227c7d2786f2caf9528ddda258b7dc28af159\nparent e5fde968dbbb87e5721ff5da91a49cab88b90b91\nparent 19fa5b381c98016f643a9e59c7159c67bae1dd8c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671010267 +0100\ncommitter GitHub <noreply@github.com> 1671010267 +0100\n\nRollup merge of #105595 - TaKO8Ki:suggest-dereferencing-receiver-argument, r=compiler-errors\n\nSuggest dereferencing receiver arguments properly\n\nFixes #105429\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939880ab7275a779e2a970caa4ca0fa1b7c25b37", "html_url": "https://github.com/rust-lang/rust/commit/939880ab7275a779e2a970caa4ca0fa1b7c25b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939880ab7275a779e2a970caa4ca0fa1b7c25b37/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5fde968dbbb87e5721ff5da91a49cab88b90b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fde968dbbb87e5721ff5da91a49cab88b90b91", "html_url": "https://github.com/rust-lang/rust/commit/e5fde968dbbb87e5721ff5da91a49cab88b90b91"}, {"sha": "19fa5b381c98016f643a9e59c7159c67bae1dd8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/19fa5b381c98016f643a9e59c7159c67bae1dd8c", "html_url": "https://github.com/rust-lang/rust/commit/19fa5b381c98016f643a9e59c7159c67bae1dd8c"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "55a05df763fe621b73b54a91c9b32af1054481bf", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/939880ab7275a779e2a970caa4ca0fa1b7c25b37/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939880ab7275a779e2a970caa4ca0fa1b7c25b37/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=939880ab7275a779e2a970caa4ca0fa1b7c25b37", "patch": "@@ -696,7 +696,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         // It only make sense when suggesting dereferences for arguments\n-        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code()\n+        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, call_hir_id, .. } = obligation.cause.code()\n             else { return false; };\n         let Some(typeck_results) = &self.typeck_results\n             else { return false; };\n@@ -775,12 +775,33 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         real_trait_pred_and_base_ty,\n                     );\n                     if self.predicate_may_hold(&obligation) {\n-                        err.span_suggestion_verbose(\n-                            span.shrink_to_lo(),\n-                            \"consider dereferencing here\",\n-                            \"*\",\n-                            Applicability::MachineApplicable,\n+                        let call_node = self.tcx.hir().get(*call_hir_id);\n+                        let msg = \"consider dereferencing here\";\n+                        let is_receiver = matches!(\n+                            call_node,\n+                            Node::Expr(hir::Expr {\n+                                kind: hir::ExprKind::MethodCall(_, receiver_expr, ..),\n+                                ..\n+                            })\n+                            if receiver_expr.hir_id == *arg_hir_id\n                         );\n+                        if is_receiver {\n+                            err.multipart_suggestion_verbose(\n+                                msg,\n+                                vec![\n+                                    (span.shrink_to_lo(), \"(*\".to_string()),\n+                                    (span.shrink_to_hi(), \")\".to_string()),\n+                                ],\n+                                Applicability::MachineApplicable,\n+                            )\n+                        } else {\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_lo(),\n+                                msg,\n+                                '*',\n+                                Applicability::MachineApplicable,\n+                            )\n+                        };\n                         return true;\n                     }\n                 }\n@@ -2854,6 +2875,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 arg_hir_id,\n                 call_hir_id,\n                 ref parent_code,\n+                ..\n             } => {\n                 self.function_argument_obligation(\n                     arg_hir_id,"}, {"sha": "ea3d1bf853a491b31c5da0cb6b089a7c33f9f83f", "filename": "src/test/ui/traits/suggest-deferences/suggest-dereferencing-receiver-argument.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/939880ab7275a779e2a970caa4ca0fa1b7c25b37/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fsuggest-dereferencing-receiver-argument.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/939880ab7275a779e2a970caa4ca0fa1b7c25b37/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fsuggest-dereferencing-receiver-argument.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fsuggest-dereferencing-receiver-argument.fixed?ref=939880ab7275a779e2a970caa4ca0fa1b7c25b37", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+struct TargetStruct;\n+\n+impl From<usize> for TargetStruct {\n+    fn from(_unchecked: usize) -> Self {\n+        TargetStruct\n+    }\n+}\n+\n+fn main() {\n+    let a = &3;\n+    let _b: TargetStruct = (*a).into(); //~ ERROR the trait bound `TargetStruct: From<&{integer}>` is not satisfied\n+}"}, {"sha": "9eda68027b23ec5f28144eba12f03d0f5d4093b4", "filename": "src/test/ui/traits/suggest-deferences/suggest-dereferencing-receiver-argument.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/939880ab7275a779e2a970caa4ca0fa1b7c25b37/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fsuggest-dereferencing-receiver-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939880ab7275a779e2a970caa4ca0fa1b7c25b37/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fsuggest-dereferencing-receiver-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fsuggest-dereferencing-receiver-argument.rs?ref=939880ab7275a779e2a970caa4ca0fa1b7c25b37", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+struct TargetStruct;\n+\n+impl From<usize> for TargetStruct {\n+    fn from(_unchecked: usize) -> Self {\n+        TargetStruct\n+    }\n+}\n+\n+fn main() {\n+    let a = &3;\n+    let _b: TargetStruct = a.into(); //~ ERROR the trait bound `TargetStruct: From<&{integer}>` is not satisfied\n+}"}, {"sha": "ede31a2c7bcf1be8835dcc8fb33b7d19ef002165", "filename": "src/test/ui/traits/suggest-deferences/suggest-dereferencing-receiver-argument.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/939880ab7275a779e2a970caa4ca0fa1b7c25b37/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fsuggest-dereferencing-receiver-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/939880ab7275a779e2a970caa4ca0fa1b7c25b37/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fsuggest-dereferencing-receiver-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fsuggest-dereferencing-receiver-argument.stderr?ref=939880ab7275a779e2a970caa4ca0fa1b7c25b37", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `TargetStruct: From<&{integer}>` is not satisfied\n+  --> $DIR/suggest-dereferencing-receiver-argument.rs:13:30\n+   |\n+LL |     let _b: TargetStruct = a.into();\n+   |                              ^^^^ the trait `From<&{integer}>` is not implemented for `TargetStruct`\n+   |\n+   = note: required for `&{integer}` to implement `Into<TargetStruct>`\n+help: consider dereferencing here\n+   |\n+LL |     let _b: TargetStruct = (*a).into();\n+   |                            ++ +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}