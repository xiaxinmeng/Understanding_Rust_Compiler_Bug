{"sha": "a9d996a7c5f962b4ac914c86f5005eb22128f511", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDk5NmE3YzVmOTYyYjRhYzkxNGM4NmY1MDA1ZWIyMjEyOGY1MTE=", "commit": {"author": {"name": "Francesco Zardi", "email": "frazar@users.noreply.github.com", "date": "2020-10-21T07:06:05Z"}, "committer": {"name": "Francesco Zardi", "email": "frazar@users.noreply.github.com", "date": "2020-10-21T07:06:05Z"}, "message": "Add whitelist of safe intrinsics", "tree": {"sha": "b56e177229758fbaa269388a6b64ff53b933e25d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b56e177229758fbaa269388a6b64ff53b933e25d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d996a7c5f962b4ac914c86f5005eb22128f511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d996a7c5f962b4ac914c86f5005eb22128f511", "html_url": "https://github.com/rust-lang/rust/commit/a9d996a7c5f962b4ac914c86f5005eb22128f511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d996a7c5f962b4ac914c86f5005eb22128f511/comments", "author": {"login": "frazar", "id": 914950, "node_id": "MDQ6VXNlcjkxNDk1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/914950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frazar", "html_url": "https://github.com/frazar", "followers_url": "https://api.github.com/users/frazar/followers", "following_url": "https://api.github.com/users/frazar/following{/other_user}", "gists_url": "https://api.github.com/users/frazar/gists{/gist_id}", "starred_url": "https://api.github.com/users/frazar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frazar/subscriptions", "organizations_url": "https://api.github.com/users/frazar/orgs", "repos_url": "https://api.github.com/users/frazar/repos", "events_url": "https://api.github.com/users/frazar/events{/privacy}", "received_events_url": "https://api.github.com/users/frazar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frazar", "id": 914950, "node_id": "MDQ6VXNlcjkxNDk1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/914950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frazar", "html_url": "https://github.com/frazar", "followers_url": "https://api.github.com/users/frazar/followers", "following_url": "https://api.github.com/users/frazar/following{/other_user}", "gists_url": "https://api.github.com/users/frazar/gists{/gist_id}", "starred_url": "https://api.github.com/users/frazar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frazar/subscriptions", "organizations_url": "https://api.github.com/users/frazar/orgs", "repos_url": "https://api.github.com/users/frazar/repos", "events_url": "https://api.github.com/users/frazar/events{/privacy}", "received_events_url": "https://api.github.com/users/frazar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5bd9517e202a6e2b004664f291b85093c8e0a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5bd9517e202a6e2b004664f291b85093c8e0a9", "html_url": "https://github.com/rust-lang/rust/commit/2c5bd9517e202a6e2b004664f291b85093c8e0a9"}], "stats": {"total": 100, "additions": 98, "deletions": 2}, "files": [{"sha": "1a29081c5b91f9d0eadb013884a277009715c1fb", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a9d996a7c5f962b4ac914c86f5005eb22128f511/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d996a7c5f962b4ac914c86f5005eb22128f511/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=a9d996a7c5f962b4ac914c86f5005eb22128f511", "patch": "@@ -3,7 +3,7 @@\n use std::{collections::hash_map::Entry, mem, sync::Arc};\n \n use arena::map::ArenaMap;\n-use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, HirFileId};\n+use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, name::known, HirFileId};\n use smallvec::SmallVec;\n use syntax::{\n     ast::{self, ModuleItemOwner},\n@@ -42,6 +42,45 @@ pub(super) struct Ctx {\n     forced_visibility: Option<RawVisibilityId>,\n }\n \n+/// Returns `true` if the given intrinsic is unsafe to call or not.\n+pub fn is_intrinsic_fn_unsafe(name: &Name) -> bool {\n+    // Should be kept in sync with https://github.com/rust-lang/rust/blob/c6e4db620a7d2f569f11dcab627430921ea8aacf/compiler/rustc_typeck/src/check/intrinsic.rs#L68\n+    *name != known::abort\n+        && *name != known::min_align_of\n+        && *name != known::needs_drop\n+        && *name != known::caller_location\n+        && *name != known::size_of_val\n+        && *name != known::min_align_of_val\n+        && *name != known::add_with_overflow\n+        && *name != known::sub_with_overflow\n+        && *name != known::mul_with_overflow\n+        && *name != known::wrapping_add\n+        && *name != known::wrapping_sub\n+        && *name != known::wrapping_mul\n+        && *name != known::saturating_add\n+        && *name != known::saturating_sub\n+        && *name != known::rotate_left\n+        && *name != known::rotate_right\n+        && *name != known::ctpop\n+        && *name != known::ctlz\n+        && *name != known::cttz\n+        && *name != known::bswap\n+        && *name != known::bitreverse\n+        && *name != known::discriminant_value\n+        && *name != known::type_id\n+        && *name != known::likely\n+        && *name != known::unlikely\n+        && *name != known::ptr_guaranteed_eq\n+        && *name != known::ptr_guaranteed_ne\n+        && *name != known::minnumf32\n+        && *name != known::minnumf64\n+        && *name != known::maxnumf32\n+        && *name != known::rustc_peek\n+        && *name != known::maxnumf64\n+        && *name != known::type_name\n+        && *name != known::variant_count\n+}\n+\n impl Ctx {\n     pub(super) fn new(db: &dyn DefDatabase, hygiene: Hygiene, file: HirFileId) -> Self {\n         Self {\n@@ -555,7 +594,8 @@ impl Ctx {\n                     let id: ModItem = match item {\n                         ast::ExternItem::Fn(ast) => {\n                             let func = self.lower_function(&ast)?;\n-                            self.data().functions[func.index].is_unsafe = true;\n+                            self.data().functions[func.index].is_unsafe =\n+                                is_intrinsic_fn_unsafe(&self.data().functions[func.index].name);\n                             func.into()\n                         }\n                         ast::ExternItem::Static(ast) => {"}, {"sha": "495c5a7e9fad33162971e291b66ca576b30e9f47", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9d996a7c5f962b4ac914c86f5005eb22128f511/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d996a7c5f962b4ac914c86f5005eb22128f511/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=a9d996a7c5f962b4ac914c86f5005eb22128f511", "patch": "@@ -437,3 +437,23 @@ fn assoc_item_macros() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn safe_intrinsic() {\n+    check(\n+        r\"\n+        #![feature(core_intrinsics)]\n+\n+        fn reverse(input: u32) -> u32 {\n+            std::intrinsics::bitreverse(input)\n+        }\n+    \",\n+        expect![[r#\"\n+            inner attrs: Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"feature\"))] }, input: Some(TokenTree(SUBTREE () 0\n+              IDENT   core_intrinsics 1)) }]) }\n+\n+            top-level items:\n+            Function { name: Name(Text(\"reverse\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: false, params: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u32\"))] }, generic_args: [None] })], is_varargs: false, ret_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u32\"))] }, generic_args: [None] }), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(0) }\n+        \"#]],\n+    );\n+}"}, {"sha": "0d5b566815d8da84ffc45090f6dd6fe7615cb638", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a9d996a7c5f962b4ac914c86f5005eb22128f511/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d996a7c5f962b4ac914c86f5005eb22128f511/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=a9d996a7c5f962b4ac914c86f5005eb22128f511", "patch": "@@ -208,6 +208,42 @@ pub mod known {\n         PartialOrd,\n         Eq,\n         PartialEq,\n+        // Safe primitives\n+        abort,\n+        size_of,\n+        min_align_of,\n+        needs_drop,\n+        caller_location,\n+        size_of_val,\n+        min_align_of_val,\n+        add_with_overflow,\n+        sub_with_overflow,\n+        mul_with_overflow,\n+        wrapping_add,\n+        wrapping_sub,\n+        wrapping_mul,\n+        saturating_add,\n+        saturating_sub,\n+        rotate_left,\n+        rotate_right,\n+        ctpop,\n+        ctlz,\n+        cttz,\n+        bswap,\n+        bitreverse,\n+        discriminant_value,\n+        type_id,\n+        likely,\n+        unlikely,\n+        ptr_guaranteed_eq,\n+        ptr_guaranteed_ne,\n+        minnumf32,\n+        minnumf64,\n+        maxnumf32,\n+        rustc_peek,\n+        maxnumf64,\n+        type_name,\n+        variant_count,\n     );\n \n     // self/Self cannot be used as an identifier"}]}