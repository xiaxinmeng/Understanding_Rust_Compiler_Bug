{"sha": "069e612e73f3fabb1184d9df009ea064118fffd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OWU2MTJlNzNmM2ZhYmIxMTg0ZDlkZjAwOWVhMDY0MTE4ZmZmZDg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-06T18:06:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-06T18:19:31Z"}, "message": "rustc_ast: Replace `AstLike::finalize_tokens` with a getter `tokens_mut`", "tree": {"sha": "ac21d786ac7200ce5e26de78a10cc595b211aa68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac21d786ac7200ce5e26de78a10cc595b211aa68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069e612e73f3fabb1184d9df009ea064118fffd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069e612e73f3fabb1184d9df009ea064118fffd8", "html_url": "https://github.com/rust-lang/rust/commit/069e612e73f3fabb1184d9df009ea064118fffd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069e612e73f3fabb1184d9df009ea064118fffd8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51748a8fc77283914d4135f31b5966a407208187", "url": "https://api.github.com/repos/rust-lang/rust/commits/51748a8fc77283914d4135f31b5966a407208187", "html_url": "https://github.com/rust-lang/rust/commit/51748a8fc77283914d4135f31b5966a407208187"}], "stats": {"total": 138, "additions": 60, "deletions": 78}, "files": [{"sha": "99196210e004b1ff2cbf71808d9991b0dce70fc8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=069e612e73f3fabb1184d9df009ea064118fffd8", "patch": "@@ -915,16 +915,6 @@ impl Stmt {\n         }\n     }\n \n-    pub fn tokens_mut(&mut self) -> Option<&mut LazyTokenStream> {\n-        match self.kind {\n-            StmtKind::Local(ref mut local) => local.tokens.as_mut(),\n-            StmtKind::Item(ref mut item) => item.tokens.as_mut(),\n-            StmtKind::Expr(ref mut expr) | StmtKind::Semi(ref mut expr) => expr.tokens.as_mut(),\n-            StmtKind::Empty => None,\n-            StmtKind::MacCall(ref mut mac) => mac.tokens.as_mut(),\n-        }\n-    }\n-\n     pub fn has_trailing_semicolon(&self) -> bool {\n         match &self.kind {\n             StmtKind::Semi(_) => true,"}, {"sha": "a71f2ac9815012389303ed77e4284dd6db61ebc0", "filename": "compiler/rustc_ast/src/ast_like.rs", "status": "modified", "additions": 34, "deletions": 54, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_ast%2Fsrc%2Fast_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_ast%2Fsrc%2Fast_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast_like.rs?ref=069e612e73f3fabb1184d9df009ea064118fffd8", "patch": "@@ -11,13 +11,7 @@ use super::{AttrVec, Attribute, Stmt, StmtKind};\n pub trait AstLike: Sized {\n     fn attrs(&self) -> &[Attribute];\n     fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>));\n-    /// Called by `Parser::collect_tokens` to store the collected\n-    /// tokens inside an AST node\n-    fn finalize_tokens(&mut self, _tokens: LazyTokenStream) {\n-        // This default impl makes this trait easier to implement\n-        // in tools like `rust-analyzer`\n-        panic!(\"`finalize_tokens` is not supported!\")\n-    }\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>>;\n }\n \n impl<T: AstLike + 'static> AstLike for P<T> {\n@@ -27,8 +21,8 @@ impl<T: AstLike + 'static> AstLike for P<T> {\n     fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         (**self).visit_attrs(f);\n     }\n-    fn finalize_tokens(&mut self, tokens: LazyTokenStream) {\n-        (**self).finalize_tokens(tokens)\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+        (**self).tokens_mut()\n     }\n }\n \n@@ -42,12 +36,12 @@ fn visit_attrvec(attrs: &mut AttrVec, f: impl FnOnce(&mut Vec<Attribute>)) {\n \n impl AstLike for StmtKind {\n     fn attrs(&self) -> &[Attribute] {\n-        match *self {\n-            StmtKind::Local(ref local) => local.attrs(),\n-            StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.attrs(),\n-            StmtKind::Item(ref item) => item.attrs(),\n+        match self {\n+            StmtKind::Local(local) => local.attrs(),\n+            StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr.attrs(),\n+            StmtKind::Item(item) => item.attrs(),\n             StmtKind::Empty => &[],\n-            StmtKind::MacCall(ref mac) => &*mac.attrs,\n+            StmtKind::MacCall(mac) => &mac.attrs,\n         }\n     }\n \n@@ -60,17 +54,14 @@ impl AstLike for StmtKind {\n             StmtKind::MacCall(mac) => visit_attrvec(&mut mac.attrs, f),\n         }\n     }\n-    fn finalize_tokens(&mut self, tokens: LazyTokenStream) {\n-        let stmt_tokens = match self {\n-            StmtKind::Local(ref mut local) => &mut local.tokens,\n-            StmtKind::Item(ref mut item) => &mut item.tokens,\n-            StmtKind::Expr(ref mut expr) | StmtKind::Semi(ref mut expr) => &mut expr.tokens,\n-            StmtKind::Empty => return,\n-            StmtKind::MacCall(ref mut mac) => &mut mac.tokens,\n-        };\n-        if stmt_tokens.is_none() {\n-            *stmt_tokens = Some(tokens);\n-        }\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+        Some(match self {\n+            StmtKind::Local(local) => &mut local.tokens,\n+            StmtKind::Item(item) => &mut item.tokens,\n+            StmtKind::Expr(expr) | StmtKind::Semi(expr) => &mut expr.tokens,\n+            StmtKind::Empty => return None,\n+            StmtKind::MacCall(mac) => &mut mac.tokens,\n+        })\n     }\n }\n \n@@ -82,8 +73,8 @@ impl AstLike for Stmt {\n     fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         self.kind.visit_attrs(f);\n     }\n-    fn finalize_tokens(&mut self, tokens: LazyTokenStream) {\n-        self.kind.finalize_tokens(tokens)\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+        self.kind.tokens_mut()\n     }\n }\n \n@@ -92,17 +83,13 @@ impl AstLike for Attribute {\n         &[]\n     }\n     fn visit_attrs(&mut self, _f: impl FnOnce(&mut Vec<Attribute>)) {}\n-    fn finalize_tokens(&mut self, tokens: LazyTokenStream) {\n-        match &mut self.kind {\n-            AttrKind::Normal(_, attr_tokens) => {\n-                if attr_tokens.is_none() {\n-                    *attr_tokens = Some(tokens);\n-                }\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+        Some(match &mut self.kind {\n+            AttrKind::Normal(_, tokens) => tokens,\n+            kind @ AttrKind::DocComment(..) => {\n+                panic!(\"Called tokens_mut on doc comment attr {:?}\", kind)\n             }\n-            AttrKind::DocComment(..) => {\n-                panic!(\"Called finalize_tokens on doc comment attr {:?}\", self)\n-            }\n-        }\n+        })\n     }\n }\n \n@@ -115,10 +102,8 @@ impl<T: AstLike> AstLike for Option<T> {\n             inner.visit_attrs(f);\n         }\n     }\n-    fn finalize_tokens(&mut self, tokens: LazyTokenStream) {\n-        if let Some(inner) = self {\n-            inner.finalize_tokens(tokens);\n-        }\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+        self.as_mut().and_then(|inner| inner.tokens_mut())\n     }\n }\n \n@@ -152,11 +137,8 @@ macro_rules! derive_has_tokens_and_attrs {\n                 VecOrAttrVec::visit(&mut self.attrs, f)\n             }\n \n-            fn finalize_tokens(&mut self, tokens: LazyTokenStream) {\n-                if self.tokens.is_none() {\n-                    self.tokens = Some(tokens);\n-                }\n-\n+            fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+                Some(&mut self.tokens)\n             }\n         }\n     )* }\n@@ -173,7 +155,9 @@ macro_rules! derive_has_attrs_no_tokens {\n                 VecOrAttrVec::visit(&mut self.attrs, f)\n             }\n \n-            fn finalize_tokens(&mut self, _tokens: LazyTokenStream) {}\n+            fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+                None\n+            }\n         }\n     )* }\n }\n@@ -185,14 +169,10 @@ macro_rules! derive_has_tokens_no_attrs {\n                 &[]\n             }\n \n-            fn visit_attrs(&mut self, _f: impl FnOnce(&mut Vec<Attribute>)) {\n-            }\n-\n-            fn finalize_tokens(&mut self, tokens: LazyTokenStream) {\n-                if self.tokens.is_none() {\n-                    self.tokens = Some(tokens);\n-                }\n+            fn visit_attrs(&mut self, _f: impl FnOnce(&mut Vec<Attribute>)) {}\n \n+            fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+                Some(&mut self.tokens)\n             }\n         }\n     )* }"}, {"sha": "c307d8b2f5306776ed9b01ad0be4162d4dd8d4ef", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=069e612e73f3fabb1184d9df009ea064118fffd8", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::{self as ast, token, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n+use rustc_ast::{self as ast, token, AstLike, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, Indeterminate, MultiItemModifier};\n use rustc_expand::config::StripUnconfigured;\n@@ -59,15 +59,9 @@ impl MultiItemModifier for Expander {\n                     // Erase the tokens if cfg-stripping modified the item\n                     // This will cause us to synthesize fake tokens\n                     // when `nt_to_tokenstream` is called on this item.\n-                    match &mut item {\n-                        Annotatable::Item(item) => item,\n-                        Annotatable::Stmt(stmt) => match &mut stmt.kind {\n-                            StmtKind::Item(item) => item,\n-                            _ => unreachable!(),\n-                        },\n-                        _ => unreachable!(),\n+                    if let Some(tokens) = item.tokens_mut() {\n+                        *tokens = None;\n                     }\n-                    .tokens = None;\n                 }\n                 ExpandResult::Ready(vec![item])\n             }"}, {"sha": "ffdb30819b193aac2b6552d1d157c08c043d8a54", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=069e612e73f3fabb1184d9df009ea064118fffd8", "patch": "@@ -81,8 +81,22 @@ impl AstLike for Annotatable {\n         }\n     }\n \n-    fn finalize_tokens(&mut self, tokens: LazyTokenStream) {\n-        panic!(\"Called finalize_tokens on an Annotatable: {:?}\", tokens);\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+        match self {\n+            Annotatable::Item(item) => item.tokens_mut(),\n+            Annotatable::TraitItem(trait_item) => trait_item.tokens_mut(),\n+            Annotatable::ImplItem(impl_item) => impl_item.tokens_mut(),\n+            Annotatable::ForeignItem(foreign_item) => foreign_item.tokens_mut(),\n+            Annotatable::Stmt(stmt) => stmt.tokens_mut(),\n+            Annotatable::Expr(expr) => expr.tokens_mut(),\n+            Annotatable::Arm(arm) => arm.tokens_mut(),\n+            Annotatable::Field(field) => field.tokens_mut(),\n+            Annotatable::FieldPat(fp) => fp.tokens_mut(),\n+            Annotatable::GenericParam(gp) => gp.tokens_mut(),\n+            Annotatable::Param(p) => p.tokens_mut(),\n+            Annotatable::StructField(sf) => sf.tokens_mut(),\n+            Annotatable::Variant(v) => v.tokens_mut(),\n+        }\n     }\n }\n "}, {"sha": "7512f46988c918cd27389694a279b41e03663502", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069e612e73f3fabb1184d9df009ea064118fffd8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=069e612e73f3fabb1184d9df009ea064118fffd8", "patch": "@@ -72,6 +72,10 @@ impl<'a> Parser<'a> {\n         let cursor_snapshot = self.token_cursor.clone();\n \n         let (mut ret, trailing_token) = f(self, attrs.attrs)?;\n+        let tokens = match ret.tokens_mut() {\n+            Some(tokens) if tokens.is_none() => tokens,\n+            _ => return Ok(ret),\n+        };\n \n         // Produces a `TokenStream` on-demand. Using `cursor_snapshot`\n         // and `num_calls`, we can reconstruct the `TokenStream` seen\n@@ -128,14 +132,14 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        let lazy_impl = LazyTokenStreamImpl {\n+        *tokens = Some(LazyTokenStream::new(LazyTokenStreamImpl {\n             start_token,\n             num_calls,\n             cursor_snapshot,\n             desugar_doc_comments: self.desugar_doc_comments,\n             append_unglued_token: self.token_cursor.append_unglued_token.clone(),\n-        };\n-        ret.finalize_tokens(LazyTokenStream::new(lazy_impl));\n+        }));\n+\n         Ok(ret)\n     }\n }"}]}