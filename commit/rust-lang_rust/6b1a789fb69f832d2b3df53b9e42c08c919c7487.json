{"sha": "6b1a789fb69f832d2b3df53b9e42c08c919c7487", "node_id": "C_kwDOAAsO6NoAKDZiMWE3ODlmYjY5ZjgzMmQyYjNkZjUzYjllNDJjMDhjOTE5Yzc0ODc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-06T15:43:52Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-16T08:03:06Z"}, "message": "remove some arguments that can also be fed at the caller side", "tree": {"sha": "ef4c7c51ce88231cb124716c510d131bea152dec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef4c7c51ce88231cb124716c510d131bea152dec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1a789fb69f832d2b3df53b9e42c08c919c7487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1a789fb69f832d2b3df53b9e42c08c919c7487", "html_url": "https://github.com/rust-lang/rust/commit/6b1a789fb69f832d2b3df53b9e42c08c919c7487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1a789fb69f832d2b3df53b9e42c08c919c7487/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e9c871a7842bed0ed566d0ee0726658036d1c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9c871a7842bed0ed566d0ee0726658036d1c1e", "html_url": "https://github.com/rust-lang/rust/commit/9e9c871a7842bed0ed566d0ee0726658036d1c1e"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "5dd758c94512f29e6e88e2f94d3a830cfce477ba", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a789fb69f832d2b3df53b9e42c08c919c7487/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a789fb69f832d2b3df53b9e42c08c919c7487/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=6b1a789fb69f832d2b3df53b9e42c08c919c7487", "patch": "@@ -13,7 +13,6 @@ use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n-use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n@@ -31,7 +30,7 @@ use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn};\n+use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn, Untracked};\n use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n@@ -775,11 +774,8 @@ impl<'tcx> QueryContext<'tcx> {\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n-    krate: Lrc<ast::Crate>,\n     dep_graph: DepGraph,\n-    resolver: Rc<RefCell<BoxedResolver>>,\n-    outputs: OutputFilenames,\n-    crate_name: Symbol,\n+    untracked: Untracked,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n     global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n@@ -790,8 +786,6 @@ pub fn create_global_ctxt<'tcx>(\n     // incr. comp. yet.\n     dep_graph.assert_ignored();\n \n-    let resolver_outputs = BoxedResolver::to_resolver_outputs(resolver);\n-\n     let sess = &compiler.session();\n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n \n@@ -810,12 +804,6 @@ pub fn create_global_ctxt<'tcx>(\n         TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n     });\n \n-    let ty::ResolverOutputs {\n-        global_ctxt: untracked_resolutions,\n-        ast_lowering: untracked_resolver_for_lowering,\n-        untracked,\n-    } = resolver_outputs;\n-\n     let gcx = sess.time(\"setup_global_ctxt\", || {\n         global_ctxt.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n@@ -832,19 +820,7 @@ pub fn create_global_ctxt<'tcx>(\n         })\n     });\n \n-    let mut qcx = QueryContext { gcx };\n-    qcx.enter(|tcx| {\n-        let feed = tcx.feed_unit_query();\n-        feed.resolver_for_lowering(\n-            tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n-        );\n-        feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n-        feed.output_filenames(tcx.arena.alloc(std::sync::Arc::new(outputs)));\n-        feed.features_query(sess.features_untracked());\n-        let feed = tcx.feed_local_crate();\n-        feed.crate_name(crate_name);\n-    });\n-    qcx\n+    QueryContext { gcx }\n }\n \n /// Runs the resolution, type-checking, region checking and other"}, {"sha": "6f791c8893ce38baacc78170c139bc93a65bfebd", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6b1a789fb69f832d2b3df53b9e42c08c919c7487/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1a789fb69f832d2b3df53b9e42c08c919c7487/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=6b1a789fb69f832d2b3df53b9e42c08c919c7487", "patch": "@@ -13,7 +13,7 @@ use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::{GlobalCtxt, TyCtxt};\n+use rustc_middle::ty::{self, GlobalCtxt, TyCtxt};\n use rustc_query_impl::Queries as TcxQueries;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::{output::find_crate_name, Session};\n@@ -222,19 +222,35 @@ impl<'tcx> Queries<'tcx> {\n                 crate_name,\n             )?;\n \n-            Ok(passes::create_global_ctxt(\n+            let ty::ResolverOutputs {\n+                untracked,\n+                global_ctxt: untracked_resolutions,\n+                ast_lowering: untracked_resolver_for_lowering,\n+            } = BoxedResolver::to_resolver_outputs(resolver);\n+\n+            let mut qcx = passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n-                krate,\n                 self.dep_graph()?.steal(),\n-                resolver,\n-                outputs,\n-                crate_name,\n+                untracked,\n                 &self.queries,\n                 &self.gcx,\n                 &self.arena,\n                 &self.hir_arena,\n-            ))\n+            );\n+\n+            qcx.enter(|tcx| {\n+                let feed = tcx.feed_unit_query();\n+                feed.resolver_for_lowering(\n+                    tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n+                );\n+                feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n+                feed.output_filenames(tcx.arena.alloc(std::sync::Arc::new(outputs)));\n+                feed.features_query(tcx.sess.features_untracked());\n+                let feed = tcx.feed_local_crate();\n+                feed.crate_name(crate_name);\n+            });\n+            Ok(qcx)\n         })\n     }\n "}]}