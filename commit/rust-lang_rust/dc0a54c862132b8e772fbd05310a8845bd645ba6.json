{"sha": "dc0a54c862132b8e772fbd05310a8845bd645ba6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMGE1NGM4NjIxMzJiOGU3NzJmYmQwNTMxMGE4ODQ1YmQ2NDViYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-09T17:58:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-09T17:58:08Z"}, "message": "Auto merge of #1511 - samrat:more-fd-trait-ops, r=RalfJung\n\nImplement dup and close for stdin/stdout/stderr\n\nImplements some of the operations for stdin/out/err, towards #1499", "tree": {"sha": "7091d472b777e3e8ca308e501d2fe49180531ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7091d472b777e3e8ca308e501d2fe49180531ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc0a54c862132b8e772fbd05310a8845bd645ba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0a54c862132b8e772fbd05310a8845bd645ba6", "html_url": "https://github.com/rust-lang/rust/commit/dc0a54c862132b8e772fbd05310a8845bd645ba6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc0a54c862132b8e772fbd05310a8845bd645ba6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "604a674ea37b302fd605df67be10a24ce94ad0a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/604a674ea37b302fd605df67be10a24ce94ad0a6", "html_url": "https://github.com/rust-lang/rust/commit/604a674ea37b302fd605df67be10a24ce94ad0a6"}, {"sha": "563fb8e43d4c236faeeb9b611294a82ecff93712", "url": "https://api.github.com/repos/rust-lang/rust/commits/563fb8e43d4c236faeeb9b611294a82ecff93712", "html_url": "https://github.com/rust-lang/rust/commit/563fb8e43d4c236faeeb9b611294a82ecff93712"}], "stats": {"total": 151, "additions": 109, "deletions": 42}, "files": [{"sha": "c50b41b75ef9e60ffd3f4c4b7665f6e2a455bc1d", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 73, "deletions": 42, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/dc0a54c862132b8e772fbd05310a8845bd645ba6/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0a54c862132b8e772fbd05310a8845bd645ba6/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=dc0a54c862132b8e772fbd05310a8845bd645ba6", "patch": "@@ -28,6 +28,9 @@ trait FileDescriptor : std::fmt::Debug {\n     fn read<'tcx>(&mut self, communicate_allowed: bool, bytes: &mut [u8]) -> InterpResult<'tcx, io::Result<usize>>;\n     fn write<'tcx>(&mut self, communicate_allowed: bool, bytes: &[u8]) -> InterpResult<'tcx, io::Result<usize>>;\n     fn seek<'tcx>(&mut self, communicate_allowed: bool, offset: SeekFrom) -> InterpResult<'tcx, io::Result<u64>>;\n+    fn close<'tcx>(self: Box<Self>, _communicate_allowed: bool) -> InterpResult<'tcx, io::Result<i32>>;\n+\n+    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n }\n \n impl FileDescriptor for FileHandle {\n@@ -49,6 +52,34 @@ impl FileDescriptor for FileHandle {\n         assert!(communicate_allowed, \"isolation should have prevented even opening a file\");\n         Ok(self.file.seek(offset))\n     }\n+\n+    fn close<'tcx>(self: Box<Self>, communicate_allowed: bool) -> InterpResult<'tcx, io::Result<i32>> {\n+        assert!(communicate_allowed, \"isolation should have prevented even opening a file\");\n+        // We sync the file if it was opened in a mode different than read-only.\n+        if self.writable {\n+            // `File::sync_all` does the checks that are done when closing a file. We do this to\n+            // to handle possible errors correctly.\n+            let result = self.file.sync_all().map(|_| 0i32);\n+            // Now we actually close the file.\n+            drop(self);\n+            // And return the result.\n+            Ok(result)\n+        } else {\n+            // We drop the file, this closes it but ignores any errors\n+            // produced when closing it. This is done because\n+            // `File::sync_all` cannot be done over files like\n+            // `/dev/urandom` which are read-only. Check\n+            // https://github.com/rust-lang/miri/issues/999#issuecomment-568920439\n+            // for a deeper discussion.\n+            drop(self);\n+            Ok(Ok(0))\n+        }\n+    }\n+\n+    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+        let duplicated = self.file.try_clone()?;\n+        Ok(Box::new(FileHandle { file: duplicated, writable: self.writable }))\n+    }\n }\n \n impl FileDescriptor for io::Stdin {\n@@ -71,6 +102,14 @@ impl FileDescriptor for io::Stdin {\n     fn seek<'tcx>(&mut self, _communicate_allowed: bool, _offset: SeekFrom) -> InterpResult<'tcx, io::Result<u64>> {\n         throw_unsup_format!(\"cannot seek on stdin\");\n     }\n+\n+    fn close<'tcx>(self: Box<Self>, _communicate_allowed: bool) -> InterpResult<'tcx, io::Result<i32>> {\n+        throw_unsup_format!(\"stdin cannot be closed\");\n+    }\n+\n+    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+        Ok(Box::new(io::stdin()))\n+    }\n }\n \n impl FileDescriptor for io::Stdout {\n@@ -98,6 +137,14 @@ impl FileDescriptor for io::Stdout {\n     fn seek<'tcx>(&mut self, _communicate_allowed: bool, _offset: SeekFrom) -> InterpResult<'tcx, io::Result<u64>> {\n         throw_unsup_format!(\"cannot seek on stdout\");\n     }\n+\n+    fn close<'tcx>(self: Box<Self>, _communicate_allowed: bool) -> InterpResult<'tcx, io::Result<i32>> {\n+        throw_unsup_format!(\"stdout cannot be closed\");\n+    }\n+\n+    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+        Ok(Box::new(io::stdout()))\n+    }\n }\n \n impl FileDescriptor for io::Stderr {\n@@ -118,6 +165,14 @@ impl FileDescriptor for io::Stderr {\n     fn seek<'tcx>(&mut self, _communicate_allowed: bool, _offset: SeekFrom) -> InterpResult<'tcx, io::Result<u64>> {\n         throw_unsup_format!(\"cannot seek on stderr\");\n     }\n+\n+    fn close<'tcx>(self: Box<Self>, _communicate_allowed: bool) -> InterpResult<'tcx, io::Result<i32>> {\n+        throw_unsup_format!(\"stderr cannot be closed\");\n+    }\n+\n+    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+        Ok(Box::new(io::stderr()))\n+    }\n }\n \n #[derive(Debug)]\n@@ -137,18 +192,12 @@ impl<'tcx> Default for FileHandler {\n     }\n }\n \n-\n-// fd numbers 0, 1, and 2 are reserved for stdin, stdout, and stderr\n-const MIN_NORMAL_FILE_FD: i32 = 3;\n-\n impl<'tcx> FileHandler {\n-    fn insert_fd(&mut self, file_handle: FileHandle) -> i32 {\n+    fn insert_fd(&mut self, file_handle: Box<dyn FileDescriptor>) -> i32 {\n         self.insert_fd_with_min_fd(file_handle, 0)\n     }\n \n-    fn insert_fd_with_min_fd(&mut self, file_handle: FileHandle, min_fd: i32) -> i32 {\n-        let min_fd = std::cmp::max(min_fd, MIN_NORMAL_FILE_FD);\n-\n+    fn insert_fd_with_min_fd(&mut self, file_handle: Box<dyn FileDescriptor>, min_fd: i32) -> i32 {\n         // Find the lowest unused FD, starting from min_fd. If the first such unused FD is in\n         // between used FDs, the find_map combinator will return it. If the first such unused FD\n         // is after all other used FDs, the find_map combinator will return None, and we will use\n@@ -173,7 +222,7 @@ impl<'tcx> FileHandler {\n             self.handles.last_key_value().map(|(fd, _)| fd.checked_add(1).unwrap()).unwrap_or(min_fd)\n         });\n \n-        self.handles.insert(new_fd, Box::new(file_handle)).unwrap_none();\n+        self.handles.insert(new_fd, file_handle).unwrap_none();\n         new_fd\n     }\n }\n@@ -449,7 +498,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = options.open(&path).map(|file| {\n             let fh = &mut this.machine.file_handler;\n-            fh.insert_fd(FileHandle { file, writable })\n+            fh.insert_fd(Box::new(FileHandle { file, writable }))\n         });\n \n         this.try_unwrap_io_result(fd)\n@@ -489,22 +538,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // thus they can share the same implementation here.\n             let &[_, _, start] = check_arg_count(args)?;\n             let start = this.read_scalar(start)?.to_i32()?;\n-            if fd < MIN_NORMAL_FILE_FD {\n-                throw_unsup_format!(\"duplicating file descriptors for stdin, stdout, or stderr is not supported\")\n-            }\n+\n             let fh = &mut this.machine.file_handler;\n-            let (file_result, writable) = match fh.handles.get(&fd) {\n+\n+            match fh.handles.get_mut(&fd) {\n                 Some(file_descriptor) => {\n-                    // FIXME: Support \"dup\" for all FDs(stdin, etc)\n-                    let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n-                    (file.try_clone(), *writable)\n+                    let dup_result = file_descriptor.dup();\n+                    match dup_result {\n+                        Ok(dup_fd) => Ok(fh.insert_fd_with_min_fd(dup_fd, start)),\n+                        Err(e) => {\n+                            this.set_last_error_from_io_error(e)?;\n+                            Ok(-1)\n+                        }\n+                    }\n                 },\n                 None => return this.handle_not_found(),\n-            };\n-            let fd_result = file_result.map(|duplicated| {\n-                fh.insert_fd_with_min_fd(FileHandle { file: duplicated, writable }, start)\n-            });\n-            this.try_unwrap_io_result(fd_result)\n+            }\n         } else if this.tcx.sess.target.target.target_os == \"macos\"\n             && cmd == this.eval_libc_i32(\"F_FULLFSYNC\")?\n         {\n@@ -530,26 +579,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.remove(&fd) {\n-            // FIXME: Support `close` for all FDs(stdin, etc)\n-            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n-            // We sync the file if it was opened in a mode different than read-only.\n-            if *writable {\n-                // `File::sync_all` does the checks that are done when closing a file. We do this to\n-                // to handle possible errors correctly.\n-                let result = this.try_unwrap_io_result(file.sync_all().map(|_| 0i32));\n-                // Now we actually close the file.\n-                drop(file);\n-                // And return the result.\n-                result\n-            } else {\n-                // We drop the file, this closes it but ignores any errors produced when closing\n-                // it. This is done because `File::sync_all` cannot be done over files like\n-                // `/dev/urandom` which are read-only. Check\n-                // https://github.com/rust-lang/miri/issues/999#issuecomment-568920439 for a deeper\n-                // discussion.\n-                drop(file);\n-                Ok(0)\n-            }\n+            let result = file_descriptor.close(this.machine.communicate)?;\n+            this.try_unwrap_io_result(result)\n         } else {\n             this.handle_not_found()\n         }"}, {"sha": "4f10d5e0c990dee1e0aea1db271ab6eb0a566f95", "filename": "tests/compile-fail/fs/close_stdout.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc0a54c862132b8e772fbd05310a8845bd645ba6/tests%2Fcompile-fail%2Ffs%2Fclose_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0a54c862132b8e772fbd05310a8845bd645ba6/tests%2Fcompile-fail%2Ffs%2Fclose_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Fclose_stdout.rs?ref=dc0a54c862132b8e772fbd05310a8845bd645ba6", "patch": "@@ -0,0 +1,14 @@\n+// ignore-windows: No libc on Windows\n+// compile-flags: -Zmiri-disable-isolation\n+\n+// FIXME: standard handles cannot be closed (https://github.com/rust-lang/rust/issues/40032)\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    unsafe {\n+        libc::close(1); //~ ERROR stdout cannot be closed\n+    }\n+}"}, {"sha": "e3deb7a5bcd8a60509b02d072c9e6513c96fe8b2", "filename": "tests/run-pass/fs_libc.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc0a54c862132b8e772fbd05310a8845bd645ba6/tests%2Frun-pass%2Ffs_libc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0a54c862132b8e772fbd05310a8845bd645ba6/tests%2Frun-pass%2Ffs_libc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs_libc.rs?ref=dc0a54c862132b8e772fbd05310a8845bd645ba6", "patch": "@@ -0,0 +1,20 @@\n+// ignore-windows\n+// compile-flags: -Zmiri-disable-isolation\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    dup_stdout_stderr_test();\n+}\n+\n+fn dup_stdout_stderr_test() {\n+    let bytes = b\"hello dup fd\\n\";\n+    unsafe {\n+        let new_stdout = libc::fcntl(1, libc::F_DUPFD, 0);\n+        let new_stderr = libc::fcntl(2, libc::F_DUPFD, 0);\n+        libc::write(new_stdout, bytes.as_ptr() as *const libc::c_void, bytes.len());\n+        libc::write(new_stderr, bytes.as_ptr() as *const libc::c_void, bytes.len());\n+    }\n+}"}, {"sha": "b6fa69e3d5d2e8c4626550dcb2c413f91dfcd156", "filename": "tests/run-pass/fs_libc.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc0a54c862132b8e772fbd05310a8845bd645ba6/tests%2Frun-pass%2Ffs_libc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc0a54c862132b8e772fbd05310a8845bd645ba6/tests%2Frun-pass%2Ffs_libc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs_libc.stderr?ref=dc0a54c862132b8e772fbd05310a8845bd645ba6", "patch": "@@ -0,0 +1 @@\n+hello dup fd"}, {"sha": "b6fa69e3d5d2e8c4626550dcb2c413f91dfcd156", "filename": "tests/run-pass/fs_libc.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc0a54c862132b8e772fbd05310a8845bd645ba6/tests%2Frun-pass%2Ffs_libc.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/dc0a54c862132b8e772fbd05310a8845bd645ba6/tests%2Frun-pass%2Ffs_libc.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs_libc.stdout?ref=dc0a54c862132b8e772fbd05310a8845bd645ba6", "patch": "@@ -0,0 +1 @@\n+hello dup fd"}]}