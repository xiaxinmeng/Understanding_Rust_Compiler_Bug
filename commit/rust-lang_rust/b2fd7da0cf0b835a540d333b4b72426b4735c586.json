{"sha": "b2fd7da0cf0b835a540d333b4b72426b4735c586", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZmQ3ZGEwY2YwYjgzNWE1NDBkMzMzYjRiNzI0MjZiNDczNWM1ODY=", "commit": {"author": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-05-07T15:37:13Z"}, "committer": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-06-01T15:13:25Z"}, "message": "add more join tests\n\nold tests cover the new fast path of str joining already\nthis adds tests for joining into Strings with long separators (>4 byte) and\nfor joining into Vec<T>, T: Clone + !Copy. Vec<T: Copy> will be\nspecialised when specialisation type inference bugs are fixed.", "tree": {"sha": "cbc62a03a0f73b7cf36bad393c78ad779b0f6df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc62a03a0f73b7cf36bad393c78ad779b0f6df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2fd7da0cf0b835a540d333b4b72426b4735c586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2fd7da0cf0b835a540d333b4b72426b4735c586", "html_url": "https://github.com/rust-lang/rust/commit/b2fd7da0cf0b835a540d333b4b72426b4735c586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2fd7da0cf0b835a540d333b4b72426b4735c586/comments", "author": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86608205069aed5c78bcc38dd26bcf4213e23a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d86608205069aed5c78bcc38dd26bcf4213e23a0", "html_url": "https://github.com/rust-lang/rust/commit/d86608205069aed5c78bcc38dd26bcf4213e23a0"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "3b7eec38609d0b45c94bca198f7cf998e7daa51a", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2fd7da0cf0b835a540d333b4b72426b4735c586/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fd7da0cf0b835a540d333b4b72426b4735c586/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=b2fd7da0cf0b835a540d333b4b72426b4735c586", "patch": "@@ -609,6 +609,15 @@ fn test_join() {\n     assert_eq!(v.join(&0), [1, 0, 2, 0, 3]);\n }\n \n+#[test]\n+fn test_join_nocopy() {\n+    let v: [String; 0] = [];\n+    assert_eq!(v.join(\",\"), \"\");\n+    assert_eq!([\"a\".to_string(), \"ab\".into()].join(\",\"), \"a,ab\");\n+    assert_eq!([\"a\".to_string(), \"ab\".into(), \"abc\".into()].join(\",\"), \"a,ab,abc\");\n+    assert_eq!([\"a\".to_string(), \"ab\".into(), \"\".into()].join(\",\"), \"a,ab,\");\n+}\n+\n #[test]\n fn test_insert() {\n     let mut a = vec![1, 2, 4];"}, {"sha": "03d295d16e6a0776e831dd5e3741df5f35f5e0bc", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2fd7da0cf0b835a540d333b4b72426b4735c586/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fd7da0cf0b835a540d333b4b72426b4735c586/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=b2fd7da0cf0b835a540d333b4b72426b4735c586", "patch": "@@ -162,6 +162,19 @@ fn test_join_for_different_lengths() {\n     test_join!(\"-a-bc\", [\"\", \"a\", \"bc\"], \"-\");\n }\n \n+// join has fast paths for small separators up to 4 bytes\n+// this tests the slow paths.\n+#[test]\n+fn test_join_for_different_lengths_with_long_separator() {\n+    assert_eq!(\"\uff5e\uff5e\uff5e\uff5e\uff5e\".len(), 15);\n+\n+    let empty: &[&str] = &[];\n+    test_join!(\"\", empty, \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n+    test_join!(\"a\", [\"a\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n+    test_join!(\"a\uff5e\uff5e\uff5e\uff5e\uff5eb\", [\"a\", \"b\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n+    test_join!(\"\uff5e\uff5e\uff5e\uff5e\uff5ea\uff5e\uff5e\uff5e\uff5e\uff5ebc\", [\"\", \"a\", \"bc\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n+}\n+\n #[test]\n fn test_unsafe_slice() {\n     assert_eq!(\"ab\", unsafe {\"abc\".slice_unchecked(0, 2)});"}]}