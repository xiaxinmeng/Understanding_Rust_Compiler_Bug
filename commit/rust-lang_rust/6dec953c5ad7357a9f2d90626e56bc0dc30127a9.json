{"sha": "6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZWM5NTNjNWFkNzM1N2E5ZjJkOTA2MjZlNTZiYzBkYzMwMTI3YTk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-08-31T10:06:13Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-09-03T10:10:54Z"}, "message": "address review comments", "tree": {"sha": "e46649c0b904eec03210ee1a6e032e49016fedc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46649c0b904eec03210ee1a6e032e49016fedc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "html_url": "https://github.com/rust-lang/rust/commit/6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3", "html_url": "https://github.com/rust-lang/rust/commit/02b3ae63e2d3fd2fe7496eaa8b6862322aaf38b3"}], "stats": {"total": 56, "additions": 25, "deletions": 31}, "files": [{"sha": "6e330f538a81de28ff76b0a5db8250de59f8ad95", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "patch": "@@ -21,10 +21,11 @@\n                                      (or another type that implements `{Try}`)\")]\n #[cfg_attr(not(stage0),\n            rustc_on_unimplemented(\n-               on(all(direct, from_desugaring),\n+               on(all(direct, from_desugaring=\"?\"),\n                   message=\"the `?` operator can only be used in a \\\n                            function that returns `Result` \\\n-                           (or another type that implements `{Try}`)\")))]\n+                           (or another type that implements `{Try}`)\",\n+                  label=\"cannot use the `?` operator in a function that returns `{Self}`\")))]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "509f342062844a3c78e320715b16b7a0d5c83e58", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "patch": "@@ -327,6 +327,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             .unwrap_or(trait_ref.def_id());\n         let trait_ref = *trait_ref.skip_binder();\n \n+        let s;\n         let mut flags = vec![];\n         let direct = match obligation.cause.code {\n             ObligationCauseCode::BuiltinDerivedObligation(..) |\n@@ -336,11 +337,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if direct {\n             // this is a \"direct\", user-specified, rather than derived,\n             // obligation.\n-            flags.push(\"direct\");\n+            flags.push((\"direct\", None));\n         }\n \n-        if let Some(_) = obligation.cause.span.compiler_desugaring_kind() {\n-            flags.push(\"from_desugaring\");\n+        if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {\n+            s = k.as_symbol().as_str();\n+            flags.push((\"from_desugaring\", None));\n+            flags.push((\"from_desugaring\", Some(&*s)));\n         }\n \n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item("}, {"sha": "2cfee21936cad5e7df276e9e313c2a8a089ec013", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n     pub fn evaluate(&self,\n                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                     trait_ref: ty::TraitRef<'tcx>,\n-                    options: &[&str])\n+                    options: &[(&str, Option<&str>)])\n                     -> OnUnimplementedNote\n     {\n         let mut message = None;\n@@ -180,7 +180,11 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n                 if !attr::eval_condition(condition, &tcx.sess.parse_sess, &mut |c| {\n-                    options.iter().any(|o| c.check_name(o))\n+                    options.contains(&(&c.name().as_str(),\n+                                      match c.value_str().map(|s| s.as_str()) {\n+                                          Some(ref s) => Some(s),\n+                                          None => None\n+                                      }))\n                 }) {\n                     debug!(\"evaluate: skipping {:?} due to condition\", command);\n                     continue"}, {"sha": "771835579ae61cc69587c9995ccca65d1c2bffc6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "patch": "@@ -1218,8 +1218,7 @@ fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     item: &hir::Item) {\n     let item_def_id = tcx.hir.local_def_id(item.id);\n     // an error would be reported if this fails.\n-    let _ = traits::OnUnimplementedDirective::of_item(\n-        tcx, trait_def_id, item_def_id);\n+    let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item_def_id);\n }\n \n fn report_forbidden_specialization<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "d81f773442ca28c6f82bd79057848c8f7377b9f0", "filename": "src/test/ui/suggestions/try-operator-on-main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs?ref=6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(try_trait)]\n+\n use std::ops::Try;\n \n fn main() {"}, {"sha": "0d3e67e99a8d9f93f2dc2615d7fa3a98f2cfa996", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dec953c5ad7357a9f2d90626e56bc0dc30127a9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "patch": "@@ -1,37 +1,22 @@\n-error: use of unstable library feature 'try_trait' (see issue #42327)\n-  --> $DIR/try-operator-on-main.rs:11:5\n-   |\n-11 | use std::ops::Try;\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(try_trait)] to the crate attributes to enable\n-\n-error: use of unstable library feature 'try_trait' (see issue #42327)\n-  --> $DIR/try-operator-on-main.rs:19:25\n-   |\n-19 | fn try_trait_generic<T: Try>() {}\n-   |                         ^^^\n-   |\n-   = help: add #![feature(try_trait)] to the crate attributes to enable\n-\n error[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n-  --> $DIR/try-operator-on-main.rs:14:5\n+  --> $DIR/try-operator-on-main.rs:16:5\n    |\n-14 |     std::fs::File::open(\"foo\")?;\n+16 |     std::fs::File::open(\"foo\")?;\n    |     ---------------------------\n    |     |\n-   |     the trait `std::ops::Try` is not implemented for `()`\n+   |     cannot use the `?` operator in a function that returns `()`\n    |     in this macro invocation\n    |\n+   = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n-  --> $DIR/try-operator-on-main.rs:16:5\n+  --> $DIR/try-operator-on-main.rs:18:5\n    |\n-16 |     try_trait_generic::<()>();\n+18 |     try_trait_generic::<()>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n    |\n    = note: required by `try_trait_generic`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}]}