{"sha": "e2d770a398a12ab44da6b6d85010fe6a30b3687b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDc3MGEzOThhMTJhYjQ0ZGE2YjZkODUwMTBmZTZhMzBiMzY4N2I=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-04-29T21:19:35Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-04-29T21:19:35Z"}, "message": "Add some missing punctuation in the libstd/net/ip.rs docs.", "tree": {"sha": "328a65861972f29b5c5a9fd47deebaf5f3f3be26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/328a65861972f29b5c5a9fd47deebaf5f3f3be26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d770a398a12ab44da6b6d85010fe6a30b3687b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d770a398a12ab44da6b6d85010fe6a30b3687b", "html_url": "https://github.com/rust-lang/rust/commit/e2d770a398a12ab44da6b6d85010fe6a30b3687b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d770a398a12ab44da6b6d85010fe6a30b3687b/comments", "author": null, "committer": null, "parents": [{"sha": "42196ae7bf3dd7eac099f0ef850f067d07506864", "url": "https://api.github.com/repos/rust-lang/rust/commits/42196ae7bf3dd7eac099f0ef850f067d07506864", "html_url": "https://github.com/rust-lang/rust/commit/42196ae7bf3dd7eac099f0ef850f067d07506864"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "9fd69840f7f054ee93927945b2211297bec44463", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e2d770a398a12ab44da6b6d85010fe6a30b3687b/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d770a398a12ab44da6b6d85010fe6a30b3687b/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=e2d770a398a12ab44da6b6d85010fe6a30b3687b", "patch": "@@ -60,7 +60,7 @@ pub enum Ipv6MulticastScope {\n impl Ipv4Addr {\n     /// Creates a new IPv4 address from four eight-bit octets.\n     ///\n-    /// The result will represent the IP address a.b.c.d\n+    /// The result will represent the IP address `a`.`b`.`c`.`d`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         Ipv4Addr {\n@@ -73,19 +73,19 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Returns the four eight-bit integers that make up this address\n+    /// Returns the four eight-bit integers that make up this address.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn octets(&self) -> [u8; 4] {\n         let bits = ntoh(self.inner.s_addr);\n         [(bits >> 24) as u8, (bits >> 16) as u8, (bits >> 8) as u8, bits as u8]\n     }\n \n-    /// Returns true for the special 'unspecified' address 0.0.0.0\n+    /// Returns true for the special 'unspecified' address 0.0.0.0.\n     pub fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n     }\n \n-    /// Returns true if this is a loopback address (127.0.0.0/8)\n+    /// Returns true if this is a loopback address (127.0.0.0/8).\n     pub fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n     }\n@@ -106,7 +106,7 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Returns true if the address is link-local (169.254.0.0/16)\n+    /// Returns true if the address is link-local (169.254.0.0/16).\n     pub fn is_link_local(&self) -> bool {\n         self.octets()[0] == 169 && self.octets()[1] == 254\n     }\n@@ -116,7 +116,7 @@ impl Ipv4Addr {\n     /// Non-globally-routable networks include the private networks (10.0.0.0/8,\n     /// 172.16.0.0/12 and 192.168.0.0/16), the loopback network (127.0.0.0/8),\n     /// the link-local network (169.254.0.0/16), the broadcast address (255.255.255.255/32) and\n-    /// the test networks used for documentation (192.0.2.0/24, 198.51.100.0/24 and 203.0.113.0/24)\n+    /// the test networks used for documentation (192.0.2.0/24, 198.51.100.0/24 and 203.0.113.0/24).\n     pub fn is_global(&self) -> bool {\n         !self.is_private() && !self.is_loopback() && !self.is_link_local() &&\n         !self.is_broadcast() && !self.is_documentation()\n@@ -131,13 +131,13 @@ impl Ipv4Addr {\n \n     /// Returns true if this is a broadcast address.\n     ///\n-    /// A broadcast address has all octets set to 255 as defined in RFC 919\n+    /// A broadcast address has all octets set to 255 as defined in RFC 919.\n     pub fn is_broadcast(&self) -> bool {\n         self.octets()[0] == 255 && self.octets()[1] == 255 &&\n         self.octets()[2] == 255 && self.octets()[3] == 255\n     }\n \n-    /// Returns true if this address is in a range designated for documentation\n+    /// Returns true if this address is in a range designated for documentation.\n     ///\n     /// This is defined in RFC 5737\n     /// - 192.0.2.0/24 (TEST-NET-1)\n@@ -152,7 +152,7 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Converts this address to an IPv4-compatible IPv6 address\n+    /// Converts this address to an IPv4-compatible IPv6 address.\n     ///\n     /// a.b.c.d becomes ::a.b.c.d\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -162,7 +162,7 @@ impl Ipv4Addr {\n                       ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n     }\n \n-    /// Converts this address to an IPv4-mapped IPv6 address\n+    /// Converts this address to an IPv4-mapped IPv6 address.\n     ///\n     /// a.b.c.d becomes ::ffff:a.b.c.d\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -247,7 +247,7 @@ impl FromInner<libc::in_addr> for Ipv4Addr {\n impl Ipv6Addr {\n     /// Creates a new IPv6 address from eight 16-bit segments.\n     ///\n-    /// The result will represent the IP address a:b:c:d:e:f:g:h\n+    /// The result will represent the IP address a:b:c:d:e:f:g:h.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16,\n                h: u16) -> Ipv6Addr {\n@@ -259,7 +259,7 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Returns the eight 16-bit segments that make up this address\n+    /// Returns the eight 16-bit segments that make up this address.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn segments(&self) -> [u16; 8] {\n         [ntoh(self.inner.s6_addr[0]),\n@@ -272,12 +272,12 @@ impl Ipv6Addr {\n          ntoh(self.inner.s6_addr[7])]\n     }\n \n-    /// Returns true for the special 'unspecified' address ::\n+    /// Returns true for the special 'unspecified' address ::.\n     pub fn is_unspecified(&self) -> bool {\n         self.segments() == [0, 0, 0, 0, 0, 0, 0, 0]\n     }\n \n-    /// Returns true if this is a loopback address (::1)\n+    /// Returns true if this is a loopback address (::1).\n     pub fn is_loopback(&self) -> bool {\n         self.segments() == [0, 0, 0, 0, 0, 0, 0, 1]\n     }\n@@ -295,25 +295,25 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Returns true if this is a unique local address (IPv6)\n+    /// Returns true if this is a unique local address (IPv6).\n     ///\n-    /// Unique local addresses are defined in RFC4193 and have the form fc00::/7\n+    /// Unique local addresses are defined in RFC4193 and have the form fc00::/7.\n     pub fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n \n-    /// Returns true if the address is unicast and link-local (fe80::/10)\n+    /// Returns true if the address is unicast and link-local (fe80::/10).\n     pub fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n \n     /// Returns true if this is a deprecated unicast site-local address (IPv6\n-    /// fec0::/10)\n+    /// fec0::/10).\n     pub fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n     }\n \n-    /// Returns true if the address is a globally routable unicast address\n+    /// Returns true if the address is a globally routable unicast address.\n     ///\n     /// Non-globally-routable unicast addresses include the loopback address,\n     /// the link-local addresses, the deprecated site-local addresses and the"}]}