{"sha": "28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YzRhNTU4NmU5YTZjZWRlYmIzY2UwOGExMWRlZDQ4ZmNkMWZkYzU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-18T20:23:19Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-18T20:24:20Z"}, "message": "Start checking name collisions in modules\n\n(And remove a boatload of duplicate imports from the typestate files.)\n\nName collision checking in local scopes will follow soon.", "tree": {"sha": "4f11188732574d7980217d6936b5c7aba8be499d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f11188732574d7980217d6936b5c7aba8be499d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5", "html_url": "https://github.com/rust-lang/rust/commit/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "843739ee988fc9060d3d55c2b6a8f222c2f728cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/843739ee988fc9060d3d55c2b6a8f222c2f728cb", "html_url": "https://github.com/rust-lang/rust/commit/843739ee988fc9060d3d55c2b6a8f222c2f728cb"}], "stats": {"total": 101, "additions": 75, "deletions": 26}, "files": [{"sha": "51df85bc3e96c3ef250f4edb8c4db40f8085de02", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5", "patch": "@@ -112,6 +112,7 @@ fn resolve_crate(session sess, @ast::crate crate) -> def_map {\n                   sess = sess);\n     map_crate(e, *crate);\n     resolve_imports(*e);\n+    check_for_collisions(e, *crate);\n     resolve_names(e, *crate);\n     ret e.def_map;\n }\n@@ -948,6 +949,80 @@ fn lookup_external(&env e, int cnum, vec[ident] ids, namespace ns)\n     ret none[def];\n }\n \n+// Collision detection\n+\n+fn check_for_collisions(&@env e, &ast::crate c) {\n+    auto lim = lookup_in_mie;\n+    auto msp = mie_span;\n+    for each (@tup(ast::def_num, @indexed_mod) m in e.mod_map.items()) {\n+        for each (@tup(ident, list[mod_index_entry]) name in\n+                  m._1.index.items()) {\n+            check_mod_name(*e, name._0, name._1, lim, msp);\n+        }\n+    }\n+    auto linm = lookup_in_nmie;\n+    auto nmsp = nmie_span;\n+    for each (@tup(ast::def_num, @indexed_nmod) m in e.nmod_map.items()) {\n+        for each (@tup(ident, list[nmod_index_entry]) name in\n+                  m._1.index.items()) {\n+            check_mod_name(*e, name._0, name._1, linm, nmsp);\n+        }\n+    }\n+    /*\n+    auto v = rec(visit_item_pre = bind visit_item(e, _),\n+                 with walk::default_visitor());\n+    walk::walk_crate(v, c);\n+    fn visit_item(@env e, &@ast::item i) {\n+        \n+    }*/\n+}\n+\n+fn check_mod_name[T](&env e, &ident name, &list[T] entries,\n+                     fn(&env, &T, namespace) -> option::t[def] test,\n+                     fn(&T) -> span get_span) {\n+    auto saw_mod = false; auto saw_type = false; auto saw_value = false;\n+\n+    fn dup(&env e, &span sp, &str word, &ident name) {\n+        e.sess.span_err(sp, \"duplicate definition of \" + word + name);\n+    }\n+\n+    while (true) {\n+        alt (entries) {\n+            case (cons[T](?entry, ?rest)) {\n+                if (!option::is_none(test(e, entry, ns_value))) {\n+                    if (saw_value) { dup(e, get_span(entry), \"\", name); }\n+                    else { saw_value = true; }\n+                }\n+                if (!option::is_none(test(e, entry, ns_type))) {\n+                    if (saw_type) { dup(e, get_span(entry), \"type \", name); }\n+                    else { saw_type = true; }\n+                }\n+                if (!option::is_none(test(e, entry, ns_module))) {\n+                    if (saw_mod) { dup(e, get_span(entry), \"module \", name); }\n+                    else { saw_mod = true; }\n+                }\n+                entries = *rest;\n+            }\n+            case (nil[T]) { break; }\n+        }\n+    }\n+}\n+\n+fn mie_span(&mod_index_entry mie) -> span {\n+    alt (mie) {\n+        case (mie_view_item(?item)) { ret item.span; }\n+        case (mie_item(?item)) { ret item.span; }\n+        case (mie_tag_variant(?item, _)) { ret item.span; }\n+    }\n+}\n+\n+fn nmie_span(&nmod_index_entry nmie) -> span {\n+    alt (nmie) {\n+        case (nmie_view_item(?item)) { ret item.span; }\n+        case (nmie_item(?item)) { ret item.span; }\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "adcfc496319b8db41f11c03194a80c9945fac968", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5", "patch": "@@ -47,7 +47,6 @@ import front::ast::method;\n import front::ast::ann;\n import front::ast::ty;\n import front::ast::mutability;\n-import front::ast::item;\n import front::ast::item_const;\n import front::ast::item_mod;\n import front::ast::item_ty;\n@@ -56,19 +55,15 @@ import front::ast::item_native_mod;\n import front::ast::obj_field;\n import front::ast::stmt;\n import front::ast::stmt_;\n-import front::ast::stmt_decl;\n import front::ast::ident;\n import front::ast::def_id;\n-import front::ast::ann;\n import front::ast::expr;\n import front::ast::path;\n import front::ast::crate_directive;\n import front::ast::fn_decl;\n-import front::ast::_obj;\n import front::ast::native_mod;\n import front::ast::variant;\n import front::ast::ty_param;\n-import front::ast::ty;\n import front::ast::proto;\n import front::ast::pat;\n import front::ast::binop;\n@@ -81,18 +76,12 @@ import front::ast::return;\n import front::ast::noreturn;\n import front::ast::_fn;\n import front::ast::_obj;\n-import front::ast::_mod;\n import front::ast::crate;\n import front::ast::item_fn;\n import front::ast::item_obj;\n import front::ast::def_local;\n import front::ast::def_fn;\n-import front::ast::ident;\n-import front::ast::def_id;\n-import front::ast::ann;\n import front::ast::item;\n-import front::ast::item_fn;\n-import front::ast::expr;\n import front::ast::elt;\n import front::ast::field;\n import front::ast::decl;\n@@ -138,12 +127,10 @@ import front::ast::expr_assert;\n import front::ast::expr_cast;\n import front::ast::expr_for;\n import front::ast::expr_for_each;\n-import front::ast::stmt;\n import front::ast::stmt_decl;\n import front::ast::stmt_expr;\n import front::ast::block;\n import front::ast::block_;\n-import front::ast::method;\n \n import middle::fold::span;\n import middle::fold::respan;"}, {"sha": "9352541ae78472d63abdf94bd80cc7ec64d4aba0", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=28c4a5586e9a6cedebb3ce08a11ded48fcd1fdc5", "patch": "@@ -58,19 +58,15 @@ import bitvectors::declare_var;\n import bitvectors::bit_num;\n import bitvectors::gen_poststate;\n \n-import front::ast::_mod;\n import front::ast;\n import front::ast::_fn;\n import front::ast::method;\n-import front::ast::ann;\n import front::ast::ty;\n import front::ast::mutability;\n import front::ast::item;\n import front::ast::obj_field;\n import front::ast::stmt;\n import front::ast::stmt_;\n-import front::ast::stmt_decl;\n-import front::ast::ident;\n import front::ast::def_id;\n import front::ast::ann;\n import front::ast::expr;\n@@ -81,7 +77,6 @@ import front::ast::_obj;\n import front::ast::native_mod;\n import front::ast::variant;\n import front::ast::ty_param;\n-import front::ast::ty;\n import front::ast::proto;\n import front::ast::pat;\n import front::ast::binop;\n@@ -92,7 +87,6 @@ import front::ast::init_op;\n import front::ast::controlflow;\n import front::ast::return;\n import front::ast::noreturn;\n-import front::ast::_obj;\n import front::ast::_mod;\n import front::ast::crate;\n import front::ast::item_fn;\n@@ -105,11 +99,6 @@ import front::ast::item_const;\n import front::ast::def_local;\n import front::ast::def_fn;\n import front::ast::ident;\n-import front::ast::def_id;\n-import front::ast::ann;\n-import front::ast::item;\n-import front::ast::item_fn;\n-import front::ast::expr;\n import front::ast::elt;\n import front::ast::field;\n import front::ast::decl;\n@@ -155,12 +144,10 @@ import front::ast::expr_assert;\n import front::ast::expr_cast;\n import front::ast::expr_for;\n import front::ast::expr_for_each;\n-import front::ast::stmt;\n import front::ast::stmt_decl;\n import front::ast::stmt_expr;\n import front::ast::block;\n import front::ast::block_;\n-import front::ast::method;\n \n import middle::fold::span;\n import middle::fold::respan;"}]}