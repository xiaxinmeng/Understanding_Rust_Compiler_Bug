{"sha": "6f2c7025b8192d68a082b153b9574d5df452ca8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMmM3MDI1YjgxOTJkNjhhMDgyYjE1M2I5NTc0ZDVkZjQ1MmNhOGE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-12-11T04:27:33Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-10T08:08:24Z"}, "message": "Remove StaticKind::Promoted", "tree": {"sha": "65456c7440d9dd2fdf1a0a886496af51aaf8bb75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65456c7440d9dd2fdf1a0a886496af51aaf8bb75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f2c7025b8192d68a082b153b9574d5df452ca8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2c7025b8192d68a082b153b9574d5df452ca8a", "html_url": "https://github.com/rust-lang/rust/commit/6f2c7025b8192d68a082b153b9574d5df452ca8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f2c7025b8192d68a082b153b9574d5df452ca8a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227", "html_url": "https://github.com/rust-lang/rust/commit/6aa4b5a7603efc7a6f323e1be9be67ecf8f5f227"}], "stats": {"total": 230, "additions": 33, "deletions": 197}, "files": [{"sha": "2a33e91a69f086454ffaa3bd3fc9fc712cb44021", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -1687,7 +1687,7 @@ pub enum PlaceBase<'tcx> {\n )]\n pub struct Static<'tcx> {\n     pub ty: Ty<'tcx>,\n-    pub kind: StaticKind<'tcx>,\n+    pub kind: StaticKind,\n     /// The `DefId` of the item this static was declared in. For promoted values, usually, this is\n     /// the same as the `DefId` of the `mir::Body` containing the `Place` this promoted appears in.\n     /// However, after inlining, that might no longer be the case as inlined `Place`s are copied\n@@ -1707,11 +1707,7 @@ pub struct Static<'tcx> {\n     RustcEncodable,\n     RustcDecodable\n )]\n-pub enum StaticKind<'tcx> {\n-    /// Promoted references consist of an id (`Promoted`) and the substs necessary to monomorphize\n-    /// it. Usually, these substs are just the identity substs for the item. However, the inliner\n-    /// will adjust these substs when it inlines a function based on the substs at the callsite.\n-    Promoted(Promoted, SubstsRef<'tcx>),\n+pub enum StaticKind {\n     Static,\n }\n \n@@ -1949,11 +1945,6 @@ impl Debug for PlaceBase<'_> {\n             PlaceBase::Static(box self::Static { ty, kind: StaticKind::Static, def_id }) => {\n                 write!(fmt, \"({}: {:?})\", ty::tls::with(|tcx| tcx.def_path_str(def_id)), ty)\n             }\n-            PlaceBase::Static(box self::Static {\n-                ty,\n-                kind: StaticKind::Promoted(promoted, _),\n-                def_id: _,\n-            }) => write!(fmt, \"({:?}: {:?})\", promoted, ty),\n         }\n     }\n }\n@@ -3069,21 +3060,15 @@ impl<'tcx> TypeFoldable<'tcx> for Static<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for StaticKind<'tcx> {\n-    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+impl<'tcx> TypeFoldable<'tcx> for StaticKind {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> Self {\n         match self {\n-            StaticKind::Promoted(promoted, substs) => {\n-                StaticKind::Promoted(promoted.fold_with(folder), substs.fold_with(folder))\n-            }\n             StaticKind::Static => StaticKind::Static,\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n         match self {\n-            StaticKind::Promoted(promoted, substs) => {\n-                promoted.visit_with(visitor) || substs.visit_with(visitor)\n-            }\n             StaticKind::Static => false,\n         }\n     }"}, {"sha": "ecb3eb05f116300fe05f85258284555eb49cb457", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -10,8 +10,8 @@ use crate::traits::*;\n use crate::MemFlags;\n \n use rustc::middle::lang_items;\n+use rustc::mir;\n use rustc::mir::interpret::PanicInfo;\n-use rustc::mir::{self, PlaceBase, Static, StaticKind};\n use rustc::ty::layout::{self, FnAbiExt, HasTyCtxt, LayoutOf};\n use rustc::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_index::vec::Idx;\n@@ -613,35 +613,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             // The shuffle array argument is usually not an explicit constant,\n                             // but specified directly in the code. This means it gets promoted\n                             // and we can then extract the value by evaluating the promoted.\n-                            mir::Operand::Copy(place) | mir::Operand::Move(place) => {\n-                                if let mir::PlaceRef {\n-                                    base:\n-                                        &PlaceBase::Static(box Static {\n-                                            kind: StaticKind::Promoted(promoted, substs),\n-                                            ty,\n-                                            def_id,\n-                                        }),\n-                                    projection: &[],\n-                                } = place.as_ref()\n-                                {\n-                                    let c = bx.tcx().const_eval_promoted(\n-                                        Instance::new(def_id, self.monomorphize(&substs)),\n-                                        promoted,\n-                                    );\n-                                    let (llval, ty) = self.simd_shuffle_indices(\n-                                        &bx,\n-                                        terminator.source_info.span,\n-                                        ty,\n-                                        c,\n-                                    );\n-                                    return OperandRef {\n-                                        val: Immediate(llval),\n-                                        layout: bx.layout_of(ty),\n-                                    };\n-                                } else {\n-                                    span_bug!(span, \"shuffle indices must be constant\");\n-                                }\n-                            }\n+                            mir::Operand::Copy(_place) | mir::Operand::Move(_place) => {}\n \n                             mir::Operand::Constant(constant) => {\n                                 let c = self.eval_mir_constant(constant);"}, {"sha": "639a98107cd56d15b603c5b6e1f028b9397fe3c0", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -9,7 +9,7 @@ use crate::MemFlags;\n use rustc::mir;\n use rustc::mir::tcx::PlaceTy;\n use rustc::ty::layout::{self, Align, HasTyCtxt, LayoutOf, TyLayout, VariantIdx};\n-use rustc::ty::{self, Instance, Ty};\n+use rustc::ty::{self, Ty};\n \n #[derive(Copy, Clone, Debug)]\n pub struct PlaceRef<'tcx, V> {\n@@ -437,39 +437,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 }\n             }\n-            mir::PlaceRef {\n-                base:\n-                    mir::PlaceBase::Static(box mir::Static {\n-                        ty,\n-                        kind: mir::StaticKind::Promoted(promoted, substs),\n-                        def_id,\n-                    }),\n-                projection: [],\n-            } => {\n-                let instance = Instance::new(*def_id, self.monomorphize(substs));\n-                let layout = cx.layout_of(self.monomorphize(&ty));\n-                match bx.tcx().const_eval_promoted(instance, *promoted) {\n-                    Ok(val) => match val.val {\n-                        ty::ConstKind::Value(mir::interpret::ConstValue::ByRef {\n-                            alloc,\n-                            offset,\n-                        }) => bx.cx().from_const_alloc(layout, alloc, offset),\n-                        _ => bug!(\"promoteds should have an allocation: {:?}\", val),\n-                    },\n-                    Err(_) => {\n-                        // This is unreachable as long as runtime\n-                        // and compile-time agree perfectly.\n-                        // With floats that won't always be true,\n-                        // so we generate a (safe) abort.\n-                        bx.abort();\n-                        // We still have to return a place but it doesn't matter,\n-                        // this code is unreachable.\n-                        let llval =\n-                            bx.cx().const_undef(bx.cx().type_ptr_to(bx.cx().backend_type(layout)));\n-                        PlaceRef::new_sized(llval, layout)\n-                    }\n-                }\n-            }\n             mir::PlaceRef {\n                 base:\n                     mir::PlaceBase::Static(box mir::Static {"}, {"sha": "d1c6ee8af58302e44fdc356d78a890c2b645fd8f", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -172,12 +172,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             PlaceRef { base: PlaceBase::Local(local), projection: [] } => {\n                 self.append_local_to_string(*local, buf)?;\n             }\n-            PlaceRef {\n-                base: PlaceBase::Static(box Static { kind: StaticKind::Promoted(..), .. }),\n-                projection: [],\n-            } => {\n-                buf.push_str(\"promoted\");\n-            }\n             PlaceRef {\n                 base: PlaceBase::Static(box Static { kind: StaticKind::Static, def_id, .. }),\n                 projection: [],"}, {"sha": "238a59490906c34b543f9ecdb3e7622203590ea4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -2196,16 +2196,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     }),\n                 }\n             }\n-            // The rules for promotion are made by `qualify_consts`, there wouldn't even be a\n-            // `Place::Promoted` if the promotion weren't 100% legal. So we just forward this\n-            PlaceRef {\n-                base: PlaceBase::Static(box Static { kind: StaticKind::Promoted(..), .. }),\n-                projection: [],\n-            } => Ok(RootPlace {\n-                place_base: place.base,\n-                place_projection: place.projection,\n-                is_local_mutation_allowed,\n-            }),\n             PlaceRef {\n                 base: PlaceBase::Static(box Static { kind: StaticKind::Static, def_id, .. }),\n                 projection: [],"}, {"sha": "422bcd2b75c2581fc437c49e3d7da7611980dd10", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -310,7 +310,7 @@ fn place_components_conflict<'tcx>(\n // between `elem1` and `elem2`.\n fn place_base_conflict<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n+    _param_env: ty::ParamEnv<'tcx>,\n     elem1: &PlaceBase<'tcx>,\n     elem2: &PlaceBase<'tcx>,\n ) -> Overlap {\n@@ -341,28 +341,6 @@ fn place_base_conflict<'tcx>(\n                         Overlap::EqualOrDisjoint\n                     }\n                 }\n-                (StaticKind::Promoted(promoted_1, _), StaticKind::Promoted(promoted_2, _)) => {\n-                    if promoted_1 == promoted_2 {\n-                        if let ty::Array(_, len) = s1.ty.kind {\n-                            if let Some(0) = len.try_eval_usize(tcx, param_env) {\n-                                // Ignore conflicts with promoted [T; 0].\n-                                debug!(\"place_element_conflict: IGNORE-LEN-0-PROMOTED\");\n-                                return Overlap::Disjoint;\n-                            }\n-                        }\n-                        // the same promoted - base case, equal\n-                        debug!(\"place_element_conflict: DISJOINT-OR-EQ-PROMOTED\");\n-                        Overlap::EqualOrDisjoint\n-                    } else {\n-                        // different promoteds - base case, disjoint\n-                        debug!(\"place_element_conflict: DISJOINT-PROMOTED\");\n-                        Overlap::Disjoint\n-                    }\n-                }\n-                (_, _) => {\n-                    debug!(\"place_element_conflict: DISJOINT-STATIC-PROMOTED\");\n-                    Overlap::Disjoint\n-                }\n             }\n         }\n         (PlaceBase::Local(_), PlaceBase::Static(_))"}, {"sha": "f66af1f04a3606be124e2af3b09a8391134078e6", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 20, "deletions": 39, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -488,15 +488,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                         };\n                     };\n                 match kind {\n-                    StaticKind::Promoted(promoted, _) => {\n-                        if !self.errors_reported {\n-                            let promoted_body_cache = self.promoted[*promoted];\n-                            self.sanitize_promoted(promoted_body_cache, location);\n-\n-                            let promoted_ty = promoted_body_cache.return_ty();\n-                            check_err(self, place, promoted_ty, san_ty);\n-                        }\n-                    }\n                     StaticKind::Static => {\n                         let ty = self.tcx().type_of(*def_id);\n                         let ty = self.cx.normalize(ty, location);\n@@ -510,38 +501,28 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         if place.projection.is_empty() {\n             if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n-                let is_promoted = match place.as_ref() {\n-                    PlaceRef {\n-                        base: &PlaceBase::Static(box Static { kind: StaticKind::Promoted(..), .. }),\n-                        projection: &[],\n-                    } => true,\n-                    _ => false,\n+                let tcx = self.tcx();\n+                let trait_ref = ty::TraitRef {\n+                    def_id: tcx.lang_items().copy_trait().unwrap(),\n+                    substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n                 };\n \n-                if !is_promoted {\n-                    let tcx = self.tcx();\n-                    let trait_ref = ty::TraitRef {\n-                        def_id: tcx.lang_items().copy_trait().unwrap(),\n-                        substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n-                    };\n-\n-                    // To have a `Copy` operand, the type `T` of the\n-                    // value must be `Copy`. Note that we prove that `T: Copy`,\n-                    // rather than using the `is_copy_modulo_regions`\n-                    // test. This is important because\n-                    // `is_copy_modulo_regions` ignores the resulting region\n-                    // obligations and assumes they pass. This can result in\n-                    // bounds from `Copy` impls being unsoundly ignored (e.g.,\n-                    // #29149). Note that we decide to use `Copy` before knowing\n-                    // whether the bounds fully apply: in effect, the rule is\n-                    // that if a value of some type could implement `Copy`, then\n-                    // it must.\n-                    self.cx.prove_trait_ref(\n-                        trait_ref,\n-                        location.to_locations(),\n-                        ConstraintCategory::CopyBound,\n-                    );\n-                }\n+                // To have a `Copy` operand, the type `T` of the\n+                // value must be `Copy`. Note that we prove that `T: Copy`,\n+                // rather than using the `is_copy_modulo_regions`\n+                // test. This is important because\n+                // `is_copy_modulo_regions` ignores the resulting region\n+                // obligations and assumes they pass. This can result in\n+                // bounds from `Copy` impls being unsoundly ignored (e.g.,\n+                // #29149). Note that we decide to use `Copy` before knowing\n+                // whether the bounds fully apply: in effect, the rule is\n+                // that if a value of some type could implement `Copy`, then\n+                // it must.\n+                self.cx.prove_trait_ref(\n+                    trait_ref,\n+                    location.to_locations(),\n+                    ConstraintCategory::CopyBound,\n+                );\n             }\n         }\n "}, {"sha": "79411d872a959ab4bd73da7dbca37a9b631d9067", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -15,9 +15,9 @@ use rustc::ty::{self, Ty};\n use rustc_macros::HashStable;\n \n use super::{\n-    AllocId, AllocMap, Allocation, AllocationExtra, GlobalId, ImmTy, Immediate, InterpCx,\n-    InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer, PointerArithmetic,\n-    RawConst, Scalar, ScalarMaybeUndef,\n+    AllocId, AllocMap, Allocation, AllocationExtra, ImmTy, Immediate, InterpCx, InterpResult,\n+    LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer, PointerArithmetic, RawConst, Scalar,\n+    ScalarMaybeUndef,\n };\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -628,19 +628,6 @@ where\n         use rustc::mir::StaticKind;\n \n         Ok(match place_static.kind {\n-            StaticKind::Promoted(promoted, promoted_substs) => {\n-                let substs = self.subst_from_frame_and_normalize_erasing_regions(promoted_substs);\n-                let instance = ty::Instance::new(place_static.def_id, substs);\n-\n-                // Even after getting `substs` from the frame, this instance may still be\n-                // polymorphic because `ConstProp` will try to promote polymorphic MIR.\n-                if instance.needs_subst() {\n-                    throw_inval!(TooGeneric);\n-                }\n-\n-                self.const_eval_raw(GlobalId { instance, promoted: Some(promoted) })?\n-            }\n-\n             StaticKind::Static => {\n                 let ty = place_static.ty;\n                 assert!(!ty.needs_subst());"}, {"sha": "84b641a763a024cd91661f47051253091a93f053", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -186,7 +186,7 @@ use rustc::mir::{self, Location, PlaceBase, Static, StaticKind};\n use rustc::session::config::EntryFnType;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n-use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n+use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n@@ -656,21 +656,6 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(MonoItem::Static(*def_id));\n                 }\n             }\n-            PlaceBase::Static(box Static {\n-                kind: StaticKind::Promoted(promoted, substs),\n-                def_id,\n-                ..\n-            }) => {\n-                let instance = Instance::new(*def_id, substs.subst(self.tcx, self.param_substs));\n-                match self.tcx.const_eval_promoted(instance, *promoted) {\n-                    Ok(val) => collect_const(self.tcx, val, substs, self.output),\n-                    Err(ErrorHandled::Reported) => {}\n-                    Err(ErrorHandled::TooGeneric) => {\n-                        let span = self.tcx.promoted_mir(*def_id)[*promoted].span;\n-                        span_bug!(span, \"collection encountered polymorphic constant\")\n-                    }\n-                }\n-            }\n             PlaceBase::Local(_) => {\n                 // Locals have no relevance for collector.\n             }"}, {"sha": "88fce075d7c02f76a22cb654945031c809b5d8e4", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2c7025b8192d68a082b153b9574d5df452ca8a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=6f2c7025b8192d68a082b153b9574d5df452ca8a", "patch": "@@ -194,9 +194,6 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             PlaceBase::Local(..) => {\n                 // Locals are safe.\n             }\n-            PlaceBase::Static(box Static { kind: StaticKind::Promoted(_, _), .. }) => {\n-                bug!(\"unsafety checking should happen before promotion\");\n-            }\n             PlaceBase::Static(box Static { kind: StaticKind::Static, .. }) => {\n                 bug!(\"StaticKind::Static should not exist\");\n             }"}]}