{"sha": "d312b34feb70ebd45cecceb325454101e7bad985", "node_id": "C_kwDOAAsO6NoAKGQzMTJiMzRmZWI3MGViZDQ1Y2VjY2ViMzI1NDU0MTAxZTdiYWQ5ODU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-05T15:49:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-05T15:49:55Z"}, "message": "Auto merge of #2193 - RalfJung:strict, r=RalfJung\n\ndo not use int2ptr casts in strict provenance tests", "tree": {"sha": "f5eb18031cb67fdbcc928719ef609526a462c83b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5eb18031cb67fdbcc928719ef609526a462c83b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d312b34feb70ebd45cecceb325454101e7bad985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d312b34feb70ebd45cecceb325454101e7bad985", "html_url": "https://github.com/rust-lang/rust/commit/d312b34feb70ebd45cecceb325454101e7bad985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d312b34feb70ebd45cecceb325454101e7bad985/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "html_url": "https://github.com/rust-lang/rust/commit/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b"}, {"sha": "4a852126b979d6a04f5ce2a0b132dcc88002cea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a852126b979d6a04f5ce2a0b132dcc88002cea1", "html_url": "https://github.com/rust-lang/rust/commit/4a852126b979d6a04f5ce2a0b132dcc88002cea1"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "4447575405bb6474648b94bc0c18430a6d05a1b6", "filename": "tests/fail/provenance/ptr_invalid_offset.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d312b34feb70ebd45cecceb325454101e7bad985/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d312b34feb70ebd45cecceb325454101e7bad985/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs?ref=d312b34feb70ebd45cecceb325454101e7bad985", "patch": "@@ -1,9 +1,11 @@\n // compile-flags: -Zmiri-strict-provenance\n // error-pattern: not a valid pointer\n+#![feature(strict_provenance)]\n \n fn main() {\n     let x = 22;\n     let ptr = &x as *const _ as *const u8;\n-    let roundtrip = ptr as usize as *const u8;\n+    let roundtrip = std::ptr::invalid::<u8>(ptr as usize);\n+    // Not even offsetting this is allowed.\n     let _ = unsafe { roundtrip.offset(1) };\n }", "previous_filename": "tests/fail/provenance/strict-provenance-offset.rs"}, {"sha": "661fabf29afbfaa7abcb07e5c140888f336eb243", "filename": "tests/fail/provenance/ptr_invalid_offset.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d312b34feb70ebd45cecceb325454101e7bad985/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d312b34feb70ebd45cecceb325454101e7bad985/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr?ref=d312b34feb70ebd45cecceb325454101e7bad985", "patch": "@@ -8,8 +8,8 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n    = note: inside `std::ptr::const_ptr::<impl *const u8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n-note: inside `main` at $DIR/strict-provenance-offset.rs:LL:CC\n-  --> $DIR/strict-provenance-offset.rs:LL:CC\n+note: inside `main` at $DIR/ptr_invalid_offset.rs:LL:CC\n+  --> $DIR/ptr_invalid_offset.rs:LL:CC\n    |\n LL |     let _ = unsafe { roundtrip.offset(1) };\n    |                      ^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/fail/provenance/strict-provenance-offset.stderr"}, {"sha": "6cdfbb7841ae03a7055b710a28b767f2b7974e1f", "filename": "tests/pass/slices.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d312b34feb70ebd45cecceb325454101e7bad985/tests%2Fpass%2Fslices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d312b34feb70ebd45cecceb325454101e7bad985/tests%2Fpass%2Fslices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fslices.rs?ref=d312b34feb70ebd45cecceb325454101e7bad985", "patch": "@@ -3,8 +3,10 @@\n #![feature(slice_as_chunks)]\n #![feature(slice_partition_dedup)]\n #![feature(layout_for_ptr)]\n+#![feature(strict_provenance)]\n \n use std::slice;\n+use std::ptr;\n \n fn slice_of_zst() {\n     fn foo<T>(v: &[T]) -> Option<&[T]> {\n@@ -25,7 +27,7 @@ fn slice_of_zst() {\n \n     // In a slice of zero-size elements the pointer is meaningless.\n     // Ensure iteration still works even if the pointer is at the end of the address space.\n-    let slice: &[()] = unsafe { slice::from_raw_parts(-5isize as *const (), 10) };\n+    let slice: &[()] = unsafe { slice::from_raw_parts(ptr::invalid(-5isize as usize), 10) };\n     assert_eq!(slice.len(), 10);\n     assert_eq!(slice.iter().count(), 10);\n \n@@ -38,7 +40,7 @@ fn slice_of_zst() {\n     assert!(foo(slice).is_some());\n \n     // Test mutable iterators as well\n-    let slice: &mut [()] = unsafe { slice::from_raw_parts_mut(-5isize as *mut (), 10) };\n+    let slice: &mut [()] = unsafe { slice::from_raw_parts_mut(ptr::invalid_mut(-5isize as usize), 10) };\n     assert_eq!(slice.len(), 10);\n     assert_eq!(slice.iter_mut().count(), 10);\n \n@@ -254,7 +256,7 @@ fn test_for_invalidated_pointers() {\n fn large_raw_slice() {\n     let size = isize::MAX as usize;\n     // Creating a raw slice of size isize::MAX and asking for its size is okay.\n-    let s = std::ptr::slice_from_raw_parts(1usize as *const u8, size);\n+    let s = std::ptr::slice_from_raw_parts(ptr::invalid::<u8>(1), size);\n     assert_eq!(size, unsafe { std::mem::size_of_val_raw(s) });\n }\n "}]}