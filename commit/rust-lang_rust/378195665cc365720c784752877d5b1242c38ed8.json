{"sha": "378195665cc365720c784752877d5b1242c38ed8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ODE5NTY2NWNjMzY1NzIwYzc4NDc1Mjg3N2Q1YjEyNDJjMzhlZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-08T22:57:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-08T22:57:02Z"}, "message": "Auto merge of #36173 - petrochenkov:unstat, r=nikomatsakis\n\nIssue deprecation warnings for safe accesses to extern statics\n\nFixes https://github.com/rust-lang/rust/issues/35112\ncc https://github.com/rust-lang/rust/issues/36247", "tree": {"sha": "00d8d2a2281a3beb2ed8cbaad6f4a5baf877a15e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00d8d2a2281a3beb2ed8cbaad6f4a5baf877a15e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/378195665cc365720c784752877d5b1242c38ed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/378195665cc365720c784752877d5b1242c38ed8", "html_url": "https://github.com/rust-lang/rust/commit/378195665cc365720c784752877d5b1242c38ed8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/378195665cc365720c784752877d5b1242c38ed8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d", "html_url": "https://github.com/rust-lang/rust/commit/ea45edf0ee39fd7f25e0ba7258023c81b53b3a0d"}, {"sha": "aadbcffb7c59718834c63c20ab7ce6276aef430c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aadbcffb7c59718834c63c20ab7ce6276aef430c", "html_url": "https://github.com/rust-lang/rust/commit/aadbcffb7c59718834c63c20ab7ce6276aef430c"}], "stats": {"total": 139, "additions": 123, "deletions": 16}, "files": [{"sha": "8709c3f4b7b10d10bf67df1d65133250ccb589fb", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -471,7 +471,7 @@ extern {\n \n fn main() {\n     println!(\"You have readline version {} installed.\",\n-             rl_readline_version as i32);\n+             unsafe { rl_readline_version as i32 });\n }\n ```\n "}, {"sha": "5896421493008cefb36ca632a37a94d33391a22f", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -232,13 +232,13 @@ extern \"C\" {\n // Again, I'm not entirely sure what this is describing, it just seems to work.\n #[cfg_attr(not(test), lang = \"msvc_try_filter\")]\n static mut TYPE_DESCRIPTOR1: _TypeDescriptor = _TypeDescriptor {\n-    pVFTable: &TYPE_INFO_VTABLE as *const _ as *const _,\n+    pVFTable: unsafe { &TYPE_INFO_VTABLE } as *const _ as *const _,\n     spare: 0 as *mut _,\n     name: imp::NAME1,\n };\n \n static mut TYPE_DESCRIPTOR2: _TypeDescriptor = _TypeDescriptor {\n-    pVFTable: &TYPE_INFO_VTABLE as *const _ as *const _,\n+    pVFTable: unsafe { &TYPE_INFO_VTABLE } as *const _ as *const _,\n     spare: 0 as *mut _,\n     name: imp::NAME2,\n };"}, {"sha": "fa77c911b4651a631168acd459ca59a6ca22eb72", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -192,6 +192,12 @@ declare_lint! {\n     \"lifetimes or labels named `'_` were erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub SAFE_EXTERN_STATICS,\n+    Warn,\n+    \"safe access to extern statics was erroneously allowed\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -228,7 +234,8 @@ impl LintPass for HardwiredLints {\n             RENAMED_AND_REMOVED_LINTS,\n             SUPER_OR_SELF_IN_GLOBAL_PATH,\n             HR_LIFETIME_IN_ASSOC_TYPE,\n-            LIFETIME_UNDERSCORE\n+            LIFETIME_UNDERSCORE,\n+            SAFE_EXTERN_STATICS\n         )\n     }\n }"}, {"sha": "082db569e18c6a3841abd39d6c097ac342308e04", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -15,6 +15,7 @@ use self::RootUnsafeContext::*;\n use dep_graph::DepNode;\n use ty::{self, Ty, TyCtxt};\n use ty::MethodCall;\n+use lint;\n \n use syntax::ast;\n use syntax_pos::Span;\n@@ -57,16 +58,25 @@ struct EffectCheckVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n-    fn require_unsafe(&mut self, span: Span, description: &str) {\n+    fn require_unsafe_ext(&mut self, node_id: ast::NodeId, span: Span,\n+                          description: &str, is_lint: bool) {\n         if self.unsafe_context.push_unsafe_count > 0 { return; }\n         match self.unsafe_context.root {\n             SafeContext => {\n-                // Report an error.\n-                struct_span_err!(\n-                    self.tcx.sess, span, E0133,\n-                    \"{} requires unsafe function or block\", description)\n-                    .span_label(span, &description)\n-                    .emit();\n+                if is_lint {\n+                    self.tcx.sess.add_lint(lint::builtin::SAFE_EXTERN_STATICS,\n+                                           node_id,\n+                                           span,\n+                                           format!(\"{} requires unsafe function or \\\n+                                                    block (error E0133)\", description));\n+                } else {\n+                    // Report an error.\n+                    struct_span_err!(\n+                        self.tcx.sess, span, E0133,\n+                        \"{} requires unsafe function or block\", description)\n+                        .span_label(span, &description)\n+                        .emit();\n+                }\n             }\n             UnsafeBlock(block_id) => {\n                 // OK, but record this.\n@@ -76,6 +86,10 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n             UnsafeFn => {}\n         }\n     }\n+\n+    fn require_unsafe(&mut self, span: Span, description: &str) {\n+        self.require_unsafe_ext(ast::DUMMY_NODE_ID, span, description, false)\n+    }\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n@@ -173,8 +187,16 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 self.require_unsafe(expr.span, \"use of inline assembly\");\n             }\n             hir::ExprPath(..) => {\n-                if let Def::Static(_, true) = self.tcx.expect_def(expr.id) {\n-                    self.require_unsafe(expr.span, \"use of mutable static\");\n+                if let Def::Static(def_id, mutbl) = self.tcx.expect_def(expr.id) {\n+                    if mutbl {\n+                        self.require_unsafe(expr.span, \"use of mutable static\");\n+                    } else if match self.tcx.map.get_if_local(def_id) {\n+                        Some(hir::map::NodeForeignItem(..)) => true,\n+                        Some(..) => false,\n+                        None => self.tcx.sess.cstore.is_foreign_item(def_id),\n+                    } {\n+                        self.require_unsafe_ext(expr.id, expr.span, \"use of extern static\", true);\n+                    }\n                 }\n             }\n             hir::ExprField(ref base_expr, field) => {"}, {"sha": "bc2979c806f65abb619ddc63cfcb4100ddf8d3d1", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -201,6 +201,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LIFETIME_UNDERSCORE),\n             reference: \"RFC 1177 <https://github.com/rust-lang/rfcs/pull/1177>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(SAFE_EXTERN_STATICS),\n+            reference: \"issue 36247 <https://github.com/rust-lang/rust/issues/35112>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "07f70b177b3b57a57f2111d5b7d0f7e0edb30756", "filename": "src/test/compile-fail/auxiliary/extern-statics.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fextern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fextern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fextern-statics.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    pub static XA: u8;\n+    pub static mut XB: u8;\n+}"}, {"sha": "afae4a451d6991b7a39a3fe04fde7cab4edd7aeb", "filename": "src/test/compile-fail/linkage2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Flinkage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Flinkage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage2.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -16,5 +16,5 @@ extern {\n }\n \n fn main() {\n-    println!(\"{}\", foo);\n+    println!(\"{}\", unsafe { foo });\n }"}, {"sha": "c222989ed66779d25ce48def5984bcd9a3a6c3ab", "filename": "src/test/compile-fail/linkage3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Flinkage3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Flinkage3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage3.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -16,5 +16,5 @@ extern {\n }\n \n fn main() {\n-    println!(\"{:?}\", foo);\n+    println!(\"{:?}\", unsafe { foo });\n }"}, {"sha": "b5f3b4535df92397890acf17209c3b94fb5cd50b", "filename": "src/test/compile-fail/safe-extern-statics-mut.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics-mut.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:extern-statics.rs\n+\n+#![allow(unused)]\n+#![deny(safe_extern_statics)]\n+\n+extern crate extern_statics;\n+use extern_statics::*;\n+\n+extern {\n+    static mut B: u8;\n+}\n+\n+fn main() {\n+    let b = B; //~ ERROR use of mutable static requires unsafe function or block\n+    let rb = &B; //~ ERROR use of mutable static requires unsafe function or block\n+    let xb = XB; //~ ERROR use of mutable static requires unsafe function or block\n+    let xrb = &XB; //~ ERROR use of mutable static requires unsafe function or block\n+}"}, {"sha": "7e96897ee882b542529271c9769476217644a2c6", "filename": "src/test/compile-fail/safe-extern-statics.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsafe-extern-statics.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:extern-statics.rs\n+\n+#![allow(unused)]\n+#![deny(safe_extern_statics)]\n+\n+extern crate extern_statics;\n+use extern_statics::*;\n+\n+extern {\n+    static A: u8;\n+}\n+\n+fn main() {\n+    let a = A; //~ ERROR use of extern static requires unsafe function or block\n+               //~^ WARN this was previously accepted by the compiler\n+    let ra = &A; //~ ERROR use of extern static requires unsafe function or block\n+                 //~^ WARN this was previously accepted by the compiler\n+    let xa = XA; //~ ERROR use of extern static requires unsafe function or block\n+                 //~^ WARN this was previously accepted by the compiler\n+    let xra = &XA; //~ ERROR use of extern static requires unsafe function or block\n+                   //~^ WARN this was previously accepted by the compiler\n+}"}, {"sha": "8e718f328ff9146b73798729068e7c99ce659044", "filename": "src/test/run-pass/check-static-recursion-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378195665cc365720c784752877d5b1242c38ed8/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs?ref=378195665cc365720c784752877d5b1242c38ed8", "patch": "@@ -27,6 +27,6 @@ extern \"C\" {\n     static test_static: c_int;\n }\n \n-static B: &'static c_int = &test_static;\n+static B: &'static c_int = unsafe { &test_static };\n \n pub fn main() {}"}]}