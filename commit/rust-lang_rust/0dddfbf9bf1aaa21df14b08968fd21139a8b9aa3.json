{"sha": "0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZGRmYmY5YmYxYWFhMjFkZjE0YjA4OTY4ZmQyMTEzOWE4YjlhYTM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-08T23:57:44Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-26T16:33:38Z"}, "message": "Use iter::zip in src/tools/clippy/", "tree": {"sha": "593fab79266f9037065cf329279c04589b62fd67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/593fab79266f9037065cf329279c04589b62fd67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "html_url": "https://github.com/rust-lang/rust/commit/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "html_url": "https://github.com/rust-lang/rust/commit/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "73f71d88b05254a5d9ed0e6a4b6f88e767974b8f", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::{\n     ty::{self, FloatTy, IntTy, PolyFnSig, Ty},\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of unconstrained numeric literals which may cause default numeric fallback in type\n@@ -107,7 +108,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n         match &expr.kind {\n             ExprKind::Call(func, args) => {\n                 if let Some(fn_sig) = fn_sig_opt(self.cx, func.hir_id) {\n-                    for (expr, bound) in args.iter().zip(fn_sig.skip_binder().inputs().iter()) {\n+                    for (expr, bound) in iter::zip(*args, fn_sig.skip_binder().inputs()) {\n                         // Push found arg type, then visit arg.\n                         self.ty_bounds.push(TyBound::Ty(bound));\n                         self.visit_expr(expr);\n@@ -120,7 +121,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n             ExprKind::MethodCall(_, _, args, _) => {\n                 if let Some(def_id) = self.cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n                     let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n-                    for (expr, bound) in args.iter().zip(fn_sig.inputs().iter()) {\n+                    for (expr, bound) in iter::zip(*args, fn_sig.inputs()) {\n                         self.ty_bounds.push(TyBound::Ty(bound));\n                         self.visit_expr(expr);\n                         self.ty_bounds.pop();"}, {"sha": "a99ed7656bfb3619d10f1e12b80c2b282329b409", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -4,6 +4,7 @@\n #![feature(box_syntax)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n #![feature(once_cell)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(rustc_private)]"}, {"sha": "5447051926060dca553be8d6a45462db3b7972d2", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -13,6 +13,7 @@ use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Warns if a long integral or floating-point constant does\n@@ -349,7 +350,7 @@ impl LiteralDigitGrouping {\n \n         let group_sizes: Vec<usize> = num_lit.integer.split('_').map(str::len).collect();\n         if UUID_GROUP_LENS.len() == group_sizes.len() {\n-            UUID_GROUP_LENS.iter().zip(&group_sizes).all(|(&a, &b)| a == b)\n+            iter::zip(&UUID_GROUP_LENS, &group_sizes).all(|(&a, &b)| a == b)\n         } else {\n             false\n         }"}, {"sha": "64ab3b6bfec026df969e46b585182213486833f7", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Symbol};\n-use std::iter::Iterator;\n+use std::iter::{self, Iterator};\n use std::mem;\n \n /// Checks for looping over a range and then indexing a sequence with it.\n@@ -369,7 +369,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             },\n             ExprKind::MethodCall(_, _, args, _) => {\n                 let def_id = self.cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n-                for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n+                for (ty, expr) in iter::zip(self.cx.tcx.fn_sig(def_id).inputs().skip_binder(), args) {\n                     self.prefer_mutable = false;\n                     if let ty::Ref(_, _, mutbl) = *ty.kind() {\n                         if mutbl == Mutability::Mut {"}, {"sha": "2f2dc4cfc6b03eb972d95bbb573c8789897e038d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -29,6 +29,7 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::sym;\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n+use std::iter;\n use std::ops::Bound;\n \n declare_clippy_lint! {\n@@ -1668,7 +1669,7 @@ where\n \n     values.sort();\n \n-    for (a, b) in values.iter().zip(values.iter().skip(1)) {\n+    for (a, b) in iter::zip(&values, &values[1..]) {\n         match (a, b) {\n             (&Kind::Start(_, ra), &Kind::End(_, rb)) => {\n                 if ra.node != rb.node {"}, {"sha": "4d3dff36a2069f34652acd5e7f3e20284bad27d9", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{Adt, Array, RawPtr, Ref, Slice, Tuple, Ty, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for sets/maps with mutable key types.\n@@ -87,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n fn check_sig<'tcx>(cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n     let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n     let fn_sig = cx.tcx.fn_sig(fn_def_id);\n-    for (hir_ty, ty) in decl.inputs.iter().zip(fn_sig.inputs().skip_binder().iter()) {\n+    for (hir_ty, ty) in iter::zip(decl.inputs, fn_sig.inputs().skip_binder()) {\n         check_ty(cx, hir_ty.span, ty);\n     }\n     check_ty(cx, decl.output.span(), cx.tcx.erase_late_bound_regions(fn_sig.output()));"}, {"sha": "05457e80d52c960833eb9c853da293d7532b26cd", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -4,6 +4,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Detects passing a mutable reference to a function that only\n@@ -64,7 +65,7 @@ fn check_arguments<'tcx>(\n     match type_definition.kind() {\n         ty::FnDef(..) | ty::FnPtr(_) => {\n             let parameters = type_definition.fn_sig(cx.tcx).skip_binder().inputs();\n-            for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n+            for (argument, parameter) in iter::zip(arguments, parameters) {\n                 match parameter.kind() {\n                     ty::Ref(_, _, Mutability::Not)\n                     | ty::RawPtr(ty::TypeAndMut {"}, {"sha": "e151f85a39137883b3f16e596b35086e25f89c08", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -1,4 +1,5 @@\n use std::cmp;\n+use std::iter;\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::is_self_ty;\n@@ -122,7 +123,7 @@ impl<'tcx> PassByRefOrValue {\n \n         let fn_body = cx.enclosing_body.map(|id| cx.tcx.hir().body(id));\n \n-        for (index, (input, &ty)) in decl.inputs.iter().zip(fn_sig.inputs()).enumerate() {\n+        for (index, (input, &ty)) in iter::zip(decl.inputs, fn_sig.inputs()).enumerate() {\n             // All spans generated from a proc-macro invocation are the same...\n             match span {\n                 Some(s) if s == input.span => return,"}, {"sha": "c0c2ab67e382e0194906e80c4955867a84636b7c", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{AdtDef, FieldDef, Ty, TyKind, VariantDef};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for patterns that aren't exact representations of the types\n@@ -134,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n         hir_id: HirId,\n     ) {\n         if let Some(fn_sig) = cx.typeck_results().liberated_fn_sigs().get(hir_id) {\n-            for (param, ty) in body.params.iter().zip(fn_sig.inputs().iter()) {\n+            for (param, ty) in iter::zip(body.params, fn_sig.inputs()) {\n                 apply_lint(cx, &param.pat, ty, DerefPossible::Impossible);\n             }\n         }"}, {"sha": "6becff9662a76ff79b74e191baf506b7788ee73b", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::ty::{self, subst::GenericArgKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n use rustc_span::symbol::Ident;\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -79,17 +80,15 @@ fn mirrored_exprs(\n             mirrored_exprs(cx, left_expr, a_ident, right_expr, b_ident)\n         },\n         // Two arrays with mirrored contents\n-        (ExprKind::Array(left_exprs), ExprKind::Array(right_exprs)) => left_exprs\n-            .iter()\n-            .zip(right_exprs.iter())\n-            .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident)),\n+        (ExprKind::Array(left_exprs), ExprKind::Array(right_exprs)) => {\n+            iter::zip(*left_exprs, *right_exprs)\n+                .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident))\n+        }\n         // The two exprs are function calls.\n         // Check to see that the function itself and its arguments are mirrored\n         (ExprKind::Call(left_expr, left_args), ExprKind::Call(right_expr, right_args)) => {\n             mirrored_exprs(cx, left_expr, a_ident, right_expr, b_ident)\n-                && left_args\n-                    .iter()\n-                    .zip(right_args.iter())\n+                && iter::zip(*left_args, *right_args)\n                     .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident))\n         },\n         // The two exprs are method calls.\n@@ -100,16 +99,14 @@ fn mirrored_exprs(\n             ExprKind::MethodCall(right_segment, _, right_args, _),\n         ) => {\n             left_segment.ident == right_segment.ident\n-                && left_args\n-                    .iter()\n-                    .zip(right_args.iter())\n+                && iter::zip(*left_args, *right_args)\n                     .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident))\n-        },\n+        }\n         // Two tuples with mirrored contents\n-        (ExprKind::Tup(left_exprs), ExprKind::Tup(right_exprs)) => left_exprs\n-            .iter()\n-            .zip(right_exprs.iter())\n-            .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident)),\n+        (ExprKind::Tup(left_exprs), ExprKind::Tup(right_exprs)) => {\n+            iter::zip(*left_exprs, *right_exprs)\n+                .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident))\n+        }\n         // Two binary ops, which are the same operation and which have mirrored arguments\n         (ExprKind::Binary(left_op, left_left, left_right), ExprKind::Binary(right_op, right_left, right_right)) => {\n             left_op.node == right_op.node\n@@ -146,9 +143,7 @@ fn mirrored_exprs(\n                 },\n             )),\n         ) => {\n-            (left_segments\n-                .iter()\n-                .zip(right_segments.iter())\n+            (iter::zip(*left_segments, *right_segments)\n                 .all(|(left, right)| left.ident == right.ident)\n                 && left_segments\n                     .iter()"}, {"sha": "8af10ebe777ea0ed4c2c9b54df7b6017558a9355", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -15,6 +15,7 @@ use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n+use std::iter;\n \n /// A `LitKind`-like enum to fold constant `Expr`s into.\n #[derive(Debug, Clone)]\n@@ -139,12 +140,12 @@ impl Constant {\n             (&Self::F64(l), &Self::F64(r)) => l.partial_cmp(&r),\n             (&Self::F32(l), &Self::F32(r)) => l.partial_cmp(&r),\n             (&Self::Bool(ref l), &Self::Bool(ref r)) => Some(l.cmp(r)),\n-            (&Self::Tuple(ref l), &Self::Tuple(ref r)) | (&Self::Vec(ref l), &Self::Vec(ref r)) => l\n-                .iter()\n-                .zip(r.iter())\n-                .map(|(li, ri)| Self::partial_cmp(tcx, cmp_type, li, ri))\n-                .find(|r| r.map_or(true, |o| o != Ordering::Equal))\n-                .unwrap_or_else(|| Some(l.len().cmp(&r.len()))),\n+            (&Self::Tuple(ref l), &Self::Tuple(ref r)) | (&Self::Vec(ref l), &Self::Vec(ref r)) => {\n+                iter::zip(l, r)\n+                    .map(|(li, ri)| Self::partial_cmp(tcx, cmp_type, li, ri))\n+                    .find(|r| r.map_or(true, |o| o != Ordering::Equal))\n+                    .unwrap_or_else(|| Some(l.len().cmp(&r.len())))\n+            }\n             (&Self::Repeat(ref lv, ref ls), &Self::Repeat(ref rv, ref rs)) => {\n                 match Self::partial_cmp(tcx, cmp_type, lv, rv) {\n                     Some(Equal) => Some(ls.cmp(rs)),"}, {"sha": "b2655f8d797b1e67aa166d5cdb7d6c0ce873cfd5", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -1,5 +1,6 @@\n #![feature(box_patterns)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]"}, {"sha": "268bc5b320533536ea5fba32dd5d7bcf8c0ce9bf", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=0dddfbf9bf1aaa21df14b08968fd21139a8b9aa3", "patch": "@@ -1,4 +1,5 @@\n use rustc_ast::ast::{Lit, LitFloatType, LitIntType, LitKind};\n+use std::iter;\n \n #[derive(Debug, PartialEq, Copy, Clone)]\n pub enum Radix {\n@@ -192,7 +193,7 @@ impl<'a> NumericLiteral<'a> {\n             }\n         }\n \n-        for (c, i) in digits.zip((0..group_size).cycle()) {\n+        for (c, i) in iter::zip(digits, (0..group_size).cycle()) {\n             if i == 0 {\n                 output.push('_');\n             }"}]}