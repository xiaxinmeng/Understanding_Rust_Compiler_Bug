{"sha": "05cb29e96f718a94d31afd094b1efd7c05be4269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Y2IyOWU5NmY3MThhOTRkMzFhZmQwOTRiMWVmZDdjMDViZTQyNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-08T11:53:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-08T11:53:21Z"}, "message": "Auto merge of #54051 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #53315 (use `NonZeroU32` in `newtype_index!`macro, change syntax)\n - #53932 ([NLL] Remove base_place)\n - #53942 (Rewrite `precompute_borrows_out_of_scope` for fewer hash table lookups.)\n - #53973 (Have rust-lldb look for the rust-enabled lldb)\n - #53981 (Implement initializer() for FileDesc)\n - #53987 (rustbuild: allow configuring llvm version suffix)\n - #53993 (rustc_resolve: don't record uniform_paths canaries as reexports.)\n - #54007 (crates that provide a `panic_handler` are exempt from the `unused_extern_crates` lint)\n - #54040 (update books for next release)\n - #54050 (Update `petgraph` dependency to 0.4.13 to fix build with nightly)", "tree": {"sha": "d94400c78a25cb456fa3cc0a5666061b4f4dec73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d94400c78a25cb456fa3cc0a5666061b4f4dec73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05cb29e96f718a94d31afd094b1efd7c05be4269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05cb29e96f718a94d31afd094b1efd7c05be4269", "html_url": "https://github.com/rust-lang/rust/commit/05cb29e96f718a94d31afd094b1efd7c05be4269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05cb29e96f718a94d31afd094b1efd7c05be4269/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff59ab127ac92885e4273bb73c8ac5a999c327bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff59ab127ac92885e4273bb73c8ac5a999c327bf", "html_url": "https://github.com/rust-lang/rust/commit/ff59ab127ac92885e4273bb73c8ac5a999c327bf"}, {"sha": "51c387931ed8df9b7daece4ad64b48bdd2b8335b", "url": "https://api.github.com/repos/rust-lang/rust/commits/51c387931ed8df9b7daece4ad64b48bdd2b8335b", "html_url": "https://github.com/rust-lang/rust/commit/51c387931ed8df9b7daece4ad64b48bdd2b8335b"}], "stats": {"total": 895, "additions": 553, "deletions": 342}, "files": [{"sha": "087dc418e2dce9a02d13cf941dfbd6cee1dc6536", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -82,6 +82,10 @@\n # passed to prefer linking to shared libraries.\n #link-shared = false\n \n+# When building llvm, this configures what is being appended to the version.\n+# If absent, we let the version as-is.\n+#version-suffix = \"-rust\"\n+\n # On MSVC you can compile LLVM with clang-cl, but the test suite doesn't pass\n # with clang-cl, so this is special in that it only compiles LLVM with clang-cl\n #clang-cl = '/path/to/clang-cl.exe'"}, {"sha": "9828966fa95393023c65c808d96460f6a9e87d81", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -138,7 +138,7 @@ dependencies = [\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"petgraph 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1471,7 +1471,7 @@ dependencies = [\n \n [[package]]\n name = \"petgraph\"\n-version = \"0.4.12\"\n+version = \"0.4.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"fixedbitset 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3243,7 +3243,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fce5d8b5cc33983fc74f78ad552b5522ab41442c4ca91606e4236eb4b5ceefc\"\n \"checksum pest_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab94faafeb93f4c5e3ce81ca0e5a779529a602ad5d09ae6d21996bfb8b6a52bf\"\n-\"checksum petgraph 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8b30dc85588cd02b9b76f5e386535db546d21dc68506cff2abebee0b6445e8e4\"\n+\"checksum petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c3659d1ee90221741f65dd128d9998311b0e40c5d3c23a62445938214abce4f\"\n \"checksum phf 0.7.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d37a244c75a9748e049225155f56dbcb98fe71b192fd25fd23cb914b5ad62f2\"\n \"checksum phf_codegen 0.7.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e4048fe7dd7a06b8127ecd6d3803149126e9b33c7558879846da3a63f734f2b\"\n \"checksum phf_generator 0.7.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05a079dd052e7b674d21cb31cbb6c05efd56a2cd2827db7692e2f1a507ebd998\""}, {"sha": "3e91c2b3e86c8316bf4e9e6a769b1f7e8b2d289c", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -47,7 +47,7 @@ serde_json = \"1.0.2\"\n toml = \"0.4\"\n lazy_static = \"0.2\"\n time = \"0.1\"\n-petgraph = \"0.4.12\"\n+petgraph = \"0.4.13\"\n \n [dev-dependencies]\n pretty_assertions = \"0.5\""}, {"sha": "70b21a1567b0fa8e657db770a04dd6f857df7a65", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -86,6 +86,7 @@ pub struct Config {\n     pub llvm_targets: Option<String>,\n     pub llvm_experimental_targets: String,\n     pub llvm_link_jobs: Option<u32>,\n+    pub llvm_version_suffix: Option<String>,\n \n     pub lld_enabled: bool,\n     pub lldb_enabled: bool,\n@@ -256,6 +257,7 @@ struct Llvm {\n     experimental_targets: Option<String>,\n     link_jobs: Option<u32>,\n     link_shared: Option<bool>,\n+    version_suffix: Option<String>,\n     clang_cl: Option<String>\n }\n \n@@ -516,6 +518,7 @@ impl Config {\n             config.llvm_experimental_targets = llvm.experimental_targets.clone()\n                 .unwrap_or(\"WebAssembly;RISCV\".to_string());\n             config.llvm_link_jobs = llvm.link_jobs;\n+            config.llvm_version_suffix = llvm.version_suffix.clone();\n             config.llvm_clang_cl = llvm.clang_cl.clone();\n         }\n "}, {"sha": "2d94704fda7d600f847f918b6bdc871b0f2d996d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -2056,7 +2056,8 @@ impl Step for Lldb {\n         drop(fs::remove_dir_all(&image));\n \n         // Prepare the image directory\n-        let dst = image.join(\"bin\");\n+        let root = image.join(\"lib/rustlib\").join(&*target);\n+        let dst = root.join(\"bin\");\n         t!(fs::create_dir_all(&dst));\n         for program in &[\"lldb\", \"lldb-argdumper\", \"lldb-mi\", \"lldb-server\"] {\n             let exe = bindir.join(exe(program, &target));\n@@ -2065,7 +2066,7 @@ impl Step for Lldb {\n \n         // The libraries.\n         let libdir = builder.llvm_out(target).join(\"lib\");\n-        let dst = image.join(\"lib\");\n+        let dst = root.join(\"lib\");\n         t!(fs::create_dir_all(&dst));\n         for entry in t!(fs::read_dir(&libdir)) {\n             let entry = entry.unwrap();\n@@ -2093,7 +2094,7 @@ impl Step for Lldb {\n             let entry = t!(entry);\n             if let Ok(name) = entry.file_name().into_string() {\n                 if name.starts_with(\"python\") {\n-                    let dst = image.join(libdir_name)\n+                    let dst = root.join(libdir_name)\n                         .join(entry.file_name());\n                     t!(fs::create_dir_all(&dst));\n                     builder.cp_r(&entry.path(), &dst);"}, {"sha": "828a7d14c04370f8bb841e651a9a7a7a4e4f5643", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -239,6 +239,10 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_NATIVE_BUILD\", builder.llvm_out(builder.config.build).join(\"build\"));\n         }\n \n+        if let Some(ref suffix) = builder.config.llvm_version_suffix {\n+            cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n+        }\n+\n         if let Some(ref python) = builder.config.python {\n             cfg.define(\"PYTHON_EXECUTABLE\", python);\n         }"}, {"sha": "cff0930664b688f1dd22aefb3d16944eb4cdbfd5", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1 +1 @@\n-Subproject commit 16c9dee7666c2b2766fd98d89003e028679d1207\n+Subproject commit cff0930664b688f1dd22aefb3d16944eb4cdbfd5"}, {"sha": "7fd493465b7dd6cf3476f0b834884059bbdd1d93", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1 +1 @@\n-Subproject commit ae42ad7aa4d7907cca941371c9eee8de8c2ee40d\n+Subproject commit 7fd493465b7dd6cf3476f0b834884059bbdd1d93"}, {"sha": "821355a6fd642b71988a2f88a3162fb358732012", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1 +1 @@\n-Subproject commit 219e261ddb833a5683627b0a9be87a0f4486abb9\n+Subproject commit 821355a6fd642b71988a2f88a3162fb358732012"}, {"sha": "e459fb3f07f2b930ccd25d348671b8eae233fd64", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1 +1 @@\n-Subproject commit e3719fc78ff4a21dfd13cfcc9e2ca42cb5de29f4\n+Subproject commit e459fb3f07f2b930ccd25d348671b8eae233fd64"}, {"sha": "6ed8210349e1727210e95b6f066ef48ae08778b6", "filename": "src/etc/rust-lldb", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fetc%2Frust-lldb", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Fetc%2Frust-lldb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-lldb?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -12,27 +12,35 @@\n # Exit if anything fails\n set -e\n \n-LLDB_VERSION=`lldb --version 2>/dev/null | head -1 | cut -d. -f1`\n+# Find out where to look for the pretty printer Python module\n+RUSTC_SYSROOT=`rustc --print sysroot`\n+\n+# Find the host triple so we can find lldb in rustlib.\n+host=`rustc -vV | sed -n -e 's/^host: //p'`\n+\n+lldb=lldb\n+if [ -f \"$RUSTC_SYSROOT/lib/rustlib/$host/bin/lldb\" ]; then\n+    lldb=\"$RUSTC_SYSROOT/lib/rustlib/$host/bin/lldb\"\n+else\n+    LLDB_VERSION=`\"$lldb\" --version 2>/dev/null | head -1 | cut -d. -f1`\n \n-if [ \"$LLDB_VERSION\" = \"lldb-350\" ]\n-then\n-    echo \"***\"\n+    if [ \"$LLDB_VERSION\" = \"lldb-350\" ]\n+    then\n+        echo \"***\"\n \techo \\\n \"WARNING: This version of LLDB has known issues with Rust and cannot \\\n display the contents of local variables!\"\n-    echo \"***\"\n+        echo \"***\"\n+    fi\n fi\n \n-# Find out where to look for the pretty printer Python module\n-RUSTC_SYSROOT=`rustc --print sysroot`\n-\n # Prepare commands that will be loaded before any file on the command line has been loaded\n script_import=\"command script import \\\"$RUSTC_SYSROOT/lib/rustlib/etc/lldb_rust_formatters.py\\\"\"\n category_definition=\"type summary add --no-value --python-function lldb_rust_formatters.print_val -x \\\".*\\\" --category Rust\"\n category_enable=\"type category enable Rust\"\n \n # Call LLDB with the commands added to the argument list\n-exec lldb --one-line-before-file=\"$script_import\" \\\n+exec \"$lldb\" --one-line-before-file=\"$script_import\" \\\n     --one-line-before-file=\"$category_definition\" \\\n     --one-line-before-file=\"$category_enable\" \\\n     \"$@\""}, {"sha": "d15568af6aebec8f6ea641da55543a2d38a7904e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -574,6 +574,7 @@ define_dep_nodes!( <'tcx>\n     [] IsPanicRuntime(CrateNum),\n     [] IsCompilerBuiltins(CrateNum),\n     [] HasGlobalAllocator(CrateNum),\n+    [] HasPanicHandler(CrateNum),\n     [input] ExternCrate(DefId),\n     [eval_always] LintLevels,\n     [] Specializes { impl1: DefId, impl2: DefId },"}, {"sha": "f5a46060759ddd1440d71243505d2f6a05dcbd45", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -39,10 +39,12 @@ pub struct DepGraph {\n     fingerprints: Lrc<Lock<IndexVec<DepNodeIndex, Fingerprint>>>\n }\n \n-newtype_index!(DepNodeIndex);\n+newtype_index! {\n+    pub struct DepNodeIndex { .. }\n+}\n \n impl DepNodeIndex {\n-    const INVALID: DepNodeIndex = DepNodeIndex(::std::u32::MAX);\n+    const INVALID: DepNodeIndex = DepNodeIndex::MAX;\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n@@ -1125,14 +1127,16 @@ impl DepNodeColorMap {\n         match self.values[index] {\n             COMPRESSED_NONE => None,\n             COMPRESSED_RED => Some(DepNodeColor::Red),\n-            value => Some(DepNodeColor::Green(DepNodeIndex(value - COMPRESSED_FIRST_GREEN)))\n+            value => Some(DepNodeColor::Green(DepNodeIndex::from_u32(\n+                value - COMPRESSED_FIRST_GREEN\n+            )))\n         }\n     }\n \n     fn insert(&mut self, index: SerializedDepNodeIndex, color: DepNodeColor) {\n         self.values[index] = match color {\n             DepNodeColor::Red => COMPRESSED_RED,\n-            DepNodeColor::Green(index) => index.0 + COMPRESSED_FIRST_GREEN,\n+            DepNodeColor::Green(index) => index.as_u32() + COMPRESSED_FIRST_GREEN,\n         }\n     }\n }"}, {"sha": "4c896a33e59c1543e19e63cece80398c78e141a5", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -14,7 +14,9 @@ use dep_graph::DepNode;\n use ich::Fingerprint;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n-newtype_index!(SerializedDepNodeIndex);\n+newtype_index! {\n+    pub struct SerializedDepNodeIndex { .. }\n+}\n \n /// Data for use when recompiling the **current crate**.\n #[derive(Debug, RustcEncodable, RustcDecodable)]"}, {"sha": "420ffbcfee6cd29f1a6d5f20576a2a7cf132d13b", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -15,8 +15,8 @@ use serialize;\n use std::fmt;\n use std::u32;\n \n-newtype_index!(CrateNum\n-    {\n+newtype_index! {\n+    pub struct CrateNum {\n         ENCODABLE = custom\n         DEBUG_FORMAT = \"crate{}\",\n \n@@ -27,40 +27,28 @@ newtype_index!(CrateNum\n         /// Virtual crate for builtin macros\n         // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get\n         // `CrateNum`s.\n-        const BUILTIN_MACROS_CRATE = u32::MAX,\n+        const BUILTIN_MACROS_CRATE = CrateNum::MAX_AS_U32,\n \n         /// A CrateNum value that indicates that something is wrong.\n-        const INVALID_CRATE = u32::MAX - 1,\n+        const INVALID_CRATE = CrateNum::MAX_AS_U32 - 1,\n \n         /// A special CrateNum that we use for the tcx.rcache when decoding from\n         /// the incr. comp. cache.\n-        const RESERVED_FOR_INCR_COMP_CACHE = u32::MAX - 2,\n-    });\n+        const RESERVED_FOR_INCR_COMP_CACHE = CrateNum::MAX_AS_U32 - 2,\n+    }\n+}\n \n impl CrateNum {\n     pub fn new(x: usize) -> CrateNum {\n-        assert!(x < (u32::MAX as usize));\n-        CrateNum(x as u32)\n-    }\n-\n-    pub fn from_u32(x: u32) -> CrateNum {\n-        CrateNum(x)\n-    }\n-\n-    pub fn as_usize(&self) -> usize {\n-        self.0 as usize\n-    }\n-\n-    pub fn as_u32(&self) -> u32 {\n-        self.0\n+        CrateNum::from_usize(x)\n     }\n \n     pub fn as_def_id(&self) -> DefId { DefId { krate: *self, index: CRATE_DEF_INDEX } }\n }\n \n impl fmt::Display for CrateNum {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&self.0, f)\n+        fmt::Display::fmt(&self.as_u32(), f)\n     }\n }\n "}, {"sha": "8b7438cbe63250d4c8e3dfab318a51fe327d716c", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -102,7 +102,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::Local {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -112,7 +111,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::BasicBlock {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -122,7 +120,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::Field {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -133,7 +130,6 @@ for mir::SourceScope {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -143,7 +139,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::Promoted {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "e90c4f62f59d5c0ba3c09b5cd42cd9ec7f38ab92", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -143,7 +143,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionVid {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -153,7 +152,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::CanonicalVar {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -774,7 +772,6 @@ impl_stable_hash_for!(enum ty::cast::CastKind {\n     FnPtrAddrCast\n });\n \n-impl_stable_hash_for!(tuple_struct ::middle::region::FirstStatementIndex { idx });\n impl_stable_hash_for!(struct ::middle::region::Scope { id, code });\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for region::Scope {"}, {"sha": "eabcf1ce4136361878b3879dc62df4271eee517d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -73,8 +73,6 @@ use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n \n-use rustc_data_structures::indexed_vec::Idx;\n-\n mod note;\n \n mod need_type_info;"}, {"sha": "d8f3b9a05bd40f57c3009d3b290a57b06e031672", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -16,7 +16,7 @@ use self::CombineMapType::*;\n use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n use super::unify_key;\n \n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::unify as ut;\n use ty::{self, Ty, TyCtxt};"}, {"sha": "cdc92877a5ae82e0596f6b256af74e78136852fb", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -49,8 +49,8 @@ impl UnifyValue for RegionVidKey {\n \n impl UnifyKey for ty::RegionVid {\n     type Value = RegionVidKey;\n-    fn index(&self) -> u32 { self.0 }\n-    fn from_index(i: u32) -> ty::RegionVid { ty::RegionVid(i) }\n+    fn index(&self) -> u32 { u32::from(*self) }\n+    fn from_index(i: u32) -> ty::RegionVid { ty::RegionVid::from(i) }\n     fn tag() -> &'static str { \"RegionVid\" }\n }\n "}, {"sha": "f6a8f8dc172d4c0266b9b73b9547ef3380ede793", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -159,11 +159,13 @@ pub struct BlockRemainder {\n     pub first_statement_index: FirstStatementIndex,\n }\n \n-newtype_index!(FirstStatementIndex\n-    {\n-        pub idx\n+newtype_index! {\n+    pub struct FirstStatementIndex {\n         MAX = SCOPE_DATA_REMAINDER_MAX\n-    });\n+    }\n+}\n+\n+impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { private });\n \n impl From<ScopeData> for Scope {\n     #[inline]"}, {"sha": "c6a1281061fe430ec6eb5816d34b0194276ba58d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -131,9 +131,6 @@ pub struct Mir<'tcx> {\n     cache: cache::Cache,\n }\n \n-/// where execution begins\n-pub const START_BLOCK: BasicBlock = BasicBlock(0);\n-\n impl<'tcx> Mir<'tcx> {\n     pub fn new(\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n@@ -239,7 +236,7 @@ impl<'tcx> Mir<'tcx> {\n \n     #[inline]\n     pub fn local_kind(&self, local: Local) -> LocalKind {\n-        let index = local.0 as usize;\n+        let index = local.as_usize();\n         if index == 0 {\n             debug_assert!(\n                 self.local_decls[local].mutability == Mutability::Mut,\n@@ -523,11 +520,12 @@ impl BorrowKind {\n ///////////////////////////////////////////////////////////////////////////\n // Variables and temps\n \n-newtype_index!(Local\n-    {\n+newtype_index! {\n+    pub struct Local {\n         DEBUG_FORMAT = \"_{}\",\n         const RETURN_PLACE = 0,\n-    });\n+    }\n+}\n \n /// Classifies locals into categories. See `Mir::local_kind`.\n #[derive(PartialEq, Eq, Debug)]\n@@ -852,7 +850,12 @@ pub struct UpvarDecl {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock\n \n-newtype_index!(BasicBlock { DEBUG_FORMAT = \"bb{}\" });\n+newtype_index! {\n+    pub struct BasicBlock {\n+        DEBUG_FORMAT = \"bb{}\",\n+        const START_BLOCK = 0,\n+    }\n+}\n \n impl BasicBlock {\n     pub fn start_location(self) -> Location {\n@@ -1822,7 +1825,11 @@ pub type PlaceProjection<'tcx> = Projection<'tcx, Place<'tcx>, Local, Ty<'tcx>>;\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n-newtype_index!(Field { DEBUG_FORMAT = \"field[{}]\" });\n+newtype_index! {\n+    pub struct Field {\n+        DEBUG_FORMAT = \"field[{}]\"\n+    }\n+}\n \n impl<'tcx> Place<'tcx> {\n     pub fn field(self, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {\n@@ -1895,11 +1902,12 @@ impl<'tcx> Debug for Place<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Scopes\n \n-newtype_index!(SourceScope\n-    {\n+newtype_index! {\n+    pub struct SourceScope {\n         DEBUG_FORMAT = \"scope[{}]\",\n         const OUTERMOST_SOURCE_SCOPE = 0,\n-    });\n+    }\n+}\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct SourceScopeData {\n@@ -2271,7 +2279,11 @@ pub struct Constant<'tcx> {\n     pub literal: &'tcx ty::Const<'tcx>,\n }\n \n-newtype_index!(Promoted { DEBUG_FORMAT = \"promoted[{}]\" });\n+newtype_index! {\n+    pub struct Promoted {\n+        DEBUG_FORMAT = \"promoted[{}]\"\n+    }\n+}\n \n impl<'tcx> Debug for Constant<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {"}, {"sha": "272967282e03b2dce2337f2e3b5b1a036d5f130e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -159,6 +159,9 @@ pub struct Session {\n     /// Metadata about the allocators for the current crate being compiled\n     pub has_global_allocator: Once<bool>,\n \n+    /// Metadata about the panic handlers for the current crate being compiled\n+    pub has_panic_handler: Once<bool>,\n+\n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n }\n@@ -1160,6 +1163,7 @@ pub fn build_session_(\n             (*GLOBAL_JOBSERVER).clone()\n         },\n         has_global_allocator: Once::new(),\n+        has_panic_handler: Once::new(),\n         driver_lint_caps: FxHashMap(),\n     };\n "}, {"sha": "2bbf5aacc1aca85192da2dffc29bf38a3ad04149", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -464,6 +464,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::has_global_allocator<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::has_panic_handler<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        \"checking if the crate has_panic_handler\".to_string()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::extern_crate<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         \"getting crate's ExternCrateData\".to_string()"}, {"sha": "f0ca168e9e4679ce3db3ca4bcafeafcd13ec9b97", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -381,6 +381,7 @@ define_queries! { <'tcx>\n         [fatal_cycle] fn is_panic_runtime: IsPanicRuntime(CrateNum) -> bool,\n         [fatal_cycle] fn is_compiler_builtins: IsCompilerBuiltins(CrateNum) -> bool,\n         [fatal_cycle] fn has_global_allocator: HasGlobalAllocator(CrateNum) -> bool,\n+        [fatal_cycle] fn has_panic_handler: HasPanicHandler(CrateNum) -> bool,\n         [fatal_cycle] fn is_sanitizer_runtime: IsSanitizerRuntime(CrateNum) -> bool,\n         [fatal_cycle] fn is_profiler_runtime: IsProfilerRuntime(CrateNum) -> bool,\n         [fatal_cycle] fn panic_strategy: GetPanicStrategy(CrateNum) -> PanicStrategy,"}, {"sha": "3c26732fbac6719668136be524de7daf92b496f5", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1168,6 +1168,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::IsPanicRuntime => { force!(is_panic_runtime, krate!()); }\n         DepKind::IsCompilerBuiltins => { force!(is_compiler_builtins, krate!()); }\n         DepKind::HasGlobalAllocator => { force!(has_global_allocator, krate!()); }\n+        DepKind::HasPanicHandler => { force!(has_panic_handler, krate!()); }\n         DepKind::ExternCrate => { force!(extern_crate, def_id!()); }\n         DepKind::LintLevels => { force!(lint_levels, LOCAL_CRATE); }\n         DepKind::InScopeTraits => { force!(in_scope_traits_map, def_id!().index); }"}, {"sha": "b5ec1ad36ab7efbb903d133562ba6edc12c86762", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1034,11 +1034,12 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n /// is the outer fn.\n ///\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n-newtype_index!(DebruijnIndex\n-    {\n+newtype_index! {\n+    pub struct DebruijnIndex {\n         DEBUG_FORMAT = \"DebruijnIndex({})\",\n         const INNERMOST = 0,\n-    });\n+    }\n+}\n \n pub type Region<'tcx> = &'tcx RegionKind;\n \n@@ -1176,30 +1177,18 @@ pub struct FloatVid {\n     pub index: u32,\n }\n \n-newtype_index!(RegionVid\n-    {\n-        pub idx\n+newtype_index! {\n+    pub struct RegionVid {\n         DEBUG_FORMAT = custom,\n-    });\n+    }\n+}\n \n impl Atom for RegionVid {\n     fn index(self) -> usize {\n         Idx::index(self)\n     }\n }\n \n-impl From<usize> for RegionVid {\n-    fn from(i: usize) -> RegionVid {\n-        RegionVid::new(i)\n-    }\n-}\n-\n-impl From<RegionVid> for usize {\n-    fn from(vid: RegionVid) -> usize {\n-        Idx::index(vid)\n-    }\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub enum InferTy {\n     TyVar(TyVid),\n@@ -1217,7 +1206,9 @@ pub enum InferTy {\n     CanonicalTy(CanonicalVar),\n }\n \n-newtype_index!(CanonicalVar);\n+newtype_index! {\n+    pub struct CanonicalVar { .. }\n+}\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n@@ -1282,8 +1273,8 @@ impl DebruijnIndex {\n     ///\n     /// you would need to shift the index for `'a` into 1 new binder.\n     #[must_use]\n-    pub const fn shifted_in(self, amount: u32) -> DebruijnIndex {\n-        DebruijnIndex(self.0 + amount)\n+    pub fn shifted_in(self, amount: u32) -> DebruijnIndex {\n+        DebruijnIndex::from_u32(self.as_u32() + amount)\n     }\n \n     /// Update this index in place by shifting it \"in\" through\n@@ -1295,8 +1286,8 @@ impl DebruijnIndex {\n     /// Returns the resulting index when this value is moved out from\n     /// `amount` number of new binders.\n     #[must_use]\n-    pub const fn shifted_out(self, amount: u32) -> DebruijnIndex {\n-        DebruijnIndex(self.0 - amount)\n+    pub fn shifted_out(self, amount: u32) -> DebruijnIndex {\n+        DebruijnIndex::from_u32(self.as_u32() - amount)\n     }\n \n     /// Update in place by shifting out from `amount` binders.\n@@ -1325,11 +1316,11 @@ impl DebruijnIndex {\n     /// bound by one of the binders we are shifting out of, that is an\n     /// error (and should fail an assertion failure).\n     pub fn shifted_out_to_binder(self, to_binder: DebruijnIndex) -> Self {\n-        self.shifted_out((to_binder.0 - INNERMOST.0) as u32)\n+        self.shifted_out(to_binder.as_u32() - INNERMOST.as_u32())\n     }\n }\n \n-impl_stable_hash_for!(tuple_struct DebruijnIndex { index });\n+impl_stable_hash_for!(struct DebruijnIndex { private });\n \n /// Region utilities\n impl RegionKind {"}, {"sha": "e8236e21e246342e7f1db270b6b15a63d776a90a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -26,7 +26,6 @@ use std::cell::Cell;\n use std::fmt;\n use std::usize;\n \n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::CRATE_NODE_ID;\n use syntax::symbol::{Symbol, InternedString};"}, {"sha": "258fe643c3067cad32126a200fa6a4c2cce90378", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -32,7 +32,7 @@ use syntax::symbol::keywords;\n use std::iter;\n \n use rustc_data_structures::bitvec::BitArray;\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n \n pub use self::constant::codegen_static_initializer;\n "}, {"sha": "bfa0e0a451e6f86ad0d40b981ce7fa54743fc125", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -13,7 +13,6 @@ use rustc::mir;\n use rustc::mir::interpret::{ConstValue, ScalarMaybeUndef};\n use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n \n use base;"}, {"sha": "4baab1763c31059288385dfe5b9a193482c49945", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -13,7 +13,6 @@ use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, Size};\n use rustc::mir;\n use rustc::mir::tcx::PlaceTy;\n-use rustc_data_structures::indexed_vec::Idx;\n use base;\n use builder::Builder;\n use common::{CodegenCx, C_undef, C_usize, C_u8, C_u32, C_uint, C_null, C_uint_big};"}, {"sha": "186bc6d43ccc560a0afb47d0fd27ee926167357a", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 151, "deletions": 63, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -48,25 +48,42 @@ impl Idx for u32 {\n     fn index(self) -> usize { self as usize }\n }\n \n+/// Creates a struct type `S` that can be used as an index with\n+/// `IndexVec` and so on.\n+///\n+/// There are two ways of interacting with these indices:\n+///\n+/// - The `From` impls are the preferred way. So you can do\n+///   `S::from(v)` with a `usize` or `u32`. And you can convert back\n+///   to an integer with `u32::from(s)`.\n+///\n+/// - Alternatively, you can use the methods `S::new(v)` and `s.index()`\n+///   to create/return a value.\n+///\n+/// Internally, the index uses a u32, so the index must not exceed\n+/// `u32::MAX`. You can also customize things like the `Debug` impl,\n+/// what traits are derived, and so forth via the macro.\n #[macro_export]\n macro_rules! newtype_index {\n     // ---- public rules ----\n \n     // Use default constants\n-    ($name:ident) => (\n+    ($v:vis struct $name:ident { .. }) => (\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n-            @max          [::std::u32::MAX]\n+            @max          [::std::u32::MAX - 1]\n+            @vis          [$v]\n             @debug_format [\"{}\"]);\n     );\n \n     // Define any constants\n-    ($name:ident { $($tokens:tt)+ }) => (\n+    ($v:vis struct $name:ident { $($tokens:tt)+ }) => (\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n-            @max          [::std::u32::MAX]\n+            @max          [::std::u32::MAX - 1]\n+            @vis          [$v]\n             @debug_format [\"{}\"]\n                           $($tokens)+);\n     );\n@@ -75,55 +92,153 @@ macro_rules! newtype_index {\n \n     // Base case, user-defined constants (if any) have already been defined\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n-        pub struct $type($($pub)* u32);\n+        $v struct $type {\n+            private: u32\n+        }\n+\n+        impl $type {\n+            $v const MAX_AS_U32: u32 = $max;\n+\n+            $v const MAX: $type = $type::from_u32_const($max);\n+\n+            #[inline]\n+            $v fn from_usize(value: usize) -> Self {\n+                assert!(value <= ($max as usize));\n+                unsafe {\n+                    $type::from_u32_unchecked(value as u32)\n+                }\n+            }\n+\n+            #[inline]\n+            $v fn from_u32(value: u32) -> Self {\n+                assert!(value <= $max);\n+                unsafe {\n+                    $type::from_u32_unchecked(value)\n+                }\n+            }\n+\n+            /// Hacky variant of `from_u32` for use in constants.\n+            /// This version checks the \"max\" constraint by using an\n+            /// invalid array dereference.\n+            #[inline]\n+            $v const fn from_u32_const(value: u32) -> Self {\n+                // This will fail at const eval time unless `value <=\n+                // max` is true (in which case we get the index 0).\n+                // It will also fail at runtime, of course, but in a\n+                // kind of wacky way.\n+                let _ = [\"out of range value used\"][\n+                    !(value <= $max) as usize\n+                ];\n+\n+                unsafe {\n+                    $type { private: value }\n+                }\n+            }\n+\n+            #[inline]\n+            $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n+                $type { private: value }\n+            }\n+\n+            /// Extract value of this index as an integer.\n+            #[inline]\n+            $v fn index(self) -> usize {\n+                self.as_usize()\n+            }\n+\n+            /// Extract value of this index as a usize.\n+            #[inline]\n+            $v fn as_u32(self) -> u32 {\n+                self.private\n+            }\n+\n+            /// Extract value of this index as a u32.\n+            #[inline]\n+            $v fn as_usize(self) -> usize {\n+                self.as_u32() as usize\n+            }\n+        }\n \n         impl Idx for $type {\n             #[inline]\n             fn new(value: usize) -> Self {\n-                assert!(value < ($max) as usize);\n-                $type(value as u32)\n+                Self::from(value)\n             }\n \n             #[inline]\n             fn index(self) -> usize {\n-                self.0 as usize\n+                usize::from(self)\n             }\n         }\n \n         impl ::std::iter::Step for $type {\n+            #[inline]\n             fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n                 <usize as ::std::iter::Step>::steps_between(\n                     &Idx::index(*start),\n                     &Idx::index(*end),\n                 )\n             }\n \n+            #[inline]\n             fn replace_one(&mut self) -> Self {\n                 ::std::mem::replace(self, Self::new(1))\n             }\n \n+            #[inline]\n             fn replace_zero(&mut self) -> Self {\n                 ::std::mem::replace(self, Self::new(0))\n             }\n \n+            #[inline]\n             fn add_one(&self) -> Self {\n                 Self::new(Idx::index(*self) + 1)\n             }\n \n+            #[inline]\n             fn sub_one(&self) -> Self {\n                 Self::new(Idx::index(*self) - 1)\n             }\n \n+            #[inline]\n             fn add_usize(&self, u: usize) -> Option<Self> {\n                 Idx::index(*self).checked_add(u).map(Self::new)\n             }\n         }\n \n+        impl From<$type> for u32 {\n+            #[inline]\n+            fn from(v: $type) -> u32 {\n+                v.as_u32()\n+            }\n+        }\n+\n+        impl From<$type> for usize {\n+            #[inline]\n+            fn from(v: $type) -> usize {\n+                v.as_usize()\n+            }\n+        }\n+\n+        impl From<usize> for $type {\n+            #[inline]\n+            fn from(value: usize) -> Self {\n+                $type::from_usize(value)\n+            }\n+        }\n+\n+        impl From<u32> for $type {\n+            #[inline]\n+            fn from(value: u32) -> Self {\n+                $type::from_u32(value)\n+            }\n+        }\n+\n         newtype_index!(\n             @handle_debug\n             @derives      [$($derives,)*]\n@@ -144,7 +259,7 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]) => (\n         impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n-                write!(fmt, $debug_format, self.0)\n+                write!(fmt, $debug_format, self.as_u32())\n             }\n         }\n     );\n@@ -167,199 +282,172 @@ macro_rules! newtype_index {\n             @debug_format [$debug_format]);\n     );\n \n-    // Handle the case where someone wants to make the internal field public\n-    (@type         [$type:ident]\n-     @max          [$max:expr]\n-     @debug_format [$debug_format:tt]\n-                   pub idx\n-                   $($tokens:tt)*) => (\n-        newtype_index!(\n-            @pub          [pub]\n-            @type         [$type]\n-            @max          [$max]\n-            @debug_format [$debug_format]\n-                          $($tokens)*);\n-    );\n-\n-    // The default case is that the internal field is private\n-    (@type         [$type:ident]\n-     @max          [$max:expr]\n-     @debug_format [$debug_format:tt]\n-                   $($tokens:tt)*) => (\n-        newtype_index!(\n-            @pub          []\n-            @type         [$type]\n-            @max          [$max]\n-            @debug_format [$debug_format]\n-                          $($tokens)*);\n-    );\n-\n     // Append comma to end of derives list if it's missing\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident),*]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           derive [$($derives,)*]\n                           $($tokens)*);\n     );\n \n     // By not including the @derives marker in this list nor in the default args, we can force it\n     // to come first if it exists. When encodable is custom, just use the derives list as-is.\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)+]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // By not including the @derives marker in this list nor in the default args, we can force it\n     // to come first if it exists. When encodable isn't custom, add serialization traits by default.\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)+ RustcDecodable, RustcEncodable,]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // The case where no derives are added, but encodable is overridden. Don't\n     // derive serialization traits\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      []\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // The case where no derives are added, add serialization derives by default\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [RustcDecodable, RustcEncodable,]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // Rewrite final without comma to one that includes comma\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $name = $constant,);\n     );\n \n     // Rewrite final const without comma to one that includes comma\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $(#[doc = $doc])* const $name = $constant,);\n     );\n \n     // Replace existing default for max\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    MAX = $max:expr,\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // Replace existing default for debug_format\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$_debug_format:tt]\n                    DEBUG_FORMAT = $debug_format:tt,\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // Assign a user-defined constant\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n-        pub const $name: $type = $type($constant);\n+        pub const $name: $type = $type::from_u32_const($constant);\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );"}, {"sha": "215c44dec6913365cef39f528e2e005e0d4dbb1a", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -217,6 +217,14 @@ impl_stable_hash_via_hash!(i128);\n impl_stable_hash_via_hash!(char);\n impl_stable_hash_via_hash!(());\n \n+impl<CTX> HashStable<CTX> for ::std::num::NonZeroU32 {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          ctx: &mut CTX,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.get().hash_stable(ctx, hasher)\n+    }\n+}\n+\n impl<CTX> HashStable<CTX> for f32 {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           ctx: &mut CTX,"}, {"sha": "57c00f252ef16f0caa647db89595d5453f776283", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -183,8 +183,13 @@ fn test_env_with_pool<F>(\n     });\n }\n \n-const D1: ty::DebruijnIndex = ty::INNERMOST;\n-const D2: ty::DebruijnIndex = D1.shifted_in(1);\n+fn d1() -> ty::DebruijnIndex {\n+    ty::INNERMOST\n+}\n+\n+fn d2() -> ty::DebruijnIndex {\n+    d1().shifted_in(1)\n+}\n \n impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -337,7 +342,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_rptr_late_bound(&self, id: u32) -> Ty<'tcx> {\n-        let r = self.re_late_bound_with_debruijn(id, D1);\n+        let r = self.re_late_bound_with_debruijn(id, d1());\n         self.infcx.tcx.mk_imm_ref(r, self.tcx().types.isize)\n     }\n \n@@ -494,7 +499,7 @@ fn subst_ty_renumber_bound() {\n \n         // t_expected = fn(&'a isize)\n         let t_expected = {\n-            let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n+            let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n             env.t_fn(&[t_ptr_bound2], env.t_nil())\n         };\n \n@@ -531,7 +536,7 @@ fn subst_ty_renumber_some_bounds() {\n         //\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n-            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n+            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n             env.t_pair(t_rptr_bound1, env.t_fn(&[t_rptr_bound2], env.t_nil()))\n         };\n \n@@ -559,10 +564,10 @@ fn escaping() {\n         let t_rptr_free1 = env.t_rptr_free(1);\n         assert!(!t_rptr_free1.has_escaping_regions());\n \n-        let t_rptr_bound1 = env.t_rptr_late_bound_with_debruijn(1, D1);\n+        let t_rptr_bound1 = env.t_rptr_late_bound_with_debruijn(1, d1());\n         assert!(t_rptr_bound1.has_escaping_regions());\n \n-        let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n+        let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n         assert!(t_rptr_bound2.has_escaping_regions());\n \n         // t_fn = fn(A)\n@@ -578,7 +583,7 @@ fn escaping() {\n #[test]\n fn subst_region_renumber_region() {\n     test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n-        let re_bound1 = env.re_late_bound_with_debruijn(1, D1);\n+        let re_bound1 = env.re_late_bound_with_debruijn(1, d1());\n \n         // type t_source<'a> = fn(&'a isize)\n         let t_source = {\n@@ -593,7 +598,7 @@ fn subst_region_renumber_region() {\n         //\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n-            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n+            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n             env.t_fn(&[t_rptr_bound2], env.t_nil())\n         };\n "}, {"sha": "87a32b5a53e7a0d4365b4c1407dd0817c42d6b03", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -173,6 +173,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_panic_runtime => { cdata.root.panic_runtime }\n     is_compiler_builtins => { cdata.root.compiler_builtins }\n     has_global_allocator => { cdata.root.has_global_allocator }\n+    has_panic_handler => { cdata.root.has_panic_handler }\n     is_sanitizer_runtime => { cdata.root.sanitizer_runtime }\n     is_profiler_runtime => { cdata.root.profiler_runtime }\n     panic_strategy => { cdata.root.panic_strategy }"}, {"sha": "aae45c17c6771bd134b95bafcb22eef9d7ecb64f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -484,6 +484,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateType::ProcMacro);\n         let has_default_lib_allocator = attr::contains_name(&attrs, \"default_lib_allocator\");\n         let has_global_allocator = *tcx.sess.has_global_allocator.get();\n+        let has_panic_handler = *tcx.sess.has_panic_handler.try_get().unwrap_or(&false);\n \n         let root = self.lazy(&CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n@@ -494,6 +495,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: hygiene::default_edition(),\n             has_global_allocator: has_global_allocator,\n+            has_panic_handler: has_panic_handler,\n             has_default_lib_allocator: has_default_lib_allocator,\n             plugin_registrar_fn: tcx.sess\n                 .plugin_registrar_fn"}, {"sha": "ab22a8e4db9190bfa3bdfbcc89191fc9c36582ef", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -193,6 +193,7 @@ pub struct CrateRoot {\n     pub panic_strategy: PanicStrategy,\n     pub edition: Edition,\n     pub has_global_allocator: bool,\n+    pub has_panic_handler: bool,\n     pub has_default_lib_allocator: bool,\n     pub plugin_registrar_fn: Option<DefIndex>,\n     pub macro_derive_registrar: Option<DefIndex>,"}, {"sha": "3f8cd03660c43ab6708420f79eb03509076453cf", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -16,7 +16,6 @@ use rustc::mir::{LocalDecl, LocalKind, Location, Operand, Place};\n use rustc::mir::{ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;"}, {"sha": "91008e8f9690ecf154c6c94d213ed5e906c0bebc", "filename": "src/librustc_mir/borrow_check/location.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -27,7 +27,11 @@ crate struct LocationTable {\n     statements_before_block: IndexVec<BasicBlock, usize>,\n }\n \n-newtype_index!(LocationIndex { DEBUG_FORMAT = \"LocationIndex({})\" });\n+newtype_index! {\n+    pub struct LocationIndex {\n+        DEBUG_FORMAT = \"LocationIndex({})\"\n+    }\n+}\n \n #[derive(Copy, Clone, Debug)]\n crate enum RichLocation {"}, {"sha": "5050b5ab2b414ae77ab3bb34913e5f44ffaf3c60", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1605,10 +1605,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         place_span: (&Place<'tcx>, Span),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) {\n-        // FIXME: analogous code in check_loans first maps `place` to\n-        // its base_path ... but is that what we want here?\n-        let place = self.base_path(place_span.0);\n-\n         let maybe_uninits = &flow_state.uninits;\n \n         // Bad scenarios:\n@@ -1646,8 +1642,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //\n         // This code covers scenarios 1, 2, and 3.\n \n-        debug!(\"check_if_full_path_is_moved place: {:?}\", place);\n-        match self.move_path_closest_to(place) {\n+        debug!(\"check_if_full_path_is_moved place: {:?}\", place_span.0);\n+        match self.move_path_closest_to(place_span.0) {\n             Ok(mpi) => {\n                 if maybe_uninits.contains(&mpi) {\n                     self.report_use_of_moved_or_uninitialized(\n@@ -1677,10 +1673,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         place_span: (&Place<'tcx>, Span),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) {\n-        // FIXME: analogous code in check_loans first maps `place` to\n-        // its base_path ... but is that what we want here?\n-        let place = self.base_path(place_span.0);\n-\n         let maybe_uninits = &flow_state.uninits;\n \n         // Bad scenarios:\n@@ -1709,8 +1701,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //\n         // This code covers scenario 1.\n \n-        debug!(\"check_if_path_or_subpath_is_moved place: {:?}\", place);\n-        if let Some(mpi) = self.move_path_for_place(place) {\n+        debug!(\"check_if_path_or_subpath_is_moved place: {:?}\", place_span.0);\n+        if let Some(mpi) = self.move_path_for_place(place_span.0) {\n             if let Some(child_mpi) = maybe_uninits.has_any_child_of(mpi) {\n                 self.report_use_of_moved_or_uninitialized(\n                     context,\n@@ -1813,11 +1805,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             let tcx = self.tcx;\n                             match base.ty(self.mir, tcx).to_ty(tcx).sty {\n                                 ty::Adt(def, _) if def.has_dtor(tcx) => {\n-\n-                                    // FIXME: analogous code in\n-                                    // check_loans.rs first maps\n-                                    // `base` to its base_path.\n-\n                                     self.check_if_path_or_subpath_is_moved(\n                                         context, InitializationRequiringAction::Assignment,\n                                         (base, span), flow_state);\n@@ -2190,35 +2177,6 @@ enum Overlap {\n     Disjoint,\n }\n \n-impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n-    // FIXME (#16118): function intended to allow the borrow checker\n-    // to be less precise in its handling of Box while still allowing\n-    // moves out of a Box. They should be removed when/if we stop\n-    // treating Box specially (e.g. when/if DerefMove is added...)\n-\n-    fn base_path<'d>(&self, place: &'d Place<'tcx>) -> &'d Place<'tcx> {\n-        //! Returns the base of the leftmost (deepest) dereference of an\n-        //! Box in `place`. If there is no dereference of an Box\n-        //! in `place`, then it just returns `place` itself.\n-\n-        let mut cursor = place;\n-        let mut deepest = place;\n-        loop {\n-            let proj = match *cursor {\n-                Place::Promoted(_) |\n-                Place::Local(..) | Place::Static(..) => return deepest,\n-                Place::Projection(ref proj) => proj,\n-            };\n-            if proj.elem == ProjectionElem::Deref\n-                && place.ty(self.mir, self.tcx).to_ty(self.tcx).is_box()\n-            {\n-                deepest = &proj.base;\n-            }\n-            cursor = &proj.base;\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n struct Context {\n     kind: ContextKind,"}, {"sha": "290c7032388053f0b1376b35e1d22295e8a4ae58", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -12,7 +12,6 @@ use core::unicode::property::Pattern_White_Space;\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::DiagnosticBuilder;\n-use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n use borrow_check::MirBorrowckCtxt;"}, {"sha": "41c846509cddb33253dca85eccd13ae85a07638c", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -99,6 +99,14 @@ impl fmt::Debug for OutlivesConstraint {\n     }\n }\n \n-newtype_index!(ConstraintIndex { DEBUG_FORMAT = \"ConstraintIndex({})\" });\n+newtype_index! {\n+    pub struct ConstraintIndex {\n+        DEBUG_FORMAT = \"ConstraintIndex({})\"\n+    }\n+}\n \n-newtype_index!(ConstraintSccIndex { DEBUG_FORMAT = \"ConstraintSccIndex({})\" });\n+newtype_index! {\n+    pub struct ConstraintSccIndex {\n+        DEBUG_FORMAT = \"ConstraintSccIndex({})\"\n+    }\n+}"}, {"sha": "465707ecc17ddcfc58c041d083c095bd6fffb69d", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -100,18 +100,6 @@ impl Atom for LocationIndex {\n     }\n }\n \n-impl From<usize> for LocationIndex {\n-    fn from(i: usize) -> LocationIndex {\n-        LocationIndex::new(i)\n-    }\n-}\n-\n-impl From<LocationIndex> for usize {\n-    fn from(vid: LocationIndex) -> usize {\n-        Idx::index(vid)\n-    }\n-}\n-\n struct FactWriter<'w> {\n     location_table: &'w LocationTable,\n     dir: &'w Path,"}, {"sha": "34e893d2a59f24970b9c92ff46c12ca5bc475143", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -15,7 +15,6 @@\n use super::*;\n use borrow_check::nll::constraints::OutlivesConstraint;\n use dot::{self, IntoCow};\n-use rustc_data_structures::indexed_vec::Idx;\n use std::borrow::Cow;\n use std::io::{self, Write};\n "}, {"sha": "3dafab2f5a9f4da0ddd8e8b3b0b7fd50a9583ee6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -123,13 +123,17 @@ impl RegionValueElements {\n \n /// A single integer representing a `Location` in the MIR control-flow\n /// graph. Constructed efficiently from `RegionValueElements`.\n-newtype_index!(PointIndex { DEBUG_FORMAT = \"PointIndex({})\" });\n+newtype_index! {\n+    pub struct PointIndex { DEBUG_FORMAT = \"PointIndex({})\" }\n+}\n \n /// A single integer representing a (non-zero) `UniverseIndex`.\n /// Computed just by subtracting one from `UniverseIndex`; this is\n /// because the `0` value for `UniverseIndex` represents the root\n /// universe, and we don't need/want a bit for that one.\n-newtype_index!(PlaceholderIndex { DEBUG_FORMAT = \"PlaceholderIndex({})\" });\n+newtype_index! {\n+    pub struct PlaceholderIndex { DEBUG_FORMAT = \"PlaceholderIndex({})\" }\n+}\n \n /// An individual element in a region value -- the value of a\n /// particular region variable consists of a set of these elements."}, {"sha": "467554dc38a67e4be9d5717c3ae48b42a25ffc50", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/liveness_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -97,6 +97,6 @@ impl NllLivenessMap {\n /// compute liveness information. For many locals, we are able to\n /// skip liveness information: for example, those variables whose\n /// types contain no regions.\n-newtype_index!(\n-    LiveVar\n-);\n+newtype_index! {\n+    pub struct LiveVar { .. }\n+}"}, {"sha": "4b39d58cd96a82e3c7479aa84429241bb63908f5", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -48,7 +48,9 @@ struct Appearance {\n     next: Option<AppearanceIndex>,\n }\n \n-newtype_index!(AppearanceIndex);\n+newtype_index! {\n+    pub struct AppearanceIndex { .. }\n+}\n \n impl vll::LinkElem for Appearance {\n     type LinkIndex = AppearanceIndex;"}, {"sha": "82158acc9e6ab312b73daa965ca4387f4d3c0e9d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -42,7 +42,6 @@ use syntax_pos::{Span, DUMMY_SP};\n use transform::{MirPass, MirSource};\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::indexed_vec::Idx;\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({"}, {"sha": "8ffce9c94926fa5437217fb2e578396c6f253c79", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc::ty::subst::Kind;\n use rustc::ty::{self, CanonicalTy, CanonicalVar, RegionVid, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use std::mem;\n \n pub(super) fn sub_types<'tcx>("}, {"sha": "322a6977bedd0b925165bdfa9f8e352922c5c5f2", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -402,7 +402,9 @@ struct CFG<'tcx> {\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n }\n \n-newtype_index!(ScopeId);\n+newtype_index! {\n+    pub struct ScopeId { .. }\n+}\n \n ///////////////////////////////////////////////////////////////////////////\n /// The `BlockAnd` \"monad\" packages up the new basic block along with a"}, {"sha": "38e0854bcd61eddabdd00c694f9efc45018d9a43", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -95,7 +95,6 @@ use rustc::hir;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::mir::*;\n use syntax_pos::{Span};\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fx::FxHashMap;\n \n #[derive(Debug)]"}, {"sha": "154830c2e77e07277bc1fd3ea8ed7dc1fe10ed8e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -19,7 +19,7 @@ use rustc::mir;\n use rustc::ty::{self, TyCtxt, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::ty::subst::Subst;\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n \n use syntax::ast::Mutability;\n use syntax::source_map::Span;"}, {"sha": "1dc91cd05b33e9c7aeef0457942904c43ea47117", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -13,7 +13,6 @@\n \n use rustc::mir::{BasicBlock, Location};\n use rustc_data_structures::indexed_set::{HybridIdxSet, IdxSet, Iter};\n-use rustc_data_structures::indexed_vec::Idx;\n \n use dataflow::{BitDenotation, BlockSets, DataflowResults};\n use dataflow::move_paths::{HasMoveData, MovePathIndex};"}, {"sha": "2b5d26c748704f1655ff225b08b859d82b5f9788", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -13,7 +13,6 @@\n use syntax::ast::NodeId;\n use rustc::mir::{BasicBlock, Mir};\n use rustc_data_structures::bitslice::bits_to_string;\n-use rustc_data_structures::indexed_vec::Idx;\n \n use dot;\n use dot::IntoCow;"}, {"sha": "995e70fb382fc0460e3f73773077465abd54f9d3", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 79, "deletions": 41, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -21,7 +21,7 @@ use rustc::ty::{RegionKind, RegionVid};\n use rustc::ty::RegionKind::ReScope;\n \n use rustc_data_structures::bitslice::{BitwiseOperator, Word};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_set::IdxSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n@@ -53,6 +53,13 @@ pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     _nonlexical_regioncx: Rc<RegionInferenceContext<'tcx>>,\n }\n \n+struct StackEntry {\n+    bb: mir::BasicBlock,\n+    lo: usize,\n+    hi: usize,\n+    first_part_only: bool\n+}\n+\n fn precompute_borrows_out_of_scope<'tcx>(\n     mir: &Mir<'tcx>,\n     regioncx: &Rc<RegionInferenceContext<'tcx>>,\n@@ -61,48 +68,79 @@ fn precompute_borrows_out_of_scope<'tcx>(\n     borrow_region: RegionVid,\n     location: Location,\n ) {\n-    // Keep track of places we've locations to check and locations that we have checked.\n-    let mut stack = vec![ location ];\n-    let mut visited = FxHashSet();\n-    visited.insert(location);\n-\n-    debug!(\n-        \"borrow {:?} has region {:?} with value {:?}\",\n-        borrow_index,\n-        borrow_region,\n-        regioncx.region_value_str(borrow_region),\n-    );\n-    debug!(\"borrow {:?} starts at {:?}\", borrow_index, location);\n-    while let Some(location) = stack.pop() {\n-        // If region does not contain a point at the location, then add to list and skip\n-        // successor locations.\n-        if !regioncx.region_contains(borrow_region, location) {\n-            debug!(\"borrow {:?} gets killed at {:?}\", borrow_index, location);\n-            borrows_out_of_scope_at_location\n-                .entry(location)\n-                .or_default()\n-                .push(borrow_index);\n-            continue;\n+    // We visit one BB at a time. The complication is that we may start in the\n+    // middle of the first BB visited (the one containing `location`), in which\n+    // case we may have to later on process the first part of that BB if there\n+    // is a path back to its start.\n+\n+    // For visited BBs, we record the index of the first statement processed.\n+    // (In fully processed BBs this index is 0.) Note also that we add BBs to\n+    // `visited` once they are added to `stack`, before they are actually\n+    // processed, because this avoids the need to look them up again on\n+    // completion.\n+    let mut visited = FxHashMap();\n+    visited.insert(location.block, location.statement_index);\n+\n+    let mut stack = vec![];\n+    stack.push(StackEntry {\n+        bb: location.block,\n+        lo: location.statement_index,\n+        hi: mir[location.block].statements.len(),\n+        first_part_only: false,\n+    });\n+\n+    while let Some(StackEntry { bb, lo, hi, first_part_only }) = stack.pop() {\n+        let mut finished_early = first_part_only;\n+        for i in lo ..= hi {\n+            let location = Location { block: bb, statement_index: i };\n+            // If region does not contain a point at the location, then add to list and skip\n+            // successor locations.\n+            if !regioncx.region_contains(borrow_region, location) {\n+                debug!(\"borrow {:?} gets killed at {:?}\", borrow_index, location);\n+                borrows_out_of_scope_at_location\n+                    .entry(location)\n+                    .or_default()\n+                    .push(borrow_index);\n+                finished_early = true;\n+                break;\n+            }\n         }\n \n-        let bb_data = &mir[location.block];\n-        // If this is the last statement in the block, then add the\n-        // terminator successors next.\n-        if location.statement_index == bb_data.statements.len() {\n-            // Add successors to locations to visit, if not visited before.\n-            if let Some(ref terminator) = bb_data.terminator {\n-                for block in terminator.successors() {\n-                    let loc = block.start_location();\n-                    if visited.insert(loc) {\n-                        stack.push(loc);\n-                    }\n-                }\n-            }\n-        } else {\n-            // Visit next statement in block.\n-            let loc = location.successor_within_block();\n-            if visited.insert(loc) {\n-                stack.push(loc);\n+        if !finished_early {\n+            // Add successor BBs to the work list, if necessary.\n+            let bb_data = &mir[bb];\n+            assert!(hi == bb_data.statements.len());\n+            for &succ_bb in bb_data.terminator.as_ref().unwrap().successors() {\n+                visited.entry(succ_bb)\n+                    .and_modify(|lo| {\n+                        // `succ_bb` has been seen before. If it wasn't\n+                        // fully processed, add its first part to `stack`\n+                        // for processing.\n+                        if *lo > 0 {\n+                            stack.push(StackEntry {\n+                                bb: succ_bb,\n+                                lo: 0,\n+                                hi: *lo - 1,\n+                                first_part_only: true,\n+                            });\n+                        }\n+                        // And update this entry with 0, to represent the\n+                        // whole BB being processed.\n+                        *lo = 0;\n+                    })\n+                    .or_insert_with(|| {\n+                        // succ_bb hasn't been seen before. Add it to\n+                        // `stack` for processing.\n+                        stack.push(StackEntry {\n+                            bb: succ_bb,\n+                            lo: 0,\n+                            hi: mir[succ_bb].statements.len(),\n+                            first_part_only: false,\n+                        });\n+                        // Insert 0 for this BB, to represent the whole BB\n+                        // being processed.\n+                        0\n+                    });\n             }\n         }\n     }"}, {"sha": "461285ff9bc106422dda4d97f10be82a74f61cf4", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -16,7 +16,7 @@ use std::convert::TryInto;\n \n use rustc::{mir, ty};\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt};\n-use rustc_data_structures::indexed_vec::Idx;\n+\n use rustc::mir::interpret::{\n     GlobalId, AllocId,\n     ConstValue, Pointer, Scalar, ScalarMaybeUndef,"}, {"sha": "d01593ca5e91c6a1878d23892a7cff56708b34a3", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -18,7 +18,6 @@ use rustc::ich::StableHashingContext;\n use rustc::mir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Size, Align, LayoutOf, TyLayout, HasDataLayout};\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n \n use rustc::mir::interpret::{"}, {"sha": "d4024981c3754cac0e1445afc1c59b0d81730505", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -24,6 +24,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n #![feature(core_intrinsics)]\n+#![feature(const_fn)]\n #![feature(decl_macro)]\n #![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(exhaustive_patterns)]"}, {"sha": "4d19e9dfbf98abd3623ed81fb2fa6070c6b26248", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -26,7 +26,7 @@ use interpret::{self, Value, OpTy, MemoryKind};\n use transform::{MirPass, MirSource};\n use syntax::source_map::{Span, DUMMY_SP};\n use rustc::ty::subst::Substs;\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::ParamEnv;\n use rustc::ty::layout::{\n     LayoutOf, TyLayout, LayoutError,\n@@ -133,7 +133,6 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         self.ecx.tcx.span = source_info.span;\n         let lint_root = match self.mir.source_scope_local_data {\n             ClearCrossCrate::Set(ref ivs) => {\n-                use rustc_data_structures::indexed_vec::Idx;\n                 //FIXME(#51314): remove this check\n                 if source_info.scope.index() >= ivs.len() {\n                     return None;"}, {"sha": "bf538112e41ed26ec434092858648a6df1081fb1", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -19,7 +19,6 @@ use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_set::IdxSet;\n-use rustc_data_structures::indexed_vec::Idx;\n use transform::{MirPass, MirSource};\n use util::patch::MirPatch;\n use util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};"}, {"sha": "81fc235c23346aa1515951cdc573ca612b7ee0de", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -16,7 +16,7 @@\n \n use rustc_data_structures::bitvec::BitArray;\n use rustc_data_structures::indexed_set::IdxSet;\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashSet;\n use rustc::hir;\n use rustc::hir::def_id::DefId;"}, {"sha": "9faaeea3f5b70038073c9e8ae8df3c6862f35310", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -15,7 +15,6 @@ use syntax_pos::Span;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{self, Mir, Location};\n use rustc_data_structures::indexed_set::IdxSet;\n-use rustc_data_structures::indexed_vec::Idx;\n use transform::{MirPass, MirSource};\n \n use dataflow::{do_dataflow, DebugFormatted};"}, {"sha": "0b883f68bff40f464062acff65b5af2b17026917", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -15,8 +15,6 @@ use rustc::ty::TyCtxt;\n use std::fmt::Debug;\n use std::io::{self, Write};\n \n-use rustc_data_structures::indexed_vec::Idx;\n-\n use super::pretty::dump_mir_def_ids;\n \n /// Write a graphviz DOT graph of a list of MIRs."}, {"sha": "a72ee7ae3794c3d147400d3439b90b35ad36fd77", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1147,7 +1147,15 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 None => continue,\n             };\n \n-            if binding.is_import() || binding.is_macro_def() {\n+            // Don't reexport `uniform_path` canaries.\n+            let non_canary_import = match binding.kind {\n+                NameBindingKind::Import { directive, .. } => {\n+                    !directive.is_uniform_paths_canary\n+                }\n+                _ => false,\n+            };\n+\n+            if non_canary_import || binding.is_macro_def() {\n                 let def = binding.def();\n                 if def != Def::Err {\n                     if !def.def_id().is_local() {"}, {"sha": "65dd71de1443f89b6161262a16433ce5c92a02a3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -25,10 +25,11 @@ use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc::ty::wf::object_region_bounds;\n use rustc_target::spec::abi;\n+use std::collections::BTreeSet;\n use std::slice;\n use require_c_abi_if_variadic;\n use util::common::ErrorReported;\n-use util::nodemap::{FxHashSet, FxHashMap};\n+use util::nodemap::FxHashMap;\n use errors::{FatalError, DiagnosticId};\n use lint;\n \n@@ -996,7 +997,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             return tcx.types.err;\n         }\n \n-        let mut associated_types = FxHashSet::default();\n+        // use a btreeset to keep output in a more consistent order\n+        let mut associated_types = BTreeSet::default();\n+\n         for tr in traits::supertraits(tcx, principal) {\n             associated_types.extend(tcx.associated_items(tr.def_id())\n                 .filter(|item| item.kind == ty::AssociatedKind::Type)"}, {"sha": "a1e4c85f8214144a95ae2a2563723051e4cddb5a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1138,6 +1138,11 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n         if panic_impl_did == fcx.tcx.hir.local_def_id(fn_id) {\n             if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n+                // at this point we don't care if there are duplicate handlers or if the handler has\n+                // the wrong signature as this value we'll be used when writing metadata and that\n+                // only happens if compilation succeeded\n+                fcx.tcx.sess.has_panic_handler.try_set_same(true);\n+\n                 if declared_ret_ty.sty != ty::Never {\n                     fcx.tcx.sess.span_err(\n                         decl.output.span(),"}, {"sha": "5967bd1ba3eea9dcd93cf23e930083c642aa6198", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -117,6 +117,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n             !tcx.is_compiler_builtins(cnum)\n                 && !tcx.is_panic_runtime(cnum)\n                 && !tcx.has_global_allocator(cnum)\n+                && !tcx.has_panic_handler(cnum)\n         })\n         .cloned()\n         .collect();"}, {"sha": "416be50bfe9ea4f52a19ba7e9dbe4cf28721708e", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -361,6 +361,18 @@ impl Decodable for u32 {\n     }\n }\n \n+impl Encodable for ::std::num::NonZeroU32 {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_u32(self.get())\n+    }\n+}\n+\n+impl Decodable for ::std::num::NonZeroU32 {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        d.read_u32().map(|d| ::std::num::NonZeroU32::new(d).unwrap())\n+    }\n+}\n+\n impl Encodable for u64 {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_u64(*self)\n@@ -895,3 +907,4 @@ impl<T: UseSpecializedDecodable> Decodable for T {\n impl<'a, T: ?Sized + Encodable> UseSpecializedEncodable for &'a T {}\n impl<T: ?Sized + Encodable> UseSpecializedEncodable for Box<T> {}\n impl<T: Decodable> UseSpecializedDecodable for Box<T> {}\n+"}, {"sha": "db2ea6b660a7ab73a4f882ccbf8d8d1f789a2b25", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -11,7 +11,7 @@\n #![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n \n use cmp;\n-use io::{self, Read};\n+use io::{self, Read, Initializer};\n use libc::{self, c_int, c_void, ssize_t};\n use mem;\n use sync::atomic::{AtomicBool, Ordering};\n@@ -270,6 +270,11 @@ impl<'a> Read for &'a FileDesc {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n+\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n+    }\n }\n \n impl AsInner<c_int> for FileDesc {"}, {"sha": "c56beb52fdd61ae3e6004f2823e28ee77b6458d6", "filename": "src/test/run-make-fulldeps/issue-53964/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-make-fulldeps%2Fissue-53964%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-make-fulldeps%2Fissue-53964%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-53964%2FMakefile?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) panic.rs\n+\t$(RUSTC) -C panic=abort --emit=obj app.rs -L $(TMPDIR)"}, {"sha": "8127b9578bfee96f8d2c383ed794597d1e4804bc", "filename": "src/test/run-make-fulldeps/issue-53964/app.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-make-fulldeps%2Fissue-53964%2Fapp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-make-fulldeps%2Fissue-53964%2Fapp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-53964%2Fapp.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"bin\"]\n+#![no_main]\n+#![no_std]\n+\n+#![deny(unused_extern_crates)]\n+\n+// `panic` provides a `panic_handler` so it shouldn't trip the `unused_extern_crates` lint\n+extern crate panic;"}, {"sha": "87c7b218822a0cdc323531f4a33736ed7ddeddfd", "filename": "src/test/run-make-fulldeps/issue-53964/panic.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-make-fulldeps%2Fissue-53964%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-make-fulldeps%2Fissue-53964%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-53964%2Fpanic.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+#![feature(panic_handler)]\n+#![no_std]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_handler]\n+fn panic(_: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "5845afd72fbe749288971b04ba38a554bc45c217", "filename": "src/test/run-pass/uniform-paths/auxiliary/issue-53691.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-pass%2Funiform-paths%2Fauxiliary%2Fissue-53691.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-pass%2Funiform-paths%2Fauxiliary%2Fissue-53691.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiform-paths%2Fauxiliary%2Fissue-53691.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+#![feature(uniform_paths)]\n+\n+mod m { pub fn f() {} }\n+mod n { pub fn g() {} }\n+\n+pub use m::f;\n+pub use n::g;"}, {"sha": "62be31d6b85fe4ade240e085808484812172d7a2", "filename": "src/test/run-pass/uniform-paths/issue-53691.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-pass%2Funiform-paths%2Fissue-53691.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Frun-pass%2Funiform-paths%2Fissue-53691.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiform-paths%2Fissue-53691.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-53691.rs\n+\n+extern crate issue_53691;\n+\n+fn main() {\n+    issue_53691::f();\n+    issue_53691::g();\n+}"}, {"sha": "0e380e90e75915b5f12f7df4a26414b267c3444e", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.nll.stderr", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1,25 +1,14 @@\n-error[E0382]: use of moved value: `a.y`\n-  --> $DIR/borrowck-box-insensitivity.rs:46:14\n-   |\n-LL |     let _x = a.x;\n-   |              --- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of moved\n-   |              ^^^ value used here after move\n-   |\n-   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `a.y`\n-  --> $DIR/borrowck-box-insensitivity.rs:108:14\n-   |\n-LL |     let _x = a.x.x;\n-   |              ----- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of collaterally moved\n-   |              ^^^ value used here after move\n-   |\n-   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+error: compilation successful\n+  --> $DIR/borrowck-box-insensitivity.rs:160:1\n+   |\n+LL | / fn main() {\n+LL | |     copy_after_move();\n+LL | |     move_after_move();\n+LL | |     borrow_after_move();\n+...  |\n+LL | |     mut_borrow_after_borrow_nested();\n+LL | | }\n+   | |_^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "eabb8d7bca3fae511c73da3e4edd2f5d393e4041", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_attrs)]\n \n struct A {\n     x: Box<isize>,\n@@ -156,6 +156,7 @@ fn mut_borrow_after_borrow_nested() {\n     //~^ mutable borrow occurs here\n }\n \n+#[rustc_error]\n fn main() {\n     copy_after_move();\n     move_after_move();"}, {"sha": "9762db38a1ca659b6c5841468ec5be3203a679d0", "filename": "src/test/ui/removing-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Fui%2Fremoving-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Fui%2Fremoving-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.rs?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -16,12 +16,12 @@\n #![warn(rust_2018_idioms)]\n #![allow(unused_imports)]\n \n-extern crate std as foo;\n+extern crate removing_extern_crate as foo;\n extern crate core;\n \n mod another {\n-    extern crate std as foo;\n-    extern crate std;\n+    extern crate removing_extern_crate as foo;\n+    extern crate core;\n }\n \n fn main() {}"}, {"sha": "758ec67d178239955770a4b94156ffc40ddd527c", "filename": "src/test/ui/removing-extern-crate.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05cb29e96f718a94d31afd094b1efd7c05be4269/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr?ref=05cb29e96f718a94d31afd094b1efd7c05be4269", "patch": "@@ -1,8 +1,8 @@\n warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:19:1\n    |\n-LL | extern crate std as foo;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL | extern crate removing_extern_crate as foo;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n   --> $DIR/removing-extern-crate.rs:16:9\n@@ -20,12 +20,12 @@ LL | extern crate core;\n warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:23:5\n    |\n-LL |     extern crate std as foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL |     extern crate removing_extern_crate as foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:24:5\n    |\n-LL |     extern crate std;\n-   |     ^^^^^^^^^^^^^^^^^ help: remove it\n+LL |     extern crate core;\n+   |     ^^^^^^^^^^^^^^^^^^ help: remove it\n "}]}