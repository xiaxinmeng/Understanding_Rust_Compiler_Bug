{"sha": "addb61df36bff1e54e89c103922774e6f9dd4f21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZGI2MWRmMzZiZmYxZTU0ZTg5YzEwMzkyMjc3NGU2ZjlkZDRmMjE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-17T22:03:57Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-17T22:07:15Z"}, "message": "Idempotent location and installation of rust src", "tree": {"sha": "cb0958fabd0ea2b94b14d6c86e002b202da65305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0958fabd0ea2b94b14d6c86e002b202da65305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/addb61df36bff1e54e89c103922774e6f9dd4f21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/addb61df36bff1e54e89c103922774e6f9dd4f21", "html_url": "https://github.com/rust-lang/rust/commit/addb61df36bff1e54e89c103922774e6f9dd4f21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/addb61df36bff1e54e89c103922774e6f9dd4f21/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50cf1e3d67f4f716d06f0f86a0bf7e85782e3d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/50cf1e3d67f4f716d06f0f86a0bf7e85782e3d61", "html_url": "https://github.com/rust-lang/rust/commit/50cf1e3d67f4f716d06f0f86a0bf7e85782e3d61"}], "stats": {"total": 103, "additions": 56, "deletions": 47}, "files": [{"sha": "43b06202368eb3ced6c4b741c5c54e2acf6827a1", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 56, "deletions": 47, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/addb61df36bff1e54e89c103922774e6f9dd4f21/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addb61df36bff1e54e89c103922774e6f9dd4f21/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=addb61df36bff1e54e89c103922774e6f9dd4f21", "patch": "@@ -47,19 +47,16 @@ impl Sysroot {\n     }\n \n     pub fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n-        let mut src = try_find_src_path(cargo_toml)?;\n+        let src = get_or_install_rust_src(cargo_toml)?;\n \n         if !src.exists() {\n-            src = try_install_rust_src(cargo_toml)?;\n-            if !src.exists() {\n-                Err(anyhow!(\n-                    \"can't load standard library from sysroot\\n\\\n-                    {}\\n\\\n-                    (discovered via `rustc --print sysroot`)\\n\\\n-                    try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n-                    src.display(),\n-                ))?;\n-            }\n+            Err(anyhow!(\n+                \"can't load standard library from sysroot\\n\\\n+                {}\\n\\\n+                (discovered via `rustc --print sysroot`)\\n\\\n+                try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n+                src.display(),\n+            ))?;\n         }\n \n         let mut sysroot = Sysroot { crates: Arena::default() };\n@@ -93,47 +90,59 @@ impl Sysroot {\n     }\n }\n \n-fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf> {\n-    if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n-        return Ok(path.into());\n+fn get_or_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n+    fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf> {\n+        if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n+            return Ok(path.into());\n+        }\n+\n+        let rustc_output = Command::new(\"rustc\")\n+            .current_dir(cargo_toml.parent().unwrap())\n+            .args(&[\"--print\", \"sysroot\"])\n+            .output()\n+            .context(\"rustc --print sysroot failed\")?;\n+        if !rustc_output.status.success() {\n+            match rustc_output.status.code() {\n+                Some(code) => bail!(\n+                    \"failed to locate sysroot: rustc --print sysroot exited with code {}\",\n+                    code\n+                ),\n+                None => {\n+                    bail!(\"failed to locate sysroot: rustc --print sysroot terminated by signal\")\n+                }\n+            };\n+        }\n+        let stdout = String::from_utf8(rustc_output.stdout)?;\n+        let sysroot_path = Path::new(stdout.trim());\n+        Ok(sysroot_path.join(\"lib/rustlib/src/rust/src\"))\n     }\n \n-    let rustc_output = Command::new(\"rustc\")\n-        .current_dir(cargo_toml.parent().unwrap())\n-        .args(&[\"--print\", \"sysroot\"])\n-        .output()\n-        .context(\"rustc --print sysroot failed\")?;\n-    if !rustc_output.status.success() {\n-        match rustc_output.status.code() {\n-            Some(code) => {\n-                bail!(\"failed to locate sysroot: rustc --print sysroot exited with code {}\", code)\n-            }\n-            None => bail!(\"failed to locate sysroot: rustc --print sysroot terminated by signal\"),\n-        };\n+    fn try_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n+        let rustup_output = Command::new(\"rustup\")\n+            .current_dir(cargo_toml.parent().unwrap())\n+            .args(&[\"component\", \"add\", \"rust-src\"])\n+            .output()\n+            .context(\"rustup component add rust-src failed\")?;\n+        if !rustup_output.status.success() {\n+            match rustup_output.status.code() {\n+                Some(code) => bail!(\n+                    \"failed to install rust-src: rustup component add rust-src exited with code {}\",\n+                    code\n+                ),\n+                None => bail!(\n+                    \"failed to install rust-src: rustup component add rust-src terminated by signal\"\n+                ),\n+            };\n+        }\n+        try_find_src_path(cargo_toml)\n     }\n-    let stdout = String::from_utf8(rustc_output.stdout)?;\n-    let sysroot_path = Path::new(stdout.trim());\n-    Ok(sysroot_path.join(\"lib/rustlib/src/rust/src\"))\n-}\n \n-fn try_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n-    let rustup_output = Command::new(\"rustup\")\n-        .current_dir(cargo_toml.parent().unwrap())\n-        .args(&[\"component\", \"add\", \"rust-src\"])\n-        .output()\n-        .context(\"rustup component add rust-src failed\")?;\n-    if !rustup_output.status.success() {\n-        match rustup_output.status.code() {\n-            Some(code) => bail!(\n-                \"failed to install rust-src: rustup component add rust-src exited with code {}\",\n-                code\n-            ),\n-            None => bail!(\n-                \"failed to install rust-src: rustup component add rust-src terminated by signal\"\n-            ),\n-        };\n+    let src = try_find_src_path(cargo_toml)?;\n+    if !src.exists() {\n+        try_install_rust_src(cargo_toml)\n+    } else {\n+        Ok(src)\n     }\n-    try_find_src_path(cargo_toml)\n }\n \n impl SysrootCrate {"}]}