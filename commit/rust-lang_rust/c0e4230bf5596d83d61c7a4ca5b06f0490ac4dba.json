{"sha": "c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba", "node_id": "C_kwDOAAsO6NoAKGMwZTQyMzBiZjU1OTZkODNkNjFjN2E0Y2E1YjA2ZjA0OTBhYzRkYmE", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-05-11T21:27:06Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-07-22T14:32:50Z"}, "message": "simplify some code that depend on Deref", "tree": {"sha": "8fc6ffab0af955c639e321be1eca58c4ae31abdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fc6ffab0af955c639e321be1eca58c4ae31abdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba", "html_url": "https://github.com/rust-lang/rust/commit/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41419e70366962c9a878bfe673ef4df38db6f7f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/41419e70366962c9a878bfe673ef4df38db6f7f1", "html_url": "https://github.com/rust-lang/rust/commit/41419e70366962c9a878bfe673ef4df38db6f7f1"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "38e09f539ded14a054df13f0cb45b697489b76c6", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba", "patch": "@@ -435,16 +435,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             LocalRef::Place(place) => place,\n             LocalRef::UnsizedPlace(place) => bx.load_operand(place).deref(cx),\n             LocalRef::Operand(..) => {\n-                if let Some(elem) = place_ref\n-                    .projection\n-                    .iter()\n-                    .enumerate()\n-                    .find(|elem| matches!(elem.1, mir::ProjectionElem::Deref))\n-                {\n-                    base = elem.0 + 1;\n+                if place_ref.ret_deref().is_some() {\n+                    base = 1;\n                     let cg_base = self.codegen_consume(\n                         bx,\n-                        mir::PlaceRef { projection: &place_ref.projection[..elem.0], ..place_ref },\n+                        mir::PlaceRef { projection: &place_ref.projection[..0], ..place_ref },\n                     );\n \n                     cg_base.deref(bx.cx())"}, {"sha": "2a31441ec7b6daa40ff103094dbd9a9a220e4196", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba", "patch": "@@ -1461,6 +1461,16 @@ impl<'tcx> Place<'tcx> {\n         self.projection.iter().any(|elem| elem.is_indirect())\n     }\n \n+    /// If MirPhase >= Derefered and if projection contains Deref,\n+    /// It's guaranteed to be in the first place\n+    pub fn ret_deref(&self) -> Option<PlaceElem<'tcx>> {\n+        if !self.projection.is_empty() && self.projection[0] == PlaceElem::Deref {\n+            return Some(self.projection[0]);\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or\n     /// a single deref of a local.\n     #[inline(always)]\n@@ -1533,6 +1543,16 @@ impl<'tcx> PlaceRef<'tcx> {\n         }\n     }\n \n+    /// If MirPhase >= Derefered and if projection contains Deref,\n+    /// It's guaranteed to be in the first place\n+    pub fn ret_deref(&self) -> Option<PlaceElem<'tcx>> {\n+        if !self.projection.is_empty() && self.projection[0] == PlaceElem::Deref {\n+            return Some(self.projection[0]);\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// If this place represents a local variable like `_X` with no\n     /// projections, return `Some(_X)`.\n     #[inline]"}, {"sha": "b0cbcff600c59e78022cff126a5a9cc1a0629eee", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba", "patch": "@@ -15,22 +15,13 @@ pub struct AddRetag;\n /// (Concurrent accesses by other threads are no problem as these are anyway non-atomic\n /// copies.  Data races are UB.)\n fn is_stable(place: PlaceRef<'_>) -> bool {\n-    place.projection.iter().all(|elem| {\n-        match elem {\n-            // Which place this evaluates to can change with any memory write,\n-            // so cannot assume this to be stable.\n-            ProjectionElem::Deref => false,\n-            // Array indices are interesting, but MIR building generates a *fresh*\n-            // temporary for every array access, so the index cannot be changed as\n-            // a side-effect.\n-            ProjectionElem::Index { .. } |\n-            // The rest is completely boring, they just offset by a constant.\n-            ProjectionElem::Field { .. } |\n-            ProjectionElem::ConstantIndex { .. } |\n-            ProjectionElem::Subslice { .. } |\n-            ProjectionElem::Downcast { .. } => true,\n-        }\n-    })\n+    if place.ret_deref().is_some() {\n+        // Which place this evaluates to can change with any memory write,\n+        // so cannot assume deref to be stable.\n+        return false;\n+    } else {\n+        return true;\n+    }\n }\n \n /// Determine whether this type may contain a reference (or box), and thus needs retagging.\n@@ -91,10 +82,8 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n         };\n         let place_base_raw = |place: &Place<'tcx>| {\n             // If this is a `Deref`, get the type of what we are deref'ing.\n-            let deref_base =\n-                place.projection.iter().rposition(|p| matches!(p, ProjectionElem::Deref));\n-            if let Some(deref_base) = deref_base {\n-                let base_proj = &place.projection[..deref_base];\n+            if place.ret_deref().is_some() {\n+                let base_proj = &place.projection[..0];\n                 let ty = Place::ty_from(place.local, base_proj, &*local_decls, tcx).ty;\n                 ty.is_unsafe_ptr()\n             } else {"}]}