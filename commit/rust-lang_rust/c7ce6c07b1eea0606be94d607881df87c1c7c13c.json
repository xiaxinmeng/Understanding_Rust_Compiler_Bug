{"sha": "c7ce6c07b1eea0606be94d607881df87c1c7c13c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3Y2U2YzA3YjFlZWEwNjA2YmU5NGQ2MDc4ODFkZjg3YzFjN2MxM2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "public.oliver.schneider@kit.edu", "date": "2018-05-03T13:52:44Z"}, "committer": {"name": "Oliver Schneider", "email": "public.oliver.schneider@kit.edu", "date": "2018-05-03T13:52:44Z"}, "message": "Rustup field -> method transition of ..=", "tree": {"sha": "82164bcd70222a763a785e2c40a3ed756d13f313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82164bcd70222a763a785e2c40a3ed756d13f313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7ce6c07b1eea0606be94d607881df87c1c7c13c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ce6c07b1eea0606be94d607881df87c1c7c13c", "html_url": "https://github.com/rust-lang/rust/commit/c7ce6c07b1eea0606be94d607881df87c1c7c13c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7ce6c07b1eea0606be94d607881df87c1c7c13c/comments", "author": null, "committer": null, "parents": [{"sha": "8f1a98ff08f2729874bfbdeee643b86764d5ae03", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1a98ff08f2729874bfbdeee643b86764d5ae03", "html_url": "https://github.com/rust-lang/rust/commit/8f1a98ff08f2729874bfbdeee643b86764d5ae03"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "011d2f7b8a25e32b5a849cd777bfa818ad5cdbb8", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7ce6c07b1eea0606be94d607881df87c1c7c13c/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ce6c07b1eea0606be94d607881df87c1c7c13c/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=c7ce6c07b1eea0606be94d607881df87c1c7c13c", "patch": "@@ -69,6 +69,19 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n                 None\n             }\n         },\n+        hir::ExprCall(ref path, ref args) => if let hir::ExprPath(ref path) = path.node {\n+            if match_qpath(path, &paths::RANGE_INCLUSIVE_STD_NEW) || match_qpath(path, &paths::RANGE_INCLUSIVE_NEW) {\n+                Some(Range {\n+                    start: Some(&args[0]),\n+                    end: Some(&args[1]),\n+                    limits: ast::RangeLimits::Closed,\n+                })\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        },\n         hir::ExprStruct(ref path, ref fields, None) => if match_qpath(path, &paths::RANGE_FROM_STD)\n             || match_qpath(path, &paths::RANGE_FROM)\n         {\n@@ -77,12 +90,6 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n                 end: None,\n                 limits: ast::RangeLimits::HalfOpen,\n             })\n-        } else if match_qpath(path, &paths::RANGE_INCLUSIVE_STD) || match_qpath(path, &paths::RANGE_INCLUSIVE) {\n-            Some(Range {\n-                start: Some(get_field(\"start\", fields)?),\n-                end: Some(get_field(\"end\", fields)?),\n-                limits: ast::RangeLimits::Closed,\n-            })\n         } else if match_qpath(path, &paths::RANGE_STD) || match_qpath(path, &paths::RANGE) {\n             Some(Range {\n                 start: Some(get_field(\"start\", fields)?),"}, {"sha": "a1cb6670bc5e2d27055a291a63feb17e8ff23619", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7ce6c07b1eea0606be94d607881df87c1c7c13c/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ce6c07b1eea0606be94d607881df87c1c7c13c/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=c7ce6c07b1eea0606be94d607881df87c1c7c13c", "patch": "@@ -66,7 +66,9 @@ pub const RANGE_FROM_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FULL: [&str; 3] = [\"core\", \"ops\", \"RangeFull\"];\n pub const RANGE_FULL_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFull\"];\n pub const RANGE_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeInclusive\"];\n+pub const RANGE_INCLUSIVE_NEW: [&str; 4] = [\"core\", \"ops\", \"RangeInclusive\", \"new\"];\n pub const RANGE_INCLUSIVE_STD: [&str; 3] = [\"std\", \"ops\", \"RangeInclusive\"];\n+pub const RANGE_INCLUSIVE_STD_NEW: [&str; 4] = [\"std\", \"ops\", \"RangeInclusive\", \"new\"];\n pub const RANGE_STD: [&str; 3] = [\"std\", \"ops\", \"Range\"];\n pub const RANGE_TO: [&str; 3] = [\"core\", \"ops\", \"RangeTo\"];\n pub const RANGE_TO_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeToInclusive\"];"}, {"sha": "7ff0425ebb9c2bf3ef4cbd69276cfaf037b5ef38", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7ce6c07b1eea0606be94d607881df87c1c7c13c/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7ce6c07b1eea0606be94d607881df87c1c7c13c/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=c7ce6c07b1eea0606be94d607881df87c1c7c13c", "patch": "@@ -108,12 +108,6 @@ error: statement with no effect\n 76 |     5..6;\n    |     ^^^^^\n \n-error: statement with no effect\n-  --> $DIR/no_effect.rs:77:5\n-   |\n-77 |     5..=6;\n-   |     ^^^^^^\n-\n error: statement with no effect\n   --> $DIR/no_effect.rs:78:5\n    |\n@@ -278,5 +272,5 @@ error: statement can be reduced\n 116 |     FooString { s: String::from(\"blah\"), };\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `String::from(\"blah\");`\n \n-error: aborting due to 46 previous errors\n+error: aborting due to 45 previous errors\n "}, {"sha": "095ac7c0cc15b325b375925eff1b4927b78c513f", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7ce6c07b1eea0606be94d607881df87c1c7c13c/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ce6c07b1eea0606be94d607881df87c1c7c13c/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=c7ce6c07b1eea0606be94d607881df87c1c7c13c", "patch": "@@ -1,6 +1,6 @@\n #![warn(redundant_field_names)]\n #![allow(unused_variables)]\n-#![feature(inclusive_range, inclusive_range_fields)]\n+#![feature(inclusive_range, inclusive_range_fields, inclusive_range_methods)]\n \n #[macro_use]\n extern crate derive_new;\n@@ -53,6 +53,6 @@ fn main() {\n     let _ = RangeFrom { start: start };\n     let _ = RangeTo { end: end };\n     let _ = Range { start: start, end: end };\n-    let _ = RangeInclusive { start: start, end: end };\n+    let _ = RangeInclusive::new(start, end);\n     let _ = RangeToInclusive { end: end };\n }"}, {"sha": "d757f1871a781c4026b24485163b0cd050ef837f", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7ce6c07b1eea0606be94d607881df87c1c7c13c/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7ce6c07b1eea0606be94d607881df87c1c7c13c/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=c7ce6c07b1eea0606be94d607881df87c1c7c13c", "patch": "@@ -36,23 +36,11 @@ error: redundant field names in struct initialization\n 55 |     let _ = Range { start: start, end: end };\n    |                                   ^^^^^^^^ help: replace it with: `end`\n \n-error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:56:30\n-   |\n-56 |     let _ = RangeInclusive { start: start, end: end };\n-   |                              ^^^^^^^^^^^^ help: replace it with: `start`\n-\n-error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:56:44\n-   |\n-56 |     let _ = RangeInclusive { start: start, end: end };\n-   |                                            ^^^^^^^^ help: replace it with: `end`\n-\n error: redundant field names in struct initialization\n   --> $DIR/redundant_field_names.rs:57:32\n    |\n 57 |     let _ = RangeToInclusive { end: end };\n    |                                ^^^^^^^^ help: replace it with: `end`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n "}]}