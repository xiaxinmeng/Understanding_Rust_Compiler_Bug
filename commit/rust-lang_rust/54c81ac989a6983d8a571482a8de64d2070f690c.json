{"sha": "54c81ac989a6983d8a571482a8de64d2070f690c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YzgxYWM5ODlhNjk4M2Q4YTU3MTQ4MmE4ZGU2NGQyMDcwZjY5MGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-20T13:21:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T11:08:39Z"}, "message": "in a Use statement, exploit the fact that type and hence layout are the same for LHS and RHS", "tree": {"sha": "0e66feaf921ffe510176ef927515428628c30ff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e66feaf921ffe510176ef927515428628c30ff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54c81ac989a6983d8a571482a8de64d2070f690c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54c81ac989a6983d8a571482a8de64d2070f690c", "html_url": "https://github.com/rust-lang/rust/commit/54c81ac989a6983d8a571482a8de64d2070f690c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54c81ac989a6983d8a571482a8de64d2070f690c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad40479c5eb761d78b4b8b3ba0e411b217fb497", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad40479c5eb761d78b4b8b3ba0e411b217fb497", "html_url": "https://github.com/rust-lang/rust/commit/8ad40479c5eb761d78b4b8b3ba0e411b217fb497"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "0d7ad1460060b71890e437ffdafc51ac384f01a4", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/54c81ac989a6983d8a571482a8de64d2070f690c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c81ac989a6983d8a571482a8de64d2070f690c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=54c81ac989a6983d8a571482a8de64d2070f690c", "patch": "@@ -189,6 +189,22 @@ impl<'tcx> OpTy<'tcx> {\n     }\n }\n \n+// Use the existing layout if given (but sanity check in debug mode),\n+// or compute the layout.\n+#[inline(always)]\n+fn from_known_layout<'tcx>(\n+    layout: Option<TyLayout<'tcx>>,\n+    compute: impl FnOnce() -> EvalResult<'tcx, TyLayout<'tcx>>\n+) -> EvalResult<'tcx, TyLayout<'tcx>> {\n+    match layout {\n+        None => compute(),\n+        Some(layout) => {\n+            debug_assert_eq!(layout.ty, compute()?.ty);\n+            Ok(layout)\n+        }\n+    }\n+}\n+\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     /// Try reading a value in memory; this is interesting particularily for ScalarPair.\n     /// Return None if the layout does not permit loading this as a value.\n@@ -377,21 +393,25 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     }\n \n     // Evaluate a place with the goal of reading from it.  This lets us sometimes\n-    // avoid allocations.\n+    // avoid allocations.  If you already know the layout, you can pass it in\n+    // to avoid looking it up again.\n     fn eval_place_to_op(\n         &mut self,\n         mir_place: &mir::Place<'tcx>,\n+        layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx>> {\n         use rustc::mir::Place::*;\n         Ok(match *mir_place {\n             Local(mir::RETURN_PLACE) => return err!(ReadFromReturnPointer),\n             Local(local) => {\n                 let op = *self.frame().locals[local].access()?;\n-                OpTy { op, layout: self.layout_of_local(self.cur_frame(), local)? }\n+                let layout = from_known_layout(layout,\n+                    || self.layout_of_local(self.cur_frame(), local))?;\n+                OpTy { op, layout }\n             },\n \n             Projection(ref proj) => {\n-                let op = self.eval_place_to_op(&proj.base)?;\n+                let op = self.eval_place_to_op(&proj.base, None)?;\n                 self.operand_projection(op, &proj.elem)?\n             }\n \n@@ -406,17 +426,25 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     }\n \n     /// Evaluate the operand, returning a place where you can then find the data.\n-    pub fn eval_operand(&mut self, mir_op: &mir::Operand<'tcx>) -> EvalResult<'tcx, OpTy<'tcx>> {\n+    /// if you already know the layout, you can save two some table lookups\n+    /// by passing it in here.\n+    pub fn eval_operand(\n+        &mut self,\n+        mir_op: &mir::Operand<'tcx>,\n+        layout: Option<TyLayout<'tcx>>,\n+    ) -> EvalResult<'tcx, OpTy<'tcx>> {\n         use rustc::mir::Operand::*;\n         let op = match *mir_op {\n             // FIXME: do some more logic on `move` to invalidate the old location\n             Copy(ref place) |\n             Move(ref place) =>\n-                self.eval_place_to_op(place)?,\n+                self.eval_place_to_op(place, layout)?,\n \n             Constant(ref constant) => {\n-                let ty = self.monomorphize(mir_op.ty(self.mir(), *self.tcx), self.substs());\n-                let layout = self.layout_of(ty)?;\n+                let layout = from_known_layout(layout, || {\n+                    let ty = self.monomorphize(mir_op.ty(self.mir(), *self.tcx), self.substs());\n+                    self.layout_of(ty)\n+                })?;\n                 let op = self.const_value_to_op(constant.literal.val)?;\n                 OpTy { op, layout }\n             }\n@@ -431,7 +459,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         ops: &[mir::Operand<'tcx>],\n     ) -> EvalResult<'tcx, Vec<OpTy<'tcx>>> {\n         ops.into_iter()\n-            .map(|op| self.eval_operand(op))\n+            .map(|op| self.eval_operand(op, None))\n             .collect()\n     }\n \n@@ -473,7 +501,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         &mut self,\n         op: &mir::Operand<'tcx>,\n     ) -> EvalResult<'tcx, ValTy<'tcx>> {\n-        let op = self.eval_operand(op)?;\n+        let op = self.eval_operand(op, None)?;\n         self.read_value(op)\n     }\n     pub fn eval_operand_and_read_scalar("}, {"sha": "56281b6688e3148d9f01df09a129b3f374c30a8c", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54c81ac989a6983d8a571482a8de64d2070f690c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c81ac989a6983d8a571482a8de64d2070f690c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=54c81ac989a6983d8a571482a8de64d2070f690c", "patch": "@@ -141,7 +141,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         use rustc::mir::Rvalue::*;\n         match *rvalue {\n             Use(ref operand) => {\n-                let op = self.eval_operand(operand)?;\n+                // Avoid recomputing the layout\n+                let op = self.eval_operand(operand, Some(dest.layout))?;\n                 self.copy_op(op, dest)?;\n             }\n \n@@ -187,7 +188,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 };\n \n                 for (i, operand) in operands.iter().enumerate() {\n-                    let op = self.eval_operand(operand)?;\n+                    let op = self.eval_operand(operand, None)?;\n                     // Ignore zero-sized fields.\n                     if !op.layout.is_zst() {\n                         let field_index = active_field_index.unwrap_or(i);\n@@ -198,7 +199,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n \n             Repeat(ref operand, _) => {\n-                let op = self.eval_operand(operand)?;\n+                let op = self.eval_operand(operand, None)?;\n                 let dest = self.force_allocation(dest)?;\n                 let length = dest.len();\n \n@@ -260,7 +261,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n \n             Cast(kind, ref operand, cast_ty) => {\n                 debug_assert_eq!(self.monomorphize(cast_ty, self.substs()), dest.layout.ty);\n-                let src = self.eval_operand(operand)?;\n+                let src = self.eval_operand(operand, None)?;\n                 self.cast(src, kind, dest)?;\n             }\n "}, {"sha": "c8be3d1fbff2057a3f549d5b94acaa1a43573dd5", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54c81ac989a6983d8a571482a8de64d2070f690c/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c81ac989a6983d8a571482a8de64d2070f690c/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=54c81ac989a6983d8a571482a8de64d2070f690c", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 ref targets,\n                 ..\n             } => {\n-                let discr_val = self.eval_operand(discr)?;\n+                let discr_val = self.eval_operand(discr, None)?;\n                 let discr = self.read_value(discr_val)?;\n                 trace!(\"SwitchInt({:?})\", *discr);\n \n@@ -70,7 +70,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     None => None,\n                 };\n \n-                let func = self.eval_operand(func)?;\n+                let func = self.eval_operand(func, None)?;\n                 let (fn_def, sig) = match func.layout.ty.sty {\n                     ty::TyFnPtr(sig) => {\n                         let fn_ptr = self.read_scalar(func)?.to_ptr()?;"}]}