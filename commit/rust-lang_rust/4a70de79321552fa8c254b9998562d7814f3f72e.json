{"sha": "4a70de79321552fa8c254b9998562d7814f3f72e", "node_id": "C_kwDOAAsO6NoAKDRhNzBkZTc5MzIxNTUyZmE4YzI1NGI5OTk4NTYyZDc4MTRmM2Y3MmU", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-12-16T20:07:36Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:29Z"}, "message": "Handle reinits in match guards", "tree": {"sha": "5407bba69bf0a2efbb82f41b13f0ed137d81846d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5407bba69bf0a2efbb82f41b13f0ed137d81846d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a70de79321552fa8c254b9998562d7814f3f72e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a70de79321552fa8c254b9998562d7814f3f72e", "html_url": "https://github.com/rust-lang/rust/commit/4a70de79321552fa8c254b9998562d7814f3f72e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a70de79321552fa8c254b9998562d7814f3f72e/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2af02cf2c4061f517d5fc81591c9ae6b53225d24", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af02cf2c4061f517d5fc81591c9ae6b53225d24", "html_url": "https://github.com/rust-lang/rust/commit/2af02cf2c4061f517d5fc81591c9ae6b53225d24"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "0520931d5f6056d2aded1753e620c0b889ec3bda", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a70de79321552fa8c254b9998562d7814f3f72e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a70de79321552fa8c254b9998562d7814f3f72e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=4a70de79321552fa8c254b9998562d7814f3f72e", "patch": "@@ -133,11 +133,10 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n             ExprKind::Match(scrutinee, arms, ..) => {\n                 self.visit_expr(scrutinee);\n \n-                let fork = self.expr_index;\n-                let arm_end_ids = arms\n-                    .iter()\n-                    .map(|hir::Arm { pat, body, guard, .. }| {\n-                        self.drop_ranges.add_control_edge(fork, self.expr_index + 1);\n+                let (guard_exit, arm_end_ids) = arms.iter().fold(\n+                    (self.expr_index, vec![]),\n+                    |(incoming_edge, mut arm_end_ids), hir::Arm { pat, body, guard, .. }| {\n+                        self.drop_ranges.add_control_edge(incoming_edge, self.expr_index + 1);\n                         self.visit_pat(pat);\n                         match guard {\n                             Some(Guard::If(expr)) => self.visit_expr(expr),\n@@ -147,10 +146,16 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n                             }\n                             None => (),\n                         }\n+                        let to_next_arm = self.expr_index;\n+                        // The default edge does not get added since we also have an explicit edge,\n+                        // so we also need to add an edge to the next node as well.\n+                        self.drop_ranges.add_control_edge(self.expr_index, self.expr_index + 1);\n                         self.visit_expr(body);\n-                        self.expr_index\n-                    })\n-                    .collect::<Vec<_>>();\n+                        arm_end_ids.push(self.expr_index);\n+                        (to_next_arm, arm_end_ids)\n+                    },\n+                );\n+                self.drop_ranges.add_control_edge(guard_exit, self.expr_index + 1);\n                 arm_end_ids.into_iter().for_each(|arm_end| {\n                     self.drop_ranges.add_control_edge(arm_end, self.expr_index + 1)\n                 });"}, {"sha": "20aad7aedf77580e84e1f1e2a2caaa3dd0383fa6", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_visualize.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a70de79321552fa8c254b9998562d7814f3f72e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a70de79321552fa8c254b9998562d7814f3f72e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs?ref=4a70de79321552fa8c254b9998562d7814f3f72e", "patch": "@@ -5,6 +5,15 @@ use rustc_graphviz as dot;\n \n use super::{DropRangesBuilder, PostOrderId};\n \n+/// Writes the CFG for DropRangesBuilder to a .dot file for visualization.\n+///\n+/// It is not normally called, but is kept around to easily add debugging\n+/// code when needed.\n+#[allow(dead_code)]\n+pub(super) fn write_graph_to_file(drop_ranges: &DropRangesBuilder, filename: &str) {\n+    dot::render(drop_ranges, &mut std::fs::File::create(filename).unwrap()).unwrap();\n+}\n+\n impl<'a> dot::GraphWalk<'a> for DropRangesBuilder {\n     type Node = PostOrderId;\n "}, {"sha": "260b341a525252998d318274e104a66f7d2410bd", "filename": "src/test/ui/generator/reinit-in-match-guard.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4a70de79321552fa8c254b9998562d7814f3f72e/src%2Ftest%2Fui%2Fgenerator%2Freinit-in-match-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a70de79321552fa8c254b9998562d7814f3f72e/src%2Ftest%2Fui%2Fgenerator%2Freinit-in-match-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Freinit-in-match-guard.rs?ref=4a70de79321552fa8c254b9998562d7814f3f72e", "patch": "@@ -0,0 +1,25 @@\n+// build-pass\n+\n+#![feature(generators)]\n+\n+#![allow(unused_assignments, dead_code)]\n+\n+fn main() {\n+    let _ = || {\n+        let mut x = vec![22_usize];\n+        std::mem::drop(x);\n+        match y() {\n+            true if {\n+                x = vec![];\n+                false\n+            } => {}\n+            _ => {\n+                yield;\n+            }\n+        }\n+    };\n+}\n+\n+fn y() -> bool {\n+    true\n+}"}]}