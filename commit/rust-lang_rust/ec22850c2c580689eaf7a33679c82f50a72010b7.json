{"sha": "ec22850c2c580689eaf7a33679c82f50a72010b7", "node_id": "C_kwDOAAsO6NoAKGVjMjI4NTBjMmM1ODA2ODllYWY3YTMzNjc5YzgyZjUwYTcyMDEwYjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-04T16:27:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-04T16:27:43Z"}, "message": "Rollup merge of #109723 - oli-obk:ast_refactor, r=Nilstrieb\n\nPull some tuple variant fields out into their own struct\n\nThis is groundwork for adding more fields to those new structs, but I believe the change to be useful on its own.\n\nr? `@Nilstrieb` but feel free to reroll for `compiler`", "tree": {"sha": "2866f0a1aebf1f3b4824c2149e0975cfc93a7ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2866f0a1aebf1f3b4824c2149e0975cfc93a7ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec22850c2c580689eaf7a33679c82f50a72010b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkLE//CRBK7hj4Ov3rIwAA3UwIAKSuH5X4yNOR8i4LFdFa0T6p\nahSi1e3hjWpM41C6u/R7eX/feXOHmfbV/3NWxsSlyyz7/9QPfTSfQRsRe9dvw+7F\neoON+k/RXDHLc5uTmLQR9VGFTm1sUoc1hDbJgZZ+v4OoN+nftIPHmAAOnk9xwh5+\neibimsGS8Hu7BVnoF4Zsp+lGMLqZIJplY304VbPdTtU9WqMkDZPRlebBksFLksrg\nIVR/mAa7VeE1WofjmLiE6mClUARd/JKb+f1tVnvK+IoU6lqD6cTfmcfCEc9zy8sA\nkckCUwjJx3nBVws3FptNLa3V9sFZWLL5LaXp4xmwQKTF+DLAD3oGDy1owmoeXkA=\n=dEj+\n-----END PGP SIGNATURE-----\n", "payload": "tree 2866f0a1aebf1f3b4824c2149e0975cfc93a7ae3\nparent be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3\nparent 373807a95cc427bb2672c96cb00ce71d8a5f4040\nauthor Michael Goulet <michael@errs.io> 1680625663 -0700\ncommitter GitHub <noreply@github.com> 1680625663 -0700\n\nRollup merge of #109723 - oli-obk:ast_refactor, r=Nilstrieb\n\nPull some tuple variant fields out into their own struct\n\nThis is groundwork for adding more fields to those new structs, but I believe the change to be useful on its own.\n\nr? `@Nilstrieb` but feel free to reroll for `compiler`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec22850c2c580689eaf7a33679c82f50a72010b7", "html_url": "https://github.com/rust-lang/rust/commit/ec22850c2c580689eaf7a33679c82f50a72010b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec22850c2c580689eaf7a33679c82f50a72010b7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "html_url": "https://github.com/rust-lang/rust/commit/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3"}, {"sha": "373807a95cc427bb2672c96cb00ce71d8a5f4040", "url": "https://api.github.com/repos/rust-lang/rust/commits/373807a95cc427bb2672c96cb00ce71d8a5f4040", "html_url": "https://github.com/rust-lang/rust/commit/373807a95cc427bb2672c96cb00ce71d8a5f4040"}], "stats": {"total": 352, "additions": 202, "deletions": 150}, "files": [{"sha": "fb9d71b52a8a612d2fa7ae4c1d91e9382d3bfd41", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -2890,6 +2890,20 @@ pub struct Fn {\n     pub body: Option<P<Block>>,\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct StaticItem {\n+    pub ty: P<Ty>,\n+    pub mutability: Mutability,\n+    pub expr: Option<P<Expr>>,\n+}\n+\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct ConstItem {\n+    pub defaultness: Defaultness,\n+    pub ty: P<Ty>,\n+    pub expr: Option<P<Expr>>,\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum ItemKind {\n     /// An `extern crate` item, with the optional *original* crate name if the crate was renamed.\n@@ -2903,11 +2917,11 @@ pub enum ItemKind {\n     /// A static item (`static`).\n     ///\n     /// E.g., `static FOO: i32 = 42;` or `static FOO: &'static str = \"bar\";`.\n-    Static(P<Ty>, Mutability, Option<P<Expr>>),\n+    Static(Box<StaticItem>),\n     /// A constant item (`const`).\n     ///\n     /// E.g., `const FOO: i32 = 42;`.\n-    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n+    Const(Box<ConstItem>),\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n@@ -3023,7 +3037,7 @@ pub type AssocItem = Item<AssocItemKind>;\n pub enum AssocItemKind {\n     /// An associated constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n-    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n+    Const(Box<ConstItem>),\n     /// An associated function.\n     Fn(Box<Fn>),\n     /// An associated type.\n@@ -3035,7 +3049,7 @@ pub enum AssocItemKind {\n impl AssocItemKind {\n     pub fn defaultness(&self) -> Defaultness {\n         match *self {\n-            Self::Const(defaultness, ..)\n+            Self::Const(box ConstItem { defaultness, .. })\n             | Self::Fn(box Fn { defaultness, .. })\n             | Self::Type(box TyAlias { defaultness, .. }) => defaultness,\n             Self::MacCall(..) => Defaultness::Final,\n@@ -3046,7 +3060,7 @@ impl AssocItemKind {\n impl From<AssocItemKind> for ItemKind {\n     fn from(assoc_item_kind: AssocItemKind) -> ItemKind {\n         match assoc_item_kind {\n-            AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),\n+            AssocItemKind::Const(item) => ItemKind::Const(item),\n             AssocItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n             AssocItemKind::Type(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             AssocItemKind::MacCall(a) => ItemKind::MacCall(a),\n@@ -3059,7 +3073,7 @@ impl TryFrom<ItemKind> for AssocItemKind {\n \n     fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {\n         Ok(match item_kind {\n-            ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n+            ItemKind::Const(item) => AssocItemKind::Const(item),\n             ItemKind::Fn(fn_kind) => AssocItemKind::Fn(fn_kind),\n             ItemKind::TyAlias(ty_kind) => AssocItemKind::Type(ty_kind),\n             ItemKind::MacCall(a) => AssocItemKind::MacCall(a),\n@@ -3084,7 +3098,9 @@ pub enum ForeignItemKind {\n impl From<ForeignItemKind> for ItemKind {\n     fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {\n         match foreign_item_kind {\n-            ForeignItemKind::Static(a, b, c) => ItemKind::Static(a, b, c),\n+            ForeignItemKind::Static(a, b, c) => {\n+                ItemKind::Static(StaticItem { ty: a, mutability: b, expr: c }.into())\n+            }\n             ForeignItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n             ForeignItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             ForeignItemKind::MacCall(a) => ItemKind::MacCall(a),\n@@ -3097,7 +3113,9 @@ impl TryFrom<ItemKind> for ForeignItemKind {\n \n     fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {\n         Ok(match item_kind {\n-            ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n+            ItemKind::Static(box StaticItem { ty: a, mutability: b, expr: c }) => {\n+                ForeignItemKind::Static(a, b, c)\n+            }\n             ItemKind::Fn(fn_kind) => ForeignItemKind::Fn(fn_kind),\n             ItemKind::TyAlias(ty_alias_kind) => ForeignItemKind::TyAlias(ty_alias_kind),\n             ItemKind::MacCall(a) => ForeignItemKind::MacCall(a),\n@@ -3114,8 +3132,8 @@ mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n     // tidy-alphabetical-start\n-    static_assert_size!(AssocItem, 104);\n-    static_assert_size!(AssocItemKind, 32);\n+    static_assert_size!(AssocItem, 88);\n+    static_assert_size!(AssocItemKind, 16);\n     static_assert_size!(Attribute, 32);\n     static_assert_size!(Block, 32);\n     static_assert_size!(Expr, 72);"}, {"sha": "2424073ae53adae2bfb9b7f034e25f8ec70432dd", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -7,10 +7,10 @@\n //! a `MutVisitor` renaming item names in a module will miss all of those\n //! that are created by the expansion of a macro.\n \n-use crate::ast::*;\n use crate::ptr::P;\n use crate::token::{self, Token};\n use crate::tokenstream::*;\n+use crate::{ast::*, StaticItem};\n \n use rustc_data_structures::flat_map_in_place::FlatMapInPlace;\n use rustc_data_structures::sync::Lrc;\n@@ -1030,14 +1030,12 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     match kind {\n         ItemKind::ExternCrate(_orig_name) => {}\n         ItemKind::Use(use_tree) => vis.visit_use_tree(use_tree),\n-        ItemKind::Static(ty, _, expr) => {\n+        ItemKind::Static(box StaticItem { ty, mutability: _, expr }) => {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n-        ItemKind::Const(defaultness, ty, expr) => {\n-            visit_defaultness(defaultness, vis);\n-            vis.visit_ty(ty);\n-            visit_opt(expr, |expr| vis.visit_expr(expr));\n+        ItemKind::Const(item) => {\n+            visit_const_item(item, vis);\n         }\n         ItemKind::Fn(box Fn { defaultness, generics, sig, body }) => {\n             visit_defaultness(defaultness, vis);\n@@ -1120,10 +1118,8 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     match kind {\n-        AssocItemKind::Const(defaultness, ty, expr) => {\n-            visit_defaultness(defaultness, visitor);\n-            visitor.visit_ty(ty);\n-            visit_opt(expr, |expr| visitor.visit_expr(expr));\n+        AssocItemKind::Const(item) => {\n+            visit_const_item(item, visitor);\n         }\n         AssocItemKind::Fn(box Fn { defaultness, generics, sig, body }) => {\n             visit_defaultness(defaultness, visitor);\n@@ -1153,6 +1149,15 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     smallvec![item]\n }\n \n+fn visit_const_item<T: MutVisitor>(\n+    ConstItem { defaultness, ty, expr }: &mut ConstItem,\n+    visitor: &mut T,\n+) {\n+    visit_defaultness(defaultness, visitor);\n+    visitor.visit_ty(ty);\n+    visit_opt(expr, |expr| visitor.visit_expr(expr));\n+}\n+\n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n     let FnHeader { unsafety, asyncness, constness, ext: _ } = header;\n     visit_constness(constness, vis);"}, {"sha": "3b08467fde2bf6b8a7a598e7066589785245d305", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -13,7 +13,7 @@\n //! instance, a walker looking for item names in a module will miss all of\n //! those that are created by the expansion of a macro.\n \n-use crate::ast::*;\n+use crate::{ast::*, StaticItem};\n \n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n@@ -305,8 +305,9 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     match &item.kind {\n         ItemKind::ExternCrate(_) => {}\n         ItemKind::Use(use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n-        ItemKind::Static(typ, _, expr) | ItemKind::Const(_, typ, expr) => {\n-            visitor.visit_ty(typ);\n+        ItemKind::Static(box StaticItem { ty, mutability: _, expr })\n+        | ItemKind::Const(box ConstItem { ty, expr, .. }) => {\n+            visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n         ItemKind::Fn(box Fn { defaultness: _, generics, sig, body }) => {\n@@ -674,7 +675,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n     visitor.visit_ident(ident);\n     walk_list!(visitor, visit_attribute, attrs);\n     match kind {\n-        AssocItemKind::Const(_, ty, expr) => {\n+        AssocItemKind::Const(box ConstItem { ty, expr, .. }) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }"}, {"sha": "f89e254a2f54dc248bc61e192cc7f4e175a9f10a", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -229,12 +229,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis_span, ident, attrs)\n             }\n-            ItemKind::Static(t, m, e) => {\n+            ItemKind::Static(box ast::StaticItem { ty: t, mutability: m, expr: e }) => {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Static(ty, *m, body_id)\n             }\n-            ItemKind::Const(_, t, e) => {\n-                let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n+            ItemKind::Const(box ast::ConstItem { ty, expr, .. }) => {\n+                let (ty, body_id) = self.lower_const_item(ty, span, expr.as_deref());\n                 hir::ItemKind::Const(ty, body_id)\n             }\n             ItemKind::Fn(box Fn {\n@@ -708,10 +708,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let trait_item_def_id = hir_id.expect_owner();\n \n         let (generics, kind, has_default) = match &i.kind {\n-            AssocItemKind::Const(_, ty, default) => {\n+            AssocItemKind::Const(box ConstItem { ty, expr, .. }) => {\n                 let ty =\n                     self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n-                let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n+                let body = expr.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n             AssocItemKind::Fn(box Fn { sig, generics, body: None, .. }) => {\n@@ -809,7 +809,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.lower_attrs(hir_id, &i.attrs);\n \n         let (generics, kind) = match &i.kind {\n-            AssocItemKind::Const(_, ty, expr) => {\n+            AssocItemKind::Const(box ConstItem { ty, expr, .. }) => {\n                 let ty =\n                     self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n                 ("}, {"sha": "236ebd04ae88d9f3be07df343455107c7513f4ab", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -9,8 +9,8 @@\n use itertools::{Either, Itertools};\n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n-use rustc_ast::walk_list;\n use rustc_ast::*;\n+use rustc_ast::{walk_list, StaticItem};\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_macros::Subdiagnostic;\n@@ -983,14 +983,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.err_handler().emit_err(errors::FieldlessUnion { span: item.span });\n                 }\n             }\n-            ItemKind::Const(def, .., None) => {\n-                self.check_defaultness(item.span, *def);\n+            ItemKind::Const(box ConstItem { defaultness, expr: None, .. }) => {\n+                self.check_defaultness(item.span, *defaultness);\n                 self.session.emit_err(errors::ConstWithoutBody {\n                     span: item.span,\n                     replace_span: self.ending_semi_or_hi(item.span),\n                 });\n             }\n-            ItemKind::Static(.., None) => {\n+            ItemKind::Static(box StaticItem { expr: None, .. }) => {\n                 self.session.emit_err(errors::StaticWithoutBody {\n                     span: item.span,\n                     replace_span: self.ending_semi_or_hi(item.span),\n@@ -1259,13 +1259,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         if ctxt == AssocCtxt::Impl {\n             match &item.kind {\n-                AssocItemKind::Const(_, _, body) => {\n-                    if body.is_none() {\n-                        self.session.emit_err(errors::AssocConstWithoutBody {\n-                            span: item.span,\n-                            replace_span: self.ending_semi_or_hi(item.span),\n-                        });\n-                    }\n+                AssocItemKind::Const(box ConstItem { expr: None, .. }) => {\n+                    self.session.emit_err(errors::AssocConstWithoutBody {\n+                        span: item.span,\n+                        replace_span: self.ending_semi_or_hi(item.span),\n+                    });\n                 }\n                 AssocItemKind::Fn(box Fn { body, .. }) => {\n                     if body.is_none() {"}, {"sha": "c465f8c948a801ee468f3b6927d371fdd8218e26", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -2,6 +2,7 @@ use crate::pp::Breaks::Inconsistent;\n use crate::pprust::state::delimited::IterDelimited;\n use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n \n+use ast::StaticItem;\n use rustc_ast as ast;\n use rustc_ast::GenericBound;\n use rustc_ast::ModKind;\n@@ -156,7 +157,7 @@ impl<'a> State<'a> {\n                 self.print_use_tree(tree);\n                 self.word(\";\");\n             }\n-            ast::ItemKind::Static(ty, mutbl, body) => {\n+            ast::ItemKind::Static(box StaticItem { ty, mutability: mutbl, expr: body }) => {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(\n                     item.ident,\n@@ -167,8 +168,15 @@ impl<'a> State<'a> {\n                     def,\n                 );\n             }\n-            ast::ItemKind::Const(def, ty, body) => {\n-                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis, *def);\n+            ast::ItemKind::Const(box ast::ConstItem { defaultness, ty, expr }) => {\n+                self.print_item_const(\n+                    item.ident,\n+                    None,\n+                    ty,\n+                    expr.as_deref(),\n+                    &item.vis,\n+                    *defaultness,\n+                );\n             }\n             ast::ItemKind::Fn(box ast::Fn { defaultness, sig, generics, body }) => {\n                 self.print_fn_full(\n@@ -507,8 +515,8 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::Fn(box ast::Fn { defaultness, sig, generics, body }) => {\n                 self.print_fn_full(sig, ident, generics, vis, *defaultness, body.as_deref(), attrs);\n             }\n-            ast::AssocItemKind::Const(def, ty, body) => {\n-                self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n+            ast::AssocItemKind::Const(box ast::ConstItem { defaultness, ty, expr }) => {\n+                self.print_item_const(ident, None, ty, expr.as_deref(), vis, *defaultness);\n             }\n             ast::AssocItemKind::Type(box ast::TyAlias {\n                 defaultness,"}, {"sha": "866cc5adbf3b15b4b40a6029d15cdaf0e9414278", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -25,12 +25,12 @@ pub fn expand(\n     // FIXME - if we get deref patterns, use them to reduce duplication here\n     let (item, is_stmt, ty_span) =\n         if let Annotatable::Item(item) = &item\n-            && let ItemKind::Static(ty, ..) = &item.kind\n+            && let ItemKind::Static(box ast::StaticItem { ty, ..}) = &item.kind\n         {\n             (item, false, ecx.with_def_site_ctxt(ty.span))\n         } else if let Annotatable::Stmt(stmt) = &item\n             && let StmtKind::Item(item) = &stmt.kind\n-            && let ItemKind::Static(ty, ..) = &item.kind\n+            && let ItemKind::Static(box ast::StaticItem { ty, ..}) = &item.kind\n         {\n             (item, true, ecx.with_def_site_ctxt(ty.span))\n         } else {"}, {"sha": "a76ed4ee6cee35727467db0f5f5cbf6f563e5e0f", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -254,25 +254,27 @@ pub fn expand_test_or_bench(\n \n     let location_info = get_location_info(cx, &item);\n \n-    let mut test_const = cx.item(\n-        sp,\n-        Ident::new(item.ident.name, sp),\n-        thin_vec![\n-            // #[cfg(test)]\n-            cx.attr_nested_word(sym::cfg, sym::test, attr_sp),\n-            // #[rustc_test_marker = \"test_case_sort_key\"]\n-            cx.attr_name_value_str(sym::rustc_test_marker, test_path_symbol, attr_sp),\n-        ],\n-        // const $ident: test::TestDescAndFn =\n-        ast::ItemKind::Const(\n-            ast::Defaultness::Final,\n-            cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n-            // test::TestDescAndFn {\n-            Some(\n-                cx.expr_struct(\n-                    sp,\n-                    test_path(\"TestDescAndFn\"),\n-                    thin_vec![\n+    let mut test_const =\n+        cx.item(\n+            sp,\n+            Ident::new(item.ident.name, sp),\n+            thin_vec![\n+                // #[cfg(test)]\n+                cx.attr_nested_word(sym::cfg, sym::test, attr_sp),\n+                // #[rustc_test_marker = \"test_case_sort_key\"]\n+                cx.attr_name_value_str(sym::rustc_test_marker, test_path_symbol, attr_sp),\n+            ],\n+            // const $ident: test::TestDescAndFn =\n+            ast::ItemKind::Const(\n+                ast::ConstItem {\n+                    defaultness: ast::Defaultness::Final,\n+                    ty: cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n+                    // test::TestDescAndFn {\n+                    expr: Some(\n+                        cx.expr_struct(\n+                            sp,\n+                            test_path(\"TestDescAndFn\"),\n+                            thin_vec![\n                         // desc: test::TestDesc {\n                         field(\n                             \"desc\",\n@@ -359,10 +361,12 @@ pub fn expand_test_or_bench(\n                         // testfn: test::StaticTestFn(...) | test::StaticBenchFn(...)\n                         field(\"testfn\", test_fn), // }\n                     ],\n-                ), // }\n+                        ), // }\n+                    ),\n+                }\n+                .into(),\n             ),\n-        ),\n-    );\n+        );\n     test_const = test_const.map(|mut tc| {\n         tc.vis.kind = ast::VisibilityKind::Public;\n         tc"}, {"sha": "264f30fb10a124305e8fad61f49e357c757c6d86", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -620,10 +620,15 @@ impl<'a> ExtCtxt<'a> {\n         span: Span,\n         name: Ident,\n         ty: P<ast::Ty>,\n-        mutbl: ast::Mutability,\n+        mutability: ast::Mutability,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        self.item(span, name, AttrVec::new(), ast::ItemKind::Static(ty, mutbl, Some(expr)))\n+        self.item(\n+            span,\n+            name,\n+            AttrVec::new(),\n+            ast::ItemKind::Static(ast::StaticItem { ty, mutability, expr: Some(expr) }.into()),\n+        )\n     }\n \n     pub fn item_const(\n@@ -633,8 +638,13 @@ impl<'a> ExtCtxt<'a> {\n         ty: P<ast::Ty>,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        let def = ast::Defaultness::Final;\n-        self.item(span, name, AttrVec::new(), ast::ItemKind::Const(def, ty, Some(expr)))\n+        let defaultness = ast::Defaultness::Final;\n+        self.item(\n+            span,\n+            name,\n+            AttrVec::new(),\n+            ast::ItemKind::Const(ast::ConstItem { defaultness, ty, expr: Some(expr) }.into()),\n+        )\n     }\n \n     // Builds `#[name]`."}, {"sha": "ad328006051f1e3e7c4e5db3b091989352ce5c74", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -805,7 +805,9 @@ trait UnusedDelimLint {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         use ast::ItemKind::*;\n \n-        if let Const(.., Some(expr)) | Static(.., Some(expr)) = &item.kind {\n+        if let Const(box ast::ConstItem { expr: Some(expr), .. })\n+        | Static(box ast::StaticItem { expr: Some(expr), .. }) = &item.kind\n+        {\n             self.check_unused_delims_expr(\n                 cx,\n                 expr,"}, {"sha": "6422b8ac1ba458d58a4036865429451378923ed2", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -3,6 +3,7 @@ use crate::errors;\n use super::diagnostics::{dummy_arg, ConsumeClosingDelim};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n+use ast::StaticItem;\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n@@ -227,7 +228,7 @@ impl<'a> Parser<'a> {\n             self.bump(); // `static`\n             let m = self.parse_mutability();\n             let (ident, ty, expr) = self.parse_item_global(Some(m))?;\n-            (ident, ItemKind::Static(ty, m, expr))\n+            (ident, ItemKind::Static(Box::new(StaticItem { ty, mutability: m, expr })))\n         } else if let Const::Yes(const_span) = self.parse_constness(Case::Sensitive) {\n             // CONST ITEM\n             if self.token.is_keyword(kw::Impl) {\n@@ -236,7 +237,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.recover_const_mut(const_span);\n                 let (ident, ty, expr) = self.parse_item_global(None)?;\n-                (ident, ItemKind::Const(def_(), ty, expr))\n+                (ident, ItemKind::Const(Box::new(ConstItem { defaultness: def_(), ty, expr })))\n             }\n         } else if self.check_keyword(kw::Trait) || self.check_auto_or_unsafe_trait_item() {\n             // TRAIT ITEM\n@@ -862,9 +863,13 @@ impl<'a> Parser<'a> {\n                 let kind = match AssocItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Static(a, _, b) => {\n+                        ItemKind::Static(box StaticItem { ty, mutability: _, expr }) => {\n                             self.sess.emit_err(errors::AssociatedStaticItemNotAllowed { span });\n-                            AssocItemKind::Const(Defaultness::Final, a, b)\n+                            AssocItemKind::Const(Box::new(ConstItem {\n+                                defaultness: Defaultness::Final,\n+                                ty,\n+                                expr,\n+                            }))\n                         }\n                         _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n                     },\n@@ -1114,12 +1119,12 @@ impl<'a> Parser<'a> {\n                 let kind = match ForeignItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Const(_, a, b) => {\n+                        ItemKind::Const(box ConstItem { ty, expr, .. }) => {\n                             self.sess.emit_err(errors::ExternItemCannotBeConst {\n                                 ident_span: ident.span,\n                                 const_span: span.with_hi(ident.span.lo()),\n                             });\n-                            ForeignItemKind::Static(a, Mutability::Not, b)\n+                            ForeignItemKind::Static(ty, Mutability::Not, expr)\n                         }\n                         _ => return self.error_bad_item_kind(span, &kind, \"`extern` blocks\"),\n                     },"}, {"sha": "49c41470a1514c6174034c949e4ccd84d91d12e0", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -688,8 +688,8 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n             }\n \n             // These items live in the value namespace.\n-            ItemKind::Static(_, mt, _) => {\n-                let res = Res::Def(DefKind::Static(mt), def_id);\n+            ItemKind::Static(box ast::StaticItem { mutability, .. }) => {\n+                let res = Res::Def(DefKind::Static(mutability), def_id);\n                 self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));\n             }\n             ItemKind::Const(..) => {"}, {"sha": "19f46d45af678e8b8fa07194461239750085b77a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -2346,7 +2346,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 });\n             }\n \n-            ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {\n+            ItemKind::Static(box ast::StaticItem { ref ty, ref expr, .. })\n+            | ItemKind::Const(box ast::ConstItem { ref ty, ref expr, .. }) => {\n                 self.with_static_rib(|this| {\n                     this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n                         this.visit_ty(ty);\n@@ -2624,11 +2625,11 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         for item in trait_items {\n             self.resolve_doc_links(&item.attrs, MaybeExported::Ok(item.id));\n             match &item.kind {\n-                AssocItemKind::Const(_, ty, default) => {\n+                AssocItemKind::Const(box ast::ConstItem { ty, expr, .. }) => {\n                     self.visit_ty(ty);\n                     // Only impose the restrictions of `ConstRibKind` for an\n                     // actual constant expression in a provided default.\n-                    if let Some(expr) = default {\n+                    if let Some(expr) = expr {\n                         // We allow arbitrary const expressions inside of associated consts,\n                         // even if they are potentially not const evaluatable.\n                         //\n@@ -2799,7 +2800,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         use crate::ResolutionError::*;\n         self.resolve_doc_links(&item.attrs, MaybeExported::ImplItem(trait_id.ok_or(&item.vis)));\n         match &item.kind {\n-            AssocItemKind::Const(_, ty, default) => {\n+            AssocItemKind::Const(box ast::ConstItem { ty, expr, .. }) => {\n                 debug!(\"resolve_implementation AssocItemKind::Const\");\n                 // If this is a trait impl, ensure the const\n                 // exists in trait\n@@ -2814,7 +2815,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 );\n \n                 self.visit_ty(ty);\n-                if let Some(expr) = default {\n+                if let Some(expr) = expr {\n                     // We allow arbitrary const expressions inside of associated consts,\n                     // even if they are potentially not const evaluatable.\n                     //"}, {"sha": "11b908e7e53d1c3a79c7f7c92ffa3cafb4767928", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n+use rustc_ast::ast::{Item, ItemKind, Ty, TyKind, StaticItem, ConstItem};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -100,13 +100,13 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n         }\n \n         if !item.span.from_expansion() {\n-            if let ItemKind::Const(_, ref var_type, _) = item.kind {\n+            if let ItemKind::Const(box ConstItem { ty: ref var_type, .. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"constants have by default a `'static` lifetime\");\n                 // Don't check associated consts because `'static` cannot be elided on those (issue\n                 // #2438)\n             }\n \n-            if let ItemKind::Static(ref var_type, _, _) = item.kind {\n+            if let ItemKind::Static(box StaticItem { ty: ref var_type,.. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"statics have by default a `'static` lifetime\");\n             }\n         }"}, {"sha": "c5b58b0c060c0b32d812d78308d1d841209a28a1", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -286,8 +286,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Static(box ast::StaticItem { ty: lt, mutability: lm, expr: le}), Static(box ast::StaticItem { ty: rt, mutability: rm, expr: re})) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(box ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(box ast::ConstItem { defaultness: rd, ty: rt, expr: re} )) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,\n@@ -451,7 +451,7 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(box ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(box ast::ConstItem { defaultness: rd, ty: rt, expr: re})) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,"}, {"sha": "43779cfaecd3a7f1625d816e4f56da5983528dd1", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -1804,13 +1804,15 @@ pub(crate) struct StaticParts<'a> {\n \n impl<'a> StaticParts<'a> {\n     pub(crate) fn from_item(item: &'a ast::Item) -> Self {\n-        let (defaultness, prefix, ty, mutability, expr) = match item.kind {\n-            ast::ItemKind::Static(ref ty, mutability, ref expr) => {\n-                (None, \"static\", ty, mutability, expr)\n-            }\n-            ast::ItemKind::Const(defaultness, ref ty, ref expr) => {\n-                (Some(defaultness), \"const\", ty, ast::Mutability::Not, expr)\n-            }\n+        let (defaultness, prefix, ty, mutability, expr) = match &item.kind {\n+            ast::ItemKind::Static(s) => (None, \"static\", &s.ty, s.mutability, &s.expr),\n+            ast::ItemKind::Const(c) => (\n+                Some(c.defaultness),\n+                \"const\",\n+                &c.ty,\n+                ast::Mutability::Not,\n+                &c.expr,\n+            ),\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1826,10 +1828,8 @@ impl<'a> StaticParts<'a> {\n     }\n \n     pub(crate) fn from_trait_item(ti: &'a ast::AssocItem) -> Self {\n-        let (defaultness, ty, expr_opt) = match ti.kind {\n-            ast::AssocItemKind::Const(defaultness, ref ty, ref expr_opt) => {\n-                (defaultness, ty, expr_opt)\n-            }\n+        let (defaultness, ty, expr_opt) = match &ti.kind {\n+            ast::AssocItemKind::Const(c) => (c.defaultness, &c.ty, &c.expr),\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1845,8 +1845,8 @@ impl<'a> StaticParts<'a> {\n     }\n \n     pub(crate) fn from_impl_item(ii: &'a ast::AssocItem) -> Self {\n-        let (defaultness, ty, expr) = match ii.kind {\n-            ast::AssocItemKind::Const(defaultness, ref ty, ref expr) => (defaultness, ty, expr),\n+        let (defaultness, ty, expr) = match &ii.kind {\n+            ast::AssocItemKind::Const(c) => (c.defaultness, &c.ty, &c.expr),\n             _ => unreachable!(),\n         };\n         StaticParts {"}, {"sha": "d723ff538a8867bdf58781380e7c4700c19c2a3f", "filename": "tests/ui/stats/hir-stats.stderr", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ec22850c2c580689eaf7a33679c82f50a72010b7/tests%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec22850c2c580689eaf7a33679c82f50a72010b7/tests%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstats%2Fhir-stats.stderr?ref=ec22850c2c580689eaf7a33679c82f50a72010b7", "patch": "@@ -15,45 +15,45 @@ ast-stats-1 Arm                       96 ( 1.5%)             2            48\n ast-stats-1 ForeignItem               96 ( 1.5%)             1            96\n ast-stats-1 - Fn                        96 ( 1.5%)             1\n ast-stats-1 FnDecl                   120 ( 1.8%)             5            24\n-ast-stats-1 FieldDef                 160 ( 2.4%)             2            80\n-ast-stats-1 Stmt                     160 ( 2.4%)             5            32\n+ast-stats-1 FieldDef                 160 ( 2.5%)             2            80\n+ast-stats-1 Stmt                     160 ( 2.5%)             5            32\n ast-stats-1 - Local                     32 ( 0.5%)             1\n ast-stats-1 - MacCall                   32 ( 0.5%)             1\n ast-stats-1 - Expr                      96 ( 1.5%)             3\n-ast-stats-1 Param                    160 ( 2.4%)             4            40\n-ast-stats-1 Block                    192 ( 2.9%)             6            32\n+ast-stats-1 Param                    160 ( 2.5%)             4            40\n+ast-stats-1 Block                    192 ( 3.0%)             6            32\n ast-stats-1 Variant                  208 ( 3.2%)             2           104\n-ast-stats-1 GenericBound             224 ( 3.4%)             4            56\n-ast-stats-1 - Trait                    224 ( 3.4%)             4\n-ast-stats-1 AssocItem                416 ( 6.3%)             4           104\n-ast-stats-1 - Type                     208 ( 3.2%)             2\n-ast-stats-1 - Fn                       208 ( 3.2%)             2\n-ast-stats-1 GenericParam             480 ( 7.3%)             5            96\n-ast-stats-1 Pat                      504 ( 7.7%)             7            72\n+ast-stats-1 GenericBound             224 ( 3.5%)             4            56\n+ast-stats-1 - Trait                    224 ( 3.5%)             4\n+ast-stats-1 AssocItem                352 ( 5.4%)             4            88\n+ast-stats-1 - Type                     176 ( 2.7%)             2\n+ast-stats-1 - Fn                       176 ( 2.7%)             2\n+ast-stats-1 GenericParam             480 ( 7.4%)             5            96\n+ast-stats-1 Pat                      504 ( 7.8%)             7            72\n ast-stats-1 - Struct                    72 ( 1.1%)             1\n ast-stats-1 - Wild                      72 ( 1.1%)             1\n ast-stats-1 - Ident                    360 ( 5.5%)             5\n-ast-stats-1 Expr                     576 ( 8.8%)             8            72\n+ast-stats-1 Expr                     576 ( 8.9%)             8            72\n ast-stats-1 - Path                      72 ( 1.1%)             1\n ast-stats-1 - Match                     72 ( 1.1%)             1\n ast-stats-1 - Struct                    72 ( 1.1%)             1\n ast-stats-1 - Lit                      144 ( 2.2%)             2\n ast-stats-1 - Block                    216 ( 3.3%)             3\n-ast-stats-1 PathSegment              720 (11.0%)            30            24\n-ast-stats-1 Ty                       896 (13.7%)            14            64\n+ast-stats-1 PathSegment              720 (11.1%)            30            24\n+ast-stats-1 Ty                       896 (13.8%)            14            64\n ast-stats-1 - Ptr                       64 ( 1.0%)             1\n ast-stats-1 - Ref                       64 ( 1.0%)             1\n ast-stats-1 - ImplicitSelf             128 ( 2.0%)             2\n-ast-stats-1 - Path                     640 ( 9.8%)            10\n-ast-stats-1 Item                   1_224 (18.7%)             9           136\n+ast-stats-1 - Path                     640 ( 9.9%)            10\n+ast-stats-1 Item                   1_224 (18.9%)             9           136\n ast-stats-1 - Trait                    136 ( 2.1%)             1\n ast-stats-1 - Enum                     136 ( 2.1%)             1\n ast-stats-1 - ForeignMod               136 ( 2.1%)             1\n ast-stats-1 - Impl                     136 ( 2.1%)             1\n ast-stats-1 - Fn                       272 ( 4.2%)             2\n-ast-stats-1 - Use                      408 ( 6.2%)             3\n+ast-stats-1 - Use                      408 ( 6.3%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  6_552\n+ast-stats-1 Total                  6_488\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n@@ -65,55 +65,55 @@ ast-stats-2 ExprField                 48 ( 0.7%)             1            48\n ast-stats-2 WherePredicate            56 ( 0.8%)             1            56\n ast-stats-2 - BoundPredicate            56 ( 0.8%)             1\n ast-stats-2 Local                     72 ( 1.0%)             1            72\n-ast-stats-2 Arm                       96 ( 1.3%)             2            48\n-ast-stats-2 ForeignItem               96 ( 1.3%)             1            96\n-ast-stats-2 - Fn                        96 ( 1.3%)             1\n+ast-stats-2 Arm                       96 ( 1.4%)             2            48\n+ast-stats-2 ForeignItem               96 ( 1.4%)             1            96\n+ast-stats-2 - Fn                        96 ( 1.4%)             1\n ast-stats-2 InlineAsm                120 ( 1.7%)             1           120\n ast-stats-2 FnDecl                   120 ( 1.7%)             5            24\n ast-stats-2 Attribute                128 ( 1.8%)             4            32\n-ast-stats-2 - DocComment                32 ( 0.4%)             1\n-ast-stats-2 - Normal                    96 ( 1.3%)             3\n-ast-stats-2 FieldDef                 160 ( 2.2%)             2            80\n-ast-stats-2 Stmt                     160 ( 2.2%)             5            32\n-ast-stats-2 - Local                     32 ( 0.4%)             1\n-ast-stats-2 - Semi                      32 ( 0.4%)             1\n-ast-stats-2 - Expr                      96 ( 1.3%)             3\n-ast-stats-2 Param                    160 ( 2.2%)             4            40\n+ast-stats-2 - DocComment                32 ( 0.5%)             1\n+ast-stats-2 - Normal                    96 ( 1.4%)             3\n+ast-stats-2 FieldDef                 160 ( 2.3%)             2            80\n+ast-stats-2 Stmt                     160 ( 2.3%)             5            32\n+ast-stats-2 - Local                     32 ( 0.5%)             1\n+ast-stats-2 - Semi                      32 ( 0.5%)             1\n+ast-stats-2 - Expr                      96 ( 1.4%)             3\n+ast-stats-2 Param                    160 ( 2.3%)             4            40\n ast-stats-2 Block                    192 ( 2.7%)             6            32\n ast-stats-2 Variant                  208 ( 2.9%)             2           104\n-ast-stats-2 GenericBound             224 ( 3.1%)             4            56\n-ast-stats-2 - Trait                    224 ( 3.1%)             4\n-ast-stats-2 AssocItem                416 ( 5.8%)             4           104\n-ast-stats-2 - Type                     208 ( 2.9%)             2\n-ast-stats-2 - Fn                       208 ( 2.9%)             2\n-ast-stats-2 GenericParam             480 ( 6.7%)             5            96\n-ast-stats-2 Pat                      504 ( 7.0%)             7            72\n+ast-stats-2 GenericBound             224 ( 3.2%)             4            56\n+ast-stats-2 - Trait                    224 ( 3.2%)             4\n+ast-stats-2 AssocItem                352 ( 5.0%)             4            88\n+ast-stats-2 - Type                     176 ( 2.5%)             2\n+ast-stats-2 - Fn                       176 ( 2.5%)             2\n+ast-stats-2 GenericParam             480 ( 6.8%)             5            96\n+ast-stats-2 Pat                      504 ( 7.1%)             7            72\n ast-stats-2 - Struct                    72 ( 1.0%)             1\n ast-stats-2 - Wild                      72 ( 1.0%)             1\n-ast-stats-2 - Ident                    360 ( 5.0%)             5\n+ast-stats-2 - Ident                    360 ( 5.1%)             5\n ast-stats-2 Expr                     648 ( 9.1%)             9            72\n ast-stats-2 - Path                      72 ( 1.0%)             1\n ast-stats-2 - Match                     72 ( 1.0%)             1\n ast-stats-2 - Struct                    72 ( 1.0%)             1\n ast-stats-2 - InlineAsm                 72 ( 1.0%)             1\n ast-stats-2 - Lit                      144 ( 2.0%)             2\n ast-stats-2 - Block                    216 ( 3.0%)             3\n-ast-stats-2 PathSegment              792 (11.1%)            33            24\n-ast-stats-2 Ty                       896 (12.5%)            14            64\n+ast-stats-2 PathSegment              792 (11.2%)            33            24\n+ast-stats-2 Ty                       896 (12.6%)            14            64\n ast-stats-2 - Ptr                       64 ( 0.9%)             1\n ast-stats-2 - Ref                       64 ( 0.9%)             1\n ast-stats-2 - ImplicitSelf             128 ( 1.8%)             2\n-ast-stats-2 - Path                     640 ( 8.9%)            10\n-ast-stats-2 Item                   1_496 (20.9%)            11           136\n+ast-stats-2 - Path                     640 ( 9.0%)            10\n+ast-stats-2 Item                   1_496 (21.1%)            11           136\n ast-stats-2 - Trait                    136 ( 1.9%)             1\n ast-stats-2 - Enum                     136 ( 1.9%)             1\n ast-stats-2 - ExternCrate              136 ( 1.9%)             1\n ast-stats-2 - ForeignMod               136 ( 1.9%)             1\n ast-stats-2 - Impl                     136 ( 1.9%)             1\n ast-stats-2 - Fn                       272 ( 3.8%)             2\n-ast-stats-2 - Use                      544 ( 7.6%)             4\n+ast-stats-2 - Use                      544 ( 7.7%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  7_152\n+ast-stats-2 Total                  7_088\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}]}