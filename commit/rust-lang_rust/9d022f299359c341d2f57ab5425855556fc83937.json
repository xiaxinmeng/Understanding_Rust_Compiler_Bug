{"sha": "9d022f299359c341d2f57ab5425855556fc83937", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMDIyZjI5OTM1OWMzNDFkMmY1N2FiNTQyNTg1NTU1NmZjODM5Mzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-20T21:47:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:49:24Z"}, "message": "rewrite span-length to include strings\n\nIt is way easier to copy-and-paste strings from the output\nthan to figure out how to reproduce them from first\nprinciples.", "tree": {"sha": "b241e692435deb8b7398ba14b3c0327cf9074efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b241e692435deb8b7398ba14b3c0327cf9074efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d022f299359c341d2f57ab5425855556fc83937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d022f299359c341d2f57ab5425855556fc83937", "html_url": "https://github.com/rust-lang/rust/commit/9d022f299359c341d2f57ab5425855556fc83937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d022f299359c341d2f57ab5425855556fc83937/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47143945cc3bc8ec67f67609df13ccd4bb1a3bf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/47143945cc3bc8ec67f67609df13ccd4bb1a3bf5", "html_url": "https://github.com/rust-lang/rust/commit/47143945cc3bc8ec67f67609df13ccd4bb1a3bf5"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "f3bfe083016e7823f407f05c36b6578f14354a6f", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9d022f299359c341d2f57ab5425855556fc83937/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d022f299359c341d2f57ab5425855556fc83937/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=9d022f299359c341d2f57ab5425855556fc83937", "patch": "@@ -65,8 +65,8 @@ fn main() {\n \n         let err = String::from_utf8_lossy(&result.stderr);\n \n-        // the span should end the line (e.g no extra ~'s)\n-        let expected_span = format!(\"^{}\\n\", repeat(\"~\").take(n - 1)\n+        // the span should end the line (e.g no extra ^'s)\n+        let expected_span = format!(\"^{}\\n\", repeat(\"^\").take(n - 1)\n                                                         .collect::<String>());\n         assert!(err.contains(&expected_span));\n     }\n@@ -91,17 +91,19 @@ fn main() {\n \n     // Test both the length of the snake and the leading spaces up to it\n \n-    // First snake is 8 ~s long, with 7 preceding spaces (excluding file name/line offset)\n-    let expected_span = format!(\"\\n{}^{}\\n\",\n-                                repeat(\" \").take(offset + 7).collect::<String>(),\n-                                repeat(\"~\").take(8).collect::<String>());\n-    assert!(err.contains(&expected_span));\n-    // Second snake is only 7 ~s long, with 36 preceding spaces,\n-    // because rustc counts chars() now rather than width(). This\n-    // is because width() functions are to be removed from\n-    // librustc_unicode\n-    let expected_span = format!(\"\\n{}^{}\\n\",\n-                                repeat(\" \").take(offset + 36).collect::<String>(),\n-                                repeat(\"~\").take(7).collect::<String>());\n-    assert!(err.contains(&expected_span));\n+    // First snake is 9 ^s long.\n+    let expected_1 = r#\"\n+1 |> extern \"\uf937\uf922\uf92ba\u0301\u0301\u0301\" fn foo() {} extern \"\uf937\uf922\uf92ba\u0301\u0301\" fn bar() {}\n+  |>        ^^^^^^^^^\n+\"#;\n+    assert!(err.contains(&expected_1));\n+\n+    // Second snake is only 8 ^s long, because rustc counts chars()\n+    // now rather than width(). This is because width() functions are\n+    // to be removed from librustc_unicode\n+    let expected_2 = r#\"\n+1 |> extern \"\uf937\uf922\uf92ba\u0301\u0301\u0301\" fn foo() {} extern \"\uf937\uf922\uf92ba\u0301\u0301\" fn bar() {}\n+  |>                                     ^^^^^^^^\n+\"#;\n+    assert!(err.contains(&expected_2));\n }"}]}