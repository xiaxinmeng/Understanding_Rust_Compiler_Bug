{"sha": "fac84e8bb65349e3b26cb5c4e7acf7694b8e6659", "node_id": "C_kwDOAAsO6NoAKGZhYzg0ZThiYjY1MzQ5ZTNiMjZjYjVjNGU3YWNmNzY5NGI4ZTY2NTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-09T12:04:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T12:04:55Z"}, "message": "Rollup merge of #100228 - luqmana:suggestion-ice, r=estebank\n\nDon't ICE while suggesting updating item path.\n\nWhen an item isn't found, we may suggest an appropriate import to `use`. Along with that, we also suggest updating the path to work with the `use`. Unfortunately, if the code in question originates from a macro, the span used to indicate which part of the path needs updating may not be suitable and cause an ICE (*). Since, such code is not adjustable directly by the user without modifying the macro, just skip the suggestion in such cases.\n\n(*) The ICE happens because the emitter want to indicate to the user what code to delete by referencing a certain span. But in this case, said span has `lo == hi == 0` which means it thinks it's a dummy span. Adding a space before the proc macro attribute is enough to stop it from ICE'ing but even then the suggestion doesn't really make any sense:\n```\nhelp: if you import `DataStore`, refer to it directly\n  |\n1 -  #[dbstruct::dbstruct]\n1 +  #[dbstruct::dbstruct]\n```\n\nSince suggestions are best-effort, I just gated this one on `can_be_used_for_suggestions` which catches cases like this.\n\nFixes #100199", "tree": {"sha": "d6a0fadda3123fb980d5bb4fb9599650cd0f03ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6a0fadda3123fb980d5bb4fb9599650cd0f03ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8k1nCRBK7hj4Ov3rIwAAZDAIAFld3H5xnAO7tA18Yx+nMq2J\nC5S4pzlnJqisdeGI544OQYlupTa6/oCyvjKTVce4lnvo81quF3JRYINJHRP8bOaa\nZ8eFG4HCqZxi89S/IvLjMeOqWNl8/3TiE38xAy7MXPBoRRU/RndXmuFzcedIXLwE\n+Oagm4/dD/lP273uQsoYirYiBLEqpPHETb1pMtFLEUR0/WVp/2Pxcv2H4RTAcZtb\n40q+vQHx94VNLrvIrTmRz8IiR94jvupmKnIWgMzcp6pD5FWE/76d28eo+FYQdISp\nh0TnuQpQIGqXsv5utdSt24Mp7ylWNTnpBpsp1Qtp5kcTf/eynTFd2C552nJuDsA=\n=cY3z\n-----END PGP SIGNATURE-----\n", "payload": "tree d6a0fadda3123fb980d5bb4fb9599650cd0f03ed\nparent d910e5376b69d232071b8eeed4d65e703e13a82b\nparent 15b1daaca3fd4020d7a93cff14507b9104ec6d02\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660046695 +0530\ncommitter GitHub <noreply@github.com> 1660046695 +0530\n\nRollup merge of #100228 - luqmana:suggestion-ice, r=estebank\n\nDon't ICE while suggesting updating item path.\n\nWhen an item isn't found, we may suggest an appropriate import to `use`. Along with that, we also suggest updating the path to work with the `use`. Unfortunately, if the code in question originates from a macro, the span used to indicate which part of the path needs updating may not be suitable and cause an ICE (*). Since, such code is not adjustable directly by the user without modifying the macro, just skip the suggestion in such cases.\n\n(*) The ICE happens because the emitter want to indicate to the user what code to delete by referencing a certain span. But in this case, said span has `lo == hi == 0` which means it thinks it's a dummy span. Adding a space before the proc macro attribute is enough to stop it from ICE'ing but even then the suggestion doesn't really make any sense:\n```\nhelp: if you import `DataStore`, refer to it directly\n  |\n1 -  #[dbstruct::dbstruct]\n1 +  #[dbstruct::dbstruct]\n```\n\nSince suggestions are best-effort, I just gated this one on `can_be_used_for_suggestions` which catches cases like this.\n\nFixes #100199\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659", "html_url": "https://github.com/rust-lang/rust/commit/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d910e5376b69d232071b8eeed4d65e703e13a82b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d910e5376b69d232071b8eeed4d65e703e13a82b", "html_url": "https://github.com/rust-lang/rust/commit/d910e5376b69d232071b8eeed4d65e703e13a82b"}, {"sha": "15b1daaca3fd4020d7a93cff14507b9104ec6d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/15b1daaca3fd4020d7a93cff14507b9104ec6d02", "html_url": "https://github.com/rust-lang/rust/commit/15b1daaca3fd4020d7a93cff14507b9104ec6d02"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "325b0458638af1712904cc1e05edaf0c2259bfc4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=fac84e8bb65349e3b26cb5c4e7acf7694b8e6659", "patch": "@@ -2544,12 +2544,15 @@ fn show_candidates(\n                 Applicability::MaybeIncorrect,\n             );\n             if let [first, .., last] = &path[..] {\n-                err.span_suggestion_verbose(\n-                    first.ident.span.until(last.ident.span),\n-                    &format!(\"if you import `{}`, refer to it directly\", last.ident),\n-                    \"\",\n-                    Applicability::Unspecified,\n-                );\n+                let sp = first.ident.span.until(last.ident.span);\n+                if sp.can_be_used_for_suggestions() {\n+                    err.span_suggestion_verbose(\n+                        sp,\n+                        &format!(\"if you import `{}`, refer to it directly\", last.ident),\n+                        \"\",\n+                        Applicability::Unspecified,\n+                    );\n+                }\n             }\n         } else {\n             msg.push(':');"}, {"sha": "9e190b542db49d438e79e22717355b363d538767", "filename": "src/test/ui/macros/auxiliary/issue-100199.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-100199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-100199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-100199.rs?ref=fac84e8bb65349e3b26cb5c4e7acf7694b8e6659", "patch": "@@ -0,0 +1,18 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_quote)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{quote, Ident, Span, TokenStream, TokenTree};\n+\n+#[proc_macro_attribute]\n+pub fn struct_with_bound(_: TokenStream, _: TokenStream) -> TokenStream {\n+    let crate_ident = TokenTree::Ident(Ident::new(\"crate\", Span::call_site()));\n+    let trait_ident = TokenTree::Ident(Ident::new(\"MyTrait\", Span::call_site()));\n+    quote!(\n+        struct Foo<T: $crate_ident::$trait_ident> {}\n+    )\n+}"}, {"sha": "6e50afa075984b181f266a0aea8ca93dee13bcfe", "filename": "src/test/ui/macros/issue-100199.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.rs?ref=fac84e8bb65349e3b26cb5c4e7acf7694b8e6659", "patch": "@@ -0,0 +1,16 @@\n+#[issue_100199::struct_with_bound] //~ ERROR cannot find trait `MyTrait` in the crate root\n+struct Foo {}\n+// The above must be on the first line so that it's span points to pos 0.\n+// This used to trigger an ICE because the diagnostic emitter would get\n+// an unexpected dummy span (lo == 0 == hi) while attempting to print a\n+// suggestion.\n+\n+// aux-build: issue-100199.rs\n+\n+extern crate issue_100199;\n+\n+mod traits {\n+    pub trait MyTrait {}\n+}\n+\n+fn main() {}"}, {"sha": "2cb45dc12473ef52311aeb7cfa4bda97292a1a54", "filename": "src/test/ui/macros/issue-100199.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fac84e8bb65349e3b26cb5c4e7acf7694b8e6659/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-100199.stderr?ref=fac84e8bb65349e3b26cb5c4e7acf7694b8e6659", "patch": "@@ -0,0 +1,15 @@\n+error[E0405]: cannot find trait `MyTrait` in the crate root\n+  --> $DIR/issue-100199.rs:1:1\n+   |\n+LL | #[issue_100199::struct_with_bound]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in the crate root\n+   |\n+   = note: this error originates in the attribute macro `issue_100199::struct_with_bound` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider importing this trait\n+   |\n+LL | use traits::MyTrait;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0405`."}]}