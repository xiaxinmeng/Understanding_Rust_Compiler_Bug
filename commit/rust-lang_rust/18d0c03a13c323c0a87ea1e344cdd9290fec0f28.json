{"sha": "18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZDBjMDNhMTNjMzIzYzBhODdlYTFlMzQ0Y2RkOTI5MGZlYzBmMjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-02T16:24:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T16:24:29Z"}, "message": "Rollup merge of #64581 - ztlpn:fix-ok-wrapping-unreachable-code, r=Centril\n\nFix unreachable_code warnings for try{} block ok-wrapped expressions\n\nFixes #54165 and fixes #63324.", "tree": {"sha": "870f6de8ae94d766975e7383a4cb96e6772e04b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/870f6de8ae94d766975e7383a4cb96e6772e04b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlM89CRBK7hj4Ov3rIwAAdHIIAB5ZrDcYAiHWcxjCzQZoI4pA\n14OG/A9CgOYlkDbiwHlhIGBqlrGctpnIp0fj7qBE0hIxhdDWLX4tNbi9GkWsm/Se\nIDTnsoFlgRXZzWs9GzsxgglDbyjtwPChb7ChLd3GfiPecnyJMb1NvOU16YU4bzwK\n9cUBZIRjiksC894QpL6pW10PrADbmYbfNUcvKZGdi6gGoyL8kTQykZPElt/DrKZF\nrpt67/G5LvN2aOUgcf9cayoakTERPmXuDXhJNrZpD2E8J4WOUvjK67C8PZU8UZKb\nWzP+DqPDzIjqZAmPLHSMKQBc2y5yWs2BywYVkfMlBKBXXvMgUTEBo/4/V8kfUVY=\n=O0n2\n-----END PGP SIGNATURE-----\n", "payload": "tree 870f6de8ae94d766975e7383a4cb96e6772e04b2\nparent f2023ac599c38a59f86552089e6791c5a73412d3\nparent 75fdb959321dc04acb70bed73fe8cc84e85ae135\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570033469 +0200\ncommitter GitHub <noreply@github.com> 1570033469 +0200\n\nRollup merge of #64581 - ztlpn:fix-ok-wrapping-unreachable-code, r=Centril\n\nFix unreachable_code warnings for try{} block ok-wrapped expressions\n\nFixes #54165 and fixes #63324.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "html_url": "https://github.com/rust-lang/rust/commit/18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2023ac599c38a59f86552089e6791c5a73412d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2023ac599c38a59f86552089e6791c5a73412d3", "html_url": "https://github.com/rust-lang/rust/commit/f2023ac599c38a59f86552089e6791c5a73412d3"}, {"sha": "75fdb959321dc04acb70bed73fe8cc84e85ae135", "url": "https://api.github.com/repos/rust-lang/rust/commits/75fdb959321dc04acb70bed73fe8cc84e85ae135", "html_url": "https://github.com/rust-lang/rust/commit/75fdb959321dc04acb70bed73fe8cc84e85ae135"}], "stats": {"total": 174, "additions": 161, "deletions": 13}, "files": [{"sha": "db5b197c5d67355c4d01fc1a96399121ca472879", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "patch": "@@ -392,32 +392,49 @@ impl LoweringContext<'_> {\n         )\n     }\n \n+    /// Desugar `try { <stmts>; <expr> }` into `{ <stmts>; ::std::ops::Try::from_ok(<expr>) }`,\n+    /// `try { <stmts>; }` into `{ <stmts>; ::std::ops::Try::from_ok(()) }`\n+    /// and save the block id to use it as a break target for desugaring of the `?` operator.\n     fn lower_expr_try_block(&mut self, body: &Block) -> hir::ExprKind {\n         self.with_catch_scope(body.id, |this| {\n-            let unstable_span = this.mark_span_with_reason(\n+            let mut block = this.lower_block(body, true).into_inner();\n+\n+            let try_span = this.mark_span_with_reason(\n                 DesugaringKind::TryBlock,\n                 body.span,\n                 this.allow_try_trait.clone(),\n             );\n-            let mut block = this.lower_block(body, true).into_inner();\n-            let tail = block.expr.take().map_or_else(\n-                || this.expr_unit(this.sess.source_map().end_point(unstable_span)),\n+\n+            // Final expression of the block (if present) or `()` with span at the end of block\n+            let tail_expr = block.expr.take().map_or_else(\n+                || this.expr_unit(this.sess.source_map().end_point(try_span)),\n                 |x: P<hir::Expr>| x.into_inner(),\n             );\n-            block.expr = Some(this.wrap_in_try_constructor(sym::from_ok, tail, unstable_span));\n+\n+            let ok_wrapped_span = this.mark_span_with_reason(\n+                DesugaringKind::TryBlock,\n+                tail_expr.span,\n+                None\n+            );\n+\n+            // `::std::ops::Try::from_ok($tail_expr)`\n+            block.expr = Some(this.wrap_in_try_constructor(\n+                sym::from_ok, try_span, tail_expr, ok_wrapped_span));\n+\n             hir::ExprKind::Block(P(block), None)\n         })\n     }\n \n     fn wrap_in_try_constructor(\n         &mut self,\n         method: Symbol,\n-        e: hir::Expr,\n-        unstable_span: Span,\n+        method_span: Span,\n+        expr: hir::Expr,\n+        overall_span: Span,\n     ) -> P<hir::Expr> {\n         let path = &[sym::ops, sym::Try, method];\n-        let from_err = P(self.expr_std_path(unstable_span, path, None, ThinVec::new()));\n-        P(self.expr_call(e.span, from_err, hir_vec![e]))\n+        let constructor = P(self.expr_std_path(method_span, path, None, ThinVec::new()));\n+        P(self.expr_call(overall_span, constructor, hir_vec![expr]))\n     }\n \n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm {\n@@ -1244,7 +1261,7 @@ impl LoweringContext<'_> {\n                 self.expr_call_std_path(try_span, from_path, hir_vec![err_expr])\n             };\n             let from_err_expr =\n-                self.wrap_in_try_constructor(sym::from_error, from_expr, unstable_span);\n+                self.wrap_in_try_constructor(sym::from_error, unstable_span, from_expr, try_span);\n             let thin_attrs = ThinVec::from(attrs);\n             let catch_scope = self.catch_scopes.last().map(|x| *x);\n             let ret_expr = if let Some(catch_node) = catch_scope {"}, {"sha": "9b4d88a5a09671cb283c93f200cc5f1ffc658adb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "patch": "@@ -861,7 +861,7 @@ pub struct Block {\n     pub span: Span,\n     /// If true, then there may exist `break 'a` values that aim to\n     /// break out of this block early.\n-    /// Used by `'label: {}` blocks and by `catch` statements.\n+    /// Used by `'label: {}` blocks and by `try {}` blocks.\n     pub targeted_by_break: bool,\n }\n "}, {"sha": "7a6fe9560fbfff4a6ed5fb4d182090df8ec73133", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "patch": "@@ -18,6 +18,7 @@ use crate::util::nodemap::FxHashMap;\n use crate::astconv::AstConv as _;\n \n use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use syntax_pos::hygiene::DesugaringKind;\n use syntax::ast;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::source_map::Span;\n@@ -150,8 +151,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\">> type-checking: expr={:?} expected={:?}\",\n                expr, expected);\n \n+        // True if `expr` is a `Try::from_ok(())` that is a result of desugaring a try block\n+        // without the final expr (e.g. `try { return; }`). We don't want to generate an\n+        // unreachable_code lint for it since warnings for autogenerated code are confusing.\n+        let is_try_block_generated_unit_expr = match expr.kind {\n+            ExprKind::Call(_, ref args) if expr.span.is_desugaring(DesugaringKind::TryBlock) =>\n+                args.len() == 1 && args[0].span.is_desugaring(DesugaringKind::TryBlock),\n+\n+            _ => false,\n+        };\n+\n         // Warn for expressions after diverging siblings.\n-        self.warn_if_unreachable(expr.hir_id, expr.span, \"expression\");\n+        if !is_try_block_generated_unit_expr {\n+            self.warn_if_unreachable(expr.hir_id, expr.span, \"expression\");\n+        }\n \n         // Hide the outer diverging and has_errors flags.\n         let old_diverges = self.diverges.get();\n@@ -164,6 +177,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Warn for non-block expressions with diverging children.\n         match expr.kind {\n             ExprKind::Block(..) | ExprKind::Loop(..) | ExprKind::Match(..) => {},\n+            // If `expr` is a result of desugaring the try block and is an ok-wrapped\n+            // diverging expression (e.g. it arose from desugaring of `try { return }`),\n+            // we skip issuing a warning because it is autogenerated code.\n+            ExprKind::Call(..) if expr.span.is_desugaring(DesugaringKind::TryBlock) => {},\n             ExprKind::Call(ref callee, _) =>\n                 self.warn_if_unreachable(expr.hir_id, callee.span, \"call\"),\n             ExprKind::MethodCall(_, ref span, _) =>"}, {"sha": "3ab474d16b864ec441c5e132f31f35826a5a0018", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "patch": "@@ -473,7 +473,7 @@ pub enum Diverges {\n     WarnedAlways\n }\n \n-// Convenience impls for combinig `Diverges`.\n+// Convenience impls for combining `Diverges`.\n \n impl ops::BitAnd for Diverges {\n     type Output = Self;"}, {"sha": "5a9f662d229b297a49d6586a84714347d97d66ca", "filename": "src/test/ui/try-block/try-block-unreachable-code-lint.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.rs?ref=18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "patch": "@@ -0,0 +1,76 @@\n+// Test unreachable_code lint for `try {}` block ok-wrapping. See issues #54165, #63324.\n+\n+// compile-flags: --edition 2018\n+// check-pass\n+#![feature(try_blocks)]\n+#![warn(unreachable_code)]\n+\n+fn err() -> Result<u32, ()> {\n+    Err(())\n+}\n+\n+// In the following cases unreachable code is autogenerated and should not be reported.\n+\n+fn test_ok_wrapped_divergent_expr_1() {\n+    let res: Result<u32, ()> = try {\n+        loop {\n+            err()?;\n+        }\n+    };\n+    println!(\"res: {:?}\", res);\n+}\n+\n+fn test_ok_wrapped_divergent_expr_2() {\n+    let _: Result<u32, ()> = try {\n+        return\n+    };\n+}\n+\n+fn test_autogenerated_unit_after_divergent_expr() {\n+    let _: Result<(), ()> = try {\n+        return;\n+    };\n+}\n+\n+// In the following cases unreachable code should be reported.\n+\n+fn test_try_block_after_divergent_stmt() {\n+    let _: Result<u32, ()> = {\n+        return;\n+\n+        try {\n+            loop {\n+                err()?;\n+            }\n+        }\n+        // ~^^^^^ WARNING unreachable expression\n+    };\n+}\n+\n+fn test_wrapped_divergent_expr() {\n+    let _: Result<u32, ()> = {\n+        Err(return)\n+        // ~^ WARNING unreachable call\n+    };\n+}\n+\n+fn test_expr_after_divergent_stmt_in_try_block() {\n+    let res: Result<u32, ()> = try {\n+        loop {\n+            err()?;\n+        }\n+\n+        42\n+        // ~^ WARNING unreachable expression\n+    };\n+    println!(\"res: {:?}\", res);\n+}\n+\n+fn main() {\n+    test_ok_wrapped_divergent_expr_1();\n+    test_ok_wrapped_divergent_expr_2();\n+    test_autogenerated_unit_after_divergent_expr();\n+    test_try_block_after_divergent_stmt();\n+    test_wrapped_divergent_expr();\n+    test_expr_after_divergent_stmt_in_try_block();\n+}"}, {"sha": "54fed04d400e936055e506bb843c2643ddd85c17", "filename": "src/test/ui/try-block/try-block-unreachable-code-lint.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d0c03a13c323c0a87ea1e344cdd9290fec0f28/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr?ref=18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "patch": "@@ -0,0 +1,38 @@\n+warning: unreachable expression\n+  --> $DIR/try-block-unreachable-code-lint.rs:41:9\n+   |\n+LL |           return;\n+   |           ------ any code following this expression is unreachable\n+LL | \n+LL | /         try {\n+LL | |             loop {\n+LL | |                 err()?;\n+LL | |             }\n+LL | |         }\n+   | |_________^ unreachable expression\n+   |\n+note: lint level defined here\n+  --> $DIR/try-block-unreachable-code-lint.rs:6:9\n+   |\n+LL | #![warn(unreachable_code)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+warning: unreachable call\n+  --> $DIR/try-block-unreachable-code-lint.rs:52:9\n+   |\n+LL |         Err(return)\n+   |         ^^^ ------ any code following this expression is unreachable\n+   |         |\n+   |         unreachable call\n+\n+warning: unreachable expression\n+  --> $DIR/try-block-unreachable-code-lint.rs:63:9\n+   |\n+LL | /         loop {\n+LL | |             err()?;\n+LL | |         }\n+   | |_________- any code following this expression is unreachable\n+LL | \n+LL |           42\n+   |           ^^ unreachable expression\n+"}]}