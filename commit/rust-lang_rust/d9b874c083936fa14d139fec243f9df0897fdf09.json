{"sha": "d9b874c083936fa14d139fec243f9df0897fdf09", "node_id": "C_kwDOAAsO6NoAKGQ5Yjg3NGMwODM5MzZmYTE0ZDEzOWZlYzI0M2Y5ZGYwODk3ZmRmMDk", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-01T18:53:59Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-01T19:18:01Z"}, "message": "Allow deriving multiple subdiagnostics using one SessionSubdiagnostic\n\nThis reimplements ac638c1, which had to be reverted in the previous\ncommit because it contains a rebase accident that itself reverted\nsignificant unrelated changes to SessionSubdiagnostic.", "tree": {"sha": "f2b6cc14ffa1ff1cebd7bc68ad13844547cce00b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2b6cc14ffa1ff1cebd7bc68ad13844547cce00b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b874c083936fa14d139fec243f9df0897fdf09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b874c083936fa14d139fec243f9df0897fdf09", "html_url": "https://github.com/rust-lang/rust/commit/d9b874c083936fa14d139fec243f9df0897fdf09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b874c083936fa14d139fec243f9df0897fdf09/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9df75ee254a2999fe0b7e4c3bddebef34b539891", "url": "https://api.github.com/repos/rust-lang/rust/commits/9df75ee254a2999fe0b7e4c3bddebef34b539891", "html_url": "https://github.com/rust-lang/rust/commit/9df75ee254a2999fe0b7e4c3bddebef34b539891"}], "stats": {"total": 298, "additions": 154, "deletions": 144}, "files": [{"sha": "dce5d3cfb84ff05b87aeceb2f47148e9bb55eed1", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 120, "deletions": 96, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/d9b874c083936fa14d139fec243f9df0897fdf09/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b874c083936fa14d139fec243f9df0897fdf09/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=d9b874c083936fa14d139fec243f9df0897fdf09", "patch": "@@ -211,11 +211,39 @@ impl<'a> HasFieldMap for SessionSubdiagnosticDeriveBuilder<'a> {\n     }\n }\n \n+/// Provides frequently-needed information about the diagnostic kinds being derived for this type.\n+#[derive(Clone, Copy, Debug)]\n+struct KindsStatistics {\n+    has_multipart_suggestion: bool,\n+    all_multipart_suggestions: bool,\n+    has_normal_suggestion: bool,\n+}\n+\n+impl<'a> FromIterator<&'a SubdiagnosticKind> for KindsStatistics {\n+    fn from_iter<T: IntoIterator<Item = &'a SubdiagnosticKind>>(kinds: T) -> Self {\n+        let mut ret = Self {\n+            has_multipart_suggestion: false,\n+            all_multipart_suggestions: true,\n+            has_normal_suggestion: false,\n+        };\n+        for kind in kinds {\n+            if let SubdiagnosticKind::MultipartSuggestion { .. } = kind {\n+                ret.has_multipart_suggestion = true;\n+            } else {\n+                ret.all_multipart_suggestions = false;\n+            }\n+\n+            if let SubdiagnosticKind::Suggestion { .. } = kind {\n+                ret.has_normal_suggestion = true;\n+            }\n+        }\n+        ret\n+    }\n+}\n+\n impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n-    fn identify_kind(\n-        &mut self,\n-    ) -> Result<Option<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n-        let mut kind_slug = None;\n+    fn identify_kind(&mut self) -> Result<Vec<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n+        let mut kind_slugs = vec![];\n \n         for attr in self.variant.ast().attrs {\n             let span = attr.span().unwrap();\n@@ -362,10 +390,10 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                 | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n             }\n \n-            kind_slug.set_once(((kind, slug), span))\n+            kind_slugs.push((kind, slug))\n         }\n \n-        Ok(kind_slug.map(|(kind_slug, _)| kind_slug))\n+        Ok(kind_slugs)\n     }\n \n     /// Generates the code for a field with no attributes.\n@@ -387,7 +415,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n     fn generate_field_attr_code(\n         &mut self,\n         binding: &BindingInfo<'_>,\n-        kind: &SubdiagnosticKind,\n+        kind_stats: KindsStatistics,\n     ) -> TokenStream {\n         let ast = binding.ast();\n         assert!(ast.attrs.len() > 0, \"field without attributes generating attr code\");\n@@ -405,7 +433,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                 };\n \n                 let generated = self\n-                    .generate_field_code_inner(kind, attr, info)\n+                    .generate_field_code_inner(kind_stats, attr, info)\n                     .unwrap_or_else(|v| v.to_compile_error());\n \n                 inner_ty.with(binding, generated)\n@@ -415,15 +443,15 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n \n     fn generate_field_code_inner(\n         &mut self,\n-        kind: &SubdiagnosticKind,\n+        kind_stats: KindsStatistics,\n         attr: &Attribute,\n         info: FieldInfo<'_>,\n     ) -> Result<TokenStream, DiagnosticDeriveError> {\n         let meta = attr.parse_meta()?;\n         match meta {\n-            Meta::Path(path) => self.generate_field_code_inner_path(kind, attr, info, path),\n+            Meta::Path(path) => self.generate_field_code_inner_path(kind_stats, attr, info, path),\n             Meta::List(list @ MetaList { .. }) => {\n-                self.generate_field_code_inner_list(kind, attr, info, list)\n+                self.generate_field_code_inner_list(kind_stats, attr, info, list)\n             }\n             _ => throw_invalid_attr!(attr, &meta),\n         }\n@@ -432,7 +460,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n     /// Generates the code for a `[Meta::Path]`-like attribute on a field (e.g. `#[primary_span]`).\n     fn generate_field_code_inner_path(\n         &mut self,\n-        kind: &SubdiagnosticKind,\n+        kind_stats: KindsStatistics,\n         attr: &Attribute,\n         info: FieldInfo<'_>,\n         path: Path,\n@@ -445,7 +473,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n         match name {\n             \"skip_arg\" => Ok(quote! {}),\n             \"primary_span\" => {\n-                if matches!(kind, SubdiagnosticKind::MultipartSuggestion { .. }) {\n+                if kind_stats.has_multipart_suggestion {\n                     throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n                         diag.help(\n                             \"multipart suggestions use one or more `#[suggestion_part]`s rather \\\n@@ -464,32 +492,20 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n             \"suggestion_part\" => {\n                 self.has_suggestion_parts = true;\n \n-                match kind {\n-                    SubdiagnosticKind::MultipartSuggestion { .. } => {\n-                        span_err(\n-                            span,\n-                            \"`#[suggestion_part(...)]` attribute without `code = \\\"...\\\"`\",\n-                        )\n+                if kind_stats.has_multipart_suggestion {\n+                    span_err(span, \"`#[suggestion_part(...)]` attribute without `code = \\\"...\\\"`\")\n                         .emit();\n-                        Ok(quote! {})\n-                    }\n-                    SubdiagnosticKind::Label\n-                    | SubdiagnosticKind::Note\n-                    | SubdiagnosticKind::Help\n-                    | SubdiagnosticKind::Warn\n-                    | SubdiagnosticKind::Suggestion { .. } => {\n-                        throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n-                            diag.help(\n+                    Ok(quote! {})\n+                } else {\n+                    throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n+                        diag.help(\n                                 \"`#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\",\n                             )\n-                        });\n-                    }\n+                    });\n                 }\n             }\n             \"applicability\" => {\n-                if let SubdiagnosticKind::Suggestion { .. }\n-                | SubdiagnosticKind::MultipartSuggestion { .. } = kind\n-                {\n+                if kind_stats.has_multipart_suggestion || kind_stats.has_normal_suggestion {\n                     report_error_if_not_applied_to_applicability(attr, &info)?;\n \n                     let binding = info.binding.binding.clone();\n@@ -501,13 +517,16 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                 Ok(quote! {})\n             }\n             _ => throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n-                let span_attr = if let SubdiagnosticKind::MultipartSuggestion { .. } = kind {\n-                    \"suggestion_part\"\n-                } else {\n-                    \"primary_span\"\n-                };\n+                let mut span_attrs = vec![];\n+                if kind_stats.has_multipart_suggestion {\n+                    span_attrs.push(\"suggestion_part\");\n+                }\n+                if !kind_stats.all_multipart_suggestions {\n+                    span_attrs.push(\"primary_span\")\n+                }\n                 diag.help(format!(\n-                    \"only `{span_attr}`, `applicability` and `skip_arg` are valid field attributes\",\n+                    \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n+                    span_attrs.join(\", \")\n                 ))\n             }),\n         }\n@@ -517,7 +536,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n     /// `#[suggestion_part(code = \"...\")]`).\n     fn generate_field_code_inner_list(\n         &mut self,\n-        kind: &SubdiagnosticKind,\n+        kind_stats: KindsStatistics,\n         attr: &Attribute,\n         info: FieldInfo<'_>,\n         list: MetaList,\n@@ -529,7 +548,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n \n         match name {\n             \"suggestion_part\" => {\n-                if !matches!(kind, SubdiagnosticKind::MultipartSuggestion { .. }) {\n+                if !kind_stats.has_multipart_suggestion {\n                     throw_invalid_attr!(attr, &Meta::List(list), |diag| {\n                         diag.help(\n                             \"`#[suggestion_part(...)]` is only valid in multipart suggestions\",\n@@ -576,43 +595,44 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                 Ok(quote! { suggestions.push((#binding, #code)); })\n             }\n             _ => throw_invalid_attr!(attr, &Meta::List(list), |diag| {\n-                let span_attr = if let SubdiagnosticKind::MultipartSuggestion { .. } = kind {\n-                    \"suggestion_part\"\n-                } else {\n-                    \"primary_span\"\n-                };\n+                let mut span_attrs = vec![];\n+                if kind_stats.has_multipart_suggestion {\n+                    span_attrs.push(\"suggestion_part\");\n+                }\n+                if !kind_stats.all_multipart_suggestions {\n+                    span_attrs.push(\"primary_span\")\n+                }\n                 diag.help(format!(\n-                    \"only `{span_attr}`, `applicability` and `skip_arg` are valid field attributes\",\n+                    \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n+                    span_attrs.join(\", \")\n                 ))\n             }),\n         }\n     }\n \n     pub fn into_tokens(&mut self) -> Result<TokenStream, DiagnosticDeriveError> {\n-        let Some((kind, slug)) = self.identify_kind()? else {\n+        let kind_slugs = self.identify_kind()?;\n+        if kind_slugs.is_empty() {\n             throw_span_err!(\n                 self.variant.ast().ident.span().unwrap(),\n                 \"subdiagnostic kind not specified\"\n             );\n         };\n \n-        let init = match &kind {\n-            SubdiagnosticKind::Label\n-            | SubdiagnosticKind::Note\n-            | SubdiagnosticKind::Help\n-            | SubdiagnosticKind::Warn\n-            | SubdiagnosticKind::Suggestion { .. } => quote! {},\n-            SubdiagnosticKind::MultipartSuggestion { .. } => {\n-                quote! { let mut suggestions = Vec::new(); }\n-            }\n+        let kind_stats: KindsStatistics = kind_slugs.iter().map(|(kind, _slug)| kind).collect();\n+\n+        let init = if kind_stats.has_multipart_suggestion {\n+            quote! { let mut suggestions = Vec::new(); }\n+        } else {\n+            quote! {}\n         };\n \n         let attr_args: TokenStream = self\n             .variant\n             .bindings()\n             .iter()\n             .filter(|binding| !binding.ast().attrs.is_empty())\n-            .map(|binding| self.generate_field_attr_code(binding, &kind))\n+            .map(|binding| self.generate_field_attr_code(binding, kind_stats))\n             .collect();\n \n         let span_field = self.span_field.as_ref().map(|(span, _)| span);\n@@ -622,48 +642,52 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n         );\n \n         let diag = &self.diag;\n-        let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n-        let message = quote! { rustc_errors::fluent::#slug };\n-        let call = match kind {\n-            SubdiagnosticKind::Suggestion { suggestion_kind, code } => {\n-                if let Some(span) = span_field {\n-                    let style = suggestion_kind.to_suggestion_style();\n-\n-                    quote! { #diag.#name(#span, #message, #code, #applicability, #style); }\n-                } else {\n-                    span_err(self.span, \"suggestion without `#[primary_span]` field\").emit();\n-                    quote! { unreachable!(); }\n-                }\n-            }\n-            SubdiagnosticKind::MultipartSuggestion { suggestion_kind } => {\n-                if !self.has_suggestion_parts {\n-                    span_err(\n-                        self.span,\n-                        \"multipart suggestion without any `#[suggestion_part(...)]` fields\",\n-                    )\n-                    .emit();\n+        let mut calls = TokenStream::new();\n+        for (kind, slug) in kind_slugs {\n+            let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n+            let message = quote! { rustc_errors::fluent::#slug };\n+            let call = match kind {\n+                SubdiagnosticKind::Suggestion { suggestion_kind, code } => {\n+                    if let Some(span) = span_field {\n+                        let style = suggestion_kind.to_suggestion_style();\n+\n+                        quote! { #diag.#name(#span, #message, #code, #applicability, #style); }\n+                    } else {\n+                        span_err(self.span, \"suggestion without `#[primary_span]` field\").emit();\n+                        quote! { unreachable!(); }\n+                    }\n                 }\n+                SubdiagnosticKind::MultipartSuggestion { suggestion_kind } => {\n+                    if !self.has_suggestion_parts {\n+                        span_err(\n+                            self.span,\n+                            \"multipart suggestion without any `#[suggestion_part(...)]` fields\",\n+                        )\n+                        .emit();\n+                    }\n \n-                let style = suggestion_kind.to_suggestion_style();\n+                    let style = suggestion_kind.to_suggestion_style();\n \n-                quote! { #diag.#name(#message, suggestions, #applicability, #style); }\n-            }\n-            SubdiagnosticKind::Label => {\n-                if let Some(span) = span_field {\n-                    quote! { #diag.#name(#span, #message); }\n-                } else {\n-                    span_err(self.span, \"label without `#[primary_span]` field\").emit();\n-                    quote! { unreachable!(); }\n+                    quote! { #diag.#name(#message, suggestions, #applicability, #style); }\n                 }\n-            }\n-            _ => {\n-                if let Some(span) = span_field {\n-                    quote! { #diag.#name(#span, #message); }\n-                } else {\n-                    quote! { #diag.#name(#message); }\n+                SubdiagnosticKind::Label => {\n+                    if let Some(span) = span_field {\n+                        quote! { #diag.#name(#span, #message); }\n+                    } else {\n+                        span_err(self.span, \"label without `#[primary_span]` field\").emit();\n+                        quote! { unreachable!(); }\n+                    }\n                 }\n-            }\n-        };\n+                _ => {\n+                    if let Some(span) = span_field {\n+                        quote! { #diag.#name(#span, #message); }\n+                    } else {\n+                        quote! { #diag.#name(#message); }\n+                    }\n+                }\n+            };\n+            calls.extend(call);\n+        }\n \n         let plain_args: TokenStream = self\n             .variant\n@@ -676,7 +700,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n         Ok(quote! {\n             #init\n             #attr_args\n-            #call\n+            #calls\n             #plain_args\n         })\n     }"}, {"sha": "812ca0c72bd058178d518b539eb4c709db737759", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b874c083936fa14d139fec243f9df0897fdf09/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b874c083936fa14d139fec243f9df0897fdf09/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=d9b874c083936fa14d139fec243f9df0897fdf09", "patch": "@@ -309,9 +309,7 @@ union AC {\n \n #[derive(SessionSubdiagnostic)]\n #[label(parser::add_paren)]\n-//~^ NOTE previously specified here\n #[label(parser::add_paren)]\n-//~^ ERROR specified multiple times\n struct AD {\n     #[primary_span]\n     span: Span,"}, {"sha": "0a0247e898088b41bcb6592e1a53afb59cc76ec8", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 34, "deletions": 46, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d9b874c083936fa14d139fec243f9df0897fdf09/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9b874c083936fa14d139fec243f9df0897fdf09/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=d9b874c083936fa14d139fec243f9df0897fdf09", "patch": "@@ -174,88 +174,76 @@ LL | |     b: u64\n LL | | }\n    | |_^\n \n-error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:313:1\n-   |\n-LL | #[label(parser::add_paren)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:311:1\n-   |\n-LL | #[label(parser::add_paren)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: `#[label(parser::add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:321:28\n+  --> $DIR/subdiagnostic-derive.rs:319:28\n    |\n LL | #[label(parser::add_paren, parser::add_paren)]\n    |                            ^^^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:334:5\n+  --> $DIR/subdiagnostic-derive.rs:332:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:331:5\n+  --> $DIR/subdiagnostic-derive.rs:329:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:340:8\n+  --> $DIR/subdiagnostic-derive.rs:338:8\n    |\n LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:377:47\n+  --> $DIR/subdiagnostic-derive.rs:375:47\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                               ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:377:33\n+  --> $DIR/subdiagnostic-derive.rs:375:33\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                 ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:395:5\n+  --> $DIR/subdiagnostic-derive.rs:393:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:392:5\n+  --> $DIR/subdiagnostic-derive.rs:390:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:405:5\n+  --> $DIR/subdiagnostic-derive.rs:403:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:418:1\n+  --> $DIR/subdiagnostic-derive.rs:416:1\n    |\n LL | #[suggestion(parser::add_paren)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:428:46\n+  --> $DIR/subdiagnostic-derive.rs:426:46\n    |\n LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n    |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:446:1\n+  --> $DIR/subdiagnostic-derive.rs:444:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -265,41 +253,41 @@ LL | | }\n    | |_^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:460:1\n+  --> $DIR/subdiagnostic-derive.rs:458:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:480:39\n+  --> $DIR/subdiagnostic-derive.rs:478:39\n    |\n LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:499:43\n+  --> $DIR/subdiagnostic-derive.rs:497:43\n    |\n LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:522:5\n+  --> $DIR/subdiagnostic-derive.rs:520:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\n \n error: `#[suggestion_part(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:525:5\n+  --> $DIR/subdiagnostic-derive.rs:523:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:519:1\n+  --> $DIR/subdiagnostic-derive.rs:517:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -311,13 +299,13 @@ LL | | }\n    | |_^\n \n error: `code` is not a valid nested attribute of a `multipart_suggestion` attribute\n-  --> $DIR/subdiagnostic-derive.rs:534:43\n+  --> $DIR/subdiagnostic-derive.rs:532:43\n    |\n LL | #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^^^^^^\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:534:1\n+  --> $DIR/subdiagnostic-derive.rs:532:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n@@ -328,27 +316,27 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:544:5\n+  --> $DIR/subdiagnostic-derive.rs:542:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:552:5\n+  --> $DIR/subdiagnostic-derive.rs:550:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:561:5\n+  --> $DIR/subdiagnostic-derive.rs:559:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: multipart suggestions use one or more `#[suggestion_part]`s rather than one `#[primary_span]`\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:558:1\n+  --> $DIR/subdiagnostic-derive.rs:556:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren)]\n LL | |\n@@ -360,57 +348,57 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:569:5\n+  --> $DIR/subdiagnostic-derive.rs:567:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:572:5\n+  --> $DIR/subdiagnostic-derive.rs:570:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(foo = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:575:23\n+  --> $DIR/subdiagnostic-derive.rs:573:23\n    |\n LL |     #[suggestion_part(foo = \"bar\")]\n    |                       ^^^^^^^^^^^\n    |\n    = help: `code` is the only valid nested attribute\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:578:5\n+  --> $DIR/subdiagnostic-derive.rs:576:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:581:5\n+  --> $DIR/subdiagnostic-derive.rs:579:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:589:37\n+  --> $DIR/subdiagnostic-derive.rs:587:37\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                                     ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:589:23\n+  --> $DIR/subdiagnostic-derive.rs:587:23\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                       ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:619:5\n+  --> $DIR/subdiagnostic-derive.rs:617:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:616:43\n+  --> $DIR/subdiagnostic-derive.rs:614:43\n    |\n LL | #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -475,6 +463,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 64 previous errors\n+error: aborting due to 63 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}