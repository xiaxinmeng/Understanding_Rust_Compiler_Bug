{"sha": "b18b26924c640211a358535f14e39695c48b0ec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOGIyNjkyNGM2NDAyMTFhMzU4NTM1ZjE0ZTM5Njk1YzQ4YjBlYzM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-01T23:30:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-01T23:30:11Z"}, "message": "Rollup merge of #68681 - bobrippling:fix-matched-angle-brackets, r=Centril\n\nSuggest path separator for single-colon typos\n\nThis commit adds guidance for when a user means to type a path, but ends\nup typing a single colon, such as `<<Impl as T>:Ty>`.\n\nThis change seemed pertinent as the current error message is\nparticularly misleading, emitting `error: unmatched angle bracket`,\ndespite the angle bracket being matched later on, leaving the user to\ntrack down the typo'd colon.", "tree": {"sha": "2c7c8a6eb9c5078b81e04b0177348b9fb29072f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c7c8a6eb9c5078b81e04b0177348b9fb29072f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b18b26924c640211a358535f14e39695c48b0ec3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeNgoDCRBK7hj4Ov3rIwAAdHIIAF+mQcv1hv5Zt3NpUqKiBJCA\nPgf7jAn1wGRotcM6+yVSkH9v/4kKlrLdjcZVugvYtaIOs+7ZSwnKYVs0wkQcsyqO\nbMGc9aPDBCBCvAi9f+o0FrNTQ1NziERADVSsQJms3QHKPpPF5PU8gW3DphDCceTG\nOyWsw67nStvp6TZMSfTrEOpRHrZ4mZuk91MDdXhjcfRYYvY57/MEeyyfQVkWITW0\nPJgLZwLQjG/XdZO73WaNce9Uqmx+l+hDCqXdb+SDzxDJRgc3GQqkrQtJZh8Ise8k\nG6dauaWSNxKTnQjicui4wACJAxDSjCy52D6v8NG7XWaUPeMaPevepOTmq/iwpQk=\n=FmHo\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c7c8a6eb9c5078b81e04b0177348b9fb29072f5\nparent bf68a057b39837ee8b9ccf00d902d1964e8ed326\nparent 07ee472cd18925be45d424d9cfd59c441ea9c9a7\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1580599811 +0900\ncommitter GitHub <noreply@github.com> 1580599811 +0900\n\nRollup merge of #68681 - bobrippling:fix-matched-angle-brackets, r=Centril\n\nSuggest path separator for single-colon typos\n\nThis commit adds guidance for when a user means to type a path, but ends\nup typing a single colon, such as `<<Impl as T>:Ty>`.\n\nThis change seemed pertinent as the current error message is\nparticularly misleading, emitting `error: unmatched angle bracket`,\ndespite the angle bracket being matched later on, leaving the user to\ntrack down the typo'd colon.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b18b26924c640211a358535f14e39695c48b0ec3", "html_url": "https://github.com/rust-lang/rust/commit/b18b26924c640211a358535f14e39695c48b0ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b18b26924c640211a358535f14e39695c48b0ec3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf68a057b39837ee8b9ccf00d902d1964e8ed326", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf68a057b39837ee8b9ccf00d902d1964e8ed326", "html_url": "https://github.com/rust-lang/rust/commit/bf68a057b39837ee8b9ccf00d902d1964e8ed326"}, {"sha": "07ee472cd18925be45d424d9cfd59c441ea9c9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ee472cd18925be45d424d9cfd59c441ea9c9a7", "html_url": "https://github.com/rust-lang/rust/commit/07ee472cd18925be45d424d9cfd59c441ea9c9a7"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "a09eb42dcfe6ae5b6153c5da1bcdc3725d2b6098", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b18b26924c640211a358535f14e39695c48b0ec3/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b26924c640211a358535f14e39695c48b0ec3/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=b18b26924c640211a358535f14e39695c48b0ec3", "patch": "@@ -71,14 +71,49 @@ impl<'a> Parser<'a> {\n             debug!(\"parse_qpath: (decrement) count={:?}\", self.unmatched_angle_bracket_count);\n         }\n \n-        self.expect(&token::ModSep)?;\n+        if !self.recover_colon_before_qpath_proj() {\n+            self.expect(&token::ModSep)?;\n+        }\n \n         let qself = QSelf { ty, path_span, position: path.segments.len() };\n         self.parse_path_segments(&mut path.segments, style)?;\n \n         Ok((qself, Path { segments: path.segments, span: lo.to(self.prev_span) }))\n     }\n \n+    /// Recover from an invalid single colon, when the user likely meant a qualified path.\n+    /// We avoid emitting this if not followed by an identifier, as our assumption that the user\n+    /// intended this to be a qualified path may not be correct.\n+    ///\n+    /// ```ignore (diagnostics)\n+    /// <Bar as Baz<T>>:Qux\n+    ///                ^ help: use double colon\n+    /// ```\n+    fn recover_colon_before_qpath_proj(&mut self) -> bool {\n+        if self.token.kind != token::Colon\n+            || self.look_ahead(1, |t| !t.is_ident() || t.is_reserved_ident())\n+        {\n+            return false;\n+        }\n+\n+        self.bump(); // colon\n+\n+        self.diagnostic()\n+            .struct_span_err(\n+                self.prev_span,\n+                \"found single colon before projection in qualified path\",\n+            )\n+            .span_suggestion(\n+                self.prev_span,\n+                \"use double colon\",\n+                \"::\".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+\n+        true\n+    }\n+\n     /// Parses simple paths.\n     ///\n     /// `path = [::] segment+`"}, {"sha": "404d2f7762df445ff2e967b950d037d660b46ccf", "filename": "src/test/ui/parser/qualified-path-in-turbofish.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b18b26924c640211a358535f14e39695c48b0ec3/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b18b26924c640211a358535f14e39695c48b0ec3/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.fixed?ref=b18b26924c640211a358535f14e39695c48b0ec3", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+trait T {\n+    type Ty;\n+}\n+\n+struct Impl;\n+\n+impl T for Impl {\n+    type Ty = u32;\n+}\n+\n+fn template<T>() -> i64 {\n+    3\n+}\n+\n+fn main() {\n+    template::<<Impl as T>::Ty>();\n+    //~^ ERROR found single colon before projection in qualified path\n+}"}, {"sha": "2f4b2ed348b9c9944875ce6ca7796672badd2af0", "filename": "src/test/ui/parser/qualified-path-in-turbofish.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b18b26924c640211a358535f14e39695c48b0ec3/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b26924c640211a358535f14e39695c48b0ec3/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.rs?ref=b18b26924c640211a358535f14e39695c48b0ec3", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+trait T {\n+    type Ty;\n+}\n+\n+struct Impl;\n+\n+impl T for Impl {\n+    type Ty = u32;\n+}\n+\n+fn template<T>() -> i64 {\n+    3\n+}\n+\n+fn main() {\n+    template::<<Impl as T>:Ty>();\n+    //~^ ERROR found single colon before projection in qualified path\n+}"}, {"sha": "8857d2ef30cfcdef5896608d5cca327f4c5d96e4", "filename": "src/test/ui/parser/qualified-path-in-turbofish.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b18b26924c640211a358535f14e39695c48b0ec3/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b18b26924c640211a358535f14e39695c48b0ec3/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.stderr?ref=b18b26924c640211a358535f14e39695c48b0ec3", "patch": "@@ -0,0 +1,8 @@\n+error: found single colon before projection in qualified path\n+  --> $DIR/qualified-path-in-turbofish.rs:17:27\n+   |\n+LL |     template::<<Impl as T>:Ty>();\n+   |                           ^ help: use double colon: `::`\n+\n+error: aborting due to previous error\n+"}]}