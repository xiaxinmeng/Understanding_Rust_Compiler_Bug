{"sha": "74f8fe77632b992e6b28e98b6027d4e8ffd29398", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZjhmZTc3NjMyYjk5MmU2YjI4ZTk4YjYwMjdkNGU4ZmZkMjkzOTg=", "commit": {"author": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@outlook.com", "date": "2021-04-24T17:01:36Z"}, "committer": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@outlook.com", "date": "2021-05-17T17:17:29Z"}, "message": "Extract function assist will add async if required\n\nThe extract function assist will check for an AWAIT_EXPR in the body\nand if found, will add async to the generated function.", "tree": {"sha": "01ee63eaae45c14e90b62bc341a38ce4176a7d1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01ee63eaae45c14e90b62bc341a38ce4176a7d1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74f8fe77632b992e6b28e98b6027d4e8ffd29398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74f8fe77632b992e6b28e98b6027d4e8ffd29398", "html_url": "https://github.com/rust-lang/rust/commit/74f8fe77632b992e6b28e98b6027d4e8ffd29398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74f8fe77632b992e6b28e98b6027d4e8ffd29398/comments", "author": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459b0332d3a4905fa9bc93c484538e74d191c80b", "url": "https://api.github.com/repos/rust-lang/rust/commits/459b0332d3a4905fa9bc93c484538e74d191c80b", "html_url": "https://github.com/rust-lang/rust/commit/459b0332d3a4905fa9bc93c484538e74d191c80b"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "a2dba915cea37c5609bd264492071fa64c61b20e", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/74f8fe77632b992e6b28e98b6027d4e8ffd29398/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f8fe77632b992e6b28e98b6027d4e8ffd29398/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=74f8fe77632b992e6b28e98b6027d4e8ffd29398", "patch": "@@ -642,6 +642,10 @@ fn vars_used_in_body(ctx: &AssistContext, body: &FunctionBody) -> Vec<Local> {\n         .collect()\n }\n \n+fn body_contains_await(body: &FunctionBody) -> bool {\n+    body.descendants().any(|d| matches!(d.kind(), SyntaxKind::AWAIT_EXPR))\n+}\n+\n /// find `self` param, that was not defined inside `body`\n ///\n /// It should skip `self` params from impls inside `body`\n@@ -1123,9 +1127,10 @@ fn format_function(\n     let params = make_param_list(ctx, module, fun);\n     let ret_ty = make_ret_ty(ctx, module, fun);\n     let body = make_body(ctx, old_indent, new_indent, fun);\n+    let async_kw = if body_contains_await(&fun.body) { \"async \" } else { \"\" };\n     match ctx.config.snippet_cap {\n-        Some(_) => format_to!(fn_def, \"\\n\\n{}fn $0{}{}\", new_indent, fun.name, params),\n-        None => format_to!(fn_def, \"\\n\\n{}fn {}{}\", new_indent, fun.name, params),\n+        Some(_) => format_to!(fn_def, \"\\n\\n{}{}fn $0{}{}\", new_indent, async_kw, fun.name, params),\n+        None => format_to!(fn_def, \"\\n\\n{}{}fn {}{}\", new_indent, async_kw, fun.name, params),\n     }\n     if let Some(ret_ty) = ret_ty {\n         format_to!(fn_def, \" {}\", ret_ty);\n@@ -3565,4 +3570,60 @@ fn $0fun_name(n: i32) -> i32 {\n }\",\n         );\n     }\n+\n+    #[test]\n+    fn extract_with_await() {\n+        check_assist(\n+            extract_function,\n+            r#\"fn main() {\n+    $0some_function().await;$0\n+}\n+\n+async fn some_function() {\n+\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    fun_name();\n+}\n+\n+async fn $0fun_name() {\n+    some_function().await;\n+}\n+\n+async fn some_function() {\n+\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn extract_with_await_in_args() {\n+        check_assist(\n+            extract_function,\n+            r#\"fn main() {\n+    $0function_call(\"a\", some_function().await);$0\n+}\n+\n+async fn some_function() {\n+\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    fun_name();\n+}\n+\n+async fn $0fun_name() {\n+    function_call(\"a\", some_function().await);\n+}\n+\n+async fn some_function() {\n+\n+}\n+\"#,\n+        );\n+    }\n }"}]}