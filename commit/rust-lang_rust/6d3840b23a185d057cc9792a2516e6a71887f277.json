{"sha": "6d3840b23a185d057cc9792a2516e6a71887f277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMzg0MGIyM2ExODVkMDU3Y2M5NzkyYTI1MTZlNmE3MTg4N2YyNzc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T22:56:50Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T22:56:50Z"}, "message": "Add benchmarks for `u8::is_ascii*`", "tree": {"sha": "ea35f2fdbce1e2a40a3f38af45c71222a3098730", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea35f2fdbce1e2a40a3f38af45c71222a3098730"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3840b23a185d057cc9792a2516e6a71887f277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3840b23a185d057cc9792a2516e6a71887f277", "html_url": "https://github.com/rust-lang/rust/commit/6d3840b23a185d057cc9792a2516e6a71887f277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3840b23a185d057cc9792a2516e6a71887f277/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525a043c6bc8a220b7dbdde3eb10bb79f8e99506", "url": "https://api.github.com/repos/rust-lang/rust/commits/525a043c6bc8a220b7dbdde3eb10bb79f8e99506", "html_url": "https://github.com/rust-lang/rust/commit/525a043c6bc8a220b7dbdde3eb10bb79f8e99506"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "e20b1b9bf313678a3a8e44ca352ffebee1a3d7e2", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6d3840b23a185d057cc9792a2516e6a71887f277/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3840b23a185d057cc9792a2516e6a71887f277/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=6d3840b23a185d057cc9792a2516e6a71887f277", "patch": "@@ -12,7 +12,14 @@ fn branchless_to_ascii_upper_case(byte: u8) -> u8 {\n \n \n macro_rules! benches {\n-    ($( fn $name: ident($arg: ident: &mut [u8]) $body: block )+) => {\n+    ($( fn $name: ident($arg: ident: &mut [u8]) $body: block )+ @iter $( $is_: ident, )+) => {\n+        benches! {@\n+            $( fn $name($arg: &mut [u8]) $body )+\n+            $( fn $is_(bytes: &mut [u8]) { bytes.iter().all(u8::$is_) } )+\n+        }\n+    };\n+\n+    (@$( fn $name: ident($arg: ident: &mut [u8]) $body: block )+) => {\n         benches!(mod short SHORT $($name $arg $body)+);\n         benches!(mod medium MEDIUM $($name $arg $body)+);\n         benches!(mod long LONG $($name $arg $body)+);\n@@ -30,7 +37,7 @@ macro_rules! benches {\n                         let mut vec = $input.as_bytes().to_vec();\n                         {\n                             let $arg = &mut vec[..];\n-                            $body\n+                            black_box($body);\n                         }\n                         vec\n                     })\n@@ -44,21 +51,21 @@ use test::black_box;\n use test::Bencher;\n \n benches! {\n-    fn bench00_alloc_only(_bytes: &mut [u8]) {}\n+    fn case00_alloc_only(_bytes: &mut [u8]) {}\n \n-    fn bench01_black_box_read_each_byte(bytes: &mut [u8]) {\n+    fn case01_black_box_read_each_byte(bytes: &mut [u8]) {\n         for byte in bytes {\n             black_box(*byte);\n         }\n     }\n \n-    fn bench02_lookup(bytes: &mut [u8]) {\n+    fn case02_lookup(bytes: &mut [u8]) {\n         for byte in bytes {\n             *byte = ASCII_UPPERCASE_MAP[*byte as usize]\n         }\n     }\n \n-    fn bench03_branch_and_subtract(bytes: &mut [u8]) {\n+    fn case03_branch_and_subtract(bytes: &mut [u8]) {\n         for byte in bytes {\n             *byte = if b'a' <= *byte && *byte <= b'z' {\n                 *byte - b'a' + b'A'\n@@ -68,7 +75,7 @@ benches! {\n         }\n     }\n \n-    fn bench04_branch_and_mask(bytes: &mut [u8]) {\n+    fn case04_branch_and_mask(bytes: &mut [u8]) {\n         for byte in bytes {\n             *byte = if b'a' <= *byte && *byte <= b'z' {\n                 *byte & !0x20\n@@ -78,23 +85,17 @@ benches! {\n         }\n     }\n \n-    fn bench05_branchless(bytes: &mut [u8]) {\n+    fn case05_branchless(bytes: &mut [u8]) {\n         for byte in bytes {\n             *byte = branchless_to_ascii_upper_case(*byte)\n         }\n     }\n \n-    fn bench05_multiply_by_bool(bytes: &mut [u8]) {\n-        for byte in bytes {\n-            *byte &= !(0x20 * (b'a' <= *byte && *byte <= b'z') as u8)\n-        }\n-    }\n-\n-    fn bench06_libcore(bytes: &mut [u8]) {\n+    fn case06_libcore(bytes: &mut [u8]) {\n         bytes.make_ascii_uppercase()\n     }\n \n-    fn bench07_fake_simd_u32(bytes: &mut [u8]) {\n+    fn case07_fake_simd_u32(bytes: &mut [u8]) {\n         let (before, aligned, after) = unsafe {\n             bytes.align_to_mut::<u32>()\n         };\n@@ -118,7 +119,7 @@ benches! {\n         }\n     }\n \n-    fn bench08_fake_simd_u64(bytes: &mut [u8]) {\n+    fn case08_fake_simd_u64(bytes: &mut [u8]) {\n         let (before, aligned, after) = unsafe {\n             bytes.align_to_mut::<u64>()\n         };\n@@ -139,6 +140,20 @@ benches! {\n             *byte = branchless_to_ascii_upper_case(*byte)\n         }\n     }\n+\n+    @iter\n+\n+    is_ascii,\n+    is_ascii_alphabetic,\n+    is_ascii_uppercase,\n+    is_ascii_lowercase,\n+    is_ascii_alphanumeric,\n+    is_ascii_digit,\n+    is_ascii_hexdigit,\n+    is_ascii_punctuation,\n+    is_ascii_graphic,\n+    is_ascii_whitespace,\n+    is_ascii_control,\n }\n \n macro_rules! repeat {"}]}