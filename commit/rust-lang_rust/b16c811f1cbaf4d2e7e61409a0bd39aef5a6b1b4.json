{"sha": "b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4", "node_id": "C_kwDOAAsO6NoAKGIxNmM4MTFmMWNiYWY0ZDJlN2U2MTQwOWEwYmQzOWFlZjVhNmIxYjQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-21T18:12:19Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-29T13:19:48Z"}, "message": "Prefer TraitPredicate over ConstnessAnd<TraitRef>", "tree": {"sha": "f112bfb96749a57bb6e299f3124f2b45e5e1f689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f112bfb96749a57bb6e299f3124f2b45e5e1f689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmGk03QACgkQbQF6ltjm\nwvmPKRAAnCTf2J9Vc1ytj6onhdF+vcxlnhyMY5Im0y1ZR0YULgTKNseuBmeeggnb\nkdyZWmEygvN34HJjnq2j6Fn7nJArorRZaHB6HCHGzczMpNz8xpFeCijRod+RULP3\nY9b132Sh16XswyPEtsn0n1Bxnnp3sorjWWYM9D9xb7b1Xa8DbkCBbdNwnnFUAlnm\nOxxYE2hDZsdfRPAV0MxWDXIlKNfKNltMrYrYKBmCLvl4HTDzfgdF6j9cuRi8ZdY6\ni/k9Pkzjr3xlNRM94DJLtbdqT+MqeA10qZZs3VbXcAh/AbaT8HRgQ345a28wTB/Y\nPZXfIi3KGoIYeWMdffhRDFXvvX+8wjFSKzlra9SmqKUlYqbgWD0Ip2iXtVjsp/mJ\nPpgkuvhPG1GiQ3C5n5nCknWiLig0ElHgsv+XT5kyUUwbp13lWLpRYZ4n1cuXdqeU\noWk54/bctX/iSx0t8E3/yJKGPaLI4Krca90w78TRDT2IvTVEpElA+9zn1ZwRUKUo\njZzHX7D5WplUtvrcrz8+n38HIqO6vQnNWYkHVKZORiQ/NYZSifWG+S8Hplyv73Yq\nP0VL74KiOdmRg6jXMQiK0R0V+aeTsNIuUbKnmfxlVeAydBjVY1Z+ErqQD5JxZ+9C\neDEC6pXUAcMXEHUPCod3Q1um7Glo9LOHZXIVg6LvbqKhD1bJ4rs=\n=uhDp\n-----END PGP SIGNATURE-----", "payload": "tree f112bfb96749a57bb6e299f3124f2b45e5e1f689\nparent 40f39e6c6a97dd3d2313bcd9db42185dd39cfa58\nauthor Oli Scherer <git-spam-no-reply9815368754983@oli-obk.de> 1634839939 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1638191988 +0800\n\nPrefer TraitPredicate over ConstnessAnd<TraitRef>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4", "html_url": "https://github.com/rust-lang/rust/commit/b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40f39e6c6a97dd3d2313bcd9db42185dd39cfa58", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f39e6c6a97dd3d2313bcd9db42185dd39cfa58", "html_url": "https://github.com/rust-lang/rust/commit/40f39e6c6a97dd3d2313bcd9db42185dd39cfa58"}], "stats": {"total": 35, "additions": 10, "deletions": 25}, "files": [{"sha": "621bc0c5786c3b36b866535a1746ac2774a30920", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def_id::DefId;\n use rustc_query_system::cache::Cache;\n \n pub type SelectionCache<'tcx> = Cache<\n-    (ty::ConstnessAnd<ty::ParamEnvAnd<'tcx, ty::TraitRef<'tcx>>>, ty::ImplPolarity),\n+    ty::ParamEnvAnd<'tcx, ty::TraitPredicate<'tcx>>,\n     SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n >;\n "}, {"sha": "2690fdbea6b0c31f63d231e136e7419820c5ef7b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=b16c811f1cbaf4d2e7e61409a0bd39aef5a6b1b4", "patch": "@@ -1231,19 +1231,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return None;\n         }\n         let tcx = self.tcx();\n-        let pred = &cache_fresh_trait_pred.skip_binder();\n-        let trait_ref = pred.trait_ref;\n+        let pred = cache_fresh_trait_pred.skip_binder();\n         if self.can_use_global_caches(param_env) {\n-            if let Some(res) = tcx\n-                .selection_cache\n-                .get(&(param_env.and(trait_ref).with_constness(pred.constness), pred.polarity), tcx)\n-            {\n+            if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {\n                 return Some(res);\n             }\n         }\n-        self.infcx\n-            .selection_cache\n-            .get(&(param_env.and(trait_ref).with_constness(pred.constness), pred.polarity), tcx)\n+        self.infcx.selection_cache.get(&param_env.and(pred), tcx)\n     }\n \n     /// Determines whether can we safely cache the result\n@@ -1288,36 +1282,27 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) {\n         let tcx = self.tcx();\n         let pred = cache_fresh_trait_pred.skip_binder();\n-        let trait_ref = pred.trait_ref;\n \n         if !self.can_cache_candidate(&candidate) {\n-            debug!(?trait_ref, ?candidate, \"insert_candidate_cache - candidate is not cacheable\");\n+            debug!(?pred, ?candidate, \"insert_candidate_cache - candidate is not cacheable\");\n             return;\n         }\n \n         if self.can_use_global_caches(param_env) {\n             if let Err(Overflow) = candidate {\n                 // Don't cache overflow globally; we only produce this in certain modes.\n-            } else if !trait_ref.needs_infer() {\n+            } else if !pred.needs_infer() {\n                 if !candidate.needs_infer() {\n-                    debug!(?trait_ref, ?candidate, \"insert_candidate_cache global\");\n+                    debug!(?pred, ?candidate, \"insert_candidate_cache global\");\n                     // This may overwrite the cache with the same value.\n-                    tcx.selection_cache.insert(\n-                        (param_env.and(trait_ref).with_constness(pred.constness), pred.polarity),\n-                        dep_node,\n-                        candidate,\n-                    );\n+                    tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);\n                     return;\n                 }\n             }\n         }\n \n-        debug!(?trait_ref, ?candidate, \"insert_candidate_cache local\");\n-        self.infcx.selection_cache.insert(\n-            (param_env.and(trait_ref).with_constness(pred.constness), pred.polarity),\n-            dep_node,\n-            candidate,\n-        );\n+        debug!(?pred, ?candidate, \"insert_candidate_cache local\");\n+        self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);\n     }\n \n     /// Matches a predicate against the bounds of its self type."}]}