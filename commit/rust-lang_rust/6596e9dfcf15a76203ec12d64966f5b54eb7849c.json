{"sha": "6596e9dfcf15a76203ec12d64966f5b54eb7849c", "node_id": "C_kwDOAAsO6NoAKDY1OTZlOWRmY2YxNWE3NjIwM2VjMTJkNjQ5NjZmNWI1NGViNzg0OWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-17T15:54:28Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-28T17:01:23Z"}, "message": "Test that TAIT and RPIT are in sync", "tree": {"sha": "e17acc71633d7072f96ae7957c63cdf7e49299ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e17acc71633d7072f96ae7957c63cdf7e49299ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6596e9dfcf15a76203ec12d64966f5b54eb7849c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6596e9dfcf15a76203ec12d64966f5b54eb7849c", "html_url": "https://github.com/rust-lang/rust/commit/6596e9dfcf15a76203ec12d64966f5b54eb7849c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6596e9dfcf15a76203ec12d64966f5b54eb7849c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53c96ed528257489f5537c69a33b27ffce6fee6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/53c96ed528257489f5537c69a33b27ffce6fee6f", "html_url": "https://github.com/rust-lang/rust/commit/53c96ed528257489f5537c69a33b27ffce6fee6f"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "bb3bfbb7dd11a13d9ee84699daf15e3990f08c35", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6596e9dfcf15a76203ec12d64966f5b54eb7849c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6596e9dfcf15a76203ec12d64966f5b54eb7849c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=6596e9dfcf15a76203ec12d64966f5b54eb7849c", "patch": "@@ -772,6 +772,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Note: this check is pessimistic, as the inference type could be matched with something other\n         // than the opaque type, but then we need a new `TypeRelation` just for this specific case and\n         // can't re-use `sup` below.\n+        // See src/test/ui/impl-trait/hidden-type-is-opaque.rs and\n+        // src/test/ui/impl-trait/hidden-type-is-opaque-2.rs for examples that hit this path.\n         if formal_ret.has_infer_types() {\n             for ty in ret_ty.walk() {\n                 if let ty::subst::GenericArgKind::Type(ty) = ty.unpack() {"}, {"sha": "7876add5aa6cb8392149ba922a1d1e280dc341f5", "filename": "src/test/ui/impl-trait/hidden-type-is-opaque-2.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6596e9dfcf15a76203ec12d64966f5b54eb7849c/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6596e9dfcf15a76203ec12d64966f5b54eb7849c/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.rs?ref=6596e9dfcf15a76203ec12d64966f5b54eb7849c", "patch": "@@ -2,13 +2,24 @@\n // into function arguments via the function's generic parameters\n // FIXME(oli-obk): make `expected_inputs_for_expected_output` support this\n \n+#![feature(type_alias_impl_trait)]\n+\n fn reify_as() -> Thunk<impl FnOnce(Continuation) -> Continuation> {\n     Thunk::new(|mut cont| { //~ ERROR type annotations needed\n         cont.reify_as();\n         cont\n     })\n }\n \n+type Tait = impl FnOnce(Continuation) -> Continuation;\n+\n+fn reify_as_tait() -> Thunk<Tait> {\n+    Thunk::new(|mut cont| { //~ ERROR type annotations needed\n+        cont.reify_as();\n+        cont\n+    })\n+}\n+\n #[must_use]\n struct Thunk<F>(F);\n "}, {"sha": "dcf1982312f294616b2f3198646ef20595b45c68", "filename": "src/test/ui/impl-trait/hidden-type-is-opaque-2.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6596e9dfcf15a76203ec12d64966f5b54eb7849c/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6596e9dfcf15a76203ec12d64966f5b54eb7849c/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.stderr?ref=6596e9dfcf15a76203ec12d64966f5b54eb7849c", "patch": "@@ -1,11 +1,19 @@\n error[E0282]: type annotations needed\n-  --> $DIR/hidden-type-is-opaque-2.rs:6:17\n+  --> $DIR/hidden-type-is-opaque-2.rs:8:17\n    |\n LL |     Thunk::new(|mut cont| {\n    |                 ^^^^^^^^ consider giving this closure parameter a type\n    |\n    = note: type must be known at this point\n \n-error: aborting due to previous error\n+error[E0282]: type annotations needed\n+  --> $DIR/hidden-type-is-opaque-2.rs:17:17\n+   |\n+LL |     Thunk::new(|mut cont| {\n+   |                 ^^^^^^^^ consider giving this closure parameter a type\n+   |\n+   = note: type must be known at this point\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0282`."}, {"sha": "72b4028d854f8daa7b66728331d3a0aa3dedd558", "filename": "src/test/ui/impl-trait/hidden-type-is-opaque.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6596e9dfcf15a76203ec12d64966f5b54eb7849c/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6596e9dfcf15a76203ec12d64966f5b54eb7849c/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque.rs?ref=6596e9dfcf15a76203ec12d64966f5b54eb7849c", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+#![feature(type_alias_impl_trait)]\n \n fn reify_as() -> Thunk<impl ContFn> {\n     Thunk::new(|mut cont| {\n@@ -7,6 +8,15 @@ fn reify_as() -> Thunk<impl ContFn> {\n     })\n }\n \n+type Tait = impl ContFn;\n+\n+fn reify_as_tait() -> Thunk<Tait> {\n+    Thunk::new(|mut cont| {\n+        cont.reify_as();\n+        cont\n+    })\n+}\n+\n #[must_use]\n struct Thunk<F>(F);\n "}]}