{"sha": "27885a94c6a6c98a0d49af3962f1218adcd6efd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODg1YTk0YzZhNmM5OGEwZDQ5YWYzOTYyZjEyMThhZGNkNmVmZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-08T08:39:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-08T08:39:24Z"}, "message": "Auto merge of #82727 - oli-obk:shrinkmem, r=pnkfelix\n\nTest the effect of shrinking the size of Rvalue by 16 bytes\n\nr? `@ghost`", "tree": {"sha": "2dbe6e99e8f9ce6d7e2a203c204e5e3436314e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dbe6e99e8f9ce6d7e2a203c204e5e3436314e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27885a94c6a6c98a0d49af3962f1218adcd6efd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27885a94c6a6c98a0d49af3962f1218adcd6efd2", "html_url": "https://github.com/rust-lang/rust/commit/27885a94c6a6c98a0d49af3962f1218adcd6efd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27885a94c6a6c98a0d49af3962f1218adcd6efd2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c500ec6c36fa8287317d6dc342a64c079301de", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c500ec6c36fa8287317d6dc342a64c079301de", "html_url": "https://github.com/rust-lang/rust/commit/76c500ec6c36fa8287317d6dc342a64c079301de"}, {"sha": "9a2362e5a96d2469d65a64d7b0b422b48fc2b4ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2362e5a96d2469d65a64d7b0b422b48fc2b4ee", "html_url": "https://github.com/rust-lang/rust/commit/9a2362e5a96d2469d65a64d7b0b422b48fc2b4ee"}], "stats": {"total": 160, "additions": 94, "deletions": 66}, "files": [{"sha": "f2c61c95f4ff2f730b9a968c0c7fcdc113b431b9", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -464,14 +464,14 @@ fn codegen_stmt<'tcx>(\n                     let val = crate::constant::codegen_tls_ref(fx, def_id, lval.layout());\n                     lval.write_cvalue(fx, val);\n                 }\n-                Rvalue::BinaryOp(bin_op, ref lhs, ref rhs) => {\n+                Rvalue::BinaryOp(bin_op, box (ref lhs, ref rhs)) => {\n                     let lhs = codegen_operand(fx, lhs);\n                     let rhs = codegen_operand(fx, rhs);\n \n                     let res = crate::num::codegen_binop(fx, bin_op, lhs, rhs);\n                     lval.write_cvalue(fx, res);\n                 }\n-                Rvalue::CheckedBinaryOp(bin_op, ref lhs, ref rhs) => {\n+                Rvalue::CheckedBinaryOp(bin_op, box (ref lhs, ref rhs)) => {\n                     let lhs = codegen_operand(fx, lhs);\n                     let rhs = codegen_operand(fx, rhs);\n "}, {"sha": "8edb883ccb5f9c7469241695cb2c870fb8db686f", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -5,6 +5,7 @@\n     associated_type_bounds,\n     never_type,\n     try_blocks,\n+    box_patterns,\n     hash_drain_filter\n )]\n #![warn(rust_2018_idioms)]"}, {"sha": "1795710ff533886917bac2c2b4eb0d43ce391ef5", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -424,7 +424,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 (bx, operand)\n             }\n \n-            mir::Rvalue::BinaryOp(op, ref lhs, ref rhs) => {\n+            mir::Rvalue::BinaryOp(op, box (ref lhs, ref rhs)) => {\n                 let lhs = self.codegen_operand(&mut bx, lhs);\n                 let rhs = self.codegen_operand(&mut bx, rhs);\n                 let llresult = match (lhs.val, rhs.val) {\n@@ -453,7 +453,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 };\n                 (bx, operand)\n             }\n-            mir::Rvalue::CheckedBinaryOp(op, ref lhs, ref rhs) => {\n+            mir::Rvalue::CheckedBinaryOp(op, box (ref lhs, ref rhs)) => {\n                 let lhs = self.codegen_operand(&mut bx, lhs);\n                 let rhs = self.codegen_operand(&mut bx, rhs);\n                 let result = self.codegen_scalar_checked_binop("}, {"sha": "f202336578071ce249f13e1739422dd9dbde35c7", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -1683,6 +1683,9 @@ pub struct Place<'tcx> {\n     pub projection: &'tcx List<PlaceElem<'tcx>>,\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(Place<'_>, 16);\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[derive(TyEncodable, TyDecodable, HashStable)]\n pub enum ProjectionElem<V, T> {\n@@ -1981,6 +1984,9 @@ pub enum Operand<'tcx> {\n     Constant(Box<Constant<'tcx>>),\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(Operand<'_>, 24);\n+\n impl<'tcx> Debug for Operand<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::Operand::*;\n@@ -2096,8 +2102,8 @@ pub enum Rvalue<'tcx> {\n \n     Cast(CastKind, Operand<'tcx>, Ty<'tcx>),\n \n-    BinaryOp(BinOp, Operand<'tcx>, Operand<'tcx>),\n-    CheckedBinaryOp(BinOp, Operand<'tcx>, Operand<'tcx>),\n+    BinaryOp(BinOp, Box<(Operand<'tcx>, Operand<'tcx>)>),\n+    CheckedBinaryOp(BinOp, Box<(Operand<'tcx>, Operand<'tcx>)>),\n \n     NullaryOp(NullOp, Ty<'tcx>),\n     UnaryOp(UnOp, Operand<'tcx>),\n@@ -2116,6 +2122,9 @@ pub enum Rvalue<'tcx> {\n     Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(Rvalue<'_>, 40);\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum CastKind {\n     Misc,\n@@ -2139,6 +2148,9 @@ pub enum AggregateKind<'tcx> {\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(AggregateKind<'_>, 48);\n+\n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum BinOp {\n     /// The `+` operator (addition)\n@@ -2215,8 +2227,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             Cast(ref kind, ref place, ref ty) => {\n                 write!(fmt, \"{:?} as {:?} ({:?})\", place, ty, kind)\n             }\n-            BinaryOp(ref op, ref a, ref b) => write!(fmt, \"{:?}({:?}, {:?})\", op, a, b),\n-            CheckedBinaryOp(ref op, ref a, ref b) => {\n+            BinaryOp(ref op, box (ref a, ref b)) => write!(fmt, \"{:?}({:?}, {:?})\", op, a, b),\n+            CheckedBinaryOp(ref op, box (ref a, ref b)) => {\n                 write!(fmt, \"Checked{:?}({:?}, {:?})\", op, a, b)\n             }\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),"}, {"sha": "3c7a6aa00c3fecaea6534c9b15eafba3029233c9", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -182,12 +182,12 @@ impl<'tcx> Rvalue<'tcx> {\n             }\n             Rvalue::Len(..) => tcx.types.usize,\n             Rvalue::Cast(.., ty) => ty,\n-            Rvalue::BinaryOp(op, ref lhs, ref rhs) => {\n+            Rvalue::BinaryOp(op, box (ref lhs, ref rhs)) => {\n                 let lhs_ty = lhs.ty(local_decls, tcx);\n                 let rhs_ty = rhs.ty(local_decls, tcx);\n                 op.ty(tcx, lhs_ty, rhs_ty)\n             }\n-            Rvalue::CheckedBinaryOp(op, ref lhs, ref rhs) => {\n+            Rvalue::CheckedBinaryOp(op, box (ref lhs, ref rhs)) => {\n                 let lhs_ty = lhs.ty(local_decls, tcx);\n                 let rhs_ty = rhs.ty(local_decls, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);"}, {"sha": "6fabddbd149ca677d34a6766dec3638b46bfffea", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -181,9 +181,11 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n             AddressOf(mutability, place) => AddressOf(mutability, place.fold_with(folder)),\n             Len(place) => Len(place.fold_with(folder)),\n             Cast(kind, op, ty) => Cast(kind, op.fold_with(folder), ty.fold_with(folder)),\n-            BinaryOp(op, rhs, lhs) => BinaryOp(op, rhs.fold_with(folder), lhs.fold_with(folder)),\n-            CheckedBinaryOp(op, rhs, lhs) => {\n-                CheckedBinaryOp(op, rhs.fold_with(folder), lhs.fold_with(folder))\n+            BinaryOp(op, box (rhs, lhs)) => {\n+                BinaryOp(op, box (rhs.fold_with(folder), lhs.fold_with(folder)))\n+            }\n+            CheckedBinaryOp(op, box (rhs, lhs)) => {\n+                CheckedBinaryOp(op, box (rhs.fold_with(folder), lhs.fold_with(folder)))\n             }\n             UnaryOp(op, val) => UnaryOp(op, val.fold_with(folder)),\n             Discriminant(place) => Discriminant(place.fold_with(folder)),\n@@ -227,7 +229,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 op.visit_with(visitor)?;\n                 ty.visit_with(visitor)\n             }\n-            BinaryOp(_, ref rhs, ref lhs) | CheckedBinaryOp(_, ref rhs, ref lhs) => {\n+            BinaryOp(_, box (ref rhs, ref lhs)) | CheckedBinaryOp(_, box (ref rhs, ref lhs)) => {\n                 rhs.visit_with(visitor)?;\n                 lhs.visit_with(visitor)\n             }"}, {"sha": "464220cf77ede07f7149eaf68fdeec3e2e7d8648", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -687,8 +687,8 @@ macro_rules! make_mir_visitor {\n                         self.visit_ty(ty, TyContext::Location(location));\n                     }\n \n-                    Rvalue::BinaryOp(_bin_op, lhs, rhs)\n-                    | Rvalue::CheckedBinaryOp(_bin_op, lhs, rhs) => {\n+                    Rvalue::BinaryOp(_bin_op, box(lhs, rhs))\n+                    | Rvalue::CheckedBinaryOp(_bin_op, box(lhs, rhs)) => {\n                         self.visit_operand(lhs, location);\n                         self.visit_operand(rhs, location);\n                     }"}, {"sha": "1a3ba16585d65a98bfa4f5079c290a96170d2184", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -326,8 +326,8 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n                 );\n             }\n \n-            Rvalue::BinaryOp(_bin_op, ref operand1, ref operand2)\n-            | Rvalue::CheckedBinaryOp(_bin_op, ref operand1, ref operand2) => {\n+            Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))\n+            | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {\n                 self.consume_operand(location, operand1);\n                 self.consume_operand(location, operand2);\n             }"}, {"sha": "dcf3093baaf4165f586ff2589542f7a1aa85c4ad", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -1316,8 +1316,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 );\n             }\n \n-            Rvalue::BinaryOp(_bin_op, ref operand1, ref operand2)\n-            | Rvalue::CheckedBinaryOp(_bin_op, ref operand1, ref operand2) => {\n+            Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))\n+            | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {\n                 self.consume_operand(location, (operand1, span), flow_state);\n                 self.consume_operand(location, (operand2, span), flow_state);\n             }"}, {"sha": "f6bbd3b6283de563d9c443203e51566a961e94a9", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -2299,8 +2299,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n             Rvalue::BinaryOp(\n                 BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge,\n-                left,\n-                right,\n+                box (left, right),\n             ) => {\n                 let ty_left = left.ty(body, tcx);\n                 match ty_left.kind() {"}, {"sha": "67c3b043262d56dd11a02a542a14902491b6114a", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -329,8 +329,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::Cast(_, ref operand, _)\n             | Rvalue::UnaryOp(_, ref operand) => self.gather_operand(operand),\n-            Rvalue::BinaryOp(ref _binop, ref lhs, ref rhs)\n-            | Rvalue::CheckedBinaryOp(ref _binop, ref lhs, ref rhs) => {\n+            Rvalue::BinaryOp(ref _binop, box (ref lhs, ref rhs))\n+            | Rvalue::CheckedBinaryOp(ref _binop, box (ref lhs, ref rhs)) => {\n                 self.gather_operand(lhs);\n                 self.gather_operand(rhs);\n             }"}, {"sha": "c22d91fd82a21de3d6c81b9e8f711b2851745306", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -165,15 +165,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.copy_op(&op, &dest)?;\n             }\n \n-            BinaryOp(bin_op, ref left, ref right) => {\n+            BinaryOp(bin_op, box (ref left, ref right)) => {\n                 let layout = binop_left_homogeneous(bin_op).then_some(dest.layout);\n                 let left = self.read_immediate(&self.eval_operand(left, layout)?)?;\n                 let layout = binop_right_homogeneous(bin_op).then_some(left.layout);\n                 let right = self.read_immediate(&self.eval_operand(right, layout)?)?;\n                 self.binop_ignore_overflow(bin_op, &left, &right, &dest)?;\n             }\n \n-            CheckedBinaryOp(bin_op, ref left, ref right) => {\n+            CheckedBinaryOp(bin_op, box (ref left, ref right)) => {\n                 // Due to the extra boolean in the result, we can never reuse the `dest.layout`.\n                 let left = self.read_immediate(&self.eval_operand(left, None)?)?;\n                 let layout = binop_right_homogeneous(bin_op).then_some(left.layout);"}, {"sha": "0dbd7ce7f1dd5f238898ab603c5db7809a8531df", "filename": "compiler/rustc_mir/src/shim.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fshim.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -463,7 +463,7 @@ impl CloneShimBuilder<'tcx> {\n         let cond = self.make_place(Mutability::Mut, tcx.types.bool);\n         let compute_cond = self.make_statement(StatementKind::Assign(box (\n             cond,\n-            Rvalue::BinaryOp(BinOp::Ne, Operand::Copy(end), Operand::Copy(beg)),\n+            Rvalue::BinaryOp(BinOp::Ne, box (Operand::Copy(end), Operand::Copy(beg))),\n         )));\n \n         // `if end != beg { goto loop_body; } else { goto loop_end; }`\n@@ -536,8 +536,7 @@ impl CloneShimBuilder<'tcx> {\n             Place::from(beg),\n             Rvalue::BinaryOp(\n                 BinOp::Add,\n-                Operand::Copy(Place::from(beg)),\n-                Operand::Constant(self.make_usize(1)),\n+                box (Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1))),\n             ),\n         )))];\n         self.block(statements, TerminatorKind::Goto { target: BasicBlock::new(1) }, false);\n@@ -590,8 +589,7 @@ impl CloneShimBuilder<'tcx> {\n             Place::from(beg),\n             Rvalue::BinaryOp(\n                 BinOp::Add,\n-                Operand::Copy(Place::from(beg)),\n-                Operand::Constant(self.make_usize(1)),\n+                box (Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1))),\n             ),\n         )));\n         self.block(vec![statement], TerminatorKind::Goto { target: BasicBlock::new(6) }, true);"}, {"sha": "13d7166b4b5aef922ae24746dce7e32b73b0db81", "filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -168,7 +168,7 @@ where\n         | Rvalue::UnaryOp(_, operand)\n         | Rvalue::Cast(_, operand, _) => in_operand::<Q, _>(cx, in_local, operand),\n \n-        Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n+        Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             in_operand::<Q, _>(cx, in_local, lhs) || in_operand::<Q, _>(cx, in_local, rhs)\n         }\n "}, {"sha": "dd3e28acf96e3f9103b5dabd5026b34b40b64016", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -684,8 +684,8 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 }\n             }\n \n-            Rvalue::BinaryOp(op, ref lhs, ref rhs)\n-            | Rvalue::CheckedBinaryOp(op, ref lhs, ref rhs) => {\n+            Rvalue::BinaryOp(op, box (ref lhs, ref rhs))\n+            | Rvalue::CheckedBinaryOp(op, box (ref lhs, ref rhs)) => {\n                 let lhs_ty = lhs.ty(self.body, self.tcx);\n                 let rhs_ty = rhs.ty(self.body, self.tcx);\n "}, {"sha": "9d03b1b027e1bd8e94941d49098cad0627d9b860", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -676,11 +676,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 trace!(\"checking UnaryOp(op = {:?}, arg = {:?})\", op, arg);\n                 self.check_unary_op(*op, arg, source_info)?;\n             }\n-            Rvalue::BinaryOp(op, left, right) => {\n+            Rvalue::BinaryOp(op, box (left, right)) => {\n                 trace!(\"checking BinaryOp(op = {:?}, left = {:?}, right = {:?})\", op, left, right);\n                 self.check_binary_op(*op, left, right, source_info)?;\n             }\n-            Rvalue::CheckedBinaryOp(op, left, right) => {\n+            Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n                 trace!(\n                     \"checking CheckedBinaryOp(op = {:?}, left = {:?}, right = {:?})\",\n                     op,\n@@ -740,7 +740,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) -> Option<()> {\n         self.use_ecx(|this| {\n             match rvalue {\n-                Rvalue::BinaryOp(op, left, right) | Rvalue::CheckedBinaryOp(op, left, right) => {\n+                Rvalue::BinaryOp(op, box (left, right))\n+                | Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n                     let l = this.ecx.eval_operand(left, None);\n                     let r = this.ecx.eval_operand(right, None);\n \n@@ -772,7 +773,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         }\n                         BinOp::Mul => {\n                             if const_arg.layout.ty.is_integral() && arg_value == 0 {\n-                                if let Rvalue::CheckedBinaryOp(_, _, _) = rvalue {\n+                                if let Rvalue::CheckedBinaryOp(_, _) = rvalue {\n                                     let val = Immediate::ScalarPair(\n                                         const_arg.to_scalar()?.into(),\n                                         Scalar::from_bool(false).into(),"}, {"sha": "e64a539c7f8e45b2b6d24a1d538a7017699ffae5", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -91,8 +91,10 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n                 opt_to_apply.infos[0].first_switch_info.discr_used_in_switch;\n             let not_equal_rvalue = Rvalue::BinaryOp(\n                 not_equal,\n-                Operand::Copy(Place::from(second_discriminant_temp)),\n-                Operand::Copy(first_descriminant_place),\n+                box (\n+                    Operand::Copy(Place::from(second_discriminant_temp)),\n+                    Operand::Copy(first_descriminant_place),\n+                ),\n             );\n             patch.add_statement(\n                 end_of_block_location,"}, {"sha": "bad82fe893eb8cf87e795798361098fe40f7c92d", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -44,7 +44,7 @@ impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n     /// Transform boolean comparisons into logical operations.\n     fn combine_bool_cmp(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n         match rvalue {\n-            Rvalue::BinaryOp(op @ (BinOp::Eq | BinOp::Ne), a, b) => {\n+            Rvalue::BinaryOp(op @ (BinOp::Eq | BinOp::Ne), box (a, b)) => {\n                 let new = match (op, self.try_eval_bool(a), self.try_eval_bool(b)) {\n                     // Transform \"Eq(a, true)\" ==> \"a\"\n                     (BinOp::Eq, _, Some(true)) => Some(a.clone()),"}, {"sha": "177b00b00da36da564a1e9a23b2c70166b12d3fe", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                                 source_info: terminator.source_info,\n                                 kind: StatementKind::Assign(box (\n                                     destination,\n-                                    Rvalue::BinaryOp(bin_op, lhs, rhs),\n+                                    Rvalue::BinaryOp(bin_op, box (lhs, rhs)),\n                                 )),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };"}, {"sha": "15c2c3a160f5141b8ee026885c19397e873759aa", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -139,8 +139,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                             let op = if f_b { BinOp::Eq } else { BinOp::Ne };\n                             let rhs = Rvalue::BinaryOp(\n                                 op,\n-                                Operand::Copy(Place::from(discr_local)),\n-                                const_cmp,\n+                                box (Operand::Copy(Place::from(discr_local)), const_cmp),\n                             );\n                             Statement {\n                                 source_info: f.source_info,"}, {"sha": "f60570483cea436577dd9c2c4473794cd39d2059", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -643,7 +643,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 self.validate_operand(operand)?;\n             }\n \n-            Rvalue::BinaryOp(op, lhs, rhs) | Rvalue::CheckedBinaryOp(op, lhs, rhs) => {\n+            Rvalue::BinaryOp(op, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(op, box (lhs, rhs)) => {\n                 let op = *op;\n                 let lhs_ty = lhs.ty(self.body, self.tcx);\n "}, {"sha": "32df40ebf9e9e5465c90709952e6b846f7136dbe", "filename": "compiler/rustc_mir/src/transform/simplify_comparison_integral.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -84,10 +84,10 @@ impl<'tcx> MirPass<'tcx> for SimplifyComparisonIntegral {\n \n                 use Operand::*;\n                 match rhs {\n-                    Rvalue::BinaryOp(_, ref mut left @ Move(_), Constant(_)) => {\n+                    Rvalue::BinaryOp(_, box (ref mut left @ Move(_), Constant(_))) => {\n                         *left = Copy(opt.to_switch_on);\n                     }\n-                    Rvalue::BinaryOp(_, Constant(_), ref mut right @ Move(_)) => {\n+                    Rvalue::BinaryOp(_, box (Constant(_), ref mut right @ Move(_))) => {\n                         *right = Copy(opt.to_switch_on);\n                     }\n                     _ => (),\n@@ -166,7 +166,10 @@ impl<'a, 'tcx> OptimizationFinder<'a, 'tcx> {\n                             if *lhs == place_switched_on =>\n                         {\n                             match rhs {\n-                                Rvalue::BinaryOp(op @ (BinOp::Eq | BinOp::Ne), left, right) => {\n+                                Rvalue::BinaryOp(\n+                                    op @ (BinOp::Eq | BinOp::Ne),\n+                                    box (left, right),\n+                                ) => {\n                                     let (branch_value_scalar, branch_value_ty, to_switch_on) =\n                                         find_branch_value_info(left, right)?;\n "}, {"sha": "b22dadcd7d2dc5a08ad8bd1359c44388529b5a34", "filename": "compiler/rustc_mir/src/util/elaborate_drops.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -678,11 +678,14 @@ where\n \n         let one = self.constant_usize(1);\n         let (ptr_next, cur_next) = if ptr_based {\n-            (Rvalue::Use(copy(cur.into())), Rvalue::BinaryOp(BinOp::Offset, move_(cur.into()), one))\n+            (\n+                Rvalue::Use(copy(cur.into())),\n+                Rvalue::BinaryOp(BinOp::Offset, box (move_(cur.into()), one)),\n+            )\n         } else {\n             (\n                 Rvalue::AddressOf(Mutability::Mut, tcx.mk_place_index(self.place, cur)),\n-                Rvalue::BinaryOp(BinOp::Add, move_(cur.into()), one),\n+                Rvalue::BinaryOp(BinOp::Add, box (move_(cur.into()), one)),\n             )\n         };\n \n@@ -700,7 +703,7 @@ where\n         let loop_block = BasicBlockData {\n             statements: vec![self.assign(\n                 can_go,\n-                Rvalue::BinaryOp(BinOp::Eq, copy(Place::from(cur)), copy(length_or_end)),\n+                Rvalue::BinaryOp(BinOp::Eq, box (copy(Place::from(cur)), copy(length_or_end))),\n             )],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -816,7 +819,10 @@ where\n                 self.assign(cur, Rvalue::Cast(CastKind::Misc, Operand::Move(tmp), iter_ty)),\n                 self.assign(\n                     length_or_end,\n-                    Rvalue::BinaryOp(BinOp::Offset, Operand::Copy(cur), Operand::Move(length)),\n+                    Rvalue::BinaryOp(\n+                        BinOp::Offset,\n+                        box (Operand::Copy(cur), Operand::Move(length)),\n+                    ),\n                 ),\n             ]\n         } else {"}, {"sha": "89143e244478f8b44bb031f75744563d97d0e9f1", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -667,7 +667,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block,\n             source_info,\n             lt,\n-            Rvalue::BinaryOp(BinOp::Lt, Operand::Copy(Place::from(index)), Operand::Copy(len)),\n+            Rvalue::BinaryOp(\n+                BinOp::Lt,\n+                box (Operand::Copy(Place::from(index)), Operand::Copy(len)),\n+            ),\n         );\n         let msg = BoundsCheck { len: Operand::Move(len), index: Operand::Copy(Place::from(index)) };\n         // assert!(lt, \"...\")"}, {"sha": "fd696f997065c7815550801c83548cebb3cbd7e9", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         is_min,\n-                        Rvalue::BinaryOp(BinOp::Eq, arg.to_copy(), minval),\n+                        Rvalue::BinaryOp(BinOp::Eq, box (arg.to_copy(), minval)),\n                     );\n \n                     block = this.assert(\n@@ -291,7 +291,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block,\n                 source_info,\n                 result_value,\n-                Rvalue::CheckedBinaryOp(op, lhs.to_copy(), rhs.to_copy()),\n+                Rvalue::CheckedBinaryOp(op, box (lhs.to_copy(), rhs.to_copy())),\n             );\n             let val_fld = Field::new(0);\n             let of_fld = Field::new(1);\n@@ -324,7 +324,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block,\n                     source_info,\n                     is_zero,\n-                    Rvalue::BinaryOp(BinOp::Eq, rhs.to_copy(), zero),\n+                    Rvalue::BinaryOp(BinOp::Eq, box (rhs.to_copy(), zero)),\n                 );\n \n                 block = self.assert(block, Operand::Move(is_zero), false, zero_err, span);\n@@ -345,13 +345,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         is_neg_1,\n-                        Rvalue::BinaryOp(BinOp::Eq, rhs.to_copy(), neg_1),\n+                        Rvalue::BinaryOp(BinOp::Eq, box (rhs.to_copy(), neg_1)),\n                     );\n                     self.cfg.push_assign(\n                         block,\n                         source_info,\n                         is_min,\n-                        Rvalue::BinaryOp(BinOp::Eq, lhs.to_copy(), min),\n+                        Rvalue::BinaryOp(BinOp::Eq, box (lhs.to_copy(), min)),\n                     );\n \n                     let is_neg_1 = Operand::Move(is_neg_1);\n@@ -360,14 +360,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         of,\n-                        Rvalue::BinaryOp(BinOp::BitAnd, is_neg_1, is_min),\n+                        Rvalue::BinaryOp(BinOp::BitAnd, box (is_neg_1, is_min)),\n                     );\n \n                     block = self.assert(block, Operand::Move(of), false, overflow_err, span);\n                 }\n             }\n \n-            block.and(Rvalue::BinaryOp(op, lhs, rhs))\n+            block.and(Rvalue::BinaryOp(op, box (lhs, rhs)))\n         }\n     }\n "}, {"sha": "c428ed817b1f8eb3055e4a2dc54c2c63910833ff", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -335,7 +335,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let result = self.temp(bool_ty, source_info.span);\n \n         // result = op(left, right)\n-        self.cfg.push_assign(block, source_info, result, Rvalue::BinaryOp(op, left, right));\n+        self.cfg.push_assign(block, source_info, result, Rvalue::BinaryOp(op, box (left, right)));\n \n         // branch based on result\n         self.cfg.terminate("}, {"sha": "f4983dd7531a2bc3bd356947ee736b4870a79ebe", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -411,7 +411,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                         self.locals[local] = self.operand_to_node(span, operand)?;\n                         Ok(())\n                     }\n-                    Rvalue::BinaryOp(op, ref lhs, ref rhs) if Self::check_binop(op) => {\n+                    Rvalue::BinaryOp(op, box (ref lhs, ref rhs)) if Self::check_binop(op) => {\n                         let lhs = self.operand_to_node(span, lhs)?;\n                         let rhs = self.operand_to_node(span, rhs)?;\n                         self.locals[local] = self.add_node(Node::Binop(op, lhs, rhs), span);\n@@ -421,7 +421,9 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                             Ok(())\n                         }\n                     }\n-                    Rvalue::CheckedBinaryOp(op, ref lhs, ref rhs) if Self::check_binop(op) => {\n+                    Rvalue::CheckedBinaryOp(op, box (ref lhs, ref rhs))\n+                        if Self::check_binop(op) =>\n+                    {\n                         let lhs = self.operand_to_node(span, lhs)?;\n                         let rhs = self.operand_to_node(span, rhs)?;\n                         self.locals[local] = self.add_node(Node::Binop(op, lhs, rhs), span);"}, {"sha": "6a4537e6735ce886d9a31fcd789f88ccb41342fe", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -584,10 +584,10 @@ fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n     match rvalue {\n         Use(op) | Repeat(op, _) | Cast(_, op, _) | UnaryOp(_, op) => visit_op(op),\n         Aggregate(_, ops) => ops.iter().for_each(visit_op),\n-        BinaryOp(_, lhs, rhs) | CheckedBinaryOp(_, lhs, rhs) => {\n+        BinaryOp(_, box (lhs, rhs)) | CheckedBinaryOp(_, box (lhs, rhs)) => {\n             visit_op(lhs);\n             visit_op(rhs);\n-        },\n+        }\n         _ => (),\n     }\n }"}, {"sha": "2cb9588e13f98a731866b2b501b44ea871e9072d", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27885a94c6a6c98a0d49af3962f1218adcd6efd2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27885a94c6a6c98a0d49af3962f1218adcd6efd2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=27885a94c6a6c98a0d49af3962f1218adcd6efd2", "patch": "@@ -172,7 +172,7 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n             }\n         },\n         // binops are fine on integers\n-        Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n+        Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;\n             check_operand(tcx, rhs, span, body)?;\n             let ty = lhs.ty(body, tcx);"}]}