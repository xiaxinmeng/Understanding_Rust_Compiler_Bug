{"sha": "d493a4476c2059924d032fbf01dda091601f9667", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OTNhNDQ3NmMyMDU5OTI0ZDAzMmZiZjAxZGRhMDkxNjAxZjk2Njc=", "commit": {"author": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2018-10-16T15:51:58Z"}, "committer": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2018-10-17T23:42:23Z"}, "message": "clippy: Use if lets and remove redundant returns", "tree": {"sha": "74c1249cba67c8c9824e618fcdea53b97b571a7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74c1249cba67c8c9824e618fcdea53b97b571a7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d493a4476c2059924d032fbf01dda091601f9667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d493a4476c2059924d032fbf01dda091601f9667", "html_url": "https://github.com/rust-lang/rust/commit/d493a4476c2059924d032fbf01dda091601f9667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d493a4476c2059924d032fbf01dda091601f9667/comments", "author": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db663d61fb8b006e3b84ef3bcc9cddbe94e5f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db663d61fb8b006e3b84ef3bcc9cddbe94e5f49", "html_url": "https://github.com/rust-lang/rust/commit/5db663d61fb8b006e3b84ef3bcc9cddbe94e5f49"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "d0d4ed3d3db0a83fd6300ec23b38044b277983d5", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -38,12 +38,12 @@ pub fn folding_ranges(file: &File) -> Vec<Fold> {\n             continue;\n         }\n         if node.kind() == COMMENT {\n-            contiguous_range_for_comment(node, &mut visited_comments).map(|range| {\n+            if let Some(range) = contiguous_range_for_comment(node, &mut visited_comments) {\n                 res.push(Fold {\n                     range,\n                     kind: FoldKind::Comment,\n                 })\n-            });\n+            }\n         }\n     }\n "}, {"sha": "9abbb0d0955185edf22a6f1559559dbfffd071e6", "filename": "crates/ra_editor/src/line_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -29,10 +29,10 @@ impl LineIndex {\n         let line = self.newlines.upper_bound(&offset) - 1;\n         let line_start_offset = self.newlines[line];\n         let col = offset - line_start_offset;\n-        return LineCol {\n+        LineCol {\n             line: line as u32,\n             col,\n-        };\n+        }\n     }\n \n     pub fn offset(&self, line_col: LineCol) -> TextUnit {"}, {"sha": "0bab9dd6725e5c831f9075db77f547968c8bc0d6", "filename": "crates/ra_editor/src/symbols.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fsymbols.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -54,15 +54,15 @@ pub fn file_structure(file: &File) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n \n+\n     for event in file.syntax().preorder() {\n         match event {\n-            WalkEvent::Enter(node) => match structure_node(node) {\n-                Some(mut symbol) => {\n+            WalkEvent::Enter(node) => {\n+                if let Some(mut symbol) = structure_node(node) {\n                     symbol.parent = stack.last().map(|&n| n);\n                     stack.push(res.len());\n                     res.push(symbol);\n                 }\n-                None => (),\n             },\n             WalkEvent::Leave(node) => {\n                 if structure_node(node).is_some() {"}, {"sha": "69b2a1cd1597a0f17ac3835b66a73cc7c777bc59", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -73,9 +73,7 @@ impl ServerWorldState {\n             events\n                 .into_iter()\n                 .map(|event| {\n-                    let text = match event.kind {\n-                        FileEventKind::Add(text) => text,\n-                    };\n+                    let FileEventKind::Add(text) = event.kind;\n                     (event.path, text)\n                 })\n                 .map(|(path, text)| (pm.get_or_insert(path, Root::Lib), text))"}, {"sha": "87f1250bcf137b6a01e9abcb7ce62929f1a04f30", "filename": "crates/ra_syntax/src/algo/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -30,7 +30,8 @@ pub fn find_leaf_at_offset(node: SyntaxNodeRef, offset: TextUnit) -> LeafAtOffse\n     let left = children.next().unwrap();\n     let right = children.next();\n     assert!(children.next().is_none());\n-    return if let Some(right) = right {\n+\n+    if let Some(right) = right {\n         match (\n             find_leaf_at_offset(left, offset),\n             find_leaf_at_offset(right, offset),\n@@ -42,7 +43,7 @@ pub fn find_leaf_at_offset(node: SyntaxNodeRef, offset: TextUnit) -> LeafAtOffse\n         }\n     } else {\n         find_leaf_at_offset(left, offset)\n-    };\n+    }\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "900426a8a91a9a9fe8e1acc27e2f6eb70505230e", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -259,9 +259,8 @@ impl<'a, N: AstNode<'a>> Iterator for AstChildren<'a, N> {\n     type Item = N;\n     fn next(&mut self) -> Option<N> {\n         loop {\n-            match N::cast(self.inner.next()?) {\n-                Some(n) => return Some(n),\n-                None => (),\n+            if let Some(n) = N::cast(self.inner.next()?) {\n+                return Some(n);\n             }\n         }\n     }"}, {"sha": "04087fd6004b9d61212e920f8c1ca71048fd6e4e", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -62,9 +62,8 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet = token_set_union![\n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];\n \n pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n-    match literal(p) {\n-        Some(m) => return Some(m),\n-        None => (),\n+    if let Some(m) = literal(p) {\n+        return Some(m);\n     }\n     if paths::is_path_start(p) || p.at(L_ANGLE) {\n         return Some(path_expr(p, r));"}, {"sha": "06c6b5e6ebf01abaa7ea34250eceaddf5d4f993e", "filename": "crates/ra_syntax/src/grammar/items/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -352,7 +352,7 @@ fn macro_call(p: &mut Parser) -> BlockLike {\n pub(super) fn macro_call_after_excl(p: &mut Parser) -> BlockLike {\n     p.expect(EXCL);\n     p.eat(IDENT);\n-    let flavor = match p.current() {\n+    match p.current() {\n         L_CURLY => {\n             token_tree(p);\n             BlockLike::Block\n@@ -365,9 +365,7 @@ pub(super) fn macro_call_after_excl(p: &mut Parser) -> BlockLike {\n             p.error(\"expected `{`, `[`, `(`\");\n             BlockLike::NotBlock\n         }\n-    };\n-\n-    flavor\n+    }\n }\n \n pub(crate) fn token_tree(p: &mut Parser) {"}, {"sha": "10fa0e0be14bd1b6205f4555b4f650f5773adc7f", "filename": "crates/ra_syntax/src/grammar/patterns.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -49,9 +49,8 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     //         \"hello\" => (),\n     //     }\n     // }\n-    match expressions::literal(p) {\n-        Some(m) => return Some(m),\n-        None => (),\n+    if let Some(m) = expressions::literal(p) {\n+        return Some(m);\n     }\n \n     let m = match la0 {"}, {"sha": "ca4160378288f337606c3cfcc383cefaf5094863", "filename": "crates/ra_syntax/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Fra_syntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Futils.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -42,7 +42,7 @@ pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n         writeln!(buf, \"err: `{}`\", err.msg).unwrap();\n     }\n \n-    return buf;\n+    buf\n }\n \n pub fn check_fuzz_invariants(text: &str) {"}, {"sha": "fdb443690bd97b03ff3077ee83833f9958a598e5", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d493a4476c2059924d032fbf01dda091601f9667/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d493a4476c2059924d032fbf01dda091601f9667/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=d493a4476c2059924d032fbf01dda091601f9667", "patch": "@@ -112,9 +112,8 @@ fn existing_tests(dir: &Path) -> Result<HashMap<String, (PathBuf, Test)>> {\n             name: name.clone(),\n             text,\n         };\n-        match res.insert(name, (path, test)) {\n-            Some(old) => println!(\"Duplicate test: {:?}\", old),\n-            None => (),\n+        if let Some(old) = res.insert(name, (path, test)) {\n+            println!(\"Duplicate test: {:?}\", old);\n         }\n     }\n     Ok(res)"}]}