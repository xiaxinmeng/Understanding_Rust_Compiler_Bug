{"sha": "8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMTVkMWVhMjU1YThkMGJkZGQ2MTk0YWVmZTVjZmVlMDQzNGUwYTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T14:43:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T23:47:04Z"}, "message": "replace `binder_depth` in `LateBoundRegionsDetector`\n\nCo-authored-by: csmoe <35686186+csmoe@users.noreply.github.com>", "tree": {"sha": "57a6b775bc772c22b980e684298c41167910beb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a6b775bc772c22b980e684298c41167910beb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1", "html_url": "https://github.com/rust-lang/rust/commit/8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf", "html_url": "https://github.com/rust-lang/rust/commit/06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "a982724f957e9b88cc5881d483b184224515c324", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1", "patch": "@@ -689,7 +689,7 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     -> Option<Span> {\n     struct LateBoundRegionsDetector<'a, 'tcx: 'a> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        binder_depth: u32,\n+        outer_index: ty::DebruijnIndex,\n         has_late_bound_regions: Option<Span>,\n     }\n \n@@ -702,9 +702,9 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if self.has_late_bound_regions.is_some() { return }\n             match ty.node {\n                 hir::TyBareFn(..) => {\n-                    self.binder_depth += 1;\n+                    self.outer_index.shift_in(1);\n                     intravisit::walk_ty(self, ty);\n-                    self.binder_depth -= 1;\n+                    self.outer_index.shift_out(1);\n                 }\n                 _ => intravisit::walk_ty(self, ty)\n             }\n@@ -714,9 +714,9 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 tr: &'tcx hir::PolyTraitRef,\n                                 m: hir::TraitBoundModifier) {\n             if self.has_late_bound_regions.is_some() { return }\n-            self.binder_depth += 1;\n+            self.outer_index.shift_in(1);\n             intravisit::walk_poly_trait_ref(self, tr, m);\n-            self.binder_depth -= 1;\n+            self.outer_index.shift_out(1);\n         }\n \n         fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n@@ -727,8 +727,13 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 Some(rl::Region::Static) | Some(rl::Region::EarlyBound(..)) => {}\n                 Some(rl::Region::LateBound(debruijn, _, _)) |\n                 Some(rl::Region::LateBoundAnon(debruijn, _))\n-                    if debruijn.depth < self.binder_depth => {}\n-                _ => self.has_late_bound_regions = Some(lt.span),\n+                    if debruijn < self.outer_index => {}\n+                Some(rl::Region::LateBound(..)) |\n+                Some(rl::Region::LateBoundAnon(..)) |\n+                Some(rl::Region::Free(..)) |\n+                None => {\n+                    self.has_late_bound_regions = Some(lt.span);\n+                }\n             }\n         }\n     }\n@@ -738,7 +743,9 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         decl: &'tcx hir::FnDecl)\n                                         -> Option<Span> {\n         let mut visitor = LateBoundRegionsDetector {\n-            tcx, binder_depth: 1, has_late_bound_regions: None\n+            tcx,\n+            outer_index: ty::DebruijnIndex::INNERMOST,\n+            has_late_bound_regions: None,\n         };\n         for lifetime in generics.lifetimes() {\n             let hir_id = tcx.hir.node_to_hir_id(lifetime.lifetime.id);"}]}