{"sha": "fd403f5d1780388a89fc70a3dd8bdac3c0e606c1", "node_id": "C_kwDOAAsO6NoAKGZkNDAzZjVkMTc4MDM4OGE4OWZjNzBhM2RkOGJkYWMzYzBlNjA2YzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-21T14:54:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-21T14:54:06Z"}, "message": "Rollup merge of #100821 - WaffleLapkin:ptr_add_docs, r=scottmcm\n\nMake some docs nicer wrt pointer offsets\n\nThis PR replaces `pointer::offset` with `pointer::add` and similarly `.cast().wrapping_add().cast()` with `.wrapping_byte_add()` **in docs**.\n\nr? ``````@scottmcm``````\n\n_split off from #100746_", "tree": {"sha": "f2428e478c23d4a0b49cbbd5712eac688dd56d09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2428e478c23d4a0b49cbbd5712eac688dd56d09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAkcOCRBK7hj4Ov3rIwAAHIcIAC7+87tN87Pe+gStEdY4n9vz\nIn1XMmDzlHW9+RcImhH3dkQi8xxHyBlDD6kYvAshmWqvKtGETs5znRdxrgiZ3C71\nRs/690C4qfr874SxijaJsoqnh85SS3Wj9fVSLqTQKMPpyyz3TyOlw6FN94oNFGTL\n2p8g/BHWy6C8VYX8vyiqCtbZ4oLvOpFoUUXE2eqWH379drTptZC2OgIkbWVafGVn\nbBJH5IRdId3qZnB5/ubjcvCn3Ilvok5A0HJF1IAGVjPEFdPAp8wDadmDz9TVsral\nOTN8mrilgCXELhudynngXSvcp/xmj/PGfGgxU/HgH7eWxV9z+fUKIXYJrrGsDyM=\n=4zu3\n-----END PGP SIGNATURE-----\n", "payload": "tree f2428e478c23d4a0b49cbbd5712eac688dd56d09\nparent bc66f4085aedd6acd02efaae20dcb9cad831be90\nparent b2625e24b95b5077a1ec59ad6ac667939eb6521f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661093646 +0200\ncommitter GitHub <noreply@github.com> 1661093646 +0200\n\nRollup merge of #100821 - WaffleLapkin:ptr_add_docs, r=scottmcm\n\nMake some docs nicer wrt pointer offsets\n\nThis PR replaces `pointer::offset` with `pointer::add` and similarly `.cast().wrapping_add().cast()` with `.wrapping_byte_add()` **in docs**.\n\nr? ``````@scottmcm``````\n\n_split off from #100746_\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1", "html_url": "https://github.com/rust-lang/rust/commit/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc66f4085aedd6acd02efaae20dcb9cad831be90", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc66f4085aedd6acd02efaae20dcb9cad831be90", "html_url": "https://github.com/rust-lang/rust/commit/bc66f4085aedd6acd02efaae20dcb9cad831be90"}, {"sha": "b2625e24b95b5077a1ec59ad6ac667939eb6521f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2625e24b95b5077a1ec59ad6ac667939eb6521f", "html_url": "https://github.com/rust-lang/rust/commit/b2625e24b95b5077a1ec59ad6ac667939eb6521f"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "be21d8c722d78217c8f27617f09b5a183f6f0f40", "filename": "library/alloc/src/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs?ref=fd403f5d1780388a89fc70a3dd8bdac3c0e606c1", "patch": "@@ -436,9 +436,9 @@ impl CString {\n     ///\n     /// unsafe {\n     ///     assert_eq!(b'f', *ptr as u8);\n-    ///     assert_eq!(b'o', *ptr.offset(1) as u8);\n-    ///     assert_eq!(b'o', *ptr.offset(2) as u8);\n-    ///     assert_eq!(b'\\0', *ptr.offset(3) as u8);\n+    ///     assert_eq!(b'o', *ptr.add(1) as u8);\n+    ///     assert_eq!(b'o', *ptr.add(2) as u8);\n+    ///     assert_eq!(b'\\0', *ptr.add(3) as u8);\n     ///\n     ///     // retake pointer to free memory\n     ///     let _ = CString::from_raw(ptr);"}, {"sha": "fe4dcafe14c322135343140011d6658e2ff6473b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=fd403f5d1780388a89fc70a3dd8bdac3c0e606c1", "patch": "@@ -542,8 +542,8 @@ impl<T> Vec<T> {\n     ///\n     /// unsafe {\n     ///     // Overwrite memory with 4, 5, 6\n-    ///     for i in 0..len as isize {\n-    ///         ptr::write(p.offset(i), 4 + i);\n+    ///     for i in 0..len {\n+    ///         ptr::write(p.add(i), 4 + i);\n     ///     }\n     ///\n     ///     // Put everything back together into a Vec\n@@ -702,8 +702,8 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// unsafe {\n     ///     // Overwrite memory with 4, 5, 6\n-    ///     for i in 0..len as isize {\n-    ///         ptr::write(p.offset(i), 4 + i);\n+    ///     for i in 0..len {\n+    ///         ptr::write(p.add(i), 4 + i);\n     ///     }\n     ///\n     ///     // Put everything back together into a Vec"}, {"sha": "3d7b875eac15d1f6756e240f07a7cb484cfc8da7", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=fd403f5d1780388a89fc70a3dd8bdac3c0e606c1", "patch": "@@ -2209,9 +2209,9 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n ///     dst.reserve(src_len);\n ///\n ///     unsafe {\n-///         // The call to offset is always safe because `Vec` will never\n+///         // The call to add is always safe because `Vec` will never\n ///         // allocate more than `isize::MAX` bytes.\n-///         let dst_ptr = dst.as_mut_ptr().offset(dst_len as isize);\n+///         let dst_ptr = dst.as_mut_ptr().add(dst_len);\n ///         let src_ptr = src.as_ptr();\n ///\n ///         // Truncate `src` without dropping its contents. We do this first,"}, {"sha": "3c96290fc537e19bbe1e2b400a5eabf13ece5a0c", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd403f5d1780388a89fc70a3dd8bdac3c0e606c1/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=fd403f5d1780388a89fc70a3dd8bdac3c0e606c1", "patch": "@@ -1554,8 +1554,8 @@ impl<T> AtomicPtr<T> {\n     /// Offsets the pointer's address by adding `val` *bytes*, returning the\n     /// previous pointer.\n     ///\n-    /// This is equivalent to using [`wrapping_add`] and [`cast`] to atomically\n-    /// perform `ptr = ptr.cast::<u8>().wrapping_add(val).cast::<T>()`.\n+    /// This is equivalent to using [`wrapping_byte_add`] to atomically\n+    /// perform `ptr = ptr.wrapping_byte_add(val)`.\n     ///\n     /// `fetch_byte_add` takes an [`Ordering`] argument which describes the\n     /// memory ordering of this operation. All ordering modes are possible. Note\n@@ -1565,8 +1565,7 @@ impl<T> AtomicPtr<T> {\n     /// **Note**: This method is only available on platforms that support atomic\n     /// operations on [`AtomicPtr`].\n     ///\n-    /// [`wrapping_add`]: pointer::wrapping_add\n-    /// [`cast`]: pointer::cast\n+    /// [`wrapping_byte_add`]: pointer::wrapping_byte_add\n     ///\n     /// # Examples\n     ///\n@@ -1591,8 +1590,8 @@ impl<T> AtomicPtr<T> {\n     /// Offsets the pointer's address by subtracting `val` *bytes*, returning the\n     /// previous pointer.\n     ///\n-    /// This is equivalent to using [`wrapping_sub`] and [`cast`] to atomically\n-    /// perform `ptr = ptr.cast::<u8>().wrapping_sub(val).cast::<T>()`.\n+    /// This is equivalent to using [`wrapping_byte_sub`] to atomically\n+    /// perform `ptr = ptr.wrapping_byte_sub(val)`.\n     ///\n     /// `fetch_byte_sub` takes an [`Ordering`] argument which describes the\n     /// memory ordering of this operation. All ordering modes are possible. Note\n@@ -1602,8 +1601,7 @@ impl<T> AtomicPtr<T> {\n     /// **Note**: This method is only available on platforms that support atomic\n     /// operations on [`AtomicPtr`].\n     ///\n-    /// [`wrapping_sub`]: pointer::wrapping_sub\n-    /// [`cast`]: pointer::cast\n+    /// [`wrapping_byte_sub`]: pointer::wrapping_byte_sub\n     ///\n     /// # Examples\n     ///"}]}