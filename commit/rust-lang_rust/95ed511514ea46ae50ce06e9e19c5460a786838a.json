{"sha": "95ed511514ea46ae50ce06e9e19c5460a786838a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZWQ1MTE1MTRlYTQ2YWU1MGNlMDZlOWUxOWM1NDYwYTc4NjgzOGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-16T09:45:59Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-07T08:51:51Z"}, "message": "Mostly fix compiling without LLVM (with metadata_only backend)", "tree": {"sha": "13a5e63d49bdb57e76176eab994842b8d12570db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a5e63d49bdb57e76176eab994842b8d12570db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95ed511514ea46ae50ce06e9e19c5460a786838a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95ed511514ea46ae50ce06e9e19c5460a786838a", "html_url": "https://github.com/rust-lang/rust/commit/95ed511514ea46ae50ce06e9e19c5460a786838a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95ed511514ea46ae50ce06e9e19c5460a786838a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ceb1637b2500f384015578a5a6f556bcc992052", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ceb1637b2500f384015578a5a6f556bcc992052", "html_url": "https://github.com/rust-lang/rust/commit/6ceb1637b2500f384015578a5a6f556bcc992052"}], "stats": {"total": 134, "additions": 15, "deletions": 119}, "files": [{"sha": "7bf52a369e37fa0892b66eec0f54df83ef9e869e", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -14,10 +14,6 @@\n # =============================================================================\n [llvm]\n \n-# Indicates whether rustc will support compilation with LLVM\n-# note: rustc does not compile without LLVM at the moment\n-#enabled = true\n-\n # Indicates whether the LLVM build is a Release or Debug build\n #optimize = true\n "}, {"sha": "e3610c1d679be6332e438e480a6675fa6872232b", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -2031,8 +2031,6 @@ dependencies = [\n name = \"rustc_codegen_utils\"\n version = \"0.0.0\"\n dependencies = [\n- \"ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\","}, {"sha": "4607ca5cf9f48e72b32672d424f97c48399c2e6c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -114,10 +114,6 @@ fn main() {\n \n     cmd.env(\"RUSTC_BREAK_ON_ICE\", \"1\");\n \n-    if args.iter().find(|s| **s == OsString::from(\"___\")).is_some() {\n-        cmd.arg(\"-Zcodegen-backend=metadata_only\");\n-    }\n-\n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option."}, {"sha": "d2f9b2653d503b37a78dd1878af27db3af101e6d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -893,7 +893,7 @@ impl<'a> Builder<'a> {\n         //\n         // If LLVM support is disabled we need to use the snapshot compiler to compile\n         // build scripts, as the new compiler doesn't support executables.\n-        if mode == Mode::Std || !self.config.llvm_enabled {\n+        if mode == Mode::Std || self.config.rust_codegen_backends.is_empty() {\n             cargo\n                 .env(\"RUSTC_SNAPSHOT\", &self.initial_rustc)\n                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());"}, {"sha": "2e629456b7ef762ab5ba1be1f5d3ecd9a0e949b9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -74,7 +74,6 @@ pub struct Config {\n     pub backtrace_on_ice: bool,\n \n     // llvm codegen options\n-    pub llvm_enabled: bool,\n     pub llvm_assertions: bool,\n     pub llvm_optimize: bool,\n     pub llvm_release_debuginfo: bool,\n@@ -239,7 +238,6 @@ struct Install {\n #[derive(Deserialize, Default)]\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Llvm {\n-    enabled: Option<bool>,\n     ccache: Option<StringOrBool>,\n     ninja: Option<bool>,\n     assertions: Option<bool>,\n@@ -341,7 +339,6 @@ impl Config {\n \n     pub fn default_opts() -> Config {\n         let mut config = Config::default();\n-        config.llvm_enabled = true;\n         config.llvm_optimize = true;\n         config.llvm_version_check = true;\n         config.use_jemalloc = true;\n@@ -496,7 +493,6 @@ impl Config {\n                 Some(StringOrBool::Bool(false)) | None => {}\n             }\n             set(&mut config.ninja, llvm.ninja);\n-            set(&mut config.llvm_enabled, llvm.enabled);\n             llvm_assertions = llvm.assertions;\n             set(&mut config.llvm_optimize, llvm.optimize);\n             set(&mut config.llvm_release_debuginfo, llvm.release_debuginfo);"}, {"sha": "917b85690dea6587c077ce8be63567a3a7c611c2", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -1096,7 +1096,7 @@ impl Step for Compiletest {\n             cmd.arg(\"--quiet\");\n         }\n \n-        if builder.config.llvm_enabled {\n+        if !builder.config.rust_codegen_backends.is_empty() {\n             let llvm_config = builder.ensure(native::Llvm {\n                 target: builder.config.build,\n                 emscripten: false,\n@@ -1129,7 +1129,7 @@ impl Step for Compiletest {\n                 }\n             }\n         }\n-        if suite == \"run-make-fulldeps\" && !builder.config.llvm_enabled {\n+        if suite == \"run-make-fulldeps\" && builder.config.rust_codegen_backends.is_empty() {\n             builder.info(&format!(\n                 \"Ignoring run-make test suite as they generally don't work without LLVM\"\n             ));"}, {"sha": "640dd9ecdd9995c3f2371643a264fd5f7c369d11", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -672,7 +672,7 @@ impl<'a> Builder<'a> {\n     }\n \n     fn llvm_bin_path(&self) -> Option<PathBuf> {\n-        if self.config.llvm_enabled && !self.config.dry_run {\n+        if !self.config.rust_codegen_backends.is_empty() && !self.config.dry_run {\n             let llvm_config = self.ensure(native::Llvm {\n                 target: self.config.build,\n                 emscripten: false,"}, {"sha": "77a29ac89f5cb69dd8082a14baf99a444affbb96", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -10,8 +10,6 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-ar = \"0.3.0\"\n-flate2 = \"1.0\"\n log = \"0.4\"\n \n syntax = { path = \"../libsyntax\" }"}, {"sha": "25d01ace4cae9682ac14c2ec4e6d5043f774fd26", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 11, "deletions": 94, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -22,17 +22,13 @@\n #![feature(box_syntax)]\n \n use std::any::Any;\n-use std::io::prelude::*;\n-use std::io::{self, Cursor};\n+use std::io::{self, Write};\n use std::fs::File;\n use std::path::Path;\n use std::sync::{mpsc, Arc};\n \n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::sync::Lrc;\n-use ar::{Archive, Builder, Header};\n-use flate2::Compression;\n-use flate2::write::DeflateEncoder;\n \n use syntax::symbol::Symbol;\n use rustc::hir::def_id::LOCAL_CRATE;\n@@ -80,96 +76,27 @@ pub trait CodegenBackend {\n     ) -> Result<(), CompileIncomplete>;\n }\n \n-pub struct DummyCodegenBackend;\n-\n-impl CodegenBackend for DummyCodegenBackend {\n-    fn metadata_loader(&self) -> Box<MetadataLoader + Sync> {\n-        box DummyMetadataLoader(())\n-    }\n-\n-    fn provide(&self, _providers: &mut Providers) {\n-        bug!(\"DummyCodegenBackend::provide\");\n-    }\n-\n-    fn provide_extern(&self, _providers: &mut Providers) {\n-        bug!(\"DummyCodegenBackend::provide_extern\");\n-    }\n-\n-    fn codegen_crate<'a, 'tcx>(\n-        &self,\n-        _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        _rx: mpsc::Receiver<Box<Any + Send>>\n-    ) -> Box<Any> {\n-        bug!(\"DummyCodegenBackend::codegen_backend\");\n-    }\n-\n-    fn join_codegen_and_link(\n-        &self,\n-        _ongoing_codegen: Box<Any>,\n-        _sess: &Session,\n-        _dep_graph: &DepGraph,\n-        _outputs: &OutputFilenames,\n-    ) -> Result<(), CompileIncomplete> {\n-        bug!(\"DummyCodegenBackend::join_codegen_and_link\");\n-    }\n-}\n-\n-pub struct DummyMetadataLoader(());\n-\n-impl MetadataLoader for DummyMetadataLoader {\n-    fn get_rlib_metadata(\n-        &self,\n-        _target: &Target,\n-        _filename: &Path\n-    ) -> Result<MetadataRef, String> {\n-        bug!(\"DummyMetadataLoader::get_rlib_metadata\");\n-    }\n-\n-    fn get_dylib_metadata(\n-        &self,\n-        _target: &Target,\n-        _filename: &Path\n-    ) -> Result<MetadataRef, String> {\n-        bug!(\"DummyMetadataLoader::get_dylib_metadata\");\n-    }\n-}\n-\n pub struct NoLlvmMetadataLoader;\n \n impl MetadataLoader for NoLlvmMetadataLoader {\n     fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        let file = File::open(filename)\n+        let mut file = File::open(filename)\n             .map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n-        let mut archive = Archive::new(file);\n \n-        while let Some(entry_result) = archive.next_entry() {\n-            let mut entry = entry_result\n-                .map_err(|e| format!(\"metadata section read err: {:?}\", e))?;\n-            if entry.header().identifier() == \"rust.metadata.bin\" {\n-                let mut buf = Vec::new();\n-                io::copy(&mut entry, &mut buf).unwrap();\n-                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n-                return Ok(rustc_erase_owner!(buf.map_owner_box()));\n-            }\n-        }\n-\n-        Err(\"Couldn't find metadata section\".to_string())\n+        let mut buf = Vec::new();\n+        io::copy(&mut file, &mut buf).unwrap();\n+        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+        return Ok(rustc_erase_owner!(buf.map_owner_box()));\n     }\n \n-    fn get_dylib_metadata(\n-        &self,\n-        _target: &Target,\n-        _filename: &Path,\n-    ) -> Result<MetadataRef, String> {\n-        // FIXME: Support reading dylibs from llvm enabled rustc\n-        self.get_rlib_metadata(_target, _filename)\n+    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String> {\n+        self.get_rlib_metadata(target, filename)\n     }\n }\n \n pub struct MetadataOnlyCodegenBackend(());\n pub struct OngoingCodegen {\n     metadata: EncodedMetadata,\n-    metadata_version: Vec<u8>,\n     crate_name: Symbol,\n }\n \n@@ -257,7 +184,6 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n \n         box OngoingCodegen {\n             metadata: metadata,\n-            metadata_version: tcx.metadata_encoding_version().to_vec(),\n             crate_name: tcx.crate_name(LOCAL_CRATE),\n         }\n     }\n@@ -277,18 +203,9 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n             }\n             let output_name =\n                 out_filename(sess, crate_type, &outputs, &ongoing_codegen.crate_name.as_str());\n-            let mut compressed = ongoing_codegen.metadata_version.clone();\n-            let metadata = if crate_type == CrateType::CrateTypeDylib {\n-                DeflateEncoder::new(&mut compressed, Compression::fast())\n-                    .write_all(&ongoing_codegen.metadata.raw_data)\n-                    .unwrap();\n-                &compressed\n-            } else {\n-                &ongoing_codegen.metadata.raw_data\n-            };\n-            let mut builder = Builder::new(File::create(&output_name).unwrap());\n-            let header = Header::new(\"rust.metadata.bin\".to_string(), metadata.len() as u64);\n-            builder.append(&header, Cursor::new(metadata)).unwrap();\n+            let metadata = &ongoing_codegen.metadata.raw_data;\n+            let mut file = File::create(&output_name).unwrap();\n+            file.write_all(metadata).unwrap();\n         }\n \n         sess.abort_if_errors();"}, {"sha": "c168f26cd170d25f2eb287666d3c01daba9d570d", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -25,8 +25,6 @@\n \n #![recursion_limit=\"256\"]\n \n-extern crate ar;\n-extern crate flate2;\n #[macro_use]\n extern crate log;\n \n@@ -39,8 +37,6 @@ extern crate syntax;\n extern crate syntax_pos;\n #[macro_use] extern crate rustc_data_structures;\n \n-pub extern crate rustc as __rustc;\n-\n use rustc::ty::TyCtxt;\n \n pub mod link;"}, {"sha": "942d27202ecd56f794ee5cf83b618391a33cd87a", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ed511514ea46ae50ce06e9e19c5460a786838a/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=95ed511514ea46ae50ce06e9e19c5460a786838a", "patch": "@@ -59,7 +59,6 @@ static WHITELIST_CRATES: &'static [CrateVersion] = &[\n /// Whitelist of crates rustc is allowed to depend on. Avoid adding to the list if possible.\n static WHITELIST: &'static [Crate] = &[\n     Crate(\"aho-corasick\"),\n-    Crate(\"ar\"),\n     Crate(\"arrayvec\"),\n     Crate(\"atty\"),\n     Crate(\"backtrace\"),"}]}