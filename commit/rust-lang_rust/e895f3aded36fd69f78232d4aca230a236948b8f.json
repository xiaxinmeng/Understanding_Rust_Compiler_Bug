{"sha": "e895f3aded36fd69f78232d4aca230a236948b8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OTVmM2FkZWQzNmZkNjlmNzgyMzJkNGFjYTIzMGEyMzY5NDhiOGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-19T21:25:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T16:41:47Z"}, "message": "convert `dropck_outlives` type-op to use the query", "tree": {"sha": "20c3960dfa6f02561d1c1cf936d22eb0900ee643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c3960dfa6f02561d1c1cf936d22eb0900ee643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e895f3aded36fd69f78232d4aca230a236948b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e895f3aded36fd69f78232d4aca230a236948b8f", "html_url": "https://github.com/rust-lang/rust/commit/e895f3aded36fd69f78232d4aca230a236948b8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e895f3aded36fd69f78232d4aca230a236948b8f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977f3fc9403624def9a2d030e5542f73bd26bb1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/977f3fc9403624def9a2d030e5542f73bd26bb1f", "html_url": "https://github.com/rust-lang/rust/commit/977f3fc9403624def9a2d030e5542f73bd26bb1f"}], "stats": {"total": 115, "additions": 78, "deletions": 37}, "files": [{"sha": "2aaa32aa032025f0d3fa0601b065c8b21014abbb", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e895f3aded36fd69f78232d4aca230a236948b8f/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e895f3aded36fd69f78232d4aca230a236948b8f/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=e895f3aded36fd69f78232d4aca230a236948b8f", "patch": "@@ -11,6 +11,7 @@\n use infer::at::At;\n use infer::InferOk;\n use std::iter::FromIterator;\n+use syntax::codemap::Span;\n use ty::subst::Kind;\n use ty::{self, Ty, TyCtxt};\n \n@@ -60,22 +61,9 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n                     &orig_values,\n                     result,\n                 ) {\n-                    Ok(InferOk {\n-                        value: DropckOutlivesResult { kinds, overflows },\n-                        obligations,\n-                    }) => {\n-                        for overflow_ty in overflows.into_iter().take(1) {\n-                            let mut err = struct_span_err!(\n-                                tcx.sess,\n-                                span,\n-                                E0320,\n-                                \"overflow while adding drop-check rules for {}\",\n-                                self.infcx.resolve_type_vars_if_possible(&ty),\n-                            );\n-                            err.note(&format!(\"overflowed on {}\", overflow_ty));\n-                            err.emit();\n-                        }\n-\n+                    Ok(InferOk { value, obligations }) => {\n+                        let ty = self.infcx.resolve_type_vars_if_possible(&ty);\n+                        let kinds = value.into_kinds_reporting_overflows(tcx, span, ty);\n                         return InferOk {\n                             value: kinds,\n                             obligations,\n@@ -102,12 +90,44 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, Default)]\n pub struct DropckOutlivesResult<'tcx> {\n     pub kinds: Vec<Kind<'tcx>>,\n     pub overflows: Vec<Ty<'tcx>>,\n }\n \n+impl<'tcx> DropckOutlivesResult<'tcx> {\n+    pub fn report_overflows(\n+        &self,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n+        span: Span,\n+        ty: Ty<'tcx>,\n+    ) {\n+        for overflow_ty in self.overflows.iter().take(1) {\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0320,\n+                \"overflow while adding drop-check rules for {}\",\n+                ty,\n+            );\n+            err.note(&format!(\"overflowed on {}\", overflow_ty));\n+            err.emit();\n+        }\n+    }\n+\n+    pub fn into_kinds_reporting_overflows(\n+        self,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n+        span: Span,\n+        ty: Ty<'tcx>,\n+    ) -> Vec<Kind<'tcx>> {\n+        self.report_overflows(tcx, span, ty);\n+        let DropckOutlivesResult { kinds, overflows: _ } = self;\n+        kinds\n+    }\n+}\n+\n /// A set of constraints that need to be satisfied in order for\n /// a type to be valid for destruction.\n #[derive(Clone, Debug)]"}, {"sha": "a6fbb1650987c48d8853f8f62717b62d52c7394f", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e895f3aded36fd69f78232d4aca230a236948b8f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e895f3aded36fd69f78232d4aca230a236948b8f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=e895f3aded36fd69f78232d4aca230a236948b8f", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::{InferCtxt, InferOk};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n use traits::query::dropck_outlives::trivial_dropck_outlives;\n+use traits::query::dropck_outlives::DropckOutlivesResult;\n use traits::query::Fallible;\n-use traits::ObligationCause;\n-use ty::subst::Kind;\n-use ty::{ParamEnv, Ty, TyCtxt};\n+use ty::{ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Debug)]\n pub struct DropckOutlives<'tcx> {\n@@ -30,23 +29,39 @@ impl<'tcx> DropckOutlives<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> super::TypeOp<'gcx, 'tcx> for DropckOutlives<'tcx> {\n-    type Output = Vec<Kind<'tcx>>;\n+impl super::QueryTypeOp<'gcx, 'tcx> for DropckOutlives<'tcx>\n+where\n+    'gcx: 'tcx,\n+{\n+    type QueryKey = ParamEnvAnd<'tcx, Ty<'tcx>>;\n+    type QueryResult = DropckOutlivesResult<'tcx>;\n \n-    fn trivial_noop(self, tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::Output, Self> {\n+    fn trivial_noop(self, tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self> {\n         if trivial_dropck_outlives(tcx, self.dropped_ty) {\n-            Ok(vec![])\n+            Ok(DropckOutlivesResult::default())\n         } else {\n             Err(self)\n         }\n     }\n \n-    fn perform(\n-        self,\n-        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-    ) -> Fallible<InferOk<'tcx, Vec<Kind<'tcx>>>> {\n-        Ok(infcx\n-            .at(&ObligationCause::dummy(), self.param_env)\n-            .dropck_outlives(self.dropped_ty))\n+    fn param_env(&self) -> ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n+    fn into_query_key(self) -> Self::QueryKey {\n+        self.param_env.and(self.dropped_ty)\n+    }\n+\n+    fn perform_query(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, Self::QueryKey>,\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>> {\n+        tcx.dropck_outlives(canonicalized)\n+    }\n+\n+    fn upcast_result(\n+        lifted_query_result: &'a CanonicalizedQueryResult<'gcx, Self::QueryResult>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self::QueryResult>> {\n+        lifted_query_result\n     }\n }"}, {"sha": "73ed695bfb276db9c512a4b06a25d39c11a6d4ce", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e895f3aded36fd69f78232d4aca230a236948b8f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e895f3aded36fd69f78232d4aca230a236948b8f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=e895f3aded36fd69f78232d4aca230a236948b8f", "patch": "@@ -13,12 +13,12 @@ use borrow_check::nll::type_check::AtLocation;\n use dataflow::move_paths::{HasMoveData, MoveData};\n use dataflow::MaybeInitializedPlaces;\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n+use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::mir::Local;\n use rustc::mir::{BasicBlock, Location, Mir};\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;\n-use rustc::ty::subst::Kind;\n use rustc::ty::{Ty, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use std::rc::Rc;\n@@ -71,7 +71,7 @@ where\n }\n \n struct DropData<'tcx> {\n-    dropped_kinds: Vec<Kind<'tcx>>,\n+    dropck_result: DropckOutlivesResult<'tcx>,\n     region_constraint_data: Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>,\n }\n \n@@ -202,10 +202,16 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n             self.cx.push_region_constraints(location.at_self(), data);\n         }\n \n+        drop_data.dropck_result.report_overflows(\n+            self.cx.infcx.tcx,\n+            self.mir.source_info(location).span,\n+            dropped_ty,\n+        );\n+\n         // All things in the `outlives` array may be touched by\n         // the destructor and must be live at this point.\n         let cause = Cause::DropVar(dropped_local, location);\n-        for &kind in &drop_data.dropped_kinds {\n+        for &kind in &drop_data.dropck_result.kinds {\n             Self::push_type_live_constraint(&mut self.cx, kind, location, cause);\n         }\n     }\n@@ -217,12 +223,12 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n         debug!(\"compute_drop_data(dropped_ty={:?})\", dropped_ty,);\n \n         let param_env = cx.param_env;\n-        let (dropped_kinds, region_constraint_data) = DropckOutlives::new(param_env, dropped_ty)\n+        let (dropck_result, region_constraint_data) = DropckOutlives::new(param_env, dropped_ty)\n             .fully_perform(cx.infcx)\n             .unwrap();\n \n         DropData {\n-            dropped_kinds,\n+            dropck_result,\n             region_constraint_data,\n         }\n     }"}]}