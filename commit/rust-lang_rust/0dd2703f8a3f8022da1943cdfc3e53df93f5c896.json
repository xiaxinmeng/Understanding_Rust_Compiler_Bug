{"sha": "0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "node_id": "C_kwDOAAsO6NoAKDBkZDI3MDNmOGEzZjgwMjJkYTE5NDNjZGZjM2U1M2RmOTNmNWM4OTY", "commit": {"author": {"name": "zredb", "email": "zredb@163.com", "date": "2022-01-10T04:55:21Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-17T12:41:59Z"}, "message": "fix #90187", "tree": {"sha": "84e95c485a58925e931354390a83c5dc55b3374f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e95c485a58925e931354390a83c5dc55b3374f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "html_url": "https://github.com/rust-lang/rust/commit/0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/comments", "author": {"login": "zredb", "id": 8102504, "node_id": "MDQ6VXNlcjgxMDI1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8102504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zredb", "html_url": "https://github.com/zredb", "followers_url": "https://api.github.com/users/zredb/followers", "following_url": "https://api.github.com/users/zredb/following{/other_user}", "gists_url": "https://api.github.com/users/zredb/gists{/gist_id}", "starred_url": "https://api.github.com/users/zredb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zredb/subscriptions", "organizations_url": "https://api.github.com/users/zredb/orgs", "repos_url": "https://api.github.com/users/zredb/repos", "events_url": "https://api.github.com/users/zredb/events{/privacy}", "received_events_url": "https://api.github.com/users/zredb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba", "html_url": "https://github.com/rust-lang/rust/commit/ff88b59e58a03dc142e80f35f4ce6177e07ad8ba"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "125afb2192c44bf95806985500e5b2ae4c8017c7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "patch": "@@ -338,6 +338,7 @@ impl ExternalCrate {\n }\n \n /// Indicates where an external crate can be found.\n+#[derive(Debug)]\n crate enum ExternalLocation {\n     /// Remote URL root of the external crate\n     Remote(String),"}, {"sha": "c9aa326373906eeae38b3eaa2529cc82e5cff279", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "patch": "@@ -25,7 +25,7 @@ use crate::html::render::IndexItem;\n /// to be a fairly large and expensive structure to clone. Instead this adheres\n /// to `Send` so it may be stored in an `Arc` instance and shared among the various\n /// rendering threads.\n-#[derive(Default)]\n+#[derive(Default, Debug)]\n crate struct Cache {\n     /// Maps a type ID to all known implementations for that type. This is only\n     /// recognized for intra-crate [`clean::Type::Path`]s, and is used to print"}, {"sha": "fa965ded176983b3186693e7042e2d0c7edd606a", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "patch": "@@ -248,12 +248,14 @@ fn add_generics_and_bounds_as_types<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     recurse: usize,\n     res: &mut Vec<TypeWithKind>,\n+    cache: &Cache,\n ) {\n     fn insert_ty(\n         res: &mut Vec<TypeWithKind>,\n         tcx: TyCtxt<'_>,\n         ty: Type,\n         mut generics: Vec<TypeWithKind>,\n+        cache: &Cache,\n     ) {\n         let is_full_generic = ty.is_full_generic();\n \n@@ -347,14 +349,15 @@ fn add_generics_and_bounds_as_types<'tcx>(\n                                     tcx,\n                                     recurse + 1,\n                                     &mut ty_generics,\n+                                    cache,\n                                 )\n                             }\n                             _ => {}\n                         }\n                     }\n                 }\n             }\n-            insert_ty(res, tcx, arg.clone(), ty_generics);\n+            insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n         }\n         // Otherwise we check if the trait bounds are \"inlined\" like `T: Option<u32>`...\n         if let Some(bound) = generics.params.iter().find(|g| g.is_type() && g.name == arg_s) {\n@@ -368,10 +371,11 @@ fn add_generics_and_bounds_as_types<'tcx>(\n                         tcx,\n                         recurse + 1,\n                         &mut ty_generics,\n+                        cache,\n                     );\n                 }\n             }\n-            insert_ty(res, tcx, arg.clone(), ty_generics);\n+            insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n         }\n     } else {\n         // This is not a type parameter. So for example if we have `T, U: Option<T>`, and we're\n@@ -382,10 +386,17 @@ fn add_generics_and_bounds_as_types<'tcx>(\n         let mut ty_generics = Vec::new();\n         if let Some(arg_generics) = arg.generics() {\n             for gen in arg_generics.iter() {\n-                add_generics_and_bounds_as_types(generics, gen, tcx, recurse + 1, &mut ty_generics);\n+                add_generics_and_bounds_as_types(\n+                    generics,\n+                    gen,\n+                    tcx,\n+                    recurse + 1,\n+                    &mut ty_generics,\n+                    cache,\n+                );\n             }\n         }\n-        insert_ty(res, tcx, arg.clone(), ty_generics);\n+        insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n     }\n }\n \n@@ -407,7 +418,7 @@ fn get_fn_inputs_and_outputs<'tcx>(\n             continue;\n         }\n         let mut args = Vec::new();\n-        add_generics_and_bounds_as_types(generics, &arg.type_, tcx, 0, &mut args);\n+        add_generics_and_bounds_as_types(generics, &arg.type_, tcx, 0, &mut args, cache);\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n@@ -420,7 +431,7 @@ fn get_fn_inputs_and_outputs<'tcx>(\n     let mut ret_types = Vec::new();\n     match decl.output {\n         FnRetTy::Return(ref return_type) => {\n-            add_generics_and_bounds_as_types(generics, return_type, tcx, 0, &mut ret_types);\n+            add_generics_and_bounds_as_types(generics, return_type, tcx, 0, &mut ret_types, cache);\n             if ret_types.is_empty() {\n                 if let Some(kind) = return_type.def_id(cache).map(|did| tcx.def_kind(did).into()) {\n                     ret_types.push(TypeWithKind::from((get_index_type(return_type, vec![]), kind)));"}, {"sha": "7c6559bf01d7049fcebf049443e65edd436b1149", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "patch": "@@ -4,6 +4,7 @@\n use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n+use crate::formats::cache::Cache;\n use crate::visit::DocVisitor;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -57,14 +58,14 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n         }\n     });\n \n-    let mut cleaner = BadImplStripper { prims, items: crate_items };\n+    let mut cleaner = BadImplStripper { prims, items: crate_items, cache: &cx.cache };\n     let mut type_did_to_deref_target: FxHashMap<DefId, &Type> = FxHashMap::default();\n \n     // Follow all `Deref` targets of included items and recursively add them as valid\n     fn add_deref_target(\n         cx: &DocContext<'_>,\n         map: &FxHashMap<DefId, &Type>,\n-        cleaner: &mut BadImplStripper,\n+        cleaner: &mut BadImplStripper<'_>,\n         type_did: DefId,\n     ) {\n         if let Some(target) = map.get(&type_did) {\n@@ -204,19 +205,20 @@ impl DocVisitor for ItemCollector {\n     }\n }\n \n-struct BadImplStripper {\n+struct BadImplStripper<'a> {\n     prims: FxHashSet<PrimitiveType>,\n     items: FxHashSet<ItemId>,\n+    crate cache: &'a Cache,\n }\n \n-impl BadImplStripper {\n+impl<'a> BadImplStripper<'a> {\n     fn keep_impl(&self, ty: &Type, is_deref: bool) -> bool {\n         if let Generic(_) = ty {\n             // keep impls made on generics\n             true\n         } else if let Some(prim) = ty.primitive_type() {\n             self.prims.contains(&prim)\n-        } else if let Some(did) = ty.def_id(&cx.cache) {\n+        } else if let Some(did) = ty.def_id(self.cache) {\n             is_deref || self.keep_impl_with_def_id(did.into())\n         } else {\n             false"}, {"sha": "e7a99ee7bfd840fb24f724150c13d6b6a405dd93", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "patch": "@@ -15,7 +15,7 @@ crate const STRIP_HIDDEN: Pass = Pass {\n };\n \n /// Strip items marked `#[doc(hidden)]`\n-crate fn strip_hidden(krate: clean::Crate, _: &mut DocContext<'_>) -> clean::Crate {\n+crate fn strip_hidden(krate: clean::Crate, cx: &mut DocContext<'_>) -> clean::Crate {\n     let mut retained = ItemIdSet::default();\n \n     // strip all #[doc(hidden)] items\n@@ -25,7 +25,7 @@ crate fn strip_hidden(krate: clean::Crate, _: &mut DocContext<'_>) -> clean::Cra\n     };\n \n     // strip all impls referencing stripped items\n-    let mut stripper = ImplStripper { retained: &retained };\n+    let mut stripper = ImplStripper { retained: &retained, cache: &cx.cache };\n     stripper.fold_crate(krate)\n }\n "}, {"sha": "ef7e768a5114922abbd178e9560d9ec919341c33", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "patch": "@@ -29,6 +29,6 @@ crate fn strip_private(mut krate: clean::Crate, cx: &mut DocContext<'_>) -> clea\n     }\n \n     // strip all impls referencing private items\n-    let mut stripper = ImplStripper { retained: &retained };\n+    let mut stripper = ImplStripper { retained: &retained, cache: &cx.cache };\n     stripper.fold_crate(krate)\n }"}, {"sha": "4701d7f3e143a84fc2c3707c61189851d6d76bd2", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd2703f8a3f8022da1943cdfc3e53df93f5c896/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=0dd2703f8a3f8022da1943cdfc3e53df93f5c896", "patch": "@@ -5,6 +5,7 @@ use std::mem;\n \n use crate::clean::{self, Item, ItemIdSet};\n use crate::fold::{strip_item, DocFolder};\n+use crate::formats::cache::Cache;\n \n crate struct Stripper<'a> {\n     crate retained: &'a mut ItemIdSet,"}]}