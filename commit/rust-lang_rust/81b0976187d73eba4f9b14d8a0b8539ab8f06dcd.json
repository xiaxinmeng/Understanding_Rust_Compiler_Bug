{"sha": "81b0976187d73eba4f9b14d8a0b8539ab8f06dcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYjA5NzYxODdkNzNlYmE0ZjliMTRkOGEwYjg1MzlhYjhmMDZkY2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T16:58:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T16:58:48Z"}, "message": "Future proof find-usages API\n\nWe might want to provide more efficient impls for check if usages\nexist, limiting the search, filtering and cancellation, so let's\nviolate YAGNI a bit here.", "tree": {"sha": "15017f0b41ea44614d603f0b9e029e7bc86a5c44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15017f0b41ea44614d603f0b9e029e7bc86a5c44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd", "html_url": "https://github.com/rust-lang/rust/commit/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686a6a26fd2263e4bb958fbcf94b04244ed73e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/686a6a26fd2263e4bb958fbcf94b04244ed73e08", "html_url": "https://github.com/rust-lang/rust/commit/686a6a26fd2263e4bb958fbcf94b04244ed73e08"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "c1124b9e2fb9fb84b76f354bee4a8ab702d2fbe4", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=81b0976187d73eba4f9b14d8a0b8539ab8f06dcd", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n         target,\n         |builder| {\n             let definition = Definition::ModuleDef(ModuleDef::EnumVariant(variant_hir));\n-            let res = definition.find_usages(&ctx.sema, None);\n+            let res = definition.usages(&ctx.sema).all();\n             let start_offset = variant.parent_enum().syntax().text_range().start();\n             let mut visited_modules_set = FxHashSet::default();\n             visited_modules_set.insert(current_module);"}, {"sha": "164bbce86fcb76775feab25a72db884b106c0228", "filename": "crates/assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=81b0976187d73eba4f9b14d8a0b8539ab8f06dcd", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n \n     let def = ctx.sema.to_def(&bind_pat)?;\n     let def = Definition::Local(def);\n-    let refs = def.find_usages(&ctx.sema, None);\n+    let refs = def.usages(&ctx.sema).all();\n     if refs.is_empty() {\n         mark::hit!(test_not_applicable_if_variable_unused);\n         return None;"}, {"sha": "722c8f406e3094f5c8eb42a8c36076fc95787b1b", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=81b0976187d73eba4f9b14d8a0b8539ab8f06dcd", "patch": "@@ -106,7 +106,9 @@ pub(crate) fn find_all_refs(\n     let RangeInfo { range, info: def } = find_name(&sema, &syntax, position, opt_name)?;\n \n     let references = def\n-        .find_usages(sema, search_scope)\n+        .usages(sema)\n+        .set_scope(search_scope)\n+        .all()\n         .into_iter()\n         .filter(|r| search_kind == ReferenceKind::Other || search_kind == r.kind)\n         .collect();"}, {"sha": "ce7631c69272ee419b0b9e1973ddd3d774e1be27", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=81b0976187d73eba4f9b14d8a0b8539ab8f06dcd", "patch": "@@ -181,22 +181,44 @@ impl Definition {\n         SearchScope::new(res)\n     }\n \n-    pub fn find_usages(\n-        &self,\n-        sema: &Semantics<RootDatabase>,\n-        search_scope: Option<SearchScope>,\n-    ) -> Vec<Reference> {\n+    pub fn usages<'a>(&'a self, sema: &'a Semantics<RootDatabase>) -> FindUsages<'a> {\n+        FindUsages { def: self, sema, scope: None }\n+    }\n+}\n+\n+pub struct FindUsages<'a> {\n+    def: &'a Definition,\n+    sema: &'a Semantics<'a, RootDatabase>,\n+    scope: Option<SearchScope>,\n+}\n+\n+impl<'a> FindUsages<'a> {\n+    pub fn in_scope(self, scope: SearchScope) -> FindUsages<'a> {\n+        self.set_scope(Some(scope))\n+    }\n+    pub fn set_scope(mut self, scope: Option<SearchScope>) -> FindUsages<'a> {\n+        assert!(self.scope.is_none());\n+        self.scope = scope;\n+        self\n+    }\n+\n+    pub fn at_least_one(self) -> bool {\n+        self.all().is_empty()\n+    }\n+\n+    pub fn all(self) -> Vec<Reference> {\n         let _p = profile::span(\"Definition::find_usages\");\n+        let sema = self.sema;\n \n         let search_scope = {\n-            let base = self.search_scope(sema.db);\n-            match search_scope {\n+            let base = self.def.search_scope(sema.db);\n+            match self.scope {\n                 None => base,\n                 Some(scope) => base.intersection(&scope),\n             }\n         };\n \n-        let name = match self.name(sema.db) {\n+        let name = match self.def.name(sema.db) {\n             None => return Vec::new(),\n             Some(it) => it.to_string(),\n         };\n@@ -225,7 +247,7 @@ impl Definition {\n                     };\n \n                 match classify_name_ref(&sema, &name_ref) {\n-                    Some(NameRefClass::Definition(def)) if &def == self => {\n+                    Some(NameRefClass::Definition(def)) if &def == self.def => {\n                         let kind = if is_record_lit_name_ref(&name_ref)\n                             || is_call_expr_name_ref(&name_ref)\n                         {\n@@ -242,14 +264,14 @@ impl Definition {\n                         });\n                     }\n                     Some(NameRefClass::FieldShorthand { local, field }) => {\n-                        match self {\n-                            Definition::Field(_) if &field == self => refs.push(Reference {\n-                                file_range: sema.original_range(name_ref.syntax()),\n+                        match self.def {\n+                            Definition::Field(_) if &field == self.def => refs.push(Reference {\n+                                file_range: self.sema.original_range(name_ref.syntax()),\n                                 kind: ReferenceKind::FieldShorthandForField,\n                                 access: reference_access(&field, &name_ref),\n                             }),\n                             Definition::Local(l) if &local == l => refs.push(Reference {\n-                                file_range: sema.original_range(name_ref.syntax()),\n+                                file_range: self.sema.original_range(name_ref.syntax()),\n                                 kind: ReferenceKind::FieldShorthandForLocal,\n                                 access: reference_access(&Definition::Local(local), &name_ref),\n                             }),"}, {"sha": "a595fd269c9c0f72bed6a88315995ac8dfff5f98", "filename": "crates/ssr/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b0976187d73eba4f9b14d8a0b8539ab8f06dcd/crates%2Fssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fsearch.rs?ref=81b0976187d73eba4f9b14d8a0b8539ab8f06dcd", "patch": "@@ -114,7 +114,7 @@ impl<'db> MatchFinder<'db> {\n         // cache miss. This is a limitation of NLL and is fixed with Polonius. For now we do two\n         // lookups in the case of a cache hit.\n         if usage_cache.find(&definition).is_none() {\n-            let usages = definition.find_usages(&self.sema, Some(self.search_scope()));\n+            let usages = definition.usages(&self.sema).in_scope(self.search_scope()).all();\n             usage_cache.usages.push((definition, usages));\n             return &usage_cache.usages.last().unwrap().1;\n         }"}]}