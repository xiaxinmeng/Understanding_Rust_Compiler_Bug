{"sha": "b334004607f1cfb5754d9b0a007114748f272444", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMzQwMDQ2MDdmMWNmYjU3NTRkOWIwYTAwNzExNDc0OGYyNzI0NDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-25T08:47:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-25T08:47:28Z"}, "message": "Auto merge of #1435 - RalfJung:stdin-read-error, r=RalfJung\n\nbetter error when using FDs 0-2 the wrong way", "tree": {"sha": "3d72c762eefc70393f4ea0cf9e05ee0e245cc4c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d72c762eefc70393f4ea0cf9e05ee0e245cc4c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b334004607f1cfb5754d9b0a007114748f272444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b334004607f1cfb5754d9b0a007114748f272444", "html_url": "https://github.com/rust-lang/rust/commit/b334004607f1cfb5754d9b0a007114748f272444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b334004607f1cfb5754d9b0a007114748f272444/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f280e7e2d7ea7cbed54deb249f1aa19e722f834f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f280e7e2d7ea7cbed54deb249f1aa19e722f834f", "html_url": "https://github.com/rust-lang/rust/commit/f280e7e2d7ea7cbed54deb249f1aa19e722f834f"}, {"sha": "a95f754a9cdd729b525cee2501c98636db6e9c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/a95f754a9cdd729b525cee2501c98636db6e9c39", "html_url": "https://github.com/rust-lang/rust/commit/a95f754a9cdd729b525cee2501c98636db6e9c39"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "651b619e163d4033b63254491be104e29b721a01", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b334004607f1cfb5754d9b0a007114748f272444/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b334004607f1cfb5754d9b0a007114748f272444/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=b334004607f1cfb5754d9b0a007114748f272444", "patch": "@@ -62,20 +62,31 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"read\" => {\n                 let &[fd, buf, count] = check_arg_count(args)?;\n-                let result = this.read(fd, buf, count)?;\n+                let fd = this.read_scalar(fd)?.to_i32()?;\n+                let buf = this.read_scalar(buf)?.not_undef()?;\n+                let count = this.read_scalar(count)?.to_machine_usize(this)?;\n+                let result = if fd == 0 {\n+                    throw_unsup_format!(\"reading from stdin is not implemented\")\n+                } else if fd == 1 || fd == 2 {\n+                    throw_unsup_format!(\"cannot read from stdout/stderr\")\n+                } else {\n+                    this.read(fd, buf, count)?\n+                };\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n             \"write\" => {\n                 let &[fd, buf, n] = check_arg_count(args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n                 let buf = this.read_scalar(buf)?.not_undef()?;\n-                let n = this.read_scalar(n)?.to_machine_usize(this)?;\n-                trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n-                let result = if fd == 1 || fd == 2 {\n+                let count = this.read_scalar(n)?.to_machine_usize(this)?;\n+                trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, count);\n+                let result = if fd == 0 {\n+                    throw_unsup_format!(\"cannot write to stdin\")\n+                } else if fd == 1 || fd == 2 {\n                     // stdout/stderr\n                     use std::io::{self, Write};\n \n-                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(n))?;\n+                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(count))?;\n                     // We need to flush to make sure this actually appears on the screen\n                     let res = if fd == 1 {\n                         // Stdout is buffered, flush to make sure it appears on the screen.\n@@ -94,7 +105,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         Err(_) => -1,\n                     }\n                 } else {\n-                    let &[fd, buf, count] = check_arg_count(args)?;\n                     this.write(fd, buf, count)?\n                 };\n                 // Now, `result` is the value we return back to the program."}, {"sha": "07360636280f9e3aa4089100ec4dcd1fb0183bbf", "filename": "src/shims/fs.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b334004607f1cfb5754d9b0a007114748f272444/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b334004607f1cfb5754d9b0a007114748f272444/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=b334004607f1cfb5754d9b0a007114748f272444", "patch": "@@ -5,6 +5,8 @@ use std::io::{Read, Seek, SeekFrom, Write};\n use std::path::Path;\n use std::time::SystemTime;\n \n+use log::trace;\n+\n use rustc_data_structures::fx::FxHashMap;\n use rustc_target::abi::{Align, LayoutOf, Size};\n \n@@ -413,17 +415,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn read(\n         &mut self,\n-        fd_op: OpTy<'tcx, Tag>,\n-        buf_op: OpTy<'tcx, Tag>,\n-        count_op: OpTy<'tcx, Tag>,\n+        fd: i32,\n+        buf: Scalar<Tag>,\n+        count: u64,\n     ) -> InterpResult<'tcx, i64> {\n         let this = self.eval_context_mut();\n \n         this.check_no_isolation(\"read\")?;\n+        assert!(fd >= 3);\n \n-        let fd = this.read_scalar(fd_op)?.to_i32()?;\n-        let buf = this.read_scalar(buf_op)?.not_undef()?;\n-        let count = this.read_scalar(count_op)?.to_machine_usize(&*this.tcx)?;\n+        trace!(\"Reading from FD {}, size {}\", fd, count);\n \n         // Check that the *entire* buffer is actually valid memory.\n         this.memory.check_ptr_access(\n@@ -437,6 +438,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n \n         if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n+            trace!(\"read: FD mapped to {:?}\", file);\n             // This can never fail because `count` was capped to be smaller than\n             // `isize::MAX`.\n             let count = isize::try_from(count).unwrap();\n@@ -461,23 +463,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n         } else {\n+            trace!(\"read: FD not found\");\n             this.handle_not_found()\n         }\n     }\n \n     fn write(\n         &mut self,\n-        fd_op: OpTy<'tcx, Tag>,\n-        buf_op: OpTy<'tcx, Tag>,\n-        count_op: OpTy<'tcx, Tag>,\n+        fd: i32,\n+        buf: Scalar<Tag>,\n+        count: u64,\n     ) -> InterpResult<'tcx, i64> {\n         let this = self.eval_context_mut();\n \n         this.check_no_isolation(\"write\")?;\n-\n-        let fd = this.read_scalar(fd_op)?.to_i32()?;\n-        let buf = this.read_scalar(buf_op)?.not_undef()?;\n-        let count = this.read_scalar(count_op)?.to_machine_usize(&*this.tcx)?;\n+        assert!(fd >= 3);\n \n         // Check that the *entire* buffer is actually valid memory.\n         this.memory.check_ptr_access("}]}