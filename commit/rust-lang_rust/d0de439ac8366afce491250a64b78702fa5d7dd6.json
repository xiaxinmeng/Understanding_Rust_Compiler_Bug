{"sha": "d0de439ac8366afce491250a64b78702fa5d7dd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZGU0MzlhYzgzNjZhZmNlNDkxMjUwYTY0Yjc4NzAyZmE1ZDdkZDY=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-30T20:47:12Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2020-05-24T22:02:54Z"}, "message": "Cleanup.", "tree": {"sha": "ffdf7672b6d5cdd10225e293c6eb14bbe07fdf40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffdf7672b6d5cdd10225e293c6eb14bbe07fdf40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0de439ac8366afce491250a64b78702fa5d7dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0de439ac8366afce491250a64b78702fa5d7dd6", "html_url": "https://github.com/rust-lang/rust/commit/d0de439ac8366afce491250a64b78702fa5d7dd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0de439ac8366afce491250a64b78702fa5d7dd6/comments", "author": null, "committer": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679245769b6984ec5a7edf70fb4744d8411468b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/679245769b6984ec5a7edf70fb4744d8411468b8", "html_url": "https://github.com/rust-lang/rust/commit/679245769b6984ec5a7edf70fb4744d8411468b8"}], "stats": {"total": 28, "additions": 7, "deletions": 21}, "files": [{"sha": "856468705d30741dde94272dc4a3aa5ecb73309f", "filename": "src/thread.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d0de439ac8366afce491250a64b78702fa5d7dd6/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0de439ac8366afce491250a64b78702fa5d7dd6/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=d0de439ac8366afce491250a64b78702fa5d7dd6", "patch": "@@ -3,7 +3,7 @@\n use std::cell::RefCell;\n use std::collections::hash_map::Entry;\n use std::convert::TryFrom;\n-use std::num::{NonZeroU32, TryFromIntError};\n+use std::num::TryFromIntError;\n use std::time::Instant;\n \n use log::trace;\n@@ -77,21 +77,6 @@ impl ThreadId {\n     }\n }\n \n-/// An identifier of a set of blocked threads. 0 is used to indicate the absence\n-/// of a blockset identifier and, therefore, is not a valid identifier.\n-#[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Hash)]\n-pub struct BlockSetId(NonZeroU32);\n-\n-impl BlockSetId {\n-    /// Panics if `id` is 0.\n-    pub fn new(id: u32) -> Self {\n-        Self(NonZeroU32::new(id).expect(\"0 is not a valid blockset id\"))\n-    }\n-    pub fn to_u32_scalar<'tcx>(&self) -> Scalar<Tag> {\n-        Scalar::from_u32(self.0.get())\n-    }\n-}\n-\n /// The state of a thread.\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub enum ThreadState {\n@@ -100,9 +85,10 @@ pub enum ThreadState {\n     /// The thread tried to join the specified thread and is blocked until that\n     /// thread terminates.\n     BlockedOnJoin(ThreadId),\n-    /// The thread is blocked and belongs to the given blockset.\n-    Blocked(BlockSetId),\n-    BlockedThread,\n+    /// The thread is blocked on some synchronization primitive. It is the\n+    /// responsibility of the synchronization primitives to track threads that\n+    /// are blocked by them.\n+    BlockedOnSync,\n     /// The thread has terminated its execution (we do not delete terminated\n     /// threads).\n     Terminated,\n@@ -357,13 +343,13 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     fn block_thread(&mut self, thread: ThreadId) {\n         let state = &mut self.threads[thread].state;\n         assert_eq!(*state, ThreadState::Enabled);\n-        *state = ThreadState::BlockedThread;\n+        *state = ThreadState::BlockedOnSync;\n     }\n \n     /// Put the blocked thread into the enabled state.\n     fn unblock_thread(&mut self, thread: ThreadId) {\n         let state = &mut self.threads[thread].state;\n-        assert_eq!(*state, ThreadState::BlockedThread);\n+        assert_eq!(*state, ThreadState::BlockedOnSync);\n         *state = ThreadState::Enabled;\n     }\n "}]}