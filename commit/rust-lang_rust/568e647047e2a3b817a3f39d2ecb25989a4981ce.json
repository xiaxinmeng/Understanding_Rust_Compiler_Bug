{"sha": "568e647047e2a3b817a3f39d2ecb25989a4981ce", "node_id": "C_kwDOAAsO6NoAKDU2OGU2NDcwNDdlMmEzYjgxN2EzZjM5ZDJlY2IyNTk4OWE0OTgxY2U", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-05T04:23:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-05T05:33:20Z"}, "message": "Remove three uses of `LitKind::synthesize_token_lit`.", "tree": {"sha": "de22579ebd6962a62d30f1bb5ad0be56487ed1e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de22579ebd6962a62d30f1bb5ad0be56487ed1e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/568e647047e2a3b817a3f39d2ecb25989a4981ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/568e647047e2a3b817a3f39d2ecb25989a4981ce", "html_url": "https://github.com/rust-lang/rust/commit/568e647047e2a3b817a3f39d2ecb25989a4981ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/568e647047e2a3b817a3f39d2ecb25989a4981ce/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d887615b4c83d856cd3e40000968c047f2ff4019", "url": "https://api.github.com/repos/rust-lang/rust/commits/d887615b4c83d856cd3e40000968c047f2ff4019", "html_url": "https://github.com/rust-lang/rust/commit/d887615b4c83d856cd3e40000968c047f2ff4019"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "d99f6ed2c1cd3d842964559774669b83e86dc75b", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/568e647047e2a3b817a3f39d2ecb25989a4981ce/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568e647047e2a3b817a3f39d2ecb25989a4981ce/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=568e647047e2a3b817a3f39d2ecb25989a4981ce", "patch": "@@ -3,12 +3,13 @@\n use crate::ast::{AttrArgs, AttrArgsEq, AttrId, AttrItem, AttrKind, AttrStyle, AttrVec, Attribute};\n use crate::ast::{DelimArgs, Expr, ExprKind, LitKind, MetaItemLit};\n use crate::ast::{MacDelimiter, MetaItem, MetaItemKind, NestedMetaItem, NormalAttr};\n-use crate::ast::{Path, PathSegment, StrStyle, DUMMY_NODE_ID};\n+use crate::ast::{Path, PathSegment, DUMMY_NODE_ID};\n use crate::ptr::P;\n use crate::token::{self, CommentKind, Delimiter, Token};\n use crate::tokenstream::{DelimSpan, Spacing, TokenTree};\n use crate::tokenstream::{LazyAttrTokenStream, TokenStream};\n use crate::util::comments;\n+use crate::util::literal::escape_string_symbol;\n use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -395,7 +396,7 @@ pub fn mk_attr_name_value_str(\n     val: Symbol,\n     span: Span,\n ) -> Attribute {\n-    let lit = LitKind::Str(val, StrStyle::Cooked).synthesize_token_lit();\n+    let lit = token::Lit::new(token::Str, escape_string_symbol(val), None);\n     let expr = P(Expr {\n         id: DUMMY_NODE_ID,\n         kind: ExprKind::Lit(lit),"}, {"sha": "a00837ec84303d2efe6c9ec3e2e90ff4e62f1369", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/568e647047e2a3b817a3f39d2ecb25989a4981ce/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568e647047e2a3b817a3f39d2ecb25989a4981ce/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=568e647047e2a3b817a3f39d2ecb25989a4981ce", "patch": "@@ -2,6 +2,8 @@ use crate::pp::Breaks::Inconsistent;\n use crate::pprust::state::{AnnNode, IterDelimited, PrintState, State, INDENT_UNIT};\n \n use rustc_ast::ptr::P;\n+use rustc_ast::token;\n+use rustc_ast::util::literal::escape_byte_str_symbol;\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n use rustc_ast::{self as ast, BlockCheckMode};\n \n@@ -323,8 +325,7 @@ impl<'a> State<'a> {\n                 self.print_token_literal(*token_lit, expr.span);\n             }\n             ast::ExprKind::IncludedBytes(bytes) => {\n-                let lit = ast::LitKind::ByteStr(bytes.clone(), ast::StrStyle::Cooked)\n-                    .synthesize_token_lit();\n+                let lit = token::Lit::new(token::ByteStr, escape_byte_str_symbol(bytes), None);\n                 self.print_token_literal(lit, expr.span)\n             }\n             ast::ExprKind::Cast(expr, ty) => {"}, {"sha": "768bdab8a54199a10aec996bc8c9a6bfa897f17c", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/568e647047e2a3b817a3f39d2ecb25989a4981ce/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568e647047e2a3b817a3f39d2ecb25989a4981ce/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=568e647047e2a3b817a3f39d2ecb25989a4981ce", "patch": "@@ -6,6 +6,7 @@ use pm::{Delimiter, Level, LineColumn};\n use rustc_ast as ast;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{self, Spacing::*, TokenStream};\n+use rustc_ast::util::literal::escape_byte_str_symbol;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -526,8 +527,7 @@ impl server::TokenStream for Rustc<'_, '_> {\n                 Ok(tokenstream::TokenStream::token_alone(token::Literal(*token_lit), expr.span))\n             }\n             ast::ExprKind::IncludedBytes(bytes) => {\n-                let lit = ast::LitKind::ByteStr(bytes.clone(), ast::StrStyle::Cooked)\n-                    .synthesize_token_lit();\n+                let lit = token::Lit::new(token::ByteStr, escape_byte_str_symbol(bytes), None);\n                 Ok(tokenstream::TokenStream::token_alone(token::TokenKind::Literal(lit), expr.span))\n             }\n             ast::ExprKind::Unary(ast::UnOp::Neg, e) => match &e.kind {"}]}