{"sha": "a410af97a8e315b70c3be39951c264cee7afa7c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MTBhZjk3YThlMzE1YjcwYzNiZTM5OTUxYzI2NGNlZTdhZmE3Yzg=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-12-09T21:38:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-09T21:38:25Z"}, "message": "Rollup merge of #79810 - Aaron1011:fix/def-path-table-gap, r=lcnr\n\nAccount for gaps in def path table during decoding\n\nWhen encoding a proc-macro crate, there may be gaps in the table (since\nwe only encode the crate root and proc-macro items). Account for this by\nchecking if the entry is present, rather than using `unwrap()`", "tree": {"sha": "70f4a26a94db955659155b90830d3fdf53a92007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f4a26a94db955659155b90830d3fdf53a92007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a410af97a8e315b70c3be39951c264cee7afa7c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0UPSCRBK7hj4Ov3rIwAAdHIIAAGaPVlJtZf8L1mhIzT+vwu+\nHHkeYk8xQ4cmRdwuX2fl/ZJerYuymhwvuBB+vnEjXVqCApC/K9E0+sx2ra0Viv4M\nRIgnhNWQkQlqADkH82p4KmrC4laNSqNMJ5OP6btAxWYlMBfFZoZ7sNMREjIqE1gv\nEfL43nFeygEgUU9JFxeHBJoohy/229W1wYzwIP2m4TaPo7EDoQ4sj8iuh/VRZdMx\nTCgvYR0BnmnlZdxfcjTtHA08JY8ERpyY94My1I2kp97W0Ikvt5puCe2LT6yQp4ga\nksZJcoerySVRXBKKsyvS+bDR1FLle6y7DI+CW2vZdi5tZZxAy+mREDZc40Jhat0=\n=lKlA\n-----END PGP SIGNATURE-----\n", "payload": "tree 70f4a26a94db955659155b90830d3fdf53a92007\nparent 0994f353bf511c67ca9c87257a391cf04ac8ca13\nparent a332e2b38fb3c374d751edadfc2c21594f2e7611\nauthor Tyler Mandry <tmandry@gmail.com> 1607549905 -0800\ncommitter GitHub <noreply@github.com> 1607549905 -0800\n\nRollup merge of #79810 - Aaron1011:fix/def-path-table-gap, r=lcnr\n\nAccount for gaps in def path table during decoding\n\nWhen encoding a proc-macro crate, there may be gaps in the table (since\nwe only encode the crate root and proc-macro items). Account for this by\nchecking if the entry is present, rather than using `unwrap()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a410af97a8e315b70c3be39951c264cee7afa7c8", "html_url": "https://github.com/rust-lang/rust/commit/a410af97a8e315b70c3be39951c264cee7afa7c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a410af97a8e315b70c3be39951c264cee7afa7c8/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0994f353bf511c67ca9c87257a391cf04ac8ca13", "url": "https://api.github.com/repos/rust-lang/rust/commits/0994f353bf511c67ca9c87257a391cf04ac8ca13", "html_url": "https://github.com/rust-lang/rust/commit/0994f353bf511c67ca9c87257a391cf04ac8ca13"}, {"sha": "a332e2b38fb3c374d751edadfc2c21594f2e7611", "url": "https://api.github.com/repos/rust-lang/rust/commits/a332e2b38fb3c374d751edadfc2c21594f2e7611", "html_url": "https://github.com/rust-lang/rust/commit/a332e2b38fb3c374d751edadfc2c21594f2e7611"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "43f7b2a992838746c54e886e741fb175470d1f4c", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a410af97a8e315b70c3be39951c264cee7afa7c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a410af97a8e315b70c3be39951c264cee7afa7c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a410af97a8e315b70c3be39951c264cee7afa7c8", "patch": "@@ -1553,6 +1553,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             return Some(DefId { krate, index: def_index_guess });\n         }\n \n+        let is_proc_macro = self.is_proc_macro_crate();\n+\n         // Slow path: We need to find out the new `DefIndex` of the provided\n         // `DefPathHash`, if its still exists. This requires decoding every `DefPathHash`\n         // stored in this crate.\n@@ -1561,9 +1563,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             let mut map = FxHashMap::with_capacity_and_hasher(end_id as usize, Default::default());\n             for i in 0..end_id {\n                 let def_index = DefIndex::from_u32(i);\n-                let hash =\n-                    self.root.tables.def_path_hashes.get(self, def_index).unwrap().decode(self);\n-                map.insert(hash, def_index);\n+                // There may be gaps in the encoded table if we're decoding a proc-macro crate\n+                if let Some(hash) = self.root.tables.def_path_hashes.get(self, def_index) {\n+                    map.insert(hash.decode(self), def_index);\n+                } else if !is_proc_macro {\n+                    panic!(\"Missing def_path_hashes entry for {:?}\", def_index);\n+                }\n             }\n             map\n         });"}]}