{"sha": "1ae1b9bfeab22038a6c4674be8adb9b0606dea16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZTFiOWJmZWFiMjIwMzhhNmM0Njc0YmU4YWRiOWIwNjA2ZGVhMTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-18T14:59:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-22T14:45:03Z"}, "message": "adapt to rustc API changes and factor out computing the tag for ty+mutbl", "tree": {"sha": "b55ddf7fef648b08542817903d59afe2190e32eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b55ddf7fef648b08542817903d59afe2190e32eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ae1b9bfeab22038a6c4674be8adb9b0606dea16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1b9bfeab22038a6c4674be8adb9b0606dea16", "html_url": "https://github.com/rust-lang/rust/commit/1ae1b9bfeab22038a6c4674be8adb9b0606dea16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1b9bfeab22038a6c4674be8adb9b0606dea16/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a7fb7ec3ce5be7205fc1b3fb40642792985d501", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7fb7ec3ce5be7205fc1b3fb40642792985d501", "html_url": "https://github.com/rust-lang/rust/commit/1a7fb7ec3ce5be7205fc1b3fb40642792985d501"}], "stats": {"total": 84, "additions": 54, "deletions": 30}, "files": [{"sha": "7841a4d3a2c089ecc08b2c1d5a005eeb90f53b63", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ae1b9bfeab22038a6c4674be8adb9b0606dea16/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae1b9bfeab22038a6c4674be8adb9b0606dea16/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1ae1b9bfeab22038a6c4674be8adb9b0606dea16", "patch": "@@ -18,7 +18,7 @@ use std::borrow::Cow;\n \n use rustc::ty::{self, Ty, TyCtxt, query::TyCtxtAt};\n use rustc::ty::layout::{TyLayout, LayoutOf, Size};\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::{self, def_id::DefId};\n use rustc::mir;\n \n use syntax::attr;\n@@ -446,27 +446,29 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         ptr: Pointer<Borrow>,\n         pointee_ty: Ty<'tcx>,\n         pointee_size: Size,\n-        borrow_kind: Option<mir::BorrowKind>,\n+        mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Borrow> {\n         if !ecx.machine.validate {\n             // No tracking\n             Ok(Borrow::default())\n         } else {\n-            ecx.tag_reference(ptr, pointee_ty, pointee_size, borrow_kind)\n+            ecx.tag_reference(ptr, pointee_ty, pointee_size, mutability)\n         }\n     }\n \n     #[inline(always)]\n     fn tag_dereference(\n         ecx: &EvalContext<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer<Borrow>,\n-        ptr_ty: Ty<'tcx>,\n+        pointee_ty: Ty<'tcx>,\n+        pointee_size: Size,\n+        mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Borrow> {\n         if !ecx.machine.validate {\n             // No tracking\n             Ok(Borrow::default())\n         } else {\n-            ecx.tag_dereference(ptr, ptr_ty)\n+            ecx.tag_dereference(ptr, pointee_ty, pointee_size, mutability)\n         }\n     }\n }"}, {"sha": "169c8abe2b08bc42eb18de929e5044c7e889835f", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 47, "deletions": 25, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1ae1b9bfeab22038a6c4674be8adb9b0606dea16/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae1b9bfeab22038a6c4674be8adb9b0606dea16/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=1ae1b9bfeab22038a6c4674be8adb9b0606dea16", "patch": "@@ -1,7 +1,8 @@\n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n \n-use rustc::ty::{Ty, layout::Size};\n+use rustc::ty::{self, Ty, layout::Size};\n use rustc::mir;\n+use rustc::hir;\n \n use super::{\n     MemoryAccess, RangeMap, EvalResult,\n@@ -67,12 +68,12 @@ impl Default for Borrow {\n /// Extra global machine state\n #[derive(Clone, Debug)]\n pub struct State {\n-    clock: Timestamp\n+    clock: Cell<Timestamp>\n }\n \n impl State {\n     pub fn new() -> State {\n-        State { clock: 0 }\n+        State { clock: Cell::new(0) }\n     }\n }\n \n@@ -180,9 +181,10 @@ impl<'tcx> Stack {\n }\n \n impl State {\n-    fn increment_clock(&mut self) -> Timestamp {\n-        self.clock += 1;\n-        self.clock\n+    fn increment_clock(&self) -> Timestamp {\n+        let val = self.clock.get();\n+        self.clock.set(val+1);\n+        val\n     }\n }\n \n@@ -238,47 +240,64 @@ impl<'tcx> Stacks {\n     }\n }\n \n-/// Machine hooks\n pub trait EvalContextExt<'tcx> {\n     fn tag_reference(\n         &mut self,\n         ptr: Pointer<Borrow>,\n         pointee_ty: Ty<'tcx>,\n         size: Size,\n-        borrow_kind: Option<mir::BorrowKind>,\n+        mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Borrow>;\n \n     fn tag_dereference(\n         &self,\n         ptr: Pointer<Borrow>,\n-        ptr_ty: Ty<'tcx>,\n+        pointee_ty: Ty<'tcx>,\n+        size: Size,\n+        mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Borrow>;\n+\n+    fn tag_for_pointee(\n+        &self,\n+        pointee_ty: Ty<'tcx>,\n+        borrow_kind: Option<hir::Mutability>,\n+    ) -> Borrow;\n }\n \n impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, 'tcx> {\n-    fn tag_reference(\n-        &mut self,\n-        ptr: Pointer<Borrow>,\n+    fn tag_for_pointee(\n+        &self,\n         pointee_ty: Ty<'tcx>,\n-        size: Size,\n-        borrow_kind: Option<mir::BorrowKind>,\n-    ) -> EvalResult<'tcx, Borrow> {\n+        borrow_kind: Option<hir::Mutability>,\n+    ) -> Borrow {\n         let time = self.machine.stacked_borrows.increment_clock();\n-        let new_bor = match borrow_kind {\n-            Some(mir::BorrowKind::Mut { .. }) => Borrow::Mut(Mut::Uniq(time)),\n-            Some(_) =>\n+        match borrow_kind {\n+            Some(hir::MutMutable) => Borrow::Mut(Mut::Uniq(time)),\n+            Some(hir::MutImmutable) =>\n                 // FIXME This does not do enough checking when only part of the data has\n                 // interior mutability. When the type is `(i32, Cell<i32>)`, we want the\n                 // first field to be frozen but not the second.\n                 if self.type_is_freeze(pointee_ty) {\n                     Borrow::Frz(time)\n                 } else {\n+                    // Shared reference with interior mutability.\n                     Borrow::Mut(Mut::Raw)\n                 },\n             None => Borrow::Mut(Mut::Raw),\n-        };\n+        }\n+    }\n+\n+    /// Called for place-to-value conversion.\n+    fn tag_reference(\n+        &mut self,\n+        ptr: Pointer<Borrow>,\n+        pointee_ty: Ty<'tcx>,\n+        size: Size,\n+        mutability: Option<hir::Mutability>,\n+    ) -> EvalResult<'tcx, Borrow> {\n+        let new_bor = self.tag_for_pointee(pointee_ty, mutability);\n         trace!(\"tag_reference: Creating new reference ({:?}) for {:?} (pointee {}, size {}): {:?}\",\n-            borrow_kind, ptr, pointee_ty, size.bytes(), new_bor);\n+            mutability, ptr, pointee_ty, size.bytes(), new_bor);\n \n         // Make sure this reference is not dangling or so\n         self.memory.check_bounds(ptr, size, false)?;\n@@ -291,14 +310,17 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         Ok(new_bor)\n     }\n \n+    /// Called for value-to-place conversion.\n     fn tag_dereference(\n         &self,\n         ptr: Pointer<Borrow>,\n-        ptr_ty: Ty<'tcx>,\n+        pointee_ty: Ty<'tcx>,\n+        size: Size,\n+        mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Borrow> {\n-        // If this is a raw ptr, forget about the tag.\n-        Ok(if ptr_ty.is_unsafe_ptr() {\n-            trace!(\"tag_dereference: Erasing tag for {:?} ({})\", ptr, ptr_ty);\n+        // If this is a raw situation, forget about the tag.\n+        Ok(if mutability.is_none() {\n+            trace!(\"tag_dereference: Erasing tag for {:?} (pointee {})\", ptr, pointee_ty);\n             Borrow::Mut(Mut::Raw)\n         } else {\n             // FIXME: Do we want to adjust the tag if it does not match the type?"}]}