{"sha": "ecf3ef52a6f986863cce5eb749b73e182db3f36e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZjNlZjUyYTZmOTg2ODYzY2NlNWViNzQ5YjczZTE4MmRiM2YzNmU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-21T21:56:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T21:56:20Z"}, "message": "Rollup merge of #70126 - wesleywiser:fix_miri_ice_neg_zst_enum_discr, r=RalfJung,eddyb\n\nFix ICE caused by truncating a negative ZST enum discriminant\n\nFixes #70114\n\nr? @oli-obk or @RalfJung", "tree": {"sha": "415fe822289721b9e69ae33c95110dbd51aed057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/415fe822289721b9e69ae33c95110dbd51aed057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecf3ef52a6f986863cce5eb749b73e182db3f36e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedo2FCRBK7hj4Ov3rIwAAdHIIABVnKS+/1S93IiCui3pWnzzK\n7ln4mc9fEpNzZi31gMIpP9eb7aGkXHa4kfQZfcV6HHv0bXMcy+czvwKysecaMojj\npvgcexY0DiFHtr1x+2nu1HPsslNFXWXqqJljEJWe0HmQfbNLOALnSgg51UKQThtx\nPt0l3n84Tk0iI7QQ41SNk7j/xBOpVhuZ7j44O4+s3Vqo95wdDWn6Hlsrq6YhmDfe\nGovUOMBkLNucYXDAD6KGc3uokACfsbVSCD4EGMuSo+lT46ajBFqCy4ZxjQCrNfBb\nIbAwpg++/YYs7hMHeJSsdTuBaRuH/11a8aYV1xkJxPf4BVMHYFLv/4Cu/VOhyN4=\n=H7jR\n-----END PGP SIGNATURE-----\n", "payload": "tree 415fe822289721b9e69ae33c95110dbd51aed057\nparent ce0af8a5bd90de722d5653965f7edcf2c302cf59\nparent 96bbd1ccb6c210318d5ba90e7b68430b643e470a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584827780 +0100\ncommitter GitHub <noreply@github.com> 1584827780 +0100\n\nRollup merge of #70126 - wesleywiser:fix_miri_ice_neg_zst_enum_discr, r=RalfJung,eddyb\n\nFix ICE caused by truncating a negative ZST enum discriminant\n\nFixes #70114\n\nr? @oli-obk or @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf3ef52a6f986863cce5eb749b73e182db3f36e", "html_url": "https://github.com/rust-lang/rust/commit/ecf3ef52a6f986863cce5eb749b73e182db3f36e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecf3ef52a6f986863cce5eb749b73e182db3f36e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0af8a5bd90de722d5653965f7edcf2c302cf59", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0af8a5bd90de722d5653965f7edcf2c302cf59", "html_url": "https://github.com/rust-lang/rust/commit/ce0af8a5bd90de722d5653965f7edcf2c302cf59"}, {"sha": "96bbd1ccb6c210318d5ba90e7b68430b643e470a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96bbd1ccb6c210318d5ba90e7b68430b643e470a", "html_url": "https://github.com/rust-lang/rust/commit/96bbd1ccb6c210318d5ba90e7b68430b643e470a"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "245df0846b583cc8c77ad0140d6b09250a8bbcfb", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecf3ef52a6f986863cce5eb749b73e182db3f36e/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf3ef52a6f986863cce5eb749b73e182db3f36e/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=ecf3ef52a6f986863cce5eb749b73e182db3f36e", "patch": "@@ -293,7 +293,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 if let Some(discr) =\n                                     operand.layout.ty.discriminant_for_variant(bx.tcx(), index)\n                                 {\n-                                    let discr_val = bx.cx().const_uint_big(ll_t_out, discr.val);\n+                                    let discr_layout = bx.cx().layout_of(discr.ty);\n+                                    let discr_t = bx.cx().immediate_backend_type(discr_layout);\n+                                    let discr_val = bx.cx().const_uint_big(discr_t, discr.val);\n+                                    let discr_val =\n+                                        bx.intcast(discr_val, ll_t_out, discr.ty.is_signed());\n+\n                                     return (\n                                         bx,\n                                         OperandRef {"}, {"sha": "5c70b28a56786bcc1bf65833ba47bd9f43d641e5", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecf3ef52a6f986863cce5eb749b73e182db3f36e/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf3ef52a6f986863cce5eb749b73e182db3f36e/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=ecf3ef52a6f986863cce5eb749b73e182db3f36e", "patch": "@@ -3,6 +3,7 @@ use rustc::ty::layout::{self, Size, TyLayout};\n use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use rustc_ast::ast::FloatTy;\n use rustc_span::symbol::sym;\n+use rustc_target::abi::LayoutOf;\n \n use rustc::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n use rustc::mir::CastKind;\n@@ -134,7 +135,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             layout::Variants::Single { index } => {\n                 if let Some(discr) = src.layout.ty.discriminant_for_variant(*self.tcx, index) {\n                     assert!(src.layout.is_zst());\n-                    return Ok(Scalar::from_uint(discr.val, dest_layout.size).into());\n+                    let discr_layout = self.layout_of(discr.ty)?;\n+                    return Ok(self\n+                        .cast_from_int_like(discr.val, discr_layout, dest_layout)?\n+                        .into());\n                 }\n             }\n             layout::Variants::Multiple { .. } => {}\n@@ -171,10 +175,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // (b) cast from an integer-like (including bool, char, enums).\n         // In both cases we want the bits.\n         let bits = self.force_bits(src.to_scalar()?, src.layout.size)?;\n-        Ok(self.cast_from_int(bits, src.layout, dest_layout)?.into())\n+        Ok(self.cast_from_int_like(bits, src.layout, dest_layout)?.into())\n     }\n \n-    fn cast_from_int(\n+    fn cast_from_int_like(\n         &self,\n         v: u128, // raw bits\n         src_layout: TyLayout<'tcx>,"}, {"sha": "a77258120111e70d668e6e87694f83a1a0dbfe88", "filename": "src/test/ui/consts/cast-discriminant-zst-enum.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ecf3ef52a6f986863cce5eb749b73e182db3f36e/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf3ef52a6f986863cce5eb749b73e182db3f36e/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs?ref=ecf3ef52a6f986863cce5eb749b73e182db3f36e", "patch": "@@ -0,0 +1,47 @@\n+// run-pass\n+// Test a ZST enum whose dicriminant is ~0i128. This caused an ICE when casting to a i32.\n+\n+#[derive(Copy, Clone)]\n+enum Nums {\n+    NegOne = -1,\n+}\n+\n+const NEG_ONE_I8: i8 = Nums::NegOne as i8;\n+const NEG_ONE_I16: i16 = Nums::NegOne as i16;\n+const NEG_ONE_I32: i32 = Nums::NegOne as i32;\n+const NEG_ONE_I64: i64 = Nums::NegOne as i64;\n+const NEG_ONE_I128: i128 = Nums::NegOne as i128;\n+\n+#[inline(never)]\n+fn identity<T>(t: T) -> T { t }\n+\n+fn test_as_arg(n: Nums) {\n+    assert_eq!(-1i8, n as i8);\n+    assert_eq!(-1i16, n as i16);\n+    assert_eq!(-1i32, n as i32);\n+    assert_eq!(-1i64, n as i64);\n+    assert_eq!(-1i128, n as i128);\n+}\n+\n+fn main() {\n+    let kind = Nums::NegOne;\n+    assert_eq!(-1i8, kind as i8);\n+    assert_eq!(-1i16, kind as i16);\n+    assert_eq!(-1i32, kind as i32);\n+    assert_eq!(-1i64, kind as i64);\n+    assert_eq!(-1i128, kind as i128);\n+\n+    assert_eq!(-1i8, identity(kind) as i8);\n+    assert_eq!(-1i16, identity(kind) as i16);\n+    assert_eq!(-1i32, identity(kind) as i32);\n+    assert_eq!(-1i64, identity(kind) as i64);\n+    assert_eq!(-1i128, identity(kind) as i128);\n+\n+    test_as_arg(Nums::NegOne);\n+\n+    assert_eq!(-1i8, NEG_ONE_I8);\n+    assert_eq!(-1i16, NEG_ONE_I16);\n+    assert_eq!(-1i32, NEG_ONE_I32);\n+    assert_eq!(-1i64, NEG_ONE_I64);\n+    assert_eq!(-1i128, NEG_ONE_I128);\n+}"}]}