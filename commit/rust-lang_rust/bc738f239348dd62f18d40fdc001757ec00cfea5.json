{"sha": "bc738f239348dd62f18d40fdc001757ec00cfea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNzM4ZjIzOTM0OGRkNjJmMThkNDBmZGMwMDE3NTdlYzAwY2ZlYTU=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-02-24T21:47:49Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-03-13T02:19:18Z"}, "message": "tidy: Verify the runtime crates don't have license exceptions.", "tree": {"sha": "84b84b784c3562e7b63112b7ee12ee1d2761f0bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b84b784c3562e7b63112b7ee12ee1d2761f0bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc738f239348dd62f18d40fdc001757ec00cfea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc738f239348dd62f18d40fdc001757ec00cfea5", "html_url": "https://github.com/rust-lang/rust/commit/bc738f239348dd62f18d40fdc001757ec00cfea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc738f239348dd62f18d40fdc001757ec00cfea5/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be10f14329c63710ca1b47e3ebebffed59a175f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/be10f14329c63710ca1b47e3ebebffed59a175f4", "html_url": "https://github.com/rust-lang/rust/commit/be10f14329c63710ca1b47e3ebebffed59a175f4"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "aa4d86e2a845972eab34e994db082206ed668289", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bc738f239348dd62f18d40fdc001757ec00cfea5/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc738f239348dd62f18d40fdc001757ec00cfea5/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=bc738f239348dd62f18d40fdc001757ec00cfea5", "patch": "@@ -1,6 +1,6 @@\n //! Checks the licenses of third-party dependencies.\n \n-use cargo_metadata::{Metadata, Package, PackageId};\n+use cargo_metadata::{Metadata, Package, PackageId, Resolve};\n use std::collections::{BTreeSet, HashSet};\n use std::path::Path;\n \n@@ -50,6 +50,10 @@ const EXCEPTIONS: &[(&str, &str)] = &[\n     (\"crossbeam-channel\", \"MIT/Apache-2.0 AND BSD-2-Clause\"), // cargo\n ];\n \n+/// These are the root crates that are part of the runtime. The licenses for\n+/// these and all their dependencies *must not* be in the exception list.\n+const RUNTIME_CRATES: &[&str] = &[\"std\", \"core\", \"alloc\", \"panic_abort\", \"panic_unwind\"];\n+\n /// Which crates to check against the whitelist?\n const WHITELIST_CRATES: &[&str] = &[\"rustc\", \"rustc_codegen_llvm\"];\n \n@@ -227,14 +231,17 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n             }\n         }\n     }\n+\n     let exception_names: Vec<_> = EXCEPTIONS.iter().map(|(name, _license)| *name).collect();\n+    let runtime_ids = compute_runtime_crates(metadata);\n+\n     // Check if any package does not have a valid license.\n     for pkg in &metadata.packages {\n         if pkg.source.is_none() {\n             // No need to check local packages.\n             continue;\n         }\n-        if exception_names.contains(&pkg.name.as_str()) {\n+        if !runtime_ids.contains(&pkg.id) && exception_names.contains(&pkg.name.as_str()) {\n             continue;\n         }\n         let license = match &pkg.license {\n@@ -246,6 +253,13 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n             }\n         };\n         if !LICENSES.contains(&license.as_str()) {\n+            if pkg.name == \"fortanix-sgx-abi\" {\n+                // This is a specific exception because SGX is considered\n+                // \"third party\". See\n+                // https://github.com/rust-lang/rust/issues/62620 for more. In\n+                // general, these should never be added.\n+                continue;\n+            }\n             println!(\"invalid license `{}` in `{}`\", license, pkg.id);\n             *bad = true;\n         }\n@@ -366,10 +380,8 @@ fn check_crate_duplicate(metadata: &Metadata, bad: &mut bool) {\n \n /// Returns a list of dependencies for the given package.\n fn deps_of<'a>(metadata: &'a Metadata, pkg_id: &'a PackageId) -> Vec<&'a Package> {\n-    let node = metadata\n-        .resolve\n-        .as_ref()\n-        .unwrap()\n+    let resolve = metadata.resolve.as_ref().unwrap();\n+    let node = resolve\n         .nodes\n         .iter()\n         .find(|n| &n.id == pkg_id)\n@@ -392,3 +404,42 @@ fn pkg_from_name<'a>(metadata: &'a Metadata, name: &'static str) -> &'a Package\n     assert!(i.next().is_none(), \"more than one package found for `{}`\", name);\n     result\n }\n+\n+/// Finds all the packages that are in the rust runtime.\n+fn compute_runtime_crates<'a>(metadata: &'a Metadata) -> HashSet<&'a PackageId> {\n+    let resolve = metadata.resolve.as_ref().unwrap();\n+    let mut result = HashSet::new();\n+    for name in RUNTIME_CRATES {\n+        let id = &pkg_from_name(metadata, name).id;\n+        normal_deps_of_r(resolve, id, &mut result);\n+    }\n+    result\n+}\n+\n+/// Recursively find all normal dependencies.\n+fn normal_deps_of_r<'a>(\n+    resolve: &'a Resolve,\n+    pkg_id: &'a PackageId,\n+    result: &mut HashSet<&'a PackageId>,\n+) {\n+    if !result.insert(pkg_id) {\n+        return;\n+    }\n+    let node = resolve\n+        .nodes\n+        .iter()\n+        .find(|n| &n.id == pkg_id)\n+        .unwrap_or_else(|| panic!(\"could not find `{}` in resolve\", pkg_id));\n+    // Don't care about dev-dependencies.\n+    // Build dependencies *shouldn't* matter unless they do some kind of\n+    // codegen. For now we'll assume they don't.\n+    let deps = node.deps.iter().filter(|node_dep| {\n+        node_dep\n+            .dep_kinds\n+            .iter()\n+            .any(|kind_info| kind_info.kind == cargo_metadata::DependencyKind::Normal)\n+    });\n+    for dep in deps {\n+        normal_deps_of_r(resolve, &dep.pkg, result);\n+    }\n+}"}]}