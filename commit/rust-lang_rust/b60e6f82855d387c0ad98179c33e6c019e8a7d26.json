{"sha": "b60e6f82855d387c0ad98179c33e6c019e8a7d26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MGU2ZjgyODU1ZDM4N2MwYWQ5ODE3OWMzM2U2YzAxOWU4YTdkMjY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-21T18:50:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-21T18:50:57Z"}, "message": "Rollup merge of #46898 - tspiteri:int-overflow-not-underflow, r=steveklabnik\n\ndocs: do not call integer overflows as underflows\n\nIn the API docs, integer overflow is sometimes called underflow. Underflow is really when the magnitude of a floating-point number is too small so the number underflows to subnormal or zero. With integers it is always overflow, even if the expected result is less than the minimum number that can be represented.", "tree": {"sha": "0f1f55dec1349f8a450bb83f442207695ea70b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1f55dec1349f8a450bb83f442207695ea70b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60e6f82855d387c0ad98179c33e6c019e8a7d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60e6f82855d387c0ad98179c33e6c019e8a7d26", "html_url": "https://github.com/rust-lang/rust/commit/b60e6f82855d387c0ad98179c33e6c019e8a7d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60e6f82855d387c0ad98179c33e6c019e8a7d26/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8acc406cf619f4aa2db4bbf1158f1090ff4278fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8acc406cf619f4aa2db4bbf1158f1090ff4278fe", "html_url": "https://github.com/rust-lang/rust/commit/8acc406cf619f4aa2db4bbf1158f1090ff4278fe"}, {"sha": "9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "html_url": "https://github.com/rust-lang/rust/commit/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "732a02e8c427dd6a0bdc36e3c31f334c052bd295", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=b60e6f82855d387c0ad98179c33e6c019e8a7d26", "patch": "@@ -114,7 +114,7 @@ macro_rules! define_bignum {\n         /// copying it recklessly may result in the performance hit.\n         /// Thus this is intentionally not `Copy`.\n         ///\n-        /// All operations available to bignums panic in the case of over/underflows.\n+        /// All operations available to bignums panic in the case of overflows.\n         /// The caller is responsible to use large enough bignum types.\n         pub struct $name {\n             /// One plus the offset to the maximum \"digit\" in use."}, {"sha": "851c0a0dd6f7506d6a43b76e63b98d34d313a2ca", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b60e6f82855d387c0ad98179c33e6c019e8a7d26", "patch": "@@ -399,7 +399,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer subtraction. Computes `self - rhs`, returning\n-        /// `None` if underflow occurred.\n+        /// `None` if overflow occurred.\n         ///\n         /// # Examples\n         ///\n@@ -417,7 +417,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer multiplication. Computes `self * rhs`, returning\n-        /// `None` if underflow or overflow occurred.\n+        /// `None` if overflow occurred.\n         ///\n         /// # Examples\n         ///\n@@ -435,7 +435,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer division. Computes `self / rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in underflow or overflow.\n+        /// if `rhs == 0` or the operation results in overflow.\n         ///\n         /// # Examples\n         ///\n@@ -457,7 +457,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer remainder. Computes `self % rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in underflow or overflow.\n+        /// if `rhs == 0` or the operation results in overflow.\n         ///\n         /// # Examples\n         ///\n@@ -1563,7 +1563,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer subtraction. Computes `self - rhs`, returning\n-        /// `None` if underflow occurred.\n+        /// `None` if overflow occurred.\n         ///\n         /// # Examples\n         ///\n@@ -1581,7 +1581,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer multiplication. Computes `self * rhs`, returning\n-        /// `None` if underflow or overflow occurred.\n+        /// `None` if overflow occurred.\n         ///\n         /// # Examples\n         ///\n@@ -1599,7 +1599,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer division. Computes `self / rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in underflow or overflow.\n+        /// if `rhs == 0` or the operation results in overflow.\n         ///\n         /// # Examples\n         ///\n@@ -1619,7 +1619,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer remainder. Computes `self % rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in underflow or overflow.\n+        /// if `rhs == 0` or the operation results in overflow.\n         ///\n         /// # Examples\n         ///"}, {"sha": "85bdeae442bf7991aaf36e3a1331fb16dd4a88af", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b60e6f82855d387c0ad98179c33e6c019e8a7d26", "patch": "@@ -581,8 +581,7 @@ impl<T: ?Sized> *const T {\n     /// * Both the starting and resulting pointer must be either in bounds or one\n     ///   byte past the end of an allocated object.\n     ///\n-    /// * The computed offset, **in bytes**, cannot overflow or underflow an\n-    ///   `isize`.\n+    /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The offset being in bounds cannot rely on \"wrapping around\" the address\n     ///   space. That is, the infinite-precision sum, **in bytes** must fit in a usize.\n@@ -714,8 +713,7 @@ impl<T: ?Sized> *const T {\n     /// * Both the starting and resulting pointer must be either in bounds or one\n     ///   byte past the end of an allocated object.\n     ///\n-    /// * The computed offset, **in bytes**, cannot overflow or underflow an\n-    ///   `isize`.\n+    /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The offset being in bounds cannot rely on \"wrapping around\" the address\n     ///   space. That is, the infinite-precision sum must fit in a `usize`.\n@@ -1219,8 +1217,7 @@ impl<T: ?Sized> *mut T {\n     /// * Both the starting and resulting pointer must be either in bounds or one\n     ///   byte past the end of an allocated object.\n     ///\n-    /// * The computed offset, **in bytes**, cannot overflow or underflow an\n-    ///   `isize`.\n+    /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The offset being in bounds cannot rely on \"wrapping around\" the address\n     ///   space. That is, the infinite-precision sum, **in bytes** must fit in a usize.\n@@ -1419,8 +1416,7 @@ impl<T: ?Sized> *mut T {\n     /// * Both the starting and resulting pointer must be either in bounds or one\n     ///   byte past the end of an allocated object.\n     ///\n-    /// * The computed offset, **in bytes**, cannot overflow or underflow an\n-    ///   `isize`.\n+    /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The offset being in bounds cannot rely on \"wrapping around\" the address\n     ///   space. That is, the infinite-precision sum must fit in a `usize`."}, {"sha": "8308ab48d9ceb47ce3e6081b2c85da931d8245b6", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b60e6f82855d387c0ad98179c33e6c019e8a7d26", "patch": "@@ -263,7 +263,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// See `std::io::Seek` for more details.\n     ///\n     /// Note: In the edge case where you're seeking with `SeekFrom::Current(n)`\n-    /// where `n` minus the internal buffer length underflows an `i64`, two\n+    /// where `n` minus the internal buffer length overflows an `i64`, two\n     /// seeks will be performed instead of one. If the second seek returns\n     /// `Err`, the underlying reader will be left at the same position it would\n     /// have if you seeked to `SeekFrom::Current(0)`."}, {"sha": "15ddb62bab5c8635c39e8932da0056fd6b9c9f23", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e6f82855d387c0ad98179c33e6c019e8a7d26/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=b60e6f82855d387c0ad98179c33e6c019e8a7d26", "patch": "@@ -290,7 +290,7 @@ impl Duration {\n     }\n \n     /// Checked `Duration` subtraction. Computes `self - other`, returning [`None`]\n-    /// if the result would be negative or if underflow occurred.\n+    /// if the result would be negative or if overflow occurred.\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///"}]}