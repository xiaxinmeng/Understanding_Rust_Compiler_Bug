{"sha": "c81605ca91387cfd6717fcbd02367ce2e433fb78", "node_id": "C_kwDOAAsO6NoAKGM4MTYwNWNhOTEzODdjZmQ2NzE3ZmNiZDAyMzY3Y2UyZTQzM2ZiNzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-29T04:24:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-29T04:24:21Z"}, "message": "Rollup merge of #104951 - Swatinem:async-kind, r=compiler-errors\n\nSimplify checking for `GeneratorKind::Async`\n\nAdds a helper method around `generator_kind` that makes matching async constructs simpler.", "tree": {"sha": "94466eb0b8bbb578307cfc39f713d8892e5118d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94466eb0b8bbb578307cfc39f713d8892e5118d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c81605ca91387cfd6717fcbd02367ce2e433fb78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhYl1CRBK7hj4Ov3rIwAA0CEIABd1abObfDH2iqPOmhh7w0ag\nRcFjtOzmx/at5J60mw+NaRKxKqrEYPbgAgjWuuyC0fd9d5Dg7jsIj3yCRZeIlTGm\nmvD/Bc5KJUWNLmNeqGClgz/oPG8ZvR2g4+kteZBLa4QGFVzpIENXs0PYVyBDSTjd\nD0pxYw1nrpcY4tQCY39QrtMRmT4Arl3lH0cwx+J7YWXdCPS/ElEcnMxAso2KUPXL\nI/LN8Pg3GYcrzrpweNaE4cGleQ6oYE4mh1mwXuymtI99c8BvLDzgda6FG3EHD7M8\n3xOQ/zM/NuywcqV+nHBwx4le1cRQskZbglgmCnL9xO6rwvD+lA1dMV9vVGLv8eo=\n=QxLh\n-----END PGP SIGNATURE-----\n", "payload": "tree 94466eb0b8bbb578307cfc39f713d8892e5118d6\nparent 8bcb473f0f7569a3c7ca382e079ab02901226be1\nparent 2db0dc32970a70bcf622e0854c944753a065cb15\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669695861 +0100\ncommitter GitHub <noreply@github.com> 1669695861 +0100\n\nRollup merge of #104951 - Swatinem:async-kind, r=compiler-errors\n\nSimplify checking for `GeneratorKind::Async`\n\nAdds a helper method around `generator_kind` that makes matching async constructs simpler.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c81605ca91387cfd6717fcbd02367ce2e433fb78", "html_url": "https://github.com/rust-lang/rust/commit/c81605ca91387cfd6717fcbd02367ce2e433fb78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c81605ca91387cfd6717fcbd02367ce2e433fb78/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bcb473f0f7569a3c7ca382e079ab02901226be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcb473f0f7569a3c7ca382e079ab02901226be1", "html_url": "https://github.com/rust-lang/rust/commit/8bcb473f0f7569a3c7ca382e079ab02901226be1"}, {"sha": "2db0dc32970a70bcf622e0854c944753a065cb15", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db0dc32970a70bcf622e0854c944753a065cb15", "html_url": "https://github.com/rust-lang/rust/commit/2db0dc32970a70bcf622e0854c944753a065cb15"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "7aa099433a76d902145decf600c3fac97be5ded7", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=c81605ca91387cfd6717fcbd02367ce2e433fb78", "patch": "@@ -514,12 +514,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             span: *span,\n             ty_err: match output_ty.kind() {\n                 ty::Closure(_, _) => FnMutReturnTypeErr::ReturnClosure { span: *span },\n-                ty::Generator(def, ..)\n-                    if matches!(\n-                        self.infcx.tcx.generator_kind(def),\n-                        Some(hir::GeneratorKind::Async(_))\n-                    ) =>\n-                {\n+                ty::Generator(def, ..) if self.infcx.tcx.generator_is_async(*def) => {\n                     FnMutReturnTypeErr::ReturnAsyncBlock { span: *span }\n                 }\n                 _ => FnMutReturnTypeErr::ReturnRef { span: *span },"}, {"sha": "88ad4c67d93e4e80119ddf417c2204f38f6c01cd", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=c81605ca91387cfd6717fcbd02367ce2e433fb78", "patch": "@@ -322,10 +322,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 ty::Closure(..) => Some(MustUsePath::Closure(span)),\n                 ty::Generator(def_id, ..) => {\n                     // async fn should be treated as \"implementor of `Future`\"\n-                    let must_use = if matches!(\n-                        cx.tcx.generator_kind(def_id),\n-                        Some(hir::GeneratorKind::Async(..))\n-                    ) {\n+                    let must_use = if cx.tcx.generator_is_async(def_id) {\n                         let def_id = cx.tcx.lang_items().future_trait().unwrap();\n                         is_def_must_use(cx, def_id, span)\n                             .map(|inner| MustUsePath::Opaque(Box::new(inner)))"}, {"sha": "e802c71c64b8cb2521a5bc1fb8d441ad4fb9edb3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c81605ca91387cfd6717fcbd02367ce2e433fb78", "patch": "@@ -1361,6 +1361,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)\n     }\n \n+    /// Returns `true` if the node pointed to by `def_id` is a generator for an async construct.\n+    pub fn generator_is_async(self, def_id: DefId) -> bool {\n+        matches!(self.generator_kind(def_id), Some(hir::GeneratorKind::Async(_)))\n+    }\n+\n     pub fn stability(self) -> &'tcx stability::Index {\n         self.stability_index(())\n     }"}, {"sha": "eeb4693eec3b6fa1270af529a3d3d3ec1dbc08fd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c81605ca91387cfd6717fcbd02367ce2e433fb78", "patch": "@@ -1988,11 +1988,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             .as_local()\n             .and_then(|def_id| hir.maybe_body_owned_by(def_id))\n             .map(|body_id| hir.body(body_id));\n-        let is_async = self\n-            .tcx\n-            .generator_kind(generator_did)\n-            .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n-            .unwrap_or(false);\n         let mut visitor = AwaitsVisitor::default();\n         if let Some(body) = generator_body {\n             visitor.visit_body(body);\n@@ -2069,6 +2064,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         debug!(?interior_or_upvar_span);\n         if let Some(interior_or_upvar_span) = interior_or_upvar_span {\n+            let is_async = self.tcx.generator_is_async(generator_did);\n             let typeck_results = match generator_data {\n                 GeneratorData::Local(typeck_results) => Some(typeck_results),\n                 GeneratorData::Foreign(_) => None,\n@@ -2641,10 +2637,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 if is_future\n                                     && obligated_types.last().map_or(false, |ty| match ty.kind() {\n                                         ty::Generator(last_def_id, ..) => {\n-                                            matches!(\n-                                                tcx.generator_kind(last_def_id),\n-                                                Some(GeneratorKind::Async(..))\n-                                            )\n+                                            tcx.generator_is_async(*last_def_id)\n                                         }\n                                         _ => false,\n                                     })"}, {"sha": "627ed4674b0e9e41344ee60de0bb925f9a72f7f1", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81605ca91387cfd6717fcbd02367ce2e433fb78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c81605ca91387cfd6717fcbd02367ce2e433fb78", "patch": "@@ -430,9 +430,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) {\n         let self_ty = obligation.self_ty().skip_binder();\n         if let ty::Generator(did, ..) = self_ty.kind() {\n-            if let Some(rustc_hir::GeneratorKind::Async(_generator_kind)) =\n-                self.tcx().generator_kind(did)\n-            {\n+            if self.tcx().generator_is_async(*did) {\n                 debug!(?self_ty, ?obligation, \"assemble_future_candidates\",);\n \n                 candidates.vec.push(FutureCandidate);"}]}