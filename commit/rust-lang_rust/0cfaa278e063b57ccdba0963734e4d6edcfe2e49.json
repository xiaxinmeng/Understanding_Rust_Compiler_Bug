{"sha": "0cfaa278e063b57ccdba0963734e4d6edcfe2e49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZmFhMjc4ZTA2M2I1N2NjZGJhMDk2MzczNGU0ZDZlZGNmZTJlNDk=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-22T11:01:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-22T11:01:00Z"}, "message": "Rollup merge of #86393 - yerke:add-test-for-issue-52025, r=JohnTitor\n\nAdd regression test for issue #52025\n\nCloses #52025\n\nTook the test from #52025", "tree": {"sha": "817dd542d42fae4aaa9c252ec5e2ac314bd16833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/817dd542d42fae4aaa9c252ec5e2ac314bd16833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cfaa278e063b57ccdba0963734e4d6edcfe2e49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0cLsCRBK7hj4Ov3rIwAA5fIIACxovowJtXiApOrBYrJxruyi\njAyH2AtGT8AOWELenHQVrBeCVcKgryE1EHS6nDTNtU8cs+ho4u8HWyVR0tEiEFFM\napSUoxwLpDS0TIzvOCntsQNYnJ8T/P+PSPOS4gFqyjPTyl7xUHiSIJlBN2dDi5zB\nlmJhtMGlMBuwnzLHcaemL0gxt1GoNiPgJju73X2+9gpvU6vZtHBrregaxBqGEpsy\nLNSar++tTVQGPiW+kgukIzk1341Orpaa1Wy1tsLzLZ9XTkT+Z/0aLHYMmjxTjfO1\njgg+OKixJNSfFJFfM2bx9le2AM0d6dSybTxjnEnHs+j/gf5bN4/Ph5ZRmRczg1s=\n=qKd6\n-----END PGP SIGNATURE-----\n", "payload": "tree 817dd542d42fae4aaa9c252ec5e2ac314bd16833\nparent 44f4a87d7047db0deff5ef033fd2af820722e9a5\nparent 311f5787bcb66764239195cae6818afd2ae420b6\nauthor Yuki Okushi <jtitor@2k36.org> 1624359660 +0900\ncommitter GitHub <noreply@github.com> 1624359660 +0900\n\nRollup merge of #86393 - yerke:add-test-for-issue-52025, r=JohnTitor\n\nAdd regression test for issue #52025\n\nCloses #52025\n\nTook the test from #52025\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cfaa278e063b57ccdba0963734e4d6edcfe2e49", "html_url": "https://github.com/rust-lang/rust/commit/0cfaa278e063b57ccdba0963734e4d6edcfe2e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cfaa278e063b57ccdba0963734e4d6edcfe2e49/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f4a87d7047db0deff5ef033fd2af820722e9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/44f4a87d7047db0deff5ef033fd2af820722e9a5", "html_url": "https://github.com/rust-lang/rust/commit/44f4a87d7047db0deff5ef033fd2af820722e9a5"}, {"sha": "311f5787bcb66764239195cae6818afd2ae420b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/311f5787bcb66764239195cae6818afd2ae420b6", "html_url": "https://github.com/rust-lang/rust/commit/311f5787bcb66764239195cae6818afd2ae420b6"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "7ce638832b06b4f10a97dcb327a783091a5acd1f", "filename": "src/test/ui/traits/operator-overloading-issue-52025.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0cfaa278e063b57ccdba0963734e4d6edcfe2e49/src%2Ftest%2Fui%2Ftraits%2Foperator-overloading-issue-52025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfaa278e063b57ccdba0963734e4d6edcfe2e49/src%2Ftest%2Fui%2Ftraits%2Foperator-overloading-issue-52025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foperator-overloading-issue-52025.rs?ref=0cfaa278e063b57ccdba0963734e4d6edcfe2e49", "patch": "@@ -0,0 +1,57 @@\n+// only-x86_64\n+// build-pass\n+\n+use std::arch::x86_64::*;\n+use std::fmt::Debug;\n+use std::ops::*;\n+\n+pub trait Simd {\n+    type Vf32: Copy + Debug + Add<Self::Vf32, Output = Self::Vf32> + Add<f32, Output = Self::Vf32>;\n+\n+    unsafe fn set1_ps(a: f32) -> Self::Vf32;\n+    unsafe fn add_ps(a: Self::Vf32, b: Self::Vf32) -> Self::Vf32;\n+}\n+\n+#[derive(Copy, Debug, Clone)]\n+pub struct F32x4(pub __m128);\n+\n+impl Add<F32x4> for F32x4 {\n+    type Output = F32x4;\n+\n+    fn add(self, rhs: F32x4) -> F32x4 {\n+        F32x4(unsafe { _mm_add_ps(self.0, rhs.0) })\n+    }\n+}\n+\n+impl Add<f32> for F32x4 {\n+    type Output = F32x4;\n+    fn add(self, rhs: f32) -> F32x4 {\n+        F32x4(unsafe { _mm_add_ps(self.0, _mm_set1_ps(rhs)) })\n+    }\n+}\n+\n+pub struct Sse2;\n+impl Simd for Sse2 {\n+    type Vf32 = F32x4;\n+\n+    #[inline(always)]\n+    unsafe fn set1_ps(a: f32) -> Self::Vf32 {\n+        F32x4(_mm_set1_ps(a))\n+    }\n+\n+    #[inline(always)]\n+    unsafe fn add_ps(a: Self::Vf32, b: Self::Vf32) -> Self::Vf32 {\n+        F32x4(_mm_add_ps(a.0, b.0))\n+    }\n+}\n+\n+unsafe fn test<S: Simd>() -> S::Vf32 {\n+    let a = S::set1_ps(3.0);\n+    let b = S::set1_ps(2.0);\n+    let result = a + b;\n+    result\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", unsafe { test::<Sse2>() });\n+}"}]}