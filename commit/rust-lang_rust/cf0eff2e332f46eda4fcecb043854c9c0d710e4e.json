{"sha": "cf0eff2e332f46eda4fcecb043854c9c0d710e4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMGVmZjJlMzMyZjQ2ZWRhNGZjZWNiMDQzODU0YzljMGQ3MTBlNGU=", "commit": {"author": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-04-19T20:30:05Z"}, "committer": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-04-21T22:13:00Z"}, "message": "auto_import: better no anchor management", "tree": {"sha": "8744a06eb4c7e05a9242af21774521058aad2475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8744a06eb4c7e05a9242af21774521058aad2475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf0eff2e332f46eda4fcecb043854c9c0d710e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0eff2e332f46eda4fcecb043854c9c0d710e4e", "html_url": "https://github.com/rust-lang/rust/commit/cf0eff2e332f46eda4fcecb043854c9c0d710e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf0eff2e332f46eda4fcecb043854c9c0d710e4e/comments", "author": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "766813898f7901736d82bfc103874474177e7aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/766813898f7901736d82bfc103874474177e7aca", "html_url": "https://github.com/rust-lang/rust/commit/766813898f7901736d82bfc103874474177e7aca"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "b002d0e4db4ce039636ea5db533ceca67c92bbc8", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cf0eff2e332f46eda4fcecb043854c9c0d710e4e/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0eff2e332f46eda4fcecb043854c9c0d710e4e/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=cf0eff2e332f46eda4fcecb043854c9c0d710e4e", "patch": "@@ -168,7 +168,7 @@ fn walk_use_tree_for_best_action<'a>(\n     current_path_segments: &mut Vec<&'a ast::PathSegment>, // buffer containing path segments\n     current_parent_use_tree_list: Option<&'a ast::UseTreeList>, // will be Some value if we are in a nested import\n     current_use_tree: &'a ast::UseTree, // the use tree we are currently examinating\n-    target: &[SmolStr],    // the path we want to import\n+    target: &[SmolStr],                 // the path we want to import\n ) -> ImportAction<'a> {\n     // We save the number of segments in the buffer so we can restore the correct segments\n     // before returning. Recursive call will add segments so we need to delete them.\n@@ -341,11 +341,11 @@ fn best_action_for_target<'b, 'a: 'b>(\n         None => {\n             // We have no action and no UseItem was found in container so we find\n             // another item and we use it as anchor.\n-            // If there are no items, we choose the target path itself as anchor.\n+            // If there are no items above, we choose the target path itself as anchor.\n+            // todo: we should include even whitespace blocks as anchor candidates\n             let anchor = container\n                 .children()\n-                .find_map(ast::ModuleItem::cast)\n-                .map(AstNode::syntax)\n+                .find(|n| n.range().start() < anchor.range().start())\n                 .or(Some(anchor));\n \n             return ImportAction::add_new_use(anchor, false);\n@@ -498,9 +498,9 @@ pub fn collect_hir_path_segments(path: &hir::Path) -> Vec<SmolStr> {\n     match path.kind {\n         hir::PathKind::Abs => ps.push(\"\".into()),\n         hir::PathKind::Crate => ps.push(\"crate\".into()),\n-        hir::PathKind::Plain => {},\n+        hir::PathKind::Plain => {}\n         hir::PathKind::Self_ => ps.push(\"self\".into()),\n-        hir::PathKind::Super => ps.push(\"super\".into())\n+        hir::PathKind::Super => ps.push(\"super\".into()),\n     }\n     for s in path.segments.iter() {\n         ps.push(s.name.to_smolstr());\n@@ -513,7 +513,7 @@ pub fn collect_hir_path_segments(path: &hir::Path) -> Vec<SmolStr> {\n // the cursor position\n #[allow(unused)]\n pub fn auto_import_text_edit(\n-    // Ideally the position of the cursor, used to \n+    // Ideally the position of the cursor, used to\n     position: &SyntaxNode,\n     // The statement to use as anchor (last resort)\n     anchor: &SyntaxNode,\n@@ -590,6 +590,47 @@ std::fmt::Debug<|>\n             \"\n use std::fmt::Debug;\n \n+Debug<|>\n+    \",\n+        );\n+    }\n+    #[test]\n+    fn test_auto_import_add_use_no_anchor_with_item_below() {\n+        check_assist(\n+            auto_import,\n+            \"\n+std::fmt::Debug<|>\n+\n+fn main() {\n+}\n+    \",\n+            \"\n+use std::fmt::Debug;\n+\n+Debug<|>\n+\n+fn main() {\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_auto_import_add_use_no_anchor_with_item_above() {\n+        check_assist(\n+            auto_import,\n+            \"\n+fn main() {\n+}\n+\n+std::fmt::Debug<|>\n+    \",\n+            \"\n+use std::fmt::Debug;\n+\n+fn main() {\n+}\n+\n Debug<|>\n     \",\n         );"}]}