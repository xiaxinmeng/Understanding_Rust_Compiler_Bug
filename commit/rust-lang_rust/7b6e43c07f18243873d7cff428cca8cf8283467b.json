{"sha": "7b6e43c07f18243873d7cff428cca8cf8283467b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNmU0M2MwN2YxODI0Mzg3M2Q3Y2ZmNDI4Y2NhOGNmODI4MzQ2N2I=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-03-02T09:54:51Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-03-03T02:55:37Z"}, "message": "metadata: Space-optimize empty vectors and maps.\n\nSo that `EsVec 82 EsSub8 00` becomes `EsVec 80` now.", "tree": {"sha": "73666315146fe1d49a3cc3f4c46a6004fa9af303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73666315146fe1d49a3cc3f4c46a6004fa9af303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b6e43c07f18243873d7cff428cca8cf8283467b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6e43c07f18243873d7cff428cca8cf8283467b", "html_url": "https://github.com/rust-lang/rust/commit/7b6e43c07f18243873d7cff428cca8cf8283467b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b6e43c07f18243873d7cff428cca8cf8283467b/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e9a61e9c697ffb6f6f783e9190d5a93dfdc10a", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e9a61e9c697ffb6f6f783e9190d5a93dfdc10a", "html_url": "https://github.com/rust-lang/rust/commit/84e9a61e9c697ffb6f6f783e9190d5a93dfdc10a"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "fee9a69897e0e91c09463e037c17877bde58fa3f", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b6e43c07f18243873d7cff428cca8cf8283467b/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6e43c07f18243873d7cff428cca8cf8283467b/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=7b6e43c07f18243873d7cff428cca8cf8283467b", "patch": "@@ -64,6 +64,10 @@ impl<'doc> Doc<'doc> {\n         reader::get_doc(*self, tag)\n     }\n \n+    pub fn is_empty(&self) -> bool {\n+        self.start == self.end\n+    }\n+\n     pub fn as_str_slice<'a>(&'a self) -> &'a str {\n         str::from_utf8(&self.data[self.start..self.end]).unwrap()\n     }\n@@ -462,6 +466,11 @@ pub mod reader {\n         }\n \n         fn _next_sub(&mut self) -> DecodeResult<uint> {\n+            // empty vector/map optimization\n+            if self.parent.is_empty() {\n+                return Ok(0);\n+            }\n+\n             let (big, doc) = try!(self.next_doc2(EsSub8, EsSub32));\n             let r = if big {\n                 doc_as_u32(doc) as uint\n@@ -1148,6 +1157,10 @@ pub mod writer {\n         fn emit_seq<F>(&mut self, len: uint, f: F) -> EncodeResult where\n             F: FnOnce(&mut Encoder<'a>) -> EncodeResult,\n         {\n+            if len == 0 {\n+                // empty vector optimization\n+                return self.wr_tagged_bytes(EsVec as uint, &[]);\n+            }\n \n             try!(self.start_tag(EsVec as uint));\n             try!(self._emit_tagged_sub(len));\n@@ -1167,6 +1180,10 @@ pub mod writer {\n         fn emit_map<F>(&mut self, len: uint, f: F) -> EncodeResult where\n             F: FnOnce(&mut Encoder<'a>) -> EncodeResult,\n         {\n+            if len == 0 {\n+                // empty map optimization\n+                return self.wr_tagged_bytes(EsMap as uint, &[]);\n+            }\n \n             try!(self.start_tag(EsMap as uint));\n             try!(self._emit_tagged_sub(len));"}]}