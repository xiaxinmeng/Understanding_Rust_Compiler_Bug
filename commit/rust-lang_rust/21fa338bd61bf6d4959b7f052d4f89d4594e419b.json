{"sha": "21fa338bd61bf6d4959b7f052d4f89d4594e419b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZmEzMzhiZDYxYmY2ZDQ5NTliN2YwNTJkNGY4OWQ0NTk0ZTQxOWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-26T10:59:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-26T10:59:59Z"}, "message": "Merge pull request #3316 from matklad/dedup\n\nRemove code duplication in tests", "tree": {"sha": "11c6260becae314db92d671d84e58830971c948b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c6260becae314db92d671d84e58830971c948b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21fa338bd61bf6d4959b7f052d4f89d4594e419b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVk+vCRBK7hj4Ov3rIwAAdHIIAGxSbRpV6D5xvX45b9mtaVzd\nyOkMJtsKcG7WAVENTwyv78DxASWo0VdTftSp5h2vZgcquIprXdE/xNvnBFhqHPxb\nwv67KXoNj99OuXXEAolcwYOJCcsaB8gSFgShG2Lzs6FoHzg7RHXzNDdbFyAw5U2j\nyhpOk1itCyFbC+XUNj042Uu1Tyn1I5q5WdRZ4UhBj1gwKHEqLvy7pj90G4nVOZbv\ncI2hvx6jUK81btp2GMh2FVpLAQx/mHW0bEBOE5nvyeGDxGnHhHZJaR4dLYmYmH45\nmLY39ApwHaXNMuP7e30W6TYqQ1GjVn4JBUIUwhiMVYJkmenBGS5VS399GGVPfdc=\n=8gEW\n-----END PGP SIGNATURE-----\n", "payload": "tree 11c6260becae314db92d671d84e58830971c948b\nparent ae0aeb1b23aa4bc96a7113de784799365c2b4358\nparent 52fd19621caa62ddd7d3f29b69a5133650bc1294\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1582714799 +0100\ncommitter GitHub <noreply@github.com> 1582714799 +0100\n\nMerge pull request #3316 from matklad/dedup\n\nRemove code duplication in tests"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21fa338bd61bf6d4959b7f052d4f89d4594e419b", "html_url": "https://github.com/rust-lang/rust/commit/21fa338bd61bf6d4959b7f052d4f89d4594e419b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21fa338bd61bf6d4959b7f052d4f89d4594e419b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae0aeb1b23aa4bc96a7113de784799365c2b4358", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0aeb1b23aa4bc96a7113de784799365c2b4358", "html_url": "https://github.com/rust-lang/rust/commit/ae0aeb1b23aa4bc96a7113de784799365c2b4358"}, {"sha": "52fd19621caa62ddd7d3f29b69a5133650bc1294", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fd19621caa62ddd7d3f29b69a5133650bc1294", "html_url": "https://github.com/rust-lang/rust/commit/52fd19621caa62ddd7d3f29b69a5133650bc1294"}], "stats": {"total": 175, "additions": 74, "deletions": 101}, "files": [{"sha": "b453c51fbc55056f788f202c5de60e9b83df8062", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/21fa338bd61bf6d4959b7f052d4f89d4594e419b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fa338bd61bf6d4959b7f052d4f89d4594e419b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=21fa338bd61bf6d4959b7f052d4f89d4594e419b", "patch": "@@ -136,15 +136,13 @@ fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::helpers::{\n-        check_assist_range, check_assist_range_not_applicable, check_assist_range_target,\n-    };\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n \n     #[test]\n     fn test_introduce_var_simple() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() {\n@@ -161,16 +159,13 @@ fn foo() {\n     #[test]\n     fn introduce_var_in_comment_is_not_applicable() {\n         covers!(introduce_var_in_comment_is_not_applicable);\n-        check_assist_range_not_applicable(\n-            introduce_variable,\n-            \"fn main() { 1 + /* <|>comment<|> */ 1; }\",\n-        );\n+        check_assist_not_applicable(introduce_variable, \"fn main() { 1 + /* <|>comment<|> */ 1; }\");\n     }\n \n     #[test]\n     fn test_introduce_var_expr_stmt() {\n         covers!(test_introduce_var_expr_stmt);\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() {\n@@ -181,7 +176,7 @@ fn foo() {\n     let <|>var_name = 1 + 1;\n }\",\n         );\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() {\n@@ -198,7 +193,7 @@ fn foo() {\n \n     #[test]\n     fn test_introduce_var_part_of_expr_stmt() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() {\n@@ -215,7 +210,7 @@ fn foo() {\n     #[test]\n     fn test_introduce_var_last_expr() {\n         covers!(test_introduce_var_last_expr);\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() {\n@@ -227,7 +222,7 @@ fn foo() {\n     bar(var_name)\n }\",\n         );\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() {\n@@ -243,7 +238,7 @@ fn foo() {\n \n     #[test]\n     fn test_introduce_var_in_match_arm_no_block() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn main() {\n@@ -268,7 +263,7 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_in_match_arm_with_block() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn main() {\n@@ -300,7 +295,7 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_in_closure_no_block() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn main() {\n@@ -317,7 +312,7 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_in_closure_with_block() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn main() {\n@@ -334,7 +329,7 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_path_simple() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn main() {\n@@ -352,7 +347,7 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_path_method() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn main() {\n@@ -370,7 +365,7 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_return() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n@@ -388,7 +383,7 @@ fn foo() -> u32 {\n \n     #[test]\n     fn test_introduce_var_does_not_add_extra_whitespace() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n@@ -407,7 +402,7 @@ fn foo() -> u32 {\n \",\n         );\n \n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n@@ -424,7 +419,7 @@ fn foo() -> u32 {\n \",\n         );\n \n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n@@ -452,7 +447,7 @@ fn foo() -> u32 {\n \n     #[test]\n     fn test_introduce_var_break() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn main() {\n@@ -474,7 +469,7 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_for_cast() {\n-        check_assist_range(\n+        check_assist(\n             introduce_variable,\n             \"\n fn main() {\n@@ -492,27 +487,20 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_for_return_not_applicable() {\n-        check_assist_range_not_applicable(introduce_variable, \"fn foo() { <|>return<|>; } \");\n+        check_assist_not_applicable(introduce_variable, \"fn foo() { <|>return<|>; } \");\n     }\n \n     #[test]\n     fn test_introduce_var_for_break_not_applicable() {\n-        check_assist_range_not_applicable(\n-            introduce_variable,\n-            \"fn main() { loop { <|>break<|>; }; }\",\n-        );\n+        check_assist_not_applicable(introduce_variable, \"fn main() { loop { <|>break<|>; }; }\");\n     }\n \n     // FIXME: This is not quite correct, but good enough(tm) for the sorting heuristic\n     #[test]\n     fn introduce_var_target() {\n-        check_assist_range_target(\n-            introduce_variable,\n-            \"fn foo() -> u32 { <|>return 2 + 2<|>; }\",\n-            \"2 + 2\",\n-        );\n+        check_assist_target(introduce_variable, \"fn foo() -> u32 { <|>return 2 + 2<|>; }\", \"2 + 2\");\n \n-        check_assist_range_target(\n+        check_assist_target(\n             introduce_variable,\n             \"\n fn main() {"}, {"sha": "79fe43aa4882aee49e114beb5318dd59ce8273a2", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 49, "deletions": 65, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/21fa338bd61bf6d4959b7f052d4f89d4594e419b/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fa338bd61bf6d4959b7f052d4f89d4594e419b/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=21fa338bd61bf6d4959b7f052d4f89d4594e419b", "patch": "@@ -162,7 +162,7 @@ mod helpers {\n     use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n     use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n     use ra_syntax::TextRange;\n-    use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n+    use test_utils::{add_cursor, assert_eq_text, extract_range_or_offset, RangeOrOffset};\n \n     use crate::{AssistCtx, AssistHandler};\n \n@@ -176,81 +176,65 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist(assist: AssistHandler, before: &str, after: &str) {\n-        let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = with_single_file(&before);\n-        let frange =\n-            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assist =\n-            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n-        let action = assist.0[0].action.clone().unwrap();\n-\n-        let actual = action.edit.apply(&before);\n-        let actual_cursor_pos = match action.cursor_position {\n-            None => action\n-                .edit\n-                .apply_to_offset(before_cursor_pos)\n-                .expect(\"cursor position is affected by the edit\"),\n-            Some(off) => off,\n-        };\n-        let actual = add_cursor(&actual, actual_cursor_pos);\n-        assert_eq_text!(after, &actual);\n-    }\n-\n-    pub(crate) fn check_assist_range(assist: AssistHandler, before: &str, after: &str) {\n-        let (range, before) = extract_range(before);\n-        let (db, file_id) = with_single_file(&before);\n-        let frange = FileRange { file_id, range };\n-        let assist =\n-            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n-        let action = assist.0[0].action.clone().unwrap();\n-\n-        let mut actual = action.edit.apply(&before);\n-        if let Some(pos) = action.cursor_position {\n-            actual = add_cursor(&actual, pos);\n-        }\n-        assert_eq_text!(after, &actual);\n+        check(assist, before, ExpectedResult::After(after));\n     }\n \n+    // FIXME: instead of having a separate function here, maybe use\n+    // `extract_ranges` and mark the target as `<target> </target>` in the\n+    // fixuture?\n     pub(crate) fn check_assist_target(assist: AssistHandler, before: &str, target: &str) {\n-        let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = with_single_file(&before);\n-        let frange =\n-            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assist =\n-            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n-        let action = assist.0[0].action.clone().unwrap();\n-\n-        let range = action.target.expect(\"expected target on action\");\n-        assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n+        check(assist, before, ExpectedResult::Target(target));\n     }\n \n-    pub(crate) fn check_assist_range_target(assist: AssistHandler, before: &str, target: &str) {\n-        let (range, before) = extract_range(before);\n-        let (db, file_id) = with_single_file(&before);\n-        let frange = FileRange { file_id, range };\n-        let assist =\n-            assist(AssistCtx::new(&db, frange, true)).expect(\"code action is not applicable\");\n-        let action = assist.0[0].action.clone().unwrap();\n-\n-        let range = action.target.expect(\"expected target on action\");\n-        assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n+    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, before: &str) {\n+        check(assist, before, ExpectedResult::NotApplicable);\n     }\n \n-    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, before: &str) {\n-        let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = with_single_file(&before);\n-        let frange =\n-            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assist = assist(AssistCtx::new(&db, frange, true));\n-        assert!(assist.is_none());\n+    enum ExpectedResult<'a> {\n+        NotApplicable,\n+        After(&'a str),\n+        Target(&'a str),\n     }\n \n-    pub(crate) fn check_assist_range_not_applicable(assist: AssistHandler, before: &str) {\n-        let (range, before) = extract_range(before);\n+    fn check(assist: AssistHandler, before: &str, expected: ExpectedResult) {\n+        let (range_or_offset, before) = extract_range_or_offset(before);\n+        let range: TextRange = range_or_offset.into();\n+\n         let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n-        let assist = assist(AssistCtx::new(&db, frange, true));\n-        assert!(assist.is_none());\n+        let assist_ctx = AssistCtx::new(&db, frange, true);\n+\n+        match (assist(assist_ctx), expected) {\n+            (Some(assist), ExpectedResult::After(after)) => {\n+                let action = assist.0[0].action.clone().unwrap();\n+\n+                let mut actual = action.edit.apply(&before);\n+                match action.cursor_position {\n+                    None => {\n+                        if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n+                            let off = action\n+                                .edit\n+                                .apply_to_offset(before_cursor_pos)\n+                                .expect(\"cursor position is affected by the edit\");\n+                            actual = add_cursor(&actual, off)\n+                        }\n+                    }\n+                    Some(off) => actual = add_cursor(&actual, off),\n+                };\n+\n+                assert_eq_text!(after, &actual);\n+            }\n+            (Some(assist), ExpectedResult::Target(target)) => {\n+                let action = assist.0[0].action.clone().unwrap();\n+                let range = action.target.expect(\"expected target on action\");\n+                assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n+            }\n+            (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n+            (None, ExpectedResult::After(_)) | (None, ExpectedResult::Target(_)) => {\n+                panic!(\"code action is not applicable\")\n+            }\n+            (None, ExpectedResult::NotApplicable) => (),\n+        };\n     }\n }\n "}, {"sha": "69deddcb5bb14619eecb116a85b5c70da1e180e7", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21fa338bd61bf6d4959b7f052d4f89d4594e419b/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fa338bd61bf6d4959b7f052d4f89d4594e419b/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=21fa338bd61bf6d4959b7f052d4f89d4594e419b", "patch": "@@ -83,6 +83,7 @@ fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n     Some((TextRange::from_to(start, end), text))\n }\n \n+#[derive(Clone, Copy)]\n pub enum RangeOrOffset {\n     Range(TextRange),\n     Offset(TextUnit),"}]}