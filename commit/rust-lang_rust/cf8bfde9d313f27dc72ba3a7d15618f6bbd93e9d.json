{"sha": "cf8bfde9d313f27dc72ba3a7d15618f6bbd93e9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmOGJmZGU5ZDMxM2YyN2RjNzJiYTNhN2QxNTYxOGY2YmJkOTNlOWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-18T23:02:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-19T01:34:38Z"}, "message": "alloc: Stabilize rc module.\n\nWeak pointers experimental. Most everything else stable.", "tree": {"sha": "caa51f03b0780ffcd874015c1e926809727d442b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa51f03b0780ffcd874015c1e926809727d442b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf8bfde9d313f27dc72ba3a7d15618f6bbd93e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8bfde9d313f27dc72ba3a7d15618f6bbd93e9d", "html_url": "https://github.com/rust-lang/rust/commit/cf8bfde9d313f27dc72ba3a7d15618f6bbd93e9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf8bfde9d313f27dc72ba3a7d15618f6bbd93e9d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f3d8fc1f917b5a5626bba166a54d6a68971dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f3d8fc1f917b5a5626bba166a54d6a68971dc1", "html_url": "https://github.com/rust-lang/rust/commit/71f3d8fc1f917b5a5626bba166a54d6a68971dc1"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "8d4e788bc8035a0a5181fabd544ce95ce2a535d0", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf8bfde9d313f27dc72ba3a7d15618f6bbd93e9d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8bfde9d313f27dc72ba3a7d15618f6bbd93e9d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=cf8bfde9d313f27dc72ba3a7d15618f6bbd93e9d", "patch": "@@ -148,6 +148,8 @@ fn main() {\n \n */\n \n+#![stable]\n+\n use core::mem::transmute;\n use core::cell::Cell;\n use core::clone::Clone;\n@@ -171,6 +173,7 @@ struct RcBox<T> {\n \n /// Immutable reference counted pointer type\n #[unsafe_no_drop_flag]\n+#[stable]\n pub struct Rc<T> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -179,6 +182,7 @@ pub struct Rc<T> {\n     _noshare: marker::NoShare\n }\n \n+#[stable]\n impl<T> Rc<T> {\n     /// Construct a new reference-counted box\n     pub fn new(value: T) -> Rc<T> {\n@@ -203,6 +207,7 @@ impl<T> Rc<T> {\n \n impl<T> Rc<T> {\n     /// Downgrade the reference-counted pointer to a weak reference\n+    #[experimental = \"Weak pointers may not belong in this module.\"]\n     pub fn downgrade(&self) -> Weak<T> {\n         self.inc_weak();\n         Weak {\n@@ -238,6 +243,7 @@ impl<T: Clone> Rc<T> {\n     }\n }\n \n+#[experimental = \"Deref is experimental.\"]\n impl<T> Deref<T> for Rc<T> {\n     /// Borrow the value contained in the reference-counted box\n     #[inline(always)]\n@@ -247,6 +253,7 @@ impl<T> Deref<T> for Rc<T> {\n }\n \n #[unsafe_destructor]\n+#[experimental = \"Drop is experimental.\"]\n impl<T> Drop for Rc<T> {\n     fn drop(&mut self) {\n         unsafe {\n@@ -269,7 +276,7 @@ impl<T> Drop for Rc<T> {\n     }\n }\n \n-#[unstable]\n+#[unstable = \"Clone is unstable.\"]\n impl<T> Clone for Rc<T> {\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n@@ -278,22 +285,26 @@ impl<T> Clone for Rc<T> {\n     }\n }\n \n+#[stable]\n impl<T: Default> Default for Rc<T> {\n     #[inline]\n     fn default() -> Rc<T> {\n         Rc::new(Default::default())\n     }\n }\n \n+#[unstable = \"PartialEq is unstable.\"]\n impl<T: PartialEq> PartialEq for Rc<T> {\n     #[inline(always)]\n     fn eq(&self, other: &Rc<T>) -> bool { **self == **other }\n     #[inline(always)]\n     fn ne(&self, other: &Rc<T>) -> bool { **self != **other }\n }\n \n+#[unstable = \"Eq is unstable.\"]\n impl<T: Eq> Eq for Rc<T> {}\n \n+#[unstable = \"PartialOrd is unstable.\"]\n impl<T: PartialOrd> PartialOrd for Rc<T> {\n     #[inline(always)]\n     fn partial_cmp(&self, other: &Rc<T>) -> Option<Ordering> {\n@@ -313,11 +324,13 @@ impl<T: PartialOrd> PartialOrd for Rc<T> {\n     fn ge(&self, other: &Rc<T>) -> bool { **self >= **other }\n }\n \n+#[unstable = \"Ord is unstable.\"]\n impl<T: Ord> Ord for Rc<T> {\n     #[inline]\n     fn cmp(&self, other: &Rc<T>) -> Ordering { (**self).cmp(&**other) }\n }\n \n+#[experimental = \"Show is experimental.\"]\n impl<T: fmt::Show> fmt::Show for Rc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)\n@@ -326,6 +339,7 @@ impl<T: fmt::Show> fmt::Show for Rc<T> {\n \n /// Weak reference to a reference-counted box\n #[unsafe_no_drop_flag]\n+#[experimental = \"Weak pointers may not belong in this module.\"]\n pub struct Weak<T> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -334,6 +348,7 @@ pub struct Weak<T> {\n     _noshare: marker::NoShare\n }\n \n+#[experimental = \"Weak pointers may not belong in this module.\"]\n impl<T> Weak<T> {\n     /// Upgrade a weak reference to a strong reference\n     pub fn upgrade(&self) -> Option<Rc<T>> {\n@@ -347,6 +362,7 @@ impl<T> Weak<T> {\n }\n \n #[unsafe_destructor]\n+#[experimental = \"Weak pointers may not belong in this module.\"]\n impl<T> Drop for Weak<T> {\n     fn drop(&mut self) {\n         unsafe {\n@@ -364,6 +380,7 @@ impl<T> Drop for Weak<T> {\n }\n \n #[unstable]\n+#[experimental = \"Weak pointers may not belong in this module.\"]\n impl<T> Clone for Weak<T> {\n     #[inline]\n     fn clone(&self) -> Weak<T> {"}]}