{"sha": "30fd79cb6c8d68df10392595231a55e83f217f61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZmQ3OWNiNmM4ZDY4ZGYxMDM5MjU5NTIzMWE1NWU4M2YyMTdmNjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T13:15:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-22T13:15:38Z"}, "message": "Rollup merge of #63767 - lzutao:integer-ord-suboptimal, r=nagisa\n\nUse more optimal Ord implementation for integers\n\nCloses #63758\nr? @nagisa\n\n### Compare results\n\n([godbolt link](https://godbolt.org/z/dsbczy))\n\nOld assembly:\n```asm\nexample::cmp1:\n  mov eax, dword ptr [rdi]\n  mov ecx, dword ptr [rsi]\n  cmp eax, ecx\n  setae dl\n  add dl, dl\n  add dl, -1\n  xor esi, esi\n  cmp eax, ecx\n  movzx eax, dl\n  cmove eax, esi\n  ret\n```\n\nNew assembly:\n```asm\nexample::cmp2:\n  mov eax, dword ptr [rdi]\n  xor ecx, ecx\n  cmp eax, dword ptr [rsi]\n  seta cl\n  mov eax, 255\n  cmovae eax, ecx\n  ret\n```\n\nOld llvm-mca statistics:\n```\nIterations:        100\nInstructions:      1100\nTotal Cycles:      243\nTotal uOps:        1300\n\nDispatch Width:    6\nuOps Per Cycle:    5.35\nIPC:               4.53\nBlock RThroughput: 2.2\n```\n\nNew llvm-mca statistics:\n```\nIterations:        100\nInstructions:      700\nTotal Cycles:      217\nTotal uOps:        1100\n\nDispatch Width:    6\nuOps Per Cycle:    5.07\nIPC:               3.23\nBlock RThroughput: 1.8\n```", "tree": {"sha": "0be4c696060da9d09bfa9809144d3b4d802e66a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0be4c696060da9d09bfa9809144d3b4d802e66a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30fd79cb6c8d68df10392595231a55e83f217f61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXpV6CRBK7hj4Ov3rIwAAdHIIAA7wPQ+N3Yp/7KuJv9cy/4DU\nSu+AhAQOiP3Os65zbLe1jr9W4fB9x/Xt36ciV6I0XjMklTJdMEEQLnts9mREK0dQ\niMGPx4wCZ+0viq9LLsbPve1shcZXZG6VadGKc/Ipt9kyMFo91LvJ4GKAE6+NBFWD\niFzEwJB8AOxfBOKtBlVibMsRjTd5vZN5Wv2IYYEqij+2LqOKFsEWAos21B6Q51sh\nn/6YikeE6xGuz2QvmcGuarDrOZmQKihbXkngJ0IpmmHLEcwNH6EinhPJtNW3m7Ky\nw2V3dq4q1/LcywqhGo4VRdiYurGH8SyiwR32P/w1bnLszEc8Wa24zCOH3PmOK/g=\n=Pai4\n-----END PGP SIGNATURE-----\n", "payload": "tree 0be4c696060da9d09bfa9809144d3b4d802e66a8\nparent 07843959123b5d3598d3795891548513acd568bd\nparent f5b16f6212d2d72d505d4d6b1dedc2c9c61dd014\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566479738 +0200\ncommitter GitHub <noreply@github.com> 1566479738 +0200\n\nRollup merge of #63767 - lzutao:integer-ord-suboptimal, r=nagisa\n\nUse more optimal Ord implementation for integers\n\nCloses #63758\nr? @nagisa\n\n### Compare results\n\n([godbolt link](https://godbolt.org/z/dsbczy))\n\nOld assembly:\n```asm\nexample::cmp1:\n  mov eax, dword ptr [rdi]\n  mov ecx, dword ptr [rsi]\n  cmp eax, ecx\n  setae dl\n  add dl, dl\n  add dl, -1\n  xor esi, esi\n  cmp eax, ecx\n  movzx eax, dl\n  cmove eax, esi\n  ret\n```\n\nNew assembly:\n```asm\nexample::cmp2:\n  mov eax, dword ptr [rdi]\n  xor ecx, ecx\n  cmp eax, dword ptr [rsi]\n  seta cl\n  mov eax, 255\n  cmovae eax, ecx\n  ret\n```\n\nOld llvm-mca statistics:\n```\nIterations:        100\nInstructions:      1100\nTotal Cycles:      243\nTotal uOps:        1300\n\nDispatch Width:    6\nuOps Per Cycle:    5.35\nIPC:               4.53\nBlock RThroughput: 2.2\n```\n\nNew llvm-mca statistics:\n```\nIterations:        100\nInstructions:      700\nTotal Cycles:      217\nTotal uOps:        1100\n\nDispatch Width:    6\nuOps Per Cycle:    5.07\nIPC:               3.23\nBlock RThroughput: 1.8\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30fd79cb6c8d68df10392595231a55e83f217f61", "html_url": "https://github.com/rust-lang/rust/commit/30fd79cb6c8d68df10392595231a55e83f217f61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30fd79cb6c8d68df10392595231a55e83f217f61/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07843959123b5d3598d3795891548513acd568bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/07843959123b5d3598d3795891548513acd568bd", "html_url": "https://github.com/rust-lang/rust/commit/07843959123b5d3598d3795891548513acd568bd"}, {"sha": "f5b16f6212d2d72d505d4d6b1dedc2c9c61dd014", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b16f6212d2d72d505d4d6b1dedc2c9c61dd014", "html_url": "https://github.com/rust-lang/rust/commit/f5b16f6212d2d72d505d4d6b1dedc2c9c61dd014"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "167a9dd1c3620cba039ea33ac1c1b3b996b2d596", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30fd79cb6c8d68df10392595231a55e83f217f61/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fd79cb6c8d68df10392595231a55e83f217f61/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=30fd79cb6c8d68df10392595231a55e83f217f61", "patch": "@@ -1012,9 +1012,11 @@ mod impls {\n             impl Ord for $t {\n                 #[inline]\n                 fn cmp(&self, other: &$t) -> Ordering {\n-                    if *self == *other { Equal }\n-                    else if *self < *other { Less }\n-                    else { Greater }\n+                    // The order here is important to generate more optimal assembly.\n+                    // See <https://github.com/rust-lang/rust/issues/63758> for more info.\n+                    if *self < *other { Less }\n+                    else if *self > *other { Greater }\n+                    else { Equal }\n                 }\n             }\n         )*)"}, {"sha": "1373b12e3721c3b36fafaff227b368f14639931e", "filename": "src/test/codegen/integer-cmp.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/30fd79cb6c8d68df10392595231a55e83f217f61/src%2Ftest%2Fcodegen%2Finteger-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fd79cb6c8d68df10392595231a55e83f217f61/src%2Ftest%2Fcodegen%2Finteger-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finteger-cmp.rs?ref=30fd79cb6c8d68df10392595231a55e83f217f61", "patch": "@@ -0,0 +1,28 @@\n+// This is test for more optimal Ord implementation for integers.\n+// See <https://github.com/rust-lang/rust/issues/63758> for more info.\n+\n+// compile-flags: -C opt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+use std::cmp::Ordering;\n+\n+// CHECK-LABEL: @cmp_signed\n+#[no_mangle]\n+pub fn cmp_signed(a: i64, b: i64) -> Ordering {\n+// CHECK: icmp slt\n+// CHECK: icmp sgt\n+// CHECK: zext i1\n+// CHECK: select i1\n+    a.cmp(&b)\n+}\n+\n+// CHECK-LABEL: @cmp_unsigned\n+#[no_mangle]\n+pub fn cmp_unsigned(a: u32, b: u32) -> Ordering {\n+// CHECK: icmp ult\n+// CHECK: icmp ugt\n+// CHECK: zext i1\n+// CHECK: select i1\n+    a.cmp(&b)\n+}"}]}