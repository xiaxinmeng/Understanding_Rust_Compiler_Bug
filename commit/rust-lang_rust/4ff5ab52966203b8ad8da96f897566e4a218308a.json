{"sha": "4ff5ab52966203b8ad8da96f897566e4a218308a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZjVhYjUyOTY2MjAzYjhhZDhkYTk2Zjg5NzU2NmU0YTIxODMwOGE=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-06T12:03:50Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-19T13:52:09Z"}, "message": "Rename `rterr` to `rtprintpanic`", "tree": {"sha": "345645ca61e919b7a9b74c543a497efeedcaab54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/345645ca61e919b7a9b74c543a497efeedcaab54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ff5ab52966203b8ad8da96f897566e4a218308a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff5ab52966203b8ad8da96f897566e4a218308a", "html_url": "https://github.com/rust-lang/rust/commit/4ff5ab52966203b8ad8da96f897566e4a218308a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ff5ab52966203b8ad8da96f897566e4a218308a/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6145051eeebeba030cef3aa01a99683b84ff24fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6145051eeebeba030cef3aa01a99683b84ff24fc", "html_url": "https://github.com/rust-lang/rust/commit/6145051eeebeba030cef3aa01a99683b84ff24fc"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "8ee55234cea430e788fb8b03dbe5b6ab477a587e", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=4ff5ab52966203b8ad8da96f897566e4a218308a", "patch": "@@ -315,7 +315,7 @@ pub fn take_alloc_error_hook() -> fn(Layout) {\n }\n \n fn default_alloc_error_hook(layout: Layout) {\n-    rterr!(\"memory allocation of {} bytes failed\\n\", layout.size());\n+    rtprintpanic!(\"memory allocation of {} bytes failed\\n\", layout.size());\n }\n \n #[cfg(not(test))]"}, {"sha": "02957e75a7409f8aa1955927aa6e177203e1342c", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=4ff5ab52966203b8ad8da96f897566e4a218308a", "patch": "@@ -596,15 +596,12 @@ fn rust_panic_with_hook(\n         if panics > 2 {\n             // Don't try to print the message in this case\n             // - perhaps that is causing the recursive panics.\n-            rterr!(\"thread panicked while processing panic. aborting.\\n\");\n+            rtprintpanic!(\"thread panicked while processing panic. aborting.\\n\");\n         } else {\n             // Unfortunately, this does not print a backtrace, because creating\n             // a `Backtrace` will allocate, which we must to avoid here.\n             let panicinfo = PanicInfo::internal_constructor(message, location);\n-            rterr!(\n-                \"{}\\npanicked after panic::always_abort(), aborting.\\n\",\n-                panicinfo\n-            );\n+            rtprintpanic!(\"{}\\npanicked after panic::always_abort(), aborting.\\n\", panicinfo);\n         }\n         intrinsics::abort()\n     }\n@@ -637,7 +634,7 @@ fn rust_panic_with_hook(\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the thread cleanly.\n-        rterr!(\"thread panicked while panicking. aborting.\\n\");\n+        rtprintpanic!(\"thread panicked while panicking. aborting.\\n\");\n         intrinsics::abort()\n     }\n "}, {"sha": "81f47a779d33b46e94f4c92b172c07560bb552f3", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=4ff5ab52966203b8ad8da96f897566e4a218308a", "patch": "@@ -102,7 +102,7 @@ mod imp {\n         // If the faulting address is within the guard page, then we print a\n         // message saying so and abort.\n         if guard.start <= addr && addr < guard.end {\n-            rterr!(\n+            rtprintpanic!(\n                 \"\\nthread '{}' has overflowed its stack\\n\",\n                 thread::current().name().unwrap_or(\"<unknown>\")\n             );"}, {"sha": "755dc0a6c8b47045a5ce45149d0f1762a454a3bc", "filename": "library/std/src/sys/windows/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=4ff5ab52966203b8ad8da96f897566e4a218308a", "patch": "@@ -24,7 +24,7 @@ extern \"system\" fn vectored_handler(ExceptionInfo: *mut c::EXCEPTION_POINTERS) -\n         let code = rec.ExceptionCode;\n \n         if code == c::EXCEPTION_STACK_OVERFLOW {\n-            rterr!(\n+            rtprintpanic!(\n                 \"\\nthread '{}' has overflowed its stack\\n\",\n                 thread::current().name().unwrap_or(\"<unknown>\")\n             );"}, {"sha": "02013ecc4ced6b8769f3a4f7c8b6b1c2ecfaf8b7", "filename": "library/std/src/sys_common/rt.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff5ab52966203b8ad8da96f897566e4a218308a/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs?ref=4ff5ab52966203b8ad8da96f897566e4a218308a", "patch": "@@ -39,7 +39,11 @@ pub fn cleanup() {\n     });\n }\n \n-macro_rules! rterr {\n+// Prints to the \"panic output\", depending on the platform this may be:\n+// - the standard error output\n+// - some dedicated platform specific output\n+// - nothing (so this macro is a no-op)\n+macro_rules! rtprintpanic {\n     ($($t:tt)*) => {\n         if let Some(mut out) = crate::sys::stdio::panic_output() {\n             let _ = crate::io::Write::write_fmt(&mut out, format_args!($($t)*));\n@@ -50,7 +54,7 @@ macro_rules! rterr {\n macro_rules! rtabort {\n     ($($t:tt)*) => {\n         {\n-            rterr!(\"fatal runtime error: {}\\n\", format_args!($($t)*));\n+            rtprintpanic!(\"fatal runtime error: {}\\n\", format_args!($($t)*));\n             crate::sys::abort_internal();\n         }\n     }"}]}