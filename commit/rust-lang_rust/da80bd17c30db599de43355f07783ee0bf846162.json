{"sha": "da80bd17c30db599de43355f07783ee0bf846162", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODBiZDE3YzMwZGI1OTlkZTQzMzU1ZjA3NzgzZWUwYmY4NDYxNjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-26T01:36:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-26T01:37:03Z"}, "message": "rustc: Introduce a lang_items pass, part of coherence and operator overloading.\n\nThis will also help us remove kinds.", "tree": {"sha": "5b1e19d93a4c37f3f599768ae048c7f44819cf9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b1e19d93a4c37f3f599768ae048c7f44819cf9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da80bd17c30db599de43355f07783ee0bf846162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da80bd17c30db599de43355f07783ee0bf846162", "html_url": "https://github.com/rust-lang/rust/commit/da80bd17c30db599de43355f07783ee0bf846162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da80bd17c30db599de43355f07783ee0bf846162/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d4bd463c29e4224f0ac41652d75ffac8080683", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d4bd463c29e4224f0ac41652d75ffac8080683", "html_url": "https://github.com/rust-lang/rust/commit/e1d4bd463c29e4224f0ac41652d75ffac8080683"}], "stats": {"total": 242, "additions": 242, "deletions": 0}, "files": [{"sha": "11e305e22e8b01119fac94925f6b7269be5720d0", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da80bd17c30db599de43355f07783ee0bf846162/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/da80bd17c30db599de43355f07783ee0bf846162/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=da80bd17c30db599de43355f07783ee0bf846162", "patch": "@@ -161,6 +161,7 @@ mod tuple;\n \n // Ubiquitous-utility-type modules\n \n+mod ops;\n mod cmp;\n mod num;\n mod hash;"}, {"sha": "fdf5352418887599e4595e6fff5b9a0da96c2d79", "filename": "src/libcore/core.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da80bd17c30db599de43355f07783ee0bf846162/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80bd17c30db599de43355f07783ee0bf846162/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=da80bd17c30db599de43355f07783ee0bf846162", "patch": "@@ -30,6 +30,8 @@ import float::num;\n import f32::num;\n import f64::num;\n import num::num;\n+import ops::{const, copy, send, owned};\n+import ops::{add, sub, mul, div, modulo, neg, bitops, index};\n \n export path, option, some, none, unreachable;\n export extensions;\n@@ -42,6 +44,9 @@ export immutable_copyable_vector, iter_trait_extensions, vec_concat;\n export base_iter, copyable_iter, extended_iter;\n export tuple_ops, extended_tuple_ops;\n export ptr;\n+// The following exports are the core operators and kinds\n+export const, copy, send, owned;\n+export add, sub, mul, div, modulo, neg, bitops, index;\n \n // Export the log levels as global constants. Higher levels mean\n // more-verbosity. Error is the bottom level, default logging level is"}, {"sha": "a6734b285a1909ac6785e75e43f0ee04e4797c36", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=da80bd17c30db599de43355f07783ee0bf846162", "patch": "@@ -170,6 +170,9 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                              session::sess_os_to_meta_os(sess.targ_cfg.os),\n                              sess.opts.static));\n \n+    time(time_passes, ~\"language item collection\", ||\n+         middle::lang_items::collect_language_items(crate, sess));\n+\n     let { def_map: def_map,\n           exp_map: exp_map,\n           impl_map: impl_map,"}, {"sha": "0ba76c49246a65f8cb5daf6f0407c21aecefa327", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=da80bd17c30db599de43355f07783ee0bf846162", "patch": "@@ -25,6 +25,7 @@ export get_enum_variants;\n export get_impls_for_mod;\n export get_trait_methods;\n export get_method_names_if_trait;\n+export get_item_attrs;\n export each_path;\n export get_type;\n export get_impl_traits;\n@@ -149,6 +150,14 @@ fn get_method_names_if_trait(cstore: cstore::cstore, def: ast::def_id)\n     ret decoder::get_method_names_if_trait(cdata, def.node);\n }\n \n+fn get_item_attrs(cstore: cstore::cstore,\n+                  def_id: ast::def_id,\n+                  f: fn(~[@ast::meta_item])) {\n+\n+    let cdata = cstore::get_crate_data(cstore, def_id.crate);\n+    decoder::get_item_attrs(cdata, def_id.node, f)\n+}\n+\n fn get_class_fields(tcx: ty::ctxt, def: ast::def_id) -> ~[ty::field_ty] {\n     let cstore = tcx.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);"}, {"sha": "a5261d039c199a7ee42344c8a06b23b7e4523a1c", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=da80bd17c30db599de43355f07783ee0bf846162", "patch": "@@ -39,6 +39,7 @@ export get_crate_vers;\n export get_impls_for_mod;\n export get_trait_methods;\n export get_method_names_if_trait;\n+export get_item_attrs;\n export get_crate_module_paths;\n export def_like;\n export dl_def;\n@@ -659,6 +660,18 @@ fn get_method_names_if_trait(cdata: cmd, node_id: ast::node_id)\n     ret some(resulting_method_names);\n }\n \n+fn get_item_attrs(cdata: cmd,\n+                  node_id: ast::node_id,\n+                  f: fn(~[@ast::meta_item])) {\n+\n+    let item = lookup_item(node_id, cdata.data);\n+    do ebml::tagged_docs(item, tag_attributes) |attributes| {\n+        do ebml::tagged_docs(attributes, tag_attribute) |attribute| {\n+            f(get_meta_items(attribute));\n+        }\n+    }\n+}\n+\n // Helper function that gets either fields or methods\n fn get_class_members(cdata: cmd, id: ast::node_id,\n                      p: fn(char) -> bool) -> ~[ty::field_ty] {"}, {"sha": "b4818959344b384dbf840e5e434c829f5c404fdd", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=da80bd17c30db599de43355f07783ee0bf846162", "patch": "@@ -759,6 +759,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_name(ebml_w, item.ident);\n+        encode_attributes(ebml_w, item.attrs);\n         let mut i = 0u;\n         for vec::each(*ty::trait_methods(tcx, local_def(item.id))) |mty| {\n             alt ms[i] {"}, {"sha": "2353da51f98170d96e5ebf56da3455d708e2041d", "filename": "src/rustc/middle/lang_items.rs", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=da80bd17c30db599de43355f07783ee0bf846162", "patch": "@@ -0,0 +1,209 @@\n+// Detecting language items.\n+//\n+// Language items are items that represent concepts intrinsic to the language\n+// itself. Examples are:\n+//\n+// * Traits that specify \"kinds\"; e.g. \"const\", \"copy\", \"send\".\n+//\n+// * Traits that represent operators; e.g. \"add\", \"sub\", \"index\".\n+//\n+// * Functions called by the compiler itself.\n+\n+import driver::session::session;\n+import metadata::csearch::{each_path, get_item_attrs};\n+import metadata::cstore::{iter_crate_data};\n+import metadata::decoder::{dl_def, dl_field, dl_impl};\n+import syntax::ast::{crate, def_id, def_ty, lit_str, meta_item, meta_list};\n+import syntax::ast::{meta_name_value, meta_word};\n+import syntax::ast_util::{local_def};\n+import syntax::visit::{default_simple_visitor, mk_simple_visitor};\n+import syntax::visit::{visit_crate, visit_item};\n+\n+import std::map::{hashmap, str_hash};\n+import str_eq = str::eq;\n+\n+class LanguageItems {\n+    let mut const_trait: option<def_id>;\n+    let mut copy_trait: option<def_id>;\n+    let mut send_trait: option<def_id>;\n+    let mut owned_trait: option<def_id>;\n+\n+    let mut add_trait: option<def_id>;\n+    let mut sub_trait: option<def_id>;\n+    let mut mul_trait: option<def_id>;\n+    let mut div_trait: option<def_id>;\n+    let mut modulo_trait: option<def_id>;\n+    let mut neg_trait: option<def_id>;\n+    let mut bitops_trait: option<def_id>;\n+    let mut index_trait: option<def_id>;\n+\n+    new() {\n+        self.const_trait = none;\n+        self.copy_trait = none;\n+        self.send_trait = none;\n+        self.owned_trait = none;\n+\n+        self.add_trait = none;\n+        self.sub_trait = none;\n+        self.mul_trait = none;\n+        self.div_trait = none;\n+        self.modulo_trait = none;\n+        self.neg_trait = none;\n+        self.bitops_trait = none;\n+        self.index_trait = none;\n+    }\n+}\n+\n+class LanguageItemCollector {\n+    let items: LanguageItems;\n+\n+    let crate: @crate;\n+    let session: session;\n+\n+    let item_refs: hashmap<~str,&mut option<def_id>>;\n+\n+    new(crate: @crate, session: session) {\n+        self.crate = crate;\n+        self.session = session;\n+\n+        self.items = LanguageItems();\n+\n+        self.item_refs = str_hash();\n+    }\n+\n+    // XXX: Needed to work around an issue with constructors.\n+    fn init() {\n+        self.item_refs.insert(~\"const\", &mut self.items.const_trait);\n+        self.item_refs.insert(~\"copy\", &mut self.items.copy_trait);\n+        self.item_refs.insert(~\"send\", &mut self.items.send_trait);\n+        self.item_refs.insert(~\"owned\", &mut self.items.owned_trait);\n+\n+        self.item_refs.insert(~\"add\", &mut self.items.add_trait);\n+        self.item_refs.insert(~\"sub\", &mut self.items.sub_trait);\n+        self.item_refs.insert(~\"mul\", &mut self.items.mul_trait);\n+        self.item_refs.insert(~\"div\", &mut self.items.div_trait);\n+        self.item_refs.insert(~\"modulo\", &mut self.items.modulo_trait);\n+        self.item_refs.insert(~\"neg\", &mut self.items.neg_trait);\n+        self.item_refs.insert(~\"bitops\", &mut self.items.bitops_trait);\n+        self.item_refs.insert(~\"index\", &mut self.items.index_trait);\n+    }\n+\n+    fn match_and_collect_meta_item(item_def_id: def_id,\n+                                   meta_item: meta_item) {\n+\n+        alt meta_item.node {\n+            meta_name_value(key, literal) => {\n+                alt literal.node {\n+                    lit_str(value) => {\n+                        self.match_and_collect_item(item_def_id,\n+                                                    *key,\n+                                                    *value);\n+                    }\n+                    _ => {\n+                        // Skip.\n+                    }\n+                }\n+            }\n+            meta_word(*) | meta_list(*) {\n+                // Skip.\n+            }\n+        }\n+    }\n+\n+    fn match_and_collect_item(item_def_id: def_id, key: ~str, value: ~str) {\n+        if !str_eq(key, ~\"lang\") {\n+            ret;    // Didn't match.\n+        }\n+\n+        alt self.item_refs.find(value) {\n+            none => {\n+                // Didn't match.\n+            }\n+            some(item_ref) => {\n+                // Check for duplicates.\n+                alt copy *item_ref {\n+                    some(original_def_id)\n+                            if original_def_id != item_def_id => {\n+\n+                        self.session.warn(#fmt(\"duplicate entry for `%s`\",\n+                                               value));\n+                    }\n+                    some(_) | none => {\n+                        // OK.\n+                    }\n+                }\n+\n+                // Matched.\n+                *item_ref = some(item_def_id);\n+            }\n+        }\n+    }\n+\n+    fn collect_local_language_items() {\n+        let this = unsafe { ptr::addr_of(self) };\n+        visit_crate(*self.crate, (), mk_simple_visitor(@{\n+            visit_item: |item| {\n+                for item.attrs.each |attribute| {\n+                    unsafe {\n+                        (*this).match_and_collect_meta_item(local_def(item\n+                                                                      .id),\n+                                                            attribute.node\n+                                                                     .value);\n+                    }\n+                }\n+            }\n+            with *default_simple_visitor()\n+        }));\n+    }\n+\n+    fn collect_external_language_items() {\n+        let crate_store = self.session.cstore;\n+        do iter_crate_data(crate_store) |crate_number, _crate_metadata| {\n+            for each_path(crate_store, crate_number) |path_entry| {\n+                let def_id;\n+                alt path_entry.def_like {\n+                    dl_def(def_ty(did)) => {\n+                        def_id = did;\n+                    }\n+                    dl_def(_) | dl_impl(_) | dl_field {\n+                        // Skip this.\n+                        again;\n+                    }\n+                }\n+\n+                do get_item_attrs(crate_store, def_id) |meta_items| {\n+                    for meta_items.each |meta_item| {\n+                        self.match_and_collect_meta_item(def_id, *meta_item);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    fn check_completeness() {\n+        for self.item_refs.each |key, item_ref| {\n+            alt copy *item_ref {\n+                none => {\n+                    self.session.warn(#fmt(\"no item found for `%s`\", key));\n+                }\n+                some(did) => {\n+                    // OK.\n+                }\n+            }\n+        }\n+    }\n+\n+    fn collect() {\n+        self.init();\n+        self.collect_local_language_items();\n+        self.collect_external_language_items();\n+        self.check_completeness();\n+    }\n+}\n+\n+fn collect_language_items(crate: @crate, session: session) -> LanguageItems {\n+    let collector = LanguageItemCollector(crate, session);\n+    collector.collect();\n+    copy collector.items\n+}\n+"}, {"sha": "b2cce508e57f9dc9b2e438da2f3e944376ddb200", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/da80bd17c30db599de43355f07783ee0bf846162/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=da80bd17c30db599de43355f07783ee0bf846162", "patch": "@@ -88,6 +88,7 @@ mod middle {\n     mod region;\n     mod const_eval;\n     mod astencode;\n+    mod lang_items;\n }\n \n mod front {"}]}