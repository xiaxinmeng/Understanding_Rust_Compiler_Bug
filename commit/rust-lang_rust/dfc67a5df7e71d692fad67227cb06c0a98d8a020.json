{"sha": "dfc67a5df7e71d692fad67227cb06c0a98d8a020", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYzY3YTVkZjdlNzFkNjkyZmFkNjcyMjdjYjA2YzBhOThkOGEwMjA=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-26T05:53:28Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-26T05:53:28Z"}, "message": "Cargo clippy", "tree": {"sha": "e95eef316c23441709ab0087e7260515d5166279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e95eef316c23441709ab0087e7260515d5166279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfc67a5df7e71d692fad67227cb06c0a98d8a020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc67a5df7e71d692fad67227cb06c0a98d8a020", "html_url": "https://github.com/rust-lang/rust/commit/dfc67a5df7e71d692fad67227cb06c0a98d8a020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfc67a5df7e71d692fad67227cb06c0a98d8a020/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f925c581fe0c477d2591dba680db6ccb19036859", "url": "https://api.github.com/repos/rust-lang/rust/commits/f925c581fe0c477d2591dba680db6ccb19036859", "html_url": "https://github.com/rust-lang/rust/commit/f925c581fe0c477d2591dba680db6ccb19036859"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "31b6f25bf0869484fb12a63ecd187e4f25170e83", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc67a5df7e71d692fad67227cb06c0a98d8a020/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc67a5df7e71d692fad67227cb06c0a98d8a020/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=dfc67a5df7e71d692fad67227cb06c0a98d8a020", "patch": "@@ -328,7 +328,7 @@ fn rewrite_comment_inner(\n         while let Some(line) = iter.next() {\n             result.push_str(line);\n             result.push_str(match iter.peek() {\n-                Some(ref next_line) if next_line.is_empty() => comment_line_separator.trim_right(),\n+                Some(next_line) if next_line.is_empty() => comment_line_separator.trim_right(),\n                 Some(..) => &comment_line_separator,\n                 None => \"\",\n             });"}, {"sha": "1dd122133746970167d0011be5dfd9adeec8deac", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc67a5df7e71d692fad67227cb06c0a98d8a020/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc67a5df7e71d692fad67227cb06c0a98d8a020/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dfc67a5df7e71d692fad67227cb06c0a98d8a020", "patch": "@@ -165,7 +165,7 @@ impl FormatReport {\n         self.file_error_map\n             .iter()\n             .map(|(_, errors)| errors.len())\n-            .fold(0, |acc, x| acc + x)\n+            .sum()\n     }\n \n     pub fn has_warnings(&self) -> bool {"}, {"sha": "b0080695449c7fb0c8b2751698cf28800fac3afa", "filename": "src/macros.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dfc67a5df7e71d692fad67227cb06c0a98d8a020/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc67a5df7e71d692fad67227cb06c0a98d8a020/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=dfc67a5df7e71d692fad67227cb06c0a98d8a020", "patch": "@@ -351,7 +351,7 @@ pub fn rewrite_macro_def(\n \n     // Undo our replacement of macro variables.\n     // FIXME: this could be *much* more efficient.\n-    for (old, new) in substs.iter() {\n+    for (old, new) in &substs {\n         if old_body.find(new).is_some() {\n             debug!(\n                 \"rewrite_macro_def: bailing matching variable: `{}` in `{}`\",\n@@ -368,7 +368,7 @@ pub fn rewrite_macro_def(\n         ident,\n         args_str,\n         new_body,\n-        indent.to_string(&context.config),\n+        indent.to_string(context.config),\n     );\n \n     Some(result)\n@@ -467,13 +467,10 @@ fn format_macro_args(toks: ThinTokenStream) -> Option<String> {\n                 insert_space = next_space(&t);\n             }\n             TokenTree::Delimited(_, d) => {\n-                let formatted = format_macro_args(d.tts)?;\n-                match insert_space {\n-                    SpaceState::Always => {\n-                        result.push(' ');\n-                    }\n-                    _ => {}\n+                if let SpaceState::Always = insert_space {\n+                    result.push(' ');\n                 }\n+                let formatted = format_macro_args(d.tts)?;\n                 match d.delim {\n                     DelimToken::Paren => {\n                         result.push_str(&format!(\"({})\", formatted));\n@@ -713,7 +710,7 @@ impl MacroParser {\n     fn parse_branch(&mut self) -> Option<MacroBranch> {\n         let (args_paren_kind, args) = match self.toks.next()? {\n             TokenTree::Token(..) => return None,\n-            TokenTree::Delimited(_, ref d) => (d.delim, d.tts.clone().into()),\n+            TokenTree::Delimited(_, ref d) => (d.delim, d.tts.clone()),\n         };\n         match self.toks.next()? {\n             TokenTree::Token(_, Token::FatArrow) => {}"}, {"sha": "06bfa1418d14ea5976a5051ca5dc3b6e073df5cf", "filename": "tests/system.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dfc67a5df7e71d692fad67227cb06c0a98d8a020/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc67a5df7e71d692fad67227cb06c0a98d8a020/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=dfc67a5df7e71d692fad67227cb06c0a98d8a020", "patch": "@@ -95,7 +95,7 @@ fn verify_config_test_names() {\n                 let config_name = path.file_name().unwrap().to_str().unwrap();\n \n                 // Make sure that config name is used in the files in the directory.\n-                verify_config_used(&path, &config_name);\n+                verify_config_used(&path, config_name);\n             }\n         }\n     }\n@@ -105,7 +105,7 @@ fn verify_config_test_names() {\n // println!) that is used by `rustfmt::rustfmt_diff::print_diff`. Writing\n // using only one or the other will cause the output order to differ when\n // `print_diff` selects the approach not used.\n-fn write_message(msg: String) {\n+fn write_message(msg: &str) {\n     let mut writer = OutputWriter::new(Color::Auto);\n     writer.writeln(&format!(\"{}\", msg), None);\n }\n@@ -359,8 +359,8 @@ pub enum IdempotentCheckError {\n }\n \n pub fn idempotent_check(filename: &PathBuf) -> Result<FormatReport, IdempotentCheckError> {\n-    let sig_comments = read_significant_comments(&filename);\n-    let config = read_config(&filename);\n+    let sig_comments = read_significant_comments(filename);\n+    let config = read_config(filename);\n     let (error_summary, file_map, format_report) = format_file(filename, &config);\n     if error_summary.has_parsing_errors() {\n         return Err(IdempotentCheckError::Parse);\n@@ -660,15 +660,15 @@ impl ConfigCodeBlock {\n         assert!(self.code_block.is_some() && self.code_block_start.is_some());\n \n         if self.config_name.is_none() {\n-            write_message(format!(\n+            write_message(&format!(\n                 \"No configuration name for {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n                 self.code_block_start.unwrap()\n             ));\n             return false;\n         }\n         if self.config_value.is_none() {\n-            write_message(format!(\n+            write_message(&format!(\n                 \"No configuration value for {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n                 self.code_block_start.unwrap()\n@@ -680,7 +680,7 @@ impl ConfigCodeBlock {\n \n     fn has_parsing_errors(&self, error_summary: Summary) -> bool {\n         if error_summary.has_parsing_errors() {\n-            write_message(format!(\n+            write_message(&format!(\n                 \"\\u{261d}\\u{1f3fd} Cannot format {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n                 self.code_block_start.unwrap()\n@@ -703,7 +703,7 @@ impl ConfigCodeBlock {\n         });\n     }\n \n-    fn formatted_has_diff(&self, file_map: FileMap) -> bool {\n+    fn formatted_has_diff(&self, file_map: &FileMap) -> bool {\n         let &(ref _file_name, ref text) = file_map.first().unwrap();\n         let compare = make_diff(self.code_block.as_ref().unwrap(), text, DIFF_CONTEXT_SIZE);\n         if !compare.is_empty() {\n@@ -729,7 +729,7 @@ impl ConfigCodeBlock {\n         let (error_summary, file_map, _report) =\n             format_input::<io::Stdout>(input, &config, None).unwrap();\n \n-        !self.has_parsing_errors(error_summary) && !self.formatted_has_diff(file_map)\n+        !self.has_parsing_errors(error_summary) && !self.formatted_has_diff(&file_map)\n     }\n \n     // Extract a code block from the iterator. Behavior:\n@@ -746,7 +746,7 @@ impl ConfigCodeBlock {\n         prev: Option<&ConfigCodeBlock>,\n     ) -> Option<ConfigCodeBlock> {\n         let mut code_block = ConfigCodeBlock::new();\n-        code_block.config_name = prev.map_or(None, |cb| cb.config_name.clone());\n+        code_block.config_name = prev.and_then(|cb| cb.config_name.clone());\n \n         loop {\n             match ConfigurationSection::get_section(file) {"}]}