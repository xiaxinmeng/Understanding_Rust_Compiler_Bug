{"sha": "257bff3192e2c7313a4f8cfcac8839a573b42f6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1N2JmZjMxOTJlMmM3MzEzYTRmOGNmY2FjODgzOWE1NzNiNDJmNmI=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-22T17:19:00Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-22T18:07:11Z"}, "message": "Move cold panic functions in Option and Result\n\nMove functions out of their impl blocks; avoids unnecessary\nmonomorphization by type parameters that are irrelevant to the message\noutput.", "tree": {"sha": "6abe3be36f1a4c268b37d388636a426d072acd26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6abe3be36f1a4c268b37d388636a426d072acd26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/257bff3192e2c7313a4f8cfcac8839a573b42f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/257bff3192e2c7313a4f8cfcac8839a573b42f6b", "html_url": "https://github.com/rust-lang/rust/commit/257bff3192e2c7313a4f8cfcac8839a573b42f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/257bff3192e2c7313a4f8cfcac8839a573b42f6b/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30be6a666d3918b3a149ff2c2c3242c9b1912655", "url": "https://api.github.com/repos/rust-lang/rust/commits/30be6a666d3918b3a149ff2c2c3242c9b1912655", "html_url": "https://github.com/rust-lang/rust/commit/30be6a666d3918b3a149ff2c2c3242c9b1912655"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "eeb0c173b9b7b8238f872abdc042402b572f9a74", "filename": "src/libcore/option.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/257bff3192e2c7313a4f8cfcac8839a573b42f6b/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257bff3192e2c7313a4f8cfcac8839a573b42f6b/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=257bff3192e2c7313a4f8cfcac8839a573b42f6b", "patch": "@@ -295,16 +295,10 @@ impl<T> Option<T> {\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Some(val) => val,\n-            None => Self::expect_failed(msg),\n+            None => expect_failed(msg),\n         }\n     }\n \n-    #[inline(never)]\n-    #[cold]\n-    fn expect_failed(msg: &str) -> ! {\n-        panic!(\"{}\", msg)\n-    }\n-\n     /// Moves the value `v` out of the `Option<T>` if it is `Some(v)`.\n     ///\n     /// # Panics\n@@ -703,6 +697,14 @@ impl<T: Default> Option<T> {\n     }\n }\n \n+// This is a separate function to reduce the code size of .expect() itself.\n+#[inline(never)]\n+#[cold]\n+fn expect_failed(msg: &str) -> ! {\n+    panic!(\"{}\", msg)\n+}\n+\n+\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "9bd6ed12798a5efc58703e91519ce5696e5c26f5", "filename": "src/libcore/result.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/257bff3192e2c7313a4f8cfcac8839a573b42f6b/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257bff3192e2c7313a4f8cfcac8839a573b42f6b/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=257bff3192e2c7313a4f8cfcac8839a573b42f6b", "patch": "@@ -684,16 +684,10 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn unwrap(self) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => Self::unwrap_failed(e),\n+            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", e),\n         }\n     }\n \n-    #[inline(never)]\n-    #[cold]\n-    fn unwrap_failed(error: E) -> ! {\n-        panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\", error)\n-    }\n-\n     /// Unwraps a result, yielding the content of an `Ok`.\n     ///\n     /// # Panics\n@@ -711,15 +705,9 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => Self::expect_failed(msg, e),\n+            Err(e) => unwrap_failed(msg, e),\n         }\n     }\n-\n-    #[inline(never)]\n-    #[cold]\n-    fn expect_failed(msg: &str, error: E) -> ! {\n-        panic!(\"{}: {:?}\", msg, error)\n-    }\n }\n \n impl<T: fmt::Debug, E> Result<T, E> {\n@@ -745,17 +733,17 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_err(self) -> E {\n         match self {\n-            Ok(t) => Self::unwrap_err_failed(t),\n+            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", t),\n             Err(e) => e,\n         }\n     }\n+}\n \n-    #[inline(never)]\n-    #[cold]\n-    fn unwrap_err_failed(t: T) -> ! {\n-        panic!(\"called `Result::unwrap_err()` on an `Ok` value: {:?}\", t)\n-    }\n-\n+// This is a separate function to reduce the code size of the methods\n+#[inline(never)]\n+#[cold]\n+fn unwrap_failed<E: fmt::Debug>(msg: &str, error: E) -> ! {\n+    panic!(\"{}: {:?}\", msg, error)\n }\n \n /////////////////////////////////////////////////////////////////////////////"}]}