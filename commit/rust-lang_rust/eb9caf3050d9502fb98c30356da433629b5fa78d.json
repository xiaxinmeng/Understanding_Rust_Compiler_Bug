{"sha": "eb9caf3050d9502fb98c30356da433629b5fa78d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOWNhZjMwNTBkOTUwMmZiOThjMzAzNTZkYTQzMzYyOWI1ZmE3OGQ=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-13T06:28:06Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-13T06:28:06Z"}, "message": "literal representation restructure 11\n\nRename `grouping_hint` to `format` and use the term consistently.", "tree": {"sha": "8b4a8176e78ff4a2271fb65197f2d100c5d9a659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b4a8176e78ff4a2271fb65197f2d100c5d9a659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb9caf3050d9502fb98c30356da433629b5fa78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9caf3050d9502fb98c30356da433629b5fa78d", "html_url": "https://github.com/rust-lang/rust/commit/eb9caf3050d9502fb98c30356da433629b5fa78d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb9caf3050d9502fb98c30356da433629b5fa78d/comments", "author": null, "committer": null, "parents": [{"sha": "a8ca8a21c1337edc460698baea56526f8e817f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ca8a21c1337edc460698baea56526f8e817f06", "html_url": "https://github.com/rust-lang/rust/commit/a8ca8a21c1337edc460698baea56526f8e817f06"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "3ff9679b1f65ea134d4141af5a8e7cac7d7ca506", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb9caf3050d9502fb98c30356da433629b5fa78d/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9caf3050d9502fb98c30356da433629b5fa78d/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=eb9caf3050d9502fb98c30356da433629b5fa78d", "patch": "@@ -87,7 +87,7 @@ impl ExcessivePrecision {\n                 None\n             } else {\n                 let num_lit = super::literal_representation::NumericLiteral::new(&s, None, true);\n-                Some(num_lit.grouping_hint())\n+                Some(num_lit.format())\n             }\n         } else {\n             None"}, {"sha": "f261e5bfde17f55bd562d7592edd3deb574373ae", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb9caf3050d9502fb98c30356da433629b5fa78d/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9caf3050d9502fb98c30356da433629b5fa78d/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=eb9caf3050d9502fb98c30356da433629b5fa78d", "patch": "@@ -219,7 +219,7 @@ impl<'a> NumericLiteral<'a> {\n     }\n \n     /// Returns literal formatted in a sensible way.\n-    crate fn grouping_hint(&self) -> String {\n+    crate fn format(&self) -> String {\n         let mut output = String::new();\n \n         if let Some(prefix) = self.prefix {\n@@ -324,15 +324,15 @@ enum WarningType {\n }\n \n impl WarningType {\n-    crate fn display(&self, grouping_hint: &str, cx: &EarlyContext<'_>, span: syntax_pos::Span) {\n+    crate fn display(&self, suggested_format: String, cx: &EarlyContext<'_>, span: syntax_pos::Span) {\n         match self {\n             Self::MistypedLiteralSuffix => span_lint_and_sugg(\n                 cx,\n                 MISTYPED_LITERAL_SUFFIXES,\n                 span,\n                 \"mistyped literal suffix\",\n                 \"did you mean to write\",\n-                grouping_hint.to_string(),\n+                suggested_format,\n                 Applicability::MaybeIncorrect,\n             ),\n             Self::UnreadableLiteral => span_lint_and_sugg(\n@@ -341,7 +341,7 @@ impl WarningType {\n                 span,\n                 \"long literal lacking separators\",\n                 \"consider\",\n-                grouping_hint.to_owned(),\n+                suggested_format,\n                 Applicability::MachineApplicable,\n             ),\n             Self::LargeDigitGroups => span_lint_and_sugg(\n@@ -350,7 +350,7 @@ impl WarningType {\n                 span,\n                 \"digit groups should be smaller\",\n                 \"consider\",\n-                grouping_hint.to_owned(),\n+                suggested_format,\n                 Applicability::MachineApplicable,\n             ),\n             Self::InconsistentDigitGrouping => span_lint_and_sugg(\n@@ -359,7 +359,7 @@ impl WarningType {\n                 span,\n                 \"digits grouped inconsistently by underscores\",\n                 \"consider\",\n-                grouping_hint.to_owned(),\n+                suggested_format,\n                 Applicability::MachineApplicable,\n             ),\n             Self::DecimalRepresentation => span_lint_and_sugg(\n@@ -368,7 +368,7 @@ impl WarningType {\n                 span,\n                 \"integer literal has a better hexadecimal representation\",\n                 \"consider\",\n-                grouping_hint.to_owned(),\n+                suggested_format,\n                 Applicability::MachineApplicable,\n             ),\n         };\n@@ -425,7 +425,7 @@ impl LiteralDigitGrouping {\n \n \n                 if let Err(warning_type) = result {\n-                    warning_type.display(&num_lit.grouping_hint(), cx, lit.span)\n+                    warning_type.display(num_lit.format(), cx, lit.span)\n                 }\n             }\n         }\n@@ -453,11 +453,11 @@ impl LiteralDigitGrouping {\n         let last_group = split.next().expect(\"At least one group\");\n         if split.next().is_some() && mistyped_suffixes.contains(&last_group) {\n             *part = &part[..part.len() - last_group.len()];\n-            let mut hint = num_lit.grouping_hint();\n-            hint.push('_');\n-            hint.push(missing_char);\n-            hint.push_str(last_group);\n-            WarningType::MistypedLiteralSuffix.display(&hint, cx, span);\n+            let mut sugg = num_lit.format();\n+            sugg.push('_');\n+            sugg.push(missing_char);\n+            sugg.push_str(last_group);\n+            WarningType::MistypedLiteralSuffix.display(sugg, cx, span);\n             false\n         } else {\n             true\n@@ -546,7 +546,7 @@ impl DecimalLiteralRepresentation {\n                 let hex = format!(\"{:#X}\", val);\n                 let num_lit = NumericLiteral::new(&hex, None, false);\n                 let _ = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n-                    warning_type.display(&num_lit.grouping_hint(), cx, lit.span)\n+                    warning_type.display(num_lit.format(), cx, lit.span)\n                 });\n             }\n         }"}]}