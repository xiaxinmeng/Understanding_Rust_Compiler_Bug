{"sha": "d24a3a4b016331438ec3c611e37c11cfe41fa4af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNGEzYTRiMDE2MzMxNDM4ZWMzYzYxMWUzN2MxMWNmZTQxZmE0YWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-20T08:16:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-20T08:16:06Z"}, "message": "core::rt: Use generated port numbers in tests", "tree": {"sha": "607133e003f653da05d9e3d657eee29e2ead92f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/607133e003f653da05d9e3d657eee29e2ead92f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d24a3a4b016331438ec3c611e37c11cfe41fa4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d24a3a4b016331438ec3c611e37c11cfe41fa4af", "html_url": "https://github.com/rust-lang/rust/commit/d24a3a4b016331438ec3c611e37c11cfe41fa4af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d24a3a4b016331438ec3c611e37c11cfe41fa4af/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744ba627f34ebf76b5a784085645780066d8d92a", "url": "https://api.github.com/repos/rust-lang/rust/commits/744ba627f34ebf76b5a784085645780066d8d92a", "html_url": "https://github.com/rust-lang/rust/commit/744ba627f34ebf76b5a784085645780066d8d92a"}], "stats": {"total": 73, "additions": 24, "deletions": 49}, "files": [{"sha": "c2ad7d37d42ad25d45aa3a5874372c0c73fb0298", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d24a3a4b016331438ec3c611e37c11cfe41fa4af/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d24a3a4b016331438ec3c611e37c11cfe41fa4af/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=d24a3a4b016331438ec3c611e37c11cfe41fa4af", "patch": "@@ -27,3 +27,13 @@ pub fn run_in_newsched_task(f: ~fn()) {\n         sched.run();\n     }\n }\n+\n+/// Get a port number, starting at 9600, for use in tests\n+pub fn next_test_port() -> u16 {\n+    unsafe {\n+        return rust_dbg_next_port() as u16;\n+    }\n+    extern {\n+        fn rust_dbg_next_port() -> ::libc::uintptr_t;\n+    }\n+}"}, {"sha": "54823d4dbcf618d97c90343998637549184585e3", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d24a3a4b016331438ec3c611e37c11cfe41fa4af/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d24a3a4b016331438ec3c611e37c11cfe41fa4af/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=d24a3a4b016331438ec3c611e37c11cfe41fa4af", "patch": "@@ -19,12 +19,10 @@ use super::{Loop, Watcher, Request, UvError, Buf, Callback, NativeHandle, NullCa\n             vec_to_uv_buf, vec_from_uv_buf};\n use super::super::io::net::ip::{IpAddr, Ipv4, Ipv6};\n \n-#[cfg(test)]\n-use unstable::run_in_bare_thread;\n-#[cfg(test)]\n-use super::super::thread::Thread;\n-#[cfg(test)]\n-use cell::Cell;\n+#[cfg(test)] use cell::Cell;\n+#[cfg(test)] use unstable::run_in_bare_thread;\n+#[cfg(test)] use super::super::thread::Thread;\n+#[cfg(test)] use super::super::test::next_test_port;\n \n fn ip4_as_uv_ip4(addr: IpAddr, f: &fn(*sockaddr_in)) {\n     match addr {\n@@ -361,7 +359,7 @@ fn connect_close() {\n         let mut loop_ = Loop::new();\n         let mut tcp_watcher = { TcpWatcher::new(&mut loop_) };\n         // Connect to a port where nobody is listening\n-        let addr = Ipv4(127, 0, 0, 1, 2923);\n+        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n         do tcp_watcher.connect(addr) |stream_watcher, status| {\n             rtdebug!(\"tcp_watcher.connect!\");\n             assert!(status.is_some());\n@@ -373,47 +371,13 @@ fn connect_close() {\n     }\n }\n \n-#[test]\n-#[ignore(reason = \"need a server to connect to\")]\n-fn connect_read() {\n-    do run_in_bare_thread() {\n-        let mut loop_ = Loop::new();\n-        let mut tcp_watcher = { TcpWatcher::new(&mut loop_) };\n-        let addr = Ipv4(127, 0, 0, 1, 2924);\n-        do tcp_watcher.connect(addr) |stream_watcher, status| {\n-            let mut stream_watcher = stream_watcher;\n-            rtdebug!(\"tcp_watcher.connect!\");\n-            assert!(status.is_none());\n-            let alloc: AllocCallback = |size| {\n-                vec_to_uv_buf(vec::from_elem(size, 0))\n-            };\n-            do stream_watcher.read_start(alloc)\n-                |stream_watcher, nread, buf, status| {\n-\n-                let buf = vec_from_uv_buf(buf);\n-                rtdebug!(\"read cb!\");\n-                if status.is_none() {\n-                    let bytes = buf.unwrap();\n-                    rtdebug!(\"%s\", bytes.slice(0, nread as uint).to_str());\n-                } else {\n-                    rtdebug!(\"status after read: %s\", status.get().to_str());\n-                    rtdebug!(\"closing\");\n-                    stream_watcher.close(||());\n-                }\n-            }\n-        }\n-        loop_.run();\n-        loop_.close();\n-    }\n-}\n-\n #[test]\n fn listen() {\n     do run_in_bare_thread() {\n         static MAX: int = 10;\n         let mut loop_ = Loop::new();\n         let mut server_tcp_watcher = { TcpWatcher::new(&mut loop_) };\n-        let addr = Ipv4(127, 0, 0, 1, 2925);\n+        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n         server_tcp_watcher.bind(addr);\n         let loop_ = loop_;\n         rtdebug!(\"listening\");"}, {"sha": "a9aa0333b16310f4b53d134b8c2d7135a09ee955", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d24a3a4b016331438ec3c611e37c11cfe41fa4af/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d24a3a4b016331438ec3c611e37c11cfe41fa4af/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=d24a3a4b016331438ec3c611e37c11cfe41fa4af", "patch": "@@ -19,9 +19,10 @@ use cell::{Cell, empty_cell};\n use cast::transmute;\n use super::sched::{Scheduler, local_sched};\n \n-#[cfg(test)] use super::sched::Task;\n-#[cfg(test)] use unstable::run_in_bare_thread;\n #[cfg(test)] use uint;\n+#[cfg(test)] use unstable::run_in_bare_thread;\n+#[cfg(test)] use super::sched::Task;\n+#[cfg(test)] use super::test::next_test_port;\n \n pub struct UvEventLoop {\n     uvio: UvIoFactory\n@@ -340,7 +341,7 @@ fn test_simple_io_no_connect() {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~do Task::new(&mut sched.stack_pool) {\n             let io = unsafe { local_sched::unsafe_borrow_io() };\n-            let addr = Ipv4(127, 0, 0, 1, 2926);\n+            let addr = Ipv4(127, 0, 0, 1, next_test_port());\n             let maybe_chan = io.connect(addr);\n             assert!(maybe_chan.is_none());\n         };\n@@ -354,7 +355,7 @@ fn test_simple_io_no_connect() {\n fn test_simple_tcp_server_and_client() {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n-        let addr = Ipv4(127, 0, 0, 1, 2929);\n+        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n             unsafe {\n@@ -393,7 +394,7 @@ fn test_simple_tcp_server_and_client() {\n fn test_read_and_block() {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n-        let addr = Ipv4(127, 0, 0, 1, 2930);\n+        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n             let io = unsafe { local_sched::unsafe_borrow_io() };\n@@ -454,7 +455,7 @@ fn test_read_and_block() {\n fn test_read_read_read() {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n-        let addr = Ipv4(127, 0, 0, 1, 2931);\n+        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n             let io = unsafe { local_sched::unsafe_borrow_io() };"}, {"sha": "d82c39d6838ec7f866757d96e24a2034697a34f4", "filename": "src/rt/rust_test_helpers.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d24a3a4b016331438ec3c611e37c11cfe41fa4af/src%2Frt%2Frust_test_helpers.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d24a3a4b016331438ec3c611e37c11cfe41fa4af/src%2Frt%2Frust_test_helpers.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.cpp?ref=d24a3a4b016331438ec3c611e37c11cfe41fa4af", "patch": "@@ -170,7 +170,7 @@ rust_dbg_extern_identity_TwoDoubles(TwoDoubles u) {\n extern \"C\" CDECL uintptr_t\n rust_dbg_next_port() {\n   static lock_and_signal dbg_port_lock;\n-  static uintptr_t next_port = 9000;\n+  static uintptr_t next_port = 9600;\n   scoped_lock with(dbg_port_lock);\n   uintptr_t this_port = next_port;\n   next_port += 1;"}]}