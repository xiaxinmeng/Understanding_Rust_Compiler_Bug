{"sha": "fceb16911ee412e84f5c0f424fca4ad93b4df4b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZWIxNjkxMWVlNDEyZTg0ZjVjMGY0MjRmY2E0YWQ5M2I0ZGY0YjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-13T17:12:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-13T17:12:36Z"}, "message": "Rollup merge of #58386 - Zoxc:fix-54242, r=michaelwoerister\n\nFix #54242\n\nr? @michaelwoerister", "tree": {"sha": "3bf608b9a3b597becf2240d021fe333da5db76a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bf608b9a3b597becf2240d021fe333da5db76a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fceb16911ee412e84f5c0f424fca4ad93b4df4b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZFAECRBK7hj4Ov3rIwAAdHIIAAuD8rNuYm+0JPEBRRy8a8o4\nfn45hmmjH3mI/rYDRtpWVRd3LW9YdRiPj3QtnX6ZM+NGhF+ul2GOH9Jm6fkJM6jN\nptcEojMnMVw1WN1ziQfHx8NuJF48sk5dFrFjBDf+9tBPUnq6Kw1+VpCy/Rf6wReh\nbnlTcBVhY2VbhmLNj9A/PLcT7LIXa7M/oE7qgdjDJXlgu+6ru2KQpoDkZ7qN5/Qs\n/VDBaL+Vc9jos5ZQHEtb+veCnWokwjcdoI4p42UrR5va8Un1JvnQlt24tUEApGLQ\nHytxrKl+bXne50GjF4beVKXJwv4o6c1+X62JOrcAcCf5JjDcM5NatHr6YHoWAmk=\n=FPvC\n-----END PGP SIGNATURE-----\n", "payload": "tree 3bf608b9a3b597becf2240d021fe333da5db76a7\nparent 8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6\nparent ddb6c4f8999f12edc2853e02082987234c11fbc5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550077956 +0100\ncommitter GitHub <noreply@github.com> 1550077956 +0100\n\nRollup merge of #58386 - Zoxc:fix-54242, r=michaelwoerister\n\nFix #54242\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fceb16911ee412e84f5c0f424fca4ad93b4df4b0", "html_url": "https://github.com/rust-lang/rust/commit/fceb16911ee412e84f5c0f424fca4ad93b4df4b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fceb16911ee412e84f5c0f424fca4ad93b4df4b0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "html_url": "https://github.com/rust-lang/rust/commit/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6"}, {"sha": "ddb6c4f8999f12edc2853e02082987234c11fbc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb6c4f8999f12edc2853e02082987234c11fbc5", "html_url": "https://github.com/rust-lang/rust/commit/ddb6c4f8999f12edc2853e02082987234c11fbc5"}], "stats": {"total": 131, "additions": 73, "deletions": 58}, "files": [{"sha": "233aff9de243fda3e600d2f30dd52d8a7d1049a4", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 56, "deletions": 58, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/fceb16911ee412e84f5c0f424fca4ad93b4df4b0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fceb16911ee412e84f5c0f424fca4ad93b4df4b0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=fceb16911ee412e84f5c0f424fca4ad93b4df4b0", "patch": "@@ -188,40 +188,6 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n \n         job.signal_complete();\n     }\n-\n-    /// Executes a job by changing the ImplicitCtxt to point to the\n-    /// new query job while it executes. It returns the diagnostics\n-    /// captured during execution and the actual result.\n-    #[inline(always)]\n-    pub(super) fn start<'lcx, F, R>(\n-        &self,\n-        tcx: TyCtxt<'_, 'tcx, 'lcx>,\n-        diagnostics: Option<&Lock<ThinVec<Diagnostic>>>,\n-        compute: F)\n-    -> R\n-    where\n-        F: for<'b> FnOnce(TyCtxt<'b, 'tcx, 'lcx>) -> R\n-    {\n-        // The TyCtxt stored in TLS has the same global interner lifetime\n-        // as `tcx`, so we use `with_related_context` to relate the 'gcx lifetimes\n-        // when accessing the ImplicitCtxt\n-        tls::with_related_context(tcx, move |current_icx| {\n-            // Update the ImplicitCtxt to point to our new query job\n-            let new_icx = tls::ImplicitCtxt {\n-                tcx: tcx.global_tcx(),\n-                query: Some(self.job.clone()),\n-                diagnostics,\n-                layout_depth: current_icx.layout_depth,\n-                task_deps: current_icx.task_deps,\n-            };\n-\n-            // Use the ImplicitCtxt while we execute the query\n-            tls::enter_context(&new_icx, |_| {\n-                compute(tcx)\n-            })\n-        })\n-    }\n-\n }\n \n #[inline(always)]\n@@ -265,6 +231,39 @@ pub(super) enum TryGetJob<'a, 'tcx: 'a, D: QueryDescription<'tcx> + 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n+    /// Executes a job by changing the ImplicitCtxt to point to the\n+    /// new query job while it executes. It returns the diagnostics\n+    /// captured during execution and the actual result.\n+    #[inline(always)]\n+    pub(super) fn start_query<F, R>(\n+        self,\n+        job: Lrc<QueryJob<'gcx>>,\n+        diagnostics: Option<&Lock<ThinVec<Diagnostic>>>,\n+        compute: F)\n+    -> R\n+    where\n+        F: for<'b, 'lcx> FnOnce(TyCtxt<'b, 'gcx, 'lcx>) -> R\n+    {\n+        // The TyCtxt stored in TLS has the same global interner lifetime\n+        // as `self`, so we use `with_related_context` to relate the 'gcx lifetimes\n+        // when accessing the ImplicitCtxt\n+        tls::with_related_context(self, move |current_icx| {\n+            // Update the ImplicitCtxt to point to our new query job\n+            let new_icx = tls::ImplicitCtxt {\n+                tcx: self.global_tcx(),\n+                query: Some(job),\n+                diagnostics,\n+                layout_depth: current_icx.layout_depth,\n+                task_deps: current_icx.task_deps,\n+            };\n+\n+            // Use the ImplicitCtxt while we execute the query\n+            tls::enter_context(&new_icx, |_| {\n+                compute(self.global_tcx())\n+            })\n+        })\n+    }\n+\n     #[inline(never)]\n     #[cold]\n     pub(super) fn report_cycle(\n@@ -378,7 +377,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.sess.profiler(|p| p.start_query(Q::NAME, Q::CATEGORY));\n \n             let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n-                job.start(self, diagnostics, |tcx| {\n+                self.start_query(job.job.clone(), diagnostics, |tcx| {\n                     tcx.dep_graph.with_anon_task(dep_node.kind, || {\n                         Q::compute(tcx.global_tcx(), key)\n                     })\n@@ -401,16 +400,23 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         if !dep_node.kind.is_input() {\n-            if let Some((prev_dep_node_index,\n-                         dep_node_index)) = self.dep_graph.try_mark_green_and_read(self,\n-                                                                                   &dep_node) {\n-                return Ok(self.load_from_disk_and_cache_in_memory::<Q>(\n-                    key,\n-                    job,\n-                    prev_dep_node_index,\n-                    dep_node_index,\n-                    &dep_node\n-                ))\n+            // The diagnostics for this query will be\n+            // promoted to the current session during\n+            // try_mark_green(), so we can ignore them here.\n+            let loaded = self.start_query(job.job.clone(), None, |tcx| {\n+                let marked = tcx.dep_graph.try_mark_green_and_read(tcx, &dep_node);\n+                marked.map(|(prev_dep_node_index, dep_node_index)| {\n+                    (tcx.load_from_disk_and_cache_in_memory::<Q>(\n+                        key.clone(),\n+                        prev_dep_node_index,\n+                        dep_node_index,\n+                        &dep_node\n+                    ), dep_node_index)\n+                })\n+            });\n+            if let Some((result, dep_node_index)) = loaded {\n+                job.complete(&result, dep_node_index);\n+                return Ok(result);\n             }\n         }\n \n@@ -422,7 +428,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     fn load_from_disk_and_cache_in_memory<Q: QueryDescription<'gcx>>(\n         self,\n         key: Q::Key,\n-        job: JobOwner<'a, 'gcx, Q>,\n         prev_dep_node_index: SerializedDepNodeIndex,\n         dep_node_index: DepNodeIndex,\n         dep_node: &DepNode\n@@ -461,15 +466,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             self.sess.profiler(|p| p.start_query(Q::NAME, Q::CATEGORY));\n \n-            // The diagnostics for this query have already been\n-            // promoted to the current session during\n-            // try_mark_green(), so we can ignore them here.\n-            let result = job.start(self, None, |tcx| {\n-                // The dep-graph for this computation is already in\n-                // place\n-                tcx.dep_graph.with_ignore(|| {\n-                    Q::compute(tcx, key)\n-                })\n+            // The dep-graph for this computation is already in\n+            // place\n+            let result = self.dep_graph.with_ignore(|| {\n+                Q::compute(self, key)\n             });\n \n             self.sess.profiler(|p| p.end_query(Q::NAME, Q::CATEGORY));\n@@ -486,8 +486,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.dep_graph.mark_loaded_from_cache(dep_node_index, true);\n         }\n \n-        job.complete(&result, dep_node_index);\n-\n         result\n     }\n \n@@ -540,7 +538,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.sess.profiler(|p| p.start_query(Q::NAME, Q::CATEGORY));\n \n         let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n-            job.start(self, diagnostics, |tcx| {\n+            self.start_query(job.job.clone(), diagnostics, |tcx| {\n                 if dep_node.kind.is_eval_always() {\n                     tcx.dep_graph.with_eval_always_task(dep_node,\n                                                         tcx,"}, {"sha": "1c700d44dd80b7be19a54f8032a2e6c8677becfa", "filename": "src/test/incremental/issue-54242.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fceb16911ee412e84f5c0f424fca4ad93b4df4b0/src%2Ftest%2Fincremental%2Fissue-54242.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fceb16911ee412e84f5c0f424fca4ad93b4df4b0/src%2Ftest%2Fincremental%2Fissue-54242.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-54242.rs?ref=fceb16911ee412e84f5c0f424fca4ad93b4df4b0", "patch": "@@ -0,0 +1,17 @@\n+// revisions: rpass cfail\n+\n+trait Tr {\n+    type Arr;\n+\n+    const C: usize = 0;\n+}\n+\n+impl Tr for str {\n+    #[cfg(rpass)]\n+    type Arr = [u8; 8];\n+    #[cfg(cfail)]\n+    type Arr = [u8; Self::C];\n+    //[cfail]~^ ERROR cycle detected when const-evaluating\n+}\n+\n+fn main() {}"}]}