{"sha": "ec65b3b3aa96bbf9cd44580c938c80034f066f0d", "node_id": "C_kwDOAAsO6NoAKGVjNjViM2IzYWE5NmJiZjljZDQ0NTgwYzkzOGM4MDAzNGYwNjZmMGQ", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-01-16T20:15:12Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-01-16T20:15:12Z"}, "message": "fix tests", "tree": {"sha": "054dd5aec140cb744b6023a30f519b0a9e2b43d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/054dd5aec140cb744b6023a30f519b0a9e2b43d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec65b3b3aa96bbf9cd44580c938c80034f066f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec65b3b3aa96bbf9cd44580c938c80034f066f0d", "html_url": "https://github.com/rust-lang/rust/commit/ec65b3b3aa96bbf9cd44580c938c80034f066f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec65b3b3aa96bbf9cd44580c938c80034f066f0d/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77efa0267dcae86235d8688d8b886d13e2b99c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/77efa0267dcae86235d8688d8b886d13e2b99c0b", "html_url": "https://github.com/rust-lang/rust/commit/77efa0267dcae86235d8688d8b886d13e2b99c0b"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "b267700a431858d5f9d3477ad5f1e0e3cdc09ca5", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec65b3b3aa96bbf9cd44580c938c80034f066f0d/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec65b3b3aa96bbf9cd44580c938c80034f066f0d/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=ec65b3b3aa96bbf9cd44580c938c80034f066f0d", "patch": "@@ -110,6 +110,7 @@ impl ChangeFixture {\n         let mut crates = FxHashMap::default();\n         let mut crate_deps = Vec::new();\n         let mut default_crate_root: Option<FileId> = None;\n+        let mut default_target_data_layout: Option<String> = None;\n         let mut default_cfg = CfgOptions::default();\n \n         let mut file_set = FileSet::default();\n@@ -175,6 +176,7 @@ impl ChangeFixture {\n                 assert!(default_crate_root.is_none());\n                 default_crate_root = Some(file_id);\n                 default_cfg = meta.cfg;\n+                default_target_data_layout = meta.target_data_layout;\n             }\n \n             change.change_file(file_id, Some(Arc::new(text)));\n@@ -198,7 +200,7 @@ impl ChangeFixture {\n                 Ok(Vec::new()),\n                 false,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n-                None,\n+                default_target_data_layout.map(|x| x.into()),\n             );\n         } else {\n             for (from, to, prelude) in crate_deps {"}, {"sha": "f90ca86f9b6c455d61f6281da732ac4f6b8f9c7d", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec65b3b3aa96bbf9cd44580c938c80034f066f0d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec65b3b3aa96bbf9cd44580c938c80034f066f0d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=ec65b3b3aa96bbf9cd44580c938c80034f066f0d", "patch": "@@ -527,6 +527,7 @@ fn hover_field_offset() {\n     // Hovering over the field when instantiating\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n struct Foo { fiel$0d_a: u8, field_b: i32, field_c: i16 }\n \"#,\n         expect![[r#\"\n@@ -548,6 +549,7 @@ fn hover_shows_struct_field_info() {\n     // Hovering over the field when instantiating\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n struct Foo { field_a: u32 }\n \n fn main() {\n@@ -570,6 +572,7 @@ fn main() {\n     // Hovering over the field in the definition\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n struct Foo { field_a$0: u32 }\n \n fn main() {\n@@ -1515,6 +1518,8 @@ fn my() {}\n fn test_hover_struct_doc_comment() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n+\n /// This is an example\n /// multiline doc\n ///\n@@ -1573,7 +1578,7 @@ fn foo() { let bar = Ba$0r; }\n             ```\n \n             ```rust\n-            struct Bar // size = 0, align = 1\n+            struct Bar\n             ```\n \n             ---\n@@ -1602,7 +1607,7 @@ fn foo() { let bar = Ba$0r; }\n             ```\n \n             ```rust\n-            struct Bar // size = 0, align = 1\n+            struct Bar\n             ```\n \n             ---\n@@ -1630,7 +1635,7 @@ pub struct B$0ar\n             ```\n \n             ```rust\n-            pub struct Bar // size = 0, align = 1\n+            pub struct Bar\n             ```\n \n             ---\n@@ -1657,7 +1662,7 @@ pub struct B$0ar\n             ```\n \n             ```rust\n-            pub struct Bar // size = 0, align = 1\n+            pub struct Bar\n             ```\n \n             ---\n@@ -2959,6 +2964,8 @@ fn main() { let foo_test = name_with_dashes::wrapper::Thing::new$0(); }\n fn hover_field_pat_shorthand_ref_match_ergonomics() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n+\n struct S {\n     f: i32,\n }\n@@ -4398,6 +4405,7 @@ fn main() {\n fn hover_intra_doc_links() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n \n pub mod theitem {\n     /// This is the item. Cool!\n@@ -4539,7 +4547,7 @@ trait A where\n fn string_shadowed_with_inner_items() {\n     check(\n         r#\"\n-//- /main.rs crate:main deps:alloc\n+//- /main.rs crate:main deps:alloc target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n \n /// Custom `String` type.\n struct String;\n@@ -5234,7 +5242,7 @@ foo_macro!(\n             ```\n \n             ```rust\n-            pub struct Foo // size = 0, align = 1\n+            pub struct Foo\n             ```\n \n             ---\n@@ -5248,6 +5256,8 @@ foo_macro!(\n fn hover_intra_in_attr() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n+\n #[doc = \"Doc comment for [`Foo$0`]\"]\n pub struct Foo(i32);\n \"#,\n@@ -5368,6 +5378,8 @@ enum Enum {\n fn hover_record_variant_field() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n+\n enum Enum {\n     RecordV { field$0: u32 }\n }"}]}