{"sha": "8789b37d06e74aef732b5bba1b88a9f4fefdee18", "node_id": "C_kwDOAAsO6NoAKDg3ODliMzdkMDZlNzRhZWY3MzJiNWJiYTFiODhhOWY0ZmVmZGVlMTg", "commit": {"author": {"name": "Michael Krasnitski", "email": "michael.krasnitski@gmail.com", "date": "2023-02-11T17:22:25Z"}, "committer": {"name": "Michael Krasnitski", "email": "michael.krasnitski@gmail.com", "date": "2023-02-11T17:22:25Z"}, "message": "Fix false positives for `extra_unused_type_parameters`", "tree": {"sha": "b1f9e77a7bb450116067537812142827b80919f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1f9e77a7bb450116067537812142827b80919f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8789b37d06e74aef732b5bba1b88a9f4fefdee18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8789b37d06e74aef732b5bba1b88a9f4fefdee18", "html_url": "https://github.com/rust-lang/rust/commit/8789b37d06e74aef732b5bba1b88a9f4fefdee18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8789b37d06e74aef732b5bba1b88a9f4fefdee18/comments", "author": {"login": "mkrasnitski", "id": 42564254, "node_id": "MDQ6VXNlcjQyNTY0MjU0", "avatar_url": "https://avatars.githubusercontent.com/u/42564254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkrasnitski", "html_url": "https://github.com/mkrasnitski", "followers_url": "https://api.github.com/users/mkrasnitski/followers", "following_url": "https://api.github.com/users/mkrasnitski/following{/other_user}", "gists_url": "https://api.github.com/users/mkrasnitski/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkrasnitski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkrasnitski/subscriptions", "organizations_url": "https://api.github.com/users/mkrasnitski/orgs", "repos_url": "https://api.github.com/users/mkrasnitski/repos", "events_url": "https://api.github.com/users/mkrasnitski/events{/privacy}", "received_events_url": "https://api.github.com/users/mkrasnitski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mkrasnitski", "id": 42564254, "node_id": "MDQ6VXNlcjQyNTY0MjU0", "avatar_url": "https://avatars.githubusercontent.com/u/42564254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkrasnitski", "html_url": "https://github.com/mkrasnitski", "followers_url": "https://api.github.com/users/mkrasnitski/followers", "following_url": "https://api.github.com/users/mkrasnitski/following{/other_user}", "gists_url": "https://api.github.com/users/mkrasnitski/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkrasnitski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkrasnitski/subscriptions", "organizations_url": "https://api.github.com/users/mkrasnitski/orgs", "repos_url": "https://api.github.com/users/mkrasnitski/repos", "events_url": "https://api.github.com/users/mkrasnitski/events{/privacy}", "received_events_url": "https://api.github.com/users/mkrasnitski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7558148c22e53cd4608773b56cdfa50dcdeac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7558148c22e53cd4608773b56cdfa50dcdeac3", "html_url": "https://github.com/rust-lang/rust/commit/0f7558148c22e53cd4608773b56cdfa50dcdeac3"}], "stats": {"total": 87, "additions": 61, "deletions": 26}, "files": [{"sha": "9e9ad80b3342f98407fa637d221816e3d8d53b8a", "filename": "clippy_lints/src/extra_unused_type_parameters.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8789b37d06e74aef732b5bba1b88a9f4fefdee18/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8789b37d06e74aef732b5bba1b88a9f4fefdee18/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs?ref=8789b37d06e74aef732b5bba1b88a9f4fefdee18", "patch": "@@ -4,10 +4,12 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::MultiSpan;\n use rustc_hir::intravisit::{walk_impl_item, walk_item, walk_param_bound, walk_ty, Visitor};\n use rustc_hir::{\n-    GenericParamKind, Generics, ImplItem, ImplItemKind, Item, ItemKind, PredicateOrigin, Ty, TyKind, WherePredicate,\n+    BodyId, ExprKind, GenericParamKind, Generics, ImplItem, ImplItemKind, Item, ItemKind, PredicateOrigin, Ty, TyKind,\n+    WherePredicate,\n };\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{def_id::DefId, Span};\n \n@@ -55,10 +57,13 @@ struct TypeWalker<'cx, 'tcx> {\n     /// Otherwise, if any type parameters end up being used, or if any lifetime or const-generic\n     /// parameters are present, this will be set to `false`.\n     all_params_unused: bool,\n+    /// Whether or not the function has an empty body, in which case any bounded type parameters\n+    /// will not be linted.\n+    fn_body_empty: bool,\n }\n \n impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n-    fn new(cx: &'cx LateContext<'tcx>, generics: &'tcx Generics<'tcx>) -> Self {\n+    fn new(cx: &'cx LateContext<'tcx>, generics: &'tcx Generics<'tcx>, body_id: BodyId) -> Self {\n         let mut all_params_unused = true;\n         let ty_params = generics\n             .params\n@@ -74,12 +79,18 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n                 }\n             })\n             .collect();\n+\n+        let body = cx.tcx.hir().body(body_id).value;\n+        let fn_body_empty =\n+            matches!(&body.kind, ExprKind::Block(block, None) if block.stmts.is_empty() && block.expr.is_none());\n+\n         Self {\n             cx,\n             ty_params,\n             bounds: FxHashMap::default(),\n             generics,\n             all_params_unused,\n+            fn_body_empty,\n         }\n     }\n \n@@ -96,7 +107,7 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n             ),\n         };\n \n-        let source_map = self.cx.tcx.sess.source_map();\n+        let source_map = self.cx.sess().source_map();\n         let span = if self.all_params_unused {\n             self.generics.span.into() // Remove the entire list of generics\n         } else {\n@@ -139,12 +150,17 @@ impl<'cx, 'tcx> Visitor<'tcx> for TypeWalker<'cx, 'tcx> {\n \n     fn visit_where_predicate(&mut self, predicate: &'tcx WherePredicate<'tcx>) {\n         if let WherePredicate::BoundPredicate(predicate) = predicate {\n-            // Collect spans for bounds that appear in the list of generics (not in a where-clause)\n-            // for use in forming the help message\n-            if let Some((def_id, _)) = predicate.bounded_ty.peel_refs().as_generic_param()\n-                && let PredicateOrigin::GenericParam = predicate.origin\n-            {\n-                self.bounds.insert(def_id, predicate.span);\n+            // Collect spans for any bounds on type parameters. We only keep bounds that appear in\n+            // the list of generics (not in a where-clause).\n+            //\n+            // Also, if the function body is empty, we don't lint the corresponding type parameters\n+            // (See https://github.com/rust-lang/rust-clippy/issues/10319).\n+            if let Some((def_id, _)) = predicate.bounded_ty.peel_refs().as_generic_param() {\n+                if self.fn_body_empty {\n+                    self.ty_params.remove(&def_id);\n+                } else if let PredicateOrigin::GenericParam = predicate.origin {\n+                    self.bounds.insert(def_id, predicate.span);\n+                }\n             }\n             // Only walk the right-hand side of where-bounds\n             for bound in predicate.bounds {\n@@ -160,17 +176,22 @@ impl<'cx, 'tcx> Visitor<'tcx> for TypeWalker<'cx, 'tcx> {\n \n impl<'tcx> LateLintPass<'tcx> for ExtraUnusedTypeParameters {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if let ItemKind::Fn(_, generics, _) = item.kind {\n-            let mut walker = TypeWalker::new(cx, generics);\n+        if let ItemKind::Fn(_, generics, body_id) = item.kind\n+            && !in_external_macro(cx.sess(), item.span)\n+        {\n+            let mut walker = TypeWalker::new(cx, generics, body_id);\n             walk_item(&mut walker, item);\n             walker.emit_lint();\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'tcx>) {\n         // Only lint on inherent methods, not trait methods.\n-        if let ImplItemKind::Fn(..) = item.kind && trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n-            let mut walker = TypeWalker::new(cx, item.generics);\n+        if let ImplItemKind::Fn(.., body_id) = item.kind\n+            && trait_ref_of_method(cx, item.owner_id.def_id).is_none()\n+            && !in_external_macro(cx.sess(), item.span)\n+        {\n+            let mut walker = TypeWalker::new(cx, item.generics, body_id);\n             walk_impl_item(&mut walker, item);\n             walker.emit_lint();\n         }"}, {"sha": "a1cd8a0d0851871ce255ffbf18b0a0e7df1fe466", "filename": "tests/ui/extra_unused_type_parameters.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8789b37d06e74aef732b5bba1b88a9f4fefdee18/tests%2Fui%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8789b37d06e74aef732b5bba1b88a9f4fefdee18/tests%2Fui%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.rs?ref=8789b37d06e74aef732b5bba1b88a9f4fefdee18", "patch": "@@ -15,15 +15,20 @@ fn used_ret<T: Default>(x: u8) -> T {\n     T::default()\n }\n \n-fn unused_bounded<T: Default, U>(x: U) {}\n+fn unused_bounded<T: Default, U>(x: U) {\n+    unimplemented!();\n+}\n \n fn unused_where_clause<T, U>(x: U)\n where\n     T: Default,\n {\n+    unimplemented!();\n }\n \n-fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {}\n+fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {\n+    unimplemented!();\n+}\n \n fn used_opaque<A>(iter: impl Iterator<Item = A>) -> usize {\n     iter.count()\n@@ -66,4 +71,14 @@ where\n         .filter_map(move |(i, a)| if i == index { None } else { Some(a) })\n }\n \n+mod issue10319 {\n+    fn assert_send<T: Send>() {}\n+\n+    fn assert_send_where<T>()\n+    where\n+        T: Send,\n+    {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "69a067bd8490fdcb96966e8a420d7613ef43de20", "filename": "tests/ui/extra_unused_type_parameters.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8789b37d06e74aef732b5bba1b88a9f4fefdee18/tests%2Fui%2Fextra_unused_type_parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8789b37d06e74aef732b5bba1b88a9f4fefdee18/tests%2Fui%2Fextra_unused_type_parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.stderr?ref=8789b37d06e74aef732b5bba1b88a9f4fefdee18", "patch": "@@ -26,29 +26,29 @@ LL | fn unused_with_lt<'a, T>(x: &'a u8) {}\n error: type parameter goes unused in function definition\n   --> $DIR/extra_unused_type_parameters.rs:18:19\n    |\n-LL | fn unused_bounded<T: Default, U>(x: U) {}\n+LL | fn unused_bounded<T: Default, U>(x: U) {\n    |                   ^^^^^^^^^^^\n    |\n    = help: consider removing the parameter\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:20:24\n+  --> $DIR/extra_unused_type_parameters.rs:22:24\n    |\n LL | fn unused_where_clause<T, U>(x: U)\n    |                        ^^\n    |\n    = help: consider removing the parameter\n \n error: type parameters go unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:26:16\n+  --> $DIR/extra_unused_type_parameters.rs:29:16\n    |\n-LL | fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {}\n+LL | fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {\n    |                ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^\n    |\n    = help: consider removing the parameters\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:49:22\n+  --> $DIR/extra_unused_type_parameters.rs:54:22\n    |\n LL |     fn unused_ty_impl<T>(&self) {}\n    |                      ^^^"}, {"sha": "2eca1f4701c9fdaeccb0da0160b67bea538f4da1", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8789b37d06e74aef732b5bba1b88a9f4fefdee18/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8789b37d06e74aef732b5bba1b88a9f4fefdee18/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=8789b37d06e74aef732b5bba1b88a9f4fefdee18", "patch": "@@ -1,5 +1,4 @@\n #![deny(clippy::type_repetition_in_bounds)]\n-#![allow(clippy::extra_unused_type_parameters)]\n \n use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n "}, {"sha": "70d700c1cc46068d48ac1e45ad7d9e58b225c589", "filename": "tests/ui/type_repetition_in_bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8789b37d06e74aef732b5bba1b88a9f4fefdee18/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8789b37d06e74aef732b5bba1b88a9f4fefdee18/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=8789b37d06e74aef732b5bba1b88a9f4fefdee18", "patch": "@@ -1,5 +1,5 @@\n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:9:5\n+  --> $DIR/type_repetition_in_bounds.rs:8:5\n    |\n LL |     T: Clone,\n    |     ^^^^^^^^\n@@ -12,23 +12,23 @@ LL | #![deny(clippy::type_repetition_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:26:5\n+  --> $DIR/type_repetition_in_bounds.rs:25:5\n    |\n LL |     Self: Copy + Default + Ord,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider combining the bounds: `Self: Clone + Copy + Default + Ord`\n \n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:86:5\n+  --> $DIR/type_repetition_in_bounds.rs:85:5\n    |\n LL |     T: Clone,\n    |     ^^^^^^^^\n    |\n    = help: consider combining the bounds: `T: ?Sized + Clone`\n \n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:91:5\n+  --> $DIR/type_repetition_in_bounds.rs:90:5\n    |\n LL |     T: ?Sized,\n    |     ^^^^^^^^^"}]}