{"sha": "3d234770b1c83840d18305e8625da38e97da3174", "node_id": "C_kwDOAAsO6NoAKDNkMjM0NzcwYjFjODM4NDBkMTgzMDVlODYyNWRhMzhlOTdkYTMxNzQ", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-02-19T23:48:10Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-02-22T22:17:13Z"}, "message": "Improve diagnostic of the unexpected_cfgs lint", "tree": {"sha": "91202ca3bcf52afafdf2ac7bd4086a9fc38524bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91202ca3bcf52afafdf2ac7bd4086a9fc38524bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d234770b1c83840d18305e8625da38e97da3174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d234770b1c83840d18305e8625da38e97da3174", "html_url": "https://github.com/rust-lang/rust/commit/3d234770b1c83840d18305e8625da38e97da3174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d234770b1c83840d18305e8625da38e97da3174/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe1c153ecc88651a147517a6c1aea3da6aca8fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe1c153ecc88651a147517a6c1aea3da6aca8fc", "html_url": "https://github.com/rust-lang/rust/commit/fbe1c153ecc88651a147517a6c1aea3da6aca8fc"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "503e172b6873ff1017ba0bfd637ee99e64c28b43", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d234770b1c83840d18305e8625da38e97da3174/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d234770b1c83840d18305e8625da38e97da3174/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=3d234770b1c83840d18305e8625da38e97da3174", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::{struct_span_err, Applicability};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n use rustc_session::lint::builtin::UNEXPECTED_CFGS;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Session;\n use rustc_span::hygiene::Transparency;\n@@ -465,23 +466,33 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                 let value = cfg.value_str();\n                 if let Some(names_valid) = &sess.check_config.names_valid {\n                     if !names_valid.contains(&name) {\n-                        sess.buffer_lint(\n+                        sess.buffer_lint_with_diagnostic(\n                             UNEXPECTED_CFGS,\n                             cfg.span,\n                             CRATE_NODE_ID,\n                             \"unexpected `cfg` condition name\",\n+                            BuiltinLintDiagnostics::UnexpectedCfg(\n+                                cfg.ident().unwrap().span,\n+                                name,\n+                                None,\n+                            ),\n                         );\n                     }\n                 }\n                 if let Some(val) = value {\n                     if let Some(values_valid) = &sess.check_config.values_valid {\n                         if let Some(values) = values_valid.get(&name) {\n                             if !values.contains(&val) {\n-                                sess.buffer_lint(\n+                                sess.buffer_lint_with_diagnostic(\n                                     UNEXPECTED_CFGS,\n                                     cfg.span,\n                                     CRATE_NODE_ID,\n                                     \"unexpected `cfg` condition value\",\n+                                    BuiltinLintDiagnostics::UnexpectedCfg(\n+                                        cfg.name_value_literal_span().unwrap(),\n+                                        name,\n+                                        Some(val),\n+                                    ),\n                                 );\n                             }\n                         }"}, {"sha": "72a3f5d5fc9b8ed3ca25acaa02b749d8dc5bf140", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3d234770b1c83840d18305e8625da38e97da3174/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d234770b1c83840d18305e8625da38e97da3174/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=3d234770b1c83840d18305e8625da38e97da3174", "patch": "@@ -766,7 +766,39 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::NamedAsmLabel(help) => {\n                     db.help(&help);\n                     db.note(\"see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\");\n-                }\n+                },\n+                BuiltinLintDiagnostics::UnexpectedCfg(span, name, value) => {\n+                    let mut possibilities: Vec<Symbol> = if value.is_some() {\n+                        let Some(values_valid) = &sess.parse_sess.check_config.values_valid else {\n+                            bug!(\"it shouldn't be possible to have a diagnostic on a value if values checking is not enable\");\n+                        };\n+                        let Some(values) = values_valid.get(&name) else {\n+                            bug!(\"it shouldn't be possible to have a diagnostic on a value whose name is not in values\");\n+                        };\n+                        values.iter().map(|&s| s).collect()\n+                    } else {\n+                        let Some(names_valid) = &sess.parse_sess.check_config.names_valid else {\n+                            bug!(\"it shouldn't be possible to have a diagnostic on a value if values checking is not enable\");\n+                        };\n+                        names_valid.iter().map(|s| *s).collect()\n+                    };\n+\n+                    // Show the full list if all possible values for a given name, but don't do it\n+                    // for names as the possibilities could be very long\n+                    if value.is_some() {\n+                        // Sorting can take some time, so we only do it if required\n+                        possibilities.sort();\n+\n+                        let possibilities = possibilities.iter().map(Symbol::as_str).intersperse(\", \").collect::<String>();\n+                        db.note(&format!(\"possible values for `{name}` are: {possibilities}\"));\n+                    }\n+\n+                    // Suggest the most probable if we found one\n+                    if let Some(best_match) = find_best_match_for_name(&possibilities, value.unwrap_or(name), None) {\n+                        let ponctuation = if value.is_some() { \"\\\"\" } else { \"\" };\n+                        db.span_suggestion(span, \"did you mean\", format!(\"{ponctuation}{best_match}{ponctuation}\"), Applicability::MaybeIncorrect);\n+                    }\n+                },\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "7182022d2529817d5f7bf9163e3d21289adccb6a", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d234770b1c83840d18305e8625da38e97da3174/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d234770b1c83840d18305e8625da38e97da3174/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=3d234770b1c83840d18305e8625da38e97da3174", "patch": "@@ -31,6 +31,7 @@\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n+#![feature(iter_intersperse)]\n #![feature(iter_order_by)]\n #![feature(let_else)]\n #![feature(never_type)]"}, {"sha": "e9c62fc40065158ee61d38e29eec72663a17a6f5", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d234770b1c83840d18305e8625da38e97da3174/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d234770b1c83840d18305e8625da38e97da3174/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=3d234770b1c83840d18305e8625da38e97da3174", "patch": "@@ -310,6 +310,7 @@ pub enum BuiltinLintDiagnostics {\n     BreakWithLabelAndLoop(Span),\n     NamedAsmLabel(String),\n     UnicodeTextFlow(Span, String),\n+    UnexpectedCfg(Span, Symbol, Option<Symbol>),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "2bd1821c9422b79ae60e1e631dfce6329f31b0b0", "filename": "src/test/ui/check-cfg/invalid-cfg-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d234770b1c83840d18305e8625da38e97da3174/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d234770b1c83840d18305e8625da38e97da3174/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr?ref=3d234770b1c83840d18305e8625da38e97da3174", "patch": "@@ -2,7 +2,7 @@ warning: unexpected `cfg` condition name\n   --> $DIR/invalid-cfg-name.rs:7:7\n    |\n LL | #[cfg(widnows)]\n-   |       ^^^^^^^\n+   |       ^^^^^^^ help: did you mean: `windows`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n "}, {"sha": "23fd5c8c759cf2022f9c302e5bfbec6553ab9192", "filename": "src/test/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d234770b1c83840d18305e8625da38e97da3174/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d234770b1c83840d18305e8625da38e97da3174/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=3d234770b1c83840d18305e8625da38e97da3174", "patch": "@@ -5,6 +5,7 @@ LL | #[cfg(feature = \"sedre\")]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: possible values for `feature` are: rand, serde, full\n \n warning: 1 warning emitted\n "}, {"sha": "bdbe4d29d30feb07d00579bb4149581fdcd70f84", "filename": "src/test/ui/check-cfg/well-known-names.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d234770b1c83840d18305e8625da38e97da3174/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d234770b1c83840d18305e8625da38e97da3174/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr?ref=3d234770b1c83840d18305e8625da38e97da3174", "patch": "@@ -2,21 +2,25 @@ warning: unexpected `cfg` condition name\n   --> $DIR/well-known-names.rs:6:7\n    |\n LL | #[cfg(target_oz = \"linux\")]\n-   |       ^^^^^^^^^^^^^^^^^^^\n+   |       ---------^^^^^^^^^^\n+   |       |\n+   |       help: did you mean: `target_os`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition name\n   --> $DIR/well-known-names.rs:13:7\n    |\n LL | #[cfg(features = \"foo\")]\n-   |       ^^^^^^^^^^^^^^^^\n+   |       --------^^^^^^^^\n+   |       |\n+   |       help: did you mean: `feature`\n \n warning: unexpected `cfg` condition name\n   --> $DIR/well-known-names.rs:20:7\n    |\n LL | #[cfg(uniw)]\n-   |       ^^^^\n+   |       ^^^^ help: did you mean: `unix`\n \n warning: 3 warnings emitted\n "}]}