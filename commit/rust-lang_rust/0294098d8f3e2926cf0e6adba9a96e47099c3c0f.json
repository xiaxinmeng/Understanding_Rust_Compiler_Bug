{"sha": "0294098d8f3e2926cf0e6adba9a96e47099c3c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOTQwOThkOGYzZTI5MjZjZjBlNmFkYmE5YTk2ZTQ3MDk5YzNjMGY=", "commit": {"author": {"name": "Simon Mazur", "email": "semmaz.box@gmail.com", "date": "2015-09-30T17:31:41Z"}, "committer": {"name": "Simon Mazur", "email": "semmaz.box@gmail.com", "date": "2015-10-01T17:33:43Z"}, "message": "Implement `size_hint` for `EscapeUnicode`", "tree": {"sha": "c11b1f9b7d2600d192d74a878e93a48f08012a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c11b1f9b7d2600d192d74a878e93a48f08012a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0294098d8f3e2926cf0e6adba9a96e47099c3c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0294098d8f3e2926cf0e6adba9a96e47099c3c0f", "html_url": "https://github.com/rust-lang/rust/commit/0294098d8f3e2926cf0e6adba9a96e47099c3c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0294098d8f3e2926cf0e6adba9a96e47099c3c0f/comments", "author": {"login": "semmaz", "id": 3989426, "node_id": "MDQ6VXNlcjM5ODk0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3989426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semmaz", "html_url": "https://github.com/semmaz", "followers_url": "https://api.github.com/users/semmaz/followers", "following_url": "https://api.github.com/users/semmaz/following{/other_user}", "gists_url": "https://api.github.com/users/semmaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/semmaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semmaz/subscriptions", "organizations_url": "https://api.github.com/users/semmaz/orgs", "repos_url": "https://api.github.com/users/semmaz/repos", "events_url": "https://api.github.com/users/semmaz/events{/privacy}", "received_events_url": "https://api.github.com/users/semmaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semmaz", "id": 3989426, "node_id": "MDQ6VXNlcjM5ODk0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3989426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semmaz", "html_url": "https://github.com/semmaz", "followers_url": "https://api.github.com/users/semmaz/followers", "following_url": "https://api.github.com/users/semmaz/following{/other_user}", "gists_url": "https://api.github.com/users/semmaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/semmaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semmaz/subscriptions", "organizations_url": "https://api.github.com/users/semmaz/orgs", "repos_url": "https://api.github.com/users/semmaz/repos", "events_url": "https://api.github.com/users/semmaz/events{/privacy}", "received_events_url": "https://api.github.com/users/semmaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2d08721bebe5c200a1db1173a2e5f109393c725", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d08721bebe5c200a1db1173a2e5f109393c725", "html_url": "https://github.com/rust-lang/rust/commit/d2d08721bebe5c200a1db1173a2e5f109393c725"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "ccce2ad22ddc283846f8bc2a7495141ca558853f", "filename": "src/libcore/char.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0294098d8f3e2926cf0e6adba9a96e47099c3c0f/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294098d8f3e2926cf0e6adba9a96e47099c3c0f/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=0294098d8f3e2926cf0e6adba9a96e47099c3c0f", "patch": "@@ -342,6 +342,22 @@ impl Iterator for EscapeUnicode {\n             EscapeUnicodeState::Done => None,\n         }\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let mut n = 0;\n+        while (self.c as usize) >> (4 * (n + 1)) != 0 {\n+            n += 1;\n+        }\n+        let n = match self.state {\n+            EscapeUnicodeState::Backslash => n + 5,\n+            EscapeUnicodeState::Type => n + 4,\n+            EscapeUnicodeState::LeftBrace => n + 3,\n+            EscapeUnicodeState::Value(offset) => offset + 2,\n+            EscapeUnicodeState::RightBrace => 1,\n+            EscapeUnicodeState::Done => 0,\n+        };\n+        (n, Some(n))\n+    }\n }\n \n /// An iterator over the characters that represent a `char`, escaped\n@@ -375,16 +391,16 @@ impl Iterator for EscapeDefault {\n                 Some(c)\n             }\n             EscapeDefaultState::Done => None,\n-            EscapeDefaultState::Unicode(ref mut iter) => iter.next()\n+            EscapeDefaultState::Unicode(ref mut iter) => iter.next(),\n         }\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         match self.state {\n             EscapeDefaultState::Char(_) => (1, Some(1)),\n             EscapeDefaultState::Backslash(_) => (2, Some(2)),\n-            EscapeDefaultState::Unicode(_) => (0, Some(10)),\n-            _ => (0, Some(0))\n+            EscapeDefaultState::Unicode(ref iter) => iter.size_hint(),\n+            EscapeDefaultState::Done => (0, Some(0)),\n         }\n     }\n }"}, {"sha": "e226b5f2ca8fc09a7bf84e5ce8d9ff2079424f2c", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0294098d8f3e2926cf0e6adba9a96e47099c3c0f/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294098d8f3e2926cf0e6adba9a96e47099c3c0f/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=0294098d8f3e2926cf0e6adba9a96e47099c3c0f", "patch": "@@ -1315,7 +1315,7 @@ impl Debug for str {\n         for (i, c) in self.char_indices() {\n             let esc = c.escape_default();\n             // If char needs escaping, flush backlog so far and write, else skip\n-            if esc.size_hint().0 != 1 {\n+            if esc.size_hint() != (1, Some(1)) {\n                 try!(f.write_str(&self[from..i]));\n                 for c in esc {\n                     try!(f.write_char(c));"}]}