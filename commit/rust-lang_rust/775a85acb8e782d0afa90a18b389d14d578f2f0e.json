{"sha": "775a85acb8e782d0afa90a18b389d14d578f2f0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NWE4NWFjYjhlNzgyZDBhZmE5MGExOGIzODlkMTRkNTc4ZjJmMGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-04T09:48:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-04T09:48:28Z"}, "message": "Merge #9484\n\n9484: internal: make `xtask` lighter r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "853bee36b7420ba2e3c4ff6bb2a0bf499b31e03f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/853bee36b7420ba2e3c4ff6bb2a0bf499b31e03f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/775a85acb8e782d0afa90a18b389d14d578f2f0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg4YPsCRBK7hj4Ov3rIwAARTUIAE9B45DTHI5rnlEAptJIrw4T\nANpuYyL0G06wdkNVQMRhvSz8dfV8dPOxyuxE7j6Ebn82t0qmhtbDiYkIiNbUR+N1\nyTiI0ZFoaAOtHTKROzk2Ehpt2L1guyzSnms2ItsXJG9wNambR0gP3S8D9HZQNUAp\nc/OA7x0WJCybeQMSTJPBIcuEU84GmquKq8kVp+TbqvSJPtEqY+m3IGK6URe6jRu5\n7Bn8WLsBPPaQaMaxnUBP302Ycn0np6m9X4HhmfiOChybpUkfR6CrWUphHQtshKWk\nepCh2PYU9XaPrsX0Tihfby71UgZxtbEEzkHmMJvZ6jv93C+pomzsdPLuH6xIF2A=\n=q9Vo\n-----END PGP SIGNATURE-----\n", "payload": "tree 853bee36b7420ba2e3c4ff6bb2a0bf499b31e03f\nparent 27188d0b04e53b6b324cbc58dd5f9cf18a506c7b\nparent 90e27d6289d8959160d2334cb21993f7ed1a24af\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625392108 +0000\ncommitter GitHub <noreply@github.com> 1625392108 +0000\n\nMerge #9484\n\n9484: internal: make `xtask` lighter r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/775a85acb8e782d0afa90a18b389d14d578f2f0e", "html_url": "https://github.com/rust-lang/rust/commit/775a85acb8e782d0afa90a18b389d14d578f2f0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/775a85acb8e782d0afa90a18b389d14d578f2f0e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27188d0b04e53b6b324cbc58dd5f9cf18a506c7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/27188d0b04e53b6b324cbc58dd5f9cf18a506c7b", "html_url": "https://github.com/rust-lang/rust/commit/27188d0b04e53b6b324cbc58dd5f9cf18a506c7b"}, {"sha": "90e27d6289d8959160d2334cb21993f7ed1a24af", "url": "https://api.github.com/repos/rust-lang/rust/commits/90e27d6289d8959160d2334cb21993f7ed1a24af", "html_url": "https://github.com/rust-lang/rust/commit/90e27d6289d8959160d2334cb21993f7ed1a24af"}], "stats": {"total": 168, "additions": 76, "deletions": 92}, "files": [{"sha": "b72fbf2fdaebf6385cf3e3473d2b95968b76e210", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775a85acb8e782d0afa90a18b389d14d578f2f0e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/775a85acb8e782d0afa90a18b389d14d578f2f0e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=775a85acb8e782d0afa90a18b389d14d578f2f0e", "patch": "@@ -1343,6 +1343,7 @@ dependencies = [\n  \"vfs-notify\",\n  \"winapi\",\n  \"xflags\",\n+ \"xshell\",\n ]\n \n [[package]]\n@@ -1957,7 +1958,6 @@ version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n  \"flate2\",\n- \"walkdir\",\n  \"write-json\",\n  \"xflags\",\n  \"xshell\","}, {"sha": "c3adbd3468eac69301094ea26974ef66959ab7d6", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/775a85acb8e782d0afa90a18b389d14d578f2f0e/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/775a85acb8e782d0afa90a18b389d14d578f2f0e/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=775a85acb8e782d0afa90a18b389d14d578f2f0e", "patch": "@@ -66,6 +66,7 @@ jemallocator = { version = \"0.4.1\", package = \"tikv-jemallocator\", optional = tr\n \n [dev-dependencies]\n expect-test = \"1.1\"\n+xshell = \"0.1\"\n \n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }"}, {"sha": "cfc7ca0a37e9032b7c33474076ef898c4b827c7c", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/775a85acb8e782d0afa90a18b389d14d578f2f0e/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775a85acb8e782d0afa90a18b389d14d578f2f0e/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=775a85acb8e782d0afa90a18b389d14d578f2f0e", "patch": "@@ -9,6 +9,7 @@\n //! be sure without a real client anyway.\n \n mod sourcegen;\n+mod tidy;\n mod testdir;\n mod support;\n "}, {"sha": "eacf6b55b6c0ce430388ba9288081df9e651fcaa", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "renamed", "additions": 73, "deletions": 87, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/775a85acb8e782d0afa90a18b389d14d578f2f0e/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775a85acb8e782d0afa90a18b389d14d578f2f0e/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=775a85acb8e782d0afa90a18b389d14d578f2f0e", "patch": "@@ -3,14 +3,11 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use walkdir::{DirEntry, WalkDir};\n use xshell::{cmd, pushd, pushenv, read_file};\n \n-use crate::project_root;\n-\n #[test]\n fn check_code_formatting() {\n-    let _dir = pushd(project_root()).unwrap();\n+    let _dir = pushd(sourcegen::project_root()).unwrap();\n     let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n \n     let out = cmd!(\"rustfmt --version\").read().unwrap();\n@@ -32,13 +29,14 @@ fn check_code_formatting() {\n fn check_lsp_extensions_docs() {\n     let expected_hash = {\n         let lsp_ext_rs =\n-            read_file(project_root().join(\"crates/rust-analyzer/src/lsp_ext.rs\")).unwrap();\n+            read_file(sourcegen::project_root().join(\"crates/rust-analyzer/src/lsp_ext.rs\"))\n+                .unwrap();\n         stable_hash(lsp_ext_rs.as_str())\n     };\n \n     let actual_hash = {\n         let lsp_extensions_md =\n-            read_file(project_root().join(\"docs/dev/lsp-extensions.md\")).unwrap();\n+            read_file(sourcegen::project_root().join(\"docs/dev/lsp-extensions.md\")).unwrap();\n         let text = lsp_extensions_md\n             .lines()\n             .find_map(|line| line.strip_prefix(\"lsp_ext.rs hash:\"))\n@@ -63,68 +61,78 @@ Please adjust docs/dev/lsp-extensions.md.\n }\n \n #[test]\n-fn rust_files_are_tidy() {\n+fn files_are_tidy() {\n+    let files = sourcegen::list_files(&sourcegen::project_root().join(\"crates\"));\n+\n     let mut tidy_docs = TidyDocs::default();\n     let mut tidy_marks = TidyMarks::default();\n-    for path in rust_files() {\n-        let text = read_file(&path).unwrap();\n-        check_todo(&path, &text);\n-        check_dbg(&path, &text);\n-        check_test_attrs(&path, &text);\n-        check_trailing_ws(&path, &text);\n-        deny_clippy(&path, &text);\n-        tidy_docs.visit(&path, &text);\n-        tidy_marks.visit(&path, &text);\n+    for path in files {\n+        let extension = path.extension().unwrap_or_default().to_str().unwrap_or_default();\n+        match extension {\n+            \"rs\" => {\n+                let text = read_file(&path).unwrap();\n+                check_todo(&path, &text);\n+                check_dbg(&path, &text);\n+                check_test_attrs(&path, &text);\n+                check_trailing_ws(&path, &text);\n+                deny_clippy(&path, &text);\n+                tidy_docs.visit(&path, &text);\n+                tidy_marks.visit(&path, &text);\n+            }\n+            \"toml\" => {\n+                let text = read_file(&path).unwrap();\n+                check_cargo_toml(&path, text);\n+            }\n+            _ => (),\n+        }\n     }\n+\n     tidy_docs.finish();\n     tidy_marks.finish();\n }\n \n-#[test]\n-fn cargo_files_are_tidy() {\n-    for cargo in cargo_files() {\n-        let mut section = None;\n-        for (line_no, text) in read_file(&cargo).unwrap().lines().enumerate() {\n-            let text = text.trim();\n-            if text.starts_with('[') {\n-                if !text.ends_with(']') {\n+fn check_cargo_toml(path: &Path, text: String) -> () {\n+    let mut section = None;\n+    for (line_no, text) in text.lines().enumerate() {\n+        let text = text.trim();\n+        if text.starts_with('[') {\n+            if !text.ends_with(']') {\n+                panic!(\n+                    \"\\nplease don't add comments or trailing whitespace in section lines.\\n\\\n+                        {}:{}\\n\",\n+                    path.display(),\n+                    line_no + 1\n+                )\n+            }\n+            section = Some(text);\n+            continue;\n+        }\n+        let text: String = text.split_whitespace().collect();\n+        if !text.contains(\"path=\") {\n+            continue;\n+        }\n+        match section {\n+            Some(s) if s.contains(\"dev-dependencies\") => {\n+                if text.contains(\"version\") {\n                     panic!(\n-                        \"\\nplease don't add comments or trailing whitespace in section lines.\\n\\\n-                            {}:{}\\n\",\n-                        cargo.display(),\n+                        \"\\ncargo internal dev-dependencies should not have a version.\\n\\\n+                        {}:{}\\n\",\n+                        path.display(),\n                         line_no + 1\n-                    )\n+                    );\n                 }\n-                section = Some(text);\n-                continue;\n             }\n-            let text: String = text.split_whitespace().collect();\n-            if !text.contains(\"path=\") {\n-                continue;\n-            }\n-            match section {\n-                Some(s) if s.contains(\"dev-dependencies\") => {\n-                    if text.contains(\"version\") {\n-                        panic!(\n-                            \"\\ncargo internal dev-dependencies should not have a version.\\n\\\n-                            {}:{}\\n\",\n-                            cargo.display(),\n-                            line_no + 1\n-                        );\n-                    }\n-                }\n-                Some(s) if s.contains(\"dependencies\") => {\n-                    if !text.contains(\"version\") {\n-                        panic!(\n-                            \"\\ncargo internal dependencies should have a version.\\n\\\n-                            {}:{}\\n\",\n-                            cargo.display(),\n-                            line_no + 1\n-                        );\n-                    }\n+            Some(s) if s.contains(\"dependencies\") => {\n+                if !text.contains(\"version\") {\n+                    panic!(\n+                        \"\\ncargo internal dependencies should have a version.\\n\\\n+                        {}:{}\\n\",\n+                        path.display(),\n+                        line_no + 1\n+                    );\n                 }\n-                _ => {}\n             }\n+            _ => {}\n         }\n     }\n }\n@@ -293,7 +301,7 @@ fn check_todo(path: &Path, text: &str) {\n fn check_dbg(path: &Path, text: &str) {\n     let need_dbg = &[\n         // This file itself obviously needs to use dbg.\n-        \"tests/tidy.rs\",\n+        \"slow-tests/tidy.rs\",\n         // Assists to remove `dbg!()`\n         \"handlers/remove_dbg.rs\",\n         // We have .dbg postfix\n@@ -320,7 +328,9 @@ fn check_test_attrs(path: &Path, text: &str) {\n     let ignore_rule =\n         \"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#ignore\";\n     let need_ignore: &[&str] = &[\n-        // Special case to run `#[ignore]` tests\n+        // This file.\n+        \"slow-tests/tidy.rs\",\n+        // Special case to run `#[ignore]` tests.\n         \"ide/src/runnables.rs\",\n         // A legit test which needs to be ignored, as it takes too long to run\n         // :(\n@@ -338,7 +348,11 @@ fn check_test_attrs(path: &Path, text: &str) {\n \n     let panic_rule =\n         \"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#should_panic\";\n-    let need_panic: &[&str] = &[\"test_utils/src/fixture.rs\"];\n+    let need_panic: &[&str] = &[\n+        // This file.\n+        \"slow-tests/tidy.rs\",\n+        \"test_utils/src/fixture.rs\",\n+    ];\n     if text.contains(\"#[should_panic\") && !need_panic.iter().any(|p| path.ends_with(p)) {\n         panic!(\n             \"\\ndon't add `#[should_panic]` tests, see:\\n\\n    {}\\n\\n   {}\\n\",\n@@ -422,7 +436,7 @@ impl TidyDocs {\n }\n \n fn is_exclude_dir(p: &Path, dirs_to_exclude: &[&str]) -> bool {\n-    p.strip_prefix(project_root())\n+    p.strip_prefix(sourcegen::project_root())\n         .unwrap()\n         .components()\n         .rev()\n@@ -481,31 +495,3 @@ fn find_mark<'a>(text: &'a str, mark: &'static str) -> Option<&'a str> {\n     let text = &text[..idx];\n     Some(text)\n }\n-\n-fn rust_files() -> impl Iterator<Item = PathBuf> {\n-    rust_files_in(&project_root().join(\"crates\"))\n-}\n-\n-fn cargo_files() -> impl Iterator<Item = PathBuf> {\n-    files_in(&project_root(), \"toml\")\n-        .filter(|path| path.file_name().map(|it| it == \"Cargo.toml\").unwrap_or(false))\n-}\n-\n-fn rust_files_in(path: &Path) -> impl Iterator<Item = PathBuf> {\n-    files_in(path, \"rs\")\n-}\n-\n-fn files_in(path: &Path, ext: &'static str) -> impl Iterator<Item = PathBuf> {\n-    let iter = WalkDir::new(path);\n-    return iter\n-        .into_iter()\n-        .filter_entry(|e| !is_hidden(e))\n-        .map(|e| e.unwrap())\n-        .filter(|e| !e.file_type().is_dir())\n-        .map(|e| e.into_path())\n-        .filter(move |path| path.extension().map(|it| it == ext).unwrap_or(false));\n-\n-    fn is_hidden(entry: &DirEntry) -> bool {\n-        entry.file_name().to_str().map(|s| s.starts_with('.')).unwrap_or(false)\n-    }\n-}", "previous_filename": "xtask/src/tidy.rs"}, {"sha": "3bd7a533f81b1247dfb1ce5821083005e77bf6ca", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/775a85acb8e782d0afa90a18b389d14d578f2f0e/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/775a85acb8e782d0afa90a18b389d14d578f2f0e/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=775a85acb8e782d0afa90a18b389d14d578f2f0e", "patch": "@@ -9,7 +9,6 @@ license = \"MIT OR Apache-2.0\"\n [dependencies]\n anyhow = \"1.0.26\"\n flate2 = \"1.0\"\n-walkdir = \"2.3.1\"\n write-json = \"0.1.0\"\n xshell = \"0.1\"\n xflags = \"0.2.1\""}, {"sha": "5e5401ce28857819367c69641376becb51db79d4", "filename": "xtask/src/main.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/775a85acb8e782d0afa90a18b389d14d578f2f0e/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775a85acb8e782d0afa90a18b389d14d578f2f0e/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=775a85acb8e782d0afa90a18b389d14d578f2f0e", "patch": "@@ -9,9 +9,6 @@\n //! `.cargo/config`.\n mod flags;\n \n-#[cfg(test)]\n-mod tidy;\n-\n mod install;\n mod release;\n mod dist;"}]}