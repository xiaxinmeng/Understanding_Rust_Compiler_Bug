{"sha": "4f61fe21228c0910dff88bbf1bbff158a27879f2", "node_id": "C_kwDOAAsO6NoAKDRmNjFmZTIxMjI4YzA5MTBkZmY4OGJiZjFiYmZmMTU4YTI3ODc5ZjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-27T20:35:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-27T20:35:08Z"}, "message": "Rollup merge of #98563 - RalfJung:interpret-alloc-check, r=oli-obk\n\ninterpret: refactor allocation info query\n\nWe now have an infallible function that also tells us which kind of allocation we are talking about.\nAlso we do longer have to distinguish between data and function allocations for liveness.\n\nThis will help us to avoid \"catching\" `InterpError`s in Miri.\nr? `@oli-obk`", "tree": {"sha": "835418da586e97d8254e770a6a99306d98aaeeb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835418da586e97d8254e770a6a99306d98aaeeb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f61fe21228c0910dff88bbf1bbff158a27879f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiuhR9CRBK7hj4Ov3rIwAAIKwIAFP+QVJwAP7xxoCQoDqVsYOz\nNTrKY5D2w6K9U43oYxMCTsgari3PvU3UjQovbVU1uFSvzY7NFr3nGfDjlv8im5eM\naVdFnUsoyS1K8JFRESFD2xUIrBpifnd323rnmUd+AVfDqkkI1LAP9aEvCLuDd005\nz66icNY+vasH6hb4xw/EeeBDpllelTpokWkA1YPG8+avXjKkEtqp5fc8jAspWIDD\n6IwATjKVdqBOBnJrPpySkZQ9GbKkUNvacPsAH+xv7r7Y5S2sB2ScI7hzhzeJqfI4\nLrqVB8A3og23iY3OHpPopCKKYfZtfWyljL+ZlytSS1F9YrjA6gwbCYtU3kra5Fk=\n=6xO9\n-----END PGP SIGNATURE-----\n", "payload": "tree 835418da586e97d8254e770a6a99306d98aaeeb9\nparent 6391f239c81878d6abd4cc99fe6d0e2b479034a5\nparent 8e73c3ed18fb90347dd81768958e8c71f5c34859\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656362108 +0200\ncommitter GitHub <noreply@github.com> 1656362108 +0200\n\nRollup merge of #98563 - RalfJung:interpret-alloc-check, r=oli-obk\n\ninterpret: refactor allocation info query\n\nWe now have an infallible function that also tells us which kind of allocation we are talking about.\nAlso we do longer have to distinguish between data and function allocations for liveness.\n\nThis will help us to avoid \"catching\" `InterpError`s in Miri.\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f61fe21228c0910dff88bbf1bbff158a27879f2", "html_url": "https://github.com/rust-lang/rust/commit/4f61fe21228c0910dff88bbf1bbff158a27879f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f61fe21228c0910dff88bbf1bbff158a27879f2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6391f239c81878d6abd4cc99fe6d0e2b479034a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6391f239c81878d6abd4cc99fe6d0e2b479034a5", "html_url": "https://github.com/rust-lang/rust/commit/6391f239c81878d6abd4cc99fe6d0e2b479034a5"}, {"sha": "8e73c3ed18fb90347dd81768958e8c71f5c34859", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e73c3ed18fb90347dd81768958e8c71f5c34859", "html_url": "https://github.com/rust-lang/rust/commit/8e73c3ed18fb90347dd81768958e8c71f5c34859"}], "stats": {"total": 85, "additions": 34, "deletions": 51}, "files": [{"sha": "d5e68dbd5b7a9d43d5da0686ea6ec1a839df95a9", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 33, "deletions": 50, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/4f61fe21228c0910dff88bbf1bbff158a27879f2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f61fe21228c0910dff88bbf1bbff158a27879f2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=4f61fe21228c0910dff88bbf1bbff158a27879f2", "patch": "@@ -56,15 +56,14 @@ impl<T: fmt::Display> fmt::Display for MemoryKind<T> {\n     }\n }\n \n-/// Used by `get_size_and_align` to indicate whether the allocation needs to be live.\n-#[derive(Debug, Copy, Clone)]\n-pub enum AllocCheck {\n-    /// Allocation must be live and not a function pointer.\n-    Dereferenceable,\n-    /// Allocations needs to be live, but may be a function pointer.\n-    Live,\n-    /// Allocation may be dead.\n-    MaybeDead,\n+/// The return value of `get_alloc_info` indicates the \"kind\" of the allocation.\n+pub enum AllocKind {\n+    /// A regular live data allocation.\n+    LiveData,\n+    /// A function allocation (that fn ptrs point to).\n+    Function,\n+    /// A dead allocation.\n+    Dead,\n }\n \n /// The value of a function pointer.\n@@ -360,8 +359,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             align,\n             CheckInAllocMsg::MemoryAccessTest,\n             |alloc_id, offset, tag| {\n-                let (size, align) =\n-                    self.get_alloc_size_and_align(alloc_id, AllocCheck::Dereferenceable)?;\n+                let (size, align) = self.get_live_alloc_size_and_align(alloc_id)?;\n                 Ok((size, align, (alloc_id, offset, tag)))\n             },\n         )\n@@ -379,15 +377,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         msg: CheckInAllocMsg,\n     ) -> InterpResult<'tcx> {\n         self.check_and_deref_ptr(ptr, size, Some(align), msg, |alloc_id, _, _| {\n-            let check = match msg {\n-                CheckInAllocMsg::DerefTest | CheckInAllocMsg::MemoryAccessTest => {\n-                    AllocCheck::Dereferenceable\n-                }\n-                CheckInAllocMsg::PointerArithmeticTest\n-                | CheckInAllocMsg::OffsetFromTest\n-                | CheckInAllocMsg::InboundsTest => AllocCheck::Live,\n-            };\n-            let (size, align) = self.get_alloc_size_and_align(alloc_id, check)?;\n+            let (size, align) = self.get_live_alloc_size_and_align(alloc_id)?;\n             Ok((size, align, ()))\n         })?;\n         Ok(())\n@@ -655,30 +645,19 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Obtain the size and alignment of an allocation, even if that allocation has\n     /// been deallocated.\n-    ///\n-    /// If `liveness` is `AllocCheck::MaybeDead`, this function always returns `Ok`.\n-    pub fn get_alloc_size_and_align(\n-        &self,\n-        id: AllocId,\n-        liveness: AllocCheck,\n-    ) -> InterpResult<'tcx, (Size, Align)> {\n+    pub fn get_alloc_info(&self, id: AllocId) -> (Size, Align, AllocKind) {\n         // # Regular allocations\n         // Don't use `self.get_raw` here as that will\n         // a) cause cycles in case `id` refers to a static\n         // b) duplicate a global's allocation in miri\n         if let Some((_, alloc)) = self.memory.alloc_map.get(id) {\n-            return Ok((alloc.size(), alloc.align));\n+            return (alloc.size(), alloc.align, AllocKind::LiveData);\n         }\n \n         // # Function pointers\n         // (both global from `alloc_map` and local from `extra_fn_ptr_map`)\n         if self.get_fn_alloc(id).is_some() {\n-            return if let AllocCheck::Dereferenceable = liveness {\n-                // The caller requested no function pointers.\n-                throw_ub!(DerefFunctionPointer(id))\n-            } else {\n-                Ok((Size::ZERO, Align::ONE))\n-            };\n+            return (Size::ZERO, Align::ONE, AllocKind::Function);\n         }\n \n         // # Statics\n@@ -690,32 +669,38 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // Use size and align of the type.\n                 let ty = self.tcx.type_of(did);\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                Ok((layout.size, layout.align.abi))\n+                (layout.size, layout.align.abi, AllocKind::LiveData)\n             }\n             Some(GlobalAlloc::Memory(alloc)) => {\n                 // Need to duplicate the logic here, because the global allocations have\n                 // different associated types than the interpreter-local ones.\n                 let alloc = alloc.inner();\n-                Ok((alloc.size(), alloc.align))\n+                (alloc.size(), alloc.align, AllocKind::LiveData)\n             }\n             Some(GlobalAlloc::Function(_)) => bug!(\"We already checked function pointers above\"),\n             // The rest must be dead.\n             None => {\n-                if let AllocCheck::MaybeDead = liveness {\n-                    // Deallocated pointers are allowed, we should be able to find\n-                    // them in the map.\n-                    Ok(*self\n-                        .memory\n-                        .dead_alloc_map\n-                        .get(&id)\n-                        .expect(\"deallocated pointers should all be recorded in `dead_alloc_map`\"))\n-                } else {\n-                    throw_ub!(PointerUseAfterFree(id))\n-                }\n+                // Deallocated pointers are allowed, we should be able to find\n+                // them in the map.\n+                let (size, align) = *self\n+                    .memory\n+                    .dead_alloc_map\n+                    .get(&id)\n+                    .expect(\"deallocated pointers should all be recorded in `dead_alloc_map`\");\n+                (size, align, AllocKind::Dead)\n             }\n         }\n     }\n \n+    /// Obtain the size and alignment of a live allocation.\n+    pub fn get_live_alloc_size_and_align(&self, id: AllocId) -> InterpResult<'tcx, (Size, Align)> {\n+        let (size, align, kind) = self.get_alloc_info(id);\n+        if matches!(kind, AllocKind::Dead) {\n+            throw_ub!(PointerUseAfterFree(id))\n+        }\n+        Ok((size, align))\n+    }\n+\n     fn get_fn_alloc(&self, id: AllocId) -> Option<FnVal<'tcx, M::ExtraFnVal>> {\n         if let Some(extra) = self.memory.extra_fn_ptr_map.get(&id) {\n             Some(FnVal::Other(*extra))\n@@ -1187,9 +1172,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let ptr = self.scalar_to_ptr(scalar)?;\n                 match self.ptr_try_get_alloc_id(ptr) {\n                     Ok((alloc_id, offset, _)) => {\n-                        let (size, _align) = self\n-                            .get_alloc_size_and_align(alloc_id, AllocCheck::MaybeDead)\n-                            .expect(\"alloc info with MaybeDead cannot fail\");\n+                        let (size, _align, _kind) = self.get_alloc_info(alloc_id);\n                         // If the pointer is out-of-bounds, it may be null.\n                         // Note that one-past-the-end (offset == size) is still inbounds, and never null.\n                         offset > size"}, {"sha": "92f0a7498e3ee536c890ba8c111b0cdf0d889a30", "filename": "compiler/rustc_const_eval/src/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f61fe21228c0910dff88bbf1bbff158a27879f2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f61fe21228c0910dff88bbf1bbff158a27879f2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs?ref=4f61fe21228c0910dff88bbf1bbff158a27879f2", "patch": "@@ -23,7 +23,7 @@ pub use self::eval_context::{\n };\n pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{compile_time_machine, AllocMap, Machine, MayLeak, StackPopJump};\n-pub use self::memory::{AllocCheck, AllocRef, AllocRefMut, FnVal, Memory, MemoryKind};\n+pub use self::memory::{AllocKind, AllocRef, AllocRefMut, FnVal, Memory, MemoryKind};\n pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n pub use self::validity::{CtfeValidationMode, RefTracking};"}]}