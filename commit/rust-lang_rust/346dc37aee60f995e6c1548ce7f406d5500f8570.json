{"sha": "346dc37aee60f995e6c1548ce7f406d5500f8570", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NmRjMzdhZWU2MGY5OTVlNmMxNTQ4Y2U3ZjQwNmQ1NTAwZjg1NzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-05T19:07:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-05T19:07:45Z"}, "message": "fix str mutating through a ptr derived from &self", "tree": {"sha": "4e7087a94a2b084d459a7034990762da93e5aa1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e7087a94a2b084d459a7034990762da93e5aa1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/346dc37aee60f995e6c1548ce7f406d5500f8570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/346dc37aee60f995e6c1548ce7f406d5500f8570", "html_url": "https://github.com/rust-lang/rust/commit/346dc37aee60f995e6c1548ce7f406d5500f8570", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/346dc37aee60f995e6c1548ce7f406d5500f8570/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "html_url": "https://github.com/rust-lang/rust/commit/d30b99f9c23f8e1d6ef993cc94da96510ad709b3"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "b01cb688ee5c6bcd72ccd967075042b3561de945", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/346dc37aee60f995e6c1548ce7f406d5500f8570/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346dc37aee60f995e6c1548ce7f406d5500f8570/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=346dc37aee60f995e6c1548ce7f406d5500f8570", "patch": "@@ -1757,7 +1757,7 @@ mod traits {\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr().add(self.start);\n+            let ptr = slice.as_mut_ptr().add(self.start);\n             let len = self.end - self.start;\n             super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, len))\n         }\n@@ -1821,7 +1821,7 @@ mod traits {\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr();\n+            let ptr = slice.as_mut_ptr();\n             super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, self.end))\n         }\n         #[inline]\n@@ -1883,7 +1883,7 @@ mod traits {\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr().add(self.start);\n+            let ptr = slice.as_mut_ptr().add(self.start);\n             let len = slice.len() - self.start;\n             super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, len))\n         }\n@@ -2213,6 +2213,22 @@ impl str {\n         self as *const str as *const u8\n     }\n \n+    /// Converts a mutable string slice to a raw pointer.\n+    ///\n+    /// As string slices are a slice of bytes, the raw pointer points to a\n+    /// [`u8`]. This pointer will be pointing to the first byte of the string\n+    /// slice.\n+    ///\n+    /// It is your responsibility to make sure that the string slice only gets\n+    /// modified in a way that it remains valid UTF-8.\n+    ///\n+    /// [`u8`]: primitive.u8.html\n+    #[unstable(feature = \"str_as_mut_ptr\", issue = \"0\")]\n+    #[inline]\n+    pub fn as_mut_ptr(&mut self) -> *mut u8 {\n+        self as *mut str as *mut u8\n+    }\n+\n     /// Returns a subslice of `str`.\n     ///\n     /// This is the non-panicking alternative to indexing the `str`. Returns"}]}