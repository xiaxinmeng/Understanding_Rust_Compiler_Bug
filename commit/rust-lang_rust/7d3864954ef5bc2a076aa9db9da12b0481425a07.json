{"sha": "7d3864954ef5bc2a076aa9db9da12b0481425a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzg2NDk1NGVmNWJjMmEwNzZhYTlkYjlkYTEyYjA0ODE0MjVhMDc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-12T21:26:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-12T21:26:49Z"}, "message": "Rollup merge of #53019 - ljedrz:bad_collects, r=estebank\n\nDon't collect() when size_hint is useless\n\nThis adjusts PRs #52738 and #52697 by falling back to calculating capacity and extending or pushing in a loop where `collect()` can't be trusted to calculate the right capacity.\n\nIt is a performance win.", "tree": {"sha": "5e77b8aaf403d926300562e20ceb256d354f0369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e77b8aaf403d926300562e20ceb256d354f0369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3864954ef5bc2a076aa9db9da12b0481425a07", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcKYZCRBK7hj4Ov3rIwAAdHIIAI/3mmFBcxBPjFFVhkwRLbdb\neC3hHgx9AT3MfwyZZB2Kz0Ct66YRyPBebjAJ3eFD2XkobFXZ8F0DemzZYqBwTHqA\nF5hNPrpKgI1PI/4N246UNw6H3xcF21Qt6Qn/zGft9vZq7R4ASpxTVxACnRbLEkdZ\nxuoXGPxWF+wFXXHmOJwdzeAvX06Yf4MVyMvdkOov953Oz1VU9H87aMj744TatrF8\ngqn4pcW1XmSr6HafuWlb5C8/saGWQ755nbRU6um1aJNSm0pgJ2oopmHVM7CICPSD\ndChwaQmoAl2O5VQbbiF1pOEo8Ya2iJDCK0ZXM5ilLTcqwE0P7mFR6AzSN9rFKQs=\n=uv7K\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e77b8aaf403d926300562e20ceb256d354f0369\nparent 0653c259c23c1b71738dcc96e3a4d8105f74b258\nparent b68b3965a241e47c232613f403fbace64fd8b876\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1534109209 +0200\ncommitter GitHub <noreply@github.com> 1534109209 +0200\n\nRollup merge of #53019 - ljedrz:bad_collects, r=estebank\n\nDon't collect() when size_hint is useless\n\nThis adjusts PRs #52738 and #52697 by falling back to calculating capacity and extending or pushing in a loop where `collect()` can't be trusted to calculate the right capacity.\n\nIt is a performance win.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3864954ef5bc2a076aa9db9da12b0481425a07", "html_url": "https://github.com/rust-lang/rust/commit/7d3864954ef5bc2a076aa9db9da12b0481425a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3864954ef5bc2a076aa9db9da12b0481425a07/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0653c259c23c1b71738dcc96e3a4d8105f74b258", "url": "https://api.github.com/repos/rust-lang/rust/commits/0653c259c23c1b71738dcc96e3a4d8105f74b258", "html_url": "https://github.com/rust-lang/rust/commit/0653c259c23c1b71738dcc96e3a4d8105f74b258"}, {"sha": "b68b3965a241e47c232613f403fbace64fd8b876", "url": "https://api.github.com/repos/rust-lang/rust/commits/b68b3965a241e47c232613f403fbace64fd8b876", "html_url": "https://github.com/rust-lang/rust/commit/b68b3965a241e47c232613f403fbace64fd8b876"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "3598d66060bf227363a3277073369dd30b21f7fc", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d3864954ef5bc2a076aa9db9da12b0481425a07/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3864954ef5bc2a076aa9db9da12b0481425a07/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=7d3864954ef5bc2a076aa9db9da12b0481425a07", "patch": "@@ -151,12 +151,14 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         debug!(\"process_registered_region_obligations()\");\n \n         // pull out the region obligations with the given `body_id` (leaving the rest)\n-        let my_region_obligations = {\n+        let mut my_region_obligations = Vec::with_capacity(self.region_obligations.borrow().len());\n+        {\n             let mut r_o = self.region_obligations.borrow_mut();\n-            let my_r_o = r_o.drain_filter(|(ro_body_id, _)| *ro_body_id == body_id)\n-                            .map(|(_, obligation)| obligation).collect::<Vec<_>>();\n-            my_r_o\n-        };\n+            my_region_obligations.extend(\n+                r_o.drain_filter(|(ro_body_id, _)| *ro_body_id == body_id)\n+                   .map(|(_, obligation)| obligation)\n+            );\n+        }\n \n         let outlives = &mut TypeOutlives::new(\n             self,"}, {"sha": "e958fd7da613e4ab54c5ef58d21ec1a1fd50cbb5", "filename": "src/librustc_data_structures/small_vec.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d3864954ef5bc2a076aa9db9da12b0481425a07/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3864954ef5bc2a076aa9db9da12b0481425a07/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=7d3864954ef5bc2a076aa9db9da12b0481425a07", "patch": "@@ -210,7 +210,12 @@ impl<A> Decodable for SmallVec<A>\n           A::Element: Decodable {\n     fn decode<D: Decoder>(d: &mut D) -> Result<SmallVec<A>, D::Error> {\n         d.read_seq(|d, len| {\n-            (0..len).map(|i| d.read_seq_elt(i, |d| Decodable::decode(d))).collect()\n+            let mut vec = SmallVec::with_capacity(len);\n+            // FIXME(#48994) - could just be collected into a Result<SmallVec, D::Error>\n+            for i in 0..len {\n+                vec.push(d.read_seq_elt(i, |d| Decodable::decode(d))?);\n+            }\n+            Ok(vec)\n         })\n     }\n }"}, {"sha": "6925ed2afb83b51e947b108bc1a2c8aa4562070c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d3864954ef5bc2a076aa9db9da12b0481425a07/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3864954ef5bc2a076aa9db9da12b0481425a07/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7d3864954ef5bc2a076aa9db9da12b0481425a07", "patch": "@@ -501,7 +501,11 @@ impl Pat {\n             PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n                 pats[0].to_ty().map(TyKind::Slice)?,\n             PatKind::Tuple(pats, None) => {\n-                let tys = pats.iter().map(|pat| pat.to_ty()).collect::<Option<Vec<_>>>()?;\n+                let mut tys = Vec::with_capacity(pats.len());\n+                // FIXME(#48994) - could just be collected into an Option<Vec>\n+                for pat in pats {\n+                    tys.push(pat.to_ty()?);\n+                }\n                 TyKind::Tup(tys)\n             }\n             _ => return None,"}]}