{"sha": "d33fa135fe1c03ee51a84f7c6bb03a53eb3e3eed", "node_id": "C_kwDOAAsO6NoAKGQzM2ZhMTM1ZmUxYzAzZWU1MWE4NGY3YzZiYjAzYTUzZWIzZTNlZWQ", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-16T22:58:54Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-10T03:08:25Z"}, "message": "Remove field from `ErrorValue`", "tree": {"sha": "7aa7d627a42a1dd346d617bf3dbedb6b2ffc8e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aa7d627a42a1dd346d617bf3dbedb6b2ffc8e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d33fa135fe1c03ee51a84f7c6bb03a53eb3e3eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d33fa135fe1c03ee51a84f7c6bb03a53eb3e3eed", "html_url": "https://github.com/rust-lang/rust/commit/d33fa135fe1c03ee51a84f7c6bb03a53eb3e3eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d33fa135fe1c03ee51a84f7c6bb03a53eb3e3eed/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cc7bd769208a9db9670649d6fdede04f1a886fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc7bd769208a9db9670649d6fdede04f1a886fc", "html_url": "https://github.com/rust-lang/rust/commit/9cc7bd769208a9db9670649d6fdede04f1a886fc"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "85ee6d2cdc282e85e8dca19811e54d3f0eb9b587", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d33fa135fe1c03ee51a84f7c6bb03a53eb3e3eed/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33fa135fe1c03ee51a84f7c6bb03a53eb3e3eed/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=d33fa135fe1c03ee51a84f7c6bb03a53eb3e3eed", "patch": "@@ -48,7 +48,7 @@ pub fn resolve<'tcx>(\n \n             values.values.iter_mut().for_each(|v| match *v {\n                 VarValue::Value(ref mut r) => *r = re_erased,\n-                VarValue::ErrorValue(_) => {}\n+                VarValue::ErrorValue => {}\n             });\n             (values, errors)\n         }\n@@ -69,7 +69,7 @@ pub struct LexicalRegionResolutions<'tcx> {\n #[derive(Copy, Clone, Debug)]\n enum VarValue<'tcx> {\n     Value(Region<'tcx>),\n-    ErrorValue(RegionVid),\n+    ErrorValue,\n }\n \n #[derive(Clone, Debug)]\n@@ -233,7 +233,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     (None, a_region, b_vid, b_data)\n                 }\n                 Constraint::VarSubVar(a_vid, b_vid) => match *var_values.value(a_vid) {\n-                    VarValue::ErrorValue(_) => continue,\n+                    VarValue::ErrorValue => continue,\n                     VarValue::Value(a_region) => {\n                         let b_data = var_values.value_mut(b_vid);\n                         (Some(a_vid), a_region, b_vid, b_data)\n@@ -250,7 +250,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             if let Some(a_vid) = a_vid {\n                 match *b_data {\n-                    VarValue::Value(ReStatic) | VarValue::ErrorValue(_) => (),\n+                    VarValue::Value(ReStatic) | VarValue::ErrorValue => (),\n                     _ => {\n                         constraints[a_vid].push((a_vid, b_vid));\n                         constraints[b_vid].push((a_vid, b_vid));\n@@ -262,14 +262,14 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         while let Some(vid) = changes.pop() {\n             constraints[vid].retain(|&(a_vid, b_vid)| {\n                 let a_region = match *var_values.value(a_vid) {\n-                    VarValue::ErrorValue(_) => return false,\n+                    VarValue::ErrorValue => return false,\n                     VarValue::Value(a_region) => a_region,\n                 };\n                 let b_data = var_values.value_mut(b_vid);\n                 if self.expand_node(a_region, b_vid, b_data) {\n                     changes.push(b_vid);\n                 }\n-                !matches!(b_data, VarValue::Value(ReStatic) | VarValue::ErrorValue(_))\n+                !matches!(b_data, VarValue::Value(ReStatic) | VarValue::ErrorValue)\n             });\n         }\n     }\n@@ -332,7 +332,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 true\n             }\n \n-            VarValue::ErrorValue(_) => false,\n+            VarValue::ErrorValue => false,\n         }\n     }\n \n@@ -476,7 +476,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     debug!(\"contraction: {:?} == {:?}, {:?}\", a_vid, a_data, b_region);\n \n                     let a_region = match *a_data {\n-                        VarValue::ErrorValue(_) => continue,\n+                        VarValue::ErrorValue => continue,\n                         VarValue::Value(a_region) => a_region,\n                     };\n \n@@ -489,7 +489,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                             cannot verify that {:?}={:?} <= {:?}\",\n                             origin, a_vid, a_region, b_region\n                         );\n-                        *a_data = VarValue::ErrorValue(a_vid);\n+                        *a_data = VarValue::ErrorValue;\n                     }\n                 }\n             }\n@@ -545,7 +545,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         for (node_vid, value) in var_data.values.iter_enumerated() {\n             match *value {\n                 VarValue::Value(_) => { /* Inference successful */ }\n-                VarValue::ErrorValue(reg) => {\n+                VarValue::ErrorValue => {\n                     // Inference impossible: this value contains\n                     // inconsistent constraints.\n                     //\n@@ -581,7 +581,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                             (\n                                 Constraint::VarSubVar(_, sup),\n                                 SubregionOrigin::DataBorrowed(_, sp),\n-                            ) if sup == &reg => Some(*sp),\n+                            ) if sup == &node_vid => Some(*sp),\n                             _ => None,\n                         })\n                         .collect();\n@@ -900,7 +900,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n     pub fn resolve_var(&self, rid: RegionVid) -> ty::Region<'tcx> {\n         let result = match self.values[rid] {\n             VarValue::Value(r) => r,\n-            VarValue::ErrorValue(_) => self.error_region,\n+            VarValue::ErrorValue => self.error_region,\n         };\n         debug!(\"resolve_var({:?}) = {:?}\", rid, result);\n         result"}]}