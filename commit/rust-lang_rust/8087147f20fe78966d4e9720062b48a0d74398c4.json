{"sha": "8087147f20fe78966d4e9720062b48a0d74398c4", "node_id": "C_kwDOAAsO6NoAKDgwODcxNDdmMjBmZTc4OTY2ZDRlOTcyMDA2MmI0OGEwZDc0Mzk4YzQ", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-30T02:33:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-30T02:33:37Z"}, "message": "Rollup merge of #89232 - rossmacarthur:fix-76424, r=wesleywiser\n\nImprove help for recursion limit errors\n\n- Tweak help message and suggested limit (handle `0` case).\n- Add test for #75602 (it was already fixed, maybe can be resolved too).\n\nFixes #76424", "tree": {"sha": "123f4ac219c66c380f0af4838b583d7067e06c74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/123f4ac219c66c380f0af4838b583d7067e06c74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8087147f20fe78966d4e9720062b48a0d74398c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVSIBCRBK7hj4Ov3rIwAAme4IAJAgmXJXw6iLKmQbf2CyxVAp\nTMktqlouhd06WlnQ9YO0Oct5isX+TQ0dciFaZdQBmhVGctwFvY9eA5R8xvriqoZQ\n35tDy2qFG/AJjRK3ln8l98jeTNieXDlrxqKdQqeJe2oBqR446ERIH6qFRyG2oqPI\nQZRU2swjvO2d3GgQN8VX9sCLxk4/EvutZwCXvkpxA5wGpiHlAxQkD0JElUi5AuGS\nqEOkWY9a52pvpmrCHFJyyFxfBsEplEcgoQTn+V2obu8T2o8juwGqN8g8c9veYknY\nT/o0R5DYt2/rC7L+9tHTyzcPLkOYOu439DD4c+4zgmLr7SyDWx919FWoLD28zp0=\n=uc60\n-----END PGP SIGNATURE-----\n", "payload": "tree 123f4ac219c66c380f0af4838b583d7067e06c74\nparent 7c23ff278ee1314b8cb30ec37b04c686f47056ad\nparent d2613fb7a5b0e4bd368c836e5dfe8088c0a2ae81\nauthor Eric Huss <eric@huss.org> 1632969217 -0700\ncommitter GitHub <noreply@github.com> 1632969217 -0700\n\nRollup merge of #89232 - rossmacarthur:fix-76424, r=wesleywiser\n\nImprove help for recursion limit errors\n\n- Tweak help message and suggested limit (handle `0` case).\n- Add test for #75602 (it was already fixed, maybe can be resolved too).\n\nFixes #76424\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8087147f20fe78966d4e9720062b48a0d74398c4", "html_url": "https://github.com/rust-lang/rust/commit/8087147f20fe78966d4e9720062b48a0d74398c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8087147f20fe78966d4e9720062b48a0d74398c4/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c23ff278ee1314b8cb30ec37b04c686f47056ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c23ff278ee1314b8cb30ec37b04c686f47056ad", "html_url": "https://github.com/rust-lang/rust/commit/7c23ff278ee1314b8cb30ec37b04c686f47056ad"}, {"sha": "d2613fb7a5b0e4bd368c836e5dfe8088c0a2ae81", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2613fb7a5b0e4bd368c836e5dfe8088c0a2ae81", "html_url": "https://github.com/rust-lang/rust/commit/d2613fb7a5b0e4bd368c836e5dfe8088c0a2ae81"}], "stats": {"total": 110, "additions": 75, "deletions": 35}, "files": [{"sha": "1d6703077acffadd22629e638e6bd9256f3e5cab", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -633,14 +633,18 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     fn error_recursion_limit_reached(&mut self) {\n         let expn_data = self.cx.current_expansion.id.expn_data();\n-        let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n+        let suggested_limit = match self.cx.ecfg.recursion_limit {\n+            Limit(0) => Limit(2),\n+            limit => limit * 2,\n+        };\n         self.cx\n             .struct_span_err(\n                 expn_data.call_site,\n                 &format!(\"recursion limit reached while expanding `{}`\", expn_data.kind.descr()),\n             )\n             .help(&format!(\n-                \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n+                \"consider increasing the recursion limit by adding a \\\n+                 `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n                 suggested_limit, self.cx.ecfg.crate_name,\n             ))\n             .emit();"}, {"sha": "53afe4ca068c4cf24f0601ee3c38ddb7a8cbc855", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -5,7 +5,7 @@ use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt, WithConstness};\n use rustc_middle::ty::{ToPredicate, TypeFoldable};\n-use rustc_session::DiagnosticMessageId;\n+use rustc_session::{DiagnosticMessageId, Limit};\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n \n@@ -217,7 +217,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n \n pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Span, ty: Ty<'tcx>) {\n     // We've reached the recursion limit, error gracefully.\n-    let suggested_limit = tcx.recursion_limit() * 2;\n+    let suggested_limit = match tcx.recursion_limit() {\n+        Limit(0) => Limit(2),\n+        limit => limit * 2,\n+    };\n     let msg = format!(\"reached the recursion limit while auto-dereferencing `{:?}`\", ty);\n     let error_id = (DiagnosticMessageId::ErrorId(55), Some(span), msg);\n     let fresh = tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n@@ -231,7 +234,8 @@ pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Spa\n         )\n         .span_label(span, \"deref recursion limit reached\")\n         .help(&format!(\n-            \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n+            \"consider increasing the recursion limit by adding a \\\n+             `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n             suggested_limit,\n             tcx.crate_name(LOCAL_CRATE),\n         ))"}, {"sha": "325126483b9cec23b441d95db63d9c77d7f9cff9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -22,6 +22,7 @@ use rustc_middle::ty::{\n     Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n+use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, DesugaringKind, ExpnKind, ForLoopLoc, MultiSpan, Span, DUMMY_SP};\n@@ -2426,10 +2427,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n \n     fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>) {\n-        let current_limit = self.tcx.recursion_limit();\n-        let suggested_limit = current_limit * 2;\n+        let suggested_limit = match self.tcx.recursion_limit() {\n+            Limit(0) => Limit(2),\n+            limit => limit * 2,\n+        };\n         err.help(&format!(\n-            \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n+            \"consider increasing the recursion limit by adding a \\\n+             `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n             suggested_limit,\n             self.tcx.crate_name(LOCAL_CRATE),\n         ));"}, {"sha": "fe9b4d630b910c9bafad6b2e205ebd1d62c23e7b", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -9,7 +9,7 @@ LL | |     type U = str;\n LL | | }\n    | |_^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n   --> $DIR/hr-associated-type-bound-2.rs:11:6\n    |\n@@ -24,7 +24,7 @@ error[E0275]: overflow evaluating the requirement `for<'b> u32: X<'b>`\n LL |     type U = str;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n   --> $DIR/hr-associated-type-bound-2.rs:11:6\n    |"}, {"sha": "a560334314ceaef8e9438017ad85acb6ed160f89", "filename": "src/test/ui/autoref-autoderef/issue-38940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -4,7 +4,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `J`\n LL |     let x: &Bottom = &t;\n    |                      ^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`issue_38940`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`issue_38940`)\n \n error[E0308]: mismatched types\n   --> $DIR/issue-38940.rs:43:22"}, {"sha": "247fe4b5b07bd6dc63b71352d354eb1e693e09e3", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `K: Send`\n LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`recursion_limit`)\n note: required because it appears within the type `J`\n   --> $DIR/recursion_limit.rs:24:9\n    |"}, {"sha": "658207a47c9aba6c1647c9255250a8218588fb69", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -4,7 +4,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `J`\n LL |     let x: &Bottom = &t;\n    |                      ^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit_deref`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`recursion_limit_deref`)\n \n error[E0308]: mismatched types\n   --> $DIR/recursion_limit_deref.rs:50:22"}, {"sha": "609488e4f2f93770348372c16ef7b177c992ac80", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -7,7 +7,7 @@ LL |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) };\n LL |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n    |     -------------------------------------------------- in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit_macro`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`recursion_limit_macro`)\n    = note: this error originates in the macro `recurse` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a52c90962355f3cbefb795dc34be69209ae5a905", "filename": "src/test/ui/error-codes/E0055.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -4,7 +4,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n LL |     ref_foo.foo();\n    |             ^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate (`E0055`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"8\"]` attribute to your crate (`E0055`)\n \n error: aborting due to previous error\n "}, {"sha": "e13f0961a18cf2e00de92686f04ed559d01f65b9", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<B\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`E0275`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`E0275`)\n note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/E0275.rs:5:9\n    |"}, {"sha": "03e4718f5dfef880bba58ea20411f1ee116c14fc", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -12,15 +12,15 @@ error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n LL |     Foo.foo;\n    |     ^^^^^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_autoderef`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`infinite_autoderef`)\n \n error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:25:9\n    |\n LL |     Foo.foo;\n    |         ^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_autoderef`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`infinite_autoderef`)\n \n error[E0609]: no field `foo` on type `Foo`\n   --> $DIR/infinite-autoderef.rs:25:9\n@@ -34,7 +34,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n LL |     Foo.bar();\n    |         ^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_autoderef`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`infinite_autoderef`)\n \n error[E0599]: no method named `bar` found for struct `Foo` in the current scope\n   --> $DIR/infinite-autoderef.rs:26:9"}, {"sha": "15654dfaf88f154b3d9cfd2e2037b886767f0d25", "filename": "src/test/ui/infinite/infinite-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -7,7 +7,7 @@ LL |     () => (recursive!())\n LL |     recursive!()\n    |     ------------ in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_macro_expansion`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`infinite_macro_expansion`)\n    = note: this error originates in the macro `recursive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "64280219d75920732119a815b77beae7b6728dec", "filename": "src/test/ui/issues/issue-16098.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -7,7 +7,7 @@ LL |             $n + prob1!($n - 1);\n LL |     println!(\"Problem 1: {}\", prob1!(1000));\n    |                               ------------ in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_16098`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_16098`)\n    = note: this error originates in the macro `prob1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "92e0f60079f72078831c52035ccfbb776c69b991", "filename": "src/test/ui/issues/issue-18400.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `_: Sized`\n LL |     0.contains(bits);\n    |       ^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_18400`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_18400`)\n note: required because of the requirements on the impl of `Set<&[_]>` for `{integer}`\n   --> $DIR/issue-18400.rs:6:16\n    |"}, {"sha": "9135c5ac36af5919552c93c0bc54bd14910ff5bf", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -13,7 +13,7 @@ error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<N\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:8:9\n    |\n@@ -33,7 +33,7 @@ error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<N\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:8:9\n    |\n@@ -53,7 +53,7 @@ error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<Eve\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:28:9\n    |\n@@ -78,7 +78,7 @@ error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<Eve\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:28:9\n    |\n@@ -103,7 +103,7 @@ error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<Alm\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:36:9\n    |\n@@ -128,7 +128,7 @@ error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<Alm\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:36:9\n    |"}, {"sha": "b345e90178742ee0049c08d733b604f2a1df7a0d", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_23122_2`)\n note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n   --> $DIR/issue-23122-2.rs:8:15\n    |"}, {"sha": "7a1e62d49d35e4dc000950707871cf4578549c63", "filename": "src/test/ui/macros/issue-84632-eager-expansion-recursion-limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.rs?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -7,7 +7,7 @@ macro_rules! a {\n     (A) => (concat!(\"\", a!()));\n     (A, $($A:ident),*) => (concat!(\"\", a!($($A),*)))\n     //~^ ERROR recursion limit reached\n-    //~| HELP consider adding\n+    //~| HELP consider increasing the recursion limit\n }\n \n fn main() {"}, {"sha": "aa7d33cfd11a0b4012cbd5f9a9d6f58b0647f52b", "filename": "src/test/ui/macros/issue-84632-eager-expansion-recursion-limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -7,7 +7,7 @@ LL |     (A, $($A:ident),*) => (concat!(\"\", a!($($A),*)))\n LL |     a!(A, A, A, A, A, A, A, A, A, A, A);\n    |     ------------------------------------ in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"30\"]` attribute to your crate (`issue_84632_eager_expansion_recursion_limit`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"30\"]` attribute to your crate (`issue_84632_eager_expansion_recursion_limit`)\n    = note: this error originates in the macro `a` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "dc38972d1d09ef6ad8d090e051100cb8593a341f", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -31,7 +31,7 @@ LL |         my_recursive_macro!();\n LL |     my_recursive_macro!();\n    |     ---------------------- in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate (`trace_faulty_macros`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"8\"]` attribute to your crate (`trace_faulty_macros`)\n    = note: this error originates in the macro `my_recursive_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: trace_macro"}, {"sha": "d45bfc3ca55ea19c99ed034623444f060013a0ca", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -1,6 +1,6 @@\n error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>: Iterator`\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_83150`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n    = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>`\n \n error: aborting due to previous error"}, {"sha": "2202e5b7713ee085cda572f405ef308f417d1c21", "filename": "src/test/ui/recursion_limit/no-value.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.rs?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -0,0 +1,6 @@\n+// Test the parse error for no value provided to recursion_limit\n+\n+#![recursion_limit]\n+//~^ ERROR malformed `recursion_limit` attribute input\n+\n+fn main() {}"}, {"sha": "35ac2c4cd17b3562cdd87f72ac704de08a7b76b1", "filename": "src/test/ui/recursion_limit/no-value.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `recursion_limit` attribute input\n+  --> $DIR/no-value.rs:3:1\n+   |\n+LL | #![recursion_limit]\n+   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![recursion_limit = \"N\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "77bd8185676083a6fbb99593acb07c723d25454a", "filename": "src/test/ui/recursion_limit/zero-overflow.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.rs?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -0,0 +1,7 @@\n+//~ ERROR overflow evaluating the requirement `&mut Self: DispatchFromDyn<&mut RustaceansAreAwesome>\n+//~| HELP consider increasing the recursion limit\n+// build-fail\n+\n+#![recursion_limit = \"0\"]\n+\n+fn main() {}"}, {"sha": "9007ec0d784441d748bac82986a097581bce33c4", "filename": "src/test/ui/recursion_limit/zero-overflow.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -0,0 +1,7 @@\n+error[E0275]: overflow evaluating the requirement `&mut Self: DispatchFromDyn<&mut RustaceansAreAwesome>`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"2\"]` attribute to your crate (`zero_overflow`)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "c85cbadea710140585d4a63272c85b4248b1434a", "filename": "src/test/ui/recursion_limit/zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -4,7 +4,7 @@ error: recursion limit reached while expanding `test!`\n LL | test!(test);\n    | ^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"0\"]` attribute to your crate (`zero`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"2\"]` attribute to your crate (`zero`)\n \n error: aborting due to previous error\n "}, {"sha": "920f66121e09897094a55787cdcd975c1105cde1", "filename": "src/test/ui/traits/mutual-recursion-issue-75860.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8087147f20fe78966d4e9720062b48a0d74398c4/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr?ref=8087147f20fe78966d4e9720062b48a0d74398c4", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `Option<_>: Sized`\n LL |     iso(left, right)\n    |     ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`mutual_recursion_issue_75860`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`mutual_recursion_issue_75860`)\n note: required by a bound in `Option`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |"}]}