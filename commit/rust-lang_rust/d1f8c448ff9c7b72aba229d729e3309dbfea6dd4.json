{"sha": "d1f8c448ff9c7b72aba229d729e3309dbfea6dd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZjhjNDQ4ZmY5YzdiNzJhYmEyMjlkNzI5ZTMzMDlkYmZlYTZkZDQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-08T03:54:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-08T03:54:26Z"}, "message": "Rollup merge of #39459 - phungleson:fix-short-hand-struct-doc, r=steveklabnik\n\nFix short hand struct doc\n\nDon't want to discredit @hngiang effort on this issue.\n\nI just want to lend a hand to fix this issue #38830, it is a very nice feature and is seemingly completed.\n\nFixes #39096\n\nr? @steveklabnik", "tree": {"sha": "be70806c5b791ba27fbb7a42c426b65ac0d924e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be70806c5b791ba27fbb7a42c426b65ac0d924e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1f8c448ff9c7b72aba229d729e3309dbfea6dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f8c448ff9c7b72aba229d729e3309dbfea6dd4", "html_url": "https://github.com/rust-lang/rust/commit/d1f8c448ff9c7b72aba229d729e3309dbfea6dd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1f8c448ff9c7b72aba229d729e3309dbfea6dd4/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb57bf13fcc316ce622af70d3922ae5d811928d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb57bf13fcc316ce622af70d3922ae5d811928d", "html_url": "https://github.com/rust-lang/rust/commit/6fb57bf13fcc316ce622af70d3922ae5d811928d"}, {"sha": "4ddb56bf4dfdc607ae0bd2207da189c4c4d4c14a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ddb56bf4dfdc607ae0bd2207da189c4c4d4c14a", "html_url": "https://github.com/rust-lang/rust/commit/4ddb56bf4dfdc607ae0bd2207da189c4c4d4c14a"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "dcf74cbb0a7c47660fede441837ccbf717b3c7fe", "filename": "src/doc/book/structs.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d1f8c448ff9c7b72aba229d729e3309dbfea6dd4/src%2Fdoc%2Fbook%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1f8c448ff9c7b72aba229d729e3309dbfea6dd4/src%2Fdoc%2Fbook%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstructs.md?ref=d1f8c448ff9c7b72aba229d729e3309dbfea6dd4", "patch": "@@ -117,6 +117,30 @@ fn main() {\n }\n ```\n \n+Initialization of a data structure (struct, enum, union) can be simplified if\n+fields of the data structure are initialized with variables which has same\n+names as the fields.\n+\n+```\n+#![feature(field_init_shorthand)]\n+\n+#[derive(Debug)]\n+struct Person<'a> {\n+    name: &'a str,\n+    age: u8\n+}\n+\n+fn main() {\n+    // Create struct with field init shorthand\n+    let name = \"Peter\";\n+    let age = 27;\n+    let peter = Person { name, age };\n+\n+    // Print debug struct\n+    println!(\"{:?}\", peter);\n+}\n+```\n+\n # Update syntax\n \n A `struct` can include `..` to indicate that you want to use a copy of some"}, {"sha": "f9013490418f3da598ef9bfe112411d5b0a2e9d6", "filename": "src/doc/reference.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d1f8c448ff9c7b72aba229d729e3309dbfea6dd4/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1f8c448ff9c7b72aba229d729e3309dbfea6dd4/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=d1f8c448ff9c7b72aba229d729e3309dbfea6dd4", "patch": "@@ -2765,6 +2765,28 @@ let base = Point3d {x: 1, y: 2, z: 3};\n Point3d {y: 0, z: 10, .. base};\n ```\n \n+#### Struct field init shorthand\n+\n+When initializing a data structure (struct, enum, union) with named fields,\n+allow writing `fieldname` as a shorthand for `fieldname: fieldname`. This\n+allows a compact syntax for initialization, with less duplication.\n+\n+In the initializer for a `struct` with named fields, a `union` with named\n+fields, or an enum variant with named fields, accept an identifier `field` as a\n+shorthand for `field: field`.\n+\n+Example:\n+\n+```\n+# #![feature(field_init_shorthand)]\n+# struct Point3d { x: i32, y: i32, z: i32 }\n+# let x = 0;\n+# let y_value = 0;\n+# let z = 0;\n+Point3d { x: x, y: y_value, z: z };\n+Point3d { x, y: y_value, z };\n+```\n+\n ### Block expressions\n \n A _block expression_ is similar to a module in terms of the declarations that"}]}