{"sha": "0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiM2Q0YTFmYTQ1YzI5MjZmZTEzM2ExN2Y0MmE0MGI3NWVhZmQ4ODU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-26T23:56:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-26T23:56:17Z"}, "message": "Rollup merge of #66737 - GuillaumeGomez:err-codes-cleanup, r=Dylan-DPC\n\nError codes cleanup\n\nr? @Dylan-DPC", "tree": {"sha": "b2a818dfcd0b6fcd8244bc955a9009cef9c38841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2a818dfcd0b6fcd8244bc955a9009cef9c38841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3buiCRBK7hj4Ov3rIwAAdHIIAGaCV/805pf4HPTOxVv11B/9\nSdyeVRdNXTzJe/mIjqlq9yD5DM5IJIq+bOqaqXkXJK353sfOLTdNMa5jWaPAJ1f+\n6PwG04/qRvTU0+J+mFCrmqos8gGeOvZAPPThC3uLyTqvTvdS7VCH1FoW6y3h9hAh\nYbARq7GqdlSF/MPxDwV84kmVn+GFbEAv8gCy7e600SNnwTcQJerPzwd+U0/snWbg\nzZqB9VIAVEz2AtgrjZ1eDDjJbgWAH/ad+Bl8Z33E5YdfReEBdCH6HMl9djMOKFuu\nDKatacI9i9lJDM2evp+jIPZHgaXWX7pQMRKxCRy8BZ480rHp3YEq75vfgSR9q/8=\n=Hazr\n-----END PGP SIGNATURE-----\n", "payload": "tree b2a818dfcd0b6fcd8244bc955a9009cef9c38841\nparent bf25f8ee19fed5584c091c9e7937e122cd8abb8e\nparent 1bd28b1087b067df4037cbbe2f48db7776e3deaa\nauthor Tyler Mandry <tmandry@gmail.com> 1574812577 -0600\ncommitter GitHub <noreply@github.com> 1574812577 -0600\n\nRollup merge of #66737 - GuillaumeGomez:err-codes-cleanup, r=Dylan-DPC\n\nError codes cleanup\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "html_url": "https://github.com/rust-lang/rust/commit/0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf25f8ee19fed5584c091c9e7937e122cd8abb8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf25f8ee19fed5584c091c9e7937e122cd8abb8e", "html_url": "https://github.com/rust-lang/rust/commit/bf25f8ee19fed5584c091c9e7937e122cd8abb8e"}, {"sha": "1bd28b1087b067df4037cbbe2f48db7776e3deaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd28b1087b067df4037cbbe2f48db7776e3deaa", "html_url": "https://github.com/rust-lang/rust/commit/1bd28b1087b067df4037cbbe2f48db7776e3deaa"}], "stats": {"total": 89, "additions": 39, "deletions": 50}, "files": [{"sha": "64fc027b885b632b4c06debbd9c4f2a2269759b1", "filename": "src/librustc_error_codes/error_codes/E0062.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0062.md", "raw_url": "https://github.com/rust-lang/rust/raw/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0062.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0062.md?ref=0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "patch": "@@ -1,6 +1,6 @@\n-This error indicates that during an attempt to build a struct or struct-like\n-enum variant, one of the fields was specified more than once. Erroneous code\n-example:\n+A struct's or struct-like enum variant's field was specified more than once.\n+\n+Erroneous code example:\n \n ```compile_fail,E0062\n struct Foo {\n@@ -15,7 +15,9 @@ fn main() {\n }\n ```\n \n-Each field should be specified exactly one time. Example:\n+This error indicates that during an attempt to build a struct or struct-like\n+enum variant, one of the fields was specified more than once. Each field should\n+be specified exactly one time. Example:\n \n ```\n struct Foo {"}, {"sha": "0e611deac426fa6d081957d1530ae8149a4c3cd1", "filename": "src/librustc_error_codes/error_codes/E0063.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0063.md", "raw_url": "https://github.com/rust-lang/rust/raw/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0063.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0063.md?ref=0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "patch": "@@ -1,5 +1,6 @@\n-This error indicates that during an attempt to build a struct or struct-like\n-enum variant, one of the fields was not provided. Erroneous code example:\n+A struct's or struct-like enum variant's field was not provided.\n+\n+Erroneous code example:\n \n ```compile_fail,E0063\n struct Foo {"}, {"sha": "11041bb53ee5527c7d154401c79b36709ee94d1b", "filename": "src/librustc_error_codes/error_codes/E0067.md", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0067.md", "raw_url": "https://github.com/rust-lang/rust/raw/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0067.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0067.md?ref=0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "patch": "@@ -1,33 +1,15 @@\n-The left-hand side of a compound assignment expression must be a place\n-expression. A place expression represents a memory location and includes\n-item paths (ie, namespaced variables), dereferences, indexing expressions,\n-and field references.\n+An invalid left-hand side expression was used on an assignment operation.\n \n-Let's start with some erroneous code examples:\n+Erroneous code example:\n \n ```compile_fail,E0067\n-use std::collections::LinkedList;\n-\n-// Bad: assignment to non-place expression\n-LinkedList::new() += 1;\n-\n-// ...\n-\n-fn some_func(i: &mut i32) {\n-    i += 12; // Error : '+=' operation cannot be applied on a reference !\n-}\n+12 += 1; // error!\n ```\n \n-And now some working examples:\n+You need to have a place expression to be able to assign it something. For\n+example:\n \n ```\n-let mut i : i32 = 0;\n-\n-i += 12; // Good !\n-\n-// ...\n-\n-fn some_func(i: &mut i32) {\n-    *i += 12; // Good !\n-}\n+let mut x: i8 = 12;\n+x += 1; // ok!\n ```"}, {"sha": "7367a5c0922ea9eae793ce6df00aa69de9519108", "filename": "src/librustc_error_codes/error_codes/E0069.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0069.md", "raw_url": "https://github.com/rust-lang/rust/raw/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0069.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0069.md?ref=0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "patch": "@@ -1,5 +1,7 @@\n The compiler found a function whose body contains a `return;` statement but\n-whose return type is not `()`. An example of this is:\n+whose return type is not `()`.\n+\n+Erroneous code example:\n \n ```compile_fail,E0069\n // error"}, {"sha": "97522af3da867573aea68c34f40112e3949e61db", "filename": "src/librustc_error_codes/error_codes/E0070.md", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0070.md", "raw_url": "https://github.com/rust-lang/rust/raw/0b3d4a1fa45c2926fe133a17f42a40b75eafd885/src%2Flibrustc_error_codes%2Ferror_codes%2FE0070.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0070.md?ref=0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "patch": "@@ -1,41 +1,43 @@\n-The left-hand side of an assignment operator must be a place expression. A\n-place expression represents a memory location and can be a variable (with\n-optional namespacing), a dereference, an indexing expression or a field\n-reference.\n+An assignment operator was used on a non-place expression.\n \n-More details can be found in the [Expressions] section of the Reference.\n-\n-[Expressions]: https://doc.rust-lang.org/reference/expressions.html#places-rvalues-and-temporaries\n-\n-Now, we can go further. Here are some erroneous code examples:\n+Erroneous code examples:\n \n ```compile_fail,E0070\n struct SomeStruct {\n     x: i32,\n-    y: i32\n+    y: i32,\n }\n \n-const SOME_CONST : i32 = 12;\n+const SOME_CONST: i32 = 12;\n \n fn some_other_func() {}\n \n fn some_function() {\n-    SOME_CONST = 14; // error : a constant value cannot be changed!\n-    1 = 3; // error : 1 isn't a valid place!\n-    some_other_func() = 4; // error : we cannot assign value to a function!\n-    SomeStruct.x = 12; // error : SomeStruct a structure name but it is used\n-                       // like a variable!\n+    SOME_CONST = 14; // error: a constant value cannot be changed!\n+    1 = 3; // error: 1 isn't a valid place!\n+    some_other_func() = 4; // error: we cannot assign value to a function!\n+    SomeStruct::x = 12; // error: SomeStruct a structure name but it is used\n+                        //        like a variable!\n }\n ```\n \n+The left-hand side of an assignment operator must be a place expression. A\n+place expression represents a memory location and can be a variable (with\n+optional namespacing), a dereference, an indexing expression or a field\n+reference.\n+\n+More details can be found in the [Expressions] section of the Reference.\n+\n+[Expressions]: https://doc.rust-lang.org/reference/expressions.html#places-rvalues-and-temporaries\n+\n And now let's give working examples:\n \n ```\n struct SomeStruct {\n     x: i32,\n-    y: i32\n+    y: i32,\n }\n-let mut s = SomeStruct {x: 0, y: 0};\n+let mut s = SomeStruct { x: 0, y: 0 };\n \n s.x = 3; // that's good !\n "}]}