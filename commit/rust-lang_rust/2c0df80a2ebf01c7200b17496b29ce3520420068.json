{"sha": "2c0df80a2ebf01c7200b17496b29ce3520420068", "node_id": "C_kwDOAAsO6NoAKDJjMGRmODBhMmViZjAxYzcyMDBiMTc0OTZiMjljZTM1MjA0MjAwNjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-17T05:30:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-17T05:30:00Z"}, "message": "Rollup merge of #93981 - ChayimFriedman2:slice-pat-reference-option-result, r=davidtwco\n\nFix suggestion to slice if scurtinee is a reference to `Result` or `Option`\n\nFixes https://github.com/rust-lang/rust/pull/91343#issuecomment-1037718339 and https://github.com/rust-lang/rust/pull/91343#discussion_r761466979.", "tree": {"sha": "ff7d665f8727536e2a5fe43cad0f4b57aa4d4ca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff7d665f8727536e2a5fe43cad0f4b57aa4d4ca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c0df80a2ebf01c7200b17496b29ce3520420068", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDd1YCRBK7hj4Ov3rIwAAHAIIAI7U/a3C+7BFfgy/MBI2phPH\nwcJo+e3rApAKA+aH036tmv32l12dDpzyvmIvriBR8Y7BdgIYpSLM7OGB4SSeX9Cl\ngiCbrbu5jfNQipSPyiIEYdwUC/gb4TlltMdLZ7Zql3qa05nTDFSmqwfeCl/hxw0T\nhgerAKSZTlvDRdC+l2L7ynxuRCM0pW8MA4DWigXRXjvPfZHllyOl+1yoCERy5FbC\nVANa9si4i5XIiYlLDqNO9tZ88Z6fBvVEkKVGRc5a77vWOK2de33PWC2//0wlsXip\nKeSYFOckT1fo5s7JHftR6nSjma2BdS6vdpaxf6cYvCxvrMyAnFb4VMyC3qhrQkw=\n=PAcP\n-----END PGP SIGNATURE-----\n", "payload": "tree ff7d665f8727536e2a5fe43cad0f4b57aa4d4ca3\nparent 351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0\nparent d9592d90c707ff1badb8067eb0a0e252d241ee9e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645075800 +0100\ncommitter GitHub <noreply@github.com> 1645075800 +0100\n\nRollup merge of #93981 - ChayimFriedman2:slice-pat-reference-option-result, r=davidtwco\n\nFix suggestion to slice if scurtinee is a reference to `Result` or `Option`\n\nFixes https://github.com/rust-lang/rust/pull/91343#issuecomment-1037718339 and https://github.com/rust-lang/rust/pull/91343#discussion_r761466979.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0df80a2ebf01c7200b17496b29ce3520420068", "html_url": "https://github.com/rust-lang/rust/commit/2c0df80a2ebf01c7200b17496b29ce3520420068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c0df80a2ebf01c7200b17496b29ce3520420068/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "html_url": "https://github.com/rust-lang/rust/commit/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0"}, {"sha": "d9592d90c707ff1badb8067eb0a0e252d241ee9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9592d90c707ff1badb8067eb0a0e252d241ee9e", "html_url": "https://github.com/rust-lang/rust/commit/d9592d90c707ff1badb8067eb0a0e252d241ee9e"}], "stats": {"total": 87, "additions": 62, "deletions": 25}, "files": [{"sha": "e034adde1be86e1887ed089e52ef7f6b5f9298da", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2c0df80a2ebf01c7200b17496b29ce3520420068/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0df80a2ebf01c7200b17496b29ce3520420068/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=2c0df80a2ebf01c7200b17496b29ce3520420068", "patch": "@@ -2029,34 +2029,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n             }\n         } else if Autoderef::new(&self.infcx, self.param_env, self.body_id, span, expected_ty, span)\n-            .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..)))\n+            .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n         {\n             if let (Some(span), true) = (ti.span, ti.origin_expr) {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    let applicability = match self.resolve_vars_if_possible(ti.expected).kind() {\n-                        ty::Adt(adt_def, _)\n-                            if self.tcx.is_diagnostic_item(sym::Option, adt_def.did)\n-                                || self.tcx.is_diagnostic_item(sym::Result, adt_def.did) =>\n-                        {\n-                            // Slicing won't work here, but `.as_deref()` might (issue #91328).\n-                            err.span_suggestion(\n-                                span,\n-                                \"consider using `as_deref` here\",\n-                                format!(\"{}.as_deref()\", snippet),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                            None\n-                        }\n-                        // FIXME: instead of checking for Vec only, we could check whether the\n-                        // type implements `Deref<Target=X>`; see\n-                        // https://github.com/rust-lang/rust/pull/91343#discussion_r761466979\n-                        ty::Adt(adt_def, _)\n-                            if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did) =>\n-                        {\n-                            Some(Applicability::MachineApplicable)\n+                    let applicability = Autoderef::new(\n+                        &self.infcx,\n+                        self.param_env,\n+                        self.body_id,\n+                        span,\n+                        self.resolve_vars_if_possible(ti.expected),\n+                        span,\n+                    )\n+                    .find_map(|(ty, _)| {\n+                        match ty.kind() {\n+                            ty::Adt(adt_def, _)\n+                                if self.tcx.is_diagnostic_item(sym::Option, adt_def.did)\n+                                    || self.tcx.is_diagnostic_item(sym::Result, adt_def.did) =>\n+                            {\n+                                // Slicing won't work here, but `.as_deref()` might (issue #91328).\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"consider using `as_deref` here\",\n+                                    format!(\"{}.as_deref()\", snippet),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                Some(None)\n+                            }\n+\n+                            ty::Slice(..) | ty::Array(..) => {\n+                                Some(Some(Applicability::MachineApplicable))\n+                            }\n+\n+                            _ => None,\n                         }\n-                        _ => Some(Applicability::MaybeIncorrect),\n-                    };\n+                    })\n+                    .unwrap_or(Some(Applicability::MaybeIncorrect));\n \n                     if let Some(applicability) = applicability {\n                         err.span_suggestion("}, {"sha": "c0384399a92e683f1fdc4e63528cd6482f0008ea", "filename": "src/test/ui/typeck/issue-91328.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c0df80a2ebf01c7200b17496b29ce3520420068/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c0df80a2ebf01c7200b17496b29ce3520420068/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed?ref=2c0df80a2ebf01c7200b17496b29ce3520420068", "patch": "@@ -34,4 +34,14 @@ fn baz(v: Vec<i32>) -> i32 {\n     }\n }\n \n+fn qux(a: &Option<Box<[i32; 2]>>) -> i32 {\n+    match a.as_deref() {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n fn main() {}"}, {"sha": "63602d26f970df5b77f43dd0341c61694944bca4", "filename": "src/test/ui/typeck/issue-91328.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c0df80a2ebf01c7200b17496b29ce3520420068/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0df80a2ebf01c7200b17496b29ce3520420068/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs?ref=2c0df80a2ebf01c7200b17496b29ce3520420068", "patch": "@@ -34,4 +34,14 @@ fn baz(v: Vec<i32>) -> i32 {\n     }\n }\n \n+fn qux(a: &Option<Box<[i32; 2]>>) -> i32 {\n+    match a {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n fn main() {}"}, {"sha": "f2f407bcafff222acedc6040dd381bb6417acabc", "filename": "src/test/ui/typeck/issue-91328.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c0df80a2ebf01c7200b17496b29ce3520420068/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c0df80a2ebf01c7200b17496b29ce3520420068/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr?ref=2c0df80a2ebf01c7200b17496b29ce3520420068", "patch": "@@ -25,6 +25,15 @@ LL |\n LL |         [a, b] => a + b,\n    |         ^^^^^^ pattern cannot match with input type `Vec<i32>`\n \n-error: aborting due to 3 previous errors\n+error[E0529]: expected an array or slice, found `Box<[i32; 2]>`\n+  --> $DIR/issue-91328.rs:40:14\n+   |\n+LL |     match a {\n+   |           - help: consider using `as_deref` here: `a.as_deref()`\n+LL |\n+LL |         Some([a, b]) => a + b,\n+   |              ^^^^^^ pattern cannot match with input type `Box<[i32; 2]>`\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0529`."}]}