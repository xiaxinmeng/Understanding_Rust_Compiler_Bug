{"sha": "c950ee93c95d9cfe68ed431bdc45cea67a554757", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NTBlZTkzYzk1ZDljZmU2OGVkNDMxYmRjNDVjZWE2N2E1NTQ3NTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-25T04:59:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-25T04:59:23Z"}, "message": "Rollup merge of #22157 - tbu-:pr_debug_collections, r=alexcrichton\n\n r? @Gankro", "tree": {"sha": "d2a3f8150b83d55a5935c312ff5eaecf9278f599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a3f8150b83d55a5935c312ff5eaecf9278f599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c950ee93c95d9cfe68ed431bdc45cea67a554757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c950ee93c95d9cfe68ed431bdc45cea67a554757", "html_url": "https://github.com/rust-lang/rust/commit/c950ee93c95d9cfe68ed431bdc45cea67a554757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c950ee93c95d9cfe68ed431bdc45cea67a554757/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c97ac3d12074568269d34018ca254ae44fe40b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c97ac3d12074568269d34018ca254ae44fe40b9", "html_url": "https://github.com/rust-lang/rust/commit/1c97ac3d12074568269d34018ca254ae44fe40b9"}, {"sha": "870ad3bc75ef25a01b81ff115ab307d21c738a0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/870ad3bc75ef25a01b81ff115ab307d21c738a0f", "html_url": "https://github.com/rust-lang/rust/commit/870ad3bc75ef25a01b81ff115ab307d21c738a0f"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "5b19de42ac919240167e67892b48ba519dd55b63", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -978,7 +978,7 @@ impl Ord for BitVec {\n impl fmt::Debug for BitVec {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         for bit in self {\n-            try!(write!(fmt, \"{}\", if bit { 1u32 } else { 0u32 }));\n+            try!(write!(fmt, \"{}\", if bit { 1 } else { 0 }));\n         }\n         Ok(())\n     }\n@@ -1752,7 +1752,7 @@ impl BitSet {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for BitSet {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(fmt, \"BitSet {{\"));\n+        try!(write!(fmt, \"{{\"));\n         let mut first = true;\n         for n in self {\n             if !first {\n@@ -2655,7 +2655,7 @@ mod bit_set_test {\n         s.insert(10);\n         s.insert(50);\n         s.insert(2);\n-        assert_eq!(\"BitSet {1, 2, 10, 50}\", format!(\"{:?}\", s));\n+        assert_eq!(\"{1, 2, 10, 50}\", format!(\"{:?}\", s));\n     }\n \n     #[test]"}, {"sha": "8a3a1fcb9f387a8bc060a4f29eb0983a2ae9372c", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -899,7 +899,7 @@ impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"BTreeMap {{\"));\n+        try!(write!(f, \"{{\"));\n \n         for (i, (k, v)) in self.iter().enumerate() {\n             if i != 0 { try!(write!(f, \", \")); }"}, {"sha": "bc2e68b999a55e29ce02c218e60d3e7003e28da3", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -613,7 +613,7 @@ impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for BTreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"BTreeSet {{\"));\n+        try!(write!(f, \"{{\"));\n \n         for (i, x) in self.iter().enumerate() {\n             if i != 0 { try!(write!(f, \", \")); }\n@@ -911,7 +911,7 @@ mod test {\n \n         let set_str = format!(\"{:?}\", set);\n \n-        assert_eq!(set_str, \"BTreeSet {1, 2}\");\n-        assert_eq!(format!(\"{:?}\", empty), \"BTreeSet {}\");\n+        assert_eq!(set_str, \"{1, 2}\");\n+        assert_eq!(format!(\"{:?}\", empty), \"{}\");\n     }\n }"}, {"sha": "62dd91915211b85a37aa1295c52ffa6b4439e6b8", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -36,7 +36,7 @@ impl<E> Copy for EnumSet<E> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<E:CLike + fmt::Debug> fmt::Debug for EnumSet<E> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(fmt, \"EnumSet {{\"));\n+        try!(write!(fmt, \"{{\"));\n         let mut first = true;\n         for e in self {\n             if !first {\n@@ -314,11 +314,11 @@ mod test {\n     #[test]\n     fn test_show() {\n         let mut e = EnumSet::new();\n-        assert!(format!(\"{:?}\", e) == \"EnumSet {}\");\n+        assert!(format!(\"{:?}\", e) == \"{}\");\n         e.insert(A);\n-        assert!(format!(\"{:?}\", e) == \"EnumSet {A}\");\n+        assert!(format!(\"{:?}\", e) == \"{A}\");\n         e.insert(C);\n-        assert!(format!(\"{:?}\", e) == \"EnumSet {A, C}\");\n+        assert!(format!(\"{:?}\", e) == \"{A, C}\");\n     }\n \n     #[test]"}, {"sha": "3d68bb13db8e90a35f423a05b9c84845e8adba36", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -918,7 +918,7 @@ impl<A: Clone> Clone for LinkedList<A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: fmt::Debug> fmt::Debug for LinkedList<A> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"LinkedList [\"));\n+        try!(write!(f, \"[\"));\n \n         for (i, e) in self.iter().enumerate() {\n             if i != 0 { try!(write!(f, \", \")); }\n@@ -1387,10 +1387,10 @@ mod tests {\n     #[test]\n     fn test_show() {\n         let list: LinkedList<_> = (0..10).collect();\n-        assert_eq!(format!(\"{:?}\", list), \"LinkedList [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n+        assert_eq!(format!(\"{:?}\", list), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n         let list: LinkedList<_> = vec![\"just\", \"one\", \"test\", \"more\"].iter().cloned().collect();\n-        assert_eq!(format!(\"{:?}\", list), \"LinkedList [\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n+        assert_eq!(format!(\"{:?}\", list), \"[\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n     }\n \n     #[cfg(test)]"}, {"sha": "e398e5d625b094e0d4abf7c02e2cb7eee3228d85", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -1754,7 +1754,7 @@ impl<A> Extend<A> for VecDeque<A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for VecDeque<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"VecDeque [\"));\n+        try!(write!(f, \"[\"));\n \n         for (i, e) in self.iter().enumerate() {\n             if i != 0 { try!(write!(f, \", \")); }\n@@ -2435,12 +2435,12 @@ mod tests {\n     #[test]\n     fn test_show() {\n         let ringbuf: VecDeque<_> = (0..10).collect();\n-        assert_eq!(format!(\"{:?}\", ringbuf), \"VecDeque [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n+        assert_eq!(format!(\"{:?}\", ringbuf), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n         let ringbuf: VecDeque<_> = vec![\"just\", \"one\", \"test\", \"more\"].iter()\n                                                                         .cloned()\n                                                                         .collect();\n-        assert_eq!(format!(\"{:?}\", ringbuf), \"VecDeque [\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n+        assert_eq!(format!(\"{:?}\", ringbuf), \"[\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n     }\n \n     #[test]"}, {"sha": "5a0aa750bf5670dc1a569ca9f9c5e9715c17c884", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -739,7 +739,7 @@ impl<V: Ord> Ord for VecMap<V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<V: fmt::Debug> fmt::Debug for VecMap<V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"VecMap {{\"));\n+        try!(write!(f, \"{{\"));\n \n         for (i, (k, v)) in self.iter().enumerate() {\n             if i != 0 { try!(write!(f, \", \")); }\n@@ -1318,8 +1318,8 @@ mod test_map {\n         map.insert(3, 4);\n \n         let map_str = format!(\"{:?}\", map);\n-        assert!(map_str == \"VecMap {1: 2, 3: 4}\" || map_str == \"{3: 4, 1: 2}\");\n-        assert_eq!(format!(\"{:?}\", empty), \"VecMap {}\");\n+        assert!(map_str == \"{1: 2, 3: 4}\" || map_str == \"{3: 4, 1: 2}\");\n+        assert_eq!(format!(\"{:?}\", empty), \"{}\");\n     }\n \n     #[test]"}, {"sha": "faddbba50590f9ce1a87499ef7db2a299e21b038", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -1212,7 +1212,7 @@ impl<K, V, S> Debug for HashMap<K, V, S>\n     where K: Eq + Hash + Debug, V: Debug, S: HashState\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"HashMap {{\"));\n+        try!(write!(f, \"{{\"));\n \n         for (i, (k, v)) in self.iter().enumerate() {\n             if i != 0 { try!(write!(f, \", \")); }\n@@ -1999,9 +1999,9 @@ mod test_map {\n \n         let map_str = format!(\"{:?}\", map);\n \n-        assert!(map_str == \"HashMap {1: 2, 3: 4}\" ||\n-                map_str == \"HashMap {3: 4, 1: 2}\");\n-        assert_eq!(format!(\"{:?}\", empty), \"HashMap {}\");\n+        assert!(map_str == \"{1: 2, 3: 4}\" ||\n+                map_str == \"{3: 4, 1: 2}\");\n+        assert_eq!(format!(\"{:?}\", empty), \"{}\");\n     }\n \n     #[test]"}, {"sha": "cdc0ebd76aada5d823709363e9c96203211cf0dd", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -598,7 +598,7 @@ impl<T, S> fmt::Debug for HashSet<T, S>\n           S: HashState\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"HashSet {{\"));\n+        try!(write!(f, \"{{\"));\n \n         for (i, x) in self.iter().enumerate() {\n             if i != 0 { try!(write!(f, \", \")); }\n@@ -1186,8 +1186,8 @@ mod test_set {\n \n         let set_str = format!(\"{:?}\", set);\n \n-        assert!(set_str == \"HashSet {1, 2}\" || set_str == \"HashSet {2, 1}\");\n-        assert_eq!(format!(\"{:?}\", empty), \"HashSet {}\");\n+        assert!(set_str == \"{1, 2}\" || set_str == \"{2, 1}\");\n+        assert_eq!(format!(\"{:?}\", empty), \"{}\");\n     }\n \n     #[test]"}, {"sha": "3f1a1c75d8a78c077fad6d1c1fceb651c5be0e82", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c950ee93c95d9cfe68ed431bdc45cea67a554757/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=c950ee93c95d9cfe68ed431bdc45cea67a554757", "patch": "@@ -24,6 +24,6 @@ pub fn main() {\n     let mut table = HashMap::new();\n     table.insert(\"one\".to_string(), 1);\n     table.insert(\"two\".to_string(), 2);\n-    assert!(check_strs(&format!(\"{:?}\", table), \"HashMap {\\\"one\\\": 1, \\\"two\\\": 2}\") ||\n-            check_strs(&format!(\"{:?}\", table), \"HashMap {\\\"two\\\": 2, \\\"one\\\": 1}\"));\n+    assert!(check_strs(&format!(\"{:?}\", table), \"{\\\"one\\\": 1, \\\"two\\\": 2}\") ||\n+            check_strs(&format!(\"{:?}\", table), \"{\\\"two\\\": 2, \\\"one\\\": 1}\"));\n }"}]}