{"sha": "8c0f83d773370150a6ea1b40b36b55566e40a73c", "node_id": "C_kwDOAAsO6NoAKDhjMGY4M2Q3NzMzNzAxNTBhNmVhMWI0MGIzNmI1NTU2NmU0MGE3M2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-06T00:43:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-06T00:43:06Z"}, "message": "Auto merge of #108789 - matthiaskrgr:rollup-nyurto8, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #108244 (Add test for semicolon recovery ICE)\n - #108746 (Don't project to RPITIT that has no default value)\n - #108764 (Tweaks to -Zdrop-tracking-mir)\n - #108770 (Improve documentation and argument naming of some TyCtxt methods)\n - #108773 (x fmt: Only check modified files locally)\n - #108775 (Use the correct bound vars in return type suggestion.)\n - #108776 (Make `x test tidy` less noisy)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f5b92cab22d822c840c432787542104a53684ace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b92cab22d822c840c432787542104a53684ace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c0f83d773370150a6ea1b40b36b55566e40a73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0f83d773370150a6ea1b40b36b55566e40a73c", "html_url": "https://github.com/rust-lang/rust/commit/8c0f83d773370150a6ea1b40b36b55566e40a73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c0f83d773370150a6ea1b40b36b55566e40a73c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "816f958ac3db8931855c42649809aead01d20d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/816f958ac3db8931855c42649809aead01d20d9b", "html_url": "https://github.com/rust-lang/rust/commit/816f958ac3db8931855c42649809aead01d20d9b"}, {"sha": "c08c69b4b11aa45da931fd025ff2648aebd24d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08c69b4b11aa45da931fd025ff2648aebd24d46", "html_url": "https://github.com/rust-lang/rust/commit/c08c69b4b11aa45da931fd025ff2648aebd24d46"}], "stats": {"total": 205, "additions": 151, "deletions": 54}, "files": [{"sha": "3449d3d439dfc35c5db562d66b59d417b0be9104", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1510,6 +1510,14 @@ fn opaque_type_cycle_error(\n                     {\n                         label_match(interior_ty.ty, interior_ty.span);\n                     }\n+                    if tcx.sess.opts.unstable_opts.drop_tracking_mir\n+                        && let DefKind::Generator = tcx.def_kind(closure_def_id)\n+                    {\n+                        let generator_layout = tcx.mir_generator_witnesses(closure_def_id);\n+                        for interior_ty in &generator_layout.field_tys {\n+                            label_match(interior_ty.ty, interior_ty.source_info.span);\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "7fc0711a155c1f795fbd585295179e94894348b7", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -344,8 +344,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     in_trait,\n                     ..\n                 }) => {\n-                    if in_trait {\n-                        assert!(tcx.impl_defaultness(owner).has_value());\n+                    if in_trait && !tcx.impl_defaultness(owner).has_value() {\n+                        span_bug!(tcx.def_span(def_id), \"tried to get type of this RPITIT with no definition\");\n                     }\n                     find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }"}, {"sha": "690d8a238261aeef2848f43d24b0b9d9f144d67e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -669,6 +669,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// This routine checks if the return type is left as default, the method is not part of an\n     /// `impl` block and that it isn't the `main` method. If so, it suggests setting the return\n     /// type.\n+    #[instrument(level = \"trace\", skip(self, err))]\n     pub(in super::super) fn suggest_missing_return_type(\n         &self,\n         err: &mut Diagnostic,\n@@ -705,28 +706,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     return true\n                 }\n             }\n-            hir::FnRetTy::Return(ty) => {\n-                let span = ty.span;\n-\n-                if let hir::TyKind::OpaqueDef(item_id, ..) = ty.kind\n-                && let hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::OpaqueTy(op_ty),\n-                    ..\n-                }) = self.tcx.hir().get(item_id.hir_id())\n-                && let hir::OpaqueTy {\n-                    bounds: [bound], ..\n-                } = op_ty\n-                && let hir::GenericBound::LangItemTrait(\n-                    hir::LangItem::Future, _, _, generic_args) = bound\n-                && let hir::GenericArgs { bindings: [ty_binding], .. } = generic_args\n-                && let hir::TypeBinding { kind, .. } = ty_binding\n-                && let hir::TypeBindingKind::Equality { term } = kind\n-                && let hir::Term::Ty(term_ty) = term {\n+            hir::FnRetTy::Return(hir_ty) => {\n+                let span = hir_ty.span;\n+\n+                if let hir::TyKind::OpaqueDef(item_id, ..) = hir_ty.kind\n+                    && let hir::Node::Item(hir::Item {\n+                        kind: hir::ItemKind::OpaqueTy(op_ty),\n+                        ..\n+                    }) = self.tcx.hir().get(item_id.hir_id())\n+                    && let [hir::GenericBound::LangItemTrait(\n+                        hir::LangItem::Future, _, _, generic_args)] = op_ty.bounds\n+                    && let hir::GenericArgs { bindings: [ty_binding], .. } = generic_args\n+                    && let hir::TypeBindingKind::Equality { term: hir::Term::Ty(term) } = ty_binding.kind\n+                {\n                     // Check if async function's return type was omitted.\n                     // Don't emit suggestions if the found type is `impl Future<...>`.\n-                    debug!(\"suggest_missing_return_type: found = {:?}\", found);\n+                    debug!(?found);\n                     if found.is_suggestable(self.tcx, false) {\n-                        if term_ty.span.is_empty() {\n+                        if term.span.is_empty() {\n                             err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found: found.to_string() });\n                             return true;\n                         } else {\n@@ -737,11 +734,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n-                debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);\n-                let ty = self.astconv().ast_ty_to_ty(ty);\n-                debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n-                debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n-                let bound_vars = self.tcx.late_bound_vars(fn_id);\n+                debug!(\"return type {:?}\", hir_ty);\n+                let ty = self.astconv().ast_ty_to_ty(hir_ty);\n+                debug!(\"return type {:?}\", ty);\n+                debug!(\"expected type {:?}\", expected);\n+                let bound_vars = self.tcx.late_bound_vars(hir_ty.hir_id.owner.into());\n                 let ty = Binder::bind_with_vars(ty, bound_vars);\n                 let ty = self.normalize(span, ty);\n                 let ty = self.tcx.erase_late_bound_regions(ty);"}, {"sha": "649a58c9170731896aa16dcda2ef1ae9156c9a38", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -100,8 +100,9 @@ impl<'tcx> TraitDef {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn for_each_impl<F: FnMut(DefId)>(self, def_id: DefId, mut f: F) {\n-        let impls = self.trait_impls_of(def_id);\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n+    pub fn for_each_impl<F: FnMut(DefId)>(self, trait_def_id: DefId, mut f: F) {\n+        let impls = self.trait_impls_of(trait_def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n             f(impl_def_id);\n@@ -114,26 +115,28 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Iterate over every impl that could possibly match the\n-    /// self type `self_ty`.\n+    /// Iterate over every impl that could possibly match the self type `self_ty`.\n+    ///\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n     pub fn for_each_relevant_impl<F: FnMut(DefId)>(\n         self,\n-        def_id: DefId,\n+        trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         mut f: F,\n     ) {\n-        let _: Option<()> = self.find_map_relevant_impl(def_id, self_ty, |did| {\n+        let _: Option<()> = self.find_map_relevant_impl(trait_def_id, self_ty, |did| {\n             f(did);\n             None\n         });\n     }\n \n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n     pub fn non_blanket_impls_for_ty(\n         self,\n-        def_id: DefId,\n+        trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n     ) -> impl Iterator<Item = DefId> + 'tcx {\n-        let impls = self.trait_impls_of(def_id);\n+        let impls = self.trait_impls_of(trait_def_id);\n         if let Some(simp) = fast_reject::simplify_type(self, self_ty, TreatParams::AsInfer) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 return impls.iter().copied();\n@@ -145,9 +148,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Applies function to every impl that could possibly match the self type `self_ty` and returns\n     /// the first non-none value.\n+    ///\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n     pub fn find_map_relevant_impl<T, F: FnMut(DefId) -> Option<T>>(\n         self,\n-        def_id: DefId,\n+        trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         mut f: F,\n     ) -> Option<T> {\n@@ -156,7 +161,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         //\n         // If we want to be faster, we could have separate queries for\n         // blanket and non-blanket impls, and compare them separately.\n-        let impls = self.trait_impls_of(def_id);\n+        let impls = self.trait_impls_of(trait_def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n             if let result @ Some(_) = f(impl_def_id) {\n@@ -190,9 +195,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         None\n     }\n \n-    /// Returns an iterator containing all impls\n-    pub fn all_impls(self, def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n-        let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(def_id);\n+    /// Returns an iterator containing all impls for `trait_def_id`.\n+    ///\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n+    pub fn all_impls(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n+        let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(trait_def_id);\n \n         blanket_impls.iter().chain(non_blanket_impls.iter().flat_map(|(_, v)| v)).cloned()\n     }"}, {"sha": "746326f9bde8c85e0a08c7ae523d344817bfb6fc", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -1872,12 +1872,14 @@ fn check_must_not_suspend_def(\n     data: SuspendCheckData<'_>,\n ) -> bool {\n     if let Some(attr) = tcx.get_attr(def_id, sym::must_not_suspend) {\n-        let msg = format!(\n-            \"{}`{}`{} held across a suspend point, but should not be\",\n-            data.descr_pre,\n-            tcx.def_path_str(def_id),\n-            data.descr_post,\n-        );\n+        let msg = rustc_errors::DelayDm(|| {\n+            format!(\n+                \"{}`{}`{} held across a suspend point, but should not be\",\n+                data.descr_pre,\n+                tcx.def_path_str(def_id),\n+                data.descr_post,\n+            )\n+        });\n         tcx.struct_span_lint_hir(\n             rustc_session::lint::builtin::MUST_NOT_SUSPEND,\n             hir_id,"}, {"sha": "38120b9760f3d46d300224f61b986449deb072fb", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -149,6 +149,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n         &mut self,\n         _: &InferCtxt<'tcx>,\n     ) -> Vec<PredicateObligation<'tcx>> {\n-        unimplemented!()\n+        std::mem::take(&mut self.obligations)\n     }\n }"}, {"sha": "f7559a3f10ad1f23a88b74ef46f72e65e7bef977", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -2199,7 +2199,8 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         Err(guar) => return Progress::error(tcx, guar),\n     };\n     // We don't support specialization for RPITITs anyways... yet.\n-    if !leaf_def.is_final() {\n+    // Also don't try to project to an RPITIT that has no value\n+    if !leaf_def.is_final() || !leaf_def.item.defaultness(tcx).has_value() {\n         return Progress { term: tcx.ty_error_misc().into(), obligations };\n     }\n "}, {"sha": "5cb94c2f1d629a93d0cb3d76bc466d3d811d89b1", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -2,6 +2,7 @@\n \n use crate::builder::Builder;\n use crate::util::{output, program_out_of_date, t};\n+use build_helper::ci::CiEnv;\n use build_helper::git::get_git_modified_files;\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n@@ -144,8 +145,10 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n             let untracked_paths = untracked_paths_output\n                 .lines()\n                 .filter(|entry| entry.starts_with(\"??\"))\n-                .map(|entry| {\n-                    entry.split(' ').nth(1).expect(\"every git status entry should list a path\")\n+                .filter_map(|entry| {\n+                    let path =\n+                        entry.split(' ').nth(1).expect(\"every git status entry should list a path\");\n+                    path.ends_with(\".rs\").then_some(path)\n                 });\n             for untracked_path in untracked_paths {\n                 println!(\"skip untracked path {} during rustfmt invocations\", untracked_path);\n@@ -156,7 +159,10 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                 // preventing the latter from being formatted.\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n-            if !check && paths.is_empty() {\n+            // Only check modified files locally to speed up runtime.\n+            // We still check all files in CI to avoid bugs in `get_modified_rs_files` letting regressions slip through;\n+            // we also care about CI time less since this is still very fast compared to building the compiler.\n+            if !CiEnv::is_ci() && paths.is_empty() {\n                 match get_modified_rs_files(build) {\n                     Ok(Some(files)) => {\n                         for file in files {"}, {"sha": "a8375050614eb2711939332ed30752ca42b2cdcc", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -46,8 +46,10 @@ pub fn check(root_path: &Path, search_paths: &[&Path], verbose: bool, bad: &mut\n \n     // Stage 1: create list\n     let error_codes = extract_error_codes(root_path, &mut errors);\n-    println!(\"Found {} error codes\", error_codes.len());\n-    println!(\"Highest error code: `{}`\", error_codes.iter().max().unwrap());\n+    if verbose {\n+        println!(\"Found {} error codes\", error_codes.len());\n+        println!(\"Highest error code: `{}`\", error_codes.iter().max().unwrap());\n+    }\n \n     // Stage 2: check list has docs\n     let no_longer_emitted = check_error_codes_docs(root_path, &error_codes, &mut errors, verbose);"}, {"sha": "6d94417a10f1dad8eff52c018c365b7aaaafa4ae", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -219,8 +219,6 @@ pub fn check(\n         for line in lines {\n             println!(\"* {line}\");\n         }\n-    } else {\n-        println!(\"* {} features\", features.len());\n     }\n \n     CollectedFeatures { lib: lib_features, lang: features }"}, {"sha": "746a4a929aeb13160151d3540bee1f7ce56c1fd2", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -0,0 +1,16 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n+\n+trait MyTrait {\n+    fn foo(&self) -> impl Sized;\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+impl MyTrait for i32 {\n+//~^ ERROR not all trait items implemented, missing: `foo`\n+    fn bar(&self) -> impl Sized {\n+        self.foo()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d7f2e460fb0b99b142847d44b8f9120368d2ca52", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.stderr?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:1:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0046]: not all trait items implemented, missing: `foo`\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:9:1\n+   |\n+LL |     fn foo(&self) -> impl Sized;\n+   |     ---------------------------- `foo` from trait\n+...\n+LL | impl MyTrait for i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "9c67f17e963588b447c17ee99b0c7a225ea1d4bf", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -114,6 +114,9 @@ error[E0720]: cannot resolve opaque type\n    |\n LL | fn generator_hold() -> impl Sized {\n    |                        ^^^^^^^^^^ recursive opaque type\n+...\n+LL |         let x = generator_hold();\n+   |             - generator captures itself here\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:90:26"}, {"sha": "2fc0b29477b8ec58fe453b11acaccd32054be9bf", "filename": "tests/ui/parser/issues/issue-108242-semicolon-recovery.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fparser%2Fissues%2Fissue-108242-semicolon-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fparser%2Fissues%2Fissue-108242-semicolon-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-108242-semicolon-recovery.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {}\n+fn main() {\n+    foo(;\n+    foo(;\n+} //~ ERROR mismatched closing delimiter"}, {"sha": "f68d6d5010d6d44d742e7c9c9306eb32fcf339d6", "filename": "tests/ui/parser/issues/issue-108242-semicolon-recovery.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fparser%2Fissues%2Fissue-108242-semicolon-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fparser%2Fissues%2Fissue-108242-semicolon-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-108242-semicolon-recovery.stderr?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -0,0 +1,13 @@\n+error: mismatched closing delimiter: `}`\n+  --> $DIR/issue-108242-semicolon-recovery.rs:4:8\n+   |\n+LL | fn main() {\n+   |           - closing delimiter possibly meant for this\n+LL |     foo(;\n+LL |     foo(;\n+   |        ^ unclosed delimiter\n+LL | }\n+   | ^ mismatched closing delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "a6449cd44d0f8dade937382c7267fb7bc8ad08ba", "filename": "tests/ui/suggestions/issue-107860.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fsuggestions%2Fissue-107860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fsuggestions%2Fissue-107860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-107860.rs?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -0,0 +1,6 @@\n+// edition: 2021\n+\n+async fn str<T>(T: &str) -> &str { &str }\n+//~^ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "92e3cf8c43b3bff49ef086a45bc870c834e8ca61", "filename": "tests/ui/suggestions/issue-107860.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fsuggestions%2Fissue-107860.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f83d773370150a6ea1b40b36b55566e40a73c/tests%2Fui%2Fsuggestions%2Fissue-107860.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-107860.stderr?ref=8c0f83d773370150a6ea1b40b36b55566e40a73c", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107860.rs:3:36\n+   |\n+LL | async fn str<T>(T: &str) -> &str { &str }\n+   |                                    ^^^^ expected `&str`, found `&fn(&str) -> ... {str::<...>}`\n+   |\n+   = note: expected reference `&str`\n+              found reference `&for<'a> fn(&'a str) -> impl Future<Output = &'a str> {str::<_>}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}