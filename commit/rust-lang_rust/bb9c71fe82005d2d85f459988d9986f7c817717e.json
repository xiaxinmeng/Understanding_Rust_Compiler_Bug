{"sha": "bb9c71fe82005d2d85f459988d9986f7c817717e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOWM3MWZlODIwMDVkMmQ4NWY0NTk5ODhkOTk4NmY3YzgxNzcxN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-24T09:21:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-24T09:21:27Z"}, "message": "auto merge of #8722 : graydon/rust/2013-08-23-test-shard, r=msullivan\n\nThis makes it relatively easy for us to split testsuite load between machines in buildbot. I've added buildbot-side support for setting up builders with -a.b suffixes (eg. linux-64-opt-vg-0.5, linux-64-opt-vg-1.5, linux-64-opt-vg-2.5, linux-64-opt-vg-3.5, linux-64-opt-vg-4.5 causes the valgrind-supervised testsuite to split 5 ways across hosts).", "tree": {"sha": "0ae6b97bda3c8039d0b529808cf49a8a09415921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae6b97bda3c8039d0b529808cf49a8a09415921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb9c71fe82005d2d85f459988d9986f7c817717e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9c71fe82005d2d85f459988d9986f7c817717e", "html_url": "https://github.com/rust-lang/rust/commit/bb9c71fe82005d2d85f459988d9986f7c817717e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb9c71fe82005d2d85f459988d9986f7c817717e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bf65a156c981f4f7f83bcee080343bc75a0790e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf65a156c981f4f7f83bcee080343bc75a0790e", "html_url": "https://github.com/rust-lang/rust/commit/8bf65a156c981f4f7f83bcee080343bc75a0790e"}, {"sha": "2fb5c49abbab97820f24b8574e574dde1f344249", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb5c49abbab97820f24b8574e574dde1f344249", "html_url": "https://github.com/rust-lang/rust/commit/2fb5c49abbab97820f24b8574e574dde1f344249"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "67b2a26c3af44c50113424eb778810b3c590664b", "filename": "mk/tests.mk", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb9c71fe82005d2d85f459988d9986f7c817717e/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/bb9c71fe82005d2d85f459988d9986f7c817717e/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=bb9c71fe82005d2d85f459988d9986f7c817717e", "patch": "@@ -73,16 +73,24 @@ TEST_RATCHET_NOISE_PERCENT=10.0\n \n # Whether to ratchet or merely save benchmarks\n ifdef CFG_RATCHET_BENCH\n-CRATE_TEST_BENCH_ARGS=\\\n+CRATE_TEST_EXTRA_ARGS=\\\n   --test $(TEST_BENCH) \\\n   --ratchet-metrics $(call TEST_RATCHET_FILE,$(1),$(2),$(3),$(4)) \\\n   --ratchet-noise-percent $(TEST_RATCHET_NOISE_PERCENT)\n else\n-CRATE_TEST_BENCH_ARGS=\\\n+CRATE_TEST_EXTRA_ARGS=\\\n   --test $(TEST_BENCH) \\\n   --save-metrics $(call TEST_RATCHET_FILE,$(1),$(2),$(3),$(4))\n endif\n \n+# If we're sharding the testsuite between parallel testers,\n+# pass this argument along to the compiletest and crate test\n+# invocations.\n+ifdef TEST_SHARD\n+  CTEST_TESTARGS += --test-shard=$(TEST_SHARD)\n+  CRATE_TEST_EXTRA_ARGS += --test-shard=$(TEST_SHARD)\n+endif\n+\n define DEF_TARGET_COMMANDS\n \n ifdef CFG_UNIXY_$(1)\n@@ -401,7 +409,7 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_TEST_$(2),$$<,$(2),$(3)) $$(TESTARGS)\t\\\n \t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n-\t$$(call CRATE_TEST_BENCH_ARGS,$(1),$(2),$(3),$(4)) \\\n+\t$$(call CRATE_TEST_EXTRA_ARGS,$(1),$(2),$(3),$(4)) \\\n \t&& touch $$@\n endef\n \n@@ -415,7 +423,7 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t@$(CFG_ADB) shell '(cd $(CFG_ADB_TEST_DIR); LD_LIBRARY_PATH=. \\\n \t\t./$$(notdir $$<) \\\n \t\t--logfile $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log \\\n-\t\t$$(call CRATE_TEST_BENCH_ARGS,$(1),$(2),$(3),$(4)))' \\\n+\t\t$$(call CRATE_TEST_EXTRA_ARGS,$(1),$(2),$(3),$(4)))' \\\n \t\t> tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n \t@cat tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n \t@touch tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).log"}, {"sha": "3ae3600cf88c6a41759e1571b25a625f2fd163f8", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb9c71fe82005d2d85f459988d9986f7c817717e/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9c71fe82005d2d85f459988d9986f7c817717e/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=bb9c71fe82005d2d85f459988d9986f7c817717e", "patch": "@@ -68,6 +68,11 @@ pub struct config {\n     // Percent change in metrics to consider noise\n     ratchet_noise_percent: Option<f64>,\n \n+    // \"Shard\" of the testsuite to run: this has the form of\n+    // two numbers (a,b), and causes only those tests with\n+    // positional order equal to a mod b to run.\n+    test_shard: Option<(uint,uint)>,\n+\n     // A command line to prefix program execution with,\n     // for running under valgrind\n     runtool: Option<~str>,"}, {"sha": "8de79749b54f3f57053fd9db1c59709addeb7e14", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb9c71fe82005d2d85f459988d9986f7c817717e/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9c71fe82005d2d85f459988d9986f7c817717e/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=bb9c71fe82005d2d85f459988d9986f7c817717e", "patch": "@@ -75,6 +75,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n           optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\"),\n           optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\"),\n+          optopt(\"\", \"test-shard\", \"run shard A, of B shards, worth of the testsuite\", \"A.B\"),\n           optflag(\"h\", \"help\", \"show this message\"),\n          ];\n \n@@ -148,6 +149,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n                     ~\"\") { true }\n                 else { false }\n             } else { false },\n+        test_shard: test::opt_shard(getopts::opt_maybe_str(matches, \"test-shard\")),\n         verbose: getopts::opt_present(matches, \"verbose\")\n     }\n }\n@@ -172,6 +174,10 @@ pub fn log_config(config: &config) {\n     logv(c, fmt!(\"adb_path: %s\", config.adb_path));\n     logv(c, fmt!(\"adb_test_dir: %s\", config.adb_test_dir));\n     logv(c, fmt!(\"adb_device_status: %b\", config.adb_device_status));\n+    match config.test_shard {\n+        None => logv(c, ~\"test_shard: (all)\"),\n+        Some((a,b)) => logv(c, fmt!(\"test_shard: %u.%u\", a, b))\n+    }\n     logv(c, fmt!(\"verbose: %b\", config.verbose));\n     logv(c, fmt!(\"\\n\"));\n }\n@@ -234,6 +240,7 @@ pub fn test_opts(config: &config) -> test::TestOpts {\n         ratchet_metrics: config.ratchet_metrics.clone(),\n         ratchet_noise_percent: config.ratchet_noise_percent.clone(),\n         save_metrics: config.save_metrics.clone(),\n+        test_shard: config.test_shard.clone()\n     }\n }\n "}, {"sha": "f477235bdfc41dee362c536ff5120ced04342efe", "filename": "src/libextra/test.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb9c71fe82005d2d85f459988d9986f7c817717e/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9c71fe82005d2d85f459988d9986f7c817717e/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=bb9c71fe82005d2d85f459988d9986f7c817717e", "patch": "@@ -38,6 +38,7 @@ use std::task;\n use std::to_str::ToStr;\n use std::f64;\n use std::os;\n+use std::uint;\n \n \n // The name of a test. By convention this follows the rules for rust\n@@ -164,6 +165,7 @@ pub struct TestOpts {\n     ratchet_metrics: Option<Path>,\n     ratchet_noise_percent: Option<f64>,\n     save_metrics: Option<Path>,\n+    test_shard: Option<(uint,uint)>,\n     logfile: Option<Path>\n }\n \n@@ -184,7 +186,9 @@ fn optgroups() -> ~[getopts::groups::OptGroup] {\n                      \"Tests within N% of the recorded metrics will be \\\n                       considered as passing\", \"PERCENTAGE\"),\n       groups::optopt(\"\", \"logfile\", \"Write logs to the specified file instead \\\n-                          of stdout\", \"PATH\")]\n+                          of stdout\", \"PATH\"),\n+      groups::optopt(\"\", \"test-shard\", \"run shard A, of B shards, worth of the testsuite\",\n+                     \"A.B\")]\n }\n \n fn usage(binary: &str, helpstr: &str) -> ! {\n@@ -255,6 +259,9 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n     let save_metrics = getopts::opt_maybe_str(&matches, \"save-metrics\");\n     let save_metrics = save_metrics.map_move(|s| Path(s));\n \n+    let test_shard = getopts::opt_maybe_str(&matches, \"test-shard\");\n+    let test_shard = opt_shard(test_shard);\n+\n     let test_opts = TestOpts {\n         filter: filter,\n         run_ignored: run_ignored,\n@@ -263,12 +270,29 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n         ratchet_metrics: ratchet_metrics,\n         ratchet_noise_percent: ratchet_noise_percent,\n         save_metrics: save_metrics,\n+        test_shard: test_shard,\n         logfile: logfile\n     };\n \n     either::Left(test_opts)\n }\n \n+pub fn opt_shard(maybestr: Option<~str>) -> Option<(uint,uint)> {\n+    match maybestr {\n+        None => None,\n+        Some(s) => {\n+            match s.split_iter('.').to_owned_vec() {\n+                [a, b] => match (uint::from_str(a), uint::from_str(b)) {\n+                    (Some(a), Some(b)) => Some((a,b)),\n+                    _ => None\n+                },\n+                _ => None\n+            }\n+        }\n+    }\n+}\n+\n+\n #[deriving(Clone, Eq)]\n pub struct BenchSamples {\n     ns_iter_summ: stats::Summary,\n@@ -772,7 +796,15 @@ pub fn filter_tests(\n     }\n     sort::quick_sort(filtered, lteq);\n \n-    filtered\n+    // Shard the remaining tests, if sharding requested.\n+    match opts.test_shard {\n+        None => filtered,\n+        Some((a,b)) =>\n+            filtered.move_iter().enumerate()\n+            .filter(|&(i,_)| i % b == a)\n+            .map(|(_,t)| t)\n+            .to_owned_vec()\n+    }\n }\n \n struct TestFuture {\n@@ -1234,6 +1266,7 @@ mod tests {\n             ratchet_noise_percent: None,\n             ratchet_metrics: None,\n             save_metrics: None,\n+            test_shard: None\n         };\n \n         let tests = ~[\n@@ -1272,6 +1305,7 @@ mod tests {\n             ratchet_noise_percent: None,\n             ratchet_metrics: None,\n             save_metrics: None,\n+            test_shard: None\n         };\n \n         let names ="}]}