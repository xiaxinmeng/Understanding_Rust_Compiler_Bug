{"sha": "3f7e5cde0b80b19095bf7e4d40f88d418a3c5921", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmN2U1Y2RlMGI4MGIxOTA5NWJmN2U0ZDQwZjg4ZDQxOGEzYzU5MjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-24T16:28:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-24T16:28:46Z"}, "message": "Merge #2661\n\n2661: Implement infer await from async function r=flodiebold a=edwin0cheng\n\nThis PR is my attempt for trying to add support for infer `.await` expression from an `async` function, by desugaring its return type to `Impl Future<Output=RetType>`.\r\n\r\nNote that I don't know it is supposed to desugaring it in that phase, if it is not suitable in current design, just feel free to reject it :)\r\n\r\nr=@flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "03339444fa1f56b6549cca23822d119ee95f5d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03339444fa1f56b6549cca23822d119ee95f5d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeAjy+CRBK7hj4Ov3rIwAAdHIIAFDw5H+u8umQVSMbN9lYFBjR\nBrf5uclxPOiZoTVIkTnEUwVWNjhRok85juQ8BaQCSsWhGFlHWgm4jQFI909Wl8aw\nlFWJrs8eXpbiXDyUCWhVEX677V8gNFvrIgtZirTARd5eRpQUNQSSG5wnbVL+UHWo\nKALThMUT11ggHPHNqu6p6Cpmr5uLkCQiGQkonqKpwQCZtuDMIkpWqJL73600/EkS\nIZBANHPsFWwCsAG8VM9gqOXVkITzoOa9jItBuwl1KkdfvyZ77LL+aWi5QQWhm0Fx\nEFi/J5cg3UVpeowB0ttPtaxZ8CKWMOiyLl1wSSqhTDnepzcueIrz+B/fUHLmphw=\n=21rl\n-----END PGP SIGNATURE-----\n", "payload": "tree 03339444fa1f56b6549cca23822d119ee95f5d31\nparent aa49b79bda5b7cafbaa33c302a9974133d34c52b\nparent 208ad97fdc9427f1243ac170c1c25f9f7d6ae964\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577204926 +0000\ncommitter GitHub <noreply@github.com> 1577204926 +0000\n\nMerge #2661\n\n2661: Implement infer await from async function r=flodiebold a=edwin0cheng\n\nThis PR is my attempt for trying to add support for infer `.await` expression from an `async` function, by desugaring its return type to `Impl Future<Output=RetType>`.\r\n\r\nNote that I don't know it is supposed to desugaring it in that phase, if it is not suitable in current design, just feel free to reject it :)\r\n\r\nr=@flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921", "html_url": "https://github.com/rust-lang/rust/commit/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa49b79bda5b7cafbaa33c302a9974133d34c52b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa49b79bda5b7cafbaa33c302a9974133d34c52b", "html_url": "https://github.com/rust-lang/rust/commit/aa49b79bda5b7cafbaa33c302a9974133d34c52b"}, {"sha": "208ad97fdc9427f1243ac170c1c25f9f7d6ae964", "url": "https://api.github.com/repos/rust-lang/rust/commits/208ad97fdc9427f1243ac170c1c25f9f7d6ae964", "html_url": "https://github.com/rust-lang/rust/commit/208ad97fdc9427f1243ac170c1c25f9f7d6ae964"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "c900a6a183acf8c1eddc2cebc26decd069441012", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=3f7e5cde0b80b19095bf7e4d40f88d418a3c5921", "patch": "@@ -10,8 +10,9 @@ use ra_syntax::ast::{self, AstNode, ImplItem, ModuleItemOwner, NameOwner, TypeAs\n \n use crate::{\n     db::DefDatabase,\n+    path::{path, GenericArgs, Path},\n     src::HasSource,\n-    type_ref::{Mutability, TypeRef},\n+    type_ref::{Mutability, TypeBound, TypeRef},\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, Expander, FunctionId, FunctionLoc, HasModule,\n     ImplId, Intern, Lookup, ModuleId, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n@@ -62,11 +63,29 @@ impl FunctionData {\n             TypeRef::unit()\n         };\n \n+        let ret_type = if src.value.is_async() {\n+            let future_impl = desugar_future_path(ret_type);\n+            let ty_bound = TypeBound::Path(future_impl);\n+            TypeRef::ImplTrait(vec![ty_bound])\n+        } else {\n+            ret_type\n+        };\n+\n         let sig = FunctionData { name, params, ret_type, has_self_param };\n         Arc::new(sig)\n     }\n }\n \n+fn desugar_future_path(orig: TypeRef) -> Path {\n+    let path = path![std::future::Future];\n+    let mut generic_args: Vec<_> = std::iter::repeat(None).take(path.segments.len() - 1).collect();\n+    let mut last = GenericArgs::empty();\n+    last.bindings.push((name![Output], orig));\n+    generic_args.push(Some(Arc::new(last)));\n+\n+    Path::from_known_path(path, generic_args)\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TypeAliasData {\n     pub name: Name,"}, {"sha": "107d2d799f598245601357084d183526b8025a4e", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=3f7e5cde0b80b19095bf7e4d40f88d418a3c5921", "patch": "@@ -130,6 +130,14 @@ impl Path {\n         Path { type_anchor: None, mod_path: name_ref.as_name().into(), generic_args: vec![None] }\n     }\n \n+    /// Converts a known mod path to `Path`.\n+    pub(crate) fn from_known_path(\n+        path: ModPath,\n+        generic_args: Vec<Option<Arc<GenericArgs>>>,\n+    ) -> Path {\n+        Path { type_anchor: None, mod_path: path, generic_args }\n+    }\n+\n     pub fn kind(&self) -> &PathKind {\n         &self.mod_path.kind\n     }"}, {"sha": "32c0d07a59747380d90a7e53686ee45182f60e2d", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=3f7e5cde0b80b19095bf7e4d40f88d418a3c5921", "patch": "@@ -37,8 +37,8 @@ use test_utils::tested_by;\n use super::{\n     primitive::{FloatTy, IntTy},\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n-    ApplicationTy, InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor,\n-    TypeWalk, Uncertain,\n+    ApplicationTy, GenericPredicate, InEnvironment, ProjectionTy, Substs, TraitEnvironment,\n+    TraitRef, Ty, TypeCtor, TypeWalk, Uncertain,\n };\n use crate::{db::HirDatabase, infer::diagnostics::InferenceDiagnostic};\n \n@@ -379,6 +379,25 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     ) -> Ty {\n         match assoc_ty {\n             Some(res_assoc_ty) => {\n+                // FIXME:\n+                // Check if inner_ty is is `impl Trait` and contained input TypeAlias id\n+                // this is a workaround while Chalk assoc type projection doesn't always work yet,\n+                // but once that is fixed I don't think we should keep this\n+                // (we'll probably change how associated types are resolved anyway)\n+                if let Ty::Opaque(ref predicates) = inner_ty {\n+                    for p in predicates.iter() {\n+                        if let GenericPredicate::Projection(projection) = p {\n+                            if projection.projection_ty.associated_ty == res_assoc_ty {\n+                                if let ty_app!(_, params) = &projection.ty {\n+                                    if params.len() == 0 {\n+                                        return projection.ty.clone();\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n                 let ty = self.table.new_type_var();\n                 let builder = Substs::build_for_def(self.db, res_assoc_ty)\n                     .push(inner_ty)"}, {"sha": "0bc72644a3be4f54d5bba31926fdabadab5799a9", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=3f7e5cde0b80b19095bf7e4d40f88d418a3c5921", "patch": "@@ -37,6 +37,63 @@ mod future {\n     assert_eq!(\"u64\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_async() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+\n+async fn foo() -> u64 {\n+    128\n+}\n+\n+fn test() {\n+    let r = foo();\n+    let v = r.await;\n+    v<|>;\n+}\n+\n+//- /std.rs crate:std\n+#[prelude_import] use future::*;\n+mod future {\n+    trait Future {\n+        type Output;\n+    }\n+}\n+\n+\"#,\n+    );\n+    assert_eq!(\"u64\", type_at_pos(&db, pos));\n+}\n+\n+#[test]\n+fn infer_desugar_async() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+\n+async fn foo() -> u64 {\n+    128\n+}\n+\n+fn test() {\n+    let r = foo();\n+    r<|>;\n+}\n+\n+//- /std.rs crate:std\n+#[prelude_import] use future::*;\n+mod future {\n+    trait Future {\n+        type Output;\n+    }\n+}\n+\n+\"#,\n+    );\n+    assert_eq!(\"impl Future<Output = u64>\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_try() {\n     let (db, pos) = TestDB::with_position("}, {"sha": "baaef30234848fdc8413ad73cfdd5fc12c9951fb", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e5cde0b80b19095bf7e4d40f88d418a3c5921/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=3f7e5cde0b80b19095bf7e4d40f88d418a3c5921", "patch": "@@ -221,6 +221,10 @@ impl ast::FnDef {\n             .and_then(|it| it.into_token())\n             .filter(|it| it.kind() == T![;])\n     }\n+\n+    pub fn is_async(&self) -> bool {\n+        self.syntax().children_with_tokens().any(|it| it.kind() == T![async])\n+    }\n }\n \n impl ast::LetStmt {"}]}