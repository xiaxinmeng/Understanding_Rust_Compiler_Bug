{"sha": "bf420e58c2f88c8f37f83aaf947e7abba1cd7f79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNDIwZTU4YzJmODhjOGYzN2Y4M2FhZjk0N2U3YWJiYTFjZDdmNzk=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-07-05T07:42:58Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-05T00:43:47Z"}, "message": "Ensure that Registers struct is 16-byte aligned on x86_64.\nThis is important when building with --disable-jemalloc: unlike jemalloc,  msvcrt does not align on 16 bytes unless asked to.", "tree": {"sha": "9fd15b4d8c3981d6aa9fe61ffcc23c9aa5199def", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fd15b4d8c3981d6aa9fe61ffcc23c9aa5199def"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf420e58c2f88c8f37f83aaf947e7abba1cd7f79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf420e58c2f88c8f37f83aaf947e7abba1cd7f79", "html_url": "https://github.com/rust-lang/rust/commit/bf420e58c2f88c8f37f83aaf947e7abba1cd7f79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf420e58c2f88c8f37f83aaf947e7abba1cd7f79/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862ba430c5bc1ba9e47644d2a75a6091842c53d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/862ba430c5bc1ba9e47644d2a75a6091842c53d0", "html_url": "https://github.com/rust-lang/rust/commit/862ba430c5bc1ba9e47644d2a75a6091842c53d0"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "45f41181bf8c71be1c4a9f1fcd7def9892e4b5d4", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bf420e58c2f88c8f37f83aaf947e7abba1cd7f79/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf420e58c2f88c8f37f83aaf947e7abba1cd7f79/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=bf420e58c2f88c8f37f83aaf947e7abba1cd7f79", "patch": "@@ -13,6 +13,8 @@ use std::uint;\n use std::mem::transmute;\n use std::rt::stack;\n use std::raw;\n+#[cfg(target_arch = \"x86_64\")]\n+use std::simd;\n \n // FIXME #7761: Registers is boxed so that it is 16-byte aligned, for storing\n // SSE regs.  It would be marginally better not to do this. In C++ we\n@@ -186,14 +188,30 @@ fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n // windows requires saving more registers (both general and XMM), so the windows\n // register context must be larger.\n #[cfg(windows, target_arch = \"x86_64\")]\n-type Registers = [uint, ..34];\n+struct Registers {\n+    gpr:[uint, ..14],\n+    _xmm:[simd::u32x4, ..10]\n+}\n #[cfg(not(windows), target_arch = \"x86_64\")]\n-type Registers = [uint, ..22];\n+struct Registers {\n+    gpr:[uint, ..10],\n+    _xmm:[simd::u32x4, ..6]\n+}\n \n #[cfg(windows, target_arch = \"x86_64\")]\n-fn new_regs() -> Box<Registers> { box() ([0, .. 34]) }\n+fn new_regs() -> Box<Registers> {\n+    box() Registers {\n+        gpr:[0,..14],\n+        _xmm:[simd::u32x4(0,0,0,0),..10]\n+    }\n+}\n #[cfg(not(windows), target_arch = \"x86_64\")]\n-fn new_regs() -> Box<Registers> { box() ([0, .. 22]) }\n+fn new_regs() -> Box<Registers> {\n+    box() Registers {\n+        gpr:[0,..10],\n+        _xmm:[simd::u32x4(0,0,0,0),..6]\n+    }\n+}\n \n #[cfg(target_arch = \"x86_64\")]\n fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n@@ -222,20 +240,20 @@ fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n \n     // These registers are frobbed by rust_bootstrap_green_task into the right\n     // location so we can invoke the \"real init function\", `fptr`.\n-    regs[RUSTRT_R12] = arg as uint;\n-    regs[RUSTRT_R13] = procedure.code as uint;\n-    regs[RUSTRT_R14] = procedure.env as uint;\n-    regs[RUSTRT_R15] = fptr as uint;\n+    regs.gpr[RUSTRT_R12] = arg as uint;\n+    regs.gpr[RUSTRT_R13] = procedure.code as uint;\n+    regs.gpr[RUSTRT_R14] = procedure.env as uint;\n+    regs.gpr[RUSTRT_R15] = fptr as uint;\n \n     // These registers are picked up by the regular context switch paths. These\n     // will put us in \"mostly the right context\" except for frobbing all the\n     // arguments to the right place. We have the small trampoline code inside of\n     // rust_bootstrap_green_task to do that.\n-    regs[RUSTRT_RSP] = sp as uint;\n-    regs[RUSTRT_IP] = rust_bootstrap_green_task as uint;\n+    regs.gpr[RUSTRT_RSP] = sp as uint;\n+    regs.gpr[RUSTRT_IP] = rust_bootstrap_green_task as uint;\n \n     // Last base pointer on the stack should be 0\n-    regs[RUSTRT_RBP] = 0;\n+    regs.gpr[RUSTRT_RBP] = 0;\n }\n \n #[cfg(target_arch = \"arm\")]"}]}