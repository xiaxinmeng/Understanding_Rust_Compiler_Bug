{"sha": "4186037aaa1a6aa3ba15a10130b424e7508bd276", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxODYwMzdhYWExYTZhYTNiYTE1YTEwMTMwYjQyNGU3NTA4YmQyNzY=", "commit": {"author": {"name": "Segev Finer", "email": "segev208@gmail.com", "date": "2017-01-21T22:28:17Z"}, "committer": {"name": "Segev Finer", "email": "segev208@gmail.com", "date": "2017-01-24T21:10:00Z"}, "message": "Make backtraces work on Windows GNU targets again.\n\nThis is done by adding a function that can return a filename\nto pass to backtrace_create_state. The filename is obtained in\na safe way by first getting the filename, locking the file so it can't\nbe moved, and then getting the filename again and making sure it's the same.\n\nSee: https://github.com/rust-lang/rust/pull/37359#issuecomment-260123399\nIssue: #33985", "tree": {"sha": "ebd6d096512c8bf550f774dcf89dce910f9dccb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd6d096512c8bf550f774dcf89dce910f9dccb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4186037aaa1a6aa3ba15a10130b424e7508bd276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4186037aaa1a6aa3ba15a10130b424e7508bd276", "html_url": "https://github.com/rust-lang/rust/commit/4186037aaa1a6aa3ba15a10130b424e7508bd276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4186037aaa1a6aa3ba15a10130b424e7508bd276/comments", "author": {"login": "segevfiner", "id": 24731903, "node_id": "MDQ6VXNlcjI0NzMxOTAz", "avatar_url": "https://avatars.githubusercontent.com/u/24731903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segevfiner", "html_url": "https://github.com/segevfiner", "followers_url": "https://api.github.com/users/segevfiner/followers", "following_url": "https://api.github.com/users/segevfiner/following{/other_user}", "gists_url": "https://api.github.com/users/segevfiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/segevfiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segevfiner/subscriptions", "organizations_url": "https://api.github.com/users/segevfiner/orgs", "repos_url": "https://api.github.com/users/segevfiner/repos", "events_url": "https://api.github.com/users/segevfiner/events{/privacy}", "received_events_url": "https://api.github.com/users/segevfiner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segevfiner", "id": 24731903, "node_id": "MDQ6VXNlcjI0NzMxOTAz", "avatar_url": "https://avatars.githubusercontent.com/u/24731903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segevfiner", "html_url": "https://github.com/segevfiner", "followers_url": "https://api.github.com/users/segevfiner/followers", "following_url": "https://api.github.com/users/segevfiner/following{/other_user}", "gists_url": "https://api.github.com/users/segevfiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/segevfiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segevfiner/subscriptions", "organizations_url": "https://api.github.com/users/segevfiner/orgs", "repos_url": "https://api.github.com/users/segevfiner/repos", "events_url": "https://api.github.com/users/segevfiner/events{/privacy}", "received_events_url": "https://api.github.com/users/segevfiner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe597dc9a9f325de9b2b11d69e190e1c22c4e7dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe597dc9a9f325de9b2b11d69e190e1c22c4e7dc", "html_url": "https://github.com/rust-lang/rust/commit/fe597dc9a9f325de9b2b11d69e190e1c22c4e7dc"}], "stats": {"total": 147, "additions": 140, "deletions": 7}, "files": [{"sha": "e3f1b23f7a24be3452f5445688fc34eb2293b673", "filename": "src/libstd/sys/unix/backtrace/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs?ref=4186037aaa1a6aa3ba15a10130b424e7508bd276", "patch": "@@ -83,9 +83,16 @@\n /// to symbols. This is a bit of a hokey implementation as-is, but it works for\n /// all unix platforms we support right now, so it at least gets the job done.\n \n+use io;\n+use fs;\n+\n pub use self::tracing::write;\n \n // tracing impls:\n mod tracing;\n // symbol resolvers:\n mod printing;\n+\n+pub fn get_executable_filename() -> io::Result<(Vec<i8>, fs::File)> {\n+    Err(io::Error::new(io::ErrorKind::Other, \"Not implemented\"))\n+}"}, {"sha": "e6182cda58a2802f11fdf5028bbca57f90845ff5", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=4186037aaa1a6aa3ba15a10130b424e7508bd276", "patch": "@@ -30,9 +30,13 @@ use io;\n use libc::c_void;\n use mem;\n use ptr;\n+use path::PathBuf;\n+use fs::{OpenOptions, File};\n+use sys::ext::fs::OpenOptionsExt;\n use sys::c;\n use sys::dynamic_lib::DynamicLibrary;\n use sys::mutex::Mutex;\n+use sys::handle::Handle;\n \n macro_rules! sym {\n     ($lib:expr, $e:expr, $t:ident) => (\n@@ -157,3 +161,47 @@ unsafe fn _write(w: &mut Write) -> io::Result<()> {\n \n     Ok(())\n }\n+\n+fn query_full_process_image_name() -> io::Result<PathBuf> {\n+    unsafe {\n+        let process_handle = Handle::new(c::OpenProcess(c::PROCESS_QUERY_INFORMATION,\n+                                                        c::FALSE,\n+                                                        c::GetCurrentProcessId()));\n+        super::fill_utf16_buf(|buf, mut sz| {\n+            if c::QueryFullProcessImageNameW(process_handle.raw(), 0, buf, &mut sz) == 0 {\n+                0\n+            } else {\n+                sz\n+            }\n+        }, super::os2path)\n+    }\n+}\n+\n+fn lock_and_get_executable_filename() -> io::Result<(PathBuf, File)> {\n+    // We query the current image name, open the file without FILE_SHARE_DELETE so it\n+    // can't be moved and then get the current image name again. If the names are the\n+    // same than we have successfully locked the file\n+    let image_name1 = query_full_process_image_name()?;\n+    let file = OpenOptions::new()\n+                .read(true)\n+                .share_mode(c::FILE_SHARE_READ | c::FILE_SHARE_WRITE)\n+                .open(&image_name1)?;\n+    let image_name2 = query_full_process_image_name()?;\n+\n+    if image_name1 != image_name2 {\n+        return Err(io::Error::new(io::ErrorKind::Other,\n+                                  \"executable moved while trying to lock it\"));\n+    }\n+\n+    Ok((image_name1, file))\n+}\n+\n+// Get the executable filename for libbacktrace\n+// This returns the path in the ANSI code page and a File which should remain open\n+// for as long as the path should remain valid\n+pub fn get_executable_filename() -> io::Result<(Vec<i8>, File)> {\n+    let (executable, file) = lock_and_get_executable_filename()?;\n+    let u16_executable = super::to_u16s(executable.into_os_string())?;\n+    Ok((super::wide_char_to_multi_byte(c::CP_ACP, c::WC_NO_BEST_FIT_CHARS,\n+                                       &u16_executable, true)?, file))\n+}"}, {"sha": "c6fac6d1759b1b8327baf9e8f81c84b53a298f6d", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=4186037aaa1a6aa3ba15a10130b424e7508bd276", "patch": "@@ -69,6 +69,7 @@ pub type LPWCH = *mut WCHAR;\n pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n pub type LPWSADATA = *mut WSADATA;\n pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n+pub type LPSTR = *mut CHAR;\n pub type LPWSTR = *mut WCHAR;\n pub type LPFILETIME = *mut FILETIME;\n \n@@ -157,6 +158,7 @@ pub const WSAECONNREFUSED: c_int = 10061;\n \n pub const MAX_PROTOCOL_CHAIN: DWORD = 7;\n \n+pub const PROCESS_QUERY_INFORMATION: DWORD = 0x0400;\n pub const TOKEN_READ: DWORD = 0x20008;\n pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: usize = 16 * 1024;\n pub const FSCTL_GET_REPARSE_POINT: DWORD = 0x900a8;\n@@ -218,6 +220,10 @@ pub const CREATE_NEW_PROCESS_GROUP: DWORD = 0x00000200;\n pub const CREATE_UNICODE_ENVIRONMENT: DWORD = 0x00000400;\n pub const STARTF_USESTDHANDLES: DWORD = 0x00000100;\n \n+pub const CP_ACP: UINT = 0;\n+\n+pub const WC_NO_BEST_FIT_CHARS: DWORD = 0x00000400;\n+\n pub const AF_INET: c_int = 2;\n pub const AF_INET6: c_int = 23;\n pub const SD_BOTH: c_int = 2;\n@@ -888,6 +894,9 @@ extern \"system\" {\n                               pNumArgs: *mut c_int) -> *mut *mut u16;\n     pub fn GetTempPathW(nBufferLength: DWORD,\n                         lpBuffer: LPCWSTR) -> DWORD;\n+    pub fn OpenProcess(dwDesiredAccess: DWORD,\n+                       bInheritHandle: BOOL,\n+                       dwProcessId: DWORD) -> HANDLE;\n     pub fn OpenProcessToken(ProcessHandle: HANDLE,\n                             DesiredAccess: DWORD,\n                             TokenHandle: *mut HANDLE) -> BOOL;\n@@ -973,6 +982,14 @@ extern \"system\" {\n     pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn GetCurrentDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) -> DWORD;\n     pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+    pub fn WideCharToMultiByte(CodePage: UINT,\n+                               dwFlags: DWORD,\n+                               lpWideCharStr: LPCWSTR,\n+                               cchWideChar: c_int,\n+                               lpMultiByteStr: LPSTR,\n+                               cbMultiByte: c_int,\n+                               lpDefaultChar: LPCSTR,\n+                               lpUsedDefaultChar: LPBOOL) -> c_int;\n \n     pub fn closesocket(socket: SOCKET) -> c_int;\n     pub fn recv(socket: SOCKET, buf: *mut c_void, len: c_int,\n@@ -1136,6 +1153,12 @@ compat_fn! {\n                                      _dwFlags: DWORD) -> DWORD {\n         SetLastError(ERROR_CALL_NOT_IMPLEMENTED as DWORD); 0\n     }\n+    pub fn QueryFullProcessImageNameW(_hProcess: HANDLE,\n+                                      _dwFlags: DWORD,\n+                                      _lpExeName: LPWSTR,\n+                                      _lpdwSize: LPDWORD) -> BOOL {\n+        SetLastError(ERROR_CALL_NOT_IMPLEMENTED as DWORD); 0\n+    }\n     pub fn SetThreadStackGuarantee(_size: *mut c_ulong) -> BOOL {\n         SetLastError(ERROR_CALL_NOT_IMPLEMENTED as DWORD); 0\n     }"}, {"sha": "4468cf574b38a3af36a4ea8c2e89d5a38111d257", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=4186037aaa1a6aa3ba15a10130b424e7508bd276", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(missing_docs, bad_style)]\n \n+use ptr;\n use ffi::{OsStr, OsString};\n use io::{self, ErrorKind};\n use os::windows::ffi::{OsStrExt, OsStringExt};\n@@ -171,6 +172,51 @@ fn os2path(s: &[u16]) -> PathBuf {\n     PathBuf::from(OsString::from_wide(s))\n }\n \n+fn wide_char_to_multi_byte(code_page: u32,\n+                           flags: u32,\n+                           s: &[u16],\n+                           no_default_char: bool)\n+                           -> io::Result<Vec<i8>> {\n+    unsafe {\n+        let mut size = c::WideCharToMultiByte(code_page,\n+                                              flags,\n+                                              s.as_ptr(),\n+                                              s.len() as i32,\n+                                              ptr::null_mut(),\n+                                              0,\n+                                              ptr::null(),\n+                                              ptr::null_mut());\n+        if size == 0 {\n+            return Err(io::Error::last_os_error());\n+        }\n+\n+        let mut buf = Vec::with_capacity(size as usize);\n+        buf.set_len(size as usize);\n+\n+        let mut used_default_char = c::FALSE;\n+        size = c::WideCharToMultiByte(code_page,\n+                                      flags,\n+                                      s.as_ptr(),\n+                                      s.len() as i32,\n+                                      buf.as_mut_ptr(),\n+                                      buf.len() as i32,\n+                                      ptr::null(),\n+                                      if no_default_char { &mut used_default_char }\n+                                      else { ptr::null_mut() });\n+        if size == 0 {\n+            return Err(io::Error::last_os_error());\n+        }\n+        if no_default_char && used_default_char == c::TRUE {\n+            return Err(io::Error::new(io::ErrorKind::InvalidData,\n+                                      \"string cannot be converted to requested code page\"));\n+        }\n+\n+        buf.set_len(size as usize);\n+\n+        Ok(buf)\n+    }\n+}\n+\n pub fn truncate_utf16_at_nul<'a>(v: &'a [u16]) -> &'a [u16] {\n     match v.iter().position(|c| *c == 0) {\n         // don't include the 0"}, {"sha": "94d206f3ac3c16596c36e264d50563190db857cb", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=4186037aaa1a6aa3ba15a10130b424e7508bd276", "patch": "@@ -16,6 +16,7 @@ use sys_common::backtrace::{output, output_fileline};\n pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n              symaddr: *mut libc::c_void) -> io::Result<()> {\n     use ffi::CStr;\n+    use mem;\n     use ptr;\n \n     ////////////////////////////////////////////////////////////////////////\n@@ -124,7 +125,21 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n     unsafe fn init_state() -> *mut backtrace_state {\n         static mut STATE: *mut backtrace_state = ptr::null_mut();\n         if !STATE.is_null() { return STATE }\n-        STATE = backtrace_create_state(ptr::null(), 0, error_cb,\n+\n+        let filename = match ::sys::backtrace::get_executable_filename() {\n+            Ok((filename, file)) => {\n+                // filename is purposely leaked here since libbacktrace requires\n+                // it to stay allocated permanently, file is also leaked so that\n+                // the file stays locked\n+                let filename_ptr = filename.as_ptr();\n+                mem::forget(filename);\n+                mem::forget(file);\n+                filename_ptr\n+            },\n+            Err(_) => ptr::null(),\n+        };\n+\n+        STATE = backtrace_create_state(filename, 0, error_cb,\n                                        ptr::null_mut());\n         STATE\n     }"}, {"sha": "626eccfc9ec866ef56411ecc47245c6cc5522dd5", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=4186037aaa1a6aa3ba15a10130b424e7508bd276", "patch": "@@ -37,7 +37,6 @@ macro_rules! dump_and_die {\n                     target_os = \"ios\",\n                     target_os = \"android\",\n                     all(target_os = \"linux\", target_arch = \"arm\"),\n-                    target_os = \"windows\",\n                     target_os = \"freebsd\",\n                     target_os = \"dragonfly\",\n                     target_os = \"bitrig\",\n@@ -173,4 +172,3 @@ fn main() {\n         run_test(&args[0]);\n     }\n }\n-"}, {"sha": "834ce984e6632e50678d4358f50947dafd333037", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4186037aaa1a6aa3ba15a10130b424e7508bd276/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=4186037aaa1a6aa3ba15a10130b424e7508bd276", "patch": "@@ -104,10 +104,6 @@ fn runtest(me: &str) {\n }\n \n fn main() {\n-    if cfg!(windows) && cfg!(target_env = \"gnu\") {\n-        return\n-    }\n-\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 && args[1] == \"fail\" {\n         foo();"}]}