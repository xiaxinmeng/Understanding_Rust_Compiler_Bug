{"sha": "5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMTlmZmUxYzJiOTlkOWUwOTcwNmNjMjg2YWFkMWVjMDg2OGVkZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T19:47:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T19:47:03Z"}, "message": "Auto merge of #86492 - hyd-dev:no-mangle-method, r=petrochenkov\n\nAssociated functions that contain extern indicator or have `#[rustc_std_internal_symbol]` are reachable\n\nPreviously these fails to link with ``undefined reference to `foo'``:\n\n<details>\n<summary>Example 1</summary>\n\n```rs\nstruct AssocFn;\n\nimpl AssocFn {\n    #[no_mangle]\n    fn foo() {}\n}\n\nfn main() {\n    extern \"Rust\" {\n        fn foo();\n    }\n    unsafe { foo() }\n}\n```\n([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=f1244afcdd26e2a28445f6e82ca46b50))\n</details>\n\n<details>\n<summary>Example 2</summary>\n\n```rs\n#![crate_name = \"lib\"]\n#![crate_type = \"lib\"]\n\nstruct AssocFn;\n\nimpl AssocFn {\n    #[no_mangle]\n    fn foo() {}\n}\n```\n```rs\nextern crate lib;\n\nfn main() {\n    extern \"Rust\" {\n        fn foo();\n    }\n    unsafe { foo() }\n}\n```\n</details>\n\nBut I believe they should link successfully, because this works:\n<details>\n\n```rs\n#[no_mangle]\nfn foo() {}\n\nfn main() {\n    extern \"Rust\" {\n        fn foo();\n    }\n    unsafe { foo() }\n}\n```\n([Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=789b3f283ee6126f53939429103ed98d))\n</details>\n\nThis PR fixes the problem, by adding associated functions that have \"custom linkage\" to `reachable_set`, just like normal functions.\n\nI haven't tested whether #76211 and [Miri](https://github.com/rust-lang/miri/issues/1837) are fixed by this PR yet, but I'm submitting this anyway since this fixes the examples above.\n\nI added a `run-pass` test that combines my two examples above, but I'm not sure if that's the right way to test this. Maybe I should add / modify an existing codegen test (`src/test/codegen/export-no-mangle.rs`?) instead?", "tree": {"sha": "4f39aa4b65a80804fa33d7fea72d15830494934a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f39aa4b65a80804fa33d7fea72d15830494934a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "html_url": "https://github.com/rust-lang/rust/commit/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "881aeab7b1f42947ee095976c9a8b97544ca5051", "url": "https://api.github.com/repos/rust-lang/rust/commits/881aeab7b1f42947ee095976c9a8b97544ca5051", "html_url": "https://github.com/rust-lang/rust/commit/881aeab7b1f42947ee095976c9a8b97544ca5051"}, {"sha": "9315a0cd4c3b9568e66cf613fecad1bfac214f53", "url": "https://api.github.com/repos/rust-lang/rust/commits/9315a0cd4c3b9568e66cf613fecad1bfac214f53", "html_url": "https://github.com/rust-lang/rust/commit/9315a0cd4c3b9568e66cf613fecad1bfac214f53"}], "stats": {"total": 1171, "additions": 920, "deletions": 251}, "files": [{"sha": "0bdc4258bfbc365703d5af9b97be6e53b50c8f70", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -1499,6 +1499,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {\n+        if self.session.contains_name(&item.attrs, sym::no_mangle) {\n+            self.check_nomangle_item_asciionly(item.ident, item.span);\n+        }\n+\n         if ctxt == AssocCtxt::Trait || !self.in_trait_impl {\n             self.check_defaultness(item.span, item.kind.defaultness());\n         }"}, {"sha": "77c7040e6a76dafed5533b200ffd359ddb2542cf", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 64, "deletions": 22, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -417,6 +417,25 @@ impl EarlyLintPass for UnsafeCode {\n         }\n     }\n \n+    fn check_impl_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n+        if let ast::AssocItemKind::Fn(..) = it.kind {\n+            if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n+                self.report_overriden_symbol_name(\n+                    cx,\n+                    attr.span,\n+                    \"declaration of a `no_mangle` method\",\n+                );\n+            }\n+            if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n+                self.report_overriden_symbol_name(\n+                    cx,\n+                    attr.span,\n+                    \"declaration of a method with `export_name`\",\n+                );\n+            }\n+        }\n+    }\n+\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, fk: FnKind<'_>, span: Span, _: ast::NodeId) {\n         if let FnKind::Fn(\n             ctxt,\n@@ -1115,31 +1134,37 @@ declare_lint_pass!(InvalidNoMangleItems => [NO_MANGLE_CONST_ITEMS, NO_MANGLE_GEN\n impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n+        let check_no_mangle_on_generic_fn = |no_mangle_attr: &ast::Attribute,\n+                                             impl_generics: Option<&hir::Generics<'_>>,\n+                                             generics: &hir::Generics<'_>,\n+                                             span| {\n+            for param in\n+                generics.params.iter().chain(impl_generics.map(|g| g.params).into_iter().flatten())\n+            {\n+                match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {}\n+                    GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n+                        cx.struct_span_lint(NO_MANGLE_GENERIC_ITEMS, span, |lint| {\n+                            lint.build(\"functions generic over types or consts must be mangled\")\n+                                .span_suggestion_short(\n+                                    no_mangle_attr.span,\n+                                    \"remove this attribute\",\n+                                    String::new(),\n+                                    // Use of `#[no_mangle]` suggests FFI intent; correct\n+                                    // fix may be to monomorphize source by hand\n+                                    Applicability::MaybeIncorrect,\n+                                )\n+                                .emit();\n+                        });\n+                        break;\n+                    }\n+                }\n+            }\n+        };\n         match it.kind {\n             hir::ItemKind::Fn(.., ref generics, _) => {\n                 if let Some(no_mangle_attr) = cx.sess().find_by_name(attrs, sym::no_mangle) {\n-                    for param in generics.params {\n-                        match param.kind {\n-                            GenericParamKind::Lifetime { .. } => {}\n-                            GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n-                                cx.struct_span_lint(NO_MANGLE_GENERIC_ITEMS, it.span, |lint| {\n-                                    lint.build(\n-                                        \"functions generic over types or consts must be mangled\",\n-                                    )\n-                                    .span_suggestion_short(\n-                                        no_mangle_attr.span,\n-                                        \"remove this attribute\",\n-                                        String::new(),\n-                                        // Use of `#[no_mangle]` suggests FFI intent; correct\n-                                        // fix may be to monomorphize source by hand\n-                                        Applicability::MaybeIncorrect,\n-                                    )\n-                                    .emit();\n-                                });\n-                                break;\n-                            }\n-                        }\n-                    }\n+                    check_no_mangle_on_generic_fn(no_mangle_attr, None, generics, it.span);\n                 }\n             }\n             hir::ItemKind::Const(..) => {\n@@ -1170,6 +1195,23 @@ impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n                     });\n                 }\n             }\n+            hir::ItemKind::Impl(hir::Impl { ref generics, items, .. }) => {\n+                for it in items {\n+                    if let hir::AssocItemKind::Fn { .. } = it.kind {\n+                        if let Some(no_mangle_attr) = cx\n+                            .sess()\n+                            .find_by_name(cx.tcx.hir().attrs(it.id.hir_id()), sym::no_mangle)\n+                        {\n+                            check_no_mangle_on_generic_fn(\n+                                no_mangle_attr,\n+                                Some(generics),\n+                                cx.tcx.hir().get_generics(it.id.def_id.to_def_id()).unwrap(),\n+                                it.span,\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "7f71923c91a7fc00849e63defc040b9cc06ff923", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -391,9 +391,14 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n         _: Span,\n         id: hir::HirId,\n     ) {\n+        let attrs = cx.tcx.hir().attrs(id);\n         match &fk {\n-            FnKind::Method(ident, ..) => match method_context(cx, id) {\n+            FnKind::Method(ident, sig, ..) => match method_context(cx, id) {\n                 MethodLateContext::PlainImpl => {\n+                    if sig.header.abi != Abi::Rust && cx.sess().contains_name(attrs, sym::no_mangle)\n+                    {\n+                        return;\n+                    }\n                     self.check_snake_case(cx, \"method\", ident);\n                 }\n                 MethodLateContext::TraitAutoImpl => {\n@@ -402,7 +407,6 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n                 _ => (),\n             },\n             FnKind::ItemFn(ident, _, header, _) => {\n-                let attrs = cx.tcx.hir().attrs(id);\n                 // Skip foreign-ABI #[no_mangle] functions (Issue #31924)\n                 if header.abi != Abi::Rust && cx.sess().contains_name(attrs, sym::no_mangle) {\n                     return;"}, {"sha": "7cca11f20bb9f687774a0c52bf8eed2db25b44d1", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -962,6 +962,10 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    fn is_impl_item(&self, hir_id: HirId) -> bool {\n+        matches!(self.tcx.hir().get(hir_id), hir::Node::ImplItem(..))\n+    }\n+\n     /// Checks if `#[export_name]` is applied to a function or static. Returns `true` if valid.\n     fn check_export_name(\n         &self,\n@@ -971,7 +975,8 @@ impl CheckAttrVisitor<'tcx> {\n         target: Target,\n     ) -> bool {\n         match target {\n-            Target::Static | Target::Fn | Target::Method(..) => true,\n+            Target::Static | Target::Fn => true,\n+            Target::Method(..) if self.is_impl_item(hir_id) => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[export_name]` attribute with just a lint, because we previously\n             // erroneously allowed it and some crates used it accidentally, to to be compatible\n@@ -985,9 +990,9 @@ impl CheckAttrVisitor<'tcx> {\n                     .sess\n                     .struct_span_err(\n                         attr.span,\n-                        \"attribute should be applied to a function or static\",\n+                        \"attribute should be applied to a free function, impl method or static\",\n                     )\n-                    .span_label(*span, \"not a function or static\")\n+                    .span_label(*span, \"not a free function, impl method or static\")\n                     .emit();\n                 false\n             }\n@@ -1169,7 +1174,8 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks if `#[no_mangle]` is applied to a function or static.\n     fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {\n-            Target::Static | Target::Fn | Target::Method(..) => {}\n+            Target::Static | Target::Fn => {}\n+            Target::Method(..) if self.is_impl_item(hir_id) => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[no_mangle]` attribute with just a lint, because we previously\n             // erroneously allowed it and some crates used it accidentally, to to be compatible\n@@ -1181,14 +1187,16 @@ impl CheckAttrVisitor<'tcx> {\n                 // FIXME: #[no_mangle] was previously allowed on non-functions/statics and some\n                 // crates used this, so only emit a warning.\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n-                    lint.build(\"attribute should be applied to a function or static\")\n-                        .warn(\n-                            \"this was previously accepted by the compiler but is \\\n-                             being phased out; it will become a hard error in \\\n-                             a future release!\",\n-                        )\n-                        .span_label(*span, \"not a function or static\")\n-                        .emit();\n+                    lint.build(\n+                        \"attribute should be applied to a free function, impl method or static\",\n+                    )\n+                    .warn(\n+                        \"this was previously accepted by the compiler but is \\\n+                         being phased out; it will become a hard error in \\\n+                         a future release!\",\n+                    )\n+                    .span_label(*span, \"not a free function, impl method or static\")\n+                    .emit();\n                 });\n             }\n         }"}, {"sha": "963153a01a080e3f785e28b5338077ae89c90ff3", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -211,13 +211,15 @@ impl<'tcx> ReachableContext<'tcx> {\n         if !self.any_library {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n-            if let Node::Item(item) = *node {\n-                let reachable = if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n-                    sig.header.abi != Abi::Rust\n-                } else {\n-                    false\n-                };\n-                let codegen_attrs = self.tcx.codegen_fn_attrs(item.def_id);\n+            if let Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, ..), def_id, .. })\n+            | Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Fn(sig, ..),\n+                def_id,\n+                ..\n+            }) = *node\n+            {\n+                let reachable = sig.header.abi != Abi::Rust;\n+                let codegen_attrs = self.tcx.codegen_fn_attrs(*def_id);\n                 let is_extern = codegen_attrs.contains_extern_indicator();\n                 let std_internal =\n                     codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n@@ -335,17 +337,23 @@ struct CollectPrivateImplItemsVisitor<'a, 'tcx> {\n     worklist: &'a mut Vec<LocalDefId>,\n }\n \n-impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n+impl CollectPrivateImplItemsVisitor<'_, '_> {\n+    fn push_to_worklist_if_has_custom_linkage(&mut self, def_id: LocalDefId) {\n         // Anything which has custom linkage gets thrown on the worklist no\n         // matter where it is in the crate, along with \"special std symbols\"\n         // which are currently akin to allocator symbols.\n-        let codegen_attrs = self.tcx.codegen_fn_attrs(item.def_id);\n+        let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n         if codegen_attrs.contains_extern_indicator()\n             || codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n         {\n-            self.worklist.push(item.def_id);\n+            self.worklist.push(def_id);\n         }\n+    }\n+}\n+\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n+        self.push_to_worklist_if_has_custom_linkage(item.def_id);\n \n         // We need only trait impls here, not inherent impls, and only non-exported ones\n         if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref trait_ref), ref items, .. }) =\n@@ -375,8 +383,8 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n \n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n-        // processed in visit_item above\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n+        self.push_to_worklist_if_has_custom_linkage(impl_item.def_id);\n     }\n \n     fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {"}, {"sha": "7fc73c76cc92a7448f9685fb00476460382de1ab", "filename": "src/test/ui/auxiliary/no-mangle-associated-fn.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fauxiliary%2Fno-mangle-associated-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fauxiliary%2Fno-mangle-associated-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fno-mangle-associated-fn.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -0,0 +1,21 @@\n+#![crate_type = \"lib\"]\n+\n+struct Bar;\n+\n+impl Bar {\n+    #[no_mangle]\n+    fn bar() -> u8 {\n+        2\n+    }\n+}\n+\n+trait Foo {\n+    fn baz() -> u8;\n+}\n+\n+impl Foo for Bar {\n+    #[no_mangle]\n+    fn baz() -> u8 {\n+        3\n+    }\n+}"}, {"sha": "44abe160f87168d499d3361b9f89e2355cc249e1", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs-error.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -1,5 +1,5 @@\n //~ NOTE: not an `extern crate` item\n-//~^ NOTE: not a function or static\n+//~^ NOTE: not a free function, impl method or static\n //~^^ NOTE: not a function or closure\n // This is testing whether various builtin attributes signals an\n // error or warning when put in \"weird\" places.\n@@ -25,7 +25,7 @@\n #![no_link]\n //~^ ERROR: attribute should be applied to an `extern crate` item\n #![export_name = \"2200\"]\n-//~^ ERROR: attribute should be applied to a function or static\n+//~^ ERROR: attribute should be applied to a free function, impl method or static\n #![inline]\n //~^ ERROR: attribute should be applied to function or closure\n #[inline]\n@@ -83,27 +83,37 @@ mod no_link {\n }\n \n #[export_name = \"2200\"]\n-//~^ ERROR attribute should be applied to a function or static\n+//~^ ERROR attribute should be applied to a free function, impl method or static\n mod export_name {\n-    //~^ NOTE not a function or static\n+    //~^ NOTE not a free function, impl method or static\n \n     mod inner { #![export_name=\"2200\"] }\n-    //~^ ERROR attribute should be applied to a function or static\n-    //~| NOTE not a function or static\n+    //~^ ERROR attribute should be applied to a free function, impl method or static\n+    //~| NOTE not a free function, impl method or static\n \n     #[export_name = \"2200\"] fn f() { }\n \n     #[export_name = \"2200\"] struct S;\n-    //~^ ERROR attribute should be applied to a function or static\n-    //~| NOTE not a function or static\n+    //~^ ERROR attribute should be applied to a free function, impl method or static\n+    //~| NOTE not a free function, impl method or static\n \n     #[export_name = \"2200\"] type T = S;\n-    //~^ ERROR attribute should be applied to a function or static\n-    //~| NOTE not a function or static\n+    //~^ ERROR attribute should be applied to a free function, impl method or static\n+    //~| NOTE not a free function, impl method or static\n \n     #[export_name = \"2200\"] impl S { }\n-    //~^ ERROR attribute should be applied to a function or static\n-    //~| NOTE not a function or static\n+    //~^ ERROR attribute should be applied to a free function, impl method or static\n+    //~| NOTE not a free function, impl method or static\n+\n+    trait Tr {\n+        #[export_name = \"2200\"] fn foo();\n+        //~^ ERROR attribute should be applied to a free function, impl method or static\n+        //~| NOTE not a free function, impl method or static\n+\n+        #[export_name = \"2200\"] fn bar() {}\n+        //~^ ERROR attribute should be applied to a free function, impl method or static\n+        //~| NOTE not a free function, impl method or static\n+    }\n }\n \n #[start]"}, {"sha": "aed1312155db57d597fbdc6bc667db6f9645a57e", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs-error.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -17,31 +17,31 @@ LL |     #[inline = \"2100\"] fn f() { }\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n error: `start` attribute can only be used on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:109:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:119:1\n    |\n LL | #[start]\n    | ^^^^^^^^\n \n error: `start` attribute can only be used on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:112:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:122:17\n    |\n LL |     mod inner { #![start] }\n    |                 ^^^^^^^^^\n \n error: `start` attribute can only be used on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:117:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:127:5\n    |\n LL |     #[start] struct S;\n    |     ^^^^^^^^\n \n error: `start` attribute can only be used on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:120:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:130:5\n    |\n LL |     #[start] type T = S;\n    |     ^^^^^^^^\n \n error: `start` attribute can only be used on functions\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:123:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:133:5\n    |\n LL |     #[start] impl S { }\n    |     ^^^^^^^^\n@@ -76,7 +76,7 @@ LL | |\n LL | | }\n    | |_- not an `extern crate` item\n \n-error: attribute should be applied to a function or static\n+error: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:85:1\n    |\n LL |   #[export_name = \"2200\"]\n@@ -87,17 +87,17 @@ LL | |\n LL | |\n LL | |     mod inner { #![export_name=\"2200\"] }\n ...  |\n-LL | |\n+LL | |     }\n LL | | }\n-   | |_- not a function or static\n+   | |_- not a free function, impl method or static\n \n error: attribute should be applied to an `extern crate` item\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:25:1\n    |\n LL | #![no_link]\n    | ^^^^^^^^^^^\n \n-error: attribute should be applied to a function or static\n+error: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:27:1\n    |\n LL | #![export_name = \"2200\"]\n@@ -199,31 +199,43 @@ error: attribute should be applied to an `extern crate` item\n LL |     #[no_link] impl S { }\n    |     ^^^^^^^^^^ ---------- not an `extern crate` item\n \n-error: attribute should be applied to a function or static\n+error: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:90:17\n    |\n LL |     mod inner { #![export_name=\"2200\"] }\n-   |     ------------^^^^^^^^^^^^^^^^^^^^^^-- not a function or static\n+   |     ------------^^^^^^^^^^^^^^^^^^^^^^-- not a free function, impl method or static\n \n-error: attribute should be applied to a function or static\n+error: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:96:5\n    |\n LL |     #[export_name = \"2200\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ --------- not a function or static\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ --------- not a free function, impl method or static\n \n-error: attribute should be applied to a function or static\n+error: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:100:5\n    |\n LL |     #[export_name = \"2200\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a function or static\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a free function, impl method or static\n \n-error: attribute should be applied to a function or static\n+error: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:104:5\n    |\n LL |     #[export_name = \"2200\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a function or static\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a free function, impl method or static\n+\n+error: attribute should be applied to a free function, impl method or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:109:9\n+   |\n+LL |         #[export_name = \"2200\"] fn foo();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ --------- not a free function, impl method or static\n+\n+error: attribute should be applied to a free function, impl method or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:113:9\n+   |\n+LL |         #[export_name = \"2200\"] fn bar() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a free function, impl method or static\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 34 previous errors\n \n Some errors have detailed explanations: E0518, E0658.\n For more information about an error, try `rustc --explain E0518`."}, {"sha": "b30ab446d7a01a444fbb7a302bbabd7bfbe6d923", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -295,31 +295,43 @@ mod automatically_derived {\n }\n \n #[no_mangle]\n-//~^ WARN attribute should be applied to a function or static [unused_attributes]\n+//~^ WARN attribute should be applied to a free function, impl method or static [unused_attributes]\n //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n mod no_mangle {\n-    //~^ NOTE not a function or static\n+    //~^ NOTE not a free function, impl method or static\n     mod inner { #![no_mangle] }\n-    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~^ WARN attribute should be applied to a free function, impl method or static [unused_attributes]\n     //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-    //~| NOTE not a function or static\n+    //~| NOTE not a free function, impl method or static\n \n     #[no_mangle] fn f() { }\n \n     #[no_mangle] struct S;\n-    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~^ WARN attribute should be applied to a free function, impl method or static [unused_attributes]\n     //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-    //~| NOTE not a function or static\n+    //~| NOTE not a free function, impl method or static\n \n     #[no_mangle] type T = S;\n-    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~^ WARN attribute should be applied to a free function, impl method or static [unused_attributes]\n     //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-    //~| NOTE not a function or static\n+    //~| NOTE not a free function, impl method or static\n \n     #[no_mangle] impl S { }\n-    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~^ WARN attribute should be applied to a free function, impl method or static [unused_attributes]\n     //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-    //~| NOTE not a function or static\n+    //~| NOTE not a free function, impl method or static\n+\n+    trait Tr {\n+        #[no_mangle] fn foo();\n+        //~^ WARN attribute should be applied to a free function, impl method or static [unused_attributes]\n+        //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+        //~| NOTE not a free function, impl method or static\n+\n+        #[no_mangle] fn bar() {}\n+        //~^ WARN attribute should be applied to a free function, impl method or static [unused_attributes]\n+        //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+        //~| NOTE not a free function, impl method or static\n+    }\n }\n \n #[should_panic]"}, {"sha": "b0fc71c8a62ceb00a363562339ce6934137fb46e", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 160, "deletions": 144, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -173,15 +173,15 @@ LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n    = help: try an outer attribute: `#[macro_use]`\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:402:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n@@ -200,7 +200,7 @@ warning: use of deprecated attribute `no_start`: no longer used.\n LL | #![no_start]\n    | ^^^^^^^^^^^^ help: remove this attribute\n \n-warning: attribute should be applied to a function or static\n+warning: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:297:1\n    |\n LL |   #[no_mangle]\n@@ -211,9 +211,9 @@ LL | |\n LL | |     mod inner { #![no_mangle] }\n LL | |\n ...  |\n-LL | |\n+LL | |     }\n LL | | }\n-   | |_- not a function or static\n+   | |_- not a free function, impl method or static\n    |\n note: the lint level is defined here\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:39:9\n@@ -223,7 +223,7 @@ LL | #![warn(unused_attributes, unknown_lints)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:464:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:1\n    |\n LL |   #[cold]\n    |   ^^^^^^^\n@@ -240,7 +240,7 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:505:1\n    |\n LL |   #[link_name = \"1900\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^\n@@ -257,7 +257,7 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:532:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:544:1\n    |\n LL |   #[link_section = \"1800\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -297,72 +297,88 @@ LL | #![link_section = \"1800\"]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to a function or static\n+warning: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:302:17\n    |\n LL |     mod inner { #![no_mangle] }\n-   |     ------------^^^^^^^^^^^^^-- not a function or static\n+   |     ------------^^^^^^^^^^^^^-- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to a function or static\n+warning: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:309:5\n    |\n LL |     #[no_mangle] struct S;\n-   |     ^^^^^^^^^^^^ --------- not a function or static\n+   |     ^^^^^^^^^^^^ --------- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to a function or static\n+warning: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:314:5\n    |\n LL |     #[no_mangle] type T = S;\n-   |     ^^^^^^^^^^^^ ----------- not a function or static\n+   |     ^^^^^^^^^^^^ ----------- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to a function or static\n+warning: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:319:5\n    |\n LL |     #[no_mangle] impl S { }\n-   |     ^^^^^^^^^^^^ ---------- not a function or static\n+   |     ^^^^^^^^^^^^ ---------- not a free function, impl method or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a free function, impl method or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:325:9\n+   |\n+LL |         #[no_mangle] fn foo();\n+   |         ^^^^^^^^^^^^ --------- not a free function, impl method or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a free function, impl method or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:330:9\n+   |\n+LL |         #[no_mangle] fn bar() {}\n+   |         ^^^^^^^^^^^^ ----------- not a free function, impl method or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:17\n    |\n LL |     mod inner { #![cold] }\n    |     ------------^^^^^^^^-- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:477:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:5\n    |\n LL |     #[cold] struct S;\n    |     ^^^^^^^ --------- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:494:5\n    |\n LL |     #[cold] type T = S;\n    |     ^^^^^^^ ----------- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:5\n    |\n LL |     #[cold] impl S { }\n    |     ^^^^^^^ ---------- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:511:5\n    |\n LL |     #[link_name = \"1900\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n@@ -372,77 +388,77 @@ LL |     extern \"C\" { }\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n help: try `#[link(name = \"1900\")]` instead\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:511:5\n    |\n LL |     #[link_name = \"1900\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:506:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:518:17\n    |\n LL |     mod inner { #![link_name=\"1900\"] }\n    |     ------------^^^^^^^^^^^^^^^^^^^^-- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:511:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:523:5\n    |\n LL |     #[link_name = \"1900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:516:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:528:5\n    |\n LL |     #[link_name = \"1900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^ --------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:521:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:533:5\n    |\n LL |     #[link_name = \"1900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^ ----------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:526:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:538:5\n    |\n LL |     #[link_name = \"1900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:538:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:550:17\n    |\n LL |     mod inner { #![link_section=\"1800\"] }\n    |     ------------^^^^^^^^^^^^^^^^^^^^^^^-- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:545:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:557:5\n    |\n LL |     #[link_section = \"1800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ --------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:550:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:562:5\n    |\n LL |     #[link_section = \"1800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:555:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:567:5\n    |\n LL |     #[link_section = \"1800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a function or static\n@@ -596,676 +612,676 @@ LL |     #[automatically_derived] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:325:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:337:1\n    |\n LL | #[should_panic]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:328:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:340:17\n    |\n LL |     mod inner { #![should_panic] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:331:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:343:5\n    |\n LL |     #[should_panic] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:334:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:346:5\n    |\n LL |     #[should_panic] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:337:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:349:5\n    |\n LL |     #[should_panic] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:340:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:352:5\n    |\n LL |     #[should_panic] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:344:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:356:1\n    |\n LL | #[ignore]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:347:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:359:17\n    |\n LL |     mod inner { #![ignore] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:350:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:362:5\n    |\n LL |     #[ignore] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:353:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:365:5\n    |\n LL |     #[ignore] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:356:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:368:5\n    |\n LL |     #[ignore] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:359:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:371:5\n    |\n LL |     #[ignore] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:363:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:375:1\n    |\n LL | #[no_implicit_prelude]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:366:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:378:17\n    |\n LL |     mod inner { #![no_implicit_prelude] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:369:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:381:5\n    |\n LL |     #[no_implicit_prelude] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:372:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:384:5\n    |\n LL |     #[no_implicit_prelude] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:375:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:387:5\n    |\n LL |     #[no_implicit_prelude] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:378:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:390:5\n    |\n LL |     #[no_implicit_prelude] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:382:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:394:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:385:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:397:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:388:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:400:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:391:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:403:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:394:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:406:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:397:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:409:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:409:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:421:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:412:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:415:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:418:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:422:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:434:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:422:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:434:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:426:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:426:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:434:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:434:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:450:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:450:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:454:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:454:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:623:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:623:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:627:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:627:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:647:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:647:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:651:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:651:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:655:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:655:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:648:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:648:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:652:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:652:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:680:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:680:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:673:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:673:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:677:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:677:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:705:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:705:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:731:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:731:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:769:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:769:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:794:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:794:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: 193 warnings emitted\n+warning: 195 warnings emitted\n "}, {"sha": "9126ac167cf2aaf3e600bce0368931b04ffcafbd", "filename": "src/test/ui/generics/generic-no-mangle.fixed", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -14,4 +14,146 @@ pub fn baz(x: &i32) -> &i32 { x }\n #[no_mangle]\n pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n \n+pub struct Foo;\n+\n+impl Foo {\n+    \n+    pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    pub extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub fn baz(x: &i32) -> &i32 { x }\n+\n+    #[no_mangle]\n+    pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n+}\n+\n+trait Trait1 {\n+    fn foo<T>();\n+    extern \"C\" fn bar<T>();\n+    fn baz(x: &i32) -> &i32;\n+    fn qux<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl Trait1 for Foo {\n+    \n+    fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn baz(x: &i32) -> &i32 { x }\n+\n+    #[no_mangle]\n+    fn qux<'a>(x: &'a i32) -> &i32 { x }\n+}\n+\n+trait Trait2<T> {\n+    fn foo();\n+    fn foo2<U>();\n+    extern \"C\" fn bar();\n+    fn baz(x: &i32) -> &i32;\n+    fn qux<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl<T> Trait2<T> for Foo {\n+    \n+    fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    fn foo2<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    fn baz(x: &i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    fn qux<'a>(x: &'a i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+pub struct Bar<T>(T);\n+\n+impl<T> Bar<T> {\n+    \n+    pub fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    pub extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    pub fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+impl Bar<i32> {\n+    #[no_mangle]\n+    pub fn qux() {}\n+}\n+\n+trait Trait3 {\n+    fn foo();\n+    extern \"C\" fn bar();\n+    fn baz<U>();\n+}\n+\n+impl<T> Trait3 for Bar<T> {\n+    \n+    fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+pub struct Baz<'a>(&'a i32);\n+\n+impl<'a> Baz<'a> {\n+    #[no_mangle]\n+    pub fn foo() {}\n+\n+    #[no_mangle]\n+    pub fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n+trait Trait4 {\n+    fn foo();\n+    fn bar<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl Trait4 for Bar<i32> {\n+    #[no_mangle]\n+    fn foo() {}\n+\n+    #[no_mangle]\n+    fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n+impl<'a> Trait4 for Baz<'a> {\n+    #[no_mangle]\n+    fn foo() {}\n+\n+    #[no_mangle]\n+    fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n+trait Trait5<T> {\n+    fn foo();\n+}\n+\n+impl Trait5<i32> for Foo {\n+    #[no_mangle]\n+    fn foo() {}\n+}\n+\n+impl Trait5<i32> for Bar<i32> {\n+    #[no_mangle]\n+    fn foo() {}\n+}\n+\n fn main() {}"}, {"sha": "e283cf4bfe544335d0c59a7221c6e190d8318c51", "filename": "src/test/ui/generics/generic-no-mangle.rs", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -14,4 +14,146 @@ pub fn baz(x: &i32) -> &i32 { x }\n #[no_mangle]\n pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n \n+pub struct Foo;\n+\n+impl Foo {\n+    #[no_mangle]\n+    pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub fn baz(x: &i32) -> &i32 { x }\n+\n+    #[no_mangle]\n+    pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n+}\n+\n+trait Trait1 {\n+    fn foo<T>();\n+    extern \"C\" fn bar<T>();\n+    fn baz(x: &i32) -> &i32;\n+    fn qux<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl Trait1 for Foo {\n+    #[no_mangle]\n+    fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn baz(x: &i32) -> &i32 { x }\n+\n+    #[no_mangle]\n+    fn qux<'a>(x: &'a i32) -> &i32 { x }\n+}\n+\n+trait Trait2<T> {\n+    fn foo();\n+    fn foo2<U>();\n+    extern \"C\" fn bar();\n+    fn baz(x: &i32) -> &i32;\n+    fn qux<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl<T> Trait2<T> for Foo {\n+    #[no_mangle]\n+    fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn foo2<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn baz(x: &i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn qux<'a>(x: &'a i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+pub struct Bar<T>(T);\n+\n+impl<T> Bar<T> {\n+    #[no_mangle]\n+    pub fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+impl Bar<i32> {\n+    #[no_mangle]\n+    pub fn qux() {}\n+}\n+\n+trait Trait3 {\n+    fn foo();\n+    extern \"C\" fn bar();\n+    fn baz<U>();\n+}\n+\n+impl<T> Trait3 for Bar<T> {\n+    #[no_mangle]\n+    fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+pub struct Baz<'a>(&'a i32);\n+\n+impl<'a> Baz<'a> {\n+    #[no_mangle]\n+    pub fn foo() {}\n+\n+    #[no_mangle]\n+    pub fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n+trait Trait4 {\n+    fn foo();\n+    fn bar<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl Trait4 for Bar<i32> {\n+    #[no_mangle]\n+    fn foo() {}\n+\n+    #[no_mangle]\n+    fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n+impl<'a> Trait4 for Baz<'a> {\n+    #[no_mangle]\n+    fn foo() {}\n+\n+    #[no_mangle]\n+    fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n+trait Trait5<T> {\n+    fn foo();\n+}\n+\n+impl Trait5<i32> for Foo {\n+    #[no_mangle]\n+    fn foo() {}\n+}\n+\n+impl Trait5<i32> for Bar<i32> {\n+    #[no_mangle]\n+    fn foo() {}\n+}\n+\n fn main() {}"}, {"sha": "adfddbe9ca791377cc42b0a8bef30e2ca46c635e", "filename": "src/test/ui/generics/generic-no-mangle.stderr", "status": "modified", "additions": 121, "deletions": 1, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -20,5 +20,125 @@ LL | #[no_mangle]\n LL | pub extern \"C\" fn bar<T>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:21:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub fn foo<T>() {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:24:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub extern \"C\" fn bar<T>() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:42:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn foo<T>() {}\n+   |     ^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:45:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     extern \"C\" fn bar<T>() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:64:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:67:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn foo2<U>() {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:70:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     extern \"C\" fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:73:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn baz(x: &i32) -> &i32 { x }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:76:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn qux<'a>(x: &'a i32) -> &i32 { x }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:83:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub fn foo() {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:86:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub extern \"C\" fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:89:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub fn baz<U>() {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:105:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:108:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     extern \"C\" fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:111:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn baz<U>() {}\n+   |     ^^^^^^^^^^^^^^\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "5b9faca4911e891c9287120ba060413b7a412519", "filename": "src/test/ui/lint/issue-31924-non-snake-ffi.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Flint%2Fissue-31924-non-snake-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Flint%2Fissue-31924-non-snake-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-31924-non-snake-ffi.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -5,4 +5,11 @@\n #[no_mangle]\n pub extern \"C\" fn SparklingGenerationForeignFunctionInterface() {} // OK\n \n+pub struct Foo;\n+\n+impl Foo {\n+    #[no_mangle]\n+    pub extern \"C\" fn SparklingGenerationForeignFunctionInterface() {} // OK\n+}\n+\n fn main() {}"}, {"sha": "c30f21bbf8fb17725e66c44bbede04bd849aa449", "filename": "src/test/ui/lint/lint-unsafe-code.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -31,9 +31,33 @@ macro_rules! unsafe_in_macro {\n #[no_mangle] fn foo() {} //~ ERROR: declaration of a `no_mangle` function\n #[no_mangle] static FOO: u32 = 5; //~ ERROR: declaration of a `no_mangle` static\n \n+trait AssocFnTrait {\n+    fn foo();\n+}\n+\n+struct AssocFnFoo;\n+\n+impl AssocFnFoo {\n+    #[no_mangle] fn foo() {} //~ ERROR: declaration of a `no_mangle` method\n+}\n+\n+impl AssocFnTrait for AssocFnFoo {\n+    #[no_mangle] fn foo() {} //~ ERROR: declaration of a `no_mangle` method\n+}\n+\n #[export_name = \"bar\"] fn bar() {} //~ ERROR: declaration of a function with `export_name`\n #[export_name = \"BAR\"] static BAR: u32 = 5; //~ ERROR: declaration of a static with `export_name`\n \n+struct AssocFnBar;\n+\n+impl AssocFnBar {\n+    #[export_name = \"bar\"] fn bar() {} //~ ERROR: declaration of a method with `export_name`\n+}\n+\n+impl AssocFnTrait for AssocFnBar {\n+    #[export_name = \"bar\"] fn foo() {} //~ ERROR: declaration of a method with `export_name`\n+}\n+\n unsafe fn baz() {} //~ ERROR: declaration of an `unsafe` function\n unsafe trait Foo {} //~ ERROR: declaration of an `unsafe` trait\n unsafe impl Foo for Bar {} //~ ERROR: implementation of an `unsafe` trait"}, {"sha": "b6895ac8da87f2a2f6935cf5128a8d21b3c2b582", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -19,96 +19,128 @@ LL | #[no_mangle] static FOO: u32 = 5;\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n+error: declaration of a `no_mangle` method\n+  --> $DIR/lint-unsafe-code.rs:41:5\n+   |\n+LL |     #[no_mangle] fn foo() {}\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n+error: declaration of a `no_mangle` method\n+  --> $DIR/lint-unsafe-code.rs:45:5\n+   |\n+LL |     #[no_mangle] fn foo() {}\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n error: declaration of a function with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:34:1\n+  --> $DIR/lint-unsafe-code.rs:48:1\n    |\n LL | #[export_name = \"bar\"] fn bar() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a static with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:35:1\n+  --> $DIR/lint-unsafe-code.rs:49:1\n    |\n LL | #[export_name = \"BAR\"] static BAR: u32 = 5;\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n+error: declaration of a method with `export_name`\n+  --> $DIR/lint-unsafe-code.rs:54:5\n+   |\n+LL |     #[export_name = \"bar\"] fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n+error: declaration of a method with `export_name`\n+  --> $DIR/lint-unsafe-code.rs:58:5\n+   |\n+LL |     #[export_name = \"bar\"] fn foo() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n error: declaration of an `unsafe` function\n-  --> $DIR/lint-unsafe-code.rs:37:1\n+  --> $DIR/lint-unsafe-code.rs:61:1\n    |\n LL | unsafe fn baz() {}\n    | ^^^^^^^^^^^^^^^^^^\n \n error: declaration of an `unsafe` trait\n-  --> $DIR/lint-unsafe-code.rs:38:1\n+  --> $DIR/lint-unsafe-code.rs:62:1\n    |\n LL | unsafe trait Foo {}\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` trait\n-  --> $DIR/lint-unsafe-code.rs:39:1\n+  --> $DIR/lint-unsafe-code.rs:63:1\n    |\n LL | unsafe impl Foo for Bar {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: declaration of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:42:5\n+  --> $DIR/lint-unsafe-code.rs:66:5\n    |\n LL |     unsafe fn baz(&self);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:43:5\n+  --> $DIR/lint-unsafe-code.rs:67:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:44:5\n+  --> $DIR/lint-unsafe-code.rs:68:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:48:5\n+  --> $DIR/lint-unsafe-code.rs:72:5\n    |\n LL |     unsafe fn baz(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:49:5\n+  --> $DIR/lint-unsafe-code.rs:73:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:68:5\n+  --> $DIR/lint-unsafe-code.rs:92:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:79:5\n+  --> $DIR/lint-unsafe-code.rs:103:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:85:5\n+  --> $DIR/lint-unsafe-code.rs:109:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:89:5\n+  --> $DIR/lint-unsafe-code.rs:113:5\n    |\n LL |     unsafe fn baz(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-unsafe-code.rs:100:5\n+  --> $DIR/lint-unsafe-code.rs:124:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^^^^\n@@ -172,5 +204,5 @@ LL |     unsafe_in_macro!()\n    |\n    = note: this error originates in the macro `unsafe_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 26 previous errors\n "}, {"sha": "ecd44abbf264c23e5a5e4673ad80889fd4ca849d", "filename": "src/test/ui/no-mangle-associated-fn.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fno-mangle-associated-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Fno-mangle-associated-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-mangle-associated-fn.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -0,0 +1,37 @@\n+// aux-build: no-mangle-associated-fn.rs\n+// run-pass\n+\n+extern crate no_mangle_associated_fn;\n+\n+struct Foo;\n+\n+impl Foo {\n+    #[no_mangle]\n+    fn foo() -> u8 {\n+        1\n+    }\n+}\n+\n+trait Bar {\n+    fn qux() -> u8;\n+}\n+\n+impl Bar for Foo {\n+    #[no_mangle]\n+    fn qux() -> u8 {\n+        4\n+    }\n+}\n+\n+fn main() {\n+    extern \"Rust\" {\n+        fn foo() -> u8;\n+        fn bar() -> u8;\n+        fn baz() -> u8;\n+        fn qux() -> u8;\n+    }\n+    assert_eq!(unsafe { foo() }, 1);\n+    assert_eq!(unsafe { bar() }, 2);\n+    assert_eq!(unsafe { baz() }, 3);\n+    assert_eq!(unsafe { qux() }, 4);\n+}"}, {"sha": "f4c126a6e025b3179e69869ae59f7d217c08b236", "filename": "src/test/ui/rfc-2457/no_mangle_nonascii_forbidden.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -1,4 +1,20 @@\n #[no_mangle]\n pub fn \u0159\u0173\u015b\u0165() {}  //~ `#[no_mangle]` requires ASCII identifier\n \n+pub struct Foo;\n+\n+impl Foo {\n+    #[no_mangle]\n+    pub fn \u0159\u0173\u015b\u0165() {}  //~ `#[no_mangle]` requires ASCII identifier\n+}\n+\n+trait Bar {\n+    fn \u0159\u0173\u015b\u0165();\n+}\n+\n+impl Bar for Foo {\n+    #[no_mangle]\n+    fn \u0159\u0173\u015b\u0165() {}  //~ `#[no_mangle]` requires ASCII identifier\n+}\n+\n fn main() {}"}, {"sha": "459d5d6b57c81982699d7660b2ede368dd8e9c25", "filename": "src/test/ui/rfc-2457/no_mangle_nonascii_forbidden.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a19ffe1c2b99d9e09706cc286aad1ec0868eddb/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr?ref=5a19ffe1c2b99d9e09706cc286aad1ec0868eddb", "patch": "@@ -4,6 +4,18 @@ error[E0754]: `#[no_mangle]` requires ASCII identifier\n LL | pub fn \u0159\u0173\u015b\u0165() {}\n    | ^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0754]: `#[no_mangle]` requires ASCII identifier\n+  --> $DIR/no_mangle_nonascii_forbidden.rs:8:5\n+   |\n+LL |     pub fn \u0159\u0173\u015b\u0165() {}\n+   |     ^^^^^^^^^^^^^\n+\n+error[E0754]: `#[no_mangle]` requires ASCII identifier\n+  --> $DIR/no_mangle_nonascii_forbidden.rs:17:5\n+   |\n+LL |     fn \u0159\u0173\u015b\u0165() {}\n+   |     ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0754`."}]}