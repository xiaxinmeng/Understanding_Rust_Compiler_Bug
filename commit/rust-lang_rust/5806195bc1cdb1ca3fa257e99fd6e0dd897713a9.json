{"sha": "5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDYxOTViYzFjZGIxY2EzZmEyNTdlOTlmZDZlMGRkODk3NzEzYTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-30T15:07:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-30T15:07:12Z"}, "message": "Merge #2128\n\n2128: move raw_items to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "92b54891047977e6483e430a467d8e561ea3bc53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92b54891047977e6483e430a467d8e561ea3bc53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJduacgCRBK7hj4Ov3rIwAAdHIIACesFCurqShCgDM3PLHjfwf2\nOoxkgcJuRoS4FwFU3WqY2PJUyDAtrGRiDIJpykifQNIFLhnSwydXldw8UQx/eKvu\nfePzcsA5fNbQiQP+sXlFkwMBoAiuBDO18xL+aQRT/VewP73G6m6ybPErCDJDyLD8\nC6Y9Pj+YDH8RPImRKBBqbn+hh9vHOuHCti18uYkDxETlVerqGpiWVQCi0uEDyOlu\nie9YxqnI5RPYBO3Ijn++9dzli49gnAwdULVKnEB7Ls8XolfFnWR3Ck3hpPjsVi+J\nuqp6JfC/SstaK1Vq6UJRyYiH/zVK8LA7SJfg2To2yT5iKCv/qfLQ9YDDV+GVWYU=\n=6Cyi\n-----END PGP SIGNATURE-----\n", "payload": "tree 92b54891047977e6483e430a467d8e561ea3bc53\nparent f996b6019bd2f388bd9994ea83f25487eb111560\nparent e34e71c62d9b4cf0ab237969e03ecde893ab347b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572448032 +0000\ncommitter GitHub <noreply@github.com> 1572448032 +0000\n\nMerge #2128\n\n2128: move raw_items to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "html_url": "https://github.com/rust-lang/rust/commit/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f996b6019bd2f388bd9994ea83f25487eb111560", "url": "https://api.github.com/repos/rust-lang/rust/commits/f996b6019bd2f388bd9994ea83f25487eb111560", "html_url": "https://github.com/rust-lang/rust/commit/f996b6019bd2f388bd9994ea83f25487eb111560"}, {"sha": "e34e71c62d9b4cf0ab237969e03ecde893ab347b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e34e71c62d9b4cf0ab237969e03ecde893ab347b", "html_url": "https://github.com/rust-lang/rust/commit/e34e71c62d9b4cf0ab237969e03ecde893ab347b"}], "stats": {"total": 620, "additions": 350, "deletions": 270}, "files": [{"sha": "fdacd82a70e36ac564e7322f74198de98850dd76", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -1019,11 +1019,18 @@ name = \"ra_hir_def\"\n version = \"0.1.0\"\n dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n+ \"ra_cfg 0.1.0\",\n  \"ra_db 0.1.0\",\n  \"ra_hir_expand 0.1.0\",\n+ \"ra_mbe 0.1.0\",\n  \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n+ \"ra_tt 0.1.0\",\n+ \"relative-path 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"test_utils 0.1.0\",\n ]\n \n [[package]]"}, {"sha": "d16b3a1cced2cac5b62659c2cfcf7fe39c1087c0", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -3,13 +3,13 @@\n \n use std::sync::Arc;\n \n+use hir_def::{name::AsName, type_ref::TypeRef};\n use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_syntax::ast::{self, NameOwner, StructKind, TypeAscriptionOwner};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    type_ref::TypeRef,\n-    AsName, Enum, EnumVariant, FieldSource, HasSource, Module, Name, Source, Struct, StructField,\n+    Enum, EnumVariant, FieldSource, HasSource, Module, Name, Source, Struct, StructField,\n };\n \n impl Struct {"}, {"sha": "d865c972e3f957a21f38f95a1e4db085ab36e35c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -5,8 +5,15 @@ pub(crate) mod docs;\n \n use std::sync::Arc;\n \n-use hir_def::{CrateModuleId, ModuleId};\n-use ra_db::{CrateId, Edition, FileId};\n+use hir_def::{\n+    name::{\n+        self, AsName, BOOL, CHAR, F32, F64, I128, I16, I32, I64, I8, ISIZE, SELF_TYPE, STR, U128,\n+        U16, U32, U64, U8, USIZE,\n+    },\n+    type_ref::{Mutability, TypeRef},\n+    CrateModuleId, ModuleId,\n+};\n+use ra_db::{CrateId, Edition};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n@@ -20,20 +27,14 @@ use crate::{\n         TypeAliasId,\n     },\n     impl_block::ImplBlock,\n-    name::{\n-        BOOL, CHAR, F32, F64, I128, I16, I32, I64, I8, ISIZE, SELF_TYPE, STR, U128, U16, U32, U64,\n-        U8, USIZE,\n-    },\n     nameres::{ImportId, ModuleScope, Namespace},\n     resolve::{Resolver, Scope, TypeNs},\n     traits::TraitData,\n     ty::{\n         primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness},\n         InferenceResult, TraitRef,\n     },\n-    type_ref::Mutability,\n-    type_ref::TypeRef,\n-    AsName, AstId, Either, HasSource, Name, Ty,\n+    Either, HasSource, Name, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -147,31 +148,7 @@ impl_froms!(\n     BuiltinType\n );\n \n-pub enum ModuleSource {\n-    SourceFile(ast::SourceFile),\n-    Module(ast::Module),\n-}\n-\n-impl ModuleSource {\n-    pub(crate) fn new(\n-        db: &(impl DefDatabase + AstDatabase),\n-        file_id: Option<FileId>,\n-        decl_id: Option<AstId<ast::Module>>,\n-    ) -> ModuleSource {\n-        match (file_id, decl_id) {\n-            (Some(file_id), _) => {\n-                let source_file = db.parse(file_id).tree();\n-                ModuleSource::SourceFile(source_file)\n-            }\n-            (None, Some(item_id)) => {\n-                let module = item_id.to_node(db);\n-                assert!(module.item_list().is_some(), \"expected inline module\");\n-                ModuleSource::Module(module)\n-            }\n-            (None, None) => panic!(),\n-        }\n-    }\n-}\n+pub use hir_def::ModuleSource;\n \n impl Module {\n     pub(crate) fn new(krate: Crate, crate_module_id: CrateModuleId) -> Module {\n@@ -922,9 +899,7 @@ impl Trait {\n             .where_predicates\n             .iter()\n             .filter_map(|pred| match &pred.type_ref {\n-                TypeRef::Path(p) if p.as_ident() == Some(&crate::name::SELF_TYPE) => {\n-                    pred.bound.as_path()\n-                }\n+                TypeRef::Path(p) if p.as_ident() == Some(&name::SELF_TYPE) => pred.bound.as_path(),\n                 _ => None,\n             })\n             .filter_map(|path| match resolver.resolve_path_in_type_ns_fully(db, path) {"}, {"sha": "ebfd970ebc44787ae290b08ac7e860c97891655b", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -12,18 +12,21 @@ use crate::{\n     ids,\n     impl_block::{ImplBlock, ImplSourceMap, ModuleImplBlocks},\n     lang_item::{LangItemTarget, LangItems},\n-    nameres::{CrateDefMap, ImportSourceMap, Namespace, RawItems},\n+    nameres::{CrateDefMap, Namespace},\n     traits::TraitData,\n     ty::{\n         method_resolution::CrateImplBlocks, traits::Impl, CallableDef, FnSig, GenericPredicate,\n         InferenceResult, Substs, Ty, TypableDef, TypeCtor,\n     },\n     type_alias::TypeAliasData,\n-    Const, ConstData, Crate, DefWithBody, Enum, ExprScopes, FnData, Function, HirFileId, Module,\n-    Static, Struct, StructField, Trait, TypeAlias,\n+    Const, ConstData, Crate, DefWithBody, Enum, ExprScopes, FnData, Function, Module, Static,\n+    Struct, StructField, Trait, TypeAlias,\n };\n \n-pub use hir_def::db::{InternDatabase, InternDatabaseStorage};\n+pub use hir_def::db::{\n+    DefDatabase2, DefDatabase2Storage, InternDatabase, InternDatabaseStorage, RawItemsQuery,\n+    RawItemsWithSourceMapQuery,\n+};\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n     ParseMacroQuery,\n@@ -32,7 +35,7 @@ pub use hir_expand::db::{\n // This database uses `AstDatabase` internally,\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n-pub trait DefDatabase: InternDatabase + HirDebugDatabase + AstDatabase {\n+pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;\n \n@@ -45,15 +48,6 @@ pub trait DefDatabase: InternDatabase + HirDebugDatabase + AstDatabase {\n     #[salsa::invoke(crate::traits::TraitItemsIndex::trait_items_index)]\n     fn trait_items_index(&self, module: Module) -> crate::traits::TraitItemsIndex;\n \n-    #[salsa::invoke(RawItems::raw_items_with_source_map_query)]\n-    fn raw_items_with_source_map(\n-        &self,\n-        file_id: HirFileId,\n-    ) -> (Arc<RawItems>, Arc<ImportSourceMap>);\n-\n-    #[salsa::invoke(RawItems::raw_items_query)]\n-    fn raw_items(&self, file_id: HirFileId) -> Arc<RawItems>;\n-\n     #[salsa::invoke(CrateDefMap::crate_def_map_query)]\n     fn crate_def_map(&self, krate: Crate) -> Arc<CrateDefMap>;\n "}, {"sha": "6e23197a4d1c6d99f4a9da92058f236b9fb08c15", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -6,15 +6,17 @@ pub(crate) mod validation;\n \n use std::{ops::Index, sync::Arc};\n \n+use hir_def::{\n+    path::GenericArgs,\n+    type_ref::{Mutability, TypeRef},\n+};\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{ast, AstPtr};\n use rustc_hash::FxHashMap;\n \n use crate::{\n     db::HirDatabase,\n-    path::GenericArgs,\n     ty::primitive::{UncertainFloatTy, UncertainIntTy},\n-    type_ref::{Mutability, TypeRef},\n     DefWithBody, Either, HasSource, Name, Path, Resolver, Source,\n };\n "}, {"sha": "ad029b868f94c9585f71219718b5dd61ef72d10d", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -1,5 +1,10 @@\n //! FIXME: write short doc here\n \n+use hir_def::{\n+    name::{self, AsName, Name},\n+    path::GenericArgs,\n+    type_ref::TypeRef,\n+};\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n@@ -12,10 +17,7 @@ use test_utils::tested_by;\n \n use crate::{\n     db::HirDatabase,\n-    name::{AsName, Name, SELF_PARAM},\n-    path::GenericArgs,\n     ty::primitive::{FloatTy, IntTy, UncertainFloatTy, UncertainIntTy},\n-    type_ref::TypeRef,\n     AstId, DefWithBody, Either, HirFileId, MacroCallLoc, MacroFileKind, Mutability, Path, Resolver,\n     Source,\n };\n@@ -78,7 +80,7 @@ where\n                 let ptr = AstPtr::new(&self_param);\n                 let param_pat = self.alloc_pat(\n                     Pat::Bind {\n-                        name: SELF_PARAM,\n+                        name: name::SELF_PARAM,\n                         mode: BindingAnnotation::Unannotated,\n                         subpat: None,\n                     },"}, {"sha": "c685edda193f45c915b919ddc56e8d187c17c0f3", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -2,14 +2,14 @@\n \n use std::sync::Arc;\n \n+use hir_def::path::known;\n use ra_syntax::ast;\n use rustc_hash::FxHashSet;\n \n use crate::{\n     db::HirDatabase,\n     diagnostics::{DiagnosticSink, MissingFields, MissingOkInTailExpr},\n     expr::AstPtr,\n-    path::known,\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n     Adt, Function, Name, Path,\n };"}, {"sha": "b9fbaa367f212aa521cd6fec6df20d3e95bd3644", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -1,16 +1,11 @@\n //! FIXME: write short doc here\n \n-use ra_db::{FileId, FilePosition};\n-use ra_syntax::{\n-    algo::find_node_at_offset,\n-    ast::{self, AstNode, NameOwner},\n-    SyntaxNode,\n-};\n+use hir_def::name::AsName;\n+use ra_syntax::ast::{self, AstNode, NameOwner};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::{AstItemDef, LocationCtx},\n-    name::AsName,\n     AstId, Const, Crate, Enum, EnumVariant, FieldSource, Function, HasSource, ImplBlock, Module,\n     ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias, Union, VariantDef,\n };\n@@ -129,41 +124,6 @@ impl FromSource for StructField {\n     }\n }\n \n-// FIXME: simplify it\n-impl ModuleSource {\n-    pub fn from_position(\n-        db: &(impl DefDatabase + AstDatabase),\n-        position: FilePosition,\n-    ) -> ModuleSource {\n-        let parse = db.parse(position.file_id);\n-        match &find_node_at_offset::<ast::Module>(parse.tree().syntax(), position.offset) {\n-            Some(m) if !m.has_semi() => ModuleSource::Module(m.clone()),\n-            _ => {\n-                let source_file = parse.tree();\n-                ModuleSource::SourceFile(source_file)\n-            }\n-        }\n-    }\n-\n-    pub fn from_child_node(\n-        db: &(impl DefDatabase + AstDatabase),\n-        file_id: FileId,\n-        child: &SyntaxNode,\n-    ) -> ModuleSource {\n-        if let Some(m) = child.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi()) {\n-            ModuleSource::Module(m)\n-        } else {\n-            let source_file = db.parse(file_id).tree();\n-            ModuleSource::SourceFile(source_file)\n-        }\n-    }\n-\n-    pub fn from_file_id(db: &(impl DefDatabase + AstDatabase), file_id: FileId) -> ModuleSource {\n-        let source_file = db.parse(file_id).tree();\n-        ModuleSource::SourceFile(source_file)\n-    }\n-}\n-\n impl Module {\n     pub fn from_declaration(db: &impl HirDatabase, src: Source<ast::Module>) -> Option<Self> {\n         let src_parent = Source {"}, {"sha": "9d5d18564838ec13c33ce1179c13831bfb5542f9", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -5,15 +5,17 @@\n \n use std::sync::Arc;\n \n+use hir_def::{\n+    name::{self, AsName},\n+    path::Path,\n+    type_ref::{TypeBound, TypeRef},\n+};\n use ra_syntax::ast::{self, DefaultTypeParamOwner, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    name::SELF_TYPE,\n-    path::Path,\n-    type_ref::{TypeBound, TypeRef},\n-    Adt, AsName, Const, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct,\n-    Trait, TypeAlias, Union,\n+    Adt, Const, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct, Trait,\n+    TypeAlias, Union,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -94,11 +96,15 @@ impl GenericParams {\n             GenericDef::Adt(Adt::Enum(it)) => generics.fill(&it.source(db).ast, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n-                generics.params.push(GenericParam { idx: start, name: SELF_TYPE, default: None });\n+                generics.params.push(GenericParam {\n+                    idx: start,\n+                    name: name::SELF_TYPE,\n+                    default: None,\n+                });\n                 generics.fill(&it.source(db).ast, start + 1);\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n-                let self_param = TypeRef::Path(SELF_TYPE.into());\n+                let self_param = TypeRef::Path(name::SELF_TYPE.into());\n                 generics.fill_bounds(&it.source(db).ast, self_param);\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&it.source(db).ast, start),"}, {"sha": "518330713217fd9dae4de10a025607ed09d4b134", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -3,6 +3,7 @@\n use rustc_hash::FxHashMap;\n use std::sync::Arc;\n \n+use hir_def::{attr::Attr, type_ref::TypeRef};\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_cfg::CfgOptions;\n use ra_syntax::{\n@@ -11,15 +12,13 @@ use ra_syntax::{\n };\n \n use crate::{\n-    attr::Attr,\n     code_model::{Module, ModuleSource},\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     generics::HasGenericParams,\n     ids::LocationCtx,\n     ids::MacroCallLoc,\n     resolve::Resolver,\n     ty::Ty,\n-    type_ref::TypeRef,\n     AssocItem, AstId, Const, Function, HasSource, HirFileId, MacroFileKind, Path, Source, TraitRef,\n     TypeAlias,\n };"}, {"sha": "f765490b0117837331ff41f3d80bb03d31289434", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -26,24 +26,19 @@ macro_rules! impl_froms {\n     }\n }\n \n-mod either;\n pub mod debug;\n \n pub mod db;\n #[macro_use]\n pub mod mock;\n-mod path;\n pub mod source_binder;\n \n mod ids;\n-mod name;\n mod nameres;\n mod adt;\n mod traits;\n mod type_alias;\n-mod type_ref;\n mod ty;\n-mod attr;\n mod impl_block;\n mod expr;\n mod lang_item;\n@@ -59,30 +54,23 @@ pub mod from_source;\n #[cfg(test)]\n mod marks;\n \n-use hir_expand::{\n-    ast_id_map::{AstIdMap, FileAstId},\n-    AstId,\n-};\n+use hir_expand::AstId;\n \n-use crate::{ids::MacroFileKind, name::AsName, resolve::Resolver};\n+use crate::{ids::MacroFileKind, resolve::Resolver};\n \n pub use crate::{\n     adt::VariantDef,\n-    either::Either,\n     expr::ExprScopes,\n     from_source::FromSource,\n     generics::{GenericDef, GenericParam, GenericParams, HasGenericParams},\n     ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n     impl_block::ImplBlock,\n-    name::Name,\n     nameres::{ImportId, Namespace, PerNs},\n-    path::{Path, PathKind},\n     resolve::ScopeDef,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{\n         display::HirDisplay, ApplicationTy, CallableDef, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n     },\n-    type_ref::Mutability,\n };\n \n pub use self::code_model::{\n@@ -92,3 +80,10 @@ pub use self::code_model::{\n     Enum, EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef,\n     ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n+\n+pub use hir_def::{\n+    either::Either,\n+    name::Name,\n+    path::{Path, PathKind},\n+    type_ref::Mutability,\n+};"}, {"sha": "b423489a11178a533f6cd2b3425de9037f0fc17f", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -2,6 +2,7 @@\n \n test_utils::marks!(\n     bogus_paths\n+    // FIXME: restore this mark once hir is split\n     name_res_works_for_broken_modules\n     can_import_enum_variant\n     type_var_cycles_resolve_completely"}, {"sha": "35dfaf3bad0e78ce234a407173fd50d6582671c5", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -22,6 +22,7 @@ pub const WORKSPACE: SourceRootId = SourceRootId(0);\n     db::InternDatabaseStorage,\n     db::AstDatabaseStorage,\n     db::DefDatabaseStorage,\n+    db::DefDatabase2Storage,\n     db::HirDatabaseStorage\n )]\n #[derive(Debug)]"}, {"sha": "39f585b446a9850726db321c6e575c7becdf5884", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -48,7 +48,6 @@\n //! on the result\n \n mod per_ns;\n-mod raw;\n mod collector;\n mod mod_resolution;\n #[cfg(test)]\n@@ -74,12 +73,9 @@ use crate::{\n     Trait,\n };\n \n-pub(crate) use self::raw::{ImportSourceMap, RawItems};\n+pub use self::per_ns::{Namespace, PerNs};\n \n-pub use self::{\n-    per_ns::{Namespace, PerNs},\n-    raw::ImportId,\n-};\n+pub use hir_def::nameres::raw::ImportId;\n \n /// Contains all top-level defs from a macro-expanded crate\n #[derive(Debug, PartialEq, Eq)]\n@@ -328,7 +324,8 @@ impl CrateDefMap {\n     ) -> ResolvePathResult {\n         let mut segments = path.segments.iter().enumerate();\n         let mut curr_per_ns: PerNs = match path.kind {\n-            PathKind::DollarCrate(krate) => {\n+            PathKind::DollarCrate(crate_id) => {\n+                let krate = Crate { crate_id };\n                 if krate == self.krate {\n                     tested_by!(macro_dollar_crate_self);\n                     PerNs::types(Module::new(self.krate, self.root).into())"}, {"sha": "2f342870b136c67457fc64fecc5ea3b3ecf70244", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -1,18 +1,17 @@\n //! FIXME: write short doc here\n \n+use hir_def::{attr::Attr, name, nameres::raw};\n use ra_cfg::CfgOptions;\n use ra_db::FileId;\n use ra_syntax::{ast, SmolStr};\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attr,\n     db::DefDatabase,\n     ids::{AstItemDef, LocationCtx, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind},\n-    name::MACRO_RULES,\n     nameres::{\n-        diagnostics::DefDiagnostic, mod_resolution::ModDir, raw, Crate, CrateDefMap, CrateModuleId,\n+        diagnostics::DefDiagnostic, mod_resolution::ModDir, Crate, CrateDefMap, CrateModuleId,\n         ModuleData, ModuleDef, PerNs, ReachedFixedPoint, Resolution, ResolveMode,\n     },\n     Adt, AstId, Const, Enum, Function, HirFileId, MacroDef, Module, Name, Path, PathKind, Static,\n@@ -725,7 +724,7 @@ where\n }\n \n fn is_macro_rules(path: &Path) -> bool {\n-    path.as_ident() == Some(&MACRO_RULES)\n+    path.as_ident() == Some(&name::MACRO_RULES)\n }\n \n #[cfg(test)]"}, {"sha": "abfe8b1c346e28ee6387b4a2fde473a1bcde939f", "filename": "crates/ra_hir/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n #[test]\n fn name_res_works_for_broken_modules() {\n-    covers!(name_res_works_for_broken_modules);\n+    // covers!(name_res_works_for_broken_modules);\n     let map = def_map(\n         \"\n         //- /lib.rs"}, {"sha": "2a783b61e3bb3914eeacb903ffcbd71311b30ad9", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -1,7 +1,11 @@\n //! Name resolution.\n use std::sync::Arc;\n \n-use hir_def::CrateModuleId;\n+use hir_def::{\n+    name::{self, Name},\n+    path::{Path, PathKind},\n+    CrateModuleId,\n+};\n use rustc_hash::FxHashSet;\n \n use crate::{\n@@ -13,9 +17,7 @@ use crate::{\n     },\n     generics::GenericParams,\n     impl_block::ImplBlock,\n-    name::{Name, SELF_PARAM, SELF_TYPE},\n     nameres::{CrateDefMap, PerNs},\n-    path::{Path, PathKind},\n     Adt, BuiltinType, Const, Enum, EnumVariant, Function, MacroDef, ModuleDef, Static, Struct,\n     Trait, TypeAlias,\n };\n@@ -150,13 +152,13 @@ impl Resolver {\n                     }\n                 }\n                 Scope::ImplBlockScope(impl_) => {\n-                    if first_name == &SELF_TYPE {\n+                    if first_name == &name::SELF_TYPE {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((TypeNs::SelfType(*impl_), idx));\n                     }\n                 }\n                 Scope::AdtScope(adt) => {\n-                    if first_name == &SELF_TYPE {\n+                    if first_name == &name::SELF_TYPE {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((TypeNs::AdtSelfType(*adt), idx));\n                     }\n@@ -205,7 +207,7 @@ impl Resolver {\n             return None;\n         }\n         let n_segments = path.segments.len();\n-        let tmp = SELF_PARAM;\n+        let tmp = name::SELF_PARAM;\n         let first_name = if path.is_self() { &tmp } else { &path.segments.first()?.name };\n         let skip_to_mod = path.kind != PathKind::Plain && !path.is_self();\n         for scope in self.scopes.iter().rev() {\n@@ -241,13 +243,13 @@ impl Resolver {\n                 Scope::GenericParams(_) => continue,\n \n                 Scope::ImplBlockScope(impl_) if n_segments > 1 => {\n-                    if first_name == &SELF_TYPE {\n+                    if first_name == &name::SELF_TYPE {\n                         let ty = TypeNs::SelfType(*impl_);\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n                 Scope::AdtScope(adt) if n_segments > 1 => {\n-                    if first_name == &SELF_TYPE {\n+                    if first_name == &name::SELF_TYPE {\n                         let ty = TypeNs::AdtSelfType(*adt);\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n@@ -459,10 +461,10 @@ impl Scope {\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n-                f(SELF_TYPE, ScopeDef::ImplSelfType(*i));\n+                f(name::SELF_TYPE, ScopeDef::ImplSelfType(*i));\n             }\n             Scope::AdtScope(i) => {\n-                f(SELF_TYPE, ScopeDef::AdtSelfType(*i));\n+                f(name::SELF_TYPE, ScopeDef::AdtSelfType(*i));\n             }\n             Scope::ExprScope(e) => {\n                 e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {"}, {"sha": "544433a0ab20733e20a544cbe88e291044a2c7a5", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -7,6 +7,7 @@\n //! purely for \"IDE needs\".\n use std::sync::Arc;\n \n+use hir_def::{name::AsName, path::known};\n use ra_db::FileId;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -24,11 +25,10 @@ use crate::{\n         BodySourceMap,\n     },\n     ids::LocationCtx,\n-    path::known,\n     resolve::{ScopeDef, TypeNs, ValueNs},\n     ty::method_resolution::implements_trait,\n-    AsName, Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId, MacroDef,\n-    Module, Name, Path, Resolver, Static, Struct, Ty,\n+    Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId, MacroDef, Module,\n+    Name, Path, Resolver, Static, Struct, Ty,\n };\n \n fn try_get_resolver_for_node("}, {"sha": "514c813ab1c9cdaa1a1f363bcedeeafe46f82d4a", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -1,14 +1,14 @@\n //! HIR for trait definitions.\n \n-use rustc_hash::FxHashMap;\n use std::sync::Arc;\n \n+use hir_def::name::AsName;\n use ra_syntax::ast::{self, NameOwner};\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     db::{AstDatabase, DefDatabase},\n     ids::LocationCtx,\n-    name::AsName,\n     AssocItem, Const, Function, HasSource, Module, Name, Trait, TypeAlias,\n };\n "}, {"sha": "d2bfcdc7dbcb981e5c271ef2947df54f673d488e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -17,8 +17,8 @@ use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n use crate::{\n-    db::HirDatabase, expr::ExprId, type_ref::Mutability, util::make_mut_slice, Adt, Crate,\n-    DefWithBody, GenericParams, HasGenericParams, Name, Trait, TypeAlias,\n+    db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, DefWithBody, GenericParams,\n+    HasGenericParams, Mutability, Name, Trait, TypeAlias,\n };\n use display::{HirDisplay, HirFormatter};\n "}, {"sha": "03c45546d2df66b3dc159acf6379b1dce4ed0afc", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -5,10 +5,11 @@\n \n use std::iter::successors;\n \n+use hir_def::name;\n use log::{info, warn};\n \n use super::{traits::Solution, Canonical, Substs, Ty, TypeWalk};\n-use crate::{db::HirDatabase, name, HasGenericParams, Resolver};\n+use crate::{db::HirDatabase, HasGenericParams, Resolver};\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n "}, {"sha": "7466ee3413890df7f6cdf43dd951fbfe69f787db", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -21,6 +21,11 @@ use std::sync::Arc;\n use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use rustc_hash::FxHashMap;\n \n+use hir_def::{\n+    name,\n+    path::known,\n+    type_ref::{Mutability, TypeRef},\n+};\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n use test_utils::tested_by;\n@@ -37,11 +42,8 @@ use crate::{\n     db::HirDatabase,\n     diagnostics::DiagnosticSink,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n-    name,\n-    path::known,\n     resolve::{Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n-    type_ref::{Mutability, TypeRef},\n     Adt, AssocItem, ConstData, DefWithBody, FnData, Function, HasBody, Path, StructField,\n };\n "}, {"sha": "6ea135126a5cf207807cdb5959df8212b2b69b04", "filename": "crates/ra_hir/src/ty/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -14,8 +14,7 @@ use crate::{\n     lang_item::LangItemTarget,\n     resolve::Resolver,\n     ty::{autoderef, Substs, Ty, TypeCtor, TypeWalk},\n-    type_ref::Mutability,\n-    Adt,\n+    Adt, Mutability,\n };\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {"}, {"sha": "bc6437b4482258f594e3a4aadd3fd1fe5766b8f2", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -3,14 +3,17 @@\n use std::iter::{repeat, repeat_with};\n use std::sync::Arc;\n \n+use hir_def::{\n+    name,\n+    path::{GenericArg, GenericArgs},\n+};\n+\n use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n use crate::{\n     db::HirDatabase,\n     expr::{self, Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     generics::{GenericParams, HasGenericParams},\n-    name,\n     nameres::Namespace,\n-    path::{GenericArg, GenericArgs},\n     ty::{\n         autoderef, method_resolution, op, primitive, CallableDef, InferTy, Mutability, Obligation,\n         ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,"}, {"sha": "77aa35ce13308b22b53700b766fbc25011cffcaf", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -1,5 +1,7 @@\n //! Path expression resolution.\n \n+use hir_def::path::PathSegment;\n+\n use super::{ExprOrPatId, InferenceContext, TraitRef};\n use crate::{\n     db::HirDatabase,\n@@ -131,7 +133,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn resolve_trait_assoc_item(\n         &mut self,\n         trait_ref: TraitRef,\n-        segment: &crate::path::PathSegment,\n+        segment: &PathSegment,\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substs>)> {\n         let trait_ = trait_ref.trait_;\n@@ -170,7 +172,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn resolve_ty_assoc_item(\n         &mut self,\n         ty: Ty,\n-        segment: &crate::path::PathSegment,\n+        segment: &PathSegment,\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substs>)> {\n         if let Ty::Unknown = ty {"}, {"sha": "0f49a0e541df484699f6d3e0222bd63ac8cc17e3", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -8,6 +8,11 @@\n use std::iter;\n use std::sync::Arc;\n \n+use hir_def::{\n+    path::{GenericArg, PathSegment},\n+    type_ref::{TypeBound, TypeRef},\n+};\n+\n use super::{\n     FnSig, GenericPredicate, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n     TypeWalk,\n@@ -18,10 +23,8 @@ use crate::{\n     generics::HasGenericParams,\n     generics::{GenericDef, WherePredicate},\n     nameres::Namespace,\n-    path::{GenericArg, PathSegment},\n     resolve::{Resolver, TypeNs},\n     ty::Adt,\n-    type_ref::{TypeBound, TypeRef},\n     util::make_mut_slice,\n     BuiltinType, Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField,\n     Trait, TypeAlias, Union,"}, {"sha": "eb69344f6a7425ae9f765cbddbe3ba28e1fe8bfb", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -15,8 +15,7 @@ use crate::{\n     resolve::Resolver,\n     ty::primitive::{FloatBitness, UncertainFloatTy, UncertainIntTy},\n     ty::{Ty, TypeCtor},\n-    type_ref::Mutability,\n-    AssocItem, Crate, Function, Module, Name, Trait,\n+    AssocItem, Crate, Function, Module, Mutability, Name, Trait,\n };\n \n /// This is used as a key for indexing impls."}, {"sha": "2dd4c2fae52980d81dac578285f065d232fe5664", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -9,6 +9,7 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, ImplDatum, StructDatum, TraitDatum};\n \n+use hir_def::name;\n use ra_db::salsa::{InternId, InternKey};\n \n use super::{Canonical, ChalkContext, Impl, Obligation};\n@@ -734,7 +735,7 @@ fn closure_fn_trait_impl_datum(\n         substs: Substs::build_for_def(db, trait_).push(self_ty).push(arg_ty).build(),\n     };\n \n-    let output_ty_id = fn_once_trait.associated_type_by_name(db, &crate::name::OUTPUT_TYPE)?;\n+    let output_ty_id = fn_once_trait.associated_type_by_name(db, &name::OUTPUT_TYPE)?;\n \n     let output_ty_value = chalk_rust_ir::AssociatedTyValue {\n         associated_ty_id: output_ty_id.to_chalk(db),"}, {"sha": "87126ee7f412016697896ef0d7c99928ab2b9498", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -2,12 +2,14 @@\n \n use std::sync::Arc;\n \n+use hir_def::{\n+    name::{AsName, Name},\n+    type_ref::TypeRef,\n+};\n use ra_syntax::ast::NameOwner;\n \n use crate::{\n     db::{AstDatabase, DefDatabase},\n-    name::{AsName, Name},\n-    type_ref::TypeRef,\n     HasSource, TypeAlias,\n };\n "}, {"sha": "746c907e80dabe4b23c10aa4f1bad2d768557330", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -6,9 +6,16 @@ authors = [\"rust-analyzer developers\"]\n \n [dependencies]\n log = \"0.4.5\"\n+once_cell = \"1.0.1\"\n+relative-path = \"1.0.0\"\n+rustc-hash = \"1.0\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_prof = { path = \"../ra_prof\" }\n hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n+test_utils = { path = \"../test_utils\" }\n+mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n+ra_cfg = { path = \"../ra_cfg\" }\n+tt = { path = \"../ra_tt\", package = \"ra_tt\" }"}, {"sha": "248f03cdfdd4203c3566c5033fcff498bb8c5467", "filename": "crates/ra_hir_def/src/attr.rs", "status": "renamed", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -2,6 +2,7 @@\n \n use std::sync::Arc;\n \n+use hir_expand::db::AstDatabase;\n use mbe::ast_to_token_tree;\n use ra_cfg::CfgOptions;\n use ra_syntax::{\n@@ -10,10 +11,10 @@ use ra_syntax::{\n };\n use tt::Subtree;\n \n-use crate::{db::AstDatabase, path::Path, HirFileId, Source};\n+use crate::{path::Path, HirFileId, Source};\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub(crate) struct Attr {\n+pub struct Attr {\n     pub(crate) path: Path,\n     pub(crate) input: Option<AttrInput>,\n }\n@@ -45,7 +46,7 @@ impl Attr {\n         Some(Attr { path, input })\n     }\n \n-    pub(crate) fn from_attrs_owner(\n+    pub fn from_attrs_owner(\n         file_id: HirFileId,\n         owner: &dyn AttrsOwner,\n         db: &impl AstDatabase,\n@@ -58,13 +59,13 @@ impl Attr {\n         Some(attrs.flat_map(|ast| Attr::from_src(Source { file_id, ast }, db)).collect())\n     }\n \n-    pub(crate) fn is_simple_atom(&self, name: &str) -> bool {\n+    pub fn is_simple_atom(&self, name: &str) -> bool {\n         // FIXME: Avoid cloning\n         self.path.as_ident().map_or(false, |s| s.to_string() == name)\n     }\n \n     // FIXME: handle cfg_attr :-)\n-    pub(crate) fn as_cfg(&self) -> Option<&Subtree> {\n+    pub fn as_cfg(&self) -> Option<&Subtree> {\n         if !self.is_simple_atom(\"cfg\") {\n             return None;\n         }\n@@ -74,7 +75,7 @@ impl Attr {\n         }\n     }\n \n-    pub(crate) fn as_path(&self) -> Option<&SmolStr> {\n+    pub fn as_path(&self) -> Option<&SmolStr> {\n         if !self.is_simple_atom(\"path\") {\n             return None;\n         }\n@@ -84,7 +85,7 @@ impl Attr {\n         }\n     }\n \n-    pub(crate) fn is_cfg_enabled(&self, cfg_options: &CfgOptions) -> Option<bool> {\n+    pub fn is_cfg_enabled(&self, cfg_options: &CfgOptions) -> Option<bool> {\n         cfg_options.is_cfg_enabled(self.as_cfg()?)\n     }\n }", "previous_filename": "crates/ra_hir/src/attr.rs"}, {"sha": "b271636b07e7b003f87c104d5a753a75de59d477", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -1,15 +1,21 @@\n //! Defines database & queries for name resolution.\n+use std::sync::Arc;\n \n+use hir_expand::{db::AstDatabase, HirFileId};\n use ra_db::{salsa, SourceDatabase};\n use ra_syntax::ast;\n \n+use crate::nameres::raw::{ImportSourceMap, RawItems};\n+\n #[salsa::query_group(InternDatabaseStorage)]\n pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_function(&self, loc: crate::ItemLoc<ast::FnDef>) -> crate::FunctionId;\n     #[salsa::interned]\n     fn intern_struct(&self, loc: crate::ItemLoc<ast::StructDef>) -> crate::StructId;\n     #[salsa::interned]\n+    fn intern_union(&self, loc: crate::ItemLoc<ast::StructDef>) -> crate::UnionId;\n+    #[salsa::interned]\n     fn intern_enum(&self, loc: crate::ItemLoc<ast::EnumDef>) -> crate::EnumId;\n     #[salsa::interned]\n     fn intern_const(&self, loc: crate::ItemLoc<ast::ConstDef>) -> crate::ConstId;\n@@ -20,3 +26,15 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_type_alias(&self, loc: crate::ItemLoc<ast::TypeAliasDef>) -> crate::TypeAliasId;\n }\n+\n+#[salsa::query_group(DefDatabase2Storage)]\n+pub trait DefDatabase2: InternDatabase + AstDatabase {\n+    #[salsa::invoke(RawItems::raw_items_with_source_map_query)]\n+    fn raw_items_with_source_map(\n+        &self,\n+        file_id: HirFileId,\n+    ) -> (Arc<RawItems>, Arc<ImportSourceMap>);\n+\n+    #[salsa::invoke(RawItems::raw_items_query)]\n+    fn raw_items(&self, file_id: HirFileId) -> Arc<RawItems>;\n+}"}, {"sha": "83583ef8bd3ca81e587a106e6bb60053f1deb3e9", "filename": "crates/ra_hir_def/src/either.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Feither.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "previous_filename": "crates/ra_hir/src/either.rs"}, {"sha": "95d50332568a37611e605a96872f260467f8b30a", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -8,12 +8,20 @@\n //! actually true.\n \n pub mod db;\n+pub mod either;\n+pub mod attr;\n+pub mod name;\n+pub mod path;\n+pub mod type_ref;\n+\n+// FIXME: this should be private\n+pub mod nameres;\n \n use std::hash::{Hash, Hasher};\n \n use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId};\n use ra_arena::{impl_arena_id, RawId};\n-use ra_db::{salsa, CrateId};\n+use ra_db::{salsa, CrateId, FileId};\n use ra_syntax::{ast, AstNode, SyntaxNode};\n \n use crate::db::InternDatabase;\n@@ -24,6 +32,68 @@ pub struct Source<T> {\n     pub ast: T,\n }\n \n+pub enum ModuleSource {\n+    SourceFile(ast::SourceFile),\n+    Module(ast::Module),\n+}\n+\n+impl ModuleSource {\n+    pub fn new(\n+        db: &impl db::DefDatabase2,\n+        file_id: Option<FileId>,\n+        decl_id: Option<AstId<ast::Module>>,\n+    ) -> ModuleSource {\n+        match (file_id, decl_id) {\n+            (Some(file_id), _) => {\n+                let source_file = db.parse(file_id).tree();\n+                ModuleSource::SourceFile(source_file)\n+            }\n+            (None, Some(item_id)) => {\n+                let module = item_id.to_node(db);\n+                assert!(module.item_list().is_some(), \"expected inline module\");\n+                ModuleSource::Module(module)\n+            }\n+            (None, None) => panic!(),\n+        }\n+    }\n+\n+    // FIXME: this methods do not belong here\n+    pub fn from_position(\n+        db: &impl db::DefDatabase2,\n+        position: ra_db::FilePosition,\n+    ) -> ModuleSource {\n+        let parse = db.parse(position.file_id);\n+        match &ra_syntax::algo::find_node_at_offset::<ast::Module>(\n+            parse.tree().syntax(),\n+            position.offset,\n+        ) {\n+            Some(m) if !m.has_semi() => ModuleSource::Module(m.clone()),\n+            _ => {\n+                let source_file = parse.tree();\n+                ModuleSource::SourceFile(source_file)\n+            }\n+        }\n+    }\n+\n+    pub fn from_child_node(\n+        db: &impl db::DefDatabase2,\n+        file_id: FileId,\n+        child: &SyntaxNode,\n+    ) -> ModuleSource {\n+        if let Some(m) = child.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi()) {\n+            ModuleSource::Module(m)\n+        } else {\n+            let source_file = db.parse(file_id).tree();\n+            ModuleSource::SourceFile(source_file)\n+        }\n+    }\n+\n+    pub fn from_file_id(db: &impl db::DefDatabase2, file_id: FileId) -> ModuleSource {\n+        let source_file = db.parse(file_id).tree();\n+        ModuleSource::SourceFile(source_file)\n+    }\n+}\n+\n impl<T> Source<T> {\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }\n@@ -155,6 +225,18 @@ impl AstItemDef<ast::StructDef> for StructId {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct UnionId(salsa::InternId);\n+impl_intern_key!(UnionId);\n+impl AstItemDef<ast::StructDef> for UnionId {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n+        db.intern_union(loc)\n+    }\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StructDef> {\n+        db.lookup_intern_union(self)\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumId(salsa::InternId);\n impl_intern_key!(EnumId);\n@@ -167,6 +249,17 @@ impl AstItemDef<ast::EnumDef> for EnumId {\n     }\n }\n \n+// FIXME: rename to `VariantId`, only enums can ave variants\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct EnumVariantId {\n+    parent: EnumId,\n+    local_id: LocalEnumVariantId,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub(crate) struct LocalEnumVariantId(RawId);\n+impl_arena_id!(LocalEnumVariantId);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ConstId(salsa::InternId);\n impl_intern_key!(ConstId);"}, {"sha": "720896ee8ebfa7f948fc0a1566c1c37b6a37bbcc", "filename": "crates/ra_hir_def/src/name.rs", "status": "renamed", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fname.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -33,7 +33,7 @@ impl Name {\n         Name(Repr::Text(text))\n     }\n \n-    pub(crate) fn new_tuple_field(idx: usize) -> Name {\n+    pub fn new_tuple_field(idx: usize) -> Name {\n         Name(Repr::TupleField(idx))\n     }\n \n@@ -52,19 +52,19 @@ impl Name {\n         }\n     }\n \n-    pub(crate) fn missing() -> Name {\n+    pub fn missing() -> Name {\n         Name::new_text(\"[missing name]\".into())\n     }\n \n-    pub(crate) fn as_tuple_index(&self) -> Option<usize> {\n+    pub fn as_tuple_index(&self) -> Option<usize> {\n         match self.0 {\n             Repr::TupleField(idx) => Some(idx),\n             _ => None,\n         }\n     }\n }\n \n-pub(crate) trait AsName {\n+pub trait AsName {\n     fn as_name(&self) -> Name;\n }\n \n@@ -99,44 +99,44 @@ impl AsName for ra_db::Dependency {\n }\n \n // Primitives\n-pub(crate) const ISIZE: Name = Name::new_inline_ascii(5, b\"isize\");\n-pub(crate) const I8: Name = Name::new_inline_ascii(2, b\"i8\");\n-pub(crate) const I16: Name = Name::new_inline_ascii(3, b\"i16\");\n-pub(crate) const I32: Name = Name::new_inline_ascii(3, b\"i32\");\n-pub(crate) const I64: Name = Name::new_inline_ascii(3, b\"i64\");\n-pub(crate) const I128: Name = Name::new_inline_ascii(4, b\"i128\");\n-pub(crate) const USIZE: Name = Name::new_inline_ascii(5, b\"usize\");\n-pub(crate) const U8: Name = Name::new_inline_ascii(2, b\"u8\");\n-pub(crate) const U16: Name = Name::new_inline_ascii(3, b\"u16\");\n-pub(crate) const U32: Name = Name::new_inline_ascii(3, b\"u32\");\n-pub(crate) const U64: Name = Name::new_inline_ascii(3, b\"u64\");\n-pub(crate) const U128: Name = Name::new_inline_ascii(4, b\"u128\");\n-pub(crate) const F32: Name = Name::new_inline_ascii(3, b\"f32\");\n-pub(crate) const F64: Name = Name::new_inline_ascii(3, b\"f64\");\n-pub(crate) const BOOL: Name = Name::new_inline_ascii(4, b\"bool\");\n-pub(crate) const CHAR: Name = Name::new_inline_ascii(4, b\"char\");\n-pub(crate) const STR: Name = Name::new_inline_ascii(3, b\"str\");\n+pub const ISIZE: Name = Name::new_inline_ascii(5, b\"isize\");\n+pub const I8: Name = Name::new_inline_ascii(2, b\"i8\");\n+pub const I16: Name = Name::new_inline_ascii(3, b\"i16\");\n+pub const I32: Name = Name::new_inline_ascii(3, b\"i32\");\n+pub const I64: Name = Name::new_inline_ascii(3, b\"i64\");\n+pub const I128: Name = Name::new_inline_ascii(4, b\"i128\");\n+pub const USIZE: Name = Name::new_inline_ascii(5, b\"usize\");\n+pub const U8: Name = Name::new_inline_ascii(2, b\"u8\");\n+pub const U16: Name = Name::new_inline_ascii(3, b\"u16\");\n+pub const U32: Name = Name::new_inline_ascii(3, b\"u32\");\n+pub const U64: Name = Name::new_inline_ascii(3, b\"u64\");\n+pub const U128: Name = Name::new_inline_ascii(4, b\"u128\");\n+pub const F32: Name = Name::new_inline_ascii(3, b\"f32\");\n+pub const F64: Name = Name::new_inline_ascii(3, b\"f64\");\n+pub const BOOL: Name = Name::new_inline_ascii(4, b\"bool\");\n+pub const CHAR: Name = Name::new_inline_ascii(4, b\"char\");\n+pub const STR: Name = Name::new_inline_ascii(3, b\"str\");\n \n // Special names\n-pub(crate) const SELF_PARAM: Name = Name::new_inline_ascii(4, b\"self\");\n-pub(crate) const SELF_TYPE: Name = Name::new_inline_ascii(4, b\"Self\");\n-pub(crate) const MACRO_RULES: Name = Name::new_inline_ascii(11, b\"macro_rules\");\n+pub const SELF_PARAM: Name = Name::new_inline_ascii(4, b\"self\");\n+pub const SELF_TYPE: Name = Name::new_inline_ascii(4, b\"Self\");\n+pub const MACRO_RULES: Name = Name::new_inline_ascii(11, b\"macro_rules\");\n \n // Components of known path (value or mod name)\n-pub(crate) const STD: Name = Name::new_inline_ascii(3, b\"std\");\n-pub(crate) const ITER: Name = Name::new_inline_ascii(4, b\"iter\");\n-pub(crate) const OPS: Name = Name::new_inline_ascii(3, b\"ops\");\n-pub(crate) const FUTURE: Name = Name::new_inline_ascii(6, b\"future\");\n-pub(crate) const RESULT: Name = Name::new_inline_ascii(6, b\"result\");\n-pub(crate) const BOXED: Name = Name::new_inline_ascii(5, b\"boxed\");\n+pub const STD: Name = Name::new_inline_ascii(3, b\"std\");\n+pub const ITER: Name = Name::new_inline_ascii(4, b\"iter\");\n+pub const OPS: Name = Name::new_inline_ascii(3, b\"ops\");\n+pub const FUTURE: Name = Name::new_inline_ascii(6, b\"future\");\n+pub const RESULT: Name = Name::new_inline_ascii(6, b\"result\");\n+pub const BOXED: Name = Name::new_inline_ascii(5, b\"boxed\");\n \n // Components of known path (type name)\n-pub(crate) const INTO_ITERATOR_TYPE: Name = Name::new_inline_ascii(12, b\"IntoIterator\");\n-pub(crate) const ITEM_TYPE: Name = Name::new_inline_ascii(4, b\"Item\");\n-pub(crate) const TRY_TYPE: Name = Name::new_inline_ascii(3, b\"Try\");\n-pub(crate) const OK_TYPE: Name = Name::new_inline_ascii(2, b\"Ok\");\n-pub(crate) const FUTURE_TYPE: Name = Name::new_inline_ascii(6, b\"Future\");\n-pub(crate) const RESULT_TYPE: Name = Name::new_inline_ascii(6, b\"Result\");\n-pub(crate) const OUTPUT_TYPE: Name = Name::new_inline_ascii(6, b\"Output\");\n-pub(crate) const TARGET_TYPE: Name = Name::new_inline_ascii(6, b\"Target\");\n-pub(crate) const BOX_TYPE: Name = Name::new_inline_ascii(3, b\"Box\");\n+pub const INTO_ITERATOR_TYPE: Name = Name::new_inline_ascii(12, b\"IntoIterator\");\n+pub const ITEM_TYPE: Name = Name::new_inline_ascii(4, b\"Item\");\n+pub const TRY_TYPE: Name = Name::new_inline_ascii(3, b\"Try\");\n+pub const OK_TYPE: Name = Name::new_inline_ascii(2, b\"Ok\");\n+pub const FUTURE_TYPE: Name = Name::new_inline_ascii(6, b\"Future\");\n+pub const RESULT_TYPE: Name = Name::new_inline_ascii(6, b\"Result\");\n+pub const OUTPUT_TYPE: Name = Name::new_inline_ascii(6, b\"Output\");\n+pub const TARGET_TYPE: Name = Name::new_inline_ascii(6, b\"Target\");\n+pub const BOX_TYPE: Name = Name::new_inline_ascii(3, b\"Box\");", "previous_filename": "crates/ra_hir/src/name.rs"}, {"sha": "5893708e8ba0ef98ce996d1241bc417d0212af53", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -0,0 +1,3 @@\n+//! FIXME: write short doc here\n+\n+pub mod raw;"}, {"sha": "86b4fef9659b66416aa989001a30b2fe69c8e1f0", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "renamed", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -2,17 +2,20 @@\n \n use std::{ops::Index, sync::Arc};\n \n+use hir_expand::{ast_id_map::AstIdMap, db::AstDatabase};\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n     AstNode, AstPtr, SourceFile,\n };\n-use test_utils::tested_by;\n \n use crate::{\n     attr::Attr,\n-    db::{AstDatabase, DefDatabase},\n-    AsName, AstIdMap, Either, FileAstId, HirFileId, ModuleSource, Name, Path, Source,\n+    db::DefDatabase2,\n+    either::Either,\n+    name::{AsName, Name},\n+    path::Path,\n+    FileAstId, HirFileId, ModuleSource, Source,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -48,7 +51,7 @@ impl ImportSourceMap {\n         self.map.insert(import, ptr)\n     }\n \n-    pub(crate) fn get(&self, source: &ModuleSource, import: ImportId) -> ImportSource {\n+    pub fn get(&self, source: &ModuleSource, import: ImportId) -> ImportSource {\n         let file = match source {\n             ModuleSource::SourceFile(file) => file.clone(),\n             ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n@@ -60,14 +63,14 @@ impl ImportSourceMap {\n \n impl RawItems {\n     pub(crate) fn raw_items_query(\n-        db: &(impl DefDatabase + AstDatabase),\n+        db: &(impl DefDatabase2 + AstDatabase),\n         file_id: HirFileId,\n     ) -> Arc<RawItems> {\n         db.raw_items_with_source_map(file_id).0\n     }\n \n     pub(crate) fn raw_items_with_source_map_query(\n-        db: &(impl DefDatabase + AstDatabase),\n+        db: &(impl DefDatabase2 + AstDatabase),\n         file_id: HirFileId,\n     ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {\n@@ -87,7 +90,7 @@ impl RawItems {\n         (Arc::new(collector.raw_items), Arc::new(collector.source_map))\n     }\n \n-    pub(super) fn items(&self) -> &[RawItem] {\n+    pub fn items(&self) -> &[RawItem] {\n         &self.items\n     }\n }\n@@ -124,31 +127,31 @@ impl Index<Macro> for RawItems {\n type Attrs = Option<Arc<[Attr]>>;\n \n #[derive(Debug, PartialEq, Eq, Clone)]\n-pub(super) struct RawItem {\n+pub struct RawItem {\n     attrs: Attrs,\n-    pub(super) kind: RawItemKind,\n+    pub kind: RawItemKind,\n }\n \n impl RawItem {\n-    pub(super) fn attrs(&self) -> &[Attr] {\n+    pub fn attrs(&self) -> &[Attr] {\n         self.attrs.as_ref().map_or(&[], |it| &*it)\n     }\n }\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub(super) enum RawItemKind {\n+pub enum RawItemKind {\n     Module(Module),\n     Import(ImportId),\n     Def(Def),\n     Macro(Macro),\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(super) struct Module(RawId);\n+pub struct Module(RawId);\n impl_arena_id!(Module);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(super) enum ModuleData {\n+pub enum ModuleData {\n     Declaration { name: Name, ast_id: FileAstId<ast::Module> },\n     Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n }\n@@ -159,26 +162,26 @@ impl_arena_id!(ImportId);\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n-    pub(super) path: Path,\n-    pub(super) alias: Option<Name>,\n-    pub(super) is_glob: bool,\n-    pub(super) is_prelude: bool,\n-    pub(super) is_extern_crate: bool,\n-    pub(super) is_macro_use: bool,\n+    pub path: Path,\n+    pub alias: Option<Name>,\n+    pub is_glob: bool,\n+    pub is_prelude: bool,\n+    pub is_extern_crate: bool,\n+    pub is_macro_use: bool,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(super) struct Def(RawId);\n+pub struct Def(RawId);\n impl_arena_id!(Def);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(super) struct DefData {\n-    pub(super) name: Name,\n-    pub(super) kind: DefKind,\n+pub struct DefData {\n+    pub name: Name,\n+    pub kind: DefKind,\n }\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub(super) enum DefKind {\n+pub enum DefKind {\n     Function(FileAstId<ast::FnDef>),\n     Struct(FileAstId<ast::StructDef>),\n     Union(FileAstId<ast::StructDef>),\n@@ -190,15 +193,15 @@ pub(super) enum DefKind {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(super) struct Macro(RawId);\n+pub struct Macro(RawId);\n impl_arena_id!(Macro);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(super) struct MacroData {\n-    pub(super) ast_id: FileAstId<ast::MacroCall>,\n-    pub(super) path: Path,\n-    pub(super) name: Option<Name>,\n-    pub(super) export: bool,\n+pub struct MacroData {\n+    pub ast_id: FileAstId<ast::MacroCall>,\n+    pub path: Path,\n+    pub name: Option<Name>,\n+    pub export: bool,\n }\n \n struct RawItemsCollector<DB> {\n@@ -297,7 +300,8 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n             self.push_item(current_module, attrs, RawItemKind::Module(item));\n             return;\n         }\n-        tested_by!(name_res_works_for_broken_modules);\n+        // FIXME: restore this mark once we complete hir splitting\n+        // tested_by!(name_res_works_for_broken_modules);\n     }\n \n     fn add_use_item(&mut self, current_module: Option<Module>, use_item: ast::UseItem) {", "previous_filename": "crates/ra_hir/src/nameres/raw.rs"}, {"sha": "fe060437df8f7fb688d0cb6e83dee99d0574ed59", "filename": "crates/ra_hir_def/src/path.rs", "status": "renamed", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -2,12 +2,18 @@\n \n use std::{iter, sync::Arc};\n \n+use hir_expand::db::AstDatabase;\n+use ra_db::CrateId;\n use ra_syntax::{\n     ast::{self, NameOwner, TypeAscriptionOwner},\n     AstNode,\n };\n \n-use crate::{db::AstDatabase, name, type_ref::TypeRef, AsName, Crate, Name, Source};\n+use crate::{\n+    name::{self, AsName, Name},\n+    type_ref::TypeRef,\n+    Source,\n+};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {\n@@ -55,7 +61,7 @@ pub enum PathKind {\n     // Type based path like `<T>::foo`\n     Type(Box<TypeRef>),\n     // `$crate` from macro expansion\n-    DollarCrate(Crate),\n+    DollarCrate(CrateId),\n }\n \n impl Path {\n@@ -66,12 +72,7 @@ impl Path {\n         mut cb: impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n     ) {\n         if let Some(tree) = item_src.ast.use_tree() {\n-            expand_use_tree(\n-                None,\n-                tree,\n-                &|| item_src.file_id.macro_crate(db).map(|crate_id| Crate { crate_id }),\n-                &mut cb,\n-            );\n+            expand_use_tree(None, tree, &|| item_src.file_id.macro_crate(db), &mut cb);\n         }\n     }\n \n@@ -95,10 +96,10 @@ impl Path {\n     /// It correctly handles `$crate` based path from macro call.\n     pub fn from_src(source: Source<ast::Path>, db: &impl AstDatabase) -> Option<Path> {\n         let file_id = source.file_id;\n-        Path::parse(source.ast, &|| file_id.macro_crate(db).map(|crate_id| Crate { crate_id }))\n+        Path::parse(source.ast, &|| file_id.macro_crate(db))\n     }\n \n-    fn parse(mut path: ast::Path, macro_crate: &impl Fn() -> Option<Crate>) -> Option<Path> {\n+    fn parse(mut path: ast::Path, macro_crate: &impl Fn() -> Option<CrateId>) -> Option<Path> {\n         let mut kind = PathKind::Plain;\n         let mut segments = Vec::new();\n         loop {\n@@ -229,7 +230,7 @@ impl Path {\n }\n \n impl GenericArgs {\n-    pub(crate) fn from_ast(node: ast::TypeArgList) -> Option<GenericArgs> {\n+    pub fn from_ast(node: ast::TypeArgList) -> Option<GenericArgs> {\n         let mut args = Vec::new();\n         for type_arg in node.type_args() {\n             let type_ref = TypeRef::from_ast_opt(type_arg.type_ref());\n@@ -293,7 +294,7 @@ impl From<Name> for Path {\n fn expand_use_tree(\n     prefix: Option<Path>,\n     tree: ast::UseTree,\n-    macro_crate: &impl Fn() -> Option<Crate>,\n+    macro_crate: &impl Fn() -> Option<CrateId>,\n     cb: &mut impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n ) {\n     if let Some(use_tree_list) = tree.use_tree_list() {\n@@ -338,7 +339,7 @@ fn expand_use_tree(\n fn convert_path(\n     prefix: Option<Path>,\n     path: ast::Path,\n-    macro_crate: &impl Fn() -> Option<Crate>,\n+    macro_crate: &impl Fn() -> Option<CrateId>,\n ) -> Option<Path> {\n     let prefix = if let Some(qual) = path.qualifier() {\n         Some(convert_path(prefix, qual, macro_crate)?)", "previous_filename": "crates/ra_hir/src/path.rs"}, {"sha": "8af061116de8719c7b68397e64d0a27a9acc302d", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -3,7 +3,7 @@\n \n use ra_syntax::ast::{self, TypeAscriptionOwner, TypeBoundsOwner};\n \n-use crate::Path;\n+use crate::path::Path;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Mutability {\n@@ -64,7 +64,7 @@ pub enum TypeBound {\n \n impl TypeRef {\n     /// Converts an `ast::TypeRef` to a `hir::TypeRef`.\n-    pub(crate) fn from_ast(node: ast::TypeRef) -> Self {\n+    pub fn from_ast(node: ast::TypeRef) -> Self {\n         match node {\n             ast::TypeRef::ParenType(inner) => TypeRef::from_ast_opt(inner.type_ref()),\n             ast::TypeRef::TupleType(inner) => {\n@@ -113,7 +113,7 @@ impl TypeRef {\n         }\n     }\n \n-    pub(crate) fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n+    pub fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n         if let Some(node) = node {\n             TypeRef::from_ast(node)\n         } else {\n@@ -135,7 +135,7 @@ pub(crate) fn type_bounds_from_ast(type_bounds_opt: Option<ast::TypeBoundList>)\n }\n \n impl TypeBound {\n-    pub(crate) fn from_ast(node: ast::TypeBound) -> Self {\n+    pub fn from_ast(node: ast::TypeBound) -> Self {\n         match node.kind() {\n             ast::TypeBoundKind::PathType(path_type) => {\n                 let path = match path_type.path() {", "previous_filename": "crates/ra_hir/src/type_ref.rs"}, {"sha": "3c0ef8f1c05a9eede76d7937d400e2112fd613a8", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -12,7 +12,7 @@ use std::hash::{Hash, Hasher};\n use ra_db::{salsa, CrateId, FileId};\n use ra_syntax::ast::{self, AstNode};\n \n-use crate::{ast_id_map::FileAstId, db::AstDatabase};\n+use crate::ast_id_map::FileAstId;\n \n /// Input to the analyzer is a set of files, where each file is identified by\n /// `FileId` and contains source code. However, another source of source code in\n@@ -50,7 +50,7 @@ impl From<MacroFile> for HirFileId {\n impl HirFileId {\n     /// For macro-expansion files, returns the file original source file the\n     /// expansion originated from.\n-    pub fn original_file(self, db: &dyn AstDatabase) -> FileId {\n+    pub fn original_file(self, db: &dyn db::AstDatabase) -> FileId {\n         match self.0 {\n             HirFileIdRepr::FileId(file_id) => file_id,\n             HirFileIdRepr::MacroFile(macro_file) => {\n@@ -61,7 +61,7 @@ impl HirFileId {\n     }\n \n     /// Get the crate which the macro lives in, if it is a macro file.\n-    pub fn macro_crate(self, db: &dyn AstDatabase) -> Option<CrateId> {\n+    pub fn macro_crate(self, db: &dyn db::AstDatabase) -> Option<CrateId> {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n@@ -154,7 +154,7 @@ impl<N: AstNode> AstId<N> {\n         self.file_id\n     }\n \n-    pub fn to_node(&self, db: &dyn AstDatabase) -> N {\n+    pub fn to_node(&self, db: &dyn db::AstDatabase) -> N {\n         let root = db.parse_or_expand(self.file_id).unwrap();\n         db.ast_id_map(self.file_id).get(self.file_ast_id).to_node(&root)\n     }"}, {"sha": "785e71808b7c400d9d6fd9bfa1b6061aed4b0aec", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "patch": "@@ -23,6 +23,7 @@ use crate::{\n     hir::db::InternDatabaseStorage,\n     hir::db::AstDatabaseStorage,\n     hir::db::DefDatabaseStorage,\n+    hir::db::DefDatabase2Storage,\n     hir::db::HirDatabaseStorage\n )]\n #[derive(Debug)]"}]}