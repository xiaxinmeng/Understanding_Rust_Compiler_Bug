{"sha": "0078e5418552bbe888376ed5331836370bcf2c99", "node_id": "C_kwDOAAsO6NoAKDAwNzhlNTQxODU1MmJiZTg4ODM3NmVkNTMzMTgzNjM3MGJjZjJjOTk", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-25T09:06:10Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-02T10:21:00Z"}, "message": "rebase and use ty::Const in patterns again", "tree": {"sha": "f619ca7afec5903c7650fade1e8257b538a476d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f619ca7afec5903c7650fade1e8257b538a476d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0078e5418552bbe888376ed5331836370bcf2c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0078e5418552bbe888376ed5331836370bcf2c99", "html_url": "https://github.com/rust-lang/rust/commit/0078e5418552bbe888376ed5331836370bcf2c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0078e5418552bbe888376ed5331836370bcf2c99/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac60db231c96738b874fb31a755ef49a0d71926c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac60db231c96738b874fb31a755ef49a0d71926c", "html_url": "https://github.com/rust-lang/rust/commit/ac60db231c96738b874fb31a755ef49a0d71926c"}], "stats": {"total": 217, "additions": 73, "deletions": 144}, "files": [{"sha": "4ea0c89c27b3af4a8571d7501cc7362db158388b", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -184,13 +184,13 @@ pub(crate) fn destructure_mir_constant<'tcx>(\n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty().kind() {\n         ty::Array(_, len) => (usize::try_from(len.eval_usize(tcx, param_env)).unwrap(), None, op),\n-        ty::Adt(def, _) if def.variants.is_empty() => {\n+        ty::Adt(def, _) if def.variants().is_empty() => {\n             return mir::DestructuredMirConstant { variant: None, fields: &[] };\n         }\n         ty::Adt(def, _) => {\n             let variant = ecx.read_discriminant(&op).unwrap().1;\n             let down = ecx.operand_downcast(&op, variant).unwrap();\n-            (def.variants[variant].fields.len(), Some(variant), down)\n+            (def.variants()[variant].fields.len(), Some(variant), down)\n         }\n         ty::Tuple(substs) => (substs.len(), None, op),\n         _ => bug!(\"cannot destructure constant {:?}\", val),\n@@ -253,7 +253,7 @@ pub(crate) fn deref_mir_constant<'tcx>(\n     let mplace = ecx.deref_operand(&op).unwrap();\n     if let Some(alloc_id) = mplace.ptr.provenance {\n         assert_eq!(\n-            tcx.get_global_alloc(alloc_id).unwrap().unwrap_memory().mutability,\n+            tcx.get_global_alloc(alloc_id).unwrap().unwrap_memory().0.0.mutability,\n             Mutability::Not,\n             \"deref_const cannot be used with mutable allocations as \\\n             that could allow pattern matching to observe mutable statics\","}, {"sha": "5d09d84e19c40fa12e4f7793bc231e6677ebc0ef", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -2711,7 +2711,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 if let Some(val) = c.val().try_eval(tcx, param_env) {\n                     match val {\n                         Ok(val) => Self::Val(val, c.ty()),\n-                        Err(ErrorReported) => Self::Ty(tcx.const_error(self.ty())),\n+                        Err(_) => Self::Ty(tcx.const_error(self.ty())),\n                     }\n                 } else {\n                     self"}, {"sha": "b17343d7692f6644e7e3ad776157fc1e9576c8e9", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -193,7 +193,7 @@ pub enum StmtKind<'tcx> {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Expr<'_>, 144);\n+rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n \n /// A THIR expression.\n #[derive(Debug, HashStable)]\n@@ -736,11 +736,7 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                         Some(adt_def.variant(variant_index))\n                     }\n                     _ => self.ty.ty_adt_def().and_then(|adt| {\n-                        if !adt.is_enum() {\n-                            Some(adt.non_enum_variant())\n-                        } else {\n-                            None\n-                        }\n+                        if !adt.is_enum() { Some(adt.non_enum_variant()) } else { None }\n                     }),\n                 };\n "}, {"sha": "ab9e966063340ec0538189675e739c8ed9b1b877", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -2,7 +2,6 @@ use super::{\n     Arm, Block, Expr, ExprKind, Guard, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind, Thir,\n };\n use crate::mir::ConstantKind;\n-use crate::ty::Const;\n \n pub trait Visitor<'a, 'tcx: 'a>: Sized {\n     fn thir(&self) -> &'a Thir<'tcx>;"}, {"sha": "35d286d2c5781e607a53004969fd7e9f6956f248", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -76,11 +76,7 @@ static_assert_size!(ConstKind<'_>, 40);\n impl<'tcx> ConstKind<'tcx> {\n     #[inline]\n     pub fn try_to_value(self) -> Option<ConstValue<'tcx>> {\n-        if let ConstKind::Value(val) = self {\n-            Some(val)\n-        } else {\n-            None\n-        }\n+        if let ConstKind::Value(val) = self { Some(val) } else { None }\n     }\n \n     #[inline]"}, {"sha": "4a2f544970564be7fc033ef4a4904b35584a7fe9", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 3, "deletions": 61, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -1,17 +1,12 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::Builder;\n-use crate::thir::constant::parse_float;\n-use rustc_ast::ast;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::mir::interpret::{\n-    Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n-};\n+use rustc_middle::mir::interpret::{ConstValue, LitToConstError, LitToConstInput, Scalar};\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt};\n-use rustc_target::abi::Size;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, yielding a compile-time constant. Assumes that\n@@ -32,11 +27,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Literal { lit, neg } => {\n                 let literal =\n-                    match lit_to_constant(tcx, LitToConstInput { lit: &lit.node, ty, neg }) {\n+                    match tcx.lit_to_mir_constant(LitToConstInput { lit: &lit.node, ty, neg }) {\n                         Ok(c) => c,\n                         Err(LitToConstError::Reported) => ConstantKind::Ty(tcx.const_error(ty)),\n                         Err(LitToConstError::TypeError) => {\n-                            bug!(\"encountered type error in `lit_to_constant\")\n+                            bug!(\"encountered type error in `lit_to_mir_constant\")\n                         }\n                     };\n \n@@ -85,60 +80,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 Constant { span, user_ty: None, literal }\n             }\n-            ExprKind::ConstBlock { value } => {\n-                Constant { span: span, user_ty: None, literal: value }\n-            }\n             _ => span_bug!(span, \"expression is not a valid constant {:?}\", kind),\n         }\n     }\n }\n-\n-crate fn lit_to_constant<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    lit_input: LitToConstInput<'tcx>,\n-) -> Result<ConstantKind<'tcx>, LitToConstError> {\n-    let LitToConstInput { lit, ty, neg } = lit_input;\n-    let trunc = |n| {\n-        let param_ty = ty::ParamEnv::reveal_all().and(ty);\n-        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n-        trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n-        let result = width.truncate(n);\n-        trace!(\"trunc result: {}\", result);\n-        Ok(ConstValue::Scalar(Scalar::from_uint(result, width)))\n-    };\n-\n-    let value = match (lit, &ty.kind()) {\n-        (ast::LitKind::Str(s, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_str() => {\n-            let s = s.as_str();\n-            let allocation = Allocation::from_bytes_byte_aligned_immutable(s.as_bytes());\n-            let allocation = tcx.intern_const_alloc(allocation);\n-            ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n-        }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n-            if matches!(inner_ty.kind(), ty::Slice(_)) =>\n-        {\n-            let allocation = Allocation::from_bytes_byte_aligned_immutable(data as &[u8]);\n-            let allocation = tcx.intern_const_alloc(allocation);\n-            ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n-        }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {\n-            let id = tcx.allocate_bytes(data);\n-            ConstValue::Scalar(Scalar::from_pointer(id.into(), &tcx))\n-        }\n-        (ast::LitKind::Byte(n), ty::Uint(ty::UintTy::U8)) => {\n-            ConstValue::Scalar(Scalar::from_uint(*n, Size::from_bytes(1)))\n-        }\n-        (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n-            trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?\n-        }\n-        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n-            parse_float(*n, *fty, neg).ok_or(LitToConstError::Reported)?\n-        }\n-        (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n-        (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n-        (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n-        _ => return Err(LitToConstError::TypeError),\n-    };\n-\n-    Ok(ConstantKind::Val(value, ty))\n-}"}, {"sha": "3fc3e7338d85ebd9f7b2486c36b28e74da029b66", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -59,6 +59,56 @@ crate fn lit_to_const<'tcx>(\n     Ok(ty::Const::from_value(tcx, lit, ty))\n }\n \n+crate fn lit_to_mir_constant<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    lit_input: LitToConstInput<'tcx>,\n+) -> Result<ConstantKind<'tcx>, LitToConstError> {\n+    let LitToConstInput { lit, ty, neg } = lit_input;\n+    let trunc = |n| {\n+        let param_ty = ty::ParamEnv::reveal_all().and(ty);\n+        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n+        trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n+        let result = width.truncate(n);\n+        trace!(\"trunc result: {}\", result);\n+        Ok(ConstValue::Scalar(Scalar::from_uint(result, width)))\n+    };\n+\n+    let value = match (lit, &ty.kind()) {\n+        (ast::LitKind::Str(s, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_str() => {\n+            let s = s.as_str();\n+            let allocation = Allocation::from_bytes_byte_aligned_immutable(s.as_bytes());\n+            let allocation = tcx.intern_const_alloc(allocation);\n+            ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n+        }\n+        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n+            if matches!(inner_ty.kind(), ty::Slice(_)) =>\n+        {\n+            let allocation = Allocation::from_bytes_byte_aligned_immutable(data as &[u8]);\n+            let allocation = tcx.intern_const_alloc(allocation);\n+            ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n+        }\n+        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {\n+            let id = tcx.allocate_bytes(data);\n+            ConstValue::Scalar(Scalar::from_pointer(id.into(), &tcx))\n+        }\n+        (ast::LitKind::Byte(n), ty::Uint(ty::UintTy::U8)) => {\n+            ConstValue::Scalar(Scalar::from_uint(*n, Size::from_bytes(1)))\n+        }\n+        (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n+            trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?\n+        }\n+        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n+            parse_float(*n, *fty, neg).ok_or(LitToConstError::Reported)?\n+        }\n+        (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n+        (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n+        (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n+        _ => return Err(LitToConstError::TypeError),\n+    };\n+\n+    Ok(ConstantKind::Val(value, ty))\n+}\n+\n // FIXME move this to rustc_mir_build::build\n pub(crate) fn parse_float<'tcx>(\n     num: Symbol,"}, {"sha": "820434bd3730007f1523f2b134971639bb28fcec", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -5,6 +5,7 @@\n use crate::thir::pattern::pat_from_hir;\n use crate::thir::util::UserAnnotatedTyHelpers;\n \n+use rustc_ast::ast;\n use rustc_data_structures::steal::Steal;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -15,7 +16,7 @@ use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::mir::ConstantKind;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n \n crate fn thir_body<'tcx>("}, {"sha": "498412b5cfd17c1215f79b033660d7d9b38b8caf", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -377,10 +377,6 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 }\n             }\n \n-            fn visit_const(&mut self, ct: ty::Const<'tcx>) {\n-                self.is_poly |= ct.has_param_types_or_consts();\n-            }\n-\n             fn visit_constant(&mut self, ct: mir::ConstantKind<'tcx>) {\n                 self.is_poly |= ct.has_param_types_or_consts();\n             }\n@@ -815,51 +811,3 @@ impl<'tcx> ConstUnifyCtxt<'tcx> {\n         }\n     }\n }\n-\n-/* Think I need these changes\n-=======\n-            match (a_ct, b_ct) {\n-                (mir::ConstantKind::Ty(a_ct), mir::ConstantKind::Ty(b_ct)) => {\n-                    match (a_ct.val(), b_ct.val()) {\n-                        // We can just unify errors with everything to reduce the amount of\n-                        // emitted errors here.\n-                        (ty::ConstKind::Error(_), _) | (_, ty::ConstKind::Error(_)) => true,\n-                        (ty::ConstKind::Param(a_param), ty::ConstKind::Param(b_param)) => {\n-                            a_param == b_param\n-                        }\n-                        (ty::ConstKind::Value(a_val), ty::ConstKind::Value(b_val)) => {\n-                            a_val == b_val\n-                        }\n-\n-                        // If we have `fn a<const N: usize>() -> [u8; N + 1]` and `fn b<const M: usize>() -> [u8; 1 + M]`\n-                        // we do not want to use `assert_eq!(a(), b())` to infer that `N` and `M` have to be `1`. This\n-                        // means that we only allow inference variables if they are equal.\n-                        (ty::ConstKind::Infer(a_val), ty::ConstKind::Infer(b_val)) => {\n-                            a_val == b_val\n-                        }\n-                        // We expand generic anonymous constants at the start of this function, so this\n-                        // branch should only be taking when dealing with associated constants, at\n-                        // which point directly comparing them seems like the desired behavior.\n-                        //\n-                        // FIXME(generic_const_exprs): This isn't actually the case.\n-                        // We also take this branch for concrete anonymous constants and\n-                        // expand generic anonymous constants with concrete substs.\n-                        (ty::ConstKind::Unevaluated(a_uv), ty::ConstKind::Unevaluated(b_uv)) => {\n-                            a_uv == b_uv\n-                        }\n-                        // FIXME(generic_const_exprs): We may want to either actually try\n-                        // to evaluate `a_ct` and `b_ct` if they are are fully concrete or something like\n-                        // this, for now we just return false here.\n-                        _ => false,\n-                    }\n-                }\n-                (mir::ConstantKind::Val(a_val, a_ty), mir::ConstantKind::Val(b_val, b_ty)) => {\n-                    a_val == b_val && a_ty == b_ty\n-                }\n-                _ => {\n-                    // FIXME Can it happen that we need to compare ConstantKind::Ty(ConstKind::Value)\n-                    // with a ConstantKind::Val and vice versa?\n-                    false\n->>>>>>> 6064f16d846 (change thir to use mir::ConstantKind instead of ty::Const)\n-\n- */"}, {"sha": "053e871c14f6e8a5846e57d5310c6f8ab65c331a", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -407,7 +407,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     let pred =\n                         ty::Binder::dummy(infcx.replace_bound_vars_with_placeholders(binder));\n                     ProcessResult::Changed(mk_pending(vec![\n-                        obligation.with(pred.to_predicate(self.selcx.tcx()))\n+                        obligation.with(pred.to_predicate(self.selcx.tcx())),\n                     ]))\n                 }\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {"}, {"sha": "b5fa847451d1f87ebe110f1a561df961b7e33b2e", "filename": "src/tools/clippy/clippy_lints/src/matches/overlapping_arms.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::consts::{constant, constant_full_int, miri_to_const, FullInt};\n+use clippy_utils::consts::{constant, constant_full_int, FullInt};\n use clippy_utils::diagnostics::span_lint_and_note;\n use core::cmp::Ordering;\n use rustc_hir::{Arm, Expr, PatKind, RangeEnd};\n@@ -32,18 +32,15 @@ fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>)\n         .filter_map(|arm| {\n             if let Arm { pat, guard: None, .. } = *arm {\n                 if let PatKind::Range(ref lhs, ref rhs, range_end) = pat.kind {\n-                    let lhs_const = match lhs {\n-                        Some(lhs) => constant(cx, cx.typeck_results(), lhs)?.0,\n-                        None => miri_to_const(ty.numeric_min_val(cx.tcx)?)?,\n+                    let lhs_val = match lhs {\n+                        Some(lhs) => constant(cx, cx.typeck_results(), lhs)?.0.int_value(cx, ty)?,\n+                        None => FullInt::U(ty.numeric_min_val(cx.tcx)?),\n                     };\n-                    let rhs_const = match rhs {\n-                        Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0,\n-                        None => miri_to_const(ty.numeric_max_val(cx.tcx)?)?,\n+                    let rhs_val = match rhs {\n+                        Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0.int_value(cx, ty)?,\n+                        None => FullInt::U(ty.numeric_max_val(cx.tcx)?),\n                     };\n \n-                    let lhs_val = lhs_const.int_value(cx, ty)?;\n-                    let rhs_val = rhs_const.int_value(cx, ty)?;\n-\n                     let rhs_bound = match range_end {\n                         RangeEnd::Included => EndBound::Included(rhs_val),\n                         RangeEnd::Excluded => EndBound::Excluded(rhs_val),"}, {"sha": "6ba9ba0753d49f42e5ac974d10e7c8e0a9e5ce17", "filename": "src/tools/clippy/clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n     if_chain! {\n         if let ExprKind::Lit(ref l) = lit.kind;\n-        if consts::lit_to_constant(&l.node, cx.typeck_results().expr_ty_opt(lit)) == Constant::Int(1);\n+        if consts::lit_to_mir_constant(&l.node, cx.typeck_results().expr_ty_opt(lit)) == Constant::Int(1);\n         if cx.typeck_results().expr_ty(exp).is_integral();\n \n         then {"}, {"sha": "be46b791aa4b656decb9406aeb5ee275136e8ce1", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0078e5418552bbe888376ed5331836370bcf2c99/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0078e5418552bbe888376ed5331836370bcf2c99/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=0078e5418552bbe888376ed5331836370bcf2c99", "patch": "@@ -179,7 +179,7 @@ impl Constant {\n }\n \n /// Parses a `LitKind` to a `Constant`.\n-pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n+pub fn lit_to_mir_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n@@ -301,7 +301,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 if is_direct_expn_of(e.span, \"cfg\").is_some() {\n                     None\n                 } else {\n-                    Some(lit_to_constant(&lit.node, self.typeck_results.expr_ty_opt(e)))\n+                    Some(lit_to_mir_constant(&lit.node, self.typeck_results.expr_ty_opt(e)))\n                 }\n             },\n             ExprKind::Array(vec) => self.multi(vec).map(Constant::Vec),"}]}