{"sha": "17d11ebe6e9599d804c0378900b92a5a8054aec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZDExZWJlNmU5NTk5ZDgwNGMwMzc4OTAwYjkyYTVhODA1NGFlYzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-01-05T15:16:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-01-07T14:10:22Z"}, "message": "be explicit about doing a binary search; fix out-of-bounds check", "tree": {"sha": "12cf1b84f223bed2f55504d0f3ccf24d116a39c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12cf1b84f223bed2f55504d0f3ccf24d116a39c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17d11ebe6e9599d804c0378900b92a5a8054aec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17d11ebe6e9599d804c0378900b92a5a8054aec3", "html_url": "https://github.com/rust-lang/rust/commit/17d11ebe6e9599d804c0378900b92a5a8054aec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17d11ebe6e9599d804c0378900b92a5a8054aec3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9c14c256b08458c873290a5e34eb493156532e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9c14c256b08458c873290a5e34eb493156532e", "html_url": "https://github.com/rust-lang/rust/commit/4f9c14c256b08458c873290a5e34eb493156532e"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "d21f1ed8964d1e132f032492d987c3bdb31d10fa", "filename": "src/range_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17d11ebe6e9599d804c0378900b92a5a8054aec3/src%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d11ebe6e9599d804c0378900b92a5a8054aec3/src%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frange_map.rs?ref=17d11ebe6e9599d804c0378900b92a5a8054aec3", "patch": "@@ -40,10 +40,11 @@ impl<T> RangeMap<T> {\n \n     /// Find the index containing the given offset.\n     fn find_offset(&self, offset: u64) -> usize {\n-        debug_assert!(self.v.len() > 0);\n+        // We do a binary search\n         let mut left = 0usize; // inclusive\n         let mut right = self.v.len(); // exclusive\n         loop {\n+            debug_assert!(left < right, \"find_offset: offset {} is out-of-bounds\", offset);\n             let candidate = left.checked_add(right).unwrap() / 2;\n             let elem = &self.v[candidate];\n             if offset < elem.range.start {\n@@ -54,7 +55,6 @@ impl<T> RangeMap<T> {\n                 // we are too far left (offset is further right)\n                 debug_assert!(candidate >= left); // we are making progress\n                 left = candidate+1;\n-                debug_assert!(left < right, \"find_offset: offset {} is out-of-bounds\", offset);\n             } else {\n                 // This is it!\n                 return candidate;"}]}