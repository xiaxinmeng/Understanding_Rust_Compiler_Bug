{"sha": "29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTliNWRkZDQ5ZGZmYmRlZThiOGFkNmFhMWNiYzA5MGRiMWNiZjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T15:37:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:43Z"}, "message": "lowering: refactor label/dest  -> expr.rs", "tree": {"sha": "f4a60ad1b0cdcdd2a05cc4cf239858eb15c81158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a60ad1b0cdcdd2a05cc4cf239858eb15c81158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1", "html_url": "https://github.com/rust-lang/rust/commit/29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "961ace3fc229f203c2c84f977a14f8833de47f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/961ace3fc229f203c2c84f977a14f8833de47f55", "html_url": "https://github.com/rust-lang/rust/commit/961ace3fc229f203c2c84f977a14f8833de47f55"}], "stats": {"total": 90, "additions": 43, "deletions": 47}, "files": [{"sha": "1ada058a8bc7dbb981c15a6b47ccd3c9ea45ba27", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1", "patch": "@@ -1263,36 +1263,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_label(&mut self, label: Option<Label>) -> Option<hir::Label> {\n-        label.map(|label| hir::Label {\n-            ident: label.ident,\n-        })\n-    }\n-\n-    fn lower_loop_destination(&mut self, destination: Option<(NodeId, Label)>) -> hir::Destination {\n-        let target_id = match destination {\n-            Some((id, _)) => {\n-                if let Some(loop_id) = self.resolver.get_label_res(id) {\n-                    Ok(self.lower_node_id(loop_id))\n-                } else {\n-                    Err(hir::LoopIdError::UnresolvedLabel)\n-                }\n-            }\n-            None => {\n-                self.loop_scopes\n-                    .last()\n-                    .cloned()\n-                    .map(|id| Ok(self.lower_node_id(id)))\n-                    .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n-                    .into()\n-            }\n-        };\n-        hir::Destination {\n-            label: self.lower_label(destination.map(|(_, label)| label)),\n-            target_id,\n-        }\n-    }\n-\n     fn lower_attrs_extendable(&mut self, attrs: &[Attribute]) -> Vec<Attribute> {\n         attrs\n             .iter()"}, {"sha": "a1c8af8c80dcd8aa3c8b83f0b0e52334885ef100", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=29e9b5ddd49dffbdee8b8ad6aa1cbc090db1cbf1", "patch": "@@ -138,28 +138,13 @@ impl LoweringContext<'_> {\n                 hir::ExprKind::Path(qpath)\n             }\n             ExprKind::Break(opt_label, ref opt_expr) => {\n-                let destination = if self.is_in_loop_condition && opt_label.is_none() {\n-                    hir::Destination {\n-                        label: None,\n-                        target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n-                    }\n-                } else {\n-                    self.lower_loop_destination(opt_label.map(|label| (e.id, label)))\n-                };\n                 hir::ExprKind::Break(\n-                    destination,\n+                    self.lower_jump_destination(e.id, opt_label),\n                     opt_expr.as_ref().map(|x| P(self.lower_expr(x))),\n                 )\n             }\n             ExprKind::Continue(opt_label) => {\n-                hir::ExprKind::Continue(if self.is_in_loop_condition && opt_label.is_none() {\n-                    hir::Destination {\n-                        label: None,\n-                        target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n-                    }\n-                } else {\n-                    self.lower_loop_destination(opt_label.map(|label| (e.id, label)))\n-                })\n+                hir::ExprKind::Continue(self.lower_jump_destination(e.id, opt_label))\n             }\n             ExprKind::Ret(ref e) => hir::ExprKind::Ret(e.as_ref().map(|x| P(self.lower_expr(x)))),\n             ExprKind::InlineAsm(ref asm) => self.lower_expr_asm(asm),\n@@ -818,6 +803,47 @@ impl LoweringContext<'_> {\n         }\n     }\n \n+    fn lower_label(&mut self, label: Option<Label>) -> Option<hir::Label> {\n+        label.map(|label| hir::Label {\n+            ident: label.ident,\n+        })\n+    }\n+\n+    fn lower_loop_destination(&mut self, destination: Option<(NodeId, Label)>) -> hir::Destination {\n+        let target_id = match destination {\n+            Some((id, _)) => {\n+                if let Some(loop_id) = self.resolver.get_label_res(id) {\n+                    Ok(self.lower_node_id(loop_id))\n+                } else {\n+                    Err(hir::LoopIdError::UnresolvedLabel)\n+                }\n+            }\n+            None => {\n+                self.loop_scopes\n+                    .last()\n+                    .cloned()\n+                    .map(|id| Ok(self.lower_node_id(id)))\n+                    .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n+                    .into()\n+            }\n+        };\n+        hir::Destination {\n+            label: self.lower_label(destination.map(|(_, label)| label)),\n+            target_id,\n+        }\n+    }\n+\n+    fn lower_jump_destination(&mut self, id: NodeId, opt_label: Option<Label>) -> hir::Destination {\n+        if self.is_in_loop_condition && opt_label.is_none() {\n+            hir::Destination {\n+                label: None,\n+                target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n+            }\n+        } else {\n+            self.lower_loop_destination(opt_label.map(|label| (id, label)))\n+        }\n+    }\n+\n     fn lower_expr_asm(&mut self, asm: &InlineAsm) -> hir::ExprKind {\n         let hir_asm = hir::InlineAsm {\n             inputs: asm.inputs.iter().map(|&(ref c, _)| c.clone()).collect(),"}]}