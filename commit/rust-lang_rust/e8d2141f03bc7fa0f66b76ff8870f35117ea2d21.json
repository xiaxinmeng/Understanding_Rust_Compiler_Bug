{"sha": "e8d2141f03bc7fa0f66b76ff8870f35117ea2d21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZDIxNDFmMDNiYzdmYTBmNjZiNzZmZjg4NzBmMzUxMTdlYTJkMjE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-14T13:54:35Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:10:21Z"}, "message": "port util/common.rs from oldvisit to <V:Visitor> trait API.", "tree": {"sha": "d101c7945b84a6cf891f725dd57593582b06d740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d101c7945b84a6cf891f725dd57593582b06d740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8d2141f03bc7fa0f66b76ff8870f35117ea2d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d2141f03bc7fa0f66b76ff8870f35117ea2d21", "html_url": "https://github.com/rust-lang/rust/commit/e8d2141f03bc7fa0f66b76ff8870f35117ea2d21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8d2141f03bc7fa0f66b76ff8870f35117ea2d21/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14830209c8278a7372ab91181ebb8d62879c4a0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/14830209c8278a7372ab91181ebb8d62879c4a0c", "html_url": "https://github.com/rust-lang/rust/commit/14830209c8278a7372ab91181ebb8d62879c4a0c"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "22d7a4a5f58443e96eb1097481d55deffa1141dd", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e8d2141f03bc7fa0f66b76ff8870f35117ea2d21/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d2141f03bc7fa0f66b76ff8870f35117ea2d21/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=e8d2141f03bc7fa0f66b76ff8870f35117ea2d21", "patch": "@@ -11,7 +11,8 @@\n \n use syntax::ast;\n use syntax::codemap::{span};\n-use syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n \n use std::hashmap::HashSet;\n use extra;\n@@ -59,42 +60,48 @@ pub fn field_exprs(fields: ~[ast::Field]) -> ~[@ast::expr] {\n     fields.map(|f| f.expr)\n }\n \n-// Takes a predicate p, returns true iff p is true for any subexpressions\n-// of b -- skipping any inner loops (loop, while, loop_body)\n-pub fn loop_query(b: &ast::Block, p: @fn(&ast::expr_) -> bool) -> bool {\n-    let rs = @mut false;\n-    let visit_expr: @fn(@ast::expr,\n-                        (@mut bool,\n-                         oldvisit::vt<@mut bool>)) = |e, (flag, v)| {\n-        *flag |= p(&e.node);\n+struct LoopQueryVisitor {\n+    p: @fn(&ast::expr_) -> bool\n+}\n+\n+impl Visitor<@mut bool> for LoopQueryVisitor {\n+    fn visit_expr(&mut self, e:@ast::expr, flag:@mut bool) {\n+        *flag |= (self.p)(&e.node);\n         match e.node {\n           // Skip inner loops, since a break in the inner loop isn't a\n           // break inside the outer loop\n           ast::expr_loop(*) | ast::expr_while(*) => {}\n-          _ => oldvisit::visit_expr(e, (flag, v))\n+          _ => visit::walk_expr(self, e, flag)\n         }\n-    };\n-    let v = oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_expr: visit_expr,\n-        .. *oldvisit::default_visitor()});\n-    oldvisit::visit_block(b, (rs, v));\n+    }\n+}\n+\n+// Takes a predicate p, returns true iff p is true for any subexpressions\n+// of b -- skipping any inner loops (loop, while, loop_body)\n+pub fn loop_query(b: &ast::Block, p: @fn(&ast::expr_) -> bool) -> bool {\n+    let rs = @mut false;\n+    let mut v = LoopQueryVisitor { p: p };\n+    visit::walk_block(&mut v, b, rs);\n     return *rs;\n }\n \n+struct BlockQueryVisitor {\n+    p: @fn(@ast::expr) -> bool\n+}\n+\n+impl Visitor<@mut bool> for BlockQueryVisitor {\n+    fn visit_expr(&mut self, e:@ast::expr, flag:@mut bool) {\n+        *flag |= (self.p)(e);\n+        visit::walk_expr(self, e, flag)\n+    }\n+}\n+\n // Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n pub fn block_query(b: &ast::Block, p: @fn(@ast::expr) -> bool) -> bool {\n     let rs = @mut false;\n-    let visit_expr: @fn(@ast::expr,\n-                        (@mut bool,\n-                         oldvisit::vt<@mut bool>)) = |e, (flag, v)| {\n-        *flag |= p(e);\n-        oldvisit::visit_expr(e, (flag, v))\n-    };\n-    let v = oldvisit::mk_vt(@oldvisit::Visitor{\n-        visit_expr: visit_expr,\n-        .. *oldvisit::default_visitor()});\n-    oldvisit::visit_block(b, (rs, v));\n+    let mut v = BlockQueryVisitor { p: p };\n+    visit::walk_block(&mut v, b, rs);\n     return *rs;\n }\n "}]}