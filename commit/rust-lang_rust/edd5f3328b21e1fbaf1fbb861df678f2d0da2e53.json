{"sha": "edd5f3328b21e1fbaf1fbb861df678f2d0da2e53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZDVmMzMyOGIyMWUxZmJhZjFmYmI4NjFkZjY3OGYyZDBkYTJlNTM=", "commit": {"author": {"name": "Luke Jones", "email": "luke.nukem.jones@gmail.com", "date": "2016-02-27T01:41:38Z"}, "committer": {"name": "Luke Jones", "email": "luke.nukem.jones@gmail.com", "date": "2016-02-27T01:41:38Z"}, "message": "Refinement of paragraph referenced by [this\nissue](https://github.com/rust-lang/rust/issues/31927)", "tree": {"sha": "3d9d5480291402af7c2ffd27b9dfcb9c91d10099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d9d5480291402af7c2ffd27b9dfcb9c91d10099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edd5f3328b21e1fbaf1fbb861df678f2d0da2e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edd5f3328b21e1fbaf1fbb861df678f2d0da2e53", "html_url": "https://github.com/rust-lang/rust/commit/edd5f3328b21e1fbaf1fbb861df678f2d0da2e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edd5f3328b21e1fbaf1fbb861df678f2d0da2e53/comments", "author": null, "committer": null, "parents": [{"sha": "98a8a71236453a16f0048a65506f4d0bea042ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a8a71236453a16f0048a65506f4d0bea042ca5", "html_url": "https://github.com/rust-lang/rust/commit/98a8a71236453a16f0048a65506f4d0bea042ca5"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "b9b6e9a4c9568b711390dc3be6a0cc6878b88bd5", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/edd5f3328b21e1fbaf1fbb861df678f2d0da2e53/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/edd5f3328b21e1fbaf1fbb861df678f2d0da2e53/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=edd5f3328b21e1fbaf1fbb861df678f2d0da2e53", "patch": "@@ -906,17 +906,17 @@ let guess: u32 = match guess.trim().parse() {\n     Err(_) => continue,\n };\n ```\n-\n This is how you generally move from \u2018crash on error\u2019 to \u2018actually handle the\n-error\u2019, by switching from `expect()` to a `match` statement. The `Result`\n-returned by `parse()` is an `enum`  like `Ordering`, but in this case, each\n-variant has some data associated with it: `Ok` is a success, and `Err` is a\n+error\u2019, by switching from `expect()` to a `match` statement. A `Result` is\n+returned by `parse()`, this is an `enum`  like `Ordering`, but in this case,\n+each variant has some data associated with it: `Ok` is a success, and `Err` is a\n failure. Each contains more information: the successfully parsed integer, or an\n-error type. In this case, we `match` on `Ok(num)`, which sets the inner value\n-of the `Ok` to the name `num`, and then we  return it on the right-hand\n-side. In the `Err` case, we don\u2019t care what kind of error it is, so we\n-use `_` instead of a name. This ignores the error, and `continue` causes us\n-to go to the next iteration of the `loop`.\n+error type. In this case, we `match` on `Ok(num)`, which sets the name `num` to\n+the unwrapped `Ok` value (ythe integer), and then we  return it on the\n+right-hand side. In the `Err` case, we don\u2019t care what kind of error it is, so\n+we just use the catch all `_` instead of a name. This catches everything that\n+isn't `Ok`, and `continue` lets us move to the next iteration of the loop; in\n+effect, this enables us to ignore all errors and continue with our program.\n \n Now we should be good! Let\u2019s try:\n "}]}