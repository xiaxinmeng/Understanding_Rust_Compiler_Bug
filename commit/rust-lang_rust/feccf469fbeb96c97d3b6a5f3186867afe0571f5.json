{"sha": "feccf469fbeb96c97d3b6a5f3186867afe0571f5", "node_id": "C_kwDOAAsO6NoAKGZlY2NmNDY5ZmJlYjk2Yzk3ZDNiNmE1ZjMxODY4NjdhZmUwNTcxZjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-23T22:15:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-02T23:09:51Z"}, "message": "Interpret aggregates.", "tree": {"sha": "e9e68d0c00dcdb2a296f8116b251e589cbfbec2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e68d0c00dcdb2a296f8116b251e589cbfbec2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feccf469fbeb96c97d3b6a5f3186867afe0571f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feccf469fbeb96c97d3b6a5f3186867afe0571f5", "html_url": "https://github.com/rust-lang/rust/commit/feccf469fbeb96c97d3b6a5f3186867afe0571f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feccf469fbeb96c97d3b6a5f3186867afe0571f5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0241c29123c7a49b5fdcc99e32b605124abe4e09", "url": "https://api.github.com/repos/rust-lang/rust/commits/0241c29123c7a49b5fdcc99e32b605124abe4e09", "html_url": "https://github.com/rust-lang/rust/commit/0241c29123c7a49b5fdcc99e32b605124abe4e09"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "b49e241bec0b1100370e993a9efab958a7882f34", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feccf469fbeb96c97d3b6a5f3186867afe0571f5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feccf469fbeb96c97d3b6a5f3186867afe0571f5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=feccf469fbeb96c97d3b6a5f3186867afe0571f5", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n+use rustc_target::abi::VariantIdx;\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     #[instrument(level = \"trace\", skip(self, bx))]\n@@ -115,6 +116,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             (dest, active_field_index)\n                         }\n                     }\n+                    mir::AggregateKind::Generator(..) => {\n+                        dest.codegen_set_discr(bx, VariantIdx::from_u32(0));\n+                        (dest, None)\n+                    }\n                     _ => (dest, None),\n                 };\n                 for (i, operand) in operands.iter().enumerate() {"}, {"sha": "5c00dc21d04eac1bbe61bae30729248c4beea96c", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/feccf469fbeb96c97d3b6a5f3186867afe0571f5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feccf469fbeb96c97d3b6a5f3186867afe0571f5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=feccf469fbeb96c97d3b6a5f3186867afe0571f5", "patch": "@@ -774,15 +774,6 @@ where\n         variant_index: VariantIdx,\n         dest: &PlaceTy<'tcx, M::Provenance>,\n     ) -> InterpResult<'tcx> {\n-        // This must be an enum or generator.\n-        match dest.layout.ty.kind() {\n-            ty::Adt(adt, _) => assert!(adt.is_enum()),\n-            ty::Generator(..) => {}\n-            _ => span_bug!(\n-                self.cur_span(),\n-                \"write_discriminant called on non-variant-type (neither enum nor generator)\"\n-            ),\n-        }\n         // Layout computation excludes uninhabited variants from consideration\n         // therefore there's no way to represent those variants in the given layout.\n         // Essentially, uninhabited variants do not have a tag that corresponds to their"}, {"sha": "7e00d90342e1015142598bb3d38631fa14f8da1a", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/feccf469fbeb96c97d3b6a5f3186867afe0571f5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feccf469fbeb96c97d3b6a5f3186867afe0571f5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=feccf469fbeb96c97d3b6a5f3186867afe0571f5", "patch": "@@ -7,6 +7,7 @@ use either::Either;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_middle::ty::layout::LayoutOf;\n+use rustc_target::abi::VariantIdx;\n \n use super::{ImmTy, InterpCx, Machine};\n \n@@ -199,13 +200,24 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Aggregate(box ref kind, ref operands) => {\n-                assert!(matches!(kind, mir::AggregateKind::Array(..)));\n-\n+                self.write_uninit(&dest)?;\n+                let (variant_index, variant_dest, active_field_index) = match *kind {\n+                    mir::AggregateKind::Adt(_, variant_index, _, _, active_field_index) => {\n+                        let variant_dest = self.place_downcast(&dest, variant_index)?;\n+                        (variant_index, variant_dest, active_field_index)\n+                    }\n+                    _ => (VariantIdx::from_u32(0), dest.clone(), None),\n+                };\n+                if active_field_index.is_some() {\n+                    assert_eq!(operands.len(), 1);\n+                }\n                 for (field_index, operand) in operands.iter().enumerate() {\n-                    let op = self.eval_operand(operand, None)?;\n-                    let field_dest = self.place_field(&dest, field_index)?;\n+                    let field_index = active_field_index.unwrap_or(field_index);\n+                    let field_dest = self.place_field(&variant_dest, field_index)?;\n+                    let op = self.eval_operand(operand, Some(field_dest.layout))?;\n                     self.copy_op(&op, &field_dest, /*allow_transmute*/ false)?;\n                 }\n+                self.write_discriminant(variant_index, &dest)?;\n             }\n \n             Repeat(ref operand, _) => {"}, {"sha": "d0f196e724581e0a1a0a2512864220d50d7bcde8", "filename": "tests/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/feccf469fbeb96c97d3b6a5f3186867afe0571f5/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/feccf469fbeb96c97d3b6a5f3186867afe0571f5/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=feccf469fbeb96c97d3b6a5f3186867afe0571f5", "patch": "@@ -27,33 +27,33 @@ alloc1 (static: FOO, size: 16, align: 8) {\n alloc18 (size: 72, align: 8) {\n     0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n alloc5 (size: 0, align: 8) {}\n \n-alloc9 (size: 32, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc8 (size: 32, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n     0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc8 (size: 3, align: 1) {\n+alloc9 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }\n \n alloc10 (size: 3, align: 1) {\n     62 61 72                                        \u2502 bar\n }\n \n-alloc14 (size: 48, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc13 (size: 48, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n     0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n     0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc13 (size: 3, align: 1) {\n+alloc14 (size: 3, align: 1) {\n     6d 65 68                                        \u2502 meh\n }\n "}]}