{"sha": "03727a4f257fc86b467457a1e87d06d56e62d5f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNzI3YTRmMjU3ZmM4NmI0Njc0NTdhMWU4N2QwNmQ1NmU2MmQ1ZjA=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-08T18:44:31Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-09T05:44:10Z"}, "message": "Clean up jobserver integration", "tree": {"sha": "98972ded9808b77ae08e484b82221c42eee1b180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98972ded9808b77ae08e484b82221c42eee1b180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03727a4f257fc86b467457a1e87d06d56e62d5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03727a4f257fc86b467457a1e87d06d56e62d5f0", "html_url": "https://github.com/rust-lang/rust/commit/03727a4f257fc86b467457a1e87d06d56e62d5f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03727a4f257fc86b467457a1e87d06d56e62d5f0/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3750348daff89741e3153e0e120aa70a45ff5b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/3750348daff89741e3153e0e120aa70a45ff5b68", "html_url": "https://github.com/rust-lang/rust/commit/3750348daff89741e3153e0e120aa70a45ff5b68"}], "stats": {"total": 130, "additions": 8, "deletions": 122}, "files": [{"sha": "d586b376d45b69570ead0be0ee0e0e69af30bb77", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03727a4f257fc86b467457a1e87d06d56e62d5f0/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03727a4f257fc86b467457a1e87d06d56e62d5f0/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=03727a4f257fc86b467457a1e87d06d56e62d5f0", "patch": "@@ -12,7 +12,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n ena = \"0.13\"\n log = \"0.4\"\n-jobserver_crate = { version = \"0.1\", package = \"jobserver\" }\n+jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n lazy_static = \"1\"\n rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n serialize = { path = \"../libserialize\" }"}, {"sha": "b42ccb932b9dcd67bbc6bf808b62ae27ef15fd01", "filename": "src/librustc_data_structures/jobserver.rs", "status": "modified", "additions": 7, "deletions": 121, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/03727a4f257fc86b467457a1e87d06d56e62d5f0/src%2Flibrustc_data_structures%2Fjobserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03727a4f257fc86b467457a1e87d06d56e62d5f0/src%2Flibrustc_data_structures%2Fjobserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fjobserver.rs?ref=03727a4f257fc86b467457a1e87d06d56e62d5f0", "patch": "@@ -1,89 +1,5 @@\n-use jobserver_crate::{Client, HelperThread, Acquired};\n+use jobserver_crate::Client;\n use lazy_static::lazy_static;\n-use std::sync::{Condvar, Arc, Mutex};\n-use std::mem;\n-\n-#[derive(Default)]\n-struct LockedProxyData {\n-    /// The number of free thread tokens, this may include the implicit token given to the process\n-    free: usize,\n-\n-    /// The number of threads waiting for a token\n-    waiters: usize,\n-\n-    /// The number of tokens we requested from the server\n-    requested: usize,\n-\n-    /// Stored tokens which will be dropped when we no longer need them\n-    tokens: Vec<Acquired>,\n-}\n-\n-impl LockedProxyData {\n-    fn request_token(&mut self, thread: &Mutex<HelperThread>) {\n-        self.requested += 1;\n-        thread.lock().unwrap().request_token();\n-    }\n-\n-    fn release_token(&mut self, cond_var: &Condvar) {\n-        if self.waiters > 0 {\n-            self.free += 1;\n-            cond_var.notify_one();\n-        } else {\n-            if self.tokens.is_empty() {\n-                // We are returning the implicit token\n-                self.free += 1;\n-            } else {\n-                // Return a real token to the server\n-                self.tokens.pop().unwrap();\n-            }\n-        }\n-    }\n-\n-    fn take_token(&mut self, thread: &Mutex<HelperThread>) -> bool {\n-        if self.free > 0 {\n-            self.free -= 1;\n-            self.waiters -= 1;\n-\n-            // We stole some token reqested by someone else\n-            // Request another one\n-            if self.requested + self.free < self.waiters {\n-                self.request_token(thread);\n-            }\n-\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-\n-    fn new_requested_token(&mut self, token: Acquired, cond_var: &Condvar) {\n-        self.requested -= 1;\n-\n-        // Does anything need this token?\n-        if self.waiters > 0 {\n-            self.free += 1;\n-            self.tokens.push(token);\n-            cond_var.notify_one();\n-        } else {\n-            // Otherwise we'll just drop it\n-            mem::drop(token);\n-        }\n-    }\n-}\n-\n-#[derive(Default)]\n-struct ProxyData {\n-    lock: Mutex<LockedProxyData>,\n-    cond_var: Condvar,\n-}\n-\n-/// A helper type which makes managing jobserver tokens easier.\n-/// It also allows you to treat the implicit token given to the process\n-/// in the same manner as requested tokens.\n-struct Proxy {\n-    thread: Mutex<HelperThread>,\n-    data: Arc<ProxyData>,\n-}\n \n lazy_static! {\n     // We can only call `from_env` once per process\n@@ -105,52 +21,22 @@ lazy_static! {\n     // per-process.\n     static ref GLOBAL_CLIENT: Client = unsafe {\n         Client::from_env().unwrap_or_else(|| {\n-            Client::new(32).expect(\"failed to create jobserver\")\n+            let client = Client::new(32).expect(\"failed to create jobserver\");\n+            // Acquire a token for the main thread which we can release later\n+            client.acquire_raw().ok();\n+            client\n         })\n     };\n-\n-    static ref GLOBAL_PROXY: Proxy = {\n-        let data = Arc::new(ProxyData::default());\n-\n-        Proxy {\n-            data: data.clone(),\n-            thread: Mutex::new(client().into_helper_thread(move |token| {\n-                data.lock.lock().unwrap().new_requested_token(token.unwrap(), &data.cond_var);\n-            }).unwrap()),\n-        }\n-    };\n }\n \n pub fn client() -> Client {\n     GLOBAL_CLIENT.clone()\n }\n \n pub fn acquire_thread() {\n-    GLOBAL_PROXY.acquire_token();\n+    GLOBAL_CLIENT.acquire_raw().ok();\n }\n \n pub fn release_thread() {\n-    GLOBAL_PROXY.release_token();\n-}\n-\n-impl Proxy {\n-    fn release_token(&self) {\n-        self.data.lock.lock().unwrap().release_token(&self.data.cond_var);\n-    }\n-\n-    fn acquire_token(&self) {\n-        let mut data = self.data.lock.lock().unwrap();\n-        data.waiters += 1;\n-        if data.take_token(&self.thread) {\n-            return;\n-        }\n-        // Request a token for us\n-        data.request_token(&self.thread);\n-        loop {\n-            data = self.data.cond_var.wait(data).unwrap();\n-            if data.take_token(&self.thread) {\n-                return;\n-            }\n-        }\n-    }\n+    GLOBAL_CLIENT.release_raw().ok();\n }"}]}