{"sha": "6ce78a31d8203c882d32b2a850468d4d54b701b9", "node_id": "C_kwDOAAsO6NoAKDZjZTc4YTMxZDgyMDNjODgyZDMyYjJhODUwNDY4ZDRkNTRiNzAxYjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-04T09:54:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-04T09:54:39Z"}, "message": "Rollup merge of #108669 - Nilstrieb:query-my-uninitness, r=compiler-errors\n\nAllow checking whether a type allows being uninitialized\n\nThis is useful for clippy ([rust-lang/clippy#10407](https://github.com/rust-lang/rust-clippy/issues/10407)) and for the future `MaybeUninit::assume_init` panics (#100423).", "tree": {"sha": "018e2fb71b1b2be80d615b26c481581f21228375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/018e2fb71b1b2be80d615b26c481581f21228375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ce78a31d8203c882d32b2a850468d4d54b701b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAxVfCRBK7hj4Ov3rIwAAsT4IAG4q09OCp0vh9PJCfcw1e4Vi\nDsuNXvbwyCZxwqDZAb6n87PaImb6gF+rRHVy0JrayNUHwNXWPAH2Rvrz5Vst845s\nl7LXVjabGfmjpTEXwClvIMTmRgP8L8OomNrYD8dBF5Ea+AzOHwoXqXeCnpYdXxhl\nR4Sj03WBKnVkSdGFbnoCG7NGgspCodiR3EwE5t8azHiGtjrsFsmKu478KrBpMGSM\n4rO6PLJJmNNDdJc9Z1fOET/nOeT8HvkSWDr0Q3t0L4kDfVQUckNjKRR5cFxMHmtu\nVTcmszbenHKx/ENF4mDg01CNyz6SmF5JM9BJ+XpGwPBzmS6KF47KKT3LtDMcl5k=\n=i6VQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 018e2fb71b1b2be80d615b26c481581f21228375\nparent e700d0237408f2fea23771407315ed45ab418aa8\nparent 10a69de5fdc6572e5b4339189c637e5c42f33346\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1677923679 +0530\ncommitter GitHub <noreply@github.com> 1677923679 +0530\n\nRollup merge of #108669 - Nilstrieb:query-my-uninitness, r=compiler-errors\n\nAllow checking whether a type allows being uninitialized\n\nThis is useful for clippy ([rust-lang/clippy#10407](https://github.com/rust-lang/rust-clippy/issues/10407)) and for the future `MaybeUninit::assume_init` panics (#100423).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce78a31d8203c882d32b2a850468d4d54b701b9", "html_url": "https://github.com/rust-lang/rust/commit/6ce78a31d8203c882d32b2a850468d4d54b701b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ce78a31d8203c882d32b2a850468d4d54b701b9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e700d0237408f2fea23771407315ed45ab418aa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e700d0237408f2fea23771407315ed45ab418aa8", "html_url": "https://github.com/rust-lang/rust/commit/e700d0237408f2fea23771407315ed45ab418aa8"}, {"sha": "10a69de5fdc6572e5b4339189c637e5c42f33346", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a69de5fdc6572e5b4339189c637e5c42f33346", "html_url": "https://github.com/rust-lang/rust/commit/10a69de5fdc6572e5b4339189c637e5c42f33346"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "a29cdade0234304cca3376a37302e1a492259353", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ce78a31d8203c882d32b2a850468d4d54b701b9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce78a31d8203c882d32b2a850468d4d54b701b9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=6ce78a31d8203c882d32b2a850468d4d54b701b9", "patch": "@@ -444,6 +444,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n                             ty\n                         ),\n+                        ValidityRequirement::Uninit => bug!(\"assert_uninit_valid doesn't exist\"),\n                     };\n \n                     M::abort(self, msg)?;"}, {"sha": "23fcd22c52b8e02b0868a0a33d9b8a4bfa0f5efe", "filename": "compiler/rustc_const_eval/src/util/check_validity_requirement.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ce78a31d8203c882d32b2a850468d4d54b701b9/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce78a31d8203c882d32b2a850468d4d54b701b9/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs?ref=6ce78a31d8203c882d32b2a850468d4d54b701b9", "patch": "@@ -30,7 +30,7 @@ pub fn check_validity_requirement<'tcx>(\n         return Ok(!layout.abi.is_uninhabited());\n     }\n \n-    if tcx.sess.opts.unstable_opts.strict_init_checks {\n+    if kind == ValidityRequirement::Uninit || tcx.sess.opts.unstable_opts.strict_init_checks {\n         might_permit_raw_init_strict(layout, tcx, kind)\n     } else {\n         let layout_cx = LayoutCx { tcx, param_env: param_env_and_ty.param_env };\n@@ -99,6 +99,9 @@ fn might_permit_raw_init_lax<'tcx>(\n                 }\n                 s.valid_range(cx).contains(val)\n             }\n+            ValidityRequirement::Uninit => {\n+                bug!(\"ValidityRequirement::Uninit should have been handled above\")\n+            }\n         }\n     };\n "}, {"sha": "254ffc33c96f0147b20c84335a067edc73ed4335", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ce78a31d8203c882d32b2a850468d4d54b701b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce78a31d8203c882d32b2a850468d4d54b701b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=6ce78a31d8203c882d32b2a850468d4d54b701b9", "patch": "@@ -170,13 +170,17 @@ pub const FAT_PTR_EXTRA: usize = 1;\n /// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.\n pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n \n-/// Used in `might_permit_raw_init` to indicate the kind of initialisation\n+/// Used in `check_validity_requirement` to indicate the kind of initialization\n /// that is checked to be valid\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n pub enum ValidityRequirement {\n     Inhabited,\n     Zero,\n+    /// The return value of mem::uninitialized, 0x01\n+    /// (unless -Zstrict-init-checks is on, in which case it's the same as Uninit).\n     UninitMitigated0x01Fill,\n+    /// True uninitialized memory.\n+    Uninit,\n }\n \n impl ValidityRequirement {\n@@ -196,6 +200,7 @@ impl fmt::Display for ValidityRequirement {\n             Self::Inhabited => f.write_str(\"is inhabited\"),\n             Self::Zero => f.write_str(\"allows being left zeroed\"),\n             Self::UninitMitigated0x01Fill => f.write_str(\"allows being filled with 0x01\"),\n+            Self::Uninit => f.write_str(\"allows being left uninitialized\"),\n         }\n     }\n }"}]}