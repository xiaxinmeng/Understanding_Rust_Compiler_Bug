{"sha": "002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMjI4N2QyNWY2ZWY5NzE4ZGJhYmQzZTIzYzAwYjVlYmNmYjUxYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T23:56:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T23:56:49Z"}, "message": "Auto merge of #68544 - Aaron1011:remove-overlapping-traits, r=estebank\n\nRemove the `overlapping_marker_traits` feature\n\nSee #29864\n\nThis has been replaced by `#[feature(marker_trait_attr)]`\n\nA few notes:\n\n* Due to PR #68057 not yet being in the bootstrap compiler, it's\n  necessary to continue using `#![feature(overlapping_marker_traits)]`\n  under `#[cfg(bootstrap)]` to work around type inference issues.\n* I've updated tests that used `overlapping_marker_traits` to now use\n  `marker_trait_attr` where applicable\n\nThe test `src/test/ui/overlap-marker-trait.rs` doesn't make any sense\nnow that `overlapping_marker_traits`, so I removed it.\n\nThe test `src/test/ui/traits/overlap-permitted-for-marker-traits-neg.rs`\nnow fails, since it's no longer possible to have multiple overlapping\nnegative impls of `Send`. I believe that this is the behavior we want\n(assuming that `Send` is not going to become a `#[marker]` trait, so I\nrenamed the test to `overlap-permitted-for-marker-traits-neg`", "tree": {"sha": "68ae6b4d841f1b977d04d2a3af3336ac5227b35b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68ae6b4d841f1b977d04d2a3af3336ac5227b35b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "html_url": "https://github.com/rust-lang/rust/commit/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9290dceee2cb6b882b26ec6e294560e51ef0853", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9290dceee2cb6b882b26ec6e294560e51ef0853", "html_url": "https://github.com/rust-lang/rust/commit/c9290dceee2cb6b882b26ec6e294560e51ef0853"}, {"sha": "302f8c97ea92d010f39a19563e8881a704c6f136", "url": "https://api.github.com/repos/rust-lang/rust/commits/302f8c97ea92d010f39a19563e8881a704c6f136", "html_url": "https://github.com/rust-lang/rust/commit/302f8c97ea92d010f39a19563e8881a704c6f136"}], "stats": {"total": 161, "additions": 52, "deletions": 109}, "files": [{"sha": "92f5bf87535e69a5ef2e71e5d9ffc381a35e47d9", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -216,6 +216,7 @@ arena_types!(declare_arena, [], 'tcx);\n \n arena_types!(impl_arena_allocatable, [], 'tcx);\n \n+#[marker]\n pub trait ArenaAllocatable {}\n \n impl<T: Copy> ArenaAllocatable for T {}"}, {"sha": "2f77792f7a1985aa8939c7f061fd7b33283ebff9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -36,7 +36,7 @@\n #![feature(drain_filter)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n-#![feature(overlapping_marker_traits)]\n+#![feature(marker_trait_attr)]\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]"}, {"sha": "fe25f451a3a1e05c1a349ec69fdafeda68e8de61", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -2647,9 +2647,7 @@ impl<'tcx> ::std::ops::Deref for Attributes<'tcx> {\n pub enum ImplOverlapKind {\n     /// These impls are always allowed to overlap.\n     Permitted {\n-        /// Whether or not the impl is permitted due to the trait being\n-        /// a marker trait (a trait with #[marker], or a trait with\n-        /// no associated items and #![feature(overlapping_marker_traits)] enabled)\n+        /// Whether or not the impl is permitted due to the trait being a `#[marker]` trait\n         marker: bool,\n     },\n     /// These impls are allowed to overlap, but that raises\n@@ -2796,15 +2794,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             | (ImplPolarity::Negative, ImplPolarity::Negative) => {}\n         };\n \n-        let is_marker_overlap = if self.features().overlapping_marker_traits {\n-            let trait1_is_empty = self.impl_trait_ref(def_id1).map_or(false, |trait_ref| {\n-                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n-            });\n-            let trait2_is_empty = self.impl_trait_ref(def_id2).map_or(false, |trait_ref| {\n-                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n-            });\n-            trait1_is_empty && trait2_is_empty\n-        } else {\n+        let is_marker_overlap = {\n             let is_marker_impl = |def_id: DefId| -> bool {\n                 let trait_ref = self.impl_trait_ref(def_id);\n                 trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)"}, {"sha": "4ae79f9ccaa6c2cfadaf9ded8c2ca434c1db23de", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -344,9 +344,6 @@ declare_features! (\n     /// Allows `extern \"x86-interrupt\" fn()`.\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n-    /// Allows overlapping impls of marker traits.\n-    (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n-\n     /// Allows a test to fail without failing the whole suite.\n     (active, allow_fail, \"1.19.0\", Some(46488), None),\n "}, {"sha": "e6ea093fe89c73a31025a1d43e75fe93ab7a063e", "filename": "src/librustc_feature/removed.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -108,7 +108,9 @@ declare_features! (\n     /// Allows using `#[on_unimplemented(..)]` on traits.\n     /// (Moved to `rustc_attrs`.)\n     (removed, on_unimplemented, \"1.40.0\", None, None, None),\n-\n+    /// Allows overlapping impls of marker traits.\n+    (removed, overlapping_marker_traits, \"1.42.0\", Some(29864), None,\n+     Some(\"removed in favor of `#![feature(marker_trait_attr)]`\")),\n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n     // -------------------------------------------------------------------------"}, {"sha": "b4f5f9ef56bb10b6b7f42795b7f18ff54b6c8391", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -1,18 +1,19 @@\n #![feature(optin_builtin_traits)]\n-#![feature(overlapping_marker_traits)]\n+#![feature(marker_trait_attr)]\n \n+#[marker]\n trait MyTrait {}\n \n struct TestType<T>(::std::marker::PhantomData<T>);\n \n unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n \n impl<T: MyTrait> !Send for TestType<T> {}\n-//~^ ERROR E0119\n+//~^ ERROR conflicting implementations\n \n unsafe impl<T:'static> Send for TestType<T> {}\n+//~^ ERROR conflicting implementations\n \n impl !Send for TestType<i32> {}\n-//~^ ERROR E0119\n \n fn main() {}"}, {"sha": "25d3d3ee997a55202d8cface2911507cf4d9c646", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -1,20 +1,20 @@\n error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:10:1\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:11:1\n    |\n LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n    | ---------------------------------------------------- first implementation here\n LL | \n LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<i32>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:15:1\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:14:1\n    |\n+LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n+   | ---------------------------------------------------- first implementation here\n+...\n LL | unsafe impl<T:'static> Send for TestType<T> {}\n-   | ------------------------------------------- first implementation here\n-LL | \n-LL | impl !Send for TestType<i32> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<i32>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7898dc9831da2f559b1e7e759bc1472345025ea0", "filename": "src/test/ui/coherence/coherence-impls-send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -1,5 +1,4 @@\n #![feature(optin_builtin_traits)]\n-#![feature(overlapping_marker_traits)]\n \n use std::marker::Copy;\n \n@@ -24,7 +23,8 @@ unsafe impl Send for [MyType] {}\n //~^ ERROR E0117\n \n unsafe impl Send for &'static [NotSync] {}\n-//~^ ERROR E0117\n+//~^ ERROR conflicting implementations of trait\n+//~| ERROR only traits defined in the current crate\n \n fn main() {\n }"}, {"sha": "dbfc968332c5ceb80399de057e6f08d81a9382fe", "filename": "src/test/ui/coherence/coherence-impls-send.stderr", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -1,5 +1,16 @@\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `&[NotSync]`:\n+  --> $DIR/coherence-impls-send.rs:25:1\n+   |\n+LL | unsafe impl Send for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::marker::Send for &T\n+             where T: std::marker::Sync, T: ?Sized;\n+   = note: upstream crates may add a new impl of trait `std::marker::Sync` for type `[NotSync]` in future versions\n+\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:17:1\n+  --> $DIR/coherence-impls-send.rs:16:1\n    |\n LL | unsafe impl Send for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^----------------\n@@ -10,13 +21,13 @@ LL | unsafe impl Send for (MyType, MyType) {}\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n-  --> $DIR/coherence-impls-send.rs:20:1\n+  --> $DIR/coherence-impls-send.rs:19:1\n    |\n LL | unsafe impl Send for &'static NotSync {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:23:1\n+  --> $DIR/coherence-impls-send.rs:22:1\n    |\n LL | unsafe impl Send for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^--------\n@@ -27,7 +38,7 @@ LL | unsafe impl Send for [MyType] {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:26:1\n+  --> $DIR/coherence-impls-send.rs:25:1\n    |\n LL | unsafe impl Send for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^------------------\n@@ -37,7 +48,7 @@ LL | unsafe impl Send for &'static [NotSync] {}\n    |\n    = note: define and implement a trait or new type instead\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0117, E0321.\n+Some errors have detailed explanations: E0117, E0119, E0321.\n For more information about an error, try `rustc --explain E0117`."}, {"sha": "dd09d68367ec3f5037647bcaa97e90c4d1c1d1f5", "filename": "src/test/ui/overlap-doesnt-conflict-with-specialization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.rs?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -1,8 +1,9 @@\n // run-pass\n \n-#![feature(overlapping_marker_traits)]\n+#![feature(marker_trait_attr)]\n #![feature(specialization)]\n \n+#[marker]\n trait MyMarker {}\n \n impl<T> MyMarker for T {}"}, {"sha": "bf39d9c903f800f65bfc20a8feb8b367a94527f0", "filename": "src/test/ui/overlap-marker-trait.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c9290dceee2cb6b882b26ec6e294560e51ef0853/src%2Ftest%2Fui%2Foverlap-marker-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9290dceee2cb6b882b26ec6e294560e51ef0853/src%2Ftest%2Fui%2Foverlap-marker-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-marker-trait.rs?ref=c9290dceee2cb6b882b26ec6e294560e51ef0853", "patch": "@@ -1,31 +0,0 @@\n-// Test for RFC 1268: we allow overlapping impls of marker traits,\n-// that is, traits without items. In this case, a type `T` is\n-// `MyMarker` if it is either `Debug` or `Display`. This test just\n-// checks that we don't consider **all** types to be `MyMarker`.  See\n-// also the companion test in\n-// `run-pass/overlap-permitted-for-marker-traits.rs`.\n-\n-#![feature(overlapping_marker_traits)]\n-#![feature(optin_builtin_traits)]\n-\n-use std::fmt::{Debug, Display};\n-\n-trait Marker {}\n-\n-impl<T: Debug> Marker for T {}\n-impl<T: Display> Marker for T {}\n-\n-fn is_marker<T: Marker>() { }\n-\n-struct NotDebugOrDisplay;\n-\n-fn main() {\n-    // Debug && Display:\n-    is_marker::<i32>();\n-\n-    // Debug && !Display:\n-    is_marker::<Vec<i32>>();\n-\n-    // !Debug && !Display\n-    is_marker::<NotDebugOrDisplay>(); //~ ERROR\n-}"}, {"sha": "15ebcd17b0dbc7d37170d79bf40d99846a13d8fd", "filename": "src/test/ui/overlap-marker-trait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9290dceee2cb6b882b26ec6e294560e51ef0853/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9290dceee2cb6b882b26ec6e294560e51ef0853/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr?ref=c9290dceee2cb6b882b26ec6e294560e51ef0853", "patch": "@@ -1,12 +0,0 @@\n-error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n-  --> $DIR/overlap-marker-trait.rs:30:17\n-   |\n-LL | fn is_marker<T: Marker>() { }\n-   |    ---------    ------ required by this bound in `is_marker`\n-...\n-LL |     is_marker::<NotDebugOrDisplay>();\n-   |                 ^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "86029473b513bb58303d4b0466f7fee447d4b0d9", "filename": "src/test/ui/traits/overlap-not-permitted-for-builtin-trait.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.rs?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -1,12 +1,11 @@\n-// run-pass\n #![allow(dead_code)]\n-#![feature(overlapping_marker_traits)]\n #![feature(optin_builtin_traits)]\n \n-// Overlapping negative impls for `MyStruct` are permitted:\n+// Overlapping negative impls for `MyStruct` are not permitted:\n struct MyStruct;\n impl !Send for MyStruct {}\n impl !Send for MyStruct {}\n+//~^ ERROR conflicting implementations of trait\n \n fn main() {\n }", "previous_filename": "src/test/ui/traits/overlap-permitted-for-marker-traits-neg.rs"}, {"sha": "94a0c287f4a32d693a43873fabc5e47b05fdee24", "filename": "src/test/ui/traits/overlap-not-permitted-for-builtin-trait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr?ref=002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `MyStruct`:\n+  --> $DIR/overlap-not-permitted-for-builtin-trait.rs:7:1\n+   |\n+LL | impl !Send for MyStruct {}\n+   | ----------------------- first implementation here\n+LL | impl !Send for MyStruct {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyStruct`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "59ec9d5689d8c7440d26ac21fe32cab832c17abf", "filename": "src/test/ui/traits/overlap-permitted-for-marker-traits.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c9290dceee2cb6b882b26ec6e294560e51ef0853/src%2Ftest%2Fui%2Ftraits%2Foverlap-permitted-for-marker-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9290dceee2cb6b882b26ec6e294560e51ef0853/src%2Ftest%2Fui%2Ftraits%2Foverlap-permitted-for-marker-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-permitted-for-marker-traits.rs?ref=c9290dceee2cb6b882b26ec6e294560e51ef0853", "patch": "@@ -1,27 +0,0 @@\n-// run-pass\n-// Tests for RFC 1268: we allow overlapping impls of marker traits,\n-// that is, traits without items. In this case, a type `T` is\n-// `MyMarker` if it is either `Debug` or `Display`.\n-\n-#![feature(overlapping_marker_traits)]\n-#![feature(optin_builtin_traits)]\n-\n-use std::fmt::{Debug, Display};\n-\n-trait MyMarker {}\n-\n-impl<T: Debug> MyMarker for T {}\n-impl<T: Display> MyMarker for T {}\n-\n-fn foo<T: MyMarker>(t: T) -> T {\n-    t\n-}\n-\n-fn main() {\n-    // Debug && Display:\n-    assert_eq!(1, foo(1));\n-    assert_eq!(2.0, foo(2.0));\n-\n-    // Debug && !Display:\n-    assert_eq!(vec![1], foo(vec![1]));\n-}"}]}