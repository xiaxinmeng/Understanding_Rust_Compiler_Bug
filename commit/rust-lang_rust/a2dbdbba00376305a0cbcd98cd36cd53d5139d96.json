{"sha": "a2dbdbba00376305a0cbcd98cd36cd53d5139d96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZGJkYmJhMDAzNzYzMDVhMGNiY2Q5OGNkMzZjZDUzZDUxMzlkOTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T10:56:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T10:56:42Z"}, "message": "Split loop into orthogonal phases", "tree": {"sha": "32bad598576fb4e8d7be50c4fba152ae0c3da96f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32bad598576fb4e8d7be50c4fba152ae0c3da96f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2dbdbba00376305a0cbcd98cd36cd53d5139d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2dbdbba00376305a0cbcd98cd36cd53d5139d96", "html_url": "https://github.com/rust-lang/rust/commit/a2dbdbba00376305a0cbcd98cd36cd53d5139d96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2dbdbba00376305a0cbcd98cd36cd53d5139d96/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb17186396b1bdad7b443135165575e81810be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb17186396b1bdad7b443135165575e81810be3", "html_url": "https://github.com/rust-lang/rust/commit/9bb17186396b1bdad7b443135165575e81810be3"}], "stats": {"total": 87, "additions": 43, "deletions": 44}, "files": [{"sha": "e8ca7d6526d381fa7be284e9b1be1a4dd9733606", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 43, "deletions": 44, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/a2dbdbba00376305a0cbcd98cd36cd53d5139d96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dbdbba00376305a0cbcd98cd36cd53d5139d96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=a2dbdbba00376305a0cbcd98cd36cd53d5139d96", "patch": "@@ -69,7 +69,7 @@ pub(crate) fn highlight(\n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n     let mut res = Vec::new();\n \n-    let mut in_macro_call = None;\n+    let mut current_macro_call: Option<ast::MacroCall> = None;\n \n     for event in root.preorder_with_tokens() {\n         let event_range = match &event {\n@@ -81,58 +81,57 @@ pub(crate) fn highlight(\n             continue;\n         }\n \n-        match event {\n-            WalkEvent::Enter(node) => match node.kind() {\n-                MACRO_CALL => {\n-                    in_macro_call = Some(node.clone());\n-                    if let Some(range) = highlight_macro(node) {\n-                        res.push(HighlightedRange {\n-                            range,\n-                            highlight: HighlightTag::Macro.into(),\n-                            binding_hash: None,\n-                        });\n-                    }\n+        match event.clone().map(|it| it.into_node().and_then(ast::MacroCall::cast)) {\n+            WalkEvent::Enter(Some(mc)) => {\n+                current_macro_call = Some(mc.clone());\n+                if let Some(range) = highlight_macro(&mc) {\n+                    res.push(HighlightedRange {\n+                        range,\n+                        highlight: HighlightTag::Macro.into(),\n+                        binding_hash: None,\n+                    });\n                 }\n-                _ if in_macro_call.is_some() => {\n-                    if let Some(token) = node.as_token() {\n-                        if let Some((highlight, binding_hash)) =\n-                            highlight_token_tree(&sema, &mut bindings_shadow_count, token.clone())\n-                        {\n-                            res.push(HighlightedRange {\n-                                range: node.text_range(),\n-                                highlight,\n-                                binding_hash,\n-                            });\n-                        }\n-                    }\n-                }\n-                _ => {\n-                    if let Some((highlight, binding_hash)) =\n-                        highlight_node(&sema, &mut bindings_shadow_count, node.clone())\n-                    {\n-                        res.push(HighlightedRange {\n-                            range: node.text_range(),\n-                            highlight,\n-                            binding_hash,\n-                        });\n-                    }\n-                }\n-            },\n-            WalkEvent::Leave(node) => {\n-                if let Some(m) = in_macro_call.as_ref() {\n-                    if *m == node {\n-                        in_macro_call = None;\n-                    }\n+                continue;\n+            }\n+            WalkEvent::Leave(Some(mc)) => {\n+                assert!(current_macro_call == Some(mc));\n+                current_macro_call = None;\n+                continue;\n+            }\n+            _ => (),\n+        }\n+\n+        let node = match event {\n+            WalkEvent::Enter(it) => it,\n+            WalkEvent::Leave(_) => continue,\n+        };\n+\n+        if current_macro_call.is_some() {\n+            if let Some(token) = node.into_token() {\n+                if let Some((highlight, binding_hash)) =\n+                    highlight_token_tree(&sema, &mut bindings_shadow_count, token.clone())\n+                {\n+                    res.push(HighlightedRange {\n+                        range: token.text_range(),\n+                        highlight,\n+                        binding_hash,\n+                    });\n                 }\n             }\n+            continue;\n+        }\n+\n+        if let Some((highlight, binding_hash)) =\n+            highlight_node(&sema, &mut bindings_shadow_count, node.clone())\n+        {\n+            res.push(HighlightedRange { range: node.text_range(), highlight, binding_hash });\n         }\n     }\n \n     res\n }\n \n-fn highlight_macro(node: SyntaxElement) -> Option<TextRange> {\n-    let macro_call = ast::MacroCall::cast(node.as_node()?.clone())?;\n+fn highlight_macro(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     let path = macro_call.path()?;\n     let name_ref = path.segment()?.name_ref()?;\n "}]}