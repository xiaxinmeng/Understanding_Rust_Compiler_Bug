{"sha": "d282a633fa6f511f087a53976ce71c269d14c861", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODJhNjMzZmE2ZjUxMWYwODdhNTM5NzZjZTcxYzI2OWQxNGM4NjE=", "commit": {"author": {"name": "CensoredUsername", "email": "cens.username@gmail.com", "date": "2016-08-27T18:29:14Z"}, "committer": {"name": "CensoredUsername", "email": "cens.username@gmail.com", "date": "2016-08-30T14:03:06Z"}, "message": "Guard against platforms on which the sysv64 calling convention is not valid in non-codegen tests. Remove false positive in a test that relied on the exact formatting of an error string and rewrite the sysv64 register allocation test at it was triggering undefined behaviour", "tree": {"sha": "154c76da4200770271e5544a22c0f2c0b38e97cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/154c76da4200770271e5544a22c0f2c0b38e97cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d282a633fa6f511f087a53976ce71c269d14c861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d282a633fa6f511f087a53976ce71c269d14c861", "html_url": "https://github.com/rust-lang/rust/commit/d282a633fa6f511f087a53976ce71c269d14c861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d282a633fa6f511f087a53976ce71c269d14c861/comments", "author": {"login": "CensoredUsername", "id": 3411575, "node_id": "MDQ6VXNlcjM0MTE1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/3411575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CensoredUsername", "html_url": "https://github.com/CensoredUsername", "followers_url": "https://api.github.com/users/CensoredUsername/followers", "following_url": "https://api.github.com/users/CensoredUsername/following{/other_user}", "gists_url": "https://api.github.com/users/CensoredUsername/gists{/gist_id}", "starred_url": "https://api.github.com/users/CensoredUsername/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CensoredUsername/subscriptions", "organizations_url": "https://api.github.com/users/CensoredUsername/orgs", "repos_url": "https://api.github.com/users/CensoredUsername/repos", "events_url": "https://api.github.com/users/CensoredUsername/events{/privacy}", "received_events_url": "https://api.github.com/users/CensoredUsername/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CensoredUsername", "id": 3411575, "node_id": "MDQ6VXNlcjM0MTE1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/3411575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CensoredUsername", "html_url": "https://github.com/CensoredUsername", "followers_url": "https://api.github.com/users/CensoredUsername/followers", "following_url": "https://api.github.com/users/CensoredUsername/following{/other_user}", "gists_url": "https://api.github.com/users/CensoredUsername/gists{/gist_id}", "starred_url": "https://api.github.com/users/CensoredUsername/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CensoredUsername/subscriptions", "organizations_url": "https://api.github.com/users/CensoredUsername/orgs", "repos_url": "https://api.github.com/users/CensoredUsername/repos", "events_url": "https://api.github.com/users/CensoredUsername/events{/privacy}", "received_events_url": "https://api.github.com/users/CensoredUsername/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e30446259be88af7b9ae6c733b49fc0c88bd7ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e30446259be88af7b9ae6c733b49fc0c88bd7ce", "html_url": "https://github.com/rust-lang/rust/commit/0e30446259be88af7b9ae6c733b49fc0c88bd7ce"}], "stats": {"total": 155, "additions": 71, "deletions": 84}, "files": [{"sha": "d7c012743231be77e31092de75f177ba8317039f", "filename": "src/test/compile-fail/feature-gate-abi-sysv64.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d282a633fa6f511f087a53976ce71c269d14c861/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d282a633fa6f511f087a53976ce71c269d14c861/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-sysv64.rs?ref=d282a633fa6f511f087a53976ce71c269d14c861", "patch": "@@ -11,9 +11,15 @@\n // Test that the sysv64 ABI cannot be used when abi-sysv64 feature\n // gate is not used.\n \n+// ignore-android\n+// ignore-arm\n+// ignore-aarch64\n+\n+#[cfg(target_arch = \"x86_64\")]\n extern \"sysv64\" fn foo() {}\n //~^ ERROR sysv64 ABI is experimental and subject to change\n \n+#[cfg(target_arch = \"x86_64\")]\n fn main() {\n     foo();\n }"}, {"sha": "7e3b32122ac23a9d6db7366f08adb104d4629964", "filename": "src/test/run-pass/abi-sysv64-register-usage.rs", "status": "modified", "additions": 64, "deletions": 83, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/d282a633fa6f511f087a53976ce71c269d14c861/src%2Ftest%2Frun-pass%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d282a633fa6f511f087a53976ce71c269d14c861/src%2Ftest%2Frun-pass%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi-sysv64-register-usage.rs?ref=d282a633fa6f511f087a53976ce71c269d14c861", "patch": "@@ -11,93 +11,42 @@\n // Checks if the correct registers are being used to pass arguments\n // when the sysv64 ABI is specified.\n \n+// ignore-android\n+// ignore-arm\n+// ignore-aarch64\n+\n #![feature(abi_sysv64)]\n-#![feature(naked_functions)]\n #![feature(asm)]\n \n-#[naked]\n-#[inline(never)]\n-#[allow(unused_variables)]\n-pub unsafe extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n-                                                rcx: i64, r8 : i64, r9 : i64,\n-                                                xmm0: f32, xmm1: f32, xmm2: f32,\n-                                                xmm3: f32, xmm4: f32, xmm5: f32,\n-                                                xmm6: f32, xmm7: f32) -> i64 {\n-    // this assembly checks all registers for specific values, and puts in rax\n-    // how many values were correct.\n-    asm!(\"cmp rdi, 0x1;\n-          xor rax, rax;\n-          setz al;\n-\n-          cmp rsi, 0x2;\n-          xor rdi, rdi\n-          setz dil;\n-          add rax, rdi;\n-\n-          cmp rdx, 0x3;\n-          setz dil;\n-          add rax, rdi;\n-\n-          cmp rcx, 0x4;\n-          setz dil;\n-          add rax, rdi;\n-\n-          cmp r8, 0x5;\n-          setz dil;\n-          add rax, rdi;\n-\n-          cmp r9, 0x6;\n-          setz dil;\n-          add rax, rdi;\n-\n-          movd esi, xmm0;\n-          cmp rsi, 0x3F800000;\n-          setz dil;\n-          add rax, rdi;\n-\n-          movd esi, xmm1;\n-          cmp rsi, 0x40000000;\n-          setz dil;\n-          add rax, rdi;\n-\n-          movd esi, xmm2;\n-          cmp rsi, 0x40800000;\n-          setz dil;\n-          add rax, rdi;\n-\n-          movd esi, xmm3;\n-          cmp rsi, 0x41000000;\n-          setz dil;\n-          add rax, rdi;\n-\n-          movd esi, xmm4;\n-          cmp rsi, 0x41800000;\n-          setz dil;\n-          add rax, rdi;\n-\n-          movd esi, xmm5;\n-          cmp rsi, 0x42000000;\n-          setz dil;\n-          add rax, rdi;\n-\n-          movd esi, xmm6;\n-          cmp rsi, 0x42800000;\n-          setz dil;\n-          add rax, rdi;\n-\n-          movd esi, xmm7;\n-          cmp rsi, 0x43000000;\n-          setz dil;\n-          add rax, rdi;\n-          ret\n-         \" :::: \"intel\");\n-    unreachable!();\n+#[cfg(target_arch = \"x86_64\")]\n+pub extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n+                                         rcx: i64, r8 : i64, r9 : i64,\n+                                         xmm0: f32, xmm1: f32, xmm2: f32,\n+                                         xmm3: f32, xmm4: f32, xmm5: f32,\n+                                         xmm6: f32, xmm7: f32) -> i64 {\n+    assert_eq!(rdi, 1);\n+    assert_eq!(rsi, 2);\n+    assert_eq!(rdx, 3);\n+    assert_eq!(rcx, 4);\n+    assert_eq!(r8,  5);\n+    assert_eq!(r9,  6);\n+    assert_eq!(xmm0, 1.0f32);\n+    assert_eq!(xmm1, 2.0f32);\n+    assert_eq!(xmm2, 4.0f32);\n+    assert_eq!(xmm3, 8.0f32);\n+    assert_eq!(xmm4, 16.0f32);\n+    assert_eq!(xmm5, 32.0f32);\n+    assert_eq!(xmm6, 64.0f32);\n+    assert_eq!(xmm7, 128.0f32);\n+    42\n }\n \n // this struct contains 8 i64's, while only 6 can be passed in registers.\n+#[cfg(target_arch = \"x86_64\")]\n #[derive(PartialEq, Eq, Debug)]\n pub struct LargeStruct(i64, i64, i64, i64, i64, i64, i64, i64);\n \n+#[cfg(target_arch = \"x86_64\")]\n #[inline(never)]\n pub extern \"sysv64\" fn large_struct_by_val(mut foo: LargeStruct) -> LargeStruct {\n     foo.0 *= 1;\n@@ -111,15 +60,47 @@ pub extern \"sysv64\" fn large_struct_by_val(mut foo: LargeStruct) -> LargeStruct\n     foo\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n pub fn main() {\n-    assert_eq!(unsafe {\n-        all_the_registers(1, 2, 3, 4, 5, 6,\n-                          1.0, 2.0, 4.0, 8.0,\n-                          16.0, 32.0, 64.0, 128.0)\n-    }, 14);\n+    let result: i64;\n+    unsafe {\n+        asm!(\"mov rdi, 1;\n+              mov rsi, 2;\n+              mov rdx, 3;\n+              mov rcx, 4;\n+              mov r8,  5;\n+              mov r9,  6;\n+              mov eax, 0x3F800000;\n+              movd xmm0, eax;\n+              mov eax, 0x40000000;\n+              movd xmm1, eax;\n+              mov eax, 0x40800000;\n+              movd xmm2, eax;\n+              mov eax, 0x41000000;\n+              movd xmm3, eax;\n+              mov eax, 0x41800000;\n+              movd xmm4, eax;\n+              mov eax, 0x42000000;\n+              movd xmm5, eax;\n+              mov eax, 0x42800000;\n+              movd xmm6, eax;\n+              mov eax, 0x43000000;\n+              movd xmm7, eax;\n+              call r10\n+              \"\n+            : \"={rax}\"(result)\n+            : \"{r10}\"(all_the_registers as usize)\n+            : \"rdi\", \"rsi\", \"rdx\", \"rcx\", \"r8\", \"r9\", \"r11\", \"cc\", \"memory\"\n+            : \"intel\", \"alignstack\"\n+        )\n+    }\n+    assert_eq!(result, 42);\n \n     assert_eq!(\n         large_struct_by_val(LargeStruct(1, 2, 3, 4, 5, 6, 7, 8)),\n         LargeStruct(1, 4, 9, 16, 25, 36, 49, 64)\n     );\n }\n+\n+#[cfg(not(target_arch = \"x86_64\"))]\n+pub fn main() {}\n\\ No newline at end of file"}, {"sha": "a748e13ecf102bf9207afbb3f409938f5549f278", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d282a633fa6f511f087a53976ce71c269d14c861/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d282a633fa6f511f087a53976ce71c269d14c861/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=d282a633fa6f511f087a53976ce71c269d14c861", "patch": "@@ -1,4 +1,4 @@\n-error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, aapcs, win64, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic], found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n+error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, aapcs, win64, sysv64, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic], found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n   --> $DIR/unicode.rs:11:8\n    |\n 11 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}"}]}