{"sha": "3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMTU5NmQ4YzlmOGUyZWI1ODZkM2FhOGRjZGFmYTgzNzVlY2Y4ZWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-07T22:39:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-07T22:39:44Z"}, "message": "Error out when \"primitive MIR math\" (as opposed to unchecked intrinsics) overflows\n\nFixes #178", "tree": {"sha": "bb6c5a2049d0a80cdb8aaf4b5af1e153f76ea7c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb6c5a2049d0a80cdb8aaf4b5af1e153f76ea7c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec", "html_url": "https://github.com/rust-lang/rust/commit/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b", "html_url": "https://github.com/rust-lang/rust/commit/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "1a8ca2d03ca6c133fba2a8201ec9066c5ac17ea9", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec", "patch": "@@ -23,7 +23,6 @@ pub enum EvalError<'tcx> {\n     },\n     ReadPointerAsBytes,\n     InvalidPointerMath,\n-    OverflowingPointerMath,\n     ReadUndefBytes,\n     DeadLocal,\n     InvalidBoolOp(mir::BinOp),\n@@ -32,6 +31,7 @@ pub enum EvalError<'tcx> {\n     ExecuteMemory,\n     ArrayIndexOutOfBounds(Span, u64, u64),\n     Math(Span, ConstMathErr),\n+    OverflowingMath,\n     InvalidChar(u128),\n     OutOfMemory {\n         allocation_size: u64,\n@@ -83,8 +83,6 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n             EvalError::InvalidPointerMath =>\n                 \"attempted to do math or a comparison on pointers into different allocations\",\n-            EvalError::OverflowingPointerMath =>\n-                \"attempted to do overflowing math on a pointer\",\n             EvalError::ReadUndefBytes =>\n                 \"attempted to read undefined bytes\",\n             EvalError::DeadLocal =>\n@@ -100,6 +98,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"array index out of bounds\",\n             EvalError::Math(..) =>\n                 \"mathematical operation failed\",\n+            EvalError::OverflowingMath =>\n+                \"attempted to do overflowing math\",\n             EvalError::NoMirFor(..) =>\n                 \"mir not found\",\n             EvalError::InvalidChar(..) =>"}, {"sha": "b9310f1f899a843f1b52a294f2c271cca59b0d5b", "filename": "src/eval_context.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec", "patch": "@@ -452,8 +452,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             BinaryOp(bin_op, ref left, ref right) => {\n-                // ignore overflow bit, rustc inserts check branches for us\n-                self.intrinsic_overflowing(bin_op, left, right, dest, dest_ty)?;\n+                if self.intrinsic_overflowing(bin_op, left, right, dest, dest_ty)? {\n+                    // There was an overflow in an unchecked binop.  Right now, we consider this an error and bail out.\n+                    // The rationale is that the reason rustc emits unchecked binops in release mode (vs. the checked binops\n+                    // it emits in debug mode) is performance, but it doesn't cust us any performance in miri.\n+                    // If, however, the compiler ever starts transforming unchecked intrinsics into unchecked binops,\n+                    // we have to go back to just ignoring the overflow here.\n+                    return Err(EvalError::OverflowingMath);\n+                }\n             }\n \n             CheckedBinaryOp(bin_op, ref left, ref right) => {\n@@ -869,7 +875,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             self.memory.check_bounds(ptr, false)?;\n             Ok(ptr)\n         } else {\n-            Err(EvalError::OverflowingPointerMath)\n+            Err(EvalError::OverflowingMath)\n         }\n     }\n "}, {"sha": "d663835bc1fc6162097d30471d186792b4b512c0", "filename": "src/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec", "patch": "@@ -73,7 +73,7 @@ impl Pointer {\n             if let Some(res) = self.offset.checked_sub(n) {\n                 Ok(Pointer::new(self.alloc_id, res))\n             } else {\n-                Err(EvalError::OverflowingPointerMath)\n+                Err(EvalError::OverflowingMath)\n             }\n         } else {\n             self.offset(i as u64, layout)\n@@ -83,12 +83,12 @@ impl Pointer {\n     pub fn offset<'tcx>(self, i: u64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n         if let Some(res) = self.offset.checked_add(i) {\n             if res as u128 >= (1u128 << layout.pointer_size.bits()) {\n-                Err(EvalError::OverflowingPointerMath)\n+                Err(EvalError::OverflowingMath)\n             } else {\n                 Ok(Pointer::new(self.alloc_id, res))\n             }\n         } else {\n-            Err(EvalError::OverflowingPointerMath)\n+            Err(EvalError::OverflowingMath)\n         }\n     }\n "}, {"sha": "f7546494574b0d67f907c72d4d7cef416a997b2e", "filename": "tests/compile-fail/out_of_bounds_ptr_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs?ref=3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflowing math on a pointer\n+// error-pattern: overflowing math\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "578468c3399bbd42ff48a8414c30646d868d6634", "filename": "tests/compile-fail/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_overflow.rs?ref=3e1596d8c9f8e2eb586d3aa8dcdafa8375ecf8ec", "patch": "@@ -1,4 +1,4 @@\n-//error-pattern: overflowing math on a pointer\n+//error-pattern: overflowing math\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;"}]}