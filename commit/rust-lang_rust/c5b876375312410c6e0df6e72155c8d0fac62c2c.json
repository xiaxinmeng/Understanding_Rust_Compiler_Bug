{"sha": "c5b876375312410c6e0df6e72155c8d0fac62c2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1Yjg3NjM3NTMxMjQxMGM2ZTBkZjZlNzIxNTVjOGQwZmFjNjJjMmM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-03-26T14:29:06Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-03-26T14:29:06Z"}, "message": "Deprecate as_mut_slice methods\n\nThis is technically a breaking change as it deprecates and unstables\nsome previously stable apis that were missed in the last round of\ndeprecations.\n\n[breaking change]", "tree": {"sha": "93404793be5fdcd9483ff8dc63fc0127373d9672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93404793be5fdcd9483ff8dc63fc0127373d9672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5b876375312410c6e0df6e72155c8d0fac62c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b876375312410c6e0df6e72155c8d0fac62c2c", "html_url": "https://github.com/rust-lang/rust/commit/c5b876375312410c6e0df6e72155c8d0fac62c2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5b876375312410c6e0df6e72155c8d0fac62c2c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1501f33e76f6f9621aa08fb0cbbc5f85a5ac7f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1501f33e76f6f9621aa08fb0cbbc5f85a5ac7f0f", "html_url": "https://github.com/rust-lang/rust/commit/1501f33e76f6f9621aa08fb0cbbc5f85a5ac7f0f"}], "stats": {"total": 65, "additions": 30, "deletions": 35}, "files": [{"sha": "83e632e6c9676fef00036319fc5cd7c652c16e0a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5b876375312410c6e0df6e72155c8d0fac62c2c/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b876375312410c6e0df6e72155c8d0fac62c2c/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c5b876375312410c6e0df6e72155c8d0fac62c2c", "patch": "@@ -611,9 +611,11 @@ impl<T> [T] {\n         core_slice::SliceExt::get_mut(self, index)\n     }\n \n-    /// Work with `self` as a mut slice.\n-    /// Primarily intended for getting a &mut [T] from a [T; N].\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    /// Deprecated: use `&mut s[..]` instead.\n+    #[unstable(feature = \"collections\",\n+               reason = \"will be replaced by slice syntax\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"use &mut s[..] instead\")]\n+    #[allow(deprecated)]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         core_slice::SliceExt::as_mut_slice(self)\n     }"}, {"sha": "19b0d5b166786f54be677f123b9cc0f7f240ec94", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c5b876375312410c6e0df6e72155c8d0fac62c2c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b876375312410c6e0df6e72155c8d0fac62c2c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c5b876375312410c6e0df6e72155c8d0fac62c2c", "patch": "@@ -423,24 +423,13 @@ impl<T> Vec<T> {\n         }\n     }\n \n-    /// Returns a mutable slice of the elements of `self`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// fn foo(slice: &mut [i32]) {}\n-    ///\n-    /// let mut vec = vec![1, 2];\n-    /// foo(vec.as_mut_slice());\n-    /// ```\n+    /// Deprecated: use `&mut s[..]` instead.\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[unstable(feature = \"collections\",\n+               reason = \"will be replaced by slice syntax\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"use &mut s[..] instead\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n-        unsafe {\n-            let ptr = *self.ptr;\n-            assume(!ptr.is_null());\n-            slice::from_raw_parts_mut(ptr, self.len)\n-        }\n+        &mut self[..]\n     }\n \n     /// Creates a consuming iterator, that is, one that moves each value out of\n@@ -1494,13 +1483,13 @@ impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n     #[cfg(stage0)]\n     #[inline]\n     fn index_mut(&mut self, _index: &ops::RangeFull) -> &mut [T] {\n-        self.as_mut_slice()\n+        self\n     }\n \n     #[cfg(not(stage0))]\n     #[inline]\n     fn index_mut(&mut self, _index: ops::RangeFull) -> &mut [T] {\n-        self.as_mut_slice()\n+        self\n     }\n }\n \n@@ -1519,7 +1508,13 @@ impl<T> ops::Deref for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::DerefMut for Vec<T> {\n-    fn deref_mut(&mut self) -> &mut [T] { self.as_mut_slice() }\n+    fn deref_mut(&mut self) -> &mut [T] {\n+        unsafe {\n+            let ptr = *self.ptr;\n+            assume(!ptr.is_null());\n+            slice::from_raw_parts_mut(ptr, self.len)\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1656,21 +1651,13 @@ impl<T: Ord> Ord for Vec<T> {\n     }\n }\n \n+#[unstable(feature = \"collections\",\n+           reason = \"will be replaced by slice syntax\")]\n+#[deprecated(since = \"1.0.0\", reason = \"use &mut s[..] instead\")]\n #[allow(deprecated)]\n impl<T> AsSlice<T> for Vec<T> {\n-    /// Returns a slice into `self`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// # #![feature(core)]\n-    /// fn foo(slice: &[i32]) {}\n-    ///\n-    /// let vec = vec![1, 2];\n-    /// foo(vec.as_slice());\n-    /// ```\n+    /// Deprecated: use `&mut s[..]` instead.\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_slice(&self) -> &[T] {\n         self\n     }"}, {"sha": "892660b98bc95ac4279fa7c3c147cf54339f4023", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5b876375312410c6e0df6e72155c8d0fac62c2c/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b876375312410c6e0df6e72155c8d0fac62c2c/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=c5b876375312410c6e0df6e72155c8d0fac62c2c", "patch": "@@ -88,6 +88,9 @@ pub trait SliceExt {\n     fn len(&self) -> usize;\n     fn is_empty(&self) -> bool { self.len() == 0 }\n     fn get_mut<'a>(&'a mut self, index: usize) -> Option<&'a mut Self::Item>;\n+    #[unstable(feature = \"core\",\n+               reason = \"will be replaced by slice syntax\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"use &mut s[..] instead\")]\n     fn as_mut_slice<'a>(&'a mut self) -> &'a mut [Self::Item];\n     fn iter_mut<'a>(&'a mut self) -> IterMut<'a, Self::Item>;\n     fn first_mut<'a>(&'a mut self) -> Option<&'a mut Self::Item>;\n@@ -261,6 +264,9 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n+    #[unstable(feature = \"core\",\n+               reason = \"will be replaced by slice syntax\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"use &mut s[..] instead\")]\n     fn as_mut_slice(&mut self) -> &mut [T] { self }\n \n     #[cfg(stage0)]"}, {"sha": "83cb5c567c794adff525ce74b835b385f5e551d0", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5b876375312410c6e0df6e72155c8d0fac62c2c/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b876375312410c6e0df6e72155c8d0fac62c2c/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=c5b876375312410c6e0df6e72155c8d0fac62c2c", "patch": "@@ -101,7 +101,7 @@ pub struct Weighted<T> {\n /// let mut items = vec!(Weighted { weight: 2, item: 'a' },\n ///                      Weighted { weight: 4, item: 'b' },\n ///                      Weighted { weight: 1, item: 'c' });\n-/// let wc = WeightedChoice::new(items.as_mut_slice());\n+/// let wc = WeightedChoice::new(&mut items[..]);\n /// let mut rng = rand::thread_rng();\n /// for _ in 0..16 {\n ///      // on average prints 'a' 4 times, 'b' 8 and 'c' twice."}]}