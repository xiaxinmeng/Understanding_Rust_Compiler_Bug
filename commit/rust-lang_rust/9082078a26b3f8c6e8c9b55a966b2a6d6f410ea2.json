{"sha": "9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwODIwNzhhMjZiM2Y4YzZlOGM5YjU1YTk2NmIyYTZkNmY0MTBlYTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-25T10:52:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-25T10:53:05Z"}, "message": "unsafety checking: no longer care about is_min_const_fn\n\nRejecting the forbidden unsafe ops is done by const checking, not by unsafety checking", "tree": {"sha": "001b5a5d87493e45fe1a15bd34ae8b8e4a24f0fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001b5a5d87493e45fe1a15bd34ae8b8e4a24f0fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2", "html_url": "https://github.com/rust-lang/rust/commit/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da10c01214a3d3ebec65b8ba6effada92a0673f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da10c01214a3d3ebec65b8ba6effada92a0673f", "html_url": "https://github.com/rust-lang/rust/commit/5da10c01214a3d3ebec65b8ba6effada92a0673f"}], "stats": {"total": 71, "additions": 18, "deletions": 53}, "files": [{"sha": "8c540536d926a1057850a27974eff00e25e328be", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2", "patch": "@@ -19,10 +19,8 @@ use super::{Field, SourceInfo};\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationKind {\n-    /// Only permitted in regular `fn`s, prohibited in `const fn`s.\n+    /// Unsafe operation outside `unsafe`\n     General,\n-    /// Permitted both in `const fn`s and regular `fn`s.\n-    GeneralAndConstFn,\n     /// Unsafe operation in an `unsafe fn` but outside an `unsafe` block.\n     /// Has to be handled as a lint for backwards compatibility.\n     UnsafeFn,"}, {"sha": "955be8cc81e18285502b650f541130e7db5375b6", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 17, "deletions": 50, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2", "patch": "@@ -15,13 +15,10 @@ use rustc_session::lint::Level;\n \n use std::ops::Bound;\n \n-use crate::const_eval::is_min_const_fn;\n-\n pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     body_did: LocalDefId,\n     const_context: bool,\n-    min_const_fn: bool,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'tcx>,\n@@ -34,21 +31,15 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(\n         const_context: bool,\n-        min_const_fn: bool,\n         body: &'a Body<'tcx>,\n         body_did: LocalDefId,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n-        // sanity check\n-        if min_const_fn {\n-            assert!(const_context);\n-        }\n         Self {\n             body,\n             body_did,\n             const_context,\n-            min_const_fn,\n             violations: vec![],\n             source_info: SourceInfo::outermost(body.span),\n             tcx,\n@@ -84,7 +75,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let sig = func_ty.fn_sig(self.tcx);\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\n-                        UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationKind::General,\n                         UnsafetyViolationDetails::CallToUnsafeFunction,\n                     )\n                 }\n@@ -134,7 +125,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     match self.tcx.layout_scalar_valid_range(def.did) {\n                         (Bound::Unbounded, Bound::Unbounded) => {}\n                         _ => self.require_unsafe(\n-                            UnsafetyViolationKind::GeneralAndConstFn,\n+                            UnsafetyViolationKind::General,\n                             UnsafetyViolationDetails::InitializingTypeWith,\n                         ),\n                     }\n@@ -213,7 +204,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let base_ty = base.ty(self.body, self.tcx).ty;\n                 if base_ty.is_unsafe_ptr() {\n                     self.require_unsafe(\n-                        UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationKind::General,\n                         UnsafetyViolationDetails::DerefOfRawPointer,\n                     )\n                 }\n@@ -258,15 +249,15 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         );\n                     if !nodrop {\n                         self.require_unsafe(\n-                            UnsafetyViolationKind::GeneralAndConstFn,\n+                            UnsafetyViolationKind::General,\n                             UnsafetyViolationDetails::AssignToDroppingUnionField,\n                         );\n                     } else {\n                         // write to non-drop union field, safe\n                     }\n                 } else {\n                     self.require_unsafe(\n-                        UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationKind::General,\n                         UnsafetyViolationDetails::AccessToUnionField,\n                     )\n                 }\n@@ -277,6 +268,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn require_unsafe(&mut self, kind: UnsafetyViolationKind, details: UnsafetyViolationDetails) {\n+        // Violations can turn out to be `UnsafeFn` during analysis, but they should not start out as such.\n+        assert_ne!(kind, UnsafetyViolationKind::UnsafeFn);\n+\n         let source_info = self.source_info;\n         let lint_root = self.body.source_scopes[self.source_info.scope]\n             .local_data\n@@ -304,8 +298,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             Safety::Safe => {\n                 for violation in violations {\n                     match violation.kind {\n-                        UnsafetyViolationKind::GeneralAndConstFn\n-                        | UnsafetyViolationKind::General => {}\n+                        UnsafetyViolationKind::General => {}\n                         UnsafetyViolationKind::UnsafeFn => {\n                             bug!(\"`UnsafetyViolationKind::UnsafeFn` in an `Safe` context\")\n                         }\n@@ -334,29 +327,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 if !violations.is_empty() {\n                     self.used_unsafe.insert(hir_id);\n                 }\n-                // only some unsafety is allowed in const fn\n-                if self.min_const_fn {\n-                    for violation in violations {\n-                        match violation.kind {\n-                            // these unsafe things are stable in const fn\n-                            UnsafetyViolationKind::GeneralAndConstFn => {}\n-                            // these things are forbidden in const fns\n-                            UnsafetyViolationKind::General => {\n-                                let mut violation = *violation;\n-                                // const fns don't need to be backwards compatible and can\n-                                // emit these violations as a hard error instead of a backwards\n-                                // compat lint\n-                                violation.kind = UnsafetyViolationKind::General;\n-                                if !self.violations.contains(&violation) {\n-                                    self.violations.push(violation)\n-                                }\n-                            }\n-                            UnsafetyViolationKind::UnsafeFn => bug!(\n-                                \"`UnsafetyViolationKind::UnsafeFn` in an `ExplicitUnsafe` context\"\n-                            ),\n-                        }\n-                    }\n-                }\n                 true\n             }\n         };\n@@ -394,7 +364,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             } else {\n                                 continue;\n                             };\n-                            self.require_unsafe(UnsafetyViolationKind::GeneralAndConstFn, details);\n+                            self.require_unsafe(UnsafetyViolationKind::General, details);\n                         }\n                     }\n                 }\n@@ -412,7 +382,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         // Is `callee_features` a subset of `calling_features`?\n         if !callee_features.iter().all(|feature| self_features.contains(feature)) {\n             self.require_unsafe(\n-                UnsafetyViolationKind::GeneralAndConstFn,\n+                UnsafetyViolationKind::General,\n                 UnsafetyViolationDetails::CallToFunctionWith,\n             )\n         }\n@@ -494,15 +464,12 @@ fn unsafety_check_result<'tcx>(\n     let param_env = tcx.param_env(def.did);\n \n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    let (const_context, min_const_fn) = match tcx.hir().body_owner_kind(id) {\n-        hir::BodyOwnerKind::Closure => (false, false),\n-        hir::BodyOwnerKind::Fn => {\n-            (tcx.is_const_fn_raw(def.did.to_def_id()), is_min_const_fn(tcx, def.did.to_def_id()))\n-        }\n-        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => (true, false),\n+    let const_context = match tcx.hir().body_owner_kind(id) {\n+        hir::BodyOwnerKind::Closure => false,\n+        hir::BodyOwnerKind::Fn => tcx.is_const_fn_raw(def.did.to_def_id()),\n+        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => true,\n     };\n-    let mut checker =\n-        UnsafetyChecker::new(const_context, min_const_fn, body, def.did, tcx, param_env);\n+    let mut checker = UnsafetyChecker::new(const_context, body, def.did, tcx, param_env);\n     checker.visit_body(&body);\n \n     check_unused_unsafe(tcx, def.did, &checker.used_unsafe, &mut checker.inherited_blocks);\n@@ -577,7 +544,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n             if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) { \" function or\" } else { \"\" };\n \n         match kind {\n-            UnsafetyViolationKind::GeneralAndConstFn | UnsafetyViolationKind::General => {\n+            UnsafetyViolationKind::General => {\n                 // once\n                 struct_span_err!(\n                     tcx.sess,"}]}