{"sha": "7381ea019c47282985baab8752d27aca0a432023", "node_id": "C_kwDOAAsO6NoAKDczODFlYTAxOWM0NzI4Mjk4NWJhYWI4NzUyZDI3YWNhMGE0MzIwMjM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-04T16:32:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-06-03T17:02:14Z"}, "message": "Remove emit_unit\n\nIt doesn't do anything for all encoders", "tree": {"sha": "024faffc04f6c026f37e670f7cf7f26cf8b4c68c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/024faffc04f6c026f37e670f7cf7f26cf8b4c68c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7381ea019c47282985baab8752d27aca0a432023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7381ea019c47282985baab8752d27aca0a432023", "html_url": "https://github.com/rust-lang/rust/commit/7381ea019c47282985baab8752d27aca0a432023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7381ea019c47282985baab8752d27aca0a432023/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e8d5f80e58574a13f0623bef14015f424e8a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e8d5f80e58574a13f0623bef14015f424e8a7a", "html_url": "https://github.com/rust-lang/rust/commit/22e8d5f80e58574a13f0623bef14015f424e8a7a"}], "stats": {"total": 45, "additions": 12, "deletions": 33}, "files": [{"sha": "b64f7b8ad1b113a213b1ecc90903c8d9d35e69fe", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=7381ea019c47282985baab8752d27aca0a432023", "patch": "@@ -2473,8 +2473,8 @@ rustc_index::newtype_index! {\n }\n \n impl<S: Encoder> rustc_serialize::Encodable<S> for AttrId {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_unit()\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n     }\n }\n "}, {"sha": "1425c5467af873902896ad16a26f64234b3407f1", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7381ea019c47282985baab8752d27aca0a432023", "patch": "@@ -95,11 +95,6 @@ macro_rules! encoder_methods {\n impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {\n     type Error = <opaque::Encoder as Encoder>::Error;\n \n-    #[inline]\n-    fn emit_unit(&mut self) -> Result<(), Self::Error> {\n-        Ok(())\n-    }\n-\n     encoder_methods! {\n         emit_usize(usize);\n         emit_u128(u128);"}, {"sha": "0b9ddaf64d4e26faeb9031f953061672bb9baa18", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=7381ea019c47282985baab8752d27aca0a432023", "patch": "@@ -56,8 +56,8 @@ impl PredecessorCache {\n \n impl<S: serialize::Encoder> serialize::Encodable<S> for PredecessorCache {\n     #[inline]\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_unit()\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n     }\n }\n "}, {"sha": "fbb26800e29c9fba22507c53ea3a4833ac413776", "filename": "compiler/rustc_middle/src/mir/switch_sources.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs?ref=7381ea019c47282985baab8752d27aca0a432023", "patch": "@@ -56,8 +56,8 @@ impl SwitchSourceCache {\n \n impl<S: serialize::Encoder> serialize::Encodable<S> for SwitchSourceCache {\n     #[inline]\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_unit()\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n     }\n }\n "}, {"sha": "5e8226d356f56c8172936cd8aadd3266dcafd769", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=7381ea019c47282985baab8752d27aca0a432023", "patch": "@@ -367,8 +367,8 @@ impl PostorderCache {\n \n impl<S: serialize::Encoder> serialize::Encodable<S> for PostorderCache {\n     #[inline]\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_unit()\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n     }\n }\n "}, {"sha": "e93bf1a475225adb2a8a15ef312f3b52214003cc", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=7381ea019c47282985baab8752d27aca0a432023", "patch": "@@ -993,11 +993,6 @@ where\n {\n     type Error = E::Error;\n \n-    #[inline]\n-    fn emit_unit(&mut self) -> Result<(), Self::Error> {\n-        Ok(())\n-    }\n-\n     encoder_methods! {\n         emit_usize(usize);\n         emit_u128(u128);"}, {"sha": "3bcb7cc3650549a2ff87fb90300d4a8123692325", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=7381ea019c47282985baab8752d27aca0a432023", "patch": "@@ -64,11 +64,6 @@ const STR_SENTINEL: u8 = 0xC1;\n impl serialize::Encoder for Encoder {\n     type Error = !;\n \n-    #[inline]\n-    fn emit_unit(&mut self) -> EncodeResult {\n-        Ok(())\n-    }\n-\n     #[inline]\n     fn emit_usize(&mut self, v: usize) -> EncodeResult {\n         write_leb128!(self, v, usize, write_usize_leb128)\n@@ -419,11 +414,6 @@ macro_rules! file_encoder_write_leb128 {\n impl serialize::Encoder for FileEncoder {\n     type Error = io::Error;\n \n-    #[inline]\n-    fn emit_unit(&mut self) -> FileEncodeResult {\n-        Ok(())\n-    }\n-\n     #[inline]\n     fn emit_usize(&mut self, v: usize) -> FileEncodeResult {\n         file_encoder_write_leb128!(self, v, usize, write_usize_leb128)"}, {"sha": "817a0c9dcb17b0196d81f0574f7b62b667d28db3", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7381ea019c47282985baab8752d27aca0a432023/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=7381ea019c47282985baab8752d27aca0a432023", "patch": "@@ -15,7 +15,6 @@ pub trait Encoder {\n     type Error;\n \n     // Primitive types:\n-    fn emit_unit(&mut self) -> Result<(), Self::Error>;\n     fn emit_usize(&mut self, v: usize) -> Result<(), Self::Error>;\n     fn emit_u128(&mut self, v: u128) -> Result<(), Self::Error>;\n     fn emit_u64(&mut self, v: u64) -> Result<(), Self::Error>;\n@@ -203,8 +202,8 @@ impl<D: Decoder> Decodable<D> for String {\n }\n \n impl<S: Encoder> Encodable<S> for () {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_unit()\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n     }\n }\n \n@@ -213,8 +212,8 @@ impl<D: Decoder> Decodable<D> for () {\n }\n \n impl<S: Encoder, T> Encodable<S> for PhantomData<T> {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_unit()\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n     }\n }\n "}]}