{"sha": "3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMWEyMjBmMzIyMjBjZDRhNjY0Y2ExYWRhYzVlYjM2ZTllYjMzYjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-19T11:39:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-19T11:39:45Z"}, "message": "Merge #8574\n\n8574: Check for rust doc code attributes like rustdoc does r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e59269946584d6c70c00dcc25f49ccb0f88a2235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59269946584d6c70c00dcc25f49ccb0f88a2235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfWwBCRBK7hj4Ov3rIwAAGXsIAIClDI23R83KFMF43kOL2ggg\niOvfiavSJHv8wlLlH7GSNV9ygUwAcbTiz4wO/iDrQ0w4Y6XJUpQB7rgdYuCnQakM\nfX9dPJXyzSjozeGGRF2y8yOHmORU+Pqh5+oIBXCWQjlHVkN1pOl+GqqDjEEMPS5W\nf/ymEaup4sgrn7lJMXjXmjbRwAbd6Q7D8I7nb+NnP/8X4AT1RX3Rcuq7duGsQx2j\n+218vl0ATzPBX2YJdwLaQqxj95s5SVRWivEWsT6fxpsJS72KdggI4CUUWJkeYxGz\nwjFvD4z557M6t+bEbvApYUF96KafSjYu3qvfYtWXDjIQwXZ5uX9B8KHrzS9KGXA=\n=UgpY\n-----END PGP SIGNATURE-----\n", "payload": "tree e59269946584d6c70c00dcc25f49ccb0f88a2235\nparent 65dd942fa1199361f2f7327bee71ae7ac5f4239d\nparent 2f62c0117a1d59a531f9c84fbdb2f70ff87d22e0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618832385 +0000\ncommitter GitHub <noreply@github.com> 1618832385 +0000\n\nMerge #8574\n\n8574: Check for rust doc code attributes like rustdoc does r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "html_url": "https://github.com/rust-lang/rust/commit/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65dd942fa1199361f2f7327bee71ae7ac5f4239d", "url": "https://api.github.com/repos/rust-lang/rust/commits/65dd942fa1199361f2f7327bee71ae7ac5f4239d", "html_url": "https://github.com/rust-lang/rust/commit/65dd942fa1199361f2f7327bee71ae7ac5f4239d"}, {"sha": "2f62c0117a1d59a531f9c84fbdb2f70ff87d22e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f62c0117a1d59a531f9c84fbdb2f70ff87d22e0", "html_url": "https://github.com/rust-lang/rust/commit/2f62c0117a1d59a531f9c84fbdb2f70ff87d22e0"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "bc221d59966fc422e9fa092dc66347b1a2d1e9c1", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "patch": "@@ -4,7 +4,7 @@ use std::mem;\n \n use either::Either;\n use hir::{InFile, Semantics};\n-use ide_db::{call_info::ActiveParameter, SymbolKind};\n+use ide_db::{call_info::ActiveParameter, helpers::rust_doc::is_rust_fence, SymbolKind};\n use syntax::{\n     ast::{self, AstNode},\n     AstToken, NodeOrToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n@@ -78,24 +78,6 @@ pub(super) fn ra_fixture(\n }\n \n const RUSTDOC_FENCE: &'static str = \"```\";\n-const RUSTDOC_FENCE_TOKENS: &[&'static str] = &[\n-    \"\",\n-    \"rust\",\n-    \"should_panic\",\n-    \"ignore\",\n-    \"no_run\",\n-    \"compile_fail\",\n-    \"edition2015\",\n-    \"edition2018\",\n-    \"edition2021\",\n-];\n-\n-fn is_rustdoc_fence_token(token: &str) -> bool {\n-    if RUSTDOC_FENCE_TOKENS.contains(&token) {\n-        return true;\n-    }\n-    token.starts_with('E') && token.len() == 5 && token[1..].parse::<u32>().is_ok()\n-}\n \n /// Injection of syntax highlighting of doctests.\n pub(super) fn doc_comment(\n@@ -181,7 +163,7 @@ pub(super) fn doc_comment(\n                     is_codeblock = !is_codeblock;\n                     // Check whether code is rust by inspecting fence guards\n                     let guards = &line[idx + RUSTDOC_FENCE.len()..];\n-                    let is_rust = guards.split(',').all(|sub| is_rustdoc_fence_token(sub.trim()));\n+                    let is_rust = is_rust_fence(guards);\n                     is_doctest = is_codeblock && is_rust;\n                     continue;\n                 }"}, {"sha": "17cc6334b9e07cc68f440ce6ee3a7f18100033f0", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "patch": "@@ -307,7 +307,7 @@ fn benchmark_syntax_highlighting_parser() {\n             .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))\n             .count()\n     };\n-    assert_eq!(hash, 1629);\n+    assert_eq!(hash, 1632);\n }\n \n #[test]"}, {"sha": "720de0d1fba82d9cd55ad484e560a31666bd2439", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "patch": "@@ -1,6 +1,7 @@\n //! A module with ide helpers for high-level ide features.\n pub mod insert_use;\n pub mod import_assets;\n+pub mod rust_doc;\n \n use std::collections::VecDeque;\n "}, {"sha": "e27e23867a8b82ef6c0b896d75585a5bd64bd597", "filename": "crates/ide_db/src/helpers/rust_doc.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Fide_db%2Fsrc%2Fhelpers%2Frust_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Fide_db%2Fsrc%2Fhelpers%2Frust_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Frust_doc.rs?ref=3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "patch": "@@ -0,0 +1,34 @@\n+//! Rustdoc specific doc comment handling\n+\n+// stripped down version of https://github.com/rust-lang/rust/blob/392ba2ba1a7d6c542d2459fb8133bebf62a4a423/src/librustdoc/html/markdown.rs#L810-L933\n+pub fn is_rust_fence(s: &str) -> bool {\n+    let mut seen_rust_tags = false;\n+    let mut seen_other_tags = false;\n+\n+    let tokens = s\n+        .trim()\n+        .split(|c| c == ',' || c == ' ' || c == '\\t')\n+        .map(str::trim)\n+        .filter(|t| !t.is_empty());\n+\n+    for token in tokens {\n+        match token {\n+            \"should_panic\" | \"no_run\" | \"ignore\" | \"allow_fail\" => {\n+                seen_rust_tags = !seen_other_tags\n+            }\n+            \"rust\" => seen_rust_tags = true,\n+            \"test_harness\" | \"compile_fail\" => seen_rust_tags = !seen_other_tags || seen_rust_tags,\n+            x if x.starts_with(\"edition\") => {}\n+            x if x.starts_with('E') && x.len() == 5 => {\n+                if x[1..].parse::<u32>().is_ok() {\n+                    seen_rust_tags = !seen_other_tags || seen_rust_tags;\n+                } else {\n+                    seen_other_tags = true;\n+                }\n+            }\n+            _ => seen_other_tags = true,\n+        }\n+    }\n+\n+    !seen_other_tags || seen_rust_tags\n+}"}, {"sha": "35eaffba8ca99a4e88ca5f0d20f13c946820a7b1", "filename": "crates/rust-analyzer/src/markdown.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs?ref=3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "patch": "@@ -1,17 +1,7 @@\n //! Transforms markdown\n+use ide_db::helpers::rust_doc::is_rust_fence;\n \n const RUSTDOC_FENCE: &str = \"```\";\n-const RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUST_SPECIFIC: &[&str] = &[\n-    \"\",\n-    \"rust\",\n-    \"should_panic\",\n-    \"ignore\",\n-    \"no_run\",\n-    \"compile_fail\",\n-    \"edition2015\",\n-    \"edition2018\",\n-    \"edition2021\",\n-];\n \n pub(crate) fn format_docs(src: &str) -> String {\n     let mut processed_lines = Vec::new();\n@@ -27,8 +17,7 @@ pub(crate) fn format_docs(src: &str) -> String {\n             in_code_block ^= true;\n \n             if in_code_block {\n-                is_rust =\n-                    header.split(',').all(|sub| is_rust_specific_code_block_attribute(sub.trim()));\n+                is_rust = is_rust_fence(header);\n \n                 if is_rust {\n                     line = \"```rust\";\n@@ -41,13 +30,6 @@ pub(crate) fn format_docs(src: &str) -> String {\n     processed_lines.join(\"\\n\")\n }\n \n-fn is_rust_specific_code_block_attribute(attr: &str) -> bool {\n-    if RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUST_SPECIFIC.contains(&attr) {\n-        return true;\n-    }\n-    attr.starts_with('E') && attr.len() == 5 && attr[1..].parse::<u32>().is_ok()\n-}\n-\n fn code_line_ignored_by_rustdoc(line: &str) -> bool {\n     let trimmed = line.trim();\n     trimmed == \"#\" || trimmed.starts_with(\"# \") || trimmed.starts_with(\"#\\t\")"}]}