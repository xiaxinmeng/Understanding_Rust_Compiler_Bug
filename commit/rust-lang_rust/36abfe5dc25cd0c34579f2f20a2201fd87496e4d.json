{"sha": "36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YWJmZTVkYzI1Y2QwYzM0NTc5ZjJmMjBhMjIwMWZkODc0OTZlNGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-22T21:35:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-23T20:46:14Z"}, "message": "Remove usage of many unstable features\n\nThis removes usage of:\n\n* PathExt\n* split_last\n* split_last_mut\n* catch_panic\n\nThe catch_panic one was a little tricky as the ident interner needed to be\ncloned across threads (a little unsafely), but it should otherwise be good to\ngo.", "tree": {"sha": "1e5a2b2b8bed5f4e12bae14f48b4a4e967e3c91a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e5a2b2b8bed5f4e12bae14f48b4a4e967e3c91a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "html_url": "https://github.com/rust-lang/rust/commit/36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda463275ed9642e231c92614a986af4a815b351", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda463275ed9642e231c92614a986af4a815b351", "html_url": "https://github.com/rust-lang/rust/commit/cda463275ed9642e231c92614a986af4a815b351"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "40f55d611542a31c2301c6ba7fb9b4a6d9337e09", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "patch": "@@ -7,8 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(path_ext)]\n-#![feature(rustc_private)]\n+\n #![cfg(not(test))]\n \n #[macro_use]\n@@ -21,7 +20,7 @@ use rustfmt::{WriteMode, run};\n use rustfmt::config::Config;\n \n use std::env;\n-use std::fs::{File, PathExt};\n+use std::fs::{self, File};\n use std::io::{self, Read};\n use std::path::PathBuf;\n use std::str::FromStr;\n@@ -31,7 +30,7 @@ fn lookup_project_file() -> io::Result<PathBuf> {\n     let mut current = try!(env::current_dir());\n     loop {\n         let config_file = current.join(\"rustfmt.toml\");\n-        if config_file.exists() {\n+        if fs::metadata(&config_file).is_ok() {\n             return Ok(config_file);\n         } else {\n             current = match current.parent() {"}, {"sha": "4716f545b3f58be2df2617731fd2a5ebe4763cf8", "filename": "src/chains.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "patch": "@@ -72,11 +72,9 @@ pub fn rewrite_chain(mut expr: &ast::Expr,\n                                             .collect::<Option<Vec<_>>>());\n \n     // Total of all items excluding the last.\n-    let almost_total = rewrites.split_last()\n-                               .unwrap()\n-                               .1\n-                               .iter()\n-                               .fold(0, |a, b| a + first_line_width(b)) +\n+    let almost_total = rewrites[..rewrites.len() - 1]\n+                           .iter()\n+                           .fold(0, |a, b| a + first_line_width(b)) +\n                        parent_rewrite.len();\n     let total_width = almost_total + first_line_width(rewrites.last().unwrap());\n     let veto_single_line = if context.config.take_source_hints && subexpr_list.len() > 1 {\n@@ -95,7 +93,9 @@ pub fn rewrite_chain(mut expr: &ast::Expr,\n                            match subexpr_list[0].node {\n         ast::Expr_::ExprMethodCall(ref method_name, ref types, ref expressions)\n             if context.config.chains_overflow_last => {\n-            let (last, init) = rewrites.split_last_mut().unwrap();\n+            let len = rewrites.len();\n+            let (init, last) = rewrites.split_at_mut(len - 1);\n+            let last = &mut last[0];\n \n             if init.iter().all(|s| !s.contains('\\n')) && total_width <= width {\n                 let last_rewrite = width.checked_sub(almost_total)"}, {"sha": "091b4293ad38ae5a3a76e015d2bd152e4e437f73", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "patch": "@@ -437,7 +437,7 @@ mod test {\n     }\n \n     #[test]\n-    #[rustfmt_skip]\n+    #[cfg_attr(rustfmt, rustfmt_skip)]\n     fn format_comments() {\n         let config = Default::default();\n         assert_eq!(\"/* test */\", rewrite_comment(\" //test\", true, 100, Indent::new(0, 100),"}, {"sha": "0e3dff21b69435dd8a6f665cee1bdfce79ccd18c", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "patch": "@@ -8,13 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_private)]\n-#![feature(custom_attribute)]\n-#![feature(slice_splits)]\n-#![feature(slice_patterns)]\n-#![feature(catch_panic)]\n-#![allow(unused_attributes)]\n-\n // TODO we're going to allocate a whole bunch of temp Strings, is it worth\n // keeping some scratch mem for this and running our own StrPool?\n // TODO for lint violations of names, emit a refactor script"}, {"sha": "37ae0af3a0be3755fc136d4d70c0b6894b121cf9", "filename": "src/macros.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36abfe5dc25cd0c34579f2f20a2201fd87496e4d/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "patch": "@@ -20,11 +20,14 @@\n // and those with brackets will be formatted as array literals.\n \n use std::thread;\n+use std::collections::hash_map::{HashMap, Entry};\n \n use syntax::ast;\n use syntax::parse::token::{Eof, Comma, Token};\n use syntax::parse::{ParseSess, tts_to_parser};\n use syntax::codemap::{mk_sp, BytePos};\n+use syntax::parse::token;\n+use syntax::util::interner::StrInterner;\n \n use Indent;\n use rewrite::RewriteContext;\n@@ -82,13 +85,16 @@ pub fn rewrite_macro(mac: &ast::Mac,\n     }\n \n     let wrapped_tt_vec = ForceSend(mac.node.tts.clone());\n+    let my_interner = ForceSend(clone_interner());\n+\n     // Wrap expression parsing logic in a thread since the libsyntax parser\n     // panics on failure, which we do not want to propagate.\n     // The expression vector is wrapped in an Option inside a Result.\n-    let expr_vec_result = thread::catch_panic(move || {\n+    let expr_vec_result = thread::spawn(move || {\n         let parse_session = ParseSess::new();\n         let mut parser = tts_to_parser(&parse_session, wrapped_tt_vec.0, vec![]);\n         let mut expr_vec = vec![];\n+        token::get_ident_interner().reset(my_interner.0);\n \n         loop {\n             expr_vec.push(parser.parse_expr());\n@@ -106,9 +112,10 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             }\n         }\n \n-        Some(expr_vec)\n+        Some(ForceSend((expr_vec, clone_interner())))\n     });\n-    let expr_vec = try_opt!(try_opt!(expr_vec_result.ok()));\n+    let (expr_vec, interner) = try_opt!(try_opt!(expr_vec_result.join().ok())).0;\n+    token::get_ident_interner().reset(interner);\n \n     match style {\n         MacroStyle::Parens => {\n@@ -139,6 +146,23 @@ pub fn rewrite_macro(mac: &ast::Mac,\n     }\n }\n \n+fn clone_interner() -> StrInterner {\n+    let old = token::get_ident_interner();\n+    let new = StrInterner::new();\n+    let mut map = HashMap::new();\n+    for name in (0..old.len()).map(|i| i as u32).map(ast::Name) {\n+        match map.entry(old.get(name)) {\n+            Entry::Occupied(e) => {\n+                new.gensym_copy(*e.get());\n+            }\n+            Entry::Vacant(e) => {\n+                e.insert(new.intern(&old.get(name)));\n+            }\n+        }\n+    }\n+    return new\n+}\n+\n fn macro_style(mac: &ast::Mac, context: &RewriteContext) -> MacroStyle {\n     let snippet = context.snippet(mac.span);\n     let paren_pos = snippet.find_uncommented(\"(\").unwrap_or(usize::max_value());"}]}