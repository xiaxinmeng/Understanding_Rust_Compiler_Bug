{"sha": "1256530643fdd4762de8de5a47041fc2cf700828", "node_id": "C_kwDOAAsO6NoAKDEyNTY1MzA2NDNmZGQ0NzYyZGU4ZGU1YTQ3MDQxZmMyY2Y3MDA4Mjg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-28T01:22:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-28T01:24:41Z"}, "message": "More descriptive argument placeholders", "tree": {"sha": "1a66235680f0f5e882c55c021d95923ae0001ba5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a66235680f0f5e882c55c021d95923ae0001ba5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1256530643fdd4762de8de5a47041fc2cf700828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1256530643fdd4762de8de5a47041fc2cf700828", "html_url": "https://github.com/rust-lang/rust/commit/1256530643fdd4762de8de5a47041fc2cf700828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1256530643fdd4762de8de5a47041fc2cf700828/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18b640aee5b5435491a9db82c08c8fde8b7b62c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b640aee5b5435491a9db82c08c8fde8b7b62c9", "html_url": "https://github.com/rust-lang/rust/commit/18b640aee5b5435491a9db82c08c8fde8b7b62c9"}], "stats": {"total": 155, "additions": 96, "deletions": 59}, "files": [{"sha": "57555433f55b745b54247219bbd1846116c16463", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1256530643fdd4762de8de5a47041fc2cf700828/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1256530643fdd4762de8de5a47041fc2cf700828/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=1256530643fdd4762de8de5a47041fc2cf700828", "patch": "@@ -844,6 +844,12 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Vec<T> {\n     }\n }\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &[T] {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n+    }\n+}\n+\n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))"}, {"sha": "d48bdbd7b6d643adb292fb976183b8d10b56a80d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 50, "deletions": 19, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1256530643fdd4762de8de5a47041fc2cf700828/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1256530643fdd4762de8de5a47041fc2cf700828/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=1256530643fdd4762de8de5a47041fc2cf700828", "patch": "@@ -76,16 +76,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         found: Ty<'tcx>,\n         can_satisfy: impl FnOnce(Ty<'tcx>) -> bool,\n     ) -> bool {\n-        let Some((def_id_or_name, output, num_inputs)) = self.extract_callable_info(expr, found)\n+        let Some((def_id_or_name, output, inputs)) = self.extract_callable_info(expr, found)\n             else { return false; };\n         if can_satisfy(output) {\n-            let (sugg_call, mut applicability) = match num_inputs {\n+            let (sugg_call, mut applicability) = match inputs.len() {\n                 0 => (\"\".to_string(), Applicability::MachineApplicable),\n                 1..=4 => (\n-                    (0..num_inputs).map(|_| \"_\").collect::<Vec<_>>().join(\", \"),\n-                    Applicability::MachineApplicable,\n+                    inputs\n+                        .iter()\n+                        .map(|ty| {\n+                            if ty.is_suggestable(self.tcx, false) {\n+                                format!(\"/* {ty} */\")\n+                            } else {\n+                                \"\".to_string()\n+                            }\n+                        })\n+                        .collect::<Vec<_>>()\n+                        .join(\", \"),\n+                    Applicability::HasPlaceholders,\n                 ),\n-                _ => (\"...\".to_string(), Applicability::HasPlaceholders),\n+                _ => (\"/* ... */\".to_string(), Applicability::HasPlaceholders),\n             };\n \n             let msg = match def_id_or_name {\n@@ -137,19 +147,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &Expr<'_>,\n         found: Ty<'tcx>,\n-    ) -> Option<(DefIdOrName, Ty<'tcx>, usize)> {\n+    ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)> {\n         // Autoderef is useful here because sometimes we box callables, etc.\n         let Some((def_id_or_name, output, inputs)) = self.autoderef(expr.span, found).silence_errors().find_map(|(found, _)| {\n             match *found.kind() {\n                 ty::FnPtr(fn_sig) =>\n-                    Some((DefIdOrName::Name(\"function pointer\"), fn_sig.output(), fn_sig.inputs().skip_binder().len())),\n+                    Some((DefIdOrName::Name(\"function pointer\"), fn_sig.output(), fn_sig.inputs())),\n                 ty::FnDef(def_id, _) => {\n                     let fn_sig = found.fn_sig(self.tcx);\n-                    Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().skip_binder().len()))\n+                    Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs()))\n                 }\n                 ty::Closure(def_id, substs) => {\n                     let fn_sig = substs.as_closure().sig();\n-                    Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().skip_binder().len() - 1))\n+                    Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().map_bound(|inputs| &inputs[1..])))\n                 }\n                 ty::Opaque(def_id, substs) => {\n                     self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n@@ -161,7 +171,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             Some((\n                                 DefIdOrName::DefId(def_id),\n                                 pred.kind().rebind(proj.term.ty().unwrap()),\n-                                args.len(),\n+                                pred.kind().rebind(args.as_slice()),\n                             ))\n                         } else {\n                             None\n@@ -178,7 +188,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             Some((\n                                 DefIdOrName::Name(\"trait object\"),\n                                 pred.rebind(proj.term.ty().unwrap()),\n-                                args.len(),\n+                                pred.rebind(args.as_slice()),\n                             ))\n                         } else {\n                             None\n@@ -197,7 +207,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             Some((\n                                 DefIdOrName::DefId(def_id),\n                                 pred.kind().rebind(proj.term.ty().unwrap()),\n-                                args.len(),\n+                                pred.kind().rebind(args.as_slice()),\n                             ))\n                         } else {\n                             None\n@@ -209,6 +219,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }) else { return None; };\n \n         let output = self.replace_bound_vars_with_fresh_vars(expr.span, infer::FnCall, output);\n+        let inputs = inputs\n+            .skip_binder()\n+            .iter()\n+            .map(|ty| {\n+                self.replace_bound_vars_with_fresh_vars(\n+                    expr.span,\n+                    infer::FnCall,\n+                    inputs.rebind(*ty),\n+                )\n+            })\n+            .collect();\n \n         // We don't want to register any extra obligations, which should be\n         // implied by wf, but also because that would possibly result in\n@@ -228,23 +249,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         rhs_ty: Ty<'tcx>,\n         can_satisfy: impl FnOnce(Ty<'tcx>, Ty<'tcx>) -> bool,\n     ) -> bool {\n-        let Some((_, lhs_output_ty, num_lhs_inputs)) = self.extract_callable_info(lhs_expr, lhs_ty)\n+        let Some((_, lhs_output_ty, lhs_inputs)) = self.extract_callable_info(lhs_expr, lhs_ty)\n             else { return false; };\n-        let Some((_, rhs_output_ty, num_rhs_inputs)) = self.extract_callable_info(rhs_expr, rhs_ty)\n+        let Some((_, rhs_output_ty, rhs_inputs)) = self.extract_callable_info(rhs_expr, rhs_ty)\n             else { return false; };\n \n         if can_satisfy(lhs_output_ty, rhs_output_ty) {\n             let mut sugg = vec![];\n             let mut applicability = Applicability::MachineApplicable;\n \n-            for (expr, num_inputs) in [(lhs_expr, num_lhs_inputs), (rhs_expr, num_rhs_inputs)] {\n-                let (sugg_call, this_applicability) = match num_inputs {\n+            for (expr, inputs) in [(lhs_expr, lhs_inputs), (rhs_expr, rhs_inputs)] {\n+                let (sugg_call, this_applicability) = match inputs.len() {\n                     0 => (\"\".to_string(), Applicability::MachineApplicable),\n                     1..=4 => (\n-                        (0..num_inputs).map(|_| \"_\").collect::<Vec<_>>().join(\", \"),\n-                        Applicability::MachineApplicable,\n+                        inputs\n+                            .iter()\n+                            .map(|ty| {\n+                                if ty.is_suggestable(self.tcx, false) {\n+                                    format!(\"/* {ty} */\")\n+                                } else {\n+                                    \"/* value */\".to_string()\n+                                }\n+                            })\n+                            .collect::<Vec<_>>()\n+                            .join(\", \"),\n+                        Applicability::HasPlaceholders,\n                     ),\n-                    _ => (\"...\".to_string(), Applicability::HasPlaceholders),\n+                    _ => (\"/* ... */\".to_string(), Applicability::HasPlaceholders),\n                 };\n \n                 applicability = applicability.max(this_applicability);"}, {"sha": "a334bd8562593d9f4550968b107579a0d982a0f6", "filename": "src/test/ui/binop/issue-77910-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-2.stderr?ref=1256530643fdd4762de8de5a47041fc2cf700828", "patch": "@@ -8,8 +8,8 @@ LL |     if foo == y {}\n    |\n help: use parentheses to call this function\n    |\n-LL |     if foo(_) == y {}\n-   |           +++\n+LL |     if foo(/* &i32 */) == y {}\n+   |           ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "2a674d3c1d23dea4ee5f1859c779a48fd02bb183", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=1256530643fdd4762de8de5a47041fc2cf700828", "patch": "@@ -10,8 +10,8 @@ LL |     let _: () = Box::new(|_: isize| {}) as Box<dyn FnOnce(isize)>;\n                  found struct `Box<dyn FnOnce(isize)>`\n help: use parentheses to call this trait object\n    |\n-LL |     let _: () = (Box::new(|_: isize| {}) as Box<dyn FnOnce(isize)>)(_);\n-   |                 +                                                 ++++\n+LL |     let _: () = (Box::new(|_: isize| {}) as Box<dyn FnOnce(isize)>)(/* isize */);\n+   |                 +                                                 ++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n@@ -25,8 +25,8 @@ LL |     let _: () = Box::new(|_: isize, isize| {}) as Box<dyn Fn(isize, isize)>\n                  found struct `Box<dyn Fn(isize, isize)>`\n help: use parentheses to call this trait object\n    |\n-LL |     let _: () = (Box::new(|_: isize, isize| {}) as Box<dyn Fn(isize, isize)>)(_, _);\n-   |                 +                                                           +++++++\n+LL |     let _: () = (Box::new(|_: isize, isize| {}) as Box<dyn Fn(isize, isize)>)(/* isize */, /* isize */);\n+   |                 +                                                           +++++++++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17"}, {"sha": "9ee7654a0885d836fb6c42292af24c1827807681", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=1256530643fdd4762de8de5a47041fc2cf700828", "patch": "@@ -13,8 +13,8 @@ LL | fn test() -> Foo { Foo }\n              found fn item `fn(u32) -> Foo {Foo}`\n help: use parentheses to instantiate this tuple struct\n    |\n-LL | fn test() -> Foo { Foo(_) }\n-   |                       +++\n+LL | fn test() -> Foo { Foo(/* u32 */) }\n+   |                       +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "e5368ddf1e5760b88b1b071a3319af0939110b6d", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=1256530643fdd4762de8de5a47041fc2cf700828", "patch": "@@ -30,8 +30,8 @@ LL |     bar > 13;\n    |\n help: use parentheses to call this function\n    |\n-LL |     bar(_) > 13;\n-   |        +++\n+LL |     bar(/* i64 */) > 13;\n+   |        +++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59488.rs:18:11"}, {"sha": "7cf32775a33ef3363aa23bcf53517798bd7be233", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=1256530643fdd4762de8de5a47041fc2cf700828", "patch": "@@ -329,8 +329,8 @@ LL |         let _: Z = Z::Fn;\n            found fn item `fn(u8) -> Z {Z::Fn}`\n help: use parentheses to instantiate this tuple variant\n    |\n-LL |         let _: Z = Z::Fn(_);\n-   |                         +++\n+LL |         let _: Z = Z::Fn(/* u8 */);\n+   |                         ++++++++++\n \n error[E0618]: expected function, found enum variant `Z::Unit`\n   --> $DIR/privacy-enum-ctor.rs:31:17\n@@ -364,8 +364,8 @@ LL |     let _: E = m::E::Fn;\n            found fn item `fn(u8) -> E {E::Fn}`\n help: use parentheses to instantiate this tuple variant\n    |\n-LL |     let _: E = m::E::Fn(_);\n-   |                        +++\n+LL |     let _: E = m::E::Fn(/* u8 */);\n+   |                        ++++++++++\n \n error[E0618]: expected function, found enum variant `m::E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:47:16\n@@ -399,8 +399,8 @@ LL |     let _: E = E::Fn;\n            found fn item `fn(u8) -> E {E::Fn}`\n help: use parentheses to instantiate this tuple variant\n    |\n-LL |     let _: E = E::Fn(_);\n-   |                     +++\n+LL |     let _: E = E::Fn(/* u8 */);\n+   |                     ++++++++++\n \n error[E0618]: expected function, found enum variant `E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:55:16"}, {"sha": "3c7b895e337e72c8ee20a9e38dbd4f964dcc2d52", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=1256530643fdd4762de8de5a47041fc2cf700828", "patch": "@@ -33,8 +33,8 @@ LL |     let _: usize = foo;\n            found fn item `fn(usize, usize) -> usize {foo}`\n help: use parentheses to call this function\n    |\n-LL |     let _: usize = foo(_, _);\n-   |                       ++++++\n+LL |     let _: usize = foo(/* usize */, /* usize */);\n+   |                       ++++++++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:30:16\n@@ -51,8 +51,8 @@ LL |     let _: S = S;\n              found fn item `fn(usize, usize) -> S {S}`\n help: use parentheses to instantiate this tuple struct\n    |\n-LL |     let _: S = S(_, _);\n-   |                 ++++++\n+LL |     let _: S = S(/* usize */, /* usize */);\n+   |                 ++++++++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:31:20\n@@ -105,8 +105,8 @@ LL |     let _: usize = T::baz;\n            found fn item `fn(usize, usize) -> usize {<_ as T>::baz}`\n help: use parentheses to call this associated function\n    |\n-LL |     let _: usize = T::baz(_, _);\n-   |                          ++++++\n+LL |     let _: usize = T::baz(/* usize */, /* usize */);\n+   |                          ++++++++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:34:20\n@@ -123,8 +123,8 @@ LL |     let _: usize = T::bat;\n            found fn item `fn(usize) -> usize {<_ as T>::bat}`\n help: use parentheses to call this associated function\n    |\n-LL |     let _: usize = T::bat(_);\n-   |                          +++\n+LL |     let _: usize = T::bat(/* usize */);\n+   |                          +++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:35:16\n@@ -141,8 +141,8 @@ LL |     let _: E = E::A;\n            found fn item `fn(usize) -> E {E::A}`\n help: use parentheses to instantiate this tuple variant\n    |\n-LL |     let _: E = E::A(_);\n-   |                    +++\n+LL |     let _: E = E::A(/* usize */);\n+   |                    +++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:37:20\n@@ -159,8 +159,8 @@ LL |     let _: usize = X::baz;\n            found fn item `fn(usize, usize) -> usize {<X as T>::baz}`\n help: use parentheses to call this associated function\n    |\n-LL |     let _: usize = X::baz(_, _);\n-   |                          ++++++\n+LL |     let _: usize = X::baz(/* usize */, /* usize */);\n+   |                          ++++++++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:38:20\n@@ -177,8 +177,8 @@ LL |     let _: usize = X::bat;\n            found fn item `fn(usize) -> usize {<X as T>::bat}`\n help: use parentheses to call this associated function\n    |\n-LL |     let _: usize = X::bat(_);\n-   |                          +++\n+LL |     let _: usize = X::bat(/* usize */);\n+   |                          +++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:39:20\n@@ -195,8 +195,8 @@ LL |     let _: usize = X::bax;\n            found fn item `fn(usize) -> usize {<X as T>::bax}`\n help: use parentheses to call this associated function\n    |\n-LL |     let _: usize = X::bax(_);\n-   |                          +++\n+LL |     let _: usize = X::bax(/* usize */);\n+   |                          +++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:40:20\n@@ -213,8 +213,8 @@ LL |     let _: usize = X::bach;\n            found fn item `fn(usize) -> usize {<X as T>::bach}`\n help: use parentheses to call this associated function\n    |\n-LL |     let _: usize = X::bach(_);\n-   |                           +++\n+LL |     let _: usize = X::bach(/* usize */);\n+   |                           +++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:41:20\n@@ -231,8 +231,8 @@ LL |     let _: usize = X::ban;\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::ban}`\n help: use parentheses to call this associated function\n    |\n-LL |     let _: usize = X::ban(_);\n-   |                          +++\n+LL |     let _: usize = X::ban(/* &X */);\n+   |                          ++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:42:20\n@@ -249,8 +249,8 @@ LL |     let _: usize = X::bal;\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::bal}`\n help: use parentheses to call this associated function\n    |\n-LL |     let _: usize = X::bal(_);\n-   |                          +++\n+LL |     let _: usize = X::bal(/* &X */);\n+   |                          ++++++++++\n \n error[E0615]: attempted to take value of method `ban` on type `X`\n   --> $DIR/fn-or-tuple-struct-without-args.rs:43:22"}, {"sha": "c1ca26ee9af1dc84ca41784e4834b60c2b2f737f", "filename": "src/test/ui/typeck/issue-87181/tuple-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1256530643fdd4762de8de5a47041fc2cf700828/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr?ref=1256530643fdd4762de8de5a47041fc2cf700828", "patch": "@@ -6,8 +6,8 @@ LL |     thing.bar.0;\n    |\n help: use parentheses to instantiate this tuple struct\n    |\n-LL |     (thing.bar)(_, _).0;\n-   |     +         +++++++\n+LL |     (thing.bar)(/* char */, /* u16 */).0;\n+   |     +         ++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}]}