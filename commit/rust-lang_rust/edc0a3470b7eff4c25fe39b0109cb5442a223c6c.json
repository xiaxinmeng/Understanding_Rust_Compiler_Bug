{"sha": "edc0a3470b7eff4c25fe39b0109cb5442a223c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzBhMzQ3MGI3ZWZmNGMyNWZlMzliMDEwOWNiNTQ0MmEyMjNjNmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-19T12:54:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-19T12:54:18Z"}, "message": "Implement simd_insert", "tree": {"sha": "11a7b667ef0df336759ada597b86c60f79b2f50f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a7b667ef0df336759ada597b86c60f79b2f50f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc0a3470b7eff4c25fe39b0109cb5442a223c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc0a3470b7eff4c25fe39b0109cb5442a223c6c", "html_url": "https://github.com/rust-lang/rust/commit/edc0a3470b7eff4c25fe39b0109cb5442a223c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc0a3470b7eff4c25fe39b0109cb5442a223c6c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b211be054ff4922e0edc2b989b1745fa4d59c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b211be054ff4922e0edc2b989b1745fa4d59c68", "html_url": "https://github.com/rust-lang/rust/commit/0b211be054ff4922e0edc2b989b1745fa4d59c68"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "dee228a7d108c05f1307b235c065ee4144705818", "filename": "example/std_example.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edc0a3470b7eff4c25fe39b0109cb5442a223c6c/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc0a3470b7eff4c25fe39b0109cb5442a223c6c/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=edc0a3470b7eff4c25fe39b0109cb5442a223c6c", "patch": "@@ -146,6 +146,7 @@ unsafe fn test_simd() {\n \n     // FIXME(#666) implement `#[rustc_arg_required_const(..)]` support\n     //test_mm_extract_epi8();\n+    //test_mm_insert_epi16();\n \n     let mask1 = _mm_movemask_epi8(dbg!(_mm_setr_epi8(255u8 as i8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));\n     assert_eq!(mask1, 1);\n@@ -279,6 +280,14 @@ unsafe fn test_mm_extract_epi8() {\n     assert_eq!(r2, 3);\n }\n \n+#[target_feature(enable = \"sse2\")]\n+unsafe fn test_mm_insert_epi16() {\n+    let a = _mm_setr_epi16(0, 1, 2, 3, 4, 5, 6, 7);\n+    let r = _mm_insert_epi16(a, 9, 0);\n+    let e = _mm_setr_epi16(9, 1, 2, 3, 4, 5, 6, 7);\n+    assert_eq_m128i(r, e);\n+}\n+\n fn test_checked_mul() {\n     let u: Option<u8> = u8::from_str_radix(\"1000\", 10).ok();\n     assert_eq!(u, None);"}, {"sha": "92fd00f049c4c580770f2b2f1d138882677ec26e", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/edc0a3470b7eff4c25fe39b0109cb5442a223c6c/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc0a3470b7eff4c25fe39b0109cb5442a223c6c/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=edc0a3470b7eff4c25fe39b0109cb5442a223c6c", "patch": "@@ -33,6 +33,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n \n+        // FIXME support float comparisons\n         simd_eq, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n             simd_cmp!(fx, Equal(x, y) -> ret);\n@@ -113,7 +114,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             }\n         };\n \n-        simd_insert, (c base, o idx, v _val) {\n+        simd_insert, (c base, o idx, c val) {\n             // FIXME validate\n             let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n                 idx_const\n@@ -132,13 +133,9 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n             }\n \n-            // FIXME implement this\n-            fx.tcx.sess.span_warn(\n-                fx.mir.span,\n-                \"`simd_insert` is not yet implemented. Calling this function will panic.\",\n-            );\n-            let val = crate::trap::trap_unimplemented_ret_value(fx, ret.layout(), \"`simd_insert` is not yet implemented\");\n-            ret.write_cvalue(fx, val);\n+            ret.write_cvalue(fx, base);\n+            let ret_lane = ret.place_field(fx, mir::Field::new(idx.try_into().unwrap()));\n+            ret_lane.write_cvalue(fx, val);\n         };\n \n         simd_extract, (c v, o idx) {\n@@ -233,5 +230,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n             simd_flt_binop!(fx, fmax(x, y) -> ret);\n         };\n+\n+        // simd_fabs\n+        // simd_saturating_add\n+        // simd_bitmask\n+        // simd_select\n+        // simd_reduce_add_{,un}ordered\n+        // simd_rem\n     }\n }"}]}