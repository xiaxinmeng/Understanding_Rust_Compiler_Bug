{"sha": "77fb6a0f32408925f212d1fb877e900f9736840d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZmI2YTBmMzI0MDg5MjVmMjEyZDFmYjg3N2U5MDBmOTczNjg0MGQ=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2021-03-11T17:49:27Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2021-03-11T17:54:08Z"}, "message": "fix: check before index into generated patterns", "tree": {"sha": "19e2532adaa41bea640c382ede285d2eea545c5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e2532adaa41bea640c382ede285d2eea545c5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77fb6a0f32408925f212d1fb877e900f9736840d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77fb6a0f32408925f212d1fb877e900f9736840d", "html_url": "https://github.com/rust-lang/rust/commit/77fb6a0f32408925f212d1fb877e900f9736840d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77fb6a0f32408925f212d1fb877e900f9736840d/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd2796aae18a7e7a736346f344daa56fae37c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2796aae18a7e7a736346f344daa56fae37c41", "html_url": "https://github.com/rust-lang/rust/commit/2fd2796aae18a7e7a736346f344daa56fae37c41"}], "stats": {"total": 105, "additions": 25, "deletions": 80}, "files": [{"sha": "8c740a7ec155a3406f6ba5be9634a31a8f0c6b3c", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77fb6a0f32408925f212d1fb877e900f9736840d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fb6a0f32408925f212d1fb877e900f9736840d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=77fb6a0f32408925f212d1fb877e900f9736840d", "patch": "@@ -1343,7 +1343,9 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         match &mut fields {\n             Fields::Vec(pats) => {\n                 for (i, pat) in new_pats {\n-                    pats[i] = pat\n+                    if let Some(p) = pats.get_mut(i) {\n+                        *p = pat;\n+                    }\n                 }\n             }\n             Fields::Filtered { fields, .. } => {"}, {"sha": "f8ca916caf127b5f13c248478f9b50183437b017", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/77fb6a0f32408925f212d1fb877e900f9736840d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fb6a0f32408925f212d1fb877e900f9736840d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=77fb6a0f32408925f212d1fb877e900f9736840d", "patch": "@@ -1176,7 +1176,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut no_field_errors = true;\n \n         let mut inexistent_fields = vec![];\n-        let mut invisible_fields = vec![];\n         // Typecheck each field.\n         for field in fields {\n             let span = field.span;\n@@ -1192,12 +1191,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     field_map\n                         .get(&ident)\n                         .map(|(i, f)| {\n-                            if !f\n-                                .vis\n-                                .is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n-                            {\n-                                invisible_fields.push(field.ident);\n-                            }\n                             self.write_field_index(field.hir_id, *i);\n                             self.tcx.check_stability(f.did, Some(pat.hir_id), span);\n                             self.field_ty(span, f, substs)\n@@ -1288,13 +1281,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.error_tuple_variant_index_shorthand(variant, pat, fields)\n                 {\n                     err.emit();\n-                } else if !invisible_fields.is_empty() {\n-                    let mut err = self.error_invisible_fields(\n-                        adt.variant_descr(),\n-                        &invisible_fields,\n-                        variant,\n-                    );\n-                    err.emit();\n                 }\n             }\n         }\n@@ -1373,41 +1359,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         .emit();\n     }\n \n-    fn error_invisible_fields(\n-        &self,\n-        kind_name: &str,\n-        invisible_fields: &[Ident],\n-        variant: &ty::VariantDef,\n-    ) -> DiagnosticBuilder<'tcx> {\n-        let spans = invisible_fields.iter().map(|ident| ident.span).collect::<Vec<_>>();\n-        let (field_names, t) = if invisible_fields.len() == 1 {\n-            (format!(\"a field named `{}`\", invisible_fields[0]), \"is\")\n-        } else {\n-            (\n-                format!(\n-                    \"fields named {}\",\n-                    invisible_fields\n-                        .iter()\n-                        .map(|ident| format!(\"`{}`\", ident))\n-                        .collect::<Vec<String>>()\n-                        .join(\", \")\n-                ),\n-                \"are\",\n-            )\n-        };\n-        let err = struct_span_err!(\n-            self.tcx.sess,\n-            spans,\n-            E0603,\n-            \"cannot match on {} of {} `{}`, which {} not accessible in current scope\",\n-            field_names,\n-            kind_name,\n-            self.tcx.def_path_str(variant.def_id),\n-            t\n-        );\n-        err\n-    }\n-\n     fn error_inexistent_fields(\n         &self,\n         kind_name: &str,"}, {"sha": "763ab952738b7a27a122dad3691b45ee934dd4df", "filename": "src/test/ui/structs/struct-variant-privacy-xc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.rs?ref=77fb6a0f32408925f212d1fb877e900f9736840d", "patch": "@@ -4,8 +4,7 @@ extern crate struct_variant_privacy;\n fn f(b: struct_variant_privacy::Bar) {\n     //~^ ERROR enum `Bar` is private\n     match b {\n-        struct_variant_privacy::Bar::Baz { a: _a } => {} //~ ERROR cannot match on\n-                                                         //~^ ERROR enum `Bar` is private\n+        struct_variant_privacy::Bar::Baz { a: _a } => {} //~ ERROR enum `Bar` is private\n     }\n }\n "}, {"sha": "1c1caaef8b79d17d8bc50506de192ede47d24ac1", "filename": "src/test/ui/structs/struct-variant-privacy-xc.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr?ref=77fb6a0f32408925f212d1fb877e900f9736840d", "patch": "@@ -22,12 +22,6 @@ note: the enum `Bar` is defined here\n LL | enum Bar {\n    | ^^^^^^^^\n \n-error[E0603]: cannot match on a field named `a` of variant `struct_variant_privacy::Bar::Baz`, which is not accessible in current scope\n-  --> $DIR/struct-variant-privacy-xc.rs:7:44\n-   |\n-LL |         struct_variant_privacy::Bar::Baz { a: _a } => {}\n-   |                                            ^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0603`."}, {"sha": "fcdf9a22baf4b5cd9f92419bde0bfcacf8844050", "filename": "src/test/ui/structs/struct-variant-privacy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.rs?ref=77fb6a0f32408925f212d1fb877e900f9736840d", "patch": "@@ -8,7 +8,6 @@ fn f(b: foo::Bar) {\n     //~^ ERROR enum `Bar` is private\n     match b {\n         foo::Bar::Baz { a: _a } => {} //~ ERROR enum `Bar` is private\n-                                      //~^ ERROR cannot match on\n     }\n }\n "}, {"sha": "eafd26c716f116645776149ef8fe61f2e516853a", "filename": "src/test/ui/structs/struct-variant-privacy.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr?ref=77fb6a0f32408925f212d1fb877e900f9736840d", "patch": "@@ -22,12 +22,6 @@ note: the enum `Bar` is defined here\n LL |     enum Bar {\n    |     ^^^^^^^^\n \n-error[E0603]: cannot match on a field named `a` of variant `Bar::Baz`, which is not accessible in current scope\n-  --> $DIR/struct-variant-privacy.rs:10:25\n-   |\n-LL |         foo::Bar::Baz { a: _a } => {}\n-   |                         ^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0603`."}, {"sha": "326273bfe9229a1950c27e58140ba47ebbc39129", "filename": "src/test/ui/typeck/issue-82772.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.rs?ref=77fb6a0f32408925f212d1fb877e900f9736840d", "patch": "@@ -1,13 +1,13 @@\n // edition:2018\n \n fn main() {\n-    use a::LocalModPrivateStruct;\n-    let Box { 1: _, .. }: Box<()>; //~ ERROR cannot match on\n-    let LocalModPrivateStruct { 1: _, .. } = LocalModPrivateStruct::default();\n-    //~^ ERROR cannot match on\n+    use a::ModPrivateStruct;\n+    let Box { 0: _, .. }: Box<()>; //~ ERROR field `0` of\n+    let Box { 1: _, .. }: Box<()>; //~ ERROR field `1` of\n+    let ModPrivateStruct { 1: _, .. } = ModPrivateStruct::default(); //~ ERROR field `1` of\n }\n \n mod a {\n     #[derive(Default)]\n-    pub struct LocalModPrivateStruct(u8, u8);\n+    pub struct ModPrivateStruct(u8, u8);\n }"}, {"sha": "321143cb9683d79e92b1f544f485c931673cdce7", "filename": "src/test/ui/typeck/issue-82772.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77fb6a0f32408925f212d1fb877e900f9736840d/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-82772.stderr?ref=77fb6a0f32408925f212d1fb877e900f9736840d", "patch": "@@ -1,15 +1,21 @@\n-error[E0603]: cannot match on a field named `1` of struct `Box`, which is not accessible in current scope\n+error[E0451]: field `0` of struct `Box` is private\n   --> $DIR/issue-82772.rs:5:15\n    |\n+LL |     let Box { 0: _, .. }: Box<()>;\n+   |               ^^^^ private field\n+\n+error[E0451]: field `1` of struct `Box` is private\n+  --> $DIR/issue-82772.rs:6:15\n+   |\n LL |     let Box { 1: _, .. }: Box<()>;\n-   |               ^\n+   |               ^^^^ private field\n \n-error[E0603]: cannot match on a field named `1` of struct `LocalModPrivateStruct`, which is not accessible in current scope\n-  --> $DIR/issue-82772.rs:6:33\n+error[E0451]: field `1` of struct `ModPrivateStruct` is private\n+  --> $DIR/issue-82772.rs:7:28\n    |\n-LL |     let LocalModPrivateStruct { 1: _, .. } = LocalModPrivateStruct::default();\n-   |                                 ^\n+LL |     let ModPrivateStruct { 1: _, .. } = ModPrivateStruct::default();\n+   |                            ^^^^ private field\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0603`.\n+For more information about this error, try `rustc --explain E0451`."}]}