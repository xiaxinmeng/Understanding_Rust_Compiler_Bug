{"sha": "976541884f674127c33e08aaaf15c99b735701f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NjU0MTg4NGY2NzQxMjdjMzNlMDhhYWFmMTVjOTliNzM1NzAxZjc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-23T19:54:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-25T19:05:18Z"}, "message": "Tweak `self` arg not as first argument of a method diagnostic\n\nMention that `self` is only valid on \"associated functions\"\n```\nerror: unexpected `self` argument in function\n  --> $DIR/self-in-function-arg.rs:1:15\n   |\nLL | fn foo(x:i32, self: i32) -> i32 { self }\n   |               ^^^^ not valid as function argument\n   |\n   = note: `self` is only valid as the first argument of an associated function\n```\n\nWhen it is a method, mention it must be first\n```\nerror: unexpected `self` argument in function\n  --> $DIR/trait-fn.rs:4:20\n   |\nLL |     fn c(foo: u32, self) {}\n   |                    ^^^^ must be the first associated function argument\n```", "tree": {"sha": "acfe20160fcdaf2ec06d02af7c77f8b67993c537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acfe20160fcdaf2ec06d02af7c77f8b67993c537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976541884f674127c33e08aaaf15c99b735701f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976541884f674127c33e08aaaf15c99b735701f7", "html_url": "https://github.com/rust-lang/rust/commit/976541884f674127c33e08aaaf15c99b735701f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976541884f674127c33e08aaaf15c99b735701f7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f5786a324c40b2d8b2d0df98456e48fb45d30c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f5786a324c40b2d8b2d0df98456e48fb45d30c", "html_url": "https://github.com/rust-lang/rust/commit/02f5786a324c40b2d8b2d0df98456e48fb45d30c"}], "stats": {"total": 123, "additions": 80, "deletions": 43}, "files": [{"sha": "11f8eba033e9edc9aa5f80b593925ee1341a5bd6", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -594,6 +594,51 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    crate fn recover_arg_parse(&mut self) -> PResult<'a, (P<ast::Pat>, P<ast::Ty>)> {\n+        let pat = self.parse_pat(Some(\"argument name\"))?;\n+        self.expect(&token::Colon)?;\n+        let ty = self.parse_ty()?;\n+\n+        let mut err = self.diagnostic().struct_span_err_with_code(\n+            pat.span,\n+            \"patterns aren't allowed in methods without bodies\",\n+            DiagnosticId::Error(\"E0642\".into()),\n+        );\n+        err.span_suggestion_short(\n+            pat.span,\n+            \"give this argument a name or use an underscore to ignore it\",\n+            \"_\".to_owned(),\n+            Applicability::MachineApplicable,\n+        );\n+        err.emit();\n+\n+        // Pretend the pattern is `_`, to avoid duplicate errors from AST validation.\n+        let pat = P(Pat {\n+            node: PatKind::Wild,\n+            span: pat.span,\n+            id: ast::DUMMY_NODE_ID\n+        });\n+        Ok((pat, ty))\n+    }\n+\n+    crate fn recover_bad_self_arg(\n+        &mut self,\n+        mut arg: ast::Arg,\n+        is_trait_item: bool,\n+    ) -> PResult<'a, ast::Arg> {\n+        let sp = arg.pat.span;\n+        arg.ty.node = TyKind::Err;\n+        let mut err = self.struct_span_err(sp, \"unexpected `self` argument in function\");\n+        if is_trait_item {\n+            err.span_label(sp, \"must be the first associated function argument\");\n+        } else {\n+            err.span_label(sp, \"not valid as function argument\");\n+            err.note(\"`self` is only valid as the first argument of an associated function\");\n+        }\n+        err.emit();\n+        Ok(arg)\n+    }\n+\n     crate fn consume_block(&mut self, delim: token::DelimToken) {\n         let mut brace_depth = 0;\n         loop {"}, {"sha": "b4b45fd9eff2bffc03de6ffcbce4352a83974f28", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -1805,50 +1805,23 @@ impl<'a> Parser<'a> {\n     }\n \n     /// This version of parse arg doesn't necessarily require identifier names.\n-    fn parse_arg_general(&mut self, require_name: bool, is_trait_item: bool,\n-                         allow_c_variadic: bool) -> PResult<'a, Arg> {\n-        if let Ok(Some(_)) = self.parse_self_arg() {\n-            let mut err = self.struct_span_err(self.prev_span,\n-                \"unexpected `self` argument in function\");\n-            err.span_label(self.prev_span,\n-                \"`self` is only valid as the first argument of an associated function\");\n-            return Err(err);\n+    fn parse_arg_general(\n+        &mut self,\n+        require_name: bool,\n+        is_trait_item: bool,\n+        allow_c_variadic: bool,\n+    ) -> PResult<'a, Arg> {\n+        if let Ok(Some(arg)) = self.parse_self_arg() {\n+            return self.recover_bad_self_arg(arg, is_trait_item);\n         }\n \n         let (pat, ty) = if require_name || self.is_named_argument() {\n-            debug!(\"parse_arg_general parse_pat (require_name:{})\",\n-                   require_name);\n+            debug!(\"parse_arg_general parse_pat (require_name:{})\", require_name);\n             self.eat_incorrect_doc_comment(\"method arguments\");\n             let pat = self.parse_pat(Some(\"argument name\"))?;\n \n             if let Err(mut err) = self.expect(&token::Colon) {\n-                // If we find a pattern followed by an identifier, it could be an (incorrect)\n-                // C-style parameter declaration.\n-                if self.check_ident() && self.look_ahead(1, |t| {\n-                    *t == token::Comma || *t == token::CloseDelim(token::Paren)\n-                }) {\n-                    let ident = self.parse_ident().unwrap();\n-                    let span = pat.span.with_hi(ident.span.hi());\n-\n-                    err.span_suggestion(\n-                        span,\n-                        \"declare the type after the parameter binding\",\n-                        String::from(\"<identifier>: <type>\"),\n-                        Applicability::HasPlaceholders,\n-                    );\n-                } else if require_name && is_trait_item {\n-                    if let PatKind::Ident(_, ident, _) = pat.node {\n-                        err.span_suggestion(\n-                            pat.span,\n-                            \"explicitly ignore parameter\",\n-                            format!(\"_: {}\", ident),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n-\n-                    err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n-                }\n-\n+                self.argument_without_type(&mut err, pat, require_name, is_trait_item);\n                 return Err(err);\n             }\n "}, {"sha": "95a2b69c05cc61529e97786cc9f0c30b545e8863", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -1,5 +1,6 @@\n fn a(&self) { }\n //~^ ERROR unexpected `self` argument in function\n+//~| NOTE not valid as function argument\n //~| NOTE `self` is only valid as the first argument of an associated function\n \n fn main() { }"}, {"sha": "ba1092ca3770c333f467e02907d0a6c1bc086f5f", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -1,8 +1,10 @@\n error: unexpected `self` argument in function\n-  --> $DIR/bare-fn-start.rs:1:7\n+  --> $DIR/bare-fn-start.rs:1:6\n    |\n LL | fn a(&self) { }\n-   |       ^^^^ `self` is only valid as the first argument of an associated function\n+   |      ^^^^^ not valid as function argument\n+   |\n+   = note: `self` is only valid as the first argument of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "43c87fb79d88dc214950de57c4a9327fe11a4133", "filename": "src/test/ui/invalid-self-argument/bare-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -1,5 +1,6 @@\n fn b(foo: u32, &mut self) { }\n //~^ ERROR unexpected `self` argument in function\n+//~| NOTE not valid as function argument\n //~| NOTE `self` is only valid as the first argument of an associated function\n \n fn main() { }"}, {"sha": "16a2d4b4b3737fdabc001664bfbe524e2e21b405", "filename": "src/test/ui/invalid-self-argument/bare-fn.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -1,8 +1,10 @@\n error: unexpected `self` argument in function\n-  --> $DIR/bare-fn.rs:1:21\n+  --> $DIR/bare-fn.rs:1:16\n    |\n LL | fn b(foo: u32, &mut self) { }\n-   |                     ^^^^ `self` is only valid as the first argument of an associated function\n+   |                ^^^^^^^^^ not valid as function argument\n+   |\n+   = note: `self` is only valid as the first argument of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "620a06db557b3d6c5ad88a13dfb74bd3d2ffcb46", "filename": "src/test/ui/invalid-self-argument/trait-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -3,7 +3,7 @@ struct Foo {}\n impl Foo {\n     fn c(foo: u32, self) {}\n     //~^ ERROR unexpected `self` argument in function\n-    //~| NOTE `self` is only valid as the first argument of an associated function\n+    //~| NOTE must be the first associated function argument\n \n     fn good(&mut self, foo: u32) {}\n }"}, {"sha": "00fedea3fead5cf25e3071a57d7861f66e33614d", "filename": "src/test/ui/invalid-self-argument/trait-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -2,7 +2,7 @@ error: unexpected `self` argument in function\n   --> $DIR/trait-fn.rs:4:20\n    |\n LL |     fn c(foo: u32, self) {}\n-   |                    ^^^^ `self` is only valid as the first argument of an associated function\n+   |                    ^^^^ must be the first associated function argument\n \n error: aborting due to previous error\n "}, {"sha": "502c2c0b74a5969fe0eb7770162c7fa97c25d79c", "filename": "src/test/ui/parser/self-in-function-arg.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.rs?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -0,0 +1,3 @@\n+fn foo(x:i32, self: i32) -> i32 { self } //~ ERROR unexpected `self` argument in function\n+\n+fn main() {}"}, {"sha": "e1fc10306cc086e38dc27ad019f4fe9a999f55c6", "filename": "src/test/ui/parser/self-in-function-arg.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/976541884f674127c33e08aaaf15c99b735701f7/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.stderr?ref=976541884f674127c33e08aaaf15c99b735701f7", "patch": "@@ -0,0 +1,10 @@\n+error: unexpected `self` argument in function\n+  --> $DIR/self-in-function-arg.rs:1:15\n+   |\n+LL | fn foo(x:i32, self: i32) -> i32 { self }\n+   |               ^^^^ not valid as function argument\n+   |\n+   = note: `self` is only valid as the first argument of an associated function\n+\n+error: aborting due to previous error\n+"}]}