{"sha": "bea7862d9470c33b7b3e21a552a991e3b948aa29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTc4NjJkOTQ3MGMzM2I3YjNlMjFhNTUyYTk5MWUzYjk0OGFhMjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-15T23:54:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-15T23:54:29Z"}, "message": "Correctly reset steals when hitting MAX_STEALS\n\nThe previous code erroneously assumed that 'steals > cnt' was always true, but\nthat was a false assumption. The code was altered to decrement steals to a\nminimum of 0 instead of taking all of cnt into account.\n\nI didn't include the exact test from #12295 because it could run for quite\nawhile, and instead set the threshold for MAX_STEALS to much lower during\ntesting. I found that this triggered the old bug quite frequently when running\nwithout this fix.\n\nCloses #12295", "tree": {"sha": "3ef409c5db1b192e4a79be224c2cc4600c896ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ef409c5db1b192e4a79be224c2cc4600c896ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea7862d9470c33b7b3e21a552a991e3b948aa29", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea7862d9470c33b7b3e21a552a991e3b948aa29", "html_url": "https://github.com/rust-lang/rust/commit/bea7862d9470c33b7b3e21a552a991e3b948aa29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea7862d9470c33b7b3e21a552a991e3b948aa29/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "836ffb528883225e036e506b3a8f112d81e096ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/836ffb528883225e036e506b3a8f112d81e096ff", "html_url": "https://github.com/rust-lang/rust/commit/836ffb528883225e036e506b3a8f112d81e096ff"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "8517c98ec32fc533f2fe6a4a328990217be410e0", "filename": "src/libstd/comm/shared.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea7862d9470c33b7b3e21a552a991e3b948aa29/src%2Flibstd%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea7862d9470c33b7b3e21a552a991e3b948aa29/src%2Flibstd%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fshared.rs?ref=bea7862d9470c33b7b3e21a552a991e3b948aa29", "patch": "@@ -18,6 +18,7 @@\n /// module. You'll also note that the implementation of the shared and stream\n /// channels are quite similar, and this is no coincidence!\n \n+use cmp;\n use int;\n use iter::Iterator;\n use kinds::Send;\n@@ -35,6 +36,9 @@ use mpsc = sync::mpsc_queue;\n \n static DISCONNECTED: int = int::MIN;\n static FUDGE: int = 1024;\n+#[cfg(test)]\n+static MAX_STEALS: int = 5;\n+#[cfg(not(test))]\n static MAX_STEALS: int = 1 << 20;\n \n pub struct Packet<T> {\n@@ -307,7 +311,11 @@ impl<T: Send> Packet<T> {\n                         DISCONNECTED => {\n                             self.cnt.store(DISCONNECTED, atomics::SeqCst);\n                         }\n-                        n => { self.steals -= n; }\n+                        n => {\n+                            let m = cmp::min(n, self.steals);\n+                            self.steals -= m;\n+                            self.cnt.fetch_add(n - m, atomics::SeqCst);\n+                        }\n                     }\n                     assert!(self.steals >= 0);\n                 }"}, {"sha": "f1988dbbeeda55595408278952bc6654a829047c", "filename": "src/libstd/comm/stream.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bea7862d9470c33b7b3e21a552a991e3b948aa29/src%2Flibstd%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea7862d9470c33b7b3e21a552a991e3b948aa29/src%2Flibstd%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fstream.rs?ref=bea7862d9470c33b7b3e21a552a991e3b948aa29", "patch": "@@ -17,6 +17,7 @@\n /// High level implementation details can be found in the comment of the parent\n /// module.\n \n+use cmp;\n use comm::Port;\n use int;\n use iter::Iterator;\n@@ -32,6 +33,9 @@ use sync::atomics;\n use vec::OwnedVector;\n \n static DISCONNECTED: int = int::MIN;\n+#[cfg(test)]\n+static MAX_STEALS: int = 5;\n+#[cfg(not(test))]\n static MAX_STEALS: int = 1 << 20;\n \n pub struct Packet<T> {\n@@ -198,19 +202,28 @@ impl<T: Send> Packet<T> {\n     pub fn try_recv(&mut self) -> Result<T, Failure<T>> {\n         match self.queue.pop() {\n             // If we stole some data, record to that effect (this will be\n-            // factored into cnt later on). Note that we don't allow steals to\n-            // grow without bound in order to prevent eventual overflow of\n-            // either steals or cnt as an overflow would have catastrophic\n-            // results. Also note that we don't unconditionally set steals to 0\n-            // because it can be true that steals > cnt.\n+            // factored into cnt later on).\n+            //\n+            // Note that we don't allow steals to grow without bound in order to\n+            // prevent eventual overflow of either steals or cnt as an overflow\n+            // would have catastrophic results. Sometimes, steals > cnt, but\n+            // other times cnt > steals, so we don't know the relation between\n+            // steals and cnt. This code path is executed only rarely, so we do\n+            // a pretty slow operation, of swapping 0 into cnt, taking steals\n+            // down as much as possible (without going negative), and then\n+            // adding back in whatever we couldn't factor into steals.\n             Some(data) => {\n                 self.steals += 1;\n                 if self.steals > MAX_STEALS {\n                     match self.cnt.swap(0, atomics::SeqCst) {\n                         DISCONNECTED => {\n                             self.cnt.store(DISCONNECTED, atomics::SeqCst);\n                         }\n-                        n => { self.steals -= n; }\n+                        n => {\n+                            let m = cmp::min(n, self.steals);\n+                            self.steals -= m;\n+                            self.cnt.fetch_add(n - m, atomics::SeqCst);\n+                        }\n                     }\n                     assert!(self.steals >= 0);\n                 }"}]}