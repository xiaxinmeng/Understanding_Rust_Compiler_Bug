{"sha": "e810f750a2a407f9caeabba39059578e844add14", "node_id": "C_kwDOAAsO6NoAKGU4MTBmNzUwYTJhNDA3ZjljYWVhYmJhMzkwNTk1NzhlODQ0YWRkMTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T14:59:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T14:59:12Z"}, "message": "Auto merge of #97548 - Dylan-DPC:rollup-9x0va1d, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #97494 (Use Box::new() instead of box syntax in library tests)\n - #97499 (Remove \"sys isn't exported yet\" phrase)\n - #97504 (Ensure source file present when calculating max line number)\n - #97519 (Re-add help_on_error for download-ci-llvm)\n - #97531 (Note pattern mismatch coming from `for` loop desugaring)\n - #97545 (Reword safety comments in core/hash/sip.rs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3253be7f2752beafad84adaf246bc4e3f8f71c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3253be7f2752beafad84adaf246bc4e3f8f71c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e810f750a2a407f9caeabba39059578e844add14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e810f750a2a407f9caeabba39059578e844add14", "html_url": "https://github.com/rust-lang/rust/commit/e810f750a2a407f9caeabba39059578e844add14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e810f750a2a407f9caeabba39059578e844add14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "946a88a989acdcc3b0d05a666eaac0db414ec2cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/946a88a989acdcc3b0d05a666eaac0db414ec2cd", "html_url": "https://github.com/rust-lang/rust/commit/946a88a989acdcc3b0d05a666eaac0db414ec2cd"}, {"sha": "a352ad500de8ba7c8cc71fbbe81da00b44f33ac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a352ad500de8ba7c8cc71fbbe81da00b44f33ac2", "html_url": "https://github.com/rust-lang/rust/commit/a352ad500de8ba7c8cc71fbbe81da00b44f33ac2"}], "stats": {"total": 324, "additions": 219, "deletions": 105}, "files": [{"sha": "3fdc8cf8ac25fb9cd30da027b104e59844f92164", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -1261,16 +1261,23 @@ impl EmitterWriter {\n             return 0;\n         };\n \n+        let will_be_emitted = |span: Span| {\n+            !span.is_dummy() && {\n+                let file = sm.lookup_source_file(span.hi());\n+                sm.ensure_source_file_source_present(file)\n+            }\n+        };\n+\n         let mut max = 0;\n         for primary_span in msp.primary_spans() {\n-            if !primary_span.is_dummy() {\n+            if will_be_emitted(*primary_span) {\n                 let hi = sm.lookup_char_pos(primary_span.hi());\n                 max = (hi.line).max(max);\n             }\n         }\n         if !self.short_message {\n             for span_label in msp.span_labels() {\n-                if !span_label.span.is_dummy() {\n+                if will_be_emitted(span_label.span) {\n                     let hi = sm.lookup_char_pos(span_label.span.hi());\n                     max = (hi.line).max(max);\n                 }"}, {"sha": "e156930cc89fdd8f7d5ce9dfd63c9b714dddcc5c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -609,7 +609,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if !matches!(ty.kind(), ty::Infer(ty::InferTy::TyVar(_) | ty::InferTy::FreshTy(_)))\n                 {\n                     // don't show type `_`\n-                    err.span_label(span, format!(\"this expression has type `{}`\", ty));\n+                    if span.desugaring_kind() == Some(DesugaringKind::ForLoop)\n+                    && let ty::Adt(def, substs) = ty.kind()\n+                    && Some(def.did()) == self.tcx.get_diagnostic_item(sym::Option)\n+                    {\n+                        err.span_label(span, format!(\"this is an iterator with items of type `{}`\", substs.type_at(0)));\n+                    } else {\n+                        err.span_label(span, format!(\"this expression has type `{}`\", ty));\n+                    }\n                 }\n                 if let Some(ty::error::ExpectedFound { found, .. }) = exp_found\n                     && ty.is_box() && ty.boxed_ty() == found"}, {"sha": "7d560964d85be7108d99a51e50a3a180ae684858", "filename": "library/alloc/src/alloc/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -25,6 +25,6 @@ fn allocate_zeroed() {\n #[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn alloc_owned_small(b: &mut Bencher) {\n     b.iter(|| {\n-        let _: Box<_> = box 10;\n+        let _: Box<_> = Box::new(10);\n     })\n }"}, {"sha": "5a05215aeeddfcd6b0e2f34c4c95f5a9b3b0714c", "filename": "library/alloc/src/collections/binary_heap/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -183,22 +183,22 @@ fn test_push() {\n \n #[test]\n fn test_push_unique() {\n-    let mut heap = BinaryHeap::<Box<_>>::from(vec![box 2, box 4, box 9]);\n+    let mut heap = BinaryHeap::<Box<_>>::from(vec![Box::new(2), Box::new(4), Box::new(9)]);\n     assert_eq!(heap.len(), 3);\n     assert!(**heap.peek().unwrap() == 9);\n-    heap.push(box 11);\n+    heap.push(Box::new(11));\n     assert_eq!(heap.len(), 4);\n     assert!(**heap.peek().unwrap() == 11);\n-    heap.push(box 5);\n+    heap.push(Box::new(5));\n     assert_eq!(heap.len(), 5);\n     assert!(**heap.peek().unwrap() == 11);\n-    heap.push(box 27);\n+    heap.push(Box::new(27));\n     assert_eq!(heap.len(), 6);\n     assert!(**heap.peek().unwrap() == 27);\n-    heap.push(box 3);\n+    heap.push(Box::new(3));\n     assert_eq!(heap.len(), 7);\n     assert!(**heap.peek().unwrap() == 27);\n-    heap.push(box 103);\n+    heap.push(Box::new(103));\n     assert_eq!(heap.len(), 8);\n     assert!(**heap.peek().unwrap() == 103);\n }"}, {"sha": "e21c8aa3bd536d1fa4ecfda330f82df66f8985e1", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -791,7 +791,7 @@ impl<T> LinkedList<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_front(&mut self, elt: T) {\n-        self.push_front_node(box Node::new(elt));\n+        self.push_front_node(Box::new(Node::new(elt)));\n     }\n \n     /// Removes the first element and returns it, or `None` if the list is\n@@ -834,7 +834,7 @@ impl<T> LinkedList<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_back(&mut self, elt: T) {\n-        self.push_back_node(box Node::new(elt));\n+        self.push_back_node(Box::new(Node::new(elt)));\n     }\n \n     /// Removes the last element from a list and returns it, or `None` if"}, {"sha": "f8fbfa1bfbc87bdc171dfc785415779dedb2809e", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -12,20 +12,20 @@ fn test_basic() {\n     assert_eq!(m.pop_front(), None);\n     assert_eq!(m.pop_back(), None);\n     assert_eq!(m.pop_front(), None);\n-    m.push_front(box 1);\n-    assert_eq!(m.pop_front(), Some(box 1));\n-    m.push_back(box 2);\n-    m.push_back(box 3);\n+    m.push_front(Box::new(1));\n+    assert_eq!(m.pop_front(), Some(Box::new(1)));\n+    m.push_back(Box::new(2));\n+    m.push_back(Box::new(3));\n     assert_eq!(m.len(), 2);\n-    assert_eq!(m.pop_front(), Some(box 2));\n-    assert_eq!(m.pop_front(), Some(box 3));\n+    assert_eq!(m.pop_front(), Some(Box::new(2)));\n+    assert_eq!(m.pop_front(), Some(Box::new(3)));\n     assert_eq!(m.len(), 0);\n     assert_eq!(m.pop_front(), None);\n-    m.push_back(box 1);\n-    m.push_back(box 3);\n-    m.push_back(box 5);\n-    m.push_back(box 7);\n-    assert_eq!(m.pop_front(), Some(box 1));\n+    m.push_back(Box::new(1));\n+    m.push_back(Box::new(3));\n+    m.push_back(Box::new(5));\n+    m.push_back(Box::new(7));\n+    assert_eq!(m.pop_front(), Some(Box::new(1)));\n \n     let mut n = LinkedList::new();\n     n.push_front(2);"}, {"sha": "2b3736019ba40ee05627208d74604a33228d46c8", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -369,7 +369,8 @@ impl<T> Rc<T> {\n         // if the weak pointer is stored inside the strong one.\n         unsafe {\n             Self::from_inner(\n-                Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),\n+                Box::leak(Box::new(RcBox { strong: Cell::new(1), weak: Cell::new(1), value }))\n+                    .into(),\n             )\n         }\n     }\n@@ -433,11 +434,11 @@ impl<T> Rc<T> {\n     {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n-        let uninit_ptr: NonNull<_> = Box::leak(box RcBox {\n+        let uninit_ptr: NonNull<_> = Box::leak(Box::new(RcBox {\n             strong: Cell::new(0),\n             weak: Cell::new(1),\n             value: mem::MaybeUninit::<T>::uninit(),\n-        })\n+        }))\n         .into();\n \n         let init_ptr: NonNull<RcBox<T>> = uninit_ptr.cast();"}, {"sha": "32433cfbdcff6f8ed173e9f81bc15e007fe0a8d7", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -32,7 +32,7 @@ fn test_simple_clone() {\n \n #[test]\n fn test_destructor() {\n-    let x: Rc<Box<_>> = Rc::new(box 5);\n+    let x: Rc<Box<_>> = Rc::new(Box::new(5));\n     assert_eq!(**x, 5);\n }\n \n@@ -153,7 +153,7 @@ fn try_unwrap() {\n \n #[test]\n fn into_from_raw() {\n-    let x = Rc::new(box \"hello\");\n+    let x = Rc::new(Box::new(\"hello\"));\n     let y = x.clone();\n \n     let x_ptr = Rc::into_raw(x);\n@@ -192,7 +192,7 @@ fn test_into_from_raw_unsized() {\n \n #[test]\n fn into_from_weak_raw() {\n-    let x = Rc::new(box \"hello\");\n+    let x = Rc::new(Box::new(\"hello\"));\n     let y = Rc::downgrade(&x);\n \n     let y_ptr = Weak::into_raw(y);\n@@ -409,7 +409,7 @@ fn test_clone_from_slice_panic() {\n \n #[test]\n fn test_from_box() {\n-    let b: Box<u32> = box 123;\n+    let b: Box<u32> = Box::new(123);\n     let r: Rc<u32> = Rc::from(b);\n \n     assert_eq!(*r, 123);\n@@ -438,7 +438,7 @@ fn test_from_box_trait() {\n     use std::fmt::Display;\n     use std::string::ToString;\n \n-    let b: Box<dyn Display> = box 123;\n+    let b: Box<dyn Display> = Box::new(123);\n     let r: Rc<dyn Display> = Rc::from(b);\n \n     assert_eq!(r.to_string(), \"123\");\n@@ -448,7 +448,7 @@ fn test_from_box_trait() {\n fn test_from_box_trait_zero_sized() {\n     use std::fmt::Debug;\n \n-    let b: Box<dyn Debug> = box ();\n+    let b: Box<dyn Debug> = Box::new(());\n     let r: Rc<dyn Debug> = Rc::from(b);\n \n     assert_eq!(format!(\"{r:?}\"), \"()\");"}, {"sha": "d5ed3fd18c3b87f43b7191785e814e5a3abe509f", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -343,11 +343,11 @@ impl<T> Arc<T> {\n     pub fn new(data: T) -> Arc<T> {\n         // Start the weak pointer count as 1 which is the weak pointer that's\n         // held by all the strong pointers (kinda), see std/rc.rs for more info\n-        let x: Box<_> = box ArcInner {\n+        let x: Box<_> = Box::new(ArcInner {\n             strong: atomic::AtomicUsize::new(1),\n             weak: atomic::AtomicUsize::new(1),\n             data,\n-        };\n+        });\n         unsafe { Self::from_inner(Box::leak(x).into()) }\n     }\n \n@@ -411,11 +411,11 @@ impl<T> Arc<T> {\n     {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n-        let uninit_ptr: NonNull<_> = Box::leak(box ArcInner {\n+        let uninit_ptr: NonNull<_> = Box::leak(Box::new(ArcInner {\n             strong: atomic::AtomicUsize::new(0),\n             weak: atomic::AtomicUsize::new(1),\n             data: mem::MaybeUninit::<T>::uninit(),\n-        })\n+        }))\n         .into();\n         let init_ptr: NonNull<ArcInner<T>> = uninit_ptr.cast();\n "}, {"sha": "202d0e7f02057df1162e867982c4d6d09409d393", "filename": "library/alloc/src/sync/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -103,7 +103,7 @@ fn try_unwrap() {\n \n #[test]\n fn into_from_raw() {\n-    let x = Arc::new(box \"hello\");\n+    let x = Arc::new(Box::new(\"hello\"));\n     let y = x.clone();\n \n     let x_ptr = Arc::into_raw(x);\n@@ -142,7 +142,7 @@ fn test_into_from_raw_unsized() {\n \n #[test]\n fn into_from_weak_raw() {\n-    let x = Arc::new(box \"hello\");\n+    let x = Arc::new(Box::new(\"hello\"));\n     let y = Arc::downgrade(&x);\n \n     let y_ptr = Weak::into_raw(y);\n@@ -467,7 +467,7 @@ fn test_clone_from_slice_panic() {\n \n #[test]\n fn test_from_box() {\n-    let b: Box<u32> = box 123;\n+    let b: Box<u32> = Box::new(123);\n     let r: Arc<u32> = Arc::from(b);\n \n     assert_eq!(*r, 123);\n@@ -496,7 +496,7 @@ fn test_from_box_trait() {\n     use std::fmt::Display;\n     use std::string::ToString;\n \n-    let b: Box<dyn Display> = box 123;\n+    let b: Box<dyn Display> = Box::new(123);\n     let r: Arc<dyn Display> = Arc::from(b);\n \n     assert_eq!(r.to_string(), \"123\");\n@@ -506,7 +506,7 @@ fn test_from_box_trait() {\n fn test_from_box_trait_zero_sized() {\n     use std::fmt::Debug;\n \n-    let b: Box<dyn Debug> = box ();\n+    let b: Box<dyn Debug> = Box::new(());\n     let r: Arc<dyn Debug> = Arc::from(b);\n \n     assert_eq!(format!(\"{r:?}\"), \"()\");"}, {"sha": "21f894343be097394aee870a5b71f83fec2f64ab", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -268,9 +268,9 @@ fn test_swap_remove_fail() {\n fn test_swap_remove_noncopyable() {\n     // Tests that we don't accidentally run destructors twice.\n     let mut v: Vec<Box<_>> = Vec::new();\n-    v.push(box 0);\n-    v.push(box 0);\n-    v.push(box 0);\n+    v.push(Box::new(0));\n+    v.push(Box::new(0));\n+    v.push(Box::new(0));\n     let mut _e = v.swap_remove(0);\n     assert_eq!(v.len(), 2);\n     _e = v.swap_remove(1);\n@@ -296,7 +296,7 @@ fn test_push() {\n \n #[test]\n fn test_truncate() {\n-    let mut v: Vec<Box<_>> = vec![box 6, box 5, box 4];\n+    let mut v: Vec<Box<_>> = vec![Box::new(6), Box::new(5), Box::new(4)];\n     v.truncate(1);\n     let v = v;\n     assert_eq!(v.len(), 1);\n@@ -306,7 +306,7 @@ fn test_truncate() {\n \n #[test]\n fn test_clear() {\n-    let mut v: Vec<Box<_>> = vec![box 6, box 5, box 4];\n+    let mut v: Vec<Box<_>> = vec![Box::new(6), Box::new(5), Box::new(4)];\n     v.clear();\n     assert_eq!(v.len(), 0);\n     // If the unsafe block didn't drop things properly, we blow up here.\n@@ -1516,14 +1516,14 @@ fn test_mut_last() {\n \n #[test]\n fn test_to_vec() {\n-    let xs: Box<_> = box [1, 2, 3];\n+    let xs: Box<_> = Box::new([1, 2, 3]);\n     let ys = xs.to_vec();\n     assert_eq!(ys, [1, 2, 3]);\n }\n \n #[test]\n fn test_in_place_iterator_specialization() {\n-    let src: Box<[usize]> = box [1, 2, 3];\n+    let src: Box<[usize]> = Box::new([1, 2, 3]);\n     let src_ptr = src.as_ptr();\n     let sink: Box<_> = src.into_vec().into_iter().map(std::convert::identity).collect();\n     let sink_ptr = sink.as_ptr();"}, {"sha": "cc768c73c0e0391abf597e8a6f1a0ae9a9147d9b", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -266,8 +266,8 @@ fn test_clone() {\n #[test]\n fn test_clone_from() {\n     let mut v = vec![];\n-    let three: Vec<Box<_>> = vec![box 1, box 2, box 3];\n-    let two: Vec<Box<_>> = vec![box 4, box 5];\n+    let three: Vec<Box<_>> = vec![Box::new(1), Box::new(2), Box::new(3)];\n+    let two: Vec<Box<_>> = vec![Box::new(4), Box::new(5)];\n     // zero, long\n     v.clone_from(&three);\n     assert_eq!(v, three);\n@@ -407,11 +407,11 @@ fn test_dedup_by() {\n \n #[test]\n fn test_dedup_unique() {\n-    let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];\n+    let mut v0: Vec<Box<_>> = vec![Box::new(1), Box::new(1), Box::new(2), Box::new(3)];\n     v0.dedup();\n-    let mut v1: Vec<Box<_>> = vec![box 1, box 2, box 2, box 3];\n+    let mut v1: Vec<Box<_>> = vec![Box::new(1), Box::new(2), Box::new(2), Box::new(3)];\n     v1.dedup();\n-    let mut v2: Vec<Box<_>> = vec![box 1, box 2, box 3, box 3];\n+    let mut v2: Vec<Box<_>> = vec![Box::new(1), Box::new(2), Box::new(3), Box::new(3)];\n     v2.dedup();\n     // If the boxed pointers were leaked or otherwise misused, valgrind\n     // and/or rt should raise errors."}, {"sha": "97e32ca77db82d1d71b6e526688eeefc9f6ab82e", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -96,7 +96,8 @@ macro_rules! compress {\n /// `copy_nonoverlapping` to let the compiler generate the most efficient way\n /// to load it from a possibly unaligned address.\n ///\n-/// Unsafe because: unchecked indexing at i..i+size_of(int_ty)\n+/// Safety: this performs unchecked indexing of `$buf` at\n+/// `$i..$i+size_of::<$int_ty>()`, so that must be in-bounds.\n macro_rules! load_int_le {\n     ($buf:expr, $i:expr, $int_ty:ident) => {{\n         debug_assert!($i + mem::size_of::<$int_ty>() <= $buf.len());\n@@ -114,7 +115,8 @@ macro_rules! load_int_le {\n /// `copy_nonoverlapping` calls that occur (via `load_int_le!`) all have fixed\n /// sizes and avoid calling `memcpy`, which is good for speed.\n ///\n-/// Unsafe because: unchecked indexing at start..start+len\n+/// Safety: this performs unchecked indexing of `buf` at `start..start+len`, so\n+/// that must be in-bounds.\n #[inline]\n unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n     debug_assert!(len < 8);"}, {"sha": "0dffd137565b3dfb34123c04cdf3c78b3c547672", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -24,8 +24,11 @@ fn any_referenced() {\n \n #[test]\n fn any_owning() {\n-    let (a, b, c) =\n-        (box 5_usize as Box<dyn Any>, box TEST as Box<dyn Any>, box Test as Box<dyn Any>);\n+    let (a, b, c) = (\n+        Box::new(5_usize) as Box<dyn Any>,\n+        Box::new(TEST) as Box<dyn Any>,\n+        Box::new(Test) as Box<dyn Any>,\n+    );\n \n     assert!(a.is::<usize>());\n     assert!(!b.is::<usize>());\n@@ -58,7 +61,7 @@ fn any_downcast_ref() {\n #[test]\n fn any_downcast_mut() {\n     let mut a = 5_usize;\n-    let mut b: Box<_> = box 7_usize;\n+    let mut b: Box<_> = Box::new(7_usize);\n \n     let a_r = &mut a as &mut dyn Any;\n     let tmp: &mut usize = &mut *b;"}, {"sha": "33ca9f2c6a3a1ef0995101c28e622d4c72bdf941", "filename": "library/core/tests/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fclone.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -8,8 +8,8 @@ fn test_borrowed_clone() {\n \n #[test]\n fn test_clone_from() {\n-    let a = box 5;\n-    let mut b = box 10;\n+    let a = Box::new(5);\n+    let mut b = Box::new(10);\n     b.clone_from(&a);\n     assert_eq!(*b, 5);\n }"}, {"sha": "00ef4a6e6a987bd6f6108ef1c98b01ea2864cfef", "filename": "library/core/tests/iter/traits/double_ended.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -78,7 +78,8 @@ fn test_rev_rposition() {\n #[test]\n #[should_panic]\n fn test_rposition_panic() {\n-    let v: [(Box<_>, Box<_>); 4] = [(box 0, box 0), (box 0, box 0), (box 0, box 0), (box 0, box 0)];\n+    let u = (Box::new(0), Box::new(0));\n+    let v: [(Box<_>, Box<_>); 4] = [u.clone(), u.clone(), u.clone(), u];\n     let mut i = 0;\n     v.iter().rposition(|_elt| {\n         if i == 2 {"}, {"sha": "7e9d7d27101802b66e40d1ba1a8e9f10019aa7fc", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -3,7 +3,6 @@\n #![feature(array_methods)]\n #![feature(array_windows)]\n #![feature(bench_black_box)]\n-#![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(const_assume)]\n #![feature(const_black_box)]"}, {"sha": "9f5e537dcefc0a8109af28ff4290e111163f214e", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -7,7 +7,7 @@ use core::option::*;\n #[test]\n fn test_get_ptr() {\n     unsafe {\n-        let x: Box<_> = box 0;\n+        let x: Box<_> = Box::new(0);\n         let addr_x: *const isize = mem::transmute(&*x);\n         let opt = Some(x);\n         let y = opt.unwrap();\n@@ -315,7 +315,7 @@ fn test_collect() {\n \n     // test that it does not take more elements than it needs\n     let mut functions: [Box<dyn Fn() -> Option<()>>; 3] =\n-        [box || Some(()), box || None, box || panic!()];\n+        [Box::new(|| Some(())), Box::new(|| None), Box::new(|| panic!())];\n \n     let v: Option<Vec<()>> = functions.iter_mut().map(|f| (*f)()).collect();\n "}, {"sha": "103e8cc3a96facada05da2bd5f1afba39c288613", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -69,7 +69,7 @@ fn test_collect() {\n \n     // test that it does not take more elements than it needs\n     let mut functions: [Box<dyn Fn() -> Result<(), isize>>; 3] =\n-        [box || Ok(()), box || Err(1), box || panic!()];\n+        [Box::new(|| Ok(())), Box::new(|| Err(1)), Box::new(|| panic!())];\n \n     let v: Result<Vec<()>, isize> = functions.iter_mut().map(|f| (*f)()).collect();\n     assert!(v == Err(1));"}, {"sha": "8d7877bcad35d078108a042e2a8a102a76b334cd", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -17,10 +17,10 @@ fn test_debug_error() {\n     let msg = error_string(code);\n     let kind = decode_error_kind(code);\n     let err = Error {\n-        repr: Repr::new_custom(box Custom {\n+        repr: Repr::new_custom(Box::new(Custom {\n             kind: ErrorKind::InvalidInput,\n-            error: box Error { repr: super::Repr::new_os(code) },\n-        }),\n+            error: Box::new(Error { repr: super::Repr::new_os(code) }),\n+        })),\n     };\n     let expected = format!(\n         \"Custom {{ \\"}, {"sha": "9f4f31ed051455ba3cf79aec04fa8b7972941ca5", "filename": "library/std/src/sync/mpsc/mpsc_queue/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -6,8 +6,8 @@ use crate::thread;\n #[test]\n fn test_full() {\n     let q: Queue<Box<_>> = Queue::new();\n-    q.push(box 1);\n-    q.push(box 2);\n+    q.push(Box::new(1));\n+    q.push(Box::new(2));\n }\n \n #[test]"}, {"sha": "467ef3dbdcbbd687d8d76cfb67fdde6f6e40e867", "filename": "library/std/src/sync/mpsc/spsc_queue/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -47,8 +47,8 @@ fn peek() {\n fn drop_full() {\n     unsafe {\n         let q: Queue<Box<_>> = Queue::with_additions(0, (), ());\n-        q.push(box 1);\n-        q.push(box 2);\n+        q.push(Box::new(1));\n+        q.push(Box::new(2));\n     }\n }\n "}, {"sha": "e58649bab6e420bbf8915a6275ae35af7155e02e", "filename": "library/std/src/sync/mpsc/sync_tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -20,7 +20,7 @@ fn smoke() {\n #[test]\n fn drop_full() {\n     let (tx, _rx) = sync_channel::<Box<isize>>(1);\n-    tx.send(box 1).unwrap();\n+    tx.send(Box::new(1)).unwrap();\n }\n \n #[test]\n@@ -238,7 +238,7 @@ fn oneshot_single_thread_send_port_close() {\n     // Testing that the sender cleans up the payload if receiver is closed\n     let (tx, rx) = sync_channel::<Box<i32>>(0);\n     drop(rx);\n-    assert!(tx.send(box 0).is_err());\n+    assert!(tx.send(Box::new(0)).is_err());\n }\n \n #[test]\n@@ -257,7 +257,7 @@ fn oneshot_single_thread_recv_chan_close() {\n #[test]\n fn oneshot_single_thread_send_then_recv() {\n     let (tx, rx) = sync_channel::<Box<i32>>(1);\n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n     assert!(*rx.recv().unwrap() == 10);\n }\n \n@@ -333,7 +333,7 @@ fn oneshot_multi_task_recv_then_send() {\n         assert!(*rx.recv().unwrap() == 10);\n     });\n \n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n }\n \n #[test]\n@@ -398,7 +398,7 @@ fn oneshot_multi_thread_send_recv_stress() {\n     for _ in 0..stress_factor() {\n         let (tx, rx) = sync_channel::<Box<i32>>(0);\n         let _t = thread::spawn(move || {\n-            tx.send(box 10).unwrap();\n+            tx.send(Box::new(10)).unwrap();\n         });\n         assert!(*rx.recv().unwrap() == 10);\n     }\n@@ -418,7 +418,7 @@ fn stream_send_recv_stress() {\n             }\n \n             thread::spawn(move || {\n-                tx.send(box i).unwrap();\n+                tx.send(Box::new(i)).unwrap();\n                 send(tx, i + 1);\n             });\n         }"}, {"sha": "4deb3e596157757f27d7948cb22ff5ee958a697f", "filename": "library/std/src/sync/mpsc/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -20,15 +20,15 @@ fn smoke() {\n #[test]\n fn drop_full() {\n     let (tx, _rx) = channel::<Box<isize>>();\n-    tx.send(box 1).unwrap();\n+    tx.send(Box::new(1)).unwrap();\n }\n \n #[test]\n fn drop_full_shared() {\n     let (tx, _rx) = channel::<Box<isize>>();\n     drop(tx.clone());\n     drop(tx.clone());\n-    tx.send(box 1).unwrap();\n+    tx.send(Box::new(1)).unwrap();\n }\n \n #[test]\n@@ -229,7 +229,7 @@ fn oneshot_single_thread_send_port_close() {\n     // Testing that the sender cleans up the payload if receiver is closed\n     let (tx, rx) = channel::<Box<i32>>();\n     drop(rx);\n-    assert!(tx.send(box 0).is_err());\n+    assert!(tx.send(Box::new(0)).is_err());\n }\n \n #[test]\n@@ -248,7 +248,7 @@ fn oneshot_single_thread_recv_chan_close() {\n #[test]\n fn oneshot_single_thread_send_then_recv() {\n     let (tx, rx) = channel::<Box<i32>>();\n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n     assert!(*rx.recv().unwrap() == 10);\n }\n \n@@ -309,7 +309,7 @@ fn oneshot_multi_task_recv_then_send() {\n         assert!(*rx.recv().unwrap() == 10);\n     });\n \n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n }\n \n #[test]\n@@ -374,7 +374,7 @@ fn oneshot_multi_thread_send_recv_stress() {\n     for _ in 0..stress_factor() {\n         let (tx, rx) = channel::<Box<isize>>();\n         let _t = thread::spawn(move || {\n-            tx.send(box 10).unwrap();\n+            tx.send(Box::new(10)).unwrap();\n         });\n         assert!(*rx.recv().unwrap() == 10);\n     }\n@@ -394,7 +394,7 @@ fn stream_send_recv_stress() {\n             }\n \n             thread::spawn(move || {\n-                tx.send(box i).unwrap();\n+                tx.send(Box::new(i)).unwrap();\n                 send(tx, i + 1);\n             });\n         }"}, {"sha": "76840ce74dd604ea87899807f3f96fdb2b98adeb", "filename": "library/std/src/sys/unix/locks/pthread_mutex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -16,7 +16,6 @@ pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {}\n \n-#[allow(dead_code)] // sys isn't exported yet\n impl Mutex {\n     pub const fn new() -> Mutex {\n         // Might be moved to a different address, so it is better to avoid"}, {"sha": "1d13a7171b0355f5734dbbdc7120e6fbf58d7781", "filename": "library/std/src/sys_common/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_dtor.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -11,7 +11,7 @@\n //! or implement something more efficient.\n \n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n-#![allow(dead_code)] // sys isn't exported yet\n+#![allow(dead_code)]\n \n use crate::ptr;\n use crate::sys_common::thread_local_key::StaticKey;"}, {"sha": "70beebe86d20bb89eb211b0dffc4e45fe56d3162", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -46,7 +46,7 @@\n \n #![allow(non_camel_case_types)]\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n-#![allow(dead_code)] // sys isn't exported yet\n+#![allow(dead_code)]\n \n #[cfg(test)]\n mod tests;"}, {"sha": "5b8309cf5d273f8a4af4b4c1069ece9fec6525a7", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -127,7 +127,7 @@ where\n {\n     let (tx, rx) = channel();\n \n-    let x: Box<_> = box 1;\n+    let x: Box<_> = Box::new(1);\n     let x_in_parent = (&*x) as *const i32 as usize;\n \n     spawnfn(Box::new(move || {\n@@ -219,7 +219,7 @@ fn test_try_panic_any_message_owned_str() {\n #[test]\n fn test_try_panic_any_message_any() {\n     match thread::spawn(move || {\n-        panic_any(box 413u16 as Box<dyn Any + Send>);\n+        panic_any(Box::new(413u16) as Box<dyn Any + Send>);\n     })\n     .join()\n     {"}, {"sha": "a997c4f63abb8ace72ea3265a18486f8159c58bd", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -63,7 +63,7 @@ def support_xz():\n     except tarfile.CompressionError:\n         return False\n \n-def get(base, url, path, checksums, verbose=False, do_verify=True, help_on_error=None):\n+def get(base, url, path, checksums, verbose=False, do_verify=True):\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n         temp_path = temp_file.name\n \n@@ -86,7 +86,7 @@ def get(base, url, path, checksums, verbose=False, do_verify=True, help_on_error\n                         print(\"ignoring already-download file\",\n                             path, \"due to failed verification\")\n                     os.unlink(path)\n-        download(temp_path, \"{}/{}\".format(base, url), True, verbose, help_on_error=help_on_error)\n+        download(temp_path, \"{}/{}\".format(base, url), True, verbose)\n         if do_verify and not verify(temp_path, sha256, verbose):\n             raise RuntimeError(\"failed verification\")\n         if verbose:\n@@ -99,17 +99,17 @@ def get(base, url, path, checksums, verbose=False, do_verify=True, help_on_error\n             os.unlink(temp_path)\n \n \n-def download(path, url, probably_big, verbose, help_on_error=None):\n+def download(path, url, probably_big, verbose):\n     for _ in range(0, 4):\n         try:\n-            _download(path, url, probably_big, verbose, True, help_on_error=help_on_error)\n+            _download(path, url, probably_big, verbose, True)\n             return\n         except RuntimeError:\n             print(\"\\nspurious failure, trying again\")\n-    _download(path, url, probably_big, verbose, False, help_on_error=help_on_error)\n+    _download(path, url, probably_big, verbose, False)\n \n \n-def _download(path, url, probably_big, verbose, exception, help_on_error=None):\n+def _download(path, url, probably_big, verbose, exception):\n     # Try to use curl (potentially available on win32\n     #    https://devblogs.microsoft.com/commandline/tar-and-curl-come-to-windows/)\n     # If an error occurs:\n@@ -134,7 +134,7 @@ def _download(path, url, probably_big, verbose, exception, help_on_error=None):\n              \"--retry\", \"3\", \"-Sf\", \"-o\", path, url],\n             verbose=verbose,\n             exception=True, # Will raise RuntimeError on failure\n-            help_on_error=help_on_error)\n+        )\n     except (subprocess.CalledProcessError, OSError, RuntimeError):\n         # see http://serverfault.com/questions/301128/how-to-download\n         if platform_is_win32:\n@@ -186,7 +186,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     shutil.rmtree(os.path.join(dst, fname))\n \n \n-def run(args, verbose=False, exception=False, is_bootstrap=False, help_on_error=None, **kwargs):\n+def run(args, verbose=False, exception=False, is_bootstrap=False, **kwargs):\n     \"\"\"Run a child program in a new process\"\"\"\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n@@ -197,8 +197,6 @@ def run(args, verbose=False, exception=False, is_bootstrap=False, help_on_error=\n     code = ret.wait()\n     if code != 0:\n         err = \"failed to run: \" + ' '.join(args)\n-        if help_on_error is not None:\n-            err += \"\\n\" + help_on_error\n         if verbose or exception:\n             raise RuntimeError(err)\n         # For most failures, we definitely do want to print this error, or the user will have no"}, {"sha": "17c2d1c79ec5c4cdbb75a8383ebbf9a21a63692c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -869,15 +869,21 @@ impl<'a> Builder<'a> {\n         self.try_run(patchelf.arg(fname));\n     }\n \n-    pub(crate) fn download_component(&self, base: &str, url: &str, dest_path: &Path) {\n+    pub(crate) fn download_component(\n+        &self,\n+        base: &str,\n+        url: &str,\n+        dest_path: &Path,\n+        help_on_error: &str,\n+    ) {\n         // Use a temporary file in case we crash while downloading, to avoid a corrupt download in cache/.\n         let tempfile = self.tempdir().join(dest_path.file_name().unwrap());\n         // FIXME: support `do_verify` (only really needed for nightly rustfmt)\n-        self.download_with_retries(&tempfile, &format!(\"{}/{}\", base, url));\n+        self.download_with_retries(&tempfile, &format!(\"{}/{}\", base, url), help_on_error);\n         t!(std::fs::rename(&tempfile, dest_path));\n     }\n \n-    fn download_with_retries(&self, tempfile: &Path, url: &str) {\n+    fn download_with_retries(&self, tempfile: &Path, url: &str, help_on_error: &str) {\n         println!(\"downloading {}\", url);\n         // Try curl. If that fails and we are on windows, fallback to PowerShell.\n         let mut curl = Command::new(\"curl\");\n@@ -914,6 +920,9 @@ impl<'a> Builder<'a> {\n                     println!(\"\\nspurious failure, trying again\");\n                 }\n             }\n+            if !help_on_error.is_empty() {\n+                eprintln!(\"{}\", help_on_error);\n+            }\n             std::process::exit(1);\n         }\n     }"}, {"sha": "8e94fc7c4bea5512395bbe24e1bbd9ef302ab29b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -1491,7 +1491,7 @@ fn download_component(builder: &Builder<'_>, filename: String, prefix: &str, com\n     let url = format!(\"rustc-builds/{commit}\");\n     let tarball = rustc_cache.join(&filename);\n     if !tarball.exists() {\n-        builder.download_component(base, &format!(\"{url}/{filename}\"), &tarball);\n+        builder.download_component(base, &format!(\"{url}/{filename}\"), &tarball, \"\");\n     }\n     let bin_root = builder.out.join(builder.config.build.triple).join(\"ci-rustc\");\n     builder.unpack(&tarball, &bin_root, prefix)"}, {"sha": "a41079333b1aabbe3bd39f33c466c00f89f82d3c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -179,7 +179,15 @@ fn download_ci_llvm(builder: &Builder<'_>, llvm_sha: &str) {\n     let filename = format!(\"rust-dev-nightly-{}.tar.xz\", builder.build.build.triple);\n     let tarball = rustc_cache.join(&filename);\n     if !tarball.exists() {\n-        builder.download_component(base, &format!(\"{}/{}\", url, filename), &tarball);\n+        let help_on_error = \"error: failed to download llvm from ci\\n\n+\\nhelp: old builds get deleted after a certain time\n+\\nhelp: if trying to compile an old commit of rustc, disable `download-ci-llvm` in config.toml:\n+\\n\n+\\n[llvm]\n+\\ndownload-ci-llvm = false\n+\\n\n+\";\n+        builder.download_component(base, &format!(\"{}/{}\", url, filename), &tarball, help_on_error);\n     }\n     let llvm_root = builder.config.ci_llvm_root();\n     builder.unpack(&tarball, &llvm_root, \"rust-dev\");"}, {"sha": "9a56a399b9b563e5107f7a580cafd98c40d68848", "filename": "src/test/ui/pattern/for-loop-bad-item.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -0,0 +1,20 @@\n+struct Qux(i32);\n+\n+fn bad() {\n+    let mut map = std::collections::HashMap::new();\n+    map.insert(('a', 'b'), ('c', 'd'));\n+\n+    for ((_, _), (&mut c, _)) in &mut map {\n+    //~^ ERROR mismatched types\n+        if c == 'e' {}\n+    }\n+}\n+\n+fn bad2() {\n+    for Some(Qux(_)) | None in [Some(\"\"), None] {\n+    //~^ ERROR mismatched types\n+        todo!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9410e4da8d2af41594c140ee6404216c1ecbd154", "filename": "src/test/ui/pattern/for-loop-bad-item.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/for-loop-bad-item.rs:7:19\n+   |\n+LL |     for ((_, _), (&mut c, _)) in &mut map {\n+   |                   ^^^^^^         -------- this is an iterator with items of type `(&(char, char), &mut (char, char))`\n+   |                   |\n+   |                   expected `char`, found `&mut _`\n+   |                   help: you can probably remove the explicit borrow: `c`\n+   |\n+   = note:           expected type `char`\n+           found mutable reference `&mut _`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/for-loop-bad-item.rs:14:14\n+   |\n+LL |     for Some(Qux(_)) | None in [Some(\"\"), None] {\n+   |              ^^^^^^            ---------------- this is an iterator with items of type `Option<&str>`\n+   |              |\n+   |              expected `str`, found struct `Qux`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3e85559caf923422ec53d3eb2bc4ecfc4810ae56", "filename": "src/test/ui/span/issue-71363.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/xyz -Z ui-testing=no\n+// only-x86_64-unknown-linux-gnu\n+//---^ Limiting target as the above unstable flags don't play well on some environment.\n+\n+struct MyError;\n+impl std::error::Error for MyError {}\n+//~^ ERROR: `MyError` doesn't implement `std::fmt::Display`\n+//~| ERROR: `MyError` doesn't implement `Debug`\n+\n+fn main() {}"}, {"sha": "d54f21752b89aa4fe553662d171496e68501cdc9", "filename": "src/test/ui/span/issue-71363.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e810f750a2a407f9caeabba39059578e844add14/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e810f750a2a407f9caeabba39059578e844add14/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr?ref=e810f750a2a407f9caeabba39059578e844add14", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n+ --> $DIR/issue-71363.rs:6:6\n+  |\n+6 | impl std::error::Error for MyError {}\n+  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted with the default formatter\n+  |\n+  = help: the trait `std::fmt::Display` is not implemented for `MyError`\n+  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `std::error::Error`\n+\n+error[E0277]: `MyError` doesn't implement `Debug`\n+ --> $DIR/issue-71363.rs:6:6\n+  |\n+6 | impl std::error::Error for MyError {}\n+  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted using `{:?}`\n+  |\n+  = help: the trait `Debug` is not implemented for `MyError`\n+  = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\n+note: required by a bound in `std::error::Error`\n+help: consider annotating `MyError` with `#[derive(Debug)]`\n+  |\n+5 | #[derive(Debug)]\n+  |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}