{"sha": "a6aebdaedd4abb95b040c9cd09cfdb6b9b940789", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YWViZGFlZGQ0YWJiOTViMDQwYzljZDA5Y2ZkYjZiOWI5NDA3ODk=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-09-08T01:26:19Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-09-08T01:41:08Z"}, "message": "Started work on a framework for writing runtime tests, added some simple test cases.", "tree": {"sha": "c143ba57b7ac8cf5a93f6871abb8a496f50e6fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c143ba57b7ac8cf5a93f6871abb8a496f50e6fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789", "html_url": "https://github.com/rust-lang/rust/commit/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5375b3916095970bc87675969b2fb00d9bebcfd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5375b3916095970bc87675969b2fb00d9bebcfd8", "html_url": "https://github.com/rust-lang/rust/commit/5375b3916095970bc87675969b2fb00d9bebcfd8"}], "stats": {"total": 188, "additions": 186, "deletions": 2}, "files": [{"sha": "827eb2eee5aef2d2ce98a3d03124bce2653ffbe9", "filename": "src/Makefile", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=a6aebdaedd4abb95b040c9cd09cfdb6b9b940789", "patch": "@@ -269,7 +269,9 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/isaac/randport.cpp \\\n               rt/rust_srv.cpp \\\n               rt/rust_kernel.cpp \\\n-              rt/memory_region.cpp\n+              rt/memory_region.cpp \\\n+              rt/test/rust_test_harness.cpp \\\n+              rt/test/rust_test_util.cpp\n \n RUNTIME_HDR := rt/globals.h \\\n                rt/rust.h \\\n@@ -294,7 +296,9 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/rust_srv.h \\\n                rt/rust_kernel.h \\\n                rt/memory_region.h \\\n-               rt/memory.h\n+               rt/memory.h \\\n+               rt/test/rust_test_harness.h \\\n+               rt/test/rust_test_util.h\n \n RUNTIME_INCS := -Irt/isaac -Irt/uthash\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=$(CFG_OBJ_SUFFIX))"}, {"sha": "c33e170ebe3d768a33c5f49da9723426cad4a396", "filename": "src/rt/test/rust_test_harness.cpp", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2Frt%2Ftest%2Frust_test_harness.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2Frt%2Ftest%2Frust_test_harness.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.cpp?ref=a6aebdaedd4abb95b040c9cd09cfdb6b9b940789", "patch": "@@ -0,0 +1,37 @@\n+#include \"../rust_internal.h\"\n+\n+bool\n+rust_test::run() {\n+    return false;\n+}\n+\n+const char *\n+rust_test::name() {\n+    return \"untitled\";\n+}\n+\n+rust_test_suite::rust_test_suite() {\n+    tests.append(new rust_array_list_test());\n+    tests.append(new rust_synchronized_indexed_list_test());\n+}\n+\n+rust_test_suite::~rust_test_suite() {\n+\n+}\n+\n+bool\n+rust_test_suite::run() {\n+    bool pass = true;\n+    for (size_t i = 0; i < tests.size(); i++) {\n+        rust_test *test = tests[i];\n+        printf(\"test: %s running ... \\n\", test->name());\n+        if (tests[i]->run() == false) {\n+            printf(\"test: %s FAILED\\n\", test->name());\n+            pass = false;\n+        } else {\n+            printf(\"test: %s PASSED\\n\", test->name());\n+        }\n+    }\n+    return pass;\n+}\n+"}, {"sha": "401015e4508900fe23010baf657cb646667718b2", "filename": "src/rt/test/rust_test_harness.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2Frt%2Ftest%2Frust_test_harness.h", "raw_url": "https://github.com/rust-lang/rust/raw/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2Frt%2Ftest%2Frust_test_harness.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.h?ref=a6aebdaedd4abb95b040c9cd09cfdb6b9b940789", "patch": "@@ -0,0 +1,22 @@\n+#ifndef RUST_TEST_HARNESS_H\n+#define RUST_TEST_HARNESS_H\n+\n+#define CHECK(x) if ((x) == false)                               \\\n+    { printf(\"condition: %s failed at file: %s, line: %d\\n\", #x, \\\n+             __FILE__, __LINE__ ); return false; }\n+\n+class rust_test {\n+public:\n+    virtual bool run();\n+    virtual const char *name();\n+};\n+\n+class rust_test_suite : public rust_test {\n+public:\n+    array_list<rust_test*> tests;\n+    rust_test_suite();\n+    virtual ~rust_test_suite();\n+    bool run();\n+};\n+\n+#endif /* RUST_TEST_HARNESS_H */"}, {"sha": "76bd79906001f5c1c3a331cc0caa4e064f08a41b", "filename": "src/rt/test/rust_test_util.cpp", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2Frt%2Ftest%2Frust_test_util.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2Frt%2Ftest%2Frust_test_util.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.cpp?ref=a6aebdaedd4abb95b040c9cd09cfdb6b9b940789", "patch": "@@ -0,0 +1,78 @@\n+#include \"../rust_internal.h\"\n+\n+#define COUNT 1000\n+#define LARGE_COUNT 100000\n+#define THREADS 10\n+\n+bool\n+rust_array_list_test::run() {\n+    array_list<int> list;\n+\n+    for (int i = 0; i < COUNT; i++) {\n+        list.append(i);\n+    }\n+\n+    for (int i = 0; i < COUNT; i++) {\n+        CHECK (list[i] == i);\n+    }\n+\n+    for (int i = 0; i < COUNT; i++) {\n+        CHECK (list.index_of(i) == i);\n+    }\n+\n+    for (int i = 0; i < COUNT; i++) {\n+        CHECK (list.replace(i, -i));\n+        CHECK (list.replace(-i, i));\n+        CHECK (list.index_of(i) == i);\n+    }\n+\n+    for (int i = COUNT - 1; i >= 0; i--) {\n+        CHECK (list.pop(NULL));\n+    }\n+\n+    return true;\n+}\n+\n+bool\n+rust_synchronized_indexed_list_test::run() {\n+    array_list<worker*> workers;\n+\n+    for (int i = 0; i < THREADS; i++) {\n+        worker *worker =\n+            new rust_synchronized_indexed_list_test::worker(this);\n+        workers.append(worker);\n+    }\n+\n+    for (uint32_t i = 0; i < workers.size(); i++) {\n+        workers[i]->start();\n+    }\n+\n+    while(workers.is_empty() == false) {\n+        worker *worker;\n+        workers.pop(&worker);\n+        worker->join();\n+        delete worker;\n+    }\n+\n+    long long expected_items = LARGE_COUNT * THREADS;\n+\n+    CHECK(list.length() == expected_items);\n+\n+    long long sum = 0;\n+    for (size_t i = 0; i < list.length(); i++) {\n+        sum += list[i]->value;\n+    }\n+\n+    long long expected_sum = LARGE_COUNT;\n+    expected_sum = expected_sum * (expected_sum - 1) / 2 * THREADS;\n+    CHECK (sum == expected_sum);\n+    return true;\n+}\n+\n+void\n+rust_synchronized_indexed_list_test::worker::run() {\n+    for (int i = 0; i < LARGE_COUNT; i++) {\n+        parent->list.append(new indexed_list_element<int>(i));\n+    }\n+    return;\n+}"}, {"sha": "fb8490cb074fd15e7dd42fdfaff600008a1f7f76", "filename": "src/rt/test/rust_test_util.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2Frt%2Ftest%2Frust_test_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/a6aebdaedd4abb95b040c9cd09cfdb6b9b940789/src%2Frt%2Ftest%2Frust_test_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.h?ref=a6aebdaedd4abb95b040c9cd09cfdb6b9b940789", "patch": "@@ -0,0 +1,43 @@\n+#ifndef RUST_TEST_UTIL_H\n+#define RUST_TEST_UTIL_H\n+\n+class rust_test_util : public rust_test {\n+public:\n+\n+};\n+\n+class rust_array_list_test : public rust_test {\n+public:\n+    bool run();\n+    const char *name() {\n+        return \"rust_array_list_test\";\n+    }\n+};\n+\n+\n+class rust_synchronized_indexed_list_test : public rust_test {\n+public:\n+    rust_srv srv;\n+    memory_region region;\n+    synchronized_indexed_list<indexed_list_element<int> > list;\n+\n+    rust_synchronized_indexed_list_test() :\n+        region(&srv, false), list(&region) {\n+        // Nop.\n+    }\n+\n+    class worker : public rust_thread {\n+    public:\n+        rust_synchronized_indexed_list_test *parent;\n+        worker(rust_synchronized_indexed_list_test *parent) : parent(parent) {\n+            // Nop.\n+        }\n+        void run();\n+    };\n+    bool run();\n+    const char *name() {\n+        return \"rust_synchronized_indexed_list_test\";\n+    }\n+};\n+\n+#endif /* RUST_TEST_UTIL_H */"}]}