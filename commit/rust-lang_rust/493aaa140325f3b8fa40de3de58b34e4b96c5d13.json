{"sha": "493aaa140325f3b8fa40de3de58b34e4b96c5d13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5M2FhYTE0MDMyNWYzYjhmYTQwZGUzZGU1OGIzNGU0Yjk2YzVkMTM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-18T22:14:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-18T22:14:55Z"}, "message": "Better visualise control flow for change_annotation_support\"", "tree": {"sha": "c8004af23670749b8ccc8877116ba8d8bde56467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8004af23670749b8ccc8877116ba8d8bde56467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/493aaa140325f3b8fa40de3de58b34e4b96c5d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/493aaa140325f3b8fa40de3de58b34e4b96c5d13", "html_url": "https://github.com/rust-lang/rust/commit/493aaa140325f3b8fa40de3de58b34e4b96c5d13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/493aaa140325f3b8fa40de3de58b34e4b96c5d13/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b501b59eda3cd1f6641c3887212ee3a6bdb97f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b501b59eda3cd1f6641c3887212ee3a6bdb97f6b", "html_url": "https://github.com/rust-lang/rust/commit/b501b59eda3cd1f6641c3887212ee3a6bdb97f6b"}], "stats": {"total": 97, "additions": 46, "deletions": 51}, "files": [{"sha": "fe4d0733dae126e44d70215acfb7cbfef9c6761f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 46, "deletions": 51, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/493aaa140325f3b8fa40de3de58b34e4b96c5d13/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493aaa140325f3b8fa40de3de58b34e4b96c5d13/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=493aaa140325f3b8fa40de3de58b34e4b96c5d13", "patch": "@@ -1,16 +1,16 @@\n //! Conversion of rust-analyzer specific types to lsp_types equivalents.\n use std::{\n-    collections::HashMap,\n+    iter::once,\n     path::{self, Path},\n     sync::atomic::{AtomicU32, Ordering},\n };\n \n use ide::{\n-    Annotation, AnnotationKind, Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind,\n-    CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit, Fold, FoldKind,\n-    Highlight, HlMod, HlOperator, HlPunct, HlRange, HlTag, Indel, InlayHint, InlayKind,\n-    InsertTextFormat, Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable, Severity,\n-    SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange, TextSize,\n+    Annotation, AnnotationKind, Assist, AssistKind, CallInfo, Cancelable, CompletionItem,\n+    CompletionItemKind, CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit,\n+    Fold, FoldKind, Highlight, HlMod, HlOperator, HlPunct, HlRange, HlTag, Indel, InlayHint,\n+    InlayKind, InsertTextFormat, Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable,\n+    Severity, SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange, TextSize,\n };\n use itertools::Itertools;\n use serde_json::to_value;\n@@ -690,8 +690,8 @@ pub(crate) fn goto_definition_response(\n     }\n }\n \n-fn outside_workspace_annotation(snap: &GlobalStateSnapshot) -> Option<String> {\n-    snap.config.change_annotation_support().then(|| String::from(\"OutsideWorkspace\"))\n+fn outside_workspace_annotation_id() -> String {\n+    String::from(\"OutsideWorkspace\")\n }\n \n pub(crate) fn snippet_text_document_edit(\n@@ -702,26 +702,21 @@ pub(crate) fn snippet_text_document_edit(\n ) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n     let text_document = optional_versioned_text_document_identifier(snap, file_id);\n     let line_index = snap.file_line_index(file_id)?;\n-    let outside_workspace_annotation = snap\n-        .analysis\n-        .is_library_file(file_id)?\n-        .then(|| outside_workspace_annotation(snap))\n-        .flatten();\n-    let edits = edit\n-        .into_iter()\n-        .map(|it| {\n-            let mut edit = snippet_text_edit(&line_index, is_snippet, it);\n-            edit.annotation_id = outside_workspace_annotation.clone();\n-            edit\n-        })\n-        .collect();\n+    let mut edits: Vec<_> =\n+        edit.into_iter().map(|it| snippet_text_edit(&line_index, is_snippet, it)).collect();\n+\n+    if snap.analysis.is_library_file(file_id)? && snap.config.change_annotation_support() {\n+        for edit in &mut edits {\n+            edit.annotation_id = Some(outside_workspace_annotation_id())\n+        }\n+    }\n     Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })\n }\n \n pub(crate) fn snippet_text_document_ops(\n     snap: &GlobalStateSnapshot,\n     file_system_edit: FileSystemEdit,\n-) -> Vec<lsp_ext::SnippetDocumentChangeOperation> {\n+) -> Cancelable<Vec<lsp_ext::SnippetDocumentChangeOperation>> {\n     let mut ops = Vec::new();\n     match file_system_edit {\n         FileSystemEdit::CreateFile { dst, initial_contents } => {\n@@ -749,21 +744,19 @@ pub(crate) fn snippet_text_document_ops(\n         FileSystemEdit::MoveFile { src, dst } => {\n             let old_uri = snap.file_id_to_url(src);\n             let new_uri = snap.anchored_path(&dst);\n-            let rename_file = lsp_types::ResourceOp::Rename(lsp_types::RenameFile {\n-                old_uri,\n-                new_uri,\n-                options: None,\n-                annotation_id: snap\n-                    .analysis\n-                    .is_library_file(src)\n-                    .unwrap()\n-                    .then(|| outside_workspace_annotation(snap))\n-                    .flatten(),\n-            });\n-            ops.push(lsp_ext::SnippetDocumentChangeOperation::Op(rename_file))\n+            let mut rename_file =\n+                lsp_types::RenameFile { old_uri, new_uri, options: None, annotation_id: None };\n+            if snap.analysis.is_library_file(src) == Ok(true)\n+                && snap.config.change_annotation_support()\n+            {\n+                rename_file.annotation_id = Some(outside_workspace_annotation_id())\n+            }\n+            ops.push(lsp_ext::SnippetDocumentChangeOperation::Op(lsp_types::ResourceOp::Rename(\n+                rename_file,\n+            )))\n         }\n     }\n-    ops\n+    Ok(ops)\n }\n \n pub(crate) fn snippet_workspace_edit(\n@@ -773,31 +766,33 @@ pub(crate) fn snippet_workspace_edit(\n     let mut document_changes: Vec<lsp_ext::SnippetDocumentChangeOperation> = Vec::new();\n \n     for op in source_change.file_system_edits {\n-        let ops = snippet_text_document_ops(snap, op);\n+        let ops = snippet_text_document_ops(snap, op)?;\n         document_changes.extend_from_slice(&ops);\n     }\n     for (file_id, edit) in source_change.source_file_edits {\n         let edit = snippet_text_document_edit(&snap, source_change.is_snippet, file_id, edit)?;\n         document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit));\n     }\n-    let change_annotations = outside_workspace_annotation(snap).map(|annotation| {\n-        use std::iter::FromIterator;\n-        HashMap::from_iter(Some((\n-            annotation,\n-            lsp_types::ChangeAnnotation {\n-                label: String::from(\"Edit outside of the workspace\"),\n-                needs_confirmation: Some(true),\n-                description: Some(String::from(\n-                    \"This edit lies outside of the workspace and may affect dependencies\",\n-                )),\n-            },\n-        )))\n-    });\n-    let workspace_edit = lsp_ext::SnippetWorkspaceEdit {\n+    let mut workspace_edit = lsp_ext::SnippetWorkspaceEdit {\n         changes: None,\n         document_changes: Some(document_changes),\n-        change_annotations,\n+        change_annotations: None,\n     };\n+    if snap.config.change_annotation_support() {\n+        workspace_edit.change_annotations = Some(\n+            once((\n+                outside_workspace_annotation_id(),\n+                lsp_types::ChangeAnnotation {\n+                    label: String::from(\"Edit outside of the workspace\"),\n+                    needs_confirmation: Some(true),\n+                    description: Some(String::from(\n+                        \"This edit lies outside of the workspace and may affect dependencies\",\n+                    )),\n+                },\n+            ))\n+            .collect(),\n+        )\n+    }\n     Ok(workspace_edit)\n }\n "}]}