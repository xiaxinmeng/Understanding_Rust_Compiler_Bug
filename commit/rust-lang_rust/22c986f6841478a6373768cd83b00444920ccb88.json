{"sha": "22c986f6841478a6373768cd83b00444920ccb88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYzk4NmY2ODQxNDc4YTYzNzM3NjhjZDgzYjAwNDQ0OTIwY2NiODg=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2017-06-18T15:09:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-18T15:09:14Z"}, "message": "Merge pull request #1837 from Manishearth/step_by\n\nReplace `Range::step_by` checking with `Iterator::step_by`", "tree": {"sha": "62b041c9dffaf96fc312006ee972c381c0e9ea27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62b041c9dffaf96fc312006ee972c381c0e9ea27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22c986f6841478a6373768cd83b00444920ccb88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22c986f6841478a6373768cd83b00444920ccb88", "html_url": "https://github.com/rust-lang/rust/commit/22c986f6841478a6373768cd83b00444920ccb88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22c986f6841478a6373768cd83b00444920ccb88/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27727c4afffc2abf1f7453f0641291932fb3f681", "url": "https://api.github.com/repos/rust-lang/rust/commits/27727c4afffc2abf1f7453f0641291932fb3f681", "html_url": "https://github.com/rust-lang/rust/commit/27727c4afffc2abf1f7453f0641291932fb3f681"}, {"sha": "38925a55b7bd2e2f3b9e6c8fe0fde4dc41bb8549", "url": "https://api.github.com/repos/rust-lang/rust/commits/38925a55b7bd2e2f3b9e6c8fe0fde4dc41bb8549", "html_url": "https://github.com/rust-lang/rust/commit/38925a55b7bd2e2f3b9e6c8fe0fde4dc41bb8549"}], "stats": {"total": 101, "additions": 70, "deletions": 31}, "files": [{"sha": "5c11be44c08577ff03b0dd238f0c7522d294ff0c", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22c986f6841478a6373768cd83b00444920ccb88/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/22c986f6841478a6373768cd83b00444920ccb88/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=22c986f6841478a6373768cd83b00444920ccb88", "patch": "@@ -3,6 +3,8 @@ All notable changes to this project will be documented in this file.\n \n ## 0.0.141\n * Rewrite of the `doc_markdown` lint.\n+* Deprecated [`range_step_by_zero`]\n+* New lint: [`iterator_step_by_zero`]\n \n ## 0.0.140 - 2017-06-16\n * Update to *rustc 1.19.0-nightly (258ae6dd9 2017-06-15)*\n@@ -439,6 +441,7 @@ All notable changes to this project will be documented in this file.\n [`iter_next_loop`]: https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop\n [`iter_nth`]: https://github.com/Manishearth/rust-clippy/wiki#iter_nth\n [`iter_skip_next`]: https://github.com/Manishearth/rust-clippy/wiki#iter_skip_next\n+[`iterator_step_by_zero`]: https://github.com/Manishearth/rust-clippy/wiki#iterator_step_by_zero\n [`large_enum_variant`]: https://github.com/Manishearth/rust-clippy/wiki#large_enum_variant\n [`len_without_is_empty`]: https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty\n [`len_zero`]: https://github.com/Manishearth/rust-clippy/wiki#len_zero"}, {"sha": "4b79c11aa387abeffb470a8c3a472d4db5e35a91", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c986f6841478a6373768cd83b00444920ccb88/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/22c986f6841478a6373768cd83b00444920ccb88/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=22c986f6841478a6373768cd83b00444920ccb88", "patch": "@@ -260,6 +260,7 @@ name\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                       | warn    | for-looping over `_.next()` which is probably not intended\n [iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                   | warn    | using `.iter().nth()` on a standard library type with O(1) element access\n [iter_skip_next](https://github.com/Manishearth/rust-clippy/wiki#iter_skip_next)                                       | warn    | using `.skip(x).next()` on an iterator\n+[iterator_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#iterator_step_by_zero)                         | warn    | using `Iterator::step_by(0)`, which produces an infinite iterator\n [large_enum_variant](https://github.com/Manishearth/rust-clippy/wiki#large_enum_variant)                               | warn    | large size difference between variants on an enum\n [len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                           | warn    | traits or impls with a public `len` method but no corresponding `is_empty` method\n [len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                                   | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n@@ -321,7 +322,6 @@ name\n [print_with_newline](https://github.com/Manishearth/rust-clippy/wiki#print_with_newline)                               | warn    | using `print!()` with a format string that ends in a newline\n [ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                                     | warn    | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n [pub_enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#pub_enum_variant_names)                       | allow   | enums where all variants share a prefix/postfix\n-[range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                               | warn    | using `Range::step_by(0)`, which produces an infinite iterator\n [range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                               | warn    | zipping iterator with a range when `enumerate()` would do\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                                 | warn    | redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n [redundant_closure_call](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure_call)                       | warn    | throwaway closures called in the expression they are defined"}, {"sha": "0c40823cd06fd62b11718106c96b08971bfb4f22", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22c986f6841478a6373768cd83b00444920ccb88/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c986f6841478a6373768cd83b00444920ccb88/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=22c986f6841478a6373768cd83b00444920ccb88", "patch": "@@ -14,6 +14,16 @@ declare_deprecated_lint! {\n     \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\"\n }\n \n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** `Range::step_by(0)` used to be linted since it's\n+/// an infinite iterator, which is better expressed by `iter::repeat`,\n+/// but the method has been removed for `Iterator::step_by` which panics\n+/// if given a zero\n+declare_deprecated_lint! {\n+    pub RANGE_STEP_BY_ZERO,\n+    \"`iterator.step_by(0)` panics nowadays\"\n+}\n \n /// **What it does:** Nothing. This lint has been deprecated.\n ///"}, {"sha": "ec73e9d50d9af07c77f02d90860cc08972bf961d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22c986f6841478a6373768cd83b00444920ccb88/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c986f6841478a6373768cd83b00444920ccb88/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=22c986f6841478a6373768cd83b00444920ccb88", "patch": "@@ -194,6 +194,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         \"extend_from_slice\",\n         \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\",\n     );\n+    store.register_removed(\n+        \"range_step_by_zero\",\n+        \"`iterator.step_by(0)` panics nowadays\",\n+    );\n     store.register_removed(\n         \"unstable_as_slice\",\n         \"`Vec::as_slice` has been stabilized in 1.7\",\n@@ -490,7 +494,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         ptr::CMP_NULL,\n         ptr::MUT_FROM_REF,\n         ptr::PTR_ARG,\n-        ranges::RANGE_STEP_BY_ZERO,\n+        ranges::ITERATOR_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,\n         reference::DEREF_ADDROF,\n         regex::INVALID_REGEX,"}, {"sha": "5f1ac61918ac074f0e6a5ce304c8ee5f7f97b754", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/22c986f6841478a6373768cd83b00444920ccb88/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c986f6841478a6373768cd83b00444920ccb88/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=22c986f6841478a6373768cd83b00444920ccb88", "patch": "@@ -1,10 +1,10 @@\n use rustc::lint::*;\n use rustc::hir::*;\n use syntax::codemap::Spanned;\n-use utils::{is_integer_literal, match_type, paths, snippet, span_lint};\n-use utils::higher;\n+use utils::{is_integer_literal, paths, snippet, span_lint};\n+use utils::{higher, implements_trait, get_trait_def_id};\n \n-/// **What it does:** Checks for iterating over ranges with a `.step_by(0)`,\n+/// **What it does:** Checks for calling `.step_by(0)` on iterators,\n /// which never terminates.\n ///\n /// **Why is this bad?** This very much looks like an oversight, since with\n@@ -17,10 +17,11 @@ use utils::higher;\n /// for x in (5..5).step_by(0) { .. }\n /// ```\n declare_lint! {\n-    pub RANGE_STEP_BY_ZERO,\n+    pub ITERATOR_STEP_BY_ZERO,\n     Warn,\n-    \"using `Range::step_by(0)`, which produces an infinite iterator\"\n+    \"using `Iterator::step_by(0)`, which produces an infinite iterator\"\n }\n+\n /// **What it does:** Checks for zipping a collection with the range of `0.._.len()`.\n ///\n /// **Why is this bad?** The code is better expressed with `.enumerate()`.\n@@ -42,7 +43,7 @@ pub struct StepByZero;\n \n impl LintPass for StepByZero {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(RANGE_STEP_BY_ZERO, RANGE_ZIP_WITH_LEN)\n+        lint_array!(ITERATOR_STEP_BY_ZERO, RANGE_ZIP_WITH_LEN)\n     }\n }\n \n@@ -52,12 +53,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StepByZero {\n             let name = name.as_str();\n \n             // Range with step_by(0).\n-            if name == \"step_by\" && args.len() == 2 && has_step_by(cx, &args[0]) && is_integer_literal(&args[1], 0) {\n-                span_lint(cx,\n-                          RANGE_STEP_BY_ZERO,\n-                          expr.span,\n-                          \"Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` \\\n-                           instead\");\n+            if name == \"step_by\" && args.len() == 2 && has_step_by(cx, &args[0]) {\n+                use consts::{Constant, constant};\n+                use rustc_const_math::ConstInt::Usize;\n+                if let Some((Constant::Int(Usize(us)), _)) = constant(cx, &args[1]) {\n+                    if us.as_u64(cx.sess().target.uint_type) == 0 {\n+                        span_lint(\n+                            cx,\n+                            ITERATOR_STEP_BY_ZERO,\n+                            expr.span,\n+                            \"Iterator::step_by(0) will panic at runtime\",\n+                        );\n+                    }\n+                }\n             } else if name == \"zip\" && args.len() == 2 {\n                 let iter = &args[0].node;\n                 let zip_arg = &args[1];\n@@ -90,9 +98,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StepByZero {\n fn has_step_by(cx: &LateContext, expr: &Expr) -> bool {\n     // No need for walk_ptrs_ty here because step_by moves self, so it\n     // can't be called on a borrowed range.\n-    let ty = cx.tables.expr_ty(expr);\n+    let ty = cx.tables.expr_ty_adjusted(expr);\n \n-    // Note: `RangeTo`, `RangeToInclusive` and `RangeFull` don't have step_by\n-    match_type(cx, ty, &paths::RANGE) || match_type(cx, ty, &paths::RANGE_FROM) ||\n-    match_type(cx, ty, &paths::RANGE_INCLUSIVE)\n+    get_trait_def_id(cx, &paths::ITERATOR)\n+        .map_or(\n+            false,\n+            |iterator_trait| implements_trait(cx, ty, iterator_trait, &[])\n+        )\n }"}, {"sha": "cb7504a9ecc7607e0da1ddd0e5cc34ce3787a5d3", "filename": "clippy_tests/examples/range.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22c986f6841478a6373768cd83b00444920ccb88/clippy_tests%2Fexamples%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c986f6841478a6373768cd83b00444920ccb88/clippy_tests%2Fexamples%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Frange.rs?ref=22c986f6841478a6373768cd83b00444920ccb88", "patch": "@@ -1,3 +1,4 @@\n+#![feature(iterator_step_by)]\n #![feature(step_by)]\n #![feature(inclusive_range_syntax)]\n #![feature(plugin)]\n@@ -8,7 +9,7 @@ impl NotARange {\n     fn step_by(&self, _: u32) {}\n }\n \n-#[warn(range_step_by_zero, range_zip_with_len)]\n+#[warn(iterator_step_by_zero, range_zip_with_len)]\n fn main() {\n     (0..1).step_by(0);\n     // No warning for non-zero step\n@@ -28,4 +29,7 @@ fn main() {\n     let v2 = vec![4,5];\n     let _x = v1.iter().zip(0..v1.len());\n     let _y = v1.iter().zip(0..v2.len()); // No error\n+\n+    // check const eval\n+    let _ = v1.iter().step_by(2/3);\n }"}, {"sha": "53ba8d45b5def96699b31741258d2b5b0aa2581e", "filename": "clippy_tests/examples/range.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/22c986f6841478a6373768cd83b00444920ccb88/clippy_tests%2Fexamples%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22c986f6841478a6373768cd83b00444920ccb88/clippy_tests%2Fexamples%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Frange.stderr?ref=22c986f6841478a6373768cd83b00444920ccb88", "patch": "@@ -1,51 +1,59 @@\n error: use of deprecated item: replaced by `Iterator::step_by`\n-  --> range.rs:13:12\n+  --> range.rs:14:12\n    |\n-13 |     (0..1).step_by(0);\n+14 |     (0..1).step_by(0);\n    |            ^^^^^^^\n    |\n    = note: `-D deprecated` implied by `-D warnings`\n \n error: use of deprecated item: replaced by `Iterator::step_by`\n-  --> range.rs:15:12\n+  --> range.rs:16:12\n    |\n-15 |     (0..1).step_by(1);\n+16 |     (0..1).step_by(1);\n    |            ^^^^^^^\n    |\n    = note: `-D deprecated` implied by `-D warnings`\n \n error: use of deprecated item: replaced by `Iterator::step_by`\n-  --> range.rs:17:11\n+  --> range.rs:18:11\n    |\n-17 |     (1..).step_by(0);\n+18 |     (1..).step_by(0);\n    |           ^^^^^^^\n    |\n    = note: `-D deprecated` implied by `-D warnings`\n \n error: use of deprecated item: replaced by `Iterator::step_by`\n-  --> range.rs:18:13\n+  --> range.rs:19:13\n    |\n-18 |     (1...2).step_by(0);\n+19 |     (1...2).step_by(0);\n    |             ^^^^^^^\n    |\n    = note: `-D deprecated` implied by `-D warnings`\n \n error: use of deprecated item: replaced by `Iterator::step_by`\n-  --> range.rs:21:7\n+  --> range.rs:22:7\n    |\n-21 |     x.step_by(0);\n+22 |     x.step_by(0);\n    |       ^^^^^^^\n    |\n    = note: `-D deprecated` implied by `-D warnings`\n \n error: It is more idiomatic to use v1.iter().enumerate()\n-  --> range.rs:29:14\n+  --> range.rs:30:14\n    |\n-29 |     let _x = v1.iter().zip(0..v1.len());\n+30 |     let _x = v1.iter().zip(0..v1.len());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D range-zip-with-len` implied by `-D warnings`\n \n+error: Iterator::step_by(0) will panic at runtime\n+  --> range.rs:34:13\n+   |\n+34 |     let _ = v1.iter().step_by(2/3);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D iterator-step-by-zero` implied by `-D warnings`\n+\n error: aborting due to previous error(s)\n \n error: Could not compile `clippy_tests`."}]}