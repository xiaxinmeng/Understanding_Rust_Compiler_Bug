{"sha": "fa1832800a9b0781d48f9f66facdab201d62f483", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMTgzMjgwMGE5YjA3ODFkNDhmOWY2NmZhY2RhYjIwMWQ2MmY0ODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-07T22:31:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-07T22:31:44Z"}, "message": "auto merge of #14725 : aochagavia/rust/show, r=alexcrichton", "tree": {"sha": "880824fa650164650a2e0bf34448f7bcee4f0ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/880824fa650164650a2e0bf34448f7bcee4f0ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa1832800a9b0781d48f9f66facdab201d62f483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1832800a9b0781d48f9f66facdab201d62f483", "html_url": "https://github.com/rust-lang/rust/commit/fa1832800a9b0781d48f9f66facdab201d62f483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa1832800a9b0781d48f9f66facdab201d62f483/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01eb0ce1227e3c7c2c32832508ea2930bd2cbb62", "url": "https://api.github.com/repos/rust-lang/rust/commits/01eb0ce1227e3c7c2c32832508ea2930bd2cbb62", "html_url": "https://github.com/rust-lang/rust/commit/01eb0ce1227e3c7c2c32832508ea2930bd2cbb62"}, {"sha": "9731c28e116943220b397d3131273344f0750913", "url": "https://api.github.com/repos/rust-lang/rust/commits/9731c28e116943220b397d3131273344f0750913", "html_url": "https://github.com/rust-lang/rust/commit/9731c28e116943220b397d3131273344f0750913"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "9d0e8e83698d8bac04832f23bcb5a63a7580d447", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fa1832800a9b0781d48f9f66facdab201d62f483/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa1832800a9b0781d48f9f66facdab201d62f483/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=fa1832800a9b0781d48f9f66facdab201d62f483", "patch": "@@ -24,6 +24,7 @@\n use core::prelude::*;\n \n use alloc::owned::Box;\n+use core::fmt;\n use core::iter;\n use core::mem;\n use core::ptr;\n@@ -608,6 +609,19 @@ impl<A: Clone> Clone for DList<A> {\n     }\n }\n \n+impl<A: fmt::Show> fmt::Show for DList<A> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, \"[\"));\n+\n+        for (i, e) in self.iter().enumerate() {\n+            if i != 0 { try!(write!(f, \", \")); }\n+            try!(write!(f, \"{}\", *e));\n+        }\n+\n+        write!(f, \"]\")\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::prelude::*;\n@@ -1027,6 +1041,17 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_show() {\n+        let list: DList<int> = range(0, 10).collect();\n+        assert!(list.to_str().as_slice() == \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n+\n+        let list: DList<&str> = vec![\"just\", \"one\", \"test\", \"more\"].iter()\n+                                                                   .map(|&s| s)\n+                                                                   .collect();\n+        assert!(list.to_str().as_slice() == \"[just, one, test, more]\");\n+    }\n+\n     #[cfg(test)]\n     fn fuzz_test(sz: int) {\n         let mut m: DList<int> = DList::new();"}, {"sha": "45584dd4b28ba4eccda480616bd855e23cbc1bcb", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fa1832800a9b0781d48f9f66facdab201d62f483/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa1832800a9b0781d48f9f66facdab201d62f483/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=fa1832800a9b0781d48f9f66facdab201d62f483", "patch": "@@ -17,6 +17,7 @@\n \n use core::prelude::*;\n \n+use core::fmt;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n \n@@ -176,6 +177,18 @@ impl<V:Clone> SmallIntMap<V> {\n     }\n }\n \n+impl<V: fmt::Show> fmt::Show for SmallIntMap<V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, r\"\\{\"));\n+\n+        for (i, (k, v)) in self.iter().enumerate() {\n+            if i != 0 { try!(write!(f, \", \")); }\n+            try!(write!(f, \"{}: {}\", k, *v));\n+        }\n+\n+        write!(f, r\"\\}\")\n+    }\n+}\n \n macro_rules! iterator {\n     (impl $name:ident -> $elem:ty, $getter:ident) => {\n@@ -461,6 +474,20 @@ mod test_map {\n         assert!(called);\n         m.insert(2, box 1);\n     }\n+\n+    #[test]\n+    fn test_show() {\n+        let mut map = SmallIntMap::new();\n+        let empty = SmallIntMap::<int>::new();\n+\n+        map.insert(1, 2);\n+        map.insert(3, 4);\n+\n+        let map_str = map.to_str();\n+        let map_str = map_str.as_slice();\n+        assert!(map_str == \"{1: 2, 3: 4}\" || map_str == \"{3: 4, 1: 2}\");\n+        assert_eq!(format!(\"{}\", empty), \"{}\".to_string());\n+    }\n }\n \n #[cfg(test)]"}]}