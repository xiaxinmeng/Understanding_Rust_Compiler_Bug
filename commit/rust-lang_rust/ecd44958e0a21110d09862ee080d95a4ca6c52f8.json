{"sha": "ecd44958e0a21110d09862ee080d95a4ca6c52f8", "node_id": "C_kwDOAAsO6NoAKGVjZDQ0OTU4ZTBhMjExMTBkMDk4NjJlZTA4MGQ5NWE0Y2E2YzUyZjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T21:19:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T21:19:19Z"}, "message": "Auto merge of #96232 - sunfishcode:sunfishcode/io-safety-const-fns, r=joshtriplett\n\nMake `BorrowedFd::borrow_raw` a const fn.\n\nMaking `BorrowedFd::borrow_raw` a const fn allows it to be used to\ncreate a constant `BorrowedFd<'static>` holding constants such as\n`AT_FDCWD`. This will allow [`rustix::fs::cwd`] to become a const fn.\n\nFor consistency, make similar changes to `BorrowedHandle::borrow_raw`\nand `BorrowedSocket::borrow_raw`.\n\n[`rustix::fs::cwd`]: https://docs.rs/rustix/latest/rustix/fs/fn.cwd.html\n\nr? `@joshtriplett`", "tree": {"sha": "1d0753e68c2f53caf577f675009481734af93bd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d0753e68c2f53caf577f675009481734af93bd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd44958e0a21110d09862ee080d95a4ca6c52f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd44958e0a21110d09862ee080d95a4ca6c52f8", "html_url": "https://github.com/rust-lang/rust/commit/ecd44958e0a21110d09862ee080d95a4ca6c52f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd44958e0a21110d09862ee080d95a4ca6c52f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee75fbe11b1fad5d93c723234178b2a329a3c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee75fbe11b1fad5d93c723234178b2a329a3c03", "html_url": "https://github.com/rust-lang/rust/commit/fee75fbe11b1fad5d93c723234178b2a329a3c03"}, {"sha": "0a1ce8277c0a8d7eed7a7d0a62ce0adcba342572", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1ce8277c0a8d7eed7a7d0a62ce0adcba342572", "html_url": "https://github.com/rust-lang/rust/commit/0a1ce8277c0a8d7eed7a7d0a62ce0adcba342572"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "bfc5ce0156415cf7c7f4ecd5efa88b248995e82b", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd44958e0a21110d09862ee080d95a4ca6c52f8/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd44958e0a21110d09862ee080d95a4ca6c52f8/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=ecd44958e0a21110d09862ee080d95a4ca6c52f8", "patch": "@@ -66,8 +66,8 @@ impl BorrowedFd<'_> {\n     /// the returned `BorrowedFd`, and it must not have the value `-1`.\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw(fd: RawFd) -> Self {\n-        assert_ne!(fd, u32::MAX as RawFd);\n+    pub const unsafe fn borrow_raw(fd: RawFd) -> Self {\n+        assert!(fd != u32::MAX as RawFd);\n         // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n         unsafe { Self { fd, _phantom: PhantomData } }\n     }"}, {"sha": "290b7f0d08a72c430f9a1d84a6799918ef95974f", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd44958e0a21110d09862ee080d95a4ca6c52f8/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd44958e0a21110d09862ee080d95a4ca6c52f8/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=ecd44958e0a21110d09862ee080d95a4ca6c52f8", "patch": "@@ -136,7 +136,7 @@ impl BorrowedHandle<'_> {\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw(handle: RawHandle) -> Self {\n+    pub const unsafe fn borrow_raw(handle: RawHandle) -> Self {\n         Self { handle, _phantom: PhantomData }\n     }\n }"}, {"sha": "c14a1d6192fa2b9a465a05f548248569438a40b3", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd44958e0a21110d09862ee080d95a4ca6c52f8/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd44958e0a21110d09862ee080d95a4ca6c52f8/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=ecd44958e0a21110d09862ee080d95a4ca6c52f8", "patch": "@@ -71,8 +71,8 @@ impl BorrowedSocket<'_> {\n     /// `INVALID_SOCKET`.\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw(socket: RawSocket) -> Self {\n-        debug_assert_ne!(socket, c::INVALID_SOCKET as RawSocket);\n+    pub const unsafe fn borrow_raw(socket: RawSocket) -> Self {\n+        assert!(socket != c::INVALID_SOCKET as RawSocket);\n         Self { socket, _phantom: PhantomData }\n     }\n }"}]}