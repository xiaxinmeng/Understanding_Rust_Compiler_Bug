{"sha": "5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNGUyYjdmYmM2ZmI5N2MwOWQ2MWY5Nzg1YTg1NTUwNDRkZjU5YzE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-08T12:10:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:20:19Z"}, "message": "Inline Generics::own_count", "tree": {"sha": "360b72bc95cfc19c3bcb0943440ab1984513f445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/360b72bc95cfc19c3bcb0943440ab1984513f445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "html_url": "https://github.com/rust-lang/rust/commit/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "html_url": "https://github.com/rust-lang/rust/commit/e5825c29c33dde7335e8fd64cd3861aa6428ea9b"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "45005fd543d1b6fe9ea9605ffce78e69adfeea97", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "patch": "@@ -795,12 +795,8 @@ pub struct Generics {\n }\n \n impl<'a, 'gcx, 'tcx> Generics {\n-    pub fn own_count(&self) -> usize {\n-        self.params.len()\n-    }\n-\n     pub fn count(&self) -> usize {\n-        self.parent_count + self.own_count()\n+        self.parent_count + self.params.len()\n     }\n \n     pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &RegionParameterDef> {"}, {"sha": "ed8549af8b4bd973990faeb3d80c50b3899feece", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "patch": "@@ -252,20 +252,20 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         }\n \n         for def in &defs.params {\n+            assert_eq!(def.index() as usize, substs.len());\n             let param = match def {\n                 ty::GenericParam::Lifetime(ref lt) => {\n-                    UnpackedKind::Lifetime(mk_region(lt, substs))\n+                    mk_region(lt, substs).into()\n                 }\n                 ty::GenericParam::Type(ref ty) => {\n                     if skip_self {\n                         skip_self = false;\n                         continue\n                     }\n-                    UnpackedKind::Type(mk_type(ty, substs))\n+                    mk_type(ty, substs).into()\n                 }\n             };\n-            assert_eq!(def.index() as usize, substs.len());\n-            substs.push(param.pack());\n+            substs.push(param);\n         }\n     }\n \n@@ -333,7 +333,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                        target_substs: &Substs<'tcx>)\n                        -> &'tcx Substs<'tcx> {\n         let defs = tcx.generics_of(source_ancestor);\n-        tcx.mk_substs(target_substs.iter().chain(&self[defs.own_count()..]).cloned())\n+        tcx.mk_substs(target_substs.iter().chain(&self[defs.params.len()..]).cloned())\n     }\n \n     pub fn truncate_to(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, generics: &ty::Generics)\n@@ -586,7 +586,7 @@ impl<'a, 'gcx, 'tcx> ty::TraitRef<'tcx> {\n \n         ty::TraitRef {\n             def_id: trait_id,\n-            substs: tcx.intern_substs(&substs[..defs.own_count()])\n+            substs: tcx.intern_substs(&substs[..defs.params.len()])\n         }\n     }\n }"}, {"sha": "0de26ba584b1990027eaf12ab1151443ca16fee5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "patch": "@@ -1143,7 +1143,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         assert_eq!(substs.len(), generics.parent_count);\n \n         // Fill in our own generics with the resolved lifetimes\n-        assert_eq!(lifetimes.len(), generics.own_count());\n+        assert_eq!(lifetimes.len(), generics.params.len());\n         substs.extend(lifetimes.iter().map(|lt| Kind::from(self.ast_region_to_region(lt, None))));\n \n         debug!(\"impl_trait_ty_to_ty: final substs = {:?}\", substs);"}, {"sha": "338f5cc867629573a5f60dd6703aac11234f52b8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "patch": "@@ -4754,7 +4754,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 (generics.parent_count, generics.has_self)\n             }\n             (Some((_, generics)), None) => {\n-                (generics.own_count(), generics.has_self)\n+                (generics.params.len(), generics.has_self)\n             }\n             (None, None) => (0, false)\n         };"}, {"sha": "ca496aed342674d9b22d34556561380c33b9f7cb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "patch": "@@ -971,10 +971,10 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    .collect();\n \n     let lifetimes: Vec<ty::GenericParam> =\n-        regions.into_iter().map(|lt| ty::GenericParam::Lifetime(lt)).collect();\n+        regions.into_iter().map(|lt| ty::GenericParam::Lifetime(lt));\n     let types: Vec<ty::GenericParam> =\n-        types.into_iter().map(|ty| ty::GenericParam::Type(ty)).collect();\n-    let params = lifetimes.into_iter().chain(types.into_iter()).collect();\n+        types.into_iter().map(|ty| ty::GenericParam::Type(ty));\n+    let params = lifetimes.chain(types).collect();\n \n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,"}]}