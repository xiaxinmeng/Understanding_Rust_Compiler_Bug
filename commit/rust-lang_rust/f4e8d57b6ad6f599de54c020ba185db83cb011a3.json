{"sha": "f4e8d57b6ad6f599de54c020ba185db83cb011a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZThkNTdiNmFkNmY1OTlkZTU0YzAyMGJhMTg1ZGI4M2NiMDExYTM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-08-16T18:26:27Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-08-16T18:28:42Z"}, "message": "std: stop backtracing when the frames are full", "tree": {"sha": "71cdaccb91306da294f674ee3db9921987e66b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71cdaccb91306da294f674ee3db9921987e66b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e8d57b6ad6f599de54c020ba185db83cb011a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e8d57b6ad6f599de54c020ba185db83cb011a3", "html_url": "https://github.com/rust-lang/rust/commit/f4e8d57b6ad6f599de54c020ba185db83cb011a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e8d57b6ad6f599de54c020ba185db83cb011a3/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5590423e6ceb048dd7d792382e960d66b7615d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5590423e6ceb048dd7d792382e960d66b7615d2", "html_url": "https://github.com/rust-lang/rust/commit/b5590423e6ceb048dd7d792382e960d66b7615d2"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "2c43b5937ce5a72418274f061b25ddcf34c24578", "filename": "src/libstd/sys/cloudabi/backtrace.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4e8d57b6ad6f599de54c020ba185db83cb011a3/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e8d57b6ad6f599de54c020ba185db83cb011a3/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fbacktrace.rs?ref=f4e8d57b6ad6f599de54c020ba185db83cb011a3", "patch": "@@ -64,6 +64,10 @@ extern \"C\" fn trace_fn(\n     arg: *mut libc::c_void,\n ) -> uw::_Unwind_Reason_Code {\n     let cx = unsafe { &mut *(arg as *mut Context) };\n+    if cx.idx >= cx.frames.len() {\n+        return uw::_URC_NORMAL_STOP;\n+    }\n+\n     let mut ip_before_insn = 0;\n     let mut ip = unsafe { uw::_Unwind_GetIPInfo(ctx, &mut ip_before_insn) as *mut libc::c_void };\n     if !ip.is_null() && ip_before_insn == 0 {\n@@ -73,14 +77,12 @@ extern \"C\" fn trace_fn(\n     }\n \n     let symaddr = unsafe { uw::_Unwind_FindEnclosingFunction(ip) };\n-    if cx.idx < cx.frames.len() {\n-        cx.frames[cx.idx] = Frame {\n-            symbol_addr: symaddr as *mut u8,\n-            exact_position: ip as *mut u8,\n-            inline_context: 0,\n-        };\n-        cx.idx += 1;\n-    }\n+    cx.frames[cx.idx] = Frame {\n+        symbol_addr: symaddr as *mut u8,\n+        exact_position: ip as *mut u8,\n+        inline_context: 0,\n+    };\n+    cx.idx += 1;\n \n     uw::_URC_NO_REASON\n }"}, {"sha": "c0414b78f8d66579db0293dced7c242ba87d38ce", "filename": "src/libstd/sys/redox/backtrace/tracing.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4e8d57b6ad6f599de54c020ba185db83cb011a3/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e8d57b6ad6f599de54c020ba185db83cb011a3/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs?ref=f4e8d57b6ad6f599de54c020ba185db83cb011a3", "patch": "@@ -68,6 +68,10 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n                    arg: *mut libc::c_void) -> uw::_Unwind_Reason_Code {\n     let cx = unsafe { &mut *(arg as *mut Context) };\n+    if cx.idx >= cx.frames.len() {\n+        return uw::_URC_NORMAL_STOP;\n+    }\n+\n     let mut ip_before_insn = 0;\n     let mut ip = unsafe {\n         uw::_Unwind_GetIPInfo(ctx, &mut ip_before_insn) as *mut libc::c_void\n@@ -94,14 +98,12 @@ extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n         unsafe { uw::_Unwind_FindEnclosingFunction(ip) }\n     };\n \n-    if cx.idx < cx.frames.len() {\n-        cx.frames[cx.idx] = Frame {\n-            symbol_addr: symaddr as *mut u8,\n-            exact_position: ip as *mut u8,\n-            inline_context: 0,\n-        };\n-        cx.idx += 1;\n-    }\n+    cx.frames[cx.idx] = Frame {\n+        symbol_addr: symaddr as *mut u8,\n+        exact_position: ip as *mut u8,\n+        inline_context: 0,\n+    };\n+    cx.idx += 1;\n \n     uw::_URC_NO_REASON\n }"}, {"sha": "6e8415686792c85fb101024f21984ae23004109e", "filename": "src/libstd/sys/unix/backtrace/tracing/gcc_s.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4e8d57b6ad6f599de54c020ba185db83cb011a3/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e8d57b6ad6f599de54c020ba185db83cb011a3/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs?ref=f4e8d57b6ad6f599de54c020ba185db83cb011a3", "patch": "@@ -68,6 +68,10 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n                    arg: *mut libc::c_void) -> uw::_Unwind_Reason_Code {\n     let cx = unsafe { &mut *(arg as *mut Context) };\n+    if cx.idx >= cx.frames.len() {\n+        return uw::_URC_NORMAL_STOP;\n+    }\n+\n     let mut ip_before_insn = 0;\n     let mut ip = unsafe {\n         uw::_Unwind_GetIPInfo(ctx, &mut ip_before_insn) as *mut libc::c_void\n@@ -94,14 +98,12 @@ extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n         unsafe { uw::_Unwind_FindEnclosingFunction(ip) }\n     };\n \n-    if cx.idx < cx.frames.len() {\n-        cx.frames[cx.idx] = Frame {\n-            symbol_addr: symaddr as *mut u8,\n-            exact_position: ip as *mut u8,\n-            inline_context: 0,\n-        };\n-        cx.idx += 1;\n-    }\n+    cx.frames[cx.idx] = Frame {\n+        symbol_addr: symaddr as *mut u8,\n+        exact_position: ip as *mut u8,\n+        inline_context: 0,\n+    };\n+    cx.idx += 1;\n \n     uw::_URC_NO_REASON\n }"}]}