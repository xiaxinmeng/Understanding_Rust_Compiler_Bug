{"sha": "b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzlmYWMxYTRkMDk5NGNjOWEzZTI4YjE2N2RlZTMwZDkwZmQ2N2M=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-05-12T13:32:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-12T13:32:28Z"}, "message": "Rollup merge of #50558 - whitfin:issue-50500, r=michaelwoerister\n\nRemove all reference to DepGraph::work_products\n\nThis is an attempt at fixing #50500. It will remove the `work_products` key from `DepGraphData` completely, in favour of just passing the relevant data around. I went in a little blindly; everything appears to work just fine but I'd appreciate any additional advice people.\n\nI didn't want to remove too much of what was already there, so I kept the structure pretty much the same (aside from some naming tweaks) - if anyone has suggestions on how to streamline it a little better, happy to follow up.\n\nr? @michaelwoerister", "tree": {"sha": "f8cabfb3d5707e57a83e4ed6e9d177f5857296cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8cabfb3d5707e57a83e4ed6e9d177f5857296cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa9uzsCRBK7hj4Ov3rIwAAdHIIAIg5zHXdAXqqbv58aC+5Y0qH\nJpK4jqliwrHCmv7sYyKslvb2kkwjIuIzd8ka/oNUF2UlLaxkMFCEV5z8MKk+Qkb5\nPrj0Wl1i7PU2OWY1/vgL+1aClt0f6MyuDcwY9LyG+l+abIuvsRc8yfZ95j8AjHfH\nxOOJyLaQE2P//z7zZUs5HM1mhds2Vmz4PkDLRG3qSIwu53QHq5Cvzg5CUEdoagOx\nFocUD5OzENcxAPrpiv8J11SVfZDeTscRx4KBg0o6DeQN5ZTRUwXnIFgwgBqyrLeL\nPIm1WmrBXaDBYaU1ZwNMlEu2jZavsLszq0OGupfrp3uhCNRDvq3uGTBQC34qQHI=\n=dndq\n-----END PGP SIGNATURE-----\n", "payload": "tree f8cabfb3d5707e57a83e4ed6e9d177f5857296cd\nparent d7f5e1f5d1677d90fa7f0b475e20d8679b6250a3\nparent 8402a58528dc9f3c47208f3ed152132b67f7f217\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1526131948 -0600\ncommitter GitHub <noreply@github.com> 1526131948 -0600\n\nRollup merge of #50558 - whitfin:issue-50500, r=michaelwoerister\n\nRemove all reference to DepGraph::work_products\n\nThis is an attempt at fixing #50500. It will remove the `work_products` key from `DepGraphData` completely, in favour of just passing the relevant data around. I went in a little blindly; everything appears to work just fine but I'd appreciate any additional advice people.\n\nI didn't want to remove too much of what was already there, so I kept the structure pretty much the same (aside from some naming tweaks) - if anyone has suggestions on how to streamline it a little better, happy to follow up.\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "html_url": "https://github.com/rust-lang/rust/commit/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f5e1f5d1677d90fa7f0b475e20d8679b6250a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f5e1f5d1677d90fa7f0b475e20d8679b6250a3", "html_url": "https://github.com/rust-lang/rust/commit/d7f5e1f5d1677d90fa7f0b475e20d8679b6250a3"}, {"sha": "8402a58528dc9f3c47208f3ed152132b67f7f217", "url": "https://api.github.com/repos/rust-lang/rust/commits/8402a58528dc9f3c47208f3ed152132b67f7f217", "html_url": "https://github.com/rust-lang/rust/commit/8402a58528dc9f3c47208f3ed152132b67f7f217"}], "stats": {"total": 114, "additions": 51, "deletions": 63}, "files": [{"sha": "797332e699d4b99705cdaf4b9ce446b3cf728f0d", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::small_vec::SmallVec;\n-use rustc_data_structures::sync::{Lrc, RwLock, ReadGuard, Lock};\n+use rustc_data_structures::sync::{Lrc, Lock};\n use std::env;\n use std::hash::Hash;\n use ty::{self, TyCtxt};\n@@ -80,9 +80,6 @@ struct DepGraphData {\n     /// this map. We can later look for and extract that data.\n     previous_work_products: FxHashMap<WorkProductId, WorkProduct>,\n \n-    /// Work-products that we generate in this run.\n-    work_products: RwLock<FxHashMap<WorkProductId, WorkProduct>>,\n-\n     dep_node_debug: Lock<FxHashMap<DepNode, String>>,\n \n     // Used for testing, only populated when -Zquery-dep-graph is specified.\n@@ -103,7 +100,6 @@ impl DepGraph {\n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n                 previous_work_products: prev_work_products,\n-                work_products: RwLock::new(FxHashMap()),\n                 dep_node_debug: Lock::new(FxHashMap()),\n                 current: Lock::new(CurrentDepGraph::new()),\n                 previous: prev_graph,\n@@ -462,19 +458,6 @@ impl DepGraph {\n         self.data.as_ref().unwrap().previous.node_to_index(dep_node)\n     }\n \n-    /// Indicates that we created the given work-product in this run\n-    /// for `v`. This record will be preserved and loaded in the next\n-    /// run.\n-    pub fn insert_work_product(&self, v: &WorkProductId, data: WorkProduct) {\n-        debug!(\"insert_work_product({:?}, {:?})\", v, data);\n-        self.data\n-            .as_ref()\n-            .unwrap()\n-            .work_products\n-            .borrow_mut()\n-            .insert(v.clone(), data);\n-    }\n-\n     /// Check whether a previous work product exists for `v` and, if\n     /// so, return the path that leads to it. Used to skip doing work.\n     pub fn previous_work_product(&self, v: &WorkProductId) -> Option<WorkProduct> {\n@@ -485,12 +468,6 @@ impl DepGraph {\n             })\n     }\n \n-    /// Access the map of work-products created during this run. Only\n-    /// used during saving of the dep-graph.\n-    pub fn work_products(&self) -> ReadGuard<FxHashMap<WorkProductId, WorkProduct>> {\n-        self.data.as_ref().unwrap().work_products.borrow()\n-    }\n-\n     /// Access the map of work-products created during the cached run. Only\n     /// used during saving of the dep-graph.\n     pub fn previous_work_products(&self) -> &FxHashMap<WorkProductId, WorkProduct> {"}, {"sha": "ababce69e3170d850e939df33dfefdc3b4039ad6", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "patch": "@@ -36,9 +36,9 @@ pub use persist::dep_graph_tcx_init;\n pub use persist::load_dep_graph;\n pub use persist::load_query_result_cache;\n pub use persist::LoadResult;\n+pub use persist::copy_cgu_workproducts_to_incr_comp_cache_dir;\n pub use persist::save_dep_graph;\n-pub use persist::save_trans_partition;\n-pub use persist::save_work_products;\n+pub use persist::save_work_product_index;\n pub use persist::in_incr_comp_dir;\n pub use persist::prepare_session_directory;\n pub use persist::finalize_session_directory;"}, {"sha": "e1f00db56d5cbc0572214a3a15d94941e7a8b09e", "filename": "src/librustc_incremental/persist/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs?ref=b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "patch": "@@ -29,6 +29,6 @@ pub use self::load::load_dep_graph;\n pub use self::load::load_query_result_cache;\n pub use self::load::LoadResult;\n pub use self::save::save_dep_graph;\n-pub use self::save::save_work_products;\n-pub use self::work_product::save_trans_partition;\n+pub use self::save::save_work_product_index;\n+pub use self::work_product::copy_cgu_workproducts_to_incr_comp_cache_dir;\n pub use self::work_product::delete_workproduct_files;"}, {"sha": "be725b17933215661af70724ba01e6b4c432a7b7", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::{DepGraph, DepKind};\n+use rustc::dep_graph::{DepGraph, DepKind, WorkProduct, WorkProductId};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc::util::common::time;\n@@ -55,22 +55,22 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     })\n }\n \n-pub fn save_work_products(sess: &Session, dep_graph: &DepGraph) {\n+pub fn save_work_product_index(sess: &Session,\n+                               dep_graph: &DepGraph,\n+                               new_work_products: FxHashMap<WorkProductId, WorkProduct>) {\n     if sess.opts.incremental.is_none() {\n         return;\n     }\n \n-    debug!(\"save_work_products()\");\n+    debug!(\"save_work_product_index()\");\n     dep_graph.assert_ignored();\n     let path = work_products_path(sess);\n-    save_in(sess, path, |e| encode_work_products(dep_graph, e));\n+    save_in(sess, path, |e| encode_work_product_index(&new_work_products, e));\n \n     // We also need to clean out old work-products, as not all of them are\n     // deleted during invalidation. Some object files don't change their\n     // content, they are just not needed anymore.\n-    let new_work_products = dep_graph.work_products();\n     let previous_work_products = dep_graph.previous_work_products();\n-\n     for (id, wp) in previous_work_products.iter() {\n         if !new_work_products.contains_key(id) {\n             work_product::delete_workproduct_files(sess, wp);\n@@ -234,10 +234,9 @@ fn encode_dep_graph(tcx: TyCtxt,\n     Ok(())\n }\n \n-fn encode_work_products(dep_graph: &DepGraph,\n-                        encoder: &mut Encoder) -> io::Result<()> {\n-    let work_products: Vec<_> = dep_graph\n-        .work_products()\n+fn encode_work_product_index(work_products: &FxHashMap<WorkProductId, WorkProduct>,\n+                             encoder: &mut Encoder) -> io::Result<()> {\n+    let serialized_products: Vec<_> = work_products\n         .iter()\n         .map(|(id, work_product)| {\n             SerializedWorkProduct {\n@@ -247,7 +246,7 @@ fn encode_work_products(dep_graph: &DepGraph,\n         })\n         .collect();\n \n-    work_products.encode(encoder)\n+    serialized_products.encode(encoder)\n }\n \n fn encode_query_cache(tcx: TyCtxt,"}, {"sha": "d0c7766cbae08bd3338ba2db91baa965c359ec1a", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "patch": "@@ -11,21 +11,22 @@\n //! This module contains files for saving intermediate work-products.\n \n use persist::fs::*;\n-use rustc::dep_graph::{WorkProduct, WorkProductId, DepGraph, WorkProductFileKind};\n+use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::session::Session;\n use rustc::util::fs::link_or_copy;\n use std::path::PathBuf;\n use std::fs as std_fs;\n \n-pub fn save_trans_partition(sess: &Session,\n-                            dep_graph: &DepGraph,\n-                            cgu_name: &str,\n-                            files: &[(WorkProductFileKind, PathBuf)]) {\n-    debug!(\"save_trans_partition({:?},{:?})\",\n+pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n+    sess: &Session,\n+    cgu_name: &str,\n+    files: &[(WorkProductFileKind, PathBuf)]\n+) -> Option<(WorkProductId, WorkProduct)> {\n+    debug!(\"copy_cgu_workproducts_to_incr_comp_cache_dir({:?},{:?})\",\n            cgu_name,\n            files);\n     if sess.opts.incremental.is_none() {\n-        return\n+        return None\n     }\n     let work_product_id = WorkProductId::from_cgu_name(cgu_name);\n \n@@ -53,16 +54,16 @@ pub fn save_trans_partition(sess: &Session,\n              })\n              .collect();\n     let saved_files = match saved_files {\n+        None => return None,\n         Some(v) => v,\n-        None => return,\n     };\n \n     let work_product = WorkProduct {\n         cgu_name: cgu_name.to_string(),\n         saved_files,\n     };\n \n-    dep_graph.insert_work_product(&work_product_id, work_product);\n+    Some((work_product_id, work_product))\n }\n \n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {"}, {"sha": "888173d4fc515053a7c2173f5e7d0db6c78dcbe8", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "patch": "@@ -17,8 +17,8 @@ use back::linker::LinkerInfo;\n use back::symbol_export::ExportedSymbols;\n use base;\n use consts;\n-use rustc_incremental::{save_trans_partition, in_incr_comp_dir};\n-use rustc::dep_graph::{DepGraph, WorkProductFileKind};\n+use rustc_incremental::{copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir};\n+use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::middle::cstore::{LinkMeta, EncodedMetadata};\n use rustc::session::config::{self, OutputFilenames, OutputType, Passes, SomePasses,\n                              AllPasses, Sanitizer, Lto};\n@@ -1021,11 +1021,14 @@ pub fn start_async_translation(tcx: TyCtxt,\n     }\n }\n \n-fn copy_module_artifacts_into_incr_comp_cache(sess: &Session,\n-                                              dep_graph: &DepGraph,\n-                                              compiled_modules: &CompiledModules) {\n+fn copy_all_cgu_workproducts_to_incr_comp_cache_dir(\n+    sess: &Session,\n+    compiled_modules: &CompiledModules\n+) -> FxHashMap<WorkProductId, WorkProduct> {\n+    let mut work_products = FxHashMap::default();\n+\n     if sess.opts.incremental.is_none() {\n-        return;\n+        return work_products;\n     }\n \n     for module in compiled_modules.modules.iter() {\n@@ -1041,8 +1044,13 @@ fn copy_module_artifacts_into_incr_comp_cache(sess: &Session,\n             files.push((WorkProductFileKind::BytecodeCompressed, path.clone()));\n         }\n \n-        save_trans_partition(sess, dep_graph, &module.name, &files);\n+        if let Some((id, product)) =\n+                copy_cgu_workproducts_to_incr_comp_cache_dir(sess, &module.name, &files) {\n+            work_products.insert(id, product);\n+        }\n     }\n+\n+    work_products\n }\n \n fn produce_final_output_artifacts(sess: &Session,\n@@ -2236,7 +2244,10 @@ pub struct OngoingCrateTranslation {\n }\n \n impl OngoingCrateTranslation {\n-    pub(crate) fn join(self, sess: &Session, dep_graph: &DepGraph) -> CrateTranslation {\n+    pub(crate) fn join(\n+        self,\n+        sess: &Session\n+    ) -> (CrateTranslation, FxHashMap<WorkProductId, WorkProduct>) {\n         self.shared_emitter_main.check(sess, true);\n         let compiled_modules = match self.future.join() {\n             Ok(Ok(compiled_modules)) => compiled_modules,\n@@ -2255,9 +2266,9 @@ impl OngoingCrateTranslation {\n             time_graph.dump(&format!(\"{}-timings\", self.crate_name));\n         }\n \n-        copy_module_artifacts_into_incr_comp_cache(sess,\n-                                                   dep_graph,\n-                                                   &compiled_modules);\n+        let work_products = copy_all_cgu_workproducts_to_incr_comp_cache_dir(sess,\n+                                                                             &compiled_modules);\n+\n         produce_final_output_artifacts(sess,\n                                        &compiled_modules,\n                                        &self.output_filenames);\n@@ -2281,7 +2292,7 @@ impl OngoingCrateTranslation {\n             metadata_module: compiled_modules.metadata_module,\n         };\n \n-        trans\n+        (trans, work_products)\n     }\n \n     pub(crate) fn submit_pre_translated_module_to_llvm(&self,"}, {"sha": "30780b8c965637704a683b5e16552ecd4e8bc0d6", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=b9c9fac1a4d0994cc9a3e28b167dee30d90fd67c", "patch": "@@ -212,16 +212,16 @@ impl TransCrate for LlvmTransCrate {\n         outputs: &OutputFilenames,\n     ) -> Result<(), CompileIncomplete>{\n         use rustc::util::common::time;\n-        let trans = trans.downcast::<::back::write::OngoingCrateTranslation>()\n+        let (trans, work_products) = trans.downcast::<::back::write::OngoingCrateTranslation>()\n             .expect(\"Expected LlvmTransCrate's OngoingCrateTranslation, found Box<Any>\")\n-            .join(sess, dep_graph);\n+            .join(sess);\n         if sess.opts.debugging_opts.incremental_info {\n             back::write::dump_incremental_data(&trans);\n         }\n \n         time(sess,\n              \"serialize work products\",\n-             move || rustc_incremental::save_work_products(sess, &dep_graph));\n+             move || rustc_incremental::save_work_product_index(sess, &dep_graph, work_products));\n \n         sess.compile_status()?;\n "}]}