{"sha": "bf1ffaf5f48f925bfb62f9dca3bc73cfcc246148", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMWZmYWY1ZjQ4ZjkyNWJmYjYyZjlkY2EzYmM3M2NmY2MyNDYxNDg=", "commit": {"author": {"name": "Michael Darakananda", "email": "pongad@gmail.com", "date": "2014-04-03T03:10:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-04T20:23:21Z"}, "message": "Added grow_fn and retain to Vec", "tree": {"sha": "0b3ca554a9a7ca0ead5e5ad692419dcf3a972a1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b3ca554a9a7ca0ead5e5ad692419dcf3a972a1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf1ffaf5f48f925bfb62f9dca3bc73cfcc246148", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1ffaf5f48f925bfb62f9dca3bc73cfcc246148", "html_url": "https://github.com/rust-lang/rust/commit/bf1ffaf5f48f925bfb62f9dca3bc73cfcc246148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf1ffaf5f48f925bfb62f9dca3bc73cfcc246148/comments", "author": {"login": "pongad", "id": 1617025, "node_id": "MDQ6VXNlcjE2MTcwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1617025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pongad", "html_url": "https://github.com/pongad", "followers_url": "https://api.github.com/users/pongad/followers", "following_url": "https://api.github.com/users/pongad/following{/other_user}", "gists_url": "https://api.github.com/users/pongad/gists{/gist_id}", "starred_url": "https://api.github.com/users/pongad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pongad/subscriptions", "organizations_url": "https://api.github.com/users/pongad/orgs", "repos_url": "https://api.github.com/users/pongad/repos", "events_url": "https://api.github.com/users/pongad/events{/privacy}", "received_events_url": "https://api.github.com/users/pongad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d250ec0bddf7ba84e34e893621234af3ebcfbca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d250ec0bddf7ba84e34e893621234af3ebcfbca8", "html_url": "https://github.com/rust-lang/rust/commit/d250ec0bddf7ba84e34e893621234af3ebcfbca8"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "30416b2824136da751e6ec39d46f82bc60ab5513", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/bf1ffaf5f48f925bfb62f9dca3bc73cfcc246148/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1ffaf5f48f925bfb62f9dca3bc73cfcc246148/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=bf1ffaf5f48f925bfb62f9dca3bc73cfcc246148", "patch": "@@ -15,7 +15,7 @@ use cmp::{Ord, Eq, Ordering, TotalEq, TotalOrd};\n use container::{Container, Mutable};\n use default::Default;\n use fmt;\n-use iter::{DoubleEndedIterator, FromIterator, Extendable, Iterator};\n+use iter::{DoubleEndedIterator, FromIterator, Extendable, Iterator, range};\n use libc::{free, c_void};\n use mem::{size_of, move_val_init};\n use mem;\n@@ -1135,6 +1135,56 @@ impl<T> Vec<T> {\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n         self.as_mut_slice().as_mut_ptr()\n     }\n+\n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// This method operates in place and preserves the order the retained elements.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// vec.retain(|x| x%2 == 0);\n+    /// assert_eq!(vec, vec!(2, 4));\n+    /// ```\n+    pub fn retain(&mut self, f: |&T| -> bool) {\n+        let len = self.len();\n+        let mut del = 0u;\n+        {\n+            let v = self.as_mut_slice();\n+\n+            for i in range(0u, len) {\n+                if !f(&v[i]) {\n+                    del += 1;\n+                } else if del > 0 {\n+                    v.swap(i-del, i);\n+                }\n+            }\n+        }\n+        if del > 0 {\n+            self.truncate(len - del);\n+        }\n+    }\n+\n+    /// Expands a vector in place, initializing the new elements to the result of a function.\n+    ///\n+    /// The vector is grown by `n` elements. The i-th new element are initialized to the value\n+    /// returned by `f(i)` where `i` is in the range [0, n).\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(0u, 1);\n+    /// vec.grow_fn(3, |i| i);\n+    /// assert_eq!(vec, vec!(0, 1, 0, 1, 2));\n+    /// ```\n+    pub fn grow_fn(&mut self, n: uint, f: |uint| -> T) {\n+        self.reserve_additional(n);\n+        for i in range(0u, n) {\n+            self.push(f(i));\n+        }\n+    }\n }\n \n impl<T:TotalOrd> Vec<T> {\n@@ -1523,4 +1573,17 @@ mod tests {\n         v.clone_from(&three);\n         assert_eq!(v, three)\n     }\n+\n+    fn test_grow_fn() {\n+        let mut v = Vec::from_slice([0u, 1]);\n+        v.grow_fn(3, |i| i);\n+        assert!(v == Vec::from_slice([0u, 1, 0, 1, 2]));\n+    }\n+\n+    #[test]\n+    fn test_retain() {\n+        let mut vec = Vec::from_slice([1u, 2, 3, 4]);\n+        vec.retain(|x| x%2 == 0);\n+        assert!(vec == Vec::from_slice([2u, 4]));\n+    }\n }"}]}