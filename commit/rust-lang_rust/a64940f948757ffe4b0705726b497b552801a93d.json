{"sha": "a64940f948757ffe4b0705726b497b552801a93d", "node_id": "C_kwDOAAsO6NoAKGE2NDk0MGY5NDg3NTdmZmU0YjA3MDU3MjZiNDk3YjU1MjgwMWE5M2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-26T12:44:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-26T12:44:47Z"}, "message": "Auto merge of #106745 - m-ou-se:format-args-ast, r=oli-obk\n\nMove format_args!() into AST (and expand it during AST lowering)\n\nImplements https://github.com/rust-lang/compiler-team/issues/541\n\nThis moves FormatArgs from rustc_builtin_macros to rustc_ast_lowering. For now, the end result is the same. But this allows for future changes to do smarter things with format_args!(). It also allows Clippy to directly access the ast::FormatArgs, making things a lot easier.\n\nThis change turns the format args types into lang items. The builtin macro used to refer to them by their path. After this change, the path is no longer relevant, making it easier to make changes in `core`.\n\nThis updates clippy to use the new language items, but this doesn't yet make clippy use the ast::FormatArgs structure that's now available. That should be done after this is merged.", "tree": {"sha": "4154472d0e02d7cc7bc5f24dc3e80119e73e3db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4154472d0e02d7cc7bc5f24dc3e80119e73e3db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64940f948757ffe4b0705726b497b552801a93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64940f948757ffe4b0705726b497b552801a93d", "html_url": "https://github.com/rust-lang/rust/commit/a64940f948757ffe4b0705726b497b552801a93d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64940f948757ffe4b0705726b497b552801a93d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8ede23353266c38f0b7c91be934495e941f2cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8ede23353266c38f0b7c91be934495e941f2cc", "html_url": "https://github.com/rust-lang/rust/commit/2d8ede23353266c38f0b7c91be934495e941f2cc"}, {"sha": "2bcd697e2d89d0f9f80682fdaaf5bbdd5adbb0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcd697e2d89d0f9f80682fdaaf5bbdd5adbb0ba", "html_url": "https://github.com/rust-lang/rust/commit/2bcd697e2d89d0f9f80682fdaaf5bbdd5adbb0ba"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "70a80d40f464bbbd5bbabac0b0be673742b557b3", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a64940f948757ffe4b0705726b497b552801a93d/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64940f948757ffe4b0705726b497b552801a93d/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=a64940f948757ffe4b0705726b497b552801a93d", "patch": "@@ -7,14 +7,14 @@ use clippy_utils::macros::{\n };\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n+use clippy_utils::ty::{implements_trait, is_type_lang_item};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_errors::{\n     Applicability,\n     SuggestionStyle::{CompletelyHidden, ShowCode},\n };\n-use rustc_hir::{Expr, ExprKind, HirId, QPath};\n+use rustc_hir::{Expr, ExprKind, HirId, LangItem, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_middle::ty::Ty;\n@@ -237,7 +237,7 @@ fn check_unused_format_specifier(cx: &LateContext<'_>, arg: &FormatArg<'_>) {\n         );\n     }\n \n-    if is_type_diagnostic_item(cx, param_ty, sym::Arguments) && !arg.format.is_default_for_trait() {\n+    if is_type_lang_item(cx, param_ty, LangItem::FormatArguments) && !arg.format.is_default_for_trait() {\n         span_lint_and_then(\n             cx,\n             UNUSED_FORMAT_SPECS,"}, {"sha": "a8f8da67b51711807ba146c7577bb4a93870086b", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a64940f948757ffe4b0705726b497b552801a93d/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64940f948757ffe4b0705726b497b552801a93d/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=a64940f948757ffe4b0705726b497b552801a93d", "patch": "@@ -1,14 +1,13 @@\n #![allow(clippy::similar_names)] // `expr` and `expn`\n \n-use crate::is_path_diagnostic_item;\n use crate::source::snippet_opt;\n use crate::visitors::{for_each_expr, Descend};\n \n use arrayvec::ArrayVec;\n use itertools::{izip, Either, Itertools};\n use rustc_ast::ast::LitKind;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{self as hir, Expr, ExprField, ExprKind, HirId, Node, QPath};\n+use rustc_hir::{self as hir, Expr, ExprField, ExprKind, HirId, LangItem, Node, QPath, TyKind};\n use rustc_lexer::unescape::unescape_literal;\n use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n use rustc_lint::LateContext;\n@@ -439,8 +438,7 @@ impl<'tcx> FormatArgsValues<'tcx> {\n                 // ArgumentV1::from_usize(<val>)\n                 if let ExprKind::Call(callee, [val]) = expr.kind\n                     && let ExprKind::Path(QPath::TypeRelative(ty, _)) = callee.kind\n-                    && let hir::TyKind::Path(QPath::Resolved(_, path)) = ty.kind\n-                    && path.segments.last().unwrap().ident.name == sym::ArgumentV1\n+                    && let TyKind::Path(QPath::LangItem(LangItem::FormatArgument, _, _)) = ty.kind\n                 {\n                     let val_idx = if val.span.ctxt() == expr.span.ctxt()\n                         && let ExprKind::Field(_, field) = val.kind\n@@ -486,20 +484,6 @@ struct ParamPosition {\n \n impl<'tcx> Visitor<'tcx> for ParamPosition {\n     fn visit_expr_field(&mut self, field: &'tcx ExprField<'tcx>) {\n-        fn parse_count(expr: &Expr<'_>) -> Option<usize> {\n-            // ::core::fmt::rt::v1::Count::Param(1usize),\n-            if let ExprKind::Call(ctor, [val]) = expr.kind\n-                && let ExprKind::Path(QPath::Resolved(_, path)) = ctor.kind\n-                && path.segments.last()?.ident.name == sym::Param\n-                && let ExprKind::Lit(lit) = &val.kind\n-                && let LitKind::Int(pos, _) = lit.node\n-            {\n-                Some(pos as usize)\n-            } else {\n-                None\n-            }\n-        }\n-\n         match field.ident.name {\n             sym::position => {\n                 if let ExprKind::Lit(lit) = &field.expr.kind\n@@ -519,15 +503,41 @@ impl<'tcx> Visitor<'tcx> for ParamPosition {\n     }\n }\n \n+fn parse_count(expr: &Expr<'_>) -> Option<usize> {\n+    // <::core::fmt::rt::v1::Count>::Param(1usize),\n+    if let ExprKind::Call(ctor, [val]) = expr.kind\n+        && let ExprKind::Path(QPath::TypeRelative(_, path)) = ctor.kind\n+            && path.ident.name == sym::Param\n+            && let ExprKind::Lit(lit) = &val.kind\n+            && let LitKind::Int(pos, _) = lit.node\n+    {\n+        Some(pos as usize)\n+    } else {\n+        None\n+    }\n+}\n+\n /// Parses the `fmt` arg of `Arguments::new_v1_formatted(pieces, args, fmt, _)`\n fn parse_rt_fmt<'tcx>(fmt_arg: &'tcx Expr<'tcx>) -> Option<impl Iterator<Item = ParamPosition> + 'tcx> {\n     if let ExprKind::AddrOf(.., array) = fmt_arg.kind\n         && let ExprKind::Array(specs) = array.kind\n     {\n         Some(specs.iter().map(|spec| {\n-            let mut position = ParamPosition::default();\n-            position.visit_expr(spec);\n-            position\n+            if let ExprKind::Call(f, args) = spec.kind\n+                && let ExprKind::Path(QPath::TypeRelative(ty, f)) = f.kind\n+                && let TyKind::Path(QPath::LangItem(LangItem::FormatPlaceholder, _, _)) = ty.kind\n+                && f.ident.name == sym::new\n+                && let [position, _fill, _align, _flags, precision, width] = args\n+                && let ExprKind::Lit(position) = &position.kind\n+                && let LitKind::Int(position, _) = position.node {\n+                    ParamPosition {\n+                        value: position as usize,\n+                        width: parse_count(width),\n+                        precision: parse_count(precision),\n+                    }\n+            } else {\n+                ParamPosition::default()\n+            }\n         }))\n     } else {\n         None\n@@ -890,7 +900,7 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n         // ::core::fmt::Arguments::new_v1_formatted(pieces, args, fmt, _unsafe_arg)\n         if let ExprKind::Call(callee, [pieces, args, rest @ ..]) = expr.kind\n             && let ExprKind::Path(QPath::TypeRelative(ty, seg)) = callee.kind\n-            && is_path_diagnostic_item(cx, ty, sym::Arguments)\n+            && let TyKind::Path(QPath::LangItem(LangItem::FormatArguments, _, _)) = ty.kind\n             && matches!(seg.ident.as_str(), \"new_v1\" | \"new_v1_formatted\")\n         {\n             let format_string = FormatString::new(cx, pieces)?;"}, {"sha": "2d1044af17e8c331c0a964cb6330ff5ea2290ad4", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a64940f948757ffe4b0705726b497b552801a93d/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64940f948757ffe4b0705726b497b552801a93d/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=a64940f948757ffe4b0705726b497b552801a93d", "patch": "@@ -219,6 +219,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Repeat(..)\n             | ast::ExprKind::Ret(..)\n             | ast::ExprKind::Yeet(..)\n+            | ast::ExprKind::FormatArgs(..)\n             | ast::ExprKind::Struct(..)\n             | ast::ExprKind::Try(..)\n             | ast::ExprKind::TryBlock(..)"}]}