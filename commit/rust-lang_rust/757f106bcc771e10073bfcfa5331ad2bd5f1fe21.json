{"sha": "757f106bcc771e10073bfcfa5331ad2bd5f1fe21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1N2YxMDZiY2M3NzFlMTAwNzNiZmNmYTUzMzFhZDJiZDVmMWZlMjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-03T15:06:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-03T15:06:49Z"}, "message": "auto merge of #13868 : FlaPer87/rust/opt-in-phase1, r=alexcrichton\n\nThis is a first patch towards an opt-in built-in trait world. This patch removes the restriction on built-in traits and allows such traits to be derived.\r\n\r\n[RFC#3]\r\n\r\ncc #13231\r\n\r\n@nikomatsakis r?", "tree": {"sha": "682524424989f2a93dd11bb655b58a88bbc0950b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/682524424989f2a93dd11bb655b58a88bbc0950b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/757f106bcc771e10073bfcfa5331ad2bd5f1fe21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/757f106bcc771e10073bfcfa5331ad2bd5f1fe21", "html_url": "https://github.com/rust-lang/rust/commit/757f106bcc771e10073bfcfa5331ad2bd5f1fe21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529b19f37bfcb39bf8f8709497c10c9fbd8dc5d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/529b19f37bfcb39bf8f8709497c10c9fbd8dc5d5", "html_url": "https://github.com/rust-lang/rust/commit/529b19f37bfcb39bf8f8709497c10c9fbd8dc5d5"}, {"sha": "c39271e99cadcc580583bb29bce6e8475db15b0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c39271e99cadcc580583bb29bce6e8475db15b0a", "html_url": "https://github.com/rust-lang/rust/commit/c39271e99cadcc580583bb29bce6e8475db15b0a"}], "stats": {"total": 112, "additions": 85, "deletions": 27}, "files": [{"sha": "c87776ba8935e018c1bee0814bc47fa0811adce0", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=757f106bcc771e10073bfcfa5331ad2bd5f1fe21", "patch": "@@ -631,14 +631,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n                             parent_visibility);\n \n             for trait_ref in opt_trait_ref.iter() {\n-                let trait_ref = instantiate_trait_ref(ccx, trait_ref, selfty);\n-\n-                // Prevent the builtin kind traits from being manually implemented.\n-                if tcx.lang_items.to_builtin_kind(trait_ref.def_id).is_some() {\n-                    tcx.sess.span_err(it.span,\n-                        \"cannot provide an explicit implementation \\\n-                         for a builtin kind\");\n-                }\n+                instantiate_trait_ref(ccx, trait_ref, selfty);\n             }\n         },\n         ast::ItemTrait(ref generics, _, _, ref trait_methods) => {"}, {"sha": "b5b2667f892de94a065e7078d4d6d9858f75e0f6", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=757f106bcc771e10073bfcfa5331ad2bd5f1fe21", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use ast::{MetaItem, MetaWord, Item};\n+use codemap::Span;\n+use ext::base::ExtCtxt;\n+use ext::deriving::generic::*;\n+\n+pub fn expand_deriving_bound(cx: &mut ExtCtxt,\n+                             span: Span,\n+                             mitem: @MetaItem,\n+                             item: @Item,\n+                             push: |@Item|) {\n+\n+    let name = match mitem.node {\n+        MetaWord(ref tname) => {\n+            match tname.get() {\n+                \"Copy\" => \"Copy\",\n+                \"Send\" => \"Send\",\n+                \"Share\" => \"Share\",\n+                ref tname => cx.span_bug(span,\n+                                         format!(\"expected built-in trait name but found {}\",\n+                                                 *tname))\n+            }\n+        },\n+        _ => return cx.span_err(span, \"unexpected value in deriving, expected a trait\")\n+    };\n+\n+    let trait_def = TraitDef {\n+        span: span,\n+        attributes: Vec::new(),\n+        path: Path::new(vec!(\"std\", \"kinds\", name)),\n+        additional_bounds: Vec::new(),\n+        generics: LifetimeBounds::empty(),\n+        methods: vec!()\n+    };\n+\n+    trait_def.expand(cx, mitem, item, push)\n+}"}, {"sha": "1187e83308b846396dc6548fa06070ae904bf1b1", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=757f106bcc771e10073bfcfa5331ad2bd5f1fe21", "patch": "@@ -22,6 +22,7 @@ use ast::{Item, MetaItem, MetaList, MetaNameValue, MetaWord};\n use ext::base::ExtCtxt;\n use codemap::Span;\n \n+pub mod bounds;\n pub mod clone;\n pub mod encodable;\n pub mod decodable;\n@@ -90,6 +91,10 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n \n                             \"FromPrimitive\" => expand!(primitive::expand_deriving_from_primitive),\n \n+                            \"Send\" => expand!(bounds::expand_deriving_bound),\n+                            \"Share\" => expand!(bounds::expand_deriving_bound),\n+                            \"Copy\" => expand!(bounds::expand_deriving_bound),\n+\n                             ref tname => {\n                                 cx.span_err(titem.span, format!(\"unknown \\\n                                     `deriving` trait: `{}`\", *tname));"}, {"sha": "6bedac6d12d6c026b73b7d4189e77df8f215ed19", "filename": "src/test/compile-fail/cant-implement-builtin-kinds.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/529b19f37bfcb39bf8f8709497c10c9fbd8dc5d5/src%2Ftest%2Fcompile-fail%2Fcant-implement-builtin-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529b19f37bfcb39bf8f8709497c10c9fbd8dc5d5/src%2Ftest%2Fcompile-fail%2Fcant-implement-builtin-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcant-implement-builtin-kinds.rs?ref=529b19f37bfcb39bf8f8709497c10c9fbd8dc5d5", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// See issue #8517 for why this should be illegal.\n-\n-struct X<T>(T);\n-\n-impl <T> Send for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n-impl <T> Sized for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n-impl <T> Share for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n-\n-fn main() { }"}, {"sha": "9d9f5527366d265f4d5e267e68a264f3c13d1871", "filename": "src/test/compile-fail/deriving-bounds.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs?ref=757f106bcc771e10073bfcfa5331ad2bd5f1fe21", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//NOTE: Remove in the next snapshot\n+#[cfg(not(stage0))]\n+#[deriving(Share(Bad),Send,Copy)]\n+//~^ ERROR unexpected value in deriving, expected a trait\n+struct Test;\n+\n+pub fn main() {}"}, {"sha": "a395158470259c179df59f523ddf1782170989d1", "filename": "src/test/run-pass/deriving-bounds.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757f106bcc771e10073bfcfa5331ad2bd5f1fe21/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs?ref=757f106bcc771e10073bfcfa5331ad2bd5f1fe21", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//NOTE: Remove in the next snapshot\n+#[cfg(not(stage0))]\n+#[deriving(Share,Send,Copy)]\n+struct Test;\n+\n+pub fn main() {}"}]}