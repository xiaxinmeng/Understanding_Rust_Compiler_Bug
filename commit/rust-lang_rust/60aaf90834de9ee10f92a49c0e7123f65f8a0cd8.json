{"sha": "60aaf90834de9ee10f92a49c0e7123f65f8a0cd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWFmOTA4MzRkZTllZTEwZjkyYTQ5YzBlNzEyM2Y2NWY4YTBjZDg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-30T07:19:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-11T22:03:53Z"}, "message": "Move macro enum_from_u32 to rustc_data_structures.", "tree": {"sha": "3caa1eb52fd2b33e6e3bae3cb196d2944522817f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3caa1eb52fd2b33e6e3bae3cb196d2944522817f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60aaf90834de9ee10f92a49c0e7123f65f8a0cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60aaf90834de9ee10f92a49c0e7123f65f8a0cd8", "html_url": "https://github.com/rust-lang/rust/commit/60aaf90834de9ee10f92a49c0e7123f65f8a0cd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60aaf90834de9ee10f92a49c0e7123f65f8a0cd8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f32e3001e3a64c1baa509d3d1734dff53f14d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f32e3001e3a64c1baa509d3d1734dff53f14d81", "html_url": "https://github.com/rust-lang/rust/commit/3f32e3001e3a64c1baa509d3d1734dff53f14d81"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "88ddd96eec8f5e66a61c1582bad4bd5b035d7ed0", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/60aaf90834de9ee10f92a49c0e7123f65f8a0cd8/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aaf90834de9ee10f92a49c0e7123f65f8a0cd8/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=60aaf90834de9ee10f92a49c0e7123f65f8a0cd8", "patch": "@@ -1,40 +1,3 @@\n-macro_rules! enum_from_u32 {\n-    ($(#[$attr:meta])* pub enum $name:ident {\n-        $($variant:ident = $e:expr,)*\n-    }) => {\n-        $(#[$attr])*\n-        pub enum $name {\n-            $($variant = $e),*\n-        }\n-\n-        impl $name {\n-            pub fn from_u32(u: u32) -> Option<$name> {\n-                $(if u == $name::$variant as u32 {\n-                    return Some($name::$variant)\n-                })*\n-                None\n-            }\n-        }\n-    };\n-    ($(#[$attr:meta])* pub enum $name:ident {\n-        $($variant:ident,)*\n-    }) => {\n-        $(#[$attr])*\n-        pub enum $name {\n-            $($variant,)*\n-        }\n-\n-        impl $name {\n-            pub fn from_u32(u: u32) -> Option<$name> {\n-                $(if u == $name::$variant as u32 {\n-                    return Some($name::$variant)\n-                })*\n-                None\n-            }\n-        }\n-    }\n-}\n-\n #[macro_export]\n macro_rules! bug {\n     () => ( bug!(\"impossible case reached\") );"}, {"sha": "67fbe3058cdb981170ce653c9d22c0695f8f753c", "filename": "src/librustc_data_structures/macros.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/60aaf90834de9ee10f92a49c0e7123f65f8a0cd8/src%2Flibrustc_data_structures%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aaf90834de9ee10f92a49c0e7123f65f8a0cd8/src%2Flibrustc_data_structures%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fmacros.rs?ref=60aaf90834de9ee10f92a49c0e7123f65f8a0cd8", "patch": "@@ -17,3 +17,41 @@ macro_rules! static_assert_size {\n         const _: [(); $size] = [(); ::std::mem::size_of::<$ty>()];\n     };\n }\n+\n+#[macro_export]\n+macro_rules! enum_from_u32 {\n+    ($(#[$attr:meta])* pub enum $name:ident {\n+        $($variant:ident = $e:expr,)*\n+    }) => {\n+        $(#[$attr])*\n+        pub enum $name {\n+            $($variant = $e),*\n+        }\n+\n+        impl $name {\n+            pub fn from_u32(u: u32) -> Option<$name> {\n+                $(if u == $name::$variant as u32 {\n+                    return Some($name::$variant)\n+                })*\n+                None\n+            }\n+        }\n+    };\n+    ($(#[$attr:meta])* pub enum $name:ident {\n+        $($variant:ident,)*\n+    }) => {\n+        $(#[$attr])*\n+        pub enum $name {\n+            $($variant,)*\n+        }\n+\n+        impl $name {\n+            pub fn from_u32(u: u32) -> Option<$name> {\n+                $(if u == $name::$variant as u32 {\n+                    return Some($name::$variant)\n+                })*\n+                None\n+            }\n+        }\n+    }\n+}"}]}