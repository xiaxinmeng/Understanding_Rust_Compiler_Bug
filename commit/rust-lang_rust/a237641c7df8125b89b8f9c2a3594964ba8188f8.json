{"sha": "a237641c7df8125b89b8f9c2a3594964ba8188f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMzc2NDFjN2RmODEyNWI4OWI4ZjljMmEzNTk0OTY0YmE4MTg4Zjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T21:01:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-26T21:01:13Z"}, "message": "Auto merge of #68407 - eddyb:iter-macro-backtrace, r=petrochenkov\n\nrustc_span: return an impl Iterator instead of a Vec from macro_backtrace.\n\nHaving `Span::macro_backtrace` produce an `impl Iterator<Item = ExpnData>` allows #67359 to use it instead of rolling its own similar functionality.\n\nThe move from `MacroBacktrace` to `ExpnData` (which the first two commits are prerequisites for) both eliminates unnecessary allocations, and is strictly more flexible (exposes more information).\n\nr? @petrochenkov", "tree": {"sha": "105db4bbe1eb9f95251c1414f926a3e3f36602cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/105db4bbe1eb9f95251c1414f926a3e3f36602cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a237641c7df8125b89b8f9c2a3594964ba8188f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a237641c7df8125b89b8f9c2a3594964ba8188f8", "html_url": "https://github.com/rust-lang/rust/commit/a237641c7df8125b89b8f9c2a3594964ba8188f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a237641c7df8125b89b8f9c2a3594964ba8188f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "html_url": "https://github.com/rust-lang/rust/commit/698fcd38fa9548e64a2092ff48c9d15ceb57d40c"}, {"sha": "6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "html_url": "https://github.com/rust-lang/rust/commit/6980f82c0d152446506fee4d4a45d8afdf4ad9a4"}], "stats": {"total": 161, "additions": 75, "deletions": 86}, "files": [{"sha": "f9e23e96fa8a83975cf416b3ef99c160c9ec1c36", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -21,6 +21,7 @@ use crate::{\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_span::hygiene::{ExpnKind, MacroKind};\n use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n use std::io;\n@@ -342,19 +343,20 @@ pub trait Emitter {\n             if call_sp != *sp && !always_backtrace {\n                 before_after.push((*sp, call_sp));\n             }\n-            let backtrace_len = sp.macro_backtrace().len();\n-            for (i, trace) in sp.macro_backtrace().iter().rev().enumerate() {\n+            let macro_backtrace: Vec<_> = sp.macro_backtrace().collect();\n+            let backtrace_len = macro_backtrace.len();\n+            for (i, trace) in macro_backtrace.iter().rev().enumerate() {\n                 // Only show macro locations that are local\n                 // and display them like a span_note\n-                if trace.def_site_span.is_dummy() {\n+                if trace.def_site.is_dummy() {\n                     continue;\n                 }\n                 if always_backtrace {\n                     new_labels.push((\n-                        trace.def_site_span,\n+                        trace.def_site,\n                         format!(\n                             \"in this expansion of `{}`{}\",\n-                            trace.macro_decl_name,\n+                            trace.kind.descr(),\n                             if backtrace_len > 2 {\n                                 // if backtrace_len == 1 it'll be pointed\n                                 // at by \"in this macro invocation\"\n@@ -366,9 +368,8 @@ pub trait Emitter {\n                     ));\n                 }\n                 // Check to make sure we're not in any <*macros>\n-                if !sm.span_to_filename(trace.def_site_span).is_macros()\n-                    && !trace.macro_decl_name.starts_with(\"desugaring of \")\n-                    && !trace.macro_decl_name.starts_with(\"#[\")\n+                if !sm.span_to_filename(trace.def_site).is_macros()\n+                    && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n                     || always_backtrace\n                 {\n                     new_labels.push((\n@@ -398,8 +399,7 @@ pub trait Emitter {\n                 continue;\n             }\n             if sm.span_to_filename(sp_label.span.clone()).is_macros() && !always_backtrace {\n-                let v = sp_label.span.macro_backtrace();\n-                if let Some(use_site) = v.last() {\n+                if let Some(use_site) = sp_label.span.macro_backtrace().last() {\n                     before_after.push((sp_label.span.clone(), use_site.call_site.clone()));\n                 }\n             }"}, {"sha": "3ddf9b09893ba28c6831f9ec016d3bb1d37c9c79", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -17,7 +17,8 @@ use crate::{Applicability, DiagnosticId};\n use crate::{CodeSuggestion, SubDiagnostic};\n \n use rustc_data_structures::sync::Lrc;\n-use rustc_span::{MacroBacktrace, MultiSpan, Span, SpanLabel};\n+use rustc_span::hygiene::ExpnData;\n+use rustc_span::{MultiSpan, Span, SpanLabel};\n use std::io::{self, Write};\n use std::path::Path;\n use std::sync::{Arc, Mutex};\n@@ -308,7 +309,7 @@ impl DiagnosticSpan {\n         // backtrace ourselves, but the `macro_backtrace` helper makes\n         // some decision, such as dropping some frames, and I don't\n         // want to duplicate that logic here.\n-        let backtrace = span.macro_backtrace().into_iter();\n+        let backtrace = span.macro_backtrace();\n         DiagnosticSpan::from_span_full(span, is_primary, label, suggestion, backtrace, je)\n     }\n \n@@ -317,18 +318,18 @@ impl DiagnosticSpan {\n         is_primary: bool,\n         label: Option<String>,\n         suggestion: Option<(&String, Applicability)>,\n-        mut backtrace: vec::IntoIter<MacroBacktrace>,\n+        mut backtrace: impl Iterator<Item = ExpnData>,\n         je: &JsonEmitter,\n     ) -> DiagnosticSpan {\n         let start = je.sm.lookup_char_pos(span.lo());\n         let end = je.sm.lookup_char_pos(span.hi());\n         let backtrace_step = backtrace.next().map(|bt| {\n             let call_site = Self::from_span_full(bt.call_site, false, None, None, backtrace, je);\n             let def_site_span =\n-                Self::from_span_full(bt.def_site_span, false, None, None, vec![].into_iter(), je);\n+                Self::from_span_full(bt.def_site, false, None, None, vec![].into_iter(), je);\n             Box::new(DiagnosticSpanMacroExpansion {\n                 span: call_site,\n-                macro_decl_name: bt.macro_decl_name,\n+                macro_decl_name: bt.kind.descr(),\n                 def_site_span,\n             })\n         });"}, {"sha": "f915f44c17ab977d3928106defede80da0073d31", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -596,10 +596,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n             let mut err = self.cx.struct_span_err(\n                 expn_data.call_site,\n-                &format!(\n-                    \"recursion limit reached while expanding the macro `{}`\",\n-                    expn_data.kind.descr()\n-                ),\n+                &format!(\"recursion limit reached while expanding `{}`\", expn_data.kind.descr()),\n             );\n             err.help(&format!(\n                 \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\","}, {"sha": "8480c85075dd4dd968564b8b44948bafadd9c8e0", "filename": "src/librustc_lint/internal.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_lint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_lint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Finternal.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -6,6 +6,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n+use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::{Ident, Item, ItemKind};\n \n@@ -226,8 +227,9 @@ impl EarlyLintPass for LintPassImpl {\n                 if last.ident.name == sym::LintPass {\n                     let expn_data = lint_pass.path.span.ctxt().outer_expn_data();\n                     let call_site = expn_data.call_site;\n-                    if expn_data.kind.descr() != sym::impl_lint_pass\n-                        && call_site.ctxt().outer_expn_data().kind.descr() != sym::declare_lint_pass\n+                    if expn_data.kind != ExpnKind::Macro(MacroKind::Bang, sym::impl_lint_pass)\n+                        && call_site.ctxt().outer_expn_data().kind\n+                            != ExpnKind::Macro(MacroKind::Bang, sym::declare_lint_pass)\n                     {\n                         cx.struct_span_lint(\n                             LINT_PASS_IMPL_WITHOUT_MACRO,"}, {"sha": "f44ce6f4eac2744d590f10736e5c8b997df6fb06", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -776,12 +776,19 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let callsite_span = self.span_from_span(callsite);\n         let callee = span.source_callee()?;\n \n-        // Ignore attribute macros, their spans are usually mangled\n-        if let ExpnKind::Macro(MacroKind::Attr, _) | ExpnKind::Macro(MacroKind::Derive, _) =\n-            callee.kind\n-        {\n-            return None;\n-        }\n+        let mac_name = match callee.kind {\n+            ExpnKind::Macro(mac_kind, name) => match mac_kind {\n+                MacroKind::Bang => name,\n+\n+                // Ignore attribute macros, their spans are usually mangled\n+                // FIXME(eddyb) is this really the case anymore?\n+                MacroKind::Attr | MacroKind::Derive => return None,\n+            },\n+\n+            // These are not macros.\n+            // FIXME(eddyb) maybe there is a way to handle them usefully?\n+            ExpnKind::Root | ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => return None,\n+        };\n \n         // If the callee is an imported macro from an external crate, need to get\n         // the source span and name from the session, as their spans are localized\n@@ -799,7 +806,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let callee_span = self.span_from_span(callee.def_site);\n         Some(MacroRef {\n             span: callsite_span,\n-            qualname: callee.kind.descr().to_string(), // FIXME: generate the real qualname\n+            qualname: mac_name.to_string(), // FIXME: generate the real qualname\n             callee_span,\n         })\n     }"}, {"sha": "a368a881674d86fac4bb50077b8ca44f08b0a6ee", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -140,7 +140,9 @@ impl ExpnId {\n         loop {\n             let expn_data = self.expn_data();\n             // Stop going up the backtrace once include! is encountered\n-            if expn_data.is_root() || expn_data.kind.descr() == sym::include {\n+            if expn_data.is_root()\n+                || expn_data.kind == ExpnKind::Macro(MacroKind::Bang, sym::include)\n+            {\n                 break;\n             }\n             self = expn_data.call_site.ctxt().outer_expn();\n@@ -717,7 +719,7 @@ impl ExpnData {\n }\n \n /// Expansion kind.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum ExpnKind {\n     /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.\n     Root,\n@@ -730,12 +732,16 @@ pub enum ExpnKind {\n }\n \n impl ExpnKind {\n-    pub fn descr(&self) -> Symbol {\n+    pub fn descr(&self) -> String {\n         match *self {\n-            ExpnKind::Root => kw::PathRoot,\n-            ExpnKind::Macro(_, descr) => descr,\n-            ExpnKind::AstPass(kind) => Symbol::intern(kind.descr()),\n-            ExpnKind::Desugaring(kind) => Symbol::intern(kind.descr()),\n+            ExpnKind::Root => kw::PathRoot.to_string(),\n+            ExpnKind::Macro(macro_kind, name) => match macro_kind {\n+                MacroKind::Bang => format!(\"{}!\", name),\n+                MacroKind::Attr => format!(\"#[{}]\", name),\n+                MacroKind::Derive => format!(\"#[derive({})]\", name),\n+            },\n+            ExpnKind::AstPass(kind) => kind.descr().to_string(),\n+            ExpnKind::Desugaring(kind) => format!(\"desugaring of {}\", kind.descr()),\n         }\n     }\n }"}, {"sha": "413bd77daae2434c87ea4f5978d80a9bd0ba862d", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 18, "deletions": 41, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -445,37 +445,26 @@ impl Span {\n         self.ctxt().outer_expn_data().allow_internal_unsafe\n     }\n \n-    pub fn macro_backtrace(mut self) -> Vec<MacroBacktrace> {\n+    pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {\n         let mut prev_span = DUMMY_SP;\n-        let mut result = vec![];\n-        loop {\n-            let expn_data = self.ctxt().outer_expn_data();\n-            if expn_data.is_root() {\n-                break;\n-            }\n-            // Don't print recursive invocations.\n-            if !expn_data.call_site.source_equal(&prev_span) {\n-                let (pre, post) = match expn_data.kind {\n-                    ExpnKind::Root => break,\n-                    ExpnKind::Desugaring(..) => (\"desugaring of \", \"\"),\n-                    ExpnKind::AstPass(..) => (\"\", \"\"),\n-                    ExpnKind::Macro(macro_kind, _) => match macro_kind {\n-                        MacroKind::Bang => (\"\", \"!\"),\n-                        MacroKind::Attr => (\"#[\", \"]\"),\n-                        MacroKind::Derive => (\"#[derive(\", \")]\"),\n-                    },\n-                };\n-                result.push(MacroBacktrace {\n-                    call_site: expn_data.call_site,\n-                    macro_decl_name: format!(\"{}{}{}\", pre, expn_data.kind.descr(), post),\n-                    def_site_span: expn_data.def_site,\n-                });\n-            }\n+        std::iter::from_fn(move || {\n+            loop {\n+                let expn_data = self.ctxt().outer_expn_data();\n+                if expn_data.is_root() {\n+                    return None;\n+                }\n \n-            prev_span = self;\n-            self = expn_data.call_site;\n-        }\n-        result\n+                let is_recursive = expn_data.call_site.source_equal(&prev_span);\n+\n+                prev_span = self;\n+                self = expn_data.call_site;\n+\n+                // Don't print recursive invocations.\n+                if !is_recursive {\n+                    return Some(expn_data);\n+                }\n+            }\n+        })\n     }\n \n     /// Returns a `Span` that would enclose both `self` and `end`.\n@@ -1511,18 +1500,6 @@ pub struct FileLines {\n pub static SPAN_DEBUG: AtomicRef<fn(Span, &mut fmt::Formatter<'_>) -> fmt::Result> =\n     AtomicRef::new(&(default_span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n \n-#[derive(Debug)]\n-pub struct MacroBacktrace {\n-    /// span where macro was applied to generate this code\n-    pub call_site: Span,\n-\n-    /// name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")\n-    pub macro_decl_name: String,\n-\n-    /// span where macro was defined (possibly dummy)\n-    pub def_site_span: Span,\n-}\n-\n // _____________________________________________________________________________\n // SpanLinesError, SpanSnippetError, DistinctSources, MalformedSourceMapPositions\n //"}, {"sha": "c250df43a2733e284bcc1b56f90ae52f04f44f31", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -947,8 +947,7 @@ impl SourceMap {\n     }\n     pub fn call_span_if_macro(&self, sp: Span) -> Span {\n         if self.span_to_filename(sp.clone()).is_macros() {\n-            let v = sp.macro_backtrace();\n-            if let Some(use_site) = v.last() {\n+            if let Some(use_site) = sp.macro_backtrace().last() {\n                 return use_site.call_site;\n             }\n         }"}, {"sha": "1cc59051605cdac313f5284be7851ad86b29520b", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -1,4 +1,4 @@\n-error: recursion limit reached while expanding the macro `recurse`\n+error: recursion limit reached while expanding `recurse!`\n   --> $DIR/recursion_limit_macro.rs:10:31\n    |\n LL |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) };"}, {"sha": "6ea0bc73dc05700251d9287f7c758c88d9c60522", "filename": "src/test/ui/infinite/infinite-macro-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -1,5 +1,5 @@\n macro_rules! recursive {\n-    () => (recursive!()) //~ ERROR recursion limit reached while expanding the macro `recursive`\n+    () => (recursive!()) //~ ERROR recursion limit reached while expanding `recursive!`\n }\n \n fn main() {"}, {"sha": "159312e5c1b53e1cc27a021814049c8153a9e4ee", "filename": "src/test/ui/infinite/infinite-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -1,4 +1,4 @@\n-error: recursion limit reached while expanding the macro `recursive`\n+error: recursion limit reached while expanding `recursive!`\n   --> $DIR/infinite-macro-expansion.rs:2:12\n    |\n LL |     () => (recursive!())"}, {"sha": "00acc20fc9e5e8f0a53edfd889999113122e764d", "filename": "src/test/ui/issues/issue-16098.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Fissues%2Fissue-16098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Fissues%2Fissue-16098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -4,7 +4,7 @@ macro_rules! prob1 {\n     };\n     ($n:expr) => {\n         if ($n % 3 == 0) || ($n % 5 == 0) {\n-            $n + prob1!($n - 1); //~ ERROR recursion limit reached while expanding the macro `prob1`\n+            $n + prob1!($n - 1); //~ ERROR recursion limit reached while expanding `prob1!`\n         } else {\n             prob1!($n - 1);\n         }"}, {"sha": "2b9657d46283bd8d4fc238560058d1af1980789a", "filename": "src/test/ui/issues/issue-16098.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -1,4 +1,4 @@\n-error: recursion limit reached while expanding the macro `prob1`\n+error: recursion limit reached while expanding `prob1!`\n   --> $DIR/issue-16098.rs:7:18\n    |\n LL |             $n + prob1!($n - 1);"}, {"sha": "4e86daffb61bab1aada2a404217c327e4608f569", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -20,7 +20,7 @@ LL |     my_faulty_macro!();\n    = note: to `my_faulty_macro ! (bcd) ;`\n    = note: expanding `my_faulty_macro! { bcd }`\n \n-error: recursion limit reached while expanding the macro `my_recursive_macro`\n+error: recursion limit reached while expanding `my_recursive_macro!`\n   --> $DIR/trace_faulty_macros.rs:22:9\n    |\n LL |         my_recursive_macro!();"}, {"sha": "b68b0978ab8012f871c80736fb910d14b89c4498", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -1 +1 @@\n-Subproject commit f6449ba236db31995255ac5e4cad4ab88296a7c6\n+Subproject commit b68b0978ab8012f871c80736fb910d14b89c4498"}, {"sha": "fa046d2e7f14cda09d14230cc8c772e1565e0757", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -1 +1 @@\n-Subproject commit 3e74853d1f9893cf2a47f28b658711d8f9f97b6b\n+Subproject commit fa046d2e7f14cda09d14230cc8c772e1565e0757"}]}