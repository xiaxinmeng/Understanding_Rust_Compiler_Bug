{"sha": "83e83056e7989e0542ea7b5593abf63c7093d6fd", "node_id": "C_kwDOAAsO6NoAKDgzZTgzMDU2ZTc5ODllMDU0MmVhN2I1NTkzYWJmNjNjNzA5M2Q2ZmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-28T07:35:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-28T07:35:15Z"}, "message": "Rollup merge of #100520 - jakubdabek:patch-1, r=thomcc\n\nAdd mention of `BufReader` in `Read::bytes` docs\n\nThere is a general paragraph about `BufRead` in the `Read` trait's docs, however using `bytes` without `BufRead` *always* has a large impact, due to reads of size 1.\n\n`@rustbot` label +A-docs", "tree": {"sha": "76d07049a378405a499e6e707afcb8dccb9aae6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76d07049a378405a499e6e707afcb8dccb9aae6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e83056e7989e0542ea7b5593abf63c7093d6fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCxqzCRBK7hj4Ov3rIwAANHkIABoUE2e2Hqs2ugE3LVnIjwQ/\nvqzaL6k666YTzHjGjuXrA3rC92FUyMGu29KlhnCg+uEiGD4S8TX3G65/xcrNY0eg\nv0k03pXoPcViikptN/QDQ4qt5Y1kFIK7Kf4OnzyB3ScUmg5vH2IAXuMZ30tm7wKx\nBVmBxUD8IPBho2OrEYeDURxEWpqamMmAdZ1e5suCLlMBdgMeX89PORze7/itMFpK\nEYecUcycbi/5t5KBtGDG/UEnsCqXNJxIwWP4PJHfATOdlhGgnmBkRsf/uybWhdYw\nuAQZVIXcgHWaVArPWH5FPLfjQq+kZhcien8TwaWLMf727hDMgE+tRDDhtj/PgWE=\n=VeRy\n-----END PGP SIGNATURE-----\n", "payload": "tree 76d07049a378405a499e6e707afcb8dccb9aae6c\nparent 58174e3f7cdbab1fedcd268465a01b891e9e62e2\nparent 8509936e8f48c64c063b7ba858b881377007f416\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661672115 +0200\ncommitter GitHub <noreply@github.com> 1661672115 +0200\n\nRollup merge of #100520 - jakubdabek:patch-1, r=thomcc\n\nAdd mention of `BufReader` in `Read::bytes` docs\n\nThere is a general paragraph about `BufRead` in the `Read` trait's docs, however using `bytes` without `BufRead` *always* has a large impact, due to reads of size 1.\n\n`@rustbot` label +A-docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e83056e7989e0542ea7b5593abf63c7093d6fd", "html_url": "https://github.com/rust-lang/rust/commit/83e83056e7989e0542ea7b5593abf63c7093d6fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e83056e7989e0542ea7b5593abf63c7093d6fd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58174e3f7cdbab1fedcd268465a01b891e9e62e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/58174e3f7cdbab1fedcd268465a01b891e9e62e2", "html_url": "https://github.com/rust-lang/rust/commit/58174e3f7cdbab1fedcd268465a01b891e9e62e2"}, {"sha": "8509936e8f48c64c063b7ba858b881377007f416", "url": "https://api.github.com/repos/rust-lang/rust/commits/8509936e8f48c64c063b7ba858b881377007f416", "html_url": "https://github.com/rust-lang/rust/commit/8509936e8f48c64c063b7ba858b881377007f416"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "a9fa7b0a6aca0699a551c04743cd9bc02dc3c380", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/83e83056e7989e0542ea7b5593abf63c7093d6fd/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e83056e7989e0542ea7b5593abf63c7093d6fd/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=83e83056e7989e0542ea7b5593abf63c7093d6fd", "patch": "@@ -887,6 +887,10 @@ pub trait Read {\n     /// The yielded item is [`Ok`] if a byte was successfully read and [`Err`]\n     /// otherwise. EOF is mapped to returning [`None`] from this iterator.\n     ///\n+    /// The default implementation calls `read` for each byte,\n+    /// which can be very inefficient for data that's not in memory,\n+    /// such as [`File`]. Consider using a [`BufReader`] in such cases.\n+    ///\n     /// # Examples\n     ///\n     /// [`File`]s implement `Read`:\n@@ -899,10 +903,11 @@ pub trait Read {\n     /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n+    /// use std::io::BufReader;\n     /// use std::fs::File;\n     ///\n     /// fn main() -> io::Result<()> {\n-    ///     let f = File::open(\"foo.txt\")?;\n+    ///     let f = BufReader::new(File::open(\"foo.txt\")?);\n     ///\n     ///     for byte in f.bytes() {\n     ///         println!(\"{}\", byte.unwrap());"}]}