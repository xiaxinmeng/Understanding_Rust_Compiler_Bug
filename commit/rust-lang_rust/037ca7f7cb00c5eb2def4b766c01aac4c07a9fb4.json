{"sha": "037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzN2NhN2Y3Y2IwMGM1ZWIyZGVmNGI3NjZjMDFhYWM0YzA3YTlmYjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-30T22:24:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-01T04:31:32Z"}, "message": "rt: Rewrite 32-bit __morestack to use the shim upcall", "tree": {"sha": "1560ec50fa608feeb3e9fb5991de86bb880af040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1560ec50fa608feeb3e9fb5991de86bb880af040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4", "html_url": "https://github.com/rust-lang/rust/commit/037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdebd1e2ef440312ac791d505af7dd089efa2499", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdebd1e2ef440312ac791d505af7dd089efa2499", "html_url": "https://github.com/rust-lang/rust/commit/fdebd1e2ef440312ac791d505af7dd089efa2499"}], "stats": {"total": 148, "additions": 63, "deletions": 85}, "files": [{"sha": "d739f820422fb5d023663f2540b78497efc26fb6", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 63, "deletions": 85, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4", "patch": "@@ -6,42 +6,22 @@\n // prolog when we run out.\n \n #if defined(__APPLE__) || defined(_WIN32)\n-#define RUST_NEW_STACK          _rust_new_stack\n+#define RUST_NEW_STACK2         _rust_new_stack2\n #define RUST_DEL_STACK          _rust_del_stack\n #define RUST_GET_PREV_STACK     _rust_get_prev_stack\n #define RUST_GET_TASK           _rust_get_task\n-#define UPCALL_ALLOC_C_STACK    _upcall_alloc_c_stack\n-#define UPCALL_CALL_C_STACK     _upcall_call_c_stack\n+#define UPCALL_CALL_C           _upcall_call_shim_on_c_stack\n #define MORESTACK               ___morestack\n #else\n-#define RUST_NEW_STACK          rust_new_stack\n+#define RUST_NEW_STACK2         rust_new_stack2\n #define RUST_DEL_STACK          rust_del_stack\n #define RUST_GET_PREV_STACK     rust_get_prev_stack\n #define RUST_GET_TASK           rust_get_task\n-#define UPCALL_ALLOC_C_STACK    upcall_alloc_c_stack\n-#define UPCALL_CALL_C_STACK     upcall_call_c_stack\n+#define UPCALL_CALL_C           upcall_call_shim_on_c_stack\n #define MORESTACK               __morestack\n #endif\n \n-#ifdef __APPLE__\n-#define ALIGNMENT               4\n-#else\n-#define ALIGNMENT               8\n-#endif\n-\n-#if defined (__APPLE__)\n-#define NEW_STACK_ADDR          rust_new_stack_sym-.L$pic_ref_pt_0(%eax)\n-#define DEL_STACK_ADDR          rust_del_stack_sym-.L$pic_ref_pt_1(%edx)\n-#else\n-#if defined (_WIN32)\n-#define NEW_STACK_ADDR          $_rust_new_stack\n-#define DEL_STACK_ADDR          $_rust_del_stack\n-#else\n-#define NEW_STACK_ADDR          $rust_new_stack\n-#define DEL_STACK_ADDR          $rust_del_stack\n-#endif\n-#endif\n-\n+#define ALIGNMENT 8\n #define RETURN_OFFSET   7\n \n .globl RUST_NEW_STACK\n@@ -68,68 +48,66 @@\n #if defined(__linux__)\n MORESTACK:\n \n-    // Sanity check to make sure that there is a currently-running task.\n-    subl $12,%esp\n-    calll RUST_GET_TASK\n-    testl %eax,%eax\n-    jz .L$bail\n-\n-    movl $16, (%esp)\n-    calll UPCALL_ALLOC_C_STACK\n-    movl %eax,%edx\n-\n-    movl %esp, 12(%edx)\n-                            // C stack              | esp+12\n-                            // ---------------------+-------------------------\n-    movl 20(%esp),%eax      //                      | ra stksz argsz x ra args\n-    movl %eax,8(%edx)       //              argsz > | ra stksz argsz x ra args\n-    leal 28+ALIGNMENT(%esp),%eax //           argsz | ra stksz argsz x ra args\n-    movl %eax,4(%edx)       //         argp > argsz | ra stksz argsz x ra args\n-    movl 16(%esp),%eax      //           argp argsz | ra stksz argsz x ra args\n-    movl %eax,(%edx)        //   stksz > argp argsz | ra stksz argsz x ra args\n-\n-    calll .L$pic_ref_pt_0\n-.L$pic_ref_pt_0:\n-    popl %eax\n-\n-    movl NEW_STACK_ADDR,%eax\n-    movl %eax,(%esp)\n-    movl %edx,4(%esp)\n-    // FIXME: Don't understand why just _here_ I have to say @PLT\n-    calll UPCALL_CALL_C_STACK@PLT\n-\n-    movl 12(%esp),%edx          // Grab the return pointer.\n-    addl $RETURN_OFFSET,%edx    // Skip past the `add esp,4` and the `ret`.\n-\n-    movl %eax,%esp          // Switch stacks.\n-    calll *%edx             // Re-enter the function that called us.\n-\n-    // Now the function that called us has returned, so we need to delete the\n-    // old stack space.\n-\n-    calll RUST_GET_PREV_STACK\n-    movl %eax,%esp          // Switch back to the old stack.\n-\n-    movl $0,(%esp)\n-    calll UPCALL_ALLOC_C_STACK\n-\n-    calll .L$pic_ref_pt_1\n-.L$pic_ref_pt_1:\n-    popl %edx\n-\n-    movl DEL_STACK_ADDR,%edx\n-    movl %edx,(%esp)\n-    movl %eax,4(%esp)\n-    calll UPCALL_CALL_C_STACK\n-\n-    addl $12,%esp\n-    retl $8    //                      ra stksz argsz x ra args\n+\tpushl %ebp\n+\tmovl %esp, %ebp\n+\t\n+\t// FIXME (1226): main is compiled with the split-stack prologue,\n+\t// causing it to call __morestack, so we have to jump back out\n+\tsubl $24,%esp\n+\tcalll RUST_GET_TASK\n+\ttestl %eax,%eax\n+\tjz .L$bail\n+\n+\t// The arguments to rust_new_stack2\n+\tmovl %esp, 20(%esp) // Save the stack pointer\n+\tmovl 36(%esp),%eax  // Size of stack arguments\n+\tmovl %eax,16(%esp)\n+\tleal 44+ALIGNMENT(%esp),%eax // Address of stack arguments\n+\tmovl %eax,12(%esp)\n+\tmovl 32(%esp),%eax // The amount of stack needed\n+\tmovl %eax,8(%esp)\n+\n+\tmovl $RUST_NEW_STACK2,4(%esp)\n+\tleal 8(%esp), %eax\n+\tmovl %eax,(%esp)\n+\tcall UPCALL_CALL_C\n+\n+\tmovl 28(%esp),%edx          // Grab the return pointer.\n+\taddl $RETURN_OFFSET,%edx    // Skip past the `add esp,4` and the `ret`.\n+\n+\tmovl %eax,%esp          // Switch stacks.\n+\tcall *%edx             // Re-enter the function that called us.\n+\n+\t// Now the function that called us has returned, so we need to delete the\n+\t// old stack space.\n+\n+\t// NB: This is assuming we already have at least 2 words\n+\t// pushed onto the C stack. This is always true because\n+\t// Rust functions have implicit arguments.\n+\tmovl $RUST_GET_PREV_STACK,4(%esp)\n+\tmovl $0, (%esp)\n+\tcall UPCALL_CALL_C\n+\n+\t// Switch back to the rust stack\n+\tmovl %eax, %esp\n+\n+\tmovl $RUST_DEL_STACK,4(%esp)\n+\tmovl $0, (%esp)\n+\tcall UPCALL_CALL_C\n+\n+\taddl $24,%esp\n+\tpopl %ebp\n+\tretl $8\n \n .L$bail:\n-    movl 12(%esp),%edx\n-    addl $RETURN_OFFSET,%edx\n-    addl $12+4+8+ALIGNMENT,%esp\n-    jmpl *%edx\n+\tmovl 28(%esp),%edx\n+\taddl $RETURN_OFFSET,%edx\n+\t\n+\taddl $24, %esp\n+\tpopl %ebp\n+\taddl $4+8+ALIGNMENT,%esp\n+\t\n+\tjmpl *%edx\n \n \n #else"}]}