{"sha": "261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MWRhZjI3YzllNGI5MzMyYWM4ZDE3ZmM0Zjk5OTdmY2QxZGVkM2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-03-12T14:57:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-03-12T14:57:06Z"}, "message": "ignore higher-ranked WF requirements for trait objects\n\nIn the `issue-53548` test added in this commit, the `Box<dyn Trait>`\ntype is expanded to `Box<dyn Trait + 'static>`, but the generator\n\"witness\" that results is `for<'r> { Box<dyn Trait + 'r> }`. The WF\ncode was encountering an ICE (when debug-assertions were enabled) and\nan unexpected compilation error (without debug-asserions) when trying\nto process this `'r` region bound. In particular, to be WF, the region\nbound must meet the requirements of the trait, and hence we got\n`for<'r> { 'r: 'static }`. This would ICE because the `Binder`\nconstructor we were using was assering that no higher-ranked regions\nwere involved (because the WF code is supposed to skip those). The\nerror (if debug-asserions were disabled) came because we obviously\ncannot prove that `'r: 'static` for any region `'r`.  Pursuant with\nour \"lazy WF\" strategy for higher-ranked regions, the fix is not to\nrequire that `for<'r> { 'r: 'static }` holds (this is also analogous\nto what we would do for higher-ranked regions appearing within the\ntrait in other positions).", "tree": {"sha": "59a9bcae17dcb311373c59eeda031aee3f876dc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59a9bcae17dcb311373c59eeda031aee3f876dc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f", "html_url": "https://github.com/rust-lang/rust/commit/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4632e3345b77b3262dd2b33654d9d11d0fc0912d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4632e3345b77b3262dd2b33654d9d11d0fc0912d", "html_url": "https://github.com/rust-lang/rust/commit/4632e3345b77b3262dd2b33654d9d11d0fc0912d"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "fa35416cdd4982fd50f11376e006635eb97d111e", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f", "patch": "@@ -482,8 +482,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         //\n         // Note: in fact we only permit builtin traits, not `Bar<'d>`, I\n         // am looking forward to the future here.\n-\n-        if !data.has_escaping_bound_vars() {\n+        if !data.has_escaping_bound_vars() && !region.has_escaping_bound_vars() {\n             let implicit_bounds =\n                 object_region_bounds(self.infcx.tcx, data);\n "}, {"sha": "df11800731c72bb3d1b661c0f54911767190bcb4", "filename": "src/test/ui/generator/issue-53548-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548-1.rs?ref=261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f", "patch": "@@ -0,0 +1,20 @@\n+// A variant of #53548 that does not actually require generators,\n+// but which encountered the same ICE/error. See `issue-53548.rs`\n+// for details.\n+//\n+// compile-pass\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+\n+trait Trait: 'static {}\n+\n+struct Store<C> {\n+    inner: Rc<RefCell<Option<C>>>,\n+}\n+\n+fn main() {\n+    let store = Store::<Box<for<'a> fn(&(dyn Trait + 'a))>> {\n+        inner: Default::default(),\n+    };\n+}"}, {"sha": "00fdb91faab760fd6ad19928f6ab1d3f5459daf3", "filename": "src/test/ui/generator/issue-53548.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-53548.rs?ref=261daf27c9e4b9332ac8d17fc4f9997fcd1ded3f", "patch": "@@ -0,0 +1,39 @@\n+// Regression test for #53548. The `Box<dyn Trait>` type below is\n+// expanded to `Box<dyn Trait + 'static>`, but the generator \"witness\"\n+// that results is `for<'r> { Box<dyn Trait + 'r> }`. The WF code was\n+// encountering an ICE (when debug-assertions were enabled) and an\n+// unexpected compilation error (without debug-asserions) when trying\n+// to process this `'r` region bound. In particular, to be WF, the\n+// region bound must meet the requirements of the trait, and hence we\n+// got `for<'r> { 'r: 'static }`. This would ICE because the `Binder`\n+// constructor we were using was assering that no higher-ranked\n+// regions were involved (because the WF code is supposed to skip\n+// those). The error (if debug-asserions were disabled) came because\n+// we obviously cannot prove that `'r: 'static` for any region `'r`.\n+// Pursuant with our \"lazy WF\" strategy for higher-ranked regions, the\n+// fix is not to require that `for<'r> { 'r: 'static }` holds (this is\n+// also analogous to what we would do for higher-ranked regions\n+// appearing within the trait in other positions).\n+//\n+// compile-pass\n+\n+#![feature(generators)]\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+\n+trait Trait: 'static {}\n+\n+struct Store<C> {\n+    inner: Rc<RefCell<Option<C>>>,\n+}\n+\n+fn main() {\n+    Box::new(static move || {\n+        let store = Store::<Box<dyn Trait>> {\n+            inner: Default::default(),\n+        };\n+        yield ();\n+    });\n+}\n+"}]}