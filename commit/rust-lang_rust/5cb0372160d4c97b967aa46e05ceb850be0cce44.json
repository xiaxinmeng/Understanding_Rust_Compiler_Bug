{"sha": "5cb0372160d4c97b967aa46e05ceb850be0cce44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYjAzNzIxNjBkNGM5N2I5NjdhYTQ2ZTA1Y2ViODUwYmUwY2NlNDQ=", "commit": {"author": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-19T07:49:21Z"}, "committer": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-27T01:28:30Z"}, "message": "Remove the stored obligation in OverflowError to simplify things\n\nWe will shortly refactor things so that it is no longer needed", "tree": {"sha": "11e6159ff65b7fa4bfc2defa7445dbb1165ae1ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11e6159ff65b7fa4bfc2defa7445dbb1165ae1ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cb0372160d4c97b967aa46e05ceb850be0cce44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb0372160d4c97b967aa46e05ceb850be0cce44", "html_url": "https://github.com/rust-lang/rust/commit/5cb0372160d4c97b967aa46e05ceb850be0cce44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cb0372160d4c97b967aa46e05ceb850be0cce44/comments", "author": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5535fc7ddf73f03c3adf2ea4097a171b2f5587f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f", "html_url": "https://github.com/rust-lang/rust/commit/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "285d530a38a69cab5e6eda57c2f29f9f5470d651", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5cb0372160d4c97b967aa46e05ceb850be0cce44", "patch": "@@ -831,7 +831,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 err.struct_error(self.tcx, span, \"constant expression\")\n             }\n \n-            Overflow(_) => {\n+            Overflow => {\n                 bug!(\"overflow should be handled before the `report_selection_error` path\");\n             }\n         };"}, {"sha": "dd5208e908e19e117243b7a13280b27abeff8a7f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5cb0372160d4c97b967aa46e05ceb850be0cce44", "patch": "@@ -362,8 +362,7 @@ pub enum SelectionError<'tcx> {\n                                 ty::error::TypeError<'tcx>),\n     TraitNotObjectSafe(DefId),\n     ConstEvalFailure(ConstEvalErr<'tcx>),\n-    // upon overflow, stores the obligation that hit the recursion limit\n-    Overflow(TraitObligation<'tcx>),\n+    Overflow,\n }\n \n pub struct FulfillmentError<'tcx> {"}, {"sha": "fdf6dcf4bf37d9096f05b11a687138fe1f33b21a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5cb0372160d4c97b967aa46e05ceb850be0cce44", "patch": "@@ -421,14 +421,13 @@ impl_stable_hash_for!(enum self::EvaluationResult {\n     EvaluatedToErr\n });\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n-/// Indicates that trait evaluation caused overflow. Stores the obligation\n-/// that hit the recursion limit.\n-pub struct OverflowError<'tcx>(pub TraitObligation<'tcx>);\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+/// Indicates that trait evaluation caused overflow.\n+pub struct OverflowError;\n \n-impl<'tcx> From<OverflowError<'tcx>> for SelectionError<'tcx> {\n-    fn from(OverflowError(o): OverflowError<'tcx>) -> SelectionError<'tcx> {\n-        SelectionError::Overflow(o)\n+impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n+    fn from(OverflowError: OverflowError) -> SelectionError<'tcx> {\n+        SelectionError::Overflow\n     }\n }\n \n@@ -573,15 +572,15 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         assert!(self.query_mode == TraitQueryMode::Standard);\n \n         let candidate = match self.candidate_from_obligation(&stack) {\n-            Err(SelectionError::Overflow(_)) =>\n+            Err(SelectionError::Overflow) =>\n                 bug!(\"Overflow should be caught earlier in standard query mode\"),\n             Err(e) => { return Err(e); },\n             Ok(None) => { return Ok(None); },\n             Ok(Some(candidate)) => candidate\n         };\n \n         match self.confirm_candidate(obligation, candidate) {\n-            Err(SelectionError::Overflow(_)) =>\n+            Err(SelectionError::Overflow) =>\n                 bug!(\"Overflow should be caught earlier in standard query mode\"),\n             Err(e) => Err(e),\n             Ok(candidate) => Ok(Some(candidate))\n@@ -619,7 +618,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     /// an `EvaluationResult`.\n     pub fn evaluate_obligation_recursively(&mut self,\n                                            obligation: &PredicateObligation<'tcx>)\n-                                           -> Result<EvaluationResult, OverflowError<'tcx>>\n+                                           -> Result<EvaluationResult, OverflowError>\n     {\n         self.probe(|this, _| {\n             this.evaluate_predicate_recursively(TraitObligationStackList::empty(), obligation)\n@@ -632,7 +631,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn evaluate_predicates_recursively<'a,'o,I>(&mut self,\n                                                 stack: TraitObligationStackList<'o, 'tcx>,\n                                                 predicates: I)\n-                                                -> Result<EvaluationResult, OverflowError<'tcx>>\n+                                                -> Result<EvaluationResult, OverflowError>\n         where I : IntoIterator<Item=&'a PredicateObligation<'tcx>>, 'tcx:'a\n     {\n         let mut result = EvaluatedToOk;\n@@ -654,7 +653,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn evaluate_predicate_recursively<'o>(&mut self,\n                                           previous_stack: TraitObligationStackList<'o, 'tcx>,\n                                           obligation: &PredicateObligation<'tcx>)\n-                                           -> Result<EvaluationResult, OverflowError<'tcx>>\n+                                           -> Result<EvaluationResult, OverflowError>\n     {\n         debug!(\"evaluate_predicate_recursively({:?})\",\n                obligation);\n@@ -775,7 +774,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn evaluate_trait_predicate_recursively<'o>(&mut self,\n                                                 previous_stack: TraitObligationStackList<'o, 'tcx>,\n                                                 mut obligation: TraitObligation<'tcx>)\n-                                                -> Result<EvaluationResult, OverflowError<'tcx>>\n+                                                -> Result<EvaluationResult, OverflowError>\n     {\n         debug!(\"evaluate_trait_predicate_recursively({:?})\",\n                obligation);\n@@ -810,7 +809,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n     fn evaluate_stack<'o>(&mut self,\n                           stack: &TraitObligationStack<'o, 'tcx>)\n-                          -> Result<EvaluationResult, OverflowError<'tcx>>\n+                          -> Result<EvaluationResult, OverflowError>\n     {\n         // In intercrate mode, whenever any of the types are unbound,\n         // there can always be an impl. Even if there are no impls in\n@@ -921,7 +920,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         match self.candidate_from_obligation(stack) {\n             Ok(Some(c)) => self.evaluate_candidate(stack, &c),\n             Ok(None) => Ok(EvaluatedToAmbig),\n-            Err(Overflow(o)) => Err(OverflowError(o)),\n+            Err(Overflow) => Err(OverflowError),\n             Err(..) => Ok(EvaluatedToErr)\n         }\n     }\n@@ -960,7 +959,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn evaluate_candidate<'o>(&mut self,\n                               stack: &TraitObligationStack<'o, 'tcx>,\n                               candidate: &SelectionCandidate<'tcx>)\n-                              -> Result<EvaluationResult, OverflowError<'tcx>>\n+                              -> Result<EvaluationResult, OverflowError>\n     {\n         debug!(\"evaluate_candidate: depth={} candidate={:?}\",\n                stack.obligation.recursion_depth, candidate);\n@@ -1056,7 +1055,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     self.infcx().report_overflow_error(&stack.obligation, true);\n                 },\n                 TraitQueryMode::Canonical => {\n-                    return Err(Overflow(stack.obligation.clone()));\n+                    return Err(Overflow);\n                 },\n             }\n         }\n@@ -1144,7 +1143,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                             .vec\n                             .iter()\n                             .map(|c| self.evaluate_candidate(stack, &c))\n-                            .collect::<Result<Vec<_>, OverflowError<'_>>>()?\n+                            .collect::<Result<Vec<_>, OverflowError>>()?\n                             .iter()\n                             .all(|r| !r.may_apply());\n                         if !candidate_set.ambiguous && no_candidates_apply {\n@@ -1224,7 +1223,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     evaluation: eval,\n                 })),\n                 Ok(_) => Ok(None),\n-                Err(OverflowError(o)) => Err(Overflow(o)),\n+                Err(OverflowError) => Err(Overflow),\n             })\n             .collect();\n \n@@ -1621,7 +1620,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn evaluate_where_clause<'o>(&mut self,\n                                  stack: &TraitObligationStack<'o, 'tcx>,\n                                  where_clause_trait_ref: ty::PolyTraitRef<'tcx>)\n-                                 -> Result<EvaluationResult, OverflowError<'tcx>>\n+                                 -> Result<EvaluationResult, OverflowError>\n     {\n         self.probe(move |this, _| {\n             match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {"}, {"sha": "d7e42655bbb5be35eca4e6b14c757a7778c0a167", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=5cb0372160d4c97b967aa46e05ceb850be0cce44", "patch": "@@ -177,7 +177,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> {\n             super::ConstEvalFailure(ref err) => {\n                 tcx.lift(err).map(super::ConstEvalFailure)\n             }\n-            super::Overflow(_) => bug!() // FIXME: ape ConstEvalFailure?\n+            super::Overflow => bug!() // FIXME: ape ConstEvalFailure?\n         }\n     }\n }"}, {"sha": "f346bb8dc996b2a1021ce0a69d76ac9d1f4969c3", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb0372160d4c97b967aa46e05ceb850be0cce44/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=5cb0372160d4c97b967aa46e05ceb850be0cce44", "patch": "@@ -32,8 +32,8 @@ crate fn evaluate_obligation<'tcx>(\n \n         match selcx.evaluate_obligation_recursively(&obligation) {\n             Ok(result) => result,\n-            Err(OverflowError(o)) => {\n-                infcx.report_overflow_error(&o, true)\n+            Err(OverflowError) => {\n+                infcx.report_overflow_error(&obligation, true)\n             }\n         }\n     })"}]}