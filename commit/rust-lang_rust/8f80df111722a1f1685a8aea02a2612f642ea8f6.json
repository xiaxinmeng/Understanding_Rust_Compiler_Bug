{"sha": "8f80df111722a1f1685a8aea02a2612f642ea8f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmODBkZjExMTcyMmExZjE2ODVhOGFlYTAyYTI2MTJmNjQyZWE4ZjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-05-18T19:42:39Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-05-18T19:42:39Z"}, "message": " Querify `importable_locations_in_crate`\n\n This brings the time needed to compute the `add_missing_impl_members`\nassist down from ~5 minutes to 20 seconds", "tree": {"sha": "aa03924999c8f36511de12b5002e34ea0d0993ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa03924999c8f36511de12b5002e34ea0d0993ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f80df111722a1f1685a8aea02a2612f642ea8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f80df111722a1f1685a8aea02a2612f642ea8f6", "html_url": "https://github.com/rust-lang/rust/commit/8f80df111722a1f1685a8aea02a2612f642ea8f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f80df111722a1f1685a8aea02a2612f642ea8f6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71e94b1d0bf7c58aa377513f010fcb3f56081f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/71e94b1d0bf7c58aa377513f010fcb3f56081f5f", "html_url": "https://github.com/rust-lang/rust/commit/71e94b1d0bf7c58aa377513f010fcb3f56081f5f"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "498a4c9172496820e60e951f6f0c9a6607872ab5", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f80df111722a1f1685a8aea02a2612f642ea8f6/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f80df111722a1f1685a8aea02a2612f642ea8f6/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=8f80df111722a1f1685a8aea02a2612f642ea8f6", "patch": "@@ -1,7 +1,7 @@\n //! Defines database & queries for name resolution.\n use std::sync::Arc;\n \n-use hir_expand::{db::AstDatabase, HirFileId};\n+use hir_expand::{db::AstDatabase, name::Name, HirFileId};\n use ra_db::{salsa, CrateId, SourceDatabase, Upcast};\n use ra_prof::profile;\n use ra_syntax::SmolStr;\n@@ -12,9 +12,12 @@ use crate::{\n     body::{scope::ExprScopes, Body, BodySourceMap},\n     data::{ConstData, FunctionData, ImplData, StaticData, TraitData, TypeAliasData},\n     docs::Documentation,\n+    find_path,\n     generics::GenericParams,\n+    item_scope::ItemInNs,\n     lang_item::{LangItemTarget, LangItems},\n     nameres::{raw::RawItems, CrateDefMap},\n+    visibility::Visibility,\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n     GenericDefId, ImplId, ImplLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n     TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc,\n@@ -108,6 +111,13 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     // Remove this query completely, in favor of `Attrs::docs` method\n     #[salsa::invoke(Documentation::documentation_query)]\n     fn documentation(&self, def: AttrDefId) -> Option<Documentation>;\n+\n+    #[salsa::invoke(find_path::importable_locations_in_crate)]\n+    fn importable_locations_of(\n+        &self,\n+        item: ItemInNs,\n+        krate: CrateId,\n+    ) -> Arc<[(ModuleId, Name, Visibility)]>;\n }\n \n fn crate_def_map_wait(db: &impl DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {"}, {"sha": "1ca20fabd043057cd6e9104bedcfad495a299d32", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f80df111722a1f1685a8aea02a2612f642ea8f6/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f80df111722a1f1685a8aea02a2612f642ea8f6/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=8f80df111722a1f1685a8aea02a2612f642ea8f6", "patch": "@@ -8,6 +8,7 @@ use crate::{\n     CrateId, ModuleDefId, ModuleId,\n };\n use hir_expand::name::{known, AsName, Name};\n+use std::sync::Arc;\n use test_utils::tested_by;\n \n const MAX_PATH_LEN: usize = 15;\n@@ -45,6 +46,7 @@ impl ModPath {\n /// Find a path that can be used to refer to a certain item. This can depend on\n /// *from where* you're referring to the item, hence the `from` parameter.\n pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n+    let _p = ra_prof::profile(\"find_path\");\n     find_path_inner(db, item, from, MAX_PATH_LEN)\n }\n \n@@ -198,7 +200,7 @@ fn find_importable_locations(\n         .chain(crate_graph[from.krate].dependencies.iter().map(|dep| dep.crate_id))\n     {\n         result.extend(\n-            importable_locations_in_crate(db, item, krate)\n+            db.importable_locations_of(item, krate)\n                 .iter()\n                 .filter(|(_, _, vis)| vis.is_visible_from(db, from))\n                 .map(|(m, n, _)| (*m, n.clone())),\n@@ -213,11 +215,11 @@ fn find_importable_locations(\n ///\n /// Note that the crate doesn't need to be the one in which the item is defined;\n /// it might be re-exported in other crates.\n-fn importable_locations_in_crate(\n+pub(crate) fn importable_locations_in_crate(\n     db: &dyn DefDatabase,\n     item: ItemInNs,\n     krate: CrateId,\n-) -> Vec<(ModuleId, Name, Visibility)> {\n+) -> Arc<[(ModuleId, Name, Visibility)]> {\n     let def_map = db.crate_def_map(krate);\n     let mut result = Vec::new();\n     for (local_id, data) in def_map.modules.iter() {\n@@ -243,7 +245,8 @@ fn importable_locations_in_crate(\n             result.push((ModuleId { krate, local_id }, name.clone(), vis));\n         }\n     }\n-    result\n+\n+    Arc::from(result)\n }\n \n #[cfg(test)]"}]}