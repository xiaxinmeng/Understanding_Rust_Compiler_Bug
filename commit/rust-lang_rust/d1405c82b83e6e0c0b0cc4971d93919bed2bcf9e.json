{"sha": "d1405c82b83e6e0c0b0cc4971d93919bed2bcf9e", "node_id": "C_kwDOAAsO6NoAKGQxNDA1YzgyYjgzZTZlMGMwYjBjYzQ5NzFkOTM5MTliZWQyYmNmOWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-22T04:20:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-22T04:20:59Z"}, "message": "Rollup merge of #106144 - tgross35:patch-1, r=Mark-Simulacrum\n\nImprove the documentation of `black_box`\n\nThere don't seem to be many great resources on how `black_box` should be used, so I added some information here", "tree": {"sha": "d031a0a2fef1279891d2e2ff2c9383a49e67f137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d031a0a2fef1279891d2e2ff2c9383a49e67f137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1405c82b83e6e0c0b0cc4971d93919bed2bcf9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjzLmrCRBK7hj4Ov3rIwAAffcIAIqIB55llosFIVgFkjgsctx3\npMrBT0jaIq4m0WESBKuszaCBoFj9l6KOmgSKUl4rp6mfyDVWKaTX6ZwUVcHFRCyk\nlG3Qo0x3UMJfzAGO00U1qo3XBI1LpI6+tg5kjB/+I70CVoySHAflAeQ99uq1Fmmy\nZffZYJmsQutwshRQgml4FZn54u592sQN8qa+6a41uXi0fpFNEdfI522hOVLjCr5y\nUaLSBXNmWUyZhRDSmcGnmpn5qzxff9aUJae1jUGksZilfogVA1FLZMFXEb9A84hd\nTeHspeL6GtOPu0vwzA6nO7RY+uFgLhteDmI845Cx4nfFzzKDvBx0Hz6gHPUoR0Q=\n=Xmk0\n-----END PGP SIGNATURE-----\n", "payload": "tree d031a0a2fef1279891d2e2ff2c9383a49e67f137\nparent 2504c8d1ee4f904d3ecd95ec19cbed22ed046295\nparent 13e25b82f0d3afc7bcfc6cd1617e8e4287172960\nauthor Michael Goulet <michael@errs.io> 1674361259 -0500\ncommitter GitHub <noreply@github.com> 1674361259 -0500\n\nRollup merge of #106144 - tgross35:patch-1, r=Mark-Simulacrum\n\nImprove the documentation of `black_box`\n\nThere don't seem to be many great resources on how `black_box` should be used, so I added some information here\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1405c82b83e6e0c0b0cc4971d93919bed2bcf9e", "html_url": "https://github.com/rust-lang/rust/commit/d1405c82b83e6e0c0b0cc4971d93919bed2bcf9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1405c82b83e6e0c0b0cc4971d93919bed2bcf9e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2504c8d1ee4f904d3ecd95ec19cbed22ed046295", "url": "https://api.github.com/repos/rust-lang/rust/commits/2504c8d1ee4f904d3ecd95ec19cbed22ed046295", "html_url": "https://github.com/rust-lang/rust/commit/2504c8d1ee4f904d3ecd95ec19cbed22ed046295"}, {"sha": "13e25b82f0d3afc7bcfc6cd1617e8e4287172960", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e25b82f0d3afc7bcfc6cd1617e8e4287172960", "html_url": "https://github.com/rust-lang/rust/commit/13e25b82f0d3afc7bcfc6cd1617e8e4287172960"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "5a76e866923366e8716afeb1ddeb3ecc1e470ac7", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d1405c82b83e6e0c0b0cc4971d93919bed2bcf9e/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1405c82b83e6e0c0b0cc4971d93919bed2bcf9e/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=d1405c82b83e6e0c0b0cc4971d93919bed2bcf9e", "patch": "@@ -219,6 +219,75 @@ pub fn spin_loop() {\n /// backend used. Programs cannot rely on `black_box` for *correctness* in any way.\n ///\n /// [`std::convert::identity`]: crate::convert::identity\n+///\n+/// # When is this useful?\n+///\n+/// First and foremost: `black_box` does _not_ guarantee any exact behavior and, in some cases, may\n+/// do nothing at all. As such, it **must not be relied upon to control critical program behavior.**\n+/// This _immediately_ precludes any direct use of this function for cryptographic or security\n+/// purposes.\n+///\n+/// While not suitable in those mission-critical cases, `back_box`'s functionality can generally be\n+/// relied upon for benchmarking, and should be used there. It will try to ensure that the\n+/// compiler doesn't optimize away part of the intended test code based on context. For\n+/// example:\n+///\n+/// ```\n+/// fn contains(haystack: &[&str], needle: &str) -> bool {\n+///     haystack.iter().any(|x| x == &needle)\n+/// }\n+///\n+/// pub fn benchmark() {\n+///     let haystack = vec![\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"];\n+///     let needle = \"ghi\";\n+///     for _ in 0..10 {\n+///         contains(&haystack, needle);\n+///     }\n+/// }\n+/// ```\n+///\n+/// The compiler could theoretically make optimizations like the following:\n+///\n+/// - `needle` and `haystack` are always the same, move the call to `contains` outside the loop and\n+///   delete the loop\n+/// - Inline `contains`\n+/// - `needle` and `haystack` have values known at compile time, `contains` is always true. Remove\n+///   the call and replace with `true`\n+/// - Nothing is done with the result of `contains`: delete this function call entirely\n+/// - `benchmark` now has no purpose: delete this function\n+///\n+/// It is not likely that all of the above happens, but the compiler is definitely able to make some\n+/// optimizations that could result in a very inaccurate benchmark. This is where `black_box` comes\n+/// in:\n+///\n+/// ```\n+/// use std::hint::black_box;\n+///\n+/// // Same `contains` function\n+/// fn contains(haystack: &[&str], needle: &str) -> bool {\n+///     haystack.iter().any(|x| x == &needle)\n+/// }\n+///\n+/// pub fn benchmark() {\n+///     let haystack = vec![\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"];\n+///     let needle = \"ghi\";\n+///     for _ in 0..10 {\n+///         // Adjust our benchmark loop contents\n+///         black_box(contains(black_box(&haystack), black_box(needle)));\n+///     }\n+/// }\n+/// ```\n+///\n+/// This essentially tells the compiler to block optimizations across any calls to `black_box`. So,\n+/// it now:\n+///\n+/// - Treats both arguments to `contains` as unpredictable: the body of `contains` can no longer be\n+///   optimized based on argument values\n+/// - Treats the call to `contains` and its result as volatile: the body of `benchmark` cannot\n+///   optimize this away\n+///\n+/// This makes our benchmark much more realistic to how the function would be used in situ, where\n+/// arguments are usually not known at compile time and the result is used in some way.\n #[inline]\n #[stable(feature = \"bench_black_box\", since = \"1.66.0\")]\n #[rustc_const_unstable(feature = \"const_black_box\", issue = \"none\")]"}]}