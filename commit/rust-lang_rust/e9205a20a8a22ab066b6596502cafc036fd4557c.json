{"sha": "e9205a20a8a22ab066b6596502cafc036fd4557c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MjA1YTIwYThhMjJhYjA2NmI2NTk2NTAyY2FmYzAzNmZkNDU1N2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-13T08:47:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-13T08:47:22Z"}, "message": "Auto merge of #27803 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #27699, #27757\n- Failed merges:", "tree": {"sha": "642dd50698ad69651b16002a5fb903c723458ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/642dd50698ad69651b16002a5fb903c723458ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9205a20a8a22ab066b6596502cafc036fd4557c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9205a20a8a22ab066b6596502cafc036fd4557c", "html_url": "https://github.com/rust-lang/rust/commit/e9205a20a8a22ab066b6596502cafc036fd4557c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9205a20a8a22ab066b6596502cafc036fd4557c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3cd022ef77d384cfef15460560f8cb86ac41e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3cd022ef77d384cfef15460560f8cb86ac41e2", "html_url": "https://github.com/rust-lang/rust/commit/ea3cd022ef77d384cfef15460560f8cb86ac41e2"}, {"sha": "0f3fada1184aebdc30f102df59e43313e27b3e25", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3fada1184aebdc30f102df59e43313e27b3e25", "html_url": "https://github.com/rust-lang/rust/commit/0f3fada1184aebdc30f102df59e43313e27b3e25"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "0bc439529260ccab1236c2b4f3d3b53adfaa6989", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9205a20a8a22ab066b6596502cafc036fd4557c/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9205a20a8a22ab066b6596502cafc036fd4557c/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=e9205a20a8a22ab066b6596502cafc036fd4557c", "patch": "@@ -138,6 +138,27 @@ Book:\n https://doc.rust-lang.org/book/ownership.html\n \"##,\n \n+E0383: r##\"\n+This error occurs when an attempt is made to partially reinitialize a\n+structure that is currently uninitialized.\n+\n+For example, this can happen when a drop has taken place:\n+\n+```\n+let mut x = Foo { a: 1 };\n+drop(x); // `x` is now uninitialized\n+x.a = 2; // error, partial reinitialization of uninitialized structure `t`\n+```\n+\n+This error can be fixed by fully reinitializing the structure in question:\n+\n+```\n+let mut x = Foo { a: 1 };\n+drop(x);\n+x = Foo { a: 2 };\n+```\n+\"##,\n+\n E0384: r##\"\n This error occurs when an attempt is made to reassign an immutable variable.\n For example:\n@@ -217,7 +238,6 @@ https://doc.rust-lang.org/std/cell/\n }\n \n register_diagnostics! {\n-    E0383, // partial reinitialization of uninitialized structure\n     E0385, // {} in an aliasable location\n     E0386, // {} in an immutable container\n     E0388, // {} in a static location"}, {"sha": "fd1a5595e8f1f3e8affb1af7874438c785c8a3d1", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e9205a20a8a22ab066b6596502cafc036fd4557c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9205a20a8a22ab066b6596502cafc036fd4557c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e9205a20a8a22ab066b6596502cafc036fd4557c", "patch": "@@ -2429,6 +2429,77 @@ fn main() {\n ```\n \"##,\n \n+E0366: r##\"\n+An attempt was made to implement `Drop` on a concrete specialization of a\n+generic type. An example is shown below:\n+\n+```\n+struct Foo<T> {\n+    t: T\n+}\n+\n+impl Drop for Foo<u32> {\n+    fn drop(&mut self) {}\n+}\n+```\n+\n+This code is not legal: it is not possible to specialize `Drop` to a subset of\n+implementations of a generic type. One workaround for this is to wrap the\n+generic type, as shown below:\n+\n+```\n+struct Foo<T> {\n+    t: T\n+}\n+\n+struct Bar {\n+    t: Foo<u32>\n+}\n+\n+impl Drop for Bar {\n+    fn drop(&mut self) {}\n+}\n+```\n+\"##,\n+\n+E0367: r##\"\n+An attempt was made to implement `Drop` on a specialization of a generic type.\n+An example is shown below:\n+\n+```\n+trait Foo{}\n+\n+struct MyStruct<T> {\n+    t: T\n+}\n+\n+impl<T: Foo> Drop for MyStruct<T> {\n+    fn drop(&mut self) {}\n+}\n+```\n+\n+This code is not legal: it is not possible to specialize `Drop` to a subset of\n+implementations of a generic type. In order for this code to work, `MyStruct`\n+must also require that `T` implements `Foo`. Alternatively, another option is\n+to wrap the generic type in another that specializes appropriately:\n+\n+```\n+trait Foo{}\n+\n+struct MyStruct<T> {\n+    t: T\n+}\n+\n+struct MyStructWrapper<T: Foo> {\n+    t: MyStruct<T>\n+}\n+\n+impl <T: Foo> Drop for MyStructWrapper<T> {\n+    fn drop(&mut self) {}\n+}\n+```\n+\"##,\n+\n E0368: r##\"\n This error indicates that a binary assignment operator like `+=` or `^=` was\n applied to the wrong types. For example:\n@@ -2659,8 +2730,6 @@ register_diagnostics! {\n     E0325, // implemented an associated type when another trait item expected\n     E0328, // cannot implement Unsize explicitly\n     E0329, // associated const depends on type parameter or Self.\n-    E0366, // dropck forbid specialization to concrete type or region\n-    E0367, // dropck forbid specialization to predicate not in struct/enum\n     E0369, // binary operation `<op>` cannot be applied to types\n     E0370, // discriminant overflow\n     E0374, // the trait `CoerceUnsized` may only be implemented for a coercion"}]}