{"sha": "724cf41eb1a4fa529a5b1fe629d077dbb217019f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNGNmNDFlYjFhNGZhNTI5YTViMWZlNjI5ZDA3N2RiYjIxNzAxOWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-23T21:43:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-23T21:43:37Z"}, "message": "use checked arithmetic in intrptrcast", "tree": {"sha": "8ad8001f496e12d6bd82cf8b1f1fb56ddbb2fd45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad8001f496e12d6bd82cf8b1f1fb56ddbb2fd45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/724cf41eb1a4fa529a5b1fe629d077dbb217019f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/724cf41eb1a4fa529a5b1fe629d077dbb217019f", "html_url": "https://github.com/rust-lang/rust/commit/724cf41eb1a4fa529a5b1fe629d077dbb217019f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/724cf41eb1a4fa529a5b1fe629d077dbb217019f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ca345c36b037c4cdfe1a9f165464e7f815e2c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ca345c36b037c4cdfe1a9f165464e7f815e2c1", "html_url": "https://github.com/rust-lang/rust/commit/d5ca345c36b037c4cdfe1a9f165464e7f815e2c1"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "1247150cc1199c1b20f75cfbc979ba57b618449d", "filename": "src/intptrcast.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/724cf41eb1a4fa529a5b1fe629d077dbb217019f/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724cf41eb1a4fa529a5b1fe629d077dbb217019f/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=724cf41eb1a4fa529a5b1fe629d077dbb217019f", "patch": "@@ -95,7 +95,8 @@ impl<'mir, 'tcx> GlobalState {\n                     rng.gen_range(0, 16)\n                 };\n                 // From next_base_addr + slack, round up to adjust for alignment.\n-                let base_addr = Self::align_addr(global_state.next_base_addr + slack, align.bytes());\n+                let base_addr = global_state.next_base_addr.checked_add(slack).unwrap();\n+                let base_addr = Self::align_addr(base_addr, align.bytes());\n                 entry.insert(base_addr);\n                 trace!(\n                     \"Assigning base address {:#x} to allocation {:?} (slack: {}, align: {})\",\n@@ -104,7 +105,7 @@ impl<'mir, 'tcx> GlobalState {\n \n                 // Remember next base address.  If this allocation is zero-sized, leave a gap\n                 // of at least 1 to avoid two allocations having the same base address.\n-                global_state.next_base_addr = base_addr + max(size.bytes(), 1);\n+                global_state.next_base_addr = base_addr.checked_add(max(size.bytes(), 1)).unwrap();\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n                 global_state.int_to_ptr_map.push((base_addr, ptr.alloc_id)); \n@@ -124,7 +125,7 @@ impl<'mir, 'tcx> GlobalState {\n     fn align_addr(addr: u64, align: u64) -> u64 {\n         match addr % align {\n             0 => addr,\n-            rem => addr + align - rem\n+            rem => addr.checked_add(align).unwrap() - rem\n         }\n     }\n }"}]}