{"sha": "f3a9de9b08659e20ce7c282ed77bc43ddd149107", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYTlkZTliMDg2NTllMjBjZTdjMjgyZWQ3N2JjNDNkZGQxNDkxMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T00:00:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T00:00:52Z"}, "message": "Auto merge of #75048 - eggyal:force-no-tco-start-backtrace-frame, r=Mark-Simulacrum\n\nPrevent `__rust_begin_short_backtrace` frames from being tail-call optimised away\n\nI've stumbled across some situations where there (unexpectedly) was no `__rust_begin_short_backtrace` frame on the stack during unwinding.\n\nOn closer examination, it appeared that the calls to that function had been tail-call optimised away.\n\nThis PR follows [@bjorn3's suggestion on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Disabling.20tail.20call.20optimisation.3F/near/205699133), by adding calls to `black_box` that hint to rustc not to perform TCO.\n\nFixes #47429", "tree": {"sha": "09288128bb819336b9043105d0df45660071ebb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09288128bb819336b9043105d0df45660071ebb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a9de9b08659e20ce7c282ed77bc43ddd149107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a9de9b08659e20ce7c282ed77bc43ddd149107", "html_url": "https://github.com/rust-lang/rust/commit/f3a9de9b08659e20ce7c282ed77bc43ddd149107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a9de9b08659e20ce7c282ed77bc43ddd149107/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d1b0d9800d922b0451921d2ce17e6ae665d5b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d1b0d9800d922b0451921d2ce17e6ae665d5b4", "html_url": "https://github.com/rust-lang/rust/commit/c2d1b0d9800d922b0451921d2ce17e6ae665d5b4"}, {"sha": "5792840bf52e4cf77ebb7b3bd93e9c90dd23f4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5792840bf52e4cf77ebb7b3bd93e9c90dd23f4e7", "html_url": "https://github.com/rust-lang/rust/commit/5792840bf52e4cf77ebb7b3bd93e9c90dd23f4e7"}], "stats": {"total": 86, "additions": 74, "deletions": 12}, "files": [{"sha": "21ab0faed3e5ad6ef1771c1c4f792117a7cf5a81", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=f3a9de9b08659e20ce7c282ed77bc43ddd149107", "patch": "@@ -434,7 +434,9 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n \n     let loc = info.location().unwrap(); // The current implementation always returns Some\n     let msg = info.message().unwrap(); // The current implementation always returns Some\n-    rust_panic_with_hook(&mut PanicPayload::new(msg), info.message(), loc);\n+    crate::sys_common::backtrace::__rust_end_short_backtrace(move || {\n+        rust_panic_with_hook(&mut PanicPayload::new(msg), info.message(), loc);\n+    })\n }\n \n /// This is the entry point of panicking for the non-format-string variants of\n@@ -453,7 +455,10 @@ pub fn begin_panic<M: Any + Send>(msg: M) -> ! {\n         intrinsics::abort()\n     }\n \n-    rust_panic_with_hook(&mut PanicPayload::new(msg), None, Location::caller());\n+    let loc = Location::caller();\n+    return crate::sys_common::backtrace::__rust_end_short_backtrace(move || {\n+        rust_panic_with_hook(&mut PanicPayload::new(msg), None, loc)\n+    });\n \n     struct PanicPayload<A> {\n         inner: Option<A>,"}, {"sha": "45af9f68a0f6b149c365f04b6ce6f4cea56d61f2", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=f3a9de9b08659e20ce7c282ed77bc43ddd149107", "patch": "@@ -48,9 +48,7 @@ fn lang_start_internal(\n         sys::args::init(argc, argv);\n \n         // Let's run some code!\n-        let exit_code = panic::catch_unwind(|| {\n-            sys_common::backtrace::__rust_begin_short_backtrace(move || main())\n-        });\n+        let exit_code = panic::catch_unwind(main);\n \n         sys_common::cleanup();\n         exit_code.unwrap_or(101) as isize\n@@ -64,5 +62,9 @@ fn lang_start<T: crate::process::Termination + 'static>(\n     argc: isize,\n     argv: *const *const u8,\n ) -> isize {\n-    lang_start_internal(&move || main().report(), argc, argv)\n+    lang_start_internal(\n+        &move || crate::sys_common::backtrace::__rust_begin_short_backtrace(main).report(),\n+        argc,\n+        argv,\n+    )\n }"}, {"sha": "1c5fbf7d70102fb30d9a3073a34c1082a771b6fd", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=f3a9de9b08659e20ce7c282ed77bc43ddd149107", "patch": "@@ -74,6 +74,8 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n     bt_fmt.add_context()?;\n     let mut idx = 0;\n     let mut res = Ok(());\n+    // Start immediately if we're not using a short backtrace.\n+    let mut start = print_fmt != PrintFmt::Short;\n     backtrace_rs::trace_unsynchronized(|frame| {\n         if print_fmt == PrintFmt::Short && idx > MAX_NB_FRAMES {\n             return false;\n@@ -89,16 +91,24 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n                         stop = true;\n                         return;\n                     }\n+                    if sym.contains(\"__rust_end_short_backtrace\") {\n+                        start = true;\n+                        return;\n+                    }\n                 }\n             }\n \n-            res = bt_fmt.frame().symbol(frame, symbol);\n+            if start {\n+                res = bt_fmt.frame().symbol(frame, symbol);\n+            }\n         });\n         if stop {\n             return false;\n         }\n         if !hit {\n-            res = bt_fmt.frame().print_raw(frame.ip(), None, None, None);\n+            if start {\n+                res = bt_fmt.frame().print_raw(frame.ip(), None, None, None);\n+            }\n         }\n \n         idx += 1;\n@@ -123,10 +133,29 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T\n where\n     F: FnOnce() -> T,\n-    F: Send,\n-    T: Send,\n {\n-    f()\n+    let result = f();\n+\n+    // prevent this frame from being tail-call optimised away\n+    crate::hint::black_box(());\n+\n+    result\n+}\n+\n+/// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`. Note that\n+/// this is only inline(never) when backtraces in libstd are enabled, otherwise\n+/// it's fine to optimize away.\n+#[cfg_attr(feature = \"backtrace\", inline(never))]\n+pub fn __rust_end_short_backtrace<F, T>(f: F) -> T\n+where\n+    F: FnOnce() -> T,\n+{\n+    let result = f();\n+\n+    // prevent this frame from being tail-call optimised away\n+    crate::hint::black_box(());\n+\n+    result\n }\n \n pub enum RustBacktrace {"}, {"sha": "6bd708ef48798832d5d7ccacc9e1676d623b6235", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=f3a9de9b08659e20ce7c282ed77bc43ddd149107", "patch": "@@ -514,7 +514,10 @@ pub fn run_test(\n /// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`.\n #[inline(never)]\n fn __rust_begin_short_backtrace<F: FnOnce()>(f: F) {\n-    f()\n+    f();\n+\n+    // prevent this frame from being tail-call optimised away\n+    black_box(());\n }\n \n fn run_test_in_process("}, {"sha": "1e8c38cc3424b3db37ca8b5fa8a0e07b21405126", "filename": "src/test/ui/panics/issue-47429-short-backtraces.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a9de9b08659e20ce7c282ed77bc43ddd149107/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs?ref=f3a9de9b08659e20ce7c282ed77bc43ddd149107", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for #47429: short backtraces were not terminating correctly\n+\n+// compile-flags: -O\n+// run-fail\n+// check-run-results\n+// exec-env:RUST_BACKTRACE=1\n+\n+// ignore-msvc see #62897 and `backtrace-debuginfo.rs` test\n+// ignore-android FIXME #17520\n+// ignore-cloudabi spawning processes is not supported\n+// ignore-openbsd no support for libbacktrace without filename\n+// ignore-wasm no panic or subprocess support\n+// ignore-emscripten no panic or subprocess support\n+// ignore-sgx no subprocess support\n+\n+fn main() {\n+    panic!()\n+}"}, {"sha": "99ee26fe55e331ccbdce41eb166d5c53e0e82c00", "filename": "src/test/ui/panics/issue-47429-short-backtraces.run.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3a9de9b08659e20ce7c282ed77bc43ddd149107/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.run.stderr?ref=f3a9de9b08659e20ce7c282ed77bc43ddd149107", "patch": "@@ -0,0 +1,5 @@\n+thread 'main' panicked at 'explicit panic', $DIR/issue-47429-short-backtraces.rs:17:5\n+stack backtrace:\n+   0: std::panicking::begin_panic\n+   1: issue_47429_short_backtraces::main\n+note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}]}