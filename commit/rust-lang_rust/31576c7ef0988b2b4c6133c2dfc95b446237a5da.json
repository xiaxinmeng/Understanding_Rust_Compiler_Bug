{"sha": "31576c7ef0988b2b4c6133c2dfc95b446237a5da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTc2YzdlZjA5ODhiMmI0YzYxMzNjMmRmYzk1YjQ0NjIzN2E1ZGE=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-02-07T20:00:31Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-02-10T20:20:08Z"}, "message": "Switch to `Ignore` output mode for () blocks\n\nCloses #11709\nCloses #11865", "tree": {"sha": "f12b15e539720966583f88dc4188b9486dbe5cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f12b15e539720966583f88dc4188b9486dbe5cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31576c7ef0988b2b4c6133c2dfc95b446237a5da", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31576c7ef0988b2b4c6133c2dfc95b446237a5da", "html_url": "https://github.com/rust-lang/rust/commit/31576c7ef0988b2b4c6133c2dfc95b446237a5da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31576c7ef0988b2b4c6133c2dfc95b446237a5da/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca40da8b55a04394f1db11b6c7410e49b63c6e04", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca40da8b55a04394f1db11b6c7410e49b63c6e04", "html_url": "https://github.com/rust-lang/rust/commit/ca40da8b55a04394f1db11b6c7410e49b63c6e04"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "90e3c19a07ee8045609be9c4eb4f483dcdca9e10", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/31576c7ef0988b2b4c6133c2dfc95b446237a5da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31576c7ef0988b2b4c6133c2dfc95b446237a5da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=31576c7ef0988b2b4c6133c2dfc95b446237a5da", "patch": "@@ -1510,16 +1510,19 @@ pub fn trans_closure<'a>(ccx: @CrateContext,\n     // emitting should be enabled.\n     debuginfo::start_emitting_source_locations(&fcx);\n \n+    let dest = match fcx.llretptr.get() {\n+        Some(e) => {expr::SaveIn(e)}\n+        None => {\n+            assert!(type_is_zero_size(bcx.ccx(), block_ty))\n+            expr::Ignore\n+        }\n+    };\n+\n     // This call to trans_block is the place where we bridge between\n     // translation calls that don't have a return value (trans_crate,\n     // trans_mod, trans_item, et cetera) and those that do\n     // (trans_block, trans_expr, et cetera).\n-    if body.expr.is_none() || type_is_zero_size(bcx.ccx(), block_ty) {\n-        bcx = controlflow::trans_block(bcx, body, expr::Ignore);\n-    } else {\n-        let dest = expr::SaveIn(fcx.llretptr.get().unwrap());\n-        bcx = controlflow::trans_block(bcx, body, dest);\n-    }\n+    bcx = controlflow::trans_block(bcx, body, dest);\n \n     match fcx.llreturn.get() {\n         Some(_) => {"}, {"sha": "c867dc390f6a679f39333d47de901ea1baa0d5d5", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31576c7ef0988b2b4c6133c2dfc95b446237a5da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31576c7ef0988b2b4c6133c2dfc95b446237a5da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=31576c7ef0988b2b4c6133c2dfc95b446237a5da", "patch": "@@ -74,7 +74,7 @@ pub fn trans_stmt<'a>(cx: &'a Block<'a>,\n \n pub fn trans_block<'a>(bcx: &'a Block<'a>,\n                        b: &ast::Block,\n-                       dest: expr::Dest)\n+                       mut dest: expr::Dest)\n                        -> &'a Block<'a> {\n     let _icx = push_ctxt(\"trans_block\");\n     let fcx = bcx.fcx;\n@@ -85,6 +85,14 @@ pub fn trans_block<'a>(bcx: &'a Block<'a>,\n     for s in b.stmts.iter() {\n         bcx = trans_stmt(bcx, *s);\n     }\n+\n+    if dest != expr::Ignore {\n+        let block_ty = node_id_type(bcx, b.id);\n+        if b.expr.is_none() || type_is_zero_size(bcx.ccx(), block_ty) {\n+            dest = expr::Ignore;\n+        }\n+    }\n+\n     match b.expr {\n         Some(e) => {\n             bcx = expr::trans_into(bcx, e, dest);"}, {"sha": "6bddfd7d1a9ff8672b6440d4f010ae6ed162165b", "filename": "src/test/run-pass/issue-11709.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/31576c7ef0988b2b4c6133c2dfc95b446237a5da/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31576c7ef0988b2b4c6133c2dfc95b446237a5da/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11709.rs?ref=31576c7ef0988b2b4c6133c2dfc95b446237a5da", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-pretty\n+\n+// Don't fail on blocks without results\n+// There are several tests in this run-pass that raised\n+// when this bug was oppened. The cases where the compiler\n+// failed before the fix have a comment.\n+\n+struct S {x:()}\n+\n+\n+fn test(slot: &mut Option<proc() -> proc()>, _: proc()) -> () {\n+  let a = slot.take();\n+  let _a = match a {\n+    // `{let .. a(); }` would break\n+    Some(a) => { let _a = a(); },\n+    None => (),\n+  };\n+}\n+\n+fn not(b: bool) -> bool {\n+    if b {\n+        !b\n+    } else {\n+        // `fail!(...)` would break\n+        fail!(\"Break the compiler\");\n+    }\n+}\n+\n+pub fn main() {\n+    // {} would break\n+    let _r = {};\n+    let mut slot = None;\n+    // `{ test(...); }` would break\n+    let _s : S  = S{ x: { test(&mut slot, proc() {}); } };\n+\n+    let _b = not(true);\n+}"}]}