{"sha": "c27948d255167d827421401950c6d723ba28de8f", "node_id": "C_kwDOAAsO6NoAKGMyNzk0OGQyNTUxNjdkODI3NDIxNDAxOTUwYzZkNzIzYmEyOGRlOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-08T14:58:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-08T14:58:11Z"}, "message": "Auto merge of #102809 - matthiaskrgr:rollup-qq62vuv, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #101520 (Allow transmutes between the same types after erasing lifetimes)\n - #102675 (Remove `mir::CastKind::Misc`)\n - #102778 (Fix MIR inlining of asm_unwind)\n - #102785 (Remove `DefId` from some `SelectionCandidate` variants)\n - #102788 (Update rustc-dev-guide)\n - #102789 (Update browser UI test version)\n - #102797 (rustdoc: remove no-op CSS `.rightside { position: initial }`)\n - #102798 (rustdoc: add main-heading and example-wrap link CSS to big selector)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e3b0af4d043b00aa5261a399cb4cd34139ca992b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3b0af4d043b00aa5261a399cb4cd34139ca992b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c27948d255167d827421401950c6d723ba28de8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c27948d255167d827421401950c6d723ba28de8f", "html_url": "https://github.com/rust-lang/rust/commit/c27948d255167d827421401950c6d723ba28de8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c27948d255167d827421401950c6d723ba28de8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba9785dd73f61aacd301a2cb379e1e85a129047", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba9785dd73f61aacd301a2cb379e1e85a129047", "html_url": "https://github.com/rust-lang/rust/commit/bba9785dd73f61aacd301a2cb379e1e85a129047"}, {"sha": "b8ac02b27b2e3798914290308426b818348d2824", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ac02b27b2e3798914290308426b818348d2824", "html_url": "https://github.com/rust-lang/rust/commit/b8ac02b27b2e3798914290308426b818348d2824"}], "stats": {"total": 781, "additions": 492, "deletions": 289}, "files": [{"sha": "4962d9476b5471937d7a994ebcfba8cf0539c9f0", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 89, "deletions": 10, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -2209,25 +2209,104 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             }\n                         }\n                     }\n-\n-                    CastKind::Misc => {\n+                    CastKind::IntToInt => {\n                         let ty_from = op.ty(body, tcx);\n                         let cast_ty_from = CastTy::from_ty(ty_from);\n                         let cast_ty_to = CastTy::from_ty(*ty);\n-                        // Misc casts are either between floats and ints, or one ptr type to another.\n                         match (cast_ty_from, cast_ty_to) {\n-                            (\n-                                Some(CastTy::Int(_) | CastTy::Float),\n-                                Some(CastTy::Int(_) | CastTy::Float),\n-                            )\n-                            | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Ptr(_))) => (),\n+                            (Some(CastTy::Int(_)), Some(CastTy::Int(_))) => (),\n                             _ => {\n                                 span_mirbug!(\n                                     self,\n                                     rvalue,\n-                                    \"Invalid Misc cast {:?} -> {:?}\",\n+                                    \"Invalid IntToInt cast {:?} -> {:?}\",\n                                     ty_from,\n-                                    ty,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::IntToFloat => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::Int(_)), Some(CastTy::Float)) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid IntToFloat cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::FloatToInt => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::Float), Some(CastTy::Int(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid FloatToInt cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::FloatToFloat => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::Float), Some(CastTy::Float)) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid FloatToFloat cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::FnPtrToPtr => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::FnPtr), Some(CastTy::Ptr(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid FnPtrToPtr cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::PtrToPtr => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::Ptr(_)), Some(CastTy::Ptr(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid PtrToPtr cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n                                 )\n                             }\n                         }"}, {"sha": "4303d63fe21314d2f0e8c6306018de9486d909f7", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -633,7 +633,12 @@ fn codegen_stmt<'tcx>(\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n                 Rvalue::Cast(\n-                    CastKind::Misc\n+                    CastKind::IntToInt\n+                    | CastKind::FloatToFloat\n+                    | CastKind::FloatToInt\n+                    | CastKind::IntToFloat\n+                    | CastKind::FnPtrToPtr\n+                    | CastKind::PtrToPtr\n                     | CastKind::PointerExposeAddress\n                     | CastKind::PointerFromExposedAddress,\n                     ref operand,"}, {"sha": "c5f44bb8479642fb26e475403b43e3638d33978a", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -490,7 +490,16 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                     match &stmt.kind {\n                         StatementKind::Assign(local_and_rvalue) if &local_and_rvalue.0 == place => {\n                             match &local_and_rvalue.1 {\n-                                Rvalue::Cast(CastKind::Misc, operand, ty) => {\n+                                Rvalue::Cast(\n+                                    CastKind::IntToInt\n+                                    | CastKind::FloatToFloat\n+                                    | CastKind::FloatToInt\n+                                    | CastKind::IntToFloat\n+                                    | CastKind::FnPtrToPtr\n+                                    | CastKind::PtrToPtr,\n+                                    operand,\n+                                    ty,\n+                                ) => {\n                                     if computed_const_val.is_some() {\n                                         return None; // local assigned twice\n                                     }"}, {"sha": "abf3c9a363fca6b6d706a7c38cf283ec793a8e07", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         OperandValue::Pair(lldata, llextra)\n                     }\n                     mir::CastKind::Pointer(PointerCast::MutToConstPointer)\n-                    | mir::CastKind::Misc\n+                    | mir::CastKind::PtrToPtr\n                         if bx.cx().is_backend_scalar_pair(operand.layout) =>\n                     {\n                         if let OperandValue::Pair(data_ptr, meta) = operand.val {\n@@ -290,7 +290,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mir::CastKind::Pointer(\n                         PointerCast::MutToConstPointer | PointerCast::ArrayToPointer,\n                     )\n-                    | mir::CastKind::Misc\n+                    | mir::CastKind::IntToInt\n+                    | mir::CastKind::FloatToInt\n+                    | mir::CastKind::FloatToFloat\n+                    | mir::CastKind::IntToFloat\n+                    | mir::CastKind::PtrToPtr\n+                    | mir::CastKind::FnPtrToPtr\n+\n                     // Since int2ptr can have arbitrary integer types as input (so we have to do\n                     // sign extension and all that), it is currently best handled in the same code\n                     // path as the other integer-to-X casts."}, {"sha": "764224fd0072eb1c38a99401a111c2e6ec85b2f3", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -42,8 +42,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let res = self.pointer_from_exposed_address_cast(&src, cast_ty)?;\n                 self.write_immediate(res, dest)?;\n             }\n-\n-            Misc => {\n+            // FIXME: We shouldn't use `misc_cast` for these but handle them separately.\n+            IntToInt | FloatToInt | FloatToFloat | IntToFloat | FnPtrToPtr | PtrToPtr => {\n                 let src = self.read_immediate(src)?;\n                 let res = self.misc_cast(&src, cast_ty)?;\n                 self.write_immediate(res, dest)?;"}, {"sha": "80ca412b32ac667b57c0c0858791be26adc4e858", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -553,7 +553,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 unimplemented!()\n             }\n \n-            Rvalue::Cast(CastKind::Misc, _, _) => {}\n+            Rvalue::Cast(_, _, _) => {}\n \n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n             Rvalue::ShallowInitBox(_, _) => {}"}, {"sha": "87b7c55bf7fb56663d7fdffb3834de4cef00709f", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -557,7 +557,14 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n             Rvalue::Cast(kind, operand, target_type) => {\n                 match kind {\n-                    CastKind::Misc => {\n+                    CastKind::DynStar => {\n+                        // FIXME(dyn-star): make sure nothing needs to be done here.\n+                    }\n+                    // Nothing to check here\n+                    CastKind::PointerFromExposedAddress\n+                    | CastKind::PointerExposeAddress\n+                    | CastKind::Pointer(_) => {}\n+                    _ => {\n                         let op_ty = operand.ty(self.body, self.tcx);\n                         if op_ty.is_enum() {\n                             self.fail(\n@@ -568,13 +575,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                             );\n                         }\n                     }\n-                    CastKind::DynStar => {\n-                        // FIXME(dyn-star): make sure nothing needs to be done here.\n-                    }\n-                    // Nothing to check here\n-                    CastKind::PointerFromExposedAddress\n-                    | CastKind::PointerExposeAddress\n-                    | CastKind::Pointer(_) => {}\n                 }\n             }\n             Rvalue::Repeat(_, _)"}, {"sha": "25228f424cd0793688b3ba19671c624aed959ca5", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -44,13 +44,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_transmute(&self, from: Ty<'tcx>, to: Ty<'tcx>, hir_id: HirId) {\n         let tcx = self.tcx;\n         let span = tcx.hir().span(hir_id);\n-        let convert = |ty: Ty<'tcx>| {\n+        let normalize = |ty| {\n             let ty = self.resolve_vars_if_possible(ty);\n-            let ty = tcx.normalize_erasing_regions(self.param_env, ty);\n-            (SizeSkeleton::compute(ty, tcx, self.param_env), ty)\n+            self.tcx.normalize_erasing_regions(self.param_env, ty)\n         };\n-        let (sk_from, from) = convert(from);\n-        let (sk_to, to) = convert(to);\n+        let from = normalize(from);\n+        let to = normalize(to);\n+        trace!(?from, ?to);\n+\n+        // Transmutes that are only changing lifetimes are always ok.\n+        if from == to {\n+            return;\n+        }\n+\n+        let skel = |ty| SizeSkeleton::compute(ty, tcx, self.param_env);\n+        let sk_from = skel(from);\n+        let sk_to = skel(to);\n+        trace!(?sk_from, ?sk_to);\n \n         // Check for same size using the skeletons.\n         if let (Ok(sk_from), Ok(sk_to)) = (sk_from, sk_to) {"}, {"sha": "d3a98e43c53820d640662b77cb87d33e22fb3f41", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1834,7 +1834,14 @@ impl<'tcx> Rvalue<'tcx> {\n             | Rvalue::AddressOf(_, _)\n             | Rvalue::Len(_)\n             | Rvalue::Cast(\n-                CastKind::Misc | CastKind::Pointer(_) | CastKind::PointerFromExposedAddress,\n+                CastKind::IntToInt\n+                | CastKind::FloatToInt\n+                | CastKind::FloatToFloat\n+                | CastKind::IntToFloat\n+                | CastKind::FnPtrToPtr\n+                | CastKind::PtrToPtr\n+                | CastKind::Pointer(_)\n+                | CastKind::PointerFromExposedAddress,\n                 _,\n                 _,\n             )"}, {"sha": "9a22a12b93b33c3e96f7903f0f7864044e54c95a", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1149,8 +1149,12 @@ pub enum CastKind {\n     Pointer(PointerCast),\n     /// Cast into a dyn* object.\n     DynStar,\n-    /// Remaining unclassified casts.\n-    Misc,\n+    IntToInt,\n+    FloatToInt,\n+    FloatToFloat,\n+    IntToFloat,\n+    PtrToPtr,\n+    FnPtrToPtr,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "11758599cffa1ab98181eb2c4cbc6bda46d307eb", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -115,7 +115,7 @@ pub enum SelectionCandidate<'tcx> {\n \n     ParamCandidate(ty::PolyTraitPredicate<'tcx>),\n     ImplCandidate(DefId),\n-    AutoImplCandidate(DefId),\n+    AutoImplCandidate,\n \n     /// This is a trait matching with a projected type as `Self`, and we found\n     /// an applicable bound in the trait definition. The `usize` is an index\n@@ -143,7 +143,7 @@ pub enum SelectionCandidate<'tcx> {\n     /// Builtin implementation of `Pointee`.\n     PointeeCandidate,\n \n-    TraitAliasCandidate(DefId),\n+    TraitAliasCandidate,\n \n     /// Matching `dyn Trait` with a supertrait of `Trait`. The index is the\n     /// position in the iterator returned by"}, {"sha": "e65585955199fcc803d29913b879656af360b920", "filename": "compiler/rustc_middle/src/ty/cast.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -2,6 +2,7 @@\n // typeck and codegen.\n \n use crate::ty::{self, Ty};\n+use rustc_middle::mir;\n \n use rustc_macros::HashStable;\n \n@@ -75,3 +76,28 @@ impl<'tcx> CastTy<'tcx> {\n         }\n     }\n }\n+\n+/// Returns `mir::CastKind` from the given parameters.\n+pub fn mir_cast_kind<'tcx>(from_ty: Ty<'tcx>, cast_ty: Ty<'tcx>) -> mir::CastKind {\n+    let from = CastTy::from_ty(from_ty);\n+    let cast = CastTy::from_ty(cast_ty);\n+    let cast_kind = match (from, cast) {\n+        (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n+            mir::CastKind::PointerExposeAddress\n+        }\n+        (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => mir::CastKind::PointerFromExposedAddress,\n+        (_, Some(CastTy::DynStar)) => mir::CastKind::DynStar,\n+        (Some(CastTy::Int(_)), Some(CastTy::Int(_))) => mir::CastKind::IntToInt,\n+        (Some(CastTy::FnPtr), Some(CastTy::Ptr(_))) => mir::CastKind::FnPtrToPtr,\n+\n+        (Some(CastTy::Float), Some(CastTy::Int(_))) => mir::CastKind::FloatToInt,\n+        (Some(CastTy::Int(_)), Some(CastTy::Float)) => mir::CastKind::IntToFloat,\n+        (Some(CastTy::Float), Some(CastTy::Float)) => mir::CastKind::FloatToFloat,\n+        (Some(CastTy::Ptr(_)), Some(CastTy::Ptr(_))) => mir::CastKind::PtrToPtr,\n+\n+        (_, _) => {\n+            bug!(\"Attempting to cast non-castable types {:?} and {:?}\", from_ty, cast_ty)\n+        }\n+    };\n+    cast_kind\n+}"}, {"sha": "35a00da8d38b2ceaa49ed917689a1c3470bc3054", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::Place;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::cast::CastTy;\n+use rustc_middle::ty::cast::{mir_cast_kind, CastTy};\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n \n@@ -217,16 +217,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let from_ty = CastTy::from_ty(ty);\n                 let cast_ty = CastTy::from_ty(expr.ty);\n                 debug!(\"ExprKind::Cast from_ty={from_ty:?}, cast_ty={:?}/{cast_ty:?}\", expr.ty,);\n-                let cast_kind = match (from_ty, cast_ty) {\n-                    (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n-                        CastKind::PointerExposeAddress\n-                    }\n-                    (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => {\n-                        CastKind::PointerFromExposedAddress\n-                    }\n-                    (_, Some(CastTy::DynStar)) => CastKind::DynStar,\n-                    (_, _) => CastKind::Misc,\n-                };\n+                let cast_kind = mir_cast_kind(ty, expr.ty);\n                 block.and(Rvalue::Cast(cast_kind, source, expr.ty))\n             }\n             ExprKind::Pointer { cast, source } => {"}, {"sha": "23403628c53fa6aa6ed32b865575380a628d614a", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -823,9 +823,10 @@ where\n             // tmp = &raw mut P;\n             // cur = tmp as *mut T;\n             // end = Offset(cur, len);\n+            let mir_cast_kind = ty::cast::mir_cast_kind(iter_ty, tmp_ty);\n             vec![\n                 self.assign(tmp, Rvalue::AddressOf(Mutability::Mut, self.place)),\n-                self.assign(cur, Rvalue::Cast(CastKind::Misc, Operand::Move(tmp), iter_ty)),\n+                self.assign(cur, Rvalue::Cast(mir_cast_kind, Operand::Move(tmp), iter_ty)),\n                 self.assign(\n                     length_or_end,\n                     Rvalue::BinaryOp("}, {"sha": "780b91d9215d5e2c08c68d32c9a081efff1a66b6", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -977,6 +977,21 @@ impl Integrator<'_, '_> {\n         trace!(\"mapping block `{:?}` to `{:?}`\", block, new);\n         new\n     }\n+\n+    fn map_unwind(&self, unwind: Option<BasicBlock>) -> Option<BasicBlock> {\n+        if self.in_cleanup_block {\n+            if unwind.is_some() {\n+                bug!(\"cleanup on cleanup block\");\n+            }\n+            return unwind;\n+        }\n+\n+        match unwind {\n+            Some(target) => Some(self.map_block(target)),\n+            // Add an unwind edge to the original call's cleanup block\n+            None => self.cleanup_block,\n+        }\n+    }\n }\n \n impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n@@ -1085,35 +1100,17 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n             TerminatorKind::Drop { ref mut target, ref mut unwind, .. }\n             | TerminatorKind::DropAndReplace { ref mut target, ref mut unwind, .. } => {\n                 *target = self.map_block(*target);\n-                if let Some(tgt) = *unwind {\n-                    *unwind = Some(self.map_block(tgt));\n-                } else if !self.in_cleanup_block {\n-                    // Unless this drop is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *unwind = self.cleanup_block;\n-                }\n+                *unwind = self.map_unwind(*unwind);\n             }\n             TerminatorKind::Call { ref mut target, ref mut cleanup, .. } => {\n                 if let Some(ref mut tgt) = *target {\n                     *tgt = self.map_block(*tgt);\n                 }\n-                if let Some(tgt) = *cleanup {\n-                    *cleanup = Some(self.map_block(tgt));\n-                } else if !self.in_cleanup_block {\n-                    // Unless this call is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *cleanup = self.cleanup_block;\n-                }\n+                *cleanup = self.map_unwind(*cleanup);\n             }\n             TerminatorKind::Assert { ref mut target, ref mut cleanup, .. } => {\n                 *target = self.map_block(*target);\n-                if let Some(tgt) = *cleanup {\n-                    *cleanup = Some(self.map_block(tgt));\n-                } else if !self.in_cleanup_block {\n-                    // Unless this assert is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *cleanup = self.cleanup_block;\n-                }\n+                *cleanup = self.map_unwind(*cleanup);\n             }\n             TerminatorKind::Return => {\n                 terminator.kind = if let Some(tgt) = self.callsite.target {\n@@ -1141,11 +1138,8 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n             TerminatorKind::InlineAsm { ref mut destination, ref mut cleanup, .. } => {\n                 if let Some(ref mut tgt) = *destination {\n                     *tgt = self.map_block(*tgt);\n-                } else if !self.in_cleanup_block {\n-                    // Unless this inline asm is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *cleanup = self.cleanup_block;\n                 }\n+                *cleanup = self.map_unwind(*cleanup);\n             }\n         }\n     }"}, {"sha": "f6c0930eb5f3762c3094ddda026419f871121ca3", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -625,7 +625,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n \n-                _ => candidates.vec.push(AutoImplCandidate(def_id)),\n+                _ => candidates.vec.push(AutoImplCandidate),\n             }\n         }\n     }\n@@ -914,7 +914,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let def_id = obligation.predicate.def_id();\n \n         if self.tcx().is_trait_alias(def_id) {\n-            candidates.vec.push(TraitAliasCandidate(def_id));\n+            candidates.vec.push(TraitAliasCandidate);\n         }\n     }\n "}, {"sha": "98c99e9ad4fb6fe6773e56ade4dbb8cf17835abe", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -64,8 +64,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplSource::UserDefined(self.confirm_impl_candidate(obligation, impl_def_id))\n             }\n \n-            AutoImplCandidate(trait_def_id) => {\n-                let data = self.confirm_auto_impl_candidate(obligation, trait_def_id);\n+            AutoImplCandidate => {\n+                let data = self.confirm_auto_impl_candidate(obligation);\n                 ImplSource::AutoImpl(data)\n             }\n \n@@ -100,8 +100,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             PointeeCandidate => ImplSource::Pointee(ImplSourcePointeeData),\n \n-            TraitAliasCandidate(alias_def_id) => {\n-                let data = self.confirm_trait_alias_candidate(obligation, alias_def_id);\n+            TraitAliasCandidate => {\n+                let data = self.confirm_trait_alias_candidate(obligation);\n                 ImplSource::TraitAlias(data)\n             }\n \n@@ -317,13 +317,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_auto_impl_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-        trait_def_id: DefId,\n     ) -> ImplSourceAutoImplData<PredicateObligation<'tcx>> {\n-        debug!(?obligation, ?trait_def_id, \"confirm_auto_impl_candidate\");\n+        debug!(?obligation, \"confirm_auto_impl_candidate\");\n \n         let self_ty = self.infcx.shallow_resolve(obligation.predicate.self_ty());\n         let types = self.constituent_types_for_ty(self_ty);\n-        self.vtable_auto_impl(obligation, trait_def_id, types)\n+        self.vtable_auto_impl(obligation, obligation.predicate.def_id(), types)\n     }\n \n     /// See `confirm_auto_impl_candidate`.\n@@ -658,10 +657,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_trait_alias_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-        alias_def_id: DefId,\n     ) -> ImplSourceTraitAliasData<'tcx, PredicateObligation<'tcx>> {\n-        debug!(?obligation, ?alias_def_id, \"confirm_trait_alias_candidate\");\n+        debug!(?obligation, \"confirm_trait_alias_candidate\");\n \n+        let alias_def_id = obligation.predicate.def_id();\n         let predicate = self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);\n         let trait_ref = predicate.trait_ref;\n         let trait_def_id = trait_ref.def_id;"}, {"sha": "3799c9a491d1ab0da21a1b7d68f3f95732a56214", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1150,7 +1150,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // const projection\n                     ProjectionCandidate(_, ty::BoundConstness::ConstIfConst) => {}\n                     // auto trait impl\n-                    AutoImplCandidate(..) => {}\n+                    AutoImplCandidate => {}\n                     // generator, this will raise error in other places\n                     // or ignore error with const_async_blocks feature\n                     GeneratorCandidate => {}\n@@ -1568,7 +1568,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // This is a fix for #53123 and prevents winnowing from accidentally extending the\n         // lifetime of a variable.\n         match (&other.candidate, &victim.candidate) {\n-            (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {\n+            (_, AutoImplCandidate) | (AutoImplCandidate, _) => {\n                 bug!(\n                     \"default implementations shouldn't be recorded \\\n                     when there are other valid candidates\"\n@@ -1638,7 +1638,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n-                | TraitAliasCandidate(..)\n+                | TraitAliasCandidate\n                 | ObjectCandidate(_)\n                 | ProjectionCandidate(..),\n             ) => !is_global(cand),\n@@ -1656,7 +1656,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { has_nested: true }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n                 ParamCandidate(ref cand),\n             ) => {\n                 // Prefer these to a global where-clause bound\n@@ -1686,7 +1686,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n             ) => true,\n \n             (\n@@ -1698,7 +1698,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n                 ObjectCandidate(_) | ProjectionCandidate(..),\n             ) => false,\n \n@@ -1779,7 +1779,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { has_nested: true }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n                 ImplCandidate(_)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n@@ -1788,7 +1788,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { has_nested: true }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n             ) => false,\n         }\n     }"}, {"sha": "d33c3a2128bc55e9102113c24dd3fa714a1df7c6", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1 +1 @@\n-0.11.0\n\\ No newline at end of file\n+0.12.0\n\\ No newline at end of file"}, {"sha": "9a86c0467bbe42056f73fdf5b03fff757d7c4a9b", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1 +1 @@\n-Subproject commit f587d6e7cddeaa3cf0a33ec1e368df1a408fa0aa\n+Subproject commit 9a86c0467bbe42056f73fdf5b03fff757d7c4a9b"}, {"sha": "480b893596c0825d13f4c398863f108d53775e96", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -163,9 +163,6 @@ h1.fqn {\n \tpadding-bottom: 6px;\n \tmargin-bottom: 15px;\n }\n-.main-heading a:hover {\n-\ttext-decoration: underline;\n-}\n #toggle-all-docs {\n \ttext-decoration: none;\n }\n@@ -584,10 +581,6 @@ pre.example-line-numbers {\n \tborder-bottom-left-radius: 5px;\n }\n \n-.example-wrap > pre.rust a:hover {\n-\ttext-decoration: underline;\n-}\n-\n .src-line-numbers {\n \ttext-align: right;\n }\n@@ -767,6 +760,8 @@ h2.small-section-header > .anchor {\n \tcontent: '\u00a7';\n }\n \n+.main-heading a:hover,\n+.example-wrap > pre.rust a:hover,\n .all-items a:hover,\n .docblock a:not(.test-arrow):not(.scrape-help):hover,\n .docblock-short a:not(.test-arrow):not(.scrape-help):hover,\n@@ -1093,7 +1088,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n .rightside {\n \tpadding-left: 12px;\n \tpadding-right: 2px;\n-\tposition: initial;\n \tfloat: right;\n }\n "}, {"sha": "1d4dfc29f70b623bfc2c26cd704e105964ea4685", "filename": "src/test/mir-opt/const_prop/cast.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -14,10 +14,10 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/cast.rs:+1:9: +1:10\n--         _1 = const 42_u8 as u32 (Misc);  // scope 0 at $DIR/cast.rs:+1:13: +1:24\n+-         _1 = const 42_u8 as u32 (IntToInt); // scope 0 at $DIR/cast.rs:+1:13: +1:24\n +         _1 = const 42_u32;               // scope 0 at $DIR/cast.rs:+1:13: +1:24\n           StorageLive(_2);                 // scope 1 at $DIR/cast.rs:+3:9: +3:10\n--         _2 = const 42_u32 as u8 (Misc);  // scope 1 at $DIR/cast.rs:+3:13: +3:24\n+-         _2 = const 42_u32 as u8 (IntToInt); // scope 1 at $DIR/cast.rs:+3:13: +3:24\n +         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:+3:13: +3:24\n           _0 = const ();                   // scope 0 at $DIR/cast.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/cast.rs:+4:1: +4:2"}, {"sha": "f4c0c5c5e7fb0b9388988e68e5c18b46f5adcdf7", "filename": "src/test/mir-opt/const_prop/indirect.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -13,7 +13,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n--         _2 = const 2_u32 as u8 (Misc);   // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+-         _2 = const 2_u32 as u8 (IntToInt); // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n -         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n -         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n +         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25"}, {"sha": "8b12525b576ffcbef9ddbf869a1106e1afeebd59", "filename": "src/test/mir-opt/enum_cast.bar.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -7,7 +7,7 @@ fn bar(_1: Bar) -> usize {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "a77f4d06c239bb46a88cc0c20ad634361d79602c", "filename": "src/test/mir-opt/enum_cast.boo.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -7,7 +7,7 @@ fn boo(_1: Boo) -> usize {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "ae3e71df8c6df3726fdc828a4b9ee8bc6ae9cf17", "filename": "src/test/mir-opt/enum_cast.droppy.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -26,7 +26,7 @@ fn droppy() -> () {\n         FakeRead(ForLet(None), _2);      // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n         StorageLive(_3);                 // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n         _4 = discriminant(_2);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        _3 = move _4 as usize (Misc);    // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        _3 = move _4 as usize (IntToInt); // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n         FakeRead(ForLet(None), _3);      // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n         _1 = const ();                   // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n         StorageDead(_3);                 // scope 1 at $DIR/enum_cast.rs:+6:5: +6:6"}, {"sha": "9e44d9158e02f96950db39f51dcac6e601853e0f", "filename": "src/test/mir-opt/enum_cast.foo.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -7,7 +7,7 @@ fn foo(_1: Foo) -> usize {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "6ab63e82e35d28fdda6e0c376f47344509a50d56", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -91,7 +91,7 @@\n           StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n           StorageLive(_16);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n           _16 = _10;                       // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n-          _15 = move _16 as u32 (Misc);    // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n+          _15 = move _16 as u32 (IntToInt); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n           StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:+15:74: +15:75\n           _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n           StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:+15:78: +15:79"}, {"sha": "ed53c9a956ca88f1d4534e37e10f6444c2717226", "filename": "src/test/mir-opt/if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -31,7 +31,7 @@\n           StorageLive(_6);                 // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n           StorageLive(_7);                 // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:24\n           _7 = _2;                         // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:24\n-          _6 = move _7 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n+          _6 = move _7 as i32 (IntToInt);  // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n           StorageDead(_7);                 // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n           _0 = Add(const 100_i32, move _6); // scope 1 at $DIR/if-condition-int.rs:+4:17: +4:31\n           StorageDead(_6);                 // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n@@ -43,7 +43,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n           StorageLive(_5);                 // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:24\n           _5 = _2;                         // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:24\n-          _4 = move _5 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n+          _4 = move _5 as i32 (IntToInt);  // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n           StorageDead(_5);                 // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31\n           _0 = Add(const 10_i32, move _4); // scope 1 at $DIR/if-condition-int.rs:+3:18: +3:31\n           StorageDead(_4);                 // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31"}, {"sha": "c03feb433128cd25ed40d77dccd3a97aae258c77", "filename": "src/test/mir-opt/inline/asm-unwind.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Finline%2Fasm-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Finline%2Fasm-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fasm-unwind.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -0,0 +1,22 @@\n+// Tests inlining of `may_unwind` inline assembly.\n+//\n+// ignore-wasm32-bare compiled with panic=abort by default\n+// needs-asm-support\n+#![feature(asm_unwind)]\n+\n+struct D;\n+\n+impl Drop for D {\n+    fn drop(&mut self) {}\n+}\n+\n+#[inline(always)]\n+fn foo() {\n+    let _d = D;\n+    unsafe { std::arch::asm!(\"\", options(may_unwind)) };\n+}\n+\n+// EMIT_MIR asm_unwind.main.Inline.diff\n+pub fn main() {\n+    foo();\n+}"}, {"sha": "57072fc0ad392366342ea2c9779d472e8c832024", "filename": "src/test/mir-opt/inline/asm_unwind.main.Inline.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/asm-unwind.rs:+0:15: +0:15\n+      let _1: ();                          // in scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n++     scope 1 (inlined foo) {              // at $DIR/asm-unwind.rs:21:5: 21:10\n++         let _2: D;                       // in scope 1 at $DIR/asm-unwind.rs:15:9: 15:11\n++         scope 2 {\n++             debug _d => _2;              // in scope 2 at $DIR/asm-unwind.rs:15:9: 15:11\n++             scope 3 {\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n+-         _1 = foo() -> bb1;               // scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/asm-unwind.rs:21:5: 21:8\n+-                                          // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }\n++         StorageLive(_2);                 // scope 1 at $DIR/asm-unwind.rs:15:9: 15:11\n++         asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb3]; // scope 3 at $DIR/asm-unwind.rs:16:14: 16:54\n+      }\n+  \n+      bb1: {\n++         drop(_2) -> bb2;                 // scope 1 at $DIR/asm-unwind.rs:17:1: 17:2\n++     }\n++ \n++     bb2: {\n++         StorageDead(_2);                 // scope 1 at $DIR/asm-unwind.rs:17:1: 17:2\n+          StorageDead(_1);                 // scope 0 at $DIR/asm-unwind.rs:+1:10: +1:11\n+          _0 = const ();                   // scope 0 at $DIR/asm-unwind.rs:+0:15: +2:2\n+          return;                          // scope 0 at $DIR/asm-unwind.rs:+2:2: +2:2\n++     }\n++ \n++     bb3 (cleanup): {\n++         drop(_2) -> bb4;                 // scope 1 at $DIR/asm-unwind.rs:17:1: 17:2\n++     }\n++ \n++     bb4 (cleanup): {\n++         resume;                          // scope 1 at $DIR/asm-unwind.rs:14:1: 17:2\n+      }\n+  }\n+  "}, {"sha": "a71baad3e3ed90bb54af61c925201c6e0ad8bd5e", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -25,7 +25,7 @@\n       bb1: {\n           StorageLive(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n           _4 = _1;                         // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n-          _0 = move _4 as u32 (Misc);      // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:17\n+          _0 = move _4 as u32 (IntToInt);  // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:17\n           StorageDead(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:16: +2:17\n           StorageDead(_2);                 // scope 0 at $DIR/inline-diverging.rs:+5:5: +5:6\n           return;                          // scope 0 at $DIR/inline-diverging.rs:+6:2: +6:2"}, {"sha": "281afe4be17ef1832cd391516626b16108c32afb", "filename": "src/test/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -90,9 +90,9 @@\n           StorageDead(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           StorageDead(_6);                 // scope 0 at $DIR/issue-101973.rs:+1:57: +1:58\n           StorageDead(_4);                 // scope 0 at $DIR/issue-101973.rs:+1:57: +1:58\n-          _2 = move _3 as i32 (Misc);      // scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n+          _2 = move _3 as i32 (IntToInt);  // scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n           StorageDead(_3);                 // scope 0 at $DIR/issue-101973.rs:+1:64: +1:65\n-          _0 = move _2 as i64 (Misc);      // scope 0 at $DIR/issue-101973.rs:+1:5: +1:72\n+          _0 = move _2 as i64 (IntToInt);  // scope 0 at $DIR/issue-101973.rs:+1:5: +1:72\n           StorageDead(_2);                 // scope 0 at $DIR/issue-101973.rs:+1:71: +1:72\n           return;                          // scope 0 at $DIR/issue-101973.rs:+2:2: +2:2\n       }"}, {"sha": "ec15fd1ef74d60f4ad11fb9f5ffb2aa2193a1f04", "filename": "src/test/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -36,7 +36,7 @@\n           _7 = &_1;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n           _6 = &raw const (*_7);           // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n           _5 = _6;                         // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n-          _4 = move _5 as *const i32 (Misc); // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n+          _4 = move _5 as *const i32 (PtrToPtr); // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n           StorageDead(_5);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:58: +4:59\n           StorageLive(_8);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n           StorageLive(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n@@ -45,7 +45,7 @@\n           _11 = &mut _2;                   // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n           _10 = &raw mut (*_11);           // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n           _9 = _10;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n-          _8 = move _9 as *mut i32 (Misc); // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n+          _8 = move _9 as *mut i32 (PtrToPtr); // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n           StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n -         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> bb1; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n -                                          // mir::Constant"}, {"sha": "31ccf14549ca21637c82ab8dd8f0578bb05982c7", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -84,7 +84,7 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n \n     bb13: {\n         _15 = &raw mut (*_1);            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = move _15 as *mut std::string::String (Misc); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _9 = move _15 as *mut std::string::String (PtrToPtr); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n         _10 = Offset(_9, move _3);       // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n         goto -> bb12;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }"}, {"sha": "9d5c55a1e1dadc42e2268f1f1fde405b1d61c07b", "filename": "src/test/rustdoc-gui/anchor-navigable.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fanchor-navigable.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fanchor-navigable.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchor-navigable.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -4,7 +4,7 @@\n // anchor and the `impl Foo`. If there were a gap, this would cause an annoying\n // problem: you hover `impl Foo` to see the anchor, then when you move your\n // mouse to the left, the anchor disappears before you reach it.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n // We check that \".item-info\" is bigger than its content.\n move-cursor-to: \".impl\"\n assert-property: (\".impl > a.anchor\", {\"offsetWidth\": \"8\"})"}, {"sha": "6673e9c20fe68f667cd0e83b53c536c948132a55", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test is to ensure that the anchors (`\u00a7`) have the expected color and position.\n-goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/staged_api/struct.Foo.html\"\n \n // This is needed to ensure that the text color is computed.\n show-text: true\n@@ -36,7 +36,7 @@ assert-css: (\n     {\"color\": \"rgb(56, 115, 173)\", \"text-decoration\": \"none solid rgb(56, 115, 173)\"},\n )\n \n-goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n \n assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(0, 0, 0)\"})\n \n@@ -57,7 +57,7 @@ assert-css: (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})\n // We do the same checks with the dark theme now.\n //\n local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n-goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/staged_api/struct.Foo.html\"\n \n assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(221, 221, 221)\"})\n assert-css: (\".fqn a:nth-of-type(1)\", {\"color\": \"rgb(221, 221, 221)\"})\n@@ -86,7 +86,7 @@ assert-css: (\n     {\"color\": \"rgb(210, 153, 29)\", \"text-decoration\": \"none solid rgb(210, 153, 29)\"},\n )\n \n-goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n \n assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(221, 221, 221)\"})\n \n@@ -107,7 +107,7 @@ assert-css: (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})\n // We do the same checks with the ayu theme now.\n //\n local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n-goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/staged_api/struct.Foo.html\"\n \n assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(197, 197, 197)\"})\n assert-css: (\".fqn a:nth-of-type(1)\", {\"color\": \"rgb(255, 255, 255)\"})\n@@ -136,7 +136,7 @@ assert-css: (\n     {\"color\": \"rgb(57, 175, 215)\", \"text-decoration\": \"none solid rgb(57, 175, 215)\"},\n )\n \n-goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n \n assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(255, 255, 255)\"})\n "}, {"sha": "0a619c3524a664a540012f96d00cae6b123e4067", "filename": "src/test/rustdoc-gui/auto-hide-trait-implementations.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fauto-hide-trait-implementations.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fauto-hide-trait-implementations.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fauto-hide-trait-implementations.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Checks that the setting \"auto hide trait implementations\" is working as expected.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n \n // By default, the trait implementations are not collapsed.\n assert-attribute: (\"#trait-implementations-list > details\", {\"open\": \"\"}, ALL)"}, {"sha": "f4ba5a128459a76bb2b2e4ecc9adf2ce4ea1fcc1", "filename": "src/test/rustdoc-gui/basic-code.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fbasic-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fbasic-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fbasic-code.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,3 +1,3 @@\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n click: \".srclink\"\n assert-count: (\".src-line-numbers\", 1)"}, {"sha": "60292835bc0bf3ad3860310857470d9126f752a4", "filename": "src/test/rustdoc-gui/basic.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fbasic.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fbasic.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fbasic.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,4 +1,4 @@\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert: (\"#functions\")\n-goto: ./struct.Foo.html\n+goto: \"./struct.Foo.html\"\n assert: (\"div.item-decl\")"}, {"sha": "c2cec00204d703e25fa06bbb2b1413bd5d410328", "filename": "src/test/rustdoc-gui/check-code-blocks-margin.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcheck-code-blocks-margin.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcheck-code-blocks-margin.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcheck-code-blocks-margin.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the docblock elements have the appropriate left margin.\n-goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.foo.html\"\n // The top docblock elements shouldn't have left margin...\n assert-css: (\"#main-content .item-decl\", {\"margin-left\": \"0px\"})\n // ... but all the others should!"}, {"sha": "266fa999728e7533056ec53d4b8aecad5b98a909", "filename": "src/test/rustdoc-gui/check-stab-in-docblock.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // This test checks that using `.stab` attributes in `.docblock` elements doesn't\n // create scrollable paragraphs.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n // Needs the text to be display to check for scrollable content.\n show-text: true\n size: (786, 600)"}, {"sha": "f36e73fc5e9ecab54524b57be428cf8c73268962", "filename": "src/test/rustdoc-gui/check_info_sign_position.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcheck_info_sign_position.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcheck_info_sign_position.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcheck_info_sign_position.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,7 +1,7 @@\n // This test checks the position of the information on the code blocks (like\n // `compile_fail` or `ignore`).\n-goto: file://|DOC_PATH|/test_docs/index.html\n-goto: ./fn.check_list_code_block.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+goto: \"./fn.check_list_code_block.html\"\n // If the codeblock is the first element of the docblock, the information tooltip must have\n // have some top margin to avoid going over the toggle (the \"[+]\").\n assert-css: (\".docblock > .example-wrap.compile_fail .tooltip\", { \"margin-top\": \"16px\" })"}, {"sha": "fbf0e890bdcaef001c86dc3683b135c4d5dda189", "filename": "src/test/rustdoc-gui/code-blocks-overflow.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that codeblocks content don't overflow.\n-goto: file://|DOC_PATH|/lib2/sub_mod/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/sub_mod/struct.Foo.html\"\n size: (1080, 600)\n // There should be two codeblocks: a rust one and a non-rust one.\n assert-count: (\".docblock > .example-wrap\", 2)"}, {"sha": "4136677cdd547492870db3c9fd4aa5405d76ea0d", "filename": "src/test/rustdoc-gui/code-color.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -2,7 +2,7 @@\n // check that the rule isn't applied on other \"<code>\" elements.\n //\n // While we're at it, we also check it for the other themes.\n-goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.foo.html\"\n // If the text isn't displayed, the browser doesn't compute color style correctly...\n show-text: true\n // Set the theme to dark."}, {"sha": "00a0ea1e1a27ca578ec6cab5838bc5e881ca1940", "filename": "src/test/rustdoc-gui/code-sidebar-toggle.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test checks that the source code pages sidebar toggle is working as expected.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n click: \".srclink\"\n wait-for: \"#sidebar-toggle\"\n click: \"#sidebar-toggle\""}, {"sha": "837a2c1d57f5a53313c68b988bbdc3799ea93a69", "filename": "src/test/rustdoc-gui/code-tags.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcode-tags.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcode-tags.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-tags.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,20 +1,20 @@\n // This test ensures that items and documentation code blocks are wrapped in <pre><code>\n-goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.foo.html\"\n size: (1080, 600)\n // There should be four doc codeblocks.\n // Check that their content is inside <pre><code>\n assert-count: (\".example-wrap pre > code\", 4)\n // Check that function signature is inside <pre><code>\n assert: \"pre.rust.fn > code\"\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n assert: \"pre.rust.struct > code\"\n \n-goto: file://|DOC_PATH|/test_docs/enum.AnEnum.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/enum.AnEnum.html\"\n assert: \"pre.rust.enum > code\"\n \n-goto: file://|DOC_PATH|/test_docs/trait.AnotherOne.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait.AnotherOne.html\"\n assert: \"pre.rust.trait > code\"\n \n-goto: file://|DOC_PATH|/test_docs/type.SomeType.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/type.SomeType.html\"\n assert: \"pre.rust.typedef > code\""}, {"sha": "f01e0c3c6cc746923a1928d886dd80452992a5dd", "filename": "src/test/rustdoc-gui/codeblock-tooltip.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Checking the colors of the codeblocks tooltips.\n-goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.foo.html\"\n show-text: true\n \n // Dark theme."}, {"sha": "ab27b001eb6a45b7772f7645d2f6d70c93f6306c", "filename": "src/test/rustdoc-gui/default-settings.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdefault-settings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdefault-settings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdefault-settings.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -2,7 +2,7 @@\n //\n // The \"settings\" crate uses \"ayu\" as default setting, which is what we will\n // check.\n-goto: file://|DOC_PATH|/settings/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/settings/index.html\"\n // Wait a bit to be sure the default theme is applied.\n // If the theme isn't applied, the command will time out.\n wait-for-css: (\"body\", {\"background-color\": \"rgb(15, 20, 25)\"})"}, {"sha": "9f8df44d762ce5f9402b144b6af81320dfec3b1e", "filename": "src/test/rustdoc-gui/docblock-big-code-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-big-code-mobile.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,7 +1,7 @@\n // If we have a long `<code>`, we need to ensure that it'll be fully displayed on mobile, meaning\n // that it'll be on two lines.\n emulate: \"iPhone 8\" // it has the following size: (375, 667)\n-goto: file://|DOC_PATH|/test_docs/long_code_block/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/long_code_block/index.html\"\n // We now check that the block is on two lines:\n show-text: true // We need to enable text draw to be able to have the \"real\" size\n // Little explanations for this test: if the text wasn't displayed on two lines, it would take"}, {"sha": "911ee34be94e5aa034c9724b292fc168363b5c99", "filename": "src/test/rustdoc-gui/docblock-code-block-line-number.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Checks that the setting \"line numbers\" is working as expected.\n-goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.foo.html\"\n \n // We check that without this setting, there is no line number displayed.\n assert-false: \"pre.example-line-numbers\""}, {"sha": "f3cbe5767ae9149a9efe714a60523eac01567920", "filename": "src/test/rustdoc-gui/docblock-details.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-details.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-details.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-details.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This ensures that the `<details>`/`<summary>` elements are displayed as expected.\n-goto: file://|DOC_PATH|/test_docs/details/struct.Details.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/details/struct.Details.html\"\n show-text: true\n local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n reload:"}, {"sha": "d8670089ad8835fac449ac1e922a7e9d64180f83", "filename": "src/test/rustdoc-gui/docblock-table-overflow.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the type declaration content overflow is handled inside the <pre> directly.\n-goto: file://|DOC_PATH|/lib2/long_table/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/long_table/struct.Foo.html\"\n // We set a fixed size so there is no chance of \"random\" resize.\n size: (1100, 800)\n // Logically, the \".docblock\" and the \"<p>\" should have the same scroll width."}, {"sha": "4e316ce0bcbfd45b7cbda1a2c965b9be6d0e32fc", "filename": "src/test/rustdoc-gui/docblock-table.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-table.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fdocblock-table.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,4 +1,4 @@\n-goto: file://|DOC_PATH|/test_docs/doc_block_table/struct.DocBlockTable.html#method.func\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/doc_block_table/struct.DocBlockTable.html#method.func\"\n \n compare-elements-css: (\".impl-items .docblock table th\", \".top-doc .docblock table th\", [\"border\"])\n compare-elements-css: (\".impl-items .docblock table td\", \".top-doc .docblock table td\", [\"border\"])"}, {"sha": "496203c128eac63c5e92e3500aa00ccac702596b", "filename": "src/test/rustdoc-gui/duplicate-macro-reexport.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fduplicate-macro-reexport.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fduplicate-macro-reexport.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fduplicate-macro-reexport.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that there is no macro duplicates in the sidebar.\n-goto: file://|DOC_PATH|/test_docs/macro.a.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/macro.a.html\"\n // Waiting for the elements in the sidebar to be rendered.\n wait-for: \".sidebar-elems .macro\"\n // Check there is only one macro named \"a\" listed in the sidebar."}, {"sha": "78e9f23093ead1cfcec32f5203792cfa358d636e", "filename": "src/test/rustdoc-gui/escape-key.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // This test ensures that the \"Escape\" shortcut is handled correctly based on the\n // current content displayed.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n // First, we check that the search results are hidden when the Escape key is pressed.\n write: (\".search-input\", \"test\")\n // To be SURE that the search will be run."}, {"sha": "8ba005b0c35a0c7da4ee52ee7d72d91e05e4e9cb", "filename": "src/test/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test checks that the font weight is correctly applied.\n-goto: file://|DOC_PATH|/lib2/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.Foo.html\"\n assert-css: (\"//*[@class='item-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n assert-css: (\n     \"//*[@class='structfield small-section-header']//a[text()='Alias']\",\n@@ -9,13 +9,13 @@ assert-css: (\"#method\\.a_method > .code-header\", {\"font-weight\": \"600\"})\n assert-css: (\"#associatedtype\\.X > .code-header\", {\"font-weight\": \"600\"})\n assert-css: (\"#associatedconstant\\.Y > .code-header\", {\"font-weight\": \"600\"})\n \n-goto: file://|DOC_PATH|/test_docs/type.SomeType.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/type.SomeType.html\"\n assert-css: (\".top-doc .docblock p\", {\"font-weight\": \"400\"}, ALL)\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n assert-css: (\".impl-items .method > .code-header\", {\"font-weight\": \"600\"}, ALL)\n \n-goto: file://|DOC_PATH|/lib2/trait.Trait.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n \n // This is a complex selector, so here's how it works:\n //"}, {"sha": "3cf94f624fee8910036e4bbdbcd72864a02d34fe", "filename": "src/test/rustdoc-gui/hash-item-expansion.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the element corresponding to the hash is displayed.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.borrow\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.borrow\"\n // In the blanket implementations list, \"Borrow\" is the second one, hence the \":nth(2)\".\n assert-attribute: (\"#blanket-implementations-list > details:nth-child(2)\", {\"open\": \"\"})\n // We first check that the impl block is open by default."}, {"sha": "9b7e3a231126333f432d3731a94ada7dcd674079", "filename": "src/test/rustdoc-gui/headers-color.goml", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test check for headers text and background colors for the different themes.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n \n // This is needed so that the text color is computed.\n show-text: true\n@@ -23,23 +23,23 @@ assert-css: (\n     ALL,\n )\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html#impl-Foo\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#impl-Foo\"\n assert-css: (\n     \"#impl-Foo\",\n     {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"},\n )\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.must_use\"\n assert-css: (\n     \"#method\\.must_use\",\n     {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"},\n     ALL,\n )\n \n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-css: (\".small-section-header a\", {\"color\": \"rgb(197, 197, 197)\"}, ALL)\n \n-goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n // We select headings (h2, h3, h...).\n assert-css: (\".docblock > :not(p) > a\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n \n@@ -49,7 +49,7 @@ local-storage: {\n     \"rustdoc-preferred-dark-theme\": \"dark\",\n     \"rustdoc-use-system-theme\": \"false\",\n }\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n \n assert-css: (\n     \".impl\",\n@@ -62,31 +62,31 @@ assert-css: (\n     ALL,\n )\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html#impl-Foo\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#impl-Foo\"\n assert-css: (\n     \"#impl-Foo\",\n     {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"},\n )\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.must_use\"\n assert-css: (\n     \"#method\\.must_use\",\n     {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"},\n     ALL,\n )\n \n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-css: (\".small-section-header a\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n \n-goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n // We select headings (h2, h3, h...).\n assert-css: (\".docblock > :not(p) > a\", {\"color\": \"rgb(210, 153, 29)\"}, ALL)\n \n // Light theme\n local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n reload:\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n \n assert-css: (\n     \".impl\",\n@@ -99,19 +99,19 @@ assert-css: (\n     ALL,\n )\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html#impl-Foo\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#impl-Foo\"\n assert-css: (\"#impl-Foo\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"})\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.must_use\"\n assert-css: (\n     \"#method\\.must_use\",\n     {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"},\n     ALL,\n )\n \n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-css: (\".small-section-header a\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)\n \n-goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n // We select headings (h2, h3, h...).\n assert-css: (\".docblock > :not(p) > a\", {\"color\": \"rgb(56, 115, 173)\"}, ALL)"}, {"sha": "3e97bb78c7818736848cb00185fe64b4838579fc", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -11,7 +11,7 @@\n // 18px  1.125em\n // 16px  1rem\n // 14px  0.875rem\n-goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n \n@@ -50,7 +50,7 @@ assert-css: (\"h6#sub-heading-for-struct-impl-item-doc\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#sub-heading-for-struct-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n assert-css: (\"h6#sub-sub-heading-for-struct-impl-item-doc\", {\"font-size\": \"14px\"})\n \n-goto: file://|DOC_PATH|/test_docs/enum.HeavilyDocumentedEnum.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/enum.HeavilyDocumentedEnum.html\"\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n \n@@ -109,7 +109,7 @@ assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"border-bottom-width\"\n assert-text: (\".sidebar .mod h3\", \"Modules\")\n assert-css: (\".sidebar .mod h3\", {\"border-bottom-width\": \"0px\"}, ALL)\n \n-goto: file://|DOC_PATH|/test_docs/union.HeavilyDocumentedUnion.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/union.HeavilyDocumentedUnion.html\"\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n \n@@ -141,7 +141,7 @@ assert-css: (\"h5#title-for-union-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n assert-css: (\"h6#sub-heading-for-union-impl-item-doc\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#sub-heading-for-union-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n \n-goto: file://|DOC_PATH|/test_docs/macro.heavily_documented_macro.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/macro.heavily_documented_macro.html\"\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n \n@@ -153,7 +153,7 @@ assert-css: (\"h3#top-doc-prose-sub-heading\", {\"border-bottom-width\": \"1px\"})\n // Checking colors now.\n show-text: true\n local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n-goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n assert-css: (\n     \".top-doc .docblock h2\",\n     {\"color\": \"rgb(0, 0, 0)\", \"border-bottom\": \"1px solid rgb(221, 221, 221)\"},\n@@ -246,7 +246,7 @@ assert-css: (\n )\n \n local-storage: {\"rustdoc-theme\": \"light\"}\n-goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/staged_api/struct.Foo.html\"\n assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)\n \n local-storage: {\"rustdoc-theme\": \"dark\"}"}, {"sha": "3ccd33f1ccda20a78ab7d26c0c0fee76cbb88837", "filename": "src/test/rustdoc-gui/huge-collection-of-constants.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // Make sure that the last two entries are more than 12 pixels apart and not stacked on each other.\n \n-goto: file://|DOC_PATH|/test_docs/huge_amount_of_consts/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/huge_amount_of_consts/index.html\"\n \n compare-elements-position-near-false: (\n     \"//*[@class='item-table']//div[last()-1]\","}, {"sha": "c3f9240cc93642c728ba78749655a4fc73009803", "filename": "src/test/rustdoc-gui/impl-default-expansion.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fimpl-default-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fimpl-default-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fimpl-default-expansion.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,3 +1,3 @@\n // This test ensures that the impl blocks are open by default.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n assert-attribute: (\"#implementations-list details.implementors-toggle\", {\"open\": \"\"})"}, {"sha": "4999283dc8b911cd1f18c76d3cb980fa765a84d1", "filename": "src/test/rustdoc-gui/implementors.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // The goal of this test is to check that the external trait implementors, generated with JS,\n // have the same display than the \"local\" ones.\n-goto: file://|DOC_PATH|/implementors/trait.Whatever.html\n+goto: \"file://\" + |DOC_PATH| + \"/implementors/trait.Whatever.html\"\n assert: \"#implementors-list\"\n // There are supposed to be two implementors listed.\n assert-count: (\"#implementors-list .impl\", 2)\n@@ -15,7 +15,7 @@ assert-attribute: (\"#implementors-list .impl:nth-child(2)\", {\"id\": \"impl-Whateve\n assert-attribute: (\"#implementors-list .impl:nth-child(2) > a.anchor\", {\"href\": \"#impl-Whatever-1\"})\n assert: \"#implementors-list .impl:nth-child(2) > .code-header\"\n \n-goto: file://|DOC_PATH|/test_docs/struct.HasEmptyTraits.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HasEmptyTraits.html\"\n compare-elements-position-near-false: (\n     \"#impl-EmptyTrait1-for-HasEmptyTraits\",\n     \"#impl-EmptyTrait2-for-HasEmptyTraits\",\n@@ -29,7 +29,7 @@ compare-elements-position-near: (\n \n // Now check that re-exports work correctly.\n // There should be exactly one impl shown on both of these pages.\n-goto: file://|DOC_PATH|/lib2/trait.TraitToReexport.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.TraitToReexport.html\"\n assert-count: (\"#implementors-list .impl\", 1)\n-goto: file://|DOC_PATH|/implementors/trait.TraitToReexport.html\n+goto: \"file://\" + |DOC_PATH| + \"/implementors/trait.TraitToReexport.html\"\n assert-count: (\"#implementors-list .impl\", 1)"}, {"sha": "94b52f0056b0df8b67000da71c59e4dcd8265cdf", "filename": "src/test/rustdoc-gui/item-info-alignment.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fitem-info-alignment.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fitem-info-alignment.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-alignment.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // This test ensures that the \"item-info\" looks about the same\n // whether or not it's inside a toggle.\n-goto: file://|DOC_PATH|/lib2/struct.ItemInfoAlignmentTest.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.ItemInfoAlignmentTest.html\"\n \n // First, we try it in \"desktop\" mode.\n size: (1200, 870)"}, {"sha": "8ea14621cbf56d64087f64e52e76d440d10ab281", "filename": "src/test/rustdoc-gui/item-info-overflow.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the \"item-info\" elements don't overflow.\n-goto: file://|DOC_PATH|/lib2/struct.LongItemInfo.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.LongItemInfo.html\"\n // We set a fixed size so there is no chance of \"random\" resize.\n size: (1200, 870)\n // Logically, the \"item-decl\" and the \"item-info\" should have the same scroll width.\n@@ -13,7 +13,7 @@ assert-text: (\n )\n \n // Checking the \"item-info\" on an impl block as well:\n-goto: file://|DOC_PATH|/lib2/struct.LongItemInfo2.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.LongItemInfo2.html\"\n compare-elements-property: (\n     \"#impl-SimpleTrait-for-LongItemInfo2 .item-info\",\n     \"#impl-SimpleTrait-for-LongItemInfo2 + .docblock\","}, {"sha": "6780dfca68aa301f91a86bdd0713e60721eb3294", "filename": "src/test/rustdoc-gui/item-info.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fitem-info.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fitem-info.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures a few things for item info elements.\n-goto: file://|DOC_PATH|/lib2/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.Foo.html\"\n // Ensuring that the item information don't take 100% of the width if unnecessary.\n // We set a fixed size so there is no chance of \"random\" resize.\n size: (1100, 800)\n@@ -9,7 +9,7 @@ assert-css: (\".item-info .stab\", {\"width\": \"289px\"})\n assert-position: (\".item-info .stab\", {\"x\": 245})\n \n // Now we ensure that they're not rendered on the same line.\n-goto: file://|DOC_PATH|/lib2/trait.Trait.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n // We first ensure that there are two item info on the trait.\n assert-count: (\"#main-content > .item-info .stab\", 2)\n // They should not have the same `y` position!"}, {"sha": "2a92e9da52ce5616a1e571232c04ab58589649b0", "filename": "src/test/rustdoc-gui/item-summary-table.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fitem-summary-table.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fitem-summary-table.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-summary-table.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that <table> elements aren't display in items summary.\n-goto: file://|DOC_PATH|/lib2/summary_table/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/summary_table/index.html\"\n // We check that we picked the right item first.\n assert-text: (\".item-table .item-left\", \"Foo\")\n // Then we check that its summary is empty."}, {"sha": "edf179d0d5e6a39944d4fcf70e8e37d987c9c893", "filename": "src/test/rustdoc-gui/javascript-disabled.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fjavascript-disabled.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fjavascript-disabled.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fjavascript-disabled.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -2,5 +2,5 @@\n // can't be used without JS.\n javascript: false\n \n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n assert-css: (\".sub\", {\"display\": \"none\"})"}, {"sha": "31c7d0ce3c88dce99f2d18cc6e3ec6bdf240e6bb", "filename": "src/test/rustdoc-gui/jump-to-def-background.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // We check the background color on the jump to definition links in the source code page.\n-goto: file://|DOC_PATH|/src/link_to_definition/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/link_to_definition/lib.rs.html\"\n \n // Set the theme to dark.\n local-storage: {"}, {"sha": "05f8ddc716e8703b6bcadd675c04b83dbd6fc568", "filename": "src/test/rustdoc-gui/label-next-to-symbol.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // These tests verify that labels like \"UNIX\" and \"Deprecated\" stay on the same line as their symbol.\n // It also verifies the staggered layout on mobile.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n \n // Desktop view\n size: (1080, 600)"}, {"sha": "839629ad982ab6baf67bd45edd18dc2e56d33508", "filename": "src/test/rustdoc-gui/links-color.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test checks links colors.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n \n // This is needed so that the text color is computed.\n show-text: true"}, {"sha": "3423a449de478a38b5dafe8ab921d0e69102801d", "filename": "src/test/rustdoc-gui/list_code_block.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Flist_code_block.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Flist_code_block.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flist_code_block.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,4 +1,4 @@\n // This test checks that code blocks in list are supported.\n-goto: file://|DOC_PATH|/test_docs/index.html\n-goto: ./fn.check_list_code_block.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+goto: \"./fn.check_list_code_block.html\"\n assert: (\"pre.rust.fn\")"}, {"sha": "22a53dea616b007ee12b61b106bcad17845b3b2a", "filename": "src/test/rustdoc-gui/mobile.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fmobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fmobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmobile.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Test various properties of the mobile UI\n-goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/staged_api/struct.Foo.html\"\n size: (400, 600)\n \n font-size: 18\n@@ -24,7 +24,7 @@ assert-css-false: (\".content .out-of-band .since::before\", { \"content\": \"\\\"Since\n \n // On the settings page, the theme buttons should not line-wrap. Instead, they should\n // all be placed as a group on a line below the setting name \"Theme.\"\n-goto: file://|DOC_PATH|/settings.html\n+goto: \"file://\" + |DOC_PATH| + \"/settings.html\"\n size: (400, 600)\n // Ignored for now https://github.com/rust-lang/rust/issues/93784.\n // compare-elements-position-near-false: (\"#preferred-light-theme .setting-name\", \"#preferred-light-theme .choice\", {\"y\": 16})"}, {"sha": "cd3676a9871385703857de8edc0061c351a8a96f", "filename": "src/test/rustdoc-gui/module-items-font.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test checks that the correct font is used on module items (in index.html pages).\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-css: (\n     \".item-table .module-item a\",\n     {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},"}, {"sha": "2366a60f5c61d1458fa5af5a25a8ea6c2ef96e3b", "filename": "src/test/rustdoc-gui/no-docblock.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fno-docblock.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fno-docblock.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fno-docblock.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,8 +1,8 @@\n // This test checks that there are margins applied to methods with no docblocks.\n-goto: file://|DOC_PATH|/test_docs/trait.TraitWithNoDocblocks.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait.TraitWithNoDocblocks.html\"\n // Check that the two methods are more than 24px apart.\n compare-elements-position-near-false: (\"//*[@id='tymethod.first_fn']\", \"//*[@id='tymethod.second_fn']\", {\"y\": 24})\n \n-goto: file://|DOC_PATH|/test_docs/struct.TypeWithNoDocblocks.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.TypeWithNoDocblocks.html\"\n // Check that the two methods are more than 24px apart.\n compare-elements-position-near-false: (\"//*[@id='method.first_fn']\", \"//*[@id='method.second_fn']\", {\"y\": 24})"}, {"sha": "997fb5cf0adec0a92386804532fa79d9c2523528", "filename": "src/test/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test checks the position of the `i` for the notable traits.\n-goto: file://|DOC_PATH|/test_docs/struct.NotableStructWithLongName.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.NotableStructWithLongName.html\"\n show-text: true\n // We start with a wide screen.\n size: (1100, 600)"}, {"sha": "09ad6cdd7ac6aa4fc33d1d84b721b4eaace30bc0", "filename": "src/test/rustdoc-gui/overflow-tooltip-information.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Foverflow-tooltip-information.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Foverflow-tooltip-information.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Foverflow-tooltip-information.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,7 +1,7 @@\n // The goal of this test is to ensure that the tooltip `.information` class doesn't\n // have overflow and max-width CSS rules set because they create a bug in firefox on\n // mac. For more information: https://github.com/rust-lang/rust/issues/89185\n-goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.foo.html\"\n assert-css: (\".docblock > .example-wrap .tooltip\", {\n     \"overflow-x\": \"visible\",\n     \"max-width\": \"none\""}, {"sha": "fb63ea62a48afc003329335733cceef3805d6b9b", "filename": "src/test/rustdoc-gui/pocket-menu.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the \"pocket menus\" are working as expected.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n // First we check that the help menu doesn't exist yet.\n assert-false: \"#help-button .popover\"\n // Then we display the help menu."}, {"sha": "6c785e1c4bbababd765774154b4d7bc6566fc46b", "filename": "src/test/rustdoc-gui/run-on-hover.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Frun-on-hover.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Frun-on-hover.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Frun-on-hover.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,7 +1,7 @@\n // Example code blocks sometimes have a \"Run\" button to run them on the\n // Playground. That button is hidden until the user hovers over the code block.\n // This test checks that it is hidden, and that it shows on hover.\n-goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.foo.html\"\n assert-css: (\".test-arrow\", {\"visibility\": \"hidden\"})\n move-cursor-to: \".example-wrap\"\n assert-css: (\".test-arrow\", {\"visibility\": \"visible\"})"}, {"sha": "80abdc50c14ffa0e682d1d3a2a960b2fa1c8ffc3", "filename": "src/test/rustdoc-gui/rust-logo.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the correct style is applied to the rust logo in the sidebar.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n \n // First we start with the dark theme.\n local-storage: {\n@@ -15,7 +15,7 @@ assert-css: (\n )\n \n // In the source view page now.\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n \n local-storage: {\n     \"rustdoc-theme\": \"dark\",\n@@ -43,7 +43,7 @@ assert-css: (\n )\n \n // In the source view page now.\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n \n local-storage: {\n     \"rustdoc-theme\": \"ayu\",\n@@ -67,7 +67,7 @@ assert-css: (\n )\n \n // In the source view page now.\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n \n local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n reload:"}, {"sha": "27db816e6851732b413eb99b943f4c2e0d96e6ee", "filename": "src/test/rustdoc-gui/search-filter.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Checks that the crate search filtering is handled correctly and changes the results.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n show-text: true\n write: (\".search-input\", \"test\")\n // To be SURE that the search will be run.\n@@ -43,7 +43,7 @@ wait-for: \"#titles\"\n assert-property: (\"#crate-search\", {\"value\": \"all crates\"})\n \n // Checking that the URL parameter is taken into account for crate filtering.\n-goto: file://|DOC_PATH|/test_docs/index.html?search=test&filter-crate=lib2\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html?search=test&filter-crate=lib2\"\n wait-for: \"#crate-search\"\n assert-property: (\"#crate-search\", {\"value\": \"lib2\"})\n assert-false: \"#results .externcrate\""}, {"sha": "fba9cc8777f19bcfac2f25c45712d1991640d091", "filename": "src/test/rustdoc-gui/search-form-elements.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-form-elements.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-form-elements.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-form-elements.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the elements in \".search-form\" have the expected display.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n show-text: true\n \n // Ayu theme"}, {"sha": "ce0cef77ce4ff314d68ee2b81f828108b5277191", "filename": "src/test/rustdoc-gui/search-input-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-input-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-input-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-input-mobile.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // Test to ensure that you can click on the search input, whatever the width.\n // The PR which fixed it is: https://github.com/rust-lang/rust/pull/81592\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n size: (463, 700)\n // We first check that the search input isn't already focused.\n assert-false: (\"input.search-input:focus\")"}, {"sha": "dd19f03bd1e064cdf1c4245f986b3b961c08ca84", "filename": "src/test/rustdoc-gui/search-reexport.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-reexport.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-reexport.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-reexport.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // Checks that the reexports are present in the search index, can have\n // doc aliases and are highligted when their ID is the hash of the page.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n reload:\n // First we check that the reexport has the correct ID and no background color."}, {"sha": "bb78183778308c9c7cf0396e8710cfe897a0f6fa", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // The goal of this test is to ensure the color of the text is the one expected.\n-goto: file://|DOC_PATH|/test_docs/index.html?search=coo\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html?search=coo\"\n \n // This is needed so that the text color is computed.\n show-text: true\n@@ -826,7 +826,7 @@ assert-css: (\n )\n \n // Check the alias more specifically in the dark theme.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n // We set the theme so we're sure that the correct values will be used, whatever the computer\n // this test is running on.\n local-storage: {"}, {"sha": "53a335b6335f543e0cb07647b8f0d6844336180c", "filename": "src/test/rustdoc-gui/search-result-description.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-description.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-description.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-description.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test is to ensure that the codeblocks are correctly rendered in the search results.\n-goto: file://|DOC_PATH|/test_docs/index.html?search=some_more_function\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html?search=some_more_function\"\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n assert-text: (\".search-results .desc code\", \"format!\")"}, {"sha": "053bfd8c905d97a56cc1904b3e0cf5e34cc96232", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Checks that the search results have the expected width.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n size: (900, 1000)\n write: (\".search-input\", \"test\")\n // To be SURE that the search will be run."}, {"sha": "eeddf5ef6e803d3dff117852d2ce7debb18a267b", "filename": "src/test/rustdoc-gui/search-result-go-to-first.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-go-to-first.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-go-to-first.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-go-to-first.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -2,18 +2,18 @@\n \n // First, we check that the first page doesn't have the string we're looking for to ensure\n // that the feature is changing page as expected.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-text-false: (\".fqn\", \"Struct test_docs::Foo\")\n \n // We now check that we land on the search result page if \"go_to_first\" isn't set.\n-goto: file://|DOC_PATH|/test_docs/index.html?search=struct%3AFoo\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html?search=struct%3AFoo\"\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n assert-text-false: (\".fqn\", \"Struct test_docs::Foo\")\n // Ensure that the search results are displayed, not the \"normal\" content.\n assert-css: (\"#main-content\", {\"display\": \"none\"})\n \n // Now we can check that the feature is working as expected!\n-goto: file://|DOC_PATH|/test_docs/index.html?search=struct%3AFoo&go_to_first=true\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html?search=struct%3AFoo&go_to_first=true\"\n // Waiting for the page to load...\n wait-for-text: (\".fqn\", \"Struct test_docs::Foo\")"}, {"sha": "66e63155a4eabed266ded24358df0bbf82c1e87c", "filename": "src/test/rustdoc-gui/search-result-keyword.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-keyword.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-keyword.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-keyword.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Checks that the \"keyword\" results have the expected text alongside them.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n write: (\".search-input\", \"CookieMonster\")\n // To be SURE that the search will be run.\n press-key: 'Enter'"}, {"sha": "a19dc6a8b402cf376d6e4c1c9e693bf860fcabfc", "filename": "src/test/rustdoc-gui/search-tab-change-title-fn-sig.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-change-title-fn-sig.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-change-title-fn-sig.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-change-title-fn-sig.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // Checks that the search tab results work correctly with function signature syntax\n // First, try a search-by-name\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n write: (\".search-input\", \"Foo\")\n // To be SURE that the search will be run.\n press-key: 'Enter'\n@@ -22,7 +22,7 @@ press-key: \"ArrowLeft\"\n wait-for-attribute: (\"#titles > button:nth-of-type(3)\", {\"class\": \"selected\"})\n \n // Now try search-by-return\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n write: (\".search-input\", \"-> String\")\n // To be SURE that the search will be run.\n press-key: 'Enter'\n@@ -44,7 +44,7 @@ press-key: \"ArrowLeft\"\n wait-for-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n \n // Try with a search-by-return with no results\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n write: (\".search-input\", \"-> Something\")\n // To be SURE that the search will be run.\n press-key: 'Enter'\n@@ -54,7 +54,7 @@ assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n assert-text: (\"#titles > button:nth-of-type(1)\", \"In Function Return Types\", STARTS_WITH)\n \n // Try with a search-by-parameter\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n write: (\".search-input\", \"usize pattern\")\n // To be SURE that the search will be run.\n press-key: 'Enter'\n@@ -64,7 +64,7 @@ assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n assert-text: (\"#titles > button:nth-of-type(1)\", \"In Function Parameters\", STARTS_WITH)\n \n // Try with a search-by-parameter-and-return\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n write: (\".search-input\", \"pattern -> str\")\n // To be SURE that the search will be run.\n press-key: 'Enter'"}, {"sha": "dfbf1d38e0e110e7e625188c8eaac300204af015", "filename": "src/test/rustdoc-gui/settings.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the settings menu display is working as expected.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n show-text: true // needed when we check for colors below.\n // First, we check that the settings page doesn't exist.\n assert-false: \"#settings\"\n@@ -138,7 +138,7 @@ wait-for-css: (\"#help-button .popover\", {\"display\": \"block\"})\n assert-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n \n // Now we go to the settings page to check that the CSS is loaded as expected.\n-goto: file://|DOC_PATH|/settings.html\n+goto: \"file://\" + |DOC_PATH| + \"/settings.html\"\n wait-for: \"#settings\"\n assert-css: (\".setting-line .toggle .slider\", {\"width\": \"45px\", \"margin-right\": \"20px\"})\n "}, {"sha": "ea6f55272ffc95357caf9bbc98a85c74d27e382b", "filename": "src/test/rustdoc-gui/shortcuts.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fshortcuts.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fshortcuts.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fshortcuts.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Check that the various shortcuts are working.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n // We first check that the search input isn't already focused.\n assert-false: \"input.search-input:focus\"\n press-key: \"s\""}, {"sha": "3f719c4c4dc34cccaed1a7852e24d4615418ddc9", "filename": "src/test/rustdoc-gui/sidebar-links-color.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-links-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-links-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-links-color.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test checks links colors in sidebar before and after hover.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n \n // This is needed so that the text color is computed.\n show-text: true"}, {"sha": "01282f2ffeb7ae201aad385797de7d9e961769c1", "filename": "src/test/rustdoc-gui/sidebar-macro-reexport.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-macro-reexport.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-macro-reexport.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-macro-reexport.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the reexport of a macro doesn't make the original macro\n // displayed twice in the sidebar.\n-goto: file://|DOC_PATH|/test_docs/macro.repro.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/macro.repro.html\"\n wait-for: \".sidebar-elems .macro .macro\"\n assert-count: (\"//*[@class='sidebar-elems']//*[@class='block macro']//a[text()='repro']\", 1)"}, {"sha": "f1cba172ee35856a1f6fe60c6c6ff8d6ee4065c5", "filename": "src/test/rustdoc-gui/sidebar-mobile-scroll.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the mobile sidebar preserves scroll position.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n // Switching to \"mobile view\" by reducing the width to 600px.\n size: (600, 600)\n assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})"}, {"sha": "4cded2c773d4a3f1a204462fa4befdc098770dd0", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,7 +1,7 @@\n // This test ensure that the sidebar isn't \"hidden\" on mobile but instead moved out of the viewport.\n // This is especially important for devices for \"text-first\" content (like for users with\n // sight issues).\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n // Switching to \"mobile view\" by reducing the width to 600px.\n size: (600, 600)\n assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})"}, {"sha": "548fd22dcea90433dd9d5861b2acef8ef7c853c9", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // This test ensures that the elements in the sidebar are displayed correctly.\n javascript: false\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // Since the javascript is disabled, there shouldn't be a toggle.\n assert-false: \"#sidebar-toggle\"\n wait-for-css: (\".sidebar > *\", {\"visibility\": \"hidden\"})\n@@ -22,7 +22,7 @@ wait-for-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\"})\n wait-for-css: (\".sidebar\", {\"width\": \"300px\"})\n assert-local-storage: {\"rustdoc-source-sidebar-show\": \"true\"}\n click: \".sidebar a.selected\"\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n wait-for-css: (\".sidebar\", {\"width\": \"300px\"})\n assert-local-storage: {\"rustdoc-source-sidebar-show\": \"true\"}\n \n@@ -250,7 +250,7 @@ click: \"#sidebar-toggle\"\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"visible\"})\n assert-local-storage: {\"rustdoc-source-sidebar-show\": \"true\"}\n click: \".sidebar a.selected\"\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"hidden\"})\n assert-local-storage: {\"rustdoc-source-sidebar-show\": \"false\"}\n // Resize back to desktop size, to check that the sidebar doesn't spontaneously open."}, {"sha": "4993384a27ffd9ce8613392bee2867688663b305", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // The goal of this test is to ensure that the sidebar is working as expected in the source\n // code pages.\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // First: desktop mode.\n size: (1100, 800)\n // We check that the sidebar isn't expanded and has the expected width.\n@@ -17,7 +17,7 @@ wait-for: \"html:not(.expanded)\"\n assert: \"nav.sidebar\"\n \n // Checking that only the path to the current file is \"open\".\n-goto: file://|DOC_PATH|/src/lib2/another_folder/sub_mod/mod.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/lib2/another_folder/sub_mod/mod.rs.html\"\n // First we expand the sidebar again.\n click: (10, 10)\n // We wait for the sidebar to be expanded."}, {"sha": "ad1fb6df89ae9f813f71b372828ad6eb3d80fa54", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Checks multiple things on the sidebar display (width of its elements, colors, etc).\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n show-text: true\n local-storage: {\"rustdoc-theme\": \"light\"}\n@@ -39,13 +39,13 @@ click: \".sidebar h2.location a\"\n assert-property: (\"html\", {\"scrollTop\": \"0\"})\n \n // We now go back to the crate page to click on the \"lib2\" crate link.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-css: (\".sidebar-elems .crate > ul > li:first-child > a\", {\"color\": \"rgb(53, 109, 164)\"})\n click: \".sidebar-elems .crate > ul > li:first-child > a\"\n \n // PAGE: lib2/index.html\n-goto: file://|DOC_PATH|/lib2/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/index.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-text: (\".sidebar > .location\", \"Crate lib2\")\n // We check that we have the crates list and that the \"current\" on is now \"lib2\".\n@@ -67,13 +67,13 @@ assert-text: (\".sidebar .sidebar-elems .location\", \"In lib2\")\n // We check that we don't have the crate list.\n assert-false: \".sidebar-elems > .crate\"\n \n-goto: ./module/index.html\n+goto: \"./module/index.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-text: (\".sidebar > .location\", \"Module module\")\n // We check that we don't have the crate list.\n assert-false: \".sidebar-elems > .crate\"\n \n-goto: ./sub_module/sub_sub_module/index.html\n+goto: \"./sub_module/sub_sub_module/index.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-text: (\".sidebar > .location\", \"Module sub_sub_module\")\n // We check that we don't have the crate list.\n@@ -82,13 +82,13 @@ assert-text: (\".sidebar-elems > section ul > li:nth-child(1)\", \"Functions\")\n assert-text: (\"#functions + .item-table .item-left > a\", \"foo\")\n \n // Links to trait implementations in the sidebar should not wrap even if they are long.\n-goto: file://|DOC_PATH|/lib2/struct.HasALongTraitWithParams.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.HasALongTraitWithParams.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-property: (\".sidebar-elems section .block li > a\", {\"offsetHeight\": 29})\n \n // Test that clicking on of the \"In <module>\" headings in the sidebar links to the\n // appropriate anchor in index.html.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n click: \".block.mod h3 a\"\n // PAGE: index.html"}, {"sha": "ddfe0c3d1abe7510f71c6231ee43fcdf1420582c", "filename": "src/test/rustdoc-gui/source-anchor-scroll.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsource-anchor-scroll.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsource-anchor-scroll.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-anchor-scroll.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // We check that when the anchor changes and is output of the displayed content,\n // the page is scrolled to it.\n-goto: file://|DOC_PATH|/src/link_to_definition/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/link_to_definition/lib.rs.html\"\n \n // We reduce the window size to make it easier to make an element \"out of the page\".\n size: (600, 800)"}, {"sha": "76260d621eae15aab65288521202fe8a729deef5", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,12 +1,12 @@\n // Checks that the interactions with the source code pages are working as expected.\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // Check that we can click on the line number.\n click: \".src-line-numbers > span:nth-child(4)\" // This is the span for line 4.\n // Ensure that the page URL was updated.\n assert-document-property: ({\"URL\": \"lib.rs.html#4\"}, ENDS_WITH)\n assert-attribute: (\"//*[@id='4']\", {\"class\": \"line-highlighted\"})\n // We now check that the good spans are highlighted\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html#4-6\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html#4-6\"\n assert-attribute-false: (\".src-line-numbers > span:nth-child(3)\", {\"class\": \"line-highlighted\"})\n assert-attribute: (\".src-line-numbers > span:nth-child(4)\", {\"class\": \"line-highlighted\"})\n assert-attribute: (\".src-line-numbers > span:nth-child(5)\", {\"class\": \"line-highlighted\"})\n@@ -21,7 +21,7 @@ assert-css: (\".src-line-numbers\", {\"text-align\": \"right\"})\n // Now let's check that clicking on something else than the line number doesn't\n // do anything (and certainly not add a `#NaN` to the URL!).\n show-text: true\n-goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // We use this assert-position to know where we will click.\n assert-position: (\"//*[@id='1']\", {\"x\": 104, \"y\": 103})\n // We click on the left of the \"1\" span but still in the \"src-line-number\" `<pre>`."}, {"sha": "b17dfd94cf0e9f27e19994fb6384100351950e40", "filename": "src/test/rustdoc-gui/src-font-size.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsrc-font-size.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fsrc-font-size.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc-font-size.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,7 +1,7 @@\n // This test ensures that the \"[src]\" have the same font size as their headers\n // to avoid having some weird height difference in the background when the element\n // is selected.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n show-text: true\n // Check the impl headers.\n assert-css: (\".impl.has-srclink .srclink\", {\"font-size\": \"16px\", \"font-weight\": 400}, ALL)"}, {"sha": "b1de3c366149aaed91f57562c0e21920c1a9a217", "filename": "src/test/rustdoc-gui/theme-change.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Ensures that the theme change is working as expected.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n local-storage: {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": \"dark\"}\n reload:\n click: \"#settings-menu\"\n@@ -17,7 +17,7 @@ click: \"#theme-dark\"\n wait-for-css: (\"body\", { \"background-color\": \"rgb(53, 53, 53)\" })\n assert-local-storage: { \"rustdoc-theme\": \"dark\" }\n \n-goto: file://|DOC_PATH|/settings.html\n+goto: \"file://\" + |DOC_PATH| + \"/settings.html\"\n wait-for: \"#settings\"\n click: \"#theme-light\"\n wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })"}, {"sha": "c29571728a1a2a0ec13514b4ab259f056a076b30", "filename": "src/test/rustdoc-gui/theme-in-history.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Ensures that the theme is working when going back in history.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n // Set the theme to dark.\n local-storage: {\n     \"rustdoc-theme\": \"dark\",\n@@ -12,7 +12,7 @@ assert-css: (\"body\", { \"background-color\": \"rgb(53, 53, 53)\" })\n assert-local-storage: { \"rustdoc-theme\": \"dark\" }\n \n // Now we go to the settings page.\n-goto: file://|DOC_PATH|/settings.html\n+goto: \"file://\" + |DOC_PATH| + \"/settings.html\"\n wait-for: \"#settings\"\n // We change the theme to \"light\".\n click: \"#theme-light\""}, {"sha": "029403ee13ee1bdd0b0e562e03c97fde5715e56e", "filename": "src/test/rustdoc-gui/toggle-click-deadspace.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // This test ensures that clicking on a method summary, but not on the \"[-]\",\n // doesn't toggle the <details>.\n-goto: file://|DOC_PATH|/lib2/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.Foo.html\"\n assert-attribute: (\".impl-items .rustdoc-toggle\", {\"open\": \"\"})\n click: \"h4.code-header\" // This is the position of \"pub\" in \"pub fn a_method\"\n assert-attribute: (\".impl-items .rustdoc-toggle\", {\"open\": \"\"})"}, {"sha": "6ce24a81bb3bfc7338c1a8574ea870c0734c9bd3", "filename": "src/test/rustdoc-gui/toggle-docs-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,6 +1,6 @@\n // Checks that the documentation toggles on mobile have the correct position, style and work\n // as expected.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n size: (433, 600)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})\n click: (4, 270) // This is the position of the top doc comment toggle"}, {"sha": "8c9fd0a8866d5ae042bff7b763c74cb039cbb5aa", "filename": "src/test/rustdoc-gui/toggle-docs.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Checks that the documentation toggles have the correct position, style and work as expected.\n-goto: file://|DOC_PATH|/test_docs/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-attribute: (\"#main-content > details.top-doc\", {\"open\": \"\"})\n assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n click: \"#toggle-all-docs\"\n@@ -13,7 +13,7 @@ wait-for-attribute: (\"#main-content > details.top-doc\", {\"open\": \"\"})\n assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n \n // Check that it works on non-module pages as well.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n // We first check that everything is visible.\n assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n assert-attribute: (\"#implementations-list details.rustdoc-toggle\", {\"open\": \"\"}, ALL)"}, {"sha": "8ff5b91af0dd0abe834fcfb0f9bcdea8317c30f5", "filename": "src/test/rustdoc-gui/toggle-implementors.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggle-implementors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggle-implementors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-implementors.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,4 +1,4 @@\n // This test ensures that the implementors toggle are not open by default.\n-goto: file://|DOC_PATH|/implementors/trait.Whatever.html\n+goto: \"file://\" + |DOC_PATH| + \"/implementors/trait.Whatever.html\"\n \n assert-attribute-false: (\"#implementors-list > details\", {\"open\": \"\"}, ALL)"}, {"sha": "e4d59b5d72858b54759e9d3c1c1ee3afd73023e0", "filename": "src/test/rustdoc-gui/toggled-open-implementations.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggled-open-implementations.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftoggled-open-implementations.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggled-open-implementations.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This tests that the \"implementations\" section on struct/enum pages\n // has all the implementations toggled open by default, so users can\n // find method names in those implementations with Ctrl-F.\n-goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n assert-attribute: (\".rustdoc-toggle.implementors-toggle\", {\"open\": \"\"})"}, {"sha": "a799444a1087e97a6511d611fa29f1c5171c99d5", "filename": "src/test/rustdoc-gui/trait-sidebar-item-order.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // Checks that the elements in the sidebar are alphabetically sorted.\n-goto: file://|DOC_PATH|/test_docs/trait.AnotherOne.html\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait.AnotherOne.html\"\n assert-text: (\".sidebar-elems section .block li:nth-of-type(1) > a\", \"another\")\n assert-text: (\".sidebar-elems section .block li:nth-of-type(2) > a\", \"func1\")\n assert-text: (\".sidebar-elems section .block li:nth-of-type(3) > a\", \"func2\")"}, {"sha": "657c3cfa4b616d63fd7b0e1078f2e4104df51815", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that the items declaration content overflow is handled inside the <pre> directly.\n-goto: file://|DOC_PATH|/lib2/long_trait/trait.ALongNameBecauseItHelpsTestingTheCurrentProblem.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/long_trait/trait.ALongNameBecauseItHelpsTestingTheCurrentProblem.html\"\n // We set a fixed size so there is no chance of \"random\" resize.\n size: (1100, 800)\n // Logically, the <body> scroll width should be the width of the window.\n@@ -8,11 +8,11 @@ assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1324\"})\n \n // In the table-ish view on the module index, the name should not be wrapped more than necessary.\n-goto: file://|DOC_PATH|/lib2/too_long/index.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/index.html\"\n assert-property: (\".item-table .struct\", {\"offsetWidth\": \"684\"})\n \n // We now make the same check on type declaration...\n-goto: file://|DOC_PATH|/lib2/too_long/type.ReallyLongTypeNameLongLongLong.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/type.ReallyLongTypeNameLongLongLong.html\"\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n@@ -21,7 +21,7 @@ assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1103\"})\n \n // ... and constant.\n // On a sidenote, it also checks that the (very) long title isn't changing the docblock width.\n-goto: file://|DOC_PATH|/lib2/too_long/constant.ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/constant.ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong.html\"\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n@@ -30,7 +30,7 @@ assert-property: (\".item-decl pre\", {\"scrollWidth\": \"950\"})\n \n // On mobile:\n size: (600, 600)\n-goto: file://|DOC_PATH|/lib2/too_long/struct.SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/struct.SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName.html\"\n // It shouldn't have an overflow in the topbar either.\n store-property: (scrollWidth, \".mobile-topbar .location\", \"scrollWidth\")\n assert-property: (\".mobile-topbar .location\", {\"clientWidth\": |scrollWidth|})"}, {"sha": "776c8ec721e2166d79269bee84d6c57fd2234778", "filename": "src/test/rustdoc-gui/where-whitespace.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,13 +1,13 @@\n // This test ensures that the where conditions are correctly displayed.\n-goto: file://|DOC_PATH|/lib2/trait.Whitespace.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Whitespace.html\"\n show-text: true\n // First, we check in the trait definition if the where clause is \"on its own\" (not on the same\n // line than \"pub trait Whitespace<Idx>\").\n compare-elements-position-false: (\".item-decl code\", \".where.fmt-newline\", (\"y\"))\n // And that the code following it isn't on the same line either.\n compare-elements-position-false: (\".item-decl .fnname\", \".where.fmt-newline\", (\"y\"))\n \n-goto: file://|DOC_PATH|/lib2/struct.WhereWhitespace.html\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.WhereWhitespace.html\"\n // We make the screen a bit wider to ensure that the trait impl is on one line.\n size: (915, 915)\n "}, {"sha": "d1b593b7f0a71c27696978b5ee0a76922e73c6dd", "filename": "src/test/ui/transmute-equal-assoc-types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,9 +1,11 @@\n+// check-pass\n+\n trait Foo {\n     type Bar;\n }\n \n unsafe fn noop<F: Foo>(foo: F::Bar) -> F::Bar {\n-    ::std::mem::transmute(foo) //~ ERROR cannot transmute between types of different sizes\n+    ::std::mem::transmute(foo)\n }\n \n fn main() {}"}, {"sha": "ce7657f9640b49ac86732f75a0cc0360f6896e8a", "filename": "src/test/ui/transmute-equal-assoc-types.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bba9785dd73f61aacd301a2cb379e1e85a129047/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bba9785dd73f61aacd301a2cb379e1e85a129047/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.stderr?ref=bba9785dd73f61aacd301a2cb379e1e85a129047", "patch": "@@ -1,11 +0,0 @@\n-error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/transmute-equal-assoc-types.rs:6:5\n-   |\n-LL |     ::std::mem::transmute(foo)\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `<F as Foo>::Bar` does not have a fixed size\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0512`."}, {"sha": "943191551396de4afc1491f8567317676d6a5798", "filename": "src/test/ui/transmute/lifetimes.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fui%2Ftransmute%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fui%2Ftransmute%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Flifetimes.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+use std::ptr::NonNull;\n+\n+struct Foo<'a, T: ?Sized>(&'a (), NonNull<T>);\n+\n+fn foo<'a, 'b, T: ?Sized>(x: Foo<'a, T>) -> Foo<'b, T> {\n+    unsafe { std::mem::transmute(x) }\n+}\n+\n+struct Bar<'a, T: ?Sized>(&'a T);\n+\n+fn bar<'a, 'b, T: ?Sized>(x: Bar<'a, T>) -> Bar<'b, T> {\n+    unsafe { std::mem::transmute(x) }\n+}\n+\n+struct Boo<'a, T: ?Sized>(&'a T, u32);\n+\n+fn boo<'a, 'b, T: ?Sized>(x: Boo<'a, T>) -> Boo<'b, T> {\n+    unsafe { std::mem::transmute(x) }\n+}\n+\n+fn main() {}"}, {"sha": "da4a0a660c8cbc20c2fe8d0597078b57e24b6ca3", "filename": "src/test/ui/transmute/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -10,7 +10,7 @@ pub trait TypeConstructor<'a> {\n unsafe fn transmute_lifetime<'a, 'b, C>(x: <C as TypeConstructor<'a>>::T)\n                                         -> <C as TypeConstructor<'b>>::T\n where for<'z> C: TypeConstructor<'z> {\n-    transmute(x) //~ ERROR cannot transmute between types of different sizes\n+    transmute(x)\n }\n \n unsafe fn sizes() {"}, {"sha": "6cb0d7f67e0853a76a1558d6d27ee72cd8b83c1d", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -1,11 +1,3 @@\n-error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:13:5\n-   |\n-LL |     transmute(x)\n-   |     ^^^^^^^^^\n-   |\n-   = note: `<C as TypeConstructor<'_>>::T` does not have a fixed size\n-\n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/main.rs:17:17\n    |\n@@ -33,6 +25,6 @@ LL |     let x: Foo = transmute(10);\n    = note: source type: `i32` (32 bits)\n    = note: target type: `Foo` (0 bits)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0512`."}, {"sha": "45b63a4aa5df8bd79c27b32755b32e30ebfaf909", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c27948d255167d827421401950c6d723ba28de8f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27948d255167d827421401950c6d723ba28de8f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=c27948d255167d827421401950c6d723ba28de8f", "patch": "@@ -129,7 +129,12 @@ fn check_rvalue<'tcx>(\n         | Rvalue::Use(operand)\n         | Rvalue::Cast(\n             CastKind::PointerFromExposedAddress\n-            | CastKind::Misc\n+            | CastKind::IntToInt\n+            | CastKind::FloatToInt\n+            | CastKind::IntToFloat\n+            | CastKind::FloatToFloat\n+            | CastKind::FnPtrToPtr\n+            | CastKind::PtrToPtr\n             | CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n             operand,\n             _,"}]}