{"sha": "4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996", "node_id": "C_kwDOAAsO6NoAKDRhNGZjM2JiNWIxZWZlNjg1N2NmNWQ2YzBiNTU0ZmYzNmI5NjY5OTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-30T03:51:27Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-05T03:04:54Z"}, "message": "Implement support for GeneratorWitnessMIR in new solver", "tree": {"sha": "1d5cf58e0da0619153ce8d194a1affe32d0ec4d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d5cf58e0da0619153ce8d194a1affe32d0ec4d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996", "html_url": "https://github.com/rust-lang/rust/commit/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb0e8d162a021f8a795fb603f5d8c0017855160", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb0e8d162a021f8a795fb603f5d8c0017855160", "html_url": "https://github.com/rust-lang/rust/commit/2fb0e8d162a021f8a795fb603f5d8c0017855160"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "a691b008e9d7885fb66c2b62fd532ebb266d2b1b", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996", "patch": "@@ -1,7 +1,9 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{def_id::DefId, Movability, Mutability};\n use rustc_infer::traits::query::NoSolution;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::{\n+    self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitableExt,\n+};\n \n use crate::solve::EvalCtxt;\n \n@@ -60,7 +62,16 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n \n         ty::GeneratorWitness(types) => Ok(ecx.instantiate_binder_with_placeholders(types).to_vec()),\n \n-        ty::GeneratorWitnessMIR(..) => todo!(),\n+        ty::GeneratorWitnessMIR(def_id, substs) => Ok(ecx\n+            .tcx()\n+            .generator_hidden_types(def_id)\n+            .map(|bty| {\n+                ecx.instantiate_binder_with_placeholders(replace_erased_lifetimes_with_bound_vars(\n+                    tcx,\n+                    bty.subst(tcx, substs),\n+                ))\n+            })\n+            .collect()),\n \n         // For `PhantomData<T>`, we pass `T`.\n         ty::Adt(def, substs) if def.is_phantom_data() => Ok(vec![substs.type_at(0)]),\n@@ -76,6 +87,29 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n     }\n }\n \n+fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> ty::Binder<'tcx, Ty<'tcx>> {\n+    debug_assert!(!ty.has_late_bound_regions());\n+    let mut counter = 0;\n+    let ty = tcx.fold_regions(ty, |mut r, current_depth| {\n+        if let ty::ReErased = r.kind() {\n+            let br = ty::BoundRegion {\n+                var: ty::BoundVar::from_u32(counter),\n+                kind: ty::BrAnon(counter, None),\n+            };\n+            counter += 1;\n+            r = tcx.mk_re_late_bound(current_depth, br);\n+        }\n+        r\n+    });\n+    let bound_vars = tcx.mk_bound_variable_kinds_from_iter(\n+        (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n+    );\n+    ty::Binder::bind_with_vars(ty, bound_vars)\n+}\n+\n pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n@@ -178,7 +212,16 @@ pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n \n         ty::GeneratorWitness(types) => Ok(ecx.instantiate_binder_with_placeholders(types).to_vec()),\n \n-        ty::GeneratorWitnessMIR(..) => todo!(),\n+        ty::GeneratorWitnessMIR(def_id, substs) => Ok(ecx\n+            .tcx()\n+            .generator_hidden_types(def_id)\n+            .map(|bty| {\n+                ecx.instantiate_binder_with_placeholders(replace_erased_lifetimes_with_bound_vars(\n+                    ecx.tcx(),\n+                    bty.subst(ecx.tcx(), substs),\n+                ))\n+            })\n+            .collect()),\n     }\n }\n "}, {"sha": "6a926534e079b86622da3b93617306fb6a6fe74e", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.fail.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr?ref=4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: `impl Future<Output = ()>` cannot be sent between threads safely\n+  --> $DIR/auto-with-drop_tracking_mir.rs:24:13\n+   |\n+LL |     is_send(foo());\n+   |     ------- ^^^^^ `impl Future<Output = ()>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Send` is not implemented for `impl Future<Output = ()>`\n+note: required by a bound in `is_send`\n+  --> $DIR/auto-with-drop_tracking_mir.rs:23:24\n+   |\n+LL |     fn is_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a5db7c4636b318be9853045cfffe4133b0de1681", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs?ref=4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -Ztrait-solver=next -Zdrop-tracking-mir\n+// edition: 2021\n+// revisions: pass fail\n+//[pass] check-pass\n+\n+#![feature(negative_impls)]\n+\n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n+async fn foo() {\n+    #[cfg(pass)]\n+    let x = &();\n+    #[cfg(fail)]\n+    let x = &NotSync;\n+    bar().await;\n+    drop(x);\n+}\n+\n+async fn bar() {}\n+\n+fn main() {\n+    fn is_send(_: impl Send) {}\n+    is_send(foo());\n+    //[fail]~^ ERROR `impl Future<Output = ()>` cannot be sent between threads safely\n+}"}]}