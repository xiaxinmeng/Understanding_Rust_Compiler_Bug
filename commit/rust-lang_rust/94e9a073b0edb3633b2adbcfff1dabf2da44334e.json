{"sha": "94e9a073b0edb3633b2adbcfff1dabf2da44334e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZTlhMDczYjBlZGIzNjMzYjJhZGJjZmZmMWRhYmYyZGE0NDMzNGU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-10-20T00:49:08Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-10-20T00:49:08Z"}, "message": "Point core::ptr::Shared to tracking issue #27730.", "tree": {"sha": "f748b33bec6d4ec5975f5397db4419e9a4a3522a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f748b33bec6d4ec5975f5397db4419e9a4a3522a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94e9a073b0edb3633b2adbcfff1dabf2da44334e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94e9a073b0edb3633b2adbcfff1dabf2da44334e", "html_url": "https://github.com/rust-lang/rust/commit/94e9a073b0edb3633b2adbcfff1dabf2da44334e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94e9a073b0edb3633b2adbcfff1dabf2da44334e/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22581599819c2384dc2663999ab033cb7d5a0ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/22581599819c2384dc2663999ab033cb7d5a0ac3", "html_url": "https://github.com/rust-lang/rust/commit/22581599819c2384dc2663999ab033cb7d5a0ac3"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "f3ddb2a9fffe45155fe69369245e29a822da6d3f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94e9a073b0edb3633b2adbcfff1dabf2da44334e/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e9a073b0edb3633b2adbcfff1dabf2da44334e/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=94e9a073b0edb3633b2adbcfff1dabf2da44334e", "patch": "@@ -538,7 +538,7 @@ impl<T> fmt::Pointer for Unique<T> {\n /// building abstractions like `Rc<T>` or `Arc<T>`, which internally\n /// use raw pointers to manage the memory that they own.\n #[unstable(feature = \"shared\", reason = \"needs an RFC to flesh out design\",\n-           issue = \"0\")]\n+           issue = \"27730\")]\n pub struct Shared<T: ?Sized> {\n     pointer: NonZero<*const T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n@@ -551,37 +551,37 @@ pub struct Shared<T: ?Sized> {\n \n /// `Shared` pointers are not `Send` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> !Send for Shared<T> { }\n \n /// `Shared` pointers are not `Sync` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> !Sync for Shared<T> { }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Shared<T> {\n     /// Creates a new `Shared`.\n     pub unsafe fn new(ptr: *mut T) -> Self {\n         Shared { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Clone for Shared<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Copy for Shared<T> { }\n \n #[cfg(not(stage0))] // remove cfg after new snapshot\n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Shared<U>> for Shared<T> where T: Unsize<U> { }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Deref for Shared<T> {\n     type Target = *mut T;\n \n@@ -591,7 +591,7 @@ impl<T: ?Sized> Deref for Shared<T> {\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T> fmt::Pointer for Shared<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&*self.pointer, f)"}]}