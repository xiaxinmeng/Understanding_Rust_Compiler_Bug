{"sha": "f135641cc873c21ea8768a78534efc9ff3f4bb82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzU2NDFjYzg3M2MyMWVhODc2OGE3ODUzNGVmYzlmZjNmNGJiODI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-11T14:26:49Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-11T14:26:49Z"}, "message": "Use multi line when type bounds does not fit in a single line", "tree": {"sha": "d89e912483296697fcf44df222d99f59240ba575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d89e912483296697fcf44df222d99f59240ba575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f135641cc873c21ea8768a78534efc9ff3f4bb82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f135641cc873c21ea8768a78534efc9ff3f4bb82", "html_url": "https://github.com/rust-lang/rust/commit/f135641cc873c21ea8768a78534efc9ff3f4bb82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f135641cc873c21ea8768a78534efc9ff3f4bb82/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b195ae228be1c74b2ccdc83697219e35439b01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b195ae228be1c74b2ccdc83697219e35439b01f", "html_url": "https://github.com/rust-lang/rust/commit/9b195ae228be1c74b2ccdc83697219e35439b01f"}], "stats": {"total": 209, "additions": 82, "deletions": 127}, "files": [{"sha": "04778b6ddcab1dae55848ca83539be70fe1e86b5", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f135641cc873c21ea8768a78534efc9ff3f4bb82/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135641cc873c21ea8768a78534efc9ff3f4bb82/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f135641cc873c21ea8768a78534efc9ff3f4bb82", "patch": "@@ -2063,12 +2063,12 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     // FIXME if context.config.struct_lit_style() == Visual, but we run out\n     // of space, we should fall back to BlockIndent.\n }\n+\n pub fn struct_lit_field_separator(config: &Config) -> &str {\n     colon_spaces(config.space_before_struct_lit_field_colon(),\n                  config.space_after_struct_lit_field_colon())\n }\n \n-\n fn rewrite_field(context: &RewriteContext, field: &ast::Field, shape: Shape) -> Option<String> {\n     let name = &field.ident.node.to_string();\n     if field.is_shorthand {"}, {"sha": "78226624c4f0f073b8ff613aa9b0704117112ba1", "filename": "src/items.rs", "status": "modified", "additions": 38, "deletions": 69, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/f135641cc873c21ea8768a78534efc9ff3f4bb82/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135641cc873c21ea8768a78534efc9ff3f4bb82/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f135641cc873c21ea8768a78534efc9ff3f4bb82", "patch": "@@ -21,7 +21,8 @@ use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n use comment::{FindUncommented, contains_comment, rewrite_comment, recover_comment_removed};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n-use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style, TypeDensity};\n+use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style};\n+use types::join_bounds;\n \n use syntax::{ast, abi, ptr, symbol};\n use syntax::codemap::{Span, BytePos};\n@@ -666,7 +667,7 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n                                                                context.config),\n                                                0);\n         let generics_str =\n-            try_opt!(rewrite_generics(context, generics, shape, shape.width, mk_sp(lo, hi)));\n+            try_opt!(rewrite_generics_inner(context, generics, shape, shape.width, mk_sp(lo, hi)));\n \n         let polarity_str = if polarity == ast::ImplPolarity::Negative {\n             \"!\"\n@@ -684,7 +685,7 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n                                                               &mut result);\n             if !success {\n                 let generics_str =\n-                    try_opt!(rewrite_generics(context, generics, shape, 0, mk_sp(lo, hi)));\n+                    try_opt!(rewrite_generics_inner(context, generics, shape, 0, mk_sp(lo, hi)));\n                 if !format_trait_ref_then_update_result(context,\n                                                         &trait_ref,\n                                                         offset,\n@@ -839,15 +840,9 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         let body_lo = context.codemap.span_after(item.span, \"{\");\n \n-        let generics_indent = offset + last_line_width(&result);\n-        let shape = generics_shape_from_config(context.config,\n-                                               Shape::indented(generics_indent, context.config),\n-                                               0);\n-        let generics_str = try_opt!(rewrite_generics(context,\n-                                                     generics,\n-                                                     shape,\n-                                                     shape.width,\n-                                                     mk_sp(item.span.lo, body_lo)));\n+        let shape = Shape::indented(offset + last_line_width(&result), context.config);\n+        let generics_str =\n+            try_opt!(rewrite_generics(context, generics, shape, mk_sp(item.span.lo, body_lo)));\n         result.push_str(&generics_str);\n \n         let trait_bound_str =\n@@ -1091,16 +1086,9 @@ fn format_tuple_struct(context: &RewriteContext,\n \n     let where_clause_str = match generics {\n         Some(generics) => {\n-            let generics_indent = offset + last_line_width(&header_str);\n-            let shape = generics_shape_from_config(context.config,\n-                                                   Shape::indented(generics_indent,\n-                                                                   context.config),\n-                                                   0);\n-            let generics_str = try_opt!(rewrite_generics(context,\n-                                                         generics,\n-                                                         shape,\n-                                                         shape.width,\n-                                                         mk_sp(span.lo, body_lo)));\n+            let shape = Shape::indented(offset + last_line_width(&header_str), context.config);\n+            let g_span = mk_sp(span.lo, body_lo);\n+            let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n             result.push_str(&generics_str);\n \n             let where_budget = try_opt!(context\n@@ -1227,16 +1215,10 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n     result.push_str(\"type \");\n     result.push_str(&ident.to_string());\n \n-    let generics_indent = indent + result.len();\n-    let generics_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n-    let shape = generics_shape_from_config(context.config,\n-                                           try_opt!(Shape::indented(generics_indent,\n-                                                                    context.config)\n-                                                        .sub_width(\" =\".len())),\n-                                           0);\n-    let generics_str =\n-        try_opt!(rewrite_generics(context, generics, shape, shape.width, generics_span));\n-\n+    // 2 = `= `\n+    let shape = try_opt!(Shape::indented(indent + result.len(), context.config).sub_width(2));\n+    let g_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n+    let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n     result.push_str(&generics_str);\n \n     let where_budget = try_opt!(context\n@@ -1470,23 +1452,14 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n     let prefix = format!(\"type {}\", ident);\n \n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n-        let joiner = match context.config.type_punctuation_density() {\n-            TypeDensity::Compressed => \"+\",\n-            TypeDensity::Wide => \" + \",\n-        };\n+        let shape = Shape::legacy(context.config.max_width(), indent);\n         let bounds: &[_] = ty_param_bounds;\n-        let bound_str =\n-            try_opt!(bounds\n-                         .iter()\n-                         .map(|ty_bound| {\n-                                  ty_bound.rewrite(context,\n-                                                   Shape::legacy(context.config.max_width(),\n-                                                                 indent))\n-                              })\n-                         .collect::<Option<Vec<_>>>())\n-                .join(joiner);\n+        let bound_str = try_opt!(bounds\n+                                     .iter()\n+                                     .map(|ty_bound| ty_bound.rewrite(context, shape))\n+                                     .collect::<Option<Vec<_>>>());\n         if bounds.len() > 0 {\n-            format!(\": {}\", bound_str)\n+            format!(\": {}\", join_bounds(context, shape, &bound_str))\n         } else {\n             String::new()\n         }\n@@ -1711,13 +1684,9 @@ fn rewrite_fn_base(context: &RewriteContext,\n     result.push_str(&ident.to_string());\n \n     // Generics.\n-    let generics_indent = indent + last_line_width(&result);\n-    let generics_span = mk_sp(span.lo, span_for_return(&fd.output).lo);\n-    let shape = generics_shape_from_config(context.config,\n-                                           Shape::indented(generics_indent, context.config),\n-                                           0);\n-    let generics_str =\n-        try_opt!(rewrite_generics(context, generics, shape, shape.width, generics_span));\n+    let shape = Shape::indented(indent + last_line_width(&result), context.config);\n+    let g_span = mk_sp(span.lo, span_for_return(&fd.output).lo);\n+    let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n     result.push_str(&generics_str);\n \n     let snuggle_angle_bracket = generics_str\n@@ -2182,9 +2151,19 @@ fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause) -> bool {\n fn rewrite_generics(context: &RewriteContext,\n                     generics: &ast::Generics,\n                     shape: Shape,\n-                    one_line_width: usize,\n                     span: Span)\n                     -> Option<String> {\n+    let shape = generics_shape_from_config(context.config, shape, 0);\n+    rewrite_generics_inner(context, generics, shape, shape.width, span)\n+        .or_else(|| rewrite_generics_inner(context, generics, shape, 0, span))\n+}\n+\n+fn rewrite_generics_inner(context: &RewriteContext,\n+                          generics: &ast::Generics,\n+                          shape: Shape,\n+                          one_line_width: usize,\n+                          span: Span)\n+                          -> Option<String> {\n     // FIXME: convert bounds to where clauses where they get too big or if\n     // there is a where clause at all.\n     let lifetimes: &[_] = &generics.lifetimes;\n@@ -2286,20 +2265,11 @@ fn rewrite_trait_bounds(context: &RewriteContext,\n     if bounds.is_empty() {\n         return Some(String::new());\n     }\n-    let joiner = match context.config.type_punctuation_density() {\n-        TypeDensity::Compressed => \"+\",\n-        TypeDensity::Wide => \" + \",\n-    };\n     let bound_str = try_opt!(bounds\n                                  .iter()\n                                  .map(|ty_bound| ty_bound.rewrite(&context, shape))\n-                                 .collect::<Option<Vec<_>>>())\n-        .join(joiner);\n-\n-    let mut result = String::new();\n-    result.push_str(\": \");\n-    result.push_str(&bound_str);\n-    Some(result)\n+                                 .collect::<Option<Vec<_>>>());\n+    Some(format!(\": {}\", join_bounds(context, shape, &bound_str)))\n }\n \n fn rewrite_where_clause_rfc_style(context: &RewriteContext,\n@@ -2463,9 +2433,8 @@ fn format_generics(context: &RewriteContext,\n                    offset: Indent,\n                    span: Span)\n                    -> Option<String> {\n-    let shape =\n-        generics_shape_from_config(context.config, Shape::indented(offset, context.config), 0);\n-    let mut result = try_opt!(rewrite_generics(context, generics, shape, shape.width, span));\n+    let shape = Shape::indented(offset, context.config);\n+    let mut result = try_opt!(rewrite_generics(context, generics, shape, span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n         let budget = try_opt!(context"}, {"sha": "d2405f390f1d2e0d93a9fc07793c9d1b030c49e3", "filename": "src/types.rs", "status": "modified", "additions": 43, "deletions": 57, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f135641cc873c21ea8768a78534efc9ff3f4bb82/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135641cc873c21ea8768a78534efc9ff3f4bb82/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=f135641cc873c21ea8768a78534efc9ff3f4bb82", "patch": "@@ -22,7 +22,7 @@ use codemap::SpanUtils;\n use items::{format_generics_item_list, generics_shape_from_config};\n use lists::{itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp};\n+use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp, last_line_width};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple_type};\n use config::TypeDensity;\n \n@@ -362,22 +362,15 @@ impl Rewrite for ast::WherePredicate {\n                                                             .collect::<Option<Vec<_>>>())\n                         .join(\", \");\n \n-                    let joiner = match context.config.type_punctuation_density() {\n-                        TypeDensity::Compressed => \"+\",\n-                        TypeDensity::Wide => \" + \",\n-                    };\n                     // 6 = \"for<> \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n-                    let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String = try_opt!(\n-                        bounds\n-                            .iter()\n-                            .map(|ty_bound| {\n-                                ty_bound.rewrite(context,\n-                                                 Shape::legacy(budget, shape.indent + used_width))\n-                            })\n-                            .collect::<Option<Vec<_>>>()\n-                    ).join(joiner);\n+                    let ty_shape = try_opt!(shape.block_left(used_width));\n+                    let bounds: Vec<_> =\n+                        try_opt!(bounds\n+                                     .iter()\n+                                     .map(|ty_bound| ty_bound.rewrite(context, ty_shape))\n+                                     .collect());\n+                    let bounds_str = join_bounds(context, ty_shape, &bounds);\n \n                     if context.config.spaces_within_angle_brackets() && lifetime_str.len() > 0 {\n                         format!(\"for< {} > {}{}{}\",\n@@ -389,21 +382,14 @@ impl Rewrite for ast::WherePredicate {\n                         format!(\"for<{}> {}{}{}\", lifetime_str, type_str, colon, bounds_str)\n                     }\n                 } else {\n-                    let joiner = match context.config.type_punctuation_density() {\n-                        TypeDensity::Compressed => \"+\",\n-                        TypeDensity::Wide => \" + \",\n-                    };\n                     let used_width = type_str.len() + colon.len();\n-                    let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String = try_opt!(\n-                        bounds\n-                            .iter()\n-                            .map(|ty_bound| {\n-                                ty_bound.rewrite(context,\n-                                                 Shape::legacy(budget, shape.indent + used_width))\n-                            })\n-                            .collect::<Option<Vec<_>>>()\n-                    ).join(joiner);\n+                    let ty_shape = try_opt!(shape.block_left(used_width));\n+                    let bounds: Vec<_> =\n+                        try_opt!(bounds\n+                                     .iter()\n+                                     .map(|ty_bound| ty_bound.rewrite(context, ty_shape))\n+                                     .collect());\n+                    let bounds_str = join_bounds(context, ty_shape, &bounds);\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n                 }\n@@ -458,11 +444,11 @@ fn rewrite_bounded_lifetime<'b, I>(lt: &ast::Lifetime,\n                                             .map(|b| b.rewrite(context, shape))\n                                             .collect());\n         let colon = type_bound_colon(context);\n-        let joiner = match context.config.type_punctuation_density() {\n-            TypeDensity::Compressed => \"+\",\n-            TypeDensity::Wide => \" + \",\n-        };\n-        let result = format!(\"{}{}{}\", result, colon, appendix.join(joiner));\n+        let overhead = last_line_width(&result) + colon.len();\n+        let result = format!(\"{}{}{}\",\n+                             result,\n+                             colon,\n+                             join_bounds(context, try_opt!(shape.sub_width(overhead)), &appendix));\n         wrap_str(result, context.config.max_width(), shape)\n     }\n }\n@@ -494,12 +480,8 @@ impl Rewrite for ast::Lifetime {\n \n impl Rewrite for ast::TyParamBounds {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        let joiner = match context.config.type_punctuation_density() {\n-            TypeDensity::Compressed => \"+\",\n-            TypeDensity::Wide => \" + \",\n-        };\n         let strs: Vec<_> = try_opt!(self.iter().map(|b| b.rewrite(context, shape)).collect());\n-        wrap_str(strs.join(joiner), context.config.max_width(), shape)\n+        join_bounds(context, shape, &strs).rewrite(context, shape)\n     }\n }\n \n@@ -514,24 +496,12 @@ impl Rewrite for ast::TyParam {\n         result.push_str(&attr_str);\n         result.push_str(&self.ident.to_string());\n         if !self.bounds.is_empty() {\n-            if context.config.space_before_bound() {\n-                result.push_str(\" \");\n-            }\n-            result.push_str(\":\");\n-            if context.config.space_after_bound_colon() {\n-                result.push_str(\" \");\n-            }\n-            let joiner = match context.config.type_punctuation_density() {\n-                TypeDensity::Compressed => \"+\",\n-                TypeDensity::Wide => \" + \",\n-            };\n-            let bounds: String = try_opt!(self.bounds\n-                                              .iter()\n-                                              .map(|ty_bound| ty_bound.rewrite(context, shape))\n-                                              .collect::<Option<Vec<_>>>())\n-                .join(joiner);\n-\n-            result.push_str(&bounds);\n+            result.push_str(type_bound_colon(context));\n+            let strs: Vec<_> = try_opt!(self.bounds\n+                                            .iter()\n+                                            .map(|ty_bound| ty_bound.rewrite(context, shape))\n+                                            .collect());\n+            result.push_str(&join_bounds(context, shape, &strs));\n         }\n         if let Some(ref def) = self.default {\n \n@@ -732,3 +702,19 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n \n     Some(result)\n }\n+\n+pub fn join_bounds(context: &RewriteContext, shape: Shape, type_strs: &Vec<String>) -> String {\n+    // Try to join types in a single line\n+    let joiner = match context.config.type_punctuation_density() {\n+        TypeDensity::Compressed => \"+\",\n+        TypeDensity::Wide => \" + \",\n+    };\n+    let result = type_strs.join(joiner);\n+    if result.contains('\\n') || result.len() > shape.width {\n+        let joiner_indent = shape.indent.block_indent(context.config);\n+        let joiner = format!(\"\\n{}+ \", joiner_indent.to_string(context.config));\n+        type_strs.join(&joiner)\n+    } else {\n+        result\n+    }\n+}"}]}