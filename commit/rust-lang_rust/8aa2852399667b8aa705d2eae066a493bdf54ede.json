{"sha": "8aa2852399667b8aa705d2eae066a493bdf54ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYTI4NTIzOTk2NjdiOGFhNzA1ZDJlYWUwNjZhNDkzYmRmNTRlZGU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-17T13:45:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-17T13:45:20Z"}, "message": "Rollup merge of #48095 - QuietMisdreavus:doctest-assembly, r=GuillaumeGomez\n\nadd unit tests for rustdoc's processing of doctests\n\ncc #42018\n\nThere's a lot of things that rustdoc will do to massage doctests into something that can be compiled, and a lot of options that can be toggled to affect this. Hopefully this list of tests can show off that functionality.\n\nThe first commit is slightly unrelated but doesn't touch public functionality, because i found that if you have a manual `fn main`, it adds an extra line break at the end, whereas it would trim this extra line break if it were putting a `fn main` in automatically. That first commit makes it trim out that whitespace ahead of time.", "tree": {"sha": "a9e6cb906f5948739d669a806e0d3605bda2dfbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9e6cb906f5948739d669a806e0d3605bda2dfbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aa2852399667b8aa705d2eae066a493bdf54ede", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaiDHwCRBK7hj4Ov3rIwAAdHIIAHSFR9WNmjtToBQ7dcN92Nm7\nMJay4YjGb1jbkIrxFYXdkqvDwXinBpiP28byRATMFpmIrwXnmdvSoP+D+v3ibv96\nT81v+3PBfpHkJUrC1gMhtiiAKGCPed9YinFTq/EHuGKcQW7d6IHg0DH7wCzPnMD1\n+I4hzYYG9RdEROz3Cb4ruLJDrrWtQB2CilVttRzMMcTrce1trdwOOyc9wDMs0ZEH\nRbi4n6VX1dRqPnZpVe1rMpXGoEXbiTh9ja7b0wzTA+TDpMkKTT0iGZ/gu8RVLonU\n/VjMlqsMBzYe9ZwJ5aKoZU0YxeYvG5qaiiZGhPQF49n06mnmS91F2Y1cgc9vKH4=\n=UCuy\n-----END PGP SIGNATURE-----\n", "payload": "tree a9e6cb906f5948739d669a806e0d3605bda2dfbb\nparent b85bd51c944f8cbe3a9c4cc95b61e08e5f338052\nparent 72779936ec89a92731e40e0c406c4620a7c33d7d\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1518875120 +0100\ncommitter GitHub <noreply@github.com> 1518875120 +0100\n\nRollup merge of #48095 - QuietMisdreavus:doctest-assembly, r=GuillaumeGomez\n\nadd unit tests for rustdoc's processing of doctests\n\ncc #42018\n\nThere's a lot of things that rustdoc will do to massage doctests into something that can be compiled, and a lot of options that can be toggled to affect this. Hopefully this list of tests can show off that functionality.\n\nThe first commit is slightly unrelated but doesn't touch public functionality, because i found that if you have a manual `fn main`, it adds an extra line break at the end, whereas it would trim this extra line break if it were putting a `fn main` in automatically. That first commit makes it trim out that whitespace ahead of time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa2852399667b8aa705d2eae066a493bdf54ede", "html_url": "https://github.com/rust-lang/rust/commit/8aa2852399667b8aa705d2eae066a493bdf54ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aa2852399667b8aa705d2eae066a493bdf54ede/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85bd51c944f8cbe3a9c4cc95b61e08e5f338052", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85bd51c944f8cbe3a9c4cc95b61e08e5f338052", "html_url": "https://github.com/rust-lang/rust/commit/b85bd51c944f8cbe3a9c4cc95b61e08e5f338052"}, {"sha": "72779936ec89a92731e40e0c406c4620a7c33d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72779936ec89a92731e40e0c406c4620a7c33d7d", "html_url": "https://github.com/rust-lang/rust/commit/72779936ec89a92731e40e0c406c4620a7c33d7d"}], "stats": {"total": 224, "additions": 219, "deletions": 5}, "files": [{"sha": "08258489a2ec22ad11bf787fb973725014423d0f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 217, "deletions": 3, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/8aa2852399667b8aa705d2eae066a493bdf54ede/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa2852399667b8aa705d2eae066a493bdf54ede/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8aa2852399667b8aa705d2eae066a493bdf54ede", "patch": "@@ -345,6 +345,7 @@ pub fn make_test(s: &str,\n                  opts: &TestOptions)\n                  -> (String, usize) {\n     let (crate_attrs, everything_else) = partition_source(s);\n+    let everything_else = everything_else.trim();\n     let mut line_offset = 0;\n     let mut prog = String::new();\n \n@@ -392,12 +393,11 @@ pub fn make_test(s: &str,\n         .any(|code| code.contains(\"fn main\"));\n \n     if dont_insert_main || already_has_main {\n-        prog.push_str(&everything_else);\n+        prog.push_str(everything_else);\n     } else {\n         prog.push_str(\"fn main() {\\n\");\n         line_offset += 1;\n-        prog.push_str(&everything_else);\n-        prog = prog.trim().into();\n+        prog.push_str(everything_else);\n         prog.push_str(\"\\n}\");\n     }\n \n@@ -753,3 +753,217 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n         self.visit_testable(macro_def.name.to_string(), &macro_def.attrs, |_| ());\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{TestOptions, make_test};\n+\n+    #[test]\n+    fn make_test_basic() {\n+        //basic use: wraps with `fn main`, adds `#![allow(unused)]`\n+        let opts = TestOptions::default();\n+        let input =\n+\"assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected.clone(), 2));\n+    }\n+\n+    #[test]\n+    fn make_test_crate_name_no_use() {\n+        //if you give a crate name but *don't* use it within the test, it won't bother inserting\n+        //the `extern crate` statement\n+        let opts = TestOptions::default();\n+        let input =\n+\"assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_crate_name() {\n+        //if you give a crate name and use it within the test, it will insert an `extern crate`\n+        //statement before `fn main`\n+        let opts = TestOptions::default();\n+        let input =\n+\"use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+extern crate asdf;\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 3));\n+    }\n+\n+    #[test]\n+    fn make_test_no_crate_inject() {\n+        //even if you do use the crate within the test, setting `opts.no_crate_inject` will skip\n+        //adding it anyway\n+        let opts = TestOptions {\n+            no_crate_inject: true,\n+            attrs: vec![],\n+        };\n+        let input =\n+\"use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_ignore_std() {\n+        //even if you include a crate name, and use it in the doctest, we still won't include an\n+        //`extern crate` statement if the crate is \"std\" - that's included already by the compiler!\n+        let opts = TestOptions::default();\n+        let input =\n+\"use std::*;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+use std::*;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"std\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_manual_extern_crate() {\n+        //when you manually include an `extern crate` statement in your doctest, make_test assumes\n+        //you've included one for your own crate too\n+        let opts = TestOptions::default();\n+        let input =\n+\"extern crate asdf;\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+extern crate asdf;\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_opts_attrs() {\n+        //if you supplied some doctest attributes with #![doc(test(attr(...)))], it will use those\n+        //instead of the stock #![allow(unused)]\n+        let mut opts = TestOptions::default();\n+        opts.attrs.push(\"feature(sick_rad)\".to_string());\n+        let input =\n+\"use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![feature(sick_rad)]\n+extern crate asdf;\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 3));\n+\n+        //adding more will also bump the returned line offset\n+        opts.attrs.push(\"feature(hella_dope)\".to_string());\n+        let expected =\n+\"#![feature(sick_rad)]\n+#![feature(hella_dope)]\n+extern crate asdf;\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 4));\n+    }\n+\n+    #[test]\n+    fn make_test_crate_attrs() {\n+        //including inner attributes in your doctest will apply them to the whole \"crate\", pasting\n+        //them outside the generated main function\n+        let opts = TestOptions::default();\n+        let input =\n+\"#![feature(sick_rad)]\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+#![feature(sick_rad)]\n+fn main() {\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_with_main() {\n+        //including your own `fn main` wrapper lets the test use it verbatim\n+        let opts = TestOptions::default();\n+        let input =\n+\"fn main() {\n+    assert_eq!(2+2, 4);\n+}\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+    assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected, 1));\n+    }\n+\n+    #[test]\n+    fn make_test_fake_main() {\n+        //...but putting it in a comment will still provide a wrapper\n+        let opts = TestOptions::default();\n+        let input =\n+\"//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected.clone(), 2));\n+    }\n+\n+    #[test]\n+    fn make_test_dont_insert_main() {\n+        //even with that, if you set `dont_insert_main`, it won't create the `fn main` wrapper\n+        let opts = TestOptions::default();\n+        let input =\n+\"//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\".to_string();\n+        let output = make_test(input, None, true, &opts);\n+        assert_eq!(output, (expected.clone(), 1));\n+    }\n+}"}, {"sha": "9e7c3aa49018024b74dd97548e2b01e0ec76e6ab", "filename": "src/test/rustdoc/playground.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aa2852399667b8aa705d2eae066a493bdf54ede/src%2Ftest%2Frustdoc%2Fplayground.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa2852399667b8aa705d2eae066a493bdf54ede/src%2Ftest%2Frustdoc%2Fplayground.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground.rs?ref=8aa2852399667b8aa705d2eae066a493bdf54ede", "patch": "@@ -34,6 +34,6 @@\n //! }\n //! ```\n \n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D\"]' \"Run\"\n // @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aprintln!(%22Hello%2C%20world!%22)%3B%0A%7D\"]' \"Run\"\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(something)%5D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A&version=nightly\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(something)%5D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D&version=nightly\"]' \"Run\""}]}