{"sha": "74025be59db10a5c8f5c0b5175b250730b4d4ca6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MDI1YmU1OWRiMTBhNWM4ZjVjMGI1MTc1YjI1MDczMGI0ZDRjYTY=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-06-16T09:02:00Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-06-16T09:04:32Z"}, "message": "Make iter_nth work for `Vec`s too", "tree": {"sha": "4942352e9492b15fff22633b05894700c7d5592f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4942352e9492b15fff22633b05894700c7d5592f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74025be59db10a5c8f5c0b5175b250730b4d4ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74025be59db10a5c8f5c0b5175b250730b4d4ca6", "html_url": "https://github.com/rust-lang/rust/commit/74025be59db10a5c8f5c0b5175b250730b4d4ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74025be59db10a5c8f5c0b5175b250730b4d4ca6/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7764dc5ef42754c2704217ebec4a82b964835f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/7764dc5ef42754c2704217ebec4a82b964835f54", "html_url": "https://github.com/rust-lang/rust/commit/7764dc5ef42754c2704217ebec4a82b964835f54"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "790bbc04691b496e86e1c028d34130b7013cfcf0", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74025be59db10a5c8f5c0b5175b250730b4d4ca6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/74025be59db10a5c8f5c0b5175b250730b4d4ca6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=74025be59db10a5c8f5c0b5175b250730b4d4ca6", "patch": "@@ -172,6 +172,7 @@ All notable changes to this project will be documented in this file.\n [`invalid_upcast_comparisons`]: https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons\n [`items_after_statements`]: https://github.com/Manishearth/rust-clippy/wiki#items_after_statements\n [`iter_next_loop`]: https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop\n+[`iter_nth`]: https://github.com/Manishearth/rust-clippy/wiki#iter_nth\n [`len_without_is_empty`]: https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty\n [`len_zero`]: https://github.com/Manishearth/rust-clippy/wiki#len_zero\n [`let_and_return`]: https://github.com/Manishearth/rust-clippy/wiki#let_and_return\n@@ -234,7 +235,6 @@ All notable changes to this project will be documented in this file.\n [`single_char_pattern`]: https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern\n [`single_match`]: https://github.com/Manishearth/rust-clippy/wiki#single_match\n [`single_match_else`]: https://github.com/Manishearth/rust-clippy/wiki#single_match_else\n-[`slice_iter_nth`]: https://github.com/Manishearth/rust-clippy/wiki#slice_iter_nth\n [`str_to_string`]: https://github.com/Manishearth/rust-clippy/wiki#str_to_string\n [`string_add`]: https://github.com/Manishearth/rust-clippy/wiki#string_add\n [`string_add_assign`]: https://github.com/Manishearth/rust-clippy/wiki#string_add_assign"}, {"sha": "85e9ed70bf843ca52396fb0433317f73032ea040", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74025be59db10a5c8f5c0b5175b250730b4d4ca6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/74025be59db10a5c8f5c0b5175b250730b4d4ca6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=74025be59db10a5c8f5c0b5175b250730b4d4ca6", "patch": "@@ -78,6 +78,7 @@ name\n [invalid_upcast_comparisons](https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons)             | allow   | a comparison involving an upcast which is always true or false\n [items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                     | allow   | finds blocks where an item comes after a statement\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                     | warn    | for-looping over `_.next()` which is probably not intended\n+[iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                 | warn    | using `.iter().nth()` on a slice or Vec\n [len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                         | warn    | traits and impls that have `.len()` but not `.is_empty()`\n [len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n [let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                                     | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\n@@ -140,7 +141,6 @@ name\n [single_char_pattern](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern)                           | warn    | using a single-character str where a char could be used, e.g. `_.split(\"x\")`\n [single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                                         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n [single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                               | allow   | a match statement with a two arms where the second arm's pattern is a wildcard; recommends `if let` instead\n-[slice_iter_nth](https://github.com/Manishearth/rust-clippy/wiki#slice_iter_nth)                                     | warn    | using `.iter().nth()` on a slice\n [string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                             | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                               | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                           | warn    | calling `as_bytes` on a string literal; suggests using a byte string literal instead"}, {"sha": "d64f653dd4cc6c74311c38339edb040cab564ac4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74025be59db10a5c8f5c0b5175b250730b4d4ca6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74025be59db10a5c8f5c0b5175b250730b4d4ca6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=74025be59db10a5c8f5c0b5175b250730b4d4ca6", "patch": "@@ -349,6 +349,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::CLONE_ON_COPY,\n         methods::EXTEND_FROM_SLICE,\n         methods::FILTER_NEXT,\n+        methods::ITER_NTH,\n         methods::NEW_RET_NO_SELF,\n         methods::OK_EXPECT,\n         methods::OPTION_MAP_UNWRAP_OR,\n@@ -357,7 +358,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::SEARCH_IS_SOME,\n         methods::SHOULD_IMPLEMENT_TRAIT,\n         methods::SINGLE_CHAR_PATTERN,\n-        methods::SLICE_ITER_NTH,\n         methods::TEMPORARY_CSTRING_AS_PTR,\n         methods::WRONG_SELF_CONVENTION,\n         minmax::MIN_MAX,"}, {"sha": "da1420c3add7a15a902c367c9eca13dbd8655a24", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/74025be59db10a5c8f5c0b5175b250730b4d4ca6/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74025be59db10a5c8f5c0b5175b250730b4d4ca6/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=74025be59db10a5c8f5c0b5175b250730b4d4ca6", "patch": "@@ -312,26 +312,28 @@ declare_lint! {\n     \"getting the inner pointer of a temporary `CString`\"\n }\n \n-/// **What it does:** This lint checks for use of `.iter().nth()` on a slice.\n+/// **What it does:** This lint checks for use of `.iter().nth()` on a slice or Vec.\n ///\n /// **Why is this bad?** `.get()` is more efficient and more readable.\n ///\n /// **Known problems:** None.\n ///\n /// **Example:**\n /// ```rust\n-/// let some_slice = &[0, 1, 2, 3][..];\n-/// let third_elem = some_slice.iter().nth(3);\n+/// let some_vec = vec![0, 1, 2, 3];\n+/// let bad_vec = some_vec.iter().nth(3);\n+/// let bad_slice = &some_vec[..].iter().nth(3);\n /// ```\n /// The correct use would be:\n /// ```rust\n-/// let some_slice = &[0, 1, 2, 3][..];\n-/// let third_elem = some_slice.get(3);\n+/// let some_vec = vec![0, 1, 2, 3];\n+/// let bad_vec = some_vec.get(3);\n+/// let bad_slice = &some_vec[..].get(3);\n /// ```\n declare_lint! {\n-    pub SLICE_ITER_NTH,\n+    pub ITER_NTH,\n     Warn,\n-    \"using `.iter().nth()` on a slice\"\n+    \"using `.iter().nth()` on a slice or Vec\"\n }\n \n impl LintPass for MethodsPass {\n@@ -353,7 +355,7 @@ impl LintPass for MethodsPass {\n                     SINGLE_CHAR_PATTERN,\n                     SEARCH_IS_SOME,\n                     TEMPORARY_CSTRING_AS_PTR,\n-                    SLICE_ITER_NTH)\n+                    ITER_NTH)\n     }\n }\n \n@@ -387,7 +389,7 @@ impl LateLintPass for MethodsPass {\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"unwrap\", \"as_ptr\"]) {\n                     lint_cstring_as_ptr(cx, expr, &arglists[0][0], &arglists[1][0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"iter\", \"nth\"]) {\n-                    lint_slice_iter_nth(cx, expr, arglists[0]);\n+                    lint_iter_nth(cx, expr, arglists[0]);\n                 }\n \n                 lint_or_fun_call(cx, expr, &name.node.as_str(), args);\n@@ -643,14 +645,21 @@ fn lint_cstring_as_ptr(cx: &LateContext, expr: &hir::Expr, new: &hir::Expr, unwr\n \n #[allow(ptr_arg)]\n // Type of MethodArgs is potentially a Vec\n-fn lint_slice_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs){\n-    // lint if the caller of `.iter().nth` is a `slice`\n+fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs){\n+    // lint if the caller of `.iter().nth()` is a `slice`\n     if let Some(_) = derefs_to_slice(cx, &iter_args[0], &cx.tcx.expr_ty(&iter_args[0])) {\n         span_lint(cx,\n-                  SLICE_ITER_NTH,\n+                  ITER_NTH,\n                   expr.span,\n                   \"called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\");\n     }\n+    // lint if the caller of `.iter().nth()` is a `Vec`\n+    else if match_type(cx, cx.tcx.expr_ty(&iter_args[0]), &paths::VEC) {\n+        span_lint(cx,\n+                  ITER_NTH,\n+                  expr.span,\n+                  \"called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\");\n+    }\n }\n \n fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: &ty::Ty) -> Option<(Span, &'static str)> {"}, {"sha": "811b911614309fc6c18772fa8e9845c58df939a2", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/74025be59db10a5c8f5c0b5175b250730b4d4ca6/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74025be59db10a5c8f5c0b5175b250730b4d4ca6/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=74025be59db10a5c8f5c0b5175b250730b4d4ca6", "patch": "@@ -128,6 +128,16 @@ fn option_methods() {\n \n }\n \n+/// Struct to generate false positives for things with .iter()\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n /// Struct to generate false positive for Iterator-based lints\n #[derive(Copy, Clone)]\n struct IteratorFalsePositives {\n@@ -154,6 +164,10 @@ impl IteratorFalsePositives {\n     fn rposition(self) -> Option<u32> {\n         Some(self.foo)\n     }\n+\n+    fn nth(self, n: usize) -> Option<u32> {\n+        Some(self.foo)\n+    }\n }\n \n /// Checks implementation of `FILTER_NEXT` lint\n@@ -309,13 +323,17 @@ fn or_fun_call() {\n     //~|SUGGESTION btree.entry(42).or_insert_with(String::new);\n }\n \n-/// Checks implementation of `SLICE_ITER_NTH` lint\n-fn slice_iter_nth() {\n+/// Checks implementation of `ITER_NTH` lint\n+fn iter_nth() {\n     let some_vec = vec![0, 1, 2, 3];\n-    let bad = &some_vec[..].iter().nth(3);\n+    let bad_vec = some_vec.iter().nth(3);\n+    //~^ERROR called `.iter().nth()` on a Vec.\n+    let bad_slice = &some_vec[..].iter().nth(3);\n     //~^ERROR called `.iter().nth()` on a slice.\n \n-    let ok = some_vec.iter().nth(3); // This should be okay, since some_vec is not a slice\n+    let false_positive = HasIter;\n+    let ok = false_positive.iter().nth(3);\n+    // ^This should be okay, because false_positive is not a slice or Vec\n }\n \n #[allow(similar_names)]"}]}