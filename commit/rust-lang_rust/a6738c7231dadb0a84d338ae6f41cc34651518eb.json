{"sha": "a6738c7231dadb0a84d338ae6f41cc34651518eb", "node_id": "C_kwDOAAsO6NoAKGE2NzM4YzcyMzFkYWRiMGE4NGQzMzhhZTZmNDFjYzM0NjUxNTE4ZWI", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2021-09-19T23:04:07Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2021-09-30T01:51:59Z"}, "message": "Add tests", "tree": {"sha": "a5d4b14be345003b07d2574438578b56646530a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5d4b14be345003b07d2574438578b56646530a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6738c7231dadb0a84d338ae6f41cc34651518eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6738c7231dadb0a84d338ae6f41cc34651518eb", "html_url": "https://github.com/rust-lang/rust/commit/a6738c7231dadb0a84d338ae6f41cc34651518eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6738c7231dadb0a84d338ae6f41cc34651518eb/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa23d4fe93020bfde8f45c7cad077117d999c3ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa23d4fe93020bfde8f45c7cad077117d999c3ed", "html_url": "https://github.com/rust-lang/rust/commit/fa23d4fe93020bfde8f45c7cad077117d999c3ed"}], "stats": {"total": 117, "additions": 92, "deletions": 25}, "files": [{"sha": "718613895dee4e30fd2170824b3d07e80c994cb3", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 92, "deletions": 25, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/a6738c7231dadb0a84d338ae6f41cc34651518eb/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6738c7231dadb0a84d338ae6f41cc34651518eb/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=a6738c7231dadb0a84d338ae6f41cc34651518eb", "patch": "@@ -567,11 +567,7 @@ pub fn exact_filter_match() {\n     assert_eq!(exact.len(), 2);\n }\n \n-#[test]\n-pub fn sort_tests() {\n-    let mut opts = TestOpts::new();\n-    opts.run_tests = true;\n-\n+fn sample_tests() -> Vec<TestDescAndFn> {\n     let names = vec![\n         \"sha1::test\".to_string(),\n         \"isize::test_to_str\".to_string(),\n@@ -585,26 +581,32 @@ pub fn sort_tests() {\n         \"test::run_include_ignored_option\".to_string(),\n         \"test::sort_tests\".to_string(),\n     ];\n-    let tests = {\n-        fn testfn() {}\n-        let mut tests = Vec::new();\n-        for name in &names {\n-            let test = TestDescAndFn {\n-                desc: TestDesc {\n-                    name: DynTestName((*name).clone()),\n-                    ignore: false,\n-                    should_panic: ShouldPanic::No,\n-                    allow_fail: false,\n-                    compile_fail: false,\n-                    no_run: false,\n-                    test_type: TestType::Unknown,\n-                },\n-                testfn: DynTestFn(Box::new(testfn)),\n-            };\n-            tests.push(test);\n-        }\n-        tests\n-    };\n+    fn testfn() {}\n+    let mut tests = Vec::new();\n+    for name in &names {\n+        let test = TestDescAndFn {\n+            desc: TestDesc {\n+                name: DynTestName((*name).clone()),\n+                ignore: false,\n+                should_panic: ShouldPanic::No,\n+                allow_fail: false,\n+                compile_fail: false,\n+                no_run: false,\n+                test_type: TestType::Unknown,\n+            },\n+            testfn: DynTestFn(Box::new(testfn)),\n+        };\n+        tests.push(test);\n+    }\n+    tests\n+}\n+\n+#[test]\n+pub fn sort_tests() {\n+    let mut opts = TestOpts::new();\n+    opts.run_tests = true;\n+\n+    let tests = sample_tests();\n     let filtered = filter_tests(&opts, tests);\n \n     let expected = vec![\n@@ -626,6 +628,71 @@ pub fn sort_tests() {\n     }\n }\n \n+#[test]\n+pub fn shuffle_tests() {\n+    let mut opts = TestOpts::new();\n+    opts.shuffle = true;\n+\n+    let shuffle_seed = get_shuffle_seed(&opts).unwrap();\n+\n+    let left =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+    let mut right =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+\n+    assert!(left.iter().zip(&right).all(|(a, b)| a.1.desc.name == b.1.desc.name));\n+\n+    helpers::shuffle::shuffle_tests(shuffle_seed, right.as_mut_slice());\n+\n+    assert!(left.iter().zip(right).any(|(a, b)| a.1.desc.name != b.1.desc.name));\n+}\n+\n+#[test]\n+pub fn shuffle_tests_with_seed() {\n+    let mut opts = TestOpts::new();\n+    opts.shuffle = true;\n+\n+    let shuffle_seed = get_shuffle_seed(&opts).unwrap();\n+\n+    let mut left =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+    let mut right =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+\n+    helpers::shuffle::shuffle_tests(shuffle_seed, left.as_mut_slice());\n+    helpers::shuffle::shuffle_tests(shuffle_seed, right.as_mut_slice());\n+\n+    assert!(left.iter().zip(right).all(|(a, b)| a.1.desc.name == b.1.desc.name));\n+}\n+\n+#[test]\n+pub fn order_depends_on_more_than_seed() {\n+    let mut opts = TestOpts::new();\n+    opts.shuffle = true;\n+\n+    let shuffle_seed = get_shuffle_seed(&opts).unwrap();\n+\n+    let mut left_tests = sample_tests();\n+    let mut right_tests = sample_tests();\n+\n+    left_tests.pop();\n+    right_tests.remove(0);\n+\n+    let mut left =\n+        left_tests.into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+    let mut right =\n+        right_tests.into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+\n+    assert_eq!(left.len(), right.len());\n+\n+    assert!(left.iter().zip(&right).all(|(a, b)| a.0 == b.0));\n+\n+    helpers::shuffle::shuffle_tests(shuffle_seed, left.as_mut_slice());\n+    helpers::shuffle::shuffle_tests(shuffle_seed, right.as_mut_slice());\n+\n+    assert!(left.iter().zip(right).any(|(a, b)| a.0 != b.0));\n+}\n+\n #[test]\n pub fn test_metricmap_compare() {\n     let mut m1 = MetricMap::new();"}]}