{"sha": "2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61", "node_id": "C_kwDOAAsO6NoAKDJjM2JiNDJlYmQ4NjI0N2VhNWQyZmI0ZGFhNTFkOWFkYTNmNmFlNjE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-19T23:27:26Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-19T23:46:37Z"}, "message": "Only omit trailing comma if block doesn't come from macro expansion", "tree": {"sha": "9cee79194922acbf2b77025795c54da52418a549", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cee79194922acbf2b77025795c54da52418a549"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61", "html_url": "https://github.com/rust-lang/rust/commit/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b646bd533e8a20c06a71d0b7837e15eb4c79fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b646bd533e8a20c06a71d0b7837e15eb4c79fa8", "html_url": "https://github.com/rust-lang/rust/commit/2b646bd533e8a20c06a71d0b7837e15eb4c79fa8"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "51aebfef8ace962380a5f79a67b76ebf04ab3563", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61", "patch": "@@ -829,16 +829,27 @@ fn non_exhaustive_match<'p, 'tcx>(\n             } else {\n                 \" \".to_string()\n             };\n-            let comma = if matches!(only.body.kind, hir::ExprKind::Block(..)) { \"\" } else { \",\" };\n+            let comma = if matches!(only.body.kind, hir::ExprKind::Block(..))\n+                && only.span.ctxt() == only.body.span.ctxt()\n+            {\n+                \"\"\n+            } else {\n+                \",\"\n+            };\n             suggestion = Some((\n                 only.span.shrink_to_hi(),\n                 format!(\"{}{}{} => todo!()\", comma, pre_indentation, pattern),\n             ));\n         }\n         [.., prev, last] if prev.span.ctxt() == last.span.ctxt() => {\n             if let Ok(snippet) = sm.span_to_snippet(prev.span.between(last.span)) {\n-                let comma =\n-                    if matches!(last.body.kind, hir::ExprKind::Block(..)) { \"\" } else { \",\" };\n+                let comma = if matches!(last.body.kind, hir::ExprKind::Block(..))\n+                    && last.span.ctxt() == last.body.span.ctxt()\n+                {\n+                    \"\"\n+                } else {\n+                    \",\"\n+                };\n                 suggestion = Some((\n                     last.span.shrink_to_hi(),\n                     format!("}, {"sha": "c42034879369232c258265e28c7ceee85c7a8d57", "filename": "src/test/ui/issue-94866.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61/src%2Ftest%2Fui%2Fissue-94866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61/src%2Ftest%2Fui%2Fissue-94866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-94866.rs?ref=2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! m {\n+    () => {\n+        {}\n+    };\n+}\n+\n+enum Enum { A, B }\n+\n+fn main() {\n+    match Enum::A {\n+    //~^ ERROR non-exhaustive patterns\n+    Enum::A => m!()\n+    }\n+}"}, {"sha": "5477d83f449209ee59375ff18db17253552a9e98", "filename": "src/test/ui/issue-94866.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61/src%2Ftest%2Fui%2Fissue-94866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61/src%2Ftest%2Fui%2Fissue-94866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-94866.stderr?ref=2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61", "patch": "@@ -0,0 +1,21 @@\n+error[E0004]: non-exhaustive patterns: `B` not covered\n+  --> $DIR/issue-94866.rs:10:11\n+   |\n+LL |     match Enum::A {\n+   |           ^^^^^^^ pattern `B` not covered\n+   |\n+note: `Enum` defined here\n+  --> $DIR/issue-94866.rs:7:16\n+   |\n+LL | enum Enum { A, B }\n+   |      ----      ^ not covered\n+   = note: the matched value is of type `Enum`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~     Enum::A => m!(),\n+LL +     B => todo!()\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "e2a65ff8524040062aefcaad59b284c07e11921a", "filename": "src/test/ui/pattern/usefulness/tuple-struct-nonexhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr?ref=2c3bb42ebd86247ea5d2fb4daa51d9ada3f6ae61", "patch": "@@ -12,7 +12,7 @@ LL | struct Foo(isize, isize);\n    = note: the matched value is of type `Foo`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         Foo(2, b) => println!(\"{}\", b)\n+LL ~         Foo(2, b) => println!(\"{}\", b),\n LL +         Foo(_, _) => todo!()\n    |\n "}]}