{"sha": "60fa568c31f9da49b3e5e7ac14928d145960933e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZmE1NjhjMzFmOWRhNDliM2U1ZTdhYzE0OTI4ZDE0NTk2MDkzM2U=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-04-28T17:34:22Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-07-30T17:42:20Z"}, "message": "Fix some broken rustdoc links in core::panic documentation", "tree": {"sha": "f66ea7af95796f06afe5929c431e634b8890f6cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f66ea7af95796f06afe5929c431e634b8890f6cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60fa568c31f9da49b3e5e7ac14928d145960933e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmEEOfwACgkQ+boUO5X/\nbYLd6BAAnlNNfgj8L+kkPZ96i6Qfil5MlqclEaBE1vLeQNWm+JUaZvQkpRDZymj1\nllW4djjwEDv2eYC5oCG0w1Hqet1A44jv741/yHJk48MyMhFE7UcIMHLc2YZqosP8\nT+vSZxR5yfAnpUyhkKfZIXxqp75dKxMn03hKscwXRPysCcC4Ogekl/PalpJEeP7L\neg/zd3XjIBzvFf9Y+dTOYTIfXKoZh8FgllK4tJPJFTCdCYNF3a9R36psnYYeWOZd\nySMVdtLrnYp1neQmNPEUhRtd3OUx83xDgw9DJy6N/qv2wryslfc3gVchwzH0Co1q\n/MV3wFexnTICFUrIhXqykeU+wFAyagb/gcYcZyTw0n5yA+cHPEY1RFWNFsu0DDl6\nu7HM9+tGAqRQQbDFKfimjW6eJIGJdTAQjiDfxbm+kpClye1FEGNCW+OBb5pEA1eJ\nUbLRQeyh2OVglzcuPQUWAPCmVANdy9cnYvtBccsQmebsJnwNHj6PJxRAGMVgEj5K\nw679962oSVETcYjTS/AsVJOHBn2v9oMJFRGbxoIcyxZbufqEwL/2l/4pVqVgCTT4\nI4uz1qKkRUhAwdSZgpOFZLD3Vaf8NcJjjkPPiNofP3k+AqEPNOvkttSQ+RtABc7Y\neC7jP5Uu7jsXhdni1qlS1UIwalVcOIEO3ZCN4ac1KTLDyl5IIAw=\n=7pyN\n-----END PGP SIGNATURE-----", "payload": "tree f66ea7af95796f06afe5929c431e634b8890f6cb\nparent 701e3a45a9b8d2eb32be1c44ac3ef780abb4075f\nauthor David Tolnay <dtolnay@gmail.com> 1619631262 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1627666940 -0700\n\nFix some broken rustdoc links in core::panic documentation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60fa568c31f9da49b3e5e7ac14928d145960933e", "html_url": "https://github.com/rust-lang/rust/commit/60fa568c31f9da49b3e5e7ac14928d145960933e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60fa568c31f9da49b3e5e7ac14928d145960933e/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "701e3a45a9b8d2eb32be1c44ac3ef780abb4075f", "url": "https://api.github.com/repos/rust-lang/rust/commits/701e3a45a9b8d2eb32be1c44ac3ef780abb4075f", "html_url": "https://github.com/rust-lang/rust/commit/701e3a45a9b8d2eb32be1c44ac3ef780abb4075f"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "a482414caaf9ae1c2149186bc6a849afe8452420", "filename": "library/core/src/panic/location.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60fa568c31f9da49b3e5e7ac14928d145960933e/library%2Fcore%2Fsrc%2Fpanic%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fa568c31f9da49b3e5e7ac14928d145960933e/library%2Fcore%2Fsrc%2Fpanic%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Flocation.rs?ref=60fa568c31f9da49b3e5e7ac14928d145960933e", "patch": "@@ -4,6 +4,8 @@ use crate::fmt;\n ///\n /// This structure is created by [`PanicInfo::location()`].\n ///\n+/// [`PanicInfo::location()`]: crate::panic::PanicInfo::location\n+///\n /// # Examples\n ///\n /// ```should_panic"}, {"sha": "7074fefafeb77d65ac2d4c04d9c0dce037fc2390", "filename": "library/core/src/panic/unwind_safe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60fa568c31f9da49b3e5e7ac14928d145960933e/library%2Fcore%2Fsrc%2Fpanic%2Funwind_safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fa568c31f9da49b3e5e7ac14928d145960933e/library%2Fcore%2Fsrc%2Fpanic%2Funwind_safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Funwind_safe.rs?ref=60fa568c31f9da49b3e5e7ac14928d145960933e", "patch": "@@ -15,6 +15,8 @@ use crate::task::{Context, Poll};\n /// purpose of this trait is to encode what types are safe to cross a [`catch_unwind`]\n /// boundary with no fear of unwind safety.\n ///\n+/// [`catch_unwind`]: ../../std/panic/fn.catch_unwind.html\n+///\n /// ## What is unwind safety?\n ///\n /// In Rust a function can \"return\" early if it either panics or calls a\n@@ -116,6 +118,8 @@ pub auto trait RefUnwindSafe {}\n /// account. This wrapper struct is useful for a quick and lightweight\n /// annotation that a variable is indeed unwind safe.\n ///\n+/// [`catch_unwind`]: ../../std/panic/fn.catch_unwind.html\n+///\n /// # Examples\n ///\n /// One way to use `AssertUnwindSafe` is to assert that the entire closure"}]}