{"sha": "07225e2169d3a96bed28110ff976a6752c0ec0a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MjI1ZTIxNjlkM2E5NmJlZDI4MTEwZmY5NzZhNjc1MmMwZWMwYTg=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-16T23:39:30Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-16T23:41:29Z"}, "message": "Make a call with the wrong number of arguments non-fatal. Closes #784.", "tree": {"sha": "794dbb08891ca7ebff8500b8235aae6389d4da92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/794dbb08891ca7ebff8500b8235aae6389d4da92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07225e2169d3a96bed28110ff976a6752c0ec0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07225e2169d3a96bed28110ff976a6752c0ec0a8", "html_url": "https://github.com/rust-lang/rust/commit/07225e2169d3a96bed28110ff976a6752c0ec0a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07225e2169d3a96bed28110ff976a6752c0ec0a8/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "837342242c2184cddbf4814ad6a988a4a9c5f305", "url": "https://api.github.com/repos/rust-lang/rust/commits/837342242c2184cddbf4814ad6a988a4a9c5f305", "html_url": "https://github.com/rust-lang/rust/commit/837342242c2184cddbf4814ad6a988a4a9c5f305"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "d2e4639618d44ffc64ceefbc945e825f6437537d", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/07225e2169d3a96bed28110ff976a6752c0ec0a8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07225e2169d3a96bed28110ff976a6752c0ec0a8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=07225e2169d3a96bed28110ff976a6752c0ec0a8", "patch": "@@ -1573,35 +1573,37 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr,\n         }\n \n         // Grab the argument types\n-        let arg_tys;\n-        alt sty {\n-          ty::ty_fn(_, arg_tys_0, _, _, _) |\n-          ty::ty_native_fn(_, arg_tys_0, _) { arg_tys = arg_tys_0; }\n+        let arg_tys = alt sty {\n+          ty::ty_fn(_, arg_tys, _, _, _) |\n+          ty::ty_native_fn(_, arg_tys, _) { arg_tys }\n           _ {\n             fcx.ccx.tcx.sess.span_fatal(f.span,\n                                         \"mismatched types: \\\n                                            expected function or native \\\n                                            function but found \"\n-                                            + ty_to_str(fcx.ccx.tcx, fty));\n+                                            + ty_to_str(fcx.ccx.tcx, fty))\n           }\n-        }\n+        };\n \n         // Check that the correct number of arguments were supplied.\n-        let expected_arg_count = vec::len::<ty::arg>(arg_tys);\n-        let supplied_arg_count = vec::len::<option::t<@ast::expr>>(args);\n+        let expected_arg_count = vec::len(arg_tys);\n+        let supplied_arg_count = vec::len(args);\n         if expected_arg_count != supplied_arg_count {\n-            fcx.ccx.tcx.sess.span_fatal(sp,\n-                                        #fmt(\"this function takes %u \\\n-                                            parameter%s but %u parameter%s \\\n-                                            supplied\",\n-                                             expected_arg_count,\n-                                             if expected_arg_count == 1u {\n-                                                 \"\"\n-                                             } else { \"s\" },\n-                                             supplied_arg_count,\n-                                             if supplied_arg_count == 1u {\n-                                                 \" was\"\n-                                             } else { \"s were\" }));\n+            fcx.ccx.tcx.sess.span_err(\n+                sp,\n+                #fmt(\"this function takes %u \\\n+                      parameter%s but %u parameter%s supplied\",\n+                     expected_arg_count,\n+                     if expected_arg_count == 1u { \"\" } else { \"s\" },\n+                     supplied_arg_count,\n+                     if supplied_arg_count == 1u\n+                     { \" was\" } else { \"s were\" }));\n+            // HACK: extend the arguments list with dummy arguments to\n+            // check against\n+            let dummy = {mode: ty::mo_val, ty: ty::mk_nil(fcx.ccx.tcx)};\n+            while vec::len(arg_tys) < supplied_arg_count {\n+                arg_tys += ~[dummy];\n+            }\n         }\n \n         // Check the arguments."}]}