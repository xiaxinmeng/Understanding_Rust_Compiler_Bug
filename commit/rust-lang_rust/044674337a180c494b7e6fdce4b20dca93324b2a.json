{"sha": "044674337a180c494b7e6fdce4b20dca93324b2a", "node_id": "C_kwDOAAsO6NoAKDA0NDY3NDMzN2ExODBjNDk0YjdlNmZkY2U0YjIwZGNhOTMzMjRiMmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-12T17:57:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-12T17:57:34Z"}, "message": "Auto merge of #89813 - the8472:rollup-f1f99mb, r=the8472\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #89778 (Add #[must_use] to as_type conversions)\n - #89784 (Remove built-in query cache_hit tracking)\n - #89796 (Add #[must_use] to non-mutating verb methods)\n - #89797 (Add #[must_use] to is_condition tests)\n - #89799 (fix minor spelling error in Poll::ready docs)\n - #89800 (Update books)\n - #89809 (Remap ssa RealPredicate to llvm RealPredicate)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8f331316d06a859e5737eeabb2e7ef23e0ce0c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f331316d06a859e5737eeabb2e7ef23e0ce0c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/044674337a180c494b7e6fdce4b20dca93324b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/044674337a180c494b7e6fdce4b20dca93324b2a", "html_url": "https://github.com/rust-lang/rust/commit/044674337a180c494b7e6fdce4b20dca93324b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/044674337a180c494b7e6fdce4b20dca93324b2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9475e609b8458fff9e444934a6017d2e590642cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9475e609b8458fff9e444934a6017d2e590642cf", "html_url": "https://github.com/rust-lang/rust/commit/9475e609b8458fff9e444934a6017d2e590642cf"}, {"sha": "6cdf8030f0f344cf28e350785c77669b777251db", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cdf8030f0f344cf28e350785c77669b777251db", "html_url": "https://github.com/rust-lang/rust/commit/6cdf8030f0f344cf28e350785c77669b777251db"}], "stats": {"total": 209, "additions": 152, "deletions": 57}, "files": [{"sha": "d5deacf3811304c972fb0cc5919b833c23ac0f97", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -828,6 +828,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn fcmp(&mut self, op: RealPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n+        let op = llvm::RealPredicate::from_generic(op);\n         unsafe { llvm::LLVMBuildFCmp(self.llbuilder, op as c_uint, lhs, rhs, UNNAMED) }\n     }\n "}, {"sha": "4c9ae4faf7233f4a1e88ed043eecb73d630b901a", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -223,6 +223,33 @@ pub enum RealPredicate {\n     RealPredicateTrue = 15,\n }\n \n+impl RealPredicate {\n+    pub fn from_generic(realp: rustc_codegen_ssa::common::RealPredicate) -> Self {\n+        match realp {\n+            rustc_codegen_ssa::common::RealPredicate::RealPredicateFalse => {\n+                RealPredicate::RealPredicateFalse\n+            }\n+            rustc_codegen_ssa::common::RealPredicate::RealOEQ => RealPredicate::RealOEQ,\n+            rustc_codegen_ssa::common::RealPredicate::RealOGT => RealPredicate::RealOGT,\n+            rustc_codegen_ssa::common::RealPredicate::RealOGE => RealPredicate::RealOGE,\n+            rustc_codegen_ssa::common::RealPredicate::RealOLT => RealPredicate::RealOLT,\n+            rustc_codegen_ssa::common::RealPredicate::RealOLE => RealPredicate::RealOLE,\n+            rustc_codegen_ssa::common::RealPredicate::RealONE => RealPredicate::RealONE,\n+            rustc_codegen_ssa::common::RealPredicate::RealORD => RealPredicate::RealORD,\n+            rustc_codegen_ssa::common::RealPredicate::RealUNO => RealPredicate::RealUNO,\n+            rustc_codegen_ssa::common::RealPredicate::RealUEQ => RealPredicate::RealUEQ,\n+            rustc_codegen_ssa::common::RealPredicate::RealUGT => RealPredicate::RealUGT,\n+            rustc_codegen_ssa::common::RealPredicate::RealUGE => RealPredicate::RealUGE,\n+            rustc_codegen_ssa::common::RealPredicate::RealULT => RealPredicate::RealULT,\n+            rustc_codegen_ssa::common::RealPredicate::RealULE => RealPredicate::RealULE,\n+            rustc_codegen_ssa::common::RealPredicate::RealUNE => RealPredicate::RealUNE,\n+            rustc_codegen_ssa::common::RealPredicate::RealPredicateTrue => {\n+                RealPredicate::RealPredicateTrue\n+            }\n+        }\n+    }\n+}\n+\n /// LLVMTypeKind\n #[derive(Copy, Clone, PartialEq, Debug)]\n #[repr(C)]"}, {"sha": "c3bbd51f3d3cc13140b6f943247ef39a814b1585", "filename": "compiler/rustc_query_impl/src/stats.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -5,8 +5,6 @@ use rustc_query_system::query::{QueryCache, QueryCacheStore};\n \n use std::any::type_name;\n use std::mem;\n-#[cfg(debug_assertions)]\n-use std::sync::atomic::Ordering;\n \n trait KeyStats {\n     fn key_stats(&self, stats: &mut QueryStats);\n@@ -27,7 +25,6 @@ impl KeyStats for DefId {\n #[derive(Clone)]\n struct QueryStats {\n     name: &'static str,\n-    cache_hits: usize,\n     key_size: usize,\n     key_type: &'static str,\n     value_size: usize,\n@@ -42,10 +39,6 @@ where\n {\n     let mut stats = QueryStats {\n         name,\n-        #[cfg(debug_assertions)]\n-        cache_hits: map.cache_hits.load(Ordering::Relaxed),\n-        #[cfg(not(debug_assertions))]\n-        cache_hits: 0,\n         key_size: mem::size_of::<C::Key>(),\n         key_type: type_name::<C::Key>(),\n         value_size: mem::size_of::<C::Value>(),\n@@ -63,12 +56,6 @@ where\n pub fn print_stats(tcx: TyCtxt<'_>) {\n     let queries = query_stats(tcx);\n \n-    if cfg!(debug_assertions) {\n-        let hits: usize = queries.iter().map(|s| s.cache_hits).sum();\n-        let results: usize = queries.iter().map(|s| s.entry_count).sum();\n-        eprintln!(\"\\nQuery cache hit rate: {}\", hits as f64 / (hits + results) as f64);\n-    }\n-\n     let mut query_key_sizes = queries.clone();\n     query_key_sizes.sort_by_key(|q| q.key_size);\n     eprintln!(\"\\nLarge query keys:\");\n@@ -83,20 +70,6 @@ pub fn print_stats(tcx: TyCtxt<'_>) {\n         eprintln!(\"   {} - {} x {} - {}\", q.name, q.value_size, q.entry_count, q.value_type);\n     }\n \n-    if cfg!(debug_assertions) {\n-        let mut query_cache_hits = queries.clone();\n-        query_cache_hits.sort_by_key(|q| q.cache_hits);\n-        eprintln!(\"\\nQuery cache hits:\");\n-        for q in query_cache_hits.iter().rev() {\n-            eprintln!(\n-                \"   {} - {} ({}%)\",\n-                q.name,\n-                q.cache_hits,\n-                q.cache_hits as f64 / (q.cache_hits + q.entry_count) as f64\n-            );\n-        }\n-    }\n-\n     let mut query_value_count = queries.clone();\n     query_value_count.sort_by_key(|q| q.entry_count);\n     eprintln!(\"\\nQuery value count:\");"}, {"sha": "07d720599759607a25ee5f4c68df663f00c6fc39", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -26,24 +26,15 @@ use std::hash::{Hash, Hasher};\n use std::mem;\n use std::num::NonZeroU32;\n use std::ptr;\n-#[cfg(debug_assertions)]\n-use std::sync::atomic::{AtomicUsize, Ordering};\n \n pub struct QueryCacheStore<C: QueryCache> {\n     cache: C,\n     shards: Sharded<C::Sharded>,\n-    #[cfg(debug_assertions)]\n-    pub cache_hits: AtomicUsize,\n }\n \n impl<C: QueryCache + Default> Default for QueryCacheStore<C> {\n     fn default() -> Self {\n-        Self {\n-            cache: C::default(),\n-            shards: Default::default(),\n-            #[cfg(debug_assertions)]\n-            cache_hits: AtomicUsize::new(0),\n-        }\n+        Self { cache: C::default(), shards: Default::default() }\n     }\n }\n \n@@ -377,10 +368,6 @@ where\n         if unlikely!(tcx.profiler().enabled()) {\n             tcx.profiler().query_cache_hit(index.into());\n         }\n-        #[cfg(debug_assertions)]\n-        {\n-            cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n-        }\n         tcx.dep_graph().read_index(index);\n         on_hit(value)\n     })\n@@ -429,10 +416,6 @@ where\n             if unlikely!(tcx.dep_context().profiler().enabled()) {\n                 tcx.dep_context().profiler().query_cache_hit(index.into());\n             }\n-            #[cfg(debug_assertions)]\n-            {\n-                cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n-            }\n             query_blocked_prof_timer.finish_with_query_invocation_id(index.into());\n \n             (v, Some(index))\n@@ -705,10 +688,6 @@ where\n         if unlikely!(tcx.dep_context().profiler().enabled()) {\n             tcx.dep_context().profiler().query_cache_hit(index.into());\n         }\n-        #[cfg(debug_assertions)]\n-        {\n-            cache.cache_hits.fetch_add(1, Ordering::Relaxed);\n-        }\n     });\n \n     let lookup = match cached {"}, {"sha": "9bded6c0f1cf213f5212c6a426f5614da9598277", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1009,6 +1009,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// io::sink().write(heap.as_slice()).unwrap();\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"binary_heap_as_slice\", issue = \"83659\")]\n     pub fn as_slice(&self) -> &[T] {\n         self.data.as_slice()"}, {"sha": "ea010c1f89d24ee1d9820933860cf340d4b9f488", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1385,6 +1385,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// The lifetime of the returned `Cursor` is bound to that of the\n     /// `CursorMut`, which means it cannot outlive the `CursorMut` and that the\n     /// `CursorMut` is frozen for the lifetime of the `Cursor`.\n+    #[must_use]\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn as_cursor(&self) -> Cursor<'_, T> {\n         Cursor { list: self.list, current: self.current, index: self.index }"}, {"sha": "493cf3117edf6a8b113f3772900c644c23facb47", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -2093,6 +2093,7 @@ impl<T: ?Sized> Weak<T> {\n     /// ```\n     ///\n     /// [`null`]: ptr::null\n+    #[must_use]\n     #[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(self.ptr);\n@@ -2229,6 +2230,8 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// assert!(weak_five.upgrade().is_none());\n     /// ```\n+    #[must_use = \"this returns a new `Rc`, \\\n+                  without modifying the original weak pointer\"]\n     #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Rc<T>> {\n         let inner = self.inner()?;"}, {"sha": "f479bf231b37681402bfb410926c81ec6d835716", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -803,6 +803,7 @@ impl String {\n     /// assert_eq!(\"foo\", s.as_str());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"string_as_str\", since = \"1.7.0\")]\n     pub fn as_str(&self) -> &str {\n         self\n@@ -823,6 +824,7 @@ impl String {\n     /// assert_eq!(\"FOOBAR\", s_mut_str);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"string_as_str\", since = \"1.7.0\")]\n     pub fn as_mut_str(&mut self) -> &mut str {\n         self\n@@ -1163,6 +1165,7 @@ impl String {\n     /// assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.vec\n@@ -1766,6 +1769,7 @@ impl FromUtf8Error {\n     ///\n     /// assert_eq!(&[0, 159], value.unwrap_err().as_bytes());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"from_utf8_error_as_bytes\", since = \"1.26.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.bytes[..]\n@@ -2782,6 +2786,7 @@ impl<'a> Drain<'a> {\n     /// let _ = drain.next().unwrap();\n     /// assert_eq!(drain.as_str(), \"bc\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]\n     pub fn as_str(&self) -> &str {\n         self.iter.as_str()"}, {"sha": "b75e9a2f3c71ea77b0c1cd1ac717020317e79d45", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -146,7 +146,7 @@ macro_rules! acquire {\n /// use std::sync::Arc;\n ///\n /// let my_arc = Arc::new(());\n-/// Arc::downgrade(&my_arc);\n+/// let my_weak = Arc::downgrade(&my_arc);\n /// ```\n ///\n /// `Arc<T>`'s implementations of traits like `Clone` may also be called using\n@@ -827,6 +827,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert_eq!(x_ptr, Arc::as_ptr(&y));\n     /// assert_eq!(unsafe { &*x_ptr }, \"hello\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n@@ -897,6 +898,8 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// let weak_five = Arc::downgrade(&five);\n     /// ```\n+    #[must_use = \"this returns a new `Weak` pointer, \\\n+                  without modifying the original `Arc`\"]\n     #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         // This Relaxed is OK because we're checking the value in the CAS\n@@ -1724,6 +1727,7 @@ impl<T: ?Sized> Weak<T> {\n     /// ```\n     ///\n     /// [`null`]: core::ptr::null \"ptr::null\"\n+    #[must_use]\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(self.ptr);\n@@ -1861,6 +1865,8 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// assert!(weak_five.upgrade().is_none());\n     /// ```\n+    #[must_use = \"this returns a new `Arc`, \\\n+                  without modifying the original weak pointer\"]\n     #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Arc<T>> {\n         // We use a CAS loop to increment the strong count instead of a"}, {"sha": "e643940d017ba690b5873a84ac36de9d86e47a95", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -52,6 +52,7 @@ impl<'a, T, A: Allocator> Drain<'a, T, A> {\n     /// let _ = drain.next().unwrap();\n     /// assert_eq!(drain.as_slice(), &['b', 'c']);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"vec_drain_as_slice\", since = \"1.46.0\")]\n     pub fn as_slice(&self) -> &[T] {\n         self.iter.as_slice()"}, {"sha": "780f82d8afaee1fbd50b0944123a5fd976aede17", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -112,6 +112,8 @@ impl Layout {\n     /// The minimum byte alignment for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n+    #[must_use = \"this returns the minimum alignment, \\\n+                  without modifying the layout\"]\n     #[inline]\n     pub const fn align(&self) -> usize {\n         self.align_.get()\n@@ -229,6 +231,8 @@ impl Layout {\n     /// satisfy this constraint is to ensure `align <= self.align()`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n+    #[must_use = \"this returns the padding needed, \\\n+                  without modifying the `Layout`\"]\n     #[inline]\n     pub const fn padding_needed_for(&self, align: usize) -> usize {\n         let len = self.size();\n@@ -262,6 +266,8 @@ impl Layout {\n     /// This is equivalent to adding the result of `padding_needed_for`\n     /// to the layout's current size.\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n+    #[must_use = \"this returns a new `Layout`, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn pad_to_align(&self) -> Layout {\n         let pad = self.padding_needed_for(self.align());"}, {"sha": "b8ad7720e0c554590226f08f3d3da7dcbc4b307e", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -491,6 +491,7 @@ impl<'a> Arguments<'a> {\n     /// ```\n     #[stable(feature = \"fmt_as_str\", since = \"1.52.0\")]\n     #[rustc_const_unstable(feature = \"const_arguments_as_str\", issue = \"none\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_str(&self) -> Option<&'static str> {\n         match (self.pieces, self.args) {"}, {"sha": "401267f5613ee0c478ec470f4fa7496527004478", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -657,6 +657,7 @@ impl<T> Option<T> {\n     ///\n     /// [&]: reference \"shared reference\"\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref(self: Pin<&Self>) -> Option<Pin<&T>> {\n         // SAFETY: `x` is guaranteed to be pinned because it comes from `self`\n@@ -668,6 +669,7 @@ impl<T> Option<T> {\n     ///\n     /// [&mut]: reference \"mutable reference\"\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut(self: Pin<&mut Self>) -> Option<Pin<&mut T>> {\n         // SAFETY: `get_unchecked_mut` is never used to move the `Option` inside `self`."}, {"sha": "af9daf829740164bb3cba41765427a09fa415d20", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -119,6 +119,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -151,6 +152,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -264,6 +266,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n@@ -310,6 +313,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_ref<'a>(&self) -> &'a T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -359,6 +363,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -455,6 +460,7 @@ impl<T> NonNull<[T]> {\n     /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     pub const fn as_non_null_ptr(self) -> NonNull<T> {\n@@ -474,6 +480,7 @@ impl<T> NonNull<[T]> {\n     /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     pub const fn as_mut_ptr(self) -> *mut T {\n@@ -518,6 +525,7 @@ impl<T> NonNull<[T]> {\n     ///\n     /// [valid]: crate::ptr#safety\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice`.\n@@ -579,6 +587,7 @@ impl<T> NonNull<[T]> {\n     /// # Ok::<_, std::alloc::AllocError>(())\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     pub unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice_mut`."}, {"sha": "5baceefb504a50d39a71216be6507d7137ba950f", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -112,6 +112,7 @@ impl<T: ?Sized> Unique<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n@@ -124,6 +125,7 @@ impl<T: ?Sized> Unique<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n+    #[must_use]\n     #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the"}, {"sha": "dbf97851b03e4e78294871ae94ba0d92f9836529", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -124,6 +124,7 @@ impl<'a, T> Iter<'a, T> {\n     /// // Now `as_slice` returns \"[2, 3]\":\n     /// println!(\"{:?}\", iter.as_slice());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn as_slice(&self) -> &'a [T] {\n         self.make_slice()\n@@ -298,6 +299,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// // Now `as_slice` returns \"[2, 3]\":\n     /// assert_eq!(iter.as_slice(), &[2, 3]);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"slice_iter_mut_as_slice\", since = \"1.53.0\")]\n     pub fn as_slice(&self) -> &[T] {\n         self.make_slice()"}, {"sha": "94cb81e9d41a1f2543c7b1afab56eccb0692b85d", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -109,6 +109,7 @@ impl<'a> Chars<'a> {\n     /// assert_eq!(chars.as_str(), \"\");\n     /// ```\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_str(&self) -> &'a str {\n         // SAFETY: `Chars` is only made from a str, which guarantees the iter is valid UTF-8.\n@@ -185,6 +186,7 @@ impl<'a> CharIndices<'a> {\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_str(&self) -> &'a str {\n         self.iter.as_str()\n@@ -1247,6 +1249,7 @@ impl<'a> SplitWhitespace<'a> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         self.inner.iter.as_str()\n@@ -1302,6 +1305,7 @@ impl<'a> SplitAsciiWhitespace<'a> {\n     /// assert_eq!(split.as_str(), \"\");\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n     pub fn as_str(&self) -> &'a str {\n         if self.inner.iter.iter.finished {"}, {"sha": "607a0179ff4b9a515ca69bd02522291ea1e42788", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -230,6 +230,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]\n+    #[must_use]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n     pub const fn as_bytes(&self) -> &[u8] {\n@@ -274,6 +275,7 @@ impl str {\n     /// assert_eq!(\"\ud83c\udf54\u2208\ud83c\udf0f\", s);\n     /// ```\n     #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n+    #[must_use]\n     #[inline(always)]\n     pub unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n         // SAFETY: the cast from `&str` to `&[u8]` is safe since `str`\n@@ -304,6 +306,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8\n@@ -318,6 +321,7 @@ impl str {\n     /// It is your responsibility to make sure that the string slice only gets\n     /// modified in a way that it remains valid UTF-8.\n     #[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut u8 {\n         self as *mut str as *mut u8"}, {"sha": "80e1458dc9421ba6f42278eec178ad5b05d75cbc", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -97,7 +97,7 @@ impl<T> Poll<T> {\n     /// Extracts the successful type of a [`Poll<T>`].\n     ///\n     /// When combined with the `?` operator, this function will\n-    /// propogate any [`Poll::Pending`] values to the caller, and\n+    /// propagate any [`Poll::Pending`] values to the caller, and\n     /// extract the `T` from [`Poll::Ready`].\n     ///\n     /// # Examples"}, {"sha": "5a74f39e8bc8b58469e6214909e99d92272ab797", "filename": "library/core/src/time.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -334,6 +334,7 @@ impl Duration {\n     /// [`subsec_nanos`]: Duration::subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_secs(&self) -> u64 {\n         self.secs\n@@ -417,6 +418,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_millis(&self) -> u128 {\n         self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n@@ -434,6 +436,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_micros(&self) -> u128 {\n         self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n@@ -451,6 +454,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn as_nanos(&self) -> u128 {\n         self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n@@ -674,6 +678,7 @@ impl Duration {\n     /// assert_eq!(dur.as_secs_f64(), 2.7);\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn as_secs_f64(&self) -> f64 {\n@@ -692,6 +697,7 @@ impl Duration {\n     /// assert_eq!(dur.as_secs_f32(), 2.7);\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn as_secs_f32(&self) -> f32 {"}, {"sha": "78eb91e41936b3625b48271093ac144ff9c683d4", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -297,6 +297,7 @@ impl FromVecWithNulError {\n     ///\n     /// assert_eq!(&bytes[..], value.unwrap_err().as_bytes());\n     /// ```\n+    #[must_use]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.bytes[..]\n     }\n@@ -618,6 +619,7 @@ impl CString {\n     /// assert_eq!(bytes, &[b'f', b'o', b'o']);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         // SAFETY: CString has a length at least 1\n@@ -637,6 +639,7 @@ impl CString {\n     /// assert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner\n@@ -655,6 +658,7 @@ impl CString {\n     ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"as_c_str\", since = \"1.20.0\")]\n     pub fn as_c_str(&self) -> &CStr {\n         &*self\n@@ -1313,6 +1317,7 @@ impl CStr {\n     /// This way, the lifetime of the [`CString`] in `hello` encompasses\n     /// the lifetime of `ptr` and the `unsafe` block.\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_as_ptr\", since = \"1.32.0\")]\n     pub const fn as_ptr(&self) -> *const c_char {"}, {"sha": "3b0e88331449efeaf97960cc114a6e56869ec18d", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -137,6 +137,7 @@ impl OsString {\n     /// assert_eq!(os_string.as_os_str(), os_str);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_os_str(&self) -> &OsStr {\n         self"}, {"sha": "9f45e89aa7504217fcb23f898c9c9073376ba9e4", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1005,6 +1005,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_dir(&self) -> bool {\n         self.file_type().is_dir()\n@@ -1033,6 +1034,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_file(&self) -> bool {\n         self.file_type().is_file()\n@@ -1059,6 +1061,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"is_symlink\", issue = \"85748\")]\n     pub fn is_symlink(&self) -> bool {\n         self.file_type().is_symlink()\n@@ -1306,6 +1309,7 @@ impl FileType {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_dir(&self) -> bool {\n         self.0.is_dir()\n@@ -1338,6 +1342,7 @@ impl FileType {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_file(&self) -> bool {\n         self.0.is_file()\n@@ -1373,6 +1378,7 @@ impl FileType {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_symlink(&self) -> bool {\n         self.0.is_symlink()"}, {"sha": "a689d2a56b721d2c8fd1574c907e0de28e21418c", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -232,6 +232,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv4(), true);\n     /// assert_eq!(socket.is_ipv6(), false);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn is_ipv4(&self) -> bool {\n@@ -253,6 +254,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv4(), false);\n     /// assert_eq!(socket.is_ipv6(), true);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn is_ipv6(&self) -> bool {"}, {"sha": "68b8bb8f3e1908c831d0e884563d3c5ba9daa51f", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -233,6 +233,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         match self {\n@@ -256,6 +257,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         match self {\n@@ -281,6 +283,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self {\n@@ -304,6 +307,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         match self {\n@@ -332,6 +336,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self {\n@@ -356,6 +361,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0)).is_benchmarking(), true);\n     /// ```\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         match self {\n@@ -379,6 +385,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_ipv4(&self) -> bool {\n         matches!(self, IpAddr::V4(_))\n@@ -399,6 +406,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(self, IpAddr::V6(_))\n@@ -527,6 +535,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n@@ -548,6 +557,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n@@ -578,6 +588,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_private(&self) -> bool {\n         match self.octets() {\n@@ -605,6 +616,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_link_local(&self) -> bool {\n         matches!(self.octets(), [169, 254, ..])\n@@ -680,6 +692,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n@@ -720,6 +733,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_shared(&self) -> bool {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n@@ -745,6 +759,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         self.octets()[0] == 198 && (self.octets()[1] & 0xfe) == 18\n@@ -779,6 +794,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_reserved(&self) -> bool {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n@@ -802,6 +818,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n@@ -823,6 +840,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_broadcast(&self) -> bool {\n         u32::from_be_bytes(self.octets()) == u32::from_be_bytes(Self::BROADCAST.octets())\n@@ -850,6 +868,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self.octets() {\n@@ -1291,6 +1310,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::UNSPECIFIED.octets())\n@@ -1314,6 +1334,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::LOCALHOST.octets())\n@@ -1340,6 +1361,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n@@ -1367,6 +1389,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n@@ -1395,6 +1418,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unicast(&self) -> bool {\n         !self.is_multicast()\n@@ -1446,6 +1470,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n@@ -1470,6 +1495,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n@@ -1492,6 +1518,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0).is_benchmarking(), true);\n     /// ```\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0x2) && (self.segments()[2] == 0)\n@@ -1529,6 +1556,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_unicast_global(&self) -> bool {\n         self.is_unicast()\n@@ -1590,6 +1618,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[must_use]\n     #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         (self.segments()[0] & 0xff00) == 0xff00"}, {"sha": "c9ccc26f4e179a55cd0d6521ce482e5f54175115", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -156,6 +156,7 @@ impl SocketAddr {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn is_unnamed(&self) -> bool {\n         if let AddressKind::Unnamed = self.address() { true } else { false }\n@@ -192,6 +193,7 @@ impl SocketAddr {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    #[must_use]\n     pub fn as_pathname(&self) -> Option<&Path> {\n         if let AddressKind::Pathname(path) = self.address() { Some(path) } else { None }\n     }"}, {"sha": "530640354758695669d76ed2a3ef5fa29a568580", "filename": "library/std/src/path.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -215,6 +215,7 @@ impl<'a> Prefix<'a> {\n     /// assert!(!Disk(b'C').is_verbatim());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_verbatim(&self) -> bool {\n         use self::Prefix::*;\n@@ -247,6 +248,7 @@ impl<'a> Prefix<'a> {\n /// assert!(path::is_separator('/')); // '/' works for both Unix and Windows\n /// assert!(!path::is_separator('\u2764'));\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn is_separator(c: char) -> bool {\n     c.is_ascii() && is_sep_byte(c as u8)\n@@ -427,6 +429,7 @@ impl<'a> PrefixComponent<'a> {\n \n     /// Returns the raw [`OsStr`] slice for this prefix.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_os_str(&self) -> &'a OsStr {\n         self.raw\n@@ -676,6 +679,7 @@ impl<'a> Components<'a> {\n     ///\n     /// assert_eq!(Path::new(\"foo/bar.txt\"), components.as_path());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_path(&self) -> &'a Path {\n         let mut comps = self.clone();\n@@ -821,6 +825,7 @@ impl<'a> Iter<'a> {\n     /// assert_eq!(Path::new(\"foo/bar.txt\"), iter.as_path());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_path(&self) -> &'a Path {\n         self.inner.as_path()\n@@ -1188,6 +1193,7 @@ impl PathBuf {\n     /// assert_eq!(Path::new(\"/test\"), p.as_path());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_path(&self) -> &Path {\n         self\n@@ -1923,6 +1929,7 @@ impl Path {\n     /// assert_eq!(os_str, std::ffi::OsStr::new(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn as_os_str(&self) -> &OsStr {\n         &self.inner\n@@ -2011,6 +2018,7 @@ impl Path {\n     ///\n     /// [`has_root`]: Path::has_root\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[allow(deprecated)]\n     pub fn is_absolute(&self) -> bool {\n         if cfg!(target_os = \"redox\") {\n@@ -2035,6 +2043,7 @@ impl Path {\n     ///\n     /// [`is_absolute`]: Path::is_absolute\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_relative(&self) -> bool {\n         !self.is_absolute()\n@@ -2061,6 +2070,7 @@ impl Path {\n     /// assert!(Path::new(\"/etc/passwd\").has_root());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn has_root(&self) -> bool {\n         self.components().has_root()\n@@ -2511,6 +2521,8 @@ impl Path {\n     /// println!(\"{}\", path.display());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this does not display the path, \\\n+                  it returns an object that can be displayed\"]\n     #[inline]\n     pub fn display(&self) -> Display<'_> {\n         Display { path: self }\n@@ -2698,6 +2710,7 @@ impl Path {\n     /// a Unix-like system for example. See [`fs::File::open`] or\n     /// [`fs::OpenOptions::open`] for more information.\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    #[must_use]\n     pub fn is_file(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)\n     }\n@@ -2724,6 +2737,7 @@ impl Path {\n     /// check errors, call [`fs::metadata`] and handle its [`Result`]. Then call\n     /// [`fs::Metadata::is_dir`] if it was [`Ok`].\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    #[must_use]\n     pub fn is_dir(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n@@ -2750,6 +2764,7 @@ impl Path {\n     /// assert_eq!(link_path.exists(), false);\n     /// ```\n     #[unstable(feature = \"is_symlink\", issue = \"85748\")]\n+    #[must_use]\n     pub fn is_symlink(&self) -> bool {\n         fs::symlink_metadata(self).map(|m| m.is_symlink()).unwrap_or(false)\n     }"}, {"sha": "133c3e46cd8a66a997638a477a714e48169114fd", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -167,6 +167,7 @@ impl BarrierWaitResult {\n     /// println!(\"{:?}\", barrier_wait_result.is_leader());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn is_leader(&self) -> bool {\n         self.0\n     }"}, {"sha": "82847d83ad225a18bda264bdf25914bc875fcf37", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044674337a180c494b7e6fdce4b20dca93324b2a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1031,6 +1031,7 @@ impl ThreadId {\n     /// value is entirely opaque -- only equality testing is stable. Note that\n     /// it is not guaranteed which values new threads will return, and this may\n     /// change across Rust versions.\n+    #[must_use]\n     #[unstable(feature = \"thread_id_value\", issue = \"67939\")]\n     pub fn as_u64(&self) -> NonZeroU64 {\n         self.0"}, {"sha": "7c0088ca744d293a5f4b1e2ac378e7c23d30fe55", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1 +1 @@\n-Subproject commit 2d9b1b9da706de24650fdc5c3b0182f55c82115d\n+Subproject commit 7c0088ca744d293a5f4b1e2ac378e7c23d30fe55"}, {"sha": "270fccd339e5972d9c900e788f197e81a0bcd956", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1 +1 @@\n-Subproject commit 4c76da9ddb4650203c129fceffdea95a3466c205\n+Subproject commit 270fccd339e5972d9c900e788f197e81a0bcd956"}, {"sha": "2d66852a27c5d0ec50ae021820d1de22caa2b1bd", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1 +1 @@\n-Subproject commit 2747c4bb2cbc0639b733793ddb0bf4e9daa2634e\n+Subproject commit 2d66852a27c5d0ec50ae021820d1de22caa2b1bd"}, {"sha": "b5c68b02984f74e99d1f1b332029e05f607e2660", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1 +1 @@\n-Subproject commit 13747275bd14c2d2b453100498532f9ae5504769\n+Subproject commit b5c68b02984f74e99d1f1b332029e05f607e2660"}, {"sha": "9a60624fcad0140826c44389571dc622917cd632", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1 +1 @@\n-Subproject commit 28aca4a36962c709bce301c03114b5589381dfb8\n+Subproject commit 9a60624fcad0140826c44389571dc622917cd632"}, {"sha": "fba15a46ca8efa97e8a955794724ac7ce27805b8", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=044674337a180c494b7e6fdce4b20dca93324b2a", "patch": "@@ -1 +1 @@\n-Subproject commit d1f03cbaa39d9164f5fe4b9b93762668142e0dad\n+Subproject commit fba15a46ca8efa97e8a955794724ac7ce27805b8"}]}