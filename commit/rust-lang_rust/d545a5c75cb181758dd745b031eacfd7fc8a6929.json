{"sha": "d545a5c75cb181758dd745b031eacfd7fc8a6929", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NDVhNWM3NWNiMTgxNzU4ZGQ3NDViMDMxZWFjZmQ3ZmM4YTY5Mjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-18T18:54:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-18T18:54:51Z"}, "message": "deserialize grammar", "tree": {"sha": "579057500a85b87fdded27394224246d3803d9ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/579057500a85b87fdded27394224246d3803d9ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d545a5c75cb181758dd745b031eacfd7fc8a6929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d545a5c75cb181758dd745b031eacfd7fc8a6929", "html_url": "https://github.com/rust-lang/rust/commit/d545a5c75cb181758dd745b031eacfd7fc8a6929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d545a5c75cb181758dd745b031eacfd7fc8a6929/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229d7943d8471eb114f961ab419c318736772da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/229d7943d8471eb114f961ab419c318736772da4", "html_url": "https://github.com/rust-lang/rust/commit/229d7943d8471eb114f961ab419c318736772da4"}], "stats": {"total": 144, "additions": 88, "deletions": 56}, "files": [{"sha": "e7354e937cdc47ad701c2dde4523f843a1a27b09", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d545a5c75cb181758dd745b031eacfd7fc8a6929/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d545a5c75cb181758dd745b031eacfd7fc8a6929/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d545a5c75cb181758dd745b031eacfd7fc8a6929", "patch": "@@ -1365,6 +1365,7 @@ dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ron 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"teraron 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]"}, {"sha": "a1881025351a74c85f4f57de1912ebfe60ddb855", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d545a5c75cb181758dd745b031eacfd7fc8a6929/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d545a5c75cb181758dd745b031eacfd7fc8a6929/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=d545a5c75cb181758dd745b031eacfd7fc8a6929", "patch": "@@ -2,61 +2,61 @@\n // See `cargo gen-syntax` (defined in crates/tools/src/main.rs)\n Grammar(\n     single_byte_tokens: [\n-        [\";\", \"SEMI\"],\n-        [\",\", \"COMMA\"],\n-        [\"(\", \"L_PAREN\"],\n-        [\")\", \"R_PAREN\"],\n-        [\"{\", \"L_CURLY\"],\n-        [\"}\", \"R_CURLY\"],\n-        [\"[\", \"L_BRACK\"],\n-        [\"]\", \"R_BRACK\"],\n-        [\"<\", \"L_ANGLE\"],\n-        [\">\", \"R_ANGLE\"],\n-        [\"@\", \"AT\"],\n-        [\"#\", \"POUND\"],\n-        [\"~\", \"TILDE\"],\n-        [\"?\", \"QUESTION\"],\n-        [\"$\", \"DOLLAR\"],\n-        [\"&\", \"AMP\"],\n-        [\"|\", \"PIPE\"],\n-        [\"+\", \"PLUS\"],\n-        [\"*\", \"STAR\"],\n-        [\"/\", \"SLASH\"],\n-        [\"^\", \"CARET\"],\n-        [\"%\", \"PERCENT\"],\n-        [\"_\", \"UNDERSCORE\"],\n+        (\";\", \"SEMI\"),\n+        (\",\", \"COMMA\"),\n+        (\"(\", \"L_PAREN\"),\n+        (\")\", \"R_PAREN\"),\n+        (\"{\", \"L_CURLY\"),\n+        (\"}\", \"R_CURLY\"),\n+        (\"[\", \"L_BRACK\"),\n+        (\"]\", \"R_BRACK\"),\n+        (\"<\", \"L_ANGLE\"),\n+        (\">\", \"R_ANGLE\"),\n+        (\"@\", \"AT\"),\n+        (\"#\", \"POUND\"),\n+        (\"~\", \"TILDE\"),\n+        (\"?\", \"QUESTION\"),\n+        (\"$\", \"DOLLAR\"),\n+        (\"&\", \"AMP\"),\n+        (\"|\", \"PIPE\"),\n+        (\"+\", \"PLUS\"),\n+        (\"*\", \"STAR\"),\n+        (\"/\", \"SLASH\"),\n+        (\"^\", \"CARET\"),\n+        (\"%\", \"PERCENT\"),\n+        (\"_\", \"UNDERSCORE\"),\n     ],\n     // Tokens for which the longest match must be chosen (e.g. `..` is a DOTDOT, but `.` is a DOT)\n     multi_byte_tokens: [\n-        [\".\", \"DOT\"],\n-        [\"..\", \"DOTDOT\"],\n-        [\"...\", \"DOTDOTDOT\"],\n-        [\"..=\", \"DOTDOTEQ\"],\n-        [\":\", \"COLON\"],\n-        [\"::\", \"COLONCOLON\"],\n-        [\"=\", \"EQ\"],\n-        [\"==\", \"EQEQ\"],\n-        [\"=>\", \"FAT_ARROW\"],\n-        [\"!\", \"EXCL\"],\n-        [\"!=\", \"NEQ\"],\n-        [\"-\", \"MINUS\"],\n-        [\"->\", \"THIN_ARROW\"],\n-        [\"<=\", \"LTEQ\"],\n-        [\">=\", \"GTEQ\"],\n-        [\"+=\", \"PLUSEQ\"],\n-        [\"-=\", \"MINUSEQ\"],\n-        [\"|=\", \"PIPEEQ\"],\n-        [\"&=\", \"AMPEQ\"],\n-        [\"^=\", \"CARETEQ\"],\n-        [\"/=\", \"SLASHEQ\"],\n-        [\"*=\", \"STAREQ\"],\n-        [\"%=\", \"PERCENTEQ\"],\n-        [\"&&\", \"AMPAMP\"],\n-        [\"||\", \"PIPEPIPE\"],\n-        [\"<<\", \"SHL\"],\n-        [\">>\", \"SHR\"],\n-        [\"<<=\", \"SHLEQ\"],\n-        [\">>=\", \"SHREQ\"],\n+        (\".\", \"DOT\"),\n+        (\"..\", \"DOTDOT\"),\n+        (\"...\", \"DOTDOTDOT\"),\n+        (\"..=\", \"DOTDOTEQ\"),\n+        (\":\", \"COLON\"),\n+        (\"::\", \"COLONCOLON\"),\n+        (\"=\", \"EQ\"),\n+        (\"==\", \"EQEQ\"),\n+        (\"=>\", \"FAT_ARROW\"),\n+        (\"!\", \"EXCL\"),\n+        (\"!=\", \"NEQ\"),\n+        (\"-\", \"MINUS\"),\n+        (\"->\", \"THIN_ARROW\"),\n+        (\"<=\", \"LTEQ\"),\n+        (\">=\", \"GTEQ\"),\n+        (\"+=\", \"PLUSEQ\"),\n+        (\"-=\", \"MINUSEQ\"),\n+        (\"|=\", \"PIPEEQ\"),\n+        (\"&=\", \"AMPEQ\"),\n+        (\"^=\", \"CARETEQ\"),\n+        (\"/=\", \"SLASHEQ\"),\n+        (\"*=\", \"STAREQ\"),\n+        (\"%=\", \"PERCENTEQ\"),\n+        (\"&&\", \"AMPAMP\"),\n+        (\"||\", \"PIPEPIPE\"),\n+        (\"<<\", \"SHL\"),\n+        (\">>\", \"SHR\"),\n+        (\"<<=\", \"SHLEQ\"),\n+        (\">>=\", \"SHREQ\"),\n     ],\n     keywords: [\n         \"async\",\n@@ -692,7 +692,7 @@ Grammar(\n         \"LifetimeArg\": (),\n \n         \"MacroItems\": (\n-            traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],            \n+            traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],\n         ),\n \n         \"MacroStmts\" : ("}, {"sha": "ab9fa5d861c333d53f2bc1945ee41cacc1d884a0", "filename": "crates/ra_tools/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d545a5c75cb181758dd745b031eacfd7fc8a6929/crates%2Fra_tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d545a5c75cb181758dd745b031eacfd7fc8a6929/crates%2Fra_tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2FCargo.toml?ref=d545a5c75cb181758dd745b031eacfd7fc8a6929", "patch": "@@ -12,3 +12,4 @@ itertools = \"0.8.0\"\n clap = \"2.32.0\"\n quote = \"1.0.2\"\n ron = \"0.5.1\"\n+serde = { version = \"1.0.0\", features = [\"derive\"] }"}, {"sha": "f0a54808a2c07647711953c5b25d7f4cc5d2f280", "filename": "crates/ra_tools/src/codegen.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d545a5c75cb181758dd745b031eacfd7fc8a6929/crates%2Fra_tools%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d545a5c75cb181758dd745b031eacfd7fc8a6929/crates%2Fra_tools%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fcodegen.rs?ref=d545a5c75cb181758dd745b031eacfd7fc8a6929", "patch": "@@ -1,6 +1,8 @@\n-use std::{fs, path::Path};\n+use std::{collections::BTreeMap, fs, path::Path};\n \n+use quote::quote;\n use ron;\n+use serde::Deserialize;\n \n use crate::{project_root, Mode, Result, AST, GRAMMAR};\n \n@@ -12,10 +14,38 @@ pub fn generate(mode: Mode) -> Result<()> {\n }\n \n fn generate_ast(grammar_src: &Path, dst: &Path, mode: Mode) -> Result<()> {\n-    let src: ron::Value = {\n+    let src: Grammar = {\n         let text = fs::read_to_string(grammar_src)?;\n         ron::de::from_str(&text)?\n     };\n-    eprintln!(\"{:?}\", src);\n+    eprintln!(\"{:#?}\", src);\n     Ok(())\n }\n+\n+#[derive(Deserialize, Debug)]\n+struct Grammar {\n+    single_byte_tokens: Vec<(String, String)>,\n+    multi_byte_tokens: Vec<(String, String)>,\n+    keywords: Vec<String>,\n+    contextual_keywords: Vec<String>,\n+    literals: Vec<String>,\n+    tokens: Vec<String>,\n+    ast: BTreeMap<String, AstNode>,\n+}\n+\n+#[derive(Deserialize, Debug)]\n+struct AstNode {\n+    #[serde(default)]\n+    traits: Vec<String>,\n+    #[serde(default)]\n+    collections: Vec<Attr>,\n+    #[serde(default)]\n+    options: Vec<Attr>,\n+}\n+\n+#[derive(Deserialize, Debug)]\n+#[serde(untagged)]\n+enum Attr {\n+    Type(String),\n+    NameType(String, String),\n+}"}]}