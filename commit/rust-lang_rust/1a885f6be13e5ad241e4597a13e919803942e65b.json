{"sha": "1a885f6be13e5ad241e4597a13e919803942e65b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhODg1ZjZiZTEzZTVhZDI0MWU0NTk3YTEzZTkxOTgwMzk0MmU2NWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-11T21:42:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-11T21:42:11Z"}, "message": "manual: add section on lambda expressions.", "tree": {"sha": "4da22486be8a591ced191f47be595d1acfb15df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da22486be8a591ced191f47be595d1acfb15df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a885f6be13e5ad241e4597a13e919803942e65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a885f6be13e5ad241e4597a13e919803942e65b", "html_url": "https://github.com/rust-lang/rust/commit/1a885f6be13e5ad241e4597a13e919803942e65b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a885f6be13e5ad241e4597a13e919803942e65b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bb141c1f9c486442e57d255b4a7afafc9e89667", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb141c1f9c486442e57d255b4a7afafc9e89667", "html_url": "https://github.com/rust-lang/rust/commit/2bb141c1f9c486442e57d255b4a7afafc9e89667"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "628cb137061383003a1d7bb1ef453e0ed5c56696", "filename": "doc/rust.md", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1a885f6be13e5ad241e4597a13e919803942e65b/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a885f6be13e5ad241e4597a13e919803942e65b/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=1a885f6be13e5ad241e4597a13e919803942e65b", "patch": "@@ -1975,13 +1975,47 @@ An example of a call expression:\n let x: int = add(1, 2);\n ~~~~\n \n-### Shared function expressions\n+### Lambda expressions\n \n-*TODO*.\n+~~~~~~~~ {.abnf .gram}\n+ident_list : [ ident [ ',' ident ]* ] ? ;\n+lambda_expr : '|' ident_list '| expr ;\n+~~~~~~~~\n \n-### Unique function expressions\n+A _lambda expression_ (a.k.a. \"anonymous function expression\") defines a function and denotes it as a value,\n+in a single expression.\n+Lambda expressions are written by prepending a list of identifiers, surrounded by pipe symbols (`|`),\n+to an expression.\n \n-*TODO*.\n+A lambda expression denotes a function mapping parameters to the expression to the right of the `ident_list`.\n+The identifiers in the `ident_list` are the parameters to the function, with types inferred from context.\n+\n+Lambda expressions are most useful when passing functions as arguments to other functions,\n+as an abbreviation for defining and capturing a separate fucntion.\n+\n+Significantly, lambda expressions _capture their environment_,\n+which regular [function definitions](#functions) do not.\n+\n+The exact type of capture depends on the [function type](#function-types) inferred for the lambda expression;\n+in the simplest and least-expensive form, the environment is captured by reference,\n+effectively borrowing pointers to all outer variables referenced inside the function.\n+Other forms of capture include making copies of captured variables,\n+and moving values from the environment into the lambda expression's captured environment.\n+\n+An example of a lambda expression:\n+\n+~~~~\n+fn ten_times(f: fn(int)) {\n+    let mut i = 0;\n+    while i < 10 {\n+        f(i);\n+        i += 1;\n+    }\n+}\n+\n+ten_times(|j| io::println(fmt!(\"hello, %d\", j)));\n+\n+~~~~\n \n ### While loops\n "}]}