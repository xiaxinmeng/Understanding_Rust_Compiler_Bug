{"sha": "3eef0cbfe2e45157efb86030200d806e06533689", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZWYwY2JmZTJlNDUxNTdlZmI4NjAzMDIwMGQ4MDZlMDY1MzM2ODk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-03T22:25:14Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-03T22:25:14Z"}, "message": "Reduce reliance on feature(await_macro).", "tree": {"sha": "ca2ca18a124f0754093e0d340a14b94ab3f530eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2ca18a124f0754093e0d340a14b94ab3f530eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eef0cbfe2e45157efb86030200d806e06533689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eef0cbfe2e45157efb86030200d806e06533689", "html_url": "https://github.com/rust-lang/rust/commit/3eef0cbfe2e45157efb86030200d806e06533689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eef0cbfe2e45157efb86030200d806e06533689/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43315bc15e274d62b7bb239488066a21d40b4269", "url": "https://api.github.com/repos/rust-lang/rust/commits/43315bc15e274d62b7bb239488066a21d40b4269", "html_url": "https://github.com/rust-lang/rust/commit/43315bc15e274d62b7bb239488066a21d40b4269"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "7396918196c088a35c4108780728d80cb19ce766", "filename": "src/test/run-pass/async-await/async-fn-size.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n #[path = \"../auxiliary/arc_wake.rs\"]\n mod arc_wake;\n@@ -58,31 +58,31 @@ fn wait(fut: impl Future<Output = u8>) -> u8 {\n fn base() -> WakeOnceThenComplete { WakeOnceThenComplete(false, 1) }\n \n async fn await1_level1() -> u8 {\n-    await!(base())\n+    base().await\n }\n \n async fn await2_level1() -> u8 {\n-    await!(base()) + await!(base())\n+    base().await + base().await\n }\n \n async fn await3_level1() -> u8 {\n-    await!(base()) + await!(base()) + await!(base())\n+    base().await + base().await + base().await\n }\n \n async fn await3_level2() -> u8 {\n-    await!(await3_level1()) + await!(await3_level1()) + await!(await3_level1())\n+    await3_level1().await + await3_level1().await + await3_level1().await\n }\n \n async fn await3_level3() -> u8 {\n-    await!(await3_level2()) + await!(await3_level2()) + await!(await3_level2())\n+    await3_level2().await + await3_level2().await + await3_level2().await\n }\n \n async fn await3_level4() -> u8 {\n-    await!(await3_level3()) + await!(await3_level3()) + await!(await3_level3())\n+    await3_level3().await + await3_level3().await + await3_level3().await\n }\n \n async fn await3_level5() -> u8 {\n-    await!(await3_level4()) + await!(await3_level4()) + await!(await3_level4())\n+    await3_level4().await + await3_level4().await + await3_level4().await\n }\n \n fn main() {"}, {"sha": "5ebb18b999ab6f83d071f65630740f08d74f9c5b", "filename": "src/test/run-pass/async-await/issue-60709.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Frun-pass%2Fasync-await%2Fissue-60709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Frun-pass%2Fasync-await%2Fissue-60709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await%2Fissue-60709.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -2,7 +2,7 @@\n // handled incorrectly in generators.\n // compile-flags: -Copt-level=z -Cdebuginfo=2 --edition=2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n #![allow(unused)]\n \n use std::future::Future;\n@@ -22,7 +22,7 @@ impl Future for Never {\n fn main() {\n     let fut = async {\n         let _rc = Rc::new(()); // Also crashes with Arc\n-        await!(Never());\n+        Never().await;\n     };\n     let _bla = fut; // Moving the future is required.\n }"}, {"sha": "447e40dddd910f4b47aed0035bc157c645ed8e04", "filename": "src/test/ui/async-await/async-fn-path-elision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n #![allow(dead_code)]\n \n struct HasLifetime<'a>(&'a bool);"}, {"sha": "072b7cea89dda4c3e83ddeacb582ef0ca9169736", "filename": "src/test/ui/async-await/async-with-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n trait MyClosure {\n     type Args;\n@@ -20,7 +20,7 @@ async fn get_future<C: ?Sized + MyClosure>(_stream: MyStream<C>) {}\n \n async fn f() {\n     let messages: MyStream<dyn FnMut()> = unimplemented!();\n-    await!(get_future(messages));\n+    get_future(messages).await;\n }\n \n fn main() {}"}, {"sha": "92f3210ac89a38df7eb4ddf6f06def3d845cdf9b", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n \n #![allow(non_camel_case_types)]\n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n mod outer_mod {\n     pub mod await { //~ ERROR expected identifier, found reserved keyword `await`"}, {"sha": "dfd8b2e361eef1b1e0cd8ea77a309eb7989ee354", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters-by-ref-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn completes execution."}, {"sha": "2a74485afb45094803b030dcdde26ebacbe37c17", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn completes execution."}, {"sha": "35a7b40912c87cebfe6c78bd8bff96fd94e13f2d", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types, async_await, await_macro)]\n+#![feature(arbitrary_self_types, async_await)]\n \n use std::task::{self, Poll};\n use std::future::Future;\n@@ -37,11 +37,11 @@ impl<R, F> Future for Lazy<F>\n async fn __receive<WantFn, Fut>(want: WantFn) -> ()\n     where Fut: Future<Output = ()>, WantFn: Fn(&Box<dyn Send + 'static>) -> Fut,\n {\n-    await!(lazy(|_| ()));\n+    lazy(|_| ()).await;\n }\n \n pub fn basic_spawn_receive() {\n-    async { await!(__receive(|_| async { () })) };\n+    async { __receive(|_| async { () }).await };\n }\n \n fn main() {}"}, {"sha": "7e3934b8357829f0998e2fbfc17e32ba800cbcd4", "filename": "src/test/ui/async-await/issues/issue-54974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n use std::sync::Arc;\n "}, {"sha": "6db0e8b8d5f075891040993c68411231477d187e", "filename": "src/test/ui/async-await/issues/issue-55324.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,13 +1,13 @@\n // compile-pass\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n use std::future::Future;\n \n #[allow(unused)]\n async fn foo<F: Future<Output = i32>>(x: &i32, future: F) -> i32 {\n-    let y = await!(future);\n+    let y = future.await;\n     *x + y\n }\n "}, {"sha": "3dc4b0606335e11aa9cceb3147b01d3ccebb6d55", "filename": "src/test/ui/async-await/issues/issue-58885.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n struct Xyz {\n     a: u64,"}, {"sha": "b3b682f72322e03c285fa35ba146de2a251522e8", "filename": "src/test/ui/async-await/issues/issue-59001.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n // edition:2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n use std::future::Future;\n "}, {"sha": "1b843720102ab6a514a8aa32d2f9ccea6de7ddad", "filename": "src/test/ui/async-await/issues/issue-59972.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -2,7 +2,7 @@\n \n // compile-flags: --edition=2018\n \n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n \n pub enum Uninhabited { }\n \n@@ -15,7 +15,7 @@ async fn noop() { }\n #[allow(unused)]\n async fn contains_never() {\n     let error = uninhabited_async();\n-    await!(noop());\n+    noop().await;\n     let error2 = error;\n }\n "}, {"sha": "589e260d084b2136a56c947686ba12c3cffa9eee", "filename": "src/test/ui/async-await/multiple-lifetimes/hrtb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -3,7 +3,7 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(arbitrary_self_types, async_await, await_macro)]\n+#![feature(async_await)]\n #![allow(dead_code)]\n \n use std::ops::Add;"}, {"sha": "62d4b3fb6f23b9a82970b461674056ef79c03b5b", "filename": "src/test/ui/async-await/no-args-non-move-async-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, async_closure, await_macro)]\n+#![feature(async_await, async_closure)]\n \n fn main() {\n     let _ = async |x: u8| {};"}, {"sha": "54f3339870bda4012bc6b8b3a2404a47028d190b", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef0cbfe2e45157efb86030200d806e06533689/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs?ref=3eef0cbfe2e45157efb86030200d806e06533689", "patch": "@@ -2,10 +2,10 @@\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden when using `async` and `await`.\n \n-#![feature(await_macro, async_await, generators)]\n+#![feature(async_await)]\n \n async fn recursive_async_function() -> () { //~ ERROR\n-    await!(recursive_async_function());\n+    recursive_async_function().await;\n }\n \n fn main() {}"}]}