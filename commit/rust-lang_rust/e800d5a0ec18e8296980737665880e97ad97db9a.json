{"sha": "e800d5a0ec18e8296980737665880e97ad97db9a", "node_id": "C_kwDOAAsO6NoAKGU4MDBkNWEwZWMxOGU4Mjk2OTgwNzM3NjY1ODgwZTk3YWQ5N2RiOWE", "commit": {"author": {"name": "Stiopa Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2023-02-03T00:13:50Z"}, "committer": {"name": "Stiopa Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2023-02-03T00:18:31Z"}, "message": "Specify behavior of HashSet::insert\n\n`HashSet::insert` does not replace the value with equal value.\n\nFixes #107581.", "tree": {"sha": "2e1e03c1e71c2d5e5844e0f5b4f41a8d51fb6280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1e03c1e71c2d5e5844e0f5b4f41a8d51fb6280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e800d5a0ec18e8296980737665880e97ad97db9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e800d5a0ec18e8296980737665880e97ad97db9a", "html_url": "https://github.com/rust-lang/rust/commit/e800d5a0ec18e8296980737665880e97ad97db9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e800d5a0ec18e8296980737665880e97ad97db9a/comments", "author": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3126500f25114ba4e0ac3e76694dd45a22de56d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3126500f25114ba4e0ac3e76694dd45a22de56d", "html_url": "https://github.com/rust-lang/rust/commit/f3126500f25114ba4e0ac3e76694dd45a22de56d"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "ac7acf999a6ee789a4fc50523bc45dc5718c5351", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e800d5a0ec18e8296980737665880e97ad97db9a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e800d5a0ec18e8296980737665880e97ad97db9a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=e800d5a0ec18e8296980737665880e97ad97db9a", "patch": "@@ -875,7 +875,9 @@ where\n     /// Returns whether the value was newly inserted. That is:\n     ///\n     /// - If the set did not previously contain this value, `true` is returned.\n-    /// - If the set already contained this value, `false` is returned.\n+    /// - If the set already contained this value, `false` is returned,\n+    ///   and the set is not modified: original value is not replaced,\n+    ///   and the value passed as argument is dropped.\n     ///\n     /// # Examples\n     ///"}, {"sha": "022ca68ffcfbbff625df402629e4d52623916bdc", "filename": "library/std/src/collections/hash/set/tests.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e800d5a0ec18e8296980737665880e97ad97db9a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e800d5a0ec18e8296980737665880e97ad97db9a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs?ref=e800d5a0ec18e8296980737665880e97ad97db9a", "patch": "@@ -3,6 +3,7 @@ use super::HashSet;\n \n use crate::panic::{catch_unwind, AssertUnwindSafe};\n use crate::sync::atomic::{AtomicU32, Ordering};\n+use crate::sync::Arc;\n \n #[test]\n fn test_zero_capacities() {\n@@ -502,3 +503,22 @@ fn const_with_hasher() {\n     const X: HashSet<(), ()> = HashSet::with_hasher(());\n     assert_eq!(X.len(), 0);\n }\n+\n+#[test]\n+fn test_insert_does_not_overwrite_the_value() {\n+    let first_value = Arc::new(17);\n+    let second_value = Arc::new(17);\n+\n+    let mut set = HashSet::new();\n+    let inserted = set.insert(first_value.clone());\n+    assert!(inserted);\n+\n+    let inserted = set.insert(second_value);\n+    assert!(!inserted);\n+\n+    assert!(\n+        Arc::ptr_eq(set.iter().next().unwrap(), &first_value),\n+        \"Insert must not overwrite the value, so the contained value pointer \\\n+            must be the same as first value pointer we inserted\"\n+    );\n+}"}]}