{"sha": "aa9d2d88d33266437ca770a7345cce0d23ad1011", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOWQyZDg4ZDMzMjY2NDM3Y2E3NzBhNzM0NWNjZTBkMjNhZDEwMTE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-12T23:25:09Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-13T00:37:04Z"}, "message": "Handle class destructors correctly in metadata\n\nThis allows destructors to be inlined, which is necessary since\nclasses can have both ty params and destructors.", "tree": {"sha": "66225e5bd762c78643cb298e90d1f626355cb569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66225e5bd762c78643cb298e90d1f626355cb569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa9d2d88d33266437ca770a7345cce0d23ad1011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9d2d88d33266437ca770a7345cce0d23ad1011", "html_url": "https://github.com/rust-lang/rust/commit/aa9d2d88d33266437ca770a7345cce0d23ad1011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa9d2d88d33266437ca770a7345cce0d23ad1011/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9fc19c3c22174dd4308337805e686bbd4960635", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9fc19c3c22174dd4308337805e686bbd4960635", "html_url": "https://github.com/rust-lang/rust/commit/e9fc19c3c22174dd4308337805e686bbd4960635"}], "stats": {"total": 117, "additions": 91, "deletions": 26}, "files": [{"sha": "ad1501dd8b0d1b7609c1cab36778d19de6514a07", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=aa9d2d88d33266437ca770a7345cce0d23ad1011", "patch": "@@ -730,7 +730,8 @@ enum inlined_item {\n     ii_item(@item),\n     ii_method(def_id /* impl id */, @method),\n     ii_native(@native_item),\n-    ii_ctor(class_ctor, ident, [ty_param], def_id /* parent id */)\n+    ii_ctor(class_ctor, ident, [ty_param], def_id /* parent id */),\n+    ii_dtor(class_dtor, ident, [ty_param], def_id /* parent id */)\n }\n \n //"}, {"sha": "10397e795ab7b35a12efd68d59745acdcb0e6fd0", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=aa9d2d88d33266437ca770a7345cce0d23ad1011", "patch": "@@ -106,7 +106,7 @@ fn map_decoded_item(diag: span_handler,\n     // don't decode and instantiate the impl, but just the method, we have to\n     // add it to the table now:\n     alt ii {\n-      ii_item(_) | ii_ctor(_,_,_,_) { /* fallthrough */ }\n+      ii_item(*) | ii_ctor(*) | ii_dtor(*) { /* fallthrough */ }\n       ii_native(i) {\n         cx.map.insert(i.id, node_native_item(i, native_abi_rust_intrinsic,\n                                              @path));"}, {"sha": "9eee9a33af8f9396d1daee1307e7423fb7d3341a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=aa9d2d88d33266437ca770a7345cce0d23ad1011", "patch": "@@ -320,6 +320,7 @@ impl inlined_item_methods for inlined_item {\n           ii_native(i) { /* FIXME: bad */ copy i.ident }\n           ii_method(_, m) { /* FIXME: bad */ copy m.ident }\n           ii_ctor(_, nm, _, _) { /* FIXME: bad */ copy nm }\n+          ii_dtor(_, nm, _, _) { /* FIXME: bad */ copy nm }\n         }\n     }\n \n@@ -329,6 +330,7 @@ impl inlined_item_methods for inlined_item {\n           ii_native(i) { i.id }\n           ii_method(_, m) { m.id }\n           ii_ctor(ctor, _, _, _) { ctor.node.id }\n+          ii_dtor(dtor, _, _, _) { dtor.node.id }\n         }\n     }\n \n@@ -340,6 +342,9 @@ impl inlined_item_methods for inlined_item {\n           ii_ctor(ctor, nm, tps, parent_id) {\n               visit::visit_class_ctor_helper(ctor, nm, tps, parent_id, e, v);\n           }\n+          ii_dtor(dtor, nm, tps, parent_id) {\n+              visit::visit_class_dtor_helper(dtor, tps, parent_id, e, v);\n+          }\n         }\n     }\n }"}, {"sha": "dcb71c6718ae28bea86d83686f51ed546536c573", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=aa9d2d88d33266437ca770a7345cce0d23ad1011", "patch": "@@ -335,15 +335,18 @@ fn get_class_method(cdata: cmd, id: ast::node_id, name: str) -> ast::def_id {\n \n fn class_dtor(cdata: cmd, id: ast::node_id) -> option<ast::def_id> {\n     let items = ebml::get_doc(ebml::doc(cdata.data), tag_items);\n+    let mut found = none;\n     let cls_items = alt maybe_find_item(id, items) {\n             some(it) { it }\n-            none     { ret none; }};\n-    let mut rslt = none;\n-    ebml::tagged_docs(cls_items, tag_item_dtor) {|f|\n-        let did = parse_def_id(ebml::doc_data(f));\n-        rslt = some(translate_def_id(cdata, did));\n-    }\n-    rslt\n+            none     { fail (#fmt(\"class_dtor: class id not found \\\n+              when looking up dtor for %d\", id)); }\n+    };\n+    ebml::tagged_docs(cls_items, tag_item_dtor) {|doc|\n+         let doc1 = ebml::get_doc(doc, tag_def_id);\n+         let did = parse_def_id(ebml::doc_data(doc1));\n+         found = some(translate_def_id(cdata, did));\n+    };\n+    found\n }\n \n fn get_symbol(data: @[u8], id: ast::node_id) -> str {"}, {"sha": "215f73a6d4f4686aa53b90ceedf40eddea80e225", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=aa9d2d88d33266437ca770a7345cce0d23ad1011", "patch": "@@ -9,7 +9,7 @@ import ebml::writer;\n import syntax::ast::*;\n import syntax::print::pprust;\n import syntax::{ast_util, visit};\n-import syntax::ast_util::local_def;\n+import syntax::ast_util::*;\n import common::*;\n import middle::ty;\n import middle::ty::node_id_to_type;\n@@ -206,12 +206,6 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                 add_to_index(ebml_w, path, index, it.ident);\n                 encode_named_def_id(ebml_w, it.ident,\n                                     local_def(ctor.node.id));\n-                /* Encode id for dtor */\n-                option::iter(m_dtor) {|dtor|\n-                        ebml_w.wr_tag(tag_item_dtor) {||\n-                           encode_def_id(ebml_w, local_def(dtor.node.id));\n-                    }\n-                };\n                 encode_class_item_paths(ebml_w, items, path + [it.ident],\n                                         index);\n             }\n@@ -485,8 +479,8 @@ fn encode_info_for_fn(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         encode_family(ebml_w, purity_fn_family(decl.purity));\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         let its_ty = node_id_to_type(ecx.tcx, id);\n-        #debug(\"fn name = %s ty = %s\", ident,\n-               util::ppaux::ty_to_str(ecx.tcx, its_ty));\n+        #debug(\"fn name = %s ty = %s its node id = %d\", ident,\n+               util::ppaux::ty_to_str(ecx.tcx, its_ty), id);\n         encode_type(ecx, ebml_w, its_ty);\n         encode_path(ebml_w, path, ast_map::path_name(ident));\n         alt item {\n@@ -623,13 +617,23 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_enum_variant_info(ecx, ebml_w, item.id, variants,\n                                  path, index, tps);\n       }\n-      item_class(tps, ifaces, items, ctor, _dtor, rp) {\n+      item_class(tps, ifaces, items, ctor, m_dtor, rp) {\n         /* First, encode the fields and methods\n            These come first because we need to write them to make\n            the index, and the index needs to be in the item for the\n            class itself */\n         let idx = encode_info_for_class(ecx, ebml_w, item.id, path, tps,\n                                           items, index);\n+        /* Encode the dtor */\n+        option::iter(m_dtor) {|dtor|\n+          *index += [{val: dtor.node.id, pos: ebml_w.writer.tell()}];\n+          encode_info_for_fn(ecx, ebml_w, dtor.node.id, item.ident\n+                             + \"_dtor\", path, if tps.len() > 0u {\n+                               some(ii_dtor(dtor, item.ident, tps,\n+                                            local_def(item.id))) }\n+                             else { none }, tps, ast_util::dtor_dec());\n+        }\n+\n         /* Index the class*/\n         add_to_index();\n         /* Now, make an item for the class itself */\n@@ -644,6 +648,14 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         for ifaces.each {|t|\n            encode_iface_ref(ebml_w, ecx, t);\n         }\n+        /* Encode the dtor */\n+        /* Encode id for dtor */\n+        option::iter(m_dtor) {|dtor|\n+            ebml_w.wr_tag(tag_item_dtor) {||\n+                encode_def_id(ebml_w, local_def(dtor.node.id));\n+            }\n+        };\n+\n         /* Encode def_ids for each field and method\n          for methods, write all the stuff get_iface_method\n         needs to know*/\n@@ -803,17 +815,15 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                 encode_info_for_item(ecx, ebml_w, i, index, *pt);\n                 /* encode ctor, then encode items */\n                 alt i.node {\n-                   item_class(tps, _, _, ctor, _, _) {\n-                   /* this is assuming that ctors aren't inlined...\n-                      probably shouldn't assume that */\n+                   item_class(tps, _, _, ctor, m_dtor, _) {\n                    #debug(\"encoding info for ctor %s %d\", i.ident,\n                           ctor.node.id);\n                    *index += [{val: ctor.node.id, pos: ebml_w.writer.tell()}];\n                    encode_info_for_fn(ecx, ebml_w, ctor.node.id, i.ident,\n                       *pt, if tps.len() > 0u {\n                              some(ii_ctor(ctor, i.ident, tps,\n                                           local_def(i.id))) }\n-                           else { none }, tps, ctor.node.dec)\n+                      else { none }, tps, ctor.node.dec);\n                   }\n                   _ {}\n                 }"}, {"sha": "0d6b158a9ae5f44f618bfe1f72282cc1b9905c36", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=aa9d2d88d33266437ca770a7345cce0d23ad1011", "patch": "@@ -427,6 +427,12 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n                               with ctor.node}\n             with ctor}, nm, tps, parent_id)\n       }\n+      ast::ii_dtor(dtor, nm, tps, parent_id) {\n+        let dtor_body = fld.fold_block(dtor.node.body);\n+        ast::ii_dtor({node: {body: dtor_body\n+                              with dtor.node}\n+            with dtor}, nm, tps, parent_id)\n+      }\n     }\n }\n \n@@ -464,6 +470,16 @@ fn renumber_ast(xcx: extended_decode_ctxt, ii: ast::inlined_item)\n                               with ctor.node}\n             with ctor}, nm, new_params, new_parent)\n       }\n+      ast::ii_dtor(dtor, nm, tps, parent_id) {\n+        let dtor_body = fld.fold_block(dtor.node.body);\n+        let new_params = fold::fold_ty_params(tps, fld);\n+        let dtor_id = fld.new_id(dtor.node.id);\n+        let new_parent = xcx.tr_def_id(parent_id);\n+        let new_self = fld.new_id(dtor.node.self_id);\n+        ast::ii_dtor({node: {id: dtor_id, self_id: new_self, body: dtor_body}\n+                        with dtor},\n+          nm, new_params, new_parent)\n+      }\n      }\n }\n "}, {"sha": "2423f04d11fedb14380f17bf192ae94f5d673c6b", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=aa9d2d88d33266437ca770a7345cce0d23ad1011", "patch": "@@ -749,6 +749,12 @@ fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n       ty::ty_opaque_closure_ptr(ck) {\n         closure::make_opaque_cbox_free_glue(bcx, ck, v)\n       }\n+      ty::ty_class(did,substs) {\n+        // Call the dtor if there is one\n+        option::map_default(ty::ty_dtor(bcx.tcx(), did), bcx) {|dt_id|\n+          trans_class_drop(bcx, v, dt_id, did, substs)\n+        }\n+      }\n       _ { bcx }\n     };\n     build_return(bcx);\n@@ -2287,7 +2293,7 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n       }\n       some(none) { fn_id } // Not inlinable\n       none { // Not seen yet\n-        alt check csearch::maybe_get_item_ast(\n+        alt csearch::maybe_get_item_ast(\n             ccx.tcx, fn_id,\n             bind astencode::decode_inlined_item(_, _, ccx.maps, _, _)) {\n \n@@ -2327,6 +2333,10 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n             trans_item(ccx, *item);\n             local_def(my_id)\n           }\n+          csearch::found_parent(_, _) {\n+              ccx.sess.bug(\"maybe_get_item_ast returned a found_parent \\\n+               with a non-item parent\");\n+          }\n           csearch::found(ast::ii_method(impl_did, mth)) {\n             ccx.external.insert(fn_id, some(mth.id));\n             let {bounds: impl_bnds, rp: _, ty: impl_ty} =\n@@ -2340,6 +2350,10 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n             }\n             local_def(mth.id)\n           }\n+          csearch::found(ast::ii_dtor(dtor, nm, tps, parent_id)) {\n+              ccx.external.insert(fn_id, some(dtor.node.id));\n+              local_def(dtor.node.id)\n+          }\n         }\n       }\n     }"}, {"sha": "2b708467874203672ca6de04b2f64e27a308c0e5", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d2d88d33266437ca770a7345cce0d23ad1011/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=aa9d2d88d33266437ca770a7345cce0d23ad1011", "patch": "@@ -9,7 +9,9 @@ import syntax::ast::*;\n import syntax::{visit, ast_util, ast_map};\n import syntax::ast_util::def_id_of_def;\n import syntax::attr;\n+import syntax::print::pprust::expr_to_str;\n import std::map::hashmap;\n+import driver::session::*;\n \n export map, find_reachable;\n \n@@ -58,7 +60,11 @@ fn traverse_export(cx: ctx, exp_id: node_id) {\n \n fn traverse_def_id(cx: ctx, did: def_id) {\n     if did.crate != local_crate { ret; }\n-    alt cx.tcx.items.get(did.node) {\n+    let n = alt cx.tcx.items.find(did.node) {\n+        none { ret; } // This can happen for self, for example\n+        some(n) { n }\n+    };\n+    alt n {\n       ast_map::node_item(item, _) { traverse_public_item(cx, item); }\n       ast_map::node_method(_, impl_id, _) { traverse_def_id(cx, impl_id); }\n       ast_map::node_native_item(item, _, _) { cx.rmap.insert(item.id, ()); }\n@@ -111,6 +117,10 @@ fn traverse_public_item(cx: ctx, item: @item) {\n         cx.rmap.insert(ctor.node.id, ());\n         option::iter(m_dtor) {|dtor|\n             cx.rmap.insert(dtor.node.id, ());\n+            // dtors don't have attrs\n+            if tps.len() > 0u {\n+                traverse_inline_body(cx, dtor.node.body);\n+            }\n         }\n         for vec::each(items) {|item|\n             alt item.node {\n@@ -134,7 +144,13 @@ fn traverse_inline_body(cx: ctx, body: blk) {\n     fn traverse_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         alt e.node {\n           expr_path(_) {\n-            traverse_def_id(cx, def_id_of_def(cx.tcx.def_map.get(e.id)));\n+            alt cx.tcx.def_map.find(e.id) {\n+                some(d) {\n+                  traverse_def_id(cx, def_id_of_def(d));\n+                }\n+                none      { cx.tcx.sess.span_bug(e.span, #fmt(\"Unbound node \\\n+                  id %? while traversing %s\", e.id, expr_to_str(e))); }\n+            }\n           }\n           expr_field(_, _, _) {\n             alt cx.method_map.find(e.id) {"}]}