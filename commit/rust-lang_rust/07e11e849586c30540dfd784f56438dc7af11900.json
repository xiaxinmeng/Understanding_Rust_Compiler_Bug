{"sha": "07e11e849586c30540dfd784f56438dc7af11900", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZTExZTg0OTU4NmMzMDU0MGRmZDc4NGY1NjQzOGRjN2FmMTE5MDA=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-07T21:50:56Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-07-20T13:49:35Z"}, "message": "docs: GlobalAlloc: completely replace example with one that works\n\nSince this is an example, this could really do with some review from\nsomeone familiar with unsafe stuff !\n\nI made the example no longer `no_run` since it works for me.\n\nFixes #81847\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>\nCo-authored-by: Amanieu d'Antras <amanieu@gmail.com>", "tree": {"sha": "b753baff6447a4671deb3935ff066145fab197df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b753baff6447a4671deb3935ff066145fab197df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e11e849586c30540dfd784f56438dc7af11900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e11e849586c30540dfd784f56438dc7af11900", "html_url": "https://github.com/rust-lang/rust/commit/07e11e849586c30540dfd784f56438dc7af11900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e11e849586c30540dfd784f56438dc7af11900/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df945c4717ffaf923b57bf30c473df6fc98bc85", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df945c4717ffaf923b57bf30c473df6fc98bc85", "html_url": "https://github.com/rust-lang/rust/commit/8df945c4717ffaf923b57bf30c473df6fc98bc85"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "a8e76c2982d22f43b3024115afb916c78a58f94c", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/07e11e849586c30540dfd784f56438dc7af11900/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e11e849586c30540dfd784f56438dc7af11900/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=07e11e849586c30540dfd784f56438dc7af11900", "patch": "@@ -20,24 +20,69 @@ use crate::ptr;\n ///\n /// # Example\n ///\n-/// ```no_run\n-/// use std::alloc::{GlobalAlloc, Layout, alloc};\n+/// ```\n+/// use std::alloc::{GlobalAlloc, Layout};\n+/// use std::cell::UnsafeCell;\n /// use std::ptr::null_mut;\n+/// use std::sync::atomic::{\n+///     AtomicUsize,\n+///     Ordering::{Acquire, SeqCst},\n+/// };\n ///\n-/// struct MyAllocator;\n-///\n-/// unsafe impl GlobalAlloc for MyAllocator {\n-///     unsafe fn alloc(&self, _layout: Layout) -> *mut u8 { null_mut() }\n-///     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+/// const ARENA_SIZE: usize = 128 * 1024;\n+/// #[repr(C, align(131072))] // 131072 == ARENA_SIZE.\n+/// struct SimpleAllocator {\n+///     arena: UnsafeCell<[u8; ARENA_SIZE]>,\n+///     remaining: AtomicUsize, // we allocate from the top, counting down\n /// }\n ///\n /// #[global_allocator]\n-/// static A: MyAllocator = MyAllocator;\n+/// static ALLOCATOR: SimpleAllocator = SimpleAllocator {\n+///     arena: UnsafeCell::new([0x55; ARENA_SIZE]),\n+///     remaining: AtomicUsize::new(ARENA_SIZE),\n+/// };\n ///\n-/// fn main() {\n-///     unsafe {\n-///         assert!(alloc(Layout::new::<u32>()).is_null())\n+/// unsafe impl Sync for SimpleAllocator {}\n+///\n+/// unsafe impl GlobalAlloc for SimpleAllocator {\n+///     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+///         let size = layout.size();\n+///         let align = layout.align();\n+///\n+///         // `Layout` contract forbids making a `Layout` with align=0, or align not power of 2.\n+///         // So we can safely use a mask to ensure alignment without worrying about UB.\n+///         let align_mask_to_round_down = !(align - 1);\n+///\n+///         if align > ARENA_SIZE {\n+///             // align may be > size !\n+///             return null_mut();\n+///         }\n+///\n+///         let mut allocated = 0;\n+///         if self\n+///             .remaining\n+///             .fetch_update(SeqCst, SeqCst, |mut remaining| {\n+///                 if size > remaining {\n+///                     return None;\n+///                 }\n+///                 remaining -= size;\n+///                 remaining &= align_mask_to_round_down;\n+///                 allocated = remaining;\n+///                 Some(remaining)\n+///             })\n+///             .is_err()\n+///         {\n+///             return null_mut();\n+///         };\n+///         (self.arena.get() as *mut u8).add(allocated)\n ///     }\n+///     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+/// }\n+///\n+/// fn main() {\n+///     let _s = format!(\"allocating a string!\");\n+///     let currently = ALLOCATOR.remaining.load(Acquire);\n+///     println!(\"allocated so far: {}\", ARENA_SIZE - currently);\n /// }\n /// ```\n ///"}]}