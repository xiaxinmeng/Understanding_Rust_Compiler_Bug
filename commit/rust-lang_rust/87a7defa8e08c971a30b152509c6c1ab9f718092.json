{"sha": "87a7defa8e08c971a30b152509c6c1ab9f718092", "node_id": "C_kwDOAAsO6NoAKDg3YTdkZWZhOGUwOGM5NzFhMzBiMTUyNTA5YzZjMWFiOWY3MTgwOTI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-11-23T04:16:28Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-11-25T23:05:07Z"}, "message": "Reject generic arguments on mod style interpolated path", "tree": {"sha": "c3cfee726de210a8dd3003d8cbce105a1aa603bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3cfee726de210a8dd3003d8cbce105a1aa603bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87a7defa8e08c971a30b152509c6c1ab9f718092", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmGgFqMACgkQ+boUO5X/\nbYKv4hAAyfzdX8zjhcnfvgA79AnkGYabrdI88Y1zaWByiyrAh3m3Q2fxBO6gN4d9\nsroEmSi6dQS+4HKFYTeRwLGrElJNYTCYABZ4lHZJ/FhUlrBehe7XsKds56epKW3n\n5+HlCaEfPTNWkIiOXyN8Du0RzNrkELR5dYAoBmMafbSXKDa33wDgyb3Kq/K9Ceh3\n7c380IkLqUeBSPELJnCublR5H8bZik8/+7+SHn59XQuxjnwLdkRK1f6kgmHywlZV\n8TT04bJV7RmbVro9GUBBq3YkcLyBHkvFpO/khmwIW2XpOBRsZbXl9nzlf3kVRKCo\nh2j99lhwMZsuzjw6m9uPUs5HcMctlg+CT2QrKpKsATm5MXaQGsCithE8/63y0kvj\nmlX41GZP4jyX3VbB6bUfXibw3GrhuUsJYRX/eeb51zTe77fqvpKol8efYObA3+XA\n+8aNaSgelUeuYvbTkLWC4Ds4moHbkugughp9CRRXThjWoLAqC+f5y1W/k3nH+5d4\nbNg5yh7/ONXFtwD4iqs8SSXLaB8WhP68dDJ8ih2lI0Q7E1snA10Uuq03+6rImR03\niKtVQMzBdu4H9njRrp5KLB0HYoSoV+t7WDPwE/ZNSlefV63yxLlXZLSMl6FgT+SK\n6xW1IhjwGfu0pdcUxbtIkRuXbw2/ndrehdSkC0xL1Eb2sflb1ok=\n=O1f9\n-----END PGP SIGNATURE-----", "payload": "tree c3cfee726de210a8dd3003d8cbce105a1aa603bb\nparent 0cbb00f89875c085181f1d55bbe46d39ec36be3f\nauthor David Tolnay <dtolnay@gmail.com> 1637640988 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1637881507 -0800\n\nReject generic arguments on mod style interpolated path\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87a7defa8e08c971a30b152509c6c1ab9f718092", "html_url": "https://github.com/rust-lang/rust/commit/87a7defa8e08c971a30b152509c6c1ab9f718092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87a7defa8e08c971a30b152509c6c1ab9f718092/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cbb00f89875c085181f1d55bbe46d39ec36be3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cbb00f89875c085181f1d55bbe46d39ec36be3f", "html_url": "https://github.com/rust-lang/rust/commit/0cbb00f89875c085181f1d55bbe46d39ec36be3f"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "e140b23f5d66f210a2be60b0e3e6aa03f4f01aa9", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/87a7defa8e08c971a30b152509c6c1ab9f718092/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a7defa8e08c971a30b152509c6c1ab9f718092/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=87a7defa8e08c971a30b152509c6c1ab9f718092", "patch": "@@ -139,19 +139,32 @@ impl<'a> Parser<'a> {\n         style: PathStyle,\n         ty_generics: Option<&Generics>,\n     ) -> PResult<'a, Path> {\n-        maybe_whole!(self, NtPath, |path| {\n+        let reject_generics_if_mod_style = |parser: &Parser<'_>, path: &Path| {\n+            // Ensure generic arguments don't end up in attribute paths, such as:\n+            //\n+            //     macro_rules! m {\n+            //         ($p:path) => { #[$p] struct S; }\n+            //     }\n+            //\n+            //     m!(inline<u8>); //~ ERROR: unexpected generic arguments in path\n+            //\n             if style == PathStyle::Mod && path.segments.iter().any(|segment| segment.args.is_some())\n             {\n-                self.struct_span_err(\n-                    path.segments\n-                        .iter()\n-                        .filter_map(|segment| segment.args.as_ref())\n-                        .map(|arg| arg.span())\n-                        .collect::<Vec<_>>(),\n-                    \"unexpected generic arguments in path\",\n-                )\n-                .emit();\n+                parser\n+                    .struct_span_err(\n+                        path.segments\n+                            .iter()\n+                            .filter_map(|segment| segment.args.as_ref())\n+                            .map(|arg| arg.span())\n+                            .collect::<Vec<_>>(),\n+                        \"unexpected generic arguments in path\",\n+                    )\n+                    .emit();\n             }\n+        };\n+\n+        maybe_whole!(self, NtPath, |path| {\n+            reject_generics_if_mod_style(self, &path);\n             path\n         });\n \n@@ -160,6 +173,7 @@ impl<'a> Parser<'a> {\n                 if let ast::TyKind::Path(None, path) = &ty.kind {\n                     let path = path.clone();\n                     self.bump();\n+                    reject_generics_if_mod_style(self, &path);\n                     return Ok(path);\n                 }\n             }"}]}