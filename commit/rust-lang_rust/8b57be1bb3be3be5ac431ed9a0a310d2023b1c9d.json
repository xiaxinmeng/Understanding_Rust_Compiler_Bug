{"sha": "8b57be1bb3be3be5ac431ed9a0a310d2023b1c9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTdiZTFiYjNiZTNiZTVhYzQzMWVkOWEwYTMxMGQyMDIzYjFjOWQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-07T22:15:57Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-04-21T08:48:11Z"}, "message": "Add test for drop order in async functions.\n\nThis tests that async functions drop parameters in the same order as\nregular functions.", "tree": {"sha": "866678cd3069e0a383e2896804e330910cac5d0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/866678cd3069e0a383e2896804e330910cac5d0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b57be1bb3be3be5ac431ed9a0a310d2023b1c9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAly8LksACgkQAXYLT59T\n8VRcTw//SfDSAtMmwin0R+0yn2fdsnoRAO6GsihJ7/pKBSjGzjY6i5FS1dZMy+Yg\nXFKsJhidNDtr9Ep/oLrdSl7KLLaqlVIImhdOVB2Mh3ib1GNOPI9fJCiksABqrW1G\nPVadF9+yw20SKX1YetRcgE+Z10/ODuzYcpC2PONIFwfcTc7NR935EyK3+rfINUfW\ndWLK+97suisV4Gw4Gc5b6qBYGdZCk7s4/v3DmFl9vjOYp5wSFyxZ78xndnp+cbu2\n83wWOwNbO76CDhmzqbzotdtKtMelU+8GpDW2Zb/viWKY12NDPgygZLCAN+lyrNWG\nfErB2I5pzxUz1st2QVvKVA4wgW2p2aTTlETZ6LqiuHGcQEYu0F7wvDXrxuwU6aPg\nfJBOIwzXiKgaS3EkE0pJzsZtA3finudCt59GDFSCuRD/3V5pMSVVWP9WM3CE4vit\nU+Zi9yIPrdtug/ICc6q+2qiy7lanx/7YHGLS82EusFFjbwLK4Twxu1lYXzEojc5E\n6Z7xbZpsMOIVboE+fjx6I3mJawpGlzWYgsCPYx15CsbmBrNHX0R3utYOpjkRvUq+\nV/ajNYVt0lgVRWloLw2zx3vfdwKRYAj4SCk/FvAypdRLygi8bq8vtg+ZLnQqQXpx\n09uS3izMstFopnbgVWVBbEBwDx6ChncUWJYfXFUdG+9rvHir2Dw=\n=3kZW\n-----END PGP SIGNATURE-----", "payload": "tree 866678cd3069e0a383e2896804e330910cac5d0c\nparent 9224be5fa39f6170f6e046342976efee5453a1ff\nauthor David Wood <david@davidtw.co> 1551996957 +0100\ncommitter David Wood <david@davidtw.co> 1555836491 +0100\n\nAdd test for drop order in async functions.\n\nThis tests that async functions drop parameters in the same order as\nregular functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b57be1bb3be3be5ac431ed9a0a310d2023b1c9d", "html_url": "https://github.com/rust-lang/rust/commit/8b57be1bb3be3be5ac431ed9a0a310d2023b1c9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b57be1bb3be3be5ac431ed9a0a310d2023b1c9d/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9224be5fa39f6170f6e046342976efee5453a1ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9224be5fa39f6170f6e046342976efee5453a1ff", "html_url": "https://github.com/rust-lang/rust/commit/9224be5fa39f6170f6e046342976efee5453a1ff"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "7f64c6e120eb456dcc0e484dfcfec38251b8b245", "filename": "src/test/run-pass/issue-54716.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/8b57be1bb3be3be5ac431ed9a0a310d2023b1c9d/src%2Ftest%2Frun-pass%2Fissue-54716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b57be1bb3be3be5ac431ed9a0a310d2023b1c9d/src%2Ftest%2Frun-pass%2Fissue-54716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-54716.rs?ref=8b57be1bb3be3be5ac431ed9a0a310d2023b1c9d", "patch": "@@ -0,0 +1,89 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![feature(async_await, await_macro, futures_api)]\n+\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::sync::Arc;\n+use std::task::Context;\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+struct D(&'static str, Arc<RefCell<Vec<DropOrder>>>);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+async fn foo(x: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+async fn bar(x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+async fn baz((x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+async fn foobar(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn main() {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    use DropOrder::*;\n+\n+    // Currently, the `bar` and `foobar` tests do not output the same order as the equivalent\n+    // non-async functions. This is because the drop order of captured variables doesn't match the\n+    // drop order of arguments in a function.\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(foo(D(\"x\", af.clone()), D(\"_y\", af.clone())));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[Function, Val(\"_y\"), Val(\"x\")]);\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(bar(D(\"x\", af.clone()), D(\"_\", af.clone())));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[Function, Val(\"x\"), Val(\"_\")]);\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(baz((D(\"x\", af.clone()), D(\"_\", af.clone()))));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[Function, Val(\"x\"), Val(\"_\")]);\n+\n+    let af = Arc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(foobar(\n+        D(\"x\", af.clone()),\n+        (D(\"a\", af.clone()), D(\"_\", af.clone()), D(\"_c\", af.clone())),\n+        D(\"_\", af.clone()),\n+        D(\"_y\", af.clone()),\n+    ));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    assert_eq!(*af.borrow(), &[\n+       Function, Val(\"_y\"), Val(\"_c\"), Val(\"a\"), Val(\"x\"), Val(\"_\"), Val(\"_\"),\n+    ]);\n+}"}]}