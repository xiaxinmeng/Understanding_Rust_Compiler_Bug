{"sha": "248a5301af39f823c92927f81c847f6b2ca32fcd", "node_id": "C_kwDOAAsO6NoAKDI0OGE1MzAxYWYzOWY4MjNjOTI5MjdmODFjODQ3ZjZiMmNhMzJmY2Q", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-05T18:06:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-05T18:15:57Z"}, "message": "Move SROA tests.", "tree": {"sha": "a049587f9c1d467d6eceb7b367ee5d732743d2c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a049587f9c1d467d6eceb7b367ee5d732743d2c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/248a5301af39f823c92927f81c847f6b2ca32fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/248a5301af39f823c92927f81c847f6b2ca32fcd", "html_url": "https://github.com/rust-lang/rust/commit/248a5301af39f823c92927f81c847f6b2ca32fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/248a5301af39f823c92927f81c847f6b2ca32fcd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fbfc3e76916521b509b63286296dd0762170d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbfc3e76916521b509b63286296dd0762170d34", "html_url": "https://github.com/rust-lang/rust/commit/0fbfc3e76916521b509b63286296dd0762170d34"}], "stats": {"total": 938, "additions": 469, "deletions": 469}, "files": [{"sha": "9e33215f2b5a67ce19cd202b22747543966dafe8", "filename": "tests/mir-opt/sroa.constant.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.constant.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.constant.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.constant.ScalarReplacementOfAggregates.diff?ref=0fbfc3e76916521b509b63286296dd0762170d34", "patch": "@@ -1,46 +0,0 @@\n-- // MIR for `constant` before ScalarReplacementOfAggregates\n-+ // MIR for `constant` after ScalarReplacementOfAggregates\n-  \n-  fn constant() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:15: +0:15\n-      let _1: (usize, u8);                 // in scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+     let _4: usize;                       // in scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+     let _5: u8;                          // in scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-      scope 1 {\n--         debug y => _1;                   // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n-+         debug y => (usize, u8){ .0 => _4, .1 => _5, }; // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n-          let _2: usize;                   // in scope 1 at $DIR/sroa.rs:+3:9: +3:10\n-          scope 2 {\n-              debug t => _2;               // in scope 2 at $DIR/sroa.rs:+3:9: +3:10\n-              let _3: u8;                  // in scope 2 at $DIR/sroa.rs:+4:9: +4:10\n-              scope 3 {\n-                  debug u => _3;           // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+         StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+2:9: +2:10\n-          _1 = const _;                    // scope 0 at $DIR/sroa.rs:+2:13: +2:14\n-+         _4 = move (_1.0: usize);         // scope 1 at $DIR/sroa.rs:+3:9: +3:10\n-+         _5 = move (_1.1: u8);            // scope 1 at $DIR/sroa.rs:+3:9: +3:10\n-          StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+3:9: +3:10\n--         _2 = (_1.0: usize);              // scope 1 at $DIR/sroa.rs:+3:13: +3:16\n-+         _2 = _4;                         // scope 1 at $DIR/sroa.rs:+3:13: +3:16\n-          StorageLive(_3);                 // scope 2 at $DIR/sroa.rs:+4:9: +4:10\n--         _3 = (_1.1: u8);                 // scope 2 at $DIR/sroa.rs:+4:13: +4:16\n-+         _3 = _5;                         // scope 2 at $DIR/sroa.rs:+4:13: +4:16\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:15: +5:2\n-          StorageDead(_3);                 // scope 2 at $DIR/sroa.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/sroa.rs:+5:1: +5:2\n--         StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+5:1: +5:2\n-+         StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+5:1: +5:2\n-+         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+5:1: +5:2\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "976f6d44b7521610e382b76586dfb740cb5ca0fa", "filename": "tests/mir-opt/sroa.copies.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff?ref=0fbfc3e76916521b509b63286296dd0762170d34", "patch": "@@ -1,91 +0,0 @@\n-- // MIR for `copies` before ScalarReplacementOfAggregates\n-+ // MIR for `copies` after ScalarReplacementOfAggregates\n-  \n-  fn copies(_1: Foo) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/sroa.rs:+0:11: +0:12\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n-      let _2: Foo;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _11: u8;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _12: ();                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _13: &str;                       // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _14: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-      scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-+         debug y => Foo{ .0 => _11, .1 => _12, .2 => _13, .3 => _14, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-          let _3: u8;                      // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n-          scope 2 {\n-              debug t => _3;               // in scope 2 at $DIR/sroa.rs:+2:9: +2:10\n-              let _4: &str;                // in scope 2 at $DIR/sroa.rs:+3:9: +3:10\n-              scope 3 {\n-                  debug u => _4;           // in scope 3 at $DIR/sroa.rs:+3:9: +3:10\n-                  let _5: Foo;             // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+                 let _7: u8;              // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+                 let _8: ();              // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+                 let _9: &str;            // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+                 let _10: std::option::Option<isize>; // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-                  scope 4 {\n--                     debug z => _5;       // in scope 4 at $DIR/sroa.rs:+4:9: +4:10\n-+                     debug z => Foo{ .0 => _7, .1 => _8, .2 => _9, .3 => _10, }; // in scope 4 at $DIR/sroa.rs:+4:9: +4:10\n-                      let _6: ();          // in scope 4 at $DIR/sroa.rs:+5:9: +5:10\n-                      scope 5 {\n-                          debug a => _6;   // in scope 5 at $DIR/sroa.rs:+5:9: +5:10\n-                      }\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n--         _2 = _1;                         // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_12);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_13);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_14);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         _11 = (_1.0: u8);                // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         _12 = (_1.1: ());                // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         _13 = (_1.2: &str);              // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         _14 = (_1.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+2:9: +2:10\n--         _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n-+         _3 = _11;                        // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n-          StorageLive(_4);                 // scope 2 at $DIR/sroa.rs:+3:9: +3:10\n--         _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n--         StorageLive(_5);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n--         _5 = _2;                         // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _4 = _13;                        // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n-+         StorageLive(_7);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         StorageLive(_8);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         StorageLive(_9);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         StorageLive(_10);                // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         nop;                             // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         _7 = _11;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _8 = _12;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _9 = _13;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _10 = _14;                       // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         nop;                             // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-          StorageLive(_6);                 // scope 4 at $DIR/sroa.rs:+5:9: +5:10\n--         _6 = (_5.1: ());                 // scope 4 at $DIR/sroa.rs:+5:13: +5:16\n-+         _6 = _8;                         // scope 4 at $DIR/sroa.rs:+5:13: +5:16\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +6:2\n-          StorageDead(_6);                 // scope 4 at $DIR/sroa.rs:+6:1: +6:2\n--         StorageDead(_5);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_7);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_8);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_9);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_10);                // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-+         nop;                             // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+6:1: +6:2\n--         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_12);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_13);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         StorageDead(_14);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "17a89e7d8eb204c2fc4280ee829e0ada254671af", "filename": "tests/mir-opt/sroa.dropping.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff?ref=0fbfc3e76916521b509b63286296dd0762170d34", "patch": "@@ -1,44 +0,0 @@\n-- // MIR for `dropping` before ScalarReplacementOfAggregates\n-+ // MIR for `dropping` after ScalarReplacementOfAggregates\n-  \n-  fn dropping() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n-      let _1: Tag;                         // in scope 0 at $DIR/sroa.rs:+1:5: +1:32\n-      let mut _2: S;                       // in scope 0 at $DIR/sroa.rs:+1:5: +1:30\n-      let mut _3: Tag;                     // in scope 0 at $DIR/sroa.rs:+1:7: +1:13\n-      let mut _4: Tag;                     // in scope 0 at $DIR/sroa.rs:+1:15: +1:21\n-      let mut _5: Tag;                     // in scope 0 at $DIR/sroa.rs:+1:23: +1:29\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:32\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n-          _3 = Tag(const 0_usize);         // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n-          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n-          _4 = Tag(const 1_usize);         // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n-          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n-          _5 = Tag(const 2_usize);         // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n-          _2 = S(move _3, move _4, move _5); // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n-          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n-          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n-          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n-          _1 = move (_2.1: Tag);           // scope 0 at $DIR/sroa.rs:+1:5: +1:32\n-          drop(_1) -> bb1;                 // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-      }\n-  \n-      bb1: {\n-          drop((_2.0: Tag)) -> bb3;        // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-      }\n-  \n-      bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +2:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+2:2: +2:2\n-      }\n-  \n-      bb3: {\n-          drop((_2.2: Tag)) -> bb2;        // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n-      }\n-  }\n-  "}, {"sha": "04d26162aadef88a0a3f63c0257c461879e6bd47", "filename": "tests/mir-opt/sroa.enums.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff?ref=0fbfc3e76916521b509b63286296dd0762170d34", "patch": "@@ -1,43 +0,0 @@\n-- // MIR for `enums` before ScalarReplacementOfAggregates\n-+ // MIR for `enums` after ScalarReplacementOfAggregates\n-  \n-  fn enums(_1: usize) -> usize {\n-      debug a => _1;                       // in scope 0 at $DIR/sroa.rs:+0:14: +0:15\n-      let mut _0: usize;                   // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:32\n-      let mut _2: std::option::Option<usize>; // in scope 0 at $DIR/sroa.rs:+1:22: +1:29\n-      let mut _3: usize;                   // in scope 0 at $DIR/sroa.rs:+1:27: +1:28\n-      let mut _4: isize;                   // in scope 0 at $DIR/sroa.rs:+1:12: +1:19\n-      scope 1 {\n-          debug a => _5;                   // in scope 1 at $DIR/sroa.rs:+1:17: +1:18\n-          let _5: usize;                   // in scope 1 at $DIR/sroa.rs:+1:17: +1:18\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n-          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n-          _3 = _1;                         // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n-          _2 = Option::<usize>::Some(move _3); // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n-          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+1:28: +1:29\n-          _4 = discriminant(_2);           // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n-          switchInt(move _4) -> [1: bb1, otherwise: bb2]; // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n-      }\n-  \n-      bb1: {\n-          StorageLive(_5);                 // scope 1 at $DIR/sroa.rs:+1:17: +1:18\n-          _5 = ((_2 as Some).0: usize);    // scope 1 at $DIR/sroa.rs:+1:17: +1:18\n-          _0 = _5;                         // scope 1 at $DIR/sroa.rs:+1:32: +1:33\n-          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:34: +1:35\n-          goto -> bb3;                     // scope 0 at $DIR/sroa.rs:+1:5: +1:46\n-      }\n-  \n-      bb2: {\n-          _0 = const 0_usize;              // scope 0 at $DIR/sroa.rs:+1:43: +1:44\n-          goto -> bb3;                     // scope 0 at $DIR/sroa.rs:+1:5: +1:46\n-      }\n-  \n-      bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "fd691fdd153327d7a12bf5ad4f65d7d673b06d32", "filename": "tests/mir-opt/sroa.escaping.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff?ref=0fbfc3e76916521b509b63286296dd0762170d34", "patch": "@@ -1,44 +0,0 @@\n-- // MIR for `escaping` before ScalarReplacementOfAggregates\n-+ // MIR for `escaping` after ScalarReplacementOfAggregates\n-  \n-  fn escaping() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n-      let _1: ();                          // in scope 0 at $DIR/sroa.rs:+1:5: +1:42\n-      let mut _2: *const u32;              // in scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-      let _3: &u32;                        // in scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-      let _4: Escaping;                    // in scope 0 at $DIR/sroa.rs:+1:8: +1:39\n-      let mut _5: u32;                     // in scope 0 at $DIR/sroa.rs:+1:34: +1:37\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:42\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:8: +1:39\n-          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:34: +1:37\n-          _5 = g() -> bb1;                 // scope 0 at $DIR/sroa.rs:+1:34: +1:37\n-                                           // mir::Constant\n-                                           // + span: $DIR/sroa.rs:78:34: 78:35\n-                                           // + literal: Const { ty: fn() -> u32 {g}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          _4 = Escaping { a: const 1_u32, b: const 2_u32, c: move _5 }; // scope 0 at $DIR/sroa.rs:+1:8: +1:39\n-          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:38: +1:39\n-          _3 = &(_4.0: u32);               // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n-          _1 = f(move _2) -> bb2;          // scope 0 at $DIR/sroa.rs:+1:5: +1:42\n-                                           // mir::Constant\n-                                           // + span: $DIR/sroa.rs:78:5: 78:6\n-                                           // + literal: Const { ty: fn(*const u32) {f}, val: Value(<ZST>) }\n-      }\n-  \n-      bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+1:41: +1:42\n-          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+1:42: +1:43\n-          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+1:42: +1:43\n-          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+1:42: +1:43\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +2:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "69631fc0213f8f5d31ab407509bdc3beb14adf2d", "filename": "tests/mir-opt/sroa.flat.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff?ref=0fbfc3e76916521b509b63286296dd0762170d34", "patch": "@@ -1,80 +0,0 @@\n-- // MIR for `flat` before ScalarReplacementOfAggregates\n-+ // MIR for `flat` after ScalarReplacementOfAggregates\n-  \n-  fn flat() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:15: +0:15\n-      let _1: u8;                          // in scope 0 at $DIR/sroa.rs:+1:15: +1:16\n-      let _2: ();                          // in scope 0 at $DIR/sroa.rs:+1:18: +1:19\n-      let _3: &str;                        // in scope 0 at $DIR/sroa.rs:+1:21: +1:22\n-      let _4: std::option::Option<isize>;  // in scope 0 at $DIR/sroa.rs:+1:24: +1:25\n-      let mut _5: Foo;                     // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-      let mut _6: ();                      // in scope 0 at $DIR/sroa.rs:+1:45: +1:47\n-      let mut _7: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-+     let mut _8: u8;                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+     let mut _9: ();                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+     let mut _10: &str;                   // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+     let mut _11: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/sroa.rs:+1:15: +1:16\n-          debug b => _2;                   // in scope 1 at $DIR/sroa.rs:+1:18: +1:19\n-          debug c => _3;                   // in scope 1 at $DIR/sroa.rs:+1:21: +1:22\n-          debug d => _4;                   // in scope 1 at $DIR/sroa.rs:+1:24: +1:25\n-          scope 2 {\n-              scope 3 {\n-                  scope 4 {\n-                      scope 5 {\n-                      }\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n--         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_9);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_10);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-          StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n-          _6 = ();                         // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n-          StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          _7 = Option::<isize>::Some(const -4_isize); // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n--         _5 = Foo { a: const 5_u8, b: move _6, c: const \"a\", d: move _7 }; // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _8 = const 5_u8;                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _9 = move _6;                    // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _10 = const \"a\";                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-                                           // mir::Constant\n-                                           // + span: $DIR/sroa.rs:53:52: 53:55\n-                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-+         _11 = move _7;                   // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-          StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n-          StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n-          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n--         _1 = (_5.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n-+         _1 = _8;                         // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n--         _2 = (_5.1: ());                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n-+         _2 = _9;                         // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n-          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n--         _3 = (_5.2: &str);               // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n-+         _3 = _10;                        // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n-          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n--         _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n--         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         _4 = _11;                        // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n-+         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         StorageDead(_9);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         StorageDead(_10);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:15: +6:2\n-          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "f0d62220dd664aaf3a8ddd89bd991185ecd98497", "filename": "tests/mir-opt/sroa.ref_copies.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff?ref=0fbfc3e76916521b509b63286296dd0762170d34", "patch": "@@ -1,56 +0,0 @@\n-- // MIR for `ref_copies` before ScalarReplacementOfAggregates\n-+ // MIR for `ref_copies` after ScalarReplacementOfAggregates\n-  \n-  fn ref_copies(_1: &Foo) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/sroa.rs:+0:15: +0:16\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:24: +0:24\n-      let _2: Foo;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _5: u8;                          // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _6: ();                          // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _7: &str;                        // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _8: std::option::Option<isize>;  // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-      scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-+         debug y => Foo{ .0 => _5, .1 => _6, .2 => _7, .3 => _8, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-          let _3: u8;                      // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n-          scope 2 {\n-              debug t => _3;               // in scope 2 at $DIR/sroa.rs:+2:9: +2:10\n-              let _4: &str;                // in scope 2 at $DIR/sroa.rs:+3:9: +3:10\n-              scope 3 {\n-                  debug u => _4;           // in scope 3 at $DIR/sroa.rs:+3:9: +3:10\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n--         _2 = (*_1);                      // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         _5 = ((*_1).0: u8);              // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         _6 = ((*_1).1: ());              // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         _7 = ((*_1).2: &str);            // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         _8 = ((*_1).3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+2:9: +2:10\n--         _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n-+         _3 = _5;                         // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n-          StorageLive(_4);                 // scope 2 at $DIR/sroa.rs:+3:9: +3:10\n--         _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n-+         _4 = _7;                         // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:24: +4:2\n-          StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+4:1: +4:2\n--         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "2c63d8b266dde9fffcfe0c1fb57c5fe98fcdb867", "filename": "tests/mir-opt/sroa.structs.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff?ref=0fbfc3e76916521b509b63286296dd0762170d34", "patch": "@@ -1,33 +0,0 @@\n-- // MIR for `structs` before ScalarReplacementOfAggregates\n-+ // MIR for `structs` after ScalarReplacementOfAggregates\n-  \n-  fn structs(_1: f32) -> f32 {\n-      debug a => _1;                       // in scope 0 at $DIR/sroa.rs:+0:16: +0:17\n-      let mut _0: f32;                     // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:30\n-      let mut _2: structs::U;              // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-      let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+6:18: +6:19\n-+     let mut _4: usize;                   // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+     let mut _5: f32;                     // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n-          _3 = _1;                         // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n--         _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         _4 = const 0_usize;              // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         _5 = move _3;                    // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:20: +6:21\n--         _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n--         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-+         _0 = _5;                         // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n-+         StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-+         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+7:2: +7:2\n-      }\n-  }\n-  "}, {"sha": "adfb01385d448abaaf08bce5ed8279067a237a0c", "filename": "tests/mir-opt/sroa.unions.ScalarReplacementOfAggregates.diff", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0fbfc3e76916521b509b63286296dd0762170d34/tests%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff?ref=0fbfc3e76916521b509b63286296dd0762170d34", "patch": "@@ -1,23 +0,0 @@\n-- // MIR for `unions` before ScalarReplacementOfAggregates\n-+ // MIR for `unions` after ScalarReplacementOfAggregates\n-  \n-  fn unions(_1: f32) -> u32 {\n-      debug a => _1;                       // in scope 0 at $DIR/sroa.rs:+0:15: +0:16\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/sroa.rs:+0:26: +0:29\n-      let mut _2: unions::Repr;            // in scope 0 at $DIR/sroa.rs:+5:14: +5:27\n-      let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+5:24: +5:25\n-      scope 1 {\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n-          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+5:24: +5:25\n-          _3 = _1;                         // scope 1 at $DIR/sroa.rs:+5:24: +5:25\n-          _2 = Repr { f: move _3 };        // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n-          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+5:26: +5:27\n-          _0 = (_2.1: u32);                // scope 1 at $DIR/sroa.rs:+5:14: +5:29\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "647681f0e7a76faa7a3a74c8173c06a6265eb8f7", "filename": "tests/mir-opt/sroa/structs.constant.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.constant.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.constant.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.constant.ScalarReplacementOfAggregates.diff?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -0,0 +1,46 @@\n+- // MIR for `constant` before ScalarReplacementOfAggregates\n++ // MIR for `constant` after ScalarReplacementOfAggregates\n+  \n+  fn constant() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:15: +0:15\n+      let _1: (usize, u8);                 // in scope 0 at $DIR/structs.rs:+2:9: +2:10\n++     let _4: usize;                       // in scope 0 at $DIR/structs.rs:+2:9: +2:10\n++     let _5: u8;                          // in scope 0 at $DIR/structs.rs:+2:9: +2:10\n+      scope 1 {\n+-         debug y => _1;                   // in scope 1 at $DIR/structs.rs:+2:9: +2:10\n++         debug y => (usize, u8){ .0 => _4, .1 => _5, }; // in scope 1 at $DIR/structs.rs:+2:9: +2:10\n+          let _2: usize;                   // in scope 1 at $DIR/structs.rs:+3:9: +3:10\n+          scope 2 {\n+              debug t => _2;               // in scope 2 at $DIR/structs.rs:+3:9: +3:10\n+              let _3: u8;                  // in scope 2 at $DIR/structs.rs:+4:9: +4:10\n+              scope 3 {\n+                  debug u => _3;           // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/structs.rs:+2:9: +2:10\n++         StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+2:9: +2:10\n++         StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+2:9: +2:10\n++         nop;                             // scope 0 at $DIR/structs.rs:+2:9: +2:10\n+          _1 = const _;                    // scope 0 at $DIR/structs.rs:+2:13: +2:14\n++         _4 = move (_1.0: usize);         // scope 1 at $DIR/structs.rs:+3:9: +3:10\n++         _5 = move (_1.1: u8);            // scope 1 at $DIR/structs.rs:+3:9: +3:10\n+          StorageLive(_2);                 // scope 1 at $DIR/structs.rs:+3:9: +3:10\n+-         _2 = (_1.0: usize);              // scope 1 at $DIR/structs.rs:+3:13: +3:16\n++         _2 = _4;                         // scope 1 at $DIR/structs.rs:+3:13: +3:16\n+          StorageLive(_3);                 // scope 2 at $DIR/structs.rs:+4:9: +4:10\n+-         _3 = (_1.1: u8);                 // scope 2 at $DIR/structs.rs:+4:13: +4:16\n++         _3 = _5;                         // scope 2 at $DIR/structs.rs:+4:13: +4:16\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:15: +5:2\n+          StorageDead(_3);                 // scope 2 at $DIR/structs.rs:+5:1: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/structs.rs:+5:1: +5:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/structs.rs:+5:1: +5:2\n++         StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+5:1: +5:2\n++         StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+5:1: +5:2\n++         nop;                             // scope 0 at $DIR/structs.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/structs.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "b0b0da8861f8de675a0ab9dc1ab63598ec46e2c9", "filename": "tests/mir-opt/sroa/structs.copies.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.copies.ScalarReplacementOfAggregates.diff?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -0,0 +1,91 @@\n+- // MIR for `copies` before ScalarReplacementOfAggregates\n++ // MIR for `copies` after ScalarReplacementOfAggregates\n+  \n+  fn copies(_1: Foo) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/structs.rs:+0:11: +0:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:19: +0:19\n+      let _2: Foo;                         // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _11: u8;                         // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _12: ();                         // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _13: &str;                       // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _14: std::option::Option<isize>; // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/structs.rs:+1:9: +1:10\n++         debug y => Foo{ .0 => _11, .1 => _12, .2 => _13, .3 => _14, }; // in scope 1 at $DIR/structs.rs:+1:9: +1:10\n+          let _3: u8;                      // in scope 1 at $DIR/structs.rs:+2:9: +2:10\n+          scope 2 {\n+              debug t => _3;               // in scope 2 at $DIR/structs.rs:+2:9: +2:10\n+              let _4: &str;                // in scope 2 at $DIR/structs.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug u => _4;           // in scope 3 at $DIR/structs.rs:+3:9: +3:10\n+                  let _5: Foo;             // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n++                 let _7: u8;              // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n++                 let _8: ();              // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n++                 let _9: &str;            // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n++                 let _10: std::option::Option<isize>; // in scope 3 at $DIR/structs.rs:+4:9: +4:10\n+                  scope 4 {\n+-                     debug z => _5;       // in scope 4 at $DIR/structs.rs:+4:9: +4:10\n++                     debug z => Foo{ .0 => _7, .1 => _8, .2 => _9, .3 => _10, }; // in scope 4 at $DIR/structs.rs:+4:9: +4:10\n+                      let _6: ();          // in scope 4 at $DIR/structs.rs:+5:9: +5:10\n+                      scope 5 {\n+                          debug a => _6;   // in scope 5 at $DIR/structs.rs:+5:9: +5:10\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         StorageLive(_11);                // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_12);                // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_13);                // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_14);                // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         _11 = (_1.0: u8);                // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         _12 = (_1.1: ());                // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         _13 = (_1.2: &str);              // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         _14 = (_1.3: std::option::Option<isize>); // scope 0 at $DIR/structs.rs:+1:13: +1:14\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:13: +1:14\n+          StorageLive(_3);                 // scope 1 at $DIR/structs.rs:+2:9: +2:10\n+-         _3 = (_2.0: u8);                 // scope 1 at $DIR/structs.rs:+2:13: +2:16\n++         _3 = _11;                        // scope 1 at $DIR/structs.rs:+2:13: +2:16\n+          StorageLive(_4);                 // scope 2 at $DIR/structs.rs:+3:9: +3:10\n+-         _4 = (_2.2: &str);               // scope 2 at $DIR/structs.rs:+3:13: +3:16\n+-         StorageLive(_5);                 // scope 3 at $DIR/structs.rs:+4:9: +4:10\n+-         _5 = _2;                         // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         _4 = _13;                        // scope 2 at $DIR/structs.rs:+3:13: +3:16\n++         StorageLive(_7);                 // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         StorageLive(_8);                 // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         StorageLive(_9);                 // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         StorageLive(_10);                // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         nop;                             // scope 3 at $DIR/structs.rs:+4:9: +4:10\n++         _7 = _11;                        // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         _8 = _12;                        // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         _9 = _13;                        // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         _10 = _14;                       // scope 3 at $DIR/structs.rs:+4:13: +4:14\n++         nop;                             // scope 3 at $DIR/structs.rs:+4:13: +4:14\n+          StorageLive(_6);                 // scope 4 at $DIR/structs.rs:+5:9: +5:10\n+-         _6 = (_5.1: ());                 // scope 4 at $DIR/structs.rs:+5:13: +5:16\n++         _6 = _8;                         // scope 4 at $DIR/structs.rs:+5:13: +5:16\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:19: +6:2\n+          StorageDead(_6);                 // scope 4 at $DIR/structs.rs:+6:1: +6:2\n+-         StorageDead(_5);                 // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_7);                 // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_8);                 // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_9);                 // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_10);                // scope 3 at $DIR/structs.rs:+6:1: +6:2\n++         nop;                             // scope 3 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_3);                 // scope 1 at $DIR/structs.rs:+6:1: +6:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_11);                // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_12);                // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_13);                // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         StorageDead(_14);                // scope 0 at $DIR/structs.rs:+6:1: +6:2\n++         nop;                             // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/structs.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "b6439c00a005153911b217a9edecea1baf2e1712", "filename": "tests/mir-opt/sroa/structs.dropping.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `dropping` before ScalarReplacementOfAggregates\n++ // MIR for `dropping` after ScalarReplacementOfAggregates\n+  \n+  fn dropping() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:19: +0:19\n+      let _1: Tag;                         // in scope 0 at $DIR/structs.rs:+1:5: +1:32\n+      let mut _2: S;                       // in scope 0 at $DIR/structs.rs:+1:5: +1:30\n+      let mut _3: Tag;                     // in scope 0 at $DIR/structs.rs:+1:7: +1:13\n+      let mut _4: Tag;                     // in scope 0 at $DIR/structs.rs:+1:15: +1:21\n+      let mut _5: Tag;                     // in scope 0 at $DIR/structs.rs:+1:23: +1:29\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/structs.rs:+1:5: +1:32\n+          StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:5: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+1:7: +1:13\n+          _3 = Tag(const 0_usize);         // scope 0 at $DIR/structs.rs:+1:7: +1:13\n+          StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+1:15: +1:21\n+          _4 = Tag(const 1_usize);         // scope 0 at $DIR/structs.rs:+1:15: +1:21\n+          StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:23: +1:29\n+          _5 = Tag(const 2_usize);         // scope 0 at $DIR/structs.rs:+1:23: +1:29\n+          _2 = S(move _3, move _4, move _5); // scope 0 at $DIR/structs.rs:+1:5: +1:30\n+          StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n+          StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n+          StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n+          _1 = move (_2.1: Tag);           // scope 0 at $DIR/structs.rs:+1:5: +1:32\n+          drop(_1) -> bb1;                 // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+      }\n+  \n+      bb1: {\n+          drop((_2.0: Tag)) -> bb3;        // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          StorageDead(_1);                 // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:19: +2:2\n+          return;                          // scope 0 at $DIR/structs.rs:+2:2: +2:2\n+      }\n+  \n+      bb3: {\n+          drop((_2.2: Tag)) -> bb2;        // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+      }\n+  }\n+  "}, {"sha": "ff1e30c2d8f3c02bb1f34dc0a5736426bea59c14", "filename": "tests/mir-opt/sroa/structs.enums.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.enums.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.enums.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.enums.ScalarReplacementOfAggregates.diff?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -0,0 +1,43 @@\n+- // MIR for `enums` before ScalarReplacementOfAggregates\n++ // MIR for `enums` after ScalarReplacementOfAggregates\n+  \n+  fn enums(_1: usize) -> usize {\n+      debug a => _1;                       // in scope 0 at $DIR/structs.rs:+0:14: +0:15\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/structs.rs:+0:27: +0:32\n+      let mut _2: std::option::Option<usize>; // in scope 0 at $DIR/structs.rs:+1:22: +1:29\n+      let mut _3: usize;                   // in scope 0 at $DIR/structs.rs:+1:27: +1:28\n+      let mut _4: isize;                   // in scope 0 at $DIR/structs.rs:+1:12: +1:19\n+      scope 1 {\n+          debug a => _5;                   // in scope 1 at $DIR/structs.rs:+1:17: +1:18\n+          let _5: usize;                   // in scope 1 at $DIR/structs.rs:+1:17: +1:18\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 1 at $DIR/structs.rs:+1:22: +1:29\n+          StorageLive(_3);                 // scope 1 at $DIR/structs.rs:+1:27: +1:28\n+          _3 = _1;                         // scope 1 at $DIR/structs.rs:+1:27: +1:28\n+          _2 = Option::<usize>::Some(move _3); // scope 1 at $DIR/structs.rs:+1:22: +1:29\n+          StorageDead(_3);                 // scope 1 at $DIR/structs.rs:+1:28: +1:29\n+          _4 = discriminant(_2);           // scope 1 at $DIR/structs.rs:+1:12: +1:19\n+          switchInt(move _4) -> [1: bb1, otherwise: bb2]; // scope 1 at $DIR/structs.rs:+1:12: +1:19\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 1 at $DIR/structs.rs:+1:17: +1:18\n+          _5 = ((_2 as Some).0: usize);    // scope 1 at $DIR/structs.rs:+1:17: +1:18\n+          _0 = _5;                         // scope 1 at $DIR/structs.rs:+1:32: +1:33\n+          StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:34: +1:35\n+          goto -> bb3;                     // scope 0 at $DIR/structs.rs:+1:5: +1:46\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_usize;              // scope 0 at $DIR/structs.rs:+1:43: +1:44\n+          goto -> bb3;                     // scope 0 at $DIR/structs.rs:+1:5: +1:46\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/structs.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "d45823d4bac571f2979f05fb0ba27712600783cf", "filename": "tests/mir-opt/sroa/structs.escaping.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `escaping` before ScalarReplacementOfAggregates\n++ // MIR for `escaping` after ScalarReplacementOfAggregates\n+  \n+  fn escaping() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:19: +0:19\n+      let _1: ();                          // in scope 0 at $DIR/structs.rs:+1:5: +1:42\n+      let mut _2: *const u32;              // in scope 0 at $DIR/structs.rs:+1:7: +1:41\n+      let _3: &u32;                        // in scope 0 at $DIR/structs.rs:+1:7: +1:41\n+      let _4: Escaping;                    // in scope 0 at $DIR/structs.rs:+1:8: +1:39\n+      let mut _5: u32;                     // in scope 0 at $DIR/structs.rs:+1:34: +1:37\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/structs.rs:+1:5: +1:42\n+          StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:7: +1:41\n+          StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+1:7: +1:41\n+          StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+1:8: +1:39\n+          StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:34: +1:37\n+          _5 = g() -> bb1;                 // scope 0 at $DIR/structs.rs:+1:34: +1:37\n+                                           // mir::Constant\n+                                           // + span: $DIR/structs.rs:78:34: 78:35\n+                                           // + literal: Const { ty: fn() -> u32 {g}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _4 = Escaping { a: const 1_u32, b: const 2_u32, c: move _5 }; // scope 0 at $DIR/structs.rs:+1:8: +1:39\n+          StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:38: +1:39\n+          _3 = &(_4.0: u32);               // scope 0 at $DIR/structs.rs:+1:7: +1:41\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/structs.rs:+1:7: +1:41\n+          _1 = f(move _2) -> bb2;          // scope 0 at $DIR/structs.rs:+1:5: +1:42\n+                                           // mir::Constant\n+                                           // + span: $DIR/structs.rs:78:5: 78:6\n+                                           // + literal: Const { ty: fn(*const u32) {f}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+1:41: +1:42\n+          StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+1:42: +1:43\n+          StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+1:42: +1:43\n+          StorageDead(_1);                 // scope 0 at $DIR/structs.rs:+1:42: +1:43\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:19: +2:2\n+          return;                          // scope 0 at $DIR/structs.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "1aa11d17b67256670440b12d16331b61126ebf55", "filename": "tests/mir-opt/sroa/structs.flat.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.flat.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.flat.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.flat.ScalarReplacementOfAggregates.diff?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -0,0 +1,80 @@\n+- // MIR for `flat` before ScalarReplacementOfAggregates\n++ // MIR for `flat` after ScalarReplacementOfAggregates\n+  \n+  fn flat() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:15: +0:15\n+      let _1: u8;                          // in scope 0 at $DIR/structs.rs:+1:15: +1:16\n+      let _2: ();                          // in scope 0 at $DIR/structs.rs:+1:18: +1:19\n+      let _3: &str;                        // in scope 0 at $DIR/structs.rs:+1:21: +1:22\n+      let _4: std::option::Option<isize>;  // in scope 0 at $DIR/structs.rs:+1:24: +1:25\n+      let mut _5: Foo;                     // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n+      let mut _6: ();                      // in scope 0 at $DIR/structs.rs:+1:45: +1:47\n+      let mut _7: std::option::Option<isize>; // in scope 0 at $DIR/structs.rs:+1:60: +1:68\n++     let mut _8: u8;                      // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n++     let mut _9: ();                      // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n++     let mut _10: &str;                   // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n++     let mut _11: std::option::Option<isize>; // in scope 0 at $DIR/structs.rs:+1:30: +1:70\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/structs.rs:+1:15: +1:16\n+          debug b => _2;                   // in scope 1 at $DIR/structs.rs:+1:18: +1:19\n+          debug c => _3;                   // in scope 1 at $DIR/structs.rs:+1:21: +1:22\n+          debug d => _4;                   // in scope 1 at $DIR/structs.rs:+1:24: +1:25\n+          scope 2 {\n+              scope 3 {\n+                  scope 4 {\n+                      scope 5 {\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         StorageLive(_8);                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         StorageLive(_9);                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         StorageLive(_10);                // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         StorageLive(_11);                // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:30: +1:70\n+          StorageLive(_6);                 // scope 0 at $DIR/structs.rs:+1:45: +1:47\n+          _6 = ();                         // scope 0 at $DIR/structs.rs:+1:45: +1:47\n+          StorageLive(_7);                 // scope 0 at $DIR/structs.rs:+1:60: +1:68\n+          _7 = Option::<isize>::Some(const -4_isize); // scope 0 at $DIR/structs.rs:+1:60: +1:68\n+-         _5 = Foo { a: const 5_u8, b: move _6, c: const \"a\", d: move _7 }; // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         _8 = const 5_u8;                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         _9 = move _6;                    // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         _10 = const \"a\";                 // scope 0 at $DIR/structs.rs:+1:30: +1:70\n+                                           // mir::Constant\n+                                           // + span: $DIR/structs.rs:53:52: 53:55\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n++         _11 = move _7;                   // scope 0 at $DIR/structs.rs:+1:30: +1:70\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:30: +1:70\n+          StorageDead(_7);                 // scope 0 at $DIR/structs.rs:+1:69: +1:70\n+          StorageDead(_6);                 // scope 0 at $DIR/structs.rs:+1:69: +1:70\n+          StorageLive(_1);                 // scope 0 at $DIR/structs.rs:+1:15: +1:16\n+-         _1 = (_5.0: u8);                 // scope 0 at $DIR/structs.rs:+1:15: +1:16\n++         _1 = _8;                         // scope 0 at $DIR/structs.rs:+1:15: +1:16\n+          StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:18: +1:19\n+-         _2 = (_5.1: ());                 // scope 0 at $DIR/structs.rs:+1:18: +1:19\n++         _2 = _9;                         // scope 0 at $DIR/structs.rs:+1:18: +1:19\n+          StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+1:21: +1:22\n+-         _3 = (_5.2: &str);               // scope 0 at $DIR/structs.rs:+1:21: +1:22\n++         _3 = _10;                        // scope 0 at $DIR/structs.rs:+1:21: +1:22\n+          StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+1:24: +1:25\n+-         _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/structs.rs:+1:24: +1:25\n+-         StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         _4 = _11;                        // scope 0 at $DIR/structs.rs:+1:24: +1:25\n++         StorageDead(_8);                 // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         StorageDead(_9);                 // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         StorageDead(_10);                // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         StorageDead(_11);                // scope 0 at $DIR/structs.rs:+1:70: +1:71\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:70: +1:71\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:15: +6:2\n+          StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/structs.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "7b09ac182630f73beb6e21f2cc71539731c5b078", "filename": "tests/mir-opt/sroa/structs.ref_copies.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.ref_copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.ref_copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.ref_copies.ScalarReplacementOfAggregates.diff?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `ref_copies` before ScalarReplacementOfAggregates\n++ // MIR for `ref_copies` after ScalarReplacementOfAggregates\n+  \n+  fn ref_copies(_1: &Foo) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/structs.rs:+0:15: +0:16\n+      let mut _0: ();                      // return place in scope 0 at $DIR/structs.rs:+0:24: +0:24\n+      let _2: Foo;                         // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _5: u8;                          // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _6: ();                          // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _7: &str;                        // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n++     let _8: std::option::Option<isize>;  // in scope 0 at $DIR/structs.rs:+1:9: +1:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/structs.rs:+1:9: +1:10\n++         debug y => Foo{ .0 => _5, .1 => _6, .2 => _7, .3 => _8, }; // in scope 1 at $DIR/structs.rs:+1:9: +1:10\n+          let _3: u8;                      // in scope 1 at $DIR/structs.rs:+2:9: +2:10\n+          scope 2 {\n+              debug t => _3;               // in scope 2 at $DIR/structs.rs:+2:9: +2:10\n+              let _4: &str;                // in scope 2 at $DIR/structs.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug u => _4;           // in scope 3 at $DIR/structs.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n+-         _2 = (*_1);                      // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_6);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_7);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         StorageLive(_8);                 // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:9: +1:10\n++         _5 = ((*_1).0: u8);              // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         _6 = ((*_1).1: ());              // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         _7 = ((*_1).2: &str);            // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         _8 = ((*_1).3: std::option::Option<isize>); // scope 0 at $DIR/structs.rs:+1:13: +1:15\n++         nop;                             // scope 0 at $DIR/structs.rs:+1:13: +1:15\n+          StorageLive(_3);                 // scope 1 at $DIR/structs.rs:+2:9: +2:10\n+-         _3 = (_2.0: u8);                 // scope 1 at $DIR/structs.rs:+2:13: +2:16\n++         _3 = _5;                         // scope 1 at $DIR/structs.rs:+2:13: +2:16\n+          StorageLive(_4);                 // scope 2 at $DIR/structs.rs:+3:9: +3:10\n+-         _4 = (_2.2: &str);               // scope 2 at $DIR/structs.rs:+3:13: +3:16\n++         _4 = _7;                         // scope 2 at $DIR/structs.rs:+3:13: +3:16\n+          _0 = const ();                   // scope 0 at $DIR/structs.rs:+0:24: +4:2\n+          StorageDead(_4);                 // scope 2 at $DIR/structs.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/structs.rs:+4:1: +4:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         StorageDead(_6);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         StorageDead(_7);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         StorageDead(_8);                 // scope 0 at $DIR/structs.rs:+4:1: +4:2\n++         nop;                             // scope 0 at $DIR/structs.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/structs.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "7946eeaeae4e97227825c3b4c67f75b323abb75f", "filename": "tests/mir-opt/sroa/structs.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.rs?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -111,12 +111,12 @@ fn main() {\n     constant();\n }\n \n-// EMIT_MIR sroa.dropping.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.enums.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.structs.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.unions.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.flat.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.escaping.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.copies.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.ref_copies.ScalarReplacementOfAggregates.diff\n-// EMIT_MIR sroa.constant.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.dropping.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.enums.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.structs.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.unions.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.flat.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.escaping.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.copies.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.ref_copies.ScalarReplacementOfAggregates.diff\n+// EMIT_MIR structs.constant.ScalarReplacementOfAggregates.diff", "previous_filename": "tests/mir-opt/sroa.rs"}, {"sha": "c94e4b137bc407d7e88ac3ebbfdf2b804201af10", "filename": "tests/mir-opt/sroa/structs.structs.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.structs.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.structs.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.structs.ScalarReplacementOfAggregates.diff?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `structs` before ScalarReplacementOfAggregates\n++ // MIR for `structs` after ScalarReplacementOfAggregates\n+  \n+  fn structs(_1: f32) -> f32 {\n+      debug a => _1;                       // in scope 0 at $DIR/structs.rs:+0:16: +0:17\n+      let mut _0: f32;                     // return place in scope 0 at $DIR/structs.rs:+0:27: +0:30\n+      let mut _2: structs::U;              // in scope 0 at $DIR/structs.rs:+6:5: +6:21\n+      let mut _3: f32;                     // in scope 0 at $DIR/structs.rs:+6:18: +6:19\n++     let mut _4: usize;                   // in scope 0 at $DIR/structs.rs:+6:5: +6:21\n++     let mut _5: f32;                     // in scope 0 at $DIR/structs.rs:+6:5: +6:21\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         nop;                             // scope 0 at $DIR/structs.rs:+6:5: +6:21\n+          StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+6:18: +6:19\n+          _3 = _1;                         // scope 0 at $DIR/structs.rs:+6:18: +6:19\n+-         _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         _4 = const 0_usize;              // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         _5 = move _3;                    // scope 0 at $DIR/structs.rs:+6:5: +6:21\n++         nop;                             // scope 0 at $DIR/structs.rs:+6:5: +6:21\n+          StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+6:20: +6:21\n+-         _0 = (_2.1: f32);                // scope 0 at $DIR/structs.rs:+6:5: +6:23\n+-         StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+7:1: +7:2\n++         _0 = _5;                         // scope 0 at $DIR/structs.rs:+6:5: +6:23\n++         StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+7:1: +7:2\n++         StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+7:1: +7:2\n++         nop;                             // scope 0 at $DIR/structs.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/structs.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "5aa054589e4d37147cac9bf71c820e637b44ccd8", "filename": "tests/mir-opt/sroa/structs.unions.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.unions.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/248a5301af39f823c92927f81c847f6b2ca32fcd/tests%2Fmir-opt%2Fsroa%2Fstructs.unions.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.unions.ScalarReplacementOfAggregates.diff?ref=248a5301af39f823c92927f81c847f6b2ca32fcd", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `unions` before ScalarReplacementOfAggregates\n++ // MIR for `unions` after ScalarReplacementOfAggregates\n+  \n+  fn unions(_1: f32) -> u32 {\n+      debug a => _1;                       // in scope 0 at $DIR/structs.rs:+0:15: +0:16\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/structs.rs:+0:26: +0:29\n+      let mut _2: unions::Repr;            // in scope 0 at $DIR/structs.rs:+5:14: +5:27\n+      let mut _3: f32;                     // in scope 0 at $DIR/structs.rs:+5:24: +5:25\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 1 at $DIR/structs.rs:+5:14: +5:27\n+          StorageLive(_3);                 // scope 1 at $DIR/structs.rs:+5:24: +5:25\n+          _3 = _1;                         // scope 1 at $DIR/structs.rs:+5:24: +5:25\n+          _2 = Repr { f: move _3 };        // scope 1 at $DIR/structs.rs:+5:14: +5:27\n+          StorageDead(_3);                 // scope 1 at $DIR/structs.rs:+5:26: +5:27\n+          _0 = (_2.1: u32);                // scope 1 at $DIR/structs.rs:+5:14: +5:29\n+          StorageDead(_2);                 // scope 0 at $DIR/structs.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/structs.rs:+6:2: +6:2\n+      }\n+  }\n+  "}]}